{"sha": "5728d7186e64966a20ece3dc479153219a47ba17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MjhkNzE4NmU2NDk2NmEyMGVjZTNkYzQ3OTE1MzIxOWE0N2JhMTc=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-01-22T22:31:19Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-01-22T22:39:43Z"}, "message": "Deduplicate variant matching", "tree": {"sha": "6b337aa5e673f30cc6168f882ec5a85076bbc48b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b337aa5e673f30cc6168f882ec5a85076bbc48b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5728d7186e64966a20ece3dc479153219a47ba17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5728d7186e64966a20ece3dc479153219a47ba17", "html_url": "https://github.com/rust-lang/rust/commit/5728d7186e64966a20ece3dc479153219a47ba17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5728d7186e64966a20ece3dc479153219a47ba17/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24f0cd8293c73b376a5e448dcbadcf189e8698aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/24f0cd8293c73b376a5e448dcbadcf189e8698aa", "html_url": "https://github.com/rust-lang/rust/commit/24f0cd8293c73b376a5e448dcbadcf189e8698aa"}], "stats": {"total": 67, "additions": 25, "deletions": 42}, "files": [{"sha": "7663d211d2fd5c22d498252e58f69bf8ed838698", "filename": "crates/assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5728d7186e64966a20ece3dc479153219a47ba17/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728d7186e64966a20ece3dc479153219a47ba17/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=5728d7186e64966a20ece3dc479153219a47ba17", "patch": "@@ -8,7 +8,7 @@ use syntax::ast::{self, make, AstNode, MatchArm, NameOwner, Pat};\n use test_utils::mark;\n \n use crate::{\n-    utils::{render_snippet, Cursor},\n+    utils::{does_pat_match_variant, render_snippet, Cursor},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -147,25 +147,6 @@ fn is_variant_missing(existing_arms: &mut Vec<MatchArm>, var: &Pat) -> bool {\n     })\n }\n \n-fn does_pat_match_variant(pat: &Pat, var: &Pat) -> bool {\n-    let first_node_text = |pat: &Pat| pat.syntax().first_child().map(|node| node.text());\n-\n-    let pat_head = match pat {\n-        Pat::IdentPat(bind_pat) => {\n-            if let Some(p) = bind_pat.pat() {\n-                first_node_text(&p)\n-            } else {\n-                return false;\n-            }\n-        }\n-        pat => first_node_text(pat),\n-    };\n-\n-    let var_head = first_node_text(var);\n-\n-    pat_head == var_head\n-}\n-\n fn resolve_enum_def(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<hir::Enum> {\n     sema.type_of_expr(&expr)?.autoderef(sema.db).find_map(|ty| match ty.as_adt() {\n         Some(Adt::Enum(e)) => Some(e),"}, {"sha": "aee880625f8d1a34d5813955d417716df4697a45", "filename": "crates/assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5728d7186e64966a20ece3dc479153219a47ba17/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728d7186e64966a20ece3dc479153219a47ba17/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=5728d7186e64966a20ece3dc479153219a47ba17", "patch": "@@ -5,12 +5,15 @@ use syntax::{\n     ast::{\n         self,\n         edit::{AstNodeEdit, IndentLevel},\n-        make, Pat,\n+        make,\n     },\n     AstNode,\n };\n \n-use crate::{utils::unwrap_trivial_block, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{\n+    utils::{does_pat_match_variant, unwrap_trivial_block},\n+    AssistContext, AssistId, AssistKind, Assists,\n+};\n \n // Assist: replace_if_let_with_match\n //\n@@ -87,26 +90,6 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n     )\n }\n \n-fn does_pat_match_variant(pat: &Pat, var: &Pat) -> bool {\n-    let first_node_text = |pat: &Pat| pat.syntax().first_child().map(|node| node.text());\n-\n-    let pat_head = match pat {\n-        Pat::IdentPat(bind_pat) => {\n-            if let Some(p) = bind_pat.pat() {\n-                first_node_text(&p)\n-            } else {\n-                return pat.syntax().text() == var.syntax().text();\n-            }\n-        }\n-        pat => first_node_text(pat),\n-    };\n-\n-    let var_head = first_node_text(var);\n-    println!(\"{:?} {:?}\", pat_head, var_head);\n-\n-    pat_head == var_head\n-}\n-\n // Assist: replace_match_with_if_let\n //\n // Replaces a binary `match` with a wildcard pattern and no guards with an `if let` expression."}, {"sha": "4e762e18b82609a11519f66e346e9b48053dd651", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5728d7186e64966a20ece3dc479153219a47ba17/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728d7186e64966a20ece3dc479153219a47ba17/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=5728d7186e64966a20ece3dc479153219a47ba17", "patch": "@@ -248,3 +248,22 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n pub(crate) fn next_prev() -> impl Iterator<Item = Direction> {\n     [Direction::Next, Direction::Prev].iter().copied()\n }\n+\n+pub(crate) fn does_pat_match_variant(pat: &ast::Pat, var: &ast::Pat) -> bool {\n+    let first_node_text = |pat: &ast::Pat| pat.syntax().first_child().map(|node| node.text());\n+\n+    let pat_head = match pat {\n+        ast::Pat::IdentPat(bind_pat) => {\n+            if let Some(p) = bind_pat.pat() {\n+                first_node_text(&p)\n+            } else {\n+                return pat.syntax().text() == var.syntax().text();\n+            }\n+        }\n+        pat => first_node_text(pat),\n+    };\n+\n+    let var_head = first_node_text(var);\n+\n+    pat_head == var_head\n+}"}]}