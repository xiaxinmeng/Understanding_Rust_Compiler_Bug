{"sha": "76db37ee4b916a678181b36e42c26d92524e7041", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZGIzN2VlNGI5MTZhNjc4MTgxYjM2ZTQyYzI2ZDkyNTI0ZTcwNDE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-28T22:44:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-28T23:34:01Z"}, "message": "std: Stabilize a number of small APIs\n\nThe following APIs were all marked with a `#[stable]` tag:\n\n* process::Child::id\n* error::Error::is\n* error::Error::downcast\n* error::Error::downcast_ref\n* error::Error::downcast_mut\n* io::Error::get_ref\n* io::Error::get_mut\n* io::Error::into_inner\n* hash::Hash::hash_slice\n* hash::Hasher::write_{i,u}{8,16,32,64,size}", "tree": {"sha": "8043944bade48a2a63c63019a19f8eaee3cf6662", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8043944bade48a2a63c63019a19f8eaee3cf6662"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76db37ee4b916a678181b36e42c26d92524e7041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76db37ee4b916a678181b36e42c26d92524e7041", "html_url": "https://github.com/rust-lang/rust/commit/76db37ee4b916a678181b36e42c26d92524e7041", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76db37ee4b916a678181b36e42c26d92524e7041/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba9224f35451e5d5ef7647bd2b40e5da80ce2735", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9224f35451e5d5ef7647bd2b40e5da80ce2735", "html_url": "https://github.com/rust-lang/rust/commit/ba9224f35451e5d5ef7647bd2b40e5da80ce2735"}], "stats": {"total": 142, "additions": 111, "deletions": 31}, "files": [{"sha": "234252faa6e09048ce1232f0ed0b8aafd02a518a", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/76db37ee4b916a678181b36e42c26d92524e7041/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76db37ee4b916a678181b36e42c26d92524e7041/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=76db37ee4b916a678181b36e42c26d92524e7041", "patch": "@@ -89,8 +89,7 @@ pub trait Hash {\n     fn hash<H: Hasher>(&self, state: &mut H);\n \n     /// Feeds a slice of this type into the state provided.\n-    #[unstable(feature = \"hash_slice\",\n-               reason = \"module was recently redesigned\")]\n+    #[stable(feature = \"hash_slice\", since = \"1.3.0\")]\n     fn hash_slice<H: Hasher>(data: &[Self], state: &mut H) where Self: Sized {\n         for piece in data {\n             piece.hash(state);\n@@ -111,29 +110,29 @@ pub trait Hasher {\n \n     /// Write a single `u8` into this hasher\n     #[inline]\n-    #[unstable(feature = \"hasher_write\", reason = \"module was recently redesigned\")]\n+    #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_u8(&mut self, i: u8) { self.write(&[i]) }\n     /// Write a single `u16` into this hasher.\n     #[inline]\n-    #[unstable(feature = \"hasher_write\", reason = \"module was recently redesigned\")]\n+    #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_u16(&mut self, i: u16) {\n         self.write(&unsafe { mem::transmute::<_, [u8; 2]>(i) })\n     }\n     /// Write a single `u32` into this hasher.\n     #[inline]\n-    #[unstable(feature = \"hasher_write\", reason = \"module was recently redesigned\")]\n+    #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_u32(&mut self, i: u32) {\n         self.write(&unsafe { mem::transmute::<_, [u8; 4]>(i) })\n     }\n     /// Write a single `u64` into this hasher.\n     #[inline]\n-    #[unstable(feature = \"hasher_write\", reason = \"module was recently redesigned\")]\n+    #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_u64(&mut self, i: u64) {\n         self.write(&unsafe { mem::transmute::<_, [u8; 8]>(i) })\n     }\n     /// Write a single `usize` into this hasher.\n     #[inline]\n-    #[unstable(feature = \"hasher_write\", reason = \"module was recently redesigned\")]\n+    #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_usize(&mut self, i: usize) {\n         if cfg!(target_pointer_width = \"32\") {\n             self.write_u32(i as u32)\n@@ -144,23 +143,23 @@ pub trait Hasher {\n \n     /// Write a single `i8` into this hasher.\n     #[inline]\n-    #[unstable(feature = \"hasher_write\", reason = \"module was recently redesigned\")]\n+    #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_i8(&mut self, i: i8) { self.write_u8(i as u8) }\n     /// Write a single `i16` into this hasher.\n     #[inline]\n-    #[unstable(feature = \"hasher_write\", reason = \"module was recently redesigned\")]\n+    #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_i16(&mut self, i: i16) { self.write_u16(i as u16) }\n     /// Write a single `i32` into this hasher.\n     #[inline]\n-    #[unstable(feature = \"hasher_write\", reason = \"module was recently redesigned\")]\n+    #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_i32(&mut self, i: i32) { self.write_u32(i as u32) }\n     /// Write a single `i64` into this hasher.\n     #[inline]\n-    #[unstable(feature = \"hasher_write\", reason = \"module was recently redesigned\")]\n+    #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_i64(&mut self, i: i64) { self.write_u64(i as u64) }\n     /// Write a single `isize` into this hasher.\n     #[inline]\n-    #[unstable(feature = \"hasher_write\", reason = \"module was recently redesigned\")]\n+    #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_isize(&mut self, i: isize) { self.write_usize(i as usize) }\n }\n "}, {"sha": "4d08f08bb6eb93929aaedd3ce690008ddc78796f", "filename": "src/libstd/error.rs", "status": "modified", "additions": 93, "deletions": 9, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/76db37ee4b916a678181b36e42c26d92524e7041/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76db37ee4b916a678181b36e42c26d92524e7041/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=76db37ee4b916a678181b36e42c26d92524e7041", "patch": "@@ -168,7 +168,7 @@ impl Error for string::FromUtf16Error {\n // copied from any.rs\n impl Error + 'static {\n     /// Returns true if the boxed type is the same as `T`\n-    #[unstable(feature = \"error_downcast\", reason = \"recently added\")]\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn is<T: Error + 'static>(&self) -> bool {\n         // Get TypeId of the type this function is instantiated with\n@@ -183,7 +183,7 @@ impl Error + 'static {\n \n     /// Returns some reference to the boxed value if it is of type `T`, or\n     /// `None` if it isn't.\n-    #[unstable(feature = \"error_downcast\", reason = \"recently added\")]\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n         if self.is::<T>() {\n@@ -201,7 +201,7 @@ impl Error + 'static {\n \n     /// Returns some mutable reference to the boxed value if it is of type `T`, or\n     /// `None` if it isn't.\n-    #[unstable(feature = \"error_downcast\", reason = \"recently added\")]\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n         if self.is::<T>() {\n@@ -220,21 +220,44 @@ impl Error + 'static {\n \n impl Error + 'static + Send {\n     /// Forwards to the method defined on the type `Any`.\n-    #[unstable(feature = \"error_downcast\", reason = \"recently added\")]\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn is<T: Error + 'static>(&self) -> bool {\n         <Error + 'static>::is::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n-    #[unstable(feature = \"error_downcast\", reason = \"recently added\")]\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n         <Error + 'static>::downcast_ref::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n-    #[unstable(feature = \"error_downcast\", reason = \"recently added\")]\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n+    #[inline]\n+    pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n+        <Error + 'static>::downcast_mut::<T>(self)\n+    }\n+}\n+\n+impl Error + 'static + Send + Sync {\n+    /// Forwards to the method defined on the type `Any`.\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n+    #[inline]\n+    pub fn is<T: Error + 'static>(&self) -> bool {\n+        <Error + 'static>::is::<T>(self)\n+    }\n+\n+    /// Forwards to the method defined on the type `Any`.\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n+    #[inline]\n+    pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n+        <Error + 'static>::downcast_ref::<T>(self)\n+    }\n+\n+    /// Forwards to the method defined on the type `Any`.\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n         <Error + 'static>::downcast_mut::<T>(self)\n@@ -243,7 +266,7 @@ impl Error + 'static + Send {\n \n impl Error {\n     #[inline]\n-    #[unstable(feature = \"error_downcast\", reason = \"recently added\")]\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     /// Attempt to downcast the box to a concrete type.\n     pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<Error>> {\n         if self.is::<T>() {\n@@ -264,13 +287,74 @@ impl Error {\n \n impl Error + Send {\n     #[inline]\n-    #[unstable(feature = \"error_downcast\", reason = \"recently added\")]\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     /// Attempt to downcast the box to a concrete type.\n-    pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<Error + Send>> {\n+    pub fn downcast<T: Error + 'static>(self: Box<Self>)\n+                                        -> Result<Box<T>, Box<Error + Send>> {\n         let err: Box<Error> = self;\n         <Error>::downcast(err).map_err(|s| unsafe {\n             // reapply the Send marker\n             transmute::<Box<Error>, Box<Error + Send>>(s)\n         })\n     }\n }\n+\n+impl Error + Send + Sync {\n+    #[inline]\n+    #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n+    /// Attempt to downcast the box to a concrete type.\n+    pub fn downcast<T: Error + 'static>(self: Box<Self>)\n+                                        -> Result<Box<T>, Box<Self>> {\n+        let err: Box<Error> = self;\n+        <Error>::downcast(err).map_err(|s| unsafe {\n+            // reapply the Send+Sync marker\n+            transmute::<Box<Error>, Box<Error + Send + Sync>>(s)\n+        })\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use prelude::v1::*;\n+    use super::Error;\n+    use fmt;\n+\n+    #[derive(Debug, PartialEq)]\n+    struct A;\n+    #[derive(Debug, PartialEq)]\n+    struct B;\n+\n+    impl fmt::Display for A {\n+        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            write!(f, \"A\")\n+        }\n+    }\n+    impl fmt::Display for B {\n+        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            write!(f, \"B\")\n+        }\n+    }\n+\n+    impl Error for A {\n+        fn description(&self) -> &str { \"A-desc\" }\n+    }\n+    impl Error for B {\n+        fn description(&self) -> &str { \"A-desc\" }\n+    }\n+\n+    #[test]\n+    fn downcasting() {\n+        let mut a = A;\n+        let mut a = &mut a as &mut (Error + 'static);\n+        assert_eq!(a.downcast_ref::<A>(), Some(&A));\n+        assert_eq!(a.downcast_ref::<B>(), None);\n+        assert_eq!(a.downcast_mut::<A>(), Some(&mut A));\n+        assert_eq!(a.downcast_mut::<B>(), None);\n+\n+        let a: Box<Error> = Box::new(A);\n+        match a.downcast::<B>() {\n+            Ok(..) => panic!(\"expected error\"),\n+            Err(e) => assert_eq!(*e.downcast::<A>().unwrap(), A),\n+        }\n+    }\n+}"}, {"sha": "e12e202148b53e8d970ea7a5f1842b936359e9cd", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/76db37ee4b916a678181b36e42c26d92524e7041/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76db37ee4b916a678181b36e42c26d92524e7041/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=76db37ee4b916a678181b36e42c26d92524e7041", "patch": "@@ -219,8 +219,7 @@ impl Error {\n     ///\n     /// If this `Error` was constructed via `new` then this function will\n     /// return `Some`, otherwise it will return `None`.\n-    #[unstable(feature = \"io_error_inner\",\n-               reason = \"recently added and requires UFCS to downcast\")]\n+    #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n     pub fn get_ref(&self) -> Option<&(error::Error+Send+Sync+'static)> {\n         match self.repr {\n             Repr::Os(..) => None,\n@@ -233,8 +232,7 @@ impl Error {\n     ///\n     /// If this `Error` was constructed via `new` then this function will\n     /// return `Some`, otherwise it will return `None`.\n-    #[unstable(feature = \"io_error_inner\",\n-               reason = \"recently added and requires UFCS to downcast\")]\n+    #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n     pub fn get_mut(&mut self) -> Option<&mut (error::Error+Send+Sync+'static)> {\n         match self.repr {\n             Repr::Os(..) => None,\n@@ -246,8 +244,7 @@ impl Error {\n     ///\n     /// If this `Error` was constructed via `new` then this function will\n     /// return `Some`, otherwise it will return `None`.\n-    #[unstable(feature = \"io_error_inner\",\n-               reason = \"recently added and requires UFCS to downcast\")]\n+    #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n     pub fn into_inner(self) -> Option<Box<error::Error+Send+Sync>> {\n         match self.repr {\n             Repr::Os(..) => None,\n@@ -349,10 +346,10 @@ mod test {\n         // we have to call all of these UFCS style right now since method\n         // resolution won't implicitly drop the Send+Sync bounds\n         let mut err = Error::new(ErrorKind::Other, TestError);\n-        assert!(error::Error::is::<TestError>(err.get_ref().unwrap()));\n+        assert!(err.get_ref().unwrap().is::<TestError>());\n         assert_eq!(\"asdf\", err.get_ref().unwrap().description());\n-        assert!(error::Error::is::<TestError>(err.get_mut().unwrap()));\n+        assert!(err.get_mut().unwrap().is::<TestError>());\n         let extracted = err.into_inner().unwrap();\n-        error::Error::downcast::<TestError>(extracted).unwrap();\n+        extracted.downcast::<TestError>().unwrap();\n     }\n }"}, {"sha": "e07ed37125b9c6a14320b093468dd3116d36b38a", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76db37ee4b916a678181b36e42c26d92524e7041/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76db37ee4b916a678181b36e42c26d92524e7041/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=76db37ee4b916a678181b36e42c26d92524e7041", "patch": "@@ -505,7 +505,7 @@ impl Child {\n     }\n \n     /// Returns the OS-assigned process identifier associated with this child.\n-    #[unstable(feature = \"process_id\", reason = \"api recently added\")]\n+    #[stable(feature = \"process_id\", since = \"1.3.0\")]\n     pub fn id(&self) -> u32 {\n         self.handle.id()\n     }"}]}