{"sha": "fa8553e41735d94cab81dba68c284d81e3f23107", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhODU1M2U0MTczNWQ5NGNhYjgxZGJhNjhjMjg0ZDgxZTNmMjMxMDc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-18T19:37:40Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-23T22:23:02Z"}, "message": "extra: switch json from hashmaps to treemaps", "tree": {"sha": "fddee3fe16b9ebbb2c60efa06c80a1b7cc12d9af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fddee3fe16b9ebbb2c60efa06c80a1b7cc12d9af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa8553e41735d94cab81dba68c284d81e3f23107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa8553e41735d94cab81dba68c284d81e3f23107", "html_url": "https://github.com/rust-lang/rust/commit/fa8553e41735d94cab81dba68c284d81e3f23107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa8553e41735d94cab81dba68c284d81e3f23107/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e4ebdb9d612bc8d493f448386dbd99afb856818", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4ebdb9d612bc8d493f448386dbd99afb856818", "html_url": "https://github.com/rust-lang/rust/commit/9e4ebdb9d612bc8d493f448386dbd99afb856818"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "6a7f0607dd66aa3240f999534240302839ec4ca0", "filename": "src/libextra/json.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fa8553e41735d94cab81dba68c284d81e3f23107/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8553e41735d94cab81dba68c284d81e3f23107/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=fa8553e41735d94cab81dba68c284d81e3f23107", "patch": "@@ -41,7 +41,7 @@ pub enum Json {\n }\n \n pub type List = ~[Json];\n-pub type Object = HashMap<~str, Json>;\n+pub type Object = TreeMap<~str, Json>;\n \n #[deriving(Eq)]\n /// If an error occurs while parsing some JSON, this is the structure which is\n@@ -809,7 +809,7 @@ impl<T : iterator::Iterator<char>> Parser<T> {\n         self.bump();\n         self.parse_whitespace();\n \n-        let mut values = ~HashMap::new();\n+        let mut values = ~TreeMap::new();\n \n         if self.ch == '}' {\n           self.bump();\n@@ -1087,7 +1087,7 @@ impl serialize::Decoder for Decoder {\n         let len = match self.stack.pop() {\n             Object(obj) => {\n                 let len = obj.len();\n-                for obj.consume().advance |(key, value)| {\n+                for obj.consume_iter().advance |(key, value)| {\n                     self.stack.push(value);\n                     self.stack.push(String(key));\n                 }\n@@ -1294,19 +1294,19 @@ impl<A:ToJson> ToJson for ~[A] {\n     fn to_json(&self) -> Json { List(self.map(|elt| elt.to_json())) }\n }\n \n-impl<A:ToJson> ToJson for HashMap<~str, A> {\n+impl<A:ToJson> ToJson for TreeMap<~str, A> {\n     fn to_json(&self) -> Json {\n-        let mut d = HashMap::new();\n+        let mut d = TreeMap::new();\n         for self.iter().advance |(key, value)| {\n             d.insert((*key).clone(), value.to_json());\n         }\n         Object(~d)\n     }\n }\n \n-impl<A:ToJson> ToJson for TreeMap<~str, A> {\n+impl<A:ToJson> ToJson for HashMap<~str, A> {\n     fn to_json(&self) -> Json {\n-        let mut d = HashMap::new();\n+        let mut d = TreeMap::new();\n         for self.iter().advance |(key, value)| {\n             d.insert((*key).clone(), value.to_json());\n         }\n@@ -1338,11 +1338,11 @@ mod tests {\n \n     use super::*;\n \n-    use std::hashmap::HashMap;\n     use std::io;\n     use std::result;\n \n-    use extra::serialize::Decodable;\n+    use serialize::Decodable;\n+    use treemap::TreeMap;\n \n     #[deriving(Eq, Encodable, Decodable)]\n     enum Animal {\n@@ -1363,7 +1363,7 @@ mod tests {\n     }\n \n     fn mk_object(items: &[(~str, Json)]) -> Json {\n-        let mut d = ~HashMap::new();\n+        let mut d = ~TreeMap::new();\n \n         for items.iter().advance |item| {\n             match *item {\n@@ -1954,7 +1954,7 @@ mod tests {\n     fn test_decode_map() {\n         let s = ~\"{\\\"a\\\": \\\"Dog\\\", \\\"b\\\": [\\\"Frog\\\", \\\"Henry\\\", 349]}\";\n         let mut decoder = Decoder(from_str(s).unwrap());\n-        let mut map: HashMap<~str, Animal> = Decodable::decode(&mut decoder);\n+        let mut map: TreeMap<~str, Animal> = Decodable::decode(&mut decoder);\n \n         assert_eq!(map.pop(&~\"a\"), Some(Dog));\n         assert_eq!(map.pop(&~\"b\"), Some(Frog(~\"Henry\", 349)));"}, {"sha": "a5705d08b72bed1ef28c903c8a1c181cd9136e7d", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa8553e41735d94cab81dba68c284d81e3f23107/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8553e41735d94cab81dba68c284d81e3f23107/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=fa8553e41735d94cab81dba68c284d81e3f23107", "patch": "@@ -38,7 +38,6 @@ use std::task;\n use std::to_str::ToStr;\n use std::u64;\n use std::f64;\n-use std::hashmap::HashMap;\n use std::os;\n \n \n@@ -852,7 +851,7 @@ fn calc_result(desc: &TestDesc, task_succeeded: bool) -> TestResult {\n \n impl ToJson for Metric {\n     fn to_json(&self) -> json::Json {\n-        let mut map = ~HashMap::new();\n+        let mut map = ~TreeMap::new();\n         map.insert(~\"value\", json::Number(self.value as float));\n         map.insert(~\"noise\", json::Number(self.noise as float));\n         json::Object(map)"}, {"sha": "75b479592edb2144d5d8ab851c672e9946111e64", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa8553e41735d94cab81dba68c284d81e3f23107/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8553e41735d94cab81dba68c284d81e3f23107/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=fa8553e41735d94cab81dba68c284d81e3f23107", "patch": "@@ -21,7 +21,6 @@ use treemap::TreeMap;\n use std::cell::Cell;\n use std::comm::{PortOne, oneshot, send_one, recv_one};\n use std::either::{Either, Left, Right};\n-use std::hashmap::HashMap;\n use std::io;\n use std::result;\n use std::run;\n@@ -381,7 +380,7 @@ fn test() {\n     }\n \n     let cx = Context::new(RWARC(Database::new(Path(\"db.json\"))),\n-                          Logger::new(), HashMap::new());\n+                          Logger::new(), TreeMap::new());\n \n     let s = do cx.with_prep(\"test1\") |prep| {\n         prep.declare_input(\"file\", pth.to_str(), digest_file(&pth));"}]}