{"sha": "a73f4b1baa3533956582ec9892cc4d1780e45ed0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3M2Y0YjFiYWEzNTMzOTU2NTgyZWM5ODkyY2M0ZDE3ODBlNDVlZDA=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-15T16:41:47Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-18T00:54:11Z"}, "message": "implement symmetric_difference", "tree": {"sha": "2006467d5614504feafd0231b01ae7855d222daf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2006467d5614504feafd0231b01ae7855d222daf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a73f4b1baa3533956582ec9892cc4d1780e45ed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a73f4b1baa3533956582ec9892cc4d1780e45ed0", "html_url": "https://github.com/rust-lang/rust/commit/a73f4b1baa3533956582ec9892cc4d1780e45ed0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a73f4b1baa3533956582ec9892cc4d1780e45ed0/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d44084e10084c1f442f8eb8932590c252eb6df85", "url": "https://api.github.com/repos/rust-lang/rust/commits/d44084e10084c1f442f8eb8932590c252eb6df85", "html_url": "https://github.com/rust-lang/rust/commit/d44084e10084c1f442f8eb8932590c252eb6df85"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "dca54abdfeec9c21b4510bbbd4e87a27d0054c2c", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a73f4b1baa3533956582ec9892cc4d1780e45ed0/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a73f4b1baa3533956582ec9892cc4d1780e45ed0/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=a73f4b1baa3533956582ec9892cc4d1780e45ed0", "patch": "@@ -279,15 +279,45 @@ impl <T: Ord> TreeSet<T> {\n \n     /// Visit the values (in-order) representing the symmetric difference\n     pure fn symmetric_difference(&self, other: &TreeSet<T>,\n-                                 _f: fn(&T) -> bool) {\n+                                 f: fn(&T) -> bool) {\n         unsafe { // purity workaround\n             let mut x = self.map.iter();\n             let mut y = other.map.iter();\n \n             let mut a = x.next();\n             let mut b = y.next();\n+\n+            while a.is_some() {\n+                if b.is_none() {\n+                    while a.is_some() {\n+                        let (a1, _) = a.unwrap();\n+                        if !f(a1) { return }\n+                        a = x.next();\n+                    }\n+                    return\n+                }\n+\n+                let (a1, _) = a.unwrap();\n+                let (b1, _) = b.unwrap();\n+\n+                if a1 < b1 {\n+                    if !f(a1) { return }\n+                    a = x.next();\n+                } else {\n+                    if b1 < a1 {\n+                        if !f(b1) { return }\n+                    } else {\n+                        a = x.next();\n+                    }\n+                    b = y.next();\n+                }\n+            }\n+            while b.is_some() {\n+                let (b1, _) = b.unwrap();\n+                if !f(b1) { return }\n+                b = y.next();\n+            }\n         }\n-        fail ~\"not yet implemented\"\n     }\n \n     /// Visit the values (in-order) representing the intersection\n@@ -895,6 +925,32 @@ mod test_set {\n         assert i == expected.len();\n     }\n \n+    #[test]\n+    fn test_symmetric_difference() {\n+        let mut a = TreeSet::new();\n+        let mut b = TreeSet::new();\n+\n+        assert a.insert(1);\n+        assert a.insert(3);\n+        assert a.insert(5);\n+        assert a.insert(9);\n+        assert a.insert(11);\n+\n+        assert b.insert(-2);\n+        assert b.insert(3);\n+        assert b.insert(9);\n+        assert b.insert(14);\n+        assert b.insert(22);\n+\n+        let mut i = 0;\n+        let expected = [-2, 1, 5, 11, 14, 22];\n+        for a.symmetric_difference(&b) |x| {\n+            assert *x == expected[i];\n+            i += 1\n+        }\n+        assert i == expected.len();\n+    }\n+\n     #[test]\n     fn test_union() {\n         let mut a = TreeSet::new();"}]}