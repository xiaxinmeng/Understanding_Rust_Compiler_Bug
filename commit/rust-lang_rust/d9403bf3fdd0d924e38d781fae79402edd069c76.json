{"sha": "d9403bf3fdd0d924e38d781fae79402edd069c76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NDAzYmYzZmRkMGQ5MjRlMzhkNzgxZmFlNzk0MDJlZGQwNjljNzY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-11T19:36:29Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-11T19:36:29Z"}, "message": "Implement weak linkage for statics", "tree": {"sha": "36f62483cfe57dbea4349606414af82da1841cd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36f62483cfe57dbea4349606414af82da1841cd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9403bf3fdd0d924e38d781fae79402edd069c76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9403bf3fdd0d924e38d781fae79402edd069c76", "html_url": "https://github.com/rust-lang/rust/commit/d9403bf3fdd0d924e38d781fae79402edd069c76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9403bf3fdd0d924e38d781fae79402edd069c76/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfe8c89d41681264e0d8f06a458ac0091dbc43f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe8c89d41681264e0d8f06a458ac0091dbc43f0", "html_url": "https://github.com/rust-lang/rust/commit/bfe8c89d41681264e0d8f06a458ac0091dbc43f0"}], "stats": {"total": 102, "additions": 85, "deletions": 17}, "files": [{"sha": "4dea94e36872c7efda81a7a4477550cd9dde034e", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d9403bf3fdd0d924e38d781fae79402edd069c76/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9403bf3fdd0d924e38d781fae79402edd069c76/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=d9403bf3fdd0d924e38d781fae79402edd069c76", "patch": "@@ -1,6 +1,6 @@\n // Adapted from https://github.com/sunfishcode/mir2cranelift/blob/master/rust-examples/nocore-hello-world.rs\n \n-#![feature(no_core, unboxed_closures, start, lang_items, box_syntax, slice_patterns)]\n+#![feature(no_core, unboxed_closures, start, lang_items, box_syntax, slice_patterns, never_type, linkage)]\n #![no_core]\n #![allow(dead_code)]\n \n@@ -192,4 +192,18 @@ fn main() {\n     }\n \n     assert_eq!(((|()| 42u8) as fn(()) -> u8)(()), 42);\n+\n+    extern {\n+        #[linkage = \"weak\"]\n+        static ABC: *const u8;\n+    }\n+\n+    {\n+        extern {\n+            #[linkage = \"weak\"]\n+            static ABC: *const u8;\n+        }\n+    }\n+\n+    unsafe { assert_eq!(ABC as usize, 0); }\n }"}, {"sha": "14e7585b812e57c71561b64092415f07159aabda", "filename": "src/constant.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d9403bf3fdd0d924e38d781fae79402edd069c76/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9403bf3fdd0d924e38d781fae79402edd069c76/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=d9403bf3fdd0d924e38d781fae79402edd069c76", "patch": "@@ -46,7 +46,8 @@ pub fn codegen_static_ref<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     static_: &Static<'tcx>,\n ) -> CPlace<'tcx> {\n-    let data_id = data_id_for_static(fx.tcx, fx.module, static_.def_id, Linkage::Import);\n+    let linkage = crate::linkage::get_static_ref_linkage(fx.tcx, static_.def_id);\n+    let data_id = data_id_for_static(fx.tcx, fx.module, static_.def_id, linkage);\n     cplace_for_dataid(fx, static_.ty, data_id)\n }\n \n@@ -188,9 +189,32 @@ fn data_id_for_static<'a, 'tcx: 'a, B: Backend>(\n         !tcx.type_of(def_id)\n             .is_freeze(tcx, ParamEnv::reveal_all(), DUMMY_SP)\n     };\n-    module\n+\n+    let data_id = module\n         .declare_data(&*symbol_name, linkage, is_mutable)\n-        .unwrap()\n+        .unwrap();\n+\n+    if linkage == Linkage::Preemptible {\n+        if let ty::RawPtr(_) = tcx.type_of(def_id).sty {\n+        } else {\n+            tcx.sess.span_fatal(tcx.def_span(def_id), \"must have type `*const T` or `*mut T`\")\n+        }\n+\n+        let mut data_ctx = DataContext::new();\n+        let zero_bytes = std::iter::repeat(0)\n+            .take(pointer_ty(tcx).bytes() as usize)\n+            .collect::<Vec<u8>>()\n+            .into_boxed_slice();\n+        data_ctx.define(zero_bytes);\n+        match module.define_data(data_id, &data_ctx) {\n+            // Everytime a weak static is referenced, there will be a zero pointer definition,\n+            // so duplicate definitions are expected and allowed.\n+            Err(ModuleError::DuplicateDefinition(_)) => {}\n+            res => res.unwrap(),\n+        }\n+    }\n+\n+    data_id\n }\n \n fn cplace_for_dataid<'a, 'tcx: 'a>(\n@@ -222,6 +246,11 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n             }\n             TodoItem::Static(def_id) => {\n                 //println!(\"static {:?}\", def_id);\n+\n+                if tcx.is_foreign_item(def_id) {\n+                    continue;\n+                }\n+\n                 let instance = ty::Instance::mono(tcx, def_id);\n                 let cid = GlobalId {\n                     instance,\n@@ -234,6 +263,7 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n                     _ => bug!(\"static const eval returned {:#?}\", const_),\n                 };\n \n+                // FIXME set correct linkage\n                 let data_id = data_id_for_static(tcx, module, def_id, Linkage::Export);\n                 (data_id, alloc)\n             }\n@@ -271,7 +301,8 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n                 }\n                 AllocKind::Static(def_id) => {\n                     cx.todo.insert(TodoItem::Static(def_id));\n-                    data_id_for_static(tcx, module, def_id, Linkage::Import)\n+                    let linkage = crate::linkage::get_static_ref_linkage(tcx, def_id);\n+                    data_id_for_static(tcx, module, def_id, linkage)\n                 }\n             };\n "}, {"sha": "f9f899a857546438976b1860a72371977b9642f2", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d9403bf3fdd0d924e38d781fae79402edd069c76/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9403bf3fdd0d924e38d781fae79402edd069c76/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d9403bf3fdd0d924e38d781fae79402edd069c76", "patch": "@@ -29,6 +29,7 @@ use rustc_codegen_ssa::back::linker::LinkerInfo;\n use rustc_codegen_ssa::CrateInfo;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_codegen_utils::link::out_filename;\n+use rustc_mir::monomorphize::partitioning::CodegenUnitExt;\n \n use cranelift::codegen::settings;\n use cranelift_faerie::*;\n@@ -47,6 +48,7 @@ mod debuginfo;\n mod intrinsics;\n mod link;\n mod link_copied;\n+mod linkage;\n mod main_shim;\n mod metadata;\n mod pretty_clif;\n@@ -368,7 +370,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             .downcast::<CodegenResults>()\n             .expect(\"Expected CraneliftCodegenBackend's CodegenResult, found Box<Any>\");\n \n-        for &crate_type in sess.opts.crate_types.iter() {\n+        for &crate_type in sess.crate_types.borrow().iter() {\n             let output_name = out_filename(sess, crate_type, &outputs, &res.crate_name.as_str());\n             match crate_type {\n                 CrateType::Rlib => link::link_rlib(sess, &res, output_name),\n@@ -423,9 +425,8 @@ fn codegen_cgus<'a, 'tcx: 'a>(\n     let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n     let mono_items = cgus\n         .iter()\n-        .map(|cgu| cgu.items().iter())\n+        .map(|cgu| cgu.items_in_deterministic_order(tcx).into_iter())\n         .flatten()\n-        .map(|(&mono_item, &(linkage, vis))| (mono_item, (linkage, vis)))\n         .collect::<FxHashMap<_, (_, _)>>();\n \n     codegen_mono_items(tcx, module, debug.as_mut(), log, mono_items);\n@@ -442,16 +443,9 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n ) {\n     let mut cx = CodegenCx::new(tcx, module, debug_context);\n     time(\"codegen mono items\", move || {\n-        for (mono_item, (linkage, vis)) in mono_items {\n+        for (mono_item, (linkage, visibility)) in mono_items {\n             unimpl::try_unimpl(tcx, log, || {\n-                let linkage = match (linkage, vis) {\n-                    (RLinkage::External, Visibility::Default) => Linkage::Export,\n-                    (RLinkage::Internal, Visibility::Default) => Linkage::Local,\n-                    // FIXME this should get external linkage, but hidden visibility,\n-                    // not internal linkage and default visibility\n-                    (RLinkage::External, Visibility::Hidden) => Linkage::Export,\n-                    _ => panic!(\"{:?} = {:?} {:?}\", mono_item, linkage, vis),\n-                };\n+                let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n                 base::trans_mono_item(&mut cx, mono_item, linkage);\n             });\n         }"}, {"sha": "3edfba61e33738d3cd624b1c279c29046f06ed28", "filename": "src/linkage.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d9403bf3fdd0d924e38d781fae79402edd069c76/src%2Flinkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9403bf3fdd0d924e38d781fae79402edd069c76/src%2Flinkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flinkage.rs?ref=d9403bf3fdd0d924e38d781fae79402edd069c76", "patch": "@@ -0,0 +1,29 @@\n+use rustc::mir::mono::{MonoItem, Linkage as RLinkage, Visibility};\n+\n+use crate::prelude::*;\n+\n+pub fn get_clif_linkage(mono_item: MonoItem, linkage: RLinkage, visibility: Visibility) -> Linkage {\n+    match (linkage, visibility) {\n+        (RLinkage::External, Visibility::Default) => Linkage::Export,\n+        (RLinkage::Internal, Visibility::Default) => Linkage::Local,\n+        // FIXME this should get external linkage, but hidden visibility,\n+        // not internal linkage and default visibility\n+        (RLinkage::External, Visibility::Hidden) => Linkage::Export,\n+        _ => panic!(\"{:?} = {:?} {:?}\", mono_item, linkage, visibility),\n+    }\n+}\n+\n+pub fn get_static_ref_linkage(tcx: TyCtxt, def_id: DefId) -> Linkage {\n+    let fn_attrs = tcx.codegen_fn_attrs(def_id);\n+\n+    if let Some(linkage) = fn_attrs.linkage {\n+        match linkage {\n+            RLinkage::External => Linkage::Export,\n+            RLinkage::Internal => Linkage::Local,\n+            RLinkage::ExternalWeak | RLinkage::WeakAny => Linkage::Preemptible,\n+            _ => panic!(\"{:?}\", linkage),\n+        }\n+    } else {\n+        Linkage::Import\n+    }\n+}"}]}