{"sha": "a2f922f28264547429ca8abd064623be272c8f3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZjkyMmYyODI2NDU0NzQyOWNhOGFiZDA2NDYyM2JlMjcyYzhmM2I=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-08T00:39:46Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-08T03:04:38Z"}, "message": "implement ReverseIter for TreeMap and TreeSet", "tree": {"sha": "4f283bc5b98effd491b97cb34bd96779e2fe0fcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f283bc5b98effd491b97cb34bd96779e2fe0fcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2f922f28264547429ca8abd064623be272c8f3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f922f28264547429ca8abd064623be272c8f3b", "html_url": "https://github.com/rust-lang/rust/commit/a2f922f28264547429ca8abd064623be272c8f3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2f922f28264547429ca8abd064623be272c8f3b/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e0a28c7da251f14c4339c2714610984ee1001de", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e0a28c7da251f14c4339c2714610984ee1001de", "html_url": "https://github.com/rust-lang/rust/commit/3e0a28c7da251f14c4339c2714610984ee1001de"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "f57f4fd31245993c7af738f23d33e7cd9f9cf7a3", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a2f922f28264547429ca8abd064623be272c8f3b/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f922f28264547429ca8abd064623be272c8f3b/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=a2f922f28264547429ca8abd064623be272c8f3b", "patch": "@@ -14,6 +14,7 @@\n \n use core::container::{Container, Mutable, Map, Set};\n use core::cmp::{Eq, Ord};\n+use core::iter::{BaseIter, ReverseIter};\n use core::option::{Option, Some, None};\n use core::prelude::*;\n \n@@ -103,14 +104,21 @@ impl <K: Ord, V> TreeMap<K, V>: Ord {\n     }\n }\n \n-impl <K: Ord, V> TreeMap<K, V>: iter::BaseIter<(&K, &V)> {\n+impl <K: Ord, V> TreeMap<K, V>: BaseIter<(&K, &V)> {\n     /// Visit all key-value pairs in order\n     pure fn each(&self, f: fn(&(&self/K, &self/V)) -> bool) {\n         each(&self.root, f)\n     }\n     pure fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n }\n \n+impl <K: Ord, V> TreeMap<K, V>: ReverseIter<(&K, &V)> {\n+    /// Visit all key-value pairs in reverse order\n+    pure fn each_reverse(&self, f: fn(&(&self/K, &self/V)) -> bool) {\n+        each_reverse(&self.root, f);\n+    }\n+}\n+\n impl <K: Ord, V> TreeMap<K, V>: Container {\n     /// Return the number of elements in the map\n     pure fn len(&self) -> uint { self.length }\n@@ -180,11 +188,6 @@ impl <K: Ord, V> TreeMap<K, V> {\n     /// Create an empty TreeMap\n     static pure fn new() -> TreeMap<K, V> { TreeMap{root: None, length: 0} }\n \n-    /// Visit all key-value pairs in reverse order\n-    pure fn each_reverse(&self, f: fn(&(&self/K, &self/V)) -> bool) {\n-        each_reverse(&self.root, f);\n-    }\n-\n     /// Visit all keys in reverse order\n     pure fn each_key_reverse(&self, f: fn(&K) -> bool) {\n         self.each_reverse(|&(k, _)| f(k))\n@@ -243,12 +246,19 @@ pub struct TreeSet<T> {\n     priv map: TreeMap<T, ()>\n }\n \n-impl <T: Ord> TreeSet<T>: iter::BaseIter<T> {\n+impl <T: Ord> TreeSet<T>: BaseIter<T> {\n     /// Visit all values in order\n     pure fn each(&self, f: fn(&T) -> bool) { self.map.each_key(f) }\n     pure fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n }\n \n+impl <T: Ord> TreeSet<T>: ReverseIter<T> {\n+    /// Visit all values in reverse order\n+    pure fn each_reverse(&self, f: fn(&T) -> bool) {\n+        self.map.each_key_reverse(f)\n+    }\n+}\n+\n impl <T: Eq Ord> TreeSet<T>: Eq {\n     pure fn eq(&self, other: &TreeSet<T>) -> bool { self.map == other.map }\n     pure fn ne(&self, other: &TreeSet<T>) -> bool { self.map != other.map }\n@@ -504,11 +514,6 @@ impl <T: Ord> TreeSet<T> {\n     /// Create an empty TreeSet\n     static pure fn new() -> TreeSet<T> { TreeSet{map: TreeMap::new()} }\n \n-    /// Visit all values in reverse order\n-    pure fn each_reverse(&self, f: fn(&T) -> bool) {\n-        self.map.each_key_reverse(f)\n-    }\n-\n     /// Get a lazy iterator over the values in the set.\n     /// Requires that it be frozen (immutable).\n     pure fn iter(&self) -> TreeSetIterator/&self<T> {"}]}