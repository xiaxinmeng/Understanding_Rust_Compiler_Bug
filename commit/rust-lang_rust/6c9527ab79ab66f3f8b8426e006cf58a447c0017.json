{"sha": "6c9527ab79ab66f3f8b8426e006cf58a447c0017", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjOTUyN2FiNzlhYjY2ZjNmOGI4NDI2ZTAwNmNmNThhNDQ3YzAwMTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-29T05:27:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-29T05:36:44Z"}, "message": "rustdoc: Add -h flag", "tree": {"sha": "24a0996fec27fb88330a39ba40920bbdd5a71fbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24a0996fec27fb88330a39ba40920bbdd5a71fbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c9527ab79ab66f3f8b8426e006cf58a447c0017", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9527ab79ab66f3f8b8426e006cf58a447c0017", "html_url": "https://github.com/rust-lang/rust/commit/6c9527ab79ab66f3f8b8426e006cf58a447c0017", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c9527ab79ab66f3f8b8426e006cf58a447c0017/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "362f23641a737bb16b85b2da091c222bc7358dc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/362f23641a737bb16b85b2da091c222bc7358dc4", "html_url": "https://github.com/rust-lang/rust/commit/362f23641a737bb16b85b2da091c222bc7358dc4"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "2f5b3976054f6b1b712920a07b1e88fb037190c8", "filename": "src/rustdoc/config.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6c9527ab79ab66f3f8b8426e006cf58a447c0017/src%2Frustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9527ab79ab66f3f8b8426e006cf58a447c0017/src%2Frustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fconfig.rs?ref=6c9527ab79ab66f3f8b8426e006cf58a447c0017", "patch": "@@ -4,6 +4,7 @@ export output_format::{};\n export output_style::{};\n export config;\n export parse_config;\n+export usage;\n \n #[doc = \"The type of document to output\"]\n enum output_format {\n@@ -34,20 +35,34 @@ fn opt_output_dir() -> str { \"output-dir\" }\n fn opt_output_format() -> str { \"output-format\" }\n fn opt_output_style() -> str { \"output-style\" }\n fn opt_pandoc_cmd() -> str { \"pandoc-cmd\" }\n+fn opt_help() -> str { \"h\" }\n \n fn opts() -> [(getopts::opt, str)] {\n     [\n         (getopts::optopt(opt_output_dir()),\n-         \"put documents here\"),\n+         \"--output-dir <val>     put documents here\"),\n         (getopts::optopt(opt_output_format()),\n-         \"either 'markdown' or 'html'\"),\n+         \"--output-format <val>  either 'markdown' or 'html'\"),\n         (getopts::optopt(opt_output_style()),\n-         \"either 'doc-per-crate' or 'doc-per-mod'\"),\n+         \"--output-style <val>   either 'doc-per-crate' or 'doc-per-mod'\"),\n         (getopts::optopt(opt_pandoc_cmd()),\n-         \"the command for running pandoc\")\n+         \"--pandoc-cmd <val>     the command for running pandoc\"),\n+        (getopts::optflag(opt_help()),\n+         \"-h                     print help\")\n     ]\n }\n \n+fn usage() {\n+    import std::io::println;\n+\n+    println(\"Usage: rustdoc [options] <cratefile>\\n\");\n+    println(\"Options:\\n\");\n+    for opt in opts() {\n+        println(#fmt(\"    %s\", tuple::second(opt)));\n+    }\n+    println(\"\");\n+}\n+\n fn default_config(input_crate: str) -> config {\n     {\n         input_crate: input_crate,"}, {"sha": "cc6fba261a7cc5344985a7c7c69523b073e82982", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c9527ab79ab66f3f8b8426e006cf58a447c0017/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9527ab79ab66f3f8b8426e006cf58a447c0017/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=6c9527ab79ab66f3f8b8426e006cf58a447c0017", "patch": "@@ -95,6 +95,11 @@ fn test_run_passes() {\n \n fn main(argv: [str]) {\n \n+    if vec::contains(argv, \"-h\") {\n+        config::usage();\n+        ret;\n+    }\n+\n     if vec::len(argv) != 2u {\n         std::io::println(#fmt(\"usage: %s <input>\", argv[0]));\n         ret;"}]}