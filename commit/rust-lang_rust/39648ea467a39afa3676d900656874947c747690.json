{"sha": "39648ea467a39afa3676d900656874947c747690", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NjQ4ZWE0NjdhMzlhZmEzNjc2ZDkwMDY1Njg3NDk0N2M3NDc2OTA=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-27T16:25:12Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-27T16:48:25Z"}, "message": "Make `real_rust_path_dir` a TRACKED_NO_CRATE_HASH option\n\nThis also adds support for doc-comments to Options.", "tree": {"sha": "2266c1a7cd483e3c1c63789eaa422a21c150cca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2266c1a7cd483e3c1c63789eaa422a21c150cca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39648ea467a39afa3676d900656874947c747690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39648ea467a39afa3676d900656874947c747690", "html_url": "https://github.com/rust-lang/rust/commit/39648ea467a39afa3676d900656874947c747690", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39648ea467a39afa3676d900656874947c747690/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "272015190d058b7c802331e870b23857eeba22cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/272015190d058b7c802331e870b23857eeba22cd", "html_url": "https://github.com/rust-lang/rust/commit/272015190d058b7c802331e870b23857eeba22cd"}], "stats": {"total": 88, "additions": 52, "deletions": 36}, "files": [{"sha": "d8c1a7a26822085b60b5ec80dff19f1caea65baa", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39648ea467a39afa3676d900656874947c747690/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39648ea467a39afa3676d900656874947c747690/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=39648ea467a39afa3676d900656874947c747690", "patch": "@@ -459,6 +459,10 @@ fn test_top_level_options_tracked_no_crate() {\n     // Make sure that changing a [TRACKED_NO_CRATE_HASH] option leaves the crate hash unchanged but changes the incremental hash.\n     // This list is in alphabetical order.\n     tracked!(remap_path_prefix, vec![(\"/home/bors/rust\".into(), \"src\".into())]);\n+    tracked!(\n+        real_rust_source_base_dir,\n+        Some(\"/home/bors/rust/.rustup/toolchains/nightly/lib/rustlib/src/rust\".into())\n+    );\n }\n \n #[test]"}, {"sha": "2ade1bb4f95de29ca3233568c7a289a6f82e0ffe", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39648ea467a39afa3676d900656874947c747690/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39648ea467a39afa3676d900656874947c747690/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=39648ea467a39afa3676d900656874947c747690", "patch": "@@ -1617,7 +1617,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .map(Path::new)\n             .filter(|_| {\n                 // Only spend time on further checks if we have what to translate *to*.\n-                sess.real_rust_source_base_dir.is_some()\n+                sess.opts.real_rust_source_base_dir.is_some()\n             })\n             .filter(|virtual_dir| {\n                 // Don't translate away `/rustc/$hash` if we're still remapping to it,\n@@ -1629,11 +1629,11 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             debug!(\n                 \"try_to_translate_virtual_to_real(name={:?}): \\\n                  virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}\",\n-                name, virtual_rust_source_base_dir, sess.real_rust_source_base_dir,\n+                name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,\n             );\n \n             if let Some(virtual_dir) = virtual_rust_source_base_dir {\n-                if let Some(real_dir) = &sess.real_rust_source_base_dir {\n+                if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {\n                     if let rustc_span::FileName::Real(old_name) = name {\n                         if let rustc_span::RealFileName::Named(one_path) = old_name {\n                             if let Ok(rest) = one_path.strip_prefix(virtual_dir) {"}, {"sha": "1f5cb5b8abc8c0c9a39d0552b241a26e53efbb8c", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/39648ea467a39afa3676d900656874947c747690/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39648ea467a39afa3676d900656874947c747690/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=39648ea467a39afa3676d900656874947c747690", "patch": "@@ -702,6 +702,7 @@ impl Default for Options {\n             cli_forced_codegen_units: None,\n             cli_forced_thinlto_off: false,\n             remap_path_prefix: Vec::new(),\n+            real_rust_source_base_dir: None,\n             edition: DEFAULT_EDITION,\n             json_artifact_notifications: false,\n             json_unused_externs: false,\n@@ -1980,6 +1981,34 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n     }\n \n+    // Try to find a directory containing the Rust `src`, for more details see\n+    // the doc comment on the `real_rust_source_base_dir` field.\n+    let tmp_buf;\n+    let sysroot = match &sysroot_opt {\n+        Some(s) => s,\n+        None => {\n+            tmp_buf = crate::filesearch::get_or_default_sysroot();\n+            &tmp_buf\n+        }\n+    };\n+    let real_rust_source_base_dir = {\n+        // This is the location used by the `rust-src` `rustup` component.\n+        let mut candidate = sysroot.join(\"lib/rustlib/src/rust\");\n+        if let Ok(metadata) = candidate.symlink_metadata() {\n+            // Replace the symlink rustbuild creates, with its destination.\n+            // We could try to use `fs::canonicalize` instead, but that might\n+            // produce unnecessarily verbose path.\n+            if metadata.file_type().is_symlink() {\n+                if let Ok(symlink_dest) = std::fs::read_link(&candidate) {\n+                    candidate = symlink_dest;\n+                }\n+            }\n+        }\n+\n+        // Only use this directory if it has a file we can expect to always find.\n+        if candidate.join(\"library/std/src/lib.rs\").is_file() { Some(candidate) } else { None }\n+    };\n+\n     Options {\n         crate_types,\n         optimize: opt_level,\n@@ -2010,6 +2039,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         cli_forced_codegen_units: codegen_units,\n         cli_forced_thinlto_off: disable_thinlto,\n         remap_path_prefix,\n+        real_rust_source_base_dir,\n         edition,\n         json_artifact_notifications,\n         json_unused_externs,"}, {"sha": "d15dec622e58d7d1b5b8cc114a4b1bd395c2d956", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39648ea467a39afa3676d900656874947c747690/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39648ea467a39afa3676d900656874947c747690/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=39648ea467a39afa3676d900656874947c747690", "patch": "@@ -54,11 +54,15 @@ macro_rules! hash_substruct {\n \n macro_rules! top_level_options {\n     (pub struct Options { $(\n+        $( #[$attr:meta] )*\n         $opt:ident : $t:ty [$dep_tracking_marker:ident],\n     )* } ) => (\n         #[derive(Clone)]\n         pub struct Options {\n-            $(pub $opt: $t),*\n+            $(\n+                $( #[$attr] )*\n+                pub $opt: $t\n+            ),*\n         }\n \n         impl Options {\n@@ -174,6 +178,14 @@ top_level_options!(\n \n         // Remap source path prefixes in all output (messages, object files, debug, etc.).\n         remap_path_prefix: Vec<(PathBuf, PathBuf)> [TRACKED_NO_CRATE_HASH],\n+        /// Base directory containing the `src/` for the Rust standard library, and\n+        /// potentially `rustc` as well, if we can can find it. Right now it's always\n+        /// `$sysroot/lib/rustlib/src/rust` (i.e. the `rustup` `rust-src` component).\n+        ///\n+        /// This directory is what the virtual `/rustc/$hash` is translated back to,\n+        /// if Rust was built with path remapping to `/rustc/$hash` enabled\n+        /// (the `rust.remap-debuginfo` option in `config.toml`).\n+        real_rust_source_base_dir: Option<PathBuf> [TRACKED_NO_CRATE_HASH],\n \n         edition: Edition [TRACKED],\n \n@@ -254,13 +266,13 @@ macro_rules! options {\n     }\n \n     impl $struct_name {\n-        fn dep_tracking_hash(&self, for_crate_hash: bool, error_format: ErrorOutputType) -> u64 {\n+        fn dep_tracking_hash(&self, _for_crate_hash: bool, error_format: ErrorOutputType) -> u64 {\n             let mut sub_hashes = BTreeMap::new();\n             $({\n                 hash_opt!($opt,\n                             &self.$opt,\n                             &mut sub_hashes,\n-                            for_crate_hash,\n+                            _for_crate_hash,\n                             [$dep_tracking_marker]);\n             })*\n             let mut hasher = DefaultHasher::new();"}, {"sha": "e7dfc4b8c4128335042d63ae4fe2ca5ea380cc92", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/39648ea467a39afa3676d900656874947c747690/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39648ea467a39afa3676d900656874947c747690/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=39648ea467a39afa3676d900656874947c747690", "patch": "@@ -214,15 +214,6 @@ pub struct Session {\n     /// drown everything else in noise.\n     miri_unleashed_features: Lock<Vec<(Span, Option<Symbol>)>>,\n \n-    /// Base directory containing the `src/` for the Rust standard library, and\n-    /// potentially `rustc` as well, if we can can find it. Right now it's always\n-    /// `$sysroot/lib/rustlib/src/rust` (i.e. the `rustup` `rust-src` component).\n-    ///\n-    /// This directory is what the virtual `/rustc/$hash` is translated back to,\n-    /// if Rust was built with path remapping to `/rustc/$hash` enabled\n-    /// (the `rust.remap-debuginfo` option in `config.toml`).\n-    pub real_rust_source_base_dir: Option<PathBuf>,\n-\n     /// Architecture to use for interpreting asm!.\n     pub asm_arch: Option<InlineAsmArch>,\n \n@@ -1390,26 +1381,6 @@ pub fn build_session(\n         _ => CtfeBacktrace::Disabled,\n     });\n \n-    // Try to find a directory containing the Rust `src`, for more details see\n-    // the doc comment on the `real_rust_source_base_dir` field.\n-    let real_rust_source_base_dir = {\n-        // This is the location used by the `rust-src` `rustup` component.\n-        let mut candidate = sysroot.join(\"lib/rustlib/src/rust\");\n-        if let Ok(metadata) = candidate.symlink_metadata() {\n-            // Replace the symlink rustbuild creates, with its destination.\n-            // We could try to use `fs::canonicalize` instead, but that might\n-            // produce unnecessarily verbose path.\n-            if metadata.file_type().is_symlink() {\n-                if let Ok(symlink_dest) = std::fs::read_link(&candidate) {\n-                    candidate = symlink_dest;\n-                }\n-            }\n-        }\n-\n-        // Only use this directory if it has a file we can expect to always find.\n-        if candidate.join(\"library/std/src/lib.rs\").is_file() { Some(candidate) } else { None }\n-    };\n-\n     let asm_arch =\n         if target_cfg.allow_asm { InlineAsmArch::from_str(&target_cfg.arch).ok() } else { None };\n \n@@ -1453,7 +1424,6 @@ pub fn build_session(\n         system_library_path: OneThread::new(RefCell::new(Default::default())),\n         ctfe_backtrace,\n         miri_unleashed_features: Lock::new(Default::default()),\n-        real_rust_source_base_dir,\n         asm_arch,\n         target_features: FxHashSet::default(),\n         known_attrs: Lock::new(MarkedAttrs::new()),"}]}