{"sha": "5122a6d9360b5d9c682a261875fb5959df1b9e38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMjJhNmQ5MzYwYjVkOWM2ODJhMjYxODc1ZmI1OTU5ZGYxYjllMzg=", "commit": {"author": {"name": "Yoshito Komatsu", "email": "ykomatsu@akaumigame.org", "date": "2015-10-18T07:07:00Z"}, "committer": {"name": "Yoshito Komatsu", "email": "ykomatsu@akaumigame.org", "date": "2015-10-18T07:07:00Z"}, "message": "Fix some typos", "tree": {"sha": "3ffc2d129a5a1d69a8e92caca122bcf36a11d48c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ffc2d129a5a1d69a8e92caca122bcf36a11d48c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5122a6d9360b5d9c682a261875fb5959df1b9e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5122a6d9360b5d9c682a261875fb5959df1b9e38", "html_url": "https://github.com/rust-lang/rust/commit/5122a6d9360b5d9c682a261875fb5959df1b9e38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5122a6d9360b5d9c682a261875fb5959df1b9e38/comments", "author": {"login": "ykomatsu", "id": 277653, "node_id": "MDQ6VXNlcjI3NzY1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/277653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ykomatsu", "html_url": "https://github.com/ykomatsu", "followers_url": "https://api.github.com/users/ykomatsu/followers", "following_url": "https://api.github.com/users/ykomatsu/following{/other_user}", "gists_url": "https://api.github.com/users/ykomatsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ykomatsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ykomatsu/subscriptions", "organizations_url": "https://api.github.com/users/ykomatsu/orgs", "repos_url": "https://api.github.com/users/ykomatsu/repos", "events_url": "https://api.github.com/users/ykomatsu/events{/privacy}", "received_events_url": "https://api.github.com/users/ykomatsu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ykomatsu", "id": 277653, "node_id": "MDQ6VXNlcjI3NzY1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/277653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ykomatsu", "html_url": "https://github.com/ykomatsu", "followers_url": "https://api.github.com/users/ykomatsu/followers", "following_url": "https://api.github.com/users/ykomatsu/following{/other_user}", "gists_url": "https://api.github.com/users/ykomatsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ykomatsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ykomatsu/subscriptions", "organizations_url": "https://api.github.com/users/ykomatsu/orgs", "repos_url": "https://api.github.com/users/ykomatsu/repos", "events_url": "https://api.github.com/users/ykomatsu/events{/privacy}", "received_events_url": "https://api.github.com/users/ykomatsu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af89fe3172d1c3153655b55a0659877206e5ddb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af89fe3172d1c3153655b55a0659877206e5ddb", "html_url": "https://github.com/rust-lang/rust/commit/4af89fe3172d1c3153655b55a0659877206e5ddb"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "ba02053b6b8944761e85f9b9cd5feded040cebed", "filename": "src/doc/trpl/bibliography.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5122a6d9360b5d9c682a261875fb5959df1b9e38/src%2Fdoc%2Ftrpl%2Fbibliography.md", "raw_url": "https://github.com/rust-lang/rust/raw/5122a6d9360b5d9c682a261875fb5959df1b9e38/src%2Fdoc%2Ftrpl%2Fbibliography.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fbibliography.md?ref=5122a6d9360b5d9c682a261875fb5959df1b9e38", "patch": "@@ -48,7 +48,7 @@ Systems Level\n Language](http://www.cs.indiana.edu/~eholk/papers/hips2013.pdf). Early GPU work by Eric Holk.\n * [Parallel closures: a new twist on an old\n   idea](https://www.usenix.org/conference/hotpar12/parallel-closures-new-twist-old-idea)\n-  - not exactly about rust, but by nmatsakis\n+  - not exactly about Rust, but by nmatsakis\n * [Patina: A Formalization of the Rust Programming\n   Language](ftp://ftp.cs.washington.edu/tr/2015/03/UW-CSE-15-03-02.pdf). Early\n   formalization of a subset of the type system, by Eric Reed."}, {"sha": "d9e92de8d9abcbf5b21f16166b28e5b49e562a6f", "filename": "src/doc/trpl/choosing-your-guarantees.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5122a6d9360b5d9c682a261875fb5959df1b9e38/src%2Fdoc%2Ftrpl%2Fchoosing-your-guarantees.md", "raw_url": "https://github.com/rust-lang/rust/raw/5122a6d9360b5d9c682a261875fb5959df1b9e38/src%2Fdoc%2Ftrpl%2Fchoosing-your-guarantees.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fchoosing-your-guarantees.md?ref=5122a6d9360b5d9c682a261875fb5959df1b9e38", "patch": "@@ -204,7 +204,7 @@ borrow checker. Generally we know that such mutations won't happen in a nested f\n to check.\n \n For large, complicated programs, it becomes useful to put some things in `RefCell`s to make things\n-simpler. For example, a lot of the maps in [the `ctxt` struct][ctxt] in the rust compiler internals\n+simpler. For example, a lot of the maps in [the `ctxt` struct][ctxt] in the Rust compiler internals\n are inside this wrapper. These are only modified once (during creation, which is not right after\n initialization) or a couple of times in well-separated places. However, since this struct is\n pervasively used everywhere, juggling mutable and immutable pointers would be hard (perhaps"}, {"sha": "7b3f13a3ed2235b9363475e7c72c1baa751b8b7b", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5122a6d9360b5d9c682a261875fb5959df1b9e38/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/5122a6d9360b5d9c682a261875fb5959df1b9e38/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=5122a6d9360b5d9c682a261875fb5959df1b9e38", "patch": "@@ -150,7 +150,7 @@ owners!\n So, we need some type that lets us have more than one reference to a value and\n that we can share between threads, that is it must implement `Sync`.\n \n-We'll use `Arc<T>`, rust's standard atomic reference count type, which\n+We'll use `Arc<T>`, Rust's standard atomic reference count type, which\n wraps a value up with some extra runtime bookkeeping which allows us to\n share the ownership of the value between multiple references at the same time.\n "}, {"sha": "a2320a82846b505a010ef380f0c3572cf61a0d29", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5122a6d9360b5d9c682a261875fb5959df1b9e38/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/5122a6d9360b5d9c682a261875fb5959df1b9e38/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=5122a6d9360b5d9c682a261875fb5959df1b9e38", "patch": "@@ -279,7 +279,7 @@ fn extension(file_name: &str) -> Option<&str> {\n }\n ```\n \n-One other pattern that we find is very common is assigning a default value to\n+One other pattern that we find it very common is assigning a default value to\n the case when an `Option` value is `None`. For example, maybe your program\n assumes that the extension of a file is `rs` even if none is present. As you\n might imagine, the case analysis for this is not specific to file"}]}