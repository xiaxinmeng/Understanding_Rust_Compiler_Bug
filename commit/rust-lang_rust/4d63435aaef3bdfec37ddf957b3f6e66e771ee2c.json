{"sha": "4d63435aaef3bdfec37ddf957b3f6e66e771ee2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNjM0MzVhYWVmM2JkZmVjMzdkZGY5NTdiM2Y2ZTY2ZTc3MWVlMmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-13T04:41:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-13T04:41:08Z"}, "message": "Auto merge of #76196 - r-52:r-coverage-allow-missing-docs, r=jyn514\n\nrustdoc: skip #[allow(missing docs)] for docs in coverage report\n\nDuring the document coverage reporting with:\n```bash\nrustdoc something.rs -Z unstable-options --show-coverage\n```\n\nthe coverage report counts code that is marked with `#[allow(missing_docs)]` for the calculation, which outputs lower numbers in the coverage report even though these parts should be ignored for the calculation.\n\nRight now I'm not sure how this can be tested (CI)? (I verified it by hand and ran the unit tests)\n\nr? `@jyn514`\n\n**Reference:** Fixes #76121", "tree": {"sha": "8d660ffd11414f2d88ff19522872dcfaca807920", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d660ffd11414f2d88ff19522872dcfaca807920"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d63435aaef3bdfec37ddf957b3f6e66e771ee2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d63435aaef3bdfec37ddf957b3f6e66e771ee2c", "html_url": "https://github.com/rust-lang/rust/commit/4d63435aaef3bdfec37ddf957b3f6e66e771ee2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d63435aaef3bdfec37ddf957b3f6e66e771ee2c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f54072bb815e2bbaec40eed18c7618904a184470", "url": "https://api.github.com/repos/rust-lang/rust/commits/f54072bb815e2bbaec40eed18c7618904a184470", "html_url": "https://github.com/rust-lang/rust/commit/f54072bb815e2bbaec40eed18c7618904a184470"}, {"sha": "685444008bb2631564b56068bcbf2462bf0cc6af", "url": "https://api.github.com/repos/rust-lang/rust/commits/685444008bb2631564b56068bcbf2462bf0cc6af", "html_url": "https://github.com/rust-lang/rust/commit/685444008bb2631564b56068bcbf2462bf0cc6af"}], "stats": {"total": 119, "additions": 104, "deletions": 15}, "files": [{"sha": "ced26fcf5b0e95b33dbf40d09d355fd120bafd23", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4d63435aaef3bdfec37ddf957b3f6e66e771ee2c/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d63435aaef3bdfec37ddf957b3f6e66e771ee2c/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=4d63435aaef3bdfec37ddf957b3f6e66e771ee2c", "patch": "@@ -1,10 +1,12 @@\n use crate::clean;\n-use crate::config::OutputFormat;\n use crate::core::DocContext;\n use crate::fold::{self, DocFolder};\n use crate::html::markdown::{find_testable_code, ErrorCodes};\n use crate::passes::doc_test_lints::{should_have_doc_example, Tests};\n use crate::passes::Pass;\n+use rustc_lint::builtin::MISSING_DOCS;\n+use rustc_middle::lint::LintSource;\n+use rustc_session::lint;\n use rustc_span::symbol::sym;\n use rustc_span::FileName;\n use serde::Serialize;\n@@ -19,10 +21,10 @@ pub const CALCULATE_DOC_COVERAGE: Pass = Pass {\n };\n \n fn calculate_doc_coverage(krate: clean::Crate, ctx: &DocContext<'_>) -> clean::Crate {\n-    let mut calc = CoverageCalculator::new();\n+    let mut calc = CoverageCalculator::new(ctx);\n     let krate = calc.fold_crate(krate);\n \n-    calc.print_results(ctx.renderinfo.borrow().output_format);\n+    calc.print_results();\n \n     krate\n }\n@@ -41,8 +43,11 @@ impl ItemCount {\n         has_docs: bool,\n         has_doc_example: bool,\n         should_have_doc_examples: bool,\n+        should_have_docs: bool,\n     ) {\n-        self.total += 1;\n+        if has_docs || should_have_docs {\n+            self.total += 1;\n+        }\n \n         if has_docs {\n             self.with_docs += 1;\n@@ -94,8 +99,9 @@ impl ops::AddAssign for ItemCount {\n     }\n }\n \n-struct CoverageCalculator {\n+struct CoverageCalculator<'a, 'b> {\n     items: BTreeMap<FileName, ItemCount>,\n+    ctx: &'a DocContext<'b>,\n }\n \n fn limit_filename_len(filename: String) -> String {\n@@ -108,9 +114,9 @@ fn limit_filename_len(filename: String) -> String {\n     }\n }\n \n-impl CoverageCalculator {\n-    fn new() -> CoverageCalculator {\n-        CoverageCalculator { items: Default::default() }\n+impl<'a, 'b> CoverageCalculator<'a, 'b> {\n+    fn new(ctx: &'a DocContext<'b>) -> CoverageCalculator<'a, 'b> {\n+        CoverageCalculator { items: Default::default(), ctx }\n     }\n \n     fn to_json(&self) -> String {\n@@ -124,7 +130,8 @@ impl CoverageCalculator {\n         .expect(\"failed to convert JSON data to string\")\n     }\n \n-    fn print_results(&self, output_format: Option<OutputFormat>) {\n+    fn print_results(&self) {\n+        let output_format = self.ctx.renderinfo.borrow().output_format;\n         if output_format.map(|o| o.is_json()).unwrap_or_else(|| false) {\n             println!(\"{}\", self.to_json());\n             return;\n@@ -178,7 +185,7 @@ impl CoverageCalculator {\n     }\n }\n \n-impl fold::DocFolder for CoverageCalculator {\n+impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n     fn fold_item(&mut self, i: clean::Item) -> Option<clean::Item> {\n         match i.inner {\n             _ if !i.def_id.is_local() => {\n@@ -245,11 +252,18 @@ impl fold::DocFolder for CoverageCalculator {\n                 );\n \n                 let has_doc_example = tests.found_tests != 0;\n+                let hir_id = self.ctx.tcx.hir().local_def_id_to_hir_id(i.def_id.expect_local());\n+                let (level, source) = self.ctx.tcx.lint_level_at_node(MISSING_DOCS, hir_id);\n+                // `missing_docs` is allow-by-default, so don't treat this as ignoring the item\n+                // unless the user had an explicit `allow`\n+                let should_have_docs =\n+                    level != lint::Level::Allow || matches!(source, LintSource::Default);\n                 debug!(\"counting {:?} {:?} in {}\", i.type_(), i.name, i.source.filename);\n                 self.items.entry(i.source.filename.clone()).or_default().count_item(\n                     has_docs,\n                     has_doc_example,\n-                    should_have_doc_example(&i.inner),\n+                    should_have_doc_example(self.ctx, &i),\n+                    should_have_docs,\n                 );\n             }\n         }"}, {"sha": "686ec51fb0604025705c86cd49b9c2d4e0cef5a5", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4d63435aaef3bdfec37ddf957b3f6e66e771ee2c/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d63435aaef3bdfec37ddf957b3f6e66e771ee2c/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=4d63435aaef3bdfec37ddf957b3f6e66e771ee2c", "patch": "@@ -9,6 +9,7 @@ use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::html::markdown::{find_testable_code, ErrorCodes, Ignore, LangString};\n+use rustc_middle::lint::LintSource;\n use rustc_session::lint;\n \n pub const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass = Pass {\n@@ -56,8 +57,8 @@ impl crate::doctest::Tester for Tests {\n     }\n }\n \n-pub fn should_have_doc_example(item_kind: &clean::ItemEnum) -> bool {\n-    !matches!(item_kind,\n+pub fn should_have_doc_example(cx: &DocContext<'_>, item: &clean::Item) -> bool {\n+    if matches!(item.inner,\n         clean::StructFieldItem(_)\n         | clean::VariantItem(_)\n         | clean::AssocConstItem(_, _)\n@@ -69,7 +70,13 @@ pub fn should_have_doc_example(item_kind: &clean::ItemEnum) -> bool {\n         | clean::ImportItem(_)\n         | clean::PrimitiveItem(_)\n         | clean::KeywordItem(_)\n-    )\n+    ) {\n+        return false;\n+    }\n+    let hir_id = cx.tcx.hir().local_def_id_to_hir_id(item.def_id.expect_local());\n+    let (level, source) =\n+        cx.tcx.lint_level_at_node(lint::builtin::MISSING_DOC_CODE_EXAMPLES, hir_id);\n+    level != lint::Level::Allow || matches!(source, LintSource::Default)\n }\n \n pub fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n@@ -88,7 +95,7 @@ pub fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n     if tests.found_tests == 0\n         && rustc_feature::UnstableFeatures::from_environment().is_nightly_build()\n     {\n-        if should_have_doc_example(&item.inner) {\n+        if should_have_doc_example(cx, &item) {\n             debug!(\"reporting error for {:?} (hir_id={:?})\", item, hir_id);\n             let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n             cx.tcx.struct_span_lint_hir("}, {"sha": "c077be31b209de50eda3205a8a4769b13e4266fa", "filename": "src/test/rustdoc-ui/coverage/allow_missing_docs.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4d63435aaef3bdfec37ddf957b3f6e66e771ee2c/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fallow_missing_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d63435aaef3bdfec37ddf957b3f6e66e771ee2c/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fallow_missing_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fallow_missing_docs.rs?ref=4d63435aaef3bdfec37ddf957b3f6e66e771ee2c", "patch": "@@ -0,0 +1,41 @@\n+// compile-flags:-Z unstable-options --show-coverage\n+// check-pass\n+\n+//! Make sure to have some docs on your crate root\n+\n+#[allow(missing_docs)]\n+pub mod mod_foo {\n+    pub struct Bar;\n+}\n+\n+/// This is a struct with a `#[allow(missing_docs)]`\n+pub struct AllowTheMissingDocs {\n+    #[allow(missing_docs)]\n+    pub empty_str: String,\n+\n+    /// This has\n+    #[allow(missing_docs)]\n+    /// but also has documentation comments\n+    pub hello: usize,\n+\n+    /// The doc id just to create a boilerplate comment\n+    pub doc_id: Vec<u8>,\n+}\n+\n+/// A function that has a documentation\n+pub fn this_is_func() {}\n+\n+#[allow(missing_docs)]\n+pub struct DemoStruct {\n+    something: usize,\n+}\n+\n+#[allow(missing_docs)]\n+pub mod bar {\n+    #[warn(missing_docs)]\n+    pub struct Bar { //~ WARN\n+        pub f: u32, //~ WARN\n+    }\n+\n+    pub struct NeedsNoDocs;\n+}"}, {"sha": "3d5b512d14d1a851a19b8e6ec77810589eb73ad5", "filename": "src/test/rustdoc-ui/coverage/allow_missing_docs.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4d63435aaef3bdfec37ddf957b3f6e66e771ee2c/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fallow_missing_docs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d63435aaef3bdfec37ddf957b3f6e66e771ee2c/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fallow_missing_docs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fallow_missing_docs.stderr?ref=4d63435aaef3bdfec37ddf957b3f6e66e771ee2c", "patch": "@@ -0,0 +1,20 @@\n+warning: missing documentation for a struct\n+  --> $DIR/allow_missing_docs.rs:36:5\n+   |\n+LL |     pub struct Bar {\n+   |     ^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/allow_missing_docs.rs:35:12\n+   |\n+LL |     #[warn(missing_docs)]\n+   |            ^^^^^^^^^^^^\n+\n+warning: missing documentation for a struct field\n+  --> $DIR/allow_missing_docs.rs:37:9\n+   |\n+LL |         pub f: u32,\n+   |         ^^^^^^^^^^\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "17e8ee9e23dcc83dfe9401ba5200b7b478c21c3a", "filename": "src/test/rustdoc-ui/coverage/allow_missing_docs.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d63435aaef3bdfec37ddf957b3f6e66e771ee2c/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fallow_missing_docs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4d63435aaef3bdfec37ddf957b3f6e66e771ee2c/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fallow_missing_docs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fallow_missing_docs.stdout?ref=4d63435aaef3bdfec37ddf957b3f6e66e771ee2c", "patch": "@@ -0,0 +1,7 @@\n++-------------------------------------+------------+------------+------------+------------+\n+| File                                | Documented | Percentage |   Examples | Percentage |\n++-------------------------------------+------------+------------+------------+------------+\n+| ...i/coverage/allow_missing_docs.rs |          5 |      71.4% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+\n+| Total                               |          5 |      71.4% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+"}]}