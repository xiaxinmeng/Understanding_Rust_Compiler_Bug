{"sha": "0dcd812de849fd0be56da98726a11773b9f72bf2", "node_id": "C_kwDOAAsO6NoAKDBkY2Q4MTJkZTg0OWZkMGJlNTZkYTk4NzI2YTExNzczYjlmNzJiZjI", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-12-11T00:11:10Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-12-12T11:26:59Z"}, "message": "Re-bless asm tests for aarch64", "tree": {"sha": "bb49f7cdf283469976da87e4c6e0f89e9bc6bde8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb49f7cdf283469976da87e4c6e0f89e9bc6bde8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dcd812de849fd0be56da98726a11773b9f72bf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dcd812de849fd0be56da98726a11773b9f72bf2", "html_url": "https://github.com/rust-lang/rust/commit/0dcd812de849fd0be56da98726a11773b9f72bf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dcd812de849fd0be56da98726a11773b9f72bf2/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44a3a66ee890545a2c1ac78ff8f107fe5e7204f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/44a3a66ee890545a2c1ac78ff8f107fe5e7204f9", "html_url": "https://github.com/rust-lang/rust/commit/44a3a66ee890545a2c1ac78ff8f107fe5e7204f9"}], "stats": {"total": 306, "additions": 154, "deletions": 152}, "files": [{"sha": "e3316b85193e461712e5f9e6de34c22e78b276d1", "filename": "src/test/ui/asm/aarch64/bad-reg.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0dcd812de849fd0be56da98726a11773b9f72bf2/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dcd812de849fd0be56da98726a11773b9f72bf2/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.stderr?ref=0dcd812de849fd0be56da98726a11773b9f72bf2", "patch": "@@ -1,17 +1,17 @@\n error: invalid register class `foo`: unknown register class\n-  --> $DIR/bad-reg.rs:12:20\n+  --> $DIR/bad-reg.rs:14:20\n    |\n LL |         asm!(\"{}\", in(foo) foo);\n    |                    ^^^^^^^^^^^\n \n error: invalid register `foo`: unknown register\n-  --> $DIR/bad-reg.rs:14:18\n+  --> $DIR/bad-reg.rs:16:18\n    |\n LL |         asm!(\"\", in(\"foo\") foo);\n    |                  ^^^^^^^^^^^^^\n \n error: invalid asm template modifier for this register class\n-  --> $DIR/bad-reg.rs:16:15\n+  --> $DIR/bad-reg.rs:18:15\n    |\n LL |         asm!(\"{:z}\", in(reg) foo);\n    |               ^^^^   ----------- argument\n@@ -21,7 +21,7 @@ LL |         asm!(\"{:z}\", in(reg) foo);\n    = note: the `reg` register class supports the following template modifiers: `w`, `x`\n \n error: invalid asm template modifier for this register class\n-  --> $DIR/bad-reg.rs:18:15\n+  --> $DIR/bad-reg.rs:20:15\n    |\n LL |         asm!(\"{:r}\", in(vreg) foo);\n    |               ^^^^   ------------ argument\n@@ -31,7 +31,7 @@ LL |         asm!(\"{:r}\", in(vreg) foo);\n    = note: the `vreg` register class supports the following template modifiers: `b`, `h`, `s`, `d`, `q`, `v`\n \n error: invalid asm template modifier for this register class\n-  --> $DIR/bad-reg.rs:20:15\n+  --> $DIR/bad-reg.rs:22:15\n    |\n LL |         asm!(\"{:r}\", in(vreg_low16) foo);\n    |               ^^^^   ------------------ argument\n@@ -41,103 +41,103 @@ LL |         asm!(\"{:r}\", in(vreg_low16) foo);\n    = note: the `vreg_low16` register class supports the following template modifiers: `b`, `h`, `s`, `d`, `q`, `v`\n \n error: asm template modifiers are not allowed for `const` arguments\n-  --> $DIR/bad-reg.rs:22:15\n+  --> $DIR/bad-reg.rs:24:15\n    |\n LL |         asm!(\"{:a}\", const 0);\n    |               ^^^^   ------- argument\n    |               |\n    |               template modifier\n \n error: asm template modifiers are not allowed for `sym` arguments\n-  --> $DIR/bad-reg.rs:24:15\n+  --> $DIR/bad-reg.rs:26:15\n    |\n LL |         asm!(\"{:a}\", sym main);\n    |               ^^^^   -------- argument\n    |               |\n    |               template modifier\n \n error: invalid register `x29`: the frame pointer cannot be used as an operand for inline asm\n-  --> $DIR/bad-reg.rs:26:18\n+  --> $DIR/bad-reg.rs:28:18\n    |\n LL |         asm!(\"\", in(\"x29\") foo);\n    |                  ^^^^^^^^^^^^^\n \n error: invalid register `sp`: the stack pointer cannot be used as an operand for inline asm\n-  --> $DIR/bad-reg.rs:28:18\n+  --> $DIR/bad-reg.rs:30:18\n    |\n LL |         asm!(\"\", in(\"sp\") foo);\n    |                  ^^^^^^^^^^^^\n \n error: invalid register `xzr`: the zero register cannot be used as an operand for inline asm\n-  --> $DIR/bad-reg.rs:30:18\n+  --> $DIR/bad-reg.rs:32:18\n    |\n LL |         asm!(\"\", in(\"xzr\") foo);\n    |                  ^^^^^^^^^^^^^\n \n error: invalid register `x19`: x19 is used internally by LLVM and cannot be used as an operand for inline asm\n-  --> $DIR/bad-reg.rs:32:18\n+  --> $DIR/bad-reg.rs:34:18\n    |\n LL |         asm!(\"\", in(\"x19\") foo);\n    |                  ^^^^^^^^^^^^^\n \n error: register class `preg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:35:18\n+  --> $DIR/bad-reg.rs:37:18\n    |\n LL |         asm!(\"\", in(\"p0\") foo);\n    |                  ^^^^^^^^^^^^\n \n error: register class `preg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:38:20\n+  --> $DIR/bad-reg.rs:40:20\n    |\n LL |         asm!(\"{}\", in(preg) foo);\n    |                    ^^^^^^^^^^^^\n \n error: register class `preg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:40:20\n+  --> $DIR/bad-reg.rs:42:20\n    |\n LL |         asm!(\"{}\", out(preg) _);\n    |                    ^^^^^^^^^^^\n \n error: register `x0` conflicts with register `x0`\n-  --> $DIR/bad-reg.rs:46:32\n+  --> $DIR/bad-reg.rs:48:32\n    |\n LL |         asm!(\"\", in(\"x0\") foo, in(\"w0\") bar);\n    |                  ------------  ^^^^^^^^^^^^ register `x0`\n    |                  |\n    |                  register `x0`\n \n error: register `x0` conflicts with register `x0`\n-  --> $DIR/bad-reg.rs:48:32\n+  --> $DIR/bad-reg.rs:50:32\n    |\n LL |         asm!(\"\", in(\"x0\") foo, out(\"x0\") bar);\n    |                  ------------  ^^^^^^^^^^^^^ register `x0`\n    |                  |\n    |                  register `x0`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:48:18\n+  --> $DIR/bad-reg.rs:50:18\n    |\n LL |         asm!(\"\", in(\"x0\") foo, out(\"x0\") bar);\n    |                  ^^^^^^^^^^^^\n \n error: register `v0` conflicts with register `v0`\n-  --> $DIR/bad-reg.rs:51:32\n+  --> $DIR/bad-reg.rs:53:32\n    |\n LL |         asm!(\"\", in(\"v0\") foo, in(\"q0\") bar);\n    |                  ------------  ^^^^^^^^^^^^ register `v0`\n    |                  |\n    |                  register `v0`\n \n error: register `v0` conflicts with register `v0`\n-  --> $DIR/bad-reg.rs:53:32\n+  --> $DIR/bad-reg.rs:55:32\n    |\n LL |         asm!(\"\", in(\"v0\") foo, out(\"q0\") bar);\n    |                  ------------  ^^^^^^^^^^^^^ register `v0`\n    |                  |\n    |                  register `v0`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:53:18\n+  --> $DIR/bad-reg.rs:55:18\n    |\n LL |         asm!(\"\", in(\"v0\") foo, out(\"q0\") bar);\n    |                  ^^^^^^^^^^^^"}, {"sha": "a78e6867bd3ae90aaafb8cf0e31bf18ba8847271", "filename": "src/test/ui/asm/aarch64/duplicate-options.fixed", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dcd812de849fd0be56da98726a11773b9f72bf2/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0dcd812de849fd0be56da98726a11773b9f72bf2/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.fixed?ref=0dcd812de849fd0be56da98726a11773b9f72bf2", "patch": "@@ -1,6 +1,8 @@\n // only-aarch64\n // run-rustfix\n \n+use std::arch::asm;\n+\n fn main() {\n     unsafe {\n         asm!(\"\", options(nomem, ));\n@@ -17,8 +19,8 @@ fn main() {\n             \"\",\n             options(nomem, noreturn),\n             options(preserves_flags, ), //~ ERROR the `noreturn` option was already provided\n-            options( nostack), //~ ERROR the `nomem` option was already provided\n-            options(), //~ ERROR the `noreturn` option was already provided\n+            options( nostack),            //~ ERROR the `nomem` option was already provided\n+            options(),                  //~ ERROR the `noreturn` option was already provided\n         );\n     }\n }"}, {"sha": "d80ab921fb83ef97284acb76e15b8746cca94eec", "filename": "src/test/ui/asm/aarch64/parse-error.stderr", "status": "modified", "additions": 64, "deletions": 64, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/0dcd812de849fd0be56da98726a11773b9f72bf2/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dcd812de849fd0be56da98726a11773b9f72bf2/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr?ref=0dcd812de849fd0be56da98726a11773b9f72bf2", "patch": "@@ -1,385 +1,385 @@\n error: requires at least a template string argument\n-  --> $DIR/parse-error.rs:9:9\n+  --> $DIR/parse-error.rs:11:9\n    |\n LL |         asm!();\n    |         ^^^^^^\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:11:14\n+  --> $DIR/parse-error.rs:13:14\n    |\n LL |         asm!(foo);\n    |              ^^^\n \n error: expected token: `,`\n-  --> $DIR/parse-error.rs:13:19\n+  --> $DIR/parse-error.rs:15:19\n    |\n LL |         asm!(\"{}\" foo);\n    |                   ^^^ expected `,`\n \n error: expected operand, clobber_abi, options, or additional template string\n-  --> $DIR/parse-error.rs:15:20\n+  --> $DIR/parse-error.rs:17:20\n    |\n LL |         asm!(\"{}\", foo);\n    |                    ^^^ expected operand, clobber_abi, options, or additional template string\n \n error: expected `(`, found `foo`\n-  --> $DIR/parse-error.rs:17:23\n+  --> $DIR/parse-error.rs:19:23\n    |\n LL |         asm!(\"{}\", in foo);\n    |                       ^^^ expected `(`\n \n error: expected `)`, found `foo`\n-  --> $DIR/parse-error.rs:19:27\n+  --> $DIR/parse-error.rs:21:27\n    |\n LL |         asm!(\"{}\", in(reg foo));\n    |                           ^^^ expected `)`\n \n error: expected expression, found end of macro arguments\n-  --> $DIR/parse-error.rs:21:27\n+  --> $DIR/parse-error.rs:23:27\n    |\n LL |         asm!(\"{}\", in(reg));\n    |                           ^ expected expression\n \n error: expected register class or explicit register\n-  --> $DIR/parse-error.rs:23:26\n+  --> $DIR/parse-error.rs:25:26\n    |\n LL |         asm!(\"{}\", inout(=) foo => bar);\n    |                          ^\n \n error: expected expression, found end of macro arguments\n-  --> $DIR/parse-error.rs:25:37\n+  --> $DIR/parse-error.rs:27:37\n    |\n LL |         asm!(\"{}\", inout(reg) foo =>);\n    |                                     ^ expected expression\n \n error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n-  --> $DIR/parse-error.rs:27:32\n+  --> $DIR/parse-error.rs:29:32\n    |\n LL |         asm!(\"{}\", in(reg) foo => bar);\n    |                                ^^ expected one of 7 possible tokens\n \n error: argument to `sym` must be a path expression\n-  --> $DIR/parse-error.rs:29:24\n+  --> $DIR/parse-error.rs:31:24\n    |\n LL |         asm!(\"{}\", sym foo + bar);\n    |                        ^^^^^^^^^\n \n error: expected one of `)`, `att_syntax`, `may_unwind`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, `raw`, or `readonly`, found `foo`\n-  --> $DIR/parse-error.rs:31:26\n+  --> $DIR/parse-error.rs:33:26\n    |\n LL |         asm!(\"\", options(foo));\n    |                          ^^^ expected one of 10 possible tokens\n \n error: expected one of `)` or `,`, found `foo`\n-  --> $DIR/parse-error.rs:33:32\n+  --> $DIR/parse-error.rs:35:32\n    |\n LL |         asm!(\"\", options(nomem foo));\n    |                                ^^^ expected one of `)` or `,`\n \n error: expected one of `)`, `att_syntax`, `may_unwind`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, `raw`, or `readonly`, found `foo`\n-  --> $DIR/parse-error.rs:35:33\n+  --> $DIR/parse-error.rs:37:33\n    |\n LL |         asm!(\"\", options(nomem, foo));\n    |                                 ^^^ expected one of 10 possible tokens\n \n error: arguments are not allowed after options\n-  --> $DIR/parse-error.rs:37:31\n+  --> $DIR/parse-error.rs:39:31\n    |\n LL |         asm!(\"{}\", options(), const foo);\n    |                    ---------  ^^^^^^^^^ argument\n    |                    |\n    |                    previous options\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:40:30\n+  --> $DIR/parse-error.rs:42:30\n    |\n LL |         asm!(\"\", clobber_abi(foo));\n    |                              ^^^ not a string literal\n \n error: expected one of `)` or `,`, found `foo`\n-  --> $DIR/parse-error.rs:42:34\n+  --> $DIR/parse-error.rs:44:34\n    |\n LL |         asm!(\"\", clobber_abi(\"C\" foo));\n    |                                  ^^^ expected one of `)` or `,`\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:44:35\n+  --> $DIR/parse-error.rs:46:35\n    |\n LL |         asm!(\"\", clobber_abi(\"C\", foo));\n    |                                   ^^^ not a string literal\n \n error: arguments are not allowed after clobber_abi\n-  --> $DIR/parse-error.rs:46:38\n+  --> $DIR/parse-error.rs:48:38\n    |\n LL |         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n    |                    ----------------  ^^^^^^^^^ argument\n    |                    |\n    |                    clobber_abi\n \n error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:49:29\n+  --> $DIR/parse-error.rs:51:29\n    |\n LL |         asm!(\"\", options(), clobber_abi(\"C\"));\n    |                  ---------  ^^^^^^^^^^^^^^^^\n    |                  |\n    |                  options\n \n error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:51:31\n+  --> $DIR/parse-error.rs:53:31\n    |\n LL |         asm!(\"{}\", options(), clobber_abi(\"C\"), const foo);\n    |                    ---------  ^^^^^^^^^^^^^^^^\n    |                    |\n    |                    options\n \n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:53:36\n+  --> $DIR/parse-error.rs:55:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                     |\n    |                     previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:53:36\n+  --> $DIR/parse-error.rs:55:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                    ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: explicit register arguments cannot have names\n-  --> $DIR/parse-error.rs:58:18\n+  --> $DIR/parse-error.rs:60:18\n    |\n LL |         asm!(\"\", a = in(\"x0\") foo);\n    |                  ^^^^^^^^^^^^^^^^\n \n error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:60:35\n+  --> $DIR/parse-error.rs:62:35\n    |\n LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n    |                     ------------  ^^^^^^^^^^^^^ named argument\n    |                     |\n    |                     explicit register argument\n \n error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:63:35\n+  --> $DIR/parse-error.rs:65:35\n    |\n LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n    |                     ------------  ^^^^^^^^^^^^^ named argument\n    |                     |\n    |                     explicit register argument\n \n error: positional arguments cannot follow named arguments or explicit register arguments\n-  --> $DIR/parse-error.rs:66:35\n+  --> $DIR/parse-error.rs:68:35\n    |\n LL |         asm!(\"{1}\", in(\"x0\") foo, const bar);\n    |                     ------------  ^^^^^^^^^ positional argument\n    |                     |\n    |                     explicit register argument\n \n error: expected one of `clobber_abi`, `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"\"`\n-  --> $DIR/parse-error.rs:69:29\n+  --> $DIR/parse-error.rs:71:29\n    |\n LL |         asm!(\"\", options(), \"\");\n    |                             ^^ expected one of 9 possible tokens\n \n error: expected one of `clobber_abi`, `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:71:33\n+  --> $DIR/parse-error.rs:73:33\n    |\n LL |         asm!(\"{}\", in(reg) foo, \"{}\", out(reg) foo);\n    |                                 ^^^^ expected one of 9 possible tokens\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:73:14\n+  --> $DIR/parse-error.rs:75:14\n    |\n LL |         asm!(format!(\"{{{}}}\", 0), in(reg) foo);\n    |              ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:75:21\n+  --> $DIR/parse-error.rs:77:21\n    |\n LL |         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n    |                     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:77:28\n+  --> $DIR/parse-error.rs:79:28\n    |\n LL |         asm!(\"{}\", in(reg) _);\n    |                            ^\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:79:31\n+  --> $DIR/parse-error.rs:81:31\n    |\n LL |         asm!(\"{}\", inout(reg) _);\n    |                               ^\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:81:35\n+  --> $DIR/parse-error.rs:83:35\n    |\n LL |         asm!(\"{}\", inlateout(reg) _);\n    |                                   ^\n \n error: requires at least a template string argument\n-  --> $DIR/parse-error.rs:88:1\n+  --> $DIR/parse-error.rs:90:1\n    |\n LL | global_asm!();\n    | ^^^^^^^^^^^^^\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:90:13\n+  --> $DIR/parse-error.rs:92:13\n    |\n LL | global_asm!(FOO);\n    |             ^^^\n \n error: expected token: `,`\n-  --> $DIR/parse-error.rs:92:18\n+  --> $DIR/parse-error.rs:94:18\n    |\n LL | global_asm!(\"{}\" FOO);\n    |                  ^^^ expected `,`\n \n error: expected operand, options, or additional template string\n-  --> $DIR/parse-error.rs:94:19\n+  --> $DIR/parse-error.rs:96:19\n    |\n LL | global_asm!(\"{}\", FOO);\n    |                   ^^^ expected operand, options, or additional template string\n \n error: expected expression, found end of macro arguments\n-  --> $DIR/parse-error.rs:96:24\n+  --> $DIR/parse-error.rs:98:24\n    |\n LL | global_asm!(\"{}\", const);\n    |                        ^ expected expression\n \n error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n-  --> $DIR/parse-error.rs:98:30\n+  --> $DIR/parse-error.rs:100:30\n    |\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `FOO`\n-  --> $DIR/parse-error.rs:100:25\n+  --> $DIR/parse-error.rs:102:25\n    |\n LL | global_asm!(\"\", options(FOO));\n    |                         ^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:102:25\n+  --> $DIR/parse-error.rs:104:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:104:25\n+  --> $DIR/parse-error.rs:106:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n error: arguments are not allowed after options\n-  --> $DIR/parse-error.rs:106:30\n+  --> $DIR/parse-error.rs:108:30\n    |\n LL | global_asm!(\"{}\", options(), const FOO);\n    |                   ---------  ^^^^^^^^^ argument\n    |                   |\n    |                   previous options\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:108:29\n+  --> $DIR/parse-error.rs:110:29\n    |\n LL | global_asm!(\"\", clobber_abi(FOO));\n    |                             ^^^ not a string literal\n \n error: expected one of `)` or `,`, found `FOO`\n-  --> $DIR/parse-error.rs:110:33\n+  --> $DIR/parse-error.rs:112:33\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\" FOO));\n    |                                 ^^^ expected one of `)` or `,`\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:112:34\n+  --> $DIR/parse-error.rs:114:34\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\", FOO));\n    |                                  ^^^ not a string literal\n \n error: arguments are not allowed after clobber_abi\n-  --> $DIR/parse-error.rs:114:37\n+  --> $DIR/parse-error.rs:116:37\n    |\n LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n    |                   ----------------  ^^^^^^^^^ argument\n    |                   |\n    |                   clobber_abi\n \n error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:114:19\n+  --> $DIR/parse-error.rs:116:19\n    |\n LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n    |                   ^^^^^^^^^^^^^^^^\n \n error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:117:28\n+  --> $DIR/parse-error.rs:119:28\n    |\n LL | global_asm!(\"\", options(), clobber_abi(\"C\"));\n    |                 ---------  ^^^^^^^^^^^^^^^^\n    |                 |\n    |                 options\n \n error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:119:30\n+  --> $DIR/parse-error.rs:121:30\n    |\n LL | global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n    |                   ---------  ^^^^^^^^^^^^^^^^\n    |                   |\n    |                   options\n \n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:121:35\n+  --> $DIR/parse-error.rs:123:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                    -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                    |\n    |                    previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:121:35\n+  --> $DIR/parse-error.rs:123:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                                   ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: expected one of `clobber_abi`, `const`, or `options`, found `\"\"`\n-  --> $DIR/parse-error.rs:124:28\n+  --> $DIR/parse-error.rs:126:28\n    |\n LL | global_asm!(\"\", options(), \"\");\n    |                            ^^ expected one of `clobber_abi`, `const`, or `options`\n \n error: expected one of `clobber_abi`, `const`, or `options`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:126:30\n+  --> $DIR/parse-error.rs:128:30\n    |\n LL | global_asm!(\"{}\", const FOO, \"{}\", const FOO);\n    |                              ^^^^ expected one of `clobber_abi`, `const`, or `options`\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:128:13\n+  --> $DIR/parse-error.rs:130:13\n    |\n LL | global_asm!(format!(\"{{{}}}\", 0), const FOO);\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:130:20\n+  --> $DIR/parse-error.rs:132:20\n    |\n LL | global_asm!(\"{1}\", format!(\"{{{}}}\", 0), const FOO, const BAR);\n    |                    ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:37:37\n+  --> $DIR/parse-error.rs:39:37\n    |\n LL |     let mut foo = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const foo`\n@@ -388,7 +388,7 @@ LL |         asm!(\"{}\", options(), const foo);\n    |                                     ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:46:44\n+  --> $DIR/parse-error.rs:48:44\n    |\n LL |     let mut foo = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const foo`\n@@ -397,7 +397,7 @@ LL |         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n    |                                            ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:53:31\n+  --> $DIR/parse-error.rs:55:31\n    |\n LL |     let mut foo = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const foo`\n@@ -406,7 +406,7 @@ LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                               ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:53:46\n+  --> $DIR/parse-error.rs:55:46\n    |\n LL |     let mut bar = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const bar`\n@@ -415,7 +415,7 @@ LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                              ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:60:45\n+  --> $DIR/parse-error.rs:62:45\n    |\n LL |     let mut bar = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const bar`\n@@ -424,7 +424,7 @@ LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n    |                                             ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:63:45\n+  --> $DIR/parse-error.rs:65:45\n    |\n LL |     let mut bar = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const bar`\n@@ -433,7 +433,7 @@ LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n    |                                             ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:66:41\n+  --> $DIR/parse-error.rs:68:41\n    |\n LL |     let mut bar = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const bar`"}, {"sha": "96dab1bce0b758d1097ed7595945207ffca5936d", "filename": "src/test/ui/asm/aarch64/srcloc.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0dcd812de849fd0be56da98726a11773b9f72bf2/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dcd812de849fd0be56da98726a11773b9f72bf2/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.stderr?ref=0dcd812de849fd0be56da98726a11773b9f72bf2", "patch": "@@ -1,5 +1,5 @@\n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:10:15\n+  --> $DIR/srcloc.rs:11:15\n    |\n LL |         asm!(\"invalid_instruction\");\n    |               ^\n@@ -11,7 +11,7 @@ LL |     invalid_instruction\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:14:13\n+  --> $DIR/srcloc.rs:15:13\n    |\n LL |             invalid_instruction\n    |             ^\n@@ -23,7 +23,7 @@ LL |             invalid_instruction\n    |             ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:19:13\n+  --> $DIR/srcloc.rs:20:13\n    |\n LL |             invalid_instruction\n    |             ^\n@@ -35,7 +35,7 @@ LL |             invalid_instruction\n    |             ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:25:13\n+  --> $DIR/srcloc.rs:26:13\n    |\n LL |             invalid_instruction\n    |             ^\n@@ -47,7 +47,7 @@ LL |             invalid_instruction\n    |             ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:32:13\n+  --> $DIR/srcloc.rs:33:13\n    |\n LL |             invalid_instruction\n    |             ^\n@@ -59,7 +59,7 @@ LL |             invalid_instruction\n    |             ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:37:14\n+  --> $DIR/srcloc.rs:38:14\n    |\n LL |         asm!(concat!(\"invalid\", \"_\", \"instruction\"));\n    |              ^\n@@ -71,7 +71,7 @@ LL |     invalid_instruction\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:41:14\n+  --> $DIR/srcloc.rs:42:14\n    |\n LL |             \"invalid_instruction\",\n    |              ^\n@@ -83,7 +83,7 @@ LL |     invalid_instruction\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:47:14\n+  --> $DIR/srcloc.rs:48:14\n    |\n LL |             \"invalid_instruction\",\n    |              ^\n@@ -95,7 +95,7 @@ LL | invalid_instruction\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:54:14\n+  --> $DIR/srcloc.rs:55:14\n    |\n LL |             \"invalid_instruction\",\n    |              ^\n@@ -107,7 +107,7 @@ LL | invalid_instruction\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:61:13\n+  --> $DIR/srcloc.rs:62:13\n    |\n LL |             concat!(\"invalid\", \"_\", \"instruction\"),\n    |             ^\n@@ -119,7 +119,7 @@ LL | invalid_instruction\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:68:13\n+  --> $DIR/srcloc.rs:69:13\n    |\n LL |             concat!(\"invalid\", \"_\", \"instruction\"),\n    |             ^\n@@ -131,7 +131,7 @@ LL | invalid_instruction\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:75:14\n+  --> $DIR/srcloc.rs:76:14\n    |\n LL |             \"invalid_instruction1\",\n    |              ^\n@@ -143,7 +143,7 @@ LL |     invalid_instruction1\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:76:14\n+  --> $DIR/srcloc.rs:77:14\n    |\n LL |             \"invalid_instruction2\",\n    |              ^\n@@ -155,7 +155,7 @@ LL | invalid_instruction2\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:82:13\n+  --> $DIR/srcloc.rs:83:13\n    |\n LL |             concat!(\n    |             ^\n@@ -167,7 +167,7 @@ LL |     invalid_instruction1\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:82:13\n+  --> $DIR/srcloc.rs:83:13\n    |\n LL |             concat!(\n    |             ^\n@@ -179,7 +179,7 @@ LL | invalid_instruction2\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:91:13\n+  --> $DIR/srcloc.rs:92:13\n    |\n LL |             concat!(\n    |             ^\n@@ -191,7 +191,7 @@ LL |     invalid_instruction1\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:91:13\n+  --> $DIR/srcloc.rs:92:13\n    |\n LL |             concat!(\n    |             ^\n@@ -203,7 +203,7 @@ LL | invalid_instruction2\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:95:13\n+  --> $DIR/srcloc.rs:96:13\n    |\n LL |             concat!(\n    |             ^\n@@ -215,7 +215,7 @@ LL | invalid_instruction3\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:95:13\n+  --> $DIR/srcloc.rs:96:13\n    |\n LL |             concat!(\n    |             ^\n@@ -227,7 +227,7 @@ LL | invalid_instruction4\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:106:13\n+  --> $DIR/srcloc.rs:107:13\n    |\n LL |             concat!(\n    |             ^\n@@ -239,7 +239,7 @@ LL |     invalid_instruction1\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:106:13\n+  --> $DIR/srcloc.rs:107:13\n    |\n LL |             concat!(\n    |             ^\n@@ -251,7 +251,7 @@ LL | invalid_instruction2\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:110:13\n+  --> $DIR/srcloc.rs:111:13\n    |\n LL |             concat!(\n    |             ^\n@@ -263,7 +263,7 @@ LL | invalid_instruction3\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:110:13\n+  --> $DIR/srcloc.rs:111:13\n    |\n LL |             concat!(\n    |             ^"}, {"sha": "beb301c7c7417675c4360a2b411b8fbbc154d0b7", "filename": "src/test/ui/asm/aarch64/type-check-2.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0dcd812de849fd0be56da98726a11773b9f72bf2/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dcd812de849fd0be56da98726a11773b9f72bf2/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.stderr?ref=0dcd812de849fd0be56da98726a11773b9f72bf2", "patch": "@@ -1,21 +1,21 @@\n error: arguments for inline assembly must be copyable\n-  --> $DIR/type-check-2.rs:46:31\n+  --> $DIR/type-check-2.rs:48:31\n    |\n LL |         asm!(\"{:v}\", in(vreg) SimdNonCopy(0.0, 0.0, 0.0, 0.0));\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `SimdNonCopy` does not implement the Copy trait\n \n-error: cannot use value of type `[closure@$DIR/type-check-2.rs:58:28: 58:38]` for inline assembly\n-  --> $DIR/type-check-2.rs:58:28\n+error: cannot use value of type `[closure@$DIR/type-check-2.rs:60:28: 60:38]` for inline assembly\n+  --> $DIR/type-check-2.rs:60:28\n    |\n LL |         asm!(\"{}\", in(reg) |x: i32| x);\n    |                            ^^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `Vec<i32>` for inline assembly\n-  --> $DIR/type-check-2.rs:60:28\n+  --> $DIR/type-check-2.rs:62:28\n    |\n LL |         asm!(\"{}\", in(reg) vec![0]);\n    |                            ^^^^^^^\n@@ -24,63 +24,63 @@ LL |         asm!(\"{}\", in(reg) vec![0]);\n    = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot use value of type `(i32, i32, i32)` for inline assembly\n-  --> $DIR/type-check-2.rs:62:28\n+  --> $DIR/type-check-2.rs:64:28\n    |\n LL |         asm!(\"{}\", in(reg) (1, 2, 3));\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `[i32; 3]` for inline assembly\n-  --> $DIR/type-check-2.rs:64:28\n+  --> $DIR/type-check-2.rs:66:28\n    |\n LL |         asm!(\"{}\", in(reg) [1, 2, 3]);\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `fn() {main}` for inline assembly\n-  --> $DIR/type-check-2.rs:72:31\n+  --> $DIR/type-check-2.rs:74:31\n    |\n LL |         asm!(\"{}\", inout(reg) f);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `&mut i32` for inline assembly\n-  --> $DIR/type-check-2.rs:75:31\n+  --> $DIR/type-check-2.rs:77:31\n    |\n LL |         asm!(\"{}\", inout(reg) r);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: asm `sym` operand must point to a fn or static\n-  --> $DIR/type-check-2.rs:39:24\n+  --> $DIR/type-check-2.rs:41:24\n    |\n LL |         asm!(\"{}\", sym C);\n    |                        ^\n \n error: asm `sym` operand must point to a fn or static\n-  --> $DIR/type-check-2.rs:41:24\n+  --> $DIR/type-check-2.rs:43:24\n    |\n LL |         asm!(\"{}\", sym x);\n    |                        ^\n \n error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/type-check-2.rs:17:28\n+  --> $DIR/type-check-2.rs:19:28\n    |\n LL |         asm!(\"{}\", in(reg) x);\n    |                            ^ use of possibly-uninitialized `x`\n \n error[E0381]: use of possibly-uninitialized variable: `y`\n-  --> $DIR/type-check-2.rs:20:9\n+  --> $DIR/type-check-2.rs:22:9\n    |\n LL |         asm!(\"{}\", inout(reg) y);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `y`\n \n error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n-  --> $DIR/type-check-2.rs:28:29\n+  --> $DIR/type-check-2.rs:30:29\n    |\n LL |         let v: Vec<u64> = vec![0, 1, 2];\n    |             - help: consider changing this to be mutable: `mut v`\n@@ -89,7 +89,7 @@ LL |         asm!(\"{}\", out(reg) v[0]);\n    |                             ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n-  --> $DIR/type-check-2.rs:30:31\n+  --> $DIR/type-check-2.rs:32:31\n    |\n LL |         let v: Vec<u64> = vec![0, 1, 2];\n    |             - help: consider changing this to be mutable: `mut v`"}, {"sha": "c31a62ae7912a59e67303750374ae7f02520191f", "filename": "src/test/ui/asm/aarch64/type-check-3.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0dcd812de849fd0be56da98726a11773b9f72bf2/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dcd812de849fd0be56da98726a11773b9f72bf2/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr?ref=0dcd812de849fd0be56da98726a11773b9f72bf2", "patch": "@@ -1,5 +1,5 @@\n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:47:15\n+  --> $DIR/type-check-3.rs:48:15\n    |\n LL |         asm!(\"{}\", in(reg) 0u8);\n    |               ^^           --- for this argument\n@@ -9,7 +9,7 @@ LL |         asm!(\"{}\", in(reg) 0u8);\n    = help: or use the `x` modifier to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:49:15\n+  --> $DIR/type-check-3.rs:50:15\n    |\n LL |         asm!(\"{}\", in(reg) 0u16);\n    |               ^^           ---- for this argument\n@@ -18,7 +18,7 @@ LL |         asm!(\"{}\", in(reg) 0u16);\n    = help: or use the `x` modifier to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:51:15\n+  --> $DIR/type-check-3.rs:52:15\n    |\n LL |         asm!(\"{}\", in(reg) 0i32);\n    |               ^^           ---- for this argument\n@@ -27,7 +27,7 @@ LL |         asm!(\"{}\", in(reg) 0i32);\n    = help: or use the `x` modifier to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:53:15\n+  --> $DIR/type-check-3.rs:54:15\n    |\n LL |         asm!(\"{}\", in(reg) 0f32);\n    |               ^^           ---- for this argument\n@@ -36,7 +36,7 @@ LL |         asm!(\"{}\", in(reg) 0f32);\n    = help: or use the `x` modifier to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:56:15\n+  --> $DIR/type-check-3.rs:57:15\n    |\n LL |         asm!(\"{}\", in(vreg) 0i16);\n    |               ^^            ---- for this argument\n@@ -45,7 +45,7 @@ LL |         asm!(\"{}\", in(vreg) 0i16);\n    = help: or use the `v` modifier to keep the default formatting of `v0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:58:15\n+  --> $DIR/type-check-3.rs:59:15\n    |\n LL |         asm!(\"{}\", in(vreg) 0f32);\n    |               ^^            ---- for this argument\n@@ -54,7 +54,7 @@ LL |         asm!(\"{}\", in(vreg) 0f32);\n    = help: or use the `v` modifier to keep the default formatting of `v0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:60:15\n+  --> $DIR/type-check-3.rs:61:15\n    |\n LL |         asm!(\"{}\", in(vreg) 0f64);\n    |               ^^            ---- for this argument\n@@ -63,7 +63,7 @@ LL |         asm!(\"{}\", in(vreg) 0f64);\n    = help: or use the `v` modifier to keep the default formatting of `v0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:62:15\n+  --> $DIR/type-check-3.rs:63:15\n    |\n LL |         asm!(\"{}\", in(vreg_low16) 0f64);\n    |               ^^                  ---- for this argument\n@@ -72,7 +72,7 @@ LL |         asm!(\"{}\", in(vreg_low16) 0f64);\n    = help: or use the `v` modifier to keep the default formatting of `v0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:65:15\n+  --> $DIR/type-check-3.rs:66:15\n    |\n LL |         asm!(\"{0} {0}\", in(reg) 0i16);\n    |               ^^^ ^^^           ---- for this argument\n@@ -81,7 +81,7 @@ LL |         asm!(\"{0} {0}\", in(reg) 0i16);\n    = help: or use the `x` modifier to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:67:15\n+  --> $DIR/type-check-3.rs:68:15\n    |\n LL |         asm!(\"{0} {0:x}\", in(reg) 0i16);\n    |               ^^^                 ---- for this argument\n@@ -90,31 +90,31 @@ LL |         asm!(\"{0} {0:x}\", in(reg) 0i16);\n    = help: or use the `x` modifier to keep the default formatting of `x0`\n \n error: type `i128` cannot be used with this register class\n-  --> $DIR/type-check-3.rs:72:28\n+  --> $DIR/type-check-3.rs:73:28\n    |\n LL |         asm!(\"{}\", in(reg) 0i128);\n    |                            ^^^^^\n    |\n    = note: register class `reg` supports these types: i8, i16, i32, i64, f32, f64\n \n error: type `float64x2_t` cannot be used with this register class\n-  --> $DIR/type-check-3.rs:74:28\n+  --> $DIR/type-check-3.rs:75:28\n    |\n LL |         asm!(\"{}\", in(reg) f64x2);\n    |                            ^^^^^\n    |\n    = note: register class `reg` supports these types: i8, i16, i32, i64, f32, f64\n \n error: type `Simd256bit` cannot be used with this register class\n-  --> $DIR/type-check-3.rs:76:29\n+  --> $DIR/type-check-3.rs:77:29\n    |\n LL |         asm!(\"{}\", in(vreg) f64x4);\n    |                             ^^^^^\n    |\n    = note: register class `vreg` supports these types: i8, i16, i32, i64, f32, f64, i8x8, i16x4, i32x2, i64x1, f32x2, f64x1, i8x16, i16x8, i32x4, i64x2, f32x4, f64x2\n \n error: incompatible types for asm inout argument\n-  --> $DIR/type-check-3.rs:87:33\n+  --> $DIR/type-check-3.rs:88:33\n    |\n LL |         asm!(\"{:x}\", inout(reg) 0u32 => val_f32);\n    |                                 ^^^^    ^^^^^^^ type `f32`\n@@ -124,7 +124,7 @@ LL |         asm!(\"{:x}\", inout(reg) 0u32 => val_f32);\n    = note: asm inout arguments must have the same type, unless they are both pointers or integers of the same size\n \n error: incompatible types for asm inout argument\n-  --> $DIR/type-check-3.rs:89:33\n+  --> $DIR/type-check-3.rs:90:33\n    |\n LL |         asm!(\"{:x}\", inout(reg) 0u32 => val_ptr);\n    |                                 ^^^^    ^^^^^^^ type `*mut u8`\n@@ -134,7 +134,7 @@ LL |         asm!(\"{:x}\", inout(reg) 0u32 => val_ptr);\n    = note: asm inout arguments must have the same type, unless they are both pointers or integers of the same size\n \n error: incompatible types for asm inout argument\n-  --> $DIR/type-check-3.rs:91:33\n+  --> $DIR/type-check-3.rs:92:33\n    |\n LL |         asm!(\"{:x}\", inout(reg) main => val_u32);\n    |                                 ^^^^    ^^^^^^^ type `u32`\n@@ -144,23 +144,23 @@ LL |         asm!(\"{:x}\", inout(reg) main => val_u32);\n    = note: asm inout arguments must have the same type, unless they are both pointers or integers of the same size\n \n error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-3.rs:107:25\n+  --> $DIR/type-check-3.rs:108:25\n    |\n LL | global_asm!(\"{}\", const S);\n    |                         ^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-3.rs:110:35\n+  --> $DIR/type-check-3.rs:111:35\n    |\n LL | global_asm!(\"{}\", const const_foo(S));\n    |                                   ^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-3.rs:113:35\n+  --> $DIR/type-check-3.rs:114:35\n    |\n LL | global_asm!(\"{}\", const const_bar(S));\n    |                                   ^"}, {"sha": "cf4a1d9174e3d7fdf2f9f24e841c937bf316a4d1", "filename": "src/test/ui/asm/naked-functions-unused.aarch64.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0dcd812de849fd0be56da98726a11773b9f72bf2/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.aarch64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dcd812de849fd0be56da98726a11773b9f72bf2/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.aarch64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.aarch64.stderr?ref=0dcd812de849fd0be56da98726a11773b9f72bf2", "patch": "@@ -1,5 +1,5 @@\n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:15:32\n+  --> $DIR/naked-functions-unused.rs:16:32\n    |\n LL |     pub extern \"C\" fn function(a: usize, b: usize) -> usize {\n    |                                ^ help: if this is intentional, prefix it with an underscore: `_a`\n@@ -12,55 +12,55 @@ LL | #![deny(unused)]\n    = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:15:42\n+  --> $DIR/naked-functions-unused.rs:16:42\n    |\n LL |     pub extern \"C\" fn function(a: usize, b: usize) -> usize {\n    |                                          ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:24:38\n+  --> $DIR/naked-functions-unused.rs:25:38\n    |\n LL |         pub extern \"C\" fn associated(a: usize, b: usize) -> usize {\n    |                                      ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:24:48\n+  --> $DIR/naked-functions-unused.rs:25:48\n    |\n LL |         pub extern \"C\" fn associated(a: usize, b: usize) -> usize {\n    |                                                ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:30:41\n+  --> $DIR/naked-functions-unused.rs:31:41\n    |\n LL |         pub extern \"C\" fn method(&self, a: usize, b: usize) -> usize {\n    |                                         ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:30:51\n+  --> $DIR/naked-functions-unused.rs:31:51\n    |\n LL |         pub extern \"C\" fn method(&self, a: usize, b: usize) -> usize {\n    |                                                   ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:38:40\n+  --> $DIR/naked-functions-unused.rs:39:40\n    |\n LL |         extern \"C\" fn trait_associated(a: usize, b: usize) -> usize {\n    |                                        ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:38:50\n+  --> $DIR/naked-functions-unused.rs:39:50\n    |\n LL |         extern \"C\" fn trait_associated(a: usize, b: usize) -> usize {\n    |                                                  ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:44:43\n+  --> $DIR/naked-functions-unused.rs:45:43\n    |\n LL |         extern \"C\" fn trait_method(&self, a: usize, b: usize) -> usize {\n    |                                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:44:53\n+  --> $DIR/naked-functions-unused.rs:45:53\n    |\n LL |         extern \"C\" fn trait_method(&self, a: usize, b: usize) -> usize {\n    |                                                     ^ help: if this is intentional, prefix it with an underscore: `_b`"}]}