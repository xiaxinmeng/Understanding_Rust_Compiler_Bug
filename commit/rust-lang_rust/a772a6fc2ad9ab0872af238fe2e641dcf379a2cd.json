{"sha": "a772a6fc2ad9ab0872af238fe2e641dcf379a2cd", "node_id": "C_kwDOAAsO6NoAKGE3NzJhNmZjMmFkOWFiMDg3MmFmMjM4ZmUyZTY0MWRjZjM3OWEyY2Q", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-22T21:19:42Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-25T19:46:36Z"}, "message": "Add ErrorGuaranteed to HIR TyKind::Err", "tree": {"sha": "1eaa346d9036e415a072914b941f1b8d697b46d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eaa346d9036e415a072914b941f1b8d697b46d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd", "html_url": "https://github.com/rust-lang/rust/commit/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcca6a375bd4eddb3deea7038ebf29d02af53b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcca6a375bd4eddb3deea7038ebf29d02af53b48", "html_url": "https://github.com/rust-lang/rust/commit/dcca6a375bd4eddb3deea7038ebf29d02af53b48"}], "stats": {"total": 96, "additions": 51, "deletions": 45}, "files": [{"sha": "ec57b66cd118f28d1897a9262e7850ced47a30ac", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=a772a6fc2ad9ab0872af238fe2e641dcf379a2cd", "patch": "@@ -284,7 +284,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     .alloc_from_iter(fm.items.iter().map(|x| self.lower_foreign_item_ref(x))),\n             },\n             ItemKind::GlobalAsm(asm) => hir::ItemKind::GlobalAsm(self.lower_inline_asm(span, asm)),\n-            ItemKind::TyAlias(box TyAlias { generics, where_clauses, ty: Some(ty), .. }) => {\n+            ItemKind::TyAlias(box TyAlias { generics, where_clauses, ty, .. }) => {\n                 // We lower\n                 //\n                 // type Foo = impl Trait\n@@ -299,18 +299,16 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     &generics,\n                     id,\n                     &ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n-                    |this| this.lower_ty(ty, &ImplTraitContext::TypeAliasesOpaqueTy),\n-                );\n-                hir::ItemKind::TyAlias(ty, generics)\n-            }\n-            ItemKind::TyAlias(box TyAlias { generics, where_clauses, ty: None, .. }) => {\n-                let mut generics = generics.clone();\n-                add_ty_alias_where_clause(&mut generics, *where_clauses, true);\n-                let (generics, ty) = self.lower_generics(\n-                    &generics,\n-                    id,\n-                    &ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n-                    |this| this.arena.alloc(this.ty(span, hir::TyKind::Err)),\n+                    |this| match ty {\n+                        None => {\n+                            let guar = this.tcx.sess.delay_span_bug(\n+                                span,\n+                                \"expected to lower type alias type, but it was missing\",\n+                            );\n+                            this.arena.alloc(this.ty(span, hir::TyKind::Err(guar)))\n+                        }\n+                        Some(ty) => this.lower_ty(ty, &ImplTraitContext::TypeAliasesOpaqueTy),\n+                    },\n                 );\n                 hir::ItemKind::TyAlias(ty, generics)\n             }\n@@ -847,7 +845,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     &ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| match ty {\n                         None => {\n-                            let ty = this.arena.alloc(this.ty(i.span, hir::TyKind::Err));\n+                            let guar = this.tcx.sess.delay_span_bug(\n+                                i.span,\n+                                \"expected to lower associated type, but it was missing\",\n+                            );\n+                            let ty = this.arena.alloc(this.ty(i.span, hir::TyKind::Err(guar)));\n                             hir::ImplItemKind::Type(ty)\n                         }\n                         Some(ty) => {"}, {"sha": "5d78d914b6d7f7c67ab46bfa7d3ad832a9b494cb", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=a772a6fc2ad9ab0872af238fe2e641dcf379a2cd", "patch": "@@ -1082,11 +1082,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         hir::TypeBindingKind::Constraint { bounds }\n                     }\n                     DesugarKind::Error(position) => {\n-                        self.tcx.sess.emit_err(errors::MisplacedAssocTyBinding {\n+                        let guar = self.tcx.sess.emit_err(errors::MisplacedAssocTyBinding {\n                             span: constraint.span,\n                             position: DiagnosticArgFromDisplay(position),\n                         });\n-                        let err_ty = &*self.arena.alloc(self.ty(constraint.span, hir::TyKind::Err));\n+                        let err_ty =\n+                            &*self.arena.alloc(self.ty(constraint.span, hir::TyKind::Err(guar)));\n                         hir::TypeBindingKind::Equality { term: err_ty.into() }\n                     }\n                 }\n@@ -1255,7 +1256,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_ty_direct(&mut self, t: &Ty, itctx: &ImplTraitContext) -> hir::Ty<'hir> {\n         let kind = match &t.kind {\n             TyKind::Infer => hir::TyKind::Infer,\n-            TyKind::Err => hir::TyKind::Err,\n+            TyKind::Err => {\n+                hir::TyKind::Err(self.tcx.sess.delay_span_bug(t.span, \"TyKind::Err lowered\"))\n+            }\n             TyKind::Slice(ty) => hir::TyKind::Slice(self.lower_ty(ty, itctx)),\n             TyKind::Ptr(mt) => hir::TyKind::Ptr(self.lower_mt(mt, itctx)),\n             TyKind::Ref(region, mt) => {\n@@ -1381,7 +1384,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         path\n                     }\n                     ImplTraitContext::FeatureGated(position, feature) => {\n-                        self.tcx\n+                        let guar = self\n+                            .tcx\n                             .sess\n                             .create_feature_err(\n                                 MisplacedImplTrait {\n@@ -1391,24 +1395,24 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 *feature,\n                             )\n                             .emit();\n-                        hir::TyKind::Err\n+                        hir::TyKind::Err(guar)\n                     }\n                     ImplTraitContext::Disallowed(position) => {\n-                        self.tcx.sess.emit_err(MisplacedImplTrait {\n+                        let guar = self.tcx.sess.emit_err(MisplacedImplTrait {\n                             span: t.span,\n                             position: DiagnosticArgFromDisplay(position),\n                         });\n-                        hir::TyKind::Err\n+                        hir::TyKind::Err(guar)\n                     }\n                 }\n             }\n             TyKind::MacCall(_) => panic!(\"`TyKind::MacCall` should have been expanded by now\"),\n             TyKind::CVarArgs => {\n-                self.tcx.sess.delay_span_bug(\n+                let guar = self.tcx.sess.delay_span_bug(\n                     t.span,\n                     \"`TyKind::CVarArgs` should have been handled elsewhere\",\n                 );\n-                hir::TyKind::Err\n+                hir::TyKind::Err(guar)\n             }\n         };\n "}, {"sha": "18c824d8b4e66e69b6d1301455b7abc440c1cfa8", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=a772a6fc2ad9ab0872af238fe2e641dcf379a2cd", "patch": "@@ -42,7 +42,7 @@ pub use rustc_error_messages::{\n pub use rustc_lint_defs::{pluralize, Applicability};\n use rustc_macros::fluent_messages;\n use rustc_span::source_map::SourceMap;\n-use rustc_span::HashStableContext;\n+pub use rustc_span::ErrorGuaranteed;\n use rustc_span::{Loc, Span};\n \n use std::borrow::Cow;\n@@ -1846,17 +1846,3 @@ pub enum TerminalUrl {\n     Yes,\n     Auto,\n }\n-\n-/// Useful type to use with `Result<>` indicate that an error has already\n-/// been reported to the user, so no need to continue checking.\n-#[derive(Clone, Copy, Debug, Encodable, Decodable, Hash, PartialEq, Eq, PartialOrd, Ord)]\n-#[derive(HashStable_Generic)]\n-pub struct ErrorGuaranteed(());\n-\n-impl ErrorGuaranteed {\n-    /// To be used only if you really know what you are doing... ideally, we would find a way to\n-    /// eliminate all calls to this method.\n-    pub fn unchecked_claim_error_was_emitted() -> Self {\n-        ErrorGuaranteed(())\n-    }\n-}"}, {"sha": "db69f199aa72f75e36e8801260937b571f8944be", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=a772a6fc2ad9ab0872af238fe2e641dcf379a2cd", "patch": "@@ -369,10 +369,10 @@ impl<'hir> GenericArgs<'hir> {\n \n     pub fn has_err(&self) -> bool {\n         self.args.iter().any(|arg| match arg {\n-            GenericArg::Type(ty) => matches!(ty.kind, TyKind::Err),\n+            GenericArg::Type(ty) => matches!(ty.kind, TyKind::Err(_)),\n             _ => false,\n         }) || self.bindings.iter().any(|arg| match arg.kind {\n-            TypeBindingKind::Equality { term: Term::Ty(ty) } => matches!(ty.kind, TyKind::Err),\n+            TypeBindingKind::Equality { term: Term::Ty(ty) } => matches!(ty.kind, TyKind::Err(_)),\n             _ => false,\n         })\n     }\n@@ -2676,7 +2676,7 @@ pub enum TyKind<'hir> {\n     /// specified. This can appear anywhere in a type.\n     Infer,\n     /// Placeholder for a type that has failed to be defined.\n-    Err,\n+    Err(rustc_span::ErrorGuaranteed),\n }\n \n #[derive(Debug, HashStable_Generic)]"}, {"sha": "bcd7e2e05cf9e15f25563e2d90ba82b4f7688947", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=a772a6fc2ad9ab0872af238fe2e641dcf379a2cd", "patch": "@@ -844,7 +844,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n             visitor.visit_lifetime(lifetime);\n         }\n         TyKind::Typeof(ref expression) => visitor.visit_anon_const(expression),\n-        TyKind::Infer | TyKind::Err => {}\n+        TyKind::Infer | TyKind::Err(_) => {}\n     }\n }\n "}, {"sha": "a15cf454df72f30ead7aabfafb1f3fe92611e90b", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=a772a6fc2ad9ab0872af238fe2e641dcf379a2cd", "patch": "@@ -3113,7 +3113,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // handled specially and will not descend into this routine.\n                 self.ty_infer(None, ast_ty.span)\n             }\n-            hir::TyKind::Err => tcx.ty_error_misc(),\n+            hir::TyKind::Err(guar) => tcx.ty_error(*guar),\n         };\n \n         self.record_ty(ast_ty.hir_id, result_ty, ast_ty.span);"}, {"sha": "89c2d11427332a869160dff3dbf9b4b634d59dd2", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=a772a6fc2ad9ab0872af238fe2e641dcf379a2cd", "patch": "@@ -358,7 +358,7 @@ impl<'a> State<'a> {\n                 self.print_anon_const(e);\n                 self.word(\")\");\n             }\n-            hir::TyKind::Err => {\n+            hir::TyKind::Err(_) => {\n                 self.popen();\n                 self.word(\"/*ERROR*/\");\n                 self.pclose();"}, {"sha": "873cd33f6a4f288698a11158b11b8d83b1474623", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=a772a6fc2ad9ab0872af238fe2e641dcf379a2cd", "patch": "@@ -2149,3 +2149,17 @@ where\n         Hash::hash(&len, hasher);\n     }\n }\n+\n+/// Useful type to use with `Result<>` indicate that an error has already\n+/// been reported to the user, so no need to continue checking.\n+#[derive(Clone, Copy, Debug, Encodable, Decodable, Hash, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(HashStable_Generic)]\n+pub struct ErrorGuaranteed(());\n+\n+impl ErrorGuaranteed {\n+    /// To be used only if you really know what you are doing... ideally, we would find a way to\n+    /// eliminate all calls to this method.\n+    pub fn unchecked_claim_error_was_emitted() -> Self {\n+        ErrorGuaranteed(())\n+    }\n+}"}, {"sha": "0e8f0cfc5185dcaa4491ecc5d7bf5ecac08c0ec0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a772a6fc2ad9ab0872af238fe2e641dcf379a2cd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a772a6fc2ad9ab0872af238fe2e641dcf379a2cd", "patch": "@@ -1661,7 +1661,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n         }\n         TyKind::BareFn(barefn) => BareFunction(Box::new(clean_bare_fn_ty(barefn, cx))),\n         // Rustdoc handles `TyKind::Err`s by turning them into `Type::Infer`s.\n-        TyKind::Infer | TyKind::Err | TyKind::Typeof(..) => Infer,\n+        TyKind::Infer | TyKind::Err(_) | TyKind::Typeof(..) => Infer,\n     }\n }\n "}]}