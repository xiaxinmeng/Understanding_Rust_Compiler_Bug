{"sha": "55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff", "node_id": "C_kwDOAAsO6NoAKDU1Y2NiZDA5MGQ5NmVjM2JiMjhkYmNiMzgzZTY1YmJmYTNjMjkzZmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-23T09:21:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-23T09:21:45Z"}, "message": "Auto merge of #90065 - cjgillot:novalcache, r=Mark-Simulacrum\n\nDo not depend on the stored value when trying to cache on disk.\n\nHaving different criteria for loading and saving of query results can lead to saved results that may never be loaded.\nSince the on-disk cache is discarded as soon as a compilation error is issued, there should not be any need for an exclusion mecanism based on errors.\n\nAs a result, the possibility to condition the storage on the value itself does not appear useful.", "tree": {"sha": "9a97e775c5365ea41ae057987d3658199b922a0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a97e775c5365ea41ae057987d3658199b922a0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff", "html_url": "https://github.com/rust-lang/rust/commit/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf708558b758f4473c4f35986d9492ace7bf906d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf708558b758f4473c4f35986d9492ace7bf906d", "html_url": "https://github.com/rust-lang/rust/commit/cf708558b758f4473c4f35986d9492ace7bf906d"}, {"sha": "0a5666b838c903caf672a05b3b4156cafb03cb3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5666b838c903caf672a05b3b4156cafb03cb3f", "html_url": "https://github.com/rust-lang/rust/commit/0a5666b838c903caf672a05b3b4156cafb03cb3f"}], "stats": {"total": 37, "additions": 12, "deletions": 25}, "files": [{"sha": "443af50c5ff2c27b405ab6de9ebebc677a630cef", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff", "patch": "@@ -36,7 +36,7 @@ enum QueryModifier {\n     Storage(Type),\n \n     /// Cache the query to disk if the `Expr` returns true.\n-    Cache(Option<(IdentOrWild, IdentOrWild)>, Block),\n+    Cache(Option<IdentOrWild>, Block),\n \n     /// Custom code to load the query from disk.\n     LoadCached(Ident, Ident, Block),\n@@ -87,9 +87,7 @@ impl Parse for QueryModifier {\n                 let args;\n                 parenthesized!(args in input);\n                 let tcx = args.parse()?;\n-                args.parse::<Token![,]>()?;\n-                let value = args.parse()?;\n-                Some((tcx, value))\n+                Some(tcx)\n             } else {\n                 None\n             };\n@@ -197,7 +195,7 @@ struct QueryModifiers {\n     storage: Option<Type>,\n \n     /// Cache the query to disk if the `Block` returns true.\n-    cache: Option<(Option<(IdentOrWild, IdentOrWild)>, Block)>,\n+    cache: Option<(Option<IdentOrWild>, Block)>,\n \n     /// Custom code to load the query from disk.\n     load_cached: Option<(Ident, Ident, Block)>,\n@@ -375,14 +373,7 @@ fn add_query_description_impl(\n         let tcx = args\n             .as_ref()\n             .map(|t| {\n-                let t = &(t.0).0;\n-                quote! { #t }\n-            })\n-            .unwrap_or_else(|| quote! { _ });\n-        let value = args\n-            .as_ref()\n-            .map(|t| {\n-                let t = &(t.1).0;\n+                let t = &t.0;\n                 quote! { #t }\n             })\n             .unwrap_or_else(|| quote! { _ });\n@@ -394,7 +385,6 @@ fn add_query_description_impl(\n             fn cache_on_disk(\n                 #tcx: QueryCtxt<'tcx>,\n                 #key: &Self::Key,\n-                #value: Option<&Self::Value>\n             ) -> bool {\n                 #expr\n             }"}, {"sha": "c6c0fdc8851269d64339e2bdf955d0e7d1d3522f", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff", "patch": "@@ -765,10 +765,7 @@ rustc_queries! {\n     /// additional requirements that the closure's creator must verify.\n     query mir_borrowck(key: LocalDefId) -> &'tcx mir::BorrowCheckResult<'tcx> {\n         desc { |tcx| \"borrow-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n-        cache_on_disk_if(tcx, opt_result) {\n-            tcx.is_closure(key.to_def_id())\n-                || opt_result.map_or(false, |r| !r.concrete_opaque_types.is_empty())\n-        }\n+        cache_on_disk_if(tcx) { tcx.is_closure(key.to_def_id()) }\n     }\n     query mir_borrowck_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::BorrowCheckResult<'tcx> {\n         desc {"}, {"sha": "7678c86596b5a5efff88585e2ecdc933899acc30", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff", "patch": "@@ -1033,7 +1033,7 @@ where\n         if res.is_err() {\n             return;\n         }\n-        if Q::cache_on_disk(tcx, &key, Some(value)) {\n+        if Q::cache_on_disk(tcx, &key) {\n             let dep_node = SerializedDepNodeIndex::new(dep_node.index());\n \n             // Record position of the cache entry."}, {"sha": "a822ef1477808025967239fd18a511a7331c3d78", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff", "patch": "@@ -418,7 +418,7 @@ macro_rules! define_queries {\n \n                     let key = recover(tcx, dep_node).unwrap_or_else(|| panic!(\"Failed to recover key for {:?} with hash {}\", dep_node, dep_node.hash));\n                     let tcx = QueryCtxt::from_tcx(tcx);\n-                    if queries::$name::cache_on_disk(tcx, &key, None) {\n+                    if queries::$name::cache_on_disk(tcx, &key) {\n                         let _ = tcx.$name(key);\n                     }\n                 }"}, {"sha": "07b2e2b1080b8da3f0fac286904623476bf514f6", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff", "patch": "@@ -27,7 +27,7 @@ pub(crate) struct QueryVtable<CTX: QueryContext, K, V> {\n     pub compute: fn(CTX::DepContext, K) -> V,\n     pub hash_result: Option<fn(&mut StableHashingContext<'_>, &V) -> Fingerprint>,\n     pub handle_cycle_error: fn(CTX, DiagnosticBuilder<'_>) -> V,\n-    pub cache_on_disk: fn(CTX, &K, Option<&V>) -> bool,\n+    pub cache_on_disk: fn(CTX, &K) -> bool,\n     pub try_load_from_disk: fn(CTX, SerializedDepNodeIndex) -> Option<V>,\n }\n \n@@ -43,8 +43,8 @@ impl<CTX: QueryContext, K, V> QueryVtable<CTX, K, V> {\n         (self.compute)(tcx, key)\n     }\n \n-    pub(crate) fn cache_on_disk(&self, tcx: CTX, key: &K, value: Option<&V>) -> bool {\n-        (self.cache_on_disk)(tcx, key, value)\n+    pub(crate) fn cache_on_disk(&self, tcx: CTX, key: &K) -> bool {\n+        (self.cache_on_disk)(tcx, key)\n     }\n \n     pub(crate) fn try_load_from_disk(&self, tcx: CTX, index: SerializedDepNodeIndex) -> Option<V> {\n@@ -82,7 +82,7 @@ pub trait QueryDescription<CTX: QueryContext>: QueryAccessors<CTX> {\n     fn describe(tcx: CTX, key: Self::Key) -> String;\n \n     #[inline]\n-    fn cache_on_disk(_: CTX, _: &Self::Key, _: Option<&Self::Value>) -> bool {\n+    fn cache_on_disk(_: CTX, _: &Self::Key) -> bool {\n         false\n     }\n "}, {"sha": "5506666b6a1bfb6761e4898b56261129343482a8", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff", "patch": "@@ -512,7 +512,7 @@ where\n \n     // First we try to load the result from the on-disk cache.\n     // Some things are never cached on disk.\n-    if query.cache_on_disk(tcx, key, None) {\n+    if query.cache_on_disk(tcx, key) {\n         let prof_timer = tcx.dep_context().profiler().incr_cache_loading();\n         let result = query.try_load_from_disk(tcx, prev_dep_node_index);\n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());"}]}