{"sha": "3db335b934d31cf3bdaaa248ca34aa25ef67f366", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYjMzNWI5MzRkMzFjZjNiZGFhYTI0OGNhMzRhYTI1ZWY2N2YzNjY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-13T13:54:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-13T13:54:10Z"}, "message": "Rollup merge of #85068 - luqmana:78708-xcrate-diag, r=estebank\n\nFix diagnostic for cross crate private tuple struct constructors\n\nFixes #78708.\n\nThere was already some limited support for certain cross-crate scenarios but that didn't handle a tuple struct rexported from an inner module for example (e.g. the NonZero* types as seen in #85049).\n\n```Rust\n\u279c  cat bug.rs\nfn main() {\n    let _x = std::num::NonZeroU32(12);\n    let n = std::num::NonZeroU32::new(1).unwrap();\n    match n {\n        std::num::NonZeroU32(i) => {},\n    }\n}\n```\n\n**Before:**\n<details>\n\n```Rust\n\u279c  rustc +nightly bug.rs\nerror[E0423]: expected function, tuple struct or tuple variant, found struct `std::num::NonZeroU32`\n   --> bug.rs:2:14\n    |\n2   |       let _x = std::num::NonZeroU32(12);\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `std::num::NonZeroU32 { 0: val }`\n    |\n   ::: /home/luqman/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/num/nonzero.rs:148:1\n[snip]\nerror[E0532]: expected tuple struct or tuple variant, found struct `std::num::NonZeroU32`\n   --> bug.rs:5:9\n    |\n5   |           std::num::NonZeroU32(i) => {},\n    |           ^^^^^^^^^^^^^^^^^^^^^^^ help: use struct pattern syntax instead: `std::num::NonZeroU32 { 0 }`\n    |\n   ::: /home/luqman/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/num/nonzero.rs:148:1\n[snip]\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0423, E0532.\nFor more information about an error, try `rustc --explain E0423`.\n```\n</details>\n\n**After:**\n<details>\n\n```Rust\n\u279c  /rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc bug.rs\nerror[E0423]: cannot initialize a tuple struct which contains private fields\n   --> bug.rs:2:14\n    |\n2   |     let _x = std::num::NonZeroU32(12);\n    |              ^^^^^^^^^^^^^^^^^^^^\n    |\nnote: constructor is not visible here due to private fields\n   --> /rust/library/core/src/num/nonzero.rs:148:1\n[snip]\nerror[E0532]: cannot match against a tuple struct which contains private fields\n --> bug.rs:5:9\n  |\n5 |         std::num::NonZeroU32(i) => {},\n  |         ^^^^^^^^^^^^^^^^^^^^\n  |\nnote: constructor is not visible here due to private fields\n --> bug.rs:5:30\n  |\n5 |         std::num::NonZeroU32(i) => {},\n  |                              ^ private field\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0423, E0532.\nFor more information about an error, try `rustc --explain E0423`.\n```\n</details>\n\nOne question is if we should only collect the needed info for the cross-crate case after encountering an error instead of always doing it. Perf run perhaps to gauge the impact.", "tree": {"sha": "8b174dffaf31aceca6b2128c6b418606d8d3c0bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b174dffaf31aceca6b2128c6b418606d8d3c0bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3db335b934d31cf3bdaaa248ca34aa25ef67f366", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgnS+DCRBK7hj4Ov3rIwAARbwIAJa54hfuE6Yk/37Yh8l8FjBi\n1kK59Rk1Bk4oF6NMU6KFNNLSrA1JhJTYyNg1BdNqoiGoIuqjqIm+XYEPwq1Psm0t\nBXvTU1Zi5sD1VroQMNvbXZIesjUlQoHtCW1HtG+q5jhelpx4KYi53h5gm83PLCPV\nVZXXYEuba0YBcioLncXozxuru3IB2vWCDzbRTrmNsLoGuXaM8V1jJ9LLbEmBmsq9\nhg0p/ip8L+orSeVYN99p6zFh3sYs7TO04S2R90AumiID6zfki1//LNXiVqL+hw/w\nSoQsaNpdKLRW/E6rfboUCurF+vIeVAsTNZr8s/Y+mXfEDxiB8vsElqq8fMDSqyE=\n=Er1v\n-----END PGP SIGNATURE-----\n", "payload": "tree 8b174dffaf31aceca6b2128c6b418606d8d3c0bc\nparent 17b60b8738735d8d64d03601d1dad4001d1e5733\nparent 89300cdebc4f888f64b142a2393623c502cfe3fe\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1620914050 +0200\ncommitter GitHub <noreply@github.com> 1620914050 +0200\n\nRollup merge of #85068 - luqmana:78708-xcrate-diag, r=estebank\n\nFix diagnostic for cross crate private tuple struct constructors\n\nFixes #78708.\n\nThere was already some limited support for certain cross-crate scenarios but that didn't handle a tuple struct rexported from an inner module for example (e.g. the NonZero* types as seen in #85049).\n\n```Rust\n\u279c  cat bug.rs\nfn main() {\n    let _x = std::num::NonZeroU32(12);\n    let n = std::num::NonZeroU32::new(1).unwrap();\n    match n {\n        std::num::NonZeroU32(i) => {},\n    }\n}\n```\n\n**Before:**\n<details>\n\n```Rust\n\u279c  rustc +nightly bug.rs\nerror[E0423]: expected function, tuple struct or tuple variant, found struct `std::num::NonZeroU32`\n   --> bug.rs:2:14\n    |\n2   |       let _x = std::num::NonZeroU32(12);\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `std::num::NonZeroU32 { 0: val }`\n    |\n   ::: /home/luqman/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/num/nonzero.rs:148:1\n[snip]\nerror[E0532]: expected tuple struct or tuple variant, found struct `std::num::NonZeroU32`\n   --> bug.rs:5:9\n    |\n5   |           std::num::NonZeroU32(i) => {},\n    |           ^^^^^^^^^^^^^^^^^^^^^^^ help: use struct pattern syntax instead: `std::num::NonZeroU32 { 0 }`\n    |\n   ::: /home/luqman/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/num/nonzero.rs:148:1\n[snip]\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0423, E0532.\nFor more information about an error, try `rustc --explain E0423`.\n```\n</details>\n\n**After:**\n<details>\n\n```Rust\n\u279c  /rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc bug.rs\nerror[E0423]: cannot initialize a tuple struct which contains private fields\n   --> bug.rs:2:14\n    |\n2   |     let _x = std::num::NonZeroU32(12);\n    |              ^^^^^^^^^^^^^^^^^^^^\n    |\nnote: constructor is not visible here due to private fields\n   --> /rust/library/core/src/num/nonzero.rs:148:1\n[snip]\nerror[E0532]: cannot match against a tuple struct which contains private fields\n --> bug.rs:5:9\n  |\n5 |         std::num::NonZeroU32(i) => {},\n  |         ^^^^^^^^^^^^^^^^^^^^\n  |\nnote: constructor is not visible here due to private fields\n --> bug.rs:5:30\n  |\n5 |         std::num::NonZeroU32(i) => {},\n  |                              ^ private field\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0423, E0532.\nFor more information about an error, try `rustc --explain E0423`.\n```\n</details>\n\nOne question is if we should only collect the needed info for the cross-crate case after encountering an error instead of always doing it. Perf run perhaps to gauge the impact.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3db335b934d31cf3bdaaa248ca34aa25ef67f366", "html_url": "https://github.com/rust-lang/rust/commit/3db335b934d31cf3bdaaa248ca34aa25ef67f366", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3db335b934d31cf3bdaaa248ca34aa25ef67f366/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17b60b8738735d8d64d03601d1dad4001d1e5733", "url": "https://api.github.com/repos/rust-lang/rust/commits/17b60b8738735d8d64d03601d1dad4001d1e5733", "html_url": "https://github.com/rust-lang/rust/commit/17b60b8738735d8d64d03601d1dad4001d1e5733"}, {"sha": "89300cdebc4f888f64b142a2393623c502cfe3fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/89300cdebc4f888f64b142a2393623c502cfe3fe", "html_url": "https://github.com/rust-lang/rust/commit/89300cdebc4f888f64b142a2393623c502cfe3fe"}], "stats": {"total": 97, "additions": 83, "deletions": 14}, "files": [{"sha": "de5279c4a8da36f587a31e77552041dfe8088256", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3db335b934d31cf3bdaaa248ca34aa25ef67f366/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db335b934d31cf3bdaaa248ca34aa25ef67f366/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=3db335b934d31cf3bdaaa248ca34aa25ef67f366", "patch": "@@ -27,7 +27,7 @@ use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::mir::{self, Body, Promoted};\n use rustc_middle::ty::codec::TyDecoder;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt, Visibility};\n use rustc_serialize::{opaque, Decodable, Decoder};\n use rustc_session::Session;\n use rustc_span::hygiene::ExpnDataDecodeMode;\n@@ -1312,6 +1312,17 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .collect()\n     }\n \n+    fn get_struct_field_visibilities(&self, id: DefIndex) -> Vec<Visibility> {\n+        self.root\n+            .tables\n+            .children\n+            .get(self, id)\n+            .unwrap_or_else(Lazy::empty)\n+            .decode(self)\n+            .map(|field_index| self.get_visibility(field_index))\n+            .collect()\n+    }\n+\n     fn get_inherent_implementations_for_type(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "82ca634f2828ee6677002f87c88c8ddeedbf7c7f", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3db335b934d31cf3bdaaa248ca34aa25ef67f366/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db335b934d31cf3bdaaa248ca34aa25ef67f366/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=3db335b934d31cf3bdaaa248ca34aa25ef67f366", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n-use rustc_hir::def::DefKind;\n+use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_middle::hir::exports::Export;\n@@ -17,7 +17,7 @@ use rustc_middle::middle::cstore::{CrateSource, CrateStore, EncodedMetadata};\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{self, TyCtxt, Visibility};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::source_map::{Span, Spanned};\n@@ -392,6 +392,20 @@ impl CStore {\n         self.get_crate_data(def.krate).get_struct_field_names(def.index, sess)\n     }\n \n+    pub fn struct_field_visibilities_untracked(&self, def: DefId) -> Vec<Visibility> {\n+        self.get_crate_data(def.krate).get_struct_field_visibilities(def.index)\n+    }\n+\n+    pub fn ctor_def_id_and_kind_untracked(&self, def: DefId) -> Option<(DefId, CtorKind)> {\n+        self.get_crate_data(def.krate).get_ctor_def_id(def.index).map(|ctor_def_id| {\n+            (ctor_def_id, self.get_crate_data(def.krate).get_ctor_kind(def.index))\n+        })\n+    }\n+\n+    pub fn visibility_untracked(&self, def: DefId) -> Visibility {\n+        self.get_crate_data(def.krate).get_visibility(def.index)\n+    }\n+\n     pub fn item_children_untracked(\n         &self,\n         def_id: DefId,"}, {"sha": "e10314a11fc1bbacd6e83a378f10aecc774fb686", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3db335b934d31cf3bdaaa248ca34aa25ef67f366/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db335b934d31cf3bdaaa248ca34aa25ef67f366/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=3db335b934d31cf3bdaaa248ca34aa25ef67f366", "patch": "@@ -995,7 +995,20 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         // Record some extra data for better diagnostics.\n         let cstore = self.r.cstore();\n         match res {\n-            Res::Def(DefKind::Struct | DefKind::Union, def_id) => {\n+            Res::Def(DefKind::Struct, def_id) => {\n+                let field_names = cstore.struct_field_names_untracked(def_id, self.r.session);\n+                let ctor = cstore.ctor_def_id_and_kind_untracked(def_id);\n+                if let Some((ctor_def_id, ctor_kind)) = ctor {\n+                    let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);\n+                    let ctor_vis = cstore.visibility_untracked(ctor_def_id);\n+                    let field_visibilities = cstore.struct_field_visibilities_untracked(def_id);\n+                    self.r\n+                        .struct_constructors\n+                        .insert(def_id, (ctor_res, ctor_vis, field_visibilities));\n+                }\n+                self.insert_field_names(def_id, field_names);\n+            }\n+            Res::Def(DefKind::Union, def_id) => {\n                 let field_names = cstore.struct_field_names_untracked(def_id, self.r.session);\n                 self.insert_field_names(def_id, field_names);\n             }\n@@ -1007,12 +1020,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     self.r.has_self.insert(def_id);\n                 }\n             }\n-            Res::Def(DefKind::Ctor(CtorOf::Struct, ..), def_id) => {\n-                let parent = cstore.def_key(def_id).parent;\n-                if let Some(struct_def_id) = parent.map(|index| DefId { index, ..def_id }) {\n-                    self.r.struct_constructors.insert(struct_def_id, (res, vis, vec![]));\n-                }\n-            }\n             _ => {}\n         }\n     }"}, {"sha": "389c9c35101ab4367eee05aeda41003eb3487b3d", "filename": "src/test/ui/issues/auxiliary/issue-75907.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3db335b934d31cf3bdaaa248ca34aa25ef67f366/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-75907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db335b934d31cf3bdaaa248ca34aa25ef67f366/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-75907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-75907.rs?ref=3db335b934d31cf3bdaaa248ca34aa25ef67f366", "patch": "@@ -3,3 +3,15 @@ pub struct Bar(pub u8, u8, u8);\n pub fn make_bar() -> Bar {\n     Bar(1, 12, 10)\n }\n+\n+mod inner {\n+    pub struct Foo(u8, pub u8, u8);\n+\n+    impl Foo {\n+        pub fn new() -> Foo {\n+            Foo(1, 12, 10)\n+        }\n+    }\n+}\n+\n+pub use inner::Foo;"}, {"sha": "e30747782339cb4c675e783ba043beeb3f6a78cb", "filename": "src/test/ui/issues/issue-75907_b.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3db335b934d31cf3bdaaa248ca34aa25ef67f366/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db335b934d31cf3bdaaa248ca34aa25ef67f366/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.rs?ref=3db335b934d31cf3bdaaa248ca34aa25ef67f366", "patch": "@@ -3,9 +3,12 @@\n \n extern crate issue_75907 as a;\n \n-use a::{make_bar, Bar};\n+use a::{make_bar, Bar, Foo};\n \n fn main() {\n     let Bar(x, y, z) = make_bar();\n     //~^ ERROR cannot match against a tuple struct which contains private fields\n+\n+    let Foo(x, y, z) = Foo::new();\n+    //~^ ERROR cannot match against a tuple struct which contains private fields\n }"}, {"sha": "b82d08473c8c9962a6298c577adf58a916286085", "filename": "src/test/ui/issues/issue-75907_b.stderr", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3db335b934d31cf3bdaaa248ca34aa25ef67f366/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3db335b934d31cf3bdaaa248ca34aa25ef67f366/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.stderr?ref=3db335b934d31cf3bdaaa248ca34aa25ef67f366", "patch": "@@ -2,8 +2,30 @@ error[E0532]: cannot match against a tuple struct which contains private fields\n   --> $DIR/issue-75907_b.rs:9:9\n    |\n LL |     let Bar(x, y, z) = make_bar();\n-   |         ^^^ constructor is not visible here due to private fields\n+   |         ^^^\n+   |\n+note: constructor is not visible here due to private fields\n+  --> $DIR/issue-75907_b.rs:9:16\n+   |\n+LL |     let Bar(x, y, z) = make_bar();\n+   |                ^  ^ private field\n+   |                |\n+   |                private field\n+\n+error[E0532]: cannot match against a tuple struct which contains private fields\n+  --> $DIR/issue-75907_b.rs:12:9\n+   |\n+LL |     let Foo(x, y, z) = Foo::new();\n+   |         ^^^\n+   |\n+note: constructor is not visible here due to private fields\n+  --> $DIR/issue-75907_b.rs:12:13\n+   |\n+LL |     let Foo(x, y, z) = Foo::new();\n+   |             ^     ^ private field\n+   |             |\n+   |             private field\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0532`."}, {"sha": "d023ba3096e68ee0b85998869d2c802304f8a508", "filename": "src/test/ui/rfc-2008-non-exhaustive/struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db335b934d31cf3bdaaa248ca34aa25ef67f366/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3db335b934d31cf3bdaaa248ca34aa25ef67f366/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr?ref=3db335b934d31cf3bdaaa248ca34aa25ef67f366", "patch": "@@ -2,7 +2,7 @@ error[E0423]: cannot initialize a tuple struct which contains private fields\n   --> $DIR/struct.rs:20:14\n    |\n LL |     let ts = TupleStruct(640, 480);\n-   |              ^^^^^^^^^^^ constructor is not visible here due to private fields\n+   |              ^^^^^^^^^^^\n \n error[E0423]: expected value, found struct `UnitStruct`\n   --> $DIR/struct.rs:29:14"}]}