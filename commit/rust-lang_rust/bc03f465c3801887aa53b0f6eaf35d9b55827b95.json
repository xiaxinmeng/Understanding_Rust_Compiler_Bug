{"sha": "bc03f465c3801887aa53b0f6eaf35d9b55827b95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMDNmNDY1YzM4MDE4ODdhYTUzYjBmNmVhZjM1ZDliNTU4MjdiOTU=", "commit": {"author": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-17T19:38:35Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-24T06:20:34Z"}, "message": "Remove lint for logarithm division identity", "tree": {"sha": "b0465b7396e704096ede132b1aed406b684c9814", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0465b7396e704096ede132b1aed406b684c9814"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc03f465c3801887aa53b0f6eaf35d9b55827b95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc03f465c3801887aa53b0f6eaf35d9b55827b95", "html_url": "https://github.com/rust-lang/rust/commit/bc03f465c3801887aa53b0f6eaf35d9b55827b95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc03f465c3801887aa53b0f6eaf35d9b55827b95/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd2506bcbf99de5f54a40d5156b1bbbca710f6f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd2506bcbf99de5f54a40d5156b1bbbca710f6f0", "html_url": "https://github.com/rust-lang/rust/commit/fd2506bcbf99de5f54a40d5156b1bbbca710f6f0"}], "stats": {"total": 186, "additions": 4, "deletions": 182}, "files": [{"sha": "17babb46daad5bfde664976d26efcb120887e831", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 3, "deletions": 83, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/bc03f465c3801887aa53b0f6eaf35d9b55827b95/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc03f465c3801887aa53b0f6eaf35d9b55827b95/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=bc03f465c3801887aa53b0f6eaf35d9b55827b95", "patch": "@@ -4,12 +4,11 @@ use crate::consts::{\n };\n use crate::utils::*;\n use if_chain::if_chain;\n-use rustc::declare_lint_pass;\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc_hir::*;\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc::ty;\n use rustc_errors::Applicability;\n-use rustc_session::declare_tool_lint;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::f32::consts as f32_consts;\n use std::f64::consts as f64_consts;\n use sugg::Sugg;\n@@ -278,84 +277,6 @@ fn check_expm1(cx: &LateContext<'_, '_>, expr: &Expr) {\n     }\n }\n \n-// Checks whether two expressions evaluate to the same value\n-fn are_exprs_equivalent(cx: &LateContext<'_, '_>, left: &Expr, right: &Expr) -> bool {\n-    // Checks whether the values are constant and equal\n-    if_chain! {\n-        if let Some((left_value, _)) = constant(cx, cx.tables, left);\n-        if let Some((right_value, _)) = constant(cx, cx.tables, right);\n-        if left_value == right_value;\n-        then {\n-            return true;\n-        }\n-    }\n-\n-    // Checks whether the expressions resolve to the same variable\n-    if_chain! {\n-        if let ExprKind::Path(ref left_qpath) = left.kind;\n-        if let QPath::Resolved(_, ref left_path) = *left_qpath;\n-        if left_path.segments.len() == 1;\n-        if let def::Res::Local(left_local_id) = qpath_res(cx, left_qpath, left.hir_id);\n-        if let ExprKind::Path(ref right_qpath) = right.kind;\n-        if let QPath::Resolved(_, ref right_path) = *right_qpath;\n-        if right_path.segments.len() == 1;\n-        if let def::Res::Local(right_local_id) = qpath_res(cx, right_qpath, right.hir_id);\n-        if left_local_id == right_local_id;\n-        then {\n-            return true;\n-        }\n-    }\n-\n-    false\n-}\n-\n-fn check_log_division(cx: &LateContext<'_, '_>, expr: &Expr) {\n-    let log_methods = [\"log\", \"log2\", \"log10\", \"ln\"];\n-\n-    if_chain! {\n-        if let ExprKind::Binary(op, ref lhs, ref rhs) = expr.kind;\n-        if op.node == BinOpKind::Div;\n-        if cx.tables.expr_ty(lhs).is_floating_point();\n-        if let ExprKind::MethodCall(left_path, _, left_args) = &lhs.kind;\n-        if cx.tables.expr_ty(&left_args[0]).is_floating_point();\n-        if let ExprKind::MethodCall(right_path, _, right_args) = &rhs.kind;\n-        if cx.tables.expr_ty(&right_args[0]).is_floating_point();\n-        let left_method = left_path.ident.name.as_str();\n-        if left_method == right_path.ident.name.as_str();\n-        if log_methods.iter().any(|&method| left_method == method);\n-        then {\n-            let left_recv = &left_args[0];\n-            let right_recv = &right_args[0];\n-\n-            // Return early when bases are not equal\n-            if left_method == \"log\" && !are_exprs_equivalent(cx, &left_args[1], &right_args[1]) {\n-                return;\n-            }\n-\n-            // Reduce the expression further for bases 2, 10 and e\n-            let suggestion = if let Some(method) = get_specialized_log_method(cx, right_recv) {\n-                format!(\"{}.{}()\", Sugg::hir(cx, left_recv, \"..\"), method)\n-            } else {\n-                format!(\n-                    \"{}.log({})\",\n-                    Sugg::hir(cx, left_recv, \"..\"),\n-                    Sugg::hir(cx, right_recv, \"..\")\n-                )\n-            };\n-\n-            span_lint_and_sugg(\n-                cx,\n-                FLOATING_POINT_IMPROVEMENTS,\n-                expr.span,\n-                \"x.log(b) / y.log(b) can be reduced to x.log(y)\",\n-                \"consider using\",\n-                suggestion,\n-                Applicability::MachineApplicable,\n-            );\n-        }\n-    }\n-}\n-\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FloatingPointArithmetic {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprKind::MethodCall(ref path, _, args) = &expr.kind {\n@@ -371,7 +292,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FloatingPointArithmetic {\n             }\n         } else {\n             check_expm1(cx, expr);\n-            check_log_division(cx, expr);\n         }\n     }\n }"}, {"sha": "18b7686280ec881ec94fec9d9bb24ab763fa7982", "filename": "tests/ui/floating_point_log.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bc03f465c3801887aa53b0f6eaf35d9b55827b95/tests%2Fui%2Ffloating_point_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc03f465c3801887aa53b0f6eaf35d9b55827b95/tests%2Fui%2Ffloating_point_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.rs?ref=bc03f465c3801887aa53b0f6eaf35d9b55827b95", "patch": "@@ -54,30 +54,4 @@ fn check_ln1p() {\n     let _ = (1.0 + x - 2.0).ln();\n }\n \n-fn check_log_division() {\n-    let x = 3f32;\n-    let y = 2f32;\n-    let b = 4f32;\n-\n-    let _ = x.log2() / y.log2();\n-    let _ = x.log10() / y.log10();\n-    let _ = x.ln() / y.ln();\n-    let _ = x.log(4.0) / y.log(4.0);\n-    let _ = x.log(b) / y.log(b);\n-    let _ = x.log(b) / y.log(x);\n-    let _ = x.log(b) / 2f32.log(b);\n-\n-    let x = 3f64;\n-    let y = 2f64;\n-    let b = 4f64;\n-\n-    let _ = x.log2() / y.log2();\n-    let _ = x.log10() / y.log10();\n-    let _ = x.ln() / y.ln();\n-    let _ = x.log(4.0) / y.log(4.0);\n-    let _ = x.log(b) / y.log(b);\n-    let _ = x.log(b) / y.log(x);\n-    let _ = x.log(b) / 2f64.log(b);\n-}\n-\n fn main() {}"}, {"sha": "c169745ddf9457ad387b0b2db17b3f5034c9eb13", "filename": "tests/ui/floating_point_log.stderr", "status": "modified", "additions": 1, "deletions": 73, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/bc03f465c3801887aa53b0f6eaf35d9b55827b95/tests%2Fui%2Ffloating_point_log.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc03f465c3801887aa53b0f6eaf35d9b55827b95/tests%2Fui%2Ffloating_point_log.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.stderr?ref=bc03f465c3801887aa53b0f6eaf35d9b55827b95", "patch": "@@ -168,77 +168,5 @@ error: ln(1 + x) can be computed more accurately\n LL |     let _ = (x * 2.0 + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n \n-error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:62:13\n-   |\n-LL |     let _ = x.log2() / y.log2();\n-   |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n-\n-error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:63:13\n-   |\n-LL |     let _ = x.log10() / y.log10();\n-   |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n-\n-error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:64:13\n-   |\n-LL |     let _ = x.ln() / y.ln();\n-   |             ^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n-\n-error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:65:13\n-   |\n-LL |     let _ = x.log(4.0) / y.log(4.0);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n-\n-error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:66:13\n-   |\n-LL |     let _ = x.log(b) / y.log(b);\n-   |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n-\n-error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:68:13\n-   |\n-LL |     let _ = x.log(b) / 2f32.log(b);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log2()`\n-\n-error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:74:13\n-   |\n-LL |     let _ = x.log2() / y.log2();\n-   |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n-\n-error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:75:13\n-   |\n-LL |     let _ = x.log10() / y.log10();\n-   |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n-\n-error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:76:13\n-   |\n-LL |     let _ = x.ln() / y.ln();\n-   |             ^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n-\n-error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:77:13\n-   |\n-LL |     let _ = x.log(4.0) / y.log(4.0);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n-\n-error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:78:13\n-   |\n-LL |     let _ = x.log(b) / y.log(b);\n-   |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n-\n-error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:80:13\n-   |\n-LL |     let _ = x.log(b) / 2f64.log(b);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log2()`\n-\n-error: aborting due to 40 previous errors\n+error: aborting due to 28 previous errors\n "}]}