{"sha": "d08ab945de8ede93366c6ffc12ed58068a73b4a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwOGFiOTQ1ZGU4ZWRlOTMzNjZjNmZmYzEyZWQ1ODA2OGE3M2I0YTA=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-08-14T20:41:20Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-06T10:19:32Z"}, "message": "Fix rebase", "tree": {"sha": "a191de6382fe2087e54fd59527b94c5019880e46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a191de6382fe2087e54fd59527b94c5019880e46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d08ab945de8ede93366c6ffc12ed58068a73b4a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d08ab945de8ede93366c6ffc12ed58068a73b4a0", "html_url": "https://github.com/rust-lang/rust/commit/d08ab945de8ede93366c6ffc12ed58068a73b4a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d08ab945de8ede93366c6ffc12ed58068a73b4a0/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e29765250b84809dc11fc26220dfcc544680d582", "url": "https://api.github.com/repos/rust-lang/rust/commits/e29765250b84809dc11fc26220dfcc544680d582", "html_url": "https://github.com/rust-lang/rust/commit/e29765250b84809dc11fc26220dfcc544680d582"}], "stats": {"total": 322, "additions": 121, "deletions": 201}, "files": [{"sha": "27751eb554d3c4dddf42dd74f526e8f9ad2ef9e6", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -376,7 +376,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                 | ty::PredicateAtom::Subtype(_)\n                 | ty::PredicateAtom::ConstEvaluatable(..)\n                 | ty::PredicateAtom::ConstEquate(..) => {\n-                    let (pred, _) = infcx.replace_bound_vars_with_placeholders(binder);\n+                    let pred = infcx.replace_bound_vars_with_placeholders(binder);\n                     ProcessResult::Changed(mk_pending(vec![\n                         obligation.with(pred.to_predicate(self.selcx.tcx())),\n                     ]))\n@@ -673,7 +673,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n             Ok(Ok(None)) => {\n                 *stalled_on = trait_ref_infer_vars(\n                     self.selcx,\n-                    project_obligation.predicate.to_poly_trait_ref(self.selcx.tcx()),\n+                    project_obligation.predicate.to_poly_trait_ref(tcx),\n                 );\n                 ProcessResult::Unchanged\n             }"}, {"sha": "c93087a18cf04575340da0d5a5b7b4727da5e012", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -59,7 +59,6 @@ pub use self::specialize::specialization_graph::FutureCompatOverlapErrorKind;\n pub use self::specialize::{specialization_graph, translate_substs, OverlapError};\n pub use self::structural_match::search_for_structural_match_violation;\n pub use self::structural_match::NonStructuralMatchTy;\n-pub use self::util::subst_assoc_item_bound;\n pub use self::util::{elaborate_predicates, elaborate_trait_ref, elaborate_trait_refs};\n pub use self::util::{expand_trait_aliases, TraitAliasExpander};\n pub use self::util::{"}, {"sha": "6527d8277f8dcc1d947fb181e623faad4b598ddc", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -38,7 +38,7 @@ use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArgKind, Subst, SubstsRef};\n use rustc_middle::ty::{self, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n-use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_span::symbol::sym;\n \n use std::cell::{Cell, RefCell};"}, {"sha": "f626bb0b7e365eb3d9453b60e70d6327bd715171", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 66, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -6,13 +6,11 @@ use smallvec::SmallVec;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, Subst, SubstsRef};\n-use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, WithConstness};\n \n use super::{Normalized, Obligation, ObligationCause, PredicateObligation, SelectionContext};\n pub use rustc_infer::traits::util::*;\n \n-use std::iter;\n-\n ///////////////////////////////////////////////////////////////////////////\n // `TraitAliasExpander` iterator\n ///////////////////////////////////////////////////////////////////////////\n@@ -359,69 +357,6 @@ pub fn impl_item_is_final(tcx: TyCtxt<'_>, assoc_item: &ty::AssocItem) -> bool {\n     assoc_item.defaultness.is_final() && tcx.impl_defaultness(assoc_item.container.id()).is_final()\n }\n \n-/// Map a bound from an associated item to apply to some other type.\n-/// For example, given the following trait\n-///\n-/// trait X<A> { type Y<'a>: PartialEq<A> }\n-///\n-/// Say that we know that `<() as X<B>>::Y<'c> = i32` and we need to check that\n-/// the `PartialEq` bound applies. We would then call this function with:\n-///\n-/// - `bound` = `<Self as X<A>>::Y<'a>: PartialEq`\n-/// - `normalized_projection_ty` = `i32`\n-/// - `assoc_item_substs` = `[(), B, 'c]`\n-///\n-/// This method would then return `i32: PartialEq<B>`.\n-pub fn subst_assoc_item_bound<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    bound: ty::Predicate<'tcx>,\n-    normalized_projection_ty: Ty<'tcx>,\n-    assoc_item_substs: &[GenericArg<'tcx>],\n-) -> ty::Predicate<'tcx> {\n-    // We're substituting these inside the closure passed to map_bound, so they\n-    // can't have escaping bound regions.\n-    assert!(!normalized_projection_ty.has_escaping_bound_vars());\n-    assert!(!assoc_item_substs.iter().all(|arg| arg.has_escaping_bound_vars()));\n-\n-    let translate_predicate_substs = move |predicate_substs: SubstsRef<'tcx>| {\n-        tcx.mk_substs(\n-            iter::once(normalized_projection_ty.into())\n-                .chain(predicate_substs[1..].iter().map(|s| s.subst(tcx, assoc_item_substs))),\n-        )\n-    };\n-\n-    match bound.kind() {\n-        ty::PredicateKind::Trait(poly_tr, c) => poly_tr\n-            .map_bound(|tr| {\n-                let trait_substs = translate_predicate_substs(tr.trait_ref.substs);\n-                ty::TraitRef { def_id: tr.def_id(), substs: trait_substs }\n-            })\n-            .with_constness(*c)\n-            .to_predicate(tcx),\n-        ty::PredicateKind::Projection(poly_projection) => poly_projection\n-            .map_bound(|projection| {\n-                let projection_substs = translate_predicate_substs(projection.projection_ty.substs);\n-                ty::ProjectionPredicate {\n-                    projection_ty: ty::ProjectionTy {\n-                        substs: projection_substs,\n-                        item_def_id: projection.projection_ty.item_def_id,\n-                    },\n-                    ty: projection.ty.subst(tcx, assoc_item_substs),\n-                }\n-            })\n-            .to_predicate(tcx),\n-        ty::PredicateKind::TypeOutlives(poly_outlives) => poly_outlives\n-            .map_bound(|outlives| {\n-                ty::OutlivesPredicate(\n-                    normalized_projection_ty,\n-                    outlives.1.subst(tcx, assoc_item_substs),\n-                )\n-            })\n-            .to_predicate(tcx),\n-        _ => bug!(\"unexepected projection bound: `{:?}`\", bound),\n-    }\n-}\n-\n pub enum TupleArgumentsFlag {\n     Yes,\n     No,"}, {"sha": "d66bfd482069dab2a32847a7e8099fedc2f90459", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -391,7 +391,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                         cause.clone(),\n                         depth,\n                         param_env,\n-                        ty::PredicateKind::WellFormed(arg).to_predicate(tcx),\n+                        ty::PredicateAtom::WellFormed(arg).to_predicate(tcx),\n                     )\n                 }),\n         );"}, {"sha": "a59c81aa9b835c56e278cc22083c4997be42cd6c", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -738,10 +738,10 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<Ru\n         self,\n         interner: &RustInterner<'tcx>,\n     ) -> Option<chalk_solve::rust_ir::QuantifiedInlineBound<RustInterner<'tcx>>> {\n-        match &self.kind() {\n-            ty::PredicateKind::Trait(predicate, _) => {\n+        match self.bound_atom(interner.tcx).skip_binder() {\n+            ty::PredicateAtom::Trait(predicate, _) => {\n                 let (predicate, binders, _named_regions) =\n-                    collect_bound_vars(interner, interner.tcx, predicate);\n+                    collect_bound_vars(interner, interner.tcx, &ty::Binder::bind(predicate));\n \n                 Some(chalk_ir::Binders::new(\n                     binders,\n@@ -750,24 +750,24 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<Ru\n                     ),\n                 ))\n             }\n-            ty::PredicateKind::Projection(predicate) => {\n+            ty::PredicateAtom::Projection(predicate) => {\n                 let (predicate, binders, _named_regions) =\n-                    collect_bound_vars(interner, interner.tcx, predicate);\n+                    collect_bound_vars(interner, interner.tcx, &ty::Binder::bind(predicate));\n \n                 Some(chalk_ir::Binders::new(\n                     binders,\n                     chalk_solve::rust_ir::InlineBound::AliasEqBound(predicate.lower_into(interner)),\n                 ))\n             }\n-            ty::PredicateKind::TypeOutlives(_predicate) => None,\n-            ty::PredicateKind::WellFormed(_ty) => None,\n-\n-            ty::PredicateKind::RegionOutlives(..)\n-            | ty::PredicateKind::ObjectSafe(..)\n-            | ty::PredicateKind::ClosureKind(..)\n-            | ty::PredicateKind::Subtype(..)\n-            | ty::PredicateKind::ConstEvaluatable(..)\n-            | ty::PredicateKind::ConstEquate(..) => bug!(\"unexpected predicate {}\", &self),\n+            ty::PredicateAtom::TypeOutlives(_predicate) => None,\n+            ty::PredicateAtom::WellFormed(_ty) => None,\n+\n+            ty::PredicateAtom::RegionOutlives(..)\n+            | ty::PredicateAtom::ObjectSafe(..)\n+            | ty::PredicateAtom::ClosureKind(..)\n+            | ty::PredicateAtom::Subtype(..)\n+            | ty::PredicateAtom::ConstEvaluatable(..)\n+            | ty::PredicateAtom::ConstEquate(..) => bug!(\"unexpected predicate {}\", &self),\n         }\n     }\n }"}, {"sha": "817b4070754a67fde248631269ae5005e8d78814", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -1225,36 +1225,35 @@ pub fn check_type_bounds<'tcx>(\n \n         let impl_ty_hir_id = tcx.hir().local_def_id_to_hir_id(impl_ty.def_id.expect_local());\n         let normalize_cause = traits::ObligationCause::misc(impl_ty_span, impl_ty_hir_id);\n-        let cause = ObligationCause::new(\n-            impl_ty_span,\n-            impl_ty_hir_id,\n-            ObligationCauseCode::ItemObligation(trait_ty.def_id),\n-        );\n+        let mk_cause = |span| {\n+            ObligationCause::new(\n+                impl_ty_span,\n+                impl_ty_hir_id,\n+                ObligationCauseCode::BindingObligation(trait_ty.def_id, span),\n+            )\n+        };\n \n         let obligations = tcx\n             .explicit_item_bounds(trait_ty.def_id)\n             .iter()\n             .map(|&(bound, span)| {\n-                let concrete_ty_bound =\n-                    traits::subst_assoc_item_bound(tcx, bound, impl_ty_value, rebased_substs);\n+                let concrete_ty_bound = bound.subst(tcx, rebased_substs);\n                 debug!(\"check_type_bounds: concrete_ty_bound = {:?}\", concrete_ty_bound);\n \n                 traits::Obligation::new(mk_cause(span), param_env, concrete_ty_bound)\n             })\n             .collect();\n         debug!(\"check_type_bounds: item_bounds={:?}\", obligations);\n \n-        for obligation in util::elaborate_obligations(tcx, obligations) {\n-            let concrete_ty_predicate = predicate.subst(tcx, rebased_substs);\n-            debug!(\"compare_projection_bounds: concrete predicate = {:?}\", concrete_ty_predicate);\n-\n+        for mut obligation in util::elaborate_obligations(tcx, obligations) {\n             let traits::Normalized { value: normalized_predicate, obligations } = traits::normalize(\n                 &mut selcx,\n                 normalize_param_env,\n                 normalize_cause.clone(),\n-                &concrete_ty_predicate,\n+                &obligation.predicate,\n             );\n             debug!(\"compare_projection_bounds: normalized predicate = {:?}\", normalized_predicate);\n+            obligation.predicate = normalized_predicate;\n \n             inh.register_predicates(obligations);\n             inh.register_predicate(obligation);"}, {"sha": "ad306fc1a0b09c7e1066a0dac5815437f693d89e", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -2137,8 +2137,8 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n             // associated type:\n             // * It must use the identity substs of the item.\n             //     * Since any generic parameters on the item are not in scope,\n-            //       this means that the item is not a GAT, and its identity substs\n-            //       are the same as the trait's.\n+            //       this means that the item is not a GAT, and its identity\n+            //       substs are the same as the trait's.\n             // * It must be an associated type for this trait (*not* a\n             //   supertrait).\n             if let ty::Projection(projection) = ty.kind {\n@@ -2158,14 +2158,12 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n             .predicates\n             .iter()\n             .copied()\n-            .filter(|(pred, _)| match pred.kind() {\n-                ty::PredicateKind::Trait(tr, _) => !is_assoc_item_ty(tr.skip_binder().self_ty()),\n-                ty::PredicateKind::Projection(proj) => {\n-                    !is_assoc_item_ty(proj.skip_binder().projection_ty.self_ty())\n-                }\n-                ty::PredicateKind::TypeOutlives(outlives) => {\n-                    !is_assoc_item_ty(outlives.skip_binder().0)\n+            .filter(|(pred, _)| match pred.skip_binders() {\n+                ty::PredicateAtom::Trait(tr, _) => !is_assoc_item_ty(tr.self_ty()),\n+                ty::PredicateAtom::Projection(proj) => {\n+                    !is_assoc_item_ty(proj.projection_ty.self_ty())\n                 }\n+                ty::PredicateAtom::TypeOutlives(outlives) => !is_assoc_item_ty(outlives.0),\n                 _ => true,\n             })\n             .collect();"}, {"sha": "9c29ceeb593df8a19f36ab11d491eb21152048a1", "filename": "compiler/rustc_typeck/src/collect/item_bounds.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -37,12 +37,10 @@ fn associated_type_bounds<'tcx>(\n     let trait_predicates = tcx.trait_explicit_predicates_and_bounds(trait_def_id.expect_local());\n \n     let bounds_from_parent =\n-        trait_predicates.predicates.iter().copied().filter(|(pred, _)| match pred.kind() {\n-            ty::PredicateKind::Trait(tr, _) => tr.skip_binder().self_ty() == item_ty,\n-            ty::PredicateKind::Projection(proj) => {\n-                proj.skip_binder().projection_ty.self_ty() == item_ty\n-            }\n-            ty::PredicateKind::TypeOutlives(outlives) => outlives.skip_binder().0 == item_ty,\n+        trait_predicates.predicates.iter().copied().filter(|(pred, _)| match pred.skip_binders() {\n+            ty::PredicateAtom::Trait(tr, _) => tr.self_ty() == item_ty,\n+            ty::PredicateAtom::Projection(proj) => proj.projection_ty.self_ty() == item_ty,\n+            ty::PredicateAtom::TypeOutlives(outlives) => outlives.0 == item_ty,\n             _ => false,\n         });\n "}, {"sha": "cc0b58188e6242e6ad5ddeaf7f665bd5492b56ea", "filename": "src/test/ui/associated-type-bounds/bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -4,7 +4,7 @@ error[E0277]: `<<Self as Case1>::A as std::iter::Iterator>::Item` doesn't implem\n LL |     type A: Iterator<Item: Debug>;\n    |                            ^^^^^ `<<Self as Case1>::A as std::iter::Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    | \n-  ::: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+  ::: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n    |\n LL | pub trait Debug {\n    | --------------- required by this bound in `std::fmt::Debug`\n@@ -21,7 +21,7 @@ error[E0277]: the trait bound `<<Self as Foo>::Out as Baz>::Assoc: std::default:\n LL | pub trait Foo { type Out: Baz<Assoc: Default>; }\n    |                                      ^^^^^^^ the trait `std::default::Default` is not implemented for `<<Self as Foo>::Out as Baz>::Assoc`\n    | \n-  ::: $SRC_DIR/libcore/default.rs:LL:COL\n+  ::: $SRC_DIR/core/src/default.rs:LL:COL\n    |\n LL | pub trait Default: Sized {\n    | ------------------------ required by this bound in `std::default::Default`"}, {"sha": "44cc7738d7e2cf70dcb3d68db16cf90af238420a", "filename": "src/test/ui/associated-types/defaults-suitability.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -45,7 +45,6 @@ trait C where\n     bool: IsU8<Self::Assoc>,\n {\n     type Assoc = u8;\n-    //~^ ERROR the trait bound `u8: IsU8<<Self as C>::Assoc>` is not satisfied\n }\n \n // Test that we get all expected errors if that default is unsuitable\n@@ -55,7 +54,7 @@ trait D where\n     bool: IsU8<Self::Assoc>,\n {\n     type Assoc = NotClone;\n-    //~^ ERROR the trait bound `NotClone: IsU8<<Self as D>::Assoc>` is not satisfied\n+    //~^ ERROR the trait bound `NotClone: IsU8<NotClone>` is not satisfied\n }\n \n // Test behavior of the check when defaults refer to other defaults:"}, {"sha": "5ee800e19133d2bf8baf5f7a29554d25d5d850ce", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -42,20 +42,8 @@ LL |     type Assoc: Foo<Self> = ();\n    |     |           required by this bound in `Bar::Assoc`\n    |     the trait `Foo<Self>` is not implemented for `()`\n \n-error[E0277]: the trait bound `u8: IsU8<<Self as C>::Assoc>` is not satisfied\n-  --> $DIR/defaults-suitability.rs:44:5\n-   |\n-LL |     Self::Assoc: IsU8<Self::Assoc>,\n-   |                  ----------------- required by this bound in `C::Assoc`\n-...\n-LL |     type Assoc = u8;\n-   |     ^^^^^-----^^^^^^\n-   |     |    |\n-   |     |    required by a bound in this\n-   |     the trait `IsU8<<Self as C>::Assoc>` is not implemented for `u8`\n-\n-error[E0277]: the trait bound `NotClone: IsU8<<Self as D>::Assoc>` is not satisfied\n-  --> $DIR/defaults-suitability.rs:54:5\n+error[E0277]: the trait bound `NotClone: IsU8<NotClone>` is not satisfied\n+  --> $DIR/defaults-suitability.rs:53:5\n    |\n LL |     Self::Assoc: IsU8<Self::Assoc>,\n    |                  ----------------- required by this bound in `D::Assoc`\n@@ -64,10 +52,10 @@ LL |     type Assoc = NotClone;\n    |     ^^^^^-----^^^^^^^^^^^^\n    |     |    |\n    |     |    required by a bound in this\n-   |     the trait `IsU8<<Self as D>::Assoc>` is not implemented for `NotClone`\n+   |     the trait `IsU8<NotClone>` is not implemented for `NotClone`\n \n error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:63:5\n+  --> $DIR/defaults-suitability.rs:62:5\n    |\n LL |     type Bar: Clone = Vec<Self::Baz>;\n    |     ^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^\n@@ -82,7 +70,7 @@ LL | trait Foo2<T> where <Self as Foo2<T>>::Baz: Clone {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `<Self as Foo25<T>>::Baz: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:72:5\n+  --> $DIR/defaults-suitability.rs:71:5\n    |\n LL |     type Bar: Clone = Vec<Self::Baz>;\n    |     ^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^\n@@ -97,7 +85,7 @@ LL | trait Foo25<T: Clone> where <Self as Foo25<T>>::Baz: Clone {\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:84:5\n+  --> $DIR/defaults-suitability.rs:83:5\n    |\n LL |     Self::Baz: Clone,\n    |                ----- required by this bound in `Foo3::Baz`\n@@ -113,6 +101,6 @@ help: consider further restricting type parameter `T`\n LL |     Self::Baz: Clone, T: Clone\n    |                     ^^^^^^^^^^\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "d1832cdbc0cd42add490693a1c7fd39bc8283128", "filename": "src/test/ui/associated-types/defaults-wf.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n LL |     type Ty = Vec<[u8]>;\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    | \n-  ::: $SRC_DIR/liballoc/vec.rs:LL:COL\n+  ::: $SRC_DIR/alloc/src/vec.rs:LL:COL\n    |\n LL | pub struct Vec<T> {\n    |                - required by this bound in `std::vec::Vec`"}, {"sha": "987b67875817368fefa1c3b07540ede9bf269a1f", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -145,7 +145,7 @@ error[E0277]: the trait bound `<<Self as _Tr3>::A as std::iter::Iterator>::Item:\n LL |     type A: Iterator<Item: Copy>;\n    |                            ^^^^ the trait `std::marker::Copy` is not implemented for `<<Self as _Tr3>::A as std::iter::Iterator>::Item`\n    | \n-  ::: $SRC_DIR/libcore/marker.rs:LL:COL\n+  ::: $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub trait Copy: Clone {\n    | --------------------- required by this bound in `std::marker::Copy`"}, {"sha": "34823cbafd3218953da5be3295927682282ebde0", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -15,6 +15,7 @@ impl PointerFamily<u32> for Foo {\n     //~^ ERROR generic associated types are unstable\n     type Pointer2<U32> = Box<U32>;\n     //~^ ERROR generic associated types are unstable\n+    //~| ERROR the trait bound `U32: std::clone::Clone` is not satisfied\n }\n \n trait Bar {"}, {"sha": "e04a129dbbbb6a7243e9b40bc656127cb1cc206f", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -44,7 +44,7 @@ LL |     type Pointer2<U32> = Box<U32>;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: where clauses on associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:21:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:22:5\n    |\n LL |     type Assoc where Self: Sized;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -53,14 +53,26 @@ LL |     type Assoc where Self: Sized;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: where clauses on associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:26:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:27:5\n    |\n LL |     type Assoc where Self: Sized = Foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n-error: aborting due to 7 previous errors\n+error[E0277]: the trait bound `U32: std::clone::Clone` is not satisfied\n+  --> $DIR/feature-gate-generic_associated_types.rs:16:5\n+   |\n+LL |     type Pointer2<U32> = Box<U32>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `U32`\n+   |\n+help: consider restricting type parameter `U32`\n+   |\n+LL |     type Pointer2<U32: std::clone::Clone> = Box<U32>;\n+   |                      ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0277, E0658.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "19658528a0b892bc1f0fbf3d158653399896c5db", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -17,7 +17,7 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n LL |    Pin::new(&mut gen).resume(());\n    |                       ^^^^^^ doesn't have a size known at compile-time\n    | \n-  ::: $SRC_DIR/libcore/ops/generator.rs:LL:COL\n+  ::: $SRC_DIR/core/src/ops/generator.rs:LL:COL\n    |\n LL | pub enum GeneratorState<Y, R> {\n    |                         - required by this bound in `std::ops::GeneratorState`"}, {"sha": "27970b15a411d6d94df825d1547de7b7691f6a46", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -19,8 +19,9 @@ struct Bar;\n impl Foo for Bar {\n     type Assoc = usize;\n     type Assoc2<T> = Vec<T>;\n+    //~^ ERROR `T` doesn't implement `std::fmt::Display`\n     type Assoc3<T> where T: Iterator = Vec<T>;\n-    //~^ impl has stricter requirements than trait\n+    //~^ ERROR impl has stricter requirements than trait\n     type WithDefault<'a, T: Debug + 'a> = &'a dyn Iterator<Item=T>;\n     type NoGenerics = ::std::cell::Cell<i32>;\n }"}, {"sha": "da8b625ea7f751ea01ed1ac1f474a1f353256673", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.stderr", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -1,12 +1,25 @@\n+error[E0277]: `T` doesn't implement `std::fmt::Display`\n+  --> $DIR/generic-associated-types-where.rs:21:5\n+   |\n+LL |     type Assoc2<T> = Vec<T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n+   |\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+help: consider restricting type parameter `T`\n+   |\n+LL |     type Assoc2<T: std::fmt::Display> = Vec<T>;\n+   |                  ^^^^^^^^^^^^^^^^^^^\n+\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/generic-associated-types-where.rs:22:5\n+  --> $DIR/generic-associated-types-where.rs:23:5\n    |\n LL |     type Assoc3<T>;\n    |     --------------- definition of `Assoc3` from trait\n ...\n LL |     type Assoc3<T> where T: Iterator = Vec<T>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Iterator`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0276`.\n+Some errors have detailed explanations: E0276, E0277.\n+For more information about an error, try `rustc --explain E0276`."}, {"sha": "089a214667ea24f8ee05713f1d0b90c6dedd74c6", "filename": "src/test/ui/generic-associated-types/impl_bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -16,6 +16,7 @@ impl<T> Foo for Fooy<T> {\n     //~^ ERROR the parameter type `T` may not live long enough\n     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n     //~^ ERROR lifetime bound not satisfied\n+    //~| ERROR lifetime bound not satisfied\n     type C where Self: Copy = String;\n     //~^ ERROR the trait bound `T: Copy` is not satisfied\n }"}, {"sha": "e6f27a45a3cfb36fa02d717e97b6e1993ee2264d", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -37,7 +37,7 @@ help: consider restricting type parameter `T`\n LL | impl<T: Copy> Foo for Fooy<T> {\n    |       ^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0277, E0310, E0478.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "98aa82aba83055a33a1f244a9365b454fe69c3ce", "filename": "src/test/ui/generic-associated-types/impl_bounds_ok.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -10,11 +10,12 @@ trait Foo {\n     type C where Self: Clone;\n }\n \n+#[derive(Clone)]\n struct Fooy;\n \n impl Foo for Fooy {\n     type A<'a> = (&'a ());\n-    type B<'a, 'b> = (&'a(), &'b ());\n+    type B<'a: 'b, 'b> = (&'a(), &'b ());\n     type C = String;\n }\n \n@@ -24,7 +25,7 @@ struct Fooer<T>(T);\n impl<T> Foo for Fooer<T> {\n     type A<'x> where T: 'x = (&'x ());\n     type B<'u, 'v> where 'u: 'v = (&'v &'u ());\n-    type C where Self: ToOwned = String;\n+    type C where Self: Clone + ToOwned = String;\n }\n \n fn main() {}"}, {"sha": "99d5bcf2bace9a3cb6abb00bf404c0f157fbcaad", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -7,7 +7,7 @@ trait ATy {\n \n impl<'b> ATy for &'b () {\n     type Item<'a> = &'b ();\n-    //~^ ERROR lifetime bound not satisfied\n+    //~^ ERROR  the type `&'b ()` does not fulfill the required lifetime\n }\n \n trait StaticTy {\n@@ -16,7 +16,7 @@ trait StaticTy {\n \n impl StaticTy for () {\n     type Item<'a> = &'a ();\n-    //~^ ERROR lifetime bound not satisfied\n+    //~^ ERROR  the type `&'a ()` does not fulfill the required lifetime\n }\n \n fn main() {}"}, {"sha": "5d612284a21873ebef696a19e25ac31a8ab9c65f", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.stderr", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -1,33 +1,23 @@\n-error[E0478]: lifetime bound not satisfied\n+error[E0477]: the type `&'b ()` does not fulfill the required lifetime\n   --> $DIR/unsatisfied-outlives-bound.rs:9:5\n    |\n LL |     type Item<'a> = &'b ();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'b` as defined on the impl at 8:6\n-  --> $DIR/unsatisfied-outlives-bound.rs:8:6\n-   |\n-LL | impl<'b> ATy for &'b () {\n-   |      ^^\n-note: but lifetime parameter must outlive the lifetime `'a` as defined on the associated item at 9:15\n+note: type must outlive the lifetime `'a` as defined on the associated item at 9:15\n   --> $DIR/unsatisfied-outlives-bound.rs:9:15\n    |\n LL |     type Item<'a> = &'b ();\n    |               ^^\n \n-error[E0478]: lifetime bound not satisfied\n+error[E0477]: the type `&'a ()` does not fulfill the required lifetime\n   --> $DIR/unsatisfied-outlives-bound.rs:18:5\n    |\n LL |     type Item<'a> = &'a ();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined on the associated item at 18:15\n-  --> $DIR/unsatisfied-outlives-bound.rs:18:15\n-   |\n-LL |     type Item<'a> = &'a ();\n-   |               ^^\n-   = note: but lifetime parameter must outlive the static lifetime\n+   = note: type must satisfy the static lifetime\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0478`.\n+For more information about this error, try `rustc --explain E0477`."}, {"sha": "80f118e12c4a799f1ac0943bb9867968a101855f", "filename": "src/test/ui/issues/issue-60283.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -19,7 +19,7 @@ error[E0277]: the size for values of type `<() as Trait<'_>>::Item` cannot be kn\n LL |     foo((), drop)\n    |             ^^^^ doesn't have a size known at compile-time\n    | \n-  ::: $SRC_DIR/libcore/mem/mod.rs:LL:COL\n+  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub fn drop<T>(_x: T) {}\n    |             - required by this bound in `std::mem::drop`"}, {"sha": "575dfafe15efc4dc9e17b07011560a114d027133", "filename": "src/test/ui/regions/regions-assoc-type-region-bound-in-trait-not-met.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.rs?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -3,7 +3,7 @@\n \n trait Foo<'a> {\n     type Value: 'a;\n-    fn dummy(&'a self) { }\n+    fn dummy(&'a self) {}\n }\n \n impl<'a> Foo<'a> for &'a i16 {\n@@ -13,12 +13,12 @@ impl<'a> Foo<'a> for &'a i16 {\n \n impl<'a> Foo<'static> for &'a i32 {\n     type Value = &'a i32;\n-    //~^ ERROR lifetime bound not satisfied\n+    //~^ ERROR the type `&'a i32` does not fulfill the required lifetime\n }\n \n-impl<'a,'b> Foo<'b> for &'a i64 {\n+impl<'a, 'b> Foo<'b> for &'a i64 {\n     type Value = &'a i32;\n-    //~^ ERROR lifetime bound not satisfied\n+    //~^ ERROR the type `&'a i32` does not fulfill the required lifetime\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "03da33ae11ffe1ab5e15e8c7e02c5b4d95e0ffa2", "filename": "src/test/ui/regions/regions-assoc-type-region-bound-in-trait-not-met.stderr", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -1,33 +1,23 @@\n-error[E0478]: lifetime bound not satisfied\n+error[E0477]: the type `&'a i32` does not fulfill the required lifetime\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:15:5\n    |\n LL |     type Value = &'a i32;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined on the impl at 14:6\n-  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:14:6\n-   |\n-LL | impl<'a> Foo<'static> for &'a i32 {\n-   |      ^^\n-   = note: but lifetime parameter must outlive the static lifetime\n+   = note: type must satisfy the static lifetime\n \n-error[E0478]: lifetime bound not satisfied\n+error[E0477]: the type `&'a i32` does not fulfill the required lifetime\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:20:5\n    |\n LL |     type Value = &'a i32;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined on the impl at 19:6\n-  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:6\n-   |\n-LL | impl<'a,'b> Foo<'b> for &'a i64 {\n-   |      ^^\n-note: but lifetime parameter must outlive the lifetime `'b` as defined on the impl at 19:9\n-  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:9\n+note: type must outlive the lifetime `'b` as defined on the impl at 19:10\n+  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:10\n    |\n-LL | impl<'a,'b> Foo<'b> for &'a i64 {\n-   |         ^^\n+LL | impl<'a, 'b> Foo<'b> for &'a i64 {\n+   |          ^^\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0478`.\n+For more information about this error, try `rustc --explain E0477`."}, {"sha": "00100e0e9ea75d129c78f98bcceb31139c402637", "filename": "src/test/ui/regions/regions-assoc-type-static-bound-in-trait-not-met.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.rs?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -3,17 +3,17 @@\n \n trait Foo {\n     type Value: 'static;\n-    fn dummy(&self) { }\n+    fn dummy(&self) {}\n }\n \n impl<'a> Foo for &'a i32 {\n     type Value = &'a i32;\n-    //~^ ERROR lifetime bound not satisfied\n+    //~^ ERROR the type `&'a i32` does not fulfill the required lifetime\n }\n \n impl<'a> Foo for i32 {\n     // OK.\n     type Value = i32;\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "d8efeac5b8a30bc022ce72663bbc9148786ec3c9", "filename": "src/test/ui/regions/regions-assoc-type-static-bound-in-trait-not-met.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d08ab945de8ede93366c6ffc12ed58068a73b4a0/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr?ref=d08ab945de8ede93366c6ffc12ed58068a73b4a0", "patch": "@@ -1,16 +1,11 @@\n-error[E0478]: lifetime bound not satisfied\n+error[E0477]: the type `&'a i32` does not fulfill the required lifetime\n   --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:10:5\n    |\n LL |     type Value = &'a i32;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined on the impl at 9:6\n-  --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:9:6\n-   |\n-LL | impl<'a> Foo for &'a i32 {\n-   |      ^^\n-   = note: but lifetime parameter must outlive the static lifetime\n+   = note: type must satisfy the static lifetime\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0478`.\n+For more information about this error, try `rustc --explain E0477`."}]}