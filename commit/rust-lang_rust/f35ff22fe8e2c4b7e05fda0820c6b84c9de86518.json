{"sha": "f35ff22fe8e2c4b7e05fda0820c6b84c9de86518", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNWZmMjJmZThlMmM0YjdlMDVmZGEwODIwYzZiODRjOWRlODY1MTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-18T14:53:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-28T08:15:03Z"}, "message": "do not access `inherited_impls` map directly", "tree": {"sha": "a0b2e51e9b1f9d5578fd6e852c6c7255f79db2f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0b2e51e9b1f9d5578fd6e852c6c7255f79db2f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f35ff22fe8e2c4b7e05fda0820c6b84c9de86518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f35ff22fe8e2c4b7e05fda0820c6b84c9de86518", "html_url": "https://github.com/rust-lang/rust/commit/f35ff22fe8e2c4b7e05fda0820c6b84c9de86518", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f35ff22fe8e2c4b7e05fda0820c6b84c9de86518/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ace517da0d1e356aa5b42f4cdee6854538591ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ace517da0d1e356aa5b42f4cdee6854538591ef2", "html_url": "https://github.com/rust-lang/rust/commit/ace517da0d1e356aa5b42f4cdee6854538591ef2"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "622bf4dd0bd0835f4c126a26f9ed85f7bd8b86ee", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f35ff22fe8e2c4b7e05fda0820c6b84c9de86518/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35ff22fe8e2c4b7e05fda0820c6b84c9de86518/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=f35ff22fe8e2c4b7e05fda0820c6b84c9de86518", "patch": "@@ -475,14 +475,13 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n         // This is done to handle the case where, for example, the static\n         // method of a private type is used, but the type itself is never\n         // called directly.\n-        if let Some(impl_list) =\n-                self.tcx.maps.inherent_impls.borrow().get(&self.tcx.hir.local_def_id(id)) {\n-            for &impl_did in impl_list.iter() {\n-                for &item_did in &self.tcx.associated_item_def_ids(impl_did)[..] {\n-                    if let Some(item_node_id) = self.tcx.hir.as_local_node_id(item_did) {\n-                        if self.live_symbols.contains(&item_node_id) {\n-                            return true;\n-                        }\n+        let def_id = self.tcx.hir.local_def_id(id);\n+        let inherent_impls = self.tcx.inherent_impls(def_id);\n+        for &impl_did in inherent_impls.iter() {\n+            for &item_did in &self.tcx.associated_item_def_ids(impl_did)[..] {\n+                if let Some(item_node_id) = self.tcx.hir.as_local_node_id(item_did) {\n+                    if self.live_symbols.contains(&item_node_id) {\n+                        return true;\n                     }\n                 }\n             }"}, {"sha": "06df23f7cd0fbe6e3db650a873e1963479d653e6", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f35ff22fe8e2c4b7e05fda0820c6b84c9de86518/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35ff22fe8e2c4b7e05fda0820c6b84c9de86518/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=f35ff22fe8e2c4b7e05fda0820c6b84c9de86518", "patch": "@@ -626,14 +626,14 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n     // Encodes the inherent implementations of a structure, enumeration, or trait.\n     fn encode_inherent_implementations(&mut self, def_id: DefId) -> LazySeq<DefIndex> {\n         debug!(\"EntryBuilder::encode_inherent_implementations({:?})\", def_id);\n-        match self.tcx.maps.inherent_impls.borrow().get(&def_id) {\n-            None => LazySeq::empty(),\n-            Some(implementations) => {\n-                self.lazy_seq(implementations.iter().map(|&def_id| {\n-                    assert!(def_id.is_local());\n-                    def_id.index\n-                }))\n-            }\n+        let implementations = self.tcx.inherent_impls(def_id);\n+        if implementations.is_empty() {\n+            LazySeq::empty()\n+        } else {\n+            self.lazy_seq(implementations.iter().map(|&def_id| {\n+                assert!(def_id.is_local());\n+                def_id.index\n+            }))\n         }\n     }\n "}, {"sha": "238952865c7bd91e3525e19fc3e6b5e8e8471c37", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f35ff22fe8e2c4b7e05fda0820c6b84c9de86518/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35ff22fe8e2c4b7e05fda0820c6b84c9de86518/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=f35ff22fe8e2c4b7e05fda0820c6b84c9de86518", "patch": "@@ -66,11 +66,15 @@ pub fn inherent_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     //\n     // [the plan]: https://github.com/rust-lang/rust-roadmap/issues/4\n \n+    thread_local! {\n+        static EMPTY_DEF_ID_VEC: Rc<Vec<DefId>> = Rc::new(vec![])\n+    }\n+\n     let result = tcx.dep_graph.with_ignore(|| {\n         let crate_map = tcx.crate_inherent_impls(ty_def_id.krate);\n         match crate_map.inherent_impls.get(&ty_def_id) {\n             Some(v) => v.clone(),\n-            None => Rc::new(vec![]),\n+            None => EMPTY_DEF_ID_VEC.with(|v| v.clone())\n         }\n     });\n "}]}