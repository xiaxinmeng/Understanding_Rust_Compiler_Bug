{"sha": "d2c509a3c6b06ba02807bf94c00fad4c4a9262a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYzUwOWEzYzZiMDZiYTAyODA3YmY5NGMwMGZhZDRjNGE5MjYyYTU=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-01-12T10:01:24Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-01-12T10:34:35Z"}, "message": "Address review comments.", "tree": {"sha": "59288e3a32b45eb3f1bff8332cf41cd03a36edb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59288e3a32b45eb3f1bff8332cf41cd03a36edb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2c509a3c6b06ba02807bf94c00fad4c4a9262a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c509a3c6b06ba02807bf94c00fad4c4a9262a5", "html_url": "https://github.com/rust-lang/rust/commit/d2c509a3c6b06ba02807bf94c00fad4c4a9262a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2c509a3c6b06ba02807bf94c00fad4c4a9262a5/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "091ba6daa0a0a528b5d9fc816529a9bb25503960", "url": "https://api.github.com/repos/rust-lang/rust/commits/091ba6daa0a0a528b5d9fc816529a9bb25503960", "html_url": "https://github.com/rust-lang/rust/commit/091ba6daa0a0a528b5d9fc816529a9bb25503960"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "d7504b0b80bd9ae48b60b735ef019819a7d82acd", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d2c509a3c6b06ba02807bf94c00fad4c4a9262a5/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c509a3c6b06ba02807bf94c00fad4c4a9262a5/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=d2c509a3c6b06ba02807bf94c00fad4c4a9262a5", "patch": "@@ -1132,7 +1132,7 @@ pub struct Cursor<'a, T: 'a> {\n #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n impl<T: fmt::Debug> fmt::Debug for Cursor<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_tuple(\"Cursor\").field(&self.list).field(&self.index).finish()\n+        f.debug_tuple(\"Cursor\").field(&self.list).field(&self.index()).finish()\n     }\n }\n \n@@ -1158,11 +1158,21 @@ pub struct CursorMut<'a, T: 'a> {\n #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n impl<T: fmt::Debug> fmt::Debug for CursorMut<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_tuple(\"CursorMut\").field(&self.list).field(&self.index).finish()\n+        f.debug_tuple(\"CursorMut\").field(&self.list).field(&self.index()).finish()\n     }\n }\n \n impl<'a, T> Cursor<'a, T> {\n+    /// Returns the cursor position index within the `LinkedList`.\n+    ///\n+    /// This returns `None` if the cursor is currently pointing to the\n+    /// \"ghost\" non-element.\n+    #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n+    pub fn index(&self) -> Option<usize> {\n+        let _ = self.current?;\n+        Some(self.index)\n+    }\n+\n     /// Moves the cursor to the next element of the `LinkedList`.\n     ///\n     /// If the cursor is pointing to the \"ghost\" non-element then this will move it to\n@@ -1250,6 +1260,16 @@ impl<'a, T> Cursor<'a, T> {\n }\n \n impl<'a, T> CursorMut<'a, T> {\n+    /// Returns the cursor position index within the `LinkedList`.\n+    ///\n+    /// This returns `None` if the cursor is currently pointing to the\n+    /// \"ghost\" non-element.\n+    #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n+    pub fn index(&self) -> Option<usize> {\n+        let _ = self.current?;\n+        Some(self.index)\n+    }\n+\n     /// Moves the cursor to the next element of the `LinkedList`.\n     ///\n     /// If the cursor is pointing to the \"ghost\" non-element then this will move it to\n@@ -1456,6 +1476,7 @@ impl<'a, T> CursorMut<'a, T> {\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n     pub fn split_after(self) -> LinkedList<T> {\n         let split_off_idx = if self.index == self.list.len { 0 } else { self.index + 1 };\n+        // no need to update `self.index` because the cursor is consumed.\n         unsafe { self.list.split_off_after_node(self.current, split_off_idx) }\n     }\n \n@@ -1468,6 +1489,7 @@ impl<'a, T> CursorMut<'a, T> {\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n     pub fn split_before(self) -> LinkedList<T> {\n         let split_off_idx = self.index;\n+        // no need to update `self.index` because the cursor is consumed.\n         unsafe { self.list.split_off_before_node(self.current, split_off_idx) }\n     }\n }"}, {"sha": "d223752c7f7ece51fd9cc0210a0b72f0f04570bc", "filename": "src/liballoc/collections/linked_list/tests.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d2c509a3c6b06ba02807bf94c00fad4c4a9262a5/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c509a3c6b06ba02807bf94c00fad4c4a9262a5/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs?ref=d2c509a3c6b06ba02807bf94c00fad4c4a9262a5", "patch": "@@ -313,36 +313,45 @@ fn test_cursor_move_peek() {\n     assert_eq!(cursor.current(), Some(&1));\n     assert_eq!(cursor.peek_next(), Some(&2));\n     assert_eq!(cursor.peek_prev(), None);\n+    assert_eq!(cursor.index(), Some(0));\n     cursor.move_prev();\n     assert_eq!(cursor.current(), None);\n     assert_eq!(cursor.peek_next(), Some(&1));\n     assert_eq!(cursor.peek_prev(), Some(&6));\n+    assert_eq!(cursor.index(), None);\n     cursor.move_next();\n     cursor.move_next();\n     assert_eq!(cursor.current(), Some(&2));\n     assert_eq!(cursor.peek_next(), Some(&3));\n     assert_eq!(cursor.peek_prev(), Some(&1));\n+    assert_eq!(cursor.index(), Some(1));\n \n     let mut m: LinkedList<u32> = LinkedList::new();\n     m.extend(&[1, 2, 3, 4, 5, 6]);\n     let mut cursor = m.cursor_mut();\n     assert_eq!(cursor.current(), Some(&mut 1));\n     assert_eq!(cursor.peek_next(), Some(&mut 2));\n     assert_eq!(cursor.peek_prev(), None);\n+    assert_eq!(cursor.index(), Some(0));\n     cursor.move_prev();\n     assert_eq!(cursor.current(), None);\n     assert_eq!(cursor.peek_next(), Some(&mut 1));\n     assert_eq!(cursor.peek_prev(), Some(&mut 6));\n+    assert_eq!(cursor.index(), None);\n     cursor.move_next();\n     cursor.move_next();\n     assert_eq!(cursor.current(), Some(&mut 2));\n     assert_eq!(cursor.peek_next(), Some(&mut 3));\n     assert_eq!(cursor.peek_prev(), Some(&mut 1));\n+    assert_eq!(cursor.index(), Some(1));\n     let mut cursor2 = cursor.as_cursor();\n     assert_eq!(cursor2.current(), Some(&2));\n+    assert_eq!(cursor2.index(), Some(1));\n     cursor2.move_next();\n     assert_eq!(cursor2.current(), Some(&3));\n+    assert_eq!(cursor2.index(), Some(2));\n     assert_eq!(cursor.current(), Some(&mut 2));\n+    assert_eq!(cursor.index(), Some(1));\n }\n \n #[test]"}]}