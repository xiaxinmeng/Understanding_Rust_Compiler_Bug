{"sha": "8431f261dd160021b6af85916f161a13dd101ca0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MzFmMjYxZGQxNjAwMjFiNmFmODU5MTZmMTYxYTEzZGQxMDFjYTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-29T18:35:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-29T18:35:04Z"}, "message": "Auto merge of #64902 - Centril:rollup-1i431vs, r=Centril\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #64691 (Point at definition when misusing ADT)\n - #64735 (Add long error explanation for E0533)\n - #64825 (Point at enclosing match when expecting `()` in arm)\n - #64858 (Add support for relating slices in `super_relate_consts`)\n - #64894 (syntax: fix dropping of attribute on first param of non-method assocated fn)\n - #64898 (fixed typo)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "73c411884bf616dec9f4efa6ef66ee2275358205", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73c411884bf616dec9f4efa6ef66ee2275358205"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8431f261dd160021b6af85916f161a13dd101ca0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8431f261dd160021b6af85916f161a13dd101ca0", "html_url": "https://github.com/rust-lang/rust/commit/8431f261dd160021b6af85916f161a13dd101ca0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8431f261dd160021b6af85916f161a13dd101ca0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06c68947ad88f22a8342fe6b54dc0fe54de6e011", "url": "https://api.github.com/repos/rust-lang/rust/commits/06c68947ad88f22a8342fe6b54dc0fe54de6e011", "html_url": "https://github.com/rust-lang/rust/commit/06c68947ad88f22a8342fe6b54dc0fe54de6e011"}, {"sha": "50940ae952ffcab9abd39a2bc1dfd3e1605e0ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/50940ae952ffcab9abd39a2bc1dfd3e1605e0ece", "html_url": "https://github.com/rust-lang/rust/commit/50940ae952ffcab9abd39a2bc1dfd3e1605e0ece"}], "stats": {"total": 1113, "additions": 881, "deletions": 232}, "files": [{"sha": "9462b10494c93e160d64fdfe1dfca11d06950b2f", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -33,7 +33,7 @@ or reading the [rustc guide][rustcguidebuild].\n    * `curl`\n    * `git`\n    * `ssl` which comes in `libssl-dev` or `openssl-devel`\n-   * `pkg-config` if you are on compiling on Linux and targeting Linux\n+   * `pkg-config` if you are compiling on Linux and targeting Linux\n \n 2. Clone the [source] with `git`:\n "}, {"sha": "9dcecedd97caef4a0e102d31e90a994a99e6a2e2", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -1037,10 +1037,9 @@ impl LoweringContext<'_> {\n     ) -> hir::Expr {\n         // expand <head>\n         let mut head = self.lower_expr(head);\n-        let head_sp = head.span;\n         let desugared_span = self.mark_span_with_reason(\n             DesugaringKind::ForLoop,\n-            head_sp,\n+            head.span,\n             None,\n         );\n         head.span = desugared_span;\n@@ -1086,21 +1085,21 @@ impl LoweringContext<'_> {\n \n         // `match ::std::iter::Iterator::next(&mut iter) { ... }`\n         let match_expr = {\n-            let iter = P(self.expr_ident(head_sp, iter, iter_pat_nid));\n-            let ref_mut_iter = self.expr_mut_addr_of(head_sp, iter);\n+            let iter = P(self.expr_ident(desugared_span, iter, iter_pat_nid));\n+            let ref_mut_iter = self.expr_mut_addr_of(desugared_span, iter);\n             let next_path = &[sym::iter, sym::Iterator, sym::next];\n             let next_expr = P(self.expr_call_std_path(\n-                head_sp,\n+                desugared_span,\n                 next_path,\n                 hir_vec![ref_mut_iter],\n             ));\n             let arms = hir_vec![pat_arm, break_arm];\n \n-            self.expr_match(head_sp, next_expr, arms, hir::MatchSource::ForLoopDesugar)\n+            self.expr_match(desugared_span, next_expr, arms, hir::MatchSource::ForLoopDesugar)\n         };\n-        let match_stmt = self.stmt_expr(head_sp, match_expr);\n+        let match_stmt = self.stmt_expr(desugared_span, match_expr);\n \n-        let next_expr = P(self.expr_ident(head_sp, next_ident, next_pat_hid));\n+        let next_expr = P(self.expr_ident(desugared_span, next_ident, next_pat_hid));\n \n         // `let mut __next`\n         let next_let = self.stmt_let_pat(\n@@ -1115,7 +1114,7 @@ impl LoweringContext<'_> {\n         let pat = self.lower_pat(pat);\n         let pat_let = self.stmt_let_pat(\n             ThinVec::new(),\n-            head_sp,\n+            desugared_span,\n             Some(next_expr),\n             pat,\n             hir::LocalSource::ForLoopDesugar,\n@@ -1152,14 +1151,14 @@ impl LoweringContext<'_> {\n             let into_iter_path =\n                 &[sym::iter, sym::IntoIterator, sym::into_iter];\n             P(self.expr_call_std_path(\n-                head_sp,\n+                desugared_span,\n                 into_iter_path,\n                 hir_vec![head],\n             ))\n         };\n \n         let match_expr = P(self.expr_match(\n-            head_sp,\n+            desugared_span,\n             into_iter_expr,\n             hir_vec![iter_arm],\n             hir::MatchSource::ForLoopDesugar,\n@@ -1171,7 +1170,7 @@ impl LoweringContext<'_> {\n         // surrounding scope of the `match` since the `match` is not a terminating scope.\n         //\n         // Also, add the attributes to the outer returned expr node.\n-        self.expr_drop_temps(head_sp, match_expr, e.attrs.clone())\n+        self.expr_drop_temps(desugared_span, match_expr, e.attrs.clone())\n     }\n \n     /// Desugar `ExprKind::Try` from: `<expr>?` into:"}, {"sha": "a1011697ef1606ca6d69a42de6d23f336429601d", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -818,6 +818,32 @@ impl<'hir> Map<'hir> {\n         CRATE_HIR_ID\n     }\n \n+    /// When on a match arm tail expression or on a match arm, give back the enclosing `match`\n+    /// expression.\n+    ///\n+    /// Used by error reporting when there's a type error in a match arm caused by the `match`\n+    /// expression needing to be unit.\n+    pub fn get_match_if_cause(&self, hir_id: HirId) -> Option<&Expr> {\n+        for (_, node) in ParentHirIterator::new(hir_id, &self) {\n+            match node {\n+                Node::Item(_) |\n+                Node::ForeignItem(_) |\n+                Node::TraitItem(_) |\n+                Node::ImplItem(_) => break,\n+                Node::Expr(expr) => match expr.kind {\n+                    ExprKind::Match(_, _, _) => return Some(expr),\n+                    _ => {}\n+                },\n+                Node::Stmt(stmt) => match stmt.kind {\n+                    StmtKind::Local(_) => break,\n+                    _ => {}\n+                }\n+                _ => {}\n+            }\n+        }\n+        None\n+    }\n+\n     /// Returns the nearest enclosing scope. A scope is roughly an item or block.\n     pub fn get_enclosing_scope(&self, hir_id: HirId) -> Option<HirId> {\n         for (hir_id, node) in ParentHirIterator::new(hir_id, &self) {"}, {"sha": "e925d7429fff446f269d00b145b082a09aef63c3", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -101,7 +101,7 @@ pub use self::error::{\n     InvalidProgramInfo, ResourceExhaustionInfo, UndefinedBehaviorInfo,\n };\n \n-pub use self::value::{Scalar, ScalarMaybeUndef, RawConst, ConstValue};\n+pub use self::value::{Scalar, ScalarMaybeUndef, RawConst, ConstValue, get_slice_bytes};\n \n pub use self::allocation::{Allocation, AllocationExtra, Relocations, UndefMask};\n "}, {"sha": "32f45cd9d472035ab601b8abc78a4b85396acbdd", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -611,3 +611,18 @@ impl_stable_hash_for!(enum crate::mir::interpret::ScalarMaybeUndef {\n     Scalar(v),\n     Undef\n });\n+\n+/// Gets the bytes of a constant slice value.\n+pub fn get_slice_bytes<'tcx>(cx: &impl HasDataLayout, val: ConstValue<'tcx>) -> &'tcx [u8] {\n+    if let ConstValue::Slice { data, start, end } = val {\n+        let len = end - start;\n+        data.get_bytes(\n+            cx,\n+            // invent a pointer, only the offset is relevant anyway\n+            Pointer::new(AllocId(0), Size::from_bytes(start as u64)),\n+            Size::from_bytes(len as u64),\n+        ).unwrap_or_else(|err| bug!(\"const slice is invalid: {:?}\", err))\n+    } else {\n+        bug!(\"expected const slice, but found another const value\");\n+    }\n+}"}, {"sha": "3bd61e345543692978bb9ca03d6082d1063e30fd", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -8,7 +8,7 @@ use crate::hir::def_id::DefId;\n use crate::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use crate::ty::error::{ExpectedFound, TypeError};\n-use crate::mir::interpret::{ConstValue, Scalar};\n+use crate::mir::interpret::{ConstValue, get_slice_bytes, Scalar};\n use std::rc::Rc;\n use std::iter;\n use rustc_target::spec::abi;\n@@ -584,7 +584,20 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         // FIXME(const_generics): we should either handle `Scalar::Ptr` or add a comment\n         // saying that we're not handling it intentionally.\n \n-        // FIXME(const_generics): handle `ConstValue::ByRef` and `ConstValue::Slice`.\n+        (a_val @ ConstValue::Slice { .. }, b_val @ ConstValue::Slice { .. }) => {\n+            let a_bytes = get_slice_bytes(&tcx, a_val);\n+            let b_bytes = get_slice_bytes(&tcx, b_val);\n+            if a_bytes == b_bytes {\n+                Ok(tcx.mk_const(ty::Const {\n+                    val: a_val,\n+                    ty: a.ty,\n+                }))\n+            } else {\n+                Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+            }\n+        }\n+\n+        // FIXME(const_generics): handle `ConstValue::ByRef`.\n \n         // FIXME(const_generics): this is wrong, as it is a projection\n         (ConstValue::Unevaluated(a_def_id, a_substs),"}, {"sha": "fcdf2719ab627ce55a5a7a66933ba3a74227c6aa", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -13,12 +13,12 @@ use crate::hair::constant::*;\n use rustc::lint;\n use rustc::mir::{Field, BorrowKind, Mutability};\n use rustc::mir::{UserTypeProjection};\n-use rustc::mir::interpret::{GlobalId, ConstValue, sign_extend, AllocId, Pointer};\n+use rustc::mir::interpret::{GlobalId, ConstValue, get_slice_bytes, sign_extend};\n use rustc::traits::{ObligationCause, PredicateObligation};\n use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty, UserType, DefIdTree};\n use rustc::ty::{CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations};\n use rustc::ty::subst::{SubstsRef, GenericArg};\n-use rustc::ty::layout::{VariantIdx, Size};\n+use rustc::ty::layout::VariantIdx;\n use rustc::hir::{self, RangeEnd};\n use rustc::hir::def::{CtorOf, Res, DefKind, CtorKind};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n@@ -1526,27 +1526,10 @@ pub fn compare_const_vals<'tcx>(\n \n     if let ty::Str = ty.kind {\n         match (a.val, b.val) {\n-            (\n-                ConstValue::Slice { data: alloc_a, start: offset_a, end: end_a },\n-                ConstValue::Slice { data: alloc_b, start: offset_b, end: end_b },\n-            ) => {\n-                let len_a = end_a - offset_a;\n-                let len_b = end_b - offset_b;\n-                let a = alloc_a.get_bytes(\n-                    &tcx,\n-                    // invent a pointer, only the offset is relevant anyway\n-                    Pointer::new(AllocId(0), Size::from_bytes(offset_a as u64)),\n-                    Size::from_bytes(len_a as u64),\n-                );\n-                let b = alloc_b.get_bytes(\n-                    &tcx,\n-                    // invent a pointer, only the offset is relevant anyway\n-                    Pointer::new(AllocId(0), Size::from_bytes(offset_b as u64)),\n-                    Size::from_bytes(len_b as u64),\n-                );\n-                if let (Ok(a), Ok(b)) = (a, b) {\n-                    return from_bool(a == b);\n-                }\n+            (ConstValue::Slice { .. }, ConstValue::Slice { .. }) => {\n+                let a_bytes = get_slice_bytes(&tcx, a.val);\n+                let b_bytes = get_slice_bytes(&tcx, b.val);\n+                return from_bool(a_bytes == b_bytes);\n             }\n             _ => (),\n         }"}, {"sha": "d3bf82b66ad1cf163a9310ecf28db381196ddd01", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -348,7 +348,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n             _ => false,\n         };\n \n-        let mut bad_struct_syntax_suggestion = || {\n+        let mut bad_struct_syntax_suggestion = |def_id: DefId| {\n             let (followed_by_brace, closing_brace) = self.followed_by_brace(span);\n             let mut suggested = false;\n             match source {\n@@ -374,6 +374,9 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n                 _ => {}\n             }\n             if !suggested {\n+                if let Some(span) = self.r.definitions.opt_span(def_id) {\n+                    err.span_label(span, &format!(\"`{}` defined here\", path_str));\n+                }\n                 err.span_label(\n                     span,\n                     format!(\"did you mean `{} {{ /* fields */ }}`?\", path_str),\n@@ -437,18 +440,21 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n                         );\n                     }\n                 } else {\n-                    bad_struct_syntax_suggestion();\n+                    bad_struct_syntax_suggestion(def_id);\n                 }\n             }\n-            (Res::Def(DefKind::Union, _), _) |\n-            (Res::Def(DefKind::Variant, _), _) |\n-            (Res::Def(DefKind::Ctor(_, CtorKind::Fictive), _), _) if ns == ValueNS => {\n-                bad_struct_syntax_suggestion();\n+            (Res::Def(DefKind::Union, def_id), _) |\n+            (Res::Def(DefKind::Variant, def_id), _) |\n+            (Res::Def(DefKind::Ctor(_, CtorKind::Fictive), def_id), _) if ns == ValueNS => {\n+                bad_struct_syntax_suggestion(def_id);\n             }\n-            (Res::Def(DefKind::Ctor(_, CtorKind::Fn), _), _) if ns == ValueNS => {\n+            (Res::Def(DefKind::Ctor(_, CtorKind::Fn), def_id), _) if ns == ValueNS => {\n+                if let Some(span) = self.r.definitions.opt_span(def_id) {\n+                    err.span_label(span, &format!(\"`{}` defined here\", path_str));\n+                }\n                 err.span_label(\n                     span,\n-                    format!(\"did you mean `{} ( /* fields */ )`?\", path_str),\n+                    format!(\"did you mean `{}( /* fields */ )`?\", path_str),\n                 );\n             }\n             (Res::SelfTy(..), _) if ns == ValueNS => {"}, {"sha": "a1daed005f3024ae79a1bd20dedd406cf5288896", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // 2. By expecting `bool` for `expr` we get nice diagnostics for e.g. `if x = y { .. }`.\n             //\n             // FIXME(60707): Consider removing hack with principled solution.\n-            self.check_expr_has_type_or_error(discrim, self.tcx.types.bool)\n+            self.check_expr_has_type_or_error(discrim, self.tcx.types.bool, |_| {})\n         } else {\n             self.demand_discriminant_type(arms, discrim)\n         };\n@@ -106,7 +106,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if let Some(g) = &arm.guard {\n                 self.diverges.set(pats_diverge);\n                 match g {\n-                    hir::Guard::If(e) => self.check_expr_has_type_or_error(e, tcx.types.bool),\n+                    hir::Guard::If(e) => {\n+                        self.check_expr_has_type_or_error(e, tcx.types.bool, |_| {})\n+                    }\n                 };\n             }\n \n@@ -442,7 +444,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 kind: TypeVariableOriginKind::TypeInference,\n                 span: discrim.span,\n             });\n-            self.check_expr_has_type_or_error(discrim, discrim_ty);\n+            self.check_expr_has_type_or_error(discrim, discrim_ty, |_| {});\n             discrim_ty\n         }\n     }"}, {"sha": "56962d53a645064b4ff9ea9d735a86eaa9f23e58", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 43, "deletions": 30, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -1163,18 +1163,20 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 fcx.try_coerce(expression, expression_ty, self.expected_ty, AllowTwoPhase::No)\n             } else {\n                 match self.expressions {\n-                    Expressions::Dynamic(ref exprs) =>\n-                        fcx.try_find_coercion_lub(cause,\n-                                                  exprs,\n-                                                  self.merged_ty(),\n-                                                  expression,\n-                                                  expression_ty),\n-                    Expressions::UpFront(ref coercion_sites) =>\n-                        fcx.try_find_coercion_lub(cause,\n-                                                  &coercion_sites[0..self.pushed],\n-                                                  self.merged_ty(),\n-                                                  expression,\n-                                                  expression_ty),\n+                    Expressions::Dynamic(ref exprs) => fcx.try_find_coercion_lub(\n+                        cause,\n+                        exprs,\n+                        self.merged_ty(),\n+                        expression,\n+                        expression_ty,\n+                    ),\n+                    Expressions::UpFront(ref coercion_sites) => fcx.try_find_coercion_lub(\n+                        cause,\n+                        &coercion_sites[0..self.pushed],\n+                        self.merged_ty(),\n+                        expression,\n+                        expression_ty,\n+                    ),\n                 }\n             }\n         } else {\n@@ -1216,7 +1218,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     self.pushed += 1;\n                 }\n             }\n-            Err(err) => {\n+            Err(coercion_error) => {\n                 let (expected, found) = if label_expression_as_expected {\n                     // In the case where this is a \"forced unit\", like\n                     // `break`, we want to call the `()` \"expected\"\n@@ -1232,41 +1234,42 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     (self.final_ty.unwrap_or(self.expected_ty), expression_ty)\n                 };\n \n-                let mut db;\n+                let mut err;\n                 match cause.code {\n                     ObligationCauseCode::ReturnNoExpression => {\n-                        db = struct_span_err!(\n+                        err = struct_span_err!(\n                             fcx.tcx.sess, cause.span, E0069,\n                             \"`return;` in a function whose return type is not `()`\");\n-                        db.span_label(cause.span, \"return type is not `()`\");\n+                        err.span_label(cause.span, \"return type is not `()`\");\n                     }\n                     ObligationCauseCode::BlockTailExpression(blk_id) => {\n                         let parent_id = fcx.tcx.hir().get_parent_node(blk_id);\n-                        db = self.report_return_mismatched_types(\n+                        err = self.report_return_mismatched_types(\n                             cause,\n                             expected,\n                             found,\n-                            err,\n+                            coercion_error,\n                             fcx,\n                             parent_id,\n                             expression.map(|expr| (expr, blk_id)),\n                         );\n                     }\n                     ObligationCauseCode::ReturnValue(id) => {\n-                        db = self.report_return_mismatched_types(\n-                            cause, expected, found, err, fcx, id, None);\n+                        err = self.report_return_mismatched_types(\n+                            cause, expected, found, coercion_error, fcx, id, None);\n                     }\n                     _ => {\n-                        db = fcx.report_mismatched_types(cause, expected, found, err);\n+                        err = fcx.report_mismatched_types(cause, expected, found, coercion_error);\n                     }\n                 }\n \n                 if let Some(augment_error) = augment_error {\n-                    augment_error(&mut db);\n+                    augment_error(&mut err);\n                 }\n \n                 // Error possibly reported in `check_assign` so avoid emitting error again.\n-                db.emit_unless(expression.filter(|e| fcx.is_assign_to_bool(e, expected)).is_some());\n+                err.emit_unless(expression.filter(|e| fcx.is_assign_to_bool(e, expected))\n+                    .is_some());\n \n                 self.final_ty = Some(fcx.tcx.types.err);\n             }\n@@ -1278,12 +1281,12 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         cause: &ObligationCause<'tcx>,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n-        err: TypeError<'tcx>,\n+        ty_err: TypeError<'tcx>,\n         fcx: &FnCtxt<'a, 'tcx>,\n         id: hir::HirId,\n         expression: Option<(&'tcx hir::Expr, hir::HirId)>,\n     ) -> DiagnosticBuilder<'a> {\n-        let mut db = fcx.report_mismatched_types(cause, expected, found, err);\n+        let mut err = fcx.report_mismatched_types(cause, expected, found, ty_err);\n \n         let mut pointing_at_return_type = false;\n         let mut return_sp = None;\n@@ -1294,14 +1297,24 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         let parent_id = fcx.tcx.hir().get_parent_node(id);\n         let fn_decl = if let Some((expr, blk_id)) = expression {\n             pointing_at_return_type = fcx.suggest_mismatched_types_on_tail(\n-                &mut db,\n+                &mut err,\n                 expr,\n                 expected,\n                 found,\n                 cause.span,\n                 blk_id,\n             );\n             let parent = fcx.tcx.hir().get(parent_id);\n+            if let (Some(match_expr), true, false) = (\n+                fcx.tcx.hir().get_match_if_cause(expr.hir_id),\n+                expected.is_unit(),\n+                pointing_at_return_type,\n+            ) {\n+                if match_expr.span.desugaring_kind().is_none() {\n+                    err.span_label(match_expr.span, \"expected this to be `()`\");\n+                    fcx.suggest_semicolon_at_end(match_expr.span, &mut err);\n+                }\n+            }\n             fcx.get_node_fn_decl(parent).map(|(fn_decl, _, is_main)| (fn_decl, is_main))\n         } else {\n             fcx.get_fn_decl(parent_id)\n@@ -1310,20 +1323,20 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         if let (Some((fn_decl, can_suggest)), _) = (fn_decl, pointing_at_return_type) {\n             if expression.is_none() {\n                 pointing_at_return_type |= fcx.suggest_missing_return_type(\n-                    &mut db, &fn_decl, expected, found, can_suggest);\n+                    &mut err, &fn_decl, expected, found, can_suggest);\n             }\n             if !pointing_at_return_type {\n                 return_sp = Some(fn_decl.output.span()); // `impl Trait` return type\n             }\n         }\n         if let (Some(sp), Some(return_sp)) = (fcx.ret_coercion_span.borrow().as_ref(), return_sp) {\n-            db.span_label(return_sp, \"expected because this return type...\");\n-            db.span_label( *sp, format!(\n+            err.span_label(return_sp, \"expected because this return type...\");\n+            err.span_label( *sp, format!(\n                 \"...is found to be `{}` here\",\n                 fcx.resolve_type_vars_with_obligations(expected),\n             ));\n         }\n-        db\n+        err\n     }\n \n     pub fn complete<'a>(self, fcx: &FnCtxt<'a, 'tcx>) -> Ty<'tcx> {"}, {"sha": "04c8536de8dfef423b0430a8cfc8c0f1066f83ad", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -53,14 +53,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr: &'tcx hir::Expr,\n         expected: Ty<'tcx>,\n+        extend_err: impl Fn(&mut DiagnosticBuilder<'_>),\n     ) -> Ty<'tcx> {\n-        self.check_expr_meets_expectation_or_error(expr, ExpectHasType(expected))\n+        self.check_expr_meets_expectation_or_error(expr, ExpectHasType(expected), extend_err)\n     }\n \n     fn check_expr_meets_expectation_or_error(\n         &self,\n         expr: &'tcx hir::Expr,\n         expected: Expectation<'tcx>,\n+        extend_err: impl Fn(&mut DiagnosticBuilder<'_>),\n     ) -> Ty<'tcx> {\n         let expected_ty = expected.to_option(&self).unwrap_or(self.tcx.types.bool);\n         let mut ty = self.check_expr_with_expectation(expr, expected);\n@@ -88,6 +90,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ExprKind::DropTemps(expr) => expr,\n                 _ => expr,\n             };\n+            extend_err(&mut err);\n             // Error possibly reported in `check_assign` so avoid emitting error again.\n             err.emit_unless(self.is_assign_to_bool(expr, expected_ty));\n         }\n@@ -971,7 +974,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     kind: TypeVariableOriginKind::MiscVariable,\n                     span: element.span,\n                 });\n-                let element_ty = self.check_expr_has_type_or_error(&element, ty);\n+                let element_ty = self.check_expr_has_type_or_error(&element, ty, |_| {});\n                 (element_ty, ty)\n             }\n         };\n@@ -1058,7 +1061,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // the fields with the base_expr. This could cause us to hit errors later\n             // when certain fields are assumed to exist that in fact do not.\n             if !error_happened {\n-                self.check_expr_has_type_or_error(base_expr, adt_ty);\n+                self.check_expr_has_type_or_error(base_expr, adt_ty, |_| {});\n                 match adt_ty.kind {\n                     ty::Adt(adt, substs) if adt.is_struct() => {\n                         let fru_field_types = adt.non_enum_variant().fields.iter().map(|f| {"}, {"sha": "092ab0936c0f430588ce366b22fa0d4904f3f8a7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -3879,6 +3879,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggest_semicolon_at_end(&self, span: Span, err: &mut DiagnosticBuilder<'_>) {\n+        err.span_suggestion_short(\n+            span.shrink_to_hi(),\n+            \"consider using a semicolon here\",\n+            \";\".to_string(),\n+            Applicability::MachineApplicable,\n+        );\n+    }\n+\n     pub fn check_stmt(&self, stmt: &'tcx hir::Stmt) {\n         // Don't do all the complex logic below for `DeclItem`.\n         match stmt.kind {\n@@ -3902,7 +3911,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             hir::StmtKind::Item(_) => {}\n             hir::StmtKind::Expr(ref expr) => {\n                 // Check with expected type of `()`.\n-                self.check_expr_has_type_or_error(&expr, self.tcx.mk_unit());\n+\n+                self.check_expr_has_type_or_error(&expr, self.tcx.mk_unit(), |err| {\n+                    self.suggest_semicolon_at_end(expr.span, err);\n+                });\n             }\n             hir::StmtKind::Semi(ref expr) => {\n                 self.check_expr(&expr);"}, {"sha": "3a07171b12fb80160016eb7a83463f41d141aa5f", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -3610,6 +3610,43 @@ match r {\n ```\n \"##,\n \n+E0533: r##\"\n+An item which isn't a unit struct, a variant, nor a constant has been used as a\n+match pattern.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0533\n+struct Tortoise;\n+\n+impl Tortoise {\n+    fn turtle(&self) -> u32 { 0 }\n+}\n+\n+match 0u32 {\n+    Tortoise::turtle => {} // Error!\n+    _ => {}\n+}\n+if let Tortoise::turtle = 0u32 {} // Same error!\n+```\n+\n+If you want to match against a value returned by a method, you need to bind the\n+value first:\n+\n+```\n+struct Tortoise;\n+\n+impl Tortoise {\n+    fn turtle(&self) -> u32 { 0 }\n+}\n+\n+match 0u32 {\n+    x if x == Tortoise.turtle() => {} // Bound into `x` then we compare it!\n+    _ => {}\n+}\n+```\n+\"##,\n+\n E0534: r##\"\n The `inline` attribute was malformed.\n \n@@ -4935,7 +4972,6 @@ and the pin is required to keep it in the same place in memory.\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition\n //  E0558, // replaced with a generic attribute input check\n-    E0533, // `{}` does not name a unit variant, unit struct or a constant\n //  E0563, // cannot determine a type for this `impl Trait` removed in 6383de15\n     E0564, // only named lifetimes are allowed in `impl Trait`,\n            // but `{}` was found in the type `{}`"}, {"sha": "2fb6f197dad7c24ff4fda00cb8f66b7ab6e25165", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 50, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -974,15 +974,22 @@ impl<'a> Parser<'a> {\n     /// This version of parse param doesn't necessarily require identifier names.\n     fn parse_param_general(\n         &mut self,\n+        is_self_allowed: bool,\n         is_trait_item: bool,\n         allow_c_variadic: bool,\n         is_name_required: impl Fn(&token::Token) -> bool,\n     ) -> PResult<'a, Param> {\n         let lo = self.token.span;\n         let attrs = self.parse_outer_attributes()?;\n+\n+        // Possibly parse `self`. Recover if we parsed it and it wasn't allowed here.\n         if let Some(mut param) = self.parse_self_param()? {\n             param.attrs = attrs.into();\n-            return self.recover_bad_self_param(param, is_trait_item);\n+            return if is_self_allowed {\n+                Ok(param)\n+            } else {\n+                self.recover_bad_self_param(param, is_trait_item)\n+            };\n         }\n \n         let is_name_required = is_name_required(&self.token);\n@@ -1207,6 +1214,7 @@ impl<'a> Parser<'a> {\n                     }\n                 };\n             match p.parse_param_general(\n+                false,\n                 false,\n                 allow_c_variadic,\n                 do_not_enforce_named_arguments_for_c_variadic\n@@ -1361,60 +1369,25 @@ impl<'a> Parser<'a> {\n         Ok(Some(Param::from_self(ThinVec::default(), eself, eself_ident)))\n     }\n \n-    /// Returns the parsed optional self parameter with attributes and whether a self\n-    /// shortcut was used.\n-    fn parse_self_parameter_with_attrs(&mut self) -> PResult<'a, Option<Param>> {\n-        let attrs = self.parse_outer_attributes()?;\n-        let param_opt = self.parse_self_param()?;\n-        Ok(param_opt.map(|mut param| {\n-            param.attrs = attrs.into();\n-            param\n-        }))\n-    }\n-\n     /// Parses the parameter list and result type of a function that may have a `self` parameter.\n-    fn parse_fn_decl_with_self<F>(&mut self, parse_param_fn: F) -> PResult<'a, P<FnDecl>>\n-        where F: FnMut(&mut Parser<'a>) -> PResult<'a,  Param>,\n-    {\n-        self.expect(&token::OpenDelim(token::Paren))?;\n-\n-        // Parse optional self argument.\n-        let self_param = self.parse_self_parameter_with_attrs()?;\n-\n-        // Parse the rest of the function parameter list.\n-        let sep = SeqSep::trailing_allowed(token::Comma);\n-        let (mut fn_inputs, recovered) = if let Some(self_param) = self_param {\n-            if self.check(&token::CloseDelim(token::Paren)) {\n-                (vec![self_param], false)\n-            } else if self.eat(&token::Comma) {\n-                let mut fn_inputs = vec![self_param];\n-                let (mut input, _, recovered) = self.parse_seq_to_before_end(\n-                    &token::CloseDelim(token::Paren), sep, parse_param_fn)?;\n-                fn_inputs.append(&mut input);\n-                (fn_inputs, recovered)\n-            } else {\n-                match self.expect_one_of(&[], &[]) {\n-                    Err(err) => return Err(err),\n-                    Ok(recovered) => (vec![self_param], recovered),\n-                }\n-            }\n-        } else {\n-            let (input, _, recovered) =\n-                self.parse_seq_to_before_end(&token::CloseDelim(token::Paren),\n-                                             sep,\n-                                             parse_param_fn)?;\n-            (input, recovered)\n-        };\n+    fn parse_fn_decl_with_self(\n+        &mut self,\n+        is_name_required: impl Copy + Fn(&token::Token) -> bool,\n+    ) -> PResult<'a, P<FnDecl>> {\n+        // Parse the arguments, starting out with `self` being allowed...\n+        let mut is_self_allowed = true;\n+        let (mut inputs, _): (Vec<_>, _) = self.parse_paren_comma_seq(|p| {\n+            let res = p.parse_param_general(is_self_allowed, true, false, is_name_required);\n+            // ...but now that we've parsed the first argument, `self` is no longer allowed.\n+            is_self_allowed = false;\n+            res\n+        })?;\n \n-        if !recovered {\n-            // Parse closing paren and return type.\n-            self.expect(&token::CloseDelim(token::Paren))?;\n-        }\n         // Replace duplicated recovered params with `_` pattern to avoid unecessary errors.\n-        self.deduplicate_recovered_params_names(&mut fn_inputs);\n+        self.deduplicate_recovered_params_names(&mut inputs);\n \n         Ok(P(FnDecl {\n-            inputs: fn_inputs,\n+            inputs,\n             output: self.parse_ret_ty(true)?,\n         }))\n     }"}, {"sha": "64c494416ff3460b808fdd31c9984e6a441ee461", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -424,13 +424,7 @@ impl<'a> Parser<'a> {\n             } else if self.look_ahead(1, |t| *t == token::OpenDelim(token::Paren)) {\n                 let ident = self.parse_ident().unwrap();\n                 self.bump();  // `(`\n-                let kw_name = if let Ok(Some(_)) = self.parse_self_parameter_with_attrs()\n-                    .map_err(|mut e| e.cancel())\n-                {\n-                    \"method\"\n-                } else {\n-                    \"function\"\n-                };\n+                let kw_name = self.recover_first_param();\n                 self.consume_block(token::Paren);\n                 let (kw, kw_name, ambiguous) = if self.check(&token::RArrow) {\n                     self.eat_to_tokens(&[&token::OpenDelim(token::Brace)]);\n@@ -477,13 +471,7 @@ impl<'a> Parser<'a> {\n                 self.eat_to_tokens(&[&token::Gt]);\n                 self.bump();  // `>`\n                 let (kw, kw_name, ambiguous) = if self.eat(&token::OpenDelim(token::Paren)) {\n-                    if let Ok(Some(_)) = self.parse_self_parameter_with_attrs()\n-                        .map_err(|mut e| e.cancel())\n-                    {\n-                        (\"fn\", \"method\", false)\n-                    } else {\n-                        (\"fn\", \"function\", false)\n-                    }\n+                    (\"fn\", self.recover_first_param(), false)\n                 } else if self.check(&token::OpenDelim(token::Brace)) {\n                     (\"struct\", \"struct\", false)\n                 } else {\n@@ -505,6 +493,16 @@ impl<'a> Parser<'a> {\n         self.parse_macro_use_or_failure(attrs, macros_allowed, attributes_allowed, lo, visibility)\n     }\n \n+    fn recover_first_param(&mut self) -> &'static str {\n+        match self.parse_outer_attributes()\n+            .and_then(|_| self.parse_self_param())\n+            .map_err(|mut e| e.cancel())\n+        {\n+            Ok(Some(_)) => \"method\",\n+            _ => \"function\",\n+        }\n+    }\n+\n     /// This is the fall-through for parsing items.\n     fn parse_macro_use_or_failure(\n         &mut self,\n@@ -861,9 +859,7 @@ impl<'a> Parser<'a> {\n             let (constness, unsafety, asyncness, abi) = self.parse_fn_front_matter()?;\n             let ident = self.parse_ident()?;\n             let mut generics = self.parse_generics()?;\n-            let decl = self.parse_fn_decl_with_self(|p| {\n-                p.parse_param_general(true, false, |_| true)\n-            })?;\n+            let decl = self.parse_fn_decl_with_self(|_| true)?;\n             generics.where_clause = self.parse_where_clause()?;\n             *at_end = true;\n             let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n@@ -1034,15 +1030,11 @@ impl<'a> Parser<'a> {\n             let ident = self.parse_ident()?;\n             let mut generics = self.parse_generics()?;\n \n-            let decl = self.parse_fn_decl_with_self(|p: &mut Parser<'a>| {\n-                // This is somewhat dubious; We don't want to allow\n-                // argument names to be left off if there is a\n-                // definition...\n-\n-                // We don't allow argument names to be left off in edition 2018.\n-                let is_name_required = p.token.span.rust_2018();\n-                p.parse_param_general(true, false, |_| is_name_required)\n-            })?;\n+            // This is somewhat dubious; We don't want to allow\n+            // argument names to be left off if there is a definition...\n+            //\n+            // We don't allow argument names to be left off in edition 2018.\n+            let decl = self.parse_fn_decl_with_self(|t| t.span.rust_2018())?;\n             generics.where_clause = self.parse_where_clause()?;\n \n             let sig = ast::MethodSig {"}, {"sha": "73c75ae6668052713ee121b9524239f2b24125cd", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -0,0 +1,14 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct ConstString<const T: &'static str>;\n+struct ConstBytes<const T: &'static [u8]>;\n+\n+pub fn main() {\n+    let _: ConstString<\"Hello\"> = ConstString::<\"Hello\">;\n+    let _: ConstString<\"Hello\"> = ConstString::<\"World\">; //~ ERROR mismatched types\n+    let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a6\">;\n+    let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a5\">; //~ ERROR mismatched types\n+    let _: ConstBytes<b\"AAA\"> = ConstBytes::<{&[0x41, 0x41, 0x41]}>;\n+    let _: ConstBytes<b\"AAA\"> = ConstBytes::<b\"BBB\">; //~ ERROR mismatched types\n+}"}, {"sha": "72369ab24ebfc5ddfe1ebca3d874ae0c30418c60", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -0,0 +1,38 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/slice-const-param-mismatch.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0308]: mismatched types\n+  --> $DIR/slice-const-param-mismatch.rs:9:35\n+   |\n+LL |     let _: ConstString<\"Hello\"> = ConstString::<\"World\">;\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^ expected `\"Hello\"`, found `\"World\"`\n+   |\n+   = note: expected type `ConstString<>`\n+              found type `ConstString<>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/slice-const-param-mismatch.rs:11:33\n+   |\n+LL |     let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a5\">;\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^ expected `\"\u2107\u31c8\u21a6\"`, found `\"\u2107\u31c8\u21a5\"`\n+   |\n+   = note: expected type `ConstString<>`\n+              found type `ConstString<>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/slice-const-param-mismatch.rs:13:33\n+   |\n+LL |     let _: ConstBytes<b\"AAA\"> = ConstBytes::<b\"BBB\">;\n+   |                                 ^^^^^^^^^^^^^^^^^^^^ expected `b\"AAA\"`, found `b\"BBB\"`\n+   |\n+   = note: expected type `ConstBytes<>`\n+              found type `ConstBytes<>`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "2629caa392106b3eca63eed9091836d1c26d63ff", "filename": "src/test/ui/const-generics/slice-const-param.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+pub fn function_with_str<const STRING: &'static str>() -> &'static str {\n+    STRING\n+}\n+\n+pub fn function_with_bytes<const BYTES: &'static [u8]>() -> &'static [u8] {\n+    BYTES\n+}\n+\n+pub fn main() {\n+    assert_eq!(function_with_str::<\"Rust\">(), \"Rust\");\n+    assert_eq!(function_with_str::<\"\u2107\u31c8\u21a6\">(), \"\u2107\u31c8\u21a6\");\n+    assert_eq!(function_with_bytes::<b\"AAAA\">(), &[0x41, 0x41, 0x41, 0x41]);\n+    assert_eq!(function_with_bytes::<{&[0x41, 0x41, 0x41, 0x41]}>(), b\"AAAA\");\n+}"}, {"sha": "79214a34fdba0e8c01c52b802807a5059980b24c", "filename": "src/test/ui/const-generics/slice-const-param.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/slice-const-param.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "97121575527168bada13f139fba18282b884ec43", "filename": "src/test/ui/empty/empty-struct-braces-expr.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -1,6 +1,9 @@\n error[E0423]: expected value, found struct `Empty1`\n   --> $DIR/empty-struct-braces-expr.rs:15:14\n    |\n+LL | struct Empty1 {}\n+   | ---------------- `Empty1` defined here\n+...\n LL |     let e1 = Empty1;\n    |              ^^^^^^\n    |              |\n@@ -10,6 +13,9 @@ LL |     let e1 = Empty1;\n error[E0423]: expected function, found struct `Empty1`\n   --> $DIR/empty-struct-braces-expr.rs:16:14\n    |\n+LL | struct Empty1 {}\n+   | ---------------- `Empty1` defined here\n+...\n LL |     let e1 = Empty1();\n    |              ^^^^^^\n    |              |\n@@ -19,12 +25,18 @@ LL |     let e1 = Empty1();\n error[E0423]: expected value, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-expr.rs:17:14\n    |\n+LL |     Empty3 {}\n+   |     --------- `E::Empty3` defined here\n+...\n LL |     let e3 = E::Empty3;\n    |              ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n \n error[E0423]: expected function, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-expr.rs:18:14\n    |\n+LL |     Empty3 {}\n+   |     --------- `E::Empty3` defined here\n+...\n LL |     let e3 = E::Empty3();\n    |              ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n "}, {"sha": "271e811a2fd65738ce8f8b96a89074d991b4ae30", "filename": "src/test/ui/empty/empty-struct-braces-pat-1.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -1,6 +1,9 @@\n error[E0532]: expected unit struct/variant or constant, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-pat-1.rs:24:9\n    |\n+LL |     Empty3 {}\n+   |     --------- `E::Empty3` defined here\n+...\n LL |         E::Empty3 => ()\n    |         ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n "}, {"sha": "33524737888944217b98933d79e23078d7e431ef", "filename": "src/test/ui/empty/empty-struct-braces-pat-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -1,6 +1,9 @@\n error[E0532]: expected tuple struct/variant, found struct `Empty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:15:9\n    |\n+LL | struct Empty1 {}\n+   | ---------------- `Empty1` defined here\n+...\n LL |         Empty1() => ()\n    |         ^^^^^^\n    |         |\n@@ -19,6 +22,9 @@ LL |         XEmpty1() => ()\n error[E0532]: expected tuple struct/variant, found struct `Empty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:21:9\n    |\n+LL | struct Empty1 {}\n+   | ---------------- `Empty1` defined here\n+...\n LL |         Empty1(..) => ()\n    |         ^^^^^^\n    |         |"}, {"sha": "aefdd772b1bfda3f8e382b84592598416b33f3a2", "filename": "src/test/ui/empty/empty-struct-braces-pat-3.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -1,6 +1,9 @@\n error[E0532]: expected tuple struct/variant, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:17:9\n    |\n+LL |     Empty3 {}\n+   |     --------- `E::Empty3` defined here\n+...\n LL |         E::Empty3() => ()\n    |         ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n \n@@ -16,6 +19,9 @@ LL |         XE::XEmpty3() => ()\n error[E0532]: expected tuple struct/variant, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:25:9\n    |\n+LL |     Empty3 {}\n+   |     --------- `E::Empty3` defined here\n+...\n LL |         E::Empty3(..) => ()\n    |         ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n "}, {"sha": "4b828c0d942e38f28b9f81847a88fd609ace0a5c", "filename": "src/test/ui/empty/empty-struct-tuple-pat.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -19,8 +19,11 @@ LL |         XEmpty6 => ()\n error[E0532]: expected unit struct/variant or constant, found tuple variant `E::Empty4`\n   --> $DIR/empty-struct-tuple-pat.rs:29:9\n    |\n+LL |     Empty4()\n+   |     -------- `E::Empty4` defined here\n+...\n LL |         E::Empty4 => ()\n-   |         ^^^^^^^^^ did you mean `E::Empty4 ( /* fields */ )`?\n+   |         ^^^^^^^^^ did you mean `E::Empty4( /* fields */ )`?\n \n error[E0532]: expected unit struct/variant or constant, found tuple variant `XE::XEmpty5`\n   --> $DIR/empty-struct-tuple-pat.rs:33:9\n@@ -29,7 +32,7 @@ LL |         XE::XEmpty5 => (),\n    |         ^^^^-------\n    |         |   |\n    |         |   help: a unit variant with a similar name exists: `XEmpty4`\n-   |         did you mean `XE::XEmpty5 ( /* fields */ )`?\n+   |         did you mean `XE::XEmpty5( /* fields */ )`?\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ce631ca4bf786ec3e2ca69a41ff1b0a5c047d5e4", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -27,6 +27,9 @@ LL |     for _ in (std::ops::Range { start: 0, end: 10 }) {}\n error[E0423]: expected function, found struct `Foo`\n   --> $DIR/E0423.rs:4:13\n    |\n+LL |     struct Foo { a: bool };\n+   |     ---------------------- `Foo` defined here\n+LL | \n LL |     let f = Foo();\n    |             ^^^\n    |             |"}, {"sha": "e2229cbc20922caa236d2738e13b6be53136359b", "filename": "src/test/ui/issues/issue-19086.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fissues%2Fissue-19086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fissues%2Fissue-19086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19086.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -1,6 +1,9 @@\n error[E0532]: expected tuple struct/variant, found struct variant `FooB`\n   --> $DIR/issue-19086.rs:10:9\n    |\n+LL |     FooB { x: i32, y: i32 }\n+   |     ----------------------- `FooB` defined here\n+...\n LL |         FooB(a, b) => println!(\"{} {}\", a, b),\n    |         ^^^^ did you mean `FooB { /* fields */ }`?\n "}, {"sha": "e9a5e217392a6e349c7c616e90c50598eb0b4ecf", "filename": "src/test/ui/issues/issue-32004.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -1,11 +1,14 @@\n error[E0532]: expected unit struct/variant or constant, found tuple variant `Foo::Bar`\n   --> $DIR/issue-32004.rs:10:9\n    |\n+LL |     Bar(i32),\n+   |     -------- `Foo::Bar` defined here\n+...\n LL |         Foo::Bar => {}\n    |         ^^^^^---\n    |         |    |\n    |         |    help: a unit variant with a similar name exists: `Baz`\n-   |         did you mean `Foo::Bar ( /* fields */ )`?\n+   |         did you mean `Foo::Bar( /* fields */ )`?\n \n error[E0532]: expected tuple struct/variant, found unit struct `S`\n   --> $DIR/issue-32004.rs:16:9"}, {"sha": "8949c475b6f727e24b839fdb37e0846fa9311051", "filename": "src/test/ui/issues/issue-63983.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -1,12 +1,18 @@\n error[E0532]: expected unit struct/variant or constant, found tuple variant `MyEnum::Tuple`\n   --> $DIR/issue-63983.rs:8:9\n    |\n+LL |     Tuple(i32),\n+   |     ---------- `MyEnum::Tuple` defined here\n+...\n LL |         MyEnum::Tuple => \"\",\n-   |         ^^^^^^^^^^^^^ did you mean `MyEnum::Tuple ( /* fields */ )`?\n+   |         ^^^^^^^^^^^^^ did you mean `MyEnum::Tuple( /* fields */ )`?\n \n error[E0532]: expected unit struct/variant or constant, found struct variant `MyEnum::Struct`\n   --> $DIR/issue-63983.rs:10:9\n    |\n+LL |     Struct{ s: i32 },\n+   |     ---------------- `MyEnum::Struct` defined here\n+...\n LL |         MyEnum::Struct => \"\",\n    |         ^^^^^^^^^^^^^^ did you mean `MyEnum::Struct { /* fields */ }`?\n "}, {"sha": "6850e999242ea41299030767276a2be3be50ced7", "filename": "src/test/ui/lint/lint-unused-variables.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -29,6 +29,11 @@ impl RefStruct {\n         b: i32,\n         //~^ ERROR unused variable: `b`\n     ) {}\n+    fn issue_64682_associated_fn(\n+        #[allow(unused_variables)] a: i32,\n+        b: i32,\n+        //~^ ERROR unused variable: `b`\n+    ) {}\n }\n trait RefTrait {\n     fn bar(\n@@ -37,6 +42,11 @@ trait RefTrait {\n         b: i32,\n         //~^ ERROR unused variable: `b`\n     ) {}\n+    fn issue_64682_associated_fn(\n+        #[allow(unused_variables)] a: i32,\n+        b: i32,\n+        //~^ ERROR unused variable: `b`\n+    ) {}\n }\n impl RefTrait for RefStruct {\n     fn bar(\n@@ -45,6 +55,11 @@ impl RefTrait for RefStruct {\n         b: i32,\n         //~^ ERROR unused variable: `b`\n     ) {}\n+    fn issue_64682_associated_fn(\n+        #[allow(unused_variables)] a: i32,\n+        b: i32,\n+        //~^ ERROR unused variable: `b`\n+    ) {}\n }\n \n fn main() {"}, {"sha": "f8419bf506660480ffe05a40b30c6466c2f71169", "filename": "src/test/ui/lint/lint-unused-variables.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -17,19 +17,25 @@ LL |     b: i32,\n    |     ^ help: consider prefixing with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/lint-unused-variables.rs:53:9\n+  --> $DIR/lint-unused-variables.rs:68:9\n    |\n LL |         a: i32,\n    |         ^ help: consider prefixing with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/lint-unused-variables.rs:59:9\n+  --> $DIR/lint-unused-variables.rs:74:9\n    |\n LL |         b: i32,\n    |         ^ help: consider prefixing with an underscore: `_b`\n \n error: unused variable: `b`\n-  --> $DIR/lint-unused-variables.rs:37:9\n+  --> $DIR/lint-unused-variables.rs:42:9\n+   |\n+LL |         b: i32,\n+   |         ^ help: consider prefixing with an underscore: `_b`\n+\n+error: unused variable: `b`\n+  --> $DIR/lint-unused-variables.rs:47:9\n    |\n LL |         b: i32,\n    |         ^ help: consider prefixing with an underscore: `_b`\n@@ -47,10 +53,22 @@ LL |         b: i32,\n    |         ^ help: consider prefixing with an underscore: `_b`\n \n error: unused variable: `b`\n-  --> $DIR/lint-unused-variables.rs:45:9\n+  --> $DIR/lint-unused-variables.rs:34:9\n+   |\n+LL |         b: i32,\n+   |         ^ help: consider prefixing with an underscore: `_b`\n+\n+error: unused variable: `b`\n+  --> $DIR/lint-unused-variables.rs:55:9\n+   |\n+LL |         b: i32,\n+   |         ^ help: consider prefixing with an underscore: `_b`\n+\n+error: unused variable: `b`\n+  --> $DIR/lint-unused-variables.rs:60:9\n    |\n LL |         b: i32,\n    |         ^ help: consider prefixing with an underscore: `_b`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "21a91f3f32b24fc25d2ef3319b909fef3c9345e6", "filename": "src/test/ui/methods/method-path-in-pattern.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -23,4 +23,10 @@ fn main() {\n         <Foo>::trait_bar => {}\n         //~^ ERROR expected unit struct/variant or constant, found method `<Foo>::trait_bar`\n     }\n+    if let Foo::bar = 0u32 {}\n+    //~^ ERROR expected unit struct/variant or constant, found method `<Foo>::bar`\n+    if let <Foo>::bar = 0u32 {}\n+    //~^ ERROR expected unit struct/variant or constant, found method `<Foo>::bar`\n+    if let Foo::trait_bar = 0u32 {}\n+    //~^ ERROR expected unit struct/variant or constant, found method `<Foo>::trait_bar`\n }"}, {"sha": "257fff4c37dc0055f4c80978dde4f7d8a8768fac", "filename": "src/test/ui/methods/method-path-in-pattern.stderr", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -16,5 +16,24 @@ error[E0533]: expected unit struct/variant or constant, found method `<Foo>::tra\n LL |         <Foo>::trait_bar => {}\n    |         ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error[E0533]: expected unit struct/variant or constant, found method `<Foo>::bar`\n+  --> $DIR/method-path-in-pattern.rs:26:12\n+   |\n+LL |     if let Foo::bar = 0u32 {}\n+   |            ^^^^^^^^\n+\n+error[E0533]: expected unit struct/variant or constant, found method `<Foo>::bar`\n+  --> $DIR/method-path-in-pattern.rs:28:12\n+   |\n+LL |     if let <Foo>::bar = 0u32 {}\n+   |            ^^^^^^^^^^\n+\n+error[E0533]: expected unit struct/variant or constant, found method `<Foo>::trait_bar`\n+  --> $DIR/method-path-in-pattern.rs:30:12\n+   |\n+LL |     if let Foo::trait_bar = 0u32 {}\n+   |            ^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n \n+For more information about this error, try `rustc --explain E0533`."}, {"sha": "77da07f40d5367fcad9fa1ef27bb6dffc56fb1e5", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -37,6 +37,9 @@ LL | use namespace_mix::xm2::S;\n error[E0423]: expected value, found struct variant `m7::V`\n   --> $DIR/namespace-mix.rs:100:11\n    |\n+LL |         V {},\n+   |         ---- `m7::V` defined here\n+...\n LL |     check(m7::V);\n    |           ^^^^^ did you mean `m7::V { /* fields */ }`?\n help: a tuple variant with a similar name exists"}, {"sha": "32bb88d31c4c7ccf5a2e43cc32b3062d6f2e8f8f", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -12,6 +12,9 @@ LL |     let x = Enum::Foo(a: 3, b: 4);\n error[E0532]: expected tuple struct/variant, found struct variant `Enum::Foo`\n   --> $DIR/recover-from-bad-variant.rs:10:9\n    |\n+LL |     Foo { a: usize, b: usize },\n+   |     -------------------------- `Enum::Foo` defined here\n+...\n LL |         Enum::Foo(a, b) => {}\n    |         ^^^^^^^^^ did you mean `Enum::Foo { /* fields */ }`?\n "}, {"sha": "3e8fcdc7ca3e28dd5ce74b5db8f767529dbda3a0", "filename": "src/test/ui/qualified/qualified-path-params.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -15,4 +15,5 @@ LL |         0 ..= <S as Tr>::A::f::<u8> => {}\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0029`.\n+Some errors have detailed explanations: E0029, E0533.\n+For more information about an error, try `rustc --explain E0029`."}, {"sha": "c76e5ef8b3617dddbd083030b8e452d31e4374ef", "filename": "src/test/ui/resolve/issue-18252.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -1,6 +1,9 @@\n error[E0423]: expected function, found struct variant `Foo::Variant`\n   --> $DIR/issue-18252.rs:6:13\n    |\n+LL |     Variant { x: usize }\n+   |     -------------------- `Foo::Variant` defined here\n+...\n LL |     let f = Foo::Variant(42);\n    |             ^^^^^^^^^^^^ did you mean `Foo::Variant { /* fields */ }`?\n "}, {"sha": "4d20f1580264c6db3f20419fa70179edb146666a", "filename": "src/test/ui/resolve/issue-19452.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -1,6 +1,9 @@\n error[E0423]: expected value, found struct variant `Homura::Madoka`\n   --> $DIR/issue-19452.rs:10:18\n    |\n+LL |     Madoka { age: u32 }\n+   |     ------------------- `Homura::Madoka` defined here\n+...\n LL |     let homura = Homura::Madoka;\n    |                  ^^^^^^^^^^^^^^ did you mean `Homura::Madoka { /* fields */ }`?\n "}, {"sha": "d9a28e63dce8bda73e8653b06778158d4601ba10", "filename": "src/test/ui/resolve/issue-39226.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -1,6 +1,9 @@\n error[E0423]: expected value, found struct `Handle`\n   --> $DIR/issue-39226.rs:11:17\n    |\n+LL | struct Handle {}\n+   | ---------------- `Handle` defined here\n+...\n LL |         handle: Handle\n    |                 ^^^^^^\n    |                 |"}, {"sha": "3fdc7acb274e511433d8e6011c43534adf6cd70c", "filename": "src/test/ui/resolve/issue-6702.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -1,8 +1,13 @@\n error[E0423]: expected function, found struct `Monster`\n   --> $DIR/issue-6702.rs:7:14\n    |\n-LL |     let _m = Monster();\n-   |              ^^^^^^^ did you mean `Monster { /* fields */ }`?\n+LL | / struct Monster {\n+LL | |     damage: isize\n+LL | | }\n+   | |_- `Monster` defined here\n+...\n+LL |       let _m = Monster();\n+   |                ^^^^^^^ did you mean `Monster { /* fields */ }`?\n \n error: aborting due to previous error\n "}, {"sha": "7d8d1d0abfc210947b51f521207bacf6ca07535f", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -33,8 +33,13 @@ LL |         m::Z::Unit;\n error[E0423]: expected value, found struct variant `Z::Struct`\n   --> $DIR/privacy-enum-ctor.rs:29:20\n    |\n-LL |         let _: Z = Z::Struct;\n-   |                    ^^^^^^^^^ did you mean `Z::Struct { /* fields */ }`?\n+LL | /             Struct {\n+LL | |                 s: u8,\n+LL | |             },\n+   | |_____________- `Z::Struct` defined here\n+...\n+LL |           let _: Z = Z::Struct;\n+   |                      ^^^^^^^^^ did you mean `Z::Struct { /* fields */ }`?\n \n error[E0423]: expected value, found enum `m::E`\n   --> $DIR/privacy-enum-ctor.rs:41:16\n@@ -63,8 +68,13 @@ LL | use std::f64::consts::E;\n error[E0423]: expected value, found struct variant `m::E::Struct`\n   --> $DIR/privacy-enum-ctor.rs:45:16\n    |\n-LL |     let _: E = m::E::Struct;\n-   |                ^^^^^^^^^^^^ did you mean `m::E::Struct { /* fields */ }`?\n+LL | /         Struct {\n+LL | |             s: u8,\n+LL | |         },\n+   | |_________- `m::E::Struct` defined here\n+...\n+LL |       let _: E = m::E::Struct;\n+   |                  ^^^^^^^^^^^^ did you mean `m::E::Struct { /* fields */ }`?\n \n error[E0423]: expected value, found enum `E`\n   --> $DIR/privacy-enum-ctor.rs:49:16\n@@ -89,8 +99,13 @@ LL | use std::f64::consts::E;\n error[E0423]: expected value, found struct variant `E::Struct`\n   --> $DIR/privacy-enum-ctor.rs:53:16\n    |\n-LL |     let _: E = E::Struct;\n-   |                ^^^^^^^^^ did you mean `E::Struct { /* fields */ }`?\n+LL | /         Struct {\n+LL | |             s: u8,\n+LL | |         },\n+   | |_________- `E::Struct` defined here\n+...\n+LL |       let _: E = E::Struct;\n+   |                  ^^^^^^^^^ did you mean `E::Struct { /* fields */ }`?\n \n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:57:12\n@@ -151,8 +166,13 @@ LL | use m::n::Z;\n error[E0423]: expected value, found struct variant `m::n::Z::Struct`\n   --> $DIR/privacy-enum-ctor.rs:64:16\n    |\n-LL |     let _: Z = m::n::Z::Struct;\n-   |                ^^^^^^^^^^^^^^^ did you mean `m::n::Z::Struct { /* fields */ }`?\n+LL | /             Struct {\n+LL | |                 s: u8,\n+LL | |             },\n+   | |_____________- `m::n::Z::Struct` defined here\n+...\n+LL |       let _: Z = m::n::Z::Struct;\n+   |                  ^^^^^^^^^^^^^^^ did you mean `m::n::Z::Struct { /* fields */ }`?\n \n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:68:12"}, {"sha": "979367bc623fd4ec5985136b5c417ab302b6ffdc", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -16,8 +16,13 @@ LL |     S;\n error[E0423]: expected value, found struct `S2`\n   --> $DIR/privacy-struct-ctor.rs:38:5\n    |\n-LL |     S2;\n-   |     ^^ did you mean `S2 { /* fields */ }`?\n+LL | /     pub struct S2 {\n+LL | |         s: u8\n+LL | |     }\n+   | |_____- `S2` defined here\n+...\n+LL |       S2;\n+   |       ^^ did you mean `S2 { /* fields */ }`?\n \n error[E0423]: expected value, found struct `xcrate::S`\n   --> $DIR/privacy-struct-ctor.rs:43:5"}, {"sha": "eeb2191bab46254f76c0fb7ab8055e69a750f8f2", "filename": "src/test/ui/rfc-2565-param-attrs/attr-without-param.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fattr-without-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fattr-without-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fattr-without-param.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -0,0 +1,16 @@\n+#[cfg(FALSE)]\n+impl S {\n+    fn f(#[attr]) {} //~ ERROR expected parameter name, found `)`\n+}\n+\n+#[cfg(FALSE)]\n+impl T for S {\n+    fn f(#[attr]) {} //~ ERROR expected parameter name, found `)`\n+}\n+\n+#[cfg(FALSE)]\n+trait T {\n+    fn f(#[attr]); //~ ERROR expected argument name, found `)`\n+}\n+\n+fn main() {}"}, {"sha": "26dff4d4b30bf416849e287dbc13771258af7e35", "filename": "src/test/ui/rfc-2565-param-attrs/attr-without-param.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fattr-without-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fattr-without-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fattr-without-param.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -0,0 +1,20 @@\n+error: expected parameter name, found `)`\n+  --> $DIR/attr-without-param.rs:3:17\n+   |\n+LL |     fn f(#[attr]) {}\n+   |                 ^ expected parameter name\n+\n+error: expected parameter name, found `)`\n+  --> $DIR/attr-without-param.rs:8:17\n+   |\n+LL |     fn f(#[attr]) {}\n+   |                 ^ expected parameter name\n+\n+error: expected argument name, found `)`\n+  --> $DIR/attr-without-param.rs:13:17\n+   |\n+LL |     fn f(#[attr]);\n+   |                 ^ expected argument name\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "c537c1034b5a6936bb9e834c319a1a212cce46fc", "filename": "src/test/ui/rfc-2565-param-attrs/auxiliary/param-attrs.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -11,7 +11,6 @@ macro_rules! checker {\n     ($attr_name:ident, $expected:literal) => {\n         #[proc_macro_attribute]\n         pub fn $attr_name(attr: TokenStream, input: TokenStream) -> TokenStream {\n-            assert!(attr.to_string().is_empty());\n             assert_eq!(input.to_string(), $expected);\n             TokenStream::new()\n         }\n@@ -28,7 +27,18 @@ checker!(attr_inherent_1, \"fn inherent1(#[a1] self, #[a2] arg1: u8) { }\");\n checker!(attr_inherent_2, \"fn inherent2(#[a1] &self, #[a2] arg1: u8) { }\");\n checker!(attr_inherent_3, \"fn inherent3<'a>(#[a1] &'a mut self, #[a2] arg1: u8) { }\");\n checker!(attr_inherent_4, \"fn inherent4<'a>(#[a1] self: Box<Self>, #[a2] arg1: u8) { }\");\n+checker!(attr_inherent_issue_64682, \"fn inherent5(#[a1] #[a2] arg1: u8, #[a3] arg2: u8) { }\");\n checker!(attr_trait_1, \"fn trait1(#[a1] self, #[a2] arg1: u8);\");\n checker!(attr_trait_2, \"fn trait2(#[a1] &self, #[a2] arg1: u8);\");\n checker!(attr_trait_3, \"fn trait3<'a>(#[a1] &'a mut self, #[a2] arg1: u8);\");\n checker!(attr_trait_4, \"fn trait4<'a>(#[a1] self: Box<Self>, #[a2] arg1: u8, #[a3] Vec<u8>);\");\n+checker!(attr_trait_issue_64682, \"fn trait5(#[a1] #[a2] arg1: u8, #[a3] arg2: u8);\");\n+checker!(rename_params, r#\"impl Foo {\n+    fn hello(#[angery(true)] a: i32, #[a2] b: i32, #[what = \"how\"] c: u32) { }\n+    fn hello2(#[a1] #[a2] a: i32, #[what = \"how\"] b: i32,\n+              #[angery(true)] c: u32) {\n+    }\n+    fn hello_self(#[a1] #[a2] &self, #[a1] #[a2] a: i32,\n+                  #[what = \"how\"] b: i32, #[angery(true)] c: u32) {\n+    }\n+}\"#);"}, {"sha": "670303906d24c1b74887898f4c66c01fb21e70cf", "filename": "src/test/ui/rfc-2565-param-attrs/issue-64682-dropping-first-attrs-in-impl-fns.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fissue-64682-dropping-first-attrs-in-impl-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fissue-64682-dropping-first-attrs-in-impl-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fissue-64682-dropping-first-attrs-in-impl-fns.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -0,0 +1,21 @@\n+// aux-build:param-attrs.rs\n+\n+// check-pass\n+\n+extern crate param_attrs;\n+\n+use param_attrs::rename_params;\n+\n+#[rename_params(send_help)]\n+impl Foo {\n+    fn hello(#[angery(true)] a: i32, #[a2] b: i32, #[what = \"how\"] c: u32) {}\n+    fn hello2(#[a1] #[a2] a: i32, #[what = \"how\"] b: i32, #[angery(true)] c: u32) {}\n+    fn hello_self(\n+        #[a1] #[a2] &self,\n+        #[a1] #[a2] a: i32,\n+        #[what = \"how\"] b: i32,\n+        #[angery(true)] c: u32\n+    ) {}\n+}\n+\n+fn main() {}"}, {"sha": "bf09171c9a12afc7914a91341967e18357b2a18f", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -64,6 +64,21 @@ impl SelfStruct {\n         #[no_mangle] b: i32,\n         //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n     ) {}\n+\n+    fn issue_64682_associated_fn(\n+        /// Foo\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[test] a: i32,\n+        //~^ ERROR expected an inert attribute, found an attribute macro\n+        /// Baz\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[must_use]\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        /// Qux\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[no_mangle] b: i32,\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+    ) {}\n }\n \n struct RefStruct {}\n@@ -104,7 +119,23 @@ trait RefTrait {\n         #[no_mangle] b: i32,\n         //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n     ) {}\n+\n+    fn issue_64682_associated_fn(\n+        /// Foo\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[test] a: i32,\n+        //~^ ERROR expected an inert attribute, found an attribute macro\n+        /// Baz\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[must_use]\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        /// Qux\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[no_mangle] b: i32,\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+    ) {}\n }\n+\n impl RefTrait for RefStruct {\n     fn foo(\n         /// Foo"}, {"sha": "4d0349e8765f0eca73372ae915c8d11e41ca3671", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.stderr", "status": "modified", "additions": 99, "deletions": 27, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -23,25 +23,37 @@ LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:77:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:71:9\n    |\n LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:96:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:92:9\n    |\n LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:115:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:111:9\n    |\n LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:132:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:126:9\n+   |\n+LL |         #[test] a: i32,\n+   |         ^^^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/param-attrs-builtin-attrs.rs:146:9\n+   |\n+LL |         #[test] a: i32,\n+   |         ^^^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/param-attrs-builtin-attrs.rs:163:9\n    |\n LL |         #[test] a: u32,\n    |         ^^^^^^^\n@@ -173,142 +185,202 @@ LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:72:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:69:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:73:9\n+   |\n+LL |         /// Baz\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:75:9\n    |\n+LL |         #[must_use]\n+   |         ^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:77:9\n+   |\n+LL |         /// Qux\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:79:9\n+   |\n+LL |         #[no_mangle] b: i32,\n+   |         ^^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:87:9\n+   |\n+LL |         /// Foo\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:90:9\n+   |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:79:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:94:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:81:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:96:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:83:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:98:9\n    |\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:85:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:100:9\n    |\n LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:91:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:106:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:94:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:109:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:98:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:113:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:100:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:115:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:102:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:117:9\n    |\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:104:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:119:9\n    |\n LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:110:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:124:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:113:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:128:9\n+   |\n+LL |         /// Baz\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:130:9\n+   |\n+LL |         #[must_use]\n+   |         ^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:132:9\n+   |\n+LL |         /// Qux\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:134:9\n+   |\n+LL |         #[no_mangle] b: i32,\n+   |         ^^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:141:9\n+   |\n+LL |         /// Foo\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:144:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:117:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:148:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:119:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:150:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:121:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:152:9\n    |\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:123:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:154:9\n    |\n LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:130:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:161:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:134:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:165:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:136:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:167:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:138:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:169:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:140:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:171:9\n    |\n LL |         #[no_mangle] b: i32\n    |         ^^^^^^^^^^^^\n \n-error: aborting due to 52 previous errors\n+error: aborting due to 64 previous errors\n "}, {"sha": "a4d9d32b514ac211d90d7c99414370713dd52372", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-cfg.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -51,6 +51,14 @@ impl RefStruct {\n         //~^ ERROR unused variable: `c`\n         #[cfg_attr(something, cfg(nothing))] d: i32,\n     ) {}\n+    fn issue_64682_associated_fn(\n+        #[cfg(nothing)] a: i32,\n+        #[cfg(something)] b: i32,\n+        //~^ ERROR unused variable: `b`\n+        #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+        //~^ ERROR unused variable: `c`\n+        #[cfg_attr(something, cfg(nothing))] d: i32,\n+    ) {}\n }\n trait RefTrait {\n     fn bar(\n@@ -62,6 +70,14 @@ trait RefTrait {\n         //~^ ERROR unused variable: `c`\n         #[cfg_attr(something, cfg(nothing))] d: i32,\n     ) {}\n+    fn issue_64682_associated_fn(\n+        #[cfg(nothing)] a: i32,\n+        #[cfg(something)] b: i32,\n+        //~^ ERROR unused variable: `b`\n+        #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+        //~^ ERROR unused variable: `c`\n+        #[cfg_attr(something, cfg(nothing))] d: i32,\n+    ) {}\n }\n impl RefTrait for RefStruct {\n     fn bar(\n@@ -73,6 +89,14 @@ impl RefTrait for RefStruct {\n         //~^ ERROR unused variable: `c`\n         #[cfg_attr(something, cfg(nothing))] d: i32,\n     ) {}\n+    fn issue_64682_associated_fn(\n+        #[cfg(nothing)] a: i32,\n+        #[cfg(something)] b: i32,\n+        //~^ ERROR unused variable: `b`\n+        #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+        //~^ ERROR unused variable: `c`\n+        #[cfg_attr(something, cfg(nothing))] d: i32,\n+    ) {}\n }\n \n fn main() {"}, {"sha": "8d9571d09a856228c2e884efcb5588595b116c80", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-cfg.stderr", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -23,31 +23,43 @@ LL |     #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                        ^ help: consider prefixing with an underscore: `_c`\n \n error: unused variable: `a`\n-  --> $DIR/param-attrs-cfg.rs:83:27\n+  --> $DIR/param-attrs-cfg.rs:107:27\n    |\n LL |         #[cfg(something)] a: i32,\n    |                           ^ help: consider prefixing with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/param-attrs-cfg.rs:89:27\n+  --> $DIR/param-attrs-cfg.rs:113:27\n    |\n LL |         #[cfg(something)] b: i32,\n    |                           ^ help: consider prefixing with an underscore: `_b`\n \n error: unused variable: `c`\n-  --> $DIR/param-attrs-cfg.rs:91:44\n+  --> $DIR/param-attrs-cfg.rs:115:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                            ^ help: consider prefixing with an underscore: `_c`\n \n error: unused variable: `b`\n-  --> $DIR/param-attrs-cfg.rs:59:27\n+  --> $DIR/param-attrs-cfg.rs:67:27\n    |\n LL |         #[cfg(something)] b: i32,\n    |                           ^ help: consider prefixing with an underscore: `_b`\n \n error: unused variable: `c`\n-  --> $DIR/param-attrs-cfg.rs:61:44\n+  --> $DIR/param-attrs-cfg.rs:69:44\n+   |\n+LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+   |                                            ^ help: consider prefixing with an underscore: `_c`\n+\n+error: unused variable: `b`\n+  --> $DIR/param-attrs-cfg.rs:75:27\n+   |\n+LL |         #[cfg(something)] b: i32,\n+   |                           ^ help: consider prefixing with an underscore: `_b`\n+\n+error: unused variable: `c`\n+  --> $DIR/param-attrs-cfg.rs:77:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                            ^ help: consider prefixing with an underscore: `_c`\n@@ -71,16 +83,40 @@ LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                            ^ help: consider prefixing with an underscore: `_c`\n \n error: unused variable: `b`\n-  --> $DIR/param-attrs-cfg.rs:70:27\n+  --> $DIR/param-attrs-cfg.rs:56:27\n+   |\n+LL |         #[cfg(something)] b: i32,\n+   |                           ^ help: consider prefixing with an underscore: `_b`\n+\n+error: unused variable: `c`\n+  --> $DIR/param-attrs-cfg.rs:58:44\n+   |\n+LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+   |                                            ^ help: consider prefixing with an underscore: `_c`\n+\n+error: unused variable: `b`\n+  --> $DIR/param-attrs-cfg.rs:86:27\n+   |\n+LL |         #[cfg(something)] b: i32,\n+   |                           ^ help: consider prefixing with an underscore: `_b`\n+\n+error: unused variable: `c`\n+  --> $DIR/param-attrs-cfg.rs:88:44\n+   |\n+LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+   |                                            ^ help: consider prefixing with an underscore: `_c`\n+\n+error: unused variable: `b`\n+  --> $DIR/param-attrs-cfg.rs:94:27\n    |\n LL |         #[cfg(something)] b: i32,\n    |                           ^ help: consider prefixing with an underscore: `_b`\n \n error: unused variable: `c`\n-  --> $DIR/param-attrs-cfg.rs:72:44\n+  --> $DIR/param-attrs-cfg.rs:96:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                            ^ help: consider prefixing with an underscore: `_c`\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 19 previous errors\n "}, {"sha": "1183ac65b9a7fab5879afd6ef3da25e01387f935", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-pretty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-pretty.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -36,6 +36,9 @@ impl W {\n \n     #[attr_inherent_4]\n     fn inherent4<'a>(#[a1] self: Box<Self>, #[a2] arg1: u8) {}\n+\n+    #[attr_inherent_issue_64682]\n+    fn inherent5(#[a1] #[a2] arg1: u8, #[a3] arg2: u8) {}\n }\n \n trait A {\n@@ -50,6 +53,9 @@ trait A {\n \n     #[attr_trait_4]\n     fn trait4<'a>(#[a1] self: Box<Self>, #[a2] arg1: u8, #[a3] Vec<u8>);\n+\n+    #[attr_trait_issue_64682]\n+    fn trait5(#[a1] #[a2] arg1: u8, #[a3] arg2: u8);\n }\n \n fn main() {}"}, {"sha": "be9085d5878cb493d3860b98a00a5f972e680332", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -38,6 +38,9 @@ impl W {\n     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n     //~^ ERROR expected an inert attribute, found an attribute macro\n     //~| ERROR expected an inert attribute, found an attribute macro\n+    fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8) {}\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~| ERROR expected an inert attribute, found an attribute macro\n }\n \n trait A {\n@@ -54,6 +57,9 @@ trait A {\n     //~^ ERROR expected an inert attribute, found an attribute macro\n     //~| ERROR expected an inert attribute, found an attribute macro\n     //~| ERROR expected an inert attribute, found an attribute macro\n+    fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8);\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~| ERROR expected an inert attribute, found an attribute macro\n }\n \n fn main() {}"}, {"sha": "1cc3c3d82281bb1579c2442dd996f0de20ce5904", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.stderr", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -95,58 +95,82 @@ LL |     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n    |                                             ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:44:15\n+  --> $DIR/proc-macro-cannot-be-used.rs:41:38\n+   |\n+LL |     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8) {}\n+   |                                      ^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/proc-macro-cannot-be-used.rs:41:54\n+   |\n+LL |     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8) {}\n+   |                                                      ^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/proc-macro-cannot-be-used.rs:47:15\n    |\n LL |     fn trait1(#[id] self, #[id] arg1: u8);\n    |               ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:44:27\n+  --> $DIR/proc-macro-cannot-be-used.rs:47:27\n    |\n LL |     fn trait1(#[id] self, #[id] arg1: u8);\n    |                           ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:47:15\n+  --> $DIR/proc-macro-cannot-be-used.rs:50:15\n    |\n LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n    |               ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:47:28\n+  --> $DIR/proc-macro-cannot-be-used.rs:50:28\n    |\n LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n    |                            ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:50:19\n+  --> $DIR/proc-macro-cannot-be-used.rs:53:19\n    |\n LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n    |                   ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:50:39\n+  --> $DIR/proc-macro-cannot-be-used.rs:53:39\n    |\n LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n    |                                       ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:53:19\n+  --> $DIR/proc-macro-cannot-be-used.rs:56:19\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                   ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:53:42\n+  --> $DIR/proc-macro-cannot-be-used.rs:56:42\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                                          ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:53:58\n+  --> $DIR/proc-macro-cannot-be-used.rs:56:58\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                                                          ^^^^^\n \n-error: aborting due to 25 previous errors\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/proc-macro-cannot-be-used.rs:60:38\n+   |\n+LL |     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8);\n+   |                                      ^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/proc-macro-cannot-be-used.rs:60:54\n+   |\n+LL |     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8);\n+   |                                                      ^^^^^\n+\n+error: aborting due to 29 previous errors\n "}, {"sha": "a52ec6dc539386a0fd67c47105196a496bfff1f3", "filename": "src/test/ui/struct-literal-variant-in-if.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -50,7 +50,10 @@ error[E0308]: mismatched types\n   --> $DIR/struct-literal-variant-in-if.rs:10:20\n    |\n LL |     if x == E::V { field } {}\n-   |                    ^^^^^ expected (), found bool\n+   |     ---------------^^^^^--- help: consider using a semicolon here\n+   |     |              |\n+   |     |              expected (), found bool\n+   |     expected this to be `()`\n    |\n    = note: expected type `()`\n               found type `bool`"}, {"sha": "1af0f7a191e80d1056b787436c7a45ec71d92c42", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -1,6 +1,9 @@\n error[E0423]: expected value, found struct variant `E::B`\n   --> $DIR/fn-or-tuple-struct-without-args.rs:36:16\n    |\n+LL |     B { a: usize },\n+   |     -------------- `E::B` defined here\n+...\n LL |     let _: E = E::B;\n    |                ^^^-\n    |                |  |"}, {"sha": "fbcfba6653f274bf3e1a7d2873420f54d78267c4", "filename": "src/test/ui/suggestions/issue-61226.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -1,6 +1,9 @@\n error[E0423]: expected value, found struct `X`\n   --> $DIR/issue-61226.rs:3:10\n    |\n+LL | struct X {}\n+   | ----------- `X` defined here\n+LL | fn main() {\n LL |     vec![X]; //\u2026\n    |          ^ did you mean `X { /* fields */ }`?\n "}, {"sha": "03cbed1376ea3ed21c8513d2d7a35d5ef419c539", "filename": "src/test/ui/suggestions/match-needing-semi.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -0,0 +1,18 @@\n+// check-only\n+// run-rustfix\n+\n+fn main() {\n+    match 3 {\n+        4 => 1,\n+        3 => {\n+            2 //~ ERROR mismatched types\n+        }\n+        _ => 2\n+    };\n+    match 3 { //~ ERROR mismatched types\n+        4 => 1,\n+        3 => 2,\n+        _ => 2\n+    };\n+    let _ = ();\n+}"}, {"sha": "f34071ac758868b9fb4c10b5244288dcebb8ebc7", "filename": "src/test/ui/suggestions/match-needing-semi.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -0,0 +1,18 @@\n+// check-only\n+// run-rustfix\n+\n+fn main() {\n+    match 3 {\n+        4 => 1,\n+        3 => {\n+            2 //~ ERROR mismatched types\n+        }\n+        _ => 2\n+    }\n+    match 3 { //~ ERROR mismatched types\n+        4 => 1,\n+        3 => 2,\n+        _ => 2\n+    }\n+    let _ = ();\n+}"}, {"sha": "988945817c2eeb88a86ac84bae93a86da87d0f93", "filename": "src/test/ui/suggestions/match-needing-semi.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -0,0 +1,36 @@\n+error[E0308]: mismatched types\n+  --> $DIR/match-needing-semi.rs:8:13\n+   |\n+LL | /     match 3 {\n+LL | |         4 => 1,\n+LL | |         3 => {\n+LL | |             2\n+   | |             ^ expected (), found integer\n+LL | |         }\n+LL | |         _ => 2\n+LL | |     }\n+   | |     -- help: consider using a semicolon here\n+   | |_____|\n+   |       expected this to be `()`\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/match-needing-semi.rs:12:5\n+   |\n+LL | /     match 3 {\n+LL | |         4 => 1,\n+LL | |         3 => 2,\n+LL | |         _ => 2\n+LL | |     }\n+   | |     ^- help: consider using a semicolon here\n+   | |_____|\n+   |       expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "357b33de51b84e53b9f17baa8effccb7cbfd7c91", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-Self-issue-58006.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -6,3 +6,4 @@ LL |             Self::A => (),\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0533`."}, {"sha": "c6528e417d8aecdacca3850c197d473f5e834c79", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8431f261dd160021b6af85916f161a13dd101ca0/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr?ref=8431f261dd160021b6af85916f161a13dd101ca0", "patch": "@@ -39,5 +39,5 @@ LL |     let Alias::Unit() = panic!();\n \n error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0164, E0618.\n+Some errors have detailed explanations: E0164, E0533, E0618.\n For more information about an error, try `rustc --explain E0164`."}]}