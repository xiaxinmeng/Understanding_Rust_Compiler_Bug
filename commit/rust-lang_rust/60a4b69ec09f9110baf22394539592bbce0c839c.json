{"sha": "60a4b69ec09f9110baf22394539592bbce0c839c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYTRiNjllYzA5ZjkxMTBiYWYyMjM5NDUzOTU5MmJiY2UwYzgzOWM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-10T08:47:54Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-10T22:15:55Z"}, "message": "Expand `#[derive]` attribute macro invocations last.", "tree": {"sha": "64976e63c4eaae7b31b84ba5948e5ecd06fe804c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64976e63c4eaae7b31b84ba5948e5ecd06fe804c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60a4b69ec09f9110baf22394539592bbce0c839c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60a4b69ec09f9110baf22394539592bbce0c839c", "html_url": "https://github.com/rust-lang/rust/commit/60a4b69ec09f9110baf22394539592bbce0c839c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60a4b69ec09f9110baf22394539592bbce0c839c/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7bfb1aba9d089a0464c03b3841e889c6ee7c4f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7bfb1aba9d089a0464c03b3841e889c6ee7c4f1", "html_url": "https://github.com/rust-lang/rust/commit/a7bfb1aba9d089a0464c03b3841e889c6ee7c4f1"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "9f99919c895058ee3ccc955d7f5e4c025cbdbbdb", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/60a4b69ec09f9110baf22394539592bbce0c839c/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a4b69ec09f9110baf22394539592bbce0c839c/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=60a4b69ec09f9110baf22394539592bbce0c839c", "patch": "@@ -11,6 +11,7 @@\n //! The compiler code necessary to implement the `#[derive]` extensions.\n \n use syntax::ast::{self, MetaItem};\n+use syntax::attr::HasAttrs;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::feature_gate;\n@@ -104,13 +105,37 @@ pub fn expand_derive(cx: &mut ExtCtxt,\n         }\n     };\n \n-    if mitem.value_str().is_some() {\n-        cx.span_err(mitem.span, \"unexpected value in `derive`\");\n+    let mut derive_attrs = Vec::new();\n+    item = item.map_attrs(|attrs| {\n+        let partition = attrs.into_iter().partition(|attr| &attr.name() == \"derive\");\n+        derive_attrs = partition.0;\n+        partition.1\n+    });\n+\n+    // Expand `#[derive]`s after other attribute macro invocations.\n+    if cx.resolver.find_attr_invoc(&mut item.attrs.clone()).is_some() {\n+        return vec![Annotatable::Item(item.map_attrs(|mut attrs| {\n+            attrs.push(cx.attribute(span, P(mitem.clone())));\n+            attrs.extend(derive_attrs);\n+            attrs\n+        }))];\n     }\n \n-    let mut traits = mitem.meta_item_list().unwrap_or(&[]).to_owned();\n-    if traits.is_empty() {\n-        cx.span_warn(mitem.span, \"empty trait list in `derive`\");\n+    let get_traits = |mitem: &MetaItem, cx: &ExtCtxt| {\n+        if mitem.value_str().is_some() {\n+            cx.span_err(mitem.span, \"unexpected value in `derive`\");\n+        }\n+\n+        let traits = mitem.meta_item_list().unwrap_or(&[]).to_owned();\n+        if traits.is_empty() {\n+            cx.span_warn(mitem.span, \"empty trait list in `derive`\");\n+        }\n+        traits\n+    };\n+\n+    let mut traits = get_traits(mitem, cx);\n+    for derive_attr in derive_attrs {\n+        traits.extend(get_traits(&derive_attr.node.value, cx));\n     }\n \n     // First, weed out malformed #[derive]"}]}