{"sha": "ea5368ce6e5eb1c9b28e3e072dca4f0b063f15b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNTM2OGNlNmU1ZWIxYzliMjhlM2UwNzJkY2E0ZjBiMDYzZjE1YjI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T03:36:50Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:28Z"}, "message": "librustc: De-`@mut` `ty::ctxt_::rcache`", "tree": {"sha": "9f4d7253ef6f2c5f1213ff77fcb979e4e78d5b74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f4d7253ef6f2c5f1213ff77fcb979e4e78d5b74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea5368ce6e5eb1c9b28e3e072dca4f0b063f15b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea5368ce6e5eb1c9b28e3e072dca4f0b063f15b2", "html_url": "https://github.com/rust-lang/rust/commit/ea5368ce6e5eb1c9b28e3e072dca4f0b063f15b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea5368ce6e5eb1c9b28e3e072dca4f0b063f15b2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c3f92699e1f01301739cb78e3dd567363231d2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c3f92699e1f01301739cb78e3dd567363231d2c", "html_url": "https://github.com/rust-lang/rust/commit/2c3f92699e1f01301739cb78e3dd567363231d2c"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "2e989f48b8002c4a5c5cf78e71da230434e8a8c7", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ea5368ce6e5eb1c9b28e3e072dca4f0b063f15b2/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5368ce6e5eb1c9b28e3e072dca4f0b063f15b2/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=ea5368ce6e5eb1c9b28e3e072dca4f0b063f15b2", "patch": "@@ -380,15 +380,21 @@ fn parse_ty(st: &mut PState, conv: conv_did) -> ty::t {\n         let key = ty::creader_cache_key {cnum: st.crate,\n                                          pos: pos,\n                                          len: len };\n-        match st.tcx.rcache.find(&key) {\n-          Some(&tt) => return tt,\n+\n+        let tt_opt = {\n+            let rcache = st.tcx.rcache.borrow();\n+            rcache.get().find_copy(&key)\n+        };\n+        match tt_opt {\n+          Some(tt) => return tt,\n           None => {\n             let mut ps = PState {\n                 pos: pos,\n                 .. *st\n             };\n             let tt = parse_ty(&mut ps, |x,y| conv(x,y));\n-            st.tcx.rcache.insert(key, tt);\n+            let mut rcache = st.tcx.rcache.borrow_mut();\n+            rcache.get().insert(key, tt);\n             return tt;\n           }\n         }"}, {"sha": "22974ebd711d2c7f33efc0fef39125f30f7325a6", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea5368ce6e5eb1c9b28e3e072dca4f0b063f15b2/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5368ce6e5eb1c9b28e3e072dca4f0b063f15b2/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ea5368ce6e5eb1c9b28e3e072dca4f0b063f15b2", "patch": "@@ -174,7 +174,7 @@ pub struct creader_cache_key {\n     len: uint\n }\n \n-type creader_cache = @mut HashMap<creader_cache_key, t>;\n+type creader_cache = RefCell<HashMap<creader_cache_key, t>>;\n \n struct intern_key {\n     sty: *sty,\n@@ -957,10 +957,6 @@ type type_cache = RefCell<HashMap<ast::DefId, ty_param_bounds_and_ty>>;\n \n pub type node_type_table = @mut HashMap<uint,t>;\n \n-fn mk_rcache() -> creader_cache {\n-    return @mut HashMap::new();\n-}\n-\n pub fn mk_ctxt(s: session::Session,\n                dm: resolve::DefMap,\n                named_region_map: @mut resolve_lifetime::NamedRegionMap,\n@@ -987,7 +983,7 @@ pub fn mk_ctxt(s: session::Session,\n         intrinsic_defs: RefCell::new(HashMap::new()),\n         freevars: freevars,\n         tcache: RefCell::new(HashMap::new()),\n-        rcache: mk_rcache(),\n+        rcache: RefCell::new(HashMap::new()),\n         short_names_cache: RefCell::new(HashMap::new()),\n         needs_unwind_cleanup_cache: RefCell::new(HashMap::new()),\n         tc_cache: RefCell::new(HashMap::new()),"}]}