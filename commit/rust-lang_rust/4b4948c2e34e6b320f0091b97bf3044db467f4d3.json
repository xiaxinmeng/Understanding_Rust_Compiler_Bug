{"sha": "4b4948c2e34e6b320f0091b97bf3044db467f4d3", "node_id": "C_kwDOAAsO6NoAKDRiNDk0OGMyZTM0ZTZiMzIwZjAwOTFiOTdiZjMwNDRkYjQ2N2Y0ZDM", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-04-09T21:07:45Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-04-09T21:22:14Z"}, "message": "Remove identity casts", "tree": {"sha": "433b68740fa430a08d2cab9e413820eaada0ffa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/433b68740fa430a08d2cab9e413820eaada0ffa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b4948c2e34e6b320f0091b97bf3044db467f4d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b4948c2e34e6b320f0091b97bf3044db467f4d3", "html_url": "https://github.com/rust-lang/rust/commit/4b4948c2e34e6b320f0091b97bf3044db467f4d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b4948c2e34e6b320f0091b97bf3044db467f4d3/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81c320ea7786a2b5a07a165aedacb438ae14fd74", "url": "https://api.github.com/repos/rust-lang/rust/commits/81c320ea7786a2b5a07a165aedacb438ae14fd74", "html_url": "https://github.com/rust-lang/rust/commit/81c320ea7786a2b5a07a165aedacb438ae14fd74"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "1f6838a02784477720b5c4839b47ea9da5cdf5e0", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b4948c2e34e6b320f0091b97bf3044db467f4d3/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b4948c2e34e6b320f0091b97bf3044db467f4d3/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=4b4948c2e34e6b320f0091b97bf3044db467f4d3", "patch": "@@ -686,7 +686,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     fn bclose_maybe_open(&mut self, span: rustc_span::Span, empty: bool, close_box: bool) {\n         let has_comment = self.maybe_print_comment(span.hi());\n         if !empty || has_comment {\n-            self.break_offset_if_not_bol(1, -(INDENT_UNIT as isize));\n+            self.break_offset_if_not_bol(1, -INDENT_UNIT);\n         }\n         self.word(\"}\");\n         if close_box {"}, {"sha": "74f5b359021d291fd86b35dd808fa86f0c257b36", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b4948c2e34e6b320f0091b97bf3044db467f4d3/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b4948c2e34e6b320f0091b97bf3044db467f4d3/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=4b4948c2e34e6b320f0091b97bf3044db467f4d3", "patch": "@@ -242,7 +242,7 @@ pub fn enum_def_to_string(\n impl<'a> State<'a> {\n     pub fn bclose_maybe_open(&mut self, span: rustc_span::Span, close_box: bool) {\n         self.maybe_print_comment(span.hi());\n-        self.break_offset_if_not_bol(1, -(INDENT_UNIT as isize));\n+        self.break_offset_if_not_bol(1, -INDENT_UNIT);\n         self.word(\"}\");\n         if close_box {\n             self.end(); // close the outer-box"}, {"sha": "ec3cf34d7109f5ab67e1af763374db5bfde2f83d", "filename": "compiler/rustc_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b4948c2e34e6b320f0091b97bf3044db467f4d3/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b4948c2e34e6b320f0091b97bf3044db467f4d3/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fsrc%2Flib.rs?ref=4b4948c2e34e6b320f0091b97bf3044db467f4d3", "patch": "@@ -30,7 +30,7 @@ pub unsafe extern \"C\" fn LLVMRustStringWriteImpl(\n     ptr: *const c_char,\n     size: size_t,\n ) {\n-    let slice = slice::from_raw_parts(ptr as *const u8, size as usize);\n+    let slice = slice::from_raw_parts(ptr as *const u8, size);\n \n     sr.bytes.borrow_mut().extend_from_slice(slice);\n }"}, {"sha": "f62853c3e740304e661f13aad808280de4d45c30", "filename": "compiler/rustc_middle/src/mir/patch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b4948c2e34e6b320f0091b97bf3044db467f4d3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b4948c2e34e6b320f0091b97bf3044db467f4d3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs?ref=4b4948c2e34e6b320f0091b97bf3044db467f4d3", "patch": "@@ -133,21 +133,21 @@ impl<'tcx> MirPatch<'tcx> {\n         let mut new_decl = LocalDecl::new(ty, span).internal();\n         **new_decl.local_info.as_mut().assert_crate_local() = local_info;\n         self.new_locals.push(new_decl);\n-        Local::new(index as usize)\n+        Local::new(index)\n     }\n \n     pub fn new_temp(&mut self, ty: Ty<'tcx>, span: Span) -> Local {\n         let index = self.next_local;\n         self.next_local += 1;\n         self.new_locals.push(LocalDecl::new(ty, span));\n-        Local::new(index as usize)\n+        Local::new(index)\n     }\n \n     pub fn new_internal(&mut self, ty: Ty<'tcx>, span: Span) -> Local {\n         let index = self.next_local;\n         self.next_local += 1;\n         self.new_locals.push(LocalDecl::new(ty, span).internal());\n-        Local::new(index as usize)\n+        Local::new(index)\n     }\n \n     pub fn new_block(&mut self, data: BasicBlockData<'tcx>) -> BasicBlock {"}, {"sha": "4f00abf7fabc148e97b54c1c87a0ac04fe70e962", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b4948c2e34e6b320f0091b97bf3044db467f4d3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b4948c2e34e6b320f0091b97bf3044db467f4d3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=4b4948c2e34e6b320f0091b97bf3044db467f4d3", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> PlaceTy<'tcx> {\n                     ty::Array(inner, _) if !from_end => tcx.mk_array(*inner, (to - from) as u64),\n                     ty::Array(inner, size) if from_end => {\n                         let size = size.eval_target_usize(tcx, param_env);\n-                        let len = size - (from as u64) - (to as u64);\n+                        let len = size - from - to;\n                         tcx.mk_array(*inner, len)\n                     }\n                     _ => bug!(\"cannot subslice non-array type: `{:?}`\", self),"}, {"sha": "c0e557d480d3d0a52e399fa0c45dc4b8fcd81f65", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b4948c2e34e6b320f0091b97bf3044db467f4d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b4948c2e34e6b320f0091b97bf3044db467f4d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=4b4948c2e34e6b320f0091b97bf3044db467f4d3", "patch": "@@ -337,7 +337,7 @@ impl ScalarInt {\n     /// Fails if the size of the `ScalarInt` is not equal to `Size { raw: 16 }`\n     /// and returns the `ScalarInt`s size in that case.\n     pub fn try_to_i128(self) -> Result<i128, Size> {\n-        self.try_to_int(Size::from_bits(128)).map(|v| i128::try_from(v).unwrap())\n+        self.try_to_int(Size::from_bits(128))\n     }\n }\n "}, {"sha": "5bbd396d6f3b052bf80233be4bc09ef2bdb2e19a", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b4948c2e34e6b320f0091b97bf3044db467f4d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b4948c2e34e6b320f0091b97bf3044db467f4d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4b4948c2e34e6b320f0091b97bf3044db467f4d3", "patch": "@@ -1891,7 +1891,7 @@ impl<'tcx> Ty<'tcx> {\n                         // The way we evaluate the `N` in `[T; N]` here only works since we use\n                         // `simd_size_and_type` post-monomorphization. It will probably start to ICE\n                         // if we use it in generic code. See the `simd-array-trait` ui test.\n-                        (f0_len.eval_target_usize(tcx, ParamEnv::empty()) as u64, *f0_elem_ty)\n+                        (f0_len.eval_target_usize(tcx, ParamEnv::empty()), *f0_elem_ty)\n                     }\n                     // Otherwise, the fields of this Adt are the SIMD components (and we assume they\n                     // all have the same type)."}, {"sha": "e41d0f7047b3bd8a9bf3e21afdcb4fa5aa8cc713", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b4948c2e34e6b320f0091b97bf3044db467f4d3/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b4948c2e34e6b320f0091b97bf3044db467f4d3/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=4b4948c2e34e6b320f0091b97bf3044db467f4d3", "patch": "@@ -558,8 +558,8 @@ impl<'a> StringReader<'a> {\n         }\n \n         if let Some(possible_offset) = possible_offset {\n-            let lo = start + BytePos(possible_offset as u32);\n-            let hi = lo + BytePos(found_terminators as u32);\n+            let lo = start + BytePos(possible_offset);\n+            let hi = lo + BytePos(found_terminators);\n             let span = self.mk_sp(lo, hi);\n             err.span_suggestion(\n                 span,"}]}