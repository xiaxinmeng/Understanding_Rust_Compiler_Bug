{"sha": "fa70398d6d62f777fbb360dce4486292a1001925", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNzAzOThkNmQ2MmY3NzdmYmIzNjBkY2U0NDg2MjkyYTEwMDE5MjU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-27T16:33:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-27T16:33:16Z"}, "message": "Rollup merge of #83526 - klensy:lazy-too, r=petrochenkov\n\nlazily calls some fns\n\nReplaced some fn's with it's lazy variants.", "tree": {"sha": "5a34f185fe16322f2b297a4589193734c8fd0cc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a34f185fe16322f2b297a4589193734c8fd0cc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa70398d6d62f777fbb360dce4486292a1001925", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgX15MCRBK7hj4Ov3rIwAAdHIIAI+8rzwy4BT8KtRDK5fyCueQ\nh89AI5h62Gba/JVll6/DALmjQq552N9L7fkRQQ/7kbCLH1SiDqV9mi9oTbr4Scl3\nJiqoJsYdoEmk60ZgwKU36Jkgz3Y+/7CgyWK4xVcJ5digoreqXLEFdsLcajTzXD93\n6r9/IXq1rTfu6y4ZBs0sPTDboY9e9XBQYLkzmJzkUJoHpo6Jfi2eDaBh7AegwL3q\nzwjFX7B47WnkwgfQpxjDq+HK/DA4qIjGLjI8mE4lJraOm5J0/mxkH3REGvHgHvap\nROhZlHsCCjH8Hiu5WkoAVINcsZ8YPGU3Oyj7m9xFpZOe+4E6uyAN/k3NNqiLtpk=\n=GU1U\n-----END PGP SIGNATURE-----\n", "payload": "tree 5a34f185fe16322f2b297a4589193734c8fd0cc8\nparent 3f41fdd2ebb323f83e38b0cbd7b04229fda2c69a\nparent 229d1999944624abdfa96ab77686175c6d685a1c\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1616862796 +0900\ncommitter GitHub <noreply@github.com> 1616862796 +0900\n\nRollup merge of #83526 - klensy:lazy-too, r=petrochenkov\n\nlazily calls some fns\n\nReplaced some fn's with it's lazy variants.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa70398d6d62f777fbb360dce4486292a1001925", "html_url": "https://github.com/rust-lang/rust/commit/fa70398d6d62f777fbb360dce4486292a1001925", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa70398d6d62f777fbb360dce4486292a1001925/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f41fdd2ebb323f83e38b0cbd7b04229fda2c69a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f41fdd2ebb323f83e38b0cbd7b04229fda2c69a", "html_url": "https://github.com/rust-lang/rust/commit/3f41fdd2ebb323f83e38b0cbd7b04229fda2c69a"}, {"sha": "229d1999944624abdfa96ab77686175c6d685a1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/229d1999944624abdfa96ab77686175c6d685a1c", "html_url": "https://github.com/rust-lang/rust/commit/229d1999944624abdfa96ab77686175c6d685a1c"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "2bce1ac3c0a216211d74aa95e5cef6750b2421dc", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa70398d6d62f777fbb360dce4486292a1001925/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa70398d6d62f777fbb360dce4486292a1001925/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=fa70398d6d62f777fbb360dce4486292a1001925", "patch": "@@ -493,7 +493,7 @@ impl DiagnosticSpanLine {\n         h_end: usize,\n     ) -> DiagnosticSpanLine {\n         DiagnosticSpanLine {\n-            text: sf.get_line(index).map_or(String::new(), |l| l.into_owned()),\n+            text: sf.get_line(index).map_or_else(String::new, |l| l.into_owned()),\n             highlight_start: h_start,\n             highlight_end: h_end,\n         }"}, {"sha": "a753c4ab6ce966fce9092f44c089547c9b753468", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa70398d6d62f777fbb360dce4486292a1001925/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa70398d6d62f777fbb360dce4486292a1001925/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=fa70398d6d62f777fbb360dce4486292a1001925", "patch": "@@ -216,9 +216,10 @@ impl<'tcx> InstanceDef<'tcx> {\n             // drops of `Option::None` before LTO. We also respect the intent of\n             // `#[inline]` on `Drop::drop` implementations.\n             return ty.ty_adt_def().map_or(true, |adt_def| {\n-                adt_def.destructor(tcx).map_or(adt_def.is_enum(), |dtor| {\n-                    tcx.codegen_fn_attrs(dtor.did).requests_inline()\n-                })\n+                adt_def.destructor(tcx).map_or_else(\n+                    || adt_def.is_enum(),\n+                    |dtor| tcx.codegen_fn_attrs(dtor.did).requests_inline(),\n+                )\n             });\n         }\n         tcx.codegen_fn_attrs(self.def_id()).requests_inline()"}, {"sha": "416199b384000e72d9498df7f2a054205c1aa4c0", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa70398d6d62f777fbb360dce4486292a1001925/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa70398d6d62f777fbb360dce4486292a1001925/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=fa70398d6d62f777fbb360dce4486292a1001925", "patch": "@@ -525,7 +525,7 @@ impl<'sess> OnDiskCache<'sess> {\n     ) {\n         let mut current_diagnostics = self.current_diagnostics.borrow_mut();\n \n-        let x = current_diagnostics.entry(dep_node_index).or_insert(Vec::new());\n+        let x = current_diagnostics.entry(dep_node_index).or_default();\n \n         x.extend(Into::<Vec<_>>::into(diagnostics));\n     }"}, {"sha": "3629c813bc7a05252a0b620a4eb2fb711d6299e9", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa70398d6d62f777fbb360dce4486292a1001925/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa70398d6d62f777fbb360dce4486292a1001925/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs?ref=fa70398d6d62f777fbb360dce4486292a1001925", "patch": "@@ -157,7 +157,7 @@ impl OutlivesSuggestionBuilder {\n         debug!(\"Collected {:?}: {:?}\", fr, outlived_fr);\n \n         // Add to set of constraints for final help note.\n-        self.constraints_to_add.entry(fr).or_insert(Vec::new()).push(outlived_fr);\n+        self.constraints_to_add.entry(fr).or_default().push(outlived_fr);\n     }\n \n     /// Emit an intermediate note on the given `Diagnostic` if the involved regions are"}, {"sha": "1377bb781d0086089efd4eec3539947b8e69d05d", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa70398d6d62f777fbb360dce4486292a1001925/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa70398d6d62f777fbb360dce4486292a1001925/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=fa70398d6d62f777fbb360dce4486292a1001925", "patch": "@@ -2327,7 +2327,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n             ExprKind::Call(ref callee, ref arguments) => {\n                 self.resolve_expr(callee, Some(expr));\n-                let const_args = self.r.legacy_const_generic_args(callee).unwrap_or(Vec::new());\n+                let const_args = self.r.legacy_const_generic_args(callee).unwrap_or_default();\n                 for (idx, argument) in arguments.iter().enumerate() {\n                     // Constant arguments need to be treated as AnonConst since\n                     // that is how they will be later lowered to HIR."}, {"sha": "4c0df2701f5e302303c869ef8008eda21647747c", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa70398d6d62f777fbb360dce4486292a1001925/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa70398d6d62f777fbb360dce4486292a1001925/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=fa70398d6d62f777fbb360dce4486292a1001925", "patch": "@@ -184,7 +184,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         PathResult::Module(ModuleOrUniformRoot::Module(module)) => module.res(),\n                         _ => None,\n                     }\n-                    .map_or(String::new(), |res| format!(\"{} \", res.descr()));\n+                    .map_or_else(String::new, |res| format!(\"{} \", res.descr()));\n                 (mod_prefix, format!(\"`{}`\", Segment::names_to_string(mod_path)))\n             };\n             (\n@@ -1042,10 +1042,10 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 if let Some(span) = self.def_span(def_id) {\n                     err.span_label(span, &format!(\"`{}` defined here\", path_str));\n                 }\n-                let fields =\n-                    self.r.field_names.get(&def_id).map_or(\"/* fields */\".to_string(), |fields| {\n-                        vec![\"_\"; fields.len()].join(\", \")\n-                    });\n+                let fields = self.r.field_names.get(&def_id).map_or_else(\n+                    || \"/* fields */\".to_string(),\n+                    |fields| vec![\"_\"; fields.len()].join(\", \"),\n+                );\n                 err.span_suggestion(\n                     span,\n                     \"use the tuple variant pattern syntax instead\","}, {"sha": "50bb260762a7066649a60e1ed39c393ed2db29f8", "filename": "library/test/src/helpers/exit_code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa70398d6d62f777fbb360dce4486292a1001925/library%2Ftest%2Fsrc%2Fhelpers%2Fexit_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa70398d6d62f777fbb360dce4486292a1001925/library%2Ftest%2Fsrc%2Fhelpers%2Fexit_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fhelpers%2Fexit_code.rs?ref=fa70398d6d62f777fbb360dce4486292a1001925", "patch": "@@ -4,7 +4,7 @@ use std::process::ExitStatus;\n \n #[cfg(not(unix))]\n pub fn get_exit_code(status: ExitStatus) -> Result<i32, String> {\n-    status.code().ok_or(\"received no exit code from child process\".into())\n+    status.code().ok_or_else(|| \"received no exit code from child process\".into())\n }\n \n #[cfg(unix)]"}]}