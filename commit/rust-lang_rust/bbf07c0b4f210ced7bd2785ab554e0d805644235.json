{"sha": "bbf07c0b4f210ced7bd2785ab554e0d805644235", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZjA3YzBiNGYyMTBjZWQ3YmQyNzg1YWI1NTRlMGQ4MDU2NDQyMzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-21T03:36:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-21T03:36:22Z"}, "message": "Auto merge of #83333 - Dylan-DPC:rollup-0rdt6sz, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #82707 (const_evaluatable_checked: Stop eagerly erroring in `is_const_evaluatable`)\n - #83040 (extract `ConstKind::Unevaluated` into a struct)\n - #83280 (Fix pluralization in keyword docs)\n - #83289 (Move some tests to more reasonable directories - 5)\n - #83306 (Extend `proc_macro_back_compat` lint to `js-sys`)\n - #83327 (Extend comment in `UsedLocals::visit_lhs`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bdaa957d4632277cb8db05193f7e9b5caf7ac5a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdaa957d4632277cb8db05193f7e9b5caf7ac5a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbf07c0b4f210ced7bd2785ab554e0d805644235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf07c0b4f210ced7bd2785ab554e0d805644235", "html_url": "https://github.com/rust-lang/rust/commit/bbf07c0b4f210ced7bd2785ab554e0d805644235", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbf07c0b4f210ced7bd2785ab554e0d805644235/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed4005da44b0dcbeaa35951ef994da82e156258f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed4005da44b0dcbeaa35951ef994da82e156258f", "html_url": "https://github.com/rust-lang/rust/commit/ed4005da44b0dcbeaa35951ef994da82e156258f"}, {"sha": "69f6a195da5f7ed66bfde728f3feafdc621a6460", "url": "https://api.github.com/repos/rust-lang/rust/commits/69f6a195da5f7ed66bfde728f3feafdc621a6460", "html_url": "https://github.com/rust-lang/rust/commit/69f6a195da5f7ed66bfde728f3feafdc621a6460"}], "stats": {"total": 731, "additions": 436, "deletions": 295}, "files": [{"sha": "f4cbfb6967ff35bf92e5954adfcac45a0c0f8fbe", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -45,9 +45,9 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n         };\n         match const_.val {\n             ConstKind::Value(_) => {}\n-            ConstKind::Unevaluated(def, ref substs, promoted) => {\n+            ConstKind::Unevaluated(unevaluated) => {\n                 if let Err(err) =\n-                    fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), def, substs, promoted, None)\n+                    fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None)\n                 {\n                     all_constants_ok = false;\n                     match err {\n@@ -122,14 +122,14 @@ pub(crate) fn codegen_constant<'tcx>(\n     };\n     let const_val = match const_.val {\n         ConstKind::Value(const_val) => const_val,\n-        ConstKind::Unevaluated(def, ref substs, promoted) if fx.tcx.is_static(def.did) => {\n+        ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) if fx.tcx.is_static(def.did) => {\n             assert!(substs.is_empty());\n             assert!(promoted.is_none());\n \n             return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n         }\n-        ConstKind::Unevaluated(def, ref substs, promoted) => {\n-            match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), def, substs, promoted, None) {\n+        ConstKind::Unevaluated(unevaluated) => {\n+            match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n                 Ok(const_val) => const_val,\n                 Err(_) => {\n                     span_bug!(constant.span, \"erroneous constant not captured by required_consts\");"}, {"sha": "fa8a53e60b169d96c4d25288556fbf29b15844ca", "filename": "compiler/rustc_codegen_ssa/src/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -30,10 +30,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::ConstantKind::Val(val, _) => return Ok(val),\n         };\n         match ct.val {\n-            ty::ConstKind::Unevaluated(def, substs, promoted) => self\n+            ty::ConstKind::Unevaluated(ct) => self\n                 .cx\n                 .tcx()\n-                .const_eval_resolve(ty::ParamEnv::reveal_all(), def, substs, promoted, None)\n+                .const_eval_resolve(ty::ParamEnv::reveal_all(), ct, None)\n                 .map_err(|err| {\n                     self.cx.tcx().sess.span_err(constant.span, \"erroneous constant encountered\");\n                     err"}, {"sha": "1ea26b4eab44b3069ee73c8fcf0810a5016fe545", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -739,9 +739,8 @@ fn ident_name_compatibility_hack(\n \n                 let time_macros_impl =\n                     macro_name == sym::impl_macros && matches_prefix(\"time-macros-impl\", \"lib.rs\");\n-                if time_macros_impl\n-                    || (macro_name == sym::arrays && matches_prefix(\"js-sys\", \"lib.rs\"))\n-                {\n+                let js_sys = macro_name == sym::arrays && matches_prefix(\"js-sys\", \"lib.rs\");\n+                if time_macros_impl || js_sys {\n                     let snippet = source_map.span_to_snippet(orig_span);\n                     if snippet.as_deref() == Ok(\"$name\") {\n                         if time_macros_impl {\n@@ -754,8 +753,35 @@ fn ident_name_compatibility_hack(\n                                 \"the `time-macros-impl` crate will stop compiling in futures version of Rust. \\\n                                 Please update to the latest version of the `time` crate to avoid breakage\".to_string())\n                             );\n+                            return Some((*ident, *is_raw));\n+                        }\n+                        if js_sys {\n+                            if let Some(c) = path\n+                                .components()\n+                                .flat_map(|c| c.as_os_str().to_str())\n+                                .find(|c| c.starts_with(\"js-sys\"))\n+                            {\n+                                let mut version = c.trim_start_matches(\"js-sys-\").split(\".\");\n+                                if version.next() == Some(\"0\")\n+                                    && version.next() == Some(\"3\")\n+                                    && version\n+                                        .next()\n+                                        .and_then(|c| c.parse::<u32>().ok())\n+                                        .map_or(false, |v| v < 40)\n+                                {\n+                                    rustc.sess.buffer_lint_with_diagnostic(\n+                                        &PROC_MACRO_BACK_COMPAT,\n+                                        orig_span,\n+                                        ast::CRATE_NODE_ID,\n+                                        \"using an old version of `js-sys`\",\n+                                        BuiltinLintDiagnostics::ProcMacroBackCompat(\n+                                        \"older versions of the `js-sys` crate will stop compiling in future versions of Rust; \\\n+                                        please update to `js-sys` v0.3.40 or above\".to_string())\n+                                    );\n+                                    return Some((*ident, *is_raw));\n+                                }\n+                            }\n                         }\n-                        return Some((*ident, *is_raw));\n                     }\n                 }\n "}, {"sha": "7b18f4d0ff6a976d6df51691592f775aaac1389d", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -18,7 +18,6 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind, ToType};\n-use rustc_middle::mir;\n use rustc_middle::mir::interpret::EvalToConstValueResult;\n use rustc_middle::traits::select;\n use rustc_middle::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n@@ -1499,9 +1498,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn const_eval_resolve(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        def: ty::WithOptConstParam<DefId>,\n-        substs: SubstsRef<'tcx>,\n-        promoted: Option<mir::Promoted>,\n+        ty::Unevaluated { def, substs, promoted }: ty::Unevaluated<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToConstValueResult<'tcx> {\n         let mut original_values = OriginalQueryValues::default();\n@@ -1510,7 +1507,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let (param_env, substs) = canonical.value;\n         // The return value is the evaluated value which doesn't contain any reference to inference\n         // variables, thus we don't need to substitute back the original values.\n-        self.tcx.const_eval_resolve(param_env, def, substs, promoted, span)\n+        self.tcx.const_eval_resolve(param_env, ty::Unevaluated { def, substs, promoted }, span)\n     }\n \n     /// If `typ` is a type variable of some kind, resolve it one level"}, {"sha": "776a777b1bdb5844c982a84be2dd39e94dbc5a0a", "filename": "compiler/rustc_middle/src/mir/abstract_const.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -18,3 +18,20 @@ pub enum Node<'tcx> {\n     UnaryOp(mir::UnOp, NodeId),\n     FunctionCall(NodeId, &'tcx [NodeId]),\n }\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, TyEncodable, TyDecodable)]\n+pub enum NotConstEvaluatable {\n+    Error(rustc_errors::ErrorReported),\n+    MentionsInfer,\n+    MentionsParam,\n+}\n+\n+impl From<rustc_errors::ErrorReported> for NotConstEvaluatable {\n+    fn from(e: rustc_errors::ErrorReported) -> NotConstEvaluatable {\n+        NotConstEvaluatable::Error(e)\n+    }\n+}\n+\n+TrivialTypeFoldableAndLiftImpls! {\n+    NotConstEvaluatable,\n+}"}, {"sha": "fa7c0670e8ce6a5c90c2ff9156cf3b4c513195a1", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -1,7 +1,7 @@\n use super::{ErrorHandled, EvalToConstValueResult, GlobalId};\n \n use crate::mir;\n-use crate::ty::subst::{InternalSubsts, SubstsRef};\n+use crate::ty::subst::InternalSubsts;\n use crate::ty::{self, TyCtxt};\n use rustc_hir::def_id::DefId;\n use rustc_span::Span;\n@@ -35,14 +35,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn const_eval_resolve(\n         self,\n         param_env: ty::ParamEnv<'tcx>,\n-        def: ty::WithOptConstParam<DefId>,\n-        substs: SubstsRef<'tcx>,\n-        promoted: Option<mir::Promoted>,\n+        ct: ty::Unevaluated<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToConstValueResult<'tcx> {\n-        match ty::Instance::resolve_opt_const_arg(self, param_env, def, substs) {\n+        match ty::Instance::resolve_opt_const_arg(self, param_env, ct.def, ct.substs) {\n             Ok(Some(instance)) => {\n-                let cid = GlobalId { instance, promoted };\n+                let cid = GlobalId { instance, promoted: ct.promoted };\n                 self.const_eval_global_id(param_env, cid, span)\n             }\n             Ok(None) => Err(ErrorHandled::TooGeneric),"}, {"sha": "90b82020551c27257c89c770593ff2e4edbc89cb", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -9,7 +9,7 @@ pub mod specialization_graph;\n mod structural_impls;\n \n use crate::infer::canonical::Canonical;\n-use crate::mir::interpret::ErrorHandled;\n+use crate::mir::abstract_const::NotConstEvaluatable;\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, AdtKind, Ty, TyCtxt};\n \n@@ -398,7 +398,7 @@ pub enum SelectionError<'tcx> {\n         ty::error::TypeError<'tcx>,\n     ),\n     TraitNotObjectSafe(DefId),\n-    ConstEvalFailure(ErrorHandled),\n+    NotConstEvaluatable(NotConstEvaluatable),\n     Overflow,\n }\n "}, {"sha": "779d6c90f973f022842b9bdd1b756525f9497676", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -98,18 +98,18 @@ impl<'tcx> Const<'tcx> {\n                 let name = tcx.hir().name(hir_id);\n                 ty::ConstKind::Param(ty::ParamConst::new(index, name))\n             }\n-            _ => ty::ConstKind::Unevaluated(\n-                def.to_global(),\n-                InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n-                None,\n-            ),\n+            _ => ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                def: def.to_global(),\n+                substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n+                promoted: None,\n+            }),\n         };\n \n         tcx.mk_const(ty::Const { val, ty })\n     }\n \n-    #[inline]\n     /// Interns the given value as a constant.\n+    #[inline]\n     pub fn from_value(tcx: TyCtxt<'tcx>, val: ConstValue<'tcx>, ty: Ty<'tcx>) -> &'tcx Self {\n         tcx.mk_const(Self { val: ConstKind::Value(val), ty })\n     }"}, {"sha": "875d8d00a93d32b6686f786be497cf6b6040540b", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -12,10 +12,18 @@ use rustc_macros::HashStable;\n use rustc_target::abi::Size;\n \n use super::ScalarInt;\n+/// An unevaluated, potentially generic, constant.\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n+#[derive(Hash, HashStable)]\n+pub struct Unevaluated<'tcx> {\n+    pub def: ty::WithOptConstParam<DefId>,\n+    pub substs: SubstsRef<'tcx>,\n+    pub promoted: Option<Promoted>,\n+}\n \n /// Represents a constant in Rust.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Hash)]\n-#[derive(HashStable)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n+#[derive(Hash, HashStable)]\n pub enum ConstKind<'tcx> {\n     /// A const generic parameter.\n     Param(ty::ParamConst),\n@@ -31,7 +39,7 @@ pub enum ConstKind<'tcx> {\n \n     /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other\n     /// variants when the code is monomorphic enough for that.\n-    Unevaluated(ty::WithOptConstParam<DefId>, SubstsRef<'tcx>, Option<Promoted>),\n+    Unevaluated(Unevaluated<'tcx>),\n \n     /// Used to hold computed value.\n     Value(ConstValue<'tcx>),\n@@ -102,7 +110,7 @@ impl<'tcx> ConstKind<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         param_env: ParamEnv<'tcx>,\n     ) -> Option<Result<ConstValue<'tcx>, ErrorReported>> {\n-        if let ConstKind::Unevaluated(def, substs, promoted) = self {\n+        if let ConstKind::Unevaluated(Unevaluated { def, substs, promoted }) = self {\n             use crate::mir::interpret::ErrorHandled;\n \n             // HACK(eddyb) this erases lifetimes even though `const_eval_resolve`\n@@ -132,7 +140,8 @@ impl<'tcx> ConstKind<'tcx> {\n             let (param_env, substs) = param_env_and_substs.into_parts();\n             // try to resolve e.g. associated constants to their definition on an impl, and then\n             // evaluate the const.\n-            match tcx.const_eval_resolve(param_env, def, substs, promoted, None) {\n+            match tcx.const_eval_resolve(param_env, ty::Unevaluated { def, substs, promoted }, None)\n+            {\n                 // NOTE(eddyb) `val` contains no lifetimes/types/consts,\n                 // and we use the original type, so nothing from `substs`\n                 // (which may be identity substs, see above),"}, {"sha": "d6dc81c5b785d1093e4e3b8f3ea685e6e7b24c4c", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -270,10 +270,7 @@ impl FlagComputation {\n     fn add_const(&mut self, c: &ty::Const<'_>) {\n         self.add_ty(c.ty);\n         match c.val {\n-            ty::ConstKind::Unevaluated(_, substs, _) => {\n-                self.add_substs(substs);\n-                self.add_flags(TypeFlags::HAS_CT_PROJECTION);\n-            }\n+            ty::ConstKind::Unevaluated(unevaluated) => self.add_unevaluated_const(unevaluated),\n             ty::ConstKind::Infer(infer) => {\n                 self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n                 match infer {\n@@ -297,6 +294,11 @@ impl FlagComputation {\n         }\n     }\n \n+    fn add_unevaluated_const(&mut self, ct: ty::Unevaluated<'tcx>) {\n+        self.add_substs(ct.substs);\n+        self.add_flags(TypeFlags::HAS_CT_PROJECTION);\n+    }\n+\n     fn add_existential_projection(&mut self, projection: &ty::ExistentialProjection<'_>) {\n         self.add_substs(projection.substs);\n         self.add_ty(projection.ty);"}, {"sha": "e6b4739d0a2f55fdb37684696f882ed64ac82a15", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -55,7 +55,7 @@ pub use rustc_type_ir::*;\n \n pub use self::binding::BindingMode;\n pub use self::binding::BindingMode::*;\n-pub use self::consts::{Const, ConstInt, ConstKind, InferConst, ScalarInt, ValTree};\n+pub use self::consts::{Const, ConstInt, ConstKind, InferConst, ScalarInt, Unevaluated, ValTree};\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n     CtxtInterners, DelaySpanBugEmitted, FreeRegionInfo, GeneratorInteriorTypeCause, GlobalCtxt,"}, {"sha": "3b72cc011d6ea2253f6b7e138bd999dd3342018e", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -915,7 +915,7 @@ pub trait PrettyPrinter<'tcx>:\n         }\n \n         match ct.val {\n-            ty::ConstKind::Unevaluated(def, substs, promoted) => {\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n                 if let Some(promoted) = promoted {\n                     p!(print_value_path(def.did, substs));\n                     p!(write(\"::{:?}\", promoted));"}, {"sha": "c936c30f456dd93736ea6c2c8010b1cc1106fa4d", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -531,24 +531,26 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n             check_const_value_eq(relation, a_val, b_val, a, b)?\n         }\n \n-        (\n-            ty::ConstKind::Unevaluated(a_def, a_substs, None),\n-            ty::ConstKind::Unevaluated(b_def, b_substs, None),\n-        ) if tcx.features().const_evaluatable_checked && !relation.visit_ct_substs() => {\n-            tcx.try_unify_abstract_consts(((a_def, a_substs), (b_def, b_substs)))\n+        (ty::ConstKind::Unevaluated(au), ty::ConstKind::Unevaluated(bu))\n+            if tcx.features().const_evaluatable_checked && !relation.visit_ct_substs() =>\n+        {\n+            tcx.try_unify_abstract_consts(((au.def, au.substs), (bu.def, bu.substs)))\n         }\n \n         // While this is slightly incorrect, it shouldn't matter for `min_const_generics`\n         // and is the better alternative to waiting until `const_evaluatable_checked` can\n         // be stabilized.\n-        (\n-            ty::ConstKind::Unevaluated(a_def, a_substs, a_promoted),\n-            ty::ConstKind::Unevaluated(b_def, b_substs, b_promoted),\n-        ) if a_def == b_def && a_promoted == b_promoted => {\n+        (ty::ConstKind::Unevaluated(au), ty::ConstKind::Unevaluated(bu))\n+            if au.def == bu.def && au.promoted == bu.promoted =>\n+        {\n             let substs =\n-                relation.relate_with_variance(ty::Variance::Invariant, a_substs, b_substs)?;\n+                relation.relate_with_variance(ty::Variance::Invariant, au.substs, bu.substs)?;\n             return Ok(tcx.mk_const(ty::Const {\n-                val: ty::ConstKind::Unevaluated(a_def, substs, a_promoted),\n+                val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                    def: au.def,\n+                    substs,\n+                    promoted: au.promoted,\n+                }),\n                 ty: a.ty,\n             }));\n         }"}, {"sha": "2da23b331e0cb19a41e5e64d0664988ba1b344d1", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -1031,8 +1031,12 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n         match self {\n             ty::ConstKind::Infer(ic) => ty::ConstKind::Infer(ic.fold_with(folder)),\n             ty::ConstKind::Param(p) => ty::ConstKind::Param(p.fold_with(folder)),\n-            ty::ConstKind::Unevaluated(did, substs, promoted) => {\n-                ty::ConstKind::Unevaluated(did, substs.fold_with(folder), promoted)\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n+                ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                    def,\n+                    substs: substs.fold_with(folder),\n+                    promoted,\n+                })\n             }\n             ty::ConstKind::Value(_)\n             | ty::ConstKind::Bound(..)\n@@ -1045,7 +1049,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n         match *self {\n             ty::ConstKind::Infer(ic) => ic.visit_with(visitor),\n             ty::ConstKind::Param(p) => p.visit_with(visitor),\n-            ty::ConstKind::Unevaluated(_, substs, _) => substs.visit_with(visitor),\n+            ty::ConstKind::Unevaluated(ct) => ct.substs.visit_with(visitor),\n             ty::ConstKind::Value(_)\n             | ty::ConstKind::Bound(..)\n             | ty::ConstKind::Placeholder(_)"}, {"sha": "c2fe5f1ef3f625975eed1ae231d5a5dfa11c8cfe", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -195,8 +195,8 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                 | ty::ConstKind::Value(_)\n                 | ty::ConstKind::Error(_) => {}\n \n-                ty::ConstKind::Unevaluated(_, substs, _) => {\n-                    stack.extend(substs.iter().rev());\n+                ty::ConstKind::Unevaluated(ct) => {\n+                    stack.extend(ct.substs.iter().rev());\n                 }\n             }\n         }"}, {"sha": "aaa2bf4ff1b50740f0a048c9d19ee5456cec64b7", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -316,14 +316,12 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n             let tcx = self.tcx();\n             let maybe_uneval = match constant.literal {\n                 ConstantKind::Ty(ct) => match ct.val {\n-                    ty::ConstKind::Unevaluated(def, substs, promoted) => {\n-                        Some((def, substs, promoted))\n-                    }\n+                    ty::ConstKind::Unevaluated(uv) => Some(uv),\n                     _ => None,\n                 },\n                 _ => None,\n             };\n-            if let Some((def, substs, promoted)) = maybe_uneval {\n+            if let Some(ty::Unevaluated { def, substs, promoted }) = maybe_uneval {\n                 if let Some(promoted) = promoted {\n                     let check_err = |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,\n                                      promoted: &Body<'tcx>,"}, {"sha": "c70b57e631a80c6693d17f2c51b3bfea44adecfb", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -560,7 +560,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match val.val {\n             ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),\n             ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorReported)),\n-            ty::ConstKind::Unevaluated(def, substs, promoted) => {\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n                 let instance = self.resolve(def, substs)?;\n                 Ok(self.eval_to_allocation(GlobalId { instance, promoted })?.into())\n             }"}, {"sha": "e48640e1bb965720eb7848c422220f2a890cc350", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -646,8 +646,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n \n         match substituted_constant.val {\n             ty::ConstKind::Value(val) => collect_const_value(self.tcx, val, self.output),\n-            ty::ConstKind::Unevaluated(def, substs, promoted) => {\n-                match self.tcx.const_eval_resolve(param_env, def, substs, promoted, None) {\n+            ty::ConstKind::Unevaluated(unevaluated) => {\n+                match self.tcx.const_eval_resolve(param_env, unevaluated, None) {\n                     Ok(val) => collect_const_value(self.tcx, val, self.output),\n                     Err(ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted) => {}\n                     Err(ErrorHandled::TooGeneric) => span_bug!("}, {"sha": "30e758c7fdf05f85502434243480faedac84a77a", "filename": "compiler/rustc_mir/src/monomorphize/polymorphize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -299,7 +299,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n                 self.unused_parameters.clear(param.index);\n                 ControlFlow::CONTINUE\n             }\n-            ty::ConstKind::Unevaluated(def, _, Some(p))\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted: Some(p)})\n                 // Avoid considering `T` unused when constants are of the form:\n                 //   `<Self as Foo<T>>::foo::promoted[p]`\n                 if self.def_id == def.did && !self.tcx.generics_of(def.did).has_self =>\n@@ -310,10 +310,10 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n                 self.visit_body(&promoted[p]);\n                 ControlFlow::CONTINUE\n             }\n-            ty::ConstKind::Unevaluated(def, unevaluated_substs, None)\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted: None })\n                 if self.tcx.def_kind(def.did) == DefKind::AnonConst =>\n             {\n-                self.visit_child_body(def.did, unevaluated_substs);\n+                self.visit_child_body(def.did, substs);\n                 ControlFlow::CONTINUE\n             }\n             _ => c.super_visit_with(self),"}, {"sha": "36644ab3c5918e4dda413a17055ef9e884155711", "filename": "compiler/rustc_mir/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -247,7 +247,7 @@ where\n \n     // Check the qualifs of the value of `const` items.\n     if let Some(ct) = constant.literal.const_for_ty() {\n-        if let ty::ConstKind::Unevaluated(def, _, promoted) = ct.val {\n+        if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) = ct.val {\n             assert!(promoted.is_none());\n             // Don't peek inside trait associated constants.\n             if cx.tcx.trait_of_item(def.did).is_none() {"}, {"sha": "7706316c96516a3e3057837b58a32f31eb6cec9c", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -491,7 +491,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     let lint_only = match c.literal {\n                         ConstantKind::Ty(ct) => match ct.val {\n                             // Promoteds must lint and not error as the user didn't ask for them\n-                            ConstKind::Unevaluated(_, _, Some(_)) => true,\n+                            ConstKind::Unevaluated(ty::Unevaluated {\n+                                def: _,\n+                                substs: _,\n+                                promoted: Some(_),\n+                            }) => true,\n                             // Out of backwards compatibility we cannot report hard errors in unused\n                             // generic functions using associated constants of the generic parameters.\n                             _ => c.literal.needs_subst(),"}, {"sha": "b6f80763bc8c4c2b94b445b999a0d1bb85c2f3bb", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -630,7 +630,7 @@ impl Inliner<'tcx> {\n                 caller_body.required_consts.extend(\n                     callee_body.required_consts.iter().copied().filter(|&ct| {\n                         match ct.literal.const_for_ty() {\n-                            Some(ct) => matches!(ct.val, ConstKind::Unevaluated(_, _, _)),\n+                            Some(ct) => matches!(ct.val, ConstKind::Unevaluated(_)),\n                             None => true,\n                         }\n                     }),"}, {"sha": "c5a03f3a045b2fb1542e483cd3f9243e433b4574", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -1001,17 +1001,17 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     literal: tcx\n                         .mk_const(ty::Const {\n                             ty,\n-                            val: ty::ConstKind::Unevaluated(\n+                            val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                                 def,\n-                                InternalSubsts::for_item(tcx, def.did, |param, _| {\n+                                substs: InternalSubsts::for_item(tcx, def.did, |param, _| {\n                                     if let ty::GenericParamDefKind::Lifetime = param.kind {\n                                         tcx.lifetimes.re_erased.into()\n                                     } else {\n                                         tcx.mk_param_from_def(param)\n                                     }\n                                 }),\n-                                Some(promoted_id),\n-                            ),\n+                                promoted: Some(promoted_id),\n+                            }),\n                         })\n                         .into(),\n                 }))"}, {"sha": "8b64ad65ab35ca5ac000eb3c983ce0ea71d14adf", "filename": "compiler/rustc_mir/src/transform/required_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frequired_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frequired_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frequired_consts.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -15,7 +15,7 @@ impl<'a, 'tcx> RequiredConstsVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for RequiredConstsVisitor<'a, 'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, _: Location) {\n         if let Some(ct) = constant.literal.const_for_ty() {\n-            if let ConstKind::Unevaluated(_, _, _) = ct.val {\n+            if let ConstKind::Unevaluated(_) = ct.val {\n                 self.required_consts.push(*constant);\n             }\n         }"}, {"sha": "3b074f9132fd95dfab58a7076b2abced7c7bcd74", "filename": "compiler/rustc_mir/src/transform/simplify.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -422,7 +422,9 @@ impl UsedLocals<'tcx> {\n             // A use, not a definition.\n             self.visit_place(place, PlaceContext::MutatingUse(MutatingUseContext::Store), location);\n         } else {\n-            // A definition. Although, it still might use other locals for indexing.\n+            // A definition. The base local itself is not visited, so this occurrence is not counted\n+            // toward its use count. There might be other locals still, used in an indexing\n+            // projection.\n             self.super_projection(\n                 place.as_ref(),\n                 PlaceContext::MutatingUse(MutatingUseContext::Projection),"}, {"sha": "9abee283160a47bd4fecaf87d550aad708bb0db3", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -707,11 +707,11 @@ impl<'thir, 'tcx> Cx<'thir, 'tcx> {\n                                 // and not the beginning of discriminants (which is always `0`)\n                                 let substs = InternalSubsts::identity_for_item(self.tcx(), did);\n                                 let lhs = mk_const(self.tcx().mk_const(ty::Const {\n-                                    val: ty::ConstKind::Unevaluated(\n-                                        ty::WithOptConstParam::unknown(did),\n+                                    val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                                        def: ty::WithOptConstParam::unknown(did),\n                                         substs,\n-                                        None,\n-                                    ),\n+                                        promoted: None,\n+                                    }),\n                                     ty: var_ty,\n                                 }));\n                                 let bin =\n@@ -905,11 +905,11 @@ impl<'thir, 'tcx> Cx<'thir, 'tcx> {\n                 debug!(\"convert_path_expr: (const) user_ty={:?}\", user_ty);\n                 ExprKind::Literal {\n                     literal: self.tcx.mk_const(ty::Const {\n-                        val: ty::ConstKind::Unevaluated(\n-                            ty::WithOptConstParam::unknown(def_id),\n+                        val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                            def: ty::WithOptConstParam::unknown(def_id),\n                             substs,\n-                            None,\n-                        ),\n+                            promoted: None,\n+                        }),\n                         ty: self.typeck_results().node_type(expr.hir_id),\n                     }),\n                     user_ty,"}, {"sha": "0d71fc57e394b00c0188c6ac582ee9a65b6e9eb6", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -803,12 +803,10 @@ impl AutoTraitFinder<'tcx> {\n                 }\n                 ty::PredicateKind::ConstEquate(c1, c2) => {\n                     let evaluate = |c: &'tcx ty::Const<'tcx>| {\n-                        if let ty::ConstKind::Unevaluated(def, substs, promoted) = c.val {\n+                        if let ty::ConstKind::Unevaluated(unevaluated) = c.val {\n                             match select.infcx().const_eval_resolve(\n                                 obligation.param_env,\n-                                def,\n-                                substs,\n-                                promoted,\n+                                unevaluated,\n                                 Some(obligation.cause.span),\n                             ) {\n                                 Ok(val) => Ok(ty::Const::from_value(select.tcx(), val, c.ty)),"}, {"sha": "ac987a9f7b3848c2b37ca92ae60c7ade594648d9", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 46, "deletions": 68, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::InferCtxt;\n-use rustc_middle::mir::abstract_const::{Node, NodeId};\n+use rustc_middle::mir::abstract_const::{Node, NodeId, NotConstEvaluatable};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::mir::{self, Rvalue, StatementKind, TerminatorKind};\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n@@ -32,7 +32,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     substs: SubstsRef<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     span: Span,\n-) -> Result<(), ErrorHandled> {\n+) -> Result<(), NotConstEvaluatable> {\n     debug!(\"is_const_evaluatable({:?}, {:?})\", def, substs);\n     if infcx.tcx.features().const_evaluatable_checked {\n         let tcx = infcx.tcx;\n@@ -103,29 +103,10 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n \n                 match failure_kind {\n                     FailureKind::MentionsInfer => {\n-                        return Err(ErrorHandled::TooGeneric);\n+                        return Err(NotConstEvaluatable::MentionsInfer);\n                     }\n                     FailureKind::MentionsParam => {\n-                        // FIXME(const_evaluatable_checked): Better error message.\n-                        let mut err =\n-                            infcx.tcx.sess.struct_span_err(span, \"unconstrained generic constant\");\n-                        let const_span = tcx.def_span(def.did);\n-                        // FIXME(const_evaluatable_checked): Update this suggestion once\n-                        // explicit const evaluatable bounds are implemented.\n-                        if let Ok(snippet) = infcx.tcx.sess.source_map().span_to_snippet(const_span)\n-                        {\n-                            err.span_help(\n-                                tcx.def_span(def.did),\n-                                &format!(\"try adding a `where` bound using this expression: `where [u8; {}]: Sized`\", snippet),\n-                            );\n-                        } else {\n-                            err.span_help(\n-                                const_span,\n-                                \"consider adding a `where` bound for this expression\",\n-                            );\n-                        }\n-                        err.emit();\n-                        return Err(ErrorHandled::Reported(ErrorReported));\n+                        return Err(NotConstEvaluatable::MentionsParam);\n                     }\n                     FailureKind::Concrete => {\n                         // Dealt with below by the same code which handles this\n@@ -163,7 +144,11 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     // and hopefully soon change this to an error.\n     //\n     // See #74595 for more details about this.\n-    let concrete = infcx.const_eval_resolve(param_env, def, substs, None, Some(span));\n+    let concrete = infcx.const_eval_resolve(\n+        param_env,\n+        ty::Unevaluated { def, substs, promoted: None },\n+        Some(span),\n+    );\n \n     if concrete.is_ok() && substs.has_param_types_or_consts() {\n         match infcx.tcx.def_kind(def.did) {\n@@ -180,34 +165,16 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n \n     debug!(?concrete, \"is_const_evaluatable\");\n     match concrete {\n-        Err(ErrorHandled::TooGeneric) if !substs.has_infer_types_or_consts() => {\n-            // FIXME(const_evaluatable_checked): We really should move\n-            // emitting this error message to fulfill instead. For\n-            // now this is easier.\n-            //\n-            // This is not a problem without `const_evaluatable_checked` as\n-            // all `ConstEvaluatable` predicates have to be fulfilled for compilation\n-            // to succeed.\n-            //\n-            // @lcnr: We already emit an error for things like\n-            // `fn test<const N: usize>() -> [0 - N]` eagerly here,\n-            // so until we fix this I don't really care.\n-\n-            let mut err = infcx\n-                .tcx\n-                .sess\n-                .struct_span_err(span, \"constant expression depends on a generic parameter\");\n-            // FIXME(const_generics): we should suggest to the user how they can resolve this\n-            // issue. However, this is currently not actually possible\n-            // (see https://github.com/rust-lang/rust/issues/66962#issuecomment-575907083).\n-            //\n-            // Note that with `feature(const_evaluatable_checked)` this case should not\n-            // be reachable.\n-            err.note(\"this may fail depending on what value the parameter takes\");\n-            err.emit();\n-            Err(ErrorHandled::Reported(ErrorReported))\n+        Err(ErrorHandled::TooGeneric) => Err(match substs.has_infer_types_or_consts() {\n+            true => NotConstEvaluatable::MentionsInfer,\n+            false => NotConstEvaluatable::MentionsParam,\n+        }),\n+        Err(ErrorHandled::Linted) => {\n+            infcx.tcx.sess.delay_span_bug(span, \"constant in type had error reported as lint\");\n+            Err(NotConstEvaluatable::Error(ErrorReported))\n         }\n-        c => c.map(drop),\n+        Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n+        Ok(_) => Ok(()),\n     }\n }\n \n@@ -239,7 +206,9 @@ impl AbstractConst<'tcx> {\n         ct: &ty::Const<'tcx>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorReported> {\n         match ct.val {\n-            ty::ConstKind::Unevaluated(def, substs, None) => AbstractConst::new(tcx, def, substs),\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted: _ }) => {\n+                AbstractConst::new(tcx, def, substs)\n+            }\n             ty::ConstKind::Error(_) => Err(ErrorReported),\n             _ => Ok(None),\n         }\n@@ -532,22 +501,25 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             if let Some(next) = self.build_terminator(block.terminator())? {\n                 block = &self.body.basic_blocks()[next];\n             } else {\n-                assert_eq!(self.locals[mir::RETURN_PLACE], self.nodes.last().unwrap());\n+                break;\n+            }\n+        }\n+\n+        assert_eq!(self.locals[mir::RETURN_PLACE], self.nodes.last().unwrap());\n+        for n in self.nodes.iter() {\n+            if let Node::Leaf(ty::Const { val: ty::ConstKind::Unevaluated(ct), ty: _ }) = n.node {\n                 // `AbstractConst`s should not contain any promoteds as they require references which\n                 // are not allowed.\n-                assert!(!self.nodes.iter().any(|n| matches!(\n-                    n.node,\n-                    Node::Leaf(ty::Const { val: ty::ConstKind::Unevaluated(_, _, Some(_)), ty: _ })\n-                )));\n-\n-                self.nodes[self.locals[mir::RETURN_PLACE]].used = true;\n-                if let Some(&unused) = self.nodes.iter().find(|n| !n.used) {\n-                    self.error(Some(unused.span), \"dead code\")?;\n-                }\n-\n-                return Ok(self.tcx.arena.alloc_from_iter(self.nodes.into_iter().map(|n| n.node)));\n+                assert_eq!(ct.promoted, None);\n             }\n         }\n+\n+        self.nodes[self.locals[mir::RETURN_PLACE]].used = true;\n+        if let Some(&unused) = self.nodes.iter().find(|n| !n.used) {\n+            self.error(Some(unused.span), \"dead code\")?;\n+        }\n+\n+        Ok(self.tcx.arena.alloc_from_iter(self.nodes.into_iter().map(|n| n.node)))\n     }\n }\n \n@@ -673,10 +645,16 @@ pub(super) fn try_unify<'tcx>(\n                 // we do not want to use `assert_eq!(a(), b())` to infer that `N` and `M` have to be `1`. This\n                 // means that we only allow inference variables if they are equal.\n                 (ty::ConstKind::Infer(a_val), ty::ConstKind::Infer(b_val)) => a_val == b_val,\n-                (\n-                    ty::ConstKind::Unevaluated(a_def, a_substs, None),\n-                    ty::ConstKind::Unevaluated(b_def, b_substs, None),\n-                ) => a_def == b_def && a_substs == b_substs,\n+                // We expand generic anonymous constants at the start of this function, so this\n+                // branch should only be taking when dealing with associated constants, at\n+                // which point directly comparing them seems like the desired behavior.\n+                //\n+                // FIXME(const_evaluatable_checked): This isn't actually the case.\n+                // We also take this branch for concrete anonymous constants and\n+                // expand generic anonymous constants with concrete substs.\n+                (ty::ConstKind::Unevaluated(a_uv), ty::ConstKind::Unevaluated(b_uv)) => {\n+                    a_uv == b_uv\n+                }\n                 // FIXME(const_evaluatable_checked): We may want to either actually try\n                 // to evaluate `a_ct` and `b_ct` if they are are fully concrete or something like\n                 // this, for now we just return false here."}, {"sha": "060e4e36dfefc5971b796d9233dc669d540de85d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 51, "deletions": 16, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -2,10 +2,10 @@ pub mod on_unimplemented;\n pub mod suggestions;\n \n use super::{\n-    ConstEvalFailure, EvaluationResult, FulfillmentError, FulfillmentErrorCode,\n-    MismatchedProjectionTypes, Obligation, ObligationCause, ObligationCauseCode,\n-    OnUnimplementedDirective, OnUnimplementedNote, OutputTypeParameterMismatch, Overflow,\n-    PredicateObligation, SelectionContext, SelectionError, TraitNotObjectSafe,\n+    EvaluationResult, FulfillmentError, FulfillmentErrorCode, MismatchedProjectionTypes,\n+    Obligation, ObligationCause, ObligationCauseCode, OnUnimplementedDirective,\n+    OnUnimplementedNote, OutputTypeParameterMismatch, Overflow, PredicateObligation,\n+    SelectionContext, SelectionError, TraitNotObjectSafe,\n };\n \n use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCode};\n@@ -17,7 +17,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::Node;\n-use rustc_middle::mir::interpret::ErrorHandled;\n+use rustc_middle::mir::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::{\n@@ -738,24 +738,59 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 let violations = self.tcx.object_safety_violations(did);\n                 report_object_safety_error(self.tcx, span, did, violations)\n             }\n-            ConstEvalFailure(ErrorHandled::TooGeneric) => {\n-                bug!(\"too generic should have been handled in `is_const_evaluatable`\");\n+\n+            SelectionError::NotConstEvaluatable(NotConstEvaluatable::MentionsInfer) => {\n+                bug!(\n+                    \"MentionsInfer should have been handled in `traits/fulfill.rs` or `traits/select/mod.rs`\"\n+                )\n+            }\n+            SelectionError::NotConstEvaluatable(NotConstEvaluatable::MentionsParam) => {\n+                if !self.tcx.features().const_evaluatable_checked {\n+                    let mut err = self.tcx.sess.struct_span_err(\n+                        span,\n+                        \"constant expression depends on a generic parameter\",\n+                    );\n+                    // FIXME(const_generics): we should suggest to the user how they can resolve this\n+                    // issue. However, this is currently not actually possible\n+                    // (see https://github.com/rust-lang/rust/issues/66962#issuecomment-575907083).\n+                    //\n+                    // Note that with `feature(const_evaluatable_checked)` this case should not\n+                    // be reachable.\n+                    err.note(\"this may fail depending on what value the parameter takes\");\n+                    err.emit();\n+                    return;\n+                }\n+\n+                match obligation.predicate.kind().skip_binder() {\n+                    ty::PredicateKind::ConstEvaluatable(def, _) => {\n+                        let mut err =\n+                            self.tcx.sess.struct_span_err(span, \"unconstrained generic constant\");\n+                        let const_span = self.tcx.def_span(def.did);\n+                        match self.tcx.sess.source_map().span_to_snippet(const_span) {\n+                            Ok(snippet) => err.help(&format!(\n+                                \"try adding a `where` bound using this expression: `where [(); {}]:`\",\n+                                snippet\n+                            )),\n+                            _ => err.help(\"consider adding a `where` bound using this expression\"),\n+                        };\n+                        err\n+                    }\n+                    _ => {\n+                        span_bug!(\n+                            span,\n+                            \"unexpected non-ConstEvaluatable predicate, this should not be reachable\"\n+                        )\n+                    }\n+                }\n             }\n+\n             // Already reported in the query.\n-            ConstEvalFailure(ErrorHandled::Reported(ErrorReported)) => {\n+            SelectionError::NotConstEvaluatable(NotConstEvaluatable::Error(ErrorReported)) => {\n                 // FIXME(eddyb) remove this once `ErrorReported` becomes a proof token.\n                 self.tcx.sess.delay_span_bug(span, \"`ErrorReported` without an error\");\n                 return;\n             }\n \n-            // Already reported in the query, but only as a lint.\n-            // This shouldn't actually happen for constants used in types, modulo\n-            // bugs. The `delay_span_bug` here ensures it won't be ignored.\n-            ConstEvalFailure(ErrorHandled::Linted) => {\n-                self.tcx.sess.delay_span_bug(span, \"constant in type had error reported as lint\");\n-                return;\n-            }\n-\n             Overflow => {\n                 bug!(\"overflow should be handled before the `report_selection_error` path\");\n             }"}, {"sha": "79f65669479c880ec27d0d7895415db6c54c022b", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -3,7 +3,8 @@ use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{Error, ForestObligation, Outcome};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n use rustc_errors::ErrorReported;\n-use rustc_infer::traits::{TraitEngine, TraitEngineExt as _, TraitObligation};\n+use rustc_infer::traits::{SelectionError, TraitEngine, TraitEngineExt as _, TraitObligation};\n+use rustc_middle::mir::abstract_const::NotConstEvaluatable;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::subst::SubstsRef;\n@@ -18,7 +19,7 @@ use super::wf;\n use super::CodeAmbiguity;\n use super::CodeProjectionError;\n use super::CodeSelectionError;\n-use super::{ConstEvalFailure, Unimplemented};\n+use super::Unimplemented;\n use super::{FulfillmentError, FulfillmentErrorCode};\n use super::{ObligationCause, PredicateObligation};\n \n@@ -498,14 +499,19 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                         obligation.cause.span,\n                     ) {\n                         Ok(()) => ProcessResult::Changed(vec![]),\n-                        Err(ErrorHandled::TooGeneric) => {\n+                        Err(NotConstEvaluatable::MentionsInfer) => {\n                             pending_obligation.stalled_on.clear();\n                             pending_obligation.stalled_on.extend(\n                                 substs.iter().filter_map(TyOrConstInferVar::maybe_from_generic_arg),\n                             );\n                             ProcessResult::Unchanged\n                         }\n-                        Err(e) => ProcessResult::Error(CodeSelectionError(ConstEvalFailure(e))),\n+                        Err(\n+                            e @ NotConstEvaluatable::MentionsParam\n+                            | e @ NotConstEvaluatable::Error(_),\n+                        ) => ProcessResult::Error(CodeSelectionError(\n+                            SelectionError::NotConstEvaluatable(e),\n+                        )),\n                     }\n                 }\n \n@@ -516,15 +522,13 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                         // if the constants depend on generic parameters.\n                         //\n                         // Let's just see where this breaks :shrug:\n-                        if let (\n-                            ty::ConstKind::Unevaluated(a_def, a_substs, None),\n-                            ty::ConstKind::Unevaluated(b_def, b_substs, None),\n-                        ) = (c1.val, c2.val)\n+                        if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n+                            (c1.val, c2.val)\n                         {\n                             if self\n                                 .selcx\n                                 .tcx()\n-                                .try_unify_abstract_consts(((a_def, a_substs), (b_def, b_substs)))\n+                                .try_unify_abstract_consts(((a.def, a.substs), (b.def, b.substs)))\n                             {\n                                 return ProcessResult::Changed(vec![]);\n                             }\n@@ -534,18 +538,17 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                     let stalled_on = &mut pending_obligation.stalled_on;\n \n                     let mut evaluate = |c: &'tcx Const<'tcx>| {\n-                        if let ty::ConstKind::Unevaluated(def, substs, promoted) = c.val {\n+                        if let ty::ConstKind::Unevaluated(unevaluated) = c.val {\n                             match self.selcx.infcx().const_eval_resolve(\n                                 obligation.param_env,\n-                                def,\n-                                substs,\n-                                promoted,\n+                                unevaluated,\n                                 Some(obligation.cause.span),\n                             ) {\n                                 Ok(val) => Ok(Const::from_value(self.selcx.tcx(), val, c.ty)),\n                                 Err(ErrorHandled::TooGeneric) => {\n                                     stalled_on.extend(\n-                                        substs\n+                                        unevaluated\n+                                            .substs\n                                             .iter()\n                                             .filter_map(TyOrConstInferVar::maybe_from_generic_arg),\n                                     );\n@@ -576,11 +579,11 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                             }\n                         }\n                         (Err(ErrorHandled::Reported(ErrorReported)), _)\n-                        | (_, Err(ErrorHandled::Reported(ErrorReported))) => {\n-                            ProcessResult::Error(CodeSelectionError(ConstEvalFailure(\n-                                ErrorHandled::Reported(ErrorReported),\n-                            )))\n-                        }\n+                        | (_, Err(ErrorHandled::Reported(ErrorReported))) => ProcessResult::Error(\n+                            CodeSelectionError(SelectionError::NotConstEvaluatable(\n+                                NotConstEvaluatable::Error(ErrorReported),\n+                            )),\n+                        ),\n                         (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => {\n                             span_bug!(\n                                 obligation.cause.span(self.selcx.tcx()),"}, {"sha": "bc0f0d6dea5da3a4d85d40414f7eb6f4b076a6ec", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -34,6 +34,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::Constness;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n+use rustc_middle::mir::abstract_const::NotConstEvaluatable;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::fast_reject;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n@@ -547,7 +548,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         obligation.cause.span,\n                     ) {\n                         Ok(()) => Ok(EvaluatedToOk),\n-                        Err(ErrorHandled::TooGeneric) => Ok(EvaluatedToAmbig),\n+                        Err(NotConstEvaluatable::MentionsInfer) => Ok(EvaluatedToAmbig),\n+                        Err(NotConstEvaluatable::MentionsParam) => Ok(EvaluatedToErr),\n                         Err(_) => Ok(EvaluatedToErr),\n                     }\n                 }\n@@ -556,13 +558,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     debug!(?c1, ?c2, \"evaluate_predicate_recursively: equating consts\");\n \n                     let evaluate = |c: &'tcx ty::Const<'tcx>| {\n-                        if let ty::ConstKind::Unevaluated(def, substs, promoted) = c.val {\n+                        if let ty::ConstKind::Unevaluated(unevaluated) = c.val {\n                             self.infcx\n                                 .const_eval_resolve(\n                                     obligation.param_env,\n-                                    def,\n-                                    substs,\n-                                    promoted,\n+                                    unevaluated,\n                                     Some(obligation.cause.span),\n                                 )\n                                 .map(|val| ty::Const::from_value(self.tcx(), val, c.ty))"}, {"sha": "aee128dec7d12b430f86103416691fda55ead933", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -430,7 +430,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n \n                 GenericArgKind::Const(constant) => {\n                     match constant.val {\n-                        ty::ConstKind::Unevaluated(def, substs, promoted) => {\n+                        ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n                             assert!(promoted.is_none());\n \n                             let obligations = self.nominal_obligations(def.did, substs);"}, {"sha": "162fccc6020365b0fa51abef9cc9f5793d2407f4", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -2212,10 +2212,11 @@ fn const_evaluatable_predicates_of<'tcx>(\n         fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n             let def_id = self.tcx.hir().local_def_id(c.hir_id);\n             let ct = ty::Const::from_anon_const(self.tcx, def_id);\n-            if let ty::ConstKind::Unevaluated(def, substs, None) = ct.val {\n+            if let ty::ConstKind::Unevaluated(uv) = ct.val {\n+                assert_eq!(uv.promoted, None);\n                 let span = self.tcx.hir().span(c.hir_id);\n                 self.preds.insert((\n-                    ty::PredicateKind::ConstEvaluatable(def, substs).to_predicate(self.tcx),\n+                    ty::PredicateKind::ConstEvaluatable(uv.def, uv.substs).to_predicate(self.tcx),\n                     span,\n                 ));\n             }"}, {"sha": "e64cbc18bf71b09ef9cca97a767750a3487148ed", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -1031,8 +1031,8 @@ mod mod_keyword {}\n /// };\n /// ```\n ///\n-/// For more information on the `move` keyword, see the [closure]'s section\n-/// of the Rust book or the [threads] section\n+/// For more information on the `move` keyword, see the [closures][closure] section\n+/// of the Rust book or the [threads] section.\n ///\n /// [closure]: ../book/ch13-01-closures.html\n /// [threads]: ../book/ch16-01-threads.html#using-move-closures-with-threads"}, {"sha": "6f283d501a4f2d71e28e679a6d004bcce82947a1", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -296,7 +296,7 @@ crate fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n \n crate fn print_const(cx: &DocContext<'_>, n: &'tcx ty::Const<'_>) -> String {\n     match n.val {\n-        ty::ConstKind::Unevaluated(def, _, promoted) => {\n+        ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) => {\n             let mut s = if let Some(def) = def.as_local() {\n                 let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def.did);\n                 print_const_expr(cx.tcx, cx.tcx.hir().body_owned_by(hir_id))"}, {"sha": "4e990dd6b705efb17e18b3cb34e42262421823aa", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -22,15 +22,15 @@\n -                                          // + ty: &i32\n -                                          // + val: Value(Scalar(alloc0))\n +                                          // + ty: &[&i32; 1]\n-+                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR), const_param_did: None }, [], Some(promoted[0]))\n++                                          // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n -                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc0)) }\n -         _4 = &(*_5);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n +                                          // + span: $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR), const_param_did: None }, [], Some(promoted[0])) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:34: 9:35"}, {"sha": "0a9a3f3c2c5f668e680e2aaa5c9b683948061132", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -24,15 +24,15 @@\n -                                          // + ty: *const i32\n -                                          // + val: Value(Scalar(alloc2))\n +                                          // + ty: &[&i32; 1]\n-+                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO), const_param_did: None }, [], Some(promoted[0]))\n++                                          // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n -                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc2)) }\n -         _4 = &(*_5);                     // scope 1 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n +                                          // + span: $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO), const_param_did: None }, [], Some(promoted[0])) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:45: 13:46"}, {"sha": "baa8988f1526332a3d56e4c5011a854d3c64db2b", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -28,10 +28,10 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // ty::Const\n                                            // + ty: &[i32; 3]\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "baa8988f1526332a3d56e4c5011a854d3c64db2b", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -28,10 +28,10 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // ty::Const\n                                            // + ty: &[i32; 3]\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "8ba11df7e0edddfa77e2cc5fe4ffeeb1dcd447cf", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -19,10 +19,10 @@\n           _3 = const FOO;                  // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main::FOO), const_param_did: None }, [], None)\n+                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main::FOO), const_param_did: None }, substs: [], promoted: None })\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main::FOO), const_param_did: None }, [], None) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main::FOO), const_param_did: None }, substs: [], promoted: None }) }\n           _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n           _1 = move _2 as usize (Misc);    // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:39\n           StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:38: 7:39"}, {"sha": "56683d7ef037c7699ee9980df97fcb7f4f4db841", "filename": "src/test/mir-opt/const_prop/ref_deref.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -14,10 +14,10 @@\n           _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref.rs:5:6: 5:10\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n -         _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n +         _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:5:5: 5:10"}, {"sha": "e1c8085b31b4f034fe689365dff1bbd7ede72b88", "filename": "src/test/mir-opt/const_prop/ref_deref.main.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -17,10 +17,10 @@\n +         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n +                                          // ty::Const\n +                                          // + ty: &i32\n-+                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n++                                          // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n-+                                          // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n++                                          // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n +         _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11"}, {"sha": "cce4831b6fe829b8fdea1cd5be3a340493312f9c", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -14,10 +14,10 @@\n           _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n                                            // ty::Const\n                                            // + ty: &(i32, i32)\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "93ba9de8202400526c838168d23c7d64c725b4dd", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -17,10 +17,10 @@\n +         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n +                                          // ty::Const\n +                                          // + ty: &(i32, i32)\n-+                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n++                                          // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-+                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n++                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n +         _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "20f93f874c539a40cdce2176403d1dad1ca33399", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -21,10 +21,10 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n                                            // ty::Const\n                                            // + ty: &[u32; 3]\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "20f93f874c539a40cdce2176403d1dad1ca33399", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -21,10 +21,10 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n                                            // ty::Const\n                                            // + ty: &[u32; 3]\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "0b5dc2b20fc98155fe3c68bd63ea38bfeac8205a", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -35,10 +35,10 @@ fn bar() -> bool {\n         _10 = const bar::promoted[1];    // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, [], Some(promoted[1]))\n+                                         // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[1]) })\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:7: 12:9\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, [], Some(promoted[1])) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[1]) }) }\n         Retag(_10);                      // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         _4 = &(*_10);                    // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         Retag(_4);                       // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n@@ -49,10 +49,10 @@ fn bar() -> bool {\n         _9 = const bar::promoted[0];     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, [], Some(promoted[0]))\n+                                         // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:11: 12:14\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, [], Some(promoted[0])) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n         Retag(_9);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         _7 = &(*_9);                     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         Retag(_7);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14"}, {"sha": "1ba56016776364fbced9aa017fa032ecd2cabd19", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -63,10 +63,10 @@\n           _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "1ba56016776364fbced9aa017fa032ecd2cabd19", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -63,10 +63,10 @@\n           _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "5ae26b73a654800986f4cec6965870f70f39e11e", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -84,10 +84,10 @@\n           _28 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "5ae26b73a654800986f4cec6965870f70f39e11e", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -84,10 +84,10 @@\n           _28 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "83650d837b01bd0e5d3a00bf15241cf7fe7c809d", "filename": "src/test/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -47,10 +47,10 @@\n           _19 = const discriminant::<T>::promoted[2]; // scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, [T], Some(promoted[2]))\n+                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[2]) })\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:70:42: 70:44\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, [T], Some(promoted[2])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[2]) }) }\n           _7 = &(*_19);                    // scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n           _6 = &(*_7);                     // scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n -         _5 = discriminant_value::<i32>(move _6) -> bb2; // scope 0 at $DIR/lower_intrinsics.rs:70:5: 70:45\n@@ -71,10 +71,10 @@\n           _18 = const discriminant::<T>::promoted[1]; // scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n                                            // ty::Const\n                                            // + ty: &()\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, [T], Some(promoted[1]))\n+                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[1]) })\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:71:42: 71:45\n-                                           // + literal: Const { ty: &(), val: Unevaluated(WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, [T], Some(promoted[1])) }\n+                                           // + literal: Const { ty: &(), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[1]) }) }\n           _11 = &(*_18);                   // scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n           _10 = &(*_11);                   // scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n -         _9 = discriminant_value::<()>(move _10) -> bb3; // scope 0 at $DIR/lower_intrinsics.rs:71:5: 71:46\n@@ -95,10 +95,10 @@\n           _17 = const discriminant::<T>::promoted[0]; // scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n                                            // ty::Const\n                                            // + ty: &E\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, [T], Some(promoted[0]))\n+                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[0]) })\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:72:42: 72:47\n-                                           // + literal: Const { ty: &E, val: Unevaluated(WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, [T], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &E, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[0]) }) }\n           _15 = &(*_17);                   // scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n           _14 = &(*_15);                   // scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n -         _13 = discriminant_value::<E>(move _14) -> bb4; // scope 0 at $DIR/lower_intrinsics.rs:72:5: 72:48"}, {"sha": "242138754c5d74359e43d669fdcbe8d6daf5a8d0", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -54,10 +54,10 @@ fn full_tested_match() -> () {\n         _11 = const full_tested_match::promoted[0]; // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n                                          // ty::Const\n                                          // + ty: &std::option::Option<i32>\n-                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ match_false_edges[317d]::full_tested_match), const_param_did: None }, [], Some(promoted[0]))\n+                                         // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ match_false_edges[317d]::full_tested_match), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:16:14: 16:15\n-                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ match_false_edges[317d]::full_tested_match), const_param_did: None }, [], Some(promoted[0])) }\n+                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ match_false_edges[317d]::full_tested_match), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n         _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27"}, {"sha": "d25f98db9f66278c5066e3f8f17e0858edd9fb18", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -149,10 +149,10 @@ fn main() -> () {\n         _27 = const main::promoted[0];   // scope 7 at $DIR/retag.rs:47:21: 47:23\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:13 ~ retag[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n+                                         // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:13 ~ retag[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:21: 47:23\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:13 ~ retag[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:13 ~ retag[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n         Retag(_27);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _23 = &(*_27);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n         Retag(_23);                      // scope 7 at $DIR/retag.rs:47:21: 47:23"}, {"sha": "fd4ffe5d6e1e1e5c9148195fed5f3554221fe142", "filename": "src/test/ui/associated-types/issue-23208.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23208.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23208.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-23208.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/issues/issue-23208.rs"}, {"sha": "2872be6d6c855637d35bcac467640560a4aba35d", "filename": "src/test/ui/associated-types/issue-31597.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fassociated-types%2Fissue-31597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fassociated-types%2Fissue-31597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-31597.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/issues/issue-31597.rs"}, {"sha": "2495c8f47e7e0439fbf51aa50a06f723fde4dfdc", "filename": "src/test/ui/binding/shadow.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fbinding%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fbinding%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fshadow.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/shadow.rs"}, {"sha": "84b2665d5bfeddb5d3f7183686267c0efae32ce6", "filename": "src/test/ui/const-generics/const_evaluatable_checked/cross_crate_predicate.stderr", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -3,48 +3,52 @@ error: unconstrained generic constant\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try adding a `where` bound using this expression: `where [u8; std::mem::size_of::<T>() - 1]: Sized`\n-  --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n+   | \n+  ::: $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          ---------------------------- required by this bound in `test1`\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n \n error: unconstrained generic constant\n   --> $DIR/cross_crate_predicate.rs:7:13\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try adding a `where` bound using this expression: `where [u8; std::mem::size_of::<T>() - 1]: Sized`\n-  --> $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n+   | \n+  ::: $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n    |\n LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                           ---------------------------- required by this bound in `test1`\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n \n error: unconstrained generic constant\n   --> $DIR/cross_crate_predicate.rs:7:13\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try adding a `where` bound using this expression: `where [u8; std::mem::size_of::<T>() - 1]: Sized`\n-  --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n+   | \n+  ::: $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          ---------------------------- required by this bound in `test1`\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n \n error: unconstrained generic constant\n   --> $DIR/cross_crate_predicate.rs:7:13\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try adding a `where` bound using this expression: `where [u8; std::mem::size_of::<T>() - 1]: Sized`\n-  --> $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n+   | \n+  ::: $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n    |\n LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                           ---------------------------- required by this bound in `test1`\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "7c11a47b2f0f9ca983373428de6f9ad032f45f60", "filename": "src/test/ui/const-generics/const_evaluatable_checked/different-fn.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -4,11 +4,7 @@ error: unconstrained generic constant\n LL |     [0; size_of::<Foo<T>>()]\n    |         ^^^^^^^^^^^^^^^^^^^\n    |\n-help: try adding a `where` bound using this expression: `where [u8; size_of::<Foo<T>>()]: Sized`\n-  --> $DIR/different-fn.rs:10:9\n-   |\n-LL |     [0; size_of::<Foo<T>>()]\n-   |         ^^^^^^^^^^^^^^^^^^^\n+   = help: try adding a `where` bound using this expression: `where [(); size_of::<Foo<T>>()]:`\n \n error: aborting due to previous error\n "}, {"sha": "92a410afcb1a97c4a3fecb1b4f142c2d4e9bb30e", "filename": "src/test/ui/const-generics/const_evaluatable_checked/dont-eagerly-error-in-is-const-evaluatable.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdont-eagerly-error-in-is-const-evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdont-eagerly-error-in-is-const-evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdont-eagerly-error-in-is-const-evaluatable.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![feature(const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+// This test is a repro for #82279. It checks that we don't error\n+// when calling is_const_evaluatable on `std::mem::size_of::<T>()`\n+// when looking for candidates that may prove `T: Foo` in `foo`\n+\n+trait Foo {}\n+\n+#[allow(dead_code)]\n+fn foo<T: Foo>() {}\n+\n+impl<T> Foo for T where [(); std::mem::size_of::<T>()]:  {}\n+\n+fn main() {}"}, {"sha": "7b41e39b7d742d96c3226abe5ebec8bfd617e917", "filename": "src/test/ui/const_evaluatable/needs_where_clause.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.stderr?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -4,11 +4,7 @@ error: unconstrained generic constant\n LL |   b: [f32; complex_maths::<T>(N)],\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: try adding a `where` bound using this expression: `where [u8; complex_maths::<T>(N)]: Sized`\n-  --> $DIR/needs_where_clause.rs:11:12\n-   |\n-LL |   b: [f32; complex_maths::<T>(N)],\n-   |            ^^^^^^^^^^^^^^^^^^^^^\n+   = help: try adding a `where` bound using this expression: `where [(); complex_maths::<T>(N)]:`\n \n error: aborting due to previous error\n "}, {"sha": "3e5c2f5cad1dfff3a3c08fc5bea2310d7b7618fb", "filename": "src/test/ui/const_evaluatable/no_where_clause.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.stderr?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -4,11 +4,7 @@ error: unconstrained generic constant\n LL |   b: [f32; complex_maths(N)],\n    |      ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: try adding a `where` bound using this expression: `where [u8; complex_maths(N)]: Sized`\n-  --> $DIR/no_where_clause.rs:10:12\n-   |\n-LL |   b: [f32; complex_maths(N)],\n-   |            ^^^^^^^^^^^^^^^^\n+   = help: try adding a `where` bound using this expression: `where [(); complex_maths(N)]:`\n \n error: aborting due to previous error\n "}, {"sha": "13b914c0331d1a29d559174aecc2843297b12c43", "filename": "src/test/ui/consts/issue-52060.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconsts%2Fissue-52060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconsts%2Fissue-52060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52060.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/issues/issue-52060.rs"}, {"sha": "95e5f2a8282cb64c5ce9d48d701cd0ce30feb2ec", "filename": "src/test/ui/consts/issue-52060.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconsts%2Fissue-52060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconsts%2Fissue-52060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52060.stderr?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/issues/issue-52060.stderr"}, {"sha": "b8ec0c3c449ff6785be64498a97cbc74d595f56d", "filename": "src/test/ui/consts/mir_check_nonconst.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconsts%2Fmir_check_nonconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconsts%2Fmir_check_nonconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmir_check_nonconst.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/mir_check_nonconst.rs"}, {"sha": "30f68ba43722d92553e4d8bdb25a36e08b0eb0d2", "filename": "src/test/ui/consts/mir_check_nonconst.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconsts%2Fmir_check_nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fconsts%2Fmir_check_nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmir_check_nonconst.stderr?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/mir_check_nonconst.stderr"}, {"sha": "638a1994bb5edc7d78a39686c74f64998a989875", "filename": "src/test/ui/generator/issue-45729-unsafe-in-generator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fgenerator%2Fissue-45729-unsafe-in-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fgenerator%2Fissue-45729-unsafe-in-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-45729-unsafe-in-generator.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/issues/issue-45729-unsafe-in-generator.rs"}, {"sha": "2aab6807aaa21bd7c7b0367c97f226d0696ff709", "filename": "src/test/ui/generator/issue-45729-unsafe-in-generator.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fgenerator%2Fissue-45729-unsafe-in-generator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fgenerator%2Fissue-45729-unsafe-in-generator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-45729-unsafe-in-generator.stderr?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/issues/issue-45729-unsafe-in-generator.stderr"}, {"sha": "fd8fe5f48dfa23aa1a2a1a050e6b84e43f53b896", "filename": "src/test/ui/impl-trait/impl-trait-in-bindings-issue-73003.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/impl-trait-in-bindings-issue-73003.rs"}, {"sha": "715671c8add834eee7f379d64fb6d6317ee70320", "filename": "src/test/ui/impl-trait/impl-trait-in-bindings-issue-73003.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.stderr?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/impl-trait-in-bindings-issue-73003.stderr"}, {"sha": "c7fae45d5ca2cf70d1b527ec13e63ebfe7164ddb", "filename": "src/test/ui/impl-trait/impl-trait-in-bindings.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/impl-trait-in-bindings.rs"}, {"sha": "bf739d4722f6823e4e7fcf6754b57a4586480b50", "filename": "src/test/ui/impl-trait/impl-trait-in-bindings.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.stderr?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/impl-trait-in-bindings.stderr"}, {"sha": "b4e9da0fc84051339a5be4ccc69ed34173558275", "filename": "src/test/ui/lint/fn_must_use.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Flint%2Ffn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Flint%2Ffn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffn_must_use.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/fn_must_use.rs"}, {"sha": "d6b1cf3ae1f8302362519c8e5a5b82129503f15b", "filename": "src/test/ui/lint/fn_must_use.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/fn_must_use.stderr"}, {"sha": "0c30a39d6a2550cbebb7da244d1a17d9f3d5de26", "filename": "src/test/ui/macros/concat-rpass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fmacros%2Fconcat-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fmacros%2Fconcat-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fconcat-rpass.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/concat-rpass.rs"}, {"sha": "ebdc70a04df90ad46748b1b80a76a7c8a67ad9ef", "filename": "src/test/ui/parser/issue-48508-aux.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fparser%2Fissue-48508-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fparser%2Fissue-48508-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-48508-aux.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/issues/issue-48508-aux.rs"}, {"sha": "8dc9351260ebcc6a4bb3979e2d665723bb5fddfa", "filename": "src/test/ui/parser/issue-48508.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fparser%2Fissue-48508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fparser%2Fissue-48508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-48508.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/issues/issue-48508.rs"}, {"sha": "3c49a5a975209eedc7b31ec2496bf72abefce925", "filename": "src/test/ui/parser/issue-68000-unicode-ident-after-missing-comma.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fparser%2Fissue-68000-unicode-ident-after-missing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fparser%2Fissue-68000-unicode-ident-after-missing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68000-unicode-ident-after-missing-comma.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/issues/issue-68000-unicode-ident-after-missing-comma.rs"}, {"sha": "ef365a616437be09a73f32738943e6afc847ee13", "filename": "src/test/ui/parser/issue-68000-unicode-ident-after-missing-comma.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fparser%2Fissue-68000-unicode-ident-after-missing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fparser%2Fissue-68000-unicode-ident-after-missing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68000-unicode-ident-after-missing-comma.stderr?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/issues/issue-68000-unicode-ident-after-missing-comma.stderr"}, {"sha": "926fa94800eb12947e152de4b6df4d6b7674e88d", "filename": "src/test/ui/pattern/issue-10392.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fpattern%2Fissue-10392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fpattern%2Fissue-10392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-10392.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/issues/issue-10392.rs"}, {"sha": "2b742771d6f2c7dede3574c71e7577bdd4747a5d", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -43,7 +43,8 @@ mod with_version {\n     struct Foo;\n     impl_macros!(Foo); //~  WARN using an old version\n                        //~| WARN this was previously\n-    arrays!(Foo);\n+    arrays!(Foo); //~  WARN using an old version\n+                  //~| WARN this was previously\n     other!(Foo);\n }\n \n@@ -77,5 +78,11 @@ mod actori_web_version_test {\n     tuple_from_req!(Foo);\n }\n \n+mod with_good_js_sys_version {\n+    include!(\"js-sys-0.3.40/src/lib.rs\");\n+    struct Foo;\n+    arrays!(Foo);\n+}\n+\n \n fn main() {}"}, {"sha": "effcd68cf967c9fe331b3d9fb3cf3b029b8ebe92", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stderr", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -31,13 +31,29 @@ LL |     impl_macros!(Foo);\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+warning: using an old version of `js-sys`\n+  --> $DIR/js-sys-0.3.17/src/lib.rs:5:32\n+   |\n+LL |         #[my_macro] struct Two($name);\n+   |                                ^^^^^\n+   | \n+  ::: $DIR/group-compat-hack.rs:46:5\n+   |\n+LL |     arrays!(Foo);\n+   |     ------------- in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: older versions of the `js-sys` crate will stop compiling in future versions of Rust; please update to `js-sys` v0.3.40 or above\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n warning: using an old version of `actix-web`\n   --> $DIR/actix-web/src/extract.rs:5:34\n    |\n LL |         #[my_macro] struct Three($T);\n    |                                  ^^\n    | \n-  ::: $DIR/group-compat-hack.rs:54:5\n+  ::: $DIR/group-compat-hack.rs:55:5\n    |\n LL |     tuple_from_req!(Foo);\n    |     --------------------- in this macro invocation\n@@ -53,7 +69,7 @@ warning: using an old version of `actix-web`\n LL |         #[my_macro] struct Three($T);\n    |                                  ^^\n    | \n-  ::: $DIR/group-compat-hack.rs:62:5\n+  ::: $DIR/group-compat-hack.rs:63:5\n    |\n LL |     tuple_from_req!(Foo);\n    |     --------------------- in this macro invocation\n@@ -63,7 +79,7 @@ LL |     tuple_from_req!(Foo);\n    = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: 4 warnings emitted\n+warning: 5 warnings emitted\n \n Future incompatibility report: Future breakage date: None, diagnostic:\n warning: using an old version of `time-macros-impl`\n@@ -100,14 +116,31 @@ LL |     impl_macros!(Foo);\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+Future breakage date: None, diagnostic:\n+warning: using an old version of `js-sys`\n+  --> $DIR/js-sys-0.3.17/src/lib.rs:5:32\n+   |\n+LL |         #[my_macro] struct Two($name);\n+   |                                ^^^^^\n+   | \n+  ::: $DIR/group-compat-hack.rs:46:5\n+   |\n+LL |     arrays!(Foo);\n+   |     ------------- in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: older versions of the `js-sys` crate will stop compiling in future versions of Rust; please update to `js-sys` v0.3.40 or above\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n Future breakage date: None, diagnostic:\n warning: using an old version of `actix-web`\n   --> $DIR/actix-web/src/extract.rs:5:34\n    |\n LL |         #[my_macro] struct Three($T);\n    |                                  ^^\n    | \n-  ::: $DIR/group-compat-hack.rs:54:5\n+  ::: $DIR/group-compat-hack.rs:55:5\n    |\n LL |     tuple_from_req!(Foo);\n    |     --------------------- in this macro invocation\n@@ -124,7 +157,7 @@ warning: using an old version of `actix-web`\n LL |         #[my_macro] struct Three($T);\n    |                                  ^^\n    | \n-  ::: $DIR/group-compat-hack.rs:62:5\n+  ::: $DIR/group-compat-hack.rs:63:5\n    |\n LL |     tuple_from_req!(Foo);\n    |     --------------------- in this macro invocation"}, {"sha": "82d6bc33bf95b95f960d75d2bd360dcb3d54373c", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stdout", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -1,10 +1,11 @@\n Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl/src/lib.rs:5:21: 5:27 (#6) }, Ident { ident: \"One\", span: $DIR/time-macros-impl/src/lib.rs:5:28: 5:31 (#6) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:27:18: 27:21 (#0) }], span: $DIR/time-macros-impl/src/lib.rs:5:31: 5:38 (#6) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl/src/lib.rs:5:38: 5:39 (#6) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys/src/lib.rs:5:21: 5:27 (#10) }, Ident { ident: \"Two\", span: $DIR/js-sys/src/lib.rs:5:28: 5:31 (#10) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:29:13: 29:16 (#0) }], span: $DIR/js-sys/src/lib.rs:5:31: 5:38 (#10) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys/src/lib.rs:5:38: 5:39 (#10) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys/src/lib.rs:5:21: 5:27 (#10) }, Ident { ident: \"Two\", span: $DIR/js-sys/src/lib.rs:5:28: 5:31 (#10) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:29:13: 29:16 (#0) }], span: $DIR/js-sys/src/lib.rs:5:32: 5:37 (#10) }], span: $DIR/js-sys/src/lib.rs:5:31: 5:38 (#10) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys/src/lib.rs:5:38: 5:39 (#10) }]\n Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:22:25: 22:31 (#14) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:22:32: 22:37 (#14) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:30:12: 30:15 (#0) }], span: $DIR/group-compat-hack.rs:22:38: 22:43 (#14) }], span: $DIR/group-compat-hack.rs:22:37: 22:44 (#14) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:22:44: 22:45 (#14) }]\n Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:21: 5:27 (#20) }, Ident { ident: \"One\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:28: 5:31 (#20) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:44:18: 44:21 (#0) }], span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:31: 5:38 (#20) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:38: 5:39 (#20) }]\n Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:21: 5:27 (#24) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:28: 5:31 (#24) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:46:13: 46:16 (#0) }], span: $DIR/js-sys-0.3.17/src/lib.rs:5:31: 5:38 (#24) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.17/src/lib.rs:5:38: 5:39 (#24) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:39:25: 39:31 (#28) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:39:32: 39:37 (#28) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:47:12: 47:15 (#0) }], span: $DIR/group-compat-hack.rs:39:38: 39:43 (#28) }], span: $DIR/group-compat-hack.rs:39:37: 39:44 (#28) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:39:44: 39:45 (#28) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web/src/extract.rs:5:21: 5:27 (#33) }, Ident { ident: \"Three\", span: $DIR/actix-web/src/extract.rs:5:28: 5:33 (#33) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:54:21: 54:24 (#0) }], span: $DIR/actix-web/src/extract.rs:5:33: 5:37 (#33) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web/src/extract.rs:5:37: 5:38 (#33) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:21: 5:27 (#38) }, Ident { ident: \"Three\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:28: 5:33 (#38) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:62:21: 62:24 (#0) }], span: $DIR/actix-web-2.0.0/src/extract.rs:5:33: 5:37 (#38) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web-2.0.0/src/extract.rs:5:37: 5:38 (#38) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web/src/extract.rs:5:21: 5:27 (#43) }, Ident { ident: \"Four\", span: $DIR/actori-web/src/extract.rs:5:28: 5:32 (#43) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:70:21: 70:24 (#0) }], span: $DIR/actori-web/src/extract.rs:5:33: 5:35 (#43) }], span: $DIR/actori-web/src/extract.rs:5:32: 5:36 (#43) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web/src/extract.rs:5:36: 5:37 (#43) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:21: 5:27 (#48) }, Ident { ident: \"Four\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:28: 5:32 (#48) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:77:21: 77:24 (#0) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:33: 5:35 (#48) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:32: 5:36 (#48) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web-2.0.0/src/extract.rs:5:36: 5:37 (#48) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:39:25: 39:31 (#28) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:39:32: 39:37 (#28) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:48:12: 48:15 (#0) }], span: $DIR/group-compat-hack.rs:39:38: 39:43 (#28) }], span: $DIR/group-compat-hack.rs:39:37: 39:44 (#28) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:39:44: 39:45 (#28) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web/src/extract.rs:5:21: 5:27 (#33) }, Ident { ident: \"Three\", span: $DIR/actix-web/src/extract.rs:5:28: 5:33 (#33) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:55:21: 55:24 (#0) }], span: $DIR/actix-web/src/extract.rs:5:33: 5:37 (#33) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web/src/extract.rs:5:37: 5:38 (#33) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:21: 5:27 (#38) }, Ident { ident: \"Three\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:28: 5:33 (#38) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:63:21: 63:24 (#0) }], span: $DIR/actix-web-2.0.0/src/extract.rs:5:33: 5:37 (#38) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web-2.0.0/src/extract.rs:5:37: 5:38 (#38) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web/src/extract.rs:5:21: 5:27 (#43) }, Ident { ident: \"Four\", span: $DIR/actori-web/src/extract.rs:5:28: 5:32 (#43) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:71:21: 71:24 (#0) }], span: $DIR/actori-web/src/extract.rs:5:33: 5:35 (#43) }], span: $DIR/actori-web/src/extract.rs:5:32: 5:36 (#43) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web/src/extract.rs:5:36: 5:37 (#43) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:21: 5:27 (#48) }, Ident { ident: \"Four\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:28: 5:32 (#48) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:78:21: 78:24 (#0) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:33: 5:35 (#48) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:32: 5:36 (#48) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web-2.0.0/src/extract.rs:5:36: 5:37 (#48) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.40/src/lib.rs:5:21: 5:27 (#53) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.40/src/lib.rs:5:28: 5:31 (#53) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:84:13: 84:16 (#0) }], span: $DIR/js-sys-0.3.40/src/lib.rs:5:32: 5:37 (#53) }], span: $DIR/js-sys-0.3.40/src/lib.rs:5:31: 5:38 (#53) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.40/src/lib.rs:5:38: 5:39 (#53) }]"}, {"sha": "d1a66940ebf3cfba4ce0b79eee84a10063c03b3c", "filename": "src/test/ui/proc-macro/group-compat-hack/js-sys-0.3.40/src/lib.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys-0.3.40%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys-0.3.40%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys-0.3.40%2Fsrc%2Flib.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -0,0 +1,7 @@\n+// ignore-test this is not a test\n+\n+macro_rules! arrays {\n+    ($name:ident) => {\n+        #[my_macro] struct Two($name);\n+    }\n+}"}, {"sha": "4b0ca4d524e620d09af55140b5d79e3d27ac7764", "filename": "src/test/ui/resolve/no-implicit-prelude.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fresolve%2Fno-implicit-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fresolve%2Fno-implicit-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fno-implicit-prelude.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/no-implicit-prelude.rs"}, {"sha": "36a9b65b7d1613d3d3ea683a197e226cac0dc4a0", "filename": "src/test/ui/resolve/no-implicit-prelude.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fresolve%2Fno-implicit-prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fresolve%2Fno-implicit-prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fno-implicit-prelude.stderr?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/no-implicit-prelude.stderr"}, {"sha": "bae32a77765cc51cf1b428dfd0373f542983220f", "filename": "src/test/ui/structs-enums/issue-1701.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fstructs-enums%2Fissue-1701.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Fstructs-enums%2Fissue-1701.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fissue-1701.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/issues/issue-1701.rs"}, {"sha": "77a8c92c81c7eb0b4fb036f6a57ea566bad80daa", "filename": "src/test/ui/traits/issue-78372.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Ftraits%2Fissue-78372.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Ftraits%2Fissue-78372.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-78372.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/issues/issue-78372.rs"}, {"sha": "9267e838ceae917f839578f08d9396950f904381", "filename": "src/test/ui/traits/issue-78372.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Ftraits%2Fissue-78372.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Ftraits%2Fissue-78372.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-78372.stderr?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/issues/issue-78372.stderr"}, {"sha": "b74ee1b0c6e54b6ffae430f3a7b8a0f2054dd29b", "filename": "src/test/ui/typeck/issue-65611.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Ftypeck%2Fissue-65611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Ftypeck%2Fissue-65611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-65611.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/issues/issue-65611.rs"}, {"sha": "e3c005a0593f6bdaf1178bd5f928c7f7ed7c4bfe", "filename": "src/test/ui/typeck/issue-65611.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Ftypeck%2Fissue-65611.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftest%2Fui%2Ftypeck%2Fissue-65611.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-65611.stderr?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "previous_filename": "src/test/ui/issues/issue-65611.stderr"}, {"sha": "3e1db233696fe50042b6c80d040cb3059829a190", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -181,7 +181,15 @@ fn is_value_unfrozen_expr<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId, def_id: D\n \n     let result = cx\n         .tcx\n-        .const_eval_resolve(cx.param_env, ty::WithOptConstParam::unknown(def_id), substs, None, None);\n+        .const_eval_resolve(\n+            cx.param_env,\n+            ty::Unevaluated {\n+                def: ty::WithOptConstParam::unknown(def_id),\n+                substs,\n+                promoted: None\n+            },\n+            None\n+        );\n     is_value_unfrozen_raw(cx, result, ty)\n }\n "}, {"sha": "ebe896b7ae86771c13ecabf27d3434a7d53ec6e0", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -341,9 +341,11 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                     .tcx\n                     .const_eval_resolve(\n                         self.param_env,\n-                        ty::WithOptConstParam::unknown(def_id),\n-                        substs,\n-                        None,\n+                        ty::Unevaluated {\n+                            def: ty::WithOptConstParam::unknown(def_id),\n+                            substs,\n+                            promoted: None,\n+                        },\n                         None,\n                     )\n                     .ok()"}, {"sha": "7cc660454b492b6719d7f72a3f7eff6869cdc6fe", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf07c0b4f210ced7bd2785ab554e0d805644235/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=bbf07c0b4f210ced7bd2785ab554e0d805644235", "patch": "@@ -7,8 +7,8 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 1408;\n-const ISSUES_ENTRY_LIMIT: usize = 2565;\n+const ROOT_ENTRY_LIMIT: usize = 1390;\n+const ISSUES_ENTRY_LIMIT: usize = 2551;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     let dirs = walkdir::WalkDir::new(&path.join(\"test/ui\"))"}]}