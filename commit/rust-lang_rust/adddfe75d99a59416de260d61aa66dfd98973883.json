{"sha": "adddfe75d99a59416de260d61aa66dfd98973883", "node_id": "C_kwDOAAsO6NoAKGFkZGRmZTc1ZDk5YTU5NDE2ZGUyNjBkNjFhYTY2ZGZkOTg5NzM4ODM", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-04T02:32:42Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-18T21:02:00Z"}, "message": "Release notes for 1.59", "tree": {"sha": "9b4932fdd1f0a94f411c41390a147a0848df8241", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b4932fdd1f0a94f411c41390a147a0848df8241"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adddfe75d99a59416de260d61aa66dfd98973883", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adddfe75d99a59416de260d61aa66dfd98973883", "html_url": "https://github.com/rust-lang/rust/commit/adddfe75d99a59416de260d61aa66dfd98973883", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adddfe75d99a59416de260d61aa66dfd98973883/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "393fdc10483da930cdbb00eabc3635030d2e776f", "url": "https://api.github.com/repos/rust-lang/rust/commits/393fdc10483da930cdbb00eabc3635030d2e776f", "html_url": "https://github.com/rust-lang/rust/commit/393fdc10483da930cdbb00eabc3635030d2e776f"}], "stats": {"total": 165, "additions": 165, "deletions": 0}, "files": [{"sha": "96da1660c0febf534f086714588895dbf45a912e", "filename": "RELEASES.md", "status": "modified", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/adddfe75d99a59416de260d61aa66dfd98973883/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/adddfe75d99a59416de260d61aa66dfd98973883/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=adddfe75d99a59416de260d61aa66dfd98973883", "patch": "@@ -1,3 +1,168 @@\n+Version 1.59.0 (2022-02-24)\n+==========================\n+\n+Language\n+--------\n+\n+- [Stabilize default arguments for const generics][90207]\n+- [Stabilize destructuring assignment][90521]\n+- [Relax private in public lint on generic bounds and where clauses of trait impls][90586]\n+- [Stabilize asm! and global_asm! for x86, x86_64, ARM, Aarch64, and RISC-V][91728]\n+\n+Compiler\n+--------\n+\n+- [Stabilize new symbol mangling format, leaving it opt-in (-Csymbol-mangling-version=v0)][90128]\n+- [Emit LLVM optimization remarks when enabled with `-Cremark`][90833]\n+- [Fix sparc64 ABI for aggregates with floating point members][91003]\n+- [Warn when a `#[test]`-like built-in attribute macro is present multiple times.][91172]\n+- [Add support for riscv64gc-unknown-freebsd][91284]\n+- [Stabilize `-Z emit-future-incompat` as `--json future-incompat`][91535]\n+\n+Libraries\n+---------\n+\n+- [Remove unnecessary bounds for some Hash{Map,Set} methods][91593]\n+\n+Stabilized APIs\n+---------------\n+\n+- [`std::thread::available_parallelism`][available_parallelism]\n+- [`Result::copied`][result-copied]\n+- [`Result::cloned`][result-cloned]\n+- [`arch::asm!`][asm]\n+- [`arch::global_asm!`][global_asm]\n+- [`ops::ControlFlow::is_break`][is_break]\n+- [`ops::ControlFlow::is_continue`][is_continue]\n+- [`TryFrom<char> for u8`][try_from_char_u8]\n+- [`char::TryFromCharError`][try_from_char_err]\n+  implementing `Clone`, `Debug`, `Display`, `PartialEq`, `Copy`, `Eq`, `Error`\n+- [`iter::zip`][zip]\n+- [`NonZeroU8::is_power_of_two`][is_power_of_two8]\n+- [`NonZeroU16::is_power_of_two`][is_power_of_two16]\n+- [`NonZeroU32::is_power_of_two`][is_power_of_two32]\n+- [`NonZeroU64::is_power_of_two`][is_power_of_two64]\n+- [`NonZeroU128::is_power_of_two`][is_power_of_two128]\n+- [`DoubleEndedIterator for ToLowercase`][lowercase]\n+- [`DoubleEndedIterator for ToUppercase`][uppercase]\n+- [`TryFrom<&mut [T]> for [T; N]`][tryfrom_ref_arr]\n+- [`UnwindSafe for Once`][unwindsafe_once]\n+- [`RefUnwindSafe for Once`][refunwindsafe_once]\n+- [armv8 neon intrinsics for aarch64][stdarch/1266]\n+\n+Const-stable:\n+\n+- [`mem::MaybeUninit::as_ptr`][muninit_ptr]\n+- [`mem::MaybeUninit::assume_init`][muninit_init]\n+- [`mem::MaybeUninit::assume_init_ref`][muninit_init_ref]\n+- [`ffi::CStr::from_bytes_with_nul_unchecked`][cstr_from_bytes]\n+\n+Cargo\n+-----\n+\n+- [Stabilize the `strip` profile option][cargo/10088]\n+- [Stabilize future-incompat-report][cargo/10165]\n+- [Support abbreviating `--release` as `-r`][cargo/10133]\n+- [Support `term.quiet` configuration][cargo/10152]\n+- [Remove `--host` from cargo {publish,search,login}][cargo/10145]\n+\n+Compatibility Notes\n+-------------------\n+\n+- [Refactor weak symbols in std::sys::unix][90846]\n+  This may add new, versioned, symbols when building with a newer glibc, as the\n+  standard library uses weak linkage rather than dynamically attempting to load\n+  certain symbols at runtime.\n+- [Deprecate crate_type and crate_name nested inside `#![cfg_attr]`][83744]\n+  This adds a future compatibility lint to supporting the use of cfg_attr\n+  wrapping either crate_type or crate_name specification within Rust files;\n+  it is recommended that users migrate to setting the equivalent command line\n+  flags.\n+- [Remove effect of `#[no_link]` attribute on name resolution][92034]\n+  This may expose new names, leading to conflicts with preexisting names in a\n+  given namespace and a compilation failure.\n+- [Cargo will document libraries before binaries.][cargo/10172]\n+- [Respect doc=false in dependencies, not just the root crate][cargo/10201]\n+- [Weaken guarantee around advancing underlying iterators in zip][83791]\n+- [Make split_inclusive() on an empty slice yield an empty output][89825]\n+- [Update std::env::temp_dir to use GetTempPath2 on Windows when available.][89999]\n+\n+Internal Changes\n+----------------\n+\n+These changes provide no direct user facing benefits, but represent significant\n+improvements to the internals and overall performance of rustc\n+and related tools.\n+\n+- [Fix many cases of normalization-related ICEs][91255]\n+- [Replace dominators algorithm with simple Lengauer-Tarjan][85013]\n+- [Store liveness in interval sets for region inference][90637]\n+\n+- [Remove `in_band_lifetimes` from the compiler and standard library, in preparation for removing this\n+  unstable feature.][91867]\n+\n+[91867]: https://github.com/rust-lang/rust/issues/91867\n+[83744]: https://github.com/rust-lang/rust/pull/83744/\n+[83791]: https://github.com/rust-lang/rust/pull/83791/\n+[85013]: https://github.com/rust-lang/rust/pull/85013/\n+[89825]: https://github.com/rust-lang/rust/pull/89825/\n+[89999]: https://github.com/rust-lang/rust/pull/89999/\n+[90128]: https://github.com/rust-lang/rust/pull/90128/\n+[90207]: https://github.com/rust-lang/rust/pull/90207/\n+[90521]: https://github.com/rust-lang/rust/pull/90521/\n+[90586]: https://github.com/rust-lang/rust/pull/90586/\n+[90637]: https://github.com/rust-lang/rust/pull/90637/\n+[90833]: https://github.com/rust-lang/rust/pull/90833/\n+[90846]: https://github.com/rust-lang/rust/pull/90846/\n+[91003]: https://github.com/rust-lang/rust/pull/91003/\n+[91172]: https://github.com/rust-lang/rust/pull/91172/\n+[91255]: https://github.com/rust-lang/rust/pull/91255/\n+[91284]: https://github.com/rust-lang/rust/pull/91284/\n+[91535]: https://github.com/rust-lang/rust/pull/91535/\n+[91593]: https://github.com/rust-lang/rust/pull/91593/\n+[91728]: https://github.com/rust-lang/rust/pull/91728/\n+[91878]: https://github.com/rust-lang/rust/pull/91878/\n+[91896]: https://github.com/rust-lang/rust/pull/91896/\n+[91926]: https://github.com/rust-lang/rust/pull/91926/\n+[91984]: https://github.com/rust-lang/rust/pull/91984/\n+[92020]: https://github.com/rust-lang/rust/pull/92020/\n+[92034]: https://github.com/rust-lang/rust/pull/92034/\n+[92483]: https://github.com/rust-lang/rust/pull/92483/\n+[cargo/10088]: https://github.com/rust-lang/cargo/pull/10088/\n+[cargo/10133]: https://github.com/rust-lang/cargo/pull/10133/\n+[cargo/10145]: https://github.com/rust-lang/cargo/pull/10145/\n+[cargo/10152]: https://github.com/rust-lang/cargo/pull/10152/\n+[cargo/10165]: https://github.com/rust-lang/cargo/pull/10165/\n+[cargo/10172]: https://github.com/rust-lang/cargo/pull/10172/\n+[cargo/10201]: https://github.com/rust-lang/cargo/pull/10201/\n+[cargo/10269]: https://github.com/rust-lang/cargo/pull/10269/\n+\n+[cstr_from_bytes]: https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html#method.from_bytes_with_nul_unchecked\n+[muninit_ptr]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.as_ptr\n+[muninit_init]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.assume_init\n+[muninit_init_ref]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.assume_init_ref\n+[unwindsafe_once]: https://doc.rust-lang.org/stable/std/sync/struct.Once.html#impl-UnwindSafe\n+[refunwindsafe_once]: https://doc.rust-lang.org/stable/std/sync/struct.Once.html#impl-RefUnwindSafe\n+[tryfrom_ref_arr]: https://doc.rust-lang.org/stable/std/convert/trait.TryFrom.html#impl-TryFrom%3C%26%27_%20mut%20%5BT%5D%3E\n+[lowercase]: https://doc.rust-lang.org/stable/std/char/struct.ToLowercase.html#impl-DoubleEndedIterator\n+[uppercase]: https://doc.rust-lang.org/stable/std/char/struct.ToUppercase.html#impl-DoubleEndedIterator\n+[try_from_char_err]: https://doc.rust-lang.org/stable/std/char/struct.TryFromCharError.html\n+[available_parallelism]: https://doc.rust-lang.org/stable/std/thread/fn.available_parallelism.html\n+[result-copied]: https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.copied\n+[result-cloned]: https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.cloned\n+[asm]: https://doc.rust-lang.org/stable/core/arch/macro.asm.html\n+[global_asm]: https://doc.rust-lang.org/stable/core/arch/macro.global_asm.html\n+[is_break]: https://doc.rust-lang.org/stable/std/ops/enum.ControlFlow.html#method.is_break\n+[is_continue]: https://doc.rust-lang.org/stable/std/ops/enum.ControlFlow.html#method.is_continue\n+[try_from_char_u8]: https://doc.rust-lang.org/stable/std/primitive.char.html#impl-TryFrom%3Cchar%3E\n+[zip]: https://doc.rust-lang.org/stable/std/iter/fn.zip.html\n+[is_power_of_two8]: https://doc.rust-lang.org/stable/core/num/struct.NonZeroU8.html#method.is_power_of_two\n+[is_power_of_two16]: https://doc.rust-lang.org/stable/core/num/struct.NonZeroU16.html#method.is_power_of_two\n+[is_power_of_two32]: https://doc.rust-lang.org/stable/core/num/struct.NonZeroU32.html#method.is_power_of_two\n+[is_power_of_two64]: https://doc.rust-lang.org/stable/core/num/struct.NonZeroU64.html#method.is_power_of_two\n+[is_power_of_two128]: https://doc.rust-lang.org/stable/core/num/struct.NonZeroU128.html#method.is_power_of_two\n+[stdarch/1266]: https://github.com/rust-lang/stdarch/pull/1266\n+\n Version 1.58.1 (2022-01-19)\n ===========================\n "}]}