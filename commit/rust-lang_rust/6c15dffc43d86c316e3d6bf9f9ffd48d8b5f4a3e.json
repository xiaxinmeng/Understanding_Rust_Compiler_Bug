{"sha": "6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMTVkZmZjNDNkODZjMzE2ZTNkNmJmOWY5ZmZkNDhkOGI1ZjRhM2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-03T01:26:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-03T01:26:56Z"}, "message": "Auto merge of #47791 - estebank:mismatched-trait-impl, r=nikomatsakis\n\nTweak presentation on lifetime trait mismatch\n\n - On trait/impl method discrepancy, add label pointing at trait signature.\n - Point only at method definition when referring to named lifetimes on lifetime mismatch.\n - When the sub and sup expectations are the same, tweak the output to avoid repeated spans.\n\nFix #30790, CC #18759.", "tree": {"sha": "40f2aac56b2262ce76ed9eeb9e30b123b4f9ca1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40f2aac56b2262ce76ed9eeb9e30b123b4f9ca1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "html_url": "https://github.com/rust-lang/rust/commit/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "616b66dca25a67321b1654e5a65acc6337d63cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/616b66dca25a67321b1654e5a65acc6337d63cf4", "html_url": "https://github.com/rust-lang/rust/commit/616b66dca25a67321b1654e5a65acc6337d63cf4"}, {"sha": "67696be160cc35ba5e54086a42225d9c1f81b275", "url": "https://api.github.com/repos/rust-lang/rust/commits/67696be160cc35ba5e54086a42225d9c1f81b275", "html_url": "https://github.com/rust-lang/rust/commit/67696be160cc35ba5e54086a42225d9c1f81b275"}], "stats": {"total": 341, "additions": 212, "deletions": 129}, "files": [{"sha": "03fc40b2e39fcb79fe374ecd17bfcaa42861f07a", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 48, "deletions": 23, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "patch": "@@ -175,25 +175,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ty::ReEarlyBound(_) |\n             ty::ReFree(_) => {\n                 let scope = region.free_region_binding_scope(self);\n-                let prefix = match *region {\n-                    ty::ReEarlyBound(ref br) => {\n-                        format!(\"the lifetime {} as defined on\", br.name)\n-                    }\n-                    ty::ReFree(ref fr) => {\n-                        match fr.bound_region {\n-                            ty::BrAnon(idx) => {\n-                                format!(\"the anonymous lifetime #{} defined on\", idx + 1)\n-                            }\n-                            ty::BrFresh(_) => \"an anonymous lifetime defined on\".to_owned(),\n-                            _ => {\n-                                format!(\"the lifetime {} as defined on\",\n-                                        fr.bound_region)\n-                            }\n-                        }\n-                    }\n-                    _ => bug!()\n-                };\n-\n                 let node = self.hir.as_local_node_id(scope)\n                                    .unwrap_or(DUMMY_NODE_ID);\n                 let unknown;\n@@ -218,7 +199,26 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         &unknown\n                     }\n                 };\n-                let (msg, opt_span) = explain_span(self, tag, self.hir.span(node));\n+                let (prefix, span) = match *region {\n+                    ty::ReEarlyBound(ref br) => {\n+                        (format!(\"the lifetime {} as defined on\", br.name),\n+                         self.sess.codemap().def_span(self.hir.span(node)))\n+                    }\n+                    ty::ReFree(ref fr) => {\n+                        match fr.bound_region {\n+                            ty::BrAnon(idx) => {\n+                                (format!(\"the anonymous lifetime #{} defined on\", idx + 1),\n+                                 self.hir.span(node))\n+                            }\n+                            ty::BrFresh(_) => (\"an anonymous lifetime defined on\".to_owned(),\n+                                               self.hir.span(node)),\n+                            _ => (format!(\"the lifetime {} as defined on\", fr.bound_region),\n+                                  self.sess.codemap().def_span(self.hir.span(node))),\n+                        }\n+                    }\n+                    _ => bug!()\n+                };\n+                let (msg, opt_span) = explain_span(self, tag, span);\n                 (format!(\"{} {}\", prefix, msg), opt_span)\n             }\n \n@@ -807,7 +807,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n \n-        let span = cause.span;\n+        let span = cause.span(&self.tcx);\n \n         diag.span_label(span, terr.to_string());\n         if let Some((sp, msg)) = secondary_span {\n@@ -842,7 +842,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                     \"did you mean `{}(/* fields */)`?\",\n                                     self.tcx.item_path_str(def_id)\n                                 );\n-                                diag.span_label(cause.span, message);\n+                                diag.span_label(span, message);\n                             }\n                         }\n                     }\n@@ -870,7 +870,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                trace,\n                terr);\n \n-        let span = trace.cause.span;\n+        let span = trace.cause.span(&self.tcx);\n         let failure_code = trace.cause.as_failure_code(terr);\n         let mut diag = match failure_code {\n             FailureCode::Error0317(failure_str) => {\n@@ -1076,6 +1076,31 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             sup_region,\n             \"...\");\n \n+        match (&sup_origin, &sub_origin) {\n+            (&infer::Subtype(ref sup_trace), &infer::Subtype(ref sub_trace)) => {\n+                if let (Some((sup_expected, sup_found)),\n+                        Some((sub_expected, sub_found))) = (self.values_str(&sup_trace.values),\n+                                                            self.values_str(&sub_trace.values)) {\n+                    if sub_expected == sup_expected && sub_found == sup_found {\n+                        self.tcx.note_and_explain_region(\n+                            region_scope_tree,\n+                            &mut err,\n+                            \"...but the lifetime must also be valid for \",\n+                            sub_region,\n+                            \"...\",\n+                        );\n+                        err.note(&format!(\"...so that the {}:\\nexpected {}\\n   found {}\",\n+                                          sup_trace.cause.as_requirement_str(),\n+                                          sup_expected.content(),\n+                                          sup_found.content()));\n+                        err.emit();\n+                        return;\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+\n         self.note_region_origin(&mut err, &sup_origin);\n \n         self.tcx.note_and_explain_region(region_scope_tree, &mut err,"}, {"sha": "02ec9fe74c1fe693bf5c24e60da393c93c170266", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "patch": "@@ -23,12 +23,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 if let Some((expected, found)) = self.values_str(&trace.values) {\n                     let expected = expected.content();\n                     let found = found.content();\n-                    // FIXME: do we want a \"the\" here?\n-                    err.span_note(trace.cause.span,\n-                                  &format!(\"...so that {} (expected {}, found {})\",\n-                                           trace.cause.as_requirement_str(),\n-                                           expected,\n-                                           found));\n+                    err.note(&format!(\"...so that the {}:\\nexpected {}\\n   found {}\",\n+                                      trace.cause.as_requirement_str(),\n+                                      expected,\n+                                      found));\n                 } else {\n                     // FIXME: this really should be handled at some earlier stage. Our\n                     // handling of region checking when type errors are present is"}, {"sha": "0616dda228e681b44a1865f97737adea9644bdfc", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "patch": "@@ -100,6 +100,19 @@ pub struct ObligationCause<'tcx> {\n     pub code: ObligationCauseCode<'tcx>\n }\n \n+impl<'tcx> ObligationCause<'tcx> {\n+    pub fn span<'a, 'gcx>(&self, tcx: &TyCtxt<'a, 'gcx, 'tcx>) -> Span {\n+        match self.code {\n+            ObligationCauseCode::CompareImplMethodObligation { .. } |\n+            ObligationCauseCode::MainFunctionType |\n+            ObligationCauseCode::StartFunctionType => {\n+                tcx.sess.codemap().def_span(self.span)\n+            }\n+            _ => self.span,\n+        }\n+    }\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum ObligationCauseCode<'tcx> {\n     /// Not well classified or should be obvious from span."}, {"sha": "4c10f28eb8e5de23d9987a82c087f716adf4f92c", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "patch": "@@ -40,6 +40,8 @@ pub fn compare_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"compare_impl_method(impl_trait_ref={:?})\",\n            impl_trait_ref);\n \n+    let impl_m_span = tcx.sess.codemap().def_span(impl_m_span);\n+\n     if let Err(ErrorReported) = compare_self_type(tcx,\n                                                   impl_m,\n                                                   impl_m_span,\n@@ -186,6 +188,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     check_region_bounds_on_impl_method(tcx,\n                                        impl_m_span,\n                                        impl_m,\n+                                       trait_m,\n                                        &trait_m_generics,\n                                        &impl_m_generics,\n                                        trait_to_skol_substs)?;\n@@ -310,7 +313,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             };\n \n             let mut diag = struct_span_err!(tcx.sess,\n-                                            cause.span,\n+                                            cause.span(&tcx),\n                                             E0053,\n                                             \"method `{}` has an incompatible type for trait\",\n                                             trait_m.name);\n@@ -346,10 +349,12 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 span: Span,\n                                                 impl_m: &ty::AssociatedItem,\n+                                                trait_m: &ty::AssociatedItem,\n                                                 trait_generics: &ty::Generics,\n                                                 impl_generics: &ty::Generics,\n                                                 trait_to_skol_substs: &Substs<'tcx>)\n                                                 -> Result<(), ErrorReported> {\n+    let span = tcx.sess.codemap().def_span(span);\n     let trait_params = &trait_generics.regions[..];\n     let impl_params = &impl_generics.regions[..];\n \n@@ -371,14 +376,18 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // are zero. Since I don't quite know how to phrase things at\n     // the moment, give a kind of vague error message.\n     if trait_params.len() != impl_params.len() {\n-        struct_span_err!(tcx.sess,\n-                         span,\n-                         E0195,\n-                         \"lifetime parameters or bounds on method `{}` do not match the \\\n-                          trait declaration\",\n-                         impl_m.name)\n-            .span_label(span, \"lifetimes do not match trait\")\n-            .emit();\n+        let mut err = struct_span_err!(tcx.sess,\n+                                       span,\n+                                       E0195,\n+                                       \"lifetime parameters or bounds on method `{}` do not match \\\n+                                        the trait declaration\",\n+                                       impl_m.name);\n+        err.span_label(span, \"lifetimes do not match method in trait\");\n+        if let Some(sp) = tcx.hir.span_if_local(trait_m.def_id) {\n+            err.span_label(tcx.sess.codemap().def_span(sp),\n+                           \"lifetimes in impl do not match this method in trait\");\n+        }\n+        err.emit();\n         return Err(ErrorReported);\n     }\n \n@@ -424,9 +433,9 @@ fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a\n                 }).map(|(ref impl_arg, ref trait_arg)| {\n                     (impl_arg.span, Some(trait_arg.span))\n                 })\n-                .unwrap_or_else(|| (cause.span, tcx.hir.span_if_local(trait_m.def_id)))\n+                .unwrap_or_else(|| (cause.span(&tcx), tcx.hir.span_if_local(trait_m.def_id)))\n             } else {\n-                (cause.span, tcx.hir.span_if_local(trait_m.def_id))\n+                (cause.span(&tcx), tcx.hir.span_if_local(trait_m.def_id))\n             }\n         }\n         TypeError::Sorts(ExpectedFound { .. }) => {\n@@ -459,14 +468,14 @@ fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a\n                              {\n                                  (impl_m_output.span(), Some(trait_m_output.span()))\n                              } else {\n-                                 (cause.span, tcx.hir.span_if_local(trait_m.def_id))\n+                                 (cause.span(&tcx), tcx.hir.span_if_local(trait_m.def_id))\n                              }\n                          })\n             } else {\n-                (cause.span, tcx.hir.span_if_local(trait_m.def_id))\n+                (cause.span(&tcx), tcx.hir.span_if_local(trait_m.def_id))\n             }\n         }\n-        _ => (cause.span, tcx.hir.span_if_local(trait_m.def_id)),\n+        _ => (cause.span(&tcx), tcx.hir.span_if_local(trait_m.def_id)),\n     }\n }\n "}, {"sha": "4f4d7ce0dba839126787a7c1f798a5a6d8c51bff", "filename": "src/test/compile-fail/E0195.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fcompile-fail%2FE0195.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fcompile-fail%2FE0195.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0195.rs?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "patch": "@@ -10,13 +10,14 @@\n \n trait Trait {\n     fn bar<'a,'b:'a>(x: &'a str, y: &'b str);\n+    //~^ NOTE lifetimes in impl do not match this method in trait\n }\n \n struct Foo;\n \n impl Trait for Foo {\n     fn bar<'a,'b>(x: &'a str, y: &'b str) { //~ ERROR E0195\n-                                            //~^ lifetimes do not match trait\n+    //~^ NOTE lifetimes do not match method in trait\n     }\n }\n "}, {"sha": "cda83fe54b09ab527acdca32c31a484d28327565", "filename": "src/test/compile-fail/issue-16048.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fcompile-fail%2Fissue-16048.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fcompile-fail%2Fissue-16048.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16048.rs?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "patch": "@@ -10,6 +10,7 @@\n \n trait NoLifetime {\n     fn get<'p, T : Test<'p>>(&self) -> T;\n+    //~^ NOTE lifetimes in impl do not match this method in trait\n }\n \n trait Test<'p> {\n@@ -28,8 +29,8 @@ impl<'a> Test<'a> for Foo<'a> {\n \n impl<'a> NoLifetime for Foo<'a> {\n     fn get<'p, T : Test<'a>>(&self) -> T {\n-//~^ ERROR E0195\n-//~| lifetimes do not match trait\n+    //~^ ERROR E0195\n+    //~| NOTE lifetimes do not match method in trait\n         return *self as T;\n     }\n }"}, {"sha": "ab0e1003a9e10d76dad53b835907c202538eef02", "filename": "src/test/ui/associated-const-impl-wrong-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "patch": "@@ -9,11 +9,8 @@ error[E0308]: mismatched types\n note: the lifetime 'a as defined on the impl at 17:1...\n   --> $DIR/associated-const-impl-wrong-lifetime.rs:17:1\n    |\n-17 | / impl<'a> Foo for &'a () {\n-18 | |     const NAME: &'a str = \"unit\";\n-19 | |     //~^ ERROR mismatched types [E0308]\n-20 | | }\n-   | |_^\n+17 | impl<'a> Foo for &'a () {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error: aborting due to previous error"}, {"sha": "617de2c5dfe84ecd39713eb6a9aa6a63e99764cd", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "previous_filename": "src/test/compile-fail/regions-bound-missing-bound-in-impl.rs"}, {"sha": "e8323247af9971b68b132a43788993c12e973698", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "patch": "@@ -0,0 +1,48 @@\n+error[E0195]: lifetime parameters or bounds on method `no_bound` do not match the trait declaration\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:28:5\n+   |\n+20 |     fn no_bound<'b>(self, b: Inv<'b>);\n+   |     ---------------------------------- lifetimes in impl do not match this method in trait\n+...\n+28 |     fn no_bound<'b:'a>(self, b: Inv<'b>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n+\n+error[E0195]: lifetime parameters or bounds on method `has_bound` do not match the trait declaration\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:32:5\n+   |\n+21 |     fn has_bound<'b:'a>(self, b: Inv<'b>);\n+   |     -------------------------------------- lifetimes in impl do not match this method in trait\n+...\n+32 |     fn has_bound<'b>(self, b: Inv<'b>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n+\n+error[E0308]: method not compatible with trait\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:36:5\n+   |\n+36 |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'d>)`\n+              found type `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'d>)`\n+note: the lifetime 'c as defined on the method body at 36:5...\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:36:5\n+   |\n+36 |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...does not necessarily outlive the lifetime 'c as defined on the method body at 36:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:36:5\n+   |\n+36 |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:53:5\n+   |\n+24 |     fn another_bound<'x: 'a>(self, x: Inv<'x>, y: Inv<'t>);\n+   |     ------------------------------------------------------- definition of `another_bound` from trait\n+...\n+53 |     fn another_bound<'x: 't>(self, x: Inv<'x>, y: Inv<'t>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'x: 't`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "5c612522d9a318ae436994942cc92562d383c89a", "filename": "src/test/ui/closure-expected-type/expect-region-supply-region.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "patch": "@@ -41,14 +41,8 @@ note: the anonymous lifetime #2 defined on the body at 47:29...\n note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 42:1\n   --> $DIR/expect-region-supply-region.rs:42:1\n    |\n-42 | / fn expect_bound_supply_named<'x>() {\n-43 | |     let mut f: Option<&u32> = None;\n-44 | |\n-45 | |     // Here we give a type annotation that `x` should be free. We get\n-...  |\n-54 | |     });\n-55 | | }\n-   | |_^\n+42 | fn expect_bound_supply_named<'x>() {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/expect-region-supply-region.rs:47:33\n@@ -61,14 +55,8 @@ error[E0308]: mismatched types\n note: the lifetime 'x as defined on the function body at 42:1...\n   --> $DIR/expect-region-supply-region.rs:42:1\n    |\n-42 | / fn expect_bound_supply_named<'x>() {\n-43 | |     let mut f: Option<&u32> = None;\n-44 | |\n-45 | |     // Here we give a type annotation that `x` should be free. We get\n-...  |\n-54 | |     });\n-55 | | }\n-   | |_^\n+42 | fn expect_bound_supply_named<'x>() {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 47:29\n   --> $DIR/expect-region-supply-region.rs:47:29\n    |"}, {"sha": "1417c71ca1244d3a605722497b42baf3334cacf1", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "patch": "@@ -2,7 +2,7 @@ error[E0053]: method `fmt` has an incompatible type for trait\n   --> $DIR/trait_type.rs:17:4\n    |\n 17 |    fn fmt(&self, x: &str) -> () { }\n-   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\n+   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\n    |\n    = note: expected type `fn(&MyType, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n               found type `fn(&MyType, &str)`\n@@ -19,7 +19,7 @@ error[E0186]: method `fmt` has a `&self` declaration in the trait, but not in th\n   --> $DIR/trait_type.rs:27:4\n    |\n 27 |    fn fmt() -> () { }\n-   |    ^^^^^^^^^^^^^^^^^^ expected `&self` in impl\n+   |    ^^^^^^^^^^^^^^ expected `&self` in impl\n    |\n    = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n "}, {"sha": "f845762cefd8bd6cadde79eb14f7317df266d897", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::Deref;\n+trait Trait {}\n+\n+struct Struct;\n+\n+impl Deref for Struct {\n+    type Target = Trait;\n+    fn deref(&self) -> &Trait {\n+        unimplemented!();\n+    }\n+}\n+//~^^^^ ERROR cannot infer an appropriate lifetime for lifetime parameter"}, {"sha": "7aab31eb909d0cc480afad4b2243088cea5c8c9a", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "patch": "@@ -0,0 +1,22 @@\n+error[E0601]: main function not found\n+\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in generic type due to conflicting requirements\n+  --> $DIR/mismatched_trait_impl-2.rs:18:5\n+   |\n+18 |     fn deref(&self) -> &Trait {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 18:5...\n+  --> $DIR/mismatched_trait_impl-2.rs:18:5\n+   |\n+18 | /     fn deref(&self) -> &Trait {\n+19 | |         unimplemented!();\n+20 | |     }\n+   | |_____^\n+   = note: ...but the lifetime must also be valid for the static lifetime...\n+   = note: ...so that the method type is compatible with trait:\n+           expected fn(&Struct) -> &Trait + 'static\n+              found fn(&Struct) -> &Trait\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "fd6be01da9f460a44c7066dbcbfd2724ce00980f", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "patch": "@@ -1,10 +1,8 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'a in generic type due to conflicting requirements\n   --> $DIR/mismatched_trait_impl.rs:19:5\n    |\n-19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n-20 | |         x\n-21 | |     }\n-   | |_____^\n+19 |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 19:5...\n   --> $DIR/mismatched_trait_impl.rs:19:5\n@@ -13,27 +11,14 @@ note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on th\n 20 | |         x\n 21 | |     }\n    | |_____^\n-note: ...so that method type is compatible with trait (expected fn(&i32, &'a u32, &u32) -> &'a u32, found fn(&i32, &u32, &u32) -> &u32)\n-  --> $DIR/mismatched_trait_impl.rs:19:5\n-   |\n-19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n-20 | |         x\n-21 | |     }\n-   | |_____^\n-note: but, the lifetime must be valid for the lifetime 'a as defined on the method body at 19:5...\n+note: ...but the lifetime must also be valid for the lifetime 'a as defined on the method body at 19:5...\n   --> $DIR/mismatched_trait_impl.rs:19:5\n    |\n-19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n-20 | |         x\n-21 | |     }\n-   | |_____^\n-note: ...so that method type is compatible with trait (expected fn(&i32, &'a u32, &u32) -> &'a u32, found fn(&i32, &u32, &u32) -> &u32)\n-  --> $DIR/mismatched_trait_impl.rs:19:5\n-   |\n-19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n-20 | |         x\n-21 | |     }\n-   | |_____^\n+19 |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...so that the method type is compatible with trait:\n+           expected fn(&i32, &'a u32, &u32) -> &'a u32\n+              found fn(&i32, &u32, &u32) -> &u32\n \n error: aborting due to previous error\n "}, {"sha": "b24544743d87da84c5e64e6432854df272775864", "filename": "src/test/ui/issue-27942.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fissue-27942.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fissue-27942.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27942.stderr?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "patch": "@@ -14,14 +14,8 @@ note: the anonymous lifetime #1 defined on the method body at 15:5...\n note: ...does not necessarily outlive the lifetime 'a as defined on the trait at 13:1\n   --> $DIR/issue-27942.rs:13:1\n    |\n-13 | / pub trait Buffer<'a, R: Resources<'a>> {\n-14 | |\n-15 | |     fn select(&self) -> BufferViewHandle<R>;\n-16 | |     //~^ ERROR mismatched types\n-...  |\n-19 | |     //~| lifetime mismatch\n-20 | | }\n-   | |_^\n+13 | pub trait Buffer<'a, R: Resources<'a>> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-27942.rs:15:5\n@@ -34,14 +28,8 @@ error[E0308]: mismatched types\n note: the lifetime 'a as defined on the trait at 13:1...\n   --> $DIR/issue-27942.rs:13:1\n    |\n-13 | / pub trait Buffer<'a, R: Resources<'a>> {\n-14 | |\n-15 | |     fn select(&self) -> BufferViewHandle<R>;\n-16 | |     //~^ ERROR mismatched types\n-...  |\n-19 | |     //~| lifetime mismatch\n-20 | | }\n-   | |_^\n+13 | pub trait Buffer<'a, R: Resources<'a>> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...does not necessarily outlive the anonymous lifetime #1 defined on the method body at 15:5\n   --> $DIR/issue-27942.rs:15:5\n    |"}, {"sha": "c4ad232ae7eba6f5b11af4182801ea27da2af831", "filename": "src/test/ui/issue-37884.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fissue-37884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fissue-37884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-37884.stderr?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "patch": "@@ -24,14 +24,8 @@ note: the anonymous lifetime #1 defined on the method body at 16:5...\n note: ...does not necessarily outlive the lifetime 'a as defined on the impl at 13:1\n   --> $DIR/issue-37884.rs:13:1\n    |\n-13 | / impl<'a, T: 'a> Iterator for RepeatMut<'a, T> {\n-14 | |\n-15 | |     type Item = &'a mut T;\n-16 | |     fn next(&'a mut self) -> Option<Self::Item>\n-...  |\n-21 | |     }\n-22 | | }\n-   | |_^\n+13 | impl<'a, T: 'a> Iterator for RepeatMut<'a, T> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7b5cce218e9f26ad8fe4ee1e82a5fb299db62a04", "filename": "src/test/ui/issue-46472.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fissue-46472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fissue-46472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46472.stderr?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "patch": "@@ -10,12 +10,8 @@ error[E0597]: borrowed value does not live long enough (Ast)\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:1...\n   --> $DIR/issue-46472.rs:13:1\n    |\n-13 | / fn bar<'a>() -> &'a mut u32 {\n-14 | |     &mut 4\n-15 | |     //~^ ERROR borrowed value does not live long enough (Ast) [E0597]\n-16 | |     //~| ERROR borrowed value does not live long enough (Mir) [E0597]\n-17 | | }\n-   | |_^\n+13 | fn bar<'a>() -> &'a mut u32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0597]: borrowed value does not live long enough (Mir)\n   --> $DIR/issue-46472.rs:14:10\n@@ -29,12 +25,8 @@ error[E0597]: borrowed value does not live long enough (Mir)\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:1...\n   --> $DIR/issue-46472.rs:13:1\n    |\n-13 | / fn bar<'a>() -> &'a mut u32 {\n-14 | |     &mut 4\n-15 | |     //~^ ERROR borrowed value does not live long enough (Ast) [E0597]\n-16 | |     //~| ERROR borrowed value does not live long enough (Mir) [E0597]\n-17 | | }\n-   | |_^\n+13 | fn bar<'a>() -> &'a mut u32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "24ba27b27ad368623eab3eeaa7398348fa4c6589", "filename": "src/test/ui/static-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fstatic-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e/src%2Ftest%2Fui%2Fstatic-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic-lifetime.stderr?ref=6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "patch": "@@ -8,7 +8,7 @@ note: lifetime parameter instantiated with the lifetime 'a as defined on the imp\n   --> $DIR/static-lifetime.rs:13:1\n    |\n 13 | impl<'a, A: Clone> Arbitrary for ::std::borrow::Cow<'a, A> {} //~ ERROR lifetime bound\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but lifetime parameter must outlive the static lifetime\n \n error: aborting due to previous error"}]}