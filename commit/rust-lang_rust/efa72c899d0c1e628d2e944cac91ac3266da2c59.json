{"sha": "efa72c899d0c1e628d2e944cac91ac3266da2c59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYTcyYzg5OWQwYzFlNjI4ZDJlOTQ0Y2FjOTFhYzMyNjZkYTJjNTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-15T12:15:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-15T12:15:09Z"}, "message": "Merge #3591\n\n3591: Support local macro_rules r=matklad a=edwin0cheng\n\nThis PR implement local `macro_rules` in function body, by adding following things:\r\n\r\n1. While lowering, add a `MacroDefId` in body's `ItemScope` as a textual legacy macro. \r\n2. Make `Expander::enter_expand` search with given `ItemScope`.\r\n3. Make `Resolver::resolve_path_as_macro` search with `LocalItemScope`.\r\n\r\nFix #2181\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "5ddbf69ebecbba36403358829ba63c22a3046dd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ddbf69ebecbba36403358829ba63c22a3046dd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efa72c899d0c1e628d2e944cac91ac3266da2c59", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJebhxNCRBK7hj4Ov3rIwAAdHIIAF+m2SZGNGhv2ai8DBLeORqM\n0e4XOewGRZuJTAb7HON8gWylMJInbclzLcz+PkGU2yrKKJVpP00mjCmLtbqRU/xG\nFM2+nk0C30BA0utPpOkB1lvIUFH/eapaS+ojsRJNyhXEvPq/bgZLvdNyxtnWi9L0\nf6HhLd/3728VQjYgraLvY9slLqH1/sQ4SBTCM+YsFTsdbAdoNyUNp7YkLnGIGNG9\n1J1DY7rpIezgGJ0/VruSexRYGj6x8kJMP9kZyHL74m3BddwifUu8r9A9uQi/n4Ft\npjykwHpUQIlHsyzC9s1/L4uOxYBRHGIOBnN7VrGnx4gJBZCRWDo04Btl5y7Ig38=\n=uSJ9\n-----END PGP SIGNATURE-----\n", "payload": "tree 5ddbf69ebecbba36403358829ba63c22a3046dd1\nparent 5429e6831c7a59425b37dec475f153848254a87d\nparent fe78a14bbb9769c8ccd5cc41415702f5176a8e88\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584274509 +0000\ncommitter GitHub <noreply@github.com> 1584274509 +0000\n\nMerge #3591\n\n3591: Support local macro_rules r=matklad a=edwin0cheng\n\nThis PR implement local `macro_rules` in function body, by adding following things:\r\n\r\n1. While lowering, add a `MacroDefId` in body's `ItemScope` as a textual legacy macro. \r\n2. Make `Expander::enter_expand` search with given `ItemScope`.\r\n3. Make `Resolver::resolve_path_as_macro` search with `LocalItemScope`.\r\n\r\nFix #2181\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efa72c899d0c1e628d2e944cac91ac3266da2c59", "html_url": "https://github.com/rust-lang/rust/commit/efa72c899d0c1e628d2e944cac91ac3266da2c59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efa72c899d0c1e628d2e944cac91ac3266da2c59/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5429e6831c7a59425b37dec475f153848254a87d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5429e6831c7a59425b37dec475f153848254a87d", "html_url": "https://github.com/rust-lang/rust/commit/5429e6831c7a59425b37dec475f153848254a87d"}, {"sha": "fe78a14bbb9769c8ccd5cc41415702f5176a8e88", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe78a14bbb9769c8ccd5cc41415702f5176a8e88", "html_url": "https://github.com/rust-lang/rust/commit/fe78a14bbb9769c8ccd5cc41415702f5176a8e88"}], "stats": {"total": 112, "additions": 96, "deletions": 16}, "files": [{"sha": "2bc405a59278b14050cd7785b770ddabbd00ee6b", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efa72c899d0c1e628d2e944cac91ac3266da2c59/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa72c899d0c1e628d2e944cac91ac3266da2c59/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=efa72c899d0c1e628d2e944cac91ac3266da2c59", "patch": "@@ -47,13 +47,19 @@ impl Expander {\n     pub(crate) fn enter_expand<T: ast::AstNode, DB: DefDatabase>(\n         &mut self,\n         db: &DB,\n+        local_scope: Option<&ItemScope>,\n         macro_call: ast::MacroCall,\n     ) -> Option<(Mark, T)> {\n         let macro_call = InFile::new(self.current_file_id, &macro_call);\n \n-        if let Some(call_id) =\n-            macro_call.as_call_id(db, |path| self.resolve_path_as_macro(db, &path))\n-        {\n+        if let Some(call_id) = macro_call.as_call_id(db, |path| {\n+            if let Some(local_scope) = local_scope {\n+                if let Some(def) = path.as_ident().and_then(|n| local_scope.get_legacy_macro(n)) {\n+                    return Some(def);\n+                }\n+            }\n+            self.resolve_path_as_macro(db, &path)\n+        }) {\n             let file_id = call_id.as_file();\n             if let Some(node) = db.parse_or_expand(file_id) {\n                 if let Some(expr) = T::cast(node) {"}, {"sha": "54b5591d31981c8523222e00bbac15b8ddce6821", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/efa72c899d0c1e628d2e944cac91ac3266da2c59/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa72c899d0c1e628d2e944cac91ac3266da2c59/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=efa72c899d0c1e628d2e944cac91ac3266da2c59", "patch": "@@ -3,7 +3,10 @@\n \n use either::Either;\n \n-use hir_expand::name::{name, AsName, Name};\n+use hir_expand::{\n+    name::{name, AsName, Name},\n+    MacroDefId, MacroDefKind,\n+};\n use ra_arena::Arena;\n use ra_syntax::{\n     ast::{\n@@ -452,19 +455,30 @@ where\n                     None => self.alloc_expr(Expr::Missing, syntax_ptr),\n                 }\n             }\n-            // FIXME expand to statements in statement position\n             ast::Expr::MacroCall(e) => {\n-                let macro_call = self.expander.to_source(AstPtr::new(&e));\n-                match self.expander.enter_expand(self.db, e) {\n-                    Some((mark, expansion)) => {\n-                        self.source_map\n-                            .expansions\n-                            .insert(macro_call, self.expander.current_file_id);\n-                        let id = self.collect_expr(expansion);\n-                        self.expander.exit(self.db, mark);\n-                        id\n+                if let Some(name) = is_macro_rules(&e) {\n+                    let mac = MacroDefId {\n+                        krate: Some(self.expander.module.krate),\n+                        ast_id: Some(self.expander.ast_id(&e)),\n+                        kind: MacroDefKind::Declarative,\n+                    };\n+                    self.body.item_scope.define_legacy_macro(name, mac);\n+\n+                    // FIXME: do we still need to allocate this as missing ?\n+                    self.alloc_expr(Expr::Missing, syntax_ptr)\n+                } else {\n+                    let macro_call = self.expander.to_source(AstPtr::new(&e));\n+                    match self.expander.enter_expand(self.db, Some(&self.body.item_scope), e) {\n+                        Some((mark, expansion)) => {\n+                            self.source_map\n+                                .expansions\n+                                .insert(macro_call, self.expander.current_file_id);\n+                            let id = self.collect_expr(expansion);\n+                            self.expander.exit(self.db, mark);\n+                            id\n+                        }\n+                        None => self.alloc_expr(Expr::Missing, syntax_ptr),\n                     }\n-                    None => self.alloc_expr(Expr::Missing, syntax_ptr),\n                 }\n             }\n \n@@ -686,6 +700,16 @@ where\n     }\n }\n \n+fn is_macro_rules(m: &ast::MacroCall) -> Option<Name> {\n+    let name = m.path()?.segment()?.name_ref()?.as_name();\n+\n+    if name == name![macro_rules] {\n+        Some(m.name()?.as_name())\n+    } else {\n+        None\n+    }\n+}\n+\n impl From<ast::BinOp> for BinaryOp {\n     fn from(ast_op: ast::BinOp) -> Self {\n         match ast_op {"}, {"sha": "c0b16b7fa9581e4360e59a90d9f1f044a48f4f59", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efa72c899d0c1e628d2e944cac91ac3266da2c59/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa72c899d0c1e628d2e944cac91ac3266da2c59/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=efa72c899d0c1e628d2e944cac91ac3266da2c59", "patch": "@@ -290,7 +290,7 @@ fn collect_impl_items_in_macro(\n         return Vec::new();\n     }\n \n-    if let Some((mark, items)) = expander.enter_expand(db, m) {\n+    if let Some((mark, items)) = expander.enter_expand(db, None, m) {\n         let items: InFile<ast::MacroItems> = expander.to_source(items);\n         let mut res = collect_impl_items(\n             db,"}, {"sha": "123fae72a13d379cf404a4d8c5125780e48b5896", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/efa72c899d0c1e628d2e944cac91ac3266da2c59/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa72c899d0c1e628d2e944cac91ac3266da2c59/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=efa72c899d0c1e628d2e944cac91ac3266da2c59", "patch": "@@ -381,6 +381,11 @@ impl Resolver {\n         db: &impl DefDatabase,\n         path: &ModPath,\n     ) -> Option<MacroDefId> {\n+        // Search item scope legacy macro first\n+        if let Some(def) = self.resolve_local_macro_def(path) {\n+            return Some(def);\n+        }\n+\n         let (item_map, module) = self.module_scope()?;\n         item_map.resolve_path(db, module, &path, BuiltinShadowMode::Other).0.take_macros()\n     }\n@@ -413,6 +418,16 @@ impl Resolver {\n         })\n     }\n \n+    fn resolve_local_macro_def(&self, path: &ModPath) -> Option<MacroDefId> {\n+        let name = path.as_ident()?;\n+        self.scopes.iter().rev().find_map(|scope| {\n+            if let Scope::LocalItemsScope(body) = scope {\n+                return body.item_scope.get_legacy_macro(name);\n+            }\n+            None\n+        })\n+    }\n+\n     pub fn module(&self) -> Option<ModuleId> {\n         let (def_map, local_id) = self.module_scope()?;\n         Some(ModuleId { krate: def_map.krate, local_id })"}, {"sha": "3b7022ad501eea2c023af8a6b38f4d362947338b", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/efa72c899d0c1e628d2e944cac91ac3266da2c59/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa72c899d0c1e628d2e944cac91ac3266da2c59/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=efa72c899d0c1e628d2e944cac91ac3266da2c59", "patch": "@@ -362,6 +362,26 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn infer_local_macro() {\n+    assert_snapshot!(\n+        infer(r#\"\n+fn main() {\n+    macro_rules! foo {\n+        () => { 1usize }\n+    }\n+    let _a  = foo!();\n+}\n+\"#),\n+        @r###\"\n+        ![0; 6) '1usize': usize\n+        [11; 90) '{     ...!(); }': ()\n+        [17; 66) 'macro_...     }': {unknown}\n+        [75; 77) '_a': usize\n+    \"###\n+    );\n+}\n+\n #[test]\n fn infer_builtin_macros_line() {\n     assert_snapshot!("}, {"sha": "a7be92ce3ebfe6e844d588e5d2ea88bd74b544e5", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/efa72c899d0c1e628d2e944cac91ac3266da2c59/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa72c899d0c1e628d2e944cac91ac3266da2c59/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=efa72c899d0c1e628d2e944cac91ac3266da2c59", "patch": "@@ -787,6 +787,21 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn goto_def_in_local_macro() {\n+        check_goto(\n+            \"\n+            //- /lib.rs            \n+            fn bar() {\n+                macro_rules! foo { () => { () } }\n+                <|>foo!();\n+            }\n+            \",\n+            \"foo MACRO_CALL FileId(1) [15; 48) [28; 31)\",\n+            \"macro_rules! foo { () => { () } }|foo\",\n+        );\n+    }\n+\n     #[test]\n     fn goto_def_for_field_init_shorthand() {\n         covers!(ra_ide_db::goto_def_for_field_init_shorthand);"}]}