{"sha": "84ce55e5427d0d36dbf6e330537175ab4162b6f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0Y2U1NWU1NDI3ZDBkMzZkYmY2ZTMzMDUzNzE3NWFiNDE2MmI2ZjI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-27T23:49:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-27T23:50:03Z"}, "message": "librustc: Fix some unresolved imports in the test runner. rs=bustage", "tree": {"sha": "b569f2c2ebd959b306d587851907cb4038eece0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b569f2c2ebd959b306d587851907cb4038eece0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84ce55e5427d0d36dbf6e330537175ab4162b6f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84ce55e5427d0d36dbf6e330537175ab4162b6f2", "html_url": "https://github.com/rust-lang/rust/commit/84ce55e5427d0d36dbf6e330537175ab4162b6f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84ce55e5427d0d36dbf6e330537175ab4162b6f2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c880d0ab7688af2cf5ed547019c22e10d81f7cb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c880d0ab7688af2cf5ed547019c22e10d81f7cb4", "html_url": "https://github.com/rust-lang/rust/commit/c880d0ab7688af2cf5ed547019c22e10d81f7cb4"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "adb0b659b144edd2dbf927aec491dc7e7e685319", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/84ce55e5427d0d36dbf6e330537175ab4162b6f2/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ce55e5427d0d36dbf6e330537175ab4162b6f2/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=84ce55e5427d0d36dbf6e330537175ab4162b6f2", "patch": "@@ -114,7 +114,10 @@ fn get_rpaths_relative_to_output(os: session::os,\n \n fn get_rpath_relative_to_output(os: session::os,\n                                 output: &Path,\n-                                lib: &Path) -> Path {\n+                                lib: &Path)\n+                             -> Path {\n+    use core::os;\n+\n     assert not_win32(os);\n \n     // Mac doesn't appear to support $ORIGIN\n@@ -197,6 +200,12 @@ fn minimize_rpaths(rpaths: &[Path]) -> ~[Path] {\n #[cfg(unix)]\n mod test {\n     #[legacy_exports];\n+\n+    use driver::session;\n+\n+    use core::os;\n+    use core::str;\n+\n     #[test]\n     fn test_rpaths_to_flags() {\n         let flags = rpaths_to_flags(~[Path(\"path1\"),"}, {"sha": "db15a572082184e3873fc23c24bdc00555ffb25d", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/84ce55e5427d0d36dbf6e330537175ab4162b6f2/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ce55e5427d0d36dbf6e330537175ab4162b6f2/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=84ce55e5427d0d36dbf6e330537175ab4162b6f2", "patch": "@@ -828,6 +828,11 @@ fn list_metadata(sess: Session, path: &Path, out: io::Writer) {\n mod test {\n     #[legacy_exports];\n \n+    use core::vec;\n+    use std::getopts;\n+    use syntax::attr;\n+    use syntax::diagnostic;\n+\n     // When the user supplies --test we should implicitly supply --cfg test\n     #[test]\n     fn test_switch_implies_cfg_test() {"}, {"sha": "8ea5052afaf716dc67e6739156b072c1e1683210", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84ce55e5427d0d36dbf6e330537175ab4162b6f2/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ce55e5427d0d36dbf6e330537175ab4162b6f2/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=84ce55e5427d0d36dbf6e330537175ab4162b6f2", "patch": "@@ -332,6 +332,7 @@ fn sess_os_to_meta_os(os: os) -> metadata::loader::os {\n #[cfg(test)]\n mod test {\n     #[legacy_exports];\n+    use syntax::ast;\n     use syntax::ast_util;\n \n     fn make_crate_type_attr(t: ~str) -> ast::attribute {"}, {"sha": "834b45f49449a6304d405cd79c7e1e0168ccea5a", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84ce55e5427d0d36dbf6e330537175ab4162b6f2/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ce55e5427d0d36dbf6e330537175ab4162b6f2/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=84ce55e5427d0d36dbf6e330537175ab4162b6f2", "patch": "@@ -238,7 +238,7 @@ fn nospan<T: Copy>(t: T) -> ast::spanned<T> {\n }\n \n fn path_node(ids: ~[ast::ident]) -> @ast::path {\n-    @{span: dummy_sp(), global: false, idents: ids, rp: None, types: ~[]}\n+    @{span: dummy_sp(), global: true, idents: ids, rp: None, types: ~[]}\n }\n \n fn mk_tests(cx: test_ctxt) -> @ast::item {"}, {"sha": "3a308011e75bb8b8a0c09812820bdf90220ff9bc", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/84ce55e5427d0d36dbf6e330537175ab4162b6f2/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ce55e5427d0d36dbf6e330537175ab4162b6f2/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=84ce55e5427d0d36dbf6e330537175ab4162b6f2", "patch": "@@ -23,12 +23,13 @@ use middle::{ty, typeck};\n use middle;\n use util::ppaux::ty_to_str;\n \n-use core::{dvec, option, vec};\n+use core::{dvec, io, option, vec};\n use std::ebml::reader::get_doc;\n use std::ebml::reader;\n use std::ebml::writer::Encoder;\n use std::ebml;\n use std::map::HashMap;\n+use std::prettyprint;\n use std::serialize;\n use std::serialize::{Encodable, EncoderHelpers, DecoderHelpers};\n use std::serialize::Decodable;\n@@ -1071,10 +1072,10 @@ fn roundtrip(in_item: Option<@ast::item>) {\n     let out_item = decode_item_ast(ebml_doc);\n \n     let exp_str = do io::with_str_writer |w| {\n-        in_item.encode(&std::prettyprint::Encoder(w))\n+        in_item.encode(&prettyprint::Serializer(w))\n     };\n     let out_str = do io::with_str_writer |w| {\n-        out_item.encode(&std::prettyprint::Encoder(w))\n+        out_item.encode(&prettyprint::Serializer(w))\n     };\n \n     debug!(\"expected string: %s\", exp_str);"}]}