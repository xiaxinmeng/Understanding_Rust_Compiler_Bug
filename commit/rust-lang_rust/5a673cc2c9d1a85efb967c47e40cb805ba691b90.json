{"sha": "5a673cc2c9d1a85efb967c47e40cb805ba691b90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNjczY2MyYzlkMWE4NWVmYjk2N2M0N2U0MGNiODA1YmE2OTFiOTA=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-30T00:53:02Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-01T22:58:30Z"}, "message": "Started working on a library-based comm system. Creating and deleting ports work.", "tree": {"sha": "926fbb808cf086615378dfe86129270330c2e7d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/926fbb808cf086615378dfe86129270330c2e7d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a673cc2c9d1a85efb967c47e40cb805ba691b90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a673cc2c9d1a85efb967c47e40cb805ba691b90", "html_url": "https://github.com/rust-lang/rust/commit/5a673cc2c9d1a85efb967c47e40cb805ba691b90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a673cc2c9d1a85efb967c47e40cb805ba691b90/comments", "author": null, "committer": null, "parents": [{"sha": "7a05f1db7cb85ead062d6a7dde566f6e3010f2f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a05f1db7cb85ead062d6a7dde566f6e3010f2f2", "html_url": "https://github.com/rust-lang/rust/commit/7a05f1db7cb85ead062d6a7dde566f6e3010f2f2"}], "stats": {"total": 195, "additions": 176, "deletions": 19}, "files": [{"sha": "7fcac262a5c12250c3caf8014c33e66e5e797d3b", "filename": "src/lib/comm.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5a673cc2c9d1a85efb967c47e40cb805ba691b90/src%2Flib%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a673cc2c9d1a85efb967c47e40cb805ba691b90/src%2Flib%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fcomm.rs?ref=5a673cc2c9d1a85efb967c47e40cb805ba691b90", "patch": "@@ -0,0 +1,48 @@\n+import sys;\n+\n+export _chan;\n+export _port;\n+\n+export mk_port;\n+export mk_chan;\n+\n+native \"rust\" mod rustrt {\n+    type rust_chan;\n+    type rust_port;\n+\n+    fn new_chan(po : *rust_port) -> *rust_chan;\n+    fn del_chan(ch : *rust_chan);\n+    fn drop_chan(ch : *rust_chan);\n+\n+    fn new_port(unit_sz : uint) -> *rust_port;\n+    fn del_port(po : *rust_port);\n+    fn drop_port(po : *rust_port);\n+}\n+\n+resource chan_ptr(ch: *rustrt::rust_chan) {\n+    rustrt::drop_chan(ch);\n+    rustrt::drop_chan(ch); // FIXME: We shouldn't have to do this\n+                           // twice.\n+    rustrt::del_chan(ch);\n+}\n+\n+tag _chan[T] { _chan(@chan_dtor); }\n+\n+resource port_ptr(po: *rustrt::rust_port) {\n+    rustrt::drop_port(po);\n+    rustrt::del_port(po);\n+}\n+\n+tag _port[T] { _port(@port_dtor); }\n+\n+fn mk_port[T]() -> _port[T] {\n+    _port(@port_dtor(rustrt::new_port(sys::size_of[T]())))\n+}\n+\n+fn mk_chan[T](po : &_port[T]) -> _chan[T] {\n+    alt po {\n+      _port(_po) {\n+        _chan(@chan_dtor(rustrt::new_chan(**_po)))\n+      }\n+    }\n+}"}, {"sha": "822997149626dd2611236fbb49fec876ffa83175", "filename": "src/lib/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a673cc2c9d1a85efb967c47e40cb805ba691b90/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5a673cc2c9d1a85efb967c47e40cb805ba691b90/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=5a673cc2c9d1a85efb967c47e40cb805ba691b90", "patch": "@@ -23,6 +23,7 @@ mod io;\n mod ioivec;\n mod sys;\n mod task;\n+mod comm;\n \n // Utility modules.\n "}, {"sha": "143a0b22f73eac94a200f47326090b2ca16cb3eb", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5a673cc2c9d1a85efb967c47e40cb805ba691b90/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5a673cc2c9d1a85efb967c47e40cb805ba691b90/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=5a673cc2c9d1a85efb967c47e40cb805ba691b90", "patch": "@@ -868,6 +868,53 @@ sched_threads(rust_task *task) {\n     return task->kernel->num_threads;\n }\n \n+extern \"C\" CDECL rust_port*\n+new_port(rust_task *task, size_t unit_sz) {\n+    LOG(task, comm, \"new_port(task=0x%\" PRIxPTR \" (%s), unit_sz=%d)\",\n+        (uintptr_t) task, task->name, unit_sz);\n+    // take a reference on behalf of the port\n+    task->ref();\n+    return new (task->kernel, \"rust_port\") rust_port(task, unit_sz);\n+}\n+\n+extern \"C\" CDECL void\n+del_port(rust_task *task, rust_port *port) {\n+    LOG(task, comm, \"del_port(0x%\" PRIxPTR \")\", (uintptr_t) port);\n+    I(task->sched, !port->ref_count);\n+    delete port;\n+\n+    // FIXME: this should happen in the port.\n+    task->deref();\n+}\n+\n+extern \"C\" CDECL rust_chan*\n+new_chan(rust_task *task, rust_port *port) {\n+    rust_scheduler *sched = task->sched;\n+    LOG(task, comm, \"new_chan(\"\n+        \"task=0x%\" PRIxPTR \" (%s), port=0x%\" PRIxPTR \")\",\n+        (uintptr_t) task, task->name, port);\n+    I(sched, port);\n+    return new (task->kernel, \"rust_chan\")\n+        rust_chan(task->kernel, port, port->unit_sz);\n+}\n+\n+extern \"C\" CDECL\n+void del_chan(rust_task *task, rust_chan *chan) {\n+    LOG(task, comm, \"del_chan(0x%\" PRIxPTR \")\", (uintptr_t) chan);\n+    chan->destroy();\n+}\n+\n+extern \"C\" CDECL\n+void drop_chan(rust_task *task, rust_chan *chan) {\n+    chan->ref_count--;\n+}\n+\n+extern \"C\" CDECL\n+void drop_port(rust_task *, rust_port *port) {\n+    port->ref_count--;\n+>>>>>>> Started working on a library-based comm system. Creating and deleting ports work.\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "c8d71165a8a3e82c4606d51568c6f4f0c0830678", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5a673cc2c9d1a85efb967c47e40cb805ba691b90/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5a673cc2c9d1a85efb967c47e40cb805ba691b90/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=5a673cc2c9d1a85efb967c47e40cb805ba691b90", "patch": "@@ -95,40 +95,33 @@ upcall_trace_str(rust_task *task, char const *c) {\n     task->sched->log(task, 2, \"trace: %s\", c);\n }\n \n+extern \"C\" CDECL rust_port*\n+new_port(rust_task *task, size_t unit_sz);\n extern \"C\" CDECL rust_port*\n upcall_new_port(rust_task *task, size_t unit_sz) {\n     LOG_UPCALL_ENTRY(task);\n     LOG(task, comm, \"upcall_new_port(task=0x%\" PRIxPTR \" (%s), unit_sz=%d)\",\n         (uintptr_t) task, task->name, unit_sz);\n-    // take a reference on behalf of the port\n-    task->ref();\n-    return new (task->kernel, \"rust_port\") rust_port(task, unit_sz);\n+    return new_port(task, unit_sz);\n }\n \n+extern \"C\" CDECL void\n+del_port(rust_task *task, rust_port *port);\n extern \"C\" CDECL void\n upcall_del_port(rust_task *task, rust_port *port) {\n     LOG_UPCALL_ENTRY(task);\n-    LOG(task, comm, \"upcall del_port(0x%\" PRIxPTR \")\", (uintptr_t) port);\n-    I(task->sched, !port->ref_count);\n-    delete port;\n-\n-    // FIXME: this should happen in the port.\n-    task->deref();\n+    return del_port(task, port);\n }\n \n /**\n  * Creates a new channel pointing to a given port.\n  */\n extern \"C\" CDECL rust_chan*\n+new_chan(rust_task *task, rust_port *port);\n+extern \"C\" CDECL rust_chan*\n upcall_new_chan(rust_task *task, rust_port *port) {\n     LOG_UPCALL_ENTRY(task);\n-    rust_scheduler *sched = task->sched;\n-    LOG(task, comm, \"upcall_new_chan(\"\n-        \"task=0x%\" PRIxPTR \" (%s), port=0x%\" PRIxPTR \")\",\n-        (uintptr_t) task, task->name, port);\n-    I(sched, port);\n-    return new (task->kernel, \"rust_chan\")\n-        rust_chan(task->kernel, port, port->unit_sz);\n+    return new_chan(task, port);\n }\n \n /**\n@@ -148,11 +141,11 @@ upcall_flush_chan(rust_task *task, rust_chan *chan) {\n  * appear to be live, causing modify-after-free errors.\n  */\n extern \"C\" CDECL\n+void del_chan(rust_task *task, rust_chan *chan);\n+extern \"C\" CDECL\n void upcall_del_chan(rust_task *task, rust_chan *chan) {\n     LOG_UPCALL_ENTRY(task);\n-\n-    LOG(task, comm, \"upcall del_chan(0x%\" PRIxPTR \")\", (uintptr_t) chan);\n-    chan->destroy();\n+    del_chan(task, chan);\n }\n \n /**"}, {"sha": "49e2cbc9c1e553392bd6925ef72d288484b219c2", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a673cc2c9d1a85efb967c47e40cb805ba691b90/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/5a673cc2c9d1a85efb967c47e40cb805ba691b90/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=5a673cc2c9d1a85efb967c47e40cb805ba691b90", "patch": "@@ -5,11 +5,15 @@ debug_box\n debug_fn\n debug_obj\n debug_opaque\n+del_chan\n+del_port\n debug_ptrcast\n debug_tag\n debug_trap\n debug_tydesc\n do_gc\n+drop_chan\n+drop_port\n get_time\n hack_allow_leaks\n ivec_copy_from_buf\n@@ -20,6 +24,8 @@ ivec_reserve_shared\n ivec_to_ptr\n last_os_error\n nano_time\n+new_chan\n+new_port\n pin_task\n unpin_task\n rand_free"}, {"sha": "5c05b16ce62dcab39f63e8627b0f78d9946fd8e5", "filename": "src/test/run-pass/task-comm-chan-chan.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5a673cc2c9d1a85efb967c47e40cb805ba691b90/src%2Ftest%2Frun-pass%2Ftask-comm-chan-chan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a673cc2c9d1a85efb967c47e40cb805ba691b90/src%2Ftest%2Frun-pass%2Ftask-comm-chan-chan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-chan.rs?ref=5a673cc2c9d1a85efb967c47e40cb805ba691b90", "patch": "@@ -0,0 +1,53 @@\n+// xfail-stage0\n+// xfail-stage1\n+// xfail-stage2\n+// xfail-stage3\n+\n+// Test case for issue #763, provided by robarnold.\n+\n+use std;\n+import std::task;\n+\n+tag request {\n+  quit;\n+  close(int, chan[bool]);\n+}\n+\n+type ctx = chan[request];\n+\n+fn request_task(c : chan[ctx]) {\n+    let p = port();\n+    c <| chan(p);\n+    let req;\n+    while (true) {\n+        p |> req;\n+        alt (req) {\n+            quit. {\n+                ret;\n+            }\n+            close(what, status) {\n+                log \"closing now\";\n+                log what;\n+                status <| true;\n+            }\n+        }\n+    }\n+}\n+\n+fn new() -> ctx {\n+    let p = port();\n+    let t = spawn request_task(chan(p));\n+    let cx;\n+    p |> cx;\n+    ret cx;\n+}\n+\n+fn main() {\n+    let cx = new();\n+\n+    let p = port();\n+    cx <| close(4, chan(p));\n+    let result;\n+    p |> result;\n+    cx <| quit;\n+}"}, {"sha": "040593be9ba7dacfddee01bcacde4037ec6c716d", "filename": "src/test/stdtest/comm.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a673cc2c9d1a85efb967c47e40cb805ba691b90/src%2Ftest%2Fstdtest%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a673cc2c9d1a85efb967c47e40cb805ba691b90/src%2Ftest%2Fstdtest%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fcomm.rs?ref=5a673cc2c9d1a85efb967c47e40cb805ba691b90", "patch": "@@ -0,0 +1,8 @@\n+use std;\n+import std::comm;\n+\n+#[test]\n+fn create_port_and_chan() {\n+    let p = comm::mk_port[int]();\n+    let c = comm::mk_chan(p);\n+}"}, {"sha": "bdce3b5ec5323346612faa453551d4906c52fc26", "filename": "src/test/stdtest/stdtest.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a673cc2c9d1a85efb967c47e40cb805ba691b90/src%2Ftest%2Fstdtest%2Fstdtest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5a673cc2c9d1a85efb967c47e40cb805ba691b90/src%2Ftest%2Fstdtest%2Fstdtest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fstdtest.rc?ref=5a673cc2c9d1a85efb967c47e40cb805ba691b90", "patch": "@@ -2,6 +2,7 @@ use std;\n \n mod bitv;\n mod box;\n+mod comm;\n mod deque;\n mod either;\n mod fs;"}]}