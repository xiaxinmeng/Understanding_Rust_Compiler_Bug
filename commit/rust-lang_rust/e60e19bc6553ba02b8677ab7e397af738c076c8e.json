{"sha": "e60e19bc6553ba02b8677ab7e397af738c076c8e", "node_id": "C_kwDOAAsO6NoAKGU2MGUxOWJjNjU1M2JhMDJiODY3N2FiN2UzOTdhZjczOGMwNzZjOGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-04T00:39:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-04T00:39:21Z"}, "message": "Auto merge of #90179 - Nilstrieb:lifetime-elision-mismatch-hint, r=estebank\n\nAdd beginner friendly lifetime elision hint to E0623\n\nAddress #90170\n\nSuggest adding a new lifetime parameter when two elided lifetimes should match up but don't.\n\nExample:\n\n```\nerror[E0623]: lifetime mismatch\n  --> $DIR/issue-90170-elision-mismatch.rs:2:35\n   |\nLL | fn foo(slice_a: &mut [u8], slice_b: &mut [u8]) {\n   |                 ---------           --------- these two types are declared with different lifetimes...\nLL |     core::mem::swap(&mut slice_a, &mut slice_b);\n   |                                   ^^^^^^^^^^^^ ...but data from `slice_b` flows into `slice_a` here\n   |\n   = note: each elided lifetime in input position becomes a distinct lifetime\nhelp: explicitly declare a lifetime and assign it to both\n   |\nLL | fn foo<'a>(slice_a: &'a mut [u8], slice_b: &'a mut [u8]) {\n   |       ++++           ++                     ++\n\n```\n\nfor\n\n```rust\nfn foo(slice_a: &mut [u8], slice_b: &mut [u8]) {\n    core::mem::swap(&mut slice_a, &mut slice_b);\n}\n```", "tree": {"sha": "da08a858037b6a1563eb8b11e61867199f74d116", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da08a858037b6a1563eb8b11e61867199f74d116"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e60e19bc6553ba02b8677ab7e397af738c076c8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e60e19bc6553ba02b8677ab7e397af738c076c8e", "html_url": "https://github.com/rust-lang/rust/commit/e60e19bc6553ba02b8677ab7e397af738c076c8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e60e19bc6553ba02b8677ab7e397af738c076c8e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ff90232a0c0c6adb9d2052da2206b26c3c723e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff90232a0c0c6adb9d2052da2206b26c3c723e4", "html_url": "https://github.com/rust-lang/rust/commit/4ff90232a0c0c6adb9d2052da2206b26c3c723e4"}, {"sha": "4b9e4606cb5c184a142ed34acf6f5baefd2b27f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9e4606cb5c184a142ed34acf6f5baefd2b27f5", "html_url": "https://github.com/rust-lang/rust/commit/4b9e4606cb5c184a142ed34acf6f5baefd2b27f5"}], "stats": {"total": 228, "additions": 220, "deletions": 8}, "files": [{"sha": "ac57796763fb3cf30082f085707e5428cdd6785e", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 86, "deletions": 8, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/e60e19bc6553ba02b8677ab7e397af738c076c8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60e19bc6553ba02b8677ab7e397af738c076c8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=e60e19bc6553ba02b8677ab7e397af738c076c8e", "patch": "@@ -7,7 +7,10 @@ use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::SubregionOrigin;\n \n-use rustc_errors::{struct_span_err, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n+use rustc_hir as hir;\n+use rustc_hir::{GenericParamKind, Ty};\n+use rustc_middle::ty::Region;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when both the concerned regions are anonymous.\n@@ -160,11 +163,13 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 }\n             };\n \n-        let mut e = struct_span_err!(self.tcx().sess, span, E0623, \"lifetime mismatch\");\n+        let mut err = struct_span_err!(self.tcx().sess, span, E0623, \"lifetime mismatch\");\n \n-        e.span_label(span_1, main_label);\n-        e.span_label(span_2, String::new());\n-        e.span_label(span, span_label);\n+        err.span_label(span_1, main_label);\n+        err.span_label(span_2, String::new());\n+        err.span_label(span, span_label);\n+\n+        self.suggest_adding_lifetime_params(sub, ty_sup, ty_sub, &mut err);\n \n         if let Some(t) = future_return_type {\n             let snip = self\n@@ -178,14 +183,87 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     (_, \"\") => None,\n                     _ => Some(s),\n                 })\n-                .unwrap_or(\"{unnamed_type}\".to_string());\n+                .unwrap_or_else(|| \"{unnamed_type}\".to_string());\n \n-            e.span_label(\n+            err.span_label(\n                 t.span,\n                 &format!(\"this `async fn` implicitly returns an `impl Future<Output = {}>`\", snip),\n             );\n         }\n-        e.emit();\n+        err.emit();\n         Some(ErrorReported)\n     }\n+\n+    fn suggest_adding_lifetime_params(\n+        &self,\n+        sub: Region<'tcx>,\n+        ty_sup: &Ty<'_>,\n+        ty_sub: &Ty<'_>,\n+        err: &mut DiagnosticBuilder<'_>,\n+    ) {\n+        if let (\n+            hir::Ty { kind: hir::TyKind::Rptr(lifetime_sub, _), .. },\n+            hir::Ty { kind: hir::TyKind::Rptr(lifetime_sup, _), .. },\n+        ) = (ty_sub, ty_sup)\n+        {\n+            if lifetime_sub.name.is_elided() && lifetime_sup.name.is_elided() {\n+                if let Some(anon_reg) = self.tcx().is_suitable_region(sub) {\n+                    let hir_id = self.tcx().hir().local_def_id_to_hir_id(anon_reg.def_id);\n+                    if let hir::Node::Item(&hir::Item {\n+                        kind: hir::ItemKind::Fn(_, ref generics, ..),\n+                        ..\n+                    }) = self.tcx().hir().get(hir_id)\n+                    {\n+                        let (suggestion_param_name, introduce_new) = generics\n+                            .params\n+                            .iter()\n+                            .find(|p| matches!(p.kind, GenericParamKind::Lifetime { .. }))\n+                            .and_then(|p| self.tcx().sess.source_map().span_to_snippet(p.span).ok())\n+                            .map(|name| (name, false))\n+                            .unwrap_or_else(|| (\"'a\".to_string(), true));\n+\n+                        let mut suggestions = vec![\n+                            if let hir::LifetimeName::Underscore = lifetime_sub.name {\n+                                (lifetime_sub.span, suggestion_param_name.clone())\n+                            } else {\n+                                (\n+                                    lifetime_sub.span.shrink_to_hi(),\n+                                    suggestion_param_name.clone() + \" \",\n+                                )\n+                            },\n+                            if let hir::LifetimeName::Underscore = lifetime_sup.name {\n+                                (lifetime_sup.span, suggestion_param_name.clone())\n+                            } else {\n+                                (\n+                                    lifetime_sup.span.shrink_to_hi(),\n+                                    suggestion_param_name.clone() + \" \",\n+                                )\n+                            },\n+                        ];\n+\n+                        if introduce_new {\n+                            let new_param_suggestion = match &generics.params {\n+                                [] => (generics.span, format!(\"<{}>\", suggestion_param_name)),\n+                                [first, ..] => (\n+                                    first.span.shrink_to_lo(),\n+                                    format!(\"{}, \", suggestion_param_name),\n+                                ),\n+                            };\n+\n+                            suggestions.push(new_param_suggestion);\n+                        }\n+\n+                        err.multipart_suggestion(\n+                            \"consider introducing a named lifetime parameter\",\n+                            suggestions,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        err.note(\n+                            \"each elided lifetime in input position becomes a distinct lifetime\",\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    }\n }"}, {"sha": "0bc889ee721dc44583d95471e1ac044dc054a7f5", "filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.fixed?ref=e60e19bc6553ba02b8677ab7e397af738c076c8e", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+pub fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); } //~ ERROR lifetime mismatch\n+\n+pub fn foo2<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); } //~ ERROR lifetime mismatch\n+\n+pub fn foo3<'a>(_other: &'a [u8], x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); } //~ ERROR lifetime mismatch\n+\n+fn main() {}"}, {"sha": "a5bc7450bbff075acde9234ba685ae230b3832b3", "filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch.nll.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.nll.stderr?ref=e60e19bc6553ba02b8677ab7e397af738c076c8e", "patch": "@@ -0,0 +1,29 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-90170-elision-mismatch.rs:3:40\n+   |\n+LL | pub fn foo(x: &mut Vec<&u8>, y: &u8) { x.push(y); }\n+   |                        -        -      ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |                        |        |\n+   |                        |        let's call the lifetime of this reference `'1`\n+   |                        let's call the lifetime of this reference `'2`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-90170-elision-mismatch.rs:5:44\n+   |\n+LL | pub fn foo2(x: &mut Vec<&'_ u8>, y: &u8) { x.push(y); }\n+   |                         -           -      ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |                         |           |\n+   |                         |           let's call the lifetime of this reference `'1`\n+   |                         let's call the lifetime of this reference `'2`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-90170-elision-mismatch.rs:7:63\n+   |\n+LL | pub fn foo3<'a>(_other: &'a [u8], x: &mut Vec<&u8>, y: &u8) { x.push(y); }\n+   |                                               -        -      ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |                                               |        |\n+   |                                               |        let's call the lifetime of this reference `'1`\n+   |                                               let's call the lifetime of this reference `'2`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "1d6573c00ad4f4e578ca82965aa2d347a307be26", "filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.rs?ref=e60e19bc6553ba02b8677ab7e397af738c076c8e", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+pub fn foo(x: &mut Vec<&u8>, y: &u8) { x.push(y); } //~ ERROR lifetime mismatch\n+\n+pub fn foo2(x: &mut Vec<&'_ u8>, y: &u8) { x.push(y); } //~ ERROR lifetime mismatch\n+\n+pub fn foo3<'a>(_other: &'a [u8], x: &mut Vec<&u8>, y: &u8) { x.push(y); } //~ ERROR lifetime mismatch\n+\n+fn main() {}"}, {"sha": "7fa092ca220c2f6a6613116af7fcf4273be63359", "filename": "src/test/ui/lifetimes/issue-90170-elision-mismatch.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90170-elision-mismatch.stderr?ref=e60e19bc6553ba02b8677ab7e397af738c076c8e", "patch": "@@ -0,0 +1,45 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/issue-90170-elision-mismatch.rs:3:47\n+   |\n+LL | pub fn foo(x: &mut Vec<&u8>, y: &u8) { x.push(y); }\n+   |                        ---      ---           ^ ...but data from `y` flows into `x` here\n+   |                                 |\n+   |                                 these two types are declared with different lifetimes...\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | pub fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); }\n+   |           ++++              ++          ++\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/issue-90170-elision-mismatch.rs:5:51\n+   |\n+LL | pub fn foo2(x: &mut Vec<&'_ u8>, y: &u8) { x.push(y); }\n+   |                         ------      ---           ^ ...but data from `y` flows into `x` here\n+   |                                     |\n+   |                                     these two types are declared with different lifetimes...\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | pub fn foo2<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); }\n+   |            ++++              ~~          ++\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/issue-90170-elision-mismatch.rs:7:70\n+   |\n+LL | pub fn foo3<'a>(_other: &'a [u8], x: &mut Vec<&u8>, y: &u8) { x.push(y); }\n+   |                                               ---      ---           ^ ...but data from `y` flows into `x` here\n+   |                                                        |\n+   |                                                        these two types are declared with different lifetimes...\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | pub fn foo3<'a>(_other: &'a [u8], x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); }\n+   |                                                ++          ++\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "5c793636778ea2c9505bcb81e5f4416c5e7bf838", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr?ref=e60e19bc6553ba02b8677ab7e397af738c076c8e", "patch": "@@ -5,6 +5,12 @@ LL | fn foo(&mut (ref mut v, w): &mut (&u8, &u8), x: &u8) {\n    |                                   ---           --- these two types are declared with different lifetimes...\n LL |     *v = x;\n    |          ^ ...but data from `x` flows here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn foo<'a>(&mut (ref mut v, w): &mut (&'a u8, &u8), x: &'a u8) {\n+   |       ++++                             ++               ++\n \n error: aborting due to previous error\n "}, {"sha": "1a7b4fca1ba7846729a02f714d3d06597142675f", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-3.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.stderr?ref=e60e19bc6553ba02b8677ab7e397af738c076c8e", "patch": "@@ -5,6 +5,12 @@ LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n    |                     ---                 --- these two types are declared with different lifetimes...\n LL |     z.push((x,y));\n    |             ^ ...but data flows into `z` here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn foo<'a>(z: &mut Vec<(&'a u8,&u8)>, (x, y): (&'a u8, &u8)) {\n+   |       ++++               ++                     ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ex3-both-anon-regions-3.rs:2:15\n@@ -13,6 +19,12 @@ LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n    |                         ---                  --- these two types are declared with different lifetimes...\n LL |     z.push((x,y));\n    |               ^ ...but data flows into `z` here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn foo<'a>(z: &mut Vec<(&u8,&'a u8)>, (x, y): (&u8, &'a u8)) {\n+   |       ++++                   ++                      ++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6ed3528bb9faac790382bea6d763496425066ea0", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-fn-items.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.stderr?ref=e60e19bc6553ba02b8677ab7e397af738c076c8e", "patch": "@@ -5,6 +5,12 @@ LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n    |                               ---      --- these two types are declared with different lifetimes...\n LL |   y.push(z);\n    |          ^ ...but data from `z` flows into `y` here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn foo<'a>(x:fn(&u8, &u8), y: Vec<&'a u8>, z: &'a u8) {\n+   |       ++++                         ++          ++\n \n error: aborting due to previous error\n "}, {"sha": "ede1631db271c46593a8f68186fabb5a7a988984", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-trait-objects.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr?ref=e60e19bc6553ba02b8677ab7e397af738c076c8e", "patch": "@@ -5,6 +5,12 @@ LL | fn foo(x:Box<dyn Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n    |                     ---  --- these two types are declared with different lifetimes...\n LL |   y.push(z);\n    |          ^ ...but data from `z` flows into `y` here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn foo<'a>(x:Box<dyn Fn(&'a u8, &'a u8)> , y: Vec<&u8>, z: &u8) {\n+   |       ++++               ++      ++\n \n error: aborting due to previous error\n "}, {"sha": "cf405c0de3f0b40924f451f4cc424696217ec7de", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.stderr?ref=e60e19bc6553ba02b8677ab7e397af738c076c8e", "patch": "@@ -5,6 +5,12 @@ LL | fn foo(x: &mut Vec<&u8>, y: &u8) {\n    |                    ---      --- these two types are declared with different lifetimes...\n LL |     x.push(y);\n    |            ^ ...but data from `y` flows into `x` here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) {\n+   |       ++++              ++          ++\n \n error: aborting due to previous error\n "}, {"sha": "8976da01e739beba94204208bf2482f6543e3b42", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-elison-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60e19bc6553ba02b8677ab7e397af738c076c8e/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.stderr?ref=e60e19bc6553ba02b8677ab7e397af738c076c8e", "patch": "@@ -5,6 +5,12 @@ LL | fn foo(x: &mut Vec<&'_ u8>, y: &'_ u8) { x.push(y); }\n    |                    ------      ------           ^ ...but data from `y` flows into `x` here\n    |                                |\n    |                                these two types are declared with different lifetimes...\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) { x.push(y); }\n+   |       ++++              ~~          ~~\n \n error: aborting due to previous error\n "}]}