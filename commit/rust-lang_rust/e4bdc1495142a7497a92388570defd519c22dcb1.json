{"sha": "e4bdc1495142a7497a92388570defd519c22dcb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YmRjMTQ5NTE0MmE3NDk3YTkyMzg4NTcwZGVmZDUxOWMyMmRjYjE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-31T17:07:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-31T17:07:37Z"}, "message": "Merge #4674\n\n4674: Recursively search submodules to find modules in which a definition is visible. r=matklad a=umanwizard\n\n\n\nCo-authored-by: Brennan Vincent <brennan@materialize.io>", "tree": {"sha": "63be567a0e5c2f42d71bcdb4281f3390f18b909a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63be567a0e5c2f42d71bcdb4281f3390f18b909a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4bdc1495142a7497a92388570defd519c22dcb1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0+RZCRBK7hj4Ov3rIwAAdHIIAAPkzaM8NbzM5phue5fKkfoq\nQwDoR6ART5uExwRAvGW3Srj7yfBRyzeYEQeoz0yMnnKIYAIB2YIv0m1DfeuM0BYo\n7ehxMV3Sx720OimhUJr0CgZevrpfj5oQVFiMQPoMUiH/OICWGcaVW1PvbYcOqT1o\nUHSnmAn4SqoKtxH5n6A5p18oWOjf8D0YHUPSbUgraTg0wOXaHJuIUzGAqE9HNeZu\nhbGaxw5foZJm7WyAEh3VqtHiwSvLZbUQMiff/NR0Gs4SeukoWYfjxC1J8GrALiWu\nd2a34EhOIibsR/yC0hmTVEYmXu1x9yQhVdk9vwtsu/u/S1tXW4++adjbji92hJ4=\n=p7Hd\n-----END PGP SIGNATURE-----\n", "payload": "tree 63be567a0e5c2f42d71bcdb4281f3390f18b909a\nparent 9feb15e6a2ab6903769e9ad2d4e7c4006e80c501\nparent d39cbeef9181ebb5a81dd9aec1a38033bb16da93\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1590944857 +0000\ncommitter GitHub <noreply@github.com> 1590944857 +0000\n\nMerge #4674\n\n4674: Recursively search submodules to find modules in which a definition is visible. r=matklad a=umanwizard\n\n\n\nCo-authored-by: Brennan Vincent <brennan@materialize.io>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4bdc1495142a7497a92388570defd519c22dcb1", "html_url": "https://github.com/rust-lang/rust/commit/e4bdc1495142a7497a92388570defd519c22dcb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4bdc1495142a7497a92388570defd519c22dcb1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9feb15e6a2ab6903769e9ad2d4e7c4006e80c501", "url": "https://api.github.com/repos/rust-lang/rust/commits/9feb15e6a2ab6903769e9ad2d4e7c4006e80c501", "html_url": "https://github.com/rust-lang/rust/commit/9feb15e6a2ab6903769e9ad2d4e7c4006e80c501"}, {"sha": "d39cbeef9181ebb5a81dd9aec1a38033bb16da93", "url": "https://api.github.com/repos/rust-lang/rust/commits/d39cbeef9181ebb5a81dd9aec1a38033bb16da93", "html_url": "https://github.com/rust-lang/rust/commit/d39cbeef9181ebb5a81dd9aec1a38033bb16da93"}], "stats": {"total": 67, "additions": 49, "deletions": 18}, "files": [{"sha": "bb40d2043786ce4434fae04d324b901c660a7d9e", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e4bdc1495142a7497a92388570defd519c22dcb1/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4bdc1495142a7497a92388570defd519c22dcb1/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=e4bdc1495142a7497a92388570defd519c22dcb1", "patch": "@@ -615,6 +615,33 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_find_all_refs_nested_module() {\n+        let code = r#\"\n+            //- /lib.rs\n+            mod foo {\n+                mod bar;\n+            }\n+\n+            fn f<|>() {}\n+\n+            //- /foo/bar.rs\n+            use crate::f;\n+\n+            fn g() {\n+                f();\n+            }\n+        \"#;\n+\n+        let (analysis, pos) = analysis_and_position(code);\n+        let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n+        check_result(\n+            refs,\n+            \"f FN_DEF FileId(1) 25..34 28..29 Other\",\n+            &[\"FileId(2) 11..12 Other\", \"FileId(2) 27..28 StructLiteral\"],\n+        );\n+    }\n+\n     fn get_all_refs(text: &str) -> ReferenceSearchResult {\n         let (analysis, position) = single_file_with_position(text);\n         analysis.find_all_refs(position, None).unwrap().unwrap()"}, {"sha": "335a1ad03c7bba3dfa1fd4c4edbcb6ce86cb0442", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e4bdc1495142a7497a92388570defd519c22dcb1/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4bdc1495142a7497a92388570defd519c22dcb1/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=e4bdc1495142a7497a92388570defd519c22dcb1", "patch": "@@ -124,29 +124,33 @@ impl Definition {\n \n         let vis = self.visibility(db);\n \n-        // FIXME:\n-        // The following logic are wrong that it does not search\n-        // for submodules within other files recursively.\n-\n         if let Some(Visibility::Module(module)) = vis.and_then(|it| it.into()) {\n             let module: Module = module.into();\n             let mut res = FxHashMap::default();\n-            let src = module.definition_source(db);\n-            let file_id = src.file_id.original_file(db);\n \n-            match src.value {\n-                ModuleSource::Module(m) => {\n-                    let range = Some(m.syntax().text_range());\n-                    res.insert(file_id, range);\n-                }\n-                ModuleSource::SourceFile(_) => {\n-                    res.insert(file_id, None);\n-                    res.extend(module.children(db).map(|m| {\n-                        let src = m.definition_source(db);\n-                        (src.file_id.original_file(db), None)\n-                    }));\n-                }\n+            let mut to_visit = vec![module];\n+            let mut is_first = true;\n+            while let Some(module) = to_visit.pop() {\n+                let src = module.definition_source(db);\n+                let file_id = src.file_id.original_file(db);\n+                match src.value {\n+                    ModuleSource::Module(m) => {\n+                        if is_first {\n+                            let range = Some(m.syntax().text_range());\n+                            res.insert(file_id, range);\n+                        } else {\n+                            // We have already added the enclosing file to the search scope,\n+                            // so do nothing.\n+                        }\n+                    }\n+                    ModuleSource::SourceFile(_) => {\n+                        res.insert(file_id, None);\n+                    }\n+                };\n+                is_first = false;\n+                to_visit.extend(module.children(db));\n             }\n+\n             return SearchScope::new(res);\n         }\n "}]}