{"sha": "1834bae5b86c54ed9dece26e82436919d59e6cb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MzRiYWU1Yjg2YzU0ZWQ5ZGVjZTI2ZTgyNDM2OTE5ZDU5ZTZjYjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-04T20:05:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-04T20:09:09Z"}, "message": "allow rustfmt to reorder imports\n\nThis wasn't a right decision in the first place, the feature flag was\nbroken in the last rustfmt release, and syntax highlighting of imports\nis more important anyway", "tree": {"sha": "92c8b984e874b67fa1831613464bbe356c1af3dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92c8b984e874b67fa1831613464bbe356c1af3dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1834bae5b86c54ed9dece26e82436919d59e6cb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1834bae5b86c54ed9dece26e82436919d59e6cb7", "html_url": "https://github.com/rust-lang/rust/commit/1834bae5b86c54ed9dece26e82436919d59e6cb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1834bae5b86c54ed9dece26e82436919d59e6cb7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b2cd829b0f95aef338227deb05ec7503dae9b6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b2cd829b0f95aef338227deb05ec7503dae9b6c", "html_url": "https://github.com/rust-lang/rust/commit/2b2cd829b0f95aef338227deb05ec7503dae9b6c"}], "stats": {"total": 1560, "additions": 772, "deletions": 788}, "files": [{"sha": "f49965064973b8176ba5333bf837a8fe74ac91cc", "filename": "crates/gen_lsp_server/examples/01_gen_lsp_server.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fgen_lsp_server%2Fexamples%2F01_gen_lsp_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fgen_lsp_server%2Fexamples%2F01_gen_lsp_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fexamples%2F01_gen_lsp_server.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,11 +1,11 @@\n use std::error::Error;\r\n \r\n-use crossbeam_channel::{Sender, Receiver};\r\n+use crossbeam_channel::{Receiver, Sender};\r\n+use gen_lsp_server::{handle_shutdown, run_server, stdio_transport, RawMessage, RawResponse};\r\n use lsp_types::{\r\n-    ServerCapabilities, InitializeParams,\r\n     request::{GotoDefinition, GotoDefinitionResponse},\r\n+    InitializeParams, ServerCapabilities,\r\n };\r\n-use gen_lsp_server::{run_server, stdio_transport, handle_shutdown, RawMessage, RawResponse};\r\n \r\n fn main() -> Result<(), Box<dyn Error + Sync + Send>> {\r\n     let (receiver, sender, io_threads) = stdio_transport();\r"}, {"sha": "3c48106c5f6ec15db7a03be00f6bd5aad18faa99", "filename": "crates/gen_lsp_server/examples/02_gen_lsp_server_with_logging.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fgen_lsp_server%2Fexamples%2F02_gen_lsp_server_with_logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fgen_lsp_server%2Fexamples%2F02_gen_lsp_server_with_logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fexamples%2F02_gen_lsp_server_with_logging.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -44,14 +44,14 @@\n \r\n use std::error::Error;\r\n \r\n-use crossbeam_channel::{Sender, Receiver};\r\n-use lsp_types::{\r\n-    ServerCapabilities, InitializeParams,\r\n-    request::{GotoDefinition, GotoDefinitionResponse},\r\n+use crossbeam_channel::{Receiver, Sender};\r\n+use gen_lsp_server::{\r\n+    handle_shutdown, run_server, stdio_transport, RawMessage, RawRequest, RawResponse,\r\n };\r\n use log::info;\r\n-use gen_lsp_server::{\r\n-    run_server, stdio_transport, handle_shutdown, RawMessage, RawResponse, RawRequest,\r\n+use lsp_types::{\r\n+    request::{GotoDefinition, GotoDefinitionResponse},\r\n+    InitializeParams, ServerCapabilities,\r\n };\r\n \r\n fn main() -> Result<(), Box<dyn Error + Sync + Send>> {\r"}, {"sha": "3b7cb77b18101e8e8170b97b45b5503f84b9e7a0", "filename": "crates/ra_arena/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_arena%2Fsrc%2Flib.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -2,9 +2,9 @@\n \n use std::{\n     fmt,\n+    iter::FromIterator,\n     marker::PhantomData,\n     ops::{Index, IndexMut},\n-    iter::FromIterator,\n };\n \n pub mod map;"}, {"sha": "bf7d55d6d111d36dd863fd61e51df1244eaca02c", "filename": "crates/ra_assists/src/add_derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,11 +1,11 @@\n use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode, AttrsOwner},\n-    SyntaxKind::{WHITESPACE, COMMENT},\n+    SyntaxKind::{COMMENT, WHITESPACE},\n     TextUnit,\n };\n \n-use crate::{AssistCtx, Assist, AssistId};\n+use crate::{Assist, AssistCtx, AssistId};\n \n pub(crate) fn add_derive(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let nominal = ctx.node_at_offset::<ast::NominalDef>()?;"}, {"sha": "bb47a32f0a007501f59a624a909b12ca60e922e5", "filename": "crates/ra_assists/src/add_explicit_type.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,13 +1,10 @@\n-use hir::{\n-    HirDisplay, Ty,\n-    db::HirDatabase,\n-};\n+use hir::{db::HirDatabase, HirDisplay, Ty};\n use ra_syntax::{\n+    ast::{AstNode, LetStmt, NameOwner, PatKind},\n     T,\n-    ast::{LetStmt, PatKind, NameOwner, AstNode}\n };\n \n-use crate::{AssistCtx, Assist, AssistId};\n+use crate::{Assist, AssistCtx, AssistId};\n \n /// Add explicit type assist.\n pub(crate) fn add_explicit_type(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n@@ -56,7 +53,7 @@ fn is_unknown(ty: &Ty) -> bool {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{ check_assist, check_assist_target, check_assist_not_applicable };\n+    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn add_explicit_type_target() {"}, {"sha": "b81922c1d2928e0d84712fa44397a5e862eb8fd2", "filename": "crates/ra_assists/src/add_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,11 +1,11 @@\n-use join_to_string::join;\n use hir::db::HirDatabase;\n+use join_to_string::join;\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner, TypeParamsOwner},\n     TextUnit,\n };\n \n-use crate::{AssistCtx, Assist, AssistId};\n+use crate::{Assist, AssistCtx, AssistId};\n \n pub(crate) fn add_impl(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let nominal = ctx.node_at_offset::<ast::NominalDef>()?;"}, {"sha": "7fc8f63b3ef2704317df9f9e40be77c3872b8387", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,9 +1,12 @@\n-use crate::{Assist, AssistId, AssistCtx, ast_editor::{AstEditor, AstBuilder}};\n+use crate::{\n+    ast_editor::{AstBuilder, AstEditor},\n+    Assist, AssistCtx, AssistId,\n+};\n \n-use hir::{HasSource, db::HirDatabase};\n-use ra_syntax::{SmolStr, TreeArc};\n-use ra_syntax::ast::{self, AstNode, ImplItem, ImplItemKind, NameOwner};\n+use hir::{db::HirDatabase, HasSource};\n use ra_db::FilePosition;\n+use ra_syntax::ast::{self, AstNode, ImplItem, ImplItemKind, NameOwner};\n+use ra_syntax::{SmolStr, TreeArc};\n \n #[derive(PartialEq)]\n enum AddMissingImplMembersMode {"}, {"sha": "0ba5f3ae67135b6eb317e9ca3f13514c626669f6", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,13 +1,13 @@\n use hir::db::HirDatabase;\n-use ra_text_edit::TextEditBuilder;\n use ra_db::FileRange;\n+use ra_fmt::{leading_indent, reindent};\n use ra_syntax::{\n-    SourceFile, TextRange, AstNode, TextUnit, SyntaxNode, SyntaxElement, SyntaxToken,\n-    algo::{find_token_at_offset, find_node_at_offset, find_covering_element, TokenAtOffset},\n+    algo::{find_covering_element, find_node_at_offset, find_token_at_offset, TokenAtOffset},\n+    AstNode, SourceFile, SyntaxElement, SyntaxNode, SyntaxToken, TextRange, TextUnit,\n };\n-use ra_fmt::{leading_indent, reindent};\n+use ra_text_edit::TextEditBuilder;\n \n-use crate::{AssistLabel, AssistAction, AssistId};\n+use crate::{AssistAction, AssistId, AssistLabel};\n \n #[derive(Clone, Debug)]\n pub(crate) enum Assist {"}, {"sha": "c9a5cf8d94457787c892b01b1f1e364c8f45dc17", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,10 +1,12 @@\n use std::{iter, ops::RangeInclusive};\n \n use arrayvec::ArrayVec;\n-use ra_text_edit::TextEditBuilder;\n-use ra_syntax::{AstNode, TreeArc, ast, SyntaxKind::*, SyntaxElement, SourceFile, InsertPosition, Direction, T};\n-use ra_fmt::leading_indent;\n use hir::Name;\n+use ra_fmt::leading_indent;\n+use ra_syntax::{\n+    ast, AstNode, Direction, InsertPosition, SourceFile, SyntaxElement, SyntaxKind::*, TreeArc, T,\n+};\n+use ra_text_edit::TextEditBuilder;\n \n pub struct AstEditor<N: AstNode> {\n     original_ast: TreeArc<N>,\n@@ -283,7 +285,7 @@ fn ast_node_from_file_text<N: AstNode>(text: &str) -> TreeArc<N> {\n \n mod tokens {\n     use once_cell::sync::Lazy;\n-    use ra_syntax::{AstNode, SourceFile, TreeArc, SyntaxToken, SyntaxKind::*, T};\n+    use ra_syntax::{AstNode, SourceFile, SyntaxKind::*, SyntaxToken, TreeArc, T};\n \n     static SOURCE_FILE: Lazy<TreeArc<SourceFile>> = Lazy::new(|| SourceFile::parse(\",\\n; ;\").tree);\n "}, {"sha": "75ab8fa0f812bbe084faa2cd27d37b3ab5c68a22", "filename": "crates/ra_assists/src/auto_import.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fauto_import.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,14 +1,15 @@\n+use hir::{self, db::HirDatabase};\n use ra_text_edit::TextEditBuilder;\n-use hir::{ self, db::HirDatabase};\n \n-use ra_syntax::{\n-    T,\n-    ast::{ self, NameOwner }, AstNode, SyntaxNode, Direction, TextRange, SmolStr,\n-    SyntaxKind::{ PATH, PATH_SEGMENT }\n-};\n use crate::{\n+    assist_ctx::{Assist, AssistCtx},\n     AssistId,\n-    assist_ctx::{AssistCtx, Assist},\n+};\n+use ra_syntax::{\n+    ast::{self, NameOwner},\n+    AstNode, Direction, SmolStr,\n+    SyntaxKind::{PATH, PATH_SEGMENT},\n+    SyntaxNode, TextRange, T,\n };\n \n fn collect_path_segments_raw<'a>(\n@@ -577,7 +578,7 @@ pub(crate) fn auto_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::{ check_assist, check_assist_not_applicable };\n+    use crate::helpers::{check_assist, check_assist_not_applicable};\n \n     #[test]\n     fn test_auto_import_add_use_no_anchor() {"}, {"sha": "6cabba3e3d90c5af7b80854ecdc660e1fcdb2e32", "filename": "crates/ra_assists/src/change_visibility.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,12 +1,15 @@\n use hir::db::HirDatabase;\n use ra_syntax::{\n-    T,\n-    AstNode, SyntaxNode, TextUnit,\n-    ast::{self, VisibilityOwner, NameOwner},\n-    SyntaxKind::{VISIBILITY, FN_DEF, MODULE, STRUCT_DEF, ENUM_DEF, TRAIT_DEF, IDENT, WHITESPACE, COMMENT, ATTR},\n+    ast::{self, NameOwner, VisibilityOwner},\n+    AstNode,\n+    SyntaxKind::{\n+        ATTR, COMMENT, ENUM_DEF, FN_DEF, IDENT, MODULE, STRUCT_DEF, TRAIT_DEF, VISIBILITY,\n+        WHITESPACE,\n+    },\n+    SyntaxNode, TextUnit, T,\n };\n \n-use crate::{AssistCtx, Assist, AssistId};\n+use crate::{Assist, AssistCtx, AssistId};\n \n pub(crate) fn change_visibility(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     if let Some(vis) = ctx.node_at_offset::<ast::Visibility>() {"}, {"sha": "d51010b84647a1b98780ffb699784a2df6289abc", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,13 +1,10 @@\n-use std::fmt::Write;\n use itertools::Itertools;\n+use std::fmt::Write;\n \n-use hir::{\n-    AdtDef, FieldSource, HasSource,\n-    db::HirDatabase,\n-};\n+use hir::{db::HirDatabase, AdtDef, FieldSource, HasSource};\n use ra_syntax::ast::{self, AstNode};\n \n-use crate::{AssistCtx, Assist, AssistId};\n+use crate::{Assist, AssistCtx, AssistId};\n \n fn is_trivial_arm(arm: &ast::MatchArm) -> bool {\n     fn single_pattern(arm: &ast::MatchArm) -> Option<ast::PatKind> {"}, {"sha": "5e41f93461c989b4d4283be3e73d01656fb62623", "filename": "crates/ra_assists/src/flip_binexpr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fflip_binexpr.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,7 +1,7 @@\n use hir::db::HirDatabase;\n use ra_syntax::ast::{AstNode, BinExpr, BinOp};\n \n-use crate::{AssistCtx, Assist, AssistId};\n+use crate::{Assist, AssistCtx, AssistId};\n \n /// Flip binary expression assist.\n pub(crate) fn flip_binexpr(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n@@ -68,7 +68,7 @@ impl From<BinOp> for FlipAction {\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{ check_assist, check_assist_target, check_assist_not_applicable };\n+    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn flip_binexpr_target_is_the_op() {"}, {"sha": "d8dba779f676cd981c329eff23dd909a174095d3", "filename": "crates/ra_assists/src/flip_comma.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,11 +1,7 @@\n use hir::db::HirDatabase;\n-use ra_syntax::{\n-    T,\n-    Direction,\n-    algo::non_trivia_sibling,\n-};\n+use ra_syntax::{algo::non_trivia_sibling, Direction, T};\n \n-use crate::{AssistCtx, Assist, AssistId};\n+use crate::{Assist, AssistCtx, AssistId};\n \n pub(crate) fn flip_comma(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let comma = ctx.token_at_offset().find(|leaf| leaf.kind() == T![,])?;"}, {"sha": "554de8b467726195937f38da29e4766d46f2840c", "filename": "crates/ra_assists/src/inline_local_variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,11 +1,11 @@\n use hir::db::HirDatabase;\n use ra_syntax::{\n-    ast::{self, AstNode, AstToken, PatKind, ExprKind},\n+    ast::{self, AstNode, AstToken, ExprKind, PatKind},\n     TextRange,\n };\n \n-use crate::{Assist, AssistCtx, AssistId};\n use crate::assist_ctx::AssistBuilder;\n+use crate::{Assist, AssistCtx, AssistId};\n \n pub(crate) fn inline_local_varialbe(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let let_stmt = ctx.node_at_offset::<ast::LetStmt>()?;"}, {"sha": "f7f5ccafa5902b48d09809c3189e750cc24c0a86", "filename": "crates/ra_assists/src/introduce_variable.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,12 +1,14 @@\n-use test_utils::tested_by;\n use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode},\n+    SyntaxKind::{\n+        BREAK_EXPR, COMMENT, LAMBDA_EXPR, LOOP_EXPR, MATCH_ARM, PATH_EXPR, RETURN_EXPR, WHITESPACE,\n+    },\n     SyntaxNode, TextUnit,\n-    SyntaxKind::{WHITESPACE, MATCH_ARM, LAMBDA_EXPR, PATH_EXPR, BREAK_EXPR, LOOP_EXPR, RETURN_EXPR, COMMENT},\n };\n+use test_utils::tested_by;\n \n-use crate::{AssistCtx, Assist, AssistId};\n+use crate::{Assist, AssistCtx, AssistId};\n \n pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     if ctx.frange.range.is_empty() {\n@@ -121,7 +123,9 @@ fn anchor_stmt(expr: &ast::Expr) -> Option<(&SyntaxNode, bool)> {\n mod tests {\n     use test_utils::covers;\n \n-    use crate::helpers::{check_assist_range_not_applicable, check_assist_range, check_assist_range_target};\n+    use crate::helpers::{\n+        check_assist_range, check_assist_range_not_applicable, check_assist_range_target,\n+    };\n \n     use super::*;\n "}, {"sha": "0d848629d936c90c5152fd0ed83366746e970201", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -11,12 +11,12 @@ pub mod ast_editor;\n \n use itertools::Itertools;\n \n-use ra_text_edit::TextEdit;\n-use ra_syntax::{TextRange, TextUnit};\n-use ra_db::FileRange;\n use hir::db::HirDatabase;\n+use ra_db::FileRange;\n+use ra_syntax::{TextRange, TextUnit};\n+use ra_text_edit::TextEdit;\n \n-pub(crate) use crate::assist_ctx::{AssistCtx, Assist};\n+pub(crate) use crate::assist_ctx::{Assist, AssistCtx};\n \n /// Unique identifier of the assist, should not be shown to the user\n /// directly.\n@@ -127,11 +127,11 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n #[cfg(test)]\n mod helpers {\n     use hir::mock::MockDatabase;\n-    use ra_syntax::TextRange;\n     use ra_db::FileRange;\n-    use test_utils::{extract_offset, extract_range, assert_eq_text, add_cursor};\n+    use ra_syntax::TextRange;\n+    use test_utils::{add_cursor, assert_eq_text, extract_offset, extract_range};\n \n-    use crate::{AssistCtx, Assist};\n+    use crate::{Assist, AssistCtx};\n \n     pub(crate) fn check_assist(\n         assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n@@ -289,8 +289,8 @@ mod helpers {\n #[cfg(test)]\n mod tests {\n     use hir::mock::MockDatabase;\n-    use ra_syntax::TextRange;\n     use ra_db::FileRange;\n+    use ra_syntax::TextRange;\n     use test_utils::{extract_offset, extract_range};\n \n     #[test]"}, {"sha": "e1ce86a33ef52eb74e1e27f0de955545a416dbd3", "filename": "crates/ra_assists/src/move_guard.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmove_guard.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,12 +1,11 @@\n use hir::db::HirDatabase;\n use ra_syntax::{\n-    TextUnit,\n-    SyntaxElement,\n-    ast::{MatchArm, AstNode, AstToken, IfExpr},\n     ast,\n+    ast::{AstNode, AstToken, IfExpr, MatchArm},\n+    SyntaxElement, TextUnit,\n };\n \n-use crate::{AssistCtx, Assist, AssistId};\n+use crate::{Assist, AssistCtx, AssistId};\n \n pub(crate) fn move_guard_to_arm_body(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let match_arm = ctx.node_at_offset::<MatchArm>()?;\n@@ -84,7 +83,7 @@ pub(crate) fn move_arm_cond_to_match_guard(mut ctx: AssistCtx<impl HirDatabase>)\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{ check_assist, check_assist_target, check_assist_not_applicable };\n+    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]\n     fn move_guard_to_arm_body_target() {"}, {"sha": "5680f76ca515aca16ed4562aa1a4de791633e2fa", "filename": "crates/ra_assists/src/remove_dbg.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,10 +1,9 @@\n+use crate::{Assist, AssistCtx, AssistId};\n use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode},\n-    TextUnit,\n-    T\n+    TextUnit, T,\n };\n-use crate::{AssistCtx, Assist, AssistId};\n \n pub(crate) fn remove_dbg(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let macro_call = ctx.node_at_offset::<ast::MacroCall>()?;"}, {"sha": "c2c7cf70b85966e9c91953d8c0800bbe3464a3e0", "filename": "crates/ra_assists/src/replace_if_let_with_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,8 +1,8 @@\n-use ra_syntax::{AstNode, ast};\n-use ra_fmt::extract_trivial_expression;\n use hir::db::HirDatabase;\n+use ra_fmt::extract_trivial_expression;\n+use ra_syntax::{ast, AstNode};\n \n-use crate::{AssistCtx, Assist, AssistId};\n+use crate::{Assist, AssistCtx, AssistId};\n \n pub(crate) fn replace_if_let_with_match(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let if_expr: &ast::IfExpr = ctx.node_at_offset()?;"}, {"sha": "a8feb67c8c9047995d0026e9d14e27b2cf42e8b7", "filename": "crates/ra_assists/src/split_import.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,13 +1,9 @@\n use std::iter::successors;\n \n use hir::db::HirDatabase;\n-use ra_syntax::{\n-    T,\n-    TextUnit, AstNode,\n-    ast,\n-};\n+use ra_syntax::{ast, AstNode, TextUnit, T};\n \n-use crate::{AssistCtx, Assist, AssistId};\n+use crate::{Assist, AssistCtx, AssistId};\n \n pub(crate) fn split_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let colon_colon = ctx.token_at_offset().find(|leaf| leaf.kind() == T![::])?;"}, {"sha": "c25737aaa8ef10111245846904783e7b9f95b80f", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,14 +1,12 @@\n mod vfs_filter;\n \n-use std::{path::Path, collections::HashSet, error::Error};\n+use std::{collections::HashSet, error::Error, path::Path};\n \n use rustc_hash::FxHashMap;\n \n-use ra_db::{\n-    CrateGraph, FileId, SourceRootId,\n-};\n-use ra_ide_api::{AnalysisHost, AnalysisChange};\n-use ra_project_model::{ProjectWorkspace, ProjectRoot};\n+use ra_db::{CrateGraph, FileId, SourceRootId};\n+use ra_ide_api::{AnalysisChange, AnalysisHost};\n+use ra_project_model::{ProjectRoot, ProjectWorkspace};\n use ra_vfs::{Vfs, VfsChange};\n use vfs_filter::IncludeRustFiles;\n \n@@ -106,8 +104,8 @@ pub fn load(\n \n #[cfg(test)]\n mod tests {\n-    use ra_hir::Crate;\n     use super::*;\n+    use ra_hir::Crate;\n \n     #[test]\n     fn test_loading_rust_analyzer() {"}, {"sha": "2f0d8cb8b71669957004ba65c86e34f6a2193da4", "filename": "crates/ra_batch/src/vfs_filter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,6 +1,6 @@\n-use std::path::PathBuf;\n use ra_project_model::ProjectRoot;\n-use ra_vfs::{RootEntry, Filter, RelativePath};\n+use ra_vfs::{Filter, RelativePath, RootEntry};\n+use std::path::PathBuf;\n \n /// `IncludeRustFiles` is used to convert\n /// from `ProjectRoot` to `RootEntry` for VFS"}, {"sha": "639ac763eefd839625371d2110e879bce4f82a3f", "filename": "crates/ra_cli/src/analysis_bench.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,10 +1,10 @@\n use std::{\n-    path::{PathBuf, Path},\n+    path::{Path, PathBuf},\n     time::Instant,\n };\n \n-use ra_db::{SourceDatabase, salsa::Database};\n-use ra_ide_api::{AnalysisHost, Analysis, LineCol, FilePosition};\n+use ra_db::{salsa::Database, SourceDatabase};\n+use ra_ide_api::{Analysis, AnalysisHost, FilePosition, LineCol};\n \n use crate::Result;\n "}, {"sha": "b8ad6aebcb1191d869c5c4faff2c5691a3070fb4", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,7 +1,7 @@\n-use std::{collections::HashSet, time::Instant, fmt::Write, path::Path};\n+use std::{collections::HashSet, fmt::Write, path::Path, time::Instant};\n \n use ra_db::SourceDatabase;\n-use ra_hir::{Crate, ModuleDef, Ty, ImplItem, HasSource};\n+use ra_hir::{Crate, HasSource, ImplItem, ModuleDef, Ty};\n use ra_syntax::AstNode;\n \n use crate::Result;"}, {"sha": "25edbd5f73529f5e8c9601ebbbdf73d59fb61586", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,13 +1,13 @@\n mod analysis_stats;\n mod analysis_bench;\n \n-use std::{io::Read, error::Error};\n+use std::{error::Error, io::Read};\n \n use clap::{App, Arg, SubCommand};\n-use ra_ide_api::{file_structure, Analysis};\n-use ra_syntax::{SourceFile, TreeArc, AstNode};\n use flexi_logger::Logger;\n+use ra_ide_api::{file_structure, Analysis};\n use ra_prof::profile;\n+use ra_syntax::{AstNode, SourceFile, TreeArc};\n \n type Result<T> = std::result::Result<T, Box<dyn Error + Send + Sync>>;\n "}, {"sha": "5d3a6b3c989b7b467ad4c8315ee665f26a4534d3", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -197,7 +197,7 @@ impl CrateGraph {\n \n #[cfg(test)]\n mod tests {\n-    use super::{CrateGraph, FileId, SmolStr, Edition::Edition2018};\n+    use super::{CrateGraph, Edition::Edition2018, FileId, SmolStr};\n \n     #[test]\n     fn it_should_panic_because_of_cycle_dependencies() {"}, {"sha": "11e18a03d3229db20756d438509b754596cc96c6", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -4,17 +4,15 @@ mod input;\n \n use std::{panic, sync::Arc};\n \n-use ra_syntax::{TextUnit, TextRange, SourceFile, Parse};\n-use relative_path::RelativePathBuf;\n use ra_prof::profile;\n+use ra_syntax::{Parse, SourceFile, TextRange, TextUnit};\n+use relative_path::RelativePathBuf;\n \n-pub use ::salsa as salsa;\n pub use crate::{\n     cancellation::Canceled,\n-    input::{\n-        FileId, CrateId, SourceRoot, SourceRootId, CrateGraph, Dependency, Edition,\n-    },\n+    input::{CrateGraph, CrateId, Dependency, Edition, FileId, SourceRoot, SourceRootId},\n };\n+pub use ::salsa;\n \n pub trait CheckCanceled {\n     /// Aborts current query if there are pending changes."}, {"sha": "1c2c04ad2f0a3fb7c9420c74577b2bd8f7c5a91f", "filename": "crates/ra_fmt/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_fmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_fmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_fmt%2Fsrc%2Flib.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,11 +1,13 @@\n //! This crate provides some utilities for indenting rust code.\n //!\n-use std::iter::successors;\n use itertools::Itertools;\n use ra_syntax::{\n-    SyntaxNode, SyntaxKind::*, SyntaxToken, SyntaxKind, T,\n     ast::{self, AstNode, AstToken},\n+    SyntaxKind,\n+    SyntaxKind::*,\n+    SyntaxNode, SyntaxToken, T,\n };\n+use std::iter::successors;\n \n pub fn reindent(text: &str, indent: &str) -> String {\n     let indent = format!(\"\\n{}\", indent);"}, {"sha": "9c0c8fdd0a45bca61d73b9e6030773fd7138ee88", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -3,16 +3,15 @@\n \n use std::sync::Arc;\n \n-use ra_arena::{RawId, Arena, impl_arena_id};\n+use ra_arena::{impl_arena_id, Arena, RawId};\n use ra_syntax::{\n+    ast::{self, NameOwner, StructKind, TypeAscriptionOwner},\n     TreeArc,\n-    ast::{self, NameOwner, StructKind, TypeAscriptionOwner}\n };\n \n use crate::{\n-    Name, AsName, Struct, Union, Enum, EnumVariant, Crate, AstDatabase,\n-    HirDatabase, StructField, FieldSource, Source, HasSource,\n-    type_ref::TypeRef, DefDatabase,\n+    type_ref::TypeRef, AsName, AstDatabase, Crate, DefDatabase, Enum, EnumVariant, FieldSource,\n+    HasSource, HirDatabase, Name, Source, Struct, StructField, Union,\n };\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]"}, {"sha": "ed640d7fce8cbfd98b6f12609e67822d012a4bcd", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -3,24 +3,32 @@ pub(crate) mod docs;\n \n use std::sync::Arc;\n \n-use ra_db::{CrateId, SourceRootId, Edition, FileId};\n-use ra_syntax::{ast::{self, NameOwner, TypeAscriptionOwner}, TreeArc};\n+use ra_db::{CrateId, Edition, FileId, SourceRootId};\n+use ra_syntax::{\n+    ast::{self, NameOwner, TypeAscriptionOwner},\n+    TreeArc,\n+};\n \n use crate::{\n-    Name, AsName, AstId, Ty, Either, KnownName, HasSource,\n-    HirDatabase, DefDatabase, AstDatabase,\n-    type_ref::TypeRef,\n-    nameres::{ModuleScope, Namespace, ImportId, CrateModuleId},\n-    expr::{Body, BodySourceMap, validation::ExprValidator},\n-    ty::{TraitRef, InferenceResult, primitive::{IntTy, FloatTy, Signedness, IntBitness, FloatBitness}},\n     adt::{EnumVariantId, StructFieldId, VariantDef},\n+    diagnostics::DiagnosticSink,\n+    expr::{validation::ExprValidator, Body, BodySourceMap},\n     generics::HasGenericParams,\n-    ids::{FunctionId, StructId, EnumId, AstItemDef, ConstId, StaticId, TraitId, TypeAliasId, MacroDefId},\n+    ids::{\n+        AstItemDef, ConstId, EnumId, FunctionId, MacroDefId, StaticId, StructId, TraitId,\n+        TypeAliasId,\n+    },\n     impl_block::ImplBlock,\n+    nameres::{CrateModuleId, ImportId, ModuleScope, Namespace},\n     resolve::Resolver,\n-    diagnostics::{DiagnosticSink},\n-    traits::{TraitItem, TraitData},\n+    traits::{TraitData, TraitItem},\n+    ty::{\n+        primitive::{FloatBitness, FloatTy, IntBitness, IntTy, Signedness},\n+        InferenceResult, TraitRef,\n+    },\n     type_ref::Mutability,\n+    type_ref::TypeRef,\n+    AsName, AstDatabase, AstId, DefDatabase, Either, HasSource, HirDatabase, KnownName, Name, Ty,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which"}, {"sha": "f696307a7c0a118e50a28b1fb8d37cbe7cdc5e29", "filename": "crates/ra_hir/src/code_model/docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -3,8 +3,8 @@ use std::sync::Arc;\n use ra_syntax::ast;\n \n use crate::{\n-    HirDatabase, DefDatabase, AstDatabase, HasSource,\n-    Module, StructField, Struct, Enum, EnumVariant, Static, Const, Function, Union, Trait, TypeAlias, FieldSource, MacroDef,\n+    AstDatabase, Const, DefDatabase, Enum, EnumVariant, FieldSource, Function, HasSource,\n+    HirDatabase, MacroDef, Module, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]"}, {"sha": "72451e0e70acd6478b94e865be55196f66f8c9bd", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,9 +1,9 @@\n-use ra_syntax::{TreeArc, ast};\n+use ra_syntax::{ast, TreeArc};\n \n use crate::{\n-    HirFileId, DefDatabase, AstDatabase, Module, ModuleSource,\n-    StructField, Struct, Enum, Union, EnumVariant, Function, Static, Trait, Const, TypeAlias,\n-    FieldSource, MacroDef, ids::AstItemDef,\n+    ids::AstItemDef, AstDatabase, Const, DefDatabase, Enum, EnumVariant, FieldSource, Function,\n+    HirFileId, MacroDef, Module, ModuleSource, Static, Struct, StructField, Trait, TypeAlias,\n+    Union,\n };\n \n pub struct Source<T> {"}, {"sha": "a9c6c52d9d8ddc3d85dc1e9e6be5e48a906846fe", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,23 +1,25 @@\n use std::sync::Arc;\n \n use parking_lot::Mutex;\n-use ra_syntax::{SyntaxNode, TreeArc, SmolStr, ast};\n-use ra_db::{SourceDatabase, salsa};\n+use ra_db::{salsa, SourceDatabase};\n+use ra_syntax::{ast, SmolStr, SyntaxNode, TreeArc};\n \n use crate::{\n-    HirFileId, MacroDefId, AstIdMap, ErasedFileAstId, Crate, Module, MacroCallLoc,\n-    Function, FnData, ExprScopes, TypeAlias,\n-    Struct, Enum, StructField,\n-    Const, ConstData, Static,\n-    DefWithBody, Trait,\n+    adt::{EnumData, StructData},\n+    generics::{GenericDef, GenericParams},\n     ids,\n-    nameres::{Namespace, ImportSourceMap, RawItems, CrateDefMap},\n-    ty::{InferenceResult, Ty, method_resolution::CrateImplBlocks, TypableDef, CallableDef, FnSig, TypeCtor, GenericPredicate, Substs},\n-    adt::{StructData, EnumData},\n-    impl_block::{ModuleImplBlocks, ImplSourceMap, ImplBlock},\n-    generics::{GenericParams, GenericDef},\n+    impl_block::{ImplBlock, ImplSourceMap, ModuleImplBlocks},\n+    lang_item::{LangItemTarget, LangItems},\n+    nameres::{CrateDefMap, ImportSourceMap, Namespace, RawItems},\n     traits::TraitData,\n-    lang_item::{LangItems, LangItemTarget}, type_alias::TypeAliasData,\n+    ty::{\n+        method_resolution::CrateImplBlocks, CallableDef, FnSig, GenericPredicate, InferenceResult,\n+        Substs, Ty, TypableDef, TypeCtor,\n+    },\n+    type_alias::TypeAliasData,\n+    AstIdMap, Const, ConstData, Crate, DefWithBody, Enum, ErasedFileAstId, ExprScopes, FnData,\n+    Function, HirFileId, MacroCallLoc, MacroDefId, Module, Static, Struct, StructField, Trait,\n+    TypeAlias,\n };\n \n /// We store all interned things in the single QueryGroup."}, {"sha": "f5f2e65f39b98add14aacfc15fe351ce156cacbf", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,9 +1,9 @@\n-use std::{fmt, any::Any};\n+use std::{any::Any, fmt};\n \n-use ra_syntax::{SyntaxNodePtr, TreeArc, AstPtr, TextRange, ast, SyntaxNode};\n+use ra_syntax::{ast, AstPtr, SyntaxNode, SyntaxNodePtr, TextRange, TreeArc};\n use relative_path::RelativePathBuf;\n \n-use crate::{HirFileId, HirDatabase, Name};\n+use crate::{HirDatabase, HirFileId, Name};\n \n /// Diagnostic defines hir API for errors and warnings.\n ///"}, {"sha": "d5b4ba6b6f1e7239e9c90f27541f1d9b8d2f7f12", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -3,19 +3,25 @@ use std::sync::Arc;\n \n use rustc_hash::FxHashMap;\n \n-use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n+use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n use ra_syntax::{\n-    SyntaxNodePtr, AstPtr, AstNode,\n-    ast::{self, TryBlockBodyOwner, LoopBodyOwner, ArgListOwner, NameOwner, LiteralKind,ArrayExprKind, TypeAscriptionOwner},\n+    ast::{\n+        self, ArgListOwner, ArrayExprKind, LiteralKind, LoopBodyOwner, NameOwner,\n+        TryBlockBodyOwner, TypeAscriptionOwner,\n+    },\n+    AstNode, AstPtr, SyntaxNodePtr,\n };\n \n use crate::{\n-    Path, Name, HirDatabase, Resolver,DefWithBody, Either, HirFileId, MacroCallLoc, MacroFileKind,\n-    HasSource,\n     name::AsName,\n     type_ref::{Mutability, TypeRef},\n+    DefWithBody, Either, HasSource, HirDatabase, HirFileId, MacroCallLoc, MacroFileKind, Name,\n+    Path, Resolver,\n+};\n+use crate::{\n+    path::GenericArgs,\n+    ty::primitive::{FloatTy, IntTy, UncertainFloatTy, UncertainIntTy},\n };\n-use crate::{path::GenericArgs, ty::primitive::{IntTy, UncertainIntTy, FloatTy, UncertainFloatTy}};\n \n pub use self::scope::ExprScopes;\n \n@@ -249,8 +255,8 @@ pub enum Expr {\n     Literal(Literal),\n }\n \n-pub use ra_syntax::ast::PrefixOp as UnaryOp;\n pub use ra_syntax::ast::BinOp as BinaryOp;\n+pub use ra_syntax::ast::PrefixOp as UnaryOp;\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum Array {\n     ElementList(Vec<ExprId>),"}, {"sha": "f27cc6e8d24829300012309c649ff17dc4128569", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,12 +1,11 @@\n use std::sync::Arc;\n \n+use ra_arena::{impl_arena_id, Arena, RawId};\n use rustc_hash::FxHashMap;\n-use ra_arena::{Arena, RawId, impl_arena_id};\n \n use crate::{\n-    Name, DefWithBody,\n-    expr::{PatId, ExprId, Pat, Expr, Body, Statement},\n-    HirDatabase,\n+    expr::{Body, Expr, ExprId, Pat, PatId, Statement},\n+    DefWithBody, HirDatabase, Name,\n };\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -173,10 +172,10 @@ fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope\n #[cfg(test)]\n mod tests {\n     use ra_db::SourceDatabase;\n-    use ra_syntax::{algo::find_node_at_offset, AstNode, SyntaxNodePtr, ast};\n-    use test_utils::{extract_offset, assert_eq_text};\n+    use ra_syntax::{algo::find_node_at_offset, ast, AstNode, SyntaxNodePtr};\n+    use test_utils::{assert_eq_text, extract_offset};\n \n-    use crate::{source_binder::SourceAnalyzer, mock::MockDatabase};\n+    use crate::{mock::MockDatabase, source_binder::SourceAnalyzer};\n \n     fn do_check(code: &str, expected: &[&str]) {\n         let (off, code) = extract_offset(code);"}, {"sha": "8206dae2e1e83cd5410db5919c838c7363ac8147", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,17 +1,16 @@\n-use std::sync::Arc;\n use rustc_hash::FxHashSet;\n+use std::sync::Arc;\n \n use ra_syntax::ast::{AstNode, StructLit};\n \n+use super::{Expr, ExprId, StructLitField};\n use crate::{\n-    expr::AstPtr,\n-    HirDatabase, Function, Name, HasSource,\n-    diagnostics::{DiagnosticSink, MissingFields},\n     adt::AdtDef,\n-    Path,\n+    diagnostics::{DiagnosticSink, MissingFields},\n+    expr::AstPtr,\n     ty::InferenceResult,\n+    Function, HasSource, HirDatabase, Name, Path,\n };\n-use super::{Expr, StructLitField, ExprId};\n \n pub(crate) struct ExprValidator<'a, 'b: 'a> {\n     func: Function,"}, {"sha": "9929331d332372d4b13b0ee6e4b97f132545ea6b", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -5,13 +5,14 @@\n \n use std::sync::Arc;\n \n-use ra_syntax::ast::{self, NameOwner, TypeParamsOwner, TypeBoundsOwner, DefaultTypeParamOwner};\n+use ra_syntax::ast::{self, DefaultTypeParamOwner, NameOwner, TypeBoundsOwner, TypeParamsOwner};\n \n use crate::{\n-    HasSource,\n-    Name, AsName, Function, Struct, Union, Enum, Trait, TypeAlias, ImplBlock, Container, AdtDef,\n-    db::{HirDatabase, DefDatabase, AstDatabase},\n-    path::Path, type_ref::TypeRef,\n+    db::{AstDatabase, DefDatabase, HirDatabase},\n+    path::Path,\n+    type_ref::TypeRef,\n+    AdtDef, AsName, Container, Enum, Function, HasSource, ImplBlock, Name, Struct, Trait,\n+    TypeAlias, Union,\n };\n \n /// Data about a generic parameter (to a function, struct, impl, ...)."}, {"sha": "bd1e2f2e61c371b73e83877a2d5bf84375e02bbb", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -3,14 +3,12 @@ use std::{\n     sync::Arc,\n };\n \n-use ra_db::{FileId, salsa};\n-use ra_syntax::{TreeArc, AstNode, ast, SyntaxNode};\n-use ra_prof::profile;\n use mbe::MacroRules;\n+use ra_db::{salsa, FileId};\n+use ra_prof::profile;\n+use ra_syntax::{ast, AstNode, SyntaxNode, TreeArc};\n \n-use crate::{\n-    Module, DefDatabase, AstId, FileAstId, AstDatabase, Source, InternDatabase,\n-};\n+use crate::{AstDatabase, AstId, DefDatabase, FileAstId, InternDatabase, Module, Source};\n \n /// hir makes heavy use of ids: integer (u32) handlers to various things. You\n /// can think of id as a pointer (but without a lifetime) or a file descriptor"}, {"sha": "ce134b27a4a9d5ea13094030b98869898b6be72a", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,21 +1,21 @@\n-use std::sync::Arc;\n use rustc_hash::FxHashMap;\n+use std::sync::Arc;\n \n-use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n+use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n use ra_syntax::{\n+    ast::{self, AstNode},\n     AstPtr, SourceFile, TreeArc,\n-    ast::{self, AstNode}\n };\n \n use crate::{\n-    Const, TypeAlias, Function, HirFileId, AstDatabase, HasSource, Source,\n-    HirDatabase, DefDatabase, TraitRef,\n-    type_ref::TypeRef,\n+    code_model::{Module, ModuleSource},\n+    generics::HasGenericParams,\n     ids::LocationCtx,\n     resolve::Resolver,\n     ty::Ty,\n-    generics::HasGenericParams,\n-    code_model::{Module, ModuleSource}\n+    type_ref::TypeRef,\n+    AstDatabase, Const, DefDatabase, Function, HasSource, HirDatabase, HirFileId, Source, TraitRef,\n+    TypeAlias,\n };\n \n #[derive(Debug, Default, PartialEq, Eq)]"}, {"sha": "f9fe47b0f68c24b10aba307f3551308db22a1e85", "filename": "crates/ra_hir/src/lang_item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flang_item.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,11 +1,11 @@\n-use std::sync::Arc;\n use rustc_hash::FxHashMap;\n+use std::sync::Arc;\n \n-use ra_syntax::{SmolStr, TreeArc, ast::AttrsOwner};\n+use ra_syntax::{ast::AttrsOwner, SmolStr, TreeArc};\n \n use crate::{\n-    Crate, DefDatabase, Enum, Function, HirDatabase, ImplBlock, Module,\n-    Static, Struct, Trait, ModuleDef, AstDatabase, HasSource\n+    AstDatabase, Crate, DefDatabase, Enum, Function, HasSource, HirDatabase, ImplBlock, Module,\n+    ModuleDef, Static, Struct, Trait,\n };\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "ec0676783fc375735ed11cffeb7a92e4fda13a37", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -47,39 +47,33 @@ mod code_model;\n mod marks;\n \n use crate::{\n-    db::{InternDatabase, AstDatabase, DefDatabase, HirDatabase},\n+    db::{AstDatabase, DefDatabase, HirDatabase, InternDatabase},\n+    ids::MacroFileKind,\n     name::{AsName, KnownName},\n-    source_id::{FileAstId, AstId},\n     resolve::Resolver,\n-    ids::MacroFileKind,\n+    source_id::{AstId, FileAstId},\n };\n \n pub use self::{\n-    either::Either,\n-    path::{Path, PathKind},\n-    name::Name,\n-    source_id::{AstIdMap, ErasedFileAstId},\n-    ids::{HirFileId, MacroDefId, MacroCallId, MacroCallLoc, MacroFile},\n-    nameres::{PerNs, Namespace, ImportId},\n-    ty::{Ty, ApplicationTy, TypeCtor, TraitRef, Substs, display::HirDisplay, CallableDef},\n-    impl_block::{ImplBlock, ImplItem},\n     adt::AdtDef,\n+    either::Either,\n     expr::ExprScopes,\n+    generics::{GenericParam, GenericParams, HasGenericParams},\n+    ids::{HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile},\n+    impl_block::{ImplBlock, ImplItem},\n+    name::Name,\n+    nameres::{ImportId, Namespace, PerNs},\n+    path::{Path, PathKind},\n     resolve::Resolution,\n-    generics::{GenericParams, GenericParam, HasGenericParams},\n-    source_binder::{SourceAnalyzer, PathResolution, ScopeEntryWithSyntax},\n+    source_binder::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},\n+    source_id::{AstIdMap, ErasedFileAstId},\n+    ty::{display::HirDisplay, ApplicationTy, CallableDef, Substs, TraitRef, Ty, TypeCtor},\n };\n \n pub use self::code_model::{\n-    Crate, CrateDependency,\n-    DefWithBody,\n-    Module, ModuleDef, ModuleSource,\n-    Struct, Union, Enum, EnumVariant,\n-    Function, FnData,\n-    StructField, FieldSource,\n-    Static, Const, ConstData,\n-    Trait, TypeAlias, MacroDef, Container,\n-    BuiltinType,\n-    src::{Source, HasSource},\n-    docs::{Docs, Documentation, DocDef},\n+    docs::{DocDef, Docs, Documentation},\n+    src::{HasSource, Source},\n+    BuiltinType, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n+    EnumVariant, FieldSource, FnData, Function, MacroDef, Module, ModuleDef, ModuleSource, Static,\n+    Struct, StructField, Trait, TypeAlias, Union,\n };"}, {"sha": "b26ea58c996ae099b98864e74903f1ce624eeb85", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,13 +1,12 @@\n-use std::{sync::Arc, panic};\n+use std::{panic, sync::Arc};\n \n use parking_lot::Mutex;\n use ra_db::{\n-    FilePosition, FileId, CrateGraph, SourceRoot, SourceRootId, SourceDatabase, salsa,\n-    Edition,\n+    salsa, CrateGraph, Edition, FileId, FilePosition, SourceDatabase, SourceRoot, SourceRootId,\n };\n use relative_path::RelativePathBuf;\n-use test_utils::{parse_fixture, CURSOR_MARKER, extract_offset};\n use rustc_hash::FxHashMap;\n+use test_utils::{extract_offset, parse_fixture, CURSOR_MARKER};\n \n use crate::{db, diagnostics::DiagnosticSink};\n "}, {"sha": "53ef8d58accdcec601be62fa621faa046bbe4b12", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -55,28 +55,24 @@ mod tests;\n \n use std::sync::Arc;\n \n+use once_cell::sync::Lazy;\n+use ra_arena::{impl_arena_id, Arena, RawId};\n+use ra_db::{Edition, FileId};\n+use ra_prof::profile;\n+use ra_syntax::ast;\n use rustc_hash::{FxHashMap, FxHashSet};\n-use ra_arena::{Arena, RawId, impl_arena_id};\n-use ra_db::{FileId, Edition};\n use test_utils::tested_by;\n-use ra_syntax::ast;\n-use ra_prof::profile;\n-use once_cell::sync::Lazy;\n \n use crate::{\n-    ModuleDef, Name, Crate, Module, MacroDef, AsName, BuiltinType, AstDatabase,\n-    DefDatabase, Path, PathKind, HirFileId, Trait,\n-    ids::MacroDefId,\n-    diagnostics::DiagnosticSink,\n-    nameres::diagnostics::DefDiagnostic,\n-    either::Either,\n-    AstId,\n+    diagnostics::DiagnosticSink, either::Either, ids::MacroDefId,\n+    nameres::diagnostics::DefDiagnostic, AsName, AstDatabase, AstId, BuiltinType, Crate,\n+    DefDatabase, HirFileId, MacroDef, Module, ModuleDef, Name, Path, PathKind, Trait,\n };\n \n-pub(crate) use self::raw::{RawItems, ImportSourceMap};\n+pub(crate) use self::raw::{ImportSourceMap, RawItems};\n \n pub use self::{\n-    per_ns::{PerNs, Namespace},\n+    per_ns::{Namespace, PerNs},\n     raw::ImportId,\n };\n \n@@ -512,14 +508,14 @@ impl CrateDefMap {\n }\n \n mod diagnostics {\n+    use ra_syntax::{ast, AstPtr};\n     use relative_path::RelativePathBuf;\n-    use ra_syntax::{AstPtr, ast};\n \n     use crate::{\n-        AstId, DefDatabase, AstDatabase,\n+        diagnostics::{DiagnosticSink, UnresolvedModule},\n         nameres::CrateModuleId,\n-        diagnostics::{DiagnosticSink, UnresolvedModule}\n-};\n+        AstDatabase, AstId, DefDatabase,\n+    };\n \n     #[derive(Debug, PartialEq, Eq)]\n     pub(super) enum DefDiagnostic {"}, {"sha": "2b07ebf4a5867c34adfc69a4af1be552e84858c6", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,22 +1,19 @@\n use arrayvec::ArrayVec;\n-use rustc_hash::FxHashMap;\n-use relative_path::RelativePathBuf;\n-use test_utils::tested_by;\n use ra_db::FileId;\n use ra_syntax::ast;\n+use relative_path::RelativePathBuf;\n+use rustc_hash::FxHashMap;\n+use test_utils::tested_by;\n \n use crate::{\n-    Function, Module, Struct, Union, Enum, Const, Static, Trait, TypeAlias, MacroDef,\n-    DefDatabase, HirFileId, Name, Path,\n-    KnownName, AstId,\n+    either::Either,\n+    ids::{AstItemDef, LocationCtx, MacroCallId, MacroCallLoc, MacroDefId, MacroFileKind},\n     nameres::{\n-        Resolution, PerNs, ModuleDef, ReachedFixedPoint, ResolveMode,\n-        CrateDefMap, CrateModuleId, ModuleData, ItemOrMacro,\n-        diagnostics::DefDiagnostic,\n-        raw,\n+        diagnostics::DefDiagnostic, raw, CrateDefMap, CrateModuleId, ItemOrMacro, ModuleData,\n+        ModuleDef, PerNs, ReachedFixedPoint, Resolution, ResolveMode,\n     },\n-    ids::{AstItemDef, LocationCtx, MacroCallLoc, MacroCallId, MacroDefId, MacroFileKind},\n-    either::Either,\n+    AstId, Const, DefDatabase, Enum, Function, HirFileId, KnownName, MacroDef, Module, Name, Path,\n+    Static, Struct, Trait, TypeAlias, Union,\n };\n \n pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n@@ -666,9 +663,9 @@ fn resolve_submodule(\n mod tests {\n     use ra_db::SourceDatabase;\n \n-    use crate::{Crate, mock::MockDatabase, DefDatabase};\n-    use ra_arena::{Arena};\n     use super::*;\n+    use crate::{mock::MockDatabase, Crate, DefDatabase};\n+    use ra_arena::Arena;\n     use rustc_hash::FxHashSet;\n \n     fn do_collect_defs("}, {"sha": "7ea59cb7591449e5819c82d7ca86d7adb8160351", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,13 +1,16 @@\n-use std::{sync::Arc, ops::Index};\n+use std::{ops::Index, sync::Arc};\n \n-use test_utils::tested_by;\n-use ra_arena::{Arena, impl_arena_id, RawId, map::ArenaMap};\n+use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n use ra_syntax::{\n-    AstNode, SourceFile, AstPtr, TreeArc,\n-    ast::{self, NameOwner, AttrsOwner},\n+    ast::{self, AttrsOwner, NameOwner},\n+    AstNode, AstPtr, SourceFile, TreeArc,\n };\n+use test_utils::tested_by;\n \n-use crate::{DefDatabase, Name, AsName, Path, HirFileId, ModuleSource, AstIdMap, FileAstId, Either, AstDatabase};\n+use crate::{\n+    AsName, AstDatabase, AstIdMap, DefDatabase, Either, FileAstId, HirFileId, ModuleSource, Name,\n+    Path,\n+};\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n ///"}, {"sha": "953610b370e734e9fb87a79ae320d777704f92c6", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -5,14 +5,14 @@ mod primitives;\n \n use std::sync::Arc;\n \n+use insta::assert_snapshot_matches;\n use ra_db::SourceDatabase;\n use test_utils::covers;\n-use insta::assert_snapshot_matches;\n \n use crate::{\n-    Crate, Either,\n-    mock::{MockDatabase, CrateGraphFixture},\n+    mock::{CrateGraphFixture, MockDatabase},\n     nameres::Resolution,\n+    Crate, Either,\n };\n \n use super::*;"}, {"sha": "bce9d2d4bcb2ece1bafc1f98e1219b1a6604a802", "filename": "crates/ra_hir/src/path.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fpath.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,8 +1,11 @@\n use std::sync::Arc;\n \n-use ra_syntax::{ast::{self, NameOwner}, AstNode};\n+use ra_syntax::{\n+    ast::{self, NameOwner},\n+    AstNode,\n+};\n \n-use crate::{Name, AsName, type_ref::TypeRef};\n+use crate::{type_ref::TypeRef, AsName, Name};\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Path {"}, {"sha": "fc981e9b3d6359123119e839150f7827aaf6e70f", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -4,16 +4,19 @@ use std::sync::Arc;\n use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n-    ModuleDef, Trait, MacroDef,\n     code_model::Crate,\n     db::HirDatabase,\n-    name::{Name, KnownName},\n-    nameres::{PerNs, CrateDefMap, CrateModuleId},\n+    either::Either,\n+    expr::{\n+        scope::{ExprScopes, ScopeId},\n+        PatId,\n+    },\n     generics::GenericParams,\n-    expr::{scope::{ExprScopes, ScopeId}, PatId},\n     impl_block::ImplBlock,\n+    name::{KnownName, Name},\n+    nameres::{CrateDefMap, CrateModuleId, PerNs},\n     path::Path,\n-    either::Either,\n+    MacroDef, ModuleDef, Trait,\n };\n \n #[derive(Debug, Clone, Default)]"}, {"sha": "429575feef23d27f95429b868726274bf352084b", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -7,21 +7,25 @@\n /// purely for \"IDE needs\".\n use std::sync::Arc;\n \n-use rustc_hash::{FxHashSet, FxHashMap};\n use ra_db::{FileId, FilePosition};\n use ra_syntax::{\n-    SyntaxNode, AstPtr, TextUnit, SyntaxNodePtr, TextRange,\n-    ast::{self, AstNode, NameOwner},\n     algo::find_node_at_offset,\n+    ast::{self, AstNode, NameOwner},\n+    AstPtr,\n     SyntaxKind::*,\n+    SyntaxNode, SyntaxNodePtr, TextRange, TextUnit,\n };\n+use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n-    HirDatabase, Function, Struct, Enum, Const, Static, Either, DefWithBody, PerNs, Name,\n-    AsName, Module, HirFileId, Crate, Trait, Resolver, Ty, Path, MacroDef,\n-    expr::{BodySourceMap, scope::{ScopeId, ExprScopes}},\n+    expr,\n+    expr::{\n+        scope::{ExprScopes, ScopeId},\n+        BodySourceMap,\n+    },\n     ids::LocationCtx,\n-    expr, AstId,\n+    AsName, AstId, Const, Crate, DefWithBody, Either, Enum, Function, HirDatabase, HirFileId,\n+    MacroDef, Module, Name, Path, PerNs, Resolver, Static, Struct, Trait, Ty,\n };\n \n /// Locates the module by `FileId`. Picks topmost module in the file."}, {"sha": "324b79824ee4053a41b69ee89c2056ea7d2c097f", "filename": "crates/ra_hir/src/source_id.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_id.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,9 +1,13 @@\n-use std::{marker::PhantomData, sync::Arc, hash::{Hash, Hasher}};\n+use std::{\n+    hash::{Hash, Hasher},\n+    marker::PhantomData,\n+    sync::Arc,\n+};\n \n-use ra_arena::{Arena, RawId, impl_arena_id};\n-use ra_syntax::{SyntaxNodePtr, TreeArc, SyntaxNode, AstNode, ast};\n+use ra_arena::{impl_arena_id, Arena, RawId};\n+use ra_syntax::{ast, AstNode, SyntaxNode, SyntaxNodePtr, TreeArc};\n \n-use crate::{HirFileId, AstDatabase};\n+use crate::{AstDatabase, HirFileId};\n \n /// `AstId` points to an AST node in any file.\n ///"}, {"sha": "fc036830309478f50eb99cbe84d3b38ac4d0670f", "filename": "crates/ra_hir/src/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftraits.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,13 +1,13 @@\n //! HIR for trait definitions.\n \n-use std::sync::Arc;\n use rustc_hash::FxHashMap;\n+use std::sync::Arc;\n \n use ra_syntax::ast::{self, NameOwner};\n \n use crate::{\n-    Function, Const, TypeAlias, Name, DefDatabase, Trait, AstDatabase, Module, HasSource,\n-    ids::LocationCtx, name::AsName,\n+    ids::LocationCtx, name::AsName, AstDatabase, Const, DefDatabase, Function, HasSource, Module,\n+    Name, Trait, TypeAlias,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "11afdc0f349ee94d36c9f0e8c40bebf8908a0da8", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -12,17 +12,20 @@ mod lower;\n mod infer;\n pub(crate) mod display;\n \n-use std::sync::Arc;\n use std::ops::Deref;\n+use std::sync::Arc;\n use std::{fmt, mem};\n \n-use crate::{Name, AdtDef, type_ref::Mutability, db::HirDatabase, Trait, GenericParams, TypeAlias};\n+use crate::{db::HirDatabase, type_ref::Mutability, AdtDef, GenericParams, Name, Trait, TypeAlias};\n use display::{HirDisplay, HirFormatter};\n \n-pub(crate) use lower::{TypableDef, type_for_def, type_for_field, callable_item_sig, generic_predicates, generic_defaults};\n-pub(crate) use infer::{infer_query, InferenceResult, InferTy};\n-pub use lower::CallableDef;\n pub(crate) use autoderef::autoderef;\n+pub(crate) use infer::{infer_query, InferTy, InferenceResult};\n+pub use lower::CallableDef;\n+pub(crate) use lower::{\n+    callable_item_sig, generic_defaults, generic_predicates, type_for_def, type_for_field,\n+    TypableDef,\n+};\n pub(crate) use traits::ProjectionPredicate;\n \n /// A type constructor or type name: this might be something like the primitive"}, {"sha": "90c1ae630ebc8f12f24354e94bf1805ce81c6a57", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -7,8 +7,8 @@ use std::iter::successors;\n \n use log::{info, warn};\n \n-use crate::{HirDatabase, Name, Resolver, HasGenericParams};\n-use super::{traits::Solution, Ty, Canonical};\n+use super::{traits::Solution, Canonical, Ty};\n+use crate::{HasGenericParams, HirDatabase, Name, Resolver};\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;\n "}, {"sha": "a2dc9237046d789bf6db545be3b16c0e15a92448", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -15,38 +15,37 @@\n \n use std::borrow::Cow;\n use std::iter::repeat;\n+use std::mem;\n use std::ops::Index;\n use std::sync::Arc;\n-use std::mem;\n \n-use ena::unify::{InPlaceUnificationTable, UnifyKey, UnifyValue, NoError};\n+use ena::unify::{InPlaceUnificationTable, NoError, UnifyKey, UnifyValue};\n use rustc_hash::FxHashMap;\n \n use ra_arena::map::ArenaMap;\n use ra_prof::profile;\n use test_utils::tested_by;\n \n+use super::{\n+    autoderef, method_resolution, op, primitive,\n+    traits::{Guidance, Obligation, Solution},\n+    ApplicationTy, CallableDef, Substs, TraitRef, Ty, TypableDef, TypeCtor,\n+};\n use crate::{\n-    Function, StructField, Path, Name, FnData, AdtDef, ConstData, HirDatabase,\n-    DefWithBody, ImplItem,\n-    type_ref::{TypeRef, Mutability},\n+    adt::VariantDef,\n+    diagnostics::DiagnosticSink,\n     expr::{\n-        Body, Expr, BindingAnnotation, Literal, ExprId, Pat, PatId, UnaryOp, BinaryOp, Statement,\n-        FieldPat, Array, self,\n+        self, Array, BinaryOp, BindingAnnotation, Body, Expr, ExprId, FieldPat, Literal, Pat,\n+        PatId, Statement, UnaryOp,\n     },\n     generics::{GenericParams, HasGenericParams},\n-    path::{GenericArgs, GenericArg},\n-    ModuleDef,\n-    adt::VariantDef,\n-    resolve::{Resolver, Resolution},\n     nameres::Namespace,\n+    path::{GenericArg, GenericArgs},\n+    resolve::{Resolution, Resolver},\n     ty::infer::diagnostics::InferenceDiagnostic,\n-    diagnostics::DiagnosticSink,\n-};\n-use super::{\n-    Ty, TypableDef, Substs, primitive, op, ApplicationTy, TypeCtor, CallableDef, TraitRef,\n-    traits::{Solution, Obligation, Guidance},\n-    method_resolution, autoderef,\n+    type_ref::{Mutability, TypeRef},\n+    AdtDef, ConstData, DefWithBody, FnData, Function, HirDatabase, ImplItem, ModuleDef, Name, Path,\n+    StructField,\n };\n \n mod unify;\n@@ -1415,10 +1414,10 @@ impl Expectation {\n \n mod diagnostics {\n     use crate::{\n-        expr::ExprId,\n         diagnostics::{DiagnosticSink, NoSuchField},\n-        HirDatabase, Function, HasSource,\n-};\n+        expr::ExprId,\n+        Function, HasSource, HirDatabase,\n+    };\n \n     #[derive(Debug, PartialEq, Eq, Clone)]\n     pub(super) enum InferenceDiagnostic {"}, {"sha": "04633bdb23f7a2ad59be034fd58fa42028240b46", "filename": "crates/ra_hir/src/ty/infer/unify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,8 +1,8 @@\n //! Unification and canonicalization logic.\n \n-use crate::db::HirDatabase;\n-use crate::ty::{Ty, Canonical, TraitRef, InferTy};\n use super::InferenceContext;\n+use crate::db::HirDatabase;\n+use crate::ty::{Canonical, InferTy, TraitRef, Ty};\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     pub(super) fn canonicalizer<'b>(&'b mut self) -> Canonicalizer<'a, 'b, D>"}, {"sha": "8b1b2a7f9d770b2d93367fdd5975115b6a3b3f68", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -5,23 +5,22 @@\n //!  - Building the type for an item: This happens through the `type_for_def` query.\n //!\n //! This usually involves resolving names, collecting generic arguments etc.\n-use std::sync::Arc;\n use std::iter;\n+use std::sync::Arc;\n \n+use super::{FnSig, GenericPredicate, Substs, TraitRef, Ty, TypeCtor};\n use crate::{\n-    Function, Struct, Union, StructField, Enum, EnumVariant, Path, ModuleDef, TypeAlias, Const, Static,\n-    HirDatabase, BuiltinType,\n-    type_ref::TypeRef,\n-    nameres::Namespace,\n-    resolve::{Resolver, Resolution},\n-    path::{PathSegment, GenericArg},\n-    generics::{HasGenericParams},\n     adt::VariantDef,\n-    Trait,\n-    generics::{WherePredicate, GenericDef},\n+    generics::HasGenericParams,\n+    generics::{GenericDef, WherePredicate},\n+    nameres::Namespace,\n+    path::{GenericArg, PathSegment},\n+    resolve::{Resolution, Resolver},\n     ty::AdtDef,\n+    type_ref::TypeRef,\n+    BuiltinType, Const, Enum, EnumVariant, Function, HirDatabase, ModuleDef, Path, Static, Struct,\n+    StructField, Trait, TypeAlias, Union,\n };\n-use super::{Ty, FnSig, Substs, TypeCtor, TraitRef, GenericPredicate};\n \n impl Ty {\n     pub(crate) fn from_hir(db: &impl HirDatabase, resolver: &Resolver, type_ref: &TypeRef) -> Self {"}, {"sha": "bc890fe79822e6e1688b49acffc2629b6aee4c29", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -7,17 +7,17 @@ use std::sync::Arc;\n use arrayvec::ArrayVec;\n use rustc_hash::FxHashMap;\n \n+use super::{autoderef, Canonical, TraitRef};\n use crate::{\n-    HirDatabase, Module, Crate, Name, Function, Trait,\n-    impl_block::{ImplId, ImplBlock, ImplItem},\n-    ty::{Ty, TypeCtor},\n+    generics::HasGenericParams,\n+    impl_block::{ImplBlock, ImplId, ImplItem},\n     nameres::CrateModuleId,\n     resolve::Resolver,\n     traits::TraitItem,\n-    generics::HasGenericParams,\n-    ty::primitive::{UncertainIntTy, UncertainFloatTy}\n+    ty::primitive::{UncertainFloatTy, UncertainIntTy},\n+    ty::{Ty, TypeCtor},\n+    Crate, Function, HirDatabase, Module, Name, Trait,\n };\n-use super::{TraitRef, Canonical, autoderef};\n \n /// This is used as a key for indexing impls.\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "9ba8682980c8e21ce18b93a942846b1b761ea743", "filename": "crates/ra_hir/src/ty/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fop.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,5 +1,5 @@\n-use crate::{ ty::ApplicationTy, expr::BinaryOp};\n-use super::{Ty, TypeCtor, InferTy};\n+use super::{InferTy, Ty, TypeCtor};\n+use crate::{expr::BinaryOp, ty::ApplicationTy};\n \n pub(super) fn binary_op_return_ty(op: BinaryOp, rhs_ty: Ty) -> Ty {\n     match op {"}, {"sha": "20fa74fb435664a7a5e10c8840433d02d1ab603a", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,17 +1,18 @@\n-use std::sync::Arc;\n use std::fmt::Write;\n+use std::sync::Arc;\n \n use insta::assert_snapshot_matches;\n \n-use ra_db::{SourceDatabase, salsa::Database, FilePosition};\n-use ra_syntax::{algo, ast::{self, AstNode}, SyntaxKind::*};\n+use ra_db::{salsa::Database, FilePosition, SourceDatabase};\n+use ra_syntax::{\n+    algo,\n+    ast::{self, AstNode},\n+    SyntaxKind::*,\n+};\n use test_utils::covers;\n \n use crate::{\n-    mock::MockDatabase,\n-    ty::display::HirDisplay,\n-    ty::InferenceResult,\n-    expr::BodySourceMap,\n+    expr::BodySourceMap, mock::MockDatabase, ty::display::HirDisplay, ty::InferenceResult,\n     SourceAnalyzer,\n };\n "}, {"sha": "3c902451bf0aae2ef8a7a7dd71d2d7edb8c12786", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,16 +1,16 @@\n //! Trait solving using Chalk.\n use std::sync::Arc;\n \n-use parking_lot::Mutex;\n-use rustc_hash::FxHashSet;\n-use log::debug;\n use chalk_ir::cast::Cast;\n+use log::debug;\n+use parking_lot::Mutex;\n use ra_prof::profile;\n+use rustc_hash::FxHashSet;\n \n-use crate::{Crate, Trait, db::HirDatabase, ImplBlock};\n-use super::{TraitRef, Ty, Canonical, ProjectionTy};\n+use super::{Canonical, ProjectionTy, TraitRef, Ty};\n+use crate::{db::HirDatabase, Crate, ImplBlock, Trait};\n \n-use self::chalk::{ToChalk, from_chalk};\n+use self::chalk::{from_chalk, ToChalk};\n \n pub(crate) mod chalk;\n "}, {"sha": "2a0537bc333f44940522427de20f4c71ebf28ad6", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -3,20 +3,25 @@ use std::sync::Arc;\n \n use log::debug;\n \n-use chalk_ir::{TypeId, ImplId, TypeKindId, Parameter, Identifier, cast::Cast, PlaceholderIndex, UniverseIndex, TypeName};\n-use chalk_rust_ir::{AssociatedTyDatum, TraitDatum, StructDatum, ImplDatum};\n+use chalk_ir::{\n+    cast::Cast, Identifier, ImplId, Parameter, PlaceholderIndex, TypeId, TypeKindId, TypeName,\n+    UniverseIndex,\n+};\n+use chalk_rust_ir::{AssociatedTyDatum, ImplDatum, StructDatum, TraitDatum};\n \n-use test_utils::tested_by;\n use ra_db::salsa::{InternId, InternKey};\n+use test_utils::tested_by;\n \n+use super::ChalkContext;\n use crate::{\n-    Trait, HasGenericParams, ImplBlock, Crate,\n     db::HirDatabase,\n-    ty::{TraitRef, Ty, ApplicationTy, TypeCtor, Substs, GenericPredicate, CallableDef, ProjectionTy},\n+    generics::GenericDef,\n     ty::display::HirDisplay,\n-    generics::GenericDef, TypeAlias, ImplItem,\n+    ty::{\n+        ApplicationTy, CallableDef, GenericPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n+    },\n+    Crate, HasGenericParams, ImplBlock, ImplItem, Trait, TypeAlias,\n };\n-use super::ChalkContext;\n \n /// This represents a trait whose name we could not resolve.\n const UNKNOWN_TRAIT: chalk_ir::TraitId ="}, {"sha": "3b38c4740a73aceda682e2bb527dc6aa96380642", "filename": "crates/ra_hir/src/type_alias.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -4,7 +4,12 @@ use std::sync::Arc;\n \n use ra_syntax::ast::NameOwner;\n \n-use crate::{TypeAlias, db::{DefDatabase, AstDatabase}, type_ref::TypeRef, name::{Name, AsName}, HasSource};\n+use crate::{\n+    db::{AstDatabase, DefDatabase},\n+    name::{AsName, Name},\n+    type_ref::TypeRef,\n+    HasSource, TypeAlias,\n+};\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct TypeAliasData {"}, {"sha": "e3d1ac5298a800651250e99f10e54969fed67b66", "filename": "crates/ra_ide_api/src/assists.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fassists.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,6 +1,6 @@\n-use ra_db::{FileRange, FilePosition};\n+use ra_db::{FilePosition, FileRange};\n \n-use crate::{SourceFileEdit, SourceChange, db::RootDatabase};\n+use crate::{db::RootDatabase, SourceChange, SourceFileEdit};\n \n pub use ra_assists::AssistId;\n "}, {"sha": "368fdcaa1efd4925fa2f1e9492357f5e6b283312", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,12 +1,12 @@\n-use test_utils::tested_by;\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    AstNode, SyntaxNode, TextUnit,\n-    ast::{self, ArgListOwner},\n     algo::find_node_at_offset,\n+    ast::{self, ArgListOwner},\n+    AstNode, SyntaxNode, TextUnit,\n };\n+use test_utils::tested_by;\n \n-use crate::{FilePosition, CallInfo, FunctionSignature, db::RootDatabase};\n+use crate::{db::RootDatabase, CallInfo, FilePosition, FunctionSignature};\n \n /// Computes parameter information for the given call expression.\n pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<CallInfo> {"}, {"sha": "2a1af0a0a34522f72acc6c3545ee448c37a5084e", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,22 +1,19 @@\n-use std::{\n-    fmt, time,\n-    sync::Arc,\n-};\n+use std::{fmt, sync::Arc, time};\n \n-use rustc_hash::FxHashMap;\n use ra_db::{\n-    SourceRootId, FileId, CrateGraph, SourceDatabase, SourceRoot,\n     salsa::{Database, SweepStrategy},\n+    CrateGraph, FileId, SourceDatabase, SourceRoot, SourceRootId,\n };\n+use ra_prof::{memory_usage, profile, Bytes};\n use ra_syntax::SourceFile;\n-use ra_prof::{profile, Bytes, memory_usage};\n-use relative_path::RelativePathBuf;\n use rayon::prelude::*;\n+use relative_path::RelativePathBuf;\n+use rustc_hash::FxHashMap;\n \n use crate::{\n     db::RootDatabase,\n-    symbol_index::{SymbolIndex, SymbolsDatabase},\n     status::syntax_tree_stats,\n+    symbol_index::{SymbolIndex, SymbolsDatabase},\n };\n \n #[derive(Default)]"}, {"sha": "c23b5da59beebf1760b3c65d1d5558f085f8a041", "filename": "crates/ra_ide_api/src/completion.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -14,19 +14,19 @@ mod complete_postfix;\n \n use ra_db::SourceDatabase;\n \n+#[cfg(test)]\n+use crate::completion::completion_item::{check_completion, do_completion};\n use crate::{\n-    db,\n-    FilePosition,\n     completion::{\n-        completion_item::{Completions, CompletionKind},\n         completion_context::CompletionContext,\n+        completion_item::{CompletionKind, Completions},\n     },\n-\n+    db, FilePosition,\n };\n-#[cfg(test)]\n-use crate::completion::completion_item::{do_completion, check_completion};\n \n-pub use crate::completion::completion_item::{CompletionItem, CompletionItemKind, InsertTextFormat};\n+pub use crate::completion::completion_item::{\n+    CompletionItem, CompletionItemKind, InsertTextFormat,\n+};\n \n /// Main entry point for completion. We run completion as a two-phase process.\n ///"}, {"sha": "a5f071442b18de8f350dc4c90c689f432c9d097a", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,4 +1,4 @@\n-use hir::{Ty, AdtDef, TypeCtor};\n+use hir::{AdtDef, Ty, TypeCtor};\n \n use crate::completion::{CompletionContext, Completions};\n use rustc_hash::FxHashSet;\n@@ -49,7 +49,7 @@ fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{do_completion, CompletionKind, CompletionItem};\n+    use crate::completion::{do_completion, CompletionItem, CompletionKind};\n     use insta::assert_debug_snapshot_matches;\n \n     fn do_ref_completion(code: &str) -> Vec<CompletionItem> {"}, {"sha": "5a117c48509e34ebd2c46fd03b8e54acae05c576", "filename": "crates/ra_ide_api/src/completion/complete_fn_param.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,11 +1,10 @@\n use ra_syntax::{\n     algo::visit::{visitor_ctx, VisitorCtx},\n-    ast,\n-    AstNode,\n+    ast, AstNode,\n };\n use rustc_hash::FxHashMap;\n \n-use crate::completion::{CompletionContext, Completions, CompletionKind, CompletionItem};\n+use crate::completion::{CompletionContext, CompletionItem, CompletionKind, Completions};\n \n /// Complete repeated parameters, both name and type. For example, if all\n /// functions in a file have a `spam: &mut Spam` parameter, a completion with"}, {"sha": "034ed934dfb02b7c2c7823b7c702e249c6fcdeae", "filename": "crates/ra_ide_api/src/completion/complete_keyword.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,11 +1,14 @@\n use ra_syntax::{\n     algo::visit::{visitor, Visitor},\n-    AstNode,\n     ast::{self, LoopBodyOwner},\n-    SyntaxKind::*, SyntaxToken,\n+    AstNode,\n+    SyntaxKind::*,\n+    SyntaxToken,\n };\n \n-use crate::completion::{CompletionContext, CompletionItem, Completions, CompletionKind, CompletionItemKind};\n+use crate::completion::{\n+    CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n+};\n \n pub(super) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n     // complete keyword \"crate\" in use stmt"}, {"sha": "29586cd1f1357b8e7836a017e415d17be6f0c41e", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,8 +1,8 @@\n-use hir::{Resolution, Either};\n+use hir::{Either, Resolution};\n use ra_syntax::AstNode;\n use test_utils::tested_by;\n \n-use crate::completion::{Completions, CompletionContext};\n+use crate::completion::{CompletionContext, Completions};\n \n pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n     let path = match &ctx.path_prefix {\n@@ -78,7 +78,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n mod tests {\n     use test_utils::covers;\n \n-    use crate::completion::{CompletionKind, do_completion, CompletionItem};\n+    use crate::completion::{do_completion, CompletionItem, CompletionKind};\n     use insta::assert_debug_snapshot_matches;\n \n     fn do_reference_completion(code: &str) -> Vec<CompletionItem> {"}, {"sha": "f12dfcc17f7b904df9c2aff50419d20263b38b8a", "filename": "crates/ra_ide_api/src/completion/complete_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -27,8 +27,8 @@ pub(super) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n \n #[cfg(test)]\n mod tests {\n+    use crate::completion::{do_completion, CompletionItem, CompletionKind};\n     use insta::assert_debug_snapshot_matches;\n-    use crate::completion::{CompletionItem, CompletionKind, do_completion};\n \n     fn complete(code: &str) -> Vec<CompletionItem> {\n         do_completion(code, CompletionKind::Reference)"}, {"sha": "7042d8bff01e7db235f70233120b88828ece5efb", "filename": "crates/ra_ide_api/src/completion/complete_postfix.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,18 +1,11 @@\n use crate::{\n     completion::{\n-        completion_item::{\n-            Completions,\n-            Builder,\n-            CompletionKind,\n-        },\n         completion_context::CompletionContext,\n+        completion_item::{Builder, CompletionKind, Completions},\n     },\n-    CompletionItem\n-};\n-use ra_syntax::{\n-    ast::AstNode,\n-    TextRange\n+    CompletionItem,\n };\n+use ra_syntax::{ast::AstNode, TextRange};\n use ra_text_edit::TextEditBuilder;\n \n fn postfix_snippet(ctx: &CompletionContext, label: &str, detail: &str, snippet: &str) -> Builder {\n@@ -58,7 +51,7 @@ pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{CompletionKind, check_completion};\n+    use crate::completion::{check_completion, CompletionKind};\n \n     fn check_snippet_completion(test_name: &str, code: &str) {\n         check_completion(test_name, code, CompletionKind::Postfix);"}, {"sha": "1ba8712572d9f9955134802d4f082b4500455038", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,9 +1,9 @@\n-use rustc_hash::FxHashMap;\n-use ra_text_edit::TextEditBuilder;\n-use ra_syntax::{SmolStr, ast, AstNode};\n use ra_assists::auto_import;\n+use ra_syntax::{ast, AstNode, SmolStr};\n+use ra_text_edit::TextEditBuilder;\n+use rustc_hash::FxHashMap;\n \n-use crate::completion::{CompletionItem, Completions, CompletionKind, CompletionContext};\n+use crate::completion::{CompletionContext, CompletionItem, CompletionKind, Completions};\n \n pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n     if ctx.is_trivial_path {\n@@ -121,7 +121,7 @@ impl ImportResolver {\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{CompletionKind, check_completion};\n+    use crate::completion::{check_completion, CompletionKind};\n \n     fn check_reference_completion(name: &str, code: &str) {\n         check_completion(name, code, CompletionKind::Reference);"}, {"sha": "d2d364b57b1e1e285e18c0cfbd268adf2e017722", "filename": "crates/ra_ide_api/src/completion/complete_snippet.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,4 +1,7 @@\n-use crate::completion::{CompletionItem, Completions, CompletionKind, CompletionItemKind, CompletionContext, completion_item::Builder};\n+use crate::completion::{\n+    completion_item::Builder, CompletionContext, CompletionItem, CompletionItemKind,\n+    CompletionKind, Completions,\n+};\n \n fn snippet(ctx: &CompletionContext, label: &str, snippet: &str) -> Builder {\n     CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), label)\n@@ -36,7 +39,7 @@ fn ${1:feature}() {\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{CompletionKind, check_completion};\n+    use crate::completion::{check_completion, CompletionKind};\n \n     fn check_snippet_completion(name: &str, code: &str) {\n         check_completion(name, code, CompletionKind::Snippet);"}, {"sha": "35fb2111336a8ccfe044fb857a1cc3fabad3ff45", "filename": "crates/ra_ide_api/src/completion/complete_struct_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -27,8 +27,8 @@ pub(super) fn complete_struct_literal(acc: &mut Completions, ctx: &CompletionCon\n \n #[cfg(test)]\n mod tests {\n+    use crate::completion::{do_completion, CompletionItem, CompletionKind};\n     use insta::assert_debug_snapshot_matches;\n-    use crate::completion::{CompletionItem, CompletionKind, do_completion};\n \n     fn complete(code: &str) -> Vec<CompletionItem> {\n         do_completion(code, CompletionKind::Reference)"}, {"sha": "55fdba50d6c5bc8f34593ebb43b4cde5cc29c4fe", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,11 +1,11 @@\n-use ra_text_edit::AtomTextEdit;\n+use hir::source_binder;\n use ra_syntax::{\n-    AstNode, SyntaxNode, SourceFile, TextUnit, TextRange, SyntaxToken, Parse,\n-    ast,\n-    algo::{find_token_at_offset, find_covering_element, find_node_at_offset},\n+    algo::{find_covering_element, find_node_at_offset, find_token_at_offset},\n+    ast, AstNode, Parse, SourceFile,\n     SyntaxKind::*,\n+    SyntaxNode, SyntaxToken, TextRange, TextUnit,\n };\n-use hir::source_binder;\n+use ra_text_edit::AtomTextEdit;\n \n use crate::{db, FilePosition};\n "}, {"sha": "f78c4c8772f4b110115981517a335f920e5c4efc", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -2,7 +2,7 @@ use std::fmt;\n \n use hir::Documentation;\n use ra_syntax::TextRange;\n-use ra_text_edit::{TextEditBuilder, TextEdit};\n+use ra_text_edit::{TextEdit, TextEditBuilder};\n \n /// `CompletionItem` describes a single completion variant in the editor pop-up.\n /// It is basically a POD with various properties. To construct a\n@@ -285,8 +285,8 @@ impl Into<Vec<CompletionItem>> for Completions {\n \n #[cfg(test)]\n pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n-    use crate::mock_analysis::{single_file_with_position, analysis_and_position};\n     use crate::completion::completions;\n+    use crate::mock_analysis::{analysis_and_position, single_file_with_position};\n     let (analysis, position) = if code.contains(\"//-\") {\n         analysis_and_position(code)\n     } else {"}, {"sha": "98060947a32ee982e66c94201ede3e2d49fe0295", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,16 +1,14 @@\n //! This modules takes care of rendering various defenitions as completion items.\n+use hir::{Docs, HasSource, HirDisplay, PerNs, Resolution};\n use join_to_string::join;\n-use test_utils::tested_by;\n-use hir::{Docs, PerNs, Resolution, HirDisplay, HasSource};\n use ra_syntax::ast::NameOwner;\n+use test_utils::tested_by;\n \n use crate::completion::{\n-    Completions, CompletionKind, CompletionItemKind, CompletionContext, CompletionItem,\n+    CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n };\n \n-use crate::display::{\n-    function_label, const_label, type_label,\n-};\n+use crate::display::{const_label, function_label, type_label};\n \n impl Completions {\n     pub(crate) fn add_field(\n@@ -178,7 +176,7 @@ impl Completions {\n mod tests {\n     use test_utils::covers;\n \n-    use crate::completion::{CompletionKind, check_completion};\n+    use crate::completion::{check_completion, CompletionKind};\n \n     fn check_reference_completion(code: &str, expected_completions: &str) {\n         check_completion(code, expected_completions, CompletionKind::Reference);"}, {"sha": "fc5b06ca87b315c09ca4049111e2522b566934d6", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,14 +1,14 @@\n-use std::{\n-    sync::Arc,\n-    time,\n-};\n+use std::{sync::Arc, time};\n \n use ra_db::{\n-    CheckCanceled, FileId, Canceled, SourceDatabase,\n     salsa::{self, Database},\n+    Canceled, CheckCanceled, FileId, SourceDatabase,\n };\n \n-use crate::{LineIndex, symbol_index::{self, SymbolsDatabase}};\n+use crate::{\n+    symbol_index::{self, SymbolsDatabase},\n+    LineIndex,\n+};\n \n #[salsa::database(\n     ra_db::SourceDatabaseStorage,"}, {"sha": "9ab455b0e414b13196e8d441a7b9c55f9a17e60e", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,17 +1,20 @@\n use std::cell::RefCell;\n \n+use hir::{\n+    diagnostics::{Diagnostic as _, DiagnosticSink},\n+    source_binder,\n+};\n use itertools::Itertools;\n-use hir::{source_binder, diagnostics::{Diagnostic as _, DiagnosticSink}};\n+use ra_assists::ast_editor::{AstBuilder, AstEditor};\n use ra_db::SourceDatabase;\n+use ra_prof::profile;\n use ra_syntax::{\n-    T, Location, TextRange, SyntaxNode,\n-    ast::{self, AstNode, NamedFieldList, NamedField},\n+    ast::{self, AstNode, NamedField, NamedFieldList},\n+    Location, SyntaxNode, TextRange, T,\n };\n-use ra_assists::ast_editor::{AstEditor, AstBuilder};\n use ra_text_edit::{TextEdit, TextEditBuilder};\n-use ra_prof::profile;\n \n-use crate::{Diagnostic, FileId, FileSystemEdit, SourceChange, SourceFileEdit, db::RootDatabase};\n+use crate::{db::RootDatabase, Diagnostic, FileId, FileSystemEdit, SourceChange, SourceFileEdit};\n \n #[derive(Debug, Copy, Clone)]\n pub enum Severity {\n@@ -170,9 +173,9 @@ fn check_struct_shorthand_initialization(\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::assert_eq_text;\n     use insta::assert_debug_snapshot_matches;\n     use ra_syntax::SourceFile;\n+    use test_utils::assert_eq_text;\n \n     use crate::mock_analysis::single_file;\n "}, {"sha": "cc59e99d8816da6ddb85233119b729f7ef2c141e", "filename": "crates/ra_ide_api/src/display.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -6,14 +6,17 @@ mod navigation_target;\n mod structure;\n mod short_label;\n \n-use ra_syntax::{ast::{self, AstNode, TypeParamsOwner}, SyntaxKind::{ATTR, COMMENT}};\n+use ra_syntax::{\n+    ast::{self, AstNode, TypeParamsOwner},\n+    SyntaxKind::{ATTR, COMMENT},\n+};\n \n-pub use navigation_target::NavigationTarget;\n-pub use structure::{StructureNode, file_structure};\n pub use function_signature::FunctionSignature;\n+pub use navigation_target::NavigationTarget;\n+pub use structure::{file_structure, StructureNode};\n \n+pub(crate) use navigation_target::{description_from_symbol, docs_from_symbol};\n pub(crate) use short_label::ShortLabel;\n-pub(crate) use navigation_target::{docs_from_symbol, description_from_symbol};\n \n pub(crate) fn function_label(node: &ast::FnDef) -> String {\n     FunctionSignature::from(node).to_string()"}, {"sha": "e7ad5a0d19c0d6ae39badf41119720af3558f0c8", "filename": "crates/ra_ide_api/src/display/function_signature.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,11 +1,14 @@\n use std::fmt::{self, Display};\n \n+use hir::{Docs, Documentation, HasSource};\n use join_to_string::join;\n use ra_syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n use std::convert::From;\n-use hir::{Docs, Documentation, HasSource};\n \n-use crate::{db, display::{where_predicates, generic_parameters}};\n+use crate::{\n+    db,\n+    display::{generic_parameters, where_predicates},\n+};\n \n /// Contains information about a function signature\n #[derive(Debug)]"}, {"sha": "1edb64e3de0946038cd3c303d30bf9f29cae95fe", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,14 +1,15 @@\n+use hir::{FieldSource, HasSource, ImplItem, ModuleSource};\n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n-    SyntaxNode, AstNode, SmolStr, TextRange, AstPtr, TreeArc,\n-    SyntaxKind::{self, NAME},\n-    ast::{self, DocCommentsOwner},\n     algo::visit::{visitor, Visitor},\n+    ast::{self, DocCommentsOwner},\n+    AstNode, AstPtr, SmolStr,\n+    SyntaxKind::{self, NAME},\n+    SyntaxNode, TextRange, TreeArc,\n };\n-use hir::{ModuleSource, FieldSource, ImplItem, HasSource};\n \n-use crate::{FileSymbol, db::RootDatabase};\n use super::short_label::ShortLabel;\n+use crate::{db::RootDatabase, FileSymbol};\n \n /// `NavigationTarget` represents and element in the editor's UI which you can\n /// click on to navigate to a particular piece of code."}, {"sha": "f926f631fc5521e9ed43ccbc5759d009047b150d", "filename": "crates/ra_ide_api/src/display/short_label.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,6 +1,4 @@\n-use ra_syntax::{\n-    ast::{self, NameOwner, VisibilityOwner, TypeAscriptionOwner, AstNode},\n-};\n+use ra_syntax::ast::{self, AstNode, NameOwner, TypeAscriptionOwner, VisibilityOwner};\n \n pub(crate) trait ShortLabel {\n     fn short_label(&self) -> Option<String>;"}, {"sha": "e5b257b9bdb2672df068274c9041f364360ae053", "filename": "crates/ra_ide_api/src/display/structure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -2,7 +2,7 @@ use crate::TextRange;\n \n use ra_syntax::{\n     algo::visit::{visitor, Visitor},\n-    ast::{self, AttrsOwner, NameOwner, TypeParamsOwner, TypeAscriptionOwner},\n+    ast::{self, AttrsOwner, NameOwner, TypeAscriptionOwner, TypeParamsOwner},\n     AstNode, SourceFile, SyntaxKind, SyntaxNode, WalkEvent,\n };\n "}, {"sha": "655852514a35f9432e93a24a373791d95675b908", "filename": "crates/ra_ide_api/src/extend_selection.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,13 +1,13 @@\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    Direction, SyntaxNode, TextRange, TextUnit, SyntaxElement,\n     algo::{find_covering_element, find_token_at_offset, TokenAtOffset},\n-    SyntaxKind::*, SyntaxToken,\n     ast::{self, AstNode, AstToken},\n-    T\n+    Direction, SyntaxElement,\n+    SyntaxKind::*,\n+    SyntaxNode, SyntaxToken, TextRange, TextUnit, T,\n };\n \n-use crate::{FileRange, db::RootDatabase};\n+use crate::{db::RootDatabase, FileRange};\n \n // FIXME: restore macro support\n pub(crate) fn extend_selection(db: &RootDatabase, frange: FileRange) -> TextRange {\n@@ -205,7 +205,7 @@ fn adj_comments(comment: ast::Comment, dir: Direction) -> ast::Comment {\n \n #[cfg(test)]\n mod tests {\n-    use ra_syntax::{SourceFile, AstNode};\n+    use ra_syntax::{AstNode, SourceFile};\n     use test_utils::extract_offset;\n \n     use super::*;"}, {"sha": "a1e6f94e08eca1bbd48304b9daa7acdbec879674", "filename": "crates/ra_ide_api/src/folding_ranges.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,9 +1,10 @@\n use rustc_hash::FxHashSet;\n \n use ra_syntax::{\n-    SourceFile, SyntaxNode, TextRange, Direction, SyntaxElement,\n-    SyntaxKind::{self, *},\n     ast::{self, AstNode, AstToken, VisibilityOwner},\n+    Direction, SourceFile, SyntaxElement,\n+    SyntaxKind::{self, *},\n+    SyntaxNode, TextRange,\n };\n \n #[derive(Debug, PartialEq, Eq)]"}, {"sha": "08feed7dc968f31b411fa390d5bc2733ca2a8bbe", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,19 +1,18 @@\n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n-    AstNode, ast::{self, DocCommentsOwner},\n     algo::{\n         find_node_at_offset,\n         visit::{visitor, Visitor},\n     },\n-    SyntaxNode,\n+    ast::{self, DocCommentsOwner},\n+    AstNode, SyntaxNode,\n };\n \n use crate::{\n-    FilePosition, NavigationTarget,\n     db::RootDatabase,\n-    RangeInfo,\n-    name_ref_kind::{NameRefKind::*, classify_name_ref},\n     display::ShortLabel,\n+    name_ref_kind::{classify_name_ref, NameRefKind::*},\n+    FilePosition, NavigationTarget, RangeInfo,\n };\n \n pub(crate) fn goto_definition("}, {"sha": "d2d5eae9a104c896214a875dcad224982d2cac9d", "filename": "crates/ra_ide_api/src/goto_type_definition.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,10 +1,7 @@\n use ra_db::SourceDatabase;\n-use ra_syntax::{\n-    AstNode, ast,\n-    algo::find_token_at_offset\n-};\n+use ra_syntax::{algo::find_token_at_offset, ast, AstNode};\n \n-use crate::{FilePosition, NavigationTarget, db::RootDatabase, RangeInfo};\n+use crate::{db::RootDatabase, FilePosition, NavigationTarget, RangeInfo};\n \n pub(crate) fn goto_type_definition(\n     db: &RootDatabase,"}, {"sha": "1edeb7579354fba3f09491e1a5cb36d3d6d67f94", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,16 +1,22 @@\n+use hir::{HasSource, HirDisplay};\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    AstNode, TreeArc,\n+    algo::{\n+        ancestors_at_offset, find_covering_element, find_node_at_offset,\n+        visit::{visitor, Visitor},\n+    },\n     ast::{self, DocCommentsOwner},\n-    algo::{find_covering_element, find_node_at_offset, ancestors_at_offset, visit::{visitor, Visitor}},\n+    AstNode, TreeArc,\n };\n-use hir::{HirDisplay, HasSource};\n \n use crate::{\n     db::RootDatabase,\n-    RangeInfo, FilePosition, FileRange,\n-    display::{rust_code_markup, rust_code_markup_with_doc, ShortLabel, docs_from_symbol, description_from_symbol},\n-    name_ref_kind::{NameRefKind::*, classify_name_ref},\n+    display::{\n+        description_from_symbol, docs_from_symbol, rust_code_markup, rust_code_markup_with_doc,\n+        ShortLabel,\n+    },\n+    name_ref_kind::{classify_name_ref, NameRefKind::*},\n+    FilePosition, FileRange, RangeInfo,\n };\n \n /// Contains the results when hovering over an item\n@@ -256,8 +262,10 @@ pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n \n #[cfg(test)]\n mod tests {\n+    use crate::mock_analysis::{\n+        analysis_and_position, single_file_with_position, single_file_with_range,\n+    };\n     use ra_syntax::TextRange;\n-    use crate::mock_analysis::{single_file_with_position, single_file_with_range, analysis_and_position};\n \n     fn trim_markup(s: &str) -> &str {\n         s.trim_start_matches(\"```rust\\n\").trim_end_matches(\"\\n```\")"}, {"sha": "f8a62bd7104b594badcec021516548554cacc380", "filename": "crates/ra_ide_api/src/impls.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,11 +1,8 @@\n-use ra_db::SourceDatabase;\n-use ra_syntax::{\n-    AstNode, ast,\n-    algo::find_node_at_offset,\n-};\n use hir::{db::HirDatabase, source_binder};\n+use ra_db::SourceDatabase;\n+use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n \n-use crate::{FilePosition, NavigationTarget, db::RootDatabase, RangeInfo};\n+use crate::{db::RootDatabase, FilePosition, NavigationTarget, RangeInfo};\n \n pub(crate) fn goto_implementation(\n     db: &RootDatabase,"}, {"sha": "8ab485adbe0385e802dfe552adced08228ee0814", "filename": "crates/ra_ide_api/src/join_lines.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,14 +1,11 @@\n use itertools::Itertools;\n+use ra_fmt::{compute_ws, extract_trivial_expression};\n use ra_syntax::{\n-    T,\n-    SourceFile, TextRange, TextUnit, SyntaxNode, SyntaxElement, SyntaxToken,\n-    SyntaxKind::{self, WHITESPACE},\n     algo::{find_covering_element, non_trivia_sibling},\n     ast::{self, AstNode, AstToken},\n-    Direction,\n-};\n-use ra_fmt::{\n-    compute_ws, extract_trivial_expression\n+    Direction, SourceFile, SyntaxElement,\n+    SyntaxKind::{self, WHITESPACE},\n+    SyntaxNode, SyntaxToken, TextRange, TextUnit, T,\n };\n use ra_text_edit::{TextEdit, TextEditBuilder};\n "}, {"sha": "95de9bcb8468710a1dafad7c72574493f22187ad", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -46,33 +46,35 @@ mod test_utils;\n \n use std::sync::Arc;\n \n-use ra_syntax::{SourceFile, TreeArc, TextRange, TextUnit};\n-use ra_text_edit::TextEdit;\n use ra_db::{\n-    SourceDatabase, CheckCanceled,\n     salsa::{self, ParallelDatabase},\n+    CheckCanceled, SourceDatabase,\n };\n+use ra_syntax::{SourceFile, TextRange, TextUnit, TreeArc};\n+use ra_text_edit::TextEdit;\n use relative_path::RelativePathBuf;\n \n-use crate::{symbol_index::FileSymbol, db::LineIndexDatabase};\n+use crate::{db::LineIndexDatabase, symbol_index::FileSymbol};\n \n pub use crate::{\n+    assists::{Assist, AssistId},\n     change::{AnalysisChange, LibraryData},\n     completion::{CompletionItem, CompletionItemKind, InsertTextFormat},\n-    runnables::{Runnable, RunnableKind},\n-    references::ReferenceSearchResult,\n-    assists::{Assist, AssistId},\n-    hover::{HoverResult},\n-    line_index::{LineIndex, LineCol},\n-    line_index_utils::translate_offset_with_edit,\n+    diagnostics::Severity,\n+    display::{file_structure, FunctionSignature, NavigationTarget, StructureNode},\n     folding_ranges::{Fold, FoldKind},\n+    hover::HoverResult,\n+    line_index::{LineCol, LineIndex},\n+    line_index_utils::translate_offset_with_edit,\n+    references::ReferenceSearchResult,\n+    runnables::{Runnable, RunnableKind},\n     syntax_highlighting::HighlightedRange,\n-    diagnostics::Severity,\n-    display::{FunctionSignature, NavigationTarget, StructureNode, file_structure},\n };\n \n-pub use ra_db::{Canceled, CrateGraph, CrateId, FileId, FilePosition, FileRange, SourceRootId, Edition};\n pub use hir::Documentation;\n+pub use ra_db::{\n+    Canceled, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange, SourceRootId,\n+};\n \n pub type Cancelable<T> = Result<T, Canceled>;\n "}, {"sha": "71de8a928eab476d0b320646b2ed9b25fc47b5a8", "filename": "crates/ra_ide_api/src/line_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fline_index.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -145,7 +145,7 @@ pub fn to_line_col(text: &str, offset: TextUnit) -> LineCol {\n mod test_line_index {\n     use super::*;\n     use proptest::{prelude::*, proptest};\n-    use ra_text_edit::test_utils::{arb_text, arb_offset};\n+    use ra_text_edit::test_utils::{arb_offset, arb_text};\n \n     #[test]\n     fn test_line_index() {"}, {"sha": "f9073dca2cd3042b63f9f2ca5937c533cf5c2bda", "filename": "crates/ra_ide_api/src/line_index_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fline_index_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fline_index_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fline_index_utils.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,6 +1,6 @@\n+use crate::{line_index::Utf16Char, LineCol, LineIndex};\n+use ra_syntax::{TextRange, TextUnit};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n-use ra_syntax::{TextUnit, TextRange};\n-use crate::{LineIndex, LineCol, line_index::Utf16Char};\n \n #[derive(Debug, Clone)]\n enum Step {\n@@ -292,8 +292,8 @@ pub fn translate_offset_with_edit(\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use proptest::{prelude::*, proptest};\n     use crate::line_index;\n+    use proptest::{prelude::*, proptest};\n     use ra_text_edit::test_utils::{arb_offset, arb_text_with_edit};\n     use ra_text_edit::TextEdit;\n "}, {"sha": "438b078964c6ed9779e02fffbd066234a2a4619f", "filename": "crates/ra_ide_api/src/matching_brace.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,10 +1,4 @@\n-use ra_syntax::{\n-    SourceFile, TextUnit,\n-    algo::find_token_at_offset,\n-    SyntaxKind::{self},\n-    ast::AstNode,\n-    T\n-};\n+use ra_syntax::{algo::find_token_at_offset, ast::AstNode, SourceFile, SyntaxKind, TextUnit, T};\n \n pub fn matching_brace(file: &SourceFile, offset: TextUnit) -> Option<TextUnit> {\n     const BRACES: &[SyntaxKind] ="}, {"sha": "4dbbd489aecae1bc5a2a49f07b3cc2f484174d0f", "filename": "crates/ra_ide_api/src/mock_analysis.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -3,7 +3,10 @@ use std::sync::Arc;\n use relative_path::RelativePathBuf;\n use test_utils::{extract_offset, extract_range, parse_fixture, CURSOR_MARKER};\n \n-use crate::{Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, FilePosition, FileRange, SourceRootId, Edition::Edition2018};\n+use crate::{\n+    Analysis, AnalysisChange, AnalysisHost, CrateGraph, Edition::Edition2018, FileId, FilePosition,\n+    FileRange, SourceRootId,\n+};\n \n /// Mock analysis is used in test to bootstrap an AnalysisHost/Analysis\n /// from a set of in-memory files."}, {"sha": "67381c9c8ddd32989e2cd116993363dd9f3d9723", "filename": "crates/ra_ide_api/src/name_ref_kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,5 +1,5 @@\n-use ra_syntax::{AstNode, AstPtr, ast};\n use hir::Either;\n+use ra_syntax::{ast, AstNode, AstPtr};\n use test_utils::tested_by;\n \n use crate::db::RootDatabase;"}, {"sha": "7d5f9ea2c21f05bbf55306638d47a66bd28afa2a", "filename": "crates/ra_ide_api/src/parent_module.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,6 +1,6 @@\n-use ra_db::{FilePosition, FileId, CrateId};\n+use ra_db::{CrateId, FileId, FilePosition};\n \n-use crate::{NavigationTarget, db::RootDatabase};\n+use crate::{db::RootDatabase, NavigationTarget};\n \n /// This returns `Vec` because a module may be included from several places. We\n /// don't handle this case yet though, so the Vec has length at most one.\n@@ -29,10 +29,10 @@ pub(crate) fn crate_for(db: &RootDatabase, file_id: FileId) -> Vec<CrateId> {\n #[cfg(test)]\n mod tests {\n     use crate::{\n-        AnalysisChange, CrateGraph,\n         mock_analysis::{analysis_and_position, MockAnalysis},\n+        AnalysisChange, CrateGraph,\n         Edition::Edition2018,\n-};\n+    };\n \n     #[test]\n     fn test_resolve_parent_module() {"}, {"sha": "766c0ad74306e54fdca54209c5bcf0a27aa8c64f", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,22 +1,11 @@\n+use hir::{source_binder, Either, ModuleSource};\n+use ra_db::SourceDatabase;\n+use ra_syntax::{algo::find_node_at_offset, ast, AstNode, SourceFile, SyntaxNode};\n use relative_path::{RelativePath, RelativePathBuf};\n-use hir::{ModuleSource, source_binder, Either};\n-use ra_db::{SourceDatabase};\n-use ra_syntax::{\n-    AstNode, SyntaxNode, SourceFile,\n-    ast,\n-    algo::find_node_at_offset,\n-};\n \n use crate::{\n-    db::RootDatabase,\n-    FilePosition,\n-    FileRange,\n-    FileId,\n-    NavigationTarget,\n-    FileSystemEdit,\n-    SourceChange,\n-    SourceFileEdit,\n-    TextRange,\n+    db::RootDatabase, FileId, FilePosition, FileRange, FileSystemEdit, NavigationTarget,\n+    SourceChange, SourceFileEdit, TextRange,\n };\n \n #[derive(Debug, Clone)]\n@@ -210,13 +199,12 @@ fn rename_reference(\n \n #[cfg(test)]\n mod tests {\n+    use crate::{\n+        mock_analysis::analysis_and_position, mock_analysis::single_file_with_position, FileId,\n+        ReferenceSearchResult,\n+    };\n     use insta::assert_debug_snapshot_matches;\n     use test_utils::assert_eq_text;\n-    use crate::{\n-        mock_analysis::single_file_with_position,\n-        mock_analysis::analysis_and_position,\n-        FileId, ReferenceSearchResult\n-};\n \n     #[test]\n     fn test_find_all_refs_for_local() {"}, {"sha": "2d2d0b40ef42f00d34368024d7056a96cbc73032", "filename": "crates/ra_ide_api/src/runnables.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,9 +1,9 @@\n use itertools::Itertools;\n+use ra_db::SourceDatabase;\n use ra_syntax::{\n-    TextRange, SyntaxNode,\n-    ast::{self, AstNode, NameOwner, ModuleItemOwner, AttrsOwner},\n+    ast::{self, AstNode, AttrsOwner, ModuleItemOwner, NameOwner},\n+    SyntaxNode, TextRange,\n };\n-use ra_db::SourceDatabase;\n \n use crate::{db::RootDatabase, FileId};\n "}, {"sha": "1bcba0b8bdbe14993485e26cd38687f380a48076", "filename": "crates/ra_ide_api/src/status.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,20 +1,20 @@\n-use std::{\n-    fmt,\n-    iter::FromIterator,\n-    sync::Arc,\n-};\n+use std::{fmt, iter::FromIterator, sync::Arc};\n \n-use ra_syntax::{TreeArc, SyntaxNode, Parse, AstNode};\n+use hir::MacroFile;\n use ra_db::{\n+    salsa::{\n+        debug::{DebugQueryTable, TableEntry},\n+        Database,\n+    },\n     FileTextQuery, SourceRootId,\n-    salsa::{Database, debug::{DebugQueryTable, TableEntry}},\n };\n-use ra_prof::{Bytes, memory_usage};\n-use hir::MacroFile;\n+use ra_prof::{memory_usage, Bytes};\n+use ra_syntax::{AstNode, Parse, SyntaxNode, TreeArc};\n \n use crate::{\n-    FileId, db::RootDatabase,\n-    symbol_index::{SymbolIndex, LibrarySymbolsQuery},\n+    db::RootDatabase,\n+    symbol_index::{LibrarySymbolsQuery, SymbolIndex},\n+    FileId,\n };\n \n pub(crate) fn syntax_tree_stats(db: &RootDatabase) -> SyntaxTreeStats {"}, {"sha": "2ca0a25d4472d72e786770d8a675ae5cc427173f", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -20,31 +20,27 @@\n //! file in the current workspace, and run a query against the union of all\n //! those FSTs.\n use std::{\n+    fmt,\n     hash::{Hash, Hasher},\n-    sync::Arc,\n     mem,\n-    fmt,\n+    sync::Arc,\n };\n \n use fst::{self, Streamer};\n-use ra_syntax::{\n-    SyntaxNode, SyntaxNodePtr, SourceFile, SmolStr, TreeArc, AstNode,\n-    algo::{visit::{visitor, Visitor}},\n-    SyntaxKind::{self, *},\n-    ast::{self, NameOwner},\n-    WalkEvent,\n-    TextRange,\n-};\n use ra_db::{\n-    SourceRootId, SourceDatabase,\n     salsa::{self, ParallelDatabase},\n+    SourceDatabase, SourceRootId,\n+};\n+use ra_syntax::{\n+    algo::visit::{visitor, Visitor},\n+    ast::{self, NameOwner},\n+    AstNode, SmolStr, SourceFile,\n+    SyntaxKind::{self, *},\n+    SyntaxNode, SyntaxNodePtr, TextRange, TreeArc, WalkEvent,\n };\n use rayon::prelude::*;\n \n-use crate::{\n-    FileId, Query,\n-    db::RootDatabase,\n-};\n+use crate::{db::RootDatabase, FileId, Query};\n \n #[salsa::query_group(SymbolsDatabaseStorage)]\n pub(crate) trait SymbolsDatabase: hir::db::HirDatabase {\n@@ -305,15 +301,11 @@ fn to_file_symbol(node: &SyntaxNode, file_id: FileId) -> Option<FileSymbol> {\n \n #[cfg(test)]\n mod tests {\n+    use crate::{display::NavigationTarget, mock_analysis::single_file, Query};\n     use ra_syntax::{\n         SmolStr,\n-        SyntaxKind::{FN_DEF, STRUCT_DEF}\n-};\n-    use crate::{\n-        display::NavigationTarget,\n-        mock_analysis::single_file,\n-        Query,\n-};\n+        SyntaxKind::{FN_DEF, STRUCT_DEF},\n+    };\n \n     #[test]\n     fn test_world_symbols_with_no_container() {"}, {"sha": "7c4285b0256743f77d5c8f0ee21b471e7b83072c", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,12 +1,12 @@\n-use rustc_hash::{FxHashSet, FxHashMap};\n+use rustc_hash::{FxHashMap, FxHashSet};\n \n-use ra_syntax::{\n-    ast, AstNode, TextRange, Direction, SmolStr, SyntaxKind, SyntaxKind::*, SyntaxElement, T,\n-};\n use ra_db::SourceDatabase;\n use ra_prof::profile;\n+use ra_syntax::{\n+    ast, AstNode, Direction, SmolStr, SyntaxElement, SyntaxKind, SyntaxKind::*, TextRange, T,\n+};\n \n-use crate::{FileId, db::RootDatabase};\n+use crate::{db::RootDatabase, FileId};\n \n #[derive(Debug)]\n pub struct HighlightedRange {\n@@ -64,7 +64,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                 if let Some(name_ref) = node.as_node().and_then(ast::NameRef::cast) {\n                     // FIXME: revisit this after #1340\n                     use crate::name_ref_kind::{classify_name_ref, NameRefKind::*};\n-                    use hir::{ModuleDef, ImplItem};\n+                    use hir::{ImplItem, ModuleDef};\n \n                     // FIXME: try to reuse the SourceAnalyzers\n                     let analyzer = hir::SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);\n@@ -264,8 +264,8 @@ pre        { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4e\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::{project_dir, read_text, assert_eq_text};\n     use crate::mock_analysis::single_file;\n+    use test_utils::{assert_eq_text, project_dir, read_text};\n \n     #[test]\n     fn test_highlighting() {"}, {"sha": "8bdd08d5811b29bfdb30357a4f2c75da08e957a7", "filename": "crates/ra_ide_api/src/syntax_tree.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,9 +1,9 @@\n-use ra_db::SourceDatabase;\r\n use crate::db::RootDatabase;\r\n+use ra_db::SourceDatabase;\r\n use ra_syntax::{\r\n-    SourceFile, TextRange, AstNode, SyntaxToken, SyntaxElement,\r\n-    algo,\r\n-    SyntaxKind::{STRING, RAW_STRING},\r\n+    algo, AstNode, SourceFile, SyntaxElement,\r\n+    SyntaxKind::{RAW_STRING, STRING},\r\n+    SyntaxToken, TextRange,\r\n };\r\n \r\n pub use ra_db::FileId;\r"}, {"sha": "d3cb71ddba5b2d0932b6c958c52e617fba01f07e", "filename": "crates/ra_ide_api/src/typing.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,13 +1,14 @@\n+use crate::{db::RootDatabase, SourceChange, SourceFileEdit};\n+use ra_db::{FilePosition, SourceDatabase};\n+use ra_fmt::leading_indent;\n use ra_syntax::{\n-    AstNode, SourceFile, SyntaxKind::*,\n-    TextUnit, TextRange, SyntaxToken,\n     algo::{find_node_at_offset, find_token_at_offset, TokenAtOffset},\n     ast::{self, AstToken},\n+    AstNode, SourceFile,\n+    SyntaxKind::*,\n+    SyntaxToken, TextRange, TextUnit,\n };\n-use ra_fmt::leading_indent;\n use ra_text_edit::{TextEdit, TextEditBuilder};\n-use ra_db::{FilePosition, SourceDatabase};\n-use crate::{db::RootDatabase, SourceChange, SourceFileEdit};\n \n pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<SourceChange> {\n     let file = db.parse(position.file_id).tree;"}, {"sha": "3851aadf24cf2f1f936e9e2983c7c2e5d3b0aeae", "filename": "crates/ra_lsp_server/src/caps.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,8 +1,9 @@\n use lsp_types::{\n-    CodeActionProviderCapability, CodeLensOptions, CompletionOptions, DocumentOnTypeFormattingOptions,\n-    ExecuteCommandOptions, FoldingRangeProviderCapability, RenameOptions, RenameProviderCapability,\n+    CodeActionProviderCapability, CodeLensOptions, CompletionOptions,\n+    DocumentOnTypeFormattingOptions, ExecuteCommandOptions, FoldingRangeProviderCapability,\n+    GenericCapability, ImplementationProviderCapability, RenameOptions, RenameProviderCapability,\n     ServerCapabilities, SignatureHelpOptions, TextDocumentSyncCapability, TextDocumentSyncKind,\n-    TextDocumentSyncOptions, ImplementationProviderCapability, GenericCapability, TypeDefinitionProviderCapability\n+    TextDocumentSyncOptions, TypeDefinitionProviderCapability,\n };\n \n pub fn server_capabilities() -> ServerCapabilities {"}, {"sha": "050c5fd950e5d1f9b67ab4b8ebf3588ffa34b40a", "filename": "crates/ra_lsp_server/src/cargo_target_spec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,7 +1,7 @@\n use crate::{\n     project_model::{self, TargetKind},\n     world::WorldSnapshot,\n-    Result\n+    Result,\n };\n \n use ra_ide_api::{FileId, RunnableKind};"}, {"sha": "c8128f55bdd6dfa8fae247dcf08a0d7c6a6cc7fd", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,13 +1,13 @@\n use lsp_types::{\n-    self, CreateFile, Documentation, DocumentChangeOperation, DocumentChanges, Location, LocationLink,\n-    MarkupContent, MarkupKind, Position, Range, RenameFile, ResourceOp, SymbolKind, TextDocumentEdit, TextDocumentIdentifier,\n-    TextDocumentItem, TextDocumentPositionParams, Url, VersionedTextDocumentIdentifier,\n-    WorkspaceEdit,\n+    self, CreateFile, DocumentChangeOperation, DocumentChanges, Documentation, Location,\n+    LocationLink, MarkupContent, MarkupKind, Position, Range, RenameFile, ResourceOp, SymbolKind,\n+    TextDocumentEdit, TextDocumentIdentifier, TextDocumentItem, TextDocumentPositionParams, Url,\n+    VersionedTextDocumentIdentifier, WorkspaceEdit,\n };\n use ra_ide_api::{\n-    CompletionItem, CompletionItemKind, FileId, FilePosition, FileRange, FileSystemEdit,\n-    NavigationTarget, SourceChange, SourceFileEdit, RangeInfo,\n-    LineCol, LineIndex, translate_offset_with_edit, InsertTextFormat\n+    translate_offset_with_edit, CompletionItem, CompletionItemKind, FileId, FilePosition,\n+    FileRange, FileSystemEdit, InsertTextFormat, LineCol, LineIndex, NavigationTarget, RangeInfo,\n+    SourceChange, SourceFileEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n use ra_text_edit::{AtomTextEdit, TextEdit};"}, {"sha": "56a263aa5663c92b577d02655d6b458097488d30", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -10,4 +10,7 @@ pub mod init;\n mod world;\n \n pub type Result<T> = std::result::Result<T, Box<dyn std::error::Error + Send + Sync>>;\n-pub use crate::{caps::server_capabilities, main_loop::main_loop, main_loop::LspError, init::InitializationOptions};\n+pub use crate::{\n+    caps::server_capabilities, init::InitializationOptions, main_loop::main_loop,\n+    main_loop::LspError,\n+};"}, {"sha": "6aa6dd49fbb302f2366b008e14ff76bc44154b4c", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,8 +1,8 @@\n-use serde::Deserialize;\n use flexi_logger::{Duplicate, Logger};\n use gen_lsp_server::{run_server, stdio_transport};\n+use serde::Deserialize;\n \n-use ra_lsp_server::{Result, InitializationOptions};\n+use ra_lsp_server::{InitializationOptions, Result};\n use ra_prof;\n \n fn main() -> Result<()> {"}, {"sha": "cb73e65866ddcd92604c961ab5cb1c5743be74df", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -2,29 +2,28 @@ mod handlers;\n mod subscriptions;\n pub(crate) mod pending_requests;\n \n-use std::{fmt, path::PathBuf, sync::Arc, time::Instant, error::Error};\n+use std::{error::Error, fmt, path::PathBuf, sync::Arc, time::Instant};\n \n use crossbeam_channel::{select, unbounded, Receiver, RecvError, Sender};\n use gen_lsp_server::{\n     handle_shutdown, ErrorCode, RawMessage, RawNotification, RawRequest, RawResponse,\n };\n use lsp_types::NumberOrString;\n use ra_ide_api::{Canceled, FileId, LibraryData};\n+use ra_prof::profile;\n use ra_vfs::VfsTask;\n use serde::{de::DeserializeOwned, Serialize};\n use threadpool::ThreadPool;\n-use ra_prof::profile;\n \n use crate::{\n     main_loop::{\n+        pending_requests::{PendingRequest, PendingRequests},\n         subscriptions::Subscriptions,\n-        pending_requests::{PendingRequests, PendingRequest},\n     },\n     project_model::workspace_loader,\n     req,\n     world::{WorldSnapshot, WorldState},\n-    Result,\n-    InitializationOptions,\n+    InitializationOptions, Result,\n };\n \n const THREADPOOL_SIZE: usize = 8;"}, {"sha": "bbbc93b1cb363934a1be2bfdd241a4c495ce7357", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,22 +1,21 @@\n-use std::{io::Write as _, fmt::Write as _};\n+use std::{fmt::Write as _, io::Write as _};\n \n use gen_lsp_server::ErrorCode;\n use lsp_types::{\n-    CodeActionResponse, CodeLens, Command, Diagnostic, DiagnosticSeverity, CodeAction,\n-    DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange,\n-    FoldingRangeKind, FoldingRangeParams, Hover, HoverContents, Location, MarkupContent,\n-    MarkupKind, Position, PrepareRenameResponse, Range,\n-    RenameParams,SymbolInformation, TextDocumentIdentifier, TextEdit,\n-    WorkspaceEdit,\n+    CodeAction, CodeActionResponse, CodeLens, Command, Diagnostic, DiagnosticSeverity,\n+    DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange, FoldingRangeKind,\n+    FoldingRangeParams, Hover, HoverContents, Location, MarkupContent, MarkupKind, Position,\n+    PrepareRenameResponse, Range, RenameParams, SymbolInformation, TextDocumentIdentifier,\n+    TextEdit, WorkspaceEdit,\n };\n use ra_ide_api::{\n-    FileId, FilePosition, FileRange, FoldKind, Query, RangeInfo, RunnableKind, Severity, Cancelable,\n-    AssistId,\n+    AssistId, Cancelable, FileId, FilePosition, FileRange, FoldKind, Query, RangeInfo,\n+    RunnableKind, Severity,\n };\n-use ra_syntax::{AstNode, SyntaxKind, TextUnit, TextRange};\n use ra_prof::profile;\n+use ra_syntax::{AstNode, SyntaxKind, TextRange, TextUnit};\n use rustc_hash::FxHashMap;\n-use serde::{Serialize, Deserialize};\n+use serde::{Deserialize, Serialize};\n use serde_json::to_value;\n use url_serde::Ser;\n "}, {"sha": "1130d08de93b5d8bda362717e63b0654b1c03049", "filename": "crates/ra_lsp_server/src/project_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -5,7 +5,7 @@ use thread_worker::Worker;\n use crate::Result;\n \n pub use ra_project_model::{\n-    ProjectWorkspace, CargoWorkspace, Package, Target, TargetKind, Sysroot,\n+    CargoWorkspace, Package, ProjectWorkspace, Sysroot, Target, TargetKind,\n };\n \n pub fn workspace_loader() -> Worker<PathBuf, Result<ProjectWorkspace>> {"}, {"sha": "27f2deb34747621438d60971528a2e4589b9998c", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -4,12 +4,11 @@ use serde::{Deserialize, Serialize};\n use url_serde;\n \n pub use lsp_types::{\n-    notification::*, request::*, ApplyWorkspaceEditParams, CodeActionParams, CodeLens, CodeLensParams,\n-    CompletionParams, CompletionResponse, DocumentOnTypeFormattingParams, DocumentSymbolParams,\n-    DocumentSymbolResponse, ExecuteCommandParams, Hover, InitializeResult,\n-    PublishDiagnosticsParams, ReferenceParams, SignatureHelp, TextDocumentEdit,\n-    TextDocumentPositionParams, TextEdit, WorkspaceEdit, WorkspaceSymbolParams,\n-    MessageType, ShowMessageParams,\n+    notification::*, request::*, ApplyWorkspaceEditParams, CodeActionParams, CodeLens,\n+    CodeLensParams, CompletionParams, CompletionResponse, DocumentOnTypeFormattingParams,\n+    DocumentSymbolParams, DocumentSymbolResponse, ExecuteCommandParams, Hover, InitializeResult,\n+    MessageType, PublishDiagnosticsParams, ReferenceParams, ShowMessageParams, SignatureHelp,\n+    TextDocumentEdit, TextDocumentPositionParams, TextEdit, WorkspaceEdit, WorkspaceSymbolParams,\n };\n \n pub enum AnalyzerStatus {}"}, {"sha": "e16a57da56759f18ee688e6be8b5a3327d99af9f", "filename": "crates/ra_lsp_server/src/vfs_filter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fvfs_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fvfs_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fvfs_filter.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,6 +1,6 @@\n-use std::path::PathBuf;\r\n use ra_project_model::ProjectRoot;\r\n-use ra_vfs::{RootEntry, Filter, RelativePath};\r\n+use ra_vfs::{Filter, RelativePath, RootEntry};\r\n+use std::path::PathBuf;\r\n \r\n /// `IncludeRustFiles` is used to convert\r\n /// from `ProjectRoot` to `RootEntry` for VFS\r"}, {"sha": "fdc577622ea9282c12033aa3a9e9c1621801f7ab", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -3,22 +3,20 @@ use std::{\n     sync::Arc,\n };\n \n+use gen_lsp_server::ErrorCode;\n use lsp_types::Url;\n+use parking_lot::RwLock;\n use ra_ide_api::{\n-    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, LibraryData,\n-    SourceRootId\n+    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, LibraryData, SourceRootId,\n };\n use ra_vfs::{Vfs, VfsChange, VfsFile, VfsRoot};\n use relative_path::RelativePathBuf;\n-use parking_lot::RwLock;\n-use gen_lsp_server::ErrorCode;\n \n use crate::{\n     main_loop::pending_requests::{CompletedRequest, LatestRequests},\n     project_model::ProjectWorkspace,\n     vfs_filter::IncludeRustFiles,\n-    Result,\n-    LspError,\n+    LspError, Result,\n };\n \n /// `WorldState` is the primary mutable state of the language server"}, {"sha": "d271b02fc5fcbaaa9c647f2cd706c451ce6d3f8e", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,16 +1,14 @@\n mod support;\n \n-use std::{\n-    collections::HashMap,\n-    time::Instant,\n-};\n+use std::{collections::HashMap, time::Instant};\n \n use lsp_types::{\n-    CodeActionContext, DocumentFormattingParams, FormattingOptions, Position, Range, DidOpenTextDocumentParams, TextDocumentItem, TextDocumentPositionParams\n+    CodeActionContext, DidOpenTextDocumentParams, DocumentFormattingParams, FormattingOptions,\n+    Position, Range, TextDocumentItem, TextDocumentPositionParams,\n };\n use ra_lsp_server::req::{\n-    CodeActionParams, CodeActionRequest, Formatting, Runnables, RunnablesParams, CompletionParams, Completion,\n-    DidOpenTextDocument, OnEnter,\n+    CodeActionParams, CodeActionRequest, Completion, CompletionParams, DidOpenTextDocument,\n+    Formatting, OnEnter, Runnables, RunnablesParams,\n };\n use serde_json::json;\n use tempfile::TempDir;"}, {"sha": "a5e352da155bbcb00ee0b774909f93e94d6a85cc", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -11,20 +11,17 @@ use flexi_logger::Logger;\n use gen_lsp_server::{RawMessage, RawNotification, RawRequest};\n use lsp_types::{\n     notification::DidOpenTextDocument,\n+    notification::{Notification, ShowMessage},\n     request::{Request, Shutdown},\n     DidOpenTextDocumentParams, TextDocumentIdentifier, TextDocumentItem, Url,\n-    notification::{Notification, ShowMessage},\n };\n use serde::Serialize;\n use serde_json::{to_string_pretty, Value};\n use tempfile::TempDir;\n+use test_utils::{find_mismatch, parse_fixture};\n use thread_worker::Worker;\n-use test_utils::{parse_fixture, find_mismatch};\n \n-use ra_lsp_server::{\n-    main_loop, req,\n-    InitializationOptions,\n-};\n+use ra_lsp_server::{main_loop, req, InitializationOptions};\n \n pub struct Project<'a> {\n     fixture: &'a str,"}, {"sha": "52c3d03b55d14ec536798b7d46667308bf914b6f", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -41,14 +41,8 @@ pub enum ExpandError {\n }\n \n pub use crate::syntax_bridge::{\n-    ast_to_token_tree,\n-    token_tree_to_ast_item_list,\n-    syntax_node_to_token_tree,\n-    token_tree_to_expr,\n-    token_tree_to_pat,\n-    token_tree_to_ty,\n-    token_tree_to_macro_items,\n-    token_tree_to_macro_stmts,\n+    ast_to_token_tree, syntax_node_to_token_tree, token_tree_to_ast_item_list, token_tree_to_expr,\n+    token_tree_to_macro_items, token_tree_to_macro_stmts, token_tree_to_pat, token_tree_to_ty,\n };\n \n /// This struct contains AST for a single `macro_rules` definition. What might"}, {"sha": "fbad8ebe2dbb106189a1859cdefda38047359d7e", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,12 +1,12 @@\n+use ra_syntax::SmolStr;\n /// This module takes a (parsed) definition of `macro_rules` invocation, a\n /// `tt::TokenTree` representing an argument of macro invocation, and produces a\n /// `tt::TokenTree` for the result of the expansion.\n use rustc_hash::FxHashMap;\n-use ra_syntax::SmolStr;\n use tt::TokenId;\n \n-use crate::ExpandError;\n use crate::tt_cursor::TtCursor;\n+use crate::ExpandError;\n \n pub(crate) fn expand(\n     rules: &crate::MacroRules,"}, {"sha": "a2988585206b6ba8ae16cfac8ad9cceea1107dfa", "filename": "crates/ra_mbe/src/mbe_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,8 +1,8 @@\n+use crate::tt_cursor::TtCursor;\n /// This module parses a raw `tt::TokenStream` into macro-by-example token\n /// stream. This is a *mostly* identify function, expect for handling of\n /// `$var:tt_kind` and `$(repeat),*` constructs.\n use crate::ParseError;\n-use crate::tt_cursor::TtCursor;\n \n pub(crate) fn parse(tt: &tt::Subtree) -> Result<crate::MacroRules, ParseError> {\n     let mut parser = TtCursor::new(tt);"}, {"sha": "5688e7f7fbb682b24936bf3c8f5021c87df2877e", "filename": "crates/ra_mbe/src/subtree_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,8 +1,8 @@\n use crate::subtree_source::SubtreeTokenSource;\n \n use ra_parser::{TokenSource, TreeSink};\n-use ra_syntax::{SyntaxKind};\n-use tt::buffer::{TokenBuffer, Cursor};\n+use ra_syntax::SyntaxKind;\n+use tt::buffer::{Cursor, TokenBuffer};\n \n struct OffsetTokenSink<'a> {\n     cursor: Cursor<'a>,"}, {"sha": "2489c996bcea9559a19249e006fe615d08eaeb15", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,7 +1,7 @@\n-use ra_parser::{TokenSource, Token};\n+use ra_parser::{Token, TokenSource};\n use ra_syntax::{classify_literal, SmolStr, SyntaxKind, SyntaxKind::*, T};\n-use std::cell::{RefCell, Cell};\n-use tt::buffer::{TokenBuffer, Cursor};\n+use std::cell::{Cell, RefCell};\n+use tt::buffer::{Cursor, TokenBuffer};\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n struct TtToken {"}, {"sha": "b91b0e7a5a0289e2d685072398cc1f3b79fd4590", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,11 +1,11 @@\n-use ra_parser::{TreeSink, ParseError};\n+use crate::subtree_source::SubtreeTokenSource;\n+use crate::ExpandError;\n+use ra_parser::{ParseError, TreeSink};\n use ra_syntax::{\n-    AstNode, SyntaxNode, TextRange, SyntaxKind, SmolStr, SyntaxTreeBuilder, TreeArc, SyntaxElement,\n-    ast, SyntaxKind::*, TextUnit, T\n+    ast, AstNode, SmolStr, SyntaxElement, SyntaxKind, SyntaxKind::*, SyntaxNode, SyntaxTreeBuilder,\n+    TextRange, TextUnit, TreeArc, T,\n };\n-use tt::buffer::{TokenBuffer, Cursor};\n-use crate::subtree_source::{SubtreeTokenSource};\n-use crate::ExpandError;\n+use tt::buffer::{Cursor, TokenBuffer};\n \n /// Maps `tt::TokenId` to the relative range of the original token.\n #[derive(Default)]\n@@ -367,7 +367,7 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::tests::{expand, create_rules};\n+    use crate::tests::{create_rules, expand};\n     use ra_parser::TokenSource;\n \n     #[test]"}, {"sha": "503c77ef31d3ec117a4b4d2cd13abd6ad2544069", "filename": "crates/ra_mbe/src/tt_cursor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,6 +1,6 @@\n-use crate::ParseError;\n use crate::subtree_parser::Parser;\n-use smallvec::{SmallVec, smallvec};\n+use crate::ParseError;\n+use smallvec::{smallvec, SmallVec};\n \n #[derive(Debug, Clone)]\n pub(crate) struct TtCursor<'a> {"}, {"sha": "a7d06a815cb383b4f89e0967cc868a3cd8e57ae0", "filename": "crates/ra_parser/src/event.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_parser%2Fsrc%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_parser%2Fsrc%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fevent.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -10,8 +10,9 @@\n use std::mem;\n \n use crate::{\n-    ParseError, TreeSink,\n+    ParseError,\n     SyntaxKind::{self, *},\n+    TreeSink,\n };\n \n /// `Parser` produces a flat list of `Event`s."}, {"sha": "6580340975bc8a063606280f95e9040c2bbbd219", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -37,9 +37,9 @@ mod type_params;\n mod types;\n \n use crate::{\n+    parser::{CompletedMarker, Marker, Parser},\n     SyntaxKind::{self, *},\n     TokenSet,\n-    parser::{CompletedMarker, Marker, Parser},\n };\n \n pub(crate) fn root(p: &mut Parser) {"}, {"sha": "159ed50dfd89f0d3ccc66e7c4c792ff5e2ce6cc0", "filename": "crates/ra_parser/src/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_parser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_parser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fparser.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -3,10 +3,10 @@ use std::cell::Cell;\n use drop_bomb::DropBomb;\n \n use crate::{\n-    SyntaxKind::{self, ERROR, EOF, TOMBSTONE},\n-    TokenSource, ParseError, TokenSet,\n     event::Event,\n-    T\n+    ParseError,\n+    SyntaxKind::{self, EOF, ERROR, TOMBSTONE},\n+    TokenSet, TokenSource, T,\n };\n \n /// `Parser` struct provides the low-level API for"}, {"sha": "919cc1b3cef4e89302a750d64532ec72cf440971", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -2,18 +2,21 @@ mod memory_usage;\n \n use std::{\n     cell::RefCell,\n-    time::{Duration, Instant},\n-    mem,\n+    collections::HashSet,\n     io::{stderr, Write},\n     iter::repeat,\n-    collections::HashSet,\n-    sync::{RwLock, atomic::{AtomicBool, Ordering}},\n+    mem,\n+    sync::{\n+        atomic::{AtomicBool, Ordering},\n+        RwLock,\n+    },\n+    time::{Duration, Instant},\n };\n \n-use once_cell::sync::Lazy;\n use itertools::Itertools;\n+use once_cell::sync::Lazy;\n \n-pub use crate::memory_usage::{MemoryUsage, Bytes};\n+pub use crate::memory_usage::{Bytes, MemoryUsage};\n \n // We use jemalloc mainly to get heap usage statistics, actual performance\n // difference is not measures."}, {"sha": "2b06e9e372c047b51bd0b70df076993edb5e5e11", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,9 +1,9 @@\n use std::path::{Path, PathBuf};\n \n-use cargo_metadata::{MetadataCommand, CargoOpt};\n-use ra_arena::{Arena, RawId, impl_arena_id};\n-use rustc_hash::FxHashMap;\n+use cargo_metadata::{CargoOpt, MetadataCommand};\n+use ra_arena::{impl_arena_id, Arena, RawId};\n use ra_db::Edition;\n+use rustc_hash::FxHashMap;\n \n use crate::Result;\n "}, {"sha": "74b7efa9ad9ab9df8d11772e2a81d45987ece33f", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -3,15 +3,15 @@ mod json_project;\n mod sysroot;\n \n use std::{\n+    error::Error,\n     fs::File,\n     io::BufReader,\n     path::{Path, PathBuf},\n-    error::Error\n };\n \n use rustc_hash::FxHashMap;\n \n-use ra_db::{CrateGraph, FileId, Edition};\n+use ra_db::{CrateGraph, Edition, FileId};\n \n use serde_json::from_reader;\n "}, {"sha": "a419b81e8b52abc1f68a6bb3e9f53896e4b9765f", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -3,7 +3,7 @@ use std::{\n     process::Command,\n };\n \n-use ra_arena::{Arena, RawId, impl_arena_id};\n+use ra_arena::{impl_arena_id, Arena, RawId};\n \n use crate::Result;\n "}, {"sha": "fad8da132352a9e99c19b3381e3b2b579508e7db", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -2,7 +2,7 @@ pub mod visit;\n \n use itertools::Itertools;\n \n-use crate::{SyntaxNode, TextRange, TextUnit, AstNode, Direction, SyntaxToken, SyntaxElement};\n+use crate::{AstNode, Direction, SyntaxElement, SyntaxNode, SyntaxToken, TextRange, TextUnit};\n \n pub use rowan::TokenAtOffset;\n "}, {"sha": "3dcf39f7e161d9d68759212cee4d3c7de750a458", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -9,16 +9,16 @@ mod expr_extensions;\n use std::marker::PhantomData;\n \n use crate::{\n-    syntax_node::{SyntaxNode, SyntaxNodeChildren, TreeArc, SyntaxToken},\n+    syntax_node::{SyntaxNode, SyntaxNodeChildren, SyntaxToken, TreeArc},\n     SmolStr,\n };\n \n pub use self::{\n+    expr_extensions::{ArrayExprKind, BinOp, ElseBranch, LiteralKind, PrefixOp},\n+    extensions::{FieldKind, PathSegmentKind, SelfParamKind, StructKind},\n     generated::*,\n-    traits::*,\n     tokens::*,\n-    extensions::{PathSegmentKind, StructKind,FieldKind, SelfParamKind},\n-    expr_extensions::{ElseBranch, PrefixOp, BinOp, LiteralKind,ArrayExprKind},\n+    traits::*,\n };\n \n /// The main trait to go from untyped `SyntaxNode`  to a typed ast. The"}, {"sha": "87dbb0ea5e117b89d719004f846c8bb3cb15348f", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,10 +1,10 @@\n //! Various extension methods to ast Expr Nodes, which are hard to code-generate.\n \n use crate::{\n-    SyntaxToken, SyntaxElement, SmolStr,\n-    ast::{self, AstNode, AstChildren, children, child_opt},\n+    ast::{self, child_opt, children, AstChildren, AstNode},\n+    SmolStr, SyntaxElement,\n     SyntaxKind::*,\n-    T\n+    SyntaxToken, T,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "72a30232df2eec2166c1596b3053ab0ac2aede55", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -4,10 +4,10 @@\n use itertools::Itertools;\n \n use crate::{\n-    SmolStr, SyntaxToken,\n-    ast::{self, AstNode, children, child_opt},\n+    ast::{self, child_opt, children, AstNode},\n+    SmolStr, SyntaxElement,\n     SyntaxKind::*,\n-    SyntaxElement, T,\n+    SyntaxToken, T,\n };\n use ra_parser::SyntaxKind;\n "}, {"sha": "be63b3c9e5c9f791c3e2f53f5e5134cbbcf451b5", "filename": "crates/ra_syntax/src/ast/tokens.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,9 +1,9 @@\n //! There are many AstNodes, but only a few tokens, so we hand-write them here.\n \n use crate::{\n-    SyntaxToken,\n-    SyntaxKind::{COMMENT, WHITESPACE},\n     ast::AstToken,\n+    SyntaxKind::{COMMENT, WHITESPACE},\n+    SyntaxToken,\n };\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -61,7 +61,7 @@ pub enum CommentPlacement {\n }\n \n const COMMENT_PREFIX_TO_KIND: &[(&str, CommentKind)] = {\n-    use {CommentShape::*, CommentPlacement::*};\n+    use {CommentPlacement::*, CommentShape::*};\n     &[\n         (\"///\", CommentKind { shape: Line, doc: Some(Outer) }),\n         (\"//!\", CommentKind { shape: Line, doc: Some(Inner) }),"}, {"sha": "29cb53e35badf6d576ceace84554a5cf95886dbb", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -5,8 +5,8 @@\n use itertools::Itertools;\n \n use crate::{\n-    syntax_node::{SyntaxNodeChildren, SyntaxElementChildren},\n-    ast::{self, child_opt, children, AstNode, AstToken, AstChildren},\n+    ast::{self, child_opt, children, AstChildren, AstNode, AstToken},\n+    syntax_node::{SyntaxElementChildren, SyntaxNodeChildren},\n };\n \n pub trait TypeAscriptionOwner: AstNode {"}, {"sha": "6d114aad409606b323dcb74fce6a285578a4c5e8", "filename": "crates/ra_syntax/src/fuzz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,4 +1,4 @@\n-use crate::{SourceFile, validation, TextUnit, TextRange, AstNode};\n+use crate::{validation, AstNode, SourceFile, TextRange, TextUnit};\n use ra_text_edit::AtomTextEdit;\n use std::str::{self, FromStr};\n "}, {"sha": "9790a984d52a61fd27b3d69fb975a4b1876855a3", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -31,23 +31,26 @@ pub mod ast;\n #[doc(hidden)]\n pub mod fuzz;\n \n-use std::{sync::Arc, fmt::Write};\n+use std::{fmt::Write, sync::Arc};\n \n use ra_text_edit::AtomTextEdit;\n \n use crate::syntax_node::GreenNode;\n \n-pub use rowan::{SmolStr, TextRange, TextUnit};\n-pub use ra_parser::SyntaxKind;\n-pub use ra_parser::T;\n pub use crate::{\n     ast::AstNode,\n-    syntax_error::{SyntaxError, SyntaxErrorKind, Location},\n+    parsing::{classify_literal, tokenize, Token},\n+    ptr::{AstPtr, SyntaxNodePtr},\n+    syntax_error::{Location, SyntaxError, SyntaxErrorKind},\n+    syntax_node::{\n+        Direction, InsertPosition, SyntaxElement, SyntaxNode, SyntaxToken, SyntaxTreeBuilder,\n+        TreeArc, WalkEvent,\n+    },\n     syntax_text::SyntaxText,\n-    syntax_node::{Direction,  SyntaxNode, WalkEvent, TreeArc, SyntaxTreeBuilder, SyntaxElement, SyntaxToken, InsertPosition},\n-    ptr::{SyntaxNodePtr, AstPtr},\n-    parsing::{tokenize, classify_literal, Token},\n };\n+pub use ra_parser::SyntaxKind;\n+pub use ra_parser::T;\n+pub use rowan::{SmolStr, TextRange, TextUnit};\n \n /// `Parse` is the result of the parsing: a syntax tree and a collection of\n /// errors."}, {"sha": "0387f0378061cc087d2d22a4071b31ab202536c6", "filename": "crates/ra_syntax/src/parsing.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -6,12 +6,9 @@ mod text_token_source;\n mod text_tree_sink;\n mod reparsing;\n \n-use crate::{\n-    SyntaxError,\n-    syntax_node::GreenNode,\n-};\n+use crate::{syntax_node::GreenNode, SyntaxError};\n \n-pub use self::lexer::{tokenize, classify_literal, Token};\n+pub use self::lexer::{classify_literal, tokenize, Token};\n \n pub(crate) use self::reparsing::incremental_reparse;\n "}, {"sha": "60cf37047d72d2b46f5caab9a481c78efe43c22b", "filename": "crates/ra_syntax/src/parsing/lexer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -6,8 +6,7 @@ mod strings;\n \n use crate::{\n     SyntaxKind::{self, *},\n-    TextUnit,\n-    T,\n+    TextUnit, T,\n };\n \n use self::{"}, {"sha": "e53ae231b331a24e711f026b47e25d0d27f60326", "filename": "crates/ra_syntax/src/parsing/lexer/numbers.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fnumbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fnumbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fnumbers.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,7 +1,4 @@\n-use crate::parsing::lexer::{\n-    ptr::Ptr,\n-    classes::*,\n-};\n+use crate::parsing::lexer::{classes::*, ptr::Ptr};\n \n use crate::SyntaxKind::{self, *};\n "}, {"sha": "eeca94020d8b5d28975cf7daedc162a303093076", "filename": "crates/ra_syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -6,19 +6,20 @@\n //!   - otherwise, we search for the nearest `{}` block which contains the edit\n //!     and try to parse only this block.\n \n-use ra_text_edit::AtomTextEdit;\n use ra_parser::Reparser;\n+use ra_text_edit::AtomTextEdit;\n \n use crate::{\n-    SyntaxKind::*, TextRange, TextUnit, SyntaxError,\n     algo,\n-    syntax_node::{GreenNode, SyntaxNode, GreenToken, SyntaxElement},\n     parsing::{\n+        lexer::{tokenize, Token},\n         text_token_source::TextTokenSource,\n         text_tree_sink::TextTreeSink,\n-        lexer::{tokenize, Token},\n     },\n-    T,\n+    syntax_node::{GreenNode, GreenToken, SyntaxElement, SyntaxNode},\n+    SyntaxError,\n+    SyntaxKind::*,\n+    TextRange, TextUnit, T,\n };\n \n pub(crate) fn incremental_reparse(\n@@ -168,10 +169,10 @@ fn merge_errors(\n mod tests {\n     use std::sync::Arc;\n \n-    use test_utils::{extract_range, assert_eq_text};\n+    use test_utils::{assert_eq_text, extract_range};\n \n-    use crate::{SourceFile, AstNode, Parse};\n     use super::*;\n+    use crate::{AstNode, Parse, SourceFile};\n \n     fn do_check(before: &str, replace_with: &str, reparsed_len: u32) {\n         let (range, before) = extract_range(before);"}, {"sha": "f592b499fd2831b134ff133660814135d6085e6d", "filename": "crates/ra_syntax/src/parsing/text_token_source.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_token_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_token_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_token_source.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,10 +1,7 @@\n-use ra_parser::TokenSource;\n use ra_parser::Token as PToken;\n+use ra_parser::TokenSource;\n \n-use crate::{\n-    SyntaxKind::EOF, TextRange, TextUnit,\n-    parsing::lexer::Token,\n-};\n+use crate::{parsing::lexer::Token, SyntaxKind::EOF, TextRange, TextUnit};\n \n pub(crate) struct TextTokenSource<'t> {\n     text: &'t str,"}, {"sha": "bf1b35c95a35220981845bf1f6d0d35ff15047c2", "filename": "crates/ra_syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,12 +1,13 @@\n use std::mem;\n \n-use ra_parser::{TreeSink, ParseError};\n+use ra_parser::{ParseError, TreeSink};\n \n use crate::{\n-    SmolStr, SyntaxError, TextUnit, TextRange, SyntaxTreeBuilder,\n-    SyntaxKind::{self, *},\n     parsing::Token,\n     syntax_node::GreenNode,\n+    SmolStr, SyntaxError,\n+    SyntaxKind::{self, *},\n+    SyntaxTreeBuilder, TextRange, TextUnit,\n };\n \n /// Bridges the parser with our specific syntax tree representation."}, {"sha": "0550dca1a1b9d72b6f5a1ff887c688386cbcfde2", "filename": "crates/ra_syntax/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fptr.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,10 +1,5 @@\n-use std::{\n-    marker::PhantomData,\n-    iter::successors,\n-};\n-use crate::{\n-    AstNode, SyntaxKind, SyntaxNode, TextRange,\n-};\n+use crate::{AstNode, SyntaxKind, SyntaxNode, TextRange};\n+use std::{iter::successors, marker::PhantomData};\n \n /// A pointer to a syntax node inside a file. It can be used to remember a\n /// specific node across reparses of the same file."}, {"sha": "5aefec768fcc34d002b3f3b58ac0d848648fb7de", "filename": "crates/ra_syntax/src/syntax_error.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -2,10 +2,7 @@ use std::fmt;\n \n use ra_parser::ParseError;\n \n-use crate::{\n-    TextRange, TextUnit,\n-    validation::EscapeError,\n-};\n+use crate::{validation::EscapeError, TextRange, TextUnit};\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct SyntaxError {"}, {"sha": "80c8639c8f499152d35fdcf867a88bc76b6a96d9", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -7,18 +7,18 @@\n //! modules just wraps its API.\n \n use std::{\n-    ops::RangeInclusive,\n-    fmt::{self, Write},\n     borrow::Borrow,\n+    fmt::{self, Write},\n     iter::successors,\n+    ops::RangeInclusive,\n };\n \n use ra_parser::ParseError;\n-use rowan::{TransparentNewType, GreenNodeBuilder};\n+use rowan::{GreenNodeBuilder, TransparentNewType};\n \n use crate::{\n-    SmolStr, SyntaxKind, TextUnit, TextRange, SyntaxText, SourceFile, AstNode, SyntaxNodePtr,\n     syntax_error::{SyntaxError, SyntaxErrorKind},\n+    AstNode, SmolStr, SourceFile, SyntaxKind, SyntaxNodePtr, SyntaxText, TextRange, TextUnit,\n };\n \n pub use rowan::WalkEvent;"}, {"sha": "e648dc082d970355f45da718d295f140c94ce9ad", "filename": "crates/ra_syntax/src/syntax_text.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,6 +1,9 @@\n-use std::{fmt, ops::{self, Bound}};\n+use std::{\n+    fmt,\n+    ops::{self, Bound},\n+};\n \n-use crate::{SmolStr, SyntaxNode, TextRange, TextUnit, SyntaxElement};\n+use crate::{SmolStr, SyntaxElement, SyntaxNode, TextRange, TextUnit};\n \n #[derive(Clone)]\n pub struct SyntaxText<'a> {"}, {"sha": "87522ec181c8bf11dd47c4f7949252ba4c380ab1", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -4,11 +4,10 @@ mod block;\n mod field_expr;\n \n use crate::{\n-    SourceFile, SyntaxError, AstNode, SyntaxNode, TextUnit,\n-    SyntaxKind::{BYTE, BYTE_STRING, STRING, CHAR},\n-    ast,\n     algo::visit::{visitor_ctx, VisitorCtx},\n-    T,\n+    ast, AstNode, SourceFile, SyntaxError,\n+    SyntaxKind::{BYTE, BYTE_STRING, CHAR, STRING},\n+    SyntaxNode, TextUnit, T,\n };\n \n pub(crate) use unescape::EscapeError;"}, {"sha": "46650d9b0b9e48fbf241eb3e4ae30067a09d174d", "filename": "crates/ra_syntax/src/validation/block.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,7 +1,8 @@\n-use crate::{SyntaxKind::*,\n-    ast::{self, AttrsOwner, AstNode},\n+use crate::{\n+    ast::{self, AstNode, AttrsOwner},\n     SyntaxError,\n     SyntaxErrorKind::*,\n+    SyntaxKind::*,\n };\n \n pub(crate) fn validate_block_node(node: &ast::Block, errors: &mut Vec<SyntaxError>) {"}, {"sha": "d3020edf783490899d6983c5320c3c5612933f59", "filename": "crates/ra_syntax/src/validation/field_expr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Ffield_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Ffield_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Ffield_expr.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,6 +1,7 @@\n-use crate::{ast::{self, FieldKind},\r\n-            SyntaxError,\r\n-            SyntaxErrorKind::*,\r\n+use crate::{\r\n+    ast::{self, FieldKind},\r\n+    SyntaxError,\r\n+    SyntaxErrorKind::*,\r\n };\r\n \r\n pub(crate) fn validate_field_expr_node(node: &ast::FieldExpr, errors: &mut Vec<SyntaxError>) {\r"}, {"sha": "4c3a7effc0db404bfe5ae0829014a40f21a4d04e", "filename": "crates/ra_syntax/src/validation/unescape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Funescape.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -7,8 +7,8 @@\n //!\n //! Hopefully, we'll share this code in a proper way some day\n \n-use std::str::Chars;\n use std::ops::Range;\n+use std::str::Chars;\n \n #[derive(Debug, PartialEq, Eq, Clone, Hash)]\n pub enum EscapeError {"}, {"sha": "2442c850584df8ef44f3320491b200b2d4def4e9", "filename": "crates/ra_syntax/tests/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_syntax%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Ftest.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -4,11 +4,11 @@ extern crate walkdir;\n \n use std::{\n     fmt::Write,\n-    path::{PathBuf, Component},\n+    path::{Component, PathBuf},\n };\n \n-use test_utils::{project_dir, dir_tests, read_text, collect_tests};\n-use ra_syntax::{SourceFile, fuzz};\n+use ra_syntax::{fuzz, SourceFile};\n+use test_utils::{collect_tests, dir_tests, project_dir, read_text};\n \n #[test]\n fn lexer_tests() {"}, {"sha": "2d6e7f2163b9f23d025cf0c9871ca25e5c639045", "filename": "crates/ra_text_edit/src/test_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,6 +1,6 @@\n-use proptest::prelude::*;\n-use text_unit::{TextUnit, TextRange};\n use crate::{AtomTextEdit, TextEdit};\n+use proptest::prelude::*;\n+use text_unit::{TextRange, TextUnit};\n \n pub fn arb_text() -> proptest::string::RegexGeneratorStrategy<String> {\n     // generate multiple newlines"}, {"sha": "a628f64b24b65a9c8cde91b5b392ea920535b5f9", "filename": "crates/ra_tools/src/bin/pre-commit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_tools%2Fsrc%2Fbin%2Fpre-commit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_tools%2Fsrc%2Fbin%2Fpre-commit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fbin%2Fpre-commit.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,6 +1,6 @@\n use std::process::Command;\n \n-use ra_tools::{Result, run_rustfmt, run, project_root, Overwrite};\n+use ra_tools::{project_root, run, run_rustfmt, Overwrite, Result};\n \n fn main() -> Result<()> {\n     run_rustfmt(Overwrite)?;"}, {"sha": "d56e0d2efd4f78246d01d8e64174f29c311c4628", "filename": "crates/ra_tools/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_tools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_tools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Flib.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,10 +1,10 @@\n use std::{\n-    fs,\n     collections::HashMap,\n+    error::Error,\n+    fs,\n+    io::{Error as IoError, ErrorKind},\n     path::{Path, PathBuf},\n     process::{Command, Output, Stdio},\n-    io::{Error as IoError, ErrorKind},\n-    error::Error\n };\n \n use itertools::Itertools;"}, {"sha": "7ed592f71cd256ada7bda8c78a8cf70ab27816dc", "filename": "crates/ra_tools/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_tools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_tools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fmain.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,10 +1,10 @@\n use clap::{App, SubCommand};\n use core::str;\n use ra_tools::{\n-    generate, gen_tests, install_format_hook, run, run_with_output, run_rustfmt,\n-    Overwrite, Result, run_fuzzer, run_clippy,\n+    gen_tests, generate, install_format_hook, run, run_clippy, run_fuzzer, run_rustfmt,\n+    run_with_output, Overwrite, Result,\n };\n-use std::{path::{PathBuf}, env};\n+use std::{env, path::PathBuf};\n \n fn main() -> Result<()> {\n     let matches = App::new(\"tasks\")"}, {"sha": "ae0eb337d215a982b1a51b81e285dcb39b5c8ac0", "filename": "crates/ra_tools/tests/cli.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_tools%2Ftests%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_tools%2Ftests%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Ftests%2Fcli.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,6 +1,6 @@\n use walkdir::WalkDir;\n \n-use ra_tools::{generate, gen_tests, run_rustfmt, Verify, project_root};\n+use ra_tools::{gen_tests, generate, project_root, run_rustfmt, Verify};\n \n #[test]\n fn generated_grammar_is_fresh() {"}, {"sha": "48c22a2d8a312b3835bc88afb8ff66400b7eedc8", "filename": "crates/ra_tt/src/buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_tt%2Fsrc%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Fra_tt%2Fsrc%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Fbuffer.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,4 +1,4 @@\n-use crate::{TokenTree, Subtree};\n+use crate::{Subtree, TokenTree};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n struct EntryId(usize);"}, {"sha": "ea99ac062933c3337fd73b184dd51afd528880c2", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -3,11 +3,11 @@ pub mod marks;\n \n use std::{\n     fs,\n-    path::{Path, PathBuf}\n+    path::{Path, PathBuf},\n };\n \n-use text_unit::{TextRange, TextUnit};\n use serde_json::Value;\n+use text_unit::{TextRange, TextUnit};\n \n pub use difference::Changeset as __Changeset;\n "}, {"sha": "71007de81b9f6787ffb086f3f28aed70e6273f79", "filename": "rustfmt.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1834bae5b86c54ed9dece26e82436919d59e6cb7/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1834bae5b86c54ed9dece26e82436919d59e6cb7/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=1834bae5b86c54ed9dece26e82436919d59e6cb7", "patch": "@@ -1,3 +1,2 @@\n-reorder_imports = false\n reorder_modules = false\n use_small_heuristics = \"Max\""}]}