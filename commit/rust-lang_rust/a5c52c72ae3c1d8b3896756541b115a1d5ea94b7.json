{"sha": "a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YzUyYzcyYWUzYzFkOGIzODk2NzU2NTQxYjExNWExZDVlYTk0Yjc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-17T01:57:32Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-27T12:51:36Z"}, "message": "AST/HIR: Introduce `ExprKind::Err` for better error recovery in the front-end", "tree": {"sha": "91e535fc9e65ac6594f3480e64f9396b312bcdce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91e535fc9e65ac6594f3480e64f9396b312bcdce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "html_url": "https://github.com/rust-lang/rust/commit/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2986970adae36939d13c79e3af34ff6378fad68", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2986970adae36939d13c79e3af34ff6378fad68", "html_url": "https://github.com/rust-lang/rust/commit/d2986970adae36939d13c79e3af34ff6378fad68"}], "stats": {"total": 62, "additions": 51, "deletions": 11}, "files": [{"sha": "978d20ea9478956de1ba8fca15f72e2690e37b18", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "patch": "@@ -392,7 +392,8 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n \n             hir::ExprKind::Closure(..) |\n             hir::ExprKind::Lit(..) |\n-            hir::ExprKind::Path(_) => {\n+            hir::ExprKind::Path(_) |\n+            hir::ExprKind::Err => {\n                 self.straightline(expr, pred, None::<hir::Expr>.iter())\n             }\n         }"}, {"sha": "2f0a95445a88614c21039044aedcf40d5b2c8c2b", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "patch": "@@ -1099,6 +1099,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n         ExprKind::Yield(ref subexpression) => {\n             visitor.visit_expr(subexpression);\n         }\n+        ExprKind::Err => {}\n     }\n }\n "}, {"sha": "59b9f83c242ecd843e24e83315de22e7413b4148", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "patch": "@@ -4117,6 +4117,8 @@ impl<'a> LoweringContext<'a> {\n                 hir::ExprKind::Yield(P(expr))\n             }\n \n+            ExprKind::Err => hir::ExprKind::Err,\n+\n             // Desugar `ExprIfLet`\n             // from: `if let <pat> = <sub_expr> <body> [<else_opt>]`\n             ExprKind::IfLet(ref pats, ref sub_expr, ref body, ref else_opt) => {"}, {"sha": "601d310fc3a216507f2f282662f4da18a99846fd", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "patch": "@@ -1362,6 +1362,7 @@ impl Expr {\n             ExprKind::Struct(..) => ExprPrecedence::Struct,\n             ExprKind::Repeat(..) => ExprPrecedence::Repeat,\n             ExprKind::Yield(..) => ExprPrecedence::Yield,\n+            ExprKind::Err => ExprPrecedence::Err,\n         }\n     }\n \n@@ -1412,7 +1413,8 @@ impl Expr {\n             ExprKind::AddrOf(..) |\n             ExprKind::Binary(..) |\n             ExprKind::Yield(..) |\n-            ExprKind::Cast(..) => {\n+            ExprKind::Cast(..) |\n+            ExprKind::Err => {\n                 false\n             }\n         }\n@@ -1525,6 +1527,9 @@ pub enum ExprKind {\n \n     /// A suspension point for generators. This is `yield <expr>` in Rust.\n     Yield(P<Expr>),\n+\n+    /// Placeholder for an expression that wasn't syntactically well formed in some way.\n+    Err,\n }\n \n /// Optionally `Self`-qualified value/type path or associated extension."}, {"sha": "e19da011be1d60be6f2bfbd795b1569347f15eff", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "patch": "@@ -430,7 +430,9 @@ impl<'a> State<'a> {\n                 self.s.word(\"_\")?;\n             }\n             hir::TyKind::Err => {\n-                self.s.word(\"?\")?;\n+                self.popen()?;\n+                self.s.word(\"/*ERROR*/\")?;\n+                self.pclose()?;\n             }\n         }\n         self.end()\n@@ -1540,6 +1542,11 @@ impl<'a> State<'a> {\n                 self.word_space(\"yield\")?;\n                 self.print_expr_maybe_paren(&expr, parser::PREC_JUMP)?;\n             }\n+            hir::ExprKind::Err => {\n+                self.popen()?;\n+                self.s.word(\"/*ERROR*/\")?;\n+                self.pclose()?;\n+            }\n         }\n         self.ann.post(self, AnnNode::Expr(expr))?;\n         self.end()"}, {"sha": "006f11d51e4002196008037f93d4cca390c98a6c", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "patch": "@@ -592,7 +592,8 @@ impl_stable_hash_for!(enum hir::ExprKind {\n     InlineAsm(asm, inputs, outputs),\n     Struct(path, fields, base),\n     Repeat(val, times),\n-    Yield(val)\n+    Yield(val),\n+    Err\n });\n \n impl_stable_hash_for!(enum hir::LocalSource {"}, {"sha": "f9bcbb3222955058342d911cc3b975ffbd9a6c6d", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "patch": "@@ -479,7 +479,8 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n             }\n \n             hir::ExprKind::Continue(..) |\n-            hir::ExprKind::Lit(..) => {}\n+            hir::ExprKind::Lit(..) |\n+            hir::ExprKind::Err => {}\n \n             hir::ExprKind::Loop(ref blk, _, _) => {\n                 self.walk_block(&blk);"}, {"sha": "a78cf1a471b4bb79f8b095bd7195452cc2fe9a52", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "patch": "@@ -515,6 +515,7 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n       hir::ExprKind::Box(..) |\n       hir::ExprKind::Yield(..) |\n       hir::ExprKind::Type(..) |\n+      hir::ExprKind::Err |\n       hir::ExprKind::Path(hir::QPath::TypeRelative(..)) => {\n           intravisit::walk_expr(ir, expr);\n       }\n@@ -1254,7 +1255,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 self.propagate_through_exprs(inputs, succ)\n             }\n \n-            hir::ExprKind::Lit(..) | hir::ExprKind::Path(hir::QPath::TypeRelative(..)) => {\n+            hir::ExprKind::Lit(..) | hir::ExprKind::Err |\n+            hir::ExprKind::Path(hir::QPath::TypeRelative(..)) => {\n                 succ\n             }\n \n@@ -1521,7 +1523,7 @@ fn check_expr<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, expr: &'tcx Expr) {\n         hir::ExprKind::Block(..) | hir::ExprKind::AddrOf(..) |\n         hir::ExprKind::Struct(..) | hir::ExprKind::Repeat(..) |\n         hir::ExprKind::Closure(..) | hir::ExprKind::Path(_) | hir::ExprKind::Yield(..) |\n-        hir::ExprKind::Box(..) | hir::ExprKind::Type(..) => {\n+        hir::ExprKind::Box(..) | hir::ExprKind::Type(..) | hir::ExprKind::Err => {\n             intravisit::walk_expr(this, expr);\n         }\n     }"}, {"sha": "207382d5e1f45a0aebfd9806185220e45bf7625b", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "patch": "@@ -687,7 +687,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             hir::ExprKind::Block(..) | hir::ExprKind::Loop(..) | hir::ExprKind::Match(..) |\n             hir::ExprKind::Lit(..) | hir::ExprKind::Break(..) |\n             hir::ExprKind::Continue(..) | hir::ExprKind::Struct(..) | hir::ExprKind::Repeat(..) |\n-            hir::ExprKind::InlineAsm(..) | hir::ExprKind::Box(..) => {\n+            hir::ExprKind::InlineAsm(..) | hir::ExprKind::Box(..) | hir::ExprKind::Err => {\n                 Ok(self.cat_rvalue_node(expr.hir_id, expr.span, expr_ty))\n             }\n         }"}, {"sha": "23cfd18ef5d4c1222d7b4c834f317bbf90682df2", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "patch": "@@ -780,6 +780,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         hir::ExprKind::Tup(ref fields) => ExprKind::Tuple { fields: fields.to_ref() },\n \n         hir::ExprKind::Yield(ref v) => ExprKind::Yield { value: v.to_ref() },\n+        hir::ExprKind::Err => unreachable!(),\n     };\n \n     Expr {"}, {"sha": "f0b559f80a28ce0c87d8d51f6fe6aba01011729e", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "patch": "@@ -449,7 +449,8 @@ fn check_expr_kind<'a, 'tcx>(\n             struct_result\n         }\n \n-        hir::ExprKind::Lit(_) => Promotable,\n+        hir::ExprKind::Lit(_) |\n+        hir::ExprKind::Err => Promotable,\n \n         hir::ExprKind::AddrOf(_, ref expr) |\n         hir::ExprKind::Repeat(ref expr, _) => {"}, {"sha": "0cfe06451a7d7d64b298ef205ec4edf69988a1d8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "patch": "@@ -4513,6 +4513,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 tcx.mk_unit()\n             }\n+            hir::ExprKind::Err => {\n+                tcx.types.err\n+            }\n         }\n     }\n "}, {"sha": "f0e567f9cd651d77716af31dc56dfd64f0c86698", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "patch": "@@ -1001,6 +1001,7 @@ impl Expr {\n             ExprKind::Paren(..) => ExprPrecedence::Paren,\n             ExprKind::Try(..) => ExprPrecedence::Try,\n             ExprKind::Yield(..) => ExprPrecedence::Yield,\n+            ExprKind::Err => ExprPrecedence::Err,\n         }\n     }\n }\n@@ -1160,6 +1161,9 @@ pub enum ExprKind {\n \n     /// A `yield`, with an optional value to be yielded.\n     Yield(Option<P<Expr>>),\n+\n+    /// Placeholder for an expression that wasn't syntactically well formed in some way.\n+    Err,\n }\n \n /// The explicit `Self` type in a \"qualified path\". The actual"}, {"sha": "b8990264c5df50651dd5bc2f04abe758e77e8e8f", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "patch": "@@ -1367,6 +1367,7 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n             ExprKind::Yield(ex) => ExprKind::Yield(ex.map(|x| folder.fold_expr(x))),\n             ExprKind::Try(ex) => ExprKind::Try(folder.fold_expr(ex)),\n             ExprKind::TryBlock(body) => ExprKind::TryBlock(folder.fold_block(body)),\n+            ExprKind::Err => ExprKind::Err,\n         },\n         id: folder.new_id(id),\n         span: folder.new_span(span),"}, {"sha": "2ad3d3a6d648795d112c9cbd05e351d7249e88f1", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "patch": "@@ -1093,7 +1093,9 @@ impl<'a> State<'a> {\n                 self.s.word(\"_\")?;\n             }\n             ast::TyKind::Err => {\n-                self.s.word(\"?\")?;\n+                self.popen()?;\n+                self.s.word(\"/*ERROR*/\")?;\n+                self.pclose()?;\n             }\n             ast::TyKind::ImplicitSelf => {\n                 self.s.word(\"Self\")?;\n@@ -2391,6 +2393,11 @@ impl<'a> State<'a> {\n                 self.s.space()?;\n                 self.print_block_with_attrs(blk, attrs)?\n             }\n+            ast::ExprKind::Err => {\n+                self.popen()?;\n+                self.s.word(\"/*ERROR*/\")?;\n+                self.pclose()?\n+            }\n         }\n         self.ann.post(self, AnnNode::Expr(expr))?;\n         self.end()"}, {"sha": "89d4e53b8d140312dd54d5b979a58721450829f5", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "patch": "@@ -267,6 +267,7 @@ pub enum ExprPrecedence {\n     TryBlock,\n     Struct,\n     Async,\n+    Err,\n }\n \n impl ExprPrecedence {\n@@ -325,7 +326,8 @@ impl ExprPrecedence {\n             ExprPrecedence::Block |\n             ExprPrecedence::TryBlock |\n             ExprPrecedence::Async |\n-            ExprPrecedence::Struct => PREC_PAREN,\n+            ExprPrecedence::Struct |\n+            ExprPrecedence::Err => PREC_PAREN,\n         }\n     }\n }"}, {"sha": "156546bbba94afb03eb677adeb5d449bc035a1c3", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "patch": "@@ -802,6 +802,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::TryBlock(ref body) => {\n             visitor.visit_block(body)\n         }\n+        ExprKind::Err => {}\n     }\n \n     visitor.visit_expr_post(expression)"}]}