{"sha": "d0f3cb05df41b14b58553fab6a533e0e4c947b06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZjNjYjA1ZGY0MWIxNGI1ODU1M2ZhYjZhNTMzZTBlNGM5NDdiMDY=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-14T23:48:05Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-15T00:35:55Z"}, "message": "Change str::from_utf8_owned() to return Result\n\nThis allows the original vector to be recovered in the event that it is\nnot valid UTF-8.\n\n[breaking-change]", "tree": {"sha": "911de97c3495219eaff1e4def891ed0d2b8ec0a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/911de97c3495219eaff1e4def891ed0d2b8ec0a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0f3cb05df41b14b58553fab6a533e0e4c947b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f3cb05df41b14b58553fab6a533e0e4c947b06", "html_url": "https://github.com/rust-lang/rust/commit/d0f3cb05df41b14b58553fab6a533e0e4c947b06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0f3cb05df41b14b58553fab6a533e0e4c947b06/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4414739a5897ff2a4b35de5f7e1436b6e3f3f10", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4414739a5897ff2a4b35de5f7e1436b6e3f3f10", "html_url": "https://github.com/rust-lang/rust/commit/e4414739a5897ff2a4b35de5f7e1436b6e3f3f10"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "5cd555cad8ea9e66517a809da0926bdd050c8a25", "filename": "src/doc/complement-cheatsheet.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0f3cb05df41b14b58553fab6a533e0e4c947b06/src%2Fdoc%2Fcomplement-cheatsheet.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0f3cb05df41b14b58553fab6a533e0e4c947b06/src%2Fdoc%2Fcomplement-cheatsheet.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-cheatsheet.md?ref=d0f3cb05df41b14b58553fab6a533e0e4c947b06", "patch": "@@ -60,7 +60,7 @@ To return an Owned String (~str) use the str helper function [`from_utf8_owned`]\n ~~~\n use std::str;\n \n-let x: Option<~str> = str::from_utf8_owned(~[104u8,105u8]);\n+let x: Result<~str,~[u8]> = str::from_utf8_owned(~[104u8,105u8]);\n let y: ~str = x.unwrap();\n ~~~\n "}, {"sha": "5f117ca08213cc0a2eff988e395168f1bbd03bc1", "filename": "src/libstd/str.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0f3cb05df41b14b58553fab6a533e0e4c947b06/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f3cb05df41b14b58553fab6a533e0e4c947b06/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=d0f3cb05df41b14b58553fab6a533e0e4c947b06", "patch": "@@ -87,6 +87,7 @@ use iter::{Iterator, range, AdditiveIterator};\n use mem::transmute;\n use mem;\n use option::{None, Option, Some};\n+use result::{Result, Ok, Err};\n use slice::Vector;\n use slice::{ImmutableVector, MutableVector, CloneableVector};\n use strbuf::StrBuf;\n@@ -105,12 +106,14 @@ Section: Creating a string\n */\n \n /// Consumes a vector of bytes to create a new utf-8 string.\n-/// Returns None if the vector contains invalid UTF-8.\n-pub fn from_utf8_owned(vv: ~[u8]) -> Option<~str> {\n+///\n+/// Returns `Err` with the original vector if the vector contains invalid\n+/// UTF-8.\n+pub fn from_utf8_owned(vv: ~[u8]) -> Result<~str, ~[u8]> {\n     if is_utf8(vv) {\n-        Some(unsafe { raw::from_utf8_owned(vv) })\n+        Ok(unsafe { raw::from_utf8_owned(vv) })\n     } else {\n-        None\n+        Err(vv)\n     }\n }\n \n@@ -2115,13 +2118,13 @@ mod tests {\n     #[test]\n     fn test_str_from_utf8_owned() {\n         let xs = bytes!(\"hello\").to_owned();\n-        assert_eq!(from_utf8_owned(xs), Some(\"hello\".to_owned()));\n+        assert_eq!(from_utf8_owned(xs), Ok(\"hello\".to_owned()));\n \n         let xs = bytes!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\").to_owned();\n-        assert_eq!(from_utf8_owned(xs), Some(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".to_owned()));\n+        assert_eq!(from_utf8_owned(xs), Ok(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".to_owned()));\n \n         let xs = bytes!(\"hello\", 0xff).to_owned();\n-        assert_eq!(from_utf8_owned(xs), None);\n+        assert_eq!(from_utf8_owned(xs), Err(bytes!(\"hello\", 0xff).to_owned()));\n     }\n \n     #[test]"}]}