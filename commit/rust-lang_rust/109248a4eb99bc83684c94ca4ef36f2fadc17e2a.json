{"sha": "109248a4eb99bc83684c94ca4ef36f2fadc17e2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwOTI0OGE0ZWI5OWJjODM2ODRjOTRjYTRlZjM2ZjJmYWRjMTdlMmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-06T11:29:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-06T11:29:29Z"}, "message": "Auto merge of #84965 - the8472:lazy-delayed-diagnostics, r=Mark-Simulacrum\n\nlazify backtrace formatting for delayed diagnostics\n\nFormatting backtraces causes debug info to be parsed, which is superfluous work if the delayed bugs get cleared later.\n\nLazifying them results in these speedups for the UI testsuite:\n\n|       | debuginfo = 0 | debuginfo = 1 | debuginfo = 2 |\n|-------|---------------|---------------|---------------|\n| eager | 31.59s        | 37.55s        | 42.64s        |\n| lazy  | 30.44s        | 30.86s        | 34.07s        |", "tree": {"sha": "f4f0300e6922d1cc9b449185fd3911c3cd80859b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4f0300e6922d1cc9b449185fd3911c3cd80859b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/109248a4eb99bc83684c94ca4ef36f2fadc17e2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/109248a4eb99bc83684c94ca4ef36f2fadc17e2a", "html_url": "https://github.com/rust-lang/rust/commit/109248a4eb99bc83684c94ca4ef36f2fadc17e2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/109248a4eb99bc83684c94ca4ef36f2fadc17e2a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d99508b52499c9efd213738e71927458c1d394e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d99508b52499c9efd213738e71927458c1d394e", "html_url": "https://github.com/rust-lang/rust/commit/1d99508b52499c9efd213738e71927458c1d394e"}, {"sha": "b98629bfbc66f2011d989138b0d82d7598471445", "url": "https://api.github.com/repos/rust-lang/rust/commits/b98629bfbc66f2011d989138b0d82d7598471445", "html_url": "https://github.com/rust-lang/rust/commit/b98629bfbc66f2011d989138b0d82d7598471445"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "6aee769298bd832d54283c2e7670b06bdda970ae", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/109248a4eb99bc83684c94ca4ef36f2fadc17e2a/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109248a4eb99bc83684c94ca4ef36f2fadc17e2a/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=109248a4eb99bc83684c94ca4ef36f2fadc17e2a", "patch": "@@ -294,6 +294,7 @@ impl error::Error for ExplicitBug {}\n \n pub use diagnostic::{Diagnostic, DiagnosticId, DiagnosticStyledString, SubDiagnostic};\n pub use diagnostic_builder::DiagnosticBuilder;\n+use std::backtrace::Backtrace;\n \n /// A handler deals with errors and other compiler output.\n /// Certain errors (fatal, bug, unimpl) may cause immediate exit,\n@@ -317,7 +318,7 @@ struct HandlerInner {\n     deduplicated_err_count: usize,\n     emitter: Box<dyn Emitter + sync::Send>,\n     delayed_span_bugs: Vec<Diagnostic>,\n-    delayed_good_path_bugs: Vec<Diagnostic>,\n+    delayed_good_path_bugs: Vec<DelayedDiagnostic>,\n \n     /// This set contains the `DiagnosticId` of all emitted diagnostics to avoid\n     /// emitting the same diagnostic with extended help (`--teach`) twice, which\n@@ -388,7 +389,7 @@ impl Drop for HandlerInner {\n         if !self.has_any_message() {\n             let bugs = std::mem::replace(&mut self.delayed_good_path_bugs, Vec::new());\n             self.flush_delayed(\n-                bugs,\n+                bugs.into_iter().map(DelayedDiagnostic::decorate).collect(),\n                 \"no warnings or errors encountered even though `delayed_good_path_bugs` issued\",\n             );\n         }\n@@ -968,12 +969,12 @@ impl HandlerInner {\n     }\n \n     fn delay_good_path_bug(&mut self, msg: &str) {\n-        let mut diagnostic = Diagnostic::new(Level::Bug, msg);\n+        let diagnostic = Diagnostic::new(Level::Bug, msg);\n         if self.flags.report_delayed_bugs {\n             self.emit_diagnostic(&diagnostic);\n         }\n-        diagnostic.note(&format!(\"delayed at {}\", std::backtrace::Backtrace::force_capture()));\n-        self.delayed_good_path_bugs.push(diagnostic);\n+        let backtrace = std::backtrace::Backtrace::force_capture();\n+        self.delayed_good_path_bugs.push(DelayedDiagnostic::with_backtrace(diagnostic, backtrace));\n     }\n \n     fn failure(&mut self, msg: &str) {\n@@ -1042,6 +1043,22 @@ impl HandlerInner {\n     }\n }\n \n+struct DelayedDiagnostic {\n+    inner: Diagnostic,\n+    note: Backtrace,\n+}\n+\n+impl DelayedDiagnostic {\n+    fn with_backtrace(diagnostic: Diagnostic, backtrace: Backtrace) -> Self {\n+        DelayedDiagnostic { inner: diagnostic, note: backtrace }\n+    }\n+\n+    fn decorate(mut self) -> Diagnostic {\n+        self.inner.note(&format!(\"delayed at {}\", self.note));\n+        self.inner\n+    }\n+}\n+\n #[derive(Copy, PartialEq, Clone, Hash, Debug, Encodable, Decodable)]\n pub enum Level {\n     Bug,"}]}