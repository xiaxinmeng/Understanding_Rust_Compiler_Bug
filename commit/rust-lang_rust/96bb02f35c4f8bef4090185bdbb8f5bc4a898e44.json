{"sha": "96bb02f35c4f8bef4090185bdbb8f5bc4a898e44", "node_id": "C_kwDOAAsO6NoAKDk2YmIwMmYzNWM0ZjhiZWY0MDkwMTg1YmRiYjhmNWJjNGE4OThlNDQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-13T18:16:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-13T18:16:41Z"}, "message": "Rollup merge of #104645 - yukiomoto:log-backtrace-option, r=oli-obk\n\nAdd log-backtrace option to show backtraces along with logging\n\naccording to #90698, I added a compiler option, `-Zlog-backtrace=filter`, where `filter` is a module name, to show backtraces for logging without rebuilding.\n\nresolve #90698", "tree": {"sha": "37e51c7a4e0c41b3f9147f252aa90435a1b89835", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37e51c7a4e0c41b3f9147f252aa90435a1b89835"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjwaAJCRBK7hj4Ov3rIwAAGaEIAAZc0Nqj/GFyj276F8n6Ue+C\n+JuI7jHG4kmQfZBdbAnbMoBGPGJz1vfIk6IfGAxzR5r8q2mlVnp7ki1wj+x+h8jm\n6aEsNHeCYrRRnpVZnhI958NlHl4FIXnsb5fOm1omHIn9Zh8IZyEllRH+1wbRpoub\ncc8bLoSe6OFAUD6wV+jz4VXfhOanl1Bk2Sl0eDiiWZzyqiXP9bzMCbUOuh7XZLTg\nhMyYvRC6wPf3FbpQxuOzy2M0exSEuSu10iezOwe1HCoRrs9h5BKygIF17AhA57VU\nJ69MOsqtFGQDAZL7hUa3M9olTtZZ1I6LAjV6seshADUw8temyhPATqWjFqDewvQ=\n=kWVN\n-----END PGP SIGNATURE-----\n", "payload": "tree 37e51c7a4e0c41b3f9147f252aa90435a1b89835\nparent 0b90256ada21c6a81b4c18f2c7a23151ab5fc232\nparent 4e2a3567bc14ad7b7e9d28f31fc1a468976ebc81\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673633801 +0100\ncommitter GitHub <noreply@github.com> 1673633801 +0100\n\nRollup merge of #104645 - yukiomoto:log-backtrace-option, r=oli-obk\n\nAdd log-backtrace option to show backtraces along with logging\n\naccording to #90698, I added a compiler option, `-Zlog-backtrace=filter`, where `filter` is a module name, to show backtraces for logging without rebuilding.\n\nresolve #90698\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44", "html_url": "https://github.com/rust-lang/rust/commit/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "html_url": "https://github.com/rust-lang/rust/commit/0b90256ada21c6a81b4c18f2c7a23151ab5fc232"}, {"sha": "4e2a3567bc14ad7b7e9d28f31fc1a468976ebc81", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e2a3567bc14ad7b7e9d28f31fc1a468976ebc81", "html_url": "https://github.com/rust-lang/rust/commit/4e2a3567bc14ad7b7e9d28f31fc1a468976ebc81"}], "stats": {"total": 87, "additions": 83, "deletions": 4}, "files": [{"sha": "9b3b3951888a543f56e0fa6639fefc5e2bd28ffa", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=96bb02f35c4f8bef4090185bdbb8f5bc4a898e44", "patch": "@@ -4273,6 +4273,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"rustc_span\",\n  \"tracing\",\n+ \"tracing-core\",\n  \"tracing-subscriber\",\n  \"tracing-tree\",\n ]"}, {"sha": "a62e5dec4b8643aba7ebc69ff4ffc5c6e67e1db5", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=96bb02f35c4f8bef4090185bdbb8f5bc4a898e44", "patch": "@@ -231,6 +231,10 @@ fn run_compiler(\n         registry: diagnostics_registry(),\n     };\n \n+    if !tracing::dispatcher::has_been_set() {\n+        init_rustc_env_logger_with_backtrace_option(&config.opts.unstable_opts.log_backtrace);\n+    }\n+\n     match make_input(config.opts.error_format, &matches.free) {\n         Err(reported) => return Err(reported),\n         Ok(Some((input, input_file_path))) => {\n@@ -1300,7 +1304,14 @@ pub fn install_ice_hook() {\n /// This allows tools to enable rust logging without having to magically match rustc's\n /// tracing crate version.\n pub fn init_rustc_env_logger() {\n-    if let Err(error) = rustc_log::init_rustc_env_logger() {\n+    init_rustc_env_logger_with_backtrace_option(&None);\n+}\n+\n+/// This allows tools to enable rust logging without having to magically match rustc's\n+/// tracing crate version. In contrast to `init_rustc_env_logger` it allows you to\n+/// choose a target module you wish to show backtraces along with its logging.\n+pub fn init_rustc_env_logger_with_backtrace_option(backtrace_target: &Option<String>) {\n+    if let Err(error) = rustc_log::init_rustc_env_logger_with_backtrace_option(backtrace_target) {\n         early_error(ErrorOutputType::default(), &error.to_string());\n     }\n }\n@@ -1366,7 +1377,6 @@ mod signal_handler {\n pub fn main() -> ! {\n     let start_time = Instant::now();\n     let start_rss = get_resident_set_size();\n-    init_rustc_env_logger();\n     signal_handler::install();\n     let mut callbacks = TimePassesCallbacks::default();\n     install_ice_hook();"}, {"sha": "07b28cc86cee1c95601f320e5ead863001913ab7", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=96bb02f35c4f8bef4090185bdbb8f5bc4a898e44", "patch": "@@ -748,6 +748,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(link_only, true);\n     tracked!(llvm_plugins, vec![String::from(\"plugin_name\")]);\n     tracked!(location_detail, LocationDetail { file: true, line: false, column: false });\n+    tracked!(log_backtrace, Some(\"filter\".to_string()));\n     tracked!(maximal_hir_to_mir_coverage, true);\n     tracked!(merge_functions, Some(MergeFunctions::Disabled));\n     tracked!(mir_emit_retag, true);"}, {"sha": "7f955b0a75090ee7234784612bdd1a316a80f47b", "filename": "compiler/rustc_log/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44/compiler%2Frustc_log%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44/compiler%2Frustc_log%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2FCargo.toml?ref=96bb02f35c4f8bef4090185bdbb8f5bc4a898e44", "patch": "@@ -7,6 +7,7 @@ edition = \"2021\"\n tracing = \"0.1.28\"\n tracing-subscriber = { version = \"0.3.3\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n tracing-tree = \"0.2.0\"\n+tracing-core = \"0.1.28\"\n \n [dev-dependencies]\n rustc_span = { path = \"../rustc_span\" }"}, {"sha": "fc1cabd2de95134ab892f7e9f06b8b09d90e2fa2", "filename": "compiler/rustc_log/src/lib.rs", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44/compiler%2Frustc_log%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44/compiler%2Frustc_log%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2Fsrc%2Flib.rs?ref=96bb02f35c4f8bef4090185bdbb8f5bc4a898e44", "patch": "@@ -45,16 +45,34 @@\n use std::env::{self, VarError};\n use std::fmt::{self, Display};\n use std::io::{self, IsTerminal};\n+use tracing_core::{Event, Subscriber};\n use tracing_subscriber::filter::{Directive, EnvFilter, LevelFilter};\n+use tracing_subscriber::fmt::{\n+    format::{self, FormatEvent, FormatFields},\n+    FmtContext,\n+};\n use tracing_subscriber::layer::SubscriberExt;\n \n pub fn init_rustc_env_logger() -> Result<(), Error> {\n-    init_env_logger(\"RUSTC_LOG\")\n+    init_rustc_env_logger_with_backtrace_option(&None)\n+}\n+\n+pub fn init_rustc_env_logger_with_backtrace_option(\n+    backtrace_target: &Option<String>,\n+) -> Result<(), Error> {\n+    init_env_logger_with_backtrace_option(\"RUSTC_LOG\", backtrace_target)\n }\n \n /// In contrast to `init_rustc_env_logger` this allows you to choose an env var\n /// other than `RUSTC_LOG`.\n pub fn init_env_logger(env: &str) -> Result<(), Error> {\n+    init_env_logger_with_backtrace_option(env, &None)\n+}\n+\n+pub fn init_env_logger_with_backtrace_option(\n+    env: &str,\n+    backtrace_target: &Option<String>,\n+) -> Result<(), Error> {\n     let filter = match env::var(env) {\n         Ok(env) => EnvFilter::new(env),\n         _ => EnvFilter::default().add_directive(Directive::from(LevelFilter::WARN)),\n@@ -88,11 +106,47 @@ pub fn init_env_logger(env: &str) -> Result<(), Error> {\n     let layer = layer.with_thread_ids(true).with_thread_names(true);\n \n     let subscriber = tracing_subscriber::Registry::default().with(filter).with(layer);\n-    tracing::subscriber::set_global_default(subscriber).unwrap();\n+    match backtrace_target {\n+        Some(str) => {\n+            let fmt_layer = tracing_subscriber::fmt::layer()\n+                .with_writer(io::stderr)\n+                .without_time()\n+                .event_format(BacktraceFormatter { backtrace_target: str.to_string() });\n+            let subscriber = subscriber.with(fmt_layer);\n+            tracing::subscriber::set_global_default(subscriber).unwrap();\n+        }\n+        None => {\n+            tracing::subscriber::set_global_default(subscriber).unwrap();\n+        }\n+    };\n \n     Ok(())\n }\n \n+struct BacktraceFormatter {\n+    backtrace_target: String,\n+}\n+\n+impl<S, N> FormatEvent<S, N> for BacktraceFormatter\n+where\n+    S: Subscriber + for<'a> tracing_subscriber::registry::LookupSpan<'a>,\n+    N: for<'a> FormatFields<'a> + 'static,\n+{\n+    fn format_event(\n+        &self,\n+        _ctx: &FmtContext<'_, S, N>,\n+        mut writer: format::Writer<'_>,\n+        event: &Event<'_>,\n+    ) -> fmt::Result {\n+        let target = event.metadata().target();\n+        if !target.contains(&self.backtrace_target) {\n+            return Ok(());\n+        }\n+        let backtrace = std::backtrace::Backtrace::capture();\n+        writeln!(writer, \"stack backtrace: \\n{:?}\", backtrace)\n+    }\n+}\n+\n pub fn stdout_isatty() -> bool {\n     io::stdout().is_terminal()\n }"}, {"sha": "7b5fd6cc2a81d9a0c3bc45c660b34f3c7ec7fec3", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=96bb02f35c4f8bef4090185bdbb8f5bc4a898e44", "patch": "@@ -1411,6 +1411,8 @@ options! {\n         \"what location details should be tracked when using caller_location, either \\\n         `none`, or a comma separated list of location details, for which \\\n         valid options are `file`, `line`, and `column` (default: `file,line,column`)\"),\n+    log_backtrace: Option<String> = (None, parse_opt_string, [TRACKED],\n+        \"add a backtrace along with logging\"),\n     ls: bool = (false, parse_bool, [UNTRACKED],\n         \"list the symbols defined by a library crate (default: no)\"),\n     macro_backtrace: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "4bdecdc1b79446302261626e67df86d9c77e6ad0", "filename": "tests/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44/tests%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44/tests%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fz-help.stdout?ref=96bb02f35c4f8bef4090185bdbb8f5bc4a898e44", "patch": "@@ -76,6 +76,7 @@\n     -Z                            llvm-plugins=val -- a list LLVM plugins to enable (space separated)\n     -Z                         llvm-time-trace=val -- generate JSON tracing data file from LLVM data (default: no)\n     -Z                         location-detail=val -- what location details should be tracked when using caller_location, either `none`, or a comma separated list of location details, for which valid options are `file`, `line`, and `column` (default: `file,line,column`)\n+    -Z                           log-backtrace=val -- add a backtrace along with logging\n     -Z                                      ls=val -- list the symbols defined by a library crate (default: no)\n     -Z                         macro-backtrace=val -- show macro backtraces (default: no)\n     -Z             maximal-hir-to-mir-coverage=val -- save as much information as possible about the correspondence between MIR and HIR as source scopes (default: no)"}, {"sha": "3979d2001fc5957ae109d6e4bdd9f8b672a6b8b9", "filename": "tests/ui/attributes/log-backtrace.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44/tests%2Fui%2Fattributes%2Flog-backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb02f35c4f8bef4090185bdbb8f5bc4a898e44/tests%2Fui%2Fattributes%2Flog-backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattributes%2Flog-backtrace.rs?ref=96bb02f35c4f8bef4090185bdbb8f5bc4a898e44", "patch": "@@ -0,0 +1,9 @@\n+// run-pass\n+//\n+// This test makes sure that log-backtrace option doesn't give a compilation error.\n+//\n+// dont-check-compiler-stdout\n+// dont-check-compiler-stderr\n+// rustc-env:RUSTC_LOG=info\n+// compile-flags: -Zlog-backtrace=rustc_metadata::creader\n+fn main() {}"}]}