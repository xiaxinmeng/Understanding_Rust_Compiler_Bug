{"sha": "405b5fc1ee21cc6bc29f97719600bd94066dd58c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNWI1ZmMxZWUyMWNjNmJjMjlmOTc3MTk2MDBiZDk0MDY2ZGQ1OGM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-19T11:01:30Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-19T11:19:05Z"}, "message": "rustc: put ty_trait behind some indirection.\n\nThis reduces ty::sty from 160 bytes to just 112, and some measurements\neddyb made suggest that the ty_trait variant occurs very\nrarely (e.g. ~1% of all sty instances) hence this will result in a large\nmemory saving, and the cost of the indirection is unlikely to be an\nissue.", "tree": {"sha": "514fb71b6af315fe4b55f0c6d8ee473c67195564", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/514fb71b6af315fe4b55f0c6d8ee473c67195564"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/405b5fc1ee21cc6bc29f97719600bd94066dd58c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/405b5fc1ee21cc6bc29f97719600bd94066dd58c", "html_url": "https://github.com/rust-lang/rust/commit/405b5fc1ee21cc6bc29f97719600bd94066dd58c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/405b5fc1ee21cc6bc29f97719600bd94066dd58c/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a39c29415503222d3271995573b9beafa3fcc30f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a39c29415503222d3271995573b9beafa3fcc30f", "html_url": "https://github.com/rust-lang/rust/commit/a39c29415503222d3271995573b9beafa3fcc30f"}], "stats": {"total": 155, "additions": 94, "deletions": 61}, "files": [{"sha": "3d66645044fcd16f7d7cd7283f7463463c549717", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -280,11 +280,11 @@ fn enc_sty(w: &mut MemWriter, cx: &ctxt, st: &ty::sty) {\n             enc_substs(w, cx, substs);\n             mywrite!(w, \"]\");\n         }\n-        ty::ty_trait(def, ref substs, store, mt, bounds) => {\n-            mywrite!(w, \"x[{}|\", (cx.ds)(def));\n+        ty::ty_trait(~ty::TyTrait { def_id, ref substs, store, mutability, bounds }) => {\n+            mywrite!(w, \"x[{}|\", (cx.ds)(def_id));\n             enc_substs(w, cx, substs);\n             enc_trait_store(w, cx, store);\n-            enc_mutability(w, mt);\n+            enc_mutability(w, mutability);\n             let bounds = ty::ParamBounds {builtin_bounds: bounds,\n                                           trait_bounds: Vec::new()};\n             enc_bounds(w, cx, &bounds);"}, {"sha": "b6433fe167d7c6b72600321f6424ee606dfd2fcf", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -358,7 +358,7 @@ pub fn check_expr(cx: &mut Context, e: &Expr) {\n fn check_trait_cast(cx: &mut Context, source_ty: ty::t, target_ty: ty::t, span: Span) {\n     check_cast_for_escaping_regions(cx, source_ty, target_ty, span);\n     match ty::get(target_ty).sty {\n-        ty::ty_trait(_, _, _, _, bounds) => {\n+        ty::ty_trait(~ty::TyTrait { bounds, .. }) => {\n             check_trait_cast_bounds(cx, span, source_ty, bounds);\n         }\n         _ => {}"}, {"sha": "907d5fa621ee619d08ca0e22c84f8da6041e6f62", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -911,7 +911,7 @@ fn check_heap_type(cx: &Context, span: Span, ty: ty::t) {\n                 }\n                 ty::ty_uniq(_) | ty::ty_str(ty::vstore_uniq) |\n                 ty::ty_vec(_, ty::vstore_uniq) |\n-                ty::ty_trait(_, _, ty::UniqTraitStore, _, _) => {\n+                ty::ty_trait(~ty::TyTrait { store: ty::UniqTraitStore, .. }) => {\n                     n_uniq += 1;\n                 }\n                 ty::ty_closure(ref c) if c.sigil == ast::OwnedSigil => {"}, {"sha": "3413a8fa3845ec2bf7d67bc506659ec3cdb33896", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -170,7 +170,7 @@ pub enum deref_kind {\n pub fn opt_deref_kind(t: ty::t) -> Option<deref_kind> {\n     match ty::get(t).sty {\n         ty::ty_uniq(_) |\n-        ty::ty_trait(_, _, ty::UniqTraitStore, _, _) |\n+        ty::ty_trait(~ty::TyTrait { store: ty::UniqTraitStore, .. }) |\n         ty::ty_vec(_, ty::vstore_uniq) |\n         ty::ty_str(ty::vstore_uniq) |\n         ty::ty_closure(ty::ClosureTy {sigil: ast::OwnedSigil, ..}) => {\n@@ -183,7 +183,7 @@ pub fn opt_deref_kind(t: ty::t) -> Option<deref_kind> {\n             Some(deref_ptr(BorrowedPtr(kind, r)))\n         }\n \n-        ty::ty_trait(_, _, ty::RegionTraitStore(r), m, _) => {\n+        ty::ty_trait(~ty::TyTrait { store: ty::RegionTraitStore(r), mutability: m, .. }) => {\n             let kind = ty::BorrowKind::from_mutbl(m);\n             Some(deref_ptr(BorrowedPtr(kind, r)))\n         }"}, {"sha": "f87ce57089a41df0bc9935b0f21635226feb1305", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -2126,7 +2126,9 @@ fn type_metadata(cx: &CrateContext,\n         ty::ty_closure(ref closurety) => {\n             subroutine_type_metadata(cx, &closurety.sig, usage_site_span)\n         },\n-        ty::ty_trait(def_id, ref substs, trait_store, mutability, ref bounds) => {\n+        ty::ty_trait(~ty::TyTrait { def_id, ref substs,\n+                                store: trait_store, mutability,\n+                                ref bounds }) => {\n             trait_metadata(cx, def_id, t, substs, trait_store, mutability, bounds)\n         },\n         ty::ty_struct(def_id, ref substs) => {"}, {"sha": "836433e1daeaf36167c3c342518c5ab51f0e1e7f", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -310,7 +310,7 @@ fn make_drop_glue<'a>(bcx: &'a Block<'a>, v0: ValueRef, t: ty::t) -> &'a Block<'\n                 }\n             }\n         }\n-        ty::ty_trait(_, _, ty::UniqTraitStore, _, _) => {\n+        ty::ty_trait(~ty::TyTrait { store: ty::UniqTraitStore, .. }) => {\n             let lluniquevalue = GEPi(bcx, v0, [0, abi::trt_field_box]);\n             // Only drop the value when it is non-null\n             with_cond(bcx, IsNotNull(bcx, Load(bcx, lluniquevalue)), |bcx| {"}, {"sha": "707cb2c8806221c9a9ab3798ed9520b0882198bb", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -351,7 +351,7 @@ impl<'a> Reflector<'a> {\n             })\n           }\n \n-          ty::ty_trait(_, _, _, _, _) => {\n+          ty::ty_trait(..) => {\n               let extra = [\n                   self.c_slice(token::intern_and_get_ident(ty_to_str(tcx, t)))\n               ];"}, {"sha": "abf4d5a8c40975645ff95f693daec6a98700656b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -747,7 +747,7 @@ pub enum sty {\n     ty_rptr(Region, mt),\n     ty_bare_fn(BareFnTy),\n     ty_closure(ClosureTy),\n-    ty_trait(DefId, substs, TraitStore, ast::Mutability, BuiltinBounds),\n+    ty_trait(~TyTrait),\n     ty_struct(DefId, substs),\n     ty_tup(Vec<t>),\n \n@@ -764,6 +764,15 @@ pub enum sty {\n     ty_unboxed_vec(mt),\n }\n \n+#[deriving(Clone, Eq, Hash)]\n+pub struct TyTrait {\n+    def_id: DefId,\n+    substs: substs,\n+    store: TraitStore,\n+    mutability: ast::Mutability,\n+    bounds: BuiltinBounds\n+}\n+\n #[deriving(Eq, Hash)]\n pub struct TraitRef {\n     def_id: DefId,\n@@ -1205,10 +1214,10 @@ pub fn mk_t(cx: &ctxt, st: sty) -> t {\n       &ty_infer(_) => flags |= needs_infer as uint,\n       &ty_self(_) => flags |= has_self as uint,\n       &ty_enum(_, ref substs) | &ty_struct(_, ref substs) |\n-      &ty_trait(_, ref substs, _, _, _) => {\n+      &ty_trait(~ty::TyTrait { ref substs, .. }) => {\n           flags |= sflags(substs);\n           match st {\n-              ty_trait(_, _, RegionTraitStore(r), _, _) => {\n+              ty_trait(~ty::TyTrait { store: RegionTraitStore(r), .. }) => {\n                     flags |= rflags(r);\n                 }\n               _ => {}\n@@ -1432,7 +1441,14 @@ pub fn mk_trait(cx: &ctxt,\n                 bounds: BuiltinBounds)\n              -> t {\n     // take a copy of substs so that we own the vectors inside\n-    mk_t(cx, ty_trait(did, substs, store, mutability, bounds))\n+    let inner = ~TyTrait {\n+        def_id: did,\n+        substs: substs,\n+        store: store,\n+        mutability: mutability,\n+        bounds: bounds\n+    };\n+    mk_t(cx, ty_trait(inner))\n }\n \n pub fn mk_struct(cx: &ctxt, struct_id: ast::DefId, substs: substs) -> t {\n@@ -1472,7 +1488,7 @@ pub fn maybe_walk_ty(ty: t, f: |t| -> bool) {\n             maybe_walk_ty(tm.ty, f);\n         }\n         ty_enum(_, ref substs) | ty_struct(_, ref substs) |\n-        ty_trait(_, ref substs, _, _, _) => {\n+        ty_trait(~TyTrait { ref substs, .. }) => {\n             for subty in (*substs).tps.iter() { maybe_walk_ty(*subty, |x| f(x)); }\n         }\n         ty_tup(ref ts) => { for tt in ts.iter() { maybe_walk_ty(*tt, |x| f(x)); } }\n@@ -2144,8 +2160,8 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n                 tc_ty(cx, typ, cache).owned_pointer()\n             }\n \n-            ty_trait(_, _, store, mutbl, bounds) => {\n-                object_contents(cx, store, mutbl, bounds)\n+            ty_trait(~ty::TyTrait { store, mutability, bounds, .. }) => {\n+                object_contents(cx, store, mutability, bounds)\n             }\n \n             ty_ptr(ref mt) => {\n@@ -2437,7 +2453,7 @@ pub fn is_instantiable(cx: &ctxt, r_ty: t) -> bool {\n                 false           // unsafe ptrs can always be NULL\n             }\n \n-            ty_trait(_, _, _, _, _) => {\n+            ty_trait(..) => {\n                 false\n             }\n \n@@ -3140,9 +3156,9 @@ pub fn adjust_ty(cx: &ctxt,\n     fn borrow_obj(cx: &ctxt, span: Span, r: Region,\n                   m: ast::Mutability, ty: ty::t) -> ty::t {\n         match get(ty).sty {\n-            ty_trait(trt_did, ref trt_substs, _, _, b) => {\n-                ty::mk_trait(cx, trt_did, trt_substs.clone(),\n-                             RegionTraitStore(r), m, b)\n+            ty_trait(~ty::TyTrait {def_id, ref substs, bounds, .. }) => {\n+                ty::mk_trait(cx, def_id, substs.clone(),\n+                             RegionTraitStore(r), m, bounds)\n             }\n             ref s => {\n                 cx.sess.span_bug(\n@@ -3479,7 +3495,7 @@ pub fn ty_sort_str(cx: &ctxt, t: t) -> ~str {\n         ty_rptr(_, _) => ~\"&-ptr\",\n         ty_bare_fn(_) => ~\"extern fn\",\n         ty_closure(_) => ~\"fn\",\n-        ty_trait(id, _, _, _, _) => format!(\"trait {}\", item_path_str(cx, id)),\n+        ty_trait(ref inner) => format!(\"trait {}\", item_path_str(cx, inner.def_id)),\n         ty_struct(id, _) => format!(\"struct {}\", item_path_str(cx, id)),\n         ty_tup(_) => ~\"tuple\",\n         ty_infer(TyVar(_)) => ~\"inferred type\",\n@@ -3865,7 +3881,7 @@ pub fn try_add_builtin_trait(tcx: &ctxt,\n \n pub fn ty_to_def_id(ty: t) -> Option<ast::DefId> {\n     match get(ty).sty {\n-      ty_trait(id, _, _, _, _) | ty_struct(id, _) | ty_enum(id, _) => Some(id),\n+      ty_trait(~TyTrait { def_id: id, .. }) | ty_struct(id, _) | ty_enum(id, _) => Some(id),\n       _ => None\n     }\n }\n@@ -4951,7 +4967,7 @@ pub fn hash_crate_independent(tcx: &ctxt, t: t, svh: &Svh) -> u64 {\n                 hash!(c.bounds);\n                 region(&mut state, c.region);\n             }\n-            ty_trait(d, _, store, m, bounds) => {\n+            ty_trait(~ty::TyTrait { def_id: d, store, mutability: m, bounds, .. }) => {\n                 byte!(17);\n                 did(&mut state, d);\n                 match store {"}, {"sha": "126929683b33bbe05716caa32a50761eecec6654", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -159,12 +159,14 @@ pub fn super_fold_sty<T:TypeFolder>(this: &mut T,\n         ty::ty_enum(tid, ref substs) => {\n             ty::ty_enum(tid, this.fold_substs(substs))\n         }\n-        ty::ty_trait(did, ref substs, st, mutbl, bounds) => {\n-            ty::ty_trait(did,\n-                     this.fold_substs(substs),\n-                     this.fold_trait_store(st),\n-                     mutbl,\n-                     bounds)\n+        ty::ty_trait(~ty::TyTrait { def_id, ref substs, store, mutability, bounds }) => {\n+            ty::ty_trait(~ty::TyTrait{\n+                def_id: def_id,\n+                substs: this.fold_substs(substs),\n+                store: this.fold_trait_store(store),\n+                mutability: mutability,\n+                bounds: bounds\n+            })\n         }\n         ty::ty_tup(ref ts) => {\n             ty::ty_tup(fold_ty_vec(this, ts.as_slice()))"}, {"sha": "06a2c0b17b513969e5db2607b2fe281fb3daa21c", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -417,9 +417,9 @@ impl<'a> LookupContext<'a> {\n         let span = self.self_expr.map_or(self.span, |e| e.span);\n         check::autoderef(self.fcx, span, self_ty, None, PreferMutLvalue, |self_ty, _| {\n             match get(self_ty).sty {\n-                ty_trait(did, ref substs, _, _, _) => {\n-                    self.push_inherent_candidates_from_object(did, substs);\n-                    self.push_inherent_impl_candidates_for_type(did);\n+                ty_trait(~TyTrait { def_id, ref substs, .. }) => {\n+                    self.push_inherent_candidates_from_object(def_id, substs);\n+                    self.push_inherent_impl_candidates_for_type(def_id);\n                 }\n                 ty_enum(did, _) | ty_struct(did, _) => {\n                     if self.check_traits == CheckTraitsAndInherentMethods {\n@@ -775,10 +775,12 @@ impl<'a> LookupContext<'a> {\n                      autoderefs: autoderefs,\n                      autoref: Some(ty::AutoBorrowVec(region, self_mt.mutbl))})\n             }\n-            ty::ty_trait(did, ref substs, ty::RegionTraitStore(_), mutbl, bounds) => {\n+            ty::ty_trait(~ty::TyTrait {\n+                def_id, ref substs, store: ty::RegionTraitStore(_), mutability: mutbl, bounds\n+            }) => {\n                 let region =\n                     self.infcx().next_region_var(infer::Autoref(self.span));\n-                (ty::mk_trait(tcx, did, substs.clone(),\n+                (ty::mk_trait(tcx, def_id, substs.clone(),\n                               ty::RegionTraitStore(region),\n                               mutbl, bounds),\n                  ty::AutoDerefRef {\n@@ -860,7 +862,7 @@ impl<'a> LookupContext<'a> {\n                     })\n             }\n \n-            ty_trait(trt_did, trt_substs, _, _, b) => {\n+            ty_trait(~ty::TyTrait { def_id: trt_did, substs: trt_substs, bounds: b, .. }) => {\n                 // Coerce ~/@/&Trait instances to &Trait.\n \n                 self.search_for_some_kind_of_autorefd_method(\n@@ -1301,7 +1303,9 @@ impl<'a> LookupContext<'a> {\n                         rcvr_matches_ty(self.fcx, mt.ty, candidate)\n                     }\n \n-                    ty::ty_trait(self_did, _, RegionTraitStore(_), self_m, _) => {\n+                    ty::ty_trait(~ty::TyTrait {\n+                        def_id: self_did, store: RegionTraitStore(_), mutability: self_m, ..\n+                    }) => {\n                         mutability_matches(self_m, m) &&\n                         rcvr_matches_object(self_did, candidate)\n                     }\n@@ -1317,7 +1321,9 @@ impl<'a> LookupContext<'a> {\n                         rcvr_matches_ty(self.fcx, typ, candidate)\n                     }\n \n-                    ty::ty_trait(self_did, _, UniqTraitStore, _, _) => {\n+                    ty::ty_trait(~ty::TyTrait {\n+                        def_id: self_did, store: UniqTraitStore, ..\n+                    }) => {\n                         rcvr_matches_object(self_did, candidate)\n                     }\n "}, {"sha": "d7854ca4b73e1dfa23b240884e538d45774dd1b6", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -542,7 +542,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n             // explaining how it goes about doing that.\n             let target_ty = rcx.resolve_node_type(expr.id);\n             match ty::get(target_ty).sty {\n-                ty::ty_trait(_, _, ty::RegionTraitStore(trait_region), _, _) => {\n+                ty::ty_trait(~ty::TyTrait { store: ty::RegionTraitStore(trait_region), .. }) => {\n                     let source_ty = rcx.resolve_expr_type_adjusted(source);\n                     constrain_regions_in_type(\n                         rcx,"}, {"sha": "0fdcc8ba9f0b65291e635e23fd14f9478c032fe7", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -478,7 +478,7 @@ fn fixup_substs(vcx: &VtableContext,\n                          ty::EmptyBuiltinBounds());\n     fixup_ty(vcx, span, t, is_early).map(|t_f| {\n         match ty::get(t_f).sty {\n-          ty::ty_trait(_, ref substs_f, _, _, _) => (*substs_f).clone(),\n+          ty::ty_trait(ref inner) => inner.substs.clone(),\n           _ => fail!(\"t_f should be a trait\")\n         }\n     })\n@@ -536,8 +536,10 @@ pub fn early_resolve_expr(ex: &ast::Expr, fcx: &FnCtxt, is_early: bool) {\n     let resolve_object_cast = |src: &ast::Expr, target_ty: ty::t| {\n       match ty::get(target_ty).sty {\n           // Bounds of type's contents are not checked here, but in kind.rs.\n-          ty::ty_trait(target_def_id, ref target_substs, store,\n-                       target_mutbl, _bounds) => {\n+          ty::ty_trait(~ty::TyTrait {\n+              def_id: target_def_id, substs: ref target_substs, store: store,\n+              mutability: target_mutbl, bounds: _bounds\n+          }) => {\n               fn mutability_allowed(a_mutbl: ast::Mutability,\n                                     b_mutbl: ast::Mutability) -> bool {\n                   a_mutbl == b_mutbl ||"}, {"sha": "ac77ac20a7a73a0a4454c4793aef46bf70fc6e22", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -106,7 +106,7 @@ fn type_is_defined_in_local_crate(original_type: t) -> bool {\n     ty::walk_ty(original_type, |t| {\n         match get(t).sty {\n             ty_enum(def_id, _) |\n-            ty_trait(def_id, _, _, _, _) |\n+            ty_trait(~ty::TyTrait { def_id, .. }) |\n             ty_struct(def_id, _) => {\n                 if def_id.krate == ast::LOCAL_CRATE {\n                     found_nominal = true;\n@@ -132,7 +132,7 @@ fn get_base_type_def_id(inference_context: &InferCtxt,\n             match get(base_type).sty {\n                 ty_enum(def_id, _) |\n                 ty_struct(def_id, _) |\n-                ty_trait(def_id, _, _, _, _) => {\n+                ty_trait(~ty::TyTrait { def_id, .. }) => {\n                     return Some(def_id);\n                 }\n                 _ => {"}, {"sha": "53ab3d3419061eb92410f8d702e652d8cf51774a", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -131,7 +131,9 @@ impl<'f> Coerce<'f> {\n                 });\n             }\n \n-            ty::ty_trait(def_id, ref substs, ty::UniqTraitStore, m, bounds) => {\n+            ty::ty_trait(~ty::TyTrait {\n+                def_id, ref substs, store: ty::UniqTraitStore, mutability: m, bounds\n+            }) => {\n                 let result = self.unpack_actual_value(a, |sty_a| {\n                     match *sty_a {\n                         ty::ty_uniq(..) => {\n@@ -148,7 +150,9 @@ impl<'f> Coerce<'f> {\n                 }\n             }\n \n-            ty::ty_trait(def_id, ref substs, ty::RegionTraitStore(region), m, bounds) => {\n+            ty::ty_trait(~ty::TyTrait {\n+                def_id, ref substs, store: ty::RegionTraitStore(region), mutability: m, bounds\n+            }) => {\n                 let result = self.unpack_actual_value(a, |sty_a| {\n                     match *sty_a {\n                         ty::ty_rptr(..) => {\n@@ -313,9 +317,9 @@ impl<'f> Coerce<'f> {\n         let r_a = self.get_ref().infcx.next_region_var(Coercion(self.get_ref().trace));\n \n         let a_borrowed = match *sty_a {\n-            ty::ty_trait(did, ref substs, _, _, b) => {\n-                ty::mk_trait(tcx, did, substs.clone(),\n-                             ty::RegionTraitStore(r_a), b_mutbl, b)\n+            ty::ty_trait(~ty::TyTrait { def_id, ref substs, bounds, .. }) => {\n+                ty::mk_trait(tcx, def_id, substs.clone(),\n+                             ty::RegionTraitStore(r_a), b_mutbl, bounds)\n             }\n             _ => {\n                 return self.subtype(a, b);"}, {"sha": "b55d6be54fd26832207ccf32f589176981924d26", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -500,18 +500,18 @@ pub fn super_tys<C:Combine>(this: &C, a: ty::t, b: ty::t) -> cres<ty::t> {\n           Ok(ty::mk_enum(tcx, a_id, substs))\n       }\n \n-      (&ty::ty_trait(a_id, ref a_substs, a_store, a_mutbl, a_bounds),\n-       &ty::ty_trait(b_id, ref b_substs, b_store, b_mutbl, b_bounds))\n-      if a_id == b_id && a_mutbl == b_mutbl => {\n+      (&ty::ty_trait(ref a_),\n+       &ty::ty_trait(ref b_))\n+      if a_.def_id == b_.def_id && a_.mutability == b_.mutability => {\n           debug!(\"Trying to match traits {:?} and {:?}\", a, b);\n-          let substs = if_ok!(this.substs(a_id, a_substs, b_substs));\n-          let s = if_ok!(this.trait_stores(ty::terr_trait, a_store, b_store));\n-          let bounds = if_ok!(this.bounds(a_bounds, b_bounds));\n+          let substs = if_ok!(this.substs(a_.def_id, &a_.substs, &b_.substs));\n+          let s = if_ok!(this.trait_stores(ty::terr_trait, a_.store, b_.store));\n+          let bounds = if_ok!(this.bounds(a_.bounds, b_.bounds));\n           Ok(ty::mk_trait(tcx,\n-                          a_id,\n+                          a_.def_id,\n                           substs.clone(),\n                           s,\n-                          a_mutbl,\n+                          a_.mutability,\n                           bounds))\n       }\n "}, {"sha": "fc1970b09d422cfd32746ef2fbe7f9ec348bc6c4", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -719,7 +719,7 @@ impl<'a> InferCtxt<'a> {\n                                   ty::EmptyBuiltinBounds());\n         let dummy1 = self.resolve_type_vars_if_possible(dummy0);\n         match ty::get(dummy1).sty {\n-            ty::ty_trait(ref def_id, ref substs, _, _, _) => {\n+            ty::ty_trait(~ty::TyTrait { ref def_id, ref substs, .. }) => {\n                 ty::TraitRef {\n                     def_id: *def_id,\n                     substs: (*substs).clone(),\n@@ -976,4 +976,3 @@ impl Repr for RegionVariableOrigin {\n         }\n     }\n }\n-"}, {"sha": "8068ab1ae8ccb719c43f8aa14a94299b8155eff2", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -675,7 +675,7 @@ impl<'a> ConstraintContext<'a> {\n                                                  substs, variance);\n             }\n \n-            ty::ty_trait(def_id, ref substs, _, _, _) => {\n+            ty::ty_trait(~ty::TyTrait { def_id, ref substs, .. }) => {\n                 let trait_def = ty::lookup_trait_def(self.tcx(), def_id);\n                 self.add_constraints_from_substs(def_id, &trait_def.generics,\n                                                  substs, variance);"}, {"sha": "1fa204f526166c67ea9977fceda638c70bb4d192", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405b5fc1ee21cc6bc29f97719600bd94066dd58c/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=405b5fc1ee21cc6bc29f97719600bd94066dd58c", "patch": "@@ -484,7 +484,9 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> ~str {\n                       did,\n                       false)\n       }\n-      ty_trait(did, ref substs, s, mutbl, ref bounds) => {\n+      ty_trait(~ty::TyTrait {\n+          def_id: did, ref substs, store: s, mutability: mutbl, ref bounds\n+      }) => {\n         let base = ty::item_path_str(cx, did);\n         let ty = parameterized(cx, base, &substs.regions,\n                                substs.tps.as_slice(), did, true);"}]}