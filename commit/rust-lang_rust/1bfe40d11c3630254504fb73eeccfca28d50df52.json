{"sha": "1bfe40d11c3630254504fb73eeccfca28d50df52", "node_id": "C_kwDOAAsO6NoAKDFiZmU0MGQxMWMzNjMwMjU0NTA0ZmI3M2VlY2NmY2EyOGQ1MGRmNTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-18T14:50:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-18T14:50:29Z"}, "message": "Auto merge of #95068 - TaKO8Ki:use-create-snapshot-for-diagnostic, r=davidtwco\n\nUse `Parser.create_snapshot_for_diagnostic` instead of `Parser.clone()`\n\nUse [`create_snapshot_for_diagnostic`](https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler/rustc_parse/src/parser/diagnostics.rs#L214-L223) I implemented in https://github.com/rust-lang/rust/pull/94731 instead of `self.clone()` to avoid duplicate unclosed delims errors being emitted when the `Parser` is dropped.", "tree": {"sha": "54e8e543d73f051ddee3bb7f52ba8f955c8e6c36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54e8e543d73f051ddee3bb7f52ba8f955c8e6c36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bfe40d11c3630254504fb73eeccfca28d50df52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bfe40d11c3630254504fb73eeccfca28d50df52", "html_url": "https://github.com/rust-lang/rust/commit/1bfe40d11c3630254504fb73eeccfca28d50df52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bfe40d11c3630254504fb73eeccfca28d50df52/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8adf7685a4ddd16e985d34d9838a75a04ca4181", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8adf7685a4ddd16e985d34d9838a75a04ca4181", "html_url": "https://github.com/rust-lang/rust/commit/a8adf7685a4ddd16e985d34d9838a75a04ca4181"}, {"sha": "201a86046c3b08820c6b44b85c640c187d87756b", "url": "https://api.github.com/repos/rust-lang/rust/commits/201a86046c3b08820c6b44b85c640c187d87756b", "html_url": "https://github.com/rust-lang/rust/commit/201a86046c3b08820c6b44b85c640c187d87756b"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "a907f50a11bbff139c327e7684fe3ed115a4455a", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1bfe40d11c3630254504fb73eeccfca28d50df52/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfe40d11c3630254504fb73eeccfca28d50df52/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=1bfe40d11c3630254504fb73eeccfca28d50df52", "patch": "@@ -1,9 +1,10 @@\n+use super::diagnostics::SnapshotParser;\n use super::pat::{CommaRecoveryMode, RecoverColon, RecoverComma, PARAM_EXPECTED};\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{\n-    AttrWrapper, BlockMode, ClosureSpans, ForceCollect, Parser, PathStyle, Restrictions, TokenType,\n+    AttrWrapper, BlockMode, ClosureSpans, ForceCollect, Parser, PathStyle, Restrictions,\n+    SemiColonMode, SeqSep, TokenExpectType, TokenType, TrailingToken,\n };\n-use super::{SemiColonMode, SeqSep, TokenExpectType, TrailingToken};\n use crate::maybe_recover_from_interpolated_ty_qpath;\n \n use ast::token::DelimToken;\n@@ -1105,7 +1106,7 @@ impl<'a> Parser<'a> {\n         let snapshot = if self.token.kind == token::OpenDelim(token::Paren)\n             && self.look_ahead_type_ascription_as_field()\n         {\n-            Some((self.clone(), fun.kind.clone()))\n+            Some((self.create_snapshot_for_diagnostic(), fun.kind.clone()))\n         } else {\n             None\n         };\n@@ -1130,7 +1131,7 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         open_paren: Span,\n         seq: &mut PResult<'a, P<Expr>>,\n-        snapshot: Option<(Self, ExprKind)>,\n+        snapshot: Option<(SnapshotParser<'a>, ExprKind)>,\n     ) -> Option<P<Expr>> {\n         match (seq.as_mut(), snapshot) {\n             (Err(err), Some((mut snapshot, ExprKind::Path(None, path)))) => {\n@@ -1140,7 +1141,7 @@ impl<'a> Parser<'a> {\n                     Ok((fields, ..)) if snapshot.eat(&token::CloseDelim(token::Paren)) => {\n                         // We are certain we have `Enum::Foo(a: 3, b: 4)`, suggest\n                         // `Enum::Foo { a: 3, b: 4 }` or `Enum::Foo(3, 4)`.\n-                        *self = snapshot;\n+                        self.restore_snapshot(snapshot);\n                         let close_paren = self.prev_token.span;\n                         let span = lo.to(self.prev_token.span);\n                         if !fields.is_empty() {"}]}