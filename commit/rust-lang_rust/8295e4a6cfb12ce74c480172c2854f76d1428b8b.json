{"sha": "8295e4a6cfb12ce74c480172c2854f76d1428b8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOTVlNGE2Y2ZiMTJjZTc0YzQ4MDE3MmMyODU0Zjc2ZDE0MjhiOGI=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-09-09T14:43:59Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-09-09T14:44:04Z"}, "message": "add test for builtin types N + N unifying with fn call", "tree": {"sha": "4577608d5929b102fc6e35c68811cc4317803715", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4577608d5929b102fc6e35c68811cc4317803715"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8295e4a6cfb12ce74c480172c2854f76d1428b8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8295e4a6cfb12ce74c480172c2854f76d1428b8b", "html_url": "https://github.com/rust-lang/rust/commit/8295e4a6cfb12ce74c480172c2854f76d1428b8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8295e4a6cfb12ce74c480172c2854f76d1428b8b/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd9bb30ab8fc65da735272f9cfd55d1368da9069", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd9bb30ab8fc65da735272f9cfd55d1368da9069", "html_url": "https://github.com/rust-lang/rust/commit/fd9bb30ab8fc65da735272f9cfd55d1368da9069"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "97c0bca5d911c4a4cbe1ca2ac08b45e086b85985", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8295e4a6cfb12ce74c480172c2854f76d1428b8b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8295e4a6cfb12ce74c480172c2854f76d1428b8b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=8295e4a6cfb12ce74c480172c2854f76d1428b8b", "patch": "@@ -1305,7 +1305,7 @@ impl EncodeContext<'a, 'tcx> {\n             if encode_const {\n                 record!(self.tables.mir_for_ctfe[def_id.to_def_id()] <- self.tcx.mir_for_ctfe(def_id));\n \n-                // FIXME this feels wrong to have in `encode_mir`\n+                // FIXME(generic_const_exprs): this feels wrong to have in `encode_mir`\n                 let abstract_const = self.tcx.thir_abstract_const(def_id);\n                 if let Ok(Some(abstract_const)) = abstract_const {\n                     record!(self.tables.thir_abstract_consts[def_id.to_def_id()] <- abstract_const);"}, {"sha": "24fa5007f1ecdc446f528a307edd28f11ec0efd7", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8295e4a6cfb12ce74c480172c2854f76d1428b8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8295e4a6cfb12ce74c480172c2854f76d1428b8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=8295e4a6cfb12ce74c480172c2854f76d1428b8b", "patch": "@@ -267,10 +267,16 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n \n             fn visit_expr(&mut self, expr: &thir::Expr<'tcx>) {\n                 self.is_poly |= expr.ty.definitely_has_param_types_or_consts(self.tcx);\n-                if self.is_poly {\n-                    return;\n+                if self.is_poly == false {\n+                    visit::walk_expr(self, expr)\n+                }\n+            }\n+\n+            fn visit_pat(&mut self, pat: &thir::Pat<'tcx>) {\n+                self.is_poly |= pat.ty.definitely_has_param_types_or_consts(self.tcx);\n+                if self.is_poly == false {\n+                    visit::walk_pat(self, pat);\n                 }\n-                visit::walk_expr(self, expr);\n             }\n \n             fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) {\n@@ -280,6 +286,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n \n         let mut is_poly_vis = IsThirPolymorphic { is_poly: false, thir: body, tcx };\n         visit::walk_expr(&mut is_poly_vis, &body[body_id]);\n+        debug!(\"AbstractConstBuilder: is_poly={}\", is_poly_vis.is_poly);\n         if is_poly_vis.is_poly == false {\n             return Ok(None);\n         }"}, {"sha": "c0404d35b08879d5ae9ddb009f38e0b3d1a9b0ce", "filename": "src/test/ui/const-generics/generic_const_exprs/unify-op-with-fn-call.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8295e4a6cfb12ce74c480172c2854f76d1428b8b/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funify-op-with-fn-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8295e4a6cfb12ce74c480172c2854f76d1428b8b/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funify-op-with-fn-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funify-op-with-fn-call.rs?ref=8295e4a6cfb12ce74c480172c2854f76d1428b8b", "patch": "@@ -1,7 +1,7 @@\n-// check-pass\n #![feature(generic_const_exprs, adt_const_params, const_trait_impl)]\n #![allow(incomplete_features)]\n \n+// test `N + N` unifies with explicit function calls for non-builtin-types\n #[derive(PartialEq, Eq)]\n struct Foo(u8);\n \n@@ -21,4 +21,15 @@ fn foo<const N: Foo>(a: Evaluatable<{ N + N }>) {\n \n fn bar<const N: Foo>() {}\n \n+// test that `N + N` unifies with explicit function calls for builin-types\n+struct Evaluatable2<const N: usize>;\n+\n+fn foo2<const N: usize>(a: Evaluatable2<{ N + N }>) {\n+    bar2::<{ std::ops::Add::add(N, N) }>();\n+    //~^ error: unconstrained generic constant\n+    // FIXME(generic_const_exprs) make this not an error\n+}\n+\n+fn bar2<const N: usize>() {}\n+\n fn main() {}"}, {"sha": "d18c7916f5f6f3336f611ddb4755db2b308583a7", "filename": "src/test/ui/const-generics/generic_const_exprs/unify-op-with-fn-call.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8295e4a6cfb12ce74c480172c2854f76d1428b8b/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funify-op-with-fn-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8295e4a6cfb12ce74c480172c2854f76d1428b8b/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funify-op-with-fn-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funify-op-with-fn-call.stderr?ref=8295e4a6cfb12ce74c480172c2854f76d1428b8b", "patch": "@@ -0,0 +1,10 @@\n+error: unconstrained generic constant\n+  --> $DIR/unify-op-with-fn-call.rs:28:12\n+   |\n+LL |     bar2::<{ std::ops::Add::add(N, N) }>();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { std::ops::Add::add(N, N) }]:`\n+\n+error: aborting due to previous error\n+"}]}