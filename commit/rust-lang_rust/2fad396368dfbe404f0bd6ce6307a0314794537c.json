{"sha": "2fad396368dfbe404f0bd6ce6307a0314794537c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYWQzOTYzNjhkZmJlNDA0ZjBiZDZjZTYzMDdhMDMxNDc5NDUzN2M=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-18T23:50:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-18T23:50:59Z"}, "message": "Rollup merge of #74459 - canova:const-unreachable-unchecked, r=oli-obk\n\nMake unreachable_unchecked a const fn\n\nThis PR makes `std::hint::unreachable_unchecked` a const fn so we can use it inside a const function.\nr? @RalfJung\nFixes #53188.", "tree": {"sha": "da077af6b53e4264b80f5f71f092d3304025dcdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da077af6b53e4264b80f5f71f092d3304025dcdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fad396368dfbe404f0bd6ce6307a0314794537c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfE4rjCRBK7hj4Ov3rIwAAdHIIAFpV2IkozRqhNV9OsOIj84Vt\nlGMwmgZrEpRrTEcrBv9lmzwBLr/oTg5SPHmDlYmWphCOO1kbQUsF/BpLjGvHKsR5\ntTAt+HhTxZJAa9njK4cYl1HZtUcB8SXFhJqTvH9elQ7IOND2qQIE6IRVLQm2QcLO\n2Stur5Ztmxd0Xj8seHfR9ZZ8g1dAesPHDuj50GZAgK5lYFZV4V9F6qJO7ubcR9zF\n41XzlUngR1coHzD2MmjizwmNLgjEcoC/U0Um+yIyVmQu88dC4p3Q6sXVJTSsV9mS\n6tdWELc3DKr/+zQq7VI6XJa067zfDCpURRWuf4Ixy+fipbbqXT95snKfiwNdqIw=\n=GFqq\n-----END PGP SIGNATURE-----\n", "payload": "tree da077af6b53e4264b80f5f71f092d3304025dcdb\nparent 1a54b61e39b2c5d383da622d3d390bcda32f6b3c\nparent 6cd164f49e6f9c2b914fa5d55755d78e3fabbc27\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595116259 -0700\ncommitter GitHub <noreply@github.com> 1595116259 -0700\n\nRollup merge of #74459 - canova:const-unreachable-unchecked, r=oli-obk\n\nMake unreachable_unchecked a const fn\n\nThis PR makes `std::hint::unreachable_unchecked` a const fn so we can use it inside a const function.\nr? @RalfJung\nFixes #53188.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fad396368dfbe404f0bd6ce6307a0314794537c", "html_url": "https://github.com/rust-lang/rust/commit/2fad396368dfbe404f0bd6ce6307a0314794537c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fad396368dfbe404f0bd6ce6307a0314794537c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a54b61e39b2c5d383da622d3d390bcda32f6b3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a54b61e39b2c5d383da622d3d390bcda32f6b3c", "html_url": "https://github.com/rust-lang/rust/commit/1a54b61e39b2c5d383da622d3d390bcda32f6b3c"}, {"sha": "6cd164f49e6f9c2b914fa5d55755d78e3fabbc27", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cd164f49e6f9c2b914fa5d55755d78e3fabbc27", "html_url": "https://github.com/rust-lang/rust/commit/6cd164f49e6f9c2b914fa5d55755d78e3fabbc27"}], "stats": {"total": 87, "additions": 86, "deletions": 1}, "files": [{"sha": "3116815f5d655a03461d6cfbc19f19a056aa78ec", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fad396368dfbe404f0bd6ce6307a0314794537c/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fad396368dfbe404f0bd6ce6307a0314794537c/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=2fad396368dfbe404f0bd6ce6307a0314794537c", "patch": "@@ -45,7 +45,8 @@ use crate::intrinsics;\n /// ```\n #[inline]\n #[stable(feature = \"unreachable\", since = \"1.27.0\")]\n-pub unsafe fn unreachable_unchecked() -> ! {\n+#[rustc_const_unstable(feature = \"const_unreachable_unchecked\", issue = \"53188\")]\n+pub const unsafe fn unreachable_unchecked() -> ! {\n     // SAFETY: the safety contract for `intrinsics::unreachable` must\n     // be upheld by the caller.\n     unsafe { intrinsics::unreachable() }"}, {"sha": "8f0cf4361e708c87b6d9fee3ce184897a83e7e52", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fad396368dfbe404f0bd6ce6307a0314794537c/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fad396368dfbe404f0bd6ce6307a0314794537c/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=2fad396368dfbe404f0bd6ce6307a0314794537c", "patch": "@@ -932,6 +932,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::hint::unreachable_unchecked`](../../std/hint/fn.unreachable_unchecked.html).\n+    #[rustc_const_unstable(feature = \"const_unreachable_unchecked\", issue = \"53188\")]\n     pub fn unreachable() -> !;\n \n     /// Informs the optimizer that a condition is always true."}, {"sha": "2e443064706d239117b7890ee3f74ff07daaa3bd", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fad396368dfbe404f0bd6ce6307a0314794537c/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fad396368dfbe404f0bd6ce6307a0314794537c/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=2fad396368dfbe404f0bd6ce6307a0314794537c", "patch": "@@ -92,6 +92,7 @@\n #![feature(const_slice_ptr_len)]\n #![feature(const_type_name)]\n #![feature(const_likely)]\n+#![feature(const_unreachable_unchecked)]\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]"}, {"sha": "5836fc9c95a80af6cb330c332a4446f3094665e6", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fad396368dfbe404f0bd6ce6307a0314794537c/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fad396368dfbe404f0bd6ce6307a0314794537c/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=2fad396368dfbe404f0bd6ce6307a0314794537c", "patch": "@@ -95,6 +95,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let (dest, ret) = match ret {\n             None => match intrinsic_name {\n                 sym::transmute => throw_ub_format!(\"transmuting to uninhabited type\"),\n+                sym::unreachable => throw_ub!(Unreachable),\n                 sym::abort => M::abort(self)?,\n                 // Unsupported diverging intrinsic.\n                 _ => return Ok(false),"}, {"sha": "cfed6e5deb99956864ba0a861a01cb0520e0b366", "filename": "src/test/ui/consts/const_unsafe_unreachable.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2fad396368dfbe404f0bd6ce6307a0314794537c/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fad396368dfbe404f0bd6ce6307a0314794537c/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable.rs?ref=2fad396368dfbe404f0bd6ce6307a0314794537c", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+\n+#![feature(const_fn)]\n+#![feature(const_unreachable_unchecked)]\n+\n+const unsafe fn foo(x: bool) -> bool {\n+    match x {\n+        true => true,\n+        false => std::hint::unreachable_unchecked(),\n+    }\n+}\n+\n+const BAR: bool = unsafe { foo(true) };\n+\n+fn main() {\n+  assert_eq!(BAR, true);\n+}"}, {"sha": "11920d852e02feaffc2c6d0d8c05f06399084d3a", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2fad396368dfbe404f0bd6ce6307a0314794537c/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fad396368dfbe404f0bd6ce6307a0314794537c/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs?ref=2fad396368dfbe404f0bd6ce6307a0314794537c", "patch": "@@ -0,0 +1,20 @@\n+// build-fail\n+\n+#![feature(const_fn)]\n+#![feature(const_unreachable_unchecked)]\n+\n+const unsafe fn foo(x: bool) -> bool {\n+    match x {\n+        true => true,\n+        false => std::hint::unreachable_unchecked(),\n+    }\n+}\n+\n+#[warn(const_err)]\n+const BAR: bool = unsafe { foo(false) };\n+\n+fn main() {\n+  assert_eq!(BAR, true);\n+  //~^ ERROR E0080\n+  //~| ERROR erroneous constant\n+}"}, {"sha": "3ef8043a54d8877d503e9e8be65a55ef26223d31", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2fad396368dfbe404f0bd6ce6307a0314794537c/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fad396368dfbe404f0bd6ce6307a0314794537c/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr?ref=2fad396368dfbe404f0bd6ce6307a0314794537c", "patch": "@@ -0,0 +1,44 @@\n+warning: any use of this value will cause an error\n+  --> $SRC_DIR/libcore/hint.rs:LL:COL\n+   |\n+LL |     unsafe { intrinsics::unreachable() }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              entering unreachable code\n+   |              inside `std::hint::unreachable_unchecked` at $SRC_DIR/libcore/hint.rs:LL:COL\n+   |              inside `foo` at $DIR/const_unsafe_unreachable_ub.rs:9:18\n+   |              inside `BAR` at $DIR/const_unsafe_unreachable_ub.rs:14:28\n+   | \n+  ::: $DIR/const_unsafe_unreachable_ub.rs:14:1\n+   |\n+LL | const BAR: bool = unsafe { foo(false) };\n+   | ----------------------------------------\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_unsafe_unreachable_ub.rs:13:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/const_unsafe_unreachable_ub.rs:17:3\n+   |\n+LL |   assert_eq!(BAR, true);\n+   |   ^^^^^^^^^^^---^^^^^^^^\n+   |              |\n+   |              referenced constant has errors\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: erroneous constant used\n+  --> $DIR/const_unsafe_unreachable_ub.rs:17:3\n+   |\n+LL |   assert_eq!(BAR, true);\n+   |   ^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0080`."}]}