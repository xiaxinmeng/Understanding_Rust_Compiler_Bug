{"sha": "5b3bc29008643203b4de3ffb4c5b5141039c88e6", "node_id": "C_kwDOAAsO6NoAKDViM2JjMjkwMDg2NDMyMDNiNGRlM2ZmYjRjNWI1MTQxMDM5Yzg4ZTY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-15T19:32:58Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-24T17:27:28Z"}, "message": "Allow testing a cranelift backend built into rustc itself\n\nThis avoids building cranelift twice in rust's CI and is a lot easier\nthan trying to make building of codegen backends work from within a\ncargo invocation done by rust's build system.", "tree": {"sha": "cf38b1cae2bd4bf788e11afa1d42b521fb071e6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf38b1cae2bd4bf788e11afa1d42b521fb071e6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b3bc29008643203b4de3ffb4c5b5141039c88e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3bc29008643203b4de3ffb4c5b5141039c88e6", "html_url": "https://github.com/rust-lang/rust/commit/5b3bc29008643203b4de3ffb4c5b5141039c88e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b3bc29008643203b4de3ffb4c5b5141039c88e6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c87dfd9c9d0ccd4bc7465744039a7f222ba8e614", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87dfd9c9d0ccd4bc7465744039a7f222ba8e614", "html_url": "https://github.com/rust-lang/rust/commit/c87dfd9c9d0ccd4bc7465744039a7f222ba8e614"}], "stats": {"total": 149, "additions": 101, "deletions": 48}, "files": [{"sha": "9634430d1168d37f35bdd36f20ecc7993955811a", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b3bc29008643203b4de3ffb4c5b5141039c88e6/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3bc29008643203b4de3ffb4c5b5141039c88e6/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=5b3bc29008643203b4de3ffb4c5b5141039c88e6", "patch": "@@ -1,10 +1,8 @@\n-use std::path::Path;\n-\n use super::build_sysroot;\n use super::path::Dirs;\n use super::prepare::GitRepo;\n use super::utils::{spawn_and_wait, CargoProject, Compiler};\n-use super::SysrootKind;\n+use super::{CodegenBackend, SysrootKind};\n \n static ABI_CAFE_REPO: GitRepo =\n     GitRepo::github(\"Gankra\", \"abi-cafe\", \"4c6dc8c9c687e2b3a760ff2176ce236872b37212\", \"abi-cafe\");\n@@ -15,7 +13,7 @@ pub(crate) fn run(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     dirs: &Dirs,\n-    cg_clif_dylib: &Path,\n+    cg_clif_dylib: &CodegenBackend,\n     rustup_toolchain_name: Option<&str>,\n     bootstrap_host_compiler: &Compiler,\n ) {\n@@ -41,7 +39,14 @@ pub(crate) fn run(\n     cmd.arg(\"--pairs\");\n     cmd.args(pairs);\n     cmd.arg(\"--add-rustc-codegen-backend\");\n-    cmd.arg(format!(\"cgclif:{}\", cg_clif_dylib.display()));\n+    match cg_clif_dylib {\n+        CodegenBackend::Local(path) => {\n+            cmd.arg(format!(\"cgclif:{}\", path.display()));\n+        }\n+        CodegenBackend::Builtin(name) => {\n+            cmd.arg(format!(\"cgclif:{name}\"));\n+        }\n+    }\n     cmd.current_dir(ABI_CAFE.source_dir(dirs));\n \n     spawn_and_wait(cmd);"}, {"sha": "dab9c77d1a42218d6f0916c61f74ad7346a00c55", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5b3bc29008643203b4de3ffb4c5b5141039c88e6/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3bc29008643203b4de3ffb4c5b5141039c88e6/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=5b3bc29008643203b4de3ffb4c5b5141039c88e6", "patch": "@@ -5,7 +5,7 @@ use std::process::{self, Command};\n use super::path::{Dirs, RelPath};\n use super::rustc_info::{get_file_name, get_rustc_version};\n use super::utils::{remove_dir_if_exists, spawn_and_wait, try_hard_link, CargoProject, Compiler};\n-use super::SysrootKind;\n+use super::{CodegenBackend, SysrootKind};\n \n static DIST_DIR: RelPath = RelPath::DIST;\n static BIN_DIR: RelPath = RelPath::DIST.join(\"bin\");\n@@ -15,7 +15,7 @@ pub(crate) fn build_sysroot(\n     dirs: &Dirs,\n     channel: &str,\n     sysroot_kind: SysrootKind,\n-    cg_clif_dylib_src: &Path,\n+    cg_clif_dylib_src: &CodegenBackend,\n     bootstrap_host_compiler: &Compiler,\n     rustup_toolchain_name: Option<&str>,\n     target_triple: String,\n@@ -28,17 +28,23 @@ pub(crate) fn build_sysroot(\n \n     let is_native = bootstrap_host_compiler.triple == target_triple;\n \n-    // Copy the backend\n-    let cg_clif_dylib_path = if cfg!(windows) {\n-        // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n-        // binaries.\n-        BIN_DIR\n-    } else {\n-        LIB_DIR\n-    }\n-    .to_path(dirs)\n-    .join(cg_clif_dylib_src.file_name().unwrap());\n-    try_hard_link(cg_clif_dylib_src, &cg_clif_dylib_path);\n+    let cg_clif_dylib_path = match cg_clif_dylib_src {\n+        CodegenBackend::Local(src_path) => {\n+            // Copy the backend\n+            let cg_clif_dylib_path = if cfg!(windows) {\n+                // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n+                // binaries.\n+                BIN_DIR\n+            } else {\n+                LIB_DIR\n+            }\n+            .to_path(dirs)\n+            .join(src_path.file_name().unwrap());\n+            try_hard_link(src_path, &cg_clif_dylib_path);\n+            CodegenBackend::Local(cg_clif_dylib_path)\n+        }\n+        CodegenBackend::Builtin(name) => CodegenBackend::Builtin(name.clone()),\n+    };\n \n     // Build and copy rustc and cargo wrappers\n     let wrapper_base_name = get_file_name(&bootstrap_host_compiler.rustc, \"____\", \"bin\");\n@@ -65,6 +71,9 @@ pub(crate) fn build_sysroot(\n                 .env(\"RUSTC\", &bootstrap_host_compiler.rustc)\n                 .env(\"RUSTDOC\", &bootstrap_host_compiler.rustdoc);\n         }\n+        if let CodegenBackend::Builtin(name) = cg_clif_dylib_src {\n+            build_cargo_wrapper_cmd.env(\"BUILTIN_BACKEND\", name);\n+        }\n         spawn_and_wait(build_cargo_wrapper_cmd);\n         try_hard_link(wrapper_path, BIN_DIR.to_path(dirs).join(wrapper_name));\n     }\n@@ -159,15 +168,15 @@ fn build_sysroot_for_triple(\n     dirs: &Dirs,\n     channel: &str,\n     compiler: Compiler,\n-    cg_clif_dylib_path: &Path,\n+    cg_clif_dylib_path: &CodegenBackend,\n     sysroot_kind: SysrootKind,\n ) -> SysrootTarget {\n     match sysroot_kind {\n         SysrootKind::None => build_rtstartup(dirs, &compiler)\n             .unwrap_or(SysrootTarget { triple: compiler.triple, libs: vec![] }),\n         SysrootKind::Llvm => build_llvm_sysroot_for_triple(compiler),\n         SysrootKind::Clif => {\n-            build_clif_sysroot_for_triple(dirs, channel, compiler, &cg_clif_dylib_path)\n+            build_clif_sysroot_for_triple(dirs, channel, compiler, cg_clif_dylib_path)\n         }\n     }\n }\n@@ -211,7 +220,7 @@ fn build_clif_sysroot_for_triple(\n     dirs: &Dirs,\n     channel: &str,\n     mut compiler: Compiler,\n-    cg_clif_dylib_path: &Path,\n+    cg_clif_dylib_path: &CodegenBackend,\n ) -> SysrootTarget {\n     match fs::read_to_string(SYSROOT_RUSTC_VERSION.to_path(dirs)) {\n         Err(e) => {\n@@ -249,7 +258,14 @@ fn build_clif_sysroot_for_triple(\n \n     // Build sysroot\n     let mut rustflags = \" -Zforce-unstable-if-unmarked -Cpanic=abort\".to_string();\n-    rustflags.push_str(&format!(\" -Zcodegen-backend={}\", cg_clif_dylib_path.to_str().unwrap()));\n+    match cg_clif_dylib_path {\n+        CodegenBackend::Local(path) => {\n+            rustflags.push_str(&format!(\" -Zcodegen-backend={}\", path.to_str().unwrap()));\n+        }\n+        CodegenBackend::Builtin(name) => {\n+            rustflags.push_str(&format!(\" -Zcodegen-backend={name}\"));\n+        }\n+    };\n     // Necessary for MinGW to find rsbegin.o and rsend.o\n     rustflags\n         .push_str(&format!(\" --sysroot {}\", RTSTARTUP_SYSROOT.to_path(dirs).to_str().unwrap()));"}, {"sha": "2ca5316408e563e4f29ecebea08a5b330d3ccde7", "filename": "build_system/mod.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5b3bc29008643203b4de3ffb4c5b5141039c88e6/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3bc29008643203b4de3ffb4c5b5141039c88e6/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=5b3bc29008643203b4de3ffb4c5b5141039c88e6", "patch": "@@ -43,6 +43,12 @@ pub(crate) enum SysrootKind {\n     Llvm,\n }\n \n+#[derive(Clone, Debug)]\n+pub(crate) enum CodegenBackend {\n+    Local(PathBuf),\n+    Builtin(String),\n+}\n+\n pub(crate) fn main() {\n     if env::var(\"RUST_BACKTRACE\").is_err() {\n         env::set_var(\"RUST_BACKTRACE\", \"1\");\n@@ -79,6 +85,7 @@ pub(crate) fn main() {\n     let mut sysroot_kind = SysrootKind::Clif;\n     let mut use_unstable_features = true;\n     let mut frozen = false;\n+    let mut use_backend = None;\n     while let Some(arg) = args.next().as_deref() {\n         match arg {\n             \"--out-dir\" => {\n@@ -98,6 +105,12 @@ pub(crate) fn main() {\n             }\n             \"--no-unstable-features\" => use_unstable_features = false,\n             \"--frozen\" => frozen = true,\n+            \"--use-backend\" => {\n+                use_backend = Some(match args.next() {\n+                    Some(name) => name,\n+                    None => arg_error!(\"--use-backend requires argument\"),\n+                });\n+            }\n             flag if flag.starts_with(\"-\") => arg_error!(\"Unknown flag {}\", flag),\n             arg => arg_error!(\"Unexpected argument {}\", arg),\n         }\n@@ -164,12 +177,16 @@ pub(crate) fn main() {\n     env::set_var(\"RUSTC\", \"rustc_should_be_set_explicitly\");\n     env::set_var(\"RUSTDOC\", \"rustdoc_should_be_set_explicitly\");\n \n-    let cg_clif_dylib = build_backend::build_backend(\n-        &dirs,\n-        channel,\n-        &bootstrap_host_compiler,\n-        use_unstable_features,\n-    );\n+    let cg_clif_dylib = if let Some(name) = use_backend {\n+        CodegenBackend::Builtin(name)\n+    } else {\n+        CodegenBackend::Local(build_backend::build_backend(\n+            &dirs,\n+            channel,\n+            &bootstrap_host_compiler,\n+            use_unstable_features,\n+        ))\n+    };\n     match command {\n         Command::Prepare => {\n             // Handled above"}, {"sha": "13bf9c70c3e162f2f5b62caec70c8b61bbdfbee3", "filename": "build_system/tests.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b3bc29008643203b4de3ffb4c5b5141039c88e6/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3bc29008643203b4de3ffb4c5b5141039c88e6/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=5b3bc29008643203b4de3ffb4c5b5141039c88e6", "patch": "@@ -3,11 +3,10 @@ use super::config;\n use super::path::{Dirs, RelPath};\n use super::prepare::GitRepo;\n use super::utils::{spawn_and_wait, spawn_and_wait_with_input, CargoProject, Compiler};\n-use super::SysrootKind;\n+use super::{CodegenBackend, SysrootKind};\n use std::env;\n use std::ffi::OsStr;\n use std::fs;\n-use std::path::Path;\n use std::process::Command;\n \n static BUILD_EXAMPLE_OUT_DIR: RelPath = RelPath::BUILD.join(\"example\");\n@@ -215,7 +214,7 @@ pub(crate) fn run_tests(\n     dirs: &Dirs,\n     channel: &str,\n     sysroot_kind: SysrootKind,\n-    cg_clif_dylib: &Path,\n+    cg_clif_dylib: &CodegenBackend,\n     bootstrap_host_compiler: &Compiler,\n     rustup_toolchain_name: Option<&str>,\n     target_triple: String,"}, {"sha": "3bc18a933311cfc9aa53d8264ca0e6b471a414e1", "filename": "build_system/usage.txt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b3bc29008643203b4de3ffb4c5b5141039c88e6/build_system%2Fusage.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b3bc29008643203b4de3ffb4c5b5141039c88e6/build_system%2Fusage.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fusage.txt?ref=5b3bc29008643203b4de3ffb4c5b5141039c88e6", "patch": "@@ -29,6 +29,10 @@ OPTIONS:\n     --frozen\n             Require Cargo.lock and cache are up to date\n \n+    --use-backend NAME\n+            Use the existing Cranelift (or other) backend of the rustc with which we built.\n+            Warning: This is meant for use in rust's CI only!\n+\n REQUIREMENTS:\n     * Rustup: By default rustup is used to install the right nightly version. If you don't want to\n       use rustup, you can manually install the nightly version indicated by rust-toolchain.toml and"}, {"sha": "99b97be24e69b23f957ef001d439ebbea830d889", "filename": "scripts/cargo-clif.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5b3bc29008643203b4de3ffb4c5b5141039c88e6/scripts%2Fcargo-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3bc29008643203b4de3ffb4c5b5141039c88e6/scripts%2Fcargo-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fcargo-clif.rs?ref=5b3bc29008643203b4de3ffb4c5b5141039c88e6", "patch": "@@ -12,17 +12,21 @@ fn main() {\n \n     let mut rustflags = String::new();\n     rustflags.push_str(\" -Cpanic=abort -Zpanic-abort-tests -Zcodegen-backend=\");\n-    rustflags.push_str(\n-        sysroot\n-            .join(if cfg!(windows) { \"bin\" } else { \"lib\" })\n-            .join(\n-                env::consts::DLL_PREFIX.to_string()\n-                    + \"rustc_codegen_cranelift\"\n-                    + env::consts::DLL_SUFFIX,\n-            )\n-            .to_str()\n-            .unwrap(),\n-    );\n+    if let Some(name) = option_env!(\"BUILTIN_BACKEND\") {\n+        rustflags.push_str(name);\n+    } else {\n+        rustflags.push_str(\n+            sysroot\n+                .join(if cfg!(windows) { \"bin\" } else { \"lib\" })\n+                .join(\n+                    env::consts::DLL_PREFIX.to_string()\n+                        + \"rustc_codegen_cranelift\"\n+                        + env::consts::DLL_SUFFIX,\n+                )\n+                .to_str()\n+                .unwrap(),\n+        );\n+    }\n     rustflags.push_str(\" --sysroot \");\n     rustflags.push_str(sysroot.to_str().unwrap());\n     env::set_var(\"RUSTFLAGS\", env::var(\"RUSTFLAGS\").unwrap_or(String::new()) + &rustflags);"}, {"sha": "33d51bdddeaf9abb998d482a7d399915ece0e7e8", "filename": "scripts/rustc-clif.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b3bc29008643203b4de3ffb4c5b5141039c88e6/scripts%2Frustc-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3bc29008643203b4de3ffb4c5b5141039c88e6/scripts%2Frustc-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Frustc-clif.rs?ref=5b3bc29008643203b4de3ffb4c5b5141039c88e6", "patch": "@@ -19,9 +19,13 @@ fn main() {\n     let mut args = vec![];\n     args.push(OsString::from(\"-Cpanic=abort\"));\n     args.push(OsString::from(\"-Zpanic-abort-tests\"));\n-    let mut codegen_backend_arg = OsString::from(\"-Zcodegen-backend=\");\n-    codegen_backend_arg.push(cg_clif_dylib_path);\n-    args.push(codegen_backend_arg);\n+    if let Some(name) = option_env!(\"BUILTIN_BACKEND\") {\n+        args.push(OsString::from(format!(\"-Zcodegen-backend={name}\")))\n+    } else {\n+        let mut codegen_backend_arg = OsString::from(\"-Zcodegen-backend=\");\n+        codegen_backend_arg.push(cg_clif_dylib_path);\n+        args.push(codegen_backend_arg);\n+    }\n     if !passed_args.iter().any(|arg| {\n         arg == \"--sysroot\" || arg.to_str().map(|s| s.starts_with(\"--sysroot=\")) == Some(true)\n     }) {"}, {"sha": "10582cc7bb32070bf3d7bc065147255cbeff3736", "filename": "scripts/rustdoc-clif.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b3bc29008643203b4de3ffb4c5b5141039c88e6/scripts%2Frustdoc-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3bc29008643203b4de3ffb4c5b5141039c88e6/scripts%2Frustdoc-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Frustdoc-clif.rs?ref=5b3bc29008643203b4de3ffb4c5b5141039c88e6", "patch": "@@ -19,9 +19,13 @@ fn main() {\n     let mut args = vec![];\n     args.push(OsString::from(\"-Cpanic=abort\"));\n     args.push(OsString::from(\"-Zpanic-abort-tests\"));\n-    let mut codegen_backend_arg = OsString::from(\"-Zcodegen-backend=\");\n-    codegen_backend_arg.push(cg_clif_dylib_path);\n-    args.push(codegen_backend_arg);\n+    if let Some(name) = option_env!(\"BUILTIN_BACKEND\") {\n+        args.push(OsString::from(format!(\"-Zcodegen-backend={name}\")))\n+    } else {\n+        let mut codegen_backend_arg = OsString::from(\"-Zcodegen-backend=\");\n+        codegen_backend_arg.push(cg_clif_dylib_path);\n+        args.push(codegen_backend_arg);\n+    }\n     if !passed_args.iter().any(|arg| {\n         arg == \"--sysroot\" || arg.to_str().map(|s| s.starts_with(\"--sysroot=\")) == Some(true)\n     }) {"}]}