{"sha": "9a72ded562b2c8b78478550d4df09d1499a3dae1", "node_id": "C_kwDOAAsO6NoAKDlhNzJkZWQ1NjJiMmM4Yjc4NDc4NTUwZDRkZjA5ZDE0OTlhM2RhZTE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-09-16T11:07:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-16T11:07:18Z"}, "message": "Rollup merge of #101859 - Rageking8:slight-vertical-formatting, r=compiler-errors\n\nSlight vertical formatting", "tree": {"sha": "295f324a016930eae26002cade3cb31aee36c527", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/295f324a016930eae26002cade3cb31aee36c527"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a72ded562b2c8b78478550d4df09d1499a3dae1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjJFjmCRBK7hj4Ov3rIwAAUyAIAKR5z9Z458h+/CoUjRFAMpY1\nwPYO5QdqesE6KvbbM30hon65MauyZl7tLWPNsJdclQTyOXH/0cMVscaaa6GjrhUS\nbF5jxpAr9SoBnAW0PipNi4vPFupedO0gj3iKEEWhpY0uL19msdurylErKL492fX4\nuXXKYH5PnN5Or3hRG/jptsUPBENZMnDzbqTm8Tr2AfwtGYLWn4vLSdsLaQrln4tq\nWoMdkzDahlbKXzqyjzwdMfcoLZHPlPek9zbKdCI0kaQ+Y9neMK/lWE46fDl2eneA\nsmMKUpSnBFrCJo/Vp8RGwN4nf8J2GcwWjKn/BGXyFQipDwnp2PJIIdhcM8R2Gyg=\n=wQT/\n-----END PGP SIGNATURE-----\n", "payload": "tree 295f324a016930eae26002cade3cb31aee36c527\nparent 72d9e0821ede883d0a7a340cdb784b4b5977f41a\nparent 6d7beafc87e7cd8806987c5203e52bc3b8c458fa\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1663326438 +0200\ncommitter GitHub <noreply@github.com> 1663326438 +0200\n\nRollup merge of #101859 - Rageking8:slight-vertical-formatting, r=compiler-errors\n\nSlight vertical formatting\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a72ded562b2c8b78478550d4df09d1499a3dae1", "html_url": "https://github.com/rust-lang/rust/commit/9a72ded562b2c8b78478550d4df09d1499a3dae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a72ded562b2c8b78478550d4df09d1499a3dae1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72d9e0821ede883d0a7a340cdb784b4b5977f41a", "url": "https://api.github.com/repos/rust-lang/rust/commits/72d9e0821ede883d0a7a340cdb784b4b5977f41a", "html_url": "https://github.com/rust-lang/rust/commit/72d9e0821ede883d0a7a340cdb784b4b5977f41a"}, {"sha": "6d7beafc87e7cd8806987c5203e52bc3b8c458fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d7beafc87e7cd8806987c5203e52bc3b8c458fa", "html_url": "https://github.com/rust-lang/rust/commit/6d7beafc87e7cd8806987c5203e52bc3b8c458fa"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "103dd801257a728f2d738174066db1020504a1a2", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a72ded562b2c8b78478550d4df09d1499a3dae1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a72ded562b2c8b78478550d4df09d1499a3dae1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=9a72ded562b2c8b78478550d4df09d1499a3dae1", "patch": "@@ -66,18 +66,18 @@ impl<'a> Parser<'a> {\n             },\n             NonterminalKind::PatParam { .. } | NonterminalKind::PatWithOr { .. } => {\n                 match token.kind {\n-                token::Ident(..) |                  // box, ref, mut, and other identifiers (can stricten)\n-                token::OpenDelim(Delimiter::Parenthesis) |    // tuple pattern\n-                token::OpenDelim(Delimiter::Bracket) |  // slice pattern\n-                token::BinOp(token::And) |          // reference\n-                token::BinOp(token::Minus) |        // negative literal\n-                token::AndAnd |                     // double reference\n-                token::Literal(..) |                // literal\n-                token::DotDot |                     // range pattern (future compat)\n-                token::DotDotDot |                  // range pattern (future compat)\n-                token::ModSep |                     // path\n-                token::Lt |                         // path (UFCS constant)\n-                token::BinOp(token::Shl) => true,   // path (double UFCS)\n+                token::Ident(..) |                          // box, ref, mut, and other identifiers (can stricten)\n+                token::OpenDelim(Delimiter::Parenthesis) |  // tuple pattern\n+                token::OpenDelim(Delimiter::Bracket) |      // slice pattern\n+                token::BinOp(token::And) |                  // reference\n+                token::BinOp(token::Minus) |                // negative literal\n+                token::AndAnd |                             // double reference\n+                token::Literal(..) |                        // literal\n+                token::DotDot |                             // range pattern (future compat)\n+                token::DotDotDot |                          // range pattern (future compat)\n+                token::ModSep |                             // path\n+                token::Lt |                                 // path (UFCS constant)\n+                token::BinOp(token::Shl) => true,           // path (double UFCS)\n                 // leading vert `|` or-pattern\n                 token::BinOp(token::Or) =>  matches!(kind, NonterminalKind::PatWithOr {..}),\n                 token::Interpolated(ref nt) => may_be_ident(nt),"}]}