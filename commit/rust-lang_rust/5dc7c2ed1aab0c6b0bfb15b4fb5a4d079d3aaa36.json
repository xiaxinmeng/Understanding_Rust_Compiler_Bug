{"sha": "5dc7c2ed1aab0c6b0bfb15b4fb5a4d079d3aaa36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYzdjMmVkMWFhYjBjNmIwYmZiMTViNGZiNWE0ZDA3OWQzYWFhMzY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-07T16:19:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-16T08:48:38Z"}, "message": "Remove Q parameter from try_get_cached.", "tree": {"sha": "3b8e7b768d8fb8c1e68aca09a1e2e90ea4bbe0dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b8e7b768d8fb8c1e68aca09a1e2e90ea4bbe0dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dc7c2ed1aab0c6b0bfb15b4fb5a4d079d3aaa36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc7c2ed1aab0c6b0bfb15b4fb5a4d079d3aaa36", "html_url": "https://github.com/rust-lang/rust/commit/5dc7c2ed1aab0c6b0bfb15b4fb5a4d079d3aaa36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dc7c2ed1aab0c6b0bfb15b4fb5a4d079d3aaa36/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa0794db239d588b5822233d32fa7aa82bd17069", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa0794db239d588b5822233d32fa7aa82bd17069", "html_url": "https://github.com/rust-lang/rust/commit/fa0794db239d588b5822233d32fa7aa82bd17069"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "1ff7e44bfbb9cb3e68f2f63563c7083e7c78afe9", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5dc7c2ed1aab0c6b0bfb15b4fb5a4d079d3aaa36/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc7c2ed1aab0c6b0bfb15b4fb5a4d079d3aaa36/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=5dc7c2ed1aab0c6b0bfb15b4fb5a4d079d3aaa36", "patch": "@@ -236,7 +236,8 @@ where\n                 return TryGetJob::Cycle(Q::handle_cycle_error(tcx, cycle));\n             }\n \n-            let cached = tcx.try_get_cached::<Q, _, _, _>(\n+            let cached = tcx.try_get_cached(\n+                Q::query_state(tcx),\n                 (*key).clone(),\n                 |value, index| (value.clone(), index),\n                 |_, _| panic!(\"value must be in cache after waiting\"),\n@@ -460,23 +461,22 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// which will be used if the query is not in the cache and we need\n     /// to compute it.\n     #[inline(always)]\n-    fn try_get_cached<Q, R, OnHit, OnMiss>(\n+    fn try_get_cached<K, V, C, R, OnHit, OnMiss>(\n         self,\n-        key: Q::Key,\n+        state: &'tcx QueryStateImpl<'tcx, K, V, C>,\n+        key: K,\n         // `on_hit` can be called while holding a lock to the query cache\n         on_hit: OnHit,\n         on_miss: OnMiss,\n     ) -> R\n     where\n-        Q: QueryDescription<'tcx> + 'tcx,\n-        OnHit: FnOnce(&Q::Value, DepNodeIndex) -> R,\n-        OnMiss: FnOnce(Q::Key, QueryLookup<'tcx, Q>) -> R,\n+        C: QueryCache<K, V>,\n+        OnHit: FnOnce(&V, DepNodeIndex) -> R,\n+        OnMiss: FnOnce(K, QueryLookupImpl<'tcx, QueryStateShardImpl<'tcx, K, C::Sharded>>) -> R,\n     {\n-        let state = Q::query_state(self);\n-\n         state.cache.lookup(\n             state,\n-            QueryStateShard::<Q>::get_cache,\n+            QueryStateShardImpl::<K, C::Sharded>::get_cache,\n             key,\n             |value, index| {\n                 if unlikely!(self.prof.enabled()) {\n@@ -500,7 +500,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) -> Q::Value {\n         debug!(\"ty::query::get_query<{}>(key={:?}, span={:?})\", Q::NAME, key, span);\n \n-        self.try_get_cached::<Q, _, _, _>(\n+        self.try_get_cached(\n+            Q::query_state(self),\n             key,\n             |value, index| {\n                 self.dep_graph.read_index(index);\n@@ -770,7 +771,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         // We may be concurrently trying both execute and force a query.\n         // Ensure that only one of them runs the query.\n \n-        self.try_get_cached::<Q, _, _, _>(\n+        self.try_get_cached(\n+            Q::query_state(self),\n             key,\n             |_, _| {\n                 // Cache hit, do nothing"}]}