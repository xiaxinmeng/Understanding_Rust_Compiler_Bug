{"sha": "9add63257bd3968a7b7ea3372db9d548561e3396", "node_id": "C_kwDOAAsO6NoAKDlhZGQ2MzI1N2JkMzk2OGE3YjdlYTMzNzJkYjlkNTQ4NTYxZTMzOTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-04T01:58:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-04T01:58:23Z"}, "message": "Auto merge of #96353 - estebank:issue-95413, r=compiler-errors\n\nWhen suggesting to import an item, also suggest changing the path if appropriate\n\nWhen we don't find an item we search all of them for an appropriate\nimport and suggest `use`ing it. This is sometimes done for expressions\nthat have paths with more than one segment. We now also suggest changing\nthat path to work with the `use`.\n\nFix #95413", "tree": {"sha": "33460397fea64e272fb3ffa878b2ec8eb44ea8c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33460397fea64e272fb3ffa878b2ec8eb44ea8c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9add63257bd3968a7b7ea3372db9d548561e3396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9add63257bd3968a7b7ea3372db9d548561e3396", "html_url": "https://github.com/rust-lang/rust/commit/9add63257bd3968a7b7ea3372db9d548561e3396", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9add63257bd3968a7b7ea3372db9d548561e3396/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b2e0b60cc5aec81b48835bfc322c426e2f07cd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b2e0b60cc5aec81b48835bfc322c426e2f07cd1", "html_url": "https://github.com/rust-lang/rust/commit/1b2e0b60cc5aec81b48835bfc322c426e2f07cd1"}, {"sha": "4934a9e6430b3fcb98f77205f8a625c7ffebd628", "url": "https://api.github.com/repos/rust-lang/rust/commits/4934a9e6430b3fcb98f77205f8a625c7ffebd628", "html_url": "https://github.com/rust-lang/rust/commit/4934a9e6430b3fcb98f77205f8a625c7ffebd628"}], "stats": {"total": 133, "additions": 132, "deletions": 1}, "files": [{"sha": "5d80f49626a0476ad92a4daa2bb8b8aeec32fea1", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9add63257bd3968a7b7ea3372db9d548561e3396/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9add63257bd3968a7b7ea3372db9d548561e3396/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=9add63257bd3968a7b7ea3372db9d548561e3396", "patch": "@@ -117,7 +117,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn report_with_use_injections(&mut self, krate: &Crate) {\n-        for UseError { mut err, candidates, def_id, instead, suggestion } in\n+        for UseError { mut err, candidates, def_id, instead, suggestion, path } in\n             self.use_injections.drain(..)\n         {\n             let (span, found_use) = if let Some(def_id) = def_id.as_local() {\n@@ -135,6 +135,7 @@ impl<'a> Resolver<'a> {\n                     if instead { Instead::Yes } else { Instead::No },\n                     found_use,\n                     IsPattern::No,\n+                    path,\n                 );\n             } else if let Some((span, msg, sugg, appl)) = suggestion {\n                 err.span_suggestion(span, msg, sugg, appl);\n@@ -702,6 +703,7 @@ impl<'a> Resolver<'a> {\n                         Instead::No,\n                         FoundUse::Yes,\n                         IsPattern::Yes,\n+                        vec![],\n                     );\n                 }\n                 err\n@@ -1482,6 +1484,7 @@ impl<'a> Resolver<'a> {\n             Instead::No,\n             FoundUse::Yes,\n             IsPattern::No,\n+            vec![],\n         );\n \n         if macro_kind == MacroKind::Derive && (ident.name == sym::Send || ident.name == sym::Sync) {\n@@ -2448,6 +2451,7 @@ fn show_candidates(\n     instead: Instead,\n     found_use: FoundUse,\n     is_pattern: IsPattern,\n+    path: Vec<Segment>,\n ) {\n     if candidates.is_empty() {\n         return;\n@@ -2515,6 +2519,14 @@ fn show_candidates(\n                 accessible_path_strings.into_iter().map(|a| a.0),\n                 Applicability::MaybeIncorrect,\n             );\n+            if let [first, .., last] = &path[..] {\n+                err.span_suggestion_verbose(\n+                    first.ident.span.until(last.ident.span),\n+                    &format!(\"if you import `{}`, refer to it directly\", last.ident),\n+                    String::new(),\n+                    Applicability::Unspecified,\n+                );\n+            }\n         } else {\n             msg.push(':');\n "}, {"sha": "1bdf53cf84fedc41a6b3194b9fc3fd9a55f2fd6a", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9add63257bd3968a7b7ea3372db9d548561e3396/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9add63257bd3968a7b7ea3372db9d548561e3396/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=9add63257bd3968a7b7ea3372db9d548561e3396", "patch": "@@ -2693,6 +2693,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     def_id,\n                     instead,\n                     suggestion,\n+                    path: path.into(),\n                 });\n             }\n \n@@ -2756,6 +2757,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     def_id,\n                     instead: false,\n                     suggestion: None,\n+                    path: path.into(),\n                 });\n             } else {\n                 err.cancel();"}, {"sha": "ff11aba49d83613d7e92fed5ee48ff828ec067d6", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9add63257bd3968a7b7ea3372db9d548561e3396/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9add63257bd3968a7b7ea3372db9d548561e3396/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=9add63257bd3968a7b7ea3372db9d548561e3396", "patch": "@@ -696,6 +696,9 @@ struct UseError<'a> {\n     instead: bool,\n     /// Extra free-form suggestion.\n     suggestion: Option<(Span, &'static str, String, Applicability)>,\n+    /// Path `Segment`s at the place of use that failed. Used for accurate suggestion after telling\n+    /// the user to import the item directly.\n+    path: Vec<Segment>,\n }\n \n #[derive(Clone, Copy, PartialEq, Debug)]"}, {"sha": "91073d3698d911887442f5f9425cbc4cda640e88", "filename": "src/test/ui/macros/macro-outer-attributes.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr?ref=9add63257bd3968a7b7ea3372db9d548561e3396", "patch": "@@ -8,6 +8,11 @@ help: consider importing this function\n    |\n LL | use b::bar;\n    |\n+help: if you import `bar`, refer to it directly\n+   |\n+LL -     a::bar();\n+LL +     bar();\n+   | \n \n error: aborting due to previous error\n "}, {"sha": "037a858d7e1012fdc56b94613bcc61121c87995a", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=9add63257bd3968a7b7ea3372db9d548561e3396", "patch": "@@ -18,6 +18,11 @@ LL | use m2::S;\n    |\n LL | use xm2::S;\n    |\n+help: if you import `S`, refer to it directly\n+   |\n+LL -     check(m1::S);\n+LL +     check(S);\n+   | \n \n error[E0423]: expected value, found type alias `xm1::S`\n   --> $DIR/namespace-mix.rs:40:11\n@@ -41,6 +46,11 @@ LL | use m2::S;\n    |\n LL | use xm2::S;\n    |\n+help: if you import `S`, refer to it directly\n+   |\n+LL -     check(xm1::S);\n+LL +     check(S);\n+   | \n \n error[E0423]: expected value, found struct variant `m7::V`\n   --> $DIR/namespace-mix.rs:100:11\n@@ -67,6 +77,11 @@ LL | use m8::V;\n    |\n LL | use xm8::V;\n    |\n+help: if you import `V`, refer to it directly\n+   |\n+LL -     check(m7::V);\n+LL +     check(V);\n+   | \n \n error[E0423]: expected value, found struct variant `xm7::V`\n   --> $DIR/namespace-mix.rs:106:11\n@@ -95,6 +110,11 @@ LL | use m8::V;\n    |\n LL | use xm8::V;\n    |\n+help: if you import `V`, refer to it directly\n+   |\n+LL -     check(xm7::V);\n+LL +     check(V);\n+   | \n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:33:11"}, {"sha": "c5434c72b382b6a3c289874e115555c6506af22d", "filename": "src/test/ui/parser/circular_modules_main.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr?ref=9add63257bd3968a7b7ea3372db9d548561e3396", "patch": "@@ -14,6 +14,11 @@ help: consider importing this function\n    |\n LL | use hi_str;\n    |\n+help: if you import `hi_str`, refer to it directly\n+   |\n+LL -     println!(\"{}\", circular_modules_main::hi_str());\n+LL +     println!(\"{}\", hi_str());\n+   | \n \n error: aborting due to 2 previous errors\n "}, {"sha": "1d26a2c005872524a875f4441063b510a4165e42", "filename": "src/test/ui/resolve/enums-are-namespaced-xc.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr?ref=9add63257bd3968a7b7ea3372db9d548561e3396", "patch": "@@ -8,6 +8,11 @@ help: consider importing this unit variant\n    |\n LL | use namespaced_enums::Foo::A;\n    |\n+help: if you import `A`, refer to it directly\n+   |\n+LL -     let _ = namespaced_enums::A;\n+LL +     let _ = A;\n+   | \n \n error[E0425]: cannot find function, tuple struct or tuple variant `B` in crate `namespaced_enums`\n   --> $DIR/enums-are-namespaced-xc.rs:7:31\n@@ -19,6 +24,11 @@ help: consider importing this tuple variant\n    |\n LL | use namespaced_enums::Foo::B;\n    |\n+help: if you import `B`, refer to it directly\n+   |\n+LL -     let _ = namespaced_enums::B(10);\n+LL +     let _ = B(10);\n+   | \n \n error[E0422]: cannot find struct, variant or union type `C` in crate `namespaced_enums`\n   --> $DIR/enums-are-namespaced-xc.rs:9:31\n@@ -30,6 +40,11 @@ help: consider importing this variant\n    |\n LL | use namespaced_enums::Foo::C;\n    |\n+help: if you import `C`, refer to it directly\n+   |\n+LL -     let _ = namespaced_enums::C { a: 10 };\n+LL +     let _ = C { a: 10 };\n+   | \n \n error: aborting due to 3 previous errors\n "}, {"sha": "4cc035cb11e2034e9e0d178b1ac23d3e721c595b", "filename": "src/test/ui/resolve/issue-50599.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr?ref=9add63257bd3968a7b7ea3372db9d548561e3396", "patch": "@@ -10,6 +10,11 @@ LL | use std::f32::consts::LOG10_2;\n    |\n LL | use std::f64::consts::LOG10_2;\n    |\n+help: if you import `LOG10_2`, refer to it directly\n+   |\n+LL -     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize;\n+LL +     const M: usize = (f64::from(N) * LOG10_2) as usize;\n+   | \n \n error: aborting due to previous error\n "}, {"sha": "338a5423aa472a58d602f924aace44b62d4f13fd", "filename": "src/test/ui/resolve/missing-in-namespace.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr?ref=9add63257bd3968a7b7ea3372db9d548561e3396", "patch": "@@ -8,6 +8,11 @@ help: consider importing this struct\n    |\n LL | use std::collections::HashMap;\n    |\n+help: if you import `HashMap`, refer to it directly\n+   |\n+LL -     let _map = std::hahmap::HashMap::new();\n+LL +     let _map = HashMap::new();\n+   | \n \n error: aborting due to previous error\n "}, {"sha": "ed89170fd8a75519ea4c3117ecbff87ae0bec5ff", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=9add63257bd3968a7b7ea3372db9d548561e3396", "patch": "@@ -105,6 +105,11 @@ LL | use std::f32::consts::E;\n    |\n LL | use std::f64::consts::E;\n    |\n+help: if you import `E`, refer to it directly\n+   |\n+LL -     let _: E = m::E;\n+LL +     let _: E = E;\n+   | \n \n error[E0423]: expected value, found struct variant `m::E::Struct`\n   --> $DIR/privacy-enum-ctor.rs:45:16"}, {"sha": "fcbc28475f99880799cbfaafa5f04174374886f9", "filename": "src/test/ui/resolve/resolve-primitive-fallback.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr?ref=9add63257bd3968a7b7ea3372db9d548561e3396", "patch": "@@ -14,6 +14,11 @@ help: consider importing this builtin type\n    |\n LL | use std::primitive::u8;\n    |\n+help: if you import `u8`, refer to it directly\n+   |\n+LL -     let _: ::u8;\n+LL +     let _: u8;\n+   | \n \n error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/resolve-primitive-fallback.rs:3:5"}, {"sha": "39e90d7a3f786d32b65dc0f77cc98078883bec74", "filename": "src/test/ui/trait-bounds/shadowed-path-in-trait-bound-suggestion.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.fixed?ref=9add63257bd3968a7b7ea3372db9d548561e3396", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![allow(non_snake_case)]\n+mod A {\n+    pub trait Trait {}\n+    impl Trait for i32 {}\n+}\n+\n+mod B {\n+    use A::Trait;\n+\n+pub struct A<H: Trait>(pub H); //~ ERROR cannot find trait\n+}\n+\n+fn main() {\n+    let _ = B::A(42);\n+}"}, {"sha": "ee6ed0cae671cb111e1d0df19e212897df49e71e", "filename": "src/test/ui/trait-bounds/shadowed-path-in-trait-bound-suggestion.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.rs?ref=9add63257bd3968a7b7ea3372db9d548561e3396", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+#![allow(non_snake_case)]\n+mod A {\n+    pub trait Trait {}\n+    impl Trait for i32 {}\n+}\n+\n+mod B {\n+    pub struct A<H: A::Trait>(pub H); //~ ERROR cannot find trait\n+}\n+\n+fn main() {\n+    let _ = B::A(42);\n+}"}, {"sha": "a8b275f98034a80751f3aac5f78a40240b2a76d3", "filename": "src/test/ui/trait-bounds/shadowed-path-in-trait-bound-suggestion.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9add63257bd3968a7b7ea3372db9d548561e3396/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr?ref=9add63257bd3968a7b7ea3372db9d548561e3396", "patch": "@@ -0,0 +1,19 @@\n+error[E0405]: cannot find trait `Trait` in `A`\n+  --> $DIR/shadowed-path-in-trait-bound-suggestion.rs:9:24\n+   |\n+LL |     pub struct A<H: A::Trait>(pub H);\n+   |                        ^^^^^ not found in `A`\n+   |\n+help: consider importing this trait\n+   |\n+LL |     use A::Trait;\n+   |\n+help: if you import `Trait`, refer to it directly\n+   |\n+LL -     pub struct A<H: A::Trait>(pub H);\n+LL +     pub struct A<H: Trait>(pub H);\n+   | \n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0405`."}]}