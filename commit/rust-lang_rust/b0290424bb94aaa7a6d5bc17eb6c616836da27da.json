{"sha": "b0290424bb94aaa7a6d5bc17eb6c616836da27da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMjkwNDI0YmI5NGFhYTdhNmQ1YmMxN2ViNmM2MTY4MzZkYTI3ZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-12T07:26:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-12T07:26:03Z"}, "message": "Auto merge of #4269 - lzutao:rustup, r=flip1995\n\nRustup `macro expansion and resolution`\n\nRustup https://github.com/rust-lang/rust/pull/62476\n\nchangelog: none", "tree": {"sha": "df853bea6ff5b96fc2089e6949e10870545e2a64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df853bea6ff5b96fc2089e6949e10870545e2a64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0290424bb94aaa7a6d5bc17eb6c616836da27da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0290424bb94aaa7a6d5bc17eb6c616836da27da", "html_url": "https://github.com/rust-lang/rust/commit/b0290424bb94aaa7a6d5bc17eb6c616836da27da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0290424bb94aaa7a6d5bc17eb6c616836da27da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "032ae968560e78708f40f2fdd5ce95775daec836", "url": "https://api.github.com/repos/rust-lang/rust/commits/032ae968560e78708f40f2fdd5ce95775daec836", "html_url": "https://github.com/rust-lang/rust/commit/032ae968560e78708f40f2fdd5ce95775daec836"}, {"sha": "27c53487937ffbd7a67aad4511a5d72f637b9ebb", "url": "https://api.github.com/repos/rust-lang/rust/commits/27c53487937ffbd7a67aad4511a5d72f637b9ebb", "html_url": "https://github.com/rust-lang/rust/commit/27c53487937ffbd7a67aad4511a5d72f637b9ebb"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "acca50e3df88bc70ef44006c3d3e9a1e008634cf", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b0290424bb94aaa7a6d5bc17eb6c616836da27da/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0290424bb94aaa7a6d5bc17eb6c616836da27da/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=b0290424bb94aaa7a6d5bc17eb6c616836da27da", "patch": "@@ -7,7 +7,7 @@ use rustc::ty;\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::LitKind;\n-use syntax::source_map::{ExpnFormat, Span};\n+use syntax::source_map::{ExpnKind, Span};\n \n use crate::consts::{constant, Constant};\n use crate::utils::sugg::Sugg;\n@@ -596,10 +596,14 @@ fn is_used(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n /// Tests whether an expression is in a macro expansion (e.g., something\n /// generated by `#[derive(...)]` or the like).\n fn in_attributes_expansion(expr: &Expr) -> bool {\n-    expr.span\n-        .ctxt()\n-        .outer_expn_info()\n-        .map_or(false, |info| matches!(info.format, ExpnFormat::MacroAttribute(_)))\n+    use syntax::ext::hygiene::MacroKind;\n+    expr.span.ctxt().outer_expn_info().map_or(false, |info| {\n+        if let ExpnKind::Macro(MacroKind::Attr, _) = info.kind {\n+            true\n+        } else {\n+            false\n+        }\n+    })\n }\n \n /// Tests whether `res` is a variable defined outside a macro."}, {"sha": "0f2084e819e368282f1b0cec2025463ee168dfa1", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0290424bb94aaa7a6d5bc17eb6c616836da27da/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0290424bb94aaa7a6d5bc17eb6c616836da27da/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=b0290424bb94aaa7a6d5bc17eb6c616836da27da", "patch": "@@ -317,7 +317,7 @@ fn attr_is_cfg(attr: &ast::Attribute) -> bool {\n \n // get the def site\n fn get_def(span: Span) -> Option<Span> {\n-    span.ctxt().outer_expn_info().and_then(|info| info.def_site)\n+    span.ctxt().outer_expn_info().and_then(|info| Some(info.def_site))\n }\n \n // is this expr a `()` unit?"}, {"sha": "4f35337292e3891c1e387748581b4cb1760173ae", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0290424bb94aaa7a6d5bc17eb6c616836da27da/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0290424bb94aaa7a6d5bc17eb6c616836da27da/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=b0290424bb94aaa7a6d5bc17eb6c616836da27da", "patch": "@@ -621,9 +621,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n }\n \n fn is_questionmark_desugar_marked_call(expr: &Expr) -> bool {\n-    use syntax_pos::hygiene::CompilerDesugaringKind;\n+    use syntax_pos::hygiene::DesugaringKind;\n     if let ExprKind::Call(ref callee, _) = expr.node {\n-        callee.span.is_compiler_desugaring(CompilerDesugaringKind::QuestionMark)\n+        callee.span.is_desugaring(DesugaringKind::QuestionMark)\n     } else {\n         false\n     }"}, {"sha": "9e45c453ae9f89716bba7255684f73be9b614059", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0290424bb94aaa7a6d5bc17eb6c616836da27da/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0290424bb94aaa7a6d5bc17eb6c616836da27da/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=b0290424bb94aaa7a6d5bc17eb6c616836da27da", "patch": "@@ -43,7 +43,7 @@ use rustc_errors::Applicability;\n use smallvec::SmallVec;\n use syntax::ast::{self, LitKind};\n use syntax::attr;\n-use syntax::ext::hygiene::ExpnFormat;\n+use syntax::ext::hygiene::ExpnKind;\n use syntax::source_map::{Span, DUMMY_SP};\n use syntax::symbol::{kw, Symbol};\n \n@@ -100,7 +100,7 @@ pub fn in_macro_or_desugar(span: Span) -> bool {\n /// Returns `true` if this `expn_info` was expanded by any macro.\n pub fn in_macro(span: Span) -> bool {\n     if let Some(info) = span.ctxt().outer_expn_info() {\n-        if let ExpnFormat::CompilerDesugaring(..) = info.format {\n+        if let ExpnKind::Desugaring(..) = info.kind {\n             false\n         } else {\n             true\n@@ -686,7 +686,7 @@ pub fn is_adjusted(cx: &LateContext<'_, '_>, e: &Expr) -> bool {\n /// See also `is_direct_expn_of`.\n pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n     loop {\n-        let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.format.name(), ei.call_site));\n+        let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.kind.descr(), ei.call_site));\n \n         match span_name_span {\n             Some((mac_name, new_span)) if mac_name.as_str() == name => return Some(new_span),\n@@ -706,7 +706,7 @@ pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n /// `bar!` by\n /// `is_direct_expn_of`.\n pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n-    let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.format.name(), ei.call_site));\n+    let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.kind.descr(), ei.call_site));\n \n     match span_name_span {\n         Some((mac_name, new_span)) if mac_name.as_str() == name => Some(new_span),"}]}