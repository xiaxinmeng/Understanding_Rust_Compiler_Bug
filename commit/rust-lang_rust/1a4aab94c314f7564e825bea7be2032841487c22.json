{"sha": "1a4aab94c314f7564e825bea7be2032841487c22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNGFhYjk0YzMxNGY3NTY0ZTgyNWJlYTdiZTIwMzI4NDE0ODdjMjI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-06T03:51:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-06T03:51:41Z"}, "message": "Rollup merge of #41026 - CleanCut:rust-40860, r=alexcrichton\n\nHandle symlinks in src/bootstrap/clean.rs (mostly) -- resolves #40860.\n\nIn response to #40860\n\nThe broken condition can be replicated with:\n\n```shell\nexport MYARCH=x86_64-apple-darwin && mkdir -p build/$MYARCH/subdir &&\ntouch build/$MYARCH/subdir/file && ln -s build/$MYARCH/subdir/file\nbuild/$MYARCH/subdir/symlink\n```\n\n`src/bootstrap/clean.rs` has a custom implementation of removing a tree\n`fn rm_rf` that used `std::path::Path::{is_file, is_dir, exists}` while\nrecursively deleting directories and files.  Unfortunately, `Path`'s\nimplementation of `is_file()` and `is_dir()` and `exists()` always\nunconditionally follow symlinks, which is the exact opposite of standard\nimplementations of deleting file trees.\n\nIt appears that this custom implementation is being used to workaround a\nbehavior in Windows where the files often get marked as read-only, which\nprevents us from simply using something nice and simple like\n`std::fs::remove_dir_all`, which properly deletes links instead of\nfollowing them.\n\nSo it looks like the fix is to use `.symlink_metadata()` to figure out\nwhether tree items are files/symlinks/directories.  The one corner case\nthis won't cover is if there is a broken symlink in the \"root\"\n`build/$MYARCH` directory, because those initial entries are run through\n`Path::canonicalize()`, which panics with broken symlinks.  So lets just\nnever use symlinks in that one directory. :-)", "tree": {"sha": "46eb8e3ce5554f1cbdd4d965cd8011a210f6eab9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46eb8e3ce5554f1cbdd4d965cd8011a210f6eab9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a4aab94c314f7564e825bea7be2032841487c22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4aab94c314f7564e825bea7be2032841487c22", "html_url": "https://github.com/rust-lang/rust/commit/1a4aab94c314f7564e825bea7be2032841487c22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a4aab94c314f7564e825bea7be2032841487c22/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "083c7a93beb2951465732b015afc7deb651a7ce5", "url": "https://api.github.com/repos/rust-lang/rust/commits/083c7a93beb2951465732b015afc7deb651a7ce5", "html_url": "https://github.com/rust-lang/rust/commit/083c7a93beb2951465732b015afc7deb651a7ce5"}, {"sha": "efd6eab366ad44ac6e9b0b12cd4b9688ab71df6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/efd6eab366ad44ac6e9b0b12cd4b9688ab71df6d", "html_url": "https://github.com/rust-lang/rust/commit/efd6eab366ad44ac6e9b0b12cd4b9688ab71df6d"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "308a0ab3076dd5421f90d17efe36562364214b8d", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1a4aab94c314f7564e825bea7be2032841487c22/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a4aab94c314f7564e825bea7be2032841487c22/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=1a4aab94c314f7564e825bea7be2032841487c22", "patch": "@@ -44,36 +44,38 @@ pub fn clean(build: &Build) {\n }\n \n fn rm_rf(path: &Path) {\n-    if !path.exists() {\n-        return\n-    }\n-    if path.is_file() {\n-        return do_op(path, \"remove file\", |p| fs::remove_file(p));\n-    }\n-\n-    for file in t!(fs::read_dir(path)) {\n-        let file = t!(file).path();\n+    match path.symlink_metadata() {\n+        Err(e) => {\n+            if e.kind() == ErrorKind::NotFound {\n+                return;\n+            }\n+            panic!(\"failed to get metadata for file {}: {}\", path.display(), e);\n+        },\n+        Ok(metadata) => {\n+            if metadata.file_type().is_file() || metadata.file_type().is_symlink() {\n+                do_op(path, \"remove file\", |p| fs::remove_file(p));\n+                return;\n+            }\n \n-        if file.is_dir() {\n-            rm_rf(&file);\n-        } else {\n-            // On windows we can't remove a readonly file, and git will\n-            // often clone files as readonly. As a result, we have some\n-            // special logic to remove readonly files on windows.\n-            do_op(&file, \"remove file\", |p| fs::remove_file(p));\n-        }\n-    }\n-    do_op(path, \"remove dir\", |p| fs::remove_dir(p));\n+            for file in t!(fs::read_dir(path)) {\n+                rm_rf(&t!(file).path());\n+            }\n+            do_op(path, \"remove dir\", |p| fs::remove_dir(p));\n+        },\n+    };\n }\n \n fn do_op<F>(path: &Path, desc: &str, mut f: F)\n     where F: FnMut(&Path) -> io::Result<()>\n {\n     match f(path) {\n         Ok(()) => {}\n+        // On windows we can't remove a readonly file, and git will often clone files as readonly.\n+        // As a result, we have some special logic to remove readonly files on windows.\n+        // This is also the reason that we can't use things like fs::remove_dir_all().\n         Err(ref e) if cfg!(windows) &&\n                       e.kind() == ErrorKind::PermissionDenied => {\n-            let mut p = t!(path.metadata()).permissions();\n+            let mut p = t!(path.symlink_metadata()).permissions();\n             p.set_readonly(false);\n             t!(fs::set_permissions(path, p));\n             f(path).unwrap_or_else(|e| {"}]}