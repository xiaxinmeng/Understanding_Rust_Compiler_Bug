{"sha": "c709c1efc6c399b404bc73ef9a8de10c81a67e35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MDljMWVmYzZjMzk5YjQwNGJjNzNlZjlhOGRlMTBjODFhNjdlMzU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-20T12:43:37Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-22T16:06:55Z"}, "message": "rustc: remove obsolete monomorphization modes.", "tree": {"sha": "a01c60320f411e061d13f114a004adcdd9dad3e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a01c60320f411e061d13f114a004adcdd9dad3e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c709c1efc6c399b404bc73ef9a8de10c81a67e35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c709c1efc6c399b404bc73ef9a8de10c81a67e35", "html_url": "https://github.com/rust-lang/rust/commit/c709c1efc6c399b404bc73ef9a8de10c81a67e35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c709c1efc6c399b404bc73ef9a8de10c81a67e35/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8", "html_url": "https://github.com/rust-lang/rust/commit/811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8"}], "stats": {"total": 97, "additions": 37, "deletions": 60}, "files": [{"sha": "c5a284e3f96cf36ab036a622aff22e9534364869", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c709c1efc6c399b404bc73ef9a8de10c81a67e35/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c709c1efc6c399b404bc73ef9a8de10c81a67e35/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=c709c1efc6c399b404bc73ef9a8de10c81a67e35", "patch": "@@ -267,7 +267,19 @@ impl Case {\n         mk_struct(cx, self.tys.as_slice(), false).size == 0\n     }\n     fn find_ptr(&self) -> Option<uint> {\n-        self.tys.iter().position(|&ty| mono_data_classify(ty) == MonoNonNull)\n+        self.tys.iter().position(|&ty| {\n+            match ty::get(ty).sty {\n+                ty::ty_rptr(_, mt) => match ty::get(mt.ty).sty {\n+                    ty::ty_vec(_, None) => false,\n+                    _ => true,\n+                },\n+                ty::ty_uniq(..) | ty::ty_box(..) |\n+                ty::ty_str(ty::VstoreUniq) |\n+                ty::ty_bare_fn(..) => true,\n+                // Is that everything?  Would closures or slices qualify?\n+                _ => false\n+            }\n+        })\n     }\n }\n "}, {"sha": "4657c82c8339919d7eaf9e93122bd52af38a9856", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 5, "deletions": 34, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c709c1efc6c399b404bc73ef9a8de10c81a67e35/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c709c1efc6c399b404bc73ef9a8de10c81a67e35/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=c709c1efc6c399b404bc73ef9a8de10c81a67e35", "patch": "@@ -688,45 +688,16 @@ pub fn is_null(val: ValueRef) -> bool {\n \n // Used to identify cached monomorphized functions and vtables\n #[deriving(Eq, TotalEq, Hash)]\n-pub enum mono_param_id {\n-    mono_precise(ty::t, Option<@Vec<mono_id> >),\n-    mono_any,\n-    mono_repr(uint /* size */,\n-              uint /* align */,\n-              MonoDataClass,\n-              datum::RvalueMode),\n-}\n-\n-#[deriving(Eq, TotalEq, Hash)]\n-pub enum MonoDataClass {\n-    MonoBits,    // Anything not treated differently from arbitrary integer data\n-    MonoNonNull, // Non-null pointers (used for optional-pointer optimization)\n-    // FIXME(#3547)---scalars and floats are\n-    // treated differently in most ABIs.  But we\n-    // should be doing something more detailed\n-    // here.\n-    MonoFloat\n-}\n-\n-pub fn mono_data_classify(t: ty::t) -> MonoDataClass {\n-    match ty::get(t).sty {\n-        ty::ty_float(_) => MonoFloat,\n-        ty::ty_rptr(_, mt) => match ty::get(mt.ty).sty {\n-            ty::ty_vec(_, None) => MonoBits,\n-            _ => MonoNonNull,\n-        },\n-        ty::ty_uniq(..) | ty::ty_box(..) |\n-        ty::ty_str(ty::VstoreUniq) |\n-        ty::ty_bare_fn(..) => MonoNonNull,\n-        // Is that everything?  Would closures or slices qualify?\n-        _ => MonoBits\n-    }\n+pub struct MonoParamId {\n+    pub subst: ty::t,\n+    pub vtables: Vec<mono_id>\n }\n \n #[deriving(Eq, TotalEq, Hash)]\n pub struct mono_id_ {\n     pub def: ast::DefId,\n-    pub params: Vec<mono_param_id> }\n+    pub params: Vec<MonoParamId>\n+}\n \n pub type mono_id = @mono_id_;\n "}, {"sha": "fd8a1652fe7fe9f8f43c53eae06137643b00c80d", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c709c1efc6c399b404bc73ef9a8de10c81a67e35/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c709c1efc6c399b404bc73ef9a8de10c81a67e35/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=c709c1efc6c399b404bc73ef9a8de10c81a67e35", "patch": "@@ -49,7 +49,6 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n \n     assert!(real_substs.tps.iter().all(|t| !ty::type_needs_infer(*t)));\n     let _icx = push_ctxt(\"monomorphic_fn\");\n-    let mut must_cast = false;\n \n     let psubsts = @param_substs {\n         tys: real_substs.tps.clone(),\n@@ -62,10 +61,6 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n     for s in psubsts.tys.iter() { assert!(!ty::type_has_params(*s)); }\n \n     let hash_id = make_mono_id(ccx, fn_id, &*psubsts);\n-    if hash_id.params.iter().any(\n-                |p| match *p { mono_precise(_, _) => false, _ => true }) {\n-        must_cast = true;\n-    }\n \n     debug!(\"monomorphic_fn(\\\n             fn_id={}, \\\n@@ -79,7 +74,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n         Some(&val) => {\n             debug!(\"leaving monomorphic fn {}\",\n             ty::item_path_str(ccx.tcx(), fn_id));\n-            return (val, must_cast);\n+            return (val, false);\n         }\n         None => ()\n     }\n@@ -286,32 +281,31 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n     ccx.monomorphizing.borrow_mut().insert(fn_id, depth);\n \n     debug!(\"leaving monomorphic fn {}\", ty::item_path_str(ccx.tcx(), fn_id));\n-    (lldecl, must_cast)\n+    (lldecl, false)\n }\n \n pub fn make_mono_id(ccx: &CrateContext,\n                     item: ast::DefId,\n                     substs: &param_substs) -> mono_id {\n-    // FIXME (possibly #5801): Need a lot of type hints to get\n-    // .collect() to work.\n     let substs_iter = substs.self_ty.iter().chain(substs.tys.iter());\n-    let precise_param_ids: Vec<(ty::t, Option<@Vec<mono_id> >)> = match substs.vtables {\n-      Some(ref vts) => {\n-        debug!(\"make_mono_id vtables={} substs={}\",\n-               vts.repr(ccx.tcx()), substs.tys.repr(ccx.tcx()));\n-        let vts_iter = substs.self_vtables.iter().chain(vts.iter());\n-        vts_iter.zip(substs_iter).map(|(vtable, subst)| {\n-            let v = vtable.iter().map(|vt| meth::vtable_id(ccx, vt)).collect::<Vec<_>>();\n-            (*subst, if !v.is_empty() { Some(@v) } else { None })\n+    let param_ids: Vec<MonoParamId> = match substs.vtables {\n+        Some(ref vts) => {\n+            debug!(\"make_mono_id vtables={} substs={}\",\n+                   vts.repr(ccx.tcx()), substs.tys.repr(ccx.tcx()));\n+            let vts_iter = substs.self_vtables.iter().chain(vts.iter());\n+            vts_iter.zip(substs_iter).map(|(vtable, subst)| MonoParamId {\n+                subst: *subst,\n+                vtables: vtable.iter().map(|vt| meth::vtable_id(ccx, vt)).collect()\n+            }).collect()\n+        }\n+        None => substs_iter.map(|subst| MonoParamId {\n+            subst: *subst,\n+            vtables: Vec::new()\n         }).collect()\n-      }\n-      None => substs_iter.map(|subst| (*subst, None::<@Vec<mono_id> >)).collect()\n     };\n \n-\n-    let param_ids = precise_param_ids.iter().map(|x| {\n-        let (a, b) = *x;\n-        mono_precise(a, b)\n-    }).collect();\n-    @mono_id_ {def: item, params: param_ids}\n+    @mono_id_ {\n+        def: item,\n+        params: param_ids\n+    }\n }"}]}