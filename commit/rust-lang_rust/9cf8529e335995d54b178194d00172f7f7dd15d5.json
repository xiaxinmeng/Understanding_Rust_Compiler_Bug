{"sha": "9cf8529e335995d54b178194d00172f7f7dd15d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZjg1MjllMzM1OTk1ZDU0YjE3ODE5NGQwMDE3MmY3ZjdkZDE1ZDU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-11-22T23:00:22Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-11-23T00:09:00Z"}, "message": "Implement formatting for impls\n\nFixes #614", "tree": {"sha": "f64706d3fa5be5b8bcdc475ffdd475c8769f5926", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f64706d3fa5be5b8bcdc475ffdd475c8769f5926"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cf8529e335995d54b178194d00172f7f7dd15d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf8529e335995d54b178194d00172f7f7dd15d5", "html_url": "https://github.com/rust-lang/rust/commit/9cf8529e335995d54b178194d00172f7f7dd15d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cf8529e335995d54b178194d00172f7f7dd15d5/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08e6e74e693803dfa4e9fb5ad0daa2516362a3df", "url": "https://api.github.com/repos/rust-lang/rust/commits/08e6e74e693803dfa4e9fb5ad0daa2516362a3df", "html_url": "https://github.com/rust-lang/rust/commit/08e6e74e693803dfa4e9fb5ad0daa2516362a3df"}], "stats": {"total": 137, "additions": 121, "deletions": 16}, "files": [{"sha": "b4bd89ebb91efe2eb50523b21b7096d3de5c36b1", "filename": "src/items.rs", "status": "modified", "additions": 99, "deletions": 1, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/9cf8529e335995d54b178194d00172f7f7dd15d5/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf8529e335995d54b178194d00172f7f7dd15d5/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=9cf8529e335995d54b178194d00172f7f7dd15d5", "patch": "@@ -12,7 +12,7 @@\n \n use Indent;\n use utils::{format_mutability, format_visibility, contains_skip, span_after, end_typaram,\n-            wrap_str, last_line_width, semicolon_for_expr};\n+            wrap_str, last_line_width, semicolon_for_expr, format_unsafety, trim_newlines};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n             DefinitiveListTactic, definitive_tactic, format_item_list};\n use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs};\n@@ -435,6 +435,104 @@ impl<'a> FmtVisitor<'a> {\n     }\n }\n \n+pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -> Option<String> {\n+    if let ast::Item_::ItemImpl(unsafety,\n+                                polarity,\n+                                ref generics,\n+                                ref trait_ref,\n+                                ref self_ty,\n+                                ref items) = item.node {\n+        let mut result = String::new();\n+        result.push_str(format_visibility(item.vis));\n+        result.push_str(format_unsafety(unsafety));\n+        result.push_str(\"impl\");\n+\n+        let lo = span_after(item.span, \"impl\", context.codemap);\n+        let hi = match *trait_ref {\n+            Some(ref tr) => tr.path.span.lo,\n+            None => self_ty.span.lo,\n+        };\n+        let generics_str = try_opt!(rewrite_generics(context,\n+                                                     generics,\n+                                                     offset,\n+                                                     offset + result.len(),\n+                                                     mk_sp(lo, hi)));\n+        result.push_str(&generics_str);\n+\n+        // FIXME might need to linebreak in the impl header, here would be a\n+        // good place.\n+        result.push(' ');\n+        if polarity == ast::ImplPolarity::Negative {\n+            result.push_str(\"!\");\n+        }\n+        if let &Some(ref trait_ref) = trait_ref {\n+            let budget = try_opt!(context.config.max_width.checked_sub(result.len()));\n+            let indent = offset + result.len();\n+            result.push_str(&*try_opt!(trait_ref.rewrite(context, budget, indent)));\n+            result.push_str(\" for \");\n+        }\n+\n+        let budget = try_opt!(context.config.max_width.checked_sub(result.len()));\n+        let indent = offset + result.len();\n+        result.push_str(&*try_opt!(self_ty.rewrite(context, budget, indent)));\n+\n+        let where_clause_str = try_opt!(rewrite_where_clause(context,\n+                                                             &generics.where_clause,\n+                                                             context.config,\n+                                                             context.block_indent,\n+                                                             context.config.where_density,\n+                                                             \"{\",\n+                                                             None));\n+        if !where_clause_str.contains('\\n') &&\n+           result.len() + where_clause_str.len() + offset.width() > context.config.max_width {\n+            result.push('\\n');\n+            let width = context.block_indent.width() + context.config.tab_spaces - 1;\n+            let where_indent = Indent::new(0, width);\n+            result.push_str(&where_indent.to_string(context.config));\n+        }\n+        result.push_str(&where_clause_str);\n+\n+        match context.config.item_brace_style {\n+            BraceStyle::AlwaysNextLine => result.push('\\n'),\n+            BraceStyle::PreferSameLine => result.push(' '),\n+            BraceStyle::SameLineWhere => {\n+                if where_clause_str.len() > 0 {\n+                    result.push('\\n')\n+                } else {\n+                    result.push(' ')\n+                }\n+            }\n+        }\n+        result.push('{');\n+\n+        if !items.is_empty() {\n+            result.push('\\n');\n+            let indent_str = context.block_indent.to_string(context.config);\n+            result.push_str(&indent_str);\n+\n+            let mut visitor = FmtVisitor::from_codemap(context.parse_session, context.config, None);\n+            visitor.block_indent = context.block_indent.block_indent(context.config);\n+\n+            let snippet = context.snippet(item.span);\n+            let open_pos = try_opt!(snippet.find_uncommented(\"{\")) + 1;\n+            visitor.last_pos = item.span.lo + BytePos(open_pos as u32);\n+\n+            for item in items {\n+                visitor.visit_impl_item(&item);\n+            }\n+\n+            result.push_str(trim_newlines(&visitor.buffer.to_string()));\n+            result.push('\\n');\n+            result.push_str(&indent_str);\n+        }\n+        result.push('}');\n+\n+        Some(result)\n+    } else {\n+        unreachable!();\n+    }\n+}\n+\n pub fn format_struct(context: &RewriteContext,\n                      item_name: &str,\n                      ident: ast::Ident,"}, {"sha": "4faa0a05f911a9d111eb0fd73a2e56fccf04267b", "filename": "src/types.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9cf8529e335995d54b178194d00172f7f7dd15d5/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf8529e335995d54b178194d00172f7f7dd15d5/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=9cf8529e335995d54b178194d00172f7f7dd15d5", "patch": "@@ -432,20 +432,22 @@ impl Rewrite for ast::PolyTraitRef {\n             // 6 is \"for<> \".len()\n             let extra_offset = lifetime_str.len() + 6;\n             let max_path_width = try_opt!(width.checked_sub(extra_offset));\n-            let path_str = try_opt!(rewrite_path(context,\n-                                                 false,\n-                                                 None,\n-                                                 &self.trait_ref.path,\n-                                                 max_path_width,\n-                                                 offset + extra_offset));\n+            let path_str = try_opt!(self.trait_ref\n+                                        .rewrite(context, max_path_width, offset + extra_offset));\n \n             Some(format!(\"for<{}> {}\", lifetime_str, path_str))\n         } else {\n-            rewrite_path(context, false, None, &self.trait_ref.path, width, offset)\n+            self.trait_ref.rewrite(context, width, offset)\n         }\n     }\n }\n \n+impl Rewrite for ast::TraitRef {\n+    fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n+        rewrite_path(context, false, None, &self.path, width, offset)\n+    }\n+}\n+\n impl Rewrite for ast::Ty {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         match self.node {"}, {"sha": "195ca265c1fb43a51e186b0268cbef19938e6362", "filename": "src/utils.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9cf8529e335995d54b178194d00172f7f7dd15d5/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf8529e335995d54b178194d00172f7f7dd15d5/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=9cf8529e335995d54b178194d00172f7f7dd15d5", "patch": "@@ -142,6 +142,13 @@ pub fn semicolon_for_stmt(stmt: &ast::Stmt) -> bool {\n     }\n }\n \n+#[inline]\n+pub fn trim_newlines(input: &str) -> &str {\n+    let start = input.find(|c| c != '\\n' && c != '\\r').unwrap_or(0);\n+    let end = input.rfind(|c| c != '\\n' && c != '\\r').unwrap_or(0) + 1;\n+    &input[start..end]\n+}\n+\n #[inline]\n #[cfg(target_pointer_width=\"64\")]\n // Based on the trick layed out at"}, {"sha": "fcc017c98f2b351a9f8a65807e37ca9288edf47e", "filename": "src/visitor.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9cf8529e335995d54b178194d00172f7f7dd15d5/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf8529e335995d54b178194d00172f7f7dd15d5/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=9cf8529e335995d54b178194d00172f7f7dd15d5", "patch": "@@ -21,7 +21,7 @@ use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;\n use macros::rewrite_macro;\n-use items::rewrite_static;\n+use items::{rewrite_static, format_impl};\n \n pub struct FmtVisitor<'a> {\n     pub parse_session: &'a ParseSess,\n@@ -200,14 +200,12 @@ impl<'a> FmtVisitor<'a> {\n             ast::Item_::ItemUse(ref vp) => {\n                 self.format_import(item.vis, vp, item.span);\n             }\n-            // FIXME(#78): format impl definitions.\n-            ast::Item_::ItemImpl(_, _, _, _, _, ref impl_items) => {\n+            ast::Item_::ItemImpl(..) => {\n                 self.format_missing_with_indent(item.span.lo);\n-                self.block_indent = self.block_indent.block_indent(self.config);\n-                for item in impl_items {\n-                    self.visit_impl_item(&item);\n+                if let Some(impl_str) = format_impl(&self.get_context(), item, self.block_indent) {\n+                    self.buffer.push_str(&impl_str);\n+                    self.last_pos = item.span.hi;\n                 }\n-                self.block_indent = self.block_indent.block_unindent(self.config);\n             }\n             // FIXME(#78): format traits.\n             ast::Item_::ItemTrait(_, _, _, ref trait_items) => {\n@@ -334,7 +332,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    fn visit_impl_item(&mut self, ii: &ast::ImplItem) {\n+    pub fn visit_impl_item(&mut self, ii: &ast::ImplItem) {\n         if self.visit_attrs(&ii.attrs) {\n             return;\n         }"}]}