{"sha": "aa72b1d3e3b946cd25fc622b8c5eb07645dc2a58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNzJiMWQzZTNiOTQ2Y2QyNWZjNjIyYjhjNWViMDc2NDVkYzJhNTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-05T16:41:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-05T16:41:33Z"}, "message": "note about stack-allocated variables being allocated objects", "tree": {"sha": "491dfd4bb516e58886e4c561174fe85983cacff7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/491dfd4bb516e58886e4c561174fe85983cacff7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa72b1d3e3b946cd25fc622b8c5eb07645dc2a58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa72b1d3e3b946cd25fc622b8c5eb07645dc2a58", "html_url": "https://github.com/rust-lang/rust/commit/aa72b1d3e3b946cd25fc622b8c5eb07645dc2a58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa72b1d3e3b946cd25fc622b8c5eb07645dc2a58/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4be067558962c004b638e4c6f162d50f7c0c98b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4be067558962c004b638e4c6f162d50f7c0c98b6", "html_url": "https://github.com/rust-lang/rust/commit/4be067558962c004b638e4c6f162d50f7c0c98b6"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "d871c12cd63dc7e26c5888c692c8e58e7c40e27f", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aa72b1d3e3b946cd25fc622b8c5eb07645dc2a58/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa72b1d3e3b946cd25fc622b8c5eb07645dc2a58/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=aa72b1d3e3b946cd25fc622b8c5eb07645dc2a58", "patch": "@@ -1120,7 +1120,8 @@ impl<T: ?Sized> *const T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of the same allocated object.\n+    ///   byte past the end of the same allocated object. Note that in Rust,\n+    ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n     /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -1223,7 +1224,8 @@ impl<T: ?Sized> *const T {\n     /// Behavior:\n     ///\n     /// * Both the starting and other pointer must be either in bounds or one\n-    ///   byte past the end of the same allocated object.\n+    ///   byte past the end of the same allocated object. Note that in Rust,\n+    ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n     /// * The distance between the pointers, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -1338,7 +1340,8 @@ impl<T: ?Sized> *const T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of the same allocated object.\n+    ///   byte past the end of the same allocated object. Note that in Rust,\n+    ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n     /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -1395,7 +1398,8 @@ impl<T: ?Sized> *const T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of the same allocated object.\n+    ///   byte past the end of the same allocated object. Note that in Rust,\n+    ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n     /// * The computed offset cannot exceed `isize::MAX` **bytes**.\n     ///\n@@ -1755,7 +1759,8 @@ impl<T: ?Sized> *mut T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of the same allocated object.\n+    ///   byte past the end of the same allocated object. Note that in Rust,\n+    ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n     /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -1901,7 +1906,8 @@ impl<T: ?Sized> *mut T {\n     /// Behavior:\n     ///\n     /// * Both the starting and other pointer must be either in bounds or one\n-    ///   byte past the end of the same allocated object.\n+    ///   byte past the end of the same allocated object. Note that in Rust,\n+    ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n     /// * The distance between the pointers, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -2005,7 +2011,8 @@ impl<T: ?Sized> *mut T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of the same allocated object.\n+    ///   byte past the end of the same allocated object. Note that in Rust,\n+    ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n     /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -2062,7 +2069,8 @@ impl<T: ?Sized> *mut T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of the same allocated object.\n+    ///   byte past the end of the same allocated object. Note that in Rust,\n+    ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n     /// * The computed offset cannot exceed `isize::MAX` **bytes**.\n     ///"}]}