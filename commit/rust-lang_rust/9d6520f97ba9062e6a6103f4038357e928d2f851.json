{"sha": "9d6520f97ba9062e6a6103f4038357e928d2f851", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNjUyMGY5N2JhOTA2MmU2YTYxMDNmNDAzODM1N2U5MjhkMmY4NTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-18T07:15:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-18T07:15:11Z"}, "message": "Auto merge of #35769 - eddyb:rollup, r=eddyb\n\nRollup of 12 pull requests\n\n- Successful merges: #35346, #35734, #35739, #35740, #35742, #35744, #35749, #35750, #35751, #35756, #35766, #35768\n- Failed merges:", "tree": {"sha": "75462aeda4704b8485cc05a306e46ba7240e4bb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75462aeda4704b8485cc05a306e46ba7240e4bb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d6520f97ba9062e6a6103f4038357e928d2f851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6520f97ba9062e6a6103f4038357e928d2f851", "html_url": "https://github.com/rust-lang/rust/commit/9d6520f97ba9062e6a6103f4038357e928d2f851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d6520f97ba9062e6a6103f4038357e928d2f851/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "169b6128fc2681c3d777819f47b7f9c7a90b9e6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/169b6128fc2681c3d777819f47b7f9c7a90b9e6e", "html_url": "https://github.com/rust-lang/rust/commit/169b6128fc2681c3d777819f47b7f9c7a90b9e6e"}, {"sha": "d69cd7207b58ab08dd07abae9a0409e4997a8ae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d69cd7207b58ab08dd07abae9a0409e4997a8ae9", "html_url": "https://github.com/rust-lang/rust/commit/d69cd7207b58ab08dd07abae9a0409e4997a8ae9"}], "stats": {"total": 770, "additions": 691, "deletions": 79}, "files": [{"sha": "dbe48a50cfa707a9cca532ed9659a72aff9326f3", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -19,7 +19,7 @@ Read [\"Installing Rust\"] from [The Book].\n    * `g++` 4.7 or later or `clang++` 3.x\n    * `python` 2.7 (but not 3.x)\n    * GNU `make` 3.81 or later\n-   * `cmake` 2.8.8 or later\n+   * `cmake` 3.4.3 or later\n    * `curl`\n    * `git`\n "}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/mips-unknown-linux-uclibc.mk", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/mk%2Fcfg%2Fmips-unknown-linux-uclibc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/mk%2Fcfg%2Fmips-unknown-linux-uclibc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmips-unknown-linux-uclibc.mk?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1 @@\n+# rustbuild-only target"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/mipsel-unknown-linux-uclibc.mk", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/mk%2Fcfg%2Fmipsel-unknown-linux-uclibc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/mk%2Fcfg%2Fmipsel-unknown-linux-uclibc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmipsel-unknown-linux-uclibc.mk?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1 @@\n+# rustbuild-only target"}, {"sha": "cc44d45c2cc75864ca7653f010567e0e7e66e1b9", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -22,6 +22,10 @@ BOOTSTRAP := $(CFG_PYTHON) $(CFG_SRC_DIR)src/bootstrap/bootstrap.py $(BOOTSTRAP_\n all:\n \t$(Q)$(BOOTSTRAP)\n \n+# Don\u2019t use $(Q) here, always show how to invoke the bootstrap script directly\n+help:\n+\t$(BOOTSTRAP) --help\n+\n clean:\n \t$(Q)$(BOOTSTRAP) --clean\n "}, {"sha": "04031fabc58667ecde8602b9fd83f9adf6760d4e", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -569,6 +569,13 @@ impl<'ast> Map<'ast> {\n         }\n     }\n \n+    pub fn expect_impl_item(&self, id: NodeId) -> &'ast ImplItem {\n+        match self.find(id) {\n+            Some(NodeImplItem(item)) => item,\n+            _ => bug!(\"expected impl item, found {}\", self.node_to_string(id))\n+        }\n+    }\n+\n     pub fn expect_trait_item(&self, id: NodeId) -> &'ast TraitItem {\n         match self.find(id) {\n             Some(NodeTraitItem(item)) => item,"}, {"sha": "1e053d6bfdab22b3f57d2c47c3a9135db7407692", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -523,6 +523,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn note_type_err(&self,\n                          diag: &mut DiagnosticBuilder<'tcx>,\n                          origin: TypeOrigin,\n+                         secondary_span: Option<(Span, String)>,\n                          values: Option<ValuePairs<'tcx>>,\n                          terr: &TypeError<'tcx>)\n     {\n@@ -553,6 +554,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         diag.span_label(span, &terr);\n+        if let Some((sp, msg)) = secondary_span {\n+            diag.span_label(sp, &msg);\n+        }\n \n         self.note_error_origin(diag, &origin);\n         self.check_and_note_conflicting_crates(diag, terr, span);\n@@ -569,7 +573,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             self.tcx.sess, trace.origin.span(), E0308,\n             \"{}\", trace.origin.as_failure_str()\n         );\n-        self.note_type_err(&mut diag, trace.origin, Some(trace.values), terr);\n+        self.note_type_err(&mut diag, trace.origin, None, Some(trace.values), terr);\n         diag\n     }\n "}, {"sha": "d6f263fcebeb088f739bc5d3f55e164dc2e2df4c", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -161,7 +161,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 self.tcx.sess, origin.span(), E0271,\n                 \"type mismatch resolving `{}`\", predicate\n             );\n-            self.note_type_err(&mut diag, origin, values, err);\n+            self.note_type_err(&mut diag, origin, None, values, err);\n             self.note_obligation_cause(&mut diag, obligation);\n             diag.emit();\n         });"}, {"sha": "529bd310391cde4b9a8b4ad019d94bc27732d18e", "filename": "src/librustc_back/target/mips_unknown_linux_uclibc.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_uclibc.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"mips-unknown-linux-uclibc\".to_string(),\n+        target_endian: \"big\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n+        arch: \"mips\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"uclibc\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: TargetOptions {\n+            cpu: \"mips32r2\".to_string(),\n+            features: \"+mips32r2,+soft-float\".to_string(),\n+            max_atomic_width: 32,\n+            ..super::linux_base::opts()\n+        },\n+    })\n+}"}, {"sha": "1040a0fbe1724b558bad164e19819bd832ba085b", "filename": "src/librustc_back/target/mipsel_unknown_linux_uclibc.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_uclibc.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"mipsel-unknown-linux-uclibc\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n+        arch: \"mips\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"uclibc\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+\n+        options: TargetOptions {\n+            cpu: \"mips32\".to_string(),\n+            features: \"+mips32,+soft-float\".to_string(),\n+            max_atomic_width: 32,\n+            ..super::linux_base::opts()\n+        },\n+    })\n+}"}, {"sha": "86cd86d282cf5d121842cdb4d3581f9c1f5b7597", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -143,6 +143,8 @@ supported_targets! {\n     (\"i686-unknown-linux-musl\", i686_unknown_linux_musl),\n     (\"mips-unknown-linux-musl\", mips_unknown_linux_musl),\n     (\"mipsel-unknown-linux-musl\", mipsel_unknown_linux_musl),\n+    (\"mips-unknown-linux-uclibc\", mips_unknown_linux_uclibc),\n+    (\"mipsel-unknown-linux-uclibc\", mipsel_unknown_linux_uclibc),\n \n     (\"i686-linux-android\", i686_linux_android),\n     (\"arm-linux-androideabi\", arm_linux_androideabi),"}, {"sha": "3c82358542876c4174181e245a3ef6c6b7bdfc5a", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -1121,10 +1121,11 @@ fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n                 .span_label(p.span, &format!(\"moves value into pattern guard\"))\n                 .emit();\n         } else if by_ref_span.is_some() {\n-            let mut err = struct_span_err!(cx.tcx.sess, p.span, E0009,\n-                                           \"cannot bind by-move and by-ref in the same pattern\");\n-            span_note!(&mut err, by_ref_span.unwrap(), \"by-ref binding occurs here\");\n-            err.emit();\n+            struct_span_err!(cx.tcx.sess, p.span, E0009,\n+                            \"cannot bind by-move and by-ref in the same pattern\")\n+                    .span_label(p.span, &format!(\"by-move pattern here\"))\n+                    .span_label(by_ref_span.unwrap(), &format!(\"both by-ref and by-move used\"))\n+                    .emit();\n         }\n     };\n "}, {"sha": "2f83c0ef1bebbc4bcadb36afa537eeed1c483c79", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 59, "deletions": 20, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -198,8 +198,11 @@ impl<'tcx> Scope<'tcx> {\n     ///\n     /// Should always be run for all inner scopes when a drop is pushed into some scope enclosing a\n     /// larger extent of code.\n-    fn invalidate_cache(&mut self) {\n-        self.cached_exits = FnvHashMap();\n+    ///\n+    /// `unwind` controls whether caches for the unwind branch are also invalidated.\n+    fn invalidate_cache(&mut self, unwind: bool) {\n+        self.cached_exits.clear();\n+        if !unwind { return; }\n         for dropdata in &mut self.drops {\n             if let DropKind::Value { ref mut cached_block } = dropdata.kind {\n                 *cached_block = None;\n@@ -455,25 +458,65 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         };\n \n         for scope in self.scopes.iter_mut().rev() {\n-            if scope.extent == extent {\n+            let this_scope = scope.extent == extent;\n+            // When building drops, we try to cache chains of drops in such a way so these drops\n+            // could be reused by the drops which would branch into the cached (already built)\n+            // blocks.  This, however, means that whenever we add a drop into a scope which already\n+            // had some blocks built (and thus, cached) for it, we must invalidate all caches which\n+            // might branch into the scope which had a drop just added to it. This is necessary,\n+            // because otherwise some other code might use the cache to branch into already built\n+            // chain of drops, essentially ignoring the newly added drop.\n+            //\n+            // For example consider there\u2019s two scopes with a drop in each. These are built and\n+            // thus the caches are filled:\n+            //\n+            // +--------------------------------------------------------+\n+            // | +---------------------------------+                    |\n+            // | | +--------+     +-------------+  |  +---------------+ |\n+            // | | | return | <-+ | drop(outer) | <-+ |  drop(middle) | |\n+            // | | +--------+     +-------------+  |  +---------------+ |\n+            // | +------------|outer_scope cache|--+                    |\n+            // +------------------------------|middle_scope cache|------+\n+            //\n+            // Now, a new, inner-most scope is added along with a new drop into both inner-most and\n+            // outer-most scopes:\n+            //\n+            // +------------------------------------------------------------+\n+            // | +----------------------------------+                       |\n+            // | | +--------+      +-------------+  |   +---------------+   | +-------------+\n+            // | | | return | <+   | drop(new)   | <-+  |  drop(middle) | <--+| drop(inner) |\n+            // | | +--------+  |   | drop(outer) |  |   +---------------+   | +-------------+\n+            // | |             +-+ +-------------+  |                       |\n+            // | +---|invalid outer_scope cache|----+                       |\n+            // +----=----------------|invalid middle_scope cache|-----------+\n+            //\n+            // If, when adding `drop(new)` we do not invalidate the cached blocks for both\n+            // outer_scope and middle_scope, then, when building drops for the inner (right-most)\n+            // scope, the old, cached blocks, without `drop(new)` will get used, producing the\n+            // wrong results.\n+            //\n+            // The cache and its invalidation for unwind branch is somewhat special. The cache is\n+            // per-drop, rather than per scope, which has a several different implications. Adding\n+            // a new drop into a scope will not invalidate cached blocks of the prior drops in the\n+            // scope. That is true, because none of the already existing drops will have an edge\n+            // into a block with the newly added drop.\n+            //\n+            // Note that this code iterates scopes from the inner-most to the outer-most,\n+            // invalidating caches of each scope visited. This way bare minimum of the\n+            // caches gets invalidated. i.e. if a new drop is added into the middle scope, the\n+            // cache of outer scpoe stays intact.\n+            let invalidate_unwind = needs_drop && !this_scope;\n+            scope.invalidate_cache(invalidate_unwind);\n+            if this_scope {\n                 if let DropKind::Value { .. } = drop_kind {\n                     scope.needs_cleanup = true;\n                 }\n-\n-                // No need to invalidate any caches here. The just-scheduled drop will branch into\n-                // the drop that comes before it in the vector.\n                 scope.drops.push(DropData {\n                     span: span,\n                     location: lvalue.clone(),\n                     kind: drop_kind\n                 });\n                 return;\n-            } else {\n-                // We must invalidate all the cached_blocks leading up to the scope we\u2019re\n-                // looking for, because all of the blocks in the chain will become incorrect.\n-                if let DropKind::Value { .. } = drop_kind {\n-                    scope.invalidate_cache()\n-                }\n             }\n         }\n         span_bug!(span, \"extent {:?} not in scope to drop {:?}\", extent, lvalue);\n@@ -490,11 +533,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                              value: &Lvalue<'tcx>,\n                              item_ty: Ty<'tcx>) {\n         for scope in self.scopes.iter_mut().rev() {\n+            // See the comment in schedule_drop above. The primary difference is that we invalidate\n+            // the unwind blocks unconditionally. That\u2019s because the box free may be considered\n+            // outer-most cleanup within the scope.\n+            scope.invalidate_cache(true);\n             if scope.extent == extent {\n                 assert!(scope.free.is_none(), \"scope already has a scheduled free!\");\n-                // We also must invalidate the caches in the scope for which the free is scheduled\n-                // because the drops must branch into the free we schedule here.\n-                scope.invalidate_cache();\n                 scope.needs_cleanup = true;\n                 scope.free = Some(FreeData {\n                     span: span,\n@@ -503,11 +547,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     cached_block: None\n                 });\n                 return;\n-            } else {\n-                // We must invalidate all the cached_blocks leading up to the scope we\u2019re looking\n-                // for, because otherwise some/most of the blocks in the chain will become\n-                // incorrect.\n-                scope.invalidate_cache();\n             }\n         }\n         span_bug!(span, \"extent {:?} not in scope to free {:?}\", extent, value);"}, {"sha": "5183d68065c7d1b1acb8ce0ba91e49bc6bda4726", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -891,7 +891,7 @@ A `struct` variant name was used like a function name.\n Erroneous code example:\n \n ```compile_fail,E0423\n-struct Foo { a: bool};\n+struct Foo { a: bool };\n \n let f = Foo();\n // error: `Foo` is a struct variant name, but this expression uses"}, {"sha": "b91ede5b2fa8a02495f623c53b4fa77ae219af93", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -102,7 +102,7 @@ enum ResolutionError<'a> {\n     /// error E0402: cannot use an outer type parameter in this context\n     OuterTypeParameterContext,\n     /// error E0403: the name is already used for a type parameter in this type parameter list\n-    NameAlreadyUsedInTypeParameterList(Name),\n+    NameAlreadyUsedInTypeParameterList(Name, &'a Span),\n     /// error E0404: is not a trait\n     IsNotATrait(&'a str),\n     /// error E0405: use of undeclared trait name\n@@ -209,13 +209,17 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n                              E0402,\n                              \"cannot use an outer type parameter in this context\")\n         }\n-        ResolutionError::NameAlreadyUsedInTypeParameterList(name) => {\n-            struct_span_err!(resolver.session,\n-                             span,\n-                             E0403,\n-                             \"the name `{}` is already used for a type parameter in this type \\\n-                              parameter list\",\n-                             name)\n+        ResolutionError::NameAlreadyUsedInTypeParameterList(name, first_use_span) => {\n+             let mut err = struct_span_err!(resolver.session,\n+                                            span,\n+                                            E0403,\n+                                            \"the name `{}` is already used for a type parameter \\\n+                                            in this type parameter list\",\n+                                            name);\n+             err.span_label(span, &format!(\"already used\"));\n+             err.span_label(first_use_span.clone(), &format!(\"first use of `{}`\", name));\n+             err\n+\n         }\n         ResolutionError::IsNotATrait(name) => {\n             let mut err = struct_span_err!(resolver.session,\n@@ -237,12 +241,14 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n             err\n         }\n         ResolutionError::MethodNotMemberOfTrait(method, trait_) => {\n-            struct_span_err!(resolver.session,\n-                             span,\n-                             E0407,\n-                             \"method `{}` is not a member of trait `{}`\",\n-                             method,\n-                             trait_)\n+            let mut err = struct_span_err!(resolver.session,\n+                                           span,\n+                                           E0407,\n+                                           \"method `{}` is not a member of trait `{}`\",\n+                                           method,\n+                                           trait_);\n+            err.span_label(span, &format!(\"not a member of `{}`\", trait_));\n+            err\n         }\n         ResolutionError::TypeNotMemberOfTrait(type_, trait_) => {\n             struct_span_err!(resolver.session,\n@@ -1726,17 +1732,19 @@ impl<'a> Resolver<'a> {\n         match type_parameters {\n             HasTypeParameters(generics, rib_kind) => {\n                 let mut function_type_rib = Rib::new(rib_kind);\n-                let mut seen_bindings = HashSet::new();\n+                let mut seen_bindings = HashMap::new();\n                 for type_parameter in &generics.ty_params {\n                     let name = type_parameter.ident.name;\n                     debug!(\"with_type_parameter_rib: {}\", type_parameter.id);\n \n-                    if seen_bindings.contains(&name) {\n+                    if seen_bindings.contains_key(&name) {\n+                        let span = seen_bindings.get(&name).unwrap();\n                         resolve_error(self,\n                                       type_parameter.span,\n-                                      ResolutionError::NameAlreadyUsedInTypeParameterList(name));\n+                                      ResolutionError::NameAlreadyUsedInTypeParameterList(name,\n+                                                                                          span));\n                     }\n-                    seen_bindings.insert(name);\n+                    seen_bindings.entry(name).or_insert(type_parameter.span);\n \n                     // plain insert (no renaming)\n                     let def_id = self.definitions.local_def_id(type_parameter.id);"}, {"sha": "043883df035d0378ed7b34a52b4bd558aaa81cc8", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 85, "deletions": 21, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -12,10 +12,9 @@ use middle::free_region::FreeRegionMap;\n use rustc::infer::{self, InferOk, TypeOrigin};\n use rustc::ty;\n use rustc::traits::{self, Reveal};\n-use rustc::ty::error::ExpectedFound;\n+use rustc::ty::error::{ExpectedFound, TypeError};\n use rustc::ty::subst::{Subst, Substs};\n-use rustc::hir::map::Node;\n-use rustc::hir::{ImplItemKind, TraitItem_};\n+use rustc::hir::{ImplItemKind, TraitItem_, Ty_};\n \n use syntax::ast;\n use syntax_pos::Span;\n@@ -300,6 +299,7 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                                  impl_m_span,\n                                                  impl_m_body_id,\n                                                  &impl_sig);\n+        let impl_args = impl_sig.inputs.clone();\n         let impl_fty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {\n             unsafety: impl_m.fty.unsafety,\n             abi: impl_m.fty.abi,\n@@ -318,6 +318,7 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                                  impl_m_span,\n                                                  impl_m_body_id,\n                                                  &trait_sig);\n+        let trait_args = trait_sig.inputs.clone();\n         let trait_fty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {\n             unsafety: trait_m.fty.unsafety,\n             abi: trait_m.fty.abi,\n@@ -331,16 +332,82 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                    impl_fty,\n                    trait_fty);\n \n+            let impl_m_iter = match tcx.map.expect_impl_item(impl_m_node_id).node {\n+                ImplItemKind::Method(ref impl_m_sig, _) => impl_m_sig.decl.inputs.iter(),\n+                _ => bug!(\"{:?} is not a method\", impl_m)\n+            };\n+\n+            let (impl_err_span, trait_err_span) = match terr {\n+                TypeError::Mutability => {\n+                    if let Some(trait_m_node_id) = tcx.map.as_local_node_id(trait_m.def_id) {\n+                        let trait_m_iter = match tcx.map.expect_trait_item(trait_m_node_id).node {\n+                            TraitItem_::MethodTraitItem(ref trait_m_sig, _) =>\n+                                trait_m_sig.decl.inputs.iter(),\n+                            _ => bug!(\"{:?} is not a MethodTraitItem\", trait_m)\n+                        };\n+\n+                        impl_m_iter.zip(trait_m_iter).find(|&(ref impl_arg, ref trait_arg)| {\n+                            match (&impl_arg.ty.node, &trait_arg.ty.node) {\n+                                (&Ty_::TyRptr(_, ref impl_mt), &Ty_::TyRptr(_, ref trait_mt)) |\n+                                (&Ty_::TyPtr(ref impl_mt), &Ty_::TyPtr(ref trait_mt)) =>\n+                                    impl_mt.mutbl != trait_mt.mutbl,\n+                                _ => false\n+                            }\n+                        }).map(|(ref impl_arg, ref trait_arg)| {\n+                            match (impl_arg.to_self(), trait_arg.to_self()) {\n+                                (Some(impl_self), Some(trait_self)) =>\n+                                    (impl_self.span, Some(trait_self.span)),\n+                                (None, None) => (impl_arg.ty.span, Some(trait_arg.ty.span)),\n+                                _ => bug!(\"impl and trait fns have different first args, \\\n+                                           impl: {:?}, trait: {:?}\", impl_arg, trait_arg)\n+                            }\n+                        }).unwrap_or((origin.span(), tcx.map.span_if_local(trait_m.def_id)))\n+                    } else {\n+                        (origin.span(), tcx.map.span_if_local(trait_m.def_id))\n+                    }\n+                }\n+                TypeError::Sorts(ExpectedFound { expected, found }) => {\n+                    if let Some(trait_m_node_id) = tcx.map.as_local_node_id(trait_m.def_id) {\n+                        let trait_m_iter = match tcx.map.expect_trait_item(trait_m_node_id).node {\n+                            TraitItem_::MethodTraitItem(ref trait_m_sig, _) =>\n+                                trait_m_sig.decl.inputs.iter(),\n+                            _ => bug!(\"{:?} is not a MethodTraitItem\", trait_m)\n+                        };\n+                        let impl_iter = impl_args.iter();\n+                        let trait_iter = trait_args.iter();\n+                        let arg_idx = impl_iter.zip(trait_iter)\n+                                               .position(|(impl_arg_ty, trait_arg_ty)| {\n+                                                *impl_arg_ty == found && *trait_arg_ty == expected\n+                                               }).unwrap();\n+                        impl_m_iter.zip(trait_m_iter)\n+                                   .nth(arg_idx)\n+                                   .map(|(impl_arg, trait_arg)|\n+                                        (impl_arg.ty.span, Some(trait_arg.ty.span)))\n+                                   .unwrap_or(\n+                                    (origin.span(), tcx.map.span_if_local(trait_m.def_id)))\n+                    } else {\n+                        (origin.span(), tcx.map.span_if_local(trait_m.def_id))\n+                    }\n+                }\n+                _ => (origin.span(), tcx.map.span_if_local(trait_m.def_id))\n+            };\n+\n+            let origin = TypeOrigin::MethodCompatCheck(impl_err_span);\n+\n             let mut diag = struct_span_err!(\n                 tcx.sess, origin.span(), E0053,\n                 \"method `{}` has an incompatible type for trait\", trait_m.name\n             );\n+\n             infcx.note_type_err(\n-                &mut diag, origin,\n+                &mut diag,\n+                origin,\n+                trait_err_span.map(|sp| (sp, format!(\"original trait requirement\"))),\n                 Some(infer::ValuePairs::Types(ExpectedFound {\n-                    expected: trait_fty,\n-                    found: impl_fty\n-                })), &terr\n+                     expected: trait_fty,\n+                     found: impl_fty\n+                })),\n+                &terr\n             );\n             diag.emit();\n             return\n@@ -487,12 +554,9 @@ pub fn compare_const_impl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                    trait_ty);\n \n             // Locate the Span containing just the type of the offending impl\n-            if let Some(impl_trait_node) = tcx.map.get_if_local(impl_c.def_id) {\n-                if let Node::NodeImplItem(impl_trait_item) = impl_trait_node {\n-                    if let ImplItemKind::Const(ref ty, _) = impl_trait_item.node {\n-                        origin = TypeOrigin::Misc(ty.span);\n-                    }\n-                }\n+            match tcx.map.expect_impl_item(impl_c_node_id).node {\n+                ImplItemKind::Const(ref ty, _) => origin = TypeOrigin::Misc(ty.span),\n+                _ => bug!(\"{:?} is not a impl const\", impl_c)\n             }\n \n             let mut diag = struct_span_err!(\n@@ -502,16 +566,16 @@ pub fn compare_const_impl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             );\n \n             // Add a label to the Span containing just the type of the item\n-            if let Some(orig_trait_node) = tcx.map.get_if_local(trait_c.def_id) {\n-                if let Node::NodeTraitItem(orig_trait_item) = orig_trait_node {\n-                    if let TraitItem_::ConstTraitItem(ref ty, _) = orig_trait_item.node {\n-                        diag.span_label(ty.span, &format!(\"original trait requirement\"));\n-                    }\n-                }\n-            }\n+            let trait_c_node_id = tcx.map.as_local_node_id(trait_c.def_id).unwrap();\n+            let trait_c_span = match tcx.map.expect_trait_item(trait_c_node_id).node {\n+                TraitItem_::ConstTraitItem(ref ty, _) => ty.span,\n+                _ => bug!(\"{:?} is not a trait const\", trait_c)\n+            };\n \n             infcx.note_type_err(\n-                &mut diag, origin,\n+                &mut diag,\n+                origin,\n+                Some((trait_c_span, format!(\"original trait requirement\"))),\n                 Some(infer::ValuePairs::Types(ExpectedFound {\n                     expected: trait_ty,\n                     found: impl_ty"}, {"sha": "e6da03a903f219756df56221605c6e8f2ccd2459", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -301,8 +301,11 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n             }\n \n             ref other => {\n-                span_err!(tcx.sess, it.span, E0093,\n-                          \"unrecognized intrinsic function: `{}`\", *other);\n+                struct_span_err!(tcx.sess, it.span, E0093,\n+                                \"unrecognized intrinsic function: `{}`\",\n+                                *other)\n+                                .span_label(it.span, &format!(\"unrecognized intrinsic\"))\n+                                .emit();\n                 return;\n             }\n         };"}, {"sha": "ff0b86aa595408da4eee1a88f87b53205eea7dfd", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -3000,6 +3000,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                          but no field with that name was found\",\n                         field.node, actual)\n             }, expr_t);\n+            if let ty::TyRawPtr(..) = expr_t.sty {\n+                err.note(&format!(\"`{0}` is a native pointer; perhaps you need to deref with \\\n+                                  `(*{0}).{1}`\", pprust::expr_to_string(base), field.node));\n+            }\n             if let ty::TyStruct(def, _) = expr_t.sty {\n                 Self::suggest_field_names(&mut err, def.struct_variant(), field, vec![]);\n             }"}, {"sha": "c3eb3c7608f439231d0c1340af6b720f113b4bf4", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -1 +1 @@\n-Subproject commit 786aad117be48547f4ca50fae84c4879fa992d4d\n+Subproject commit c3eb3c7608f439231d0c1340af6b720f113b4bf4"}, {"sha": "59c6d53bfa3b9dd8603f5f9e14f0d90cf11546f5", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2016-08-07\n+2016-08-17"}, {"sha": "767fc0cc5dc07eb29abc9ba6ce6a83f8231df6a8", "filename": "src/test/compile-fail/E0009.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0009.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0009.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0009.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -12,7 +12,10 @@ fn main() {\n     struct X { x: (), }\n     let x = Some((X { x: () }, X { x: () }));\n     match x {\n-        Some((y, ref z)) => {}, //~ ERROR E0009\n+        Some((y, ref z)) => {},\n+        //~^ ERROR E0009\n+        //~| NOTE by-move pattern here\n+        //~| NOTE both by-ref and by-move used\n         None => panic!()\n     }\n }"}, {"sha": "7022010714aa77ed380d5ad5110ae56740150a94", "filename": "src/test/compile-fail/E0053.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0053.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -9,15 +9,21 @@\n // except according to those terms.\n \n trait Foo {\n-    fn foo(x: u16);\n-    fn bar(&self);\n+    fn foo(x: u16); //~ NOTE original trait requirement\n+    fn bar(&self); //~ NOTE original trait requirement\n }\n \n struct Bar;\n \n impl Foo for Bar {\n-    fn foo(x: i16) { } //~ ERROR E0053\n-    fn bar(&mut self) { } //~ ERROR E0053\n+    fn foo(x: i16) { }\n+    //~^ ERROR method `foo` has an incompatible type for trait\n+    //~| NOTE expected u16\n+    fn bar(&mut self) { }\n+    //~^ ERROR method `bar` has an incompatible type for trait\n+    //~| NOTE values differ in mutability\n+    //~| NOTE expected type `fn(&Bar)`\n+    //~| NOTE found type `fn(&mut Bar)`\n }\n \n fn main() {"}, {"sha": "fdc48455a679c03c028e73958b8e2f53cdbc56d1", "filename": "src/test/compile-fail/E0093.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0093.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0093.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0093.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -10,7 +10,9 @@\n \n #![feature(intrinsics)]\n extern \"rust-intrinsic\" {\n-    fn foo(); //~ ERROR E0093\n+    fn foo();\n+    //~^ ERROR E0093\n+    //~| NOTE unrecognized intrinsic\n }\n \n fn main() {"}, {"sha": "651054580408dc7cbf2c57bed36369ceefa62b8f", "filename": "src/test/compile-fail/E0221.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0221.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -18,7 +18,11 @@ trait Foo {\n trait Bar : Foo {\n     type A: T2;\n     fn do_something() {\n-        let _: Self::A; //~ ERROR E0221\n+        let _: Self::A;\n+        //~^ ERROR E0221\n+        //~| NOTE ambiguous associated type `A`\n+        //~| NOTE associated type `Self` could derive from `Foo`\n+        //~| NOTE associated type `Self` could derive from `Bar`\n     }\n }\n "}, {"sha": "cd8532fc4c305bebf8cb399d9747010fb3f4d651", "filename": "src/test/compile-fail/E0403.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0403.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n fn foo<T, T>(s: T, u: T) {} //~ ERROR E0403\n+                            //~| NOTE already used\n+                            //~| NOTE first use of `T`\n \n fn main() {\n }"}, {"sha": "2a150b7451210a7a380c98b19a80c0a6857958ca", "filename": "src/test/compile-fail/E0407.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0407.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -16,7 +16,9 @@ struct Bar;\n \n impl Foo for Bar {\n     fn a() {}\n-    fn b() {} //~ ERROR E0407\n+    fn b() {}\n+    //~^ ERROR E0407\n+    //~| NOTE not a member of `Foo`\n }\n \n fn main() {"}, {"sha": "f5fea77cf9639a001500ece7b31521280b88a88e", "filename": "src/test/compile-fail/E0423.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0423.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0423.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0423.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main () {\n+    struct Foo { a: bool };\n+\n+    let f = Foo(); //~ ERROR E0423\n+}"}, {"sha": "445d0c5f3edc0db383c7925cdc243d22b23eab57", "filename": "src/test/compile-fail/E0424.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0424.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn bar(self) {}\n+\n+    fn foo() {\n+        self.bar(); //~ ERROR E0424\n+    }\n+}\n+\n+fn main () {\n+}"}, {"sha": "70f4b1107ad4dfa30a9213d38daacecf61b18839", "filename": "src/test/compile-fail/E0425.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0425.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0425.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0425.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn bar() {\n+        Self; //~ ERROR E0425\n+    }\n+}\n+\n+fn main () {\n+}"}, {"sha": "2eb4c2d3b5e044c44322fc4c66d858e618dfc8df", "filename": "src/test/compile-fail/E0426.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0426.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0426.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0426.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main () {\n+    loop {\n+        break 'a; //~ ERROR E0426\n+    }\n+}"}, {"sha": "42e237d31cbee93cebf6478971e9133b0bb3ede6", "filename": "src/test/compile-fail/E0428.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0428.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Bar;\n+struct Bar; //~ ERROR E0428\n+            //~^ ERROR E0428\n+\n+fn main () {\n+}"}, {"sha": "a7d19744f3fc7c928b254f896dd1a4a10df96f4a", "filename": "src/test/compile-fail/E0429.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0429.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt::self; //~ ERROR E0429\n+                    //~^ ERROR E0432\n+\n+fn main () {\n+}"}, {"sha": "992876dd29443c9ff2eca57a42cc65624941edca", "filename": "src/test/compile-fail/E0430.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0430.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0430.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0430.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt::{self, self}; //~ ERROR E0430\n+                            //~^ ERROR E0252\n+\n+fn main () {\n+}"}, {"sha": "09ddc1efaf47ca16fd31c8e78f13dfd9a7eff1f9", "filename": "src/test/compile-fail/E0431.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0431.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0431.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0431.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use {self}; //~ ERROR E0431\n+\n+fn main () {\n+}"}, {"sha": "08d699ee4ca59334e45c9a5a3944b6c33fbaabab", "filename": "src/test/compile-fail/E0432.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0432.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0432.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0432.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use something::Foo; //~ ERROR E0432\n+\n+fn main () {\n+}"}, {"sha": "916d6220eb919a62eba5a07bdad9c5aca9ef6876", "filename": "src/test/compile-fail/E0433.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0433.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main () {\n+    let map = HashMap::new(); //~ ERROR E0433\n+}"}, {"sha": "747d9f72c421b490c4ae6c3c7feb54c7a282c7cd", "filename": "src/test/compile-fail/E0434.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0434.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo() {\n+    let y = 5;\n+    fn bar() -> u32 {\n+        y //~ ERROR E0434\n+    }\n+}\n+\n+fn main () {\n+}"}, {"sha": "f6cba15a0bff8db93981fe0ab791e9ef0a59a2c7", "filename": "src/test/compile-fail/E0435.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0435.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0435.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0435.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main () {\n+    let foo = 42u32;\n+    const FOO : u32 = foo; //~ ERROR E0435\n+}"}, {"sha": "7440a82773e7af4675c6cd91096b8dc38054e1e3", "filename": "src/test/compile-fail/E0437.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0437.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0437.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0437.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {}\n+\n+impl Foo for i32 {\n+    type Bar = bool; //~ ERROR E0437\n+}\n+\n+fn main () {\n+}"}, {"sha": "b3d453072049e9db7f9ccb2a3a1942e3609d4b6c", "filename": "src/test/compile-fail/E0438.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0438.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0438.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0438.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+\n+trait Foo {}\n+\n+impl Foo for i32 {\n+    const BAR: bool = true; //~ ERROR E0438\n+}\n+\n+fn main () {\n+}"}, {"sha": "52443432021b24bb0073744146e429d2fa2d424b", "filename": "src/test/compile-fail/E0439.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0439.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0439.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0439.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(platform_intrinsics)]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_shuffle<A,B>(a: A, b: A, c: [u32; 8]) -> B; //~ ERROR E0439\n+}\n+\n+fn main () {\n+}"}, {"sha": "04e7584008df9dc3de085d544e312e204089de4f", "filename": "src/test/compile-fail/E0440.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0440.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2FE0440.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0440.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(repr_simd)]\n+#![feature(platform_intrinsics)]\n+\n+#[repr(simd)]\n+struct f64x2(f64, f64);\n+\n+extern \"platform-intrinsic\" {\n+    fn x86_mm_movemask_pd<T>(x: f64x2) -> i32; //~ ERROR E0440\n+}\n+\n+fn main () {\n+}"}, {"sha": "308be46271531dcd070d6f3b33c5042c18196af4", "filename": "src/test/compile-fail/issue-11004.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2Fissue-11004.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fcompile-fail%2Fissue-11004.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11004.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem;\n+\n+struct A { x: i32, y: f64 }\n+\n+#[cfg(not(works))]\n+unsafe fn access(n:*mut A) -> (i32, f64) {\n+    let x : i32 = n.x; //~ ERROR attempted access of field `x`\n+                       //~| NOTE `n` is a native pointer; perhaps you need to deref with `(*n).x`\n+    let y : f64 = n.y; //~ ERROR attempted access of field `y`\n+                       //~| NOTE `n` is a native pointer; perhaps you need to deref with `(*n).y`\n+    (x, y)\n+}\n+\n+#[cfg(works)]\n+unsafe fn access(n:*mut A) -> (i32, f64) {\n+    let x : i32 = (*n).x;\n+    let y : f64 = (*n).y;\n+    (x, y)\n+}\n+\n+fn main() {\n+    let a :  A = A { x: 3, y: 3.14 };\n+    let p : &A = &a;\n+    let (x,y) = unsafe {\n+        let n : *mut A = mem::transmute(p);\n+        access(n)\n+    };\n+    println!(\"x: {}, y: {}\", x, y);\n+}"}, {"sha": "c27e57358b09b848c18bfbcd974b2bbcf2cd3486", "filename": "src/test/run-pass/mir_early_return_scope.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Frun-pass%2Fmir_early_return_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Frun-pass%2Fmir_early_return_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_early_return_scope.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static mut DROP: bool = false;\n+\n+struct ConnWrap(Conn);\n+impl ::std::ops::Deref for ConnWrap {\n+    type Target=Conn;\n+    fn deref(&self) -> &Conn { &self.0 }\n+}\n+\n+struct Conn;\n+impl Drop for  Conn {\n+    fn drop(&mut self) { unsafe { DROP = true; } }\n+}\n+\n+fn inner() {\n+    let conn = &*match Some(ConnWrap(Conn)) {\n+        Some(val) => val,\n+        None => return,\n+    };\n+    return;\n+}\n+\n+fn main() {\n+    inner();\n+    unsafe {\n+        assert_eq!(DROP, true);\n+    }\n+}"}, {"sha": "099c8699e493bcc67c4f7b18d20f76ee1d9333cc", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.rs?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// rustc-env:RUST_NEW_ERROR_FORMAT\n+\n+trait Foo {\n+    fn foo(x: u16);\n+    fn bar(&mut self, bar: &mut Bar);\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    fn foo(x: i16) { }\n+    fn bar(&mut self, bar: &Bar) { }\n+}\n+\n+fn main() {\n+}\n+"}, {"sha": "e5dfdc8e910df0264be602e05992ee9827ce80d3", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6520f97ba9062e6a6103f4038357e928d2f851/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=9d6520f97ba9062e6a6103f4038357e928d2f851", "patch": "@@ -0,0 +1,23 @@\n+error[E0053]: method `foo` has an incompatible type for trait\n+  --> $DIR/trait-impl-fn-incompatibility.rs:21:15\n+   |\n+14 |     fn foo(x: u16);\n+   |               --- original trait requirement\n+...\n+21 |     fn foo(x: i16) { }\n+   |               ^^^ expected u16, found i16\n+\n+error[E0053]: method `bar` has an incompatible type for trait\n+  --> $DIR/trait-impl-fn-incompatibility.rs:22:28\n+   |\n+15 |     fn bar(&mut self, bar: &mut Bar);\n+   |                            -------- original trait requirement\n+...\n+22 |     fn bar(&mut self, bar: &Bar) { }\n+   |                            ^^^^ values differ in mutability\n+   |\n+   = note: expected type `fn(&mut Bar, &mut Bar)`\n+   = note:    found type `fn(&mut Bar, &Bar)`\n+\n+error: aborting due to 2 previous errors\n+"}]}