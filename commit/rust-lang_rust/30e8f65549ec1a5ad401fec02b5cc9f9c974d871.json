{"sha": "30e8f65549ec1a5ad401fec02b5cc9f9c974d871", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZThmNjU1NDllYzFhNWFkNDAxZmVjMDJiNWNjOWY5Yzk3NGQ4NzE=", "commit": {"author": {"name": "Hideki Sekine", "email": "sekineh@me.com", "date": "2019-10-25T10:31:35Z"}, "committer": {"name": "Hideki Sekine", "email": "sekineh@me.com", "date": "2019-10-25T10:31:35Z"}, "message": "Simplify .drain_sorted() and its doc.", "tree": {"sha": "93343dbc9b24dfd3b091cd10bfff592a1c328195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93343dbc9b24dfd3b091cd10bfff592a1c328195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30e8f65549ec1a5ad401fec02b5cc9f9c974d871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30e8f65549ec1a5ad401fec02b5cc9f9c974d871", "html_url": "https://github.com/rust-lang/rust/commit/30e8f65549ec1a5ad401fec02b5cc9f9c974d871", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30e8f65549ec1a5ad401fec02b5cc9f9c974d871/comments", "author": {"login": "sekineh", "id": 3956266, "node_id": "MDQ6VXNlcjM5NTYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3956266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sekineh", "html_url": "https://github.com/sekineh", "followers_url": "https://api.github.com/users/sekineh/followers", "following_url": "https://api.github.com/users/sekineh/following{/other_user}", "gists_url": "https://api.github.com/users/sekineh/gists{/gist_id}", "starred_url": "https://api.github.com/users/sekineh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sekineh/subscriptions", "organizations_url": "https://api.github.com/users/sekineh/orgs", "repos_url": "https://api.github.com/users/sekineh/repos", "events_url": "https://api.github.com/users/sekineh/events{/privacy}", "received_events_url": "https://api.github.com/users/sekineh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sekineh", "id": 3956266, "node_id": "MDQ6VXNlcjM5NTYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3956266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sekineh", "html_url": "https://github.com/sekineh", "followers_url": "https://api.github.com/users/sekineh/followers", "following_url": "https://api.github.com/users/sekineh/following{/other_user}", "gists_url": "https://api.github.com/users/sekineh/gists{/gist_id}", "starred_url": "https://api.github.com/users/sekineh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sekineh/subscriptions", "organizations_url": "https://api.github.com/users/sekineh/orgs", "repos_url": "https://api.github.com/users/sekineh/repos", "events_url": "https://api.github.com/users/sekineh/events{/privacy}", "received_events_url": "https://api.github.com/users/sekineh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dbf26856263afec77fd877e35045b9347e46c82", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dbf26856263afec77fd877e35045b9347e46c82", "html_url": "https://github.com/rust-lang/rust/commit/2dbf26856263afec77fd877e35045b9347e46c82"}], "stats": {"total": 85, "additions": 40, "deletions": 45}, "files": [{"sha": "263a05df812dad890227e8fda7532f3e29c768b3", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 40, "deletions": 45, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/30e8f65549ec1a5ad401fec02b5cc9f9c974d871/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30e8f65549ec1a5ad401fec02b5cc9f9c974d871/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=30e8f65549ec1a5ad401fec02b5cc9f9c974d871", "patch": "@@ -648,6 +648,42 @@ impl<T: Ord> BinaryHeap<T> {\n             self.extend(other.drain());\n         }\n     }\n+\n+    /// Returns an iterator which retrieves elements in heap order.\n+    /// The retrieved elements will be removed from the original heap.\n+    /// The remaining elements are removed on drop in heap order.\n+    ///\n+    /// Note:\n+    /// * `.drain_sorted()` is O(n lg n); much slower than `.drain()`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(binary_heap_drain_sorted)]\n+    /// use std::collections::BinaryHeap;\n+    ///\n+    /// let mut heap = BinaryHeap::from(vec![1, 2, 3, 4, 5]);\n+    /// assert_eq!(heap.len(), 5);\n+    ///\n+    /// let removed = heap.drain_sorted()\n+    ///     .take(3).collect::<Vec<_>>(); // removes 3 elements in heap order\n+    ///\n+    /// assert_eq!(removed, vec![5, 4, 3]);\n+    /// assert_eq!(heap.len(), 2);\n+    ///\n+    /// drop(drain_sorted); // removes remaining elements in heap order\n+    ///\n+    /// assert_eq!(heap.len(), 0);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n+    pub fn drain_sorted(&mut self) -> DrainSorted<'_, T> {\n+        DrainSorted {\n+            inner: self,\n+        }\n+    }\n }\n \n impl<T> BinaryHeap<T> {\n@@ -920,47 +956,6 @@ impl<T> BinaryHeap<T> {\n         Drain { iter: self.data.drain(..) }\n     }\n \n-    /// Returns an iterator which retrieves elements in heap order.\n-    /// The retrieved elements will be removed from the original heap.\n-    ///\n-    /// Note:\n-    /// * Unlike other `.drain()` methods, this method removes elements *lazily*.\n-    /// In order to remove elements in heap order, you need to retrieve elements explicitly.\n-    /// * The remaining elements are removed on drop in arbitrary order.\n-    ///\n-    /// # Examples\n-    ///\n-    /// Basic usage:\n-    ///\n-    /// ```\n-    /// #![feature(binary_heap_drain_sorted)]\n-    /// use std::collections::BinaryHeap;\n-    ///\n-    /// let mut heap = BinaryHeap::from(vec![1, 2, 3, 4, 5]);\n-    /// assert_eq!(heap.len(), 5);\n-    ///\n-    /// let len = heap.len();\n-    /// let removed = heap.drain_sorted()\n-    ///     .take(len).collect::<Vec<_>>(); // removes all elements in *heap* order\n-    /// assert_eq!(removed, vec![5, 4, 3, 2, 1]);\n-    /// assert_eq!(heap.len(), 0);\n-    ///\n-    ///\n-    /// let mut heap = BinaryHeap::from(vec![1, 2, 3, 4, 5]);\n-    /// assert_eq!(heap.len(), 5);\n-    ///\n-    /// let drain_sorted = heap.drain_sorted();\n-    /// drop(drain_sorted); // removes all elements in *arbitrary* order\n-    /// assert_eq!(heap.len(), 0);\n-    /// ```\n-    #[inline]\n-    #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-    pub fn drain_sorted(&mut self) -> DrainSorted<'_, T> {\n-        DrainSorted {\n-            inner: self,\n-        }\n-    }\n-\n     /// Drops all items from the binary heap.\n     ///\n     /// # Examples\n@@ -1263,15 +1258,15 @@ impl<T> FusedIterator for Drain<'_, T> {}\n /// [`BinaryHeap`]: struct.BinaryHeap.html\n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n #[derive(Debug)]\n-pub struct DrainSorted<'a, T> {\n+pub struct DrainSorted<'a, T: Ord> {\n     inner: &'a mut BinaryHeap<T>,\n }\n \n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-impl<'a, T> Drop for DrainSorted<'a, T> {\n-    /// Removes heap elements in arbitrary order for efficiency.\n+impl<'a, T: Ord> Drop for DrainSorted<'a, T> {\n+    /// Removes heap elements in heap order.\n     fn drop(&mut self) {\n-        self.inner.drain();\n+        while let Some(_) = self.inner.pop() {}\n     }\n }\n "}]}