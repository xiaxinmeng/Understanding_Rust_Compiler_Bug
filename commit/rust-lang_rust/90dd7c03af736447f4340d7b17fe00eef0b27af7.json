{"sha": "90dd7c03af736447f4340d7b17fe00eef0b27af7", "node_id": "C_kwDOAAsO6NoAKDkwZGQ3YzAzYWY3MzY0NDdmNDM0MGQ3YjE3ZmUwMGVlZjBiMjdhZjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-25T14:05:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-25T14:05:35Z"}, "message": "Rollup merge of #89359 - fee1-dead:const-it, r=oli-obk\n\nVarious fixes for const_trait_impl\n\nA few problems I found while making `Iterator` easier to const-implement.\n\n1. More generous `~const Drop` check.\n\nWe check for nested fields with caller bounds.\n\nFor example, an ADT type with fields of types `A`, `B`, `C`, check if all of them are either:\n - Bounded (`A: ~const Drop`, `B: Copy`)\n - Known to be able to destruct at compile time (`C = i32`, `struct C(i32)`, `C = some_fn`)\n\n2. Don't treat trait functions marked with `#[default_method_body_is_const]` as stable const fns when checking `const_for` and `const_try` feature gates.\n\nI think anyone can review this, so no r? this time.", "tree": {"sha": "9d63ed6da6c3ae653ea2a7ad7bd519a3446b29b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d63ed6da6c3ae653ea2a7ad7bd519a3446b29b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90dd7c03af736447f4340d7b17fe00eef0b27af7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhn5gwCRBK7hj4Ov3rIwAALXQIAAJb+TTuL6y6+naGcxNLSWX0\nEyjj8YHj9vtKIMfNpY6ePnrvVW1/DOez2zDVgxoEvXe4eK5rJMng8E7VuP9QClIo\nPb5bkIJT3JDO4ttVoCef1Ogwmpy53lqIxf7/YfuTEjUodJAz/B/oOAufZ8Qn6bvE\n7/8bivnUbt71luVhPAlPjTVGl9aGtBvMhrKLVV34kHk2KCPA2pfI6Gf5HQyIjHc7\nh+TZyzjaeT5fBo7GaWgAj8RKOHRoV/4jgWWCIIfPbXWWi8tWTU7B5r9cQAmrAmCr\nzNsBGvHqGwSgDuNQwbONI7ecPEK7jENU0A4UHqkR0mwgziP8c5pbBsz5VzkGKcw=\n=57KI\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d63ed6da6c3ae653ea2a7ad7bd519a3446b29b8\nparent 23a436606b118bd2fbb12f64fce21e7f9d355349\nparent 4f29f3cef85a2a66fcfc76bc7fa3cca3d84266f8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637849135 +0100\ncommitter GitHub <noreply@github.com> 1637849135 +0100\n\nRollup merge of #89359 - fee1-dead:const-it, r=oli-obk\n\nVarious fixes for const_trait_impl\n\nA few problems I found while making `Iterator` easier to const-implement.\n\n1. More generous `~const Drop` check.\n\nWe check for nested fields with caller bounds.\n\nFor example, an ADT type with fields of types `A`, `B`, `C`, check if all of them are either:\n - Bounded (`A: ~const Drop`, `B: Copy`)\n - Known to be able to destruct at compile time (`C = i32`, `struct C(i32)`, `C = some_fn`)\n\n2. Don't treat trait functions marked with `#[default_method_body_is_const]` as stable const fns when checking `const_for` and `const_try` feature gates.\n\nI think anyone can review this, so no r? this time.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90dd7c03af736447f4340d7b17fe00eef0b27af7", "html_url": "https://github.com/rust-lang/rust/commit/90dd7c03af736447f4340d7b17fe00eef0b27af7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90dd7c03af736447f4340d7b17fe00eef0b27af7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23a436606b118bd2fbb12f64fce21e7f9d355349", "url": "https://api.github.com/repos/rust-lang/rust/commits/23a436606b118bd2fbb12f64fce21e7f9d355349", "html_url": "https://github.com/rust-lang/rust/commit/23a436606b118bd2fbb12f64fce21e7f9d355349"}, {"sha": "4f29f3cef85a2a66fcfc76bc7fa3cca3d84266f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f29f3cef85a2a66fcfc76bc7fa3cca3d84266f8", "html_url": "https://github.com/rust-lang/rust/commit/4f29f3cef85a2a66fcfc76bc7fa3cca3d84266f8"}], "stats": {"total": 117, "additions": 106, "deletions": 11}, "files": [{"sha": "4e3a8b64094af7c20c7982833c39e30521a6cb45", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/90dd7c03af736447f4340d7b17fe00eef0b27af7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90dd7c03af736447f4340d7b17fe00eef0b27af7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=90dd7c03af736447f4340d7b17fe00eef0b27af7", "patch": "@@ -1004,11 +1004,12 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                 }\n \n                 let mut err_span = self.span;\n+                let ty_of_dropped_place = dropped_place.ty(self.body, self.tcx).ty;\n \n-                let ty_needs_non_const_drop = qualifs::NeedsNonConstDrop::in_any_value_of_ty(\n-                    self.ccx,\n-                    dropped_place.ty(self.body, self.tcx).ty,\n-                );\n+                let ty_needs_non_const_drop =\n+                    qualifs::NeedsNonConstDrop::in_any_value_of_ty(self.ccx, ty_of_dropped_place);\n+\n+                debug!(?ty_of_dropped_place, ?ty_needs_non_const_drop);\n \n                 if !ty_needs_non_const_drop {\n                     return;"}, {"sha": "9ccf76b5700c201a84cdcf36c2cf9ff62b8e53e4", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90dd7c03af736447f4340d7b17fe00eef0b27af7/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90dd7c03af736447f4340d7b17fe00eef0b27af7/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=90dd7c03af736447f4340d7b17fe00eef0b27af7", "patch": "@@ -173,6 +173,12 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n                 None => return true,\n             };\n \n+            // If the function belongs to a trait, then it must enable the const_trait_impl\n+            // feature to use that trait function (with a const default body).\n+            if tcx.trait_of_item(def_id).is_some() {\n+                return true;\n+            }\n+\n             // If this crate is not using stability attributes, or this function is not claiming to be a\n             // stable `const fn`, that is all that is required.\n             if !tcx.features().staged_api || tcx.has_attr(def_id, sym::rustc_const_unstable) {"}, {"sha": "0ff3611f8f80d61ef1ef25ed69906bc6d2e0fb83", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/90dd7c03af736447f4340d7b17fe00eef0b27af7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90dd7c03af736447f4340d7b17fe00eef0b27af7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=90dd7c03af736447f4340d7b17fe00eef0b27af7", "patch": "@@ -304,7 +304,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 && obligation.predicate.skip_binder().constness == ty::BoundConstness::ConstIfConst\n             {\n                 if self.is_in_const_context {\n-                    self.assemble_const_drop_candidates(obligation, &mut candidates)?;\n+                    self.assemble_const_drop_candidates(obligation, stack, &mut candidates)?;\n                 } else {\n                     debug!(\"passing ~const Drop bound; in non-const context\");\n                     // `~const Drop` when we are not in a const context has no effect.\n@@ -911,9 +911,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n-    fn assemble_const_drop_candidates(\n+    fn assemble_const_drop_candidates<'a>(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n+        obligation_stack: &TraitObligationStack<'a, 'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) -> Result<(), SelectionError<'tcx>> {\n         let mut stack: Vec<(Ty<'tcx>, usize)> = vec![(obligation.self_ty().skip_binder(), 0)];\n@@ -922,7 +923,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let mut noreturn = false;\n \n             self.check_recursion_depth(depth, obligation)?;\n-            let mut copy_candidates = SelectionCandidateSet { vec: Vec::new(), ambiguous: false };\n+            let mut new_candidates = SelectionCandidateSet { vec: Vec::new(), ambiguous: false };\n             let mut copy_obligation =\n                 obligation.with(obligation.predicate.rebind(ty::TraitPredicate {\n                     trait_ref: ty::TraitRef {\n@@ -933,13 +934,29 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     polarity: ty::ImplPolarity::Positive,\n                 }));\n             copy_obligation.recursion_depth = depth + 1;\n-            self.assemble_candidates_from_impls(&copy_obligation, &mut copy_candidates);\n+            self.assemble_candidates_from_impls(&copy_obligation, &mut new_candidates);\n             let copy_conditions = self.copy_clone_conditions(&copy_obligation);\n-            self.assemble_builtin_bound_candidates(copy_conditions, &mut copy_candidates);\n-            if !copy_candidates.vec.is_empty() {\n+            self.assemble_builtin_bound_candidates(copy_conditions, &mut new_candidates);\n+            let copy_stack = self.push_stack(obligation_stack.list(), &copy_obligation);\n+            self.assemble_candidates_from_caller_bounds(&copy_stack, &mut new_candidates)?;\n+\n+            let const_drop_obligation =\n+                obligation.with(obligation.predicate.rebind(ty::TraitPredicate {\n+                    trait_ref: ty::TraitRef {\n+                        def_id: self.tcx().require_lang_item(hir::LangItem::Drop, None),\n+                        substs: self.tcx().mk_substs_trait(ty, &[]),\n+                    },\n+                    constness: ty::BoundConstness::ConstIfConst,\n+                    polarity: ty::ImplPolarity::Positive,\n+                }));\n+\n+            let const_drop_stack = self.push_stack(obligation_stack.list(), &const_drop_obligation);\n+            self.assemble_candidates_from_caller_bounds(&const_drop_stack, &mut new_candidates)?;\n+\n+            if !new_candidates.vec.is_empty() {\n                 noreturn = true;\n             }\n-            debug!(?copy_candidates.vec, \"assemble_const_drop_candidates - copy\");\n+            debug!(?new_candidates.vec, \"assemble_const_drop_candidates\");\n \n             match ty.kind() {\n                 ty::Int(_)"}, {"sha": "83fa32bf092bb9140c8404d06cf893e5f0e75bd9", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-bound.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/90dd7c03af736447f4340d7b17fe00eef0b27af7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90dd7c03af736447f4340d7b17fe00eef0b27af7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-bound.rs?ref=90dd7c03af736447f4340d7b17fe00eef0b27af7", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+#![feature(const_trait_impl)]\n+#![feature(const_fn_trait_bound)]\n+#![feature(const_precise_live_drops)]\n+\n+const fn foo<T, E>(res: Result<T, E>) -> Option<T> where E: ~const Drop {\n+    match res {\n+        Ok(t) => Some(t),\n+        Err(_e) => None,\n+    }\n+}\n+\n+pub struct Foo<T>(T);\n+\n+const fn baz<T: ~const Drop, E: ~const Drop>(res: Result<Foo<T>, Foo<E>>) -> Option<Foo<T>> {\n+    foo(res)\n+}\n+\n+fn main() {}"}, {"sha": "cbfdf89b7bd191817c4080cd2cce8b6bc7c9cfac", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-default-body-stability.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/90dd7c03af736447f4340d7b17fe00eef0b27af7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-default-body-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90dd7c03af736447f4340d7b17fe00eef0b27af7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-default-body-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-default-body-stability.rs?ref=90dd7c03af736447f4340d7b17fe00eef0b27af7", "patch": "@@ -0,0 +1,51 @@\n+// check-pass\n+\n+#![feature(staged_api)]\n+#![feature(const_trait_impl)]\n+#![feature(const_fn_trait_bound)]\n+#![feature(const_t_try)]\n+#![feature(const_try)]\n+#![feature(try_trait_v2)]\n+\n+#![stable(feature = \"foo\", since = \"1.0\")]\n+\n+use std::ops::{ControlFlow, FromResidual, Try};\n+\n+#[stable(feature = \"foo\", since = \"1.0\")]\n+pub struct T;\n+\n+#[stable(feature = \"foo\", since = \"1.0\")]\n+#[rustc_const_unstable(feature = \"const_t_try\", issue = \"none\")]\n+impl const Try for T {\n+    type Output = T;\n+    type Residual = T;\n+\n+    fn from_output(t: T) -> T {\n+        t\n+    }\n+\n+    fn branch(self) -> ControlFlow<T, T> {\n+        ControlFlow::Continue(self)\n+    }\n+}\n+\n+#[stable(feature = \"foo\", since = \"1.0\")]\n+#[rustc_const_unstable(feature = \"const_t_try\", issue = \"none\")]\n+impl const FromResidual for T {\n+    fn from_residual(t: T) -> T {\n+        t\n+    }\n+}\n+\n+#[stable(feature = \"foo\", since = \"1.0\")]\n+pub trait Tr {\n+    #[default_method_body_is_const]\n+    #[stable(feature = \"foo\", since = \"1.0\")]\n+    fn bar() -> T {\n+        T?\n+        // Should be allowed.\n+        // Must enable unstable features to call this trait fn in const contexts.\n+    }\n+}\n+\n+fn main() {}"}]}