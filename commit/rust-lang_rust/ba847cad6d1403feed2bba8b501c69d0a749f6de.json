{"sha": "ba847cad6d1403feed2bba8b501c69d0a749f6de", "node_id": "C_kwDOAAsO6NoAKGJhODQ3Y2FkNmQxNDAzZmVlZDJiYmE4YjUwMWM2OWQwYTc0OWY2ZGU", "commit": {"author": {"name": "Soveu", "email": "marx.tomasz@gmail.com", "date": "2022-08-08T13:31:32Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-10-23T22:46:16Z"}, "message": "Enable varargs support for calling conventions other than C or cdecl\n\nThis patch makes it possible to use varargs for calling conventions,\nwhich are either based on C (like efiapi) or C is based\non them (for example sysv64 and win64).", "tree": {"sha": "d6c2b4374fe39815911a6a06b691d6827bd1715f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6c2b4374fe39815911a6a06b691d6827bd1715f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba847cad6d1403feed2bba8b501c69d0a749f6de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba847cad6d1403feed2bba8b501c69d0a749f6de", "html_url": "https://github.com/rust-lang/rust/commit/ba847cad6d1403feed2bba8b501c69d0a749f6de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba847cad6d1403feed2bba8b501c69d0a749f6de/comments", "author": {"login": "Soveu", "id": 34382234, "node_id": "MDQ6VXNlcjM0MzgyMjM0", "avatar_url": "https://avatars.githubusercontent.com/u/34382234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Soveu", "html_url": "https://github.com/Soveu", "followers_url": "https://api.github.com/users/Soveu/followers", "following_url": "https://api.github.com/users/Soveu/following{/other_user}", "gists_url": "https://api.github.com/users/Soveu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Soveu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Soveu/subscriptions", "organizations_url": "https://api.github.com/users/Soveu/orgs", "repos_url": "https://api.github.com/users/Soveu/repos", "events_url": "https://api.github.com/users/Soveu/events{/privacy}", "received_events_url": "https://api.github.com/users/Soveu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fcf850d7942804990a1d2e3fe036622a0fe4c74", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fcf850d7942804990a1d2e3fe036622a0fe4c74", "html_url": "https://github.com/rust-lang/rust/commit/7fcf850d7942804990a1d2e3fe036622a0fe4c74"}], "stats": {"total": 207, "additions": 173, "deletions": 34}, "files": [{"sha": "0f6561b04c0ce083e74feaae2f9e129759ae7cbd", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba847cad6d1403feed2bba8b501c69d0a749f6de/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba847cad6d1403feed2bba8b501c69d0a749f6de/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=ba847cad6d1403feed2bba8b501c69d0a749f6de", "patch": "@@ -390,6 +390,9 @@ declare_features! (\n     (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n     /// Allows exhaustive pattern matching on types that contain uninhabited types.\n     (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n+    /// Allows using `efiapi`, `sysv64` and `win64` as calling convention\n+    /// for functions with varargs.\n+    (active, extended_varargs_abi_support, \"1.65.0\", Some(100189), None),\n     /// Allows defining `extern type`s.\n     (active, extern_types, \"1.23.0\", Some(43467), None),\n     /// Allows the use of `#[ffi_const]` on foreign functions."}, {"sha": "782c95d6335553ca32dd7522502290dafc79f7db", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ba847cad6d1403feed2bba8b501c69d0a749f6de/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba847cad6d1403feed2bba8b501c69d0a749f6de/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=ba847cad6d1403feed2bba8b501c69d0a749f6de", "patch": "@@ -106,7 +106,7 @@ use rustc_middle::middle;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::util;\n-use rustc_session::config::EntryFnType;\n+use rustc_session::{config::EntryFnType, parse::feature_err};\n use rustc_span::{symbol::sym, Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n@@ -118,20 +118,40 @@ use astconv::AstConv;\n use bounds::Bounds;\n \n fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_>, decl: &hir::FnDecl<'_>, abi: Abi, span: Span) {\n-    match (decl.c_variadic, abi) {\n-        // The function has the correct calling convention, or isn't a \"C-variadic\" function.\n-        (false, _) | (true, Abi::C { .. }) | (true, Abi::Cdecl { .. }) => {}\n-        // The function is a \"C-variadic\" function with an incorrect calling convention.\n-        (true, _) => {\n-            let mut err = struct_span_err!(\n-                tcx.sess,\n+    const ERROR_HEAD: &str = \"C-variadic function must have a compatible calling convention\";\n+    const CONVENTIONS_UNSTABLE: &str = \"C, cdecl, win64, sysv64 or efiapi\";\n+    const CONVENTIONS_STABLE: &str = \"C or cdecl\";\n+    const UNSTABLE_EXPLAIN: &str =\n+        \"using different calling convention than C or cdecl for varargs functions is unstable\";\n+\n+    if !decl.c_variadic || matches!(abi, Abi::C { .. } | Abi::Cdecl { .. }) {\n+        return;\n+    }\n+\n+    let extended_abi_support = tcx.features().extended_varargs_abi_support;\n+    let conventions = match (extended_abi_support, abi.supports_varargs()) {\n+        // User enabled additional ABI support for varargs and function ABI matches those ones.\n+        (true, true) => return,\n+\n+        // Using this ABI would be ok, if the feature for additional ABI support was enabled.\n+        // Return CONVENTIONS_STABLE, because we want the other error to look the same.\n+        (false, true) => {\n+            feature_err(\n+                &tcx.sess.parse_sess,\n+                sym::extended_varargs_abi_support,\n                 span,\n-                E0045,\n-                \"C-variadic function must have C or cdecl calling convention\"\n-            );\n-            err.span_label(span, \"C-variadics require C or cdecl calling convention\").emit();\n+                UNSTABLE_EXPLAIN,\n+            )\n+            .emit();\n+            CONVENTIONS_STABLE\n         }\n-    }\n+\n+        (false, false) => CONVENTIONS_STABLE,\n+        (true, false) => CONVENTIONS_UNSTABLE,\n+    };\n+\n+    let mut err = struct_span_err!(tcx.sess, span, E0045, \"{}, like {}\", ERROR_HEAD, conventions);\n+    err.span_label(span, ERROR_HEAD).emit();\n }\n \n fn require_same_types<'tcx>("}, {"sha": "4a1b20297d9d8df0b72166f1c7ad720cf76b1398", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba847cad6d1403feed2bba8b501c69d0a749f6de/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba847cad6d1403feed2bba8b501c69d0a749f6de/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ba847cad6d1403feed2bba8b501c69d0a749f6de", "patch": "@@ -694,6 +694,7 @@ symbols! {\n         export_name,\n         expr,\n         extended_key_value_attributes,\n+        extended_varargs_abi_support,\n         extern_absolute_paths,\n         extern_crate_item_prelude,\n         extern_crate_self,"}, {"sha": "cb2a0c04c6aa8ba1f82af68cd23ac67742afe4de", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ba847cad6d1403feed2bba8b501c69d0a749f6de/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba847cad6d1403feed2bba8b501c69d0a749f6de/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=ba847cad6d1403feed2bba8b501c69d0a749f6de", "patch": "@@ -40,6 +40,28 @@ pub enum Abi {\n     RustCold,\n }\n \n+impl Abi {\n+    pub fn supports_varargs(self) -> bool {\n+        // * C and Cdecl obviously support varargs.\n+        // * C can be based on SysV64 or Win64, so they must support varargs.\n+        // * EfiApi is based on Win64 or C, so it also supports it.\n+        //\n+        // * Stdcall does not, because it would be impossible for the callee to clean\n+        //   up the arguments. (callee doesn't know how many arguments are there)\n+        // * Same for Fastcall, Vectorcall and Thiscall.\n+        // * System can become Stdcall, so is also a no-no.\n+        // * Other calling conventions are related to hardware or the compiler itself.\n+        match self {\n+            Self::C { .. }\n+            | Self::Cdecl { .. }\n+            | Self::Win64 { .. }\n+            | Self::SysV64 { .. }\n+            | Self::EfiApi => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone)]\n pub struct AbiData {\n     abi: Abi,"}, {"sha": "b20c30ec8f1c8533026067ceaf4eee82b4ced03a", "filename": "src/doc/unstable-book/src/language-features/extended-varargs-abi-support.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba847cad6d1403feed2bba8b501c69d0a749f6de/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextended-varargs-abi-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/ba847cad6d1403feed2bba8b501c69d0a749f6de/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextended-varargs-abi-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextended-varargs-abi-support.md?ref=ba847cad6d1403feed2bba8b501c69d0a749f6de", "patch": "@@ -0,0 +1,10 @@\n+# `extended_varargs_abi_support`\n+\n+The tracking issue for this feature is: [#100189]\n+\n+[#100189]: https://github.com/rust-lang/rust/issues/100189\n+\n+------------------------\n+\n+This feature adds the possibility of using `sysv64`, `win64` or `efiapi` calling\n+conventions on functions with varargs."}, {"sha": "e391ee8a0b111d0005e2e9e4417ba7ebc425d2ca", "filename": "src/test/ui/c-variadic/feature-gate-extended_varargs_abi_support.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ba847cad6d1403feed2bba8b501c69d0a749f6de/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba847cad6d1403feed2bba8b501c69d0a749f6de/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.rs?ref=ba847cad6d1403feed2bba8b501c69d0a749f6de", "patch": "@@ -0,0 +1,19 @@\n+#![feature(abi_efiapi)]\n+\n+fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n+    //~^ ERROR: C-variadic function must have a compatible calling convention, like C or cdecl\n+    //~^^ ERROR: using different calling convention than C or cdecl for varargs functions is unstable\n+    f(22, 44);\n+}\n+fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n+    //~^ ERROR: C-variadic function must have a compatible calling convention, like C or cdecl\n+    //~^^ ERROR: using different calling convention than C or cdecl for varargs functions is unstable\n+    f(22, 44);\n+}\n+fn win(f: extern \"win64\" fn(usize, ...)) {\n+    //~^ ERROR: C-variadic function must have a compatible calling convention, like C or cdecl\n+    //~^^ ERROR: using different calling convention than C or cdecl for varargs functions is unstable\n+    f(22, 44);\n+}\n+\n+fn main() {}"}, {"sha": "3442d53c1b5fdc5ee83a657fd8b43493eda0d4c7", "filename": "src/test/ui/c-variadic/feature-gate-extended_varargs_abi_support.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ba847cad6d1403feed2bba8b501c69d0a749f6de/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba847cad6d1403feed2bba8b501c69d0a749f6de/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.stderr?ref=ba847cad6d1403feed2bba8b501c69d0a749f6de", "patch": "@@ -0,0 +1,49 @@\n+error[E0658]: using different calling convention than C or cdecl for varargs functions is unstable\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:3:14\n+   |\n+LL | fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #100189 <https://github.com/rust-lang/rust/issues/100189> for more information\n+   = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable\n+\n+error[E0045]: C-variadic function must have a compatible calling convention, like C or cdecl\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:3:14\n+   |\n+LL | fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n+\n+error[E0658]: using different calling convention than C or cdecl for varargs functions is unstable\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:8:12\n+   |\n+LL | fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #100189 <https://github.com/rust-lang/rust/issues/100189> for more information\n+   = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable\n+\n+error[E0045]: C-variadic function must have a compatible calling convention, like C or cdecl\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:8:12\n+   |\n+LL | fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n+\n+error[E0658]: using different calling convention than C or cdecl for varargs functions is unstable\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:13:11\n+   |\n+LL | fn win(f: extern \"win64\" fn(usize, ...)) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #100189 <https://github.com/rust-lang/rust/issues/100189> for more information\n+   = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable\n+\n+error[E0045]: C-variadic function must have a compatible calling convention, like C or cdecl\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:13:11\n+   |\n+LL | fn win(f: extern \"win64\" fn(usize, ...)) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0045, E0658.\n+For more information about an error, try `rustc --explain E0045`."}, {"sha": "24407a71ce6997184531b3c1018f6bf474efbbf1", "filename": "src/test/ui/c-variadic/variadic-ffi-1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba847cad6d1403feed2bba8b501c69d0a749f6de/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba847cad6d1403feed2bba8b501c69d0a749f6de/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs?ref=ba847cad6d1403feed2bba8b501c69d0a749f6de", "patch": "@@ -6,7 +6,9 @@\n trait Sized { }\n \n extern \"stdcall\" {\n-    fn printf(_: *const u8, ...); //~ ERROR: variadic function must have C or cdecl calling\n+    fn printf(_: *const u8, ...);\n+    //~^ ERROR: C-variadic function must have a compatible calling convention,\n+    // like C, cdecl, win64, sysv64 or efiapi\n }\n \n extern \"C\" {"}, {"sha": "f9d6928b3df144cf01cc89c441587dfc42b62500", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ba847cad6d1403feed2bba8b501c69d0a749f6de/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba847cad6d1403feed2bba8b501c69d0a749f6de/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=ba847cad6d1403feed2bba8b501c69d0a749f6de", "patch": "@@ -1,17 +1,17 @@\n-error[E0045]: C-variadic function must have C or cdecl calling convention\n+error[E0045]: C-variadic function must have a compatible calling convention, like C or cdecl\n   --> $DIR/variadic-ffi-1.rs:9:5\n    |\n LL |     fn printf(_: *const u8, ...);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadics require C or cdecl calling convention\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n \n error[E0060]: this function takes at least 2 arguments but 0 arguments were supplied\n-  --> $DIR/variadic-ffi-1.rs:20:9\n+  --> $DIR/variadic-ffi-1.rs:22:9\n    |\n LL |         foo();\n    |         ^^^-- two arguments of type `isize` and `u8` are missing\n    |\n note: function defined here\n-  --> $DIR/variadic-ffi-1.rs:13:8\n+  --> $DIR/variadic-ffi-1.rs:15:8\n    |\n LL |     fn foo(f: isize, x: u8, ...);\n    |        ^^^\n@@ -21,13 +21,13 @@ LL |         foo(/* isize */, /* u8 */);\n    |            ~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0060]: this function takes at least 2 arguments but 1 argument was supplied\n-  --> $DIR/variadic-ffi-1.rs:21:9\n+  --> $DIR/variadic-ffi-1.rs:23:9\n    |\n LL |         foo(1);\n    |         ^^^--- an argument of type `u8` is missing\n    |\n note: function defined here\n-  --> $DIR/variadic-ffi-1.rs:13:8\n+  --> $DIR/variadic-ffi-1.rs:15:8\n    |\n LL |     fn foo(f: isize, x: u8, ...);\n    |        ^^^\n@@ -37,7 +37,7 @@ LL |         foo(1, /* u8 */);\n    |            ~~~~~~~~~~~~~\n \n error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-1.rs:23:56\n+  --> $DIR/variadic-ffi-1.rs:25:56\n    |\n LL |         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n    |                -------------------------------------   ^^^ expected non-variadic fn, found variadic function\n@@ -48,7 +48,7 @@ LL |         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n                  found fn item `unsafe extern \"C\" fn(_, _, ...) {foo}`\n \n error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-1.rs:24:54\n+  --> $DIR/variadic-ffi-1.rs:26:54\n    |\n LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n    |                -----------------------------------   ^^^ expected variadic fn, found non-variadic function\n@@ -59,37 +59,37 @@ LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n                  found fn item `extern \"C\" fn(_, _) {bar}`\n \n error[E0617]: can't pass `f32` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:26:19\n+  --> $DIR/variadic-ffi-1.rs:28:19\n    |\n LL |         foo(1, 2, 3f32);\n    |                   ^^^^ help: cast the value to `c_double`: `3f32 as c_double`\n \n error[E0617]: can't pass `bool` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:27:19\n+  --> $DIR/variadic-ffi-1.rs:29:19\n    |\n LL |         foo(1, 2, true);\n    |                   ^^^^ help: cast the value to `c_int`: `true as c_int`\n \n error[E0617]: can't pass `i8` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:28:19\n+  --> $DIR/variadic-ffi-1.rs:30:19\n    |\n LL |         foo(1, 2, 1i8);\n    |                   ^^^ help: cast the value to `c_int`: `1i8 as c_int`\n \n error[E0617]: can't pass `u8` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:29:19\n+  --> $DIR/variadic-ffi-1.rs:31:19\n    |\n LL |         foo(1, 2, 1u8);\n    |                   ^^^ help: cast the value to `c_uint`: `1u8 as c_uint`\n \n error[E0617]: can't pass `i16` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:30:19\n+  --> $DIR/variadic-ffi-1.rs:32:19\n    |\n LL |         foo(1, 2, 1i16);\n    |                   ^^^^ help: cast the value to `c_int`: `1i16 as c_int`\n \n error[E0617]: can't pass `u16` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:31:19\n+  --> $DIR/variadic-ffi-1.rs:33:19\n    |\n LL |         foo(1, 2, 1u16);\n    |                   ^^^^ help: cast the value to `c_uint`: `1u16 as c_uint`"}, {"sha": "96cea87546e7ad3b3fa1a1f21937a9b3e6a7dae7", "filename": "src/test/ui/c-variadic/variadic-ffi-2.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ba847cad6d1403feed2bba8b501c69d0a749f6de/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba847cad6d1403feed2bba8b501c69d0a749f6de/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.rs?ref=ba847cad6d1403feed2bba8b501c69d0a749f6de", "patch": "@@ -1,7 +1,20 @@\n // ignore-arm stdcall isn't supported\n+#![feature(extended_varargs_abi_support)]\n+#![feature(abi_efiapi)]\n \n fn baz(f: extern \"stdcall\" fn(usize, ...)) {\n-    //~^ ERROR: variadic function must have C or cdecl calling convention\n+    //~^ ERROR: C-variadic function must have a compatible calling convention,\n+    // like C, cdecl, win64, sysv64 or efiapi\n+    f(22, 44);\n+}\n+\n+fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n+    f(22, 44);\n+}\n+fn win(f: extern \"win64\" fn(usize, ...)) {\n+    f(22, 44);\n+}\n+fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n     f(22, 44);\n }\n "}, {"sha": "117d75301fb7e2cc4251069bc2fa15569d9d7047", "filename": "src/test/ui/c-variadic/variadic-ffi-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba847cad6d1403feed2bba8b501c69d0a749f6de/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba847cad6d1403feed2bba8b501c69d0a749f6de/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr?ref=ba847cad6d1403feed2bba8b501c69d0a749f6de", "patch": "@@ -1,8 +1,8 @@\n-error[E0045]: C-variadic function must have C or cdecl calling convention\n-  --> $DIR/variadic-ffi-2.rs:3:11\n+error[E0045]: C-variadic function must have a compatible calling convention, like C, cdecl, win64, sysv64 or efiapi\n+  --> $DIR/variadic-ffi-2.rs:5:11\n    |\n LL | fn baz(f: extern \"stdcall\" fn(usize, ...)) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadics require C or cdecl calling convention\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n \n error: aborting due to previous error\n "}, {"sha": "ecb916d02df52b9b62411a09f98ea714f8e9a051", "filename": "src/test/ui/error-codes/E0045.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba847cad6d1403feed2bba8b501c69d0a749f6de/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba847cad6d1403feed2bba8b501c69d0a749f6de/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr?ref=ba847cad6d1403feed2bba8b501c69d0a749f6de", "patch": "@@ -1,8 +1,8 @@\n-error[E0045]: C-variadic function must have C or cdecl calling convention\n+error[E0045]: C-variadic function must have a compatible calling convention, like C or cdecl\n   --> $DIR/E0045.rs:1:17\n    |\n LL | extern \"Rust\" { fn foo(x: u8, ...); }\n-   |                 ^^^^^^^^^^^^^^^^^^^ C-variadics require C or cdecl calling convention\n+   |                 ^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n \n error: aborting due to previous error\n "}]}