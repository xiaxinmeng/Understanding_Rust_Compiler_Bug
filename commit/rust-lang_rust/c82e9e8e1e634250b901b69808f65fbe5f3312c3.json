{"sha": "c82e9e8e1e634250b901b69808f65fbe5f3312c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MmU5ZThlMWU2MzQyNTBiOTAxYjY5ODA4ZjY1ZmJlNWYzMzEyYzM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-11-21T16:03:02Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-11-24T15:34:32Z"}, "message": "Do not attemt to continue parsing after `pub ident`\n\nTry to identify the following code in order to provide better\ndiagnostics, but return the error to bail out early during the parse.", "tree": {"sha": "e84815f5482ca3dd0ed07b58198a51f2fc1ef8ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e84815f5482ca3dd0ed07b58198a51f2fc1ef8ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c82e9e8e1e634250b901b69808f65fbe5f3312c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c82e9e8e1e634250b901b69808f65fbe5f3312c3", "html_url": "https://github.com/rust-lang/rust/commit/c82e9e8e1e634250b901b69808f65fbe5f3312c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c82e9e8e1e634250b901b69808f65fbe5f3312c3/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c0387e36a1dab95492de61a2f26262a4526c286", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0387e36a1dab95492de61a2f26262a4526c286", "html_url": "https://github.com/rust-lang/rust/commit/7c0387e36a1dab95492de61a2f26262a4526c286"}], "stats": {"total": 356, "additions": 74, "deletions": 282}, "files": [{"sha": "eafc6e0decf6733bfe4e6ee73f4605219b7ca461", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c82e9e8e1e634250b901b69808f65fbe5f3312c3", "patch": "@@ -1757,7 +1757,7 @@ impl<'a> LoweringContext<'a> {\n                                bounds,\n                                items)\n             }\n-            ItemKind::Placeholder | ItemKind::MacroDef(..) | ItemKind::Mac(..) => {\n+            ItemKind::MacroDef(..) | ItemKind::Mac(..) => {\n                 panic!(\"Shouldn't still be around\")\n             }\n         }"}, {"sha": "d8590c1de94e927ce1319b620e3064a21472a18d", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=c82e9e8e1e634250b901b69808f65fbe5f3312c3", "patch": "@@ -113,7 +113,6 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 return visit::walk_item(self, i);\n             }\n             ItemKind::Mod(..) => DefPathData::Module(i.ident.name.as_str()),\n-            ItemKind::Placeholder |\n             ItemKind::Static(..) | ItemKind::Const(..) | ItemKind::Fn(..) =>\n                 DefPathData::ValueNs(i.ident.name.as_str()),\n             ItemKind::MacroDef(..) => DefPathData::MacroDef(i.ident.name.as_str()),"}, {"sha": "46513a5740aede76ac59469faa3426aeef7b2bfb", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=c82e9e8e1e634250b901b69808f65fbe5f3312c3", "patch": "@@ -269,7 +269,7 @@ impl<'a> Resolver<'a> {\n                 self.define(parent, ident, TypeNS, imported_binding);\n             }\n \n-            ItemKind::GlobalAsm(..) | ItemKind::Placeholder => {}\n+            ItemKind::GlobalAsm(..) => {}\n \n             ItemKind::Mod(..) if item.ident == keywords::Invalid.ident() => {} // Crate root\n "}, {"sha": "ae92cb81e273ed6b2f6794400abeaf8a5651f6cf", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c82e9e8e1e634250b901b69808f65fbe5f3312c3", "patch": "@@ -1947,8 +1947,7 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n \n-            ItemKind::ExternCrate(_) | ItemKind::MacroDef(..) | ItemKind::GlobalAsm(_) |\n-            ItemKind::Placeholder => {\n+            ItemKind::ExternCrate(_) | ItemKind::MacroDef(..) | ItemKind::GlobalAsm(_) => {\n                 // do nothing, these are just around to be encoded\n             }\n "}, {"sha": "b244876226c484a71ea789880070da50fdcf3ec9", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=c82e9e8e1e634250b901b69808f65fbe5f3312c3", "patch": "@@ -548,7 +548,6 @@ impl Sig for ast::Item {\n             // FIXME should implement this (e.g., pub use).\n             ast::ItemKind::Use(_) => Err(\"import\"),\n             ast::ItemKind::Mac(..) | ast::ItemKind::MacroDef(_) => Err(\"Macro\"),\n-            ast::ItemKind::Placeholder => Err(\"placeholder\"),\n         }\n     }\n }"}, {"sha": "ad9d58651207dce71d38c192c27c3339bbe056f6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c82e9e8e1e634250b901b69808f65fbe5f3312c3", "patch": "@@ -1977,7 +1977,6 @@ pub enum ItemKind {\n \n     /// A macro definition.\n     MacroDef(MacroDef),\n-    Placeholder,\n }\n \n impl ItemKind {\n@@ -1999,7 +1998,6 @@ impl ItemKind {\n             ItemKind::Mac(..) |\n             ItemKind::MacroDef(..) |\n             ItemKind::Impl(..) |\n-            ItemKind::Placeholder |\n             ItemKind::AutoImpl(..) => \"item\"\n         }\n     }"}, {"sha": "cc63bffec48a1652eca563e33bc0b58096eb8768", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c82e9e8e1e634250b901b69808f65fbe5f3312c3", "patch": "@@ -935,7 +935,6 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n         ),\n         ItemKind::Mac(m) => ItemKind::Mac(folder.fold_mac(m)),\n         ItemKind::MacroDef(def) => ItemKind::MacroDef(folder.fold_macro_def(def)),\n-        ItemKind::Placeholder => ItemKind::Placeholder,\n     }\n }\n "}, {"sha": "f839a83985315d6da64db3539e9df965a8c7a83f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 105, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c82e9e8e1e634250b901b69808f65fbe5f3312c3", "patch": "@@ -72,50 +72,6 @@ bitflags! {\n \n type ItemInfo = (Ident, ItemKind, Option<Vec<Attribute> >);\n \n-enum HasRecovered<'a, T> {\n-    Success(T),\n-    Recovered(T, DiagnosticBuilder<'a>),\n-}\n-\n-impl<'a, T> HasRecovered<'a, T> {\n-    fn new(t: T, err: Option<DiagnosticBuilder<'a>>) -> HasRecovered<'a, T> {\n-        if let Some(err) = err {\n-            HasRecovered::Recovered(t, err)\n-        } else {\n-            HasRecovered::Success(t)\n-        }\n-    }\n-\n-    fn map<O, F: FnOnce(T) -> O>(self, f: F) -> HasRecovered<'a, O> {\n-        let (t, e) = self.full_unwrap();\n-        HasRecovered::new(f(t), e)\n-    }\n-\n-    fn emit(self) -> T {\n-        match self {\n-            HasRecovered::Recovered(t, mut err) => {\n-                err.emit();\n-                t\n-            }\n-            HasRecovered::Success(t) => t,\n-        }\n-    }\n-\n-    fn full_unwrap(self) -> (T, Option<DiagnosticBuilder<'a>>) {\n-        match self {\n-            HasRecovered::Recovered(t, err) => (t, Some(err)),\n-            HasRecovered::Success(t) => (t, None),\n-        }\n-    }\n-\n-    fn into_result(self) -> PResult<'a, T> {\n-        match self {\n-            HasRecovered::Recovered(_, err) => Err(err),\n-            HasRecovered::Success(t) => Ok(t),\n-        }\n-    }\n-}\n-\n /// How to parse a path.\n #[derive(Copy, Clone, PartialEq)]\n pub enum PathStyle {\n@@ -1411,7 +1367,6 @@ impl<'a> Parser<'a> {\n                     debug!(\"parse_trait_methods(): parsing provided method\");\n                     *at_end = true;\n                     let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n-                    let body = body.emit();\n                     attrs.extend(inner_attrs.iter().cloned());\n                     Some(body)\n                 }\n@@ -2447,7 +2402,7 @@ impl<'a> Parser<'a> {\n         let mut attrs = outer_attrs;\n         attrs.extend(self.parse_inner_attributes()?);\n \n-        let blk = self.parse_block_tail(lo, blk_mode)?.emit();\n+        let blk = self.parse_block_tail(lo, blk_mode)?;\n         return Ok(self.mk_expr(blk.span, ExprKind::Block(blk), attrs));\n     }\n \n@@ -3204,7 +3159,7 @@ impl<'a> Parser<'a> {\n \n         let hi = self.prev_span;\n         Ok(self.mk_expr(span_lo.to(hi),\n-                        ExprKind::ForLoop(pat, expr, loop_block.emit(), opt_ident),\n+                        ExprKind::ForLoop(pat, expr, loop_block, opt_ident),\n                         attrs))\n     }\n \n@@ -3217,7 +3172,6 @@ impl<'a> Parser<'a> {\n         }\n         let cond = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n-        let body = body.emit();\n         attrs.extend(iattrs);\n         let span = span_lo.to(body.span);\n         return Ok(self.mk_expr(span, ExprKind::While(cond, body, opt_ident), attrs));\n@@ -3233,7 +3187,6 @@ impl<'a> Parser<'a> {\n         let expr = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n-        let body = body.emit();\n         let span = span_lo.to(body.span);\n         return Ok(self.mk_expr(span, ExprKind::WhileLet(pat, expr, body, opt_ident), attrs));\n     }\n@@ -3243,7 +3196,6 @@ impl<'a> Parser<'a> {\n                            span_lo: Span,\n                            mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n-        let body = body.emit();\n         attrs.extend(iattrs);\n         let span = span_lo.to(body.span);\n         Ok(self.mk_expr(span, ExprKind::Loop(body, opt_ident), attrs))\n@@ -3254,7 +3206,6 @@ impl<'a> Parser<'a> {\n         -> PResult<'a, P<Expr>>\n     {\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n-        let body = body.emit();\n         attrs.extend(iattrs);\n         Ok(self.mk_expr(span_lo.to(body.span), ExprKind::Catch(body), attrs))\n     }\n@@ -4301,14 +4252,14 @@ impl<'a> Parser<'a> {\n             return Err(e);\n         }\n \n-        Ok(self.parse_block_tail(lo, BlockCheckMode::Default)?.emit())\n+        Ok(self.parse_block_tail(lo, BlockCheckMode::Default)?)\n     }\n \n     /// Parse a block. Inner attrs are allowed.\n     fn parse_inner_attrs_and_block(&mut self)\n-        -> PResult<'a, (Vec<Attribute>, HasRecovered<'a, P<Block>>)>\n+        -> PResult<'a, (Vec<Attribute>, P<Block>)>\n     {\n-        maybe_whole!(self, NtBlock, |x| (Vec::new(), HasRecovered::Success(x)));\n+        maybe_whole!(self, NtBlock, |x| (Vec::new(), x));\n \n         let lo = self.span;\n         self.expect(&token::OpenDelim(token::Brace))?;\n@@ -4319,15 +4270,14 @@ impl<'a> Parser<'a> {\n     /// Parse the rest of a block expression or function body\n     /// Precondition: already parsed the '{'.\n     fn parse_block_tail(&mut self, lo: Span, s: BlockCheckMode)\n-        -> PResult<'a, HasRecovered<'a, P<Block>>>\n+        -> PResult<'a, P<Block>>\n     {\n         let mut stmts = vec![];\n \n-        let mut error = None;\n         while !self.eat(&token::CloseDelim(token::Brace)) {\n             let stmt = match self.parse_full_stmt(false) {\n-                Err(err) => {\n-                    error = Some(err);\n+                Err(mut err) => {\n+                    err.emit();\n                     self.recover_stmt_(SemiColonMode::Ignore, BlockMode::Break);\n                     break;\n                 }\n@@ -4342,14 +4292,12 @@ impl<'a> Parser<'a> {\n                 continue;\n             };\n         }\n-        let block = HasRecovered::new(P(ast::Block {\n+        Ok(P(ast::Block {\n             stmts,\n             id: ast::DUMMY_NODE_ID,\n             rules: s,\n             span: lo.to(self.prev_span),\n-        }), error);\n-\n-        Ok(block)\n+        }))\n     }\n \n     /// Parse a statement, including the trailing semicolon.\n@@ -4984,22 +4932,11 @@ impl<'a> Parser<'a> {\n                      constness: Spanned<Constness>,\n                      abi: abi::Abi)\n                      -> PResult<'a, ItemInfo> {\n-\n-        self.parse_item_fn_recoverable(unsafety, constness, abi)?.into_result()\n-    }\n-\n-    fn parse_item_fn_recoverable(&mut self,\n-                                 unsafety: Unsafety,\n-                                 constness: Spanned<Constness>,\n-                                 abi: abi::Abi)\n-                                 -> PResult<'a, HasRecovered<'a, ItemInfo>> {\n         let (ident, mut generics) = self.parse_fn_header()?;\n         let decl = self.parse_fn_decl(false)?;\n         generics.where_clause = self.parse_where_clause()?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n-        Ok(body.map(|body| (ident,\n-                            ItemKind::Fn(decl, unsafety, constness, abi, generics, body),\n-                            Some(inner_attrs))))\n+        Ok((ident, ItemKind::Fn(decl, unsafety, constness, abi, generics, body), Some(inner_attrs)))\n     }\n \n     /// true if we are looking at `const ID`, false for things like `const fn` etc\n@@ -5183,7 +5120,6 @@ impl<'a> Parser<'a> {\n             generics.where_clause = self.parse_where_clause()?;\n             *at_end = true;\n             let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n-            let body = body.into_result()?;\n             Ok((ident, inner_attrs, generics, ast::ImplItemKind::Method(ast::MethodSig {\n                 abi,\n                 unsafety,\n@@ -6369,49 +6305,31 @@ impl<'a> Parser<'a> {\n                 let mut err = self.diagnostic()\n                     .struct_span_err(sp, \"missing `struct` for struct definition\");\n                 err.span_suggestion_short(sp, &msg, \" struct \".into());\n-                err.emit();\n-                self.consume_block(token::Brace);\n-                let prev_span = self.prev_span;\n-                let item = self.mk_item(lo.to(prev_span),\n-                                        ident,\n-                                        ItemKind::Placeholder,\n-                                        visibility,\n-                                        vec![]);\n-                return Ok(Some(item));\n+                return Err(err);\n             } else if self.look_ahead(1, |t| *t == token::OpenDelim(token::Paren)) {\n                 let ident = self.parse_ident().unwrap();\n                 self.consume_block(token::Paren);\n-                let (kw, ambiguous) = if self.check(&token::OpenDelim(token::Brace)) {\n-                    self.consume_block(token::Brace);\n-                    (\"fn\", false)\n+                let (kw, kw_name, ambiguous) = if self.check(&token::RArrow) ||\n+                    self.check(&token::OpenDelim(token::Brace))\n+                {\n+                    (\"fn\", \"method\", false)\n                 } else if self.check(&token::Colon) {\n                     let kw = \"struct\";\n-                    (kw, false)\n+                    (kw, kw, false)\n                 } else {\n-                    (\"fn` or `struct\", true)\n+                    (\"fn` or `struct\", \"method or struct\", true)\n                 };\n \n-                let msg = format!(\"missing `{}`{}\", kw,\n-                                   if ambiguous {\n-                                       \"\".to_string()\n-                                   } else {\n-                                       format!(\" for {} definition\", kw)\n-                                   });\n+                let msg = format!(\"missing `{}` for {} definition\", kw, kw_name);\n                 let mut err = self.diagnostic().struct_span_err(sp, &msg);\n                 if !ambiguous {\n-                    let suggestion = format!(\"add `{kw}` here to parse `{}` as a public {kw}\",\n+                    let suggestion = format!(\"add `{}` here to parse `{}` as a public {}\",\n+                                             kw,\n                                              ident,\n-                                             kw=kw);\n+                                             kw_name);\n                     err.span_suggestion_short(sp, &suggestion, format!(\" {} \", kw));\n                 }\n-                err.emit();\n-                let prev_span = self.prev_span;\n-                let item = self.mk_item(lo.to(prev_span),\n-                                        ident,\n-                                        ItemKind::Placeholder,\n-                                        visibility,\n-                                        vec![]);\n-                return Ok(Some(item));\n+                return Err(err);\n             }\n         }\n         self.parse_macro_use_or_failure(attrs, macros_allowed, attributes_allowed, lo, visibility)"}, {"sha": "38627b40544f5a500c1eec64040c32c04fc92795", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c82e9e8e1e634250b901b69808f65fbe5f3312c3", "patch": "@@ -1386,12 +1386,6 @@ impl<'a> State<'a> {\n                 self.s.word(\";\")?;\n                 self.end()?;\n             }\n-            ast::ItemKind::Placeholder => {\n-                self.s.word(\"<placeholder \")?;\n-                self.print_ident(item.ident)?;\n-                self.s.word(\">\")?;\n-                self.end()?;\n-            }\n         }\n         self.ann.post(self, NodeItem(item))\n     }"}, {"sha": "c2e90f0bb13a32f30d19bf688c7a13e89ecc35a2", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=c82e9e8e1e634250b901b69808f65fbe5f3312c3", "patch": "@@ -307,7 +307,6 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n         }\n         ItemKind::Mac(ref mac) => visitor.visit_mac(mac),\n         ItemKind::MacroDef(ref ts) => visitor.visit_mac_def(ts, item.id),\n-        ItemKind::Placeholder => (),\n     }\n     walk_list!(visitor, visit_attribute, &item.attrs);\n }"}, {"sha": "7f300ed23425306b13406354cbb0d952f6dc877f", "filename": "src/test/ui/pub/pub-restricted-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.rs?ref=c82e9e8e1e634250b901b69808f65fbe5f3312c3", "patch": "@@ -16,4 +16,4 @@ struct Foo {\n     pub(crate) () foo: usize,\n }\n \n-\n+fn main() {}"}, {"sha": "40c50a4b8dd92a05b9c1866091d51a5d0056dd1e", "filename": "src/test/ui/suggestions/pub-ident-fn-2.rs", "status": "renamed", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-2.rs?ref=c82e9e8e1e634250b901b69808f65fbe5f3312c3", "patch": "@@ -8,32 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub Struct {\n-    y: usize,\n-}\n-\n-pub Y {\n-    x: usize,\n-\n-\n-pub struct X {\n-    foo();\n-}\n-\n-pub Z {\n-    x->foo(),\n-}\n-\n-pub foo(foo) {\n-    foo\n-}\n+pub foo(s: usize) { bar() }\n \n-pub struct X {\n-    foo();\n+fn main() {\n+    foo(2);\n }\n-\n-pub Z {\n-    x->foo(),\n-}\n-\n-fn main(){}", "previous_filename": "src/test/ui/suggestions/pub-ident-missing-kw-unclosed-block.rs"}, {"sha": "43b81efbf4ce51bc37ca33118cc68d9198f562ce", "filename": "src/test/ui/suggestions/pub-ident-fn-2.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-2.stderr?ref=c82e9e8e1e634250b901b69808f65fbe5f3312c3", "patch": "@@ -0,0 +1,13 @@\n+error: missing `fn` for method definition\n+  --> $DIR/pub-ident-fn-2.rs:11:4\n+   |\n+11 | pub foo(s: usize) { bar() }\n+   |    ^\n+   |\n+help: add `fn` here to parse `foo` as a public method\n+   |\n+11 | pub fn foo(s: usize) { bar() }\n+   |     ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6b5ae19e6ff986757a997d6f06b8f34ad276809c", "filename": "src/test/ui/suggestions/pub-ident-fn-or-struct-2.rs", "status": "renamed", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct-2.rs?ref=c82e9e8e1e634250b901b69808f65fbe5f3312c3", "patch": "@@ -8,32 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub Struct {\n-    y: usize,\n-}\n+pub S();\n \n-pub Y {\n-    x: usize,\n-}\n-\n-pub struct X {\n-    foo();\n-}\n-\n-pub Z {\n-    x->foo(),\n-}\n-\n-pub foo(foo) {\n-    foo\n-}\n-\n-pub struct X {\n-    foo();\n-}\n-\n-pub Z {\n-    x->foo(),\n-}\n-\n-fn main(){}\n+fn main() {}", "previous_filename": "src/test/ui/suggestions/pub-ident-missing-kw.rs"}, {"sha": "e8636f67e0bfb64cf5b2956e51eaa114161acb1e", "filename": "src/test/ui/suggestions/pub-ident-fn-or-struct-2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct-2.stderr?ref=c82e9e8e1e634250b901b69808f65fbe5f3312c3", "patch": "@@ -0,0 +1,8 @@\n+error: missing `fn` or `struct` for method or struct definition\n+  --> $DIR/pub-ident-fn-or-struct-2.rs:11:4\n+   |\n+11 | pub S();\n+   |    ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8bb1c6afcbb136869751ca43140f41f2024aba5a", "filename": "src/test/ui/suggestions/pub-ident-fn-or-struct.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct.rs?ref=c82e9e8e1e634250b901b69808f65fbe5f3312c3", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub S (foo) bar\n+\n+fn main() {}"}, {"sha": "dc391c1113d11fce3a6e294709c1b36fe103147a", "filename": "src/test/ui/suggestions/pub-ident-fn-or-struct.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c82e9e8e1e634250b901b69808f65fbe5f3312c3/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct.stderr?ref=c82e9e8e1e634250b901b69808f65fbe5f3312c3", "patch": "@@ -0,0 +1,8 @@\n+error: missing `fn` or `struct` for method or struct definition\n+  --> $DIR/pub-ident-fn-or-struct.rs:11:4\n+   |\n+11 | pub S (foo) bar\n+   |    ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a580aaac8deba9df7805b4db694c5d62405b90e9", "filename": "src/test/ui/suggestions/pub-ident-missing-kw-unclosed-block.stderr", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7c0387e36a1dab95492de61a2f26262a4526c286/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-missing-kw-unclosed-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0387e36a1dab95492de61a2f26262a4526c286/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-missing-kw-unclosed-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-missing-kw-unclosed-block.stderr?ref=7c0387e36a1dab95492de61a2f26262a4526c286", "patch": "@@ -1,36 +0,0 @@\n-error: this file contains an un-closed delimiter\n-  --> $DIR/pub-ident-missing-kw-unclosed-block.rs:29:13\n-   |\n-39 | fn main(){}\n-   |             ^\n-   |\n-help: did you mean to close this delimiter?\n-  --> $DIR/pub-ident-missing-kw-unclosed-block.rs:5:7\n-   |\n-15 | pub Y {\n-   |       ^\n-\n-error: missing `struct` for struct definition\n-  --> $DIR/pub-ident-missing-kw-unclosed-block.rs:1:4\n-   |\n-11 | pub Struct {\n-   |    ^\n-   |\n-help: add `struct` here to parse `Struct` as a public struct\n-   |\n-11 | pub struct Struct {\n-   |     ^^^^^^\n-\n-error: missing `struct` for struct definition\n-  --> $DIR/pub-ident-missing-kw-unclosed-block.rs:5:4\n-   |\n-15 | pub Y {\n-   |    ^\n-   |\n-help: add `struct` here to parse `Y` as a public struct\n-   |\n-15 | pub struct Y {\n-   |     ^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "23ac4eca2b42f1681cf5c03a0b272ffc2b2a9a09", "filename": "src/test/ui/suggestions/pub-ident-missing-kw.stderr", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/7c0387e36a1dab95492de61a2f26262a4526c286/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-missing-kw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0387e36a1dab95492de61a2f26262a4526c286/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-missing-kw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-missing-kw.stderr?ref=7c0387e36a1dab95492de61a2f26262a4526c286", "patch": "@@ -1,69 +0,0 @@\n-error: missing `struct` for struct definition\n-  --> $DIR/pub-ident-missing-kw.rs:11:4\n-   |\n-11 | pub Struct {\n-   |    ^\n-   |\n-help: add `struct` here to parse `Struct` as a public struct\n-   |\n-11 | pub struct Struct {\n-   |     ^^^^^^\n-\n-error: missing `struct` for struct definition\n-  --> $DIR/pub-ident-missing-kw.rs:15:4\n-   |\n-15 | pub Y {\n-   |    ^\n-   |\n-help: add `struct` here to parse `Y` as a public struct\n-   |\n-15 | pub struct Y {\n-   |     ^^^^^^\n-\n-error: expected `:`, found `(`\n-  --> $DIR/pub-ident-missing-kw.rs:20:8\n-   |\n-20 |     foo();\n-   |        ^\n-\n-error: missing `struct` for struct definition\n-  --> $DIR/pub-ident-missing-kw.rs:23:4\n-   |\n-23 | pub Z {\n-   |    ^\n-   |\n-help: add `struct` here to parse `Z` as a public struct\n-   |\n-23 | pub struct Z {\n-   |     ^^^^^^\n-\n-error: missing `fn` for fn definition\n-  --> $DIR/pub-ident-missing-kw.rs:27:4\n-   |\n-27 | pub foo(foo) {\n-   |    ^\n-   |\n-help: add `fn` here to parse `foo` as a public fn\n-   |\n-27 | pub fn foo(foo) {\n-   |     ^^\n-\n-error: expected `:`, found `(`\n-  --> $DIR/pub-ident-missing-kw.rs:32:8\n-   |\n-32 |     foo();\n-   |        ^\n-\n-error: missing `struct` for struct definition\n-  --> $DIR/pub-ident-missing-kw.rs:35:4\n-   |\n-35 | pub Z {\n-   |    ^\n-   |\n-help: add `struct` here to parse `Z` as a public struct\n-   |\n-35 | pub struct Z {\n-   |     ^^^^^^\n-\n-error: aborting due to 7 previous errors\n-"}]}