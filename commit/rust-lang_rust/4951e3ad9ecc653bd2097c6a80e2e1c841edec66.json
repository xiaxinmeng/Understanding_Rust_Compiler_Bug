{"sha": "4951e3ad9ecc653bd2097c6a80e2e1c841edec66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NTFlM2FkOWVjYzY1M2JkMjA5N2M2YTgwZTJlMWM4NDFlZGVjNjY=", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-09-14T10:52:36Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-09-16T12:12:28Z"}, "message": "Point at argument when evaluating `Path`'s bounds\n\nWhen evaluating an `ExprKind::Call`, we first have to `check_expr` on it's\ncallee. When this one is a `ExprKind::Path`, we had to evaluate the bounds\nintroduced for its arguments, but by the time we evaluated them we no\nlonger had access to the argument spans. Now we special case this so\nthat we can point at the right place on unsatisfied bounds. This also\nallows the E0277 deduplication to kick in correctly, so we now emit\nfewer errors.", "tree": {"sha": "df518e51a2dccf8d172a8bd56a48102edcac9bf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df518e51a2dccf8d172a8bd56a48102edcac9bf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4951e3ad9ecc653bd2097c6a80e2e1c841edec66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4951e3ad9ecc653bd2097c6a80e2e1c841edec66", "html_url": "https://github.com/rust-lang/rust/commit/4951e3ad9ecc653bd2097c6a80e2e1c841edec66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d8290568506e5d85422f23ab73ce79519201995", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d8290568506e5d85422f23ab73ce79519201995", "html_url": "https://github.com/rust-lang/rust/commit/1d8290568506e5d85422f23ab73ce79519201995"}], "stats": {"total": 95, "additions": 43, "deletions": 52}, "files": [{"sha": "1cc06b8c2e544b9ca5bdf2130cd61ea1dd21b46f", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=4951e3ad9ecc653bd2097c6a80e2e1c841edec66", "patch": "@@ -72,7 +72,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         arg_exprs: &'tcx [hir::Expr<'tcx>],\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n-        let original_callee_ty = self.check_expr(callee_expr);\n+        let original_callee_ty = match &callee_expr.kind {\n+            hir::ExprKind::Path(hir::QPath::Resolved(..) | hir::QPath::TypeRelative(..)) => self\n+                .check_expr_with_expectation_and_args(\n+                    callee_expr,\n+                    Expectation::NoExpectation,\n+                    arg_exprs,\n+                ),\n+            _ => self.check_expr(callee_expr),\n+        };\n+\n         let expr_ty = self.structurally_resolved_type(call_expr.span, original_callee_ty);\n \n         let mut autoderef = self.autoderef(callee_expr.span, expr_ty);"}, {"sha": "917adf0e2b9bfa17b489ed22f99c0b243be9d3e3", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=4951e3ad9ecc653bd2097c6a80e2e1c841edec66", "patch": "@@ -161,6 +161,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr: &'tcx hir::Expr<'tcx>,\n         expected: Expectation<'tcx>,\n+    ) -> Ty<'tcx> {\n+        self.check_expr_with_expectation_and_args(expr, expected, &[])\n+    }\n+\n+    /// Same as `check_expr_with_expectation`, but allows us to pass in the arguments of a\n+    /// `ExprKind::Call` when evaluating its callee when it is an `ExprKind::Path`.\n+    pub(super) fn check_expr_with_expectation_and_args(\n+        &self,\n+        expr: &'tcx hir::Expr<'tcx>,\n+        expected: Expectation<'tcx>,\n+        args: &'tcx [hir::Expr<'tcx>],\n     ) -> Ty<'tcx> {\n         if self.tcx().sess.verbose() {\n             // make this code only run with -Zverbose because it is probably slow\n@@ -198,7 +209,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let old_diverges = self.diverges.replace(Diverges::Maybe);\n         let old_has_errors = self.has_errors.replace(false);\n \n-        let ty = ensure_sufficient_stack(|| self.check_expr_kind(expr, expected));\n+        let ty = ensure_sufficient_stack(|| match &expr.kind {\n+            hir::ExprKind::Path(\n+                qpath @ hir::QPath::Resolved(..) | qpath @ hir::QPath::TypeRelative(..),\n+            ) => self.check_expr_path(qpath, expr, args),\n+            _ => self.check_expr_kind(expr, expected),\n+        });\n \n         // Warn for non-block expressions with diverging children.\n         match expr.kind {\n@@ -261,7 +277,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::Path(QPath::LangItem(lang_item, _)) => {\n                 self.check_lang_item_path(lang_item, expr)\n             }\n-            ExprKind::Path(ref qpath) => self.check_expr_path(qpath, expr),\n+            ExprKind::Path(ref qpath) => self.check_expr_path(qpath, expr, &[]),\n             ExprKind::InlineAsm(asm) => self.check_expr_asm(asm),\n             ExprKind::LlvmInlineAsm(asm) => {\n                 for expr in asm.outputs_exprs.iter().chain(asm.inputs_exprs.iter()) {\n@@ -481,10 +497,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.resolve_lang_item_path(lang_item, expr.span, expr.hir_id).1\n     }\n \n-    fn check_expr_path(\n+    pub(crate) fn check_expr_path(\n         &self,\n         qpath: &'tcx hir::QPath<'tcx>,\n         expr: &'tcx hir::Expr<'tcx>,\n+        args: &'tcx [hir::Expr<'tcx>],\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n         let (res, opt_ty, segs) =\n@@ -517,16 +534,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // We just want to check sizedness, so instead of introducing\n                     // placeholder lifetimes with probing, we just replace higher lifetimes\n                     // with fresh vars.\n+                    let span = args.get(i).map(|a| a.span).unwrap_or(expr.span);\n                     let input = self\n                         .replace_bound_vars_with_fresh_vars(\n-                            expr.span,\n+                            span,\n                             infer::LateBoundRegionConversionTime::FnCall,\n                             fn_sig.input(i),\n                         )\n                         .0;\n                     self.require_type_is_sized_deferred(\n                         input,\n-                        expr.span,\n+                        span,\n                         traits::SizedArgumentType(None),\n                     );\n                 }"}, {"sha": "912dedfdcebbc3b220401347f2191c494eb02f5a", "filename": "src/test/ui/associated-types/associated-types-path-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs?ref=4951e3ad9ecc653bd2097c6a80e2e1c841edec66", "patch": "@@ -28,13 +28,11 @@ pub fn f1_int_uint() {\n pub fn f1_uint_uint() {\n     f1(2u32, 4u32);\n     //~^ ERROR `u32: Foo` is not satisfied\n-    //~| ERROR `u32: Foo` is not satisfied\n }\n \n pub fn f1_uint_int() {\n     f1(2u32, 4i32);\n     //~^ ERROR `u32: Foo` is not satisfied\n-    //~| ERROR `u32: Foo` is not satisfied\n }\n \n pub fn f2_int() {"}, {"sha": "15a5245d54d9577c52a6350962400918138c6670", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=4951e3ad9ecc653bd2097c6a80e2e1c841edec66", "patch": "@@ -24,13 +24,7 @@ LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n    |              ^^^ required by this bound in `f1`\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n-  --> $DIR/associated-types-path-2.rs:29:5\n-   |\n-LL |     f1(2u32, 4u32);\n-   |     ^^ the trait `Foo` is not implemented for `u32`\n-\n-error[E0277]: the trait bound `u32: Foo` is not satisfied\n-  --> $DIR/associated-types-path-2.rs:35:14\n+  --> $DIR/associated-types-path-2.rs:34:14\n    |\n LL |     f1(2u32, 4i32);\n    |     --       ^^^^ the trait `Foo` is not implemented for `u32`\n@@ -43,14 +37,8 @@ note: required by a bound in `f1`\n LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n    |              ^^^ required by this bound in `f1`\n \n-error[E0277]: the trait bound `u32: Foo` is not satisfied\n-  --> $DIR/associated-types-path-2.rs:35:5\n-   |\n-LL |     f1(2u32, 4i32);\n-   |     ^^ the trait `Foo` is not implemented for `u32`\n-\n error[E0308]: mismatched types\n-  --> $DIR/associated-types-path-2.rs:41:18\n+  --> $DIR/associated-types-path-2.rs:39:18\n    |\n LL |     let _: i32 = f2(2i32);\n    |            ---   ^^^^^^^^ expected `i32`, found `u32`\n@@ -62,7 +50,7 @@ help: you can convert a `u32` to an `i32` and panic if the converted value doesn\n LL |     let _: i32 = f2(2i32).try_into().unwrap();\n    |                          ++++++++++++++++++++\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0277, E0308.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "0f7520ef7f8a95a80644466eedf36a0a5902a143", "filename": "src/test/ui/feature-gates/feature-gate-unsized_fn_params.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr?ref=4951e3ad9ecc653bd2097c6a80e2e1c841edec66", "patch": "@@ -12,10 +12,10 @@ LL | fn foo(x: &dyn Foo) {\n    |           +\n \n error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n-  --> $DIR/feature-gate-unsized_fn_params.rs:24:5\n+  --> $DIR/feature-gate-unsized_fn_params.rs:24:9\n    |\n LL |     foo(*x);\n-   |     ^^^ doesn't have a size known at compile-time\n+   |         ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn Foo + 'static)`\n    = note: all function arguments must have a statically known size"}, {"sha": "7629a5a3be1ea475a59ff154d41fecfb8f7669f6", "filename": "src/test/ui/issues/issue-17651.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/src%2Ftest%2Fui%2Fissues%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/src%2Ftest%2Fui%2Fissues%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.rs?ref=4951e3ad9ecc653bd2097c6a80e2e1c841edec66", "patch": "@@ -4,5 +4,4 @@\n fn main() {\n     (|| Box::new(*(&[0][..])))();\n     //~^ ERROR the size for values of type\n-    //~| ERROR the size for values of type\n }"}, {"sha": "214477f6c60ef4881258e7fa883a53453acb06f9", "filename": "src/test/ui/issues/issue-17651.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr?ref=4951e3ad9ecc653bd2097c6a80e2e1c841edec66", "patch": "@@ -13,16 +13,6 @@ note: required by `Box::<T>::new`\n LL |     pub fn new(x: T) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the size for values of type `[{integer}]` cannot be known at compilation time\n-  --> $DIR/issue-17651.rs:5:9\n-   |\n-LL |     (|| Box::new(*(&[0][..])))();\n-   |         ^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `[{integer}]`\n-   = note: all function arguments must have a statically known size\n-   = help: unsized fn params are gated as an unstable feature\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "71bbdf5dec7696600f3a02ee2544624d0c097244", "filename": "src/test/ui/issues/issue-30355.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr?ref=4951e3ad9ecc653bd2097c6a80e2e1c841edec66", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/issue-30355.rs:5:6\n+  --> $DIR/issue-30355.rs:5:8\n    |\n LL |     &X(*Y)\n-   |      ^ doesn't have a size known at compile-time\n+   |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n    = note: all function arguments must have a statically known size"}, {"sha": "6813b07a2ee64069483b5919d7d583d94cc10de1", "filename": "src/test/ui/suggestions/issue-84973-blacklist.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.rs?ref=4951e3ad9ecc653bd2097c6a80e2e1c841edec66", "patch": "@@ -21,7 +21,6 @@ fn main() {\n     let ref_cl: &dyn Fn() -> () = &cl;\n     f_sized(*ref_cl);\n     //~^ ERROR: the size for values of type `dyn Fn()` cannot be known at compilation time [E0277]\n-    //~| ERROR: the size for values of type `dyn Fn()` cannot be known at compilation time [E0277]\n \n     use std::rc::Rc;\n     let rc = Rc::new(0);"}, {"sha": "ae55c96702adaed6e9fd46b0482a968834e5d53c", "filename": "src/test/ui/suggestions/issue-84973-blacklist.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4951e3ad9ecc653bd2097c6a80e2e1c841edec66/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr?ref=4951e3ad9ecc653bd2097c6a80e2e1c841edec66", "patch": "@@ -55,7 +55,7 @@ LL | fn f_sized<T: Sized>(t: T) {}\n    |            ^ required by this bound in `f_sized`\n \n error[E0277]: `Rc<{integer}>` cannot be sent between threads safely\n-  --> $DIR/issue-84973-blacklist.rs:28:12\n+  --> $DIR/issue-84973-blacklist.rs:27:12\n    |\n LL |     f_send(rc);\n    |     ------ ^^ `Rc<{integer}>` cannot be sent between threads safely\n@@ -69,16 +69,6 @@ note: required by a bound in `f_send`\n LL | fn f_send<T: Send>(t: T) {}\n    |              ^^^^ required by this bound in `f_send`\n \n-error[E0277]: the size for values of type `dyn Fn()` cannot be known at compilation time\n-  --> $DIR/issue-84973-blacklist.rs:22:5\n-   |\n-LL |     f_sized(*ref_cl);\n-   |     ^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `dyn Fn()`\n-   = note: all function arguments must have a statically known size\n-   = help: unsized fn params are gated as an unstable feature\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}