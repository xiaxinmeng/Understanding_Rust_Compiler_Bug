{"sha": "9ec2be7d63ce1857721efab8b4a6d5fdd762e1b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYzJiZTdkNjNjZTE4NTc3MjFlZmFiOGI0YTZkNWZkZDc2MmUxYjA=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-07-03T12:43:02Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-07-03T12:43:02Z"}, "message": "Extract transmute_value as a function to avoid code repetition", "tree": {"sha": "7f150b8af6296058b77faa5ffa0d233c0b7c7d32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f150b8af6296058b77faa5ffa0d233c0b7c7d32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ec2be7d63ce1857721efab8b4a6d5fdd762e1b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl7/J9YACgkQgTGiTgx5\n768GwxAAkw5dCHDVZ7JdW0xMay6qQ3xs+Vn0mmBX01dahVNJ5wf+lxT0NHNtPXk/\nCksZqwVoBVjiXgtgIjLZ9fOWd+Bpbf1Al5frqQMY07FlD7+BDFwNYtjCb/mVTiSR\nXy9iNY7KXJIIcrncPXxCgR4XrDnnMoRSMQvu7IlFBJ07FQDfKEGvcngDbRjl4brB\nvKPuK/9Z5xsixcGGTDziPgKUoLlUiWtzXSP8FJwamSiktfp1F7UusvwUFGy3tccR\nJO2Kw/B/g0ETWVC7cwJVyBQgnhKRyjAS+JYqGclWZAfdXfGC1yi/2emG8gxdNvAV\nQoKU+R8y9y7+qvy6oJgSXpfceChJwhlxU1st+0FqR3IzNntbhnydG0ob0jDtLfV8\nHuQjmgSaZU/pjgrRUnGOYrLRtm2MzuIBzzs+c2t0eDWjuiiQT8SgKSSt4gnOUb7Q\nSrDJIKcroO5NLvAG3Kj1/MiAthrUNp6/3mgdLvG05Kuf8w+TEqxggC1W+0kqryM4\nFaJE4NAWVmy3gleQ0Q9c9bT9GhJ6vfdwdXVDu+DBxPpx2goJQZKskhZg303MNboh\nSgB+FTzY3abquOC+tcSIh8flreH/EYKMcyEidWjjmoWsHW28SVqu4+LJVyg1rnU9\nB/jsNqXRK8N3lOI1+g4tdwoBlGdJkgtPUCBIkHsIUhrwMiAO8yE=\n=/NfC\n-----END PGP SIGNATURE-----", "payload": "tree 7f150b8af6296058b77faa5ffa0d233c0b7c7d32\nparent aa80ed0a2ddf61acc136e5ae89ee1608046b9493\nauthor Santiago Pastorino <spastorino@gmail.com> 1593780182 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1593780182 -0300\n\nExtract transmute_value as a function to avoid code repetition\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec2be7d63ce1857721efab8b4a6d5fdd762e1b0", "html_url": "https://github.com/rust-lang/rust/commit/9ec2be7d63ce1857721efab8b4a6d5fdd762e1b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ec2be7d63ce1857721efab8b4a6d5fdd762e1b0/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa80ed0a2ddf61acc136e5ae89ee1608046b9493", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa80ed0a2ddf61acc136e5ae89ee1608046b9493", "html_url": "https://github.com/rust-lang/rust/commit/aa80ed0a2ddf61acc136e5ae89ee1608046b9493"}], "stats": {"total": 77, "additions": 27, "deletions": 50}, "files": [{"sha": "1d0990163bb4f52814f6bb558ae6404f62008b45", "filename": "src/value_and_place.rs", "status": "modified", "additions": 27, "deletions": 50, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/9ec2be7d63ce1857721efab8b4a6d5fdd762e1b0/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec2be7d63ce1857721efab8b4a6d5fdd762e1b0/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=9ec2be7d63ce1857721efab8b4a6d5fdd762e1b0", "patch": "@@ -469,6 +469,30 @@ impl<'tcx> CPlace<'tcx> {\n         #[cfg_attr(not(debug_assertions), allow(unused_variables))]\n         method: &'static str,\n     ) {\n+        fn transmute_value<'tcx>(\n+            fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+            var: Variable,\n+            data: Value,\n+            dst_ty: Type,\n+        ) {\n+            let src_ty = fx.bcx.func.dfg.value_type(data);\n+            let data = match (src_ty, dst_ty) {\n+                (_, _) if src_ty == dst_ty => data,\n+\n+                // This is a `write_cvalue_transmute`.\n+                (types::I32, types::F32) | (types::F32, types::I32)\n+                    | (types::I64, types::F64) | (types::F64, types::I64) => {\n+                        fx.bcx.ins().bitcast(dst_ty, data)\n+                }\n+                _ if src_ty.is_vector() && dst_ty.is_vector() => {\n+                    fx.bcx.ins().raw_bitcast(dst_ty, data)\n+                }\n+                _ => unreachable!(\"write_cvalue_transmute: {:?} -> {:?}\", src_ty, dst_ty),\n+            };\n+            fx.bcx.set_val_label(data, cranelift_codegen::ir::ValueLabel::new(var.index()));\n+            fx.bcx.def_var(var, data);\n+        }\n+\n         assert_eq!(self.layout().size, from.layout().size);\n \n         #[cfg(debug_assertions)]\n@@ -488,62 +512,15 @@ impl<'tcx> CPlace<'tcx> {\n         let to_ptr = match self.inner {\n             CPlaceInner::Var(_local, var) => {\n                 let data = CValue(from.0, dst_layout).load_scalar(fx);\n-                let src_ty = fx.bcx.func.dfg.value_type(data);\n                 let dst_ty = fx.clif_type(self.layout().ty).unwrap();\n-                let data = match (src_ty, dst_ty) {\n-                    (_, _) if src_ty == dst_ty => data,\n-\n-                    // This is a `write_cvalue_transmute`.\n-                    (types::I32, types::F32) | (types::F32, types::I32)\n-                    | (types::I64, types::F64) | (types::F64, types::I64) => {\n-                        fx.bcx.ins().bitcast(dst_ty, data)\n-                    }\n-                    _ if src_ty.is_vector() && dst_ty.is_vector() => {\n-                        fx.bcx.ins().raw_bitcast(dst_ty, data)\n-                    }\n-                    _ => unreachable!(\"write_cvalue_transmute: {:?} -> {:?}\", src_ty, dst_ty),\n-                };\n-                fx.bcx.set_val_label(data, cranelift_codegen::ir::ValueLabel::new(var.index()));\n-                fx.bcx.def_var(var, data);\n+                transmute_value(fx, var, data, dst_ty);\n                 return;\n             }\n             CPlaceInner::VarPair(_local, var1, var2) => {\n                 let (data1, data2) = CValue(from.0, dst_layout).load_scalar_pair(fx);\n                 let (dst_ty1, dst_ty2) = fx.clif_pair_type(self.layout().ty).unwrap();\n-\n-                let src_ty1 = fx.bcx.func.dfg.value_type(data1);\n-                let data = match (src_ty1, dst_ty1) {\n-                    (_, _) if src_ty1 == dst_ty1 => data1,\n-\n-                    // This is a `write_cvalue_transmute`.\n-                    (types::I32, types::F32) | (types::F32, types::I32)\n-                    | (types::I64, types::F64) | (types::F64, types::I64) => {\n-                        fx.bcx.ins().bitcast(dst_ty1, data1)\n-                    }\n-                    _ if src_ty1.is_vector() && dst_ty1.is_vector() => {\n-                        fx.bcx.ins().raw_bitcast(dst_ty1, data1)\n-                    }\n-                    _ => unreachable!(\"write_cvalue_transmute: {:?} -> {:?}\", src_ty1, dst_ty1),\n-                };\n-                fx.bcx.set_val_label(data, cranelift_codegen::ir::ValueLabel::new(var1.index()));\n-                fx.bcx.def_var(var1, data);\n-\n-                let src_ty2 = fx.bcx.func.dfg.value_type(data2);\n-                let data = match (src_ty2, dst_ty2) {\n-                    (_, _) if src_ty2 == dst_ty2 => data2,\n-\n-                    // This is a `write_cvalue_transmute`.\n-                    (types::I32, types::F32) | (types::F32, types::I32)\n-                    | (types::I64, types::F64) | (types::F64, types::I64) => {\n-                        fx.bcx.ins().bitcast(dst_ty2, data2)\n-                    }\n-                    _ if src_ty2.is_vector() && dst_ty2.is_vector() => {\n-                        fx.bcx.ins().raw_bitcast(dst_ty2, data2)\n-                    }\n-                    _ => unreachable!(\"write_cvalue_transmute: {:?} -> {:?}\", src_ty2, dst_ty2),\n-                };\n-                fx.bcx.set_val_label(data, cranelift_codegen::ir::ValueLabel::new(var2.index()));\n-                fx.bcx.def_var(var2, data);\n+                transmute_value(fx, var1, data1, dst_ty1);\n+                transmute_value(fx, var2, data2, dst_ty2);\n                 return;\n             }\n             CPlaceInner::Addr(ptr, None) => {"}]}