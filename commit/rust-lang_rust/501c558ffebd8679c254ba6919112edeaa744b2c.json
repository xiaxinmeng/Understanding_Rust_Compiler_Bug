{"sha": "501c558ffebd8679c254ba6919112edeaa744b2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMWM1NThmZmViZDg2NzljMjU0YmE2OTE5MTEyZWRlYWE3NDRiMmM=", "commit": {"author": {"name": "Cengiz Can", "email": "123910+cengizIO@users.noreply.github.com", "date": "2017-11-07T21:29:28Z"}, "committer": {"name": "Cengiz Can", "email": "cengizc@gmail.com", "date": "2017-11-12T15:56:45Z"}, "message": "use BTreeMap for region constraints", "tree": {"sha": "d7fbd9c60c9de491b4a0f4fc78b6055992df6926", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7fbd9c60c9de491b4a0f4fc78b6055992df6926"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/501c558ffebd8679c254ba6919112edeaa744b2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/501c558ffebd8679c254ba6919112edeaa744b2c", "html_url": "https://github.com/rust-lang/rust/commit/501c558ffebd8679c254ba6919112edeaa744b2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/501c558ffebd8679c254ba6919112edeaa744b2c/comments", "author": {"login": "cengiz-io", "id": 123910, "node_id": "MDQ6VXNlcjEyMzkxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/123910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cengiz-io", "html_url": "https://github.com/cengiz-io", "followers_url": "https://api.github.com/users/cengiz-io/followers", "following_url": "https://api.github.com/users/cengiz-io/following{/other_user}", "gists_url": "https://api.github.com/users/cengiz-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/cengiz-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cengiz-io/subscriptions", "organizations_url": "https://api.github.com/users/cengiz-io/orgs", "repos_url": "https://api.github.com/users/cengiz-io/repos", "events_url": "https://api.github.com/users/cengiz-io/events{/privacy}", "received_events_url": "https://api.github.com/users/cengiz-io/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cengiz-io", "id": 123910, "node_id": "MDQ6VXNlcjEyMzkxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/123910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cengiz-io", "html_url": "https://github.com/cengiz-io", "followers_url": "https://api.github.com/users/cengiz-io/followers", "following_url": "https://api.github.com/users/cengiz-io/following{/other_user}", "gists_url": "https://api.github.com/users/cengiz-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/cengiz-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cengiz-io/subscriptions", "organizations_url": "https://api.github.com/users/cengiz-io/orgs", "repos_url": "https://api.github.com/users/cengiz-io/repos", "events_url": "https://api.github.com/users/cengiz-io/events{/privacy}", "received_events_url": "https://api.github.com/users/cengiz-io/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee839b36ac0497180e3807f58a0b21c02e248fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee839b36ac0497180e3807f58a0b21c02e248fe5", "html_url": "https://github.com/rust-lang/rust/commit/ee839b36ac0497180e3807f58a0b21c02e248fe5"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "efe364166e4be6c14f7fcf08f5645a492cec8614", "filename": "src/librustc/infer/region_inference/graphviz.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/501c558ffebd8679c254ba6919112edeaa744b2c/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501c558ffebd8679c254ba6919112edeaa744b2c/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=501c558ffebd8679c254ba6919112edeaa744b2c", "patch": "@@ -30,6 +30,7 @@ use util::nodemap::{FxHashMap, FxHashSet};\n \n use std::borrow::Cow;\n use std::collections::hash_map::Entry::Vacant;\n+use std::collections::btree_map::BTreeMap;\n use std::env;\n use std::fs::File;\n use std::io;\n@@ -124,7 +125,7 @@ pub fn maybe_print_constraints_for<'a, 'gcx, 'tcx>(\n struct ConstraintGraph<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     graph_name: String,\n     region_rels: &'a RegionRelations<'a, 'gcx, 'tcx>,\n-    map: &'a FxHashMap<Constraint<'tcx>, SubregionOrigin<'tcx>>,\n+    map: &'a BTreeMap<Constraint<'tcx>, SubregionOrigin<'tcx>>,\n     node_ids: FxHashMap<Node, usize>,\n }\n \n@@ -264,7 +265,7 @@ impl<'a, 'gcx, 'tcx> dot::GraphWalk<'a> for ConstraintGraph<'a, 'gcx, 'tcx> {\n     }\n }\n \n-pub type ConstraintMap<'tcx> = FxHashMap<Constraint<'tcx>, SubregionOrigin<'tcx>>;\n+pub type ConstraintMap<'tcx> = BTreeMap<Constraint<'tcx>, SubregionOrigin<'tcx>>;\n \n fn dump_region_constraints_to<'a, 'gcx, 'tcx>(region_rels: &RegionRelations<'a, 'gcx, 'tcx>,\n                                               map: &ConstraintMap<'tcx>,"}, {"sha": "f9f611c3970b7f43e0b699c5cb7fe993e4c816a6", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/501c558ffebd8679c254ba6919112edeaa744b2c/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501c558ffebd8679c254ba6919112edeaa744b2c/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=501c558ffebd8679c254ba6919112edeaa744b2c", "patch": "@@ -28,6 +28,7 @@ use ty::{Region, RegionVid};\n use ty::{ReEmpty, ReStatic, ReFree, ReEarlyBound, ReErased};\n use ty::{ReLateBound, ReScope, ReVar, ReSkolemized, BrFresh};\n \n+use std::collections::BTreeMap;\n use std::cell::{Cell, RefCell};\n use std::fmt;\n use std::mem;\n@@ -36,7 +37,7 @@ use std::u32;\n mod graphviz;\n \n /// A constraint that influences the inference process.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, PartialOrd, Ord)]\n pub enum Constraint<'tcx> {\n     /// One region variable is subregion of another\n     ConstrainVarSubVar(RegionVid, RegionVid),\n@@ -186,7 +187,7 @@ pub struct RegionVarBindings<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     /// Constraints of the form `A <= B` introduced by the region\n     /// checker.  Here at least one of `A` and `B` must be a region\n     /// variable.\n-    constraints: RefCell<FxHashMap<Constraint<'tcx>, SubregionOrigin<'tcx>>>,\n+    constraints: RefCell<BTreeMap<Constraint<'tcx>, SubregionOrigin<'tcx>>>,\n \n     /// A \"verify\" is something that we need to verify after inference is\n     /// done, but which does not directly affect inference in any way.\n@@ -357,7 +358,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n             tcx,\n             var_origins: RefCell::new(Vec::new()),\n             values: RefCell::new(None),\n-            constraints: RefCell::new(FxHashMap()),\n+            constraints: RefCell::new(BTreeMap::new()),\n             verifys: RefCell::new(Vec::new()),\n             givens: RefCell::new(FxHashSet()),\n             lubs: RefCell::new(FxHashMap()),"}, {"sha": "a60cad0de9f76b32fdbb9cc09097816c385bb6a6", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/501c558ffebd8679c254ba6919112edeaa744b2c/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501c558ffebd8679c254ba6919112edeaa744b2c/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=501c558ffebd8679c254ba6919112edeaa744b2c", "patch": "@@ -760,7 +760,7 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n /// is the outer fn.\n ///\n /// [dbi]: http://en.wikipedia.org/wiki/De_Bruijn_index\n-#[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug, Copy, PartialOrd, Ord)]\n pub struct DebruijnIndex {\n     /// We maintain the invariant that this is never 0. So 1 indicates\n     /// the innermost binder. To ensure this, create with `DebruijnIndex::new`.\n@@ -825,7 +825,7 @@ pub type Region<'tcx> = &'tcx RegionKind;\n ///\n /// [1] http://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/\n /// [2] http://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/\n-#[derive(Clone, PartialEq, Eq, Hash, Copy, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, PartialEq, Eq, Hash, Copy, RustcEncodable, RustcDecodable, PartialOrd, Ord)]\n pub enum RegionKind {\n     // Region bound in a type or fn declaration which will be\n     // substituted 'early' -- that is, at the same time when type\n@@ -871,7 +871,7 @@ pub enum RegionKind {\n \n impl<'tcx> serialize::UseSpecializedDecodable for Region<'tcx> {}\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug, PartialOrd, Ord)]\n pub struct EarlyBoundRegion {\n     pub def_id: DefId,\n     pub index: u32,\n@@ -893,12 +893,12 @@ pub struct FloatVid {\n     pub index: u32,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy, PartialOrd, Ord)]\n pub struct RegionVid {\n     pub index: u32,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, PartialOrd, Ord)]\n pub struct SkolemizedRegionVid {\n     pub index: u32,\n }"}, {"sha": "59688362197c25fd1d1d0a234eece98a0f3f6c62", "filename": "src/test/compile-fail/associated-types/cache/project-fn-ret-invariant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/501c558ffebd8679c254ba6919112edeaa744b2c/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501c558ffebd8679c254ba6919112edeaa744b2c/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs?ref=501c558ffebd8679c254ba6919112edeaa744b2c", "patch": "@@ -60,8 +60,8 @@ fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n \n #[cfg(krisskross)] // two instantiations, mixing and matching: BAD\n fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   let a = bar(foo, y);\n-   let b = bar(foo, x); //[krisskross]~ ERROR E0623\n+   let a = bar(foo, y); //[krisskross]~ ERROR E0623\n+   let b = bar(foo, x);\n    (a, b) //[krisskross]~ ERROR E0623\n }\n "}]}