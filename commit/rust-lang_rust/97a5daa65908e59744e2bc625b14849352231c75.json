{"sha": "97a5daa65908e59744e2bc625b14849352231c75", "node_id": "C_kwDOAAsO6NoAKDk3YTVkYWE2NTkwOGU1OTc0NGUyYmM2MjViMTQ4NDkzNTIyMzFjNzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-13T11:55:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-13T11:55:36Z"}, "message": "Auto merge of #8272 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "c3d92d4862b277e8681a4e384141990be91787d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3d92d4862b277e8681a4e384141990be91787d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97a5daa65908e59744e2bc625b14849352231c75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97a5daa65908e59744e2bc625b14849352231c75", "html_url": "https://github.com/rust-lang/rust/commit/97a5daa65908e59744e2bc625b14849352231c75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97a5daa65908e59744e2bc625b14849352231c75/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60e68d68c655ad0d29343fcc4c0e1deddc4d596d", "url": "https://api.github.com/repos/rust-lang/rust/commits/60e68d68c655ad0d29343fcc4c0e1deddc4d596d", "html_url": "https://github.com/rust-lang/rust/commit/60e68d68c655ad0d29343fcc4c0e1deddc4d596d"}, {"sha": "6ad05bcbbe821c3643e2cecf659fe091818fb7e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad05bcbbe821c3643e2cecf659fe091818fb7e8", "html_url": "https://github.com/rust-lang/rust/commit/6ad05bcbbe821c3643e2cecf659fe091818fb7e8"}], "stats": {"total": 232, "additions": 139, "deletions": 93}, "files": [{"sha": "e445889a58f77d7b4db6354b2ad7aa3c4a5a9e3f", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.59\"\n+version = \"0.1.60\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "2053ca64ba23d19626dfdbaaebd826f70d82a4db", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.59\"\n+version = \"0.1.60\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\"\n@@ -13,7 +13,7 @@ cargo_metadata = \"0.14\"\n clippy_utils = { path = \"../clippy_utils\" }\n if_chain = \"1.0\"\n itertools = \"0.10\"\n-pulldown-cmark = { version = \"0.8\", default-features = false }\n+pulldown-cmark = { version = \"0.9\", default-features = false }\n quine-mc_cluskey = \"0.2\"\n regex-syntax = \"0.6\"\n serde = { version = \"1.0\", features = [\"derive\"] }"}, {"sha": "3070588483c21b33d97fc3ab305cce090b096c0f", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -198,7 +198,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                 let ext_with_default = !variant\n                     .fields\n                     .iter()\n-                    .all(|field| assigned_fields.iter().any(|(a, _)| a == &field.ident.name));\n+                    .all(|field| assigned_fields.iter().any(|(a, _)| a == &field.name));\n \n                 let field_list = assigned_fields\n                     .into_iter()"}, {"sha": "66b5f49817d8daed5ddd1b235b366553581c85a9", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -161,7 +161,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n                                 fields_def\n                                     .iter()\n                                     .find_map(|f_def| {\n-                                        if f_def.ident == field.ident\n+                                        if f_def.ident(self.cx.tcx) == field.ident\n                                             { Some(self.cx.tcx.type_of(f_def.did)) }\n                                         else { None }\n                                     });"}, {"sha": "cb7d5ac73941a1712af8b28984857780f8edf812", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -543,16 +543,16 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n             },\n             Start(Link(_, url, _)) => in_link = Some(url),\n             End(Link(..)) => in_link = None,\n-            Start(Heading(_) | Paragraph | Item) => {\n-                if let Start(Heading(_)) = event {\n+            Start(Heading(_, _, _) | Paragraph | Item) => {\n+                if let Start(Heading(_, _, _)) = event {\n                     in_heading = true;\n                 }\n                 ticks_unbalanced = false;\n                 let (_, span) = get_current_span(spans, range.start);\n                 paragraph_span = first_line_of_span(cx, span);\n             },\n-            End(Heading(_) | Paragraph | Item) => {\n-                if let End(Heading(_)) = event {\n+            End(Heading(_, _, _) | Paragraph | Item) => {\n+                if let End(Heading(_, _, _)) = event {\n                     in_heading = false;\n                 }\n                 if ticks_unbalanced {"}, {"sha": "3d44a669d8f0507ed1870a6fe81a4bea12aa38d7", "filename": "clippy_lints/src/inconsistent_struct_constructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -76,7 +76,7 @@ impl<'tcx> LateLintPass<'tcx> for InconsistentStructConstructor {\n             then {\n                 let mut def_order_map = FxHashMap::default();\n                 for (idx, field) in variant.fields.iter().enumerate() {\n-                    def_order_map.insert(field.ident.name, idx);\n+                    def_order_map.insert(field.name, idx);\n                 }\n \n                 if is_consistent_order(fields, &def_order_map) {"}, {"sha": "e1168c3f6022ef381fc2eb576b44fb47ea8c3e41", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -214,14 +214,14 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n     {\n         let mut current_and_super_traits = DefIdSet::default();\n         fill_trait_set(visited_trait.def_id.to_def_id(), &mut current_and_super_traits, cx);\n+        let is_empty = sym!(is_empty);\n \n         let is_empty_method_found = current_and_super_traits\n             .iter()\n-            .flat_map(|&i| cx.tcx.associated_items(i).in_definition_order())\n+            .flat_map(|&i| cx.tcx.associated_items(i).filter_by_name_unhygienic(is_empty))\n             .any(|i| {\n                 i.kind == ty::AssocKind::Fn\n                     && i.fn_has_self_parameter\n-                    && i.ident.name == sym!(is_empty)\n                     && cx.tcx.fn_sig(i.def_id).inputs().skip_binder().len() == 1\n             });\n \n@@ -458,7 +458,7 @@ fn is_empty_array(expr: &Expr<'_>) -> bool {\n fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     /// Gets an `AssocItem` and return true if it matches `is_empty(self)`.\n     fn is_is_empty(cx: &LateContext<'_>, item: &ty::AssocItem) -> bool {\n-        if item.kind == ty::AssocKind::Fn && item.ident.name.as_str() == \"is_empty\" {\n+        if item.kind == ty::AssocKind::Fn {\n             let sig = cx.tcx.fn_sig(item.def_id);\n             let ty = sig.skip_binder();\n             ty.inputs().len() == 1\n@@ -469,20 +469,22 @@ fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n \n     /// Checks the inherent impl's items for an `is_empty(self)` method.\n     fn has_is_empty_impl(cx: &LateContext<'_>, id: DefId) -> bool {\n+        let is_empty = sym!(is_empty);\n         cx.tcx.inherent_impls(id).iter().any(|imp| {\n             cx.tcx\n                 .associated_items(*imp)\n-                .in_definition_order()\n+                .filter_by_name_unhygienic(is_empty)\n                 .any(|item| is_is_empty(cx, item))\n         })\n     }\n \n     let ty = &cx.typeck_results().expr_ty(expr).peel_refs();\n     match ty.kind() {\n         ty::Dynamic(tt, ..) => tt.principal().map_or(false, |principal| {\n+            let is_empty = sym!(is_empty);\n             cx.tcx\n                 .associated_items(principal.def_id())\n-                .in_definition_order()\n+                .filter_by_name_unhygienic(is_empty)\n                 .any(|item| is_is_empty(cx, item))\n         }),\n         ty::Projection(ref proj) => has_is_empty_impl(cx, proj.item_def_id),"}, {"sha": "76c5cfadc2c1a9f931beec847dc5768aa7c6cfd4", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -8,7 +8,6 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::hygiene::ExpnKind;\n use rustc_span::{edition::Edition, sym, Span};\n \n declare_clippy_lint! {\n@@ -97,42 +96,42 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n             if let Res::Def(DefKind::Mod, id) = path.res;\n             if !id.is_local();\n             then {\n-                for kid in cx.tcx.item_children(id).iter() {\n+                for kid in cx.tcx.module_children(id).iter() {\n                     if let Res::Def(DefKind::Macro(_mac_type), mac_id) = kid.res {\n                         let span = mac_attr.span;\n                         let def_path = cx.tcx.def_path_str(mac_id);\n                         self.imports.push((def_path, span));\n                     }\n                 }\n             } else {\n-                if in_macro(item.span) {\n+                if item.span.from_expansion() {\n                     self.push_unique_macro_pat_ty(cx, item.span);\n                 }\n             }\n         }\n     }\n     fn check_attribute(&mut self, cx: &LateContext<'_>, attr: &ast::Attribute) {\n-        if in_macro(attr.span) {\n+        if attr.span.from_expansion() {\n             self.push_unique_macro(cx, attr.span);\n         }\n     }\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n-        if in_macro(expr.span) {\n+        if expr.span.from_expansion() {\n             self.push_unique_macro(cx, expr.span);\n         }\n     }\n     fn check_stmt(&mut self, cx: &LateContext<'_>, stmt: &hir::Stmt<'_>) {\n-        if in_macro(stmt.span) {\n+        if stmt.span.from_expansion() {\n             self.push_unique_macro(cx, stmt.span);\n         }\n     }\n     fn check_pat(&mut self, cx: &LateContext<'_>, pat: &hir::Pat<'_>) {\n-        if in_macro(pat.span) {\n+        if pat.span.from_expansion() {\n             self.push_unique_macro_pat_ty(cx, pat.span);\n         }\n     }\n     fn check_ty(&mut self, cx: &LateContext<'_>, ty: &hir::Ty<'_>) {\n-        if in_macro(ty.span) {\n+        if ty.span.from_expansion() {\n             self.push_unique_macro_pat_ty(cx, ty.span);\n         }\n     }\n@@ -214,7 +213,3 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         }\n     }\n }\n-\n-fn in_macro(span: Span) -> bool {\n-    span.from_expansion() && !matches!(span.ctxt().outer_expn_data().kind, ExpnKind::Desugaring(..))\n-}"}, {"sha": "60dd957db01f8d69d6b67fef0eb020d6b687ecf9", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -1138,7 +1138,7 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                 s.push_str(\"::\");\n                 s\n             },\n-            variant.ident.name,\n+            variant.name,\n             match variant.ctor_kind {\n                 CtorKind::Fn if variant.fields.len() == 1 => \"(_)\",\n                 CtorKind::Fn => \"(..)\","}, {"sha": "7d2ff083b7e07f95b8c76971933638d3caf175f2", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -12,11 +12,10 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{\n     BodyId, Expr, ExprKind, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind, UnOp,\n };\n-use rustc_infer::traits::specialization_graph;\n use rustc_lint::{LateContext, LateLintPass, Lint};\n use rustc_middle::mir::interpret::{ConstValue, ErrorHandled};\n use rustc_middle::ty::adjustment::Adjust;\n-use rustc_middle::ty::{self, AssocKind, Const, Ty};\n+use rustc_middle::ty::{self, Const, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{InnerSpan, Span, DUMMY_SP};\n use rustc_typeck::hir_ty_to_ty;\n@@ -293,8 +292,10 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                         // Lint a trait impl item only when the definition is a generic type,\n                         // assuming an assoc const is not meant to be an interior mutable type.\n                         if let Some(of_trait_def_id) = of_trait_ref.trait_def_id();\n-                        if let Some(of_assoc_item) = specialization_graph::Node::Trait(of_trait_def_id)\n-                            .item(cx.tcx, impl_item.ident, AssocKind::Const, of_trait_def_id);\n+                        if let Some(of_assoc_item) = cx\n+                            .tcx\n+                            .associated_item(impl_item.def_id)\n+                            .trait_item_def_id;\n                         if cx\n                             .tcx\n                             .layout_of(cx.tcx.param_env(of_trait_def_id).and(\n@@ -303,7 +304,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                                 // and, in that case, the definition is *not* generic.\n                                 cx.tcx.normalize_erasing_regions(\n                                     cx.tcx.param_env(of_trait_def_id),\n-                                    cx.tcx.type_of(of_assoc_item.def_id),\n+                                    cx.tcx.type_of(of_assoc_item),\n                                 ),\n                             ))\n                             .is_err();"}, {"sha": "c9b2ce476e89d0d5cb8408a7b4f0978a3593c5fb", "filename": "clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -58,7 +58,7 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'_>, item: &Item<'_\n         // First check if last field is an array\n         if let ItemKind::Struct(data, _) = &item.kind;\n         if let Some(last_field) = data.fields().last();\n-        if let rustc_hir::TyKind::Array(_, length) = last_field.ty.kind;\n+        if let rustc_hir::TyKind::Array(_, rustc_hir::ArrayLen::Body(length)) = last_field.ty.kind;\n \n         // Then check if that that array zero-sized\n         let length_ldid = cx.tcx.hir().local_def_id(length.hir_id);"}, {"sha": "a86db58741eb6ca0a052b2dbf21756dd0ee2d03f", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -13,7 +13,6 @@ use rustc_hir::{\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n-use rustc_middle::ty::AssocKind;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -143,10 +142,10 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                 // trait, not in the impl of the trait.\n                 let trait_method = cx\n                     .tcx\n-                    .associated_items(impl_trait_ref.def_id)\n-                    .find_by_name_and_kind(cx.tcx, impl_item.ident, AssocKind::Fn, impl_trait_ref.def_id)\n+                    .associated_item(impl_item.def_id)\n+                    .trait_item_def_id\n                     .expect(\"impl method matches a trait method\");\n-                let trait_method_sig = cx.tcx.fn_sig(trait_method.def_id);\n+                let trait_method_sig = cx.tcx.fn_sig(trait_method);\n                 let trait_method_sig = cx.tcx.erase_late_bound_regions(trait_method_sig);\n \n                 // `impl_inputs_outputs` is an iterator over the types (`hir::Ty`) declared in the"}, {"sha": "7751c593e435a3410d52c139bf286b8c79dfb22e", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::ast::{LitFloatType, LitKind};\n use rustc_ast::LitIntType;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::{ExprKind, FnRetTy, HirId, Lit, PatKind, QPath, StmtKind, TyKind};\n+use rustc_hir::{ArrayLen, ExprKind, FnRetTy, HirId, Lit, PatKind, QPath, StmtKind, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::{Ident, Symbol};\n@@ -567,7 +567,14 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 bind!(self, value, length);\n                 kind!(\"Repeat({value}, {length})\");\n                 self.expr(value);\n-                self.body(field!(length.body));\n+                match length.value {\n+                    ArrayLen::Infer(..) => out!(\"if let ArrayLen::Infer(..) = length;\"),\n+                    ArrayLen::Body(anon_const) => {\n+                        bind!(self, anon_const);\n+                        out!(\"if let ArrayLen::Body({anon_const}) = {length};\");\n+                        self.body(field!(anon_const.body));\n+                    },\n+                }\n             },\n             ExprKind::Err => kind!(\"Err\"),\n             ExprKind::DropTemps(expr) => {"}, {"sha": "e90b6b73b34208c2283e480d3a18cde80d117765", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -334,12 +334,17 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n             println!(\"{}anon_const:\", ind);\n             print_expr(cx, &cx.tcx.hir().body(anon_const.body).value, indent + 1);\n         },\n-        hir::ExprKind::Repeat(val, ref anon_const) => {\n+        hir::ExprKind::Repeat(val, length) => {\n             println!(\"{}Repeat\", ind);\n             println!(\"{}value:\", ind);\n             print_expr(cx, val, indent + 1);\n             println!(\"{}repeat count:\", ind);\n-            print_expr(cx, &cx.tcx.hir().body(anon_const.body).value, indent + 1);\n+            match length {\n+                hir::ArrayLen::Infer(_, _) => println!(\"{}repeat count: _\", ind),\n+                hir::ArrayLen::Body(anon_const) => {\n+                    print_expr(cx, &cx.tcx.hir().body(anon_const.body).value, indent + 1);\n+                },\n+            }\n         },\n         hir::ExprKind::Err => {\n             println!(\"{}Err\", ind);"}, {"sha": "9c3dcc8e96a0644698ce5a915fdb5e72c1d8a534", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -929,9 +929,20 @@ pub fn check_path(cx: &LateContext<'_>, path: &[&str]) -> bool {\n         let lang_item_path = cx.get_def_path(*item_def_id);\n         if path_syms.starts_with(&lang_item_path) {\n             if let [item] = &path_syms[lang_item_path.len()..] {\n-                for child in cx.tcx.item_children(*item_def_id) {\n-                    if child.ident.name == *item {\n-                        return true;\n+                if matches!(\n+                    cx.tcx.def_kind(*item_def_id),\n+                    DefKind::Mod | DefKind::Enum | DefKind::Trait\n+                ) {\n+                    for child in cx.tcx.module_children(*item_def_id) {\n+                        if child.ident.name == *item {\n+                            return true;\n+                        }\n+                    }\n+                } else {\n+                    for child in cx.tcx.associated_item_def_ids(*item_def_id) {\n+                        if cx.tcx.item_name(*child) == *item {\n+                            return true;\n+                        }\n                     }\n                 }\n             }\n@@ -989,7 +1000,7 @@ impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n \n         for &module in &[&paths::KW_MODULE, &paths::SYM_MODULE] {\n             if let Some(def_id) = path_to_res(cx, module).opt_def_id() {\n-                for item in cx.tcx.item_children(def_id).iter() {\n+                for item in cx.tcx.module_children(def_id).iter() {\n                     if_chain! {\n                         if let Res::Def(DefKind::Const, item_def_id) = item.res;\n                         let ty = cx.tcx.type_of(item_def_id);"}, {"sha": "afff6491aba6420b39febc824702f9776656170f", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.59\"\n+version = \"0.1.60\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "5a08a411dd13f5bc338ae60e3f7d6c29c1675eb9", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fx::FxHasher;\n use rustc_hir::def::Res;\n use rustc_hir::HirIdMap;\n use rustc_hir::{\n-    BinOpKind, Block, BodyId, Expr, ExprField, ExprKind, FnRetTy, GenericArg, GenericArgs, Guard, HirId,\n+    ArrayLen, BinOpKind, Block, BodyId, Expr, ExprField, ExprKind, FnRetTy, GenericArg, GenericArgs, Guard, HirId,\n     InlineAsmOperand, Let, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path, PathSegment, QPath, Stmt,\n     StmtKind, Ty, TyKind, TypeBinding,\n };\n@@ -170,6 +170,14 @@ impl HirEqInterExpr<'_, '_, '_> {\n         }\n     }\n \n+    pub fn eq_array_length(&mut self, left: ArrayLen, right: ArrayLen) -> bool {\n+        match (left, right) {\n+            (ArrayLen::Infer(..), ArrayLen::Infer(..)) => true,\n+            (ArrayLen::Body(l_ct), ArrayLen::Body(r_ct)) => self.eq_body(l_ct.body, r_ct.body),\n+            (_, _) => false,\n+        }\n+    }\n+\n     pub fn eq_body(&mut self, left: BodyId, right: BodyId) -> bool {\n         let cx = self.inner.cx;\n         let eval_const = |body| constant_context(cx, cx.tcx.typeck_body(body)).expr(&cx.tcx.hir().body(body).value);\n@@ -194,8 +202,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n         }\n \n         let is_eq = match (\n-            &reduce_exprkind(self.inner.cx, &left.kind),\n-            &reduce_exprkind(self.inner.cx, &right.kind),\n+            reduce_exprkind(self.inner.cx, &left.kind),\n+            reduce_exprkind(self.inner.cx, &right.kind),\n         ) {\n             (&ExprKind::AddrOf(lb, l_mut, le), &ExprKind::AddrOf(rb, r_mut, re)) => {\n                 lb == rb && l_mut == r_mut && self.eq_expr(le, re)\n@@ -232,7 +240,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n             },\n             (&ExprKind::Index(la, li), &ExprKind::Index(ra, ri)) => self.eq_expr(la, ra) && self.eq_expr(li, ri),\n             (&ExprKind::If(lc, lt, ref le), &ExprKind::If(rc, rt, ref re)) => {\n-                self.eq_expr(lc, rc) && self.eq_expr(&**lt, &**rt) && both(le, re, |l, r| self.eq_expr(l, r))\n+                self.eq_expr(lc, rc) && self.eq_expr(lt, rt) && both(le, re, |l, r| self.eq_expr(l, r))\n             },\n             (&ExprKind::Let(l), &ExprKind::Let(r)) => {\n                 self.eq_pat(l.pat, r.pat) && both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r)) && self.eq_expr(l.init, r.init)\n@@ -253,8 +261,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&ExprKind::MethodCall(l_path, _, l_args, _), &ExprKind::MethodCall(r_path, _, r_args, _)) => {\n                 self.inner.allow_side_effects && self.eq_path_segment(l_path, r_path) && self.eq_exprs(l_args, r_args)\n             },\n-            (&ExprKind::Repeat(le, ref ll_id), &ExprKind::Repeat(re, ref rl_id)) => {\n-                self.eq_expr(le, re) && self.eq_body(ll_id.body, rl_id.body)\n+            (&ExprKind::Repeat(le, ll), &ExprKind::Repeat(re, rl)) => {\n+                self.eq_expr(le, re) && self.eq_array_length(ll, rl)\n             },\n             (&ExprKind::Ret(ref l), &ExprKind::Ret(ref r)) => both(l, r, |l, r| self.eq_expr(l, r)),\n             (&ExprKind::Path(ref l), &ExprKind::Path(ref r)) => self.eq_qpath(l, r),\n@@ -391,9 +399,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n     pub fn eq_ty(&mut self, left: &Ty<'_>, right: &Ty<'_>) -> bool {\n         match (&left.kind, &right.kind) {\n             (&TyKind::Slice(l_vec), &TyKind::Slice(r_vec)) => self.eq_ty(l_vec, r_vec),\n-            (&TyKind::Array(lt, ref ll_id), &TyKind::Array(rt, ref rl_id)) => {\n-                self.eq_ty(lt, rt) && self.eq_body(ll_id.body, rl_id.body)\n-            },\n+            (&TyKind::Array(lt, ll), &TyKind::Array(rt, rl)) => self.eq_ty(lt, rt) && self.eq_array_length(ll, rl),\n             (&TyKind::Ptr(ref l_mut), &TyKind::Ptr(ref r_mut)) => {\n                 l_mut.mutbl == r_mut.mutbl && self.eq_ty(&*l_mut.ty, &*r_mut.ty)\n             },\n@@ -714,9 +720,9 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             ExprKind::ConstBlock(ref l_id) => {\n                 self.hash_body(l_id.body);\n             },\n-            ExprKind::Repeat(e, ref l_id) => {\n+            ExprKind::Repeat(e, len) => {\n                 self.hash_expr(e);\n-                self.hash_body(l_id.body);\n+                self.hash_array_length(len);\n             },\n             ExprKind::Ret(ref e) => {\n                 if let Some(e) = *e {\n@@ -908,9 +914,9 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             TyKind::Slice(ty) => {\n                 self.hash_ty(ty);\n             },\n-            TyKind::Array(ty, anon_const) => {\n+            &TyKind::Array(ty, len) => {\n                 self.hash_ty(ty);\n-                self.hash_body(anon_const.body);\n+                self.hash_array_length(len);\n             },\n             TyKind::Ptr(ref mut_ty) => {\n                 self.hash_ty(mut_ty.ty);\n@@ -955,6 +961,13 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         }\n     }\n \n+    pub fn hash_array_length(&mut self, length: ArrayLen) {\n+        match length {\n+            ArrayLen::Infer(..) => {},\n+            ArrayLen::Body(anon_const) => self.hash_body(anon_const.body),\n+        }\n+    }\n+\n     pub fn hash_body(&mut self, body_id: BodyId) {\n         // swap out TypeckResults when hashing a body\n         let old_maybe_typeck_results = self.maybe_typeck_results.replace(self.cx.tcx.typeck_body(body_id));"}, {"sha": "5c97535dcdf00507f31da832f68a8c39b8317b03", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -76,13 +76,12 @@ use rustc_hir::intravisit::{walk_expr, ErasedMap, FnKind, NestedVisitorMap, Visi\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n-    def, lang_items, Arm, BindingAnnotation, Block, BlockCheckMode, Body, Constness, Destination, Expr, ExprKind,\n-    FnDecl, ForeignItem, GenericArgs, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local,\n-    MatchSource, Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, Target,\n-    TraitItem, TraitItemKind, TraitRef, TyKind, UnOp,\n+    def, lang_items, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Constness, Destination, Expr,\n+    ExprKind, FnDecl, ForeignItem, GenericArgs, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem,\n+    Local, MatchSource, Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind,\n+    Target, TraitItem, TraitItemKind, TraitRef, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n-use rustc_middle::hir::exports::Export;\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::ty as rustc_ty;\n@@ -520,10 +519,21 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n             }\n         };\n     }\n-    fn item_child_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Option<&'tcx Export> {\n-        tcx.item_children(def_id)\n-            .iter()\n-            .find(|item| item.ident.name.as_str() == name)\n+    fn item_child_by_name(tcx: TyCtxt<'_>, def_id: DefId, name: &str) -> Option<Res> {\n+        match tcx.def_kind(def_id) {\n+            DefKind::Mod | DefKind::Enum | DefKind::Trait => tcx\n+                .module_children(def_id)\n+                .iter()\n+                .find(|item| item.ident.name.as_str() == name)\n+                .map(|child| child.res.expect_non_local()),\n+            DefKind::Impl => tcx\n+                .associated_item_def_ids(def_id)\n+                .iter()\n+                .copied()\n+                .find(|assoc_def_id| tcx.item_name(*assoc_def_id).as_str() == name)\n+                .map(|assoc_def_id| Res::Def(tcx.def_kind(assoc_def_id), assoc_def_id)),\n+            _ => None,\n+        }\n     }\n     fn find_primitive(tcx: TyCtxt<'_>, name: &str) -> Option<DefId> {\n         if let Some(&(index, Target::Impl)) = lang_items::ITEM_REFS.get(&Symbol::intern(name)) {\n@@ -556,15 +566,12 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n     let last = path\n         .iter()\n         .copied()\n-        // `get_def_path` seems to generate these empty segments for extern blocks.\n-        // We can just ignore them.\n-        .filter(|segment| !segment.is_empty())\n         // for each segment, find the child item\n-        .try_fold(first, |item, segment| {\n-            let def_id = item.res.def_id();\n+        .try_fold(first, |res, segment| {\n+            let def_id = res.def_id();\n             if let Some(item) = item_child_by_name(tcx, def_id, segment) {\n                 Some(item)\n-            } else if matches!(item.res, Res::Def(DefKind::Enum | DefKind::Struct, _)) {\n+            } else if matches!(res, Res::Def(DefKind::Enum | DefKind::Struct, _)) {\n                 // it is not a child item so check inherent impl items\n                 tcx.inherent_impls(def_id)\n                     .iter()\n@@ -573,7 +580,7 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n                 None\n             }\n         });\n-    try_res!(last).res.expect_non_local()\n+    try_res!(last).expect_non_local()\n }\n \n /// Convenience function to get the `DefId` of a trait by path.\n@@ -737,8 +744,8 @@ pub fn is_default_equivalent(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n             _ => false,\n         },\n         ExprKind::Tup(items) | ExprKind::Array(items) => items.iter().all(|x| is_default_equivalent(cx, x)),\n-        ExprKind::Repeat(x, y) => if_chain! {\n-            if let ExprKind::Lit(ref const_lit) = cx.tcx.hir().body(y.body).value.kind;\n+        ExprKind::Repeat(x, ArrayLen::Body(len)) => if_chain! {\n+            if let ExprKind::Lit(ref const_lit) = cx.tcx.hir().body(len.body).value.kind;\n             if let LitKind::Int(v, _) = const_lit.node;\n             if v <= 32 && is_default_equivalent(cx, x);\n             then {"}, {"sha": "8bdc9a9ea16293715084517007a447efcafdf8c0", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -199,7 +199,6 @@ fn check_rvalue<'tcx>(\n             }\n         },\n         Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) | Rvalue::ShallowInitBox(_, _) => Ok(()),\n-        Rvalue::NullaryOp(NullOp::Box, _) => Err((span, \"heap allocations are not allowed in const fn\".into())),\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(body, tcx);\n             if ty.is_integral() || ty.is_bool() {"}, {"sha": "e6a58e92072501a2f4bc8293392634d5bae93cac", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-12-30\"\n+channel = \"nightly-2022-01-13\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "0e85088691765820a5bc313ee9cd0a18a6801410", "filename": "tests/ui-internal/invalid_paths.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/tests%2Fui-internal%2Finvalid_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/tests%2Fui-internal%2Finvalid_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finvalid_paths.stderr?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -1,16 +1,22 @@\n+error: invalid path\n+  --> $DIR/invalid_paths.rs:15:5\n+   |\n+LL |     pub const TRANSMUTE: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::invalid-paths` implied by `-D warnings`\n+\n error: invalid path\n   --> $DIR/invalid_paths.rs:18:5\n    |\n LL |     pub const BAD_CRATE_PATH: [&str; 2] = [\"bad\", \"path\"];\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::invalid-paths` implied by `-D warnings`\n \n error: invalid path\n   --> $DIR/invalid_paths.rs:21:5\n    |\n LL |     pub const BAD_MOD_PATH: [&str; 2] = [\"std\", \"xxx\"];\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "471bbce4f4185e2184ca058174d6cfe5480b8006", "filename": "tests/ui/author/repeat.stdout", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/tests%2Fui%2Fauthor%2Frepeat.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/tests%2Fui%2Fauthor%2Frepeat.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Frepeat.stdout?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -2,7 +2,8 @@ if_chain! {\n     if let ExprKind::Repeat(value, length) = expr.kind;\n     if let ExprKind::Lit(ref lit) = value.kind;\n     if let LitKind::Int(1, LitIntType::Unsigned(UintTy::U8)) = lit.node;\n-    let expr1 = &cx.tcx.hir().body(length.body).value;\n+    if let ArrayLen::Body(anon_const) = length;\n+    let expr1 = &cx.tcx.hir().body(anon_const.body).value;\n     if let ExprKind::Lit(ref lit1) = expr1.kind;\n     if let LitKind::Int(5, LitIntType::Unsuffixed) = lit1.node;\n     then {"}, {"sha": "306ea50258da00ad0d133616dc85c1a0a4549450", "filename": "tests/ui/macro_use_imports.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/tests%2Fui%2Fmacro_use_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/tests%2Fui%2Fmacro_use_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.fixed?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -40,7 +40,7 @@ mod a {\n     }\n }\n \n-// issue #7015, ICE due to calling `item_children` with local `DefId`\n+// issue #7015, ICE due to calling `module_children` with local `DefId`\n #[macro_use]\n use a as b;\n "}, {"sha": "e26a7545ea6f83fc054291bbdce5521d5c27c93d", "filename": "tests/ui/macro_use_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/tests%2Fui%2Fmacro_use_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/tests%2Fui%2Fmacro_use_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -40,7 +40,7 @@ mod a {\n     }\n }\n \n-// issue #7015, ICE due to calling `item_children` with local `DefId`\n+// issue #7015, ICE due to calling `module_children` with local `DefId`\n #[macro_use]\n use a as b;\n "}, {"sha": "e726b652ef1ed7a18ba4b950137770e271ab57f7", "filename": "tests/ui/unreadable_literal.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/tests%2Fui%2Funreadable_literal.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/tests%2Fui%2Funreadable_literal.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.fixed?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -30,7 +30,7 @@ fn main() {\n         1_234.123_f32,\n         1.123_4_f32,\n     );\n-    let _bad = (0b11_0110_i64, 0xcafe_babe_usize, 123_456_f32, 1.234_567_f32);\n+    let _bad = (0b11_0110_i64, 0x1234_5678_usize, 123_456_f32, 1.234_567_f32);\n     let _good_sci = 1.1234e1;\n     let _bad_sci = 1.123_456e1;\n "}, {"sha": "5bbb2fc9dc137c28339316a5d5c7dc3a85792d64", "filename": "tests/ui/unreadable_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/tests%2Fui%2Funreadable_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/tests%2Fui%2Funreadable_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.rs?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -30,7 +30,7 @@ fn main() {\n         1_234.123_f32,\n         1.123_4_f32,\n     );\n-    let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n+    let _bad = (0b110110_i64, 0x12345678_usize, 123456_f32, 1.234567_f32);\n     let _good_sci = 1.1234e1;\n     let _bad_sci = 1.123456e1;\n "}, {"sha": "ee5466fd517fd6e00dd79b2cd4324f1df819a8c3", "filename": "tests/ui/unreadable_literal.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97a5daa65908e59744e2bc625b14849352231c75/tests%2Fui%2Funreadable_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97a5daa65908e59744e2bc625b14849352231c75/tests%2Fui%2Funreadable_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.stderr?ref=97a5daa65908e59744e2bc625b14849352231c75", "patch": "@@ -9,27 +9,27 @@ LL |         0x1_234_567,\n error: long literal lacking separators\n   --> $DIR/unreadable_literal.rs:33:17\n    |\n-LL |     let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n+LL |     let _bad = (0b110110_i64, 0x12345678_usize, 123456_f32, 1.234567_f32);\n    |                 ^^^^^^^^^^^^ help: consider: `0b11_0110_i64`\n    |\n    = note: `-D clippy::unreadable-literal` implied by `-D warnings`\n \n error: long literal lacking separators\n   --> $DIR/unreadable_literal.rs:33:31\n    |\n-LL |     let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n-   |                               ^^^^^^^^^^^^^^^^ help: consider: `0xcafe_babe_usize`\n+LL |     let _bad = (0b110110_i64, 0x12345678_usize, 123456_f32, 1.234567_f32);\n+   |                               ^^^^^^^^^^^^^^^^ help: consider: `0x1234_5678_usize`\n \n error: long literal lacking separators\n   --> $DIR/unreadable_literal.rs:33:49\n    |\n-LL |     let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n+LL |     let _bad = (0b110110_i64, 0x12345678_usize, 123456_f32, 1.234567_f32);\n    |                                                 ^^^^^^^^^^ help: consider: `123_456_f32`\n \n error: long literal lacking separators\n   --> $DIR/unreadable_literal.rs:33:61\n    |\n-LL |     let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n+LL |     let _bad = (0b110110_i64, 0x12345678_usize, 123456_f32, 1.234567_f32);\n    |                                                             ^^^^^^^^^^^^ help: consider: `1.234_567_f32`\n \n error: long literal lacking separators"}]}