{"sha": "3918b82993708db5ddcfd476252cf7632281ce19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MThiODI5OTM3MDhkYjVkZGNmZDQ3NjI1MmNmNzYzMjI4MWNlMTk=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-12-10T20:27:07Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-12-10T21:04:19Z"}, "message": "Use `def_path_hash_to_def_id` when re-using a `RawDefId`\n\nFixes #79890\n\nPreviously, we just copied a `RawDefId` from the 'old' map to the 'new'\nmap. However, the `RawDefId` for a given `DefPathHash` may be different\nin the current compilation session. Using `def_path_hash_to_def_id`\nensures that the `RawDefId` we use is valid in the current session.", "tree": {"sha": "4e25184d3c3d04d0745502502c48ea51aa5c334d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e25184d3c3d04d0745502502c48ea51aa5c334d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3918b82993708db5ddcfd476252cf7632281ce19", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl/SjWIACgkQtAh+UQ6Y\nsWQrDxAAl2yk/KJiC4X3u/6k9j3LJoqfEhScH0b+CUmivXLPabx1kyWUTmZDbWI3\nTP07vdxjFTfTInC6MrbvmTNwhFP+jfT4zsz4WKEoK3ZboZ/f6y0Cy6i4v8rZTCyC\nk8BKN/IpGuN4zsyH4ihw2ftSfErqj5Qju08Xlrw8DSpRYVYSvB13DAy84f58ufp3\nsPqEbWIrRfAEL009DiDF1DTPlSLR24Wjuff95CP+kL5eXZcGyViu6Hpmtqx4ENF2\nixSwuAad7DERrqSJU58ez4WeI8SttYTEjsXvbAOLbdxsGj/87WaZB3lygOqBe5Ml\nqpg3OsHqFy4xuhfXinKckPHlyo5A9Z+TnXS8+JHeglI7PVS4EVkAIMurqd7RDno/\nW/eZQARJqv+X5dJ6YRwDruOKsC0TCcUosz5xiFpdaSz1NIQcHqlJm+hiPokqHAfp\nx7zdIl0qW4RLKtOyFWggidLsZ5BlLAgqh86A3Uu8rTy7LYjN8H/SDReWveWk8UWj\nJZTFeiqnVMuk84XG9lfi5EIdeMjoQswXOAv0EBSmpROrQ9D54KOpLJyGT5XVbHpE\nGONlwWXz5ZkkbIq0XmHAjaWMzUFAwRDHcyQBxjdCxvFnpRqCyX/9UOMWAbh0GQpY\ntn3hdLOLPKpw8/ULRHXWl24Tl+We76oRIr5kEiDT6arG3nIU+50=\n=CcYn\n-----END PGP SIGNATURE-----", "payload": "tree 4e25184d3c3d04d0745502502c48ea51aa5c334d\nparent d32c320d7eee56706486fef6be778495303afe9e\nauthor Aaron Hill <aa1ronham@gmail.com> 1607632027 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1607634259 -0500\n\nUse `def_path_hash_to_def_id` when re-using a `RawDefId`\n\nFixes #79890\n\nPreviously, we just copied a `RawDefId` from the 'old' map to the 'new'\nmap. However, the `RawDefId` for a given `DefPathHash` may be different\nin the current compilation session. Using `def_path_hash_to_def_id`\nensures that the `RawDefId` we use is valid in the current session.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3918b82993708db5ddcfd476252cf7632281ce19", "html_url": "https://github.com/rust-lang/rust/commit/3918b82993708db5ddcfd476252cf7632281ce19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3918b82993708db5ddcfd476252cf7632281ce19/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d32c320d7eee56706486fef6be778495303afe9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d32c320d7eee56706486fef6be778495303afe9e", "html_url": "https://github.com/rust-lang/rust/commit/d32c320d7eee56706486fef6be778495303afe9e"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "e641c1cd77bdb608288499816938ef7c3b773342", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3918b82993708db5ddcfd476252cf7632281ce19/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3918b82993708db5ddcfd476252cf7632281ce19/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=3918b82993708db5ddcfd476252cf7632281ce19", "patch": "@@ -93,7 +93,7 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n \n     fn register_reused_dep_path_hash(&self, hash: DefPathHash) {\n         if let Some(cache) = self.queries.on_disk_cache.as_ref() {\n-            cache.register_reused_dep_path_hash(hash)\n+            cache.register_reused_dep_path_hash(*self, hash)\n         }\n     }\n "}, {"sha": "3eed94b1ffbc0f613824408bcd7e58add3a92403", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3918b82993708db5ddcfd476252cf7632281ce19/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3918b82993708db5ddcfd476252cf7632281ce19/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=3918b82993708db5ddcfd476252cf7632281ce19", "patch": "@@ -454,6 +454,7 @@ impl<'sess> OnDiskCache<'sess> {\n     fn try_remap_cnum(&self, tcx: TyCtxt<'_>, cnum: u32) -> Option<CrateNum> {\n         let cnum_map =\n             self.cnum_map.get_or_init(|| Self::compute_cnum_map(tcx, &self.prev_cnums[..]));\n+        debug!(\"try_remap_cnum({}): cnum_map={:?}\", cnum, cnum_map);\n \n         cnum_map[CrateNum::from_u32(cnum)]\n     }\n@@ -466,9 +467,22 @@ impl<'sess> OnDiskCache<'sess> {\n             .insert(hash, RawDefId { krate: def_id.krate.as_u32(), index: def_id.index.as_u32() });\n     }\n \n-    pub fn register_reused_dep_path_hash(&self, hash: DefPathHash) {\n-        if let Some(old_id) = self.foreign_def_path_hashes.get(&hash) {\n-            self.latest_foreign_def_path_hashes.lock().insert(hash, *old_id);\n+    /// If the given `hash` still exists in the current compilation,\n+    /// calls `store_foreign_def_id` with its current `DefId`.\n+    ///\n+    /// Normally, `store_foreign_def_id_hash` can be called directly by\n+    /// the dependency graph when we construct a `DepNode`. However,\n+    /// when we re-use a deserialized `DepNode` from the previous compilation\n+    /// session, we only have the `DefPathHash` available. This method is used\n+    /// to that any `DepNode` that we re-use has a `DefPathHash` -> `RawId` written\n+    /// out for usage in the next compilation session.\n+    pub fn register_reused_dep_path_hash(&self, tcx: TyCtxt<'tcx>, hash: DefPathHash) {\n+        // We can't simply copy the `RawDefId` from `foreign_def_path_hashes` to\n+        // `latest_foreign_def_path_hashes`, since the `RawDefId` might have\n+        // changed in the current compilation session (e.g. we've added/removed crates,\n+        // or added/removed definitions before/after the target definition).\n+        if let Some(def_id) = self.def_path_hash_to_def_id(tcx, hash) {\n+            self.store_foreign_def_id_hash(def_id, hash);\n         }\n     }\n \n@@ -592,6 +606,7 @@ impl<'sess> OnDiskCache<'sess> {\n         match cache.entry(hash) {\n             Entry::Occupied(e) => *e.get(),\n             Entry::Vacant(e) => {\n+                debug!(\"def_path_hash_to_def_id({:?})\", hash);\n                 // Check if the `DefPathHash` corresponds to a definition in the current\n                 // crate\n                 if let Some(def_id) = self.local_def_path_hash_to_def_id.get(&hash).cloned() {\n@@ -605,9 +620,11 @@ impl<'sess> OnDiskCache<'sess> {\n                 // current compilation session, the crate is guaranteed to be the same\n                 // (otherwise, we would compute a different `DefPathHash`).\n                 let raw_def_id = self.get_raw_def_id(&hash)?;\n+                debug!(\"def_path_hash_to_def_id({:?}): raw_def_id = {:?}\", hash, raw_def_id);\n                 // If the owning crate no longer exists, the corresponding definition definitely\n                 // no longer exists.\n                 let krate = self.try_remap_cnum(tcx, raw_def_id.krate)?;\n+                debug!(\"def_path_hash_to_def_id({:?}): krate = {:?}\", hash, krate);\n                 // If our `DefPathHash` corresponded to a definition in the local crate,\n                 // we should have either found it in `local_def_path_hash_to_def_id`, or\n                 // never attempted to load it in the first place. Any query result or `DepNode`\n@@ -621,6 +638,7 @@ impl<'sess> OnDiskCache<'sess> {\n                 // Try to find a definition in the current session, using the previous `DefIndex`\n                 // as an initial guess.\n                 let opt_def_id = tcx.cstore.def_path_hash_to_def_id(krate, raw_def_id.index, hash);\n+                debug!(\"def_path_to_def_id({:?}): opt_def_id = {:?}\", hash, opt_def_id);\n                 e.insert(opt_def_id);\n                 opt_def_id\n             }"}, {"sha": "956d476d973ef89013c342efb5d44b3bc4267f9d", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3918b82993708db5ddcfd476252cf7632281ce19/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3918b82993708db5ddcfd476252cf7632281ce19/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=3918b82993708db5ddcfd476252cf7632281ce19", "patch": "@@ -596,9 +596,9 @@ impl<K: DepKind> DepGraph<K> {\n                     // an eval_always node, let's try to mark it green recursively.\n                     if !dep_dep_node.kind.is_eval_always() {\n                         debug!(\n-                            \"try_mark_previous_green({:?}) --- state of dependency {:?} \\\n+                            \"try_mark_previous_green({:?}) --- state of dependency {:?} ({}) \\\n                                  is unknown, trying to mark it green\",\n-                            dep_node, dep_dep_node\n+                            dep_node, dep_dep_node, dep_dep_node.hash,\n                         );\n \n                         let node_index = self.try_mark_previous_green("}, {"sha": "8eaeafa5207df828c4d354116c319ef11dd2ef6b", "filename": "src/test/incremental/auxiliary/issue-79890.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3918b82993708db5ddcfd476252cf7632281ce19/src%2Ftest%2Fincremental%2Fauxiliary%2Fissue-79890.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3918b82993708db5ddcfd476252cf7632281ce19/src%2Ftest%2Fincremental%2Fauxiliary%2Fissue-79890.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fauxiliary%2Fissue-79890.rs?ref=3918b82993708db5ddcfd476252cf7632281ce19", "patch": "@@ -0,0 +1 @@\n+pub trait MyTrait {}"}, {"sha": "93daa5ca93588f6628bf0d4615a235bd5a6252d4", "filename": "src/test/incremental/issue-79890-imported-crates-changed.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3918b82993708db5ddcfd476252cf7632281ce19/src%2Ftest%2Fincremental%2Fissue-79890-imported-crates-changed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3918b82993708db5ddcfd476252cf7632281ce19/src%2Ftest%2Fincremental%2Fissue-79890-imported-crates-changed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-79890-imported-crates-changed.rs?ref=3918b82993708db5ddcfd476252cf7632281ce19", "patch": "@@ -0,0 +1,7 @@\n+// aux-build:issue-79890.rs\n+// revisions:rpass1 rpass2 rpass3\n+// compile-flags:--extern issue_79890 --test\n+// edition:2018\n+\n+// Tests that we don't ICE when the set of imported crates changes\n+#[cfg(rpass2)] use issue_79890::MyTrait;"}]}