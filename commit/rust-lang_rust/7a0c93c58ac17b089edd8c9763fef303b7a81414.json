{"sha": "7a0c93c58ac17b089edd8c9763fef303b7a81414", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMGM5M2M1OGFjMTdiMDg5ZWRkOGM5NzYzZmVmMzAzYjdhODE0MTQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-23T16:10:40Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-23T16:45:44Z"}, "message": "Infer correct expected type for generic struct fields", "tree": {"sha": "49cb56219cd7aea41376c49252601264ebabcf1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49cb56219cd7aea41376c49252601264ebabcf1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a0c93c58ac17b089edd8c9763fef303b7a81414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0c93c58ac17b089edd8c9763fef303b7a81414", "html_url": "https://github.com/rust-lang/rust/commit/7a0c93c58ac17b089edd8c9763fef303b7a81414", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a0c93c58ac17b089edd8c9763fef303b7a81414/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a6cdd776d403bacce0a5471d77e8c76695c5bc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6cdd776d403bacce0a5471d77e8c76695c5bc5", "html_url": "https://github.com/rust-lang/rust/commit/4a6cdd776d403bacce0a5471d77e8c76695c5bc5"}], "stats": {"total": 65, "additions": 46, "deletions": 19}, "files": [{"sha": "edee99356b1b66c7322a73f369657c0d7dc43e89", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a0c93c58ac17b089edd8c9763fef303b7a81414/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0c93c58ac17b089edd8c9763fef303b7a81414/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=7a0c93c58ac17b089edd8c9763fef303b7a81414", "patch": "@@ -513,9 +513,9 @@ impl Field {\n     }\n \n     /// Returns the type as in the signature of the struct (i.e., with\n-    /// placeholder types for type parameters). This is good for showing\n-    /// signature help, but not so good to actually get the type of the field\n-    /// when you actually have a variable of the struct.\n+    /// placeholder types for type parameters). Only use this in the context of\n+    /// the field *definition*; if you've already got a variable of the struct\n+    /// type, use `Type::field_type` to get to the field type.\n     pub fn ty(&self, db: &dyn HirDatabase) -> Type {\n         let var_id = self.parent.into();\n         let generic_def_id: GenericDefId = match self.parent {\n@@ -1944,6 +1944,18 @@ impl Type {\n         }\n     }\n \n+    pub fn field_type(&self, db: &dyn HirDatabase, field: Field) -> Option<Type> {\n+        let (adt_id, substs) = self.ty.as_adt()?;\n+        let variant_id: hir_def::VariantId = field.parent.into();\n+        if variant_id.adt_id() != adt_id {\n+            return None;\n+        }\n+\n+        let ty = db.field_types(variant_id).get(field.id)?.clone();\n+        let ty = ty.substitute(&Interner, substs);\n+        Some(self.derived(ty))\n+    }\n+\n     pub fn fields(&self, db: &dyn HirDatabase) -> Vec<(Field, Type)> {\n         let (variant_id, substs) = match self.ty.kind(&Interner) {\n             &TyKind::Adt(hir_ty::AdtId(AdtId::StructId(s)), ref substs) => (s.into(), substs),"}, {"sha": "70001cac86668e57071d2ef66744cbc5fda18f40", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a0c93c58ac17b089edd8c9763fef303b7a81414/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0c93c58ac17b089edd8c9763fef303b7a81414/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=7a0c93c58ac17b089edd8c9763fef303b7a81414", "patch": "@@ -485,6 +485,14 @@ impl VariantId {\n             VariantId::UnionId(it) => it.lookup(db).id.file_id(),\n         }\n     }\n+\n+    pub fn adt_id(self) -> AdtId {\n+        match self {\n+            VariantId::EnumVariantId(it) => it.parent.into(),\n+            VariantId::StructId(it) => it.into(),\n+            VariantId::UnionId(it) => it.into(),\n+        }\n+    }\n }\n \n trait Intern {"}, {"sha": "4a88a6e88b21f21302228a9e5ad75cbf8c7028f9", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7a0c93c58ac17b089edd8c9763fef303b7a81414/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0c93c58ac17b089edd8c9763fef303b7a81414/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=7a0c93c58ac17b089edd8c9763fef303b7a81414", "patch": "@@ -337,25 +337,25 @@ impl<'a> CompletionContext<'a> {\n                     },\n                     ast::RecordExprFieldList(_it) => {\n                         cov_mark::hit!(expected_type_struct_field_without_leading_char);\n-                        self.token.prev_sibling_or_token()\n-                            .and_then(|se| se.into_node())\n-                            .and_then(|node| ast::RecordExprField::cast(node))\n-                            .and_then(|rf| self.sema.resolve_record_field(&rf).zip(Some(rf)))\n-                            .map(|(f, rf)|(\n-                                Some(f.0.ty(self.db)),\n-                                rf.field_name().map(NameOrNameRef::NameRef),\n+                        // wouldn't try {} be nice...\n+                        (|| {\n+                            let record_ty = self.sema.type_of_expr(&ast::Expr::cast(node.parent()?)?)?;\n+                            let expr_field = self.token.prev_sibling_or_token()?\n+                            .into_node()\n+                                      .and_then(|node| ast::RecordExprField::cast(node))?;\n+                            let field = self.sema.resolve_record_field(&expr_field)?.0;\n+                            Some((\n+                                record_ty.field_type(self.db, field),\n+                                expr_field.field_name().map(NameOrNameRef::NameRef),\n                             ))\n-                            .unwrap_or((None, None))\n+                        })().unwrap_or((None, None))\n                     },\n                     ast::RecordExprField(it) => {\n                         cov_mark::hit!(expected_type_struct_field_with_leading_char);\n-                        self.sema\n-                            .resolve_record_field(&it)\n-                            .map(|f|(\n-                                Some(f.0.ty(self.db)),\n-                                it.field_name().map(NameOrNameRef::NameRef),\n-                            ))\n-                            .unwrap_or((None, None))\n+                        (\n+                            it.expr().as_ref().and_then(|e| self.sema.type_of_expr(e)),\n+                            it.field_name().map(NameOrNameRef::NameRef),\n+                        )\n                     },\n                     ast::MatchExpr(it) => {\n                         cov_mark::hit!(expected_type_match_arm_without_leading_char);\n@@ -910,7 +910,7 @@ fn foo() -> u32 {\n     }\n \n     #[test]\n-    fn expected_type_closure_param() {\n+    fn expected_type_closure_param_return() {\n         check_expected_type_and_name(\n             r#\"\n fn foo() {"}, {"sha": "d7f96b8645bfe5ff5e6e84bac32feab749bbea03", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a0c93c58ac17b089edd8c9763fef303b7a81414/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0c93c58ac17b089edd8c9763fef303b7a81414/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=7a0c93c58ac17b089edd8c9763fef303b7a81414", "patch": "@@ -667,6 +667,13 @@ fn foo() { A { the$0 } }\n                         ),\n                         detail: \"u32\",\n                         deprecated: true,\n+                        relevance: CompletionRelevance {\n+                            exact_name_match: false,\n+                            type_match: Some(\n+                                CouldUnify,\n+                            ),\n+                            is_local: false,\n+                        },\n                     },\n                 ]\n             \"#]],"}]}