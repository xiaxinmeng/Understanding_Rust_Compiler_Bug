{"sha": "6f2d8a018e4ff062032608a30615129230490b0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMmQ4YTAxOGU0ZmYwNjIwMzI2MDhhMzA2MTUxMjkyMzA0OTBiMGQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-03-30T01:14:44Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-03-30T01:14:44Z"}, "message": "Suggest box/pin/arc ing receiver on method calls", "tree": {"sha": "84f0a64f2fd17933455bbf64980421ba942a36ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84f0a64f2fd17933455bbf64980421ba942a36ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f2d8a018e4ff062032608a30615129230490b0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f2d8a018e4ff062032608a30615129230490b0d", "html_url": "https://github.com/rust-lang/rust/commit/6f2d8a018e4ff062032608a30615129230490b0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f2d8a018e4ff062032608a30615129230490b0d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2917eda69decdf813daa94b20dfb2edd3a555963", "url": "https://api.github.com/repos/rust-lang/rust/commits/2917eda69decdf813daa94b20dfb2edd3a555963", "html_url": "https://github.com/rust-lang/rust/commit/2917eda69decdf813daa94b20dfb2edd3a555963"}], "stats": {"total": 210, "additions": 113, "deletions": 97}, "files": [{"sha": "9a2e933eb0b44d6fdc8cb29c58297e304bdd7b5b", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d8a018e4ff062032608a30615129230490b0d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d8a018e4ff062032608a30615129230490b0d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=6f2d8a018e4ff062032608a30615129230490b0d", "patch": "@@ -973,7 +973,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         error: MethodError<'tcx>,\n     ) {\n         let rcvr = &args[0];\n-        let try_alt_rcvr = |err: &mut DiagnosticBuilder<'_>, new_rcvr_t| {\n+        let try_alt_rcvr = |err: &mut DiagnosticBuilder<'_>, new_rcvr_t, pre: &str, post: &str| {\n             if let Some(new_rcvr_t) = new_rcvr_t {\n                 if let Ok(pick) = self.lookup_probe(\n                     span,\n@@ -986,11 +986,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // Make sure the method is defined for the *actual* receiver:\n                     // we don't want to treat `Box<Self>` as a receiver if\n                     // it only works because of an autoderef to `&self`\n-                    if pick.autoderefs == 0 {\n+                    if pick.autoderefs == 0\n+                        // We don't want to suggest a container type when the missing method is\n+                        // `.clone()`, otherwise we'd suggest `Arc::new(foo).clone()`, which is\n+                        // far from what the user really wants.\n+                        && Some(pick.item.container.id()) != self.tcx.lang_items().clone_trait()\n+                    {\n                         err.span_label(\n                             pick.item.ident.span,\n                             &format!(\"the method is available for `{}` here\", new_rcvr_t),\n                         );\n+                        err.multipart_suggestion(\n+                            \"consider wrapping the receiver expression with the appropriate type\",\n+                            vec![\n+                                (rcvr.span.shrink_to_lo(), format!(\"{}({}\", pre, post)),\n+                                (rcvr.span.shrink_to_hi(), \")\".to_string()),\n+                            ],\n+                            Applicability::MaybeIncorrect,\n+                        );\n                     }\n                 }\n             }\n@@ -1008,10 +1021,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Try alternative arbitrary self types that could fulfill this call.\n                 // FIXME: probe for all types that *could* be arbitrary self-types, not\n                 // just this list.\n-                try_alt_rcvr(&mut err, self.tcx.mk_lang_item(rcvr_t, LangItem::OwnedBox));\n-                try_alt_rcvr(&mut err, self.tcx.mk_lang_item(rcvr_t, LangItem::Pin));\n-                try_alt_rcvr(&mut err, self.tcx.mk_diagnostic_item(rcvr_t, sym::Arc));\n-                try_alt_rcvr(&mut err, self.tcx.mk_diagnostic_item(rcvr_t, sym::Rc));\n+                for (rcvr_t, post) in &[\n+                    (rcvr_t, \"\"),\n+                    (self.tcx.mk_mut_ref(&ty::ReErased, rcvr_t), \"&mut \"),\n+                    (self.tcx.mk_imm_ref(&ty::ReErased, rcvr_t), \"&\"),\n+                ] {\n+                    for (rcvr_t, pre) in &[\n+                        (self.tcx.mk_lang_item(rcvr_t, LangItem::OwnedBox), \"Box::new\"),\n+                        (self.tcx.mk_lang_item(rcvr_t, LangItem::Pin), \"Pin::new\"),\n+                        (self.tcx.mk_diagnostic_item(rcvr_t, sym::Arc), \"Arc::new\"),\n+                        (self.tcx.mk_diagnostic_item(rcvr_t, sym::Rc), \"Rc::new\"),\n+                    ] {\n+                        try_alt_rcvr(&mut err, *rcvr_t, pre, post);\n+                    }\n+                }\n             }\n             err.emit();\n         }"}, {"sha": "c74fd25f76d37fae78ec4b90866169e0305fe998", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d8a018e4ff062032608a30615129230490b0d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d8a018e4ff062032608a30615129230490b0d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=6f2d8a018e4ff062032608a30615129230490b0d", "patch": "@@ -45,6 +45,7 @@ pub struct MethodCallee<'tcx> {\n     pub sig: ty::FnSig<'tcx>,\n }\n \n+#[derive(Debug)]\n pub enum MethodError<'tcx> {\n     // Did not find an applicable method, but we did find various near-misses that may work.\n     NoMatch(NoMatchData<'tcx>),\n@@ -66,6 +67,7 @@ pub enum MethodError<'tcx> {\n \n // Contains a list of static methods that may apply, a list of unsatisfied trait predicates which\n // could lead to matches if satisfied, and a list of not-in-scope traits which may work.\n+#[derive(Debug)]\n pub struct NoMatchData<'tcx> {\n     pub static_candidates: Vec<CandidateSource>,\n     pub unsatisfied_predicates: Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)>,"}, {"sha": "0d1fe684f60e223042e2e1a02b8f2112f9cae7de", "filename": "src/test/ui/async-await/pin-needed-to-poll.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.rs?ref=6f2d8a018e4ff062032608a30615129230490b0d", "patch": "@@ -0,0 +1,47 @@\n+use std::{\n+    future::Future,\n+    pin::Pin,\n+    task::{Context, Poll},\n+};\n+\n+struct Sleep;\n+\n+impl Future for Sleep {\n+    type Output = ();\n+\n+    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n+        Poll::Ready(())\n+    }\n+}\n+\n+impl Drop for Sleep {\n+    fn drop(&mut self) {}\n+}\n+\n+fn sleep() -> Sleep {\n+    Sleep\n+}\n+\n+\n+struct MyFuture {\n+    sleep: Sleep,\n+}\n+\n+impl MyFuture {\n+    fn new() -> Self {\n+        Self {\n+            sleep: sleep(),\n+        }\n+    }\n+}\n+\n+impl Future for MyFuture {\n+    type Output = ();\n+\n+    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n+        self.sleep.poll(cx)\n+        //~^ ERROR no method named `poll` found for struct `Sleep` in the current scope\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0e3716d6156accbfbcfd01d1c26cd04a264337f8", "filename": "src/test/ui/async-await/pin-needed-to-poll.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.stderr?ref=6f2d8a018e4ff062032608a30615129230490b0d", "patch": "@@ -0,0 +1,25 @@\n+error[E0599]: no method named `poll` found for struct `Sleep` in the current scope\n+  --> $DIR/pin-needed-to-poll.rs:42:20\n+   |\n+LL | struct Sleep;\n+   | ------------- method `poll` not found for this\n+...\n+LL |         self.sleep.poll(cx)\n+   |                    ^^^^ method not found in `Sleep`\n+   | \n+  ::: $SRC_DIR/core/src/future/future.rs:LL:COL\n+   |\n+LL |     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n+   |        ---- the method is available for `Pin<&mut Sleep>` here\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+   = note: the following trait defines an item `poll`, perhaps you need to implement it:\n+           candidate #1: `Future`\n+help: consider wrapping the receiver expression with the appropriate type\n+   |\n+LL |         Pin::new(&mut self.sleep).poll(cx)\n+   |         ^^^^^^^^^^^^^           ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "79095452f9d02230a361e3c945109469081c9483", "filename": "src/test/ui/copy-a-resource.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fcopy-a-resource.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fcopy-a-resource.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcopy-a-resource.stderr?ref=6f2d8a018e4ff062032608a30615129230490b0d", "patch": "@@ -6,14 +6,6 @@ LL | struct Foo {\n ...\n LL |     let _y = x.clone();\n    |                ^^^^^ method not found in `Foo`\n-   | \n-  ::: $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |        -----\n-   |        |\n-   |        the method is available for `Arc<Foo>` here\n-   |        the method is available for `Rc<Foo>` here\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:"}, {"sha": "fd993d0f9d8854059c3bac4facd829919c742dad", "filename": "src/test/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=6f2d8a018e4ff062032608a30615129230490b0d", "patch": "@@ -12,14 +12,6 @@ LL | struct NotClone;\n ...\n LL |     Bar::<NotClone> { x: 1 }.clone();\n    |                              ^^^^^ method cannot be called on `Bar<NotClone>` due to unsatisfied trait bounds\n-   | \n-  ::: $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |        -----\n-   |        |\n-   |        the method is available for `Arc<Bar<NotClone>>` here\n-   |        the method is available for `Rc<Bar<NotClone>>` here\n    |\n    = note: the following trait bounds were not satisfied:\n            `NotClone: Clone`"}, {"sha": "b3bc946292f70ce7c54eb63422a366057d48acb6", "filename": "src/test/ui/issues/issue-2823.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr?ref=6f2d8a018e4ff062032608a30615129230490b0d", "patch": "@@ -6,14 +6,6 @@ LL | struct C {\n ...\n LL |     let _d = c.clone();\n    |                ^^^^^ method not found in `C`\n-   | \n-  ::: $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |        -----\n-   |        |\n-   |        the method is available for `Arc<C>` here\n-   |        the method is available for `Rc<C>` here\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:"}, {"sha": "4dd6b4bbb68bebe0c6f39d8f841fed16d5fb0358", "filename": "src/test/ui/issues/issue-69725.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr?ref=6f2d8a018e4ff062032608a30615129230490b0d", "patch": "@@ -8,14 +8,6 @@ LL |     let _ = Struct::<A>::new().clone();\n    |\n LL | pub struct Struct<A>(A);\n    | ------------------------ doesn't satisfy `Struct<A>: Clone`\n-   | \n-  ::: $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |        -----\n-   |        |\n-   |        the method is available for `Arc<Struct<A>>` here\n-   |        the method is available for `Rc<Struct<A>>` here\n    |\n    = note: the following trait bounds were not satisfied:\n            `A: Clone`"}, {"sha": "99af04e7cd97e2b3d743d9f61eafac399ffd9f2c", "filename": "src/test/ui/non-copyable-void.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fnon-copyable-void.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fnon-copyable-void.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-copyable-void.stderr?ref=6f2d8a018e4ff062032608a30615129230490b0d", "patch": "@@ -3,14 +3,6 @@ error[E0599]: no method named `clone` found for enum `c_void` in the current sco\n    |\n LL |         let _z = (*y).clone();\n    |                       ^^^^^ method not found in `c_void`\n-   | \n-  ::: $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |        -----\n-   |        |\n-   |        the method is available for `Arc<c_void>` here\n-   |        the method is available for `Rc<c_void>` here\n \n error: aborting due to previous error\n "}, {"sha": "4674c16eb433a12230ddbef3768fdd7cd4929e8e", "filename": "src/test/ui/noncopyable-class.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fnoncopyable-class.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fnoncopyable-class.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnoncopyable-class.stderr?ref=6f2d8a018e4ff062032608a30615129230490b0d", "patch": "@@ -6,14 +6,6 @@ LL | struct Foo {\n ...\n LL |     let _y = x.clone();\n    |                ^^^^^ method not found in `Foo`\n-   | \n-  ::: $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |        -----\n-   |        |\n-   |        the method is available for `Arc<Foo>` here\n-   |        the method is available for `Rc<Foo>` here\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:"}, {"sha": "b804ddfb024bf310ccb36d1d4e853f549cf3c07a", "filename": "src/test/ui/self/point-at-arbitrary-self-type-method.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fself%2Fpoint-at-arbitrary-self-type-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fself%2Fpoint-at-arbitrary-self-type-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fpoint-at-arbitrary-self-type-method.stderr?ref=6f2d8a018e4ff062032608a30615129230490b0d", "patch": "@@ -9,6 +9,11 @@ LL |     fn foo(self: Box<Self>) {}\n ...\n LL |     A.foo();\n    |       ^^^ method not found in `A`\n+   |\n+help: consider wrapping the receiver expression with the appropriate type\n+   |\n+LL |     Box::new(A).foo();\n+   |     ^^^^^^^^^ ^\n \n error: aborting due to previous error\n "}, {"sha": "e1ed0e42f985c4be2cc6603e11afa237e01eff99", "filename": "src/test/ui/self/point-at-arbitrary-self-type-trait-method.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fself%2Fpoint-at-arbitrary-self-type-trait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Fself%2Fpoint-at-arbitrary-self-type-trait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fpoint-at-arbitrary-self-type-trait-method.stderr?ref=6f2d8a018e4ff062032608a30615129230490b0d", "patch": "@@ -10,6 +10,11 @@ LL | struct A;\n ...\n LL |     A.foo()\n    |       ^^^ method not found in `A`\n+   |\n+help: consider wrapping the receiver expression with the appropriate type\n+   |\n+LL |     Box::new(A).foo()\n+   |     ^^^^^^^^^ ^\n \n error: aborting due to previous error\n "}, {"sha": "916a6c2bf12af6277f3affdfbb205a216295f3dc", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2917eda69decdf813daa94b20dfb2edd3a555963/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2917eda69decdf813daa94b20dfb2edd3a555963/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr?ref=2917eda69decdf813daa94b20dfb2edd3a555963", "patch": "@@ -1,11 +0,0 @@\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/missing-lifetimes-in-signature.rs:36:11\n-   |\n-LL | fn baz<G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-   |        -  ^^ undeclared lifetime\n-   |        |\n-   |        help: consider introducing lifetime `'a` here: `'a,`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0261`."}, {"sha": "01e36a4a62a1bcc01715166670471d9f3f1e6d38", "filename": "src/test/ui/traits/negative-impls/explicitly-unimplemented-error-message.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fexplicitly-unimplemented-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fexplicitly-unimplemented-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fexplicitly-unimplemented-error-message.stderr?ref=6f2d8a018e4ff062032608a30615129230490b0d", "patch": "@@ -6,14 +6,6 @@ LL | struct Qux;\n ...\n LL |     Qux.clone();\n    |         ^^^^^ method not found in `Qux`\n-   | \n-  ::: $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |        -----\n-   |        |\n-   |        the method is available for `Arc<Qux>` here\n-   |        the method is available for `Rc<Qux>` here\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the trait `Clone` defines an item `clone`, but is explicitely unimplemented"}, {"sha": "546394664dfe8ecd8bdaafc038b6b4a688a26fcd", "filename": "src/test/ui/union/union-derive-clone.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr?ref=6f2d8a018e4ff062032608a30615129230490b0d", "patch": "@@ -25,14 +25,6 @@ LL | struct CloneNoCopy;\n ...\n LL |     let w = u.clone();\n    |               ^^^^^ method cannot be called on `U5<CloneNoCopy>` due to unsatisfied trait bounds\n-   | \n-  ::: $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |        -----\n-   |        |\n-   |        the method is available for `Arc<U5<CloneNoCopy>>` here\n-   |        the method is available for `Rc<U5<CloneNoCopy>>` here\n    |\n    = note: the following trait bounds were not satisfied:\n            `CloneNoCopy: Copy`"}, {"sha": "6a355dd2562862003d8bc26663c1ef93cddb6cbd", "filename": "src/test/ui/unique-object-noncopyable.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr?ref=6f2d8a018e4ff062032608a30615129230490b0d", "patch": "@@ -10,14 +10,6 @@ LL |   trait Foo {\n LL |       let _z = y.clone();\n    |                  ^^^^^ method cannot be called on `Box<dyn Foo>` due to unsatisfied trait bounds\n    | \n-  ::: $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |       fn clone(&self) -> Self;\n-   |          -----\n-   |          |\n-   |          the method is available for `Arc<Box<dyn Foo>>` here\n-   |          the method is available for `Rc<Box<dyn Foo>>` here\n-   | \n   ::: $SRC_DIR/alloc/src/boxed.rs:LL:COL\n    |\n LL | / pub struct Box<"}, {"sha": "a4421bcf8097e6ff17cde0c2f78cda6907ad7eb3", "filename": "src/test/ui/unique-pinned-nocopy.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d8a018e4ff062032608a30615129230490b0d/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr?ref=6f2d8a018e4ff062032608a30615129230490b0d", "patch": "@@ -7,14 +7,6 @@ LL |   struct R {\n LL |       let _j = i.clone();\n    |                  ^^^^^ method cannot be called on `Box<R>` due to unsatisfied trait bounds\n    | \n-  ::: $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |       fn clone(&self) -> Self;\n-   |          -----\n-   |          |\n-   |          the method is available for `Arc<Box<R>>` here\n-   |          the method is available for `Rc<Box<R>>` here\n-   | \n   ::: $SRC_DIR/alloc/src/boxed.rs:LL:COL\n    |\n LL | / pub struct Box<"}]}