{"sha": "6674756c07a4175d5c2f2cd4539bf1d76bc704f1", "node_id": "C_kwDOAAsO6NoAKDY2NzQ3NTZjMDdhNDE3NWQ1YzJmMmNkNDUzOWJmMWQ3NmJjNzA0ZjE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-17T15:52:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-17T15:52:53Z"}, "message": "Merge #11041\n\n11041: minor: Fix some clippy lints r=lnicola a=lnicola\n\nbors r+\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "a64d3c5e204dd91ef58b355033445736bf4a299e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a64d3c5e204dd91ef58b355033445736bf4a299e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6674756c07a4175d5c2f2cd4539bf1d76bc704f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhvLJVCRBK7hj4Ov3rIwAA5roIAABleLQI21zgJcyJMqsiFt3V\nBcYUoq6jCe3lvxK0p2Qrux9LAgDc71t9y0iDpgv2FAD2HVmPcRhHim+DParUlGsN\nYMzoisSu/S73idvNV3lD3Cssakm2zU5G+/SVWpP3vmnOgV0HnERdccEDJPortxKZ\n9S3joE/8N6AxJtj/0rVSm2toiGfRlkC5Izt+ytIyuijKTVI8XKn10HzmGX/Np8oa\nR36HDkYkO4/8Wjzt3w3Bs2Ml4KYx/SNhIqkxSWD89ZA8/viZFkpnuVzOGg3DZHiE\noxGj3j7LX/xLcMukmSVfgClnUU+p1DTpL0pgWyKKef4O4pjEWnsHqZ0Y+CIgjHY=\n=5KRO\n-----END PGP SIGNATURE-----\n", "payload": "tree a64d3c5e204dd91ef58b355033445736bf4a299e\nparent 04b0b19cdb710be8ca2ffcf2d8eeba1e4d44687f\nparent 6c799dac1ef70719301ed7e351e22094b0b85dcf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1639756373 +0000\ncommitter GitHub <noreply@github.com> 1639756373 +0000\n\nMerge #11041\n\n11041: minor: Fix some clippy lints r=lnicola a=lnicola\n\nbors r+\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6674756c07a4175d5c2f2cd4539bf1d76bc704f1", "html_url": "https://github.com/rust-lang/rust/commit/6674756c07a4175d5c2f2cd4539bf1d76bc704f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04b0b19cdb710be8ca2ffcf2d8eeba1e4d44687f", "url": "https://api.github.com/repos/rust-lang/rust/commits/04b0b19cdb710be8ca2ffcf2d8eeba1e4d44687f", "html_url": "https://github.com/rust-lang/rust/commit/04b0b19cdb710be8ca2ffcf2d8eeba1e4d44687f"}, {"sha": "6c799dac1ef70719301ed7e351e22094b0b85dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c799dac1ef70719301ed7e351e22094b0b85dcf", "html_url": "https://github.com/rust-lang/rust/commit/6c799dac1ef70719301ed7e351e22094b0b85dcf"}], "stats": {"total": 97, "additions": 37, "deletions": 60}, "files": [{"sha": "2449e4f3e22cc8279cb55167bf9baf3185e673d5", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=6674756c07a4175d5c2f2cd4539bf1d76bc704f1", "patch": "@@ -148,7 +148,7 @@ impl ItemTree {\n         let loc = db.lookup_intern_block(block);\n         let block = loc.ast_id.to_node(db.upcast());\n         let hygiene = Hygiene::new(db.upcast(), loc.ast_id.file_id);\n-        let ctx = lower::Ctx::new(db, hygiene.clone(), loc.ast_id.file_id);\n+        let ctx = lower::Ctx::new(db, hygiene, loc.ast_id.file_id);\n         Arc::new(ctx.lower_block(&block))\n     }\n "}, {"sha": "de6afaef8e5f31781585ee997b45d4ced3d9be24", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=6674756c07a4175d5c2f2cd4539bf1d76bc704f1", "patch": "@@ -78,7 +78,7 @@ fn highlight_references(\n     token: SyntaxToken,\n     file_id: FileId,\n ) -> Option<Vec<HighlightedRange>> {\n-    let defs = find_defs(sema, token.clone());\n+    let defs = find_defs(sema, token);\n     let usages = defs\n         .iter()\n         .filter_map(|&d| {"}, {"sha": "3261f5652592e0821c3e6d724761eba24cb81233", "filename": "crates/ide_assists/src/handlers/convert_comment_block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs?ref=6674756c07a4175d5c2f2cd4539bf1d76bc704f1", "patch": "@@ -96,8 +96,7 @@ fn line_to_block(acc: &mut Assists, comment: ast::Comment) -> Option<()> {\n             let block_prefix =\n                 CommentKind { shape: CommentShape::Block, ..comment.kind() }.prefix();\n \n-            let output =\n-                format!(\"{}\\n{}\\n{}*/\", block_prefix, block_comment_body, indentation.to_string());\n+            let output = format!(\"{}\\n{}\\n{}*/\", block_prefix, block_comment_body, indentation);\n \n             edit.replace(target, output)\n         },"}, {"sha": "7f27b507bab2939cdeb07a1089c4d4171314ac64", "filename": "crates/ide_assists/src/handlers/convert_into_to_from.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs?ref=6674756c07a4175d5c2f2cd4539bf1d76bc704f1", "patch": "@@ -91,10 +91,7 @@ pub(crate) fn convert_into_to_from(acc: &mut Assists, ctx: &AssistContext) -> Op\n             builder.replace(src_type.syntax().text_range(), dest_type.to_string());\n             builder.replace(ast_trait.syntax().text_range(), format!(\"From<{}>\", src_type));\n             builder.replace(into_fn_return.syntax().text_range(), \"-> Self\");\n-            builder.replace(\n-                into_fn_params.syntax().text_range(),\n-                format!(\"(val: {})\", src_type.to_string()),\n-            );\n+            builder.replace(into_fn_params.syntax().text_range(), format!(\"(val: {})\", src_type));\n             builder.replace(into_fn_name.syntax().text_range(), \"from\");\n \n             for s in selfs {"}, {"sha": "c21badb1e17cf8ef74ac7e6011dd49c0a4a0febd", "filename": "crates/ide_assists/src/handlers/destructure_tuple_binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs?ref=6674756c07a4175d5c2f2cd4539bf1d76bc704f1", "patch": "@@ -174,7 +174,7 @@ fn edit_tuple_assignment(\n \n     // with sub_pattern: keep original tuple and add subpattern: `tup @ (_0, _1)`\n     if in_sub_pattern {\n-        let text = format!(\" @ {}\", tuple_pat.to_string());\n+        let text = format!(\" @ {}\", tuple_pat);\n         match ctx.config.snippet_cap {\n             Some(cap) => {\n                 let snip = add_cursor(&text);"}, {"sha": "4bbfdae1d214f686a8f239767e82f31ad02197c3", "filename": "crates/ide_assists/src/handlers/extract_module.rs", "status": "modified", "additions": 24, "deletions": 42, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=6674756c07a4175d5c2f2cd4539bf1d76bc704f1", "patch": "@@ -151,7 +151,7 @@ fn extract_target(node: &SyntaxNode, selection_range: TextRange) -> Option<Modul\n     let mut body_items: Vec<ast::Item> = node\n         .children()\n         .filter_map(|child| {\n-            if let Some(item) = ast::Item::cast(child.clone()) {\n+            if let Some(item) = ast::Item::cast(child) {\n                 if selection_range.contains_range(item.syntax().text_range()) {\n                     return Some(item);\n                 }\n@@ -298,7 +298,7 @@ impl Module {\n                 if let Some(name_ref) = ast::NameRef::cast(desc) {\n                     return Some((\n                         name_ref.syntax().text_range(),\n-                        format!(\"{}::{}\", self.name, name_ref.to_string()),\n+                        format!(\"{}::{}\", self.name, name_ref),\n                     ));\n                 }\n             }\n@@ -312,20 +312,20 @@ impl Module {\n             get_replacements_for_visibilty_change(self.body_items.clone(), false);\n \n         let impl_items = impls.into_iter().fold(Vec::new(), |mut impl_items, x| {\n-            let this_impl_items =\n+            let mut this_impl_items =\n                 x.syntax().descendants().fold(Vec::new(), |mut this_impl_items, x| {\n-                    if let Some(item) = ast::Item::cast(x.clone()) {\n+                    if let Some(item) = ast::Item::cast(x) {\n                         this_impl_items.push(item);\n                     }\n                     return this_impl_items;\n                 });\n \n-            impl_items.append(&mut this_impl_items.clone());\n+            impl_items.append(&mut this_impl_items);\n             return impl_items;\n         });\n \n         let (_, mut impl_item_replacements, _, _) =\n-            get_replacements_for_visibilty_change(impl_items.clone(), true);\n+            get_replacements_for_visibilty_change(impl_items, true);\n \n         replacements.append(&mut impl_item_replacements);\n \n@@ -337,7 +337,7 @@ impl Module {\n                     .find(|x| x.to_string() == desc.to_string())\n                     .is_some();\n                 if is_record_field_present {\n-                    replacements.push((desc.visibility().clone(), desc.syntax().clone()));\n+                    replacements.push((desc.visibility(), desc.syntax().clone()));\n                 }\n             });\n         });\n@@ -472,7 +472,7 @@ impl Module {\n                 (&x.1).into_iter().for_each(|x| {\n                     let node_opt: Option<ast::Use> = find_node_at_range(file.syntax(), x.range);\n                     if let Some(node) = node_opt {\n-                        use_opt = Some(node.clone());\n+                        use_opt = Some(node);\n                     }\n                 });\n             }\n@@ -529,7 +529,7 @@ impl Module {\n         }\n \n         if let Some(use_tree_str) = use_tree_str_opt {\n-            let mut use_tree_str = use_tree_str.clone();\n+            let mut use_tree_str = use_tree_str;\n             use_tree_str.reverse();\n             if use_tree_str[0].to_string().contains(\"super\") {\n                 let super_path = make::ext::ident_path(\"super\");\n@@ -776,42 +776,24 @@ fn get_replacements_for_visibilty_change(\n         body_items.push(item.clone());\n         //Use stmts are ignored\n         match item {\n-            ast::Item::Const(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n-            }\n-            ast::Item::Enum(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n-            }\n-            ast::Item::ExternCrate(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n-            }\n-            ast::Item::Fn(it) => replacements.push((it.visibility().clone(), it.syntax().clone())),\n+            ast::Item::Const(it) => replacements.push((it.visibility(), it.syntax().clone())),\n+            ast::Item::Enum(it) => replacements.push((it.visibility(), it.syntax().clone())),\n+            ast::Item::ExternCrate(it) => replacements.push((it.visibility(), it.syntax().clone())),\n+            ast::Item::Fn(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::Impl(it) => impls.push(it),\n-            ast::Item::MacroRules(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n-            }\n-            ast::Item::MacroDef(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n-            }\n-            ast::Item::Module(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n-            }\n-            ast::Item::Static(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n-            }\n+            ast::Item::MacroRules(it) => replacements.push((it.visibility(), it.syntax().clone())),\n+            ast::Item::MacroDef(it) => replacements.push((it.visibility(), it.syntax().clone())),\n+            ast::Item::Module(it) => replacements.push((it.visibility(), it.syntax().clone())),\n+            ast::Item::Static(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::Struct(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()));\n-                record_field_parents.push((it.visibility().clone(), it.syntax().clone()));\n-            }\n-            ast::Item::Trait(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n-            }\n-            ast::Item::TypeAlias(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()))\n+                replacements.push((it.visibility(), it.syntax().clone()));\n+                record_field_parents.push((it.visibility(), it.syntax().clone()));\n             }\n+            ast::Item::Trait(it) => replacements.push((it.visibility(), it.syntax().clone())),\n+            ast::Item::TypeAlias(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::Union(it) => {\n-                replacements.push((it.visibility().clone(), it.syntax().clone()));\n-                record_field_parents.push((it.visibility().clone(), it.syntax().clone()));\n+                replacements.push((it.visibility(), it.syntax().clone()));\n+                record_field_parents.push((it.visibility(), it.syntax().clone()));\n             }\n             _ => (),\n         }\n@@ -825,7 +807,7 @@ fn get_use_tree_paths_from_path(\n     use_tree_str: &mut Vec<ast::Path>,\n ) -> Option<&mut Vec<ast::Path>> {\n     path.syntax().ancestors().filter(|x| x.to_string() != path.to_string()).find_map(|x| {\n-        if let Some(use_tree) = ast::UseTree::cast(x.clone()) {\n+        if let Some(use_tree) = ast::UseTree::cast(x) {\n             if let Some(upper_tree_path) = use_tree.path() {\n                 if upper_tree_path.to_string() != path.to_string() {\n                     use_tree_str.push(upper_tree_path.clone());"}, {"sha": "1481eadb51975fb620180dcd41fca1726f59b06d", "filename": "crates/ide_assists/src/handlers/generate_documentation_template.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs?ref=6674756c07a4175d5c2f2cd4539bf1d76bc704f1", "patch": "@@ -59,9 +59,8 @@ pub(crate) fn generate_documentation_template(\n         \"Generate a documentation template\",\n         text_range,\n         |builder| {\n-            let mut doc_lines = Vec::new();\n             // Introduction / short function description before the sections\n-            doc_lines.push(introduction_builder(&ast_func, ctx));\n+            let mut doc_lines = vec![introduction_builder(&ast_func, ctx)];\n             // Then come the sections\n             if let Some(mut lines) = examples_builder(&ast_func, ctx) {\n                 doc_lines.push(\"\".into());\n@@ -303,7 +302,7 @@ fn arguments_from_params(param_list: &ast::ParamList) -> String {\n         // instance `TuplePat`) could be managed later.\n         Some(ast::Pat::IdentPat(ident_pat)) => match ident_pat.name() {\n             Some(name) => match is_a_ref_mut_param(&param) {\n-                true => format!(\"&mut {}\", name.to_string()),\n+                true => format!(\"&mut {}\", name),\n                 false => name.to_string(),\n             },\n             None => \"_\".to_string(),"}, {"sha": "ae29068bd702a1d1ece31460afa035d630cba641", "filename": "crates/ide_assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=6674756c07a4175d5c2f2cd4539bf1d76bc704f1", "patch": "@@ -121,7 +121,7 @@ impl QualifyCandidate<'_> {\n             }\n             QualifyCandidate::UnqualifiedName(generics) => {\n                 let generics = generics.as_ref().map_or_else(String::new, ToString::to_string);\n-                replacer(format!(\"{}{}\", import.to_string(), generics));\n+                replacer(format!(\"{}{}\", import, generics));\n             }\n             QualifyCandidate::TraitAssocItem(qualifier, segment) => {\n                 replacer(format!(\"<{} as {}>::{}\", qualifier, import, segment));"}, {"sha": "8a443ab08935f1ce044b4255c2cc2962072d82d5", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=6674756c07a4175d5c2f2cd4539bf1d76bc704f1", "patch": "@@ -431,7 +431,7 @@ fn generate_impl_text_inner(adt: &ast::Adt, trait_text: Option<&str>, code: &str\n     buf.push_str(\"\\n\\n\");\n     adt.attrs()\n         .filter(|attr| attr.as_simple_call().map(|(name, _arg)| name == \"cfg\").unwrap_or(false))\n-        .for_each(|attr| buf.push_str(format!(\"{}\\n\", attr.to_string()).as_str()));\n+        .for_each(|attr| buf.push_str(format!(\"{}\\n\", attr).as_str()));\n     buf.push_str(\"impl\");\n     if let Some(generic_params) = &generic_params {\n         let lifetimes = generic_params.lifetime_params().map(|lt| format!(\"{}\", lt.syntax()));"}, {"sha": "8222d3cbf40df8b3eafecfa7bcb248ac9bec963b", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=6674756c07a4175d5c2f2cd4539bf1d76bc704f1", "patch": "@@ -2,7 +2,7 @@\n //!\n //! This module uses a bit of static metadata to provide completions\n //! for built-in attributes.\n-//! Non-builtin attribute(excluding derives attributes) completions are done in [`super::unqualified_path`].\n+//! Non-built-in attribute (excluding derives attributes) completions are done in [`super::unqualified_path`].\n \n use ide_db::{\n     helpers::{"}, {"sha": "8c806e7925b15b0eebe1275ade8a76220ede2960", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=6674756c07a4175d5c2f2cd4539bf1d76bc704f1", "patch": "@@ -147,7 +147,7 @@ impl Fixture {\n                 if line.starts_with(\"// \")\n                     && line.contains(':')\n                     && !line.contains(\"::\")\n-                    && !line.contains(\".\")\n+                    && !line.contains('.')\n                     && line.chars().all(|it| !it.is_uppercase())\n                 {\n                     panic!(\"looks like invalid metadata line: {:?}\", line);"}, {"sha": "4fbe2379c3d4c06aa746347bb390ddcfb9b5bd05", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/6674756c07a4175d5c2f2cd4539bf1d76bc704f1/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=6674756c07a4175d5c2f2cd4539bf1d76bc704f1", "patch": "@@ -445,7 +445,7 @@ If the date is more than a week ago, it's better to update rust-analyzer version\n \n The next thing to check would be panic messages in rust-analyzer's log.\n Log messages are printed to stderr, in VS Code you can see then in the `Output > Rust Analyzer Language Server` tab of the panel.\n-To see more logs, set `RA_LOG=info` environmental variable.\n+To see more logs, set the `RA_LOG=info` environment variable.\n \n To fully capture LSP messages between the editor and the server, set `\"rust-analyzer.trace.server\": \"verbose\"` config and check\n `Output > Rust Analyzer Language Server Trace`.\n@@ -624,7 +624,7 @@ Relative paths are interpreted relative to `rust-project.json` file location or\n \n See https://github.com/rust-analyzer/rust-project.json-example for a small example.\n \n-You can set `RA_LOG` environmental variable to `rust_analyzer=info` to inspect how rust-analyzer handles config and project loading.\n+You can set the `RA_LOG` environment variable to `rust_analyzer=info` to inspect how rust-analyzer handles config and project loading.\n \n Note that calls to `cargo check` are disabled when using `rust-project.json` by default, so compilation errors and warnings will no longer be sent to your LSP client. To enable these compilation errors you will need to specify explicitly what command rust-analyzer should run to perform the checks using the `checkOnSave.overrideCommand` configuration. As an example, the following configuration explicitly sets `cargo check` as the `checkOnSave` command.\n "}]}