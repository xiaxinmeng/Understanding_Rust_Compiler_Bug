{"sha": "d60e43d9e9470107b3c1ebbd5dbd69a6a080f143", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MGU0M2Q5ZTk0NzAxMDdiM2MxZWJiZDVkYmQ2OWE2YTA4MGYxNDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-01T09:51:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-01T09:51:35Z"}, "message": "auto merge of #12638 : luqmana/rust/op-no-ref, r=alexcrichton\n\nFrom my comment on #11450:\r\n\r\nThe reason for the ICE is because for operators `rustc` does a little bit of magic. Notice that while you implement the `Mul` trait for some type `&T` (i.e a reference to some T), you can simply do `Vec2 {..} * 2.0f32`. That is, `2.0f32` is `f32` and not `&f32`. This works because `rustc` will automatically take a reference. So what's happening is that with `foo * T`, the compiler is expecting the `mul` method to take some `&U` and then it can compare to make sure `T == U` (or more specifically that `T` coerces to `U`). But in this case, the argument of the `mul` method is not a reference and hence the \"no ref\" error.\r\n\r\nI don't think we should ICE in this case since we do catch the mismatched trait/impl method and hence provide a better error message that way.\r\n\r\nFixes #11450", "tree": {"sha": "46308c35e0a27a1b52318a0a1b48a9685fa26819", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46308c35e0a27a1b52318a0a1b48a9685fa26819"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d60e43d9e9470107b3c1ebbd5dbd69a6a080f143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d60e43d9e9470107b3c1ebbd5dbd69a6a080f143", "html_url": "https://github.com/rust-lang/rust/commit/d60e43d9e9470107b3c1ebbd5dbd69a6a080f143", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d60e43d9e9470107b3c1ebbd5dbd69a6a080f143/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb498cc40d78f8a9bce42b116abb3f4dd8d03335", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb498cc40d78f8a9bce42b116abb3f4dd8d03335", "html_url": "https://github.com/rust-lang/rust/commit/cb498cc40d78f8a9bce42b116abb3f4dd8d03335"}, {"sha": "a1749413928cc820326cc194cdabb870b724d301", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1749413928cc820326cc194cdabb870b724d301", "html_url": "https://github.com/rust-lang/rust/commit/a1749413928cc820326cc194cdabb870b724d301"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "4339d2c62be9fb29819ac02b97c81572b2d717f2", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d60e43d9e9470107b3c1ebbd5dbd69a6a080f143/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60e43d9e9470107b3c1ebbd5dbd69a6a080f143/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=d60e43d9e9470107b3c1ebbd5dbd69a6a080f143", "patch": "@@ -1732,7 +1732,13 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n                                 ty::ty_rptr(_, mt) => formal_ty = mt.ty,\n                                 ty::ty_err => (),\n                                 _ => {\n-                                    fcx.ccx.tcx.sess.span_bug(arg.span, \"no ref\");\n+                                    // So we hit this case when one implements the\n+                                    // operator traits but leaves an argument as\n+                                    // just T instead of &T. We'll catch it in the\n+                                    // mismatch impl/trait method phase no need to\n+                                    // ICE here.\n+                                    // See: #11450\n+                                    formal_ty = ty::mk_err();\n                                 }\n                             }\n                         }"}, {"sha": "a39226faee6f8db9949cc9560666a597cea50ad6", "filename": "src/test/compile-fail/wrong-mul-method-signature.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d60e43d9e9470107b3c1ebbd5dbd69a6a080f143/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60e43d9e9470107b3c1ebbd5dbd69a6a080f143/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs?ref=d60e43d9e9470107b3c1ebbd5dbd69a6a080f143", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test is to make sure we don't just ICE if the trait\n+// method for an operator is not implemented properly.\n+// (In this case the mul method should take &f64 and not f64)\n+// See: #11450\n+\n+struct Vec2 {\n+    x: f64,\n+    y: f64\n+}\n+\n+impl Mul<Vec2, f64> for Vec2 {\n+    fn mul(&self, s: f64) -> Vec2 {\n+    //~^ ERROR: method `mul` has an incompatible type: expected &-ptr but found f64\n+        Vec2 {\n+            x: self.x * s,\n+            y: self.y * s\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    Vec2 { x: 1.0, y: 2.0 } * 2.0;\n+}"}]}