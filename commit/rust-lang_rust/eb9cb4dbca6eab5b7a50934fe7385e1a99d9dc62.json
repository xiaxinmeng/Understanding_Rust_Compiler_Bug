{"sha": "eb9cb4dbca6eab5b7a50934fe7385e1a99d9dc62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViOWNiNGRiY2E2ZWFiNWI3YTUwOTM0ZmU3Mzg1ZTFhOTlkOWRjNjI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-09T15:14:47Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-20T20:18:21Z"}, "message": "trans: derefs don't need the pointer in an alloca.", "tree": {"sha": "1e4b5eb623ce0bc2a0a4811f5992d5ce3a0c246b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e4b5eb623ce0bc2a0a4811f5992d5ce3a0c246b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb9cb4dbca6eab5b7a50934fe7385e1a99d9dc62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9cb4dbca6eab5b7a50934fe7385e1a99d9dc62", "html_url": "https://github.com/rust-lang/rust/commit/eb9cb4dbca6eab5b7a50934fe7385e1a99d9dc62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb9cb4dbca6eab5b7a50934fe7385e1a99d9dc62/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93c32b55e2f03bc88d3d1601626bcd9059924005", "url": "https://api.github.com/repos/rust-lang/rust/commits/93c32b55e2f03bc88d3d1601626bcd9059924005", "html_url": "https://github.com/rust-lang/rust/commit/93c32b55e2f03bc88d3d1601626bcd9059924005"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "93ac002f2a98943e60cf0d3a32ad9b976812a3f8", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eb9cb4dbca6eab5b7a50934fe7385e1a99d9dc62/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9cb4dbca6eab5b7a50934fe7385e1a99d9dc62/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=eb9cb4dbca6eab5b7a50934fe7385e1a99d9dc62", "patch": "@@ -151,6 +151,13 @@ impl<'mir, 'bcx, 'tcx> Visitor<'tcx> for TempAnalyzer<'mir, 'bcx, 'tcx> {\n             }\n         }\n \n+        // A deref projection only reads the pointer, never needs the lvalue.\n+        if let mir::Lvalue::Projection(ref proj) = *lvalue {\n+            if let mir::ProjectionElem::Deref = proj.elem {\n+                return self.visit_lvalue(&proj.base, LvalueContext::Consume);\n+            }\n+        }\n+\n         self.super_lvalue(lvalue, context);\n     }\n }"}, {"sha": "f7e159797479c8cd93fd6636d728c6b2f45da699", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/eb9cb4dbca6eab5b7a50934fe7385e1a99d9dc62/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9cb4dbca6eab5b7a50934fe7385e1a99d9dc62/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=eb9cb4dbca6eab5b7a50934fe7385e1a99d9dc62", "patch": "@@ -27,6 +27,7 @@ use Disr;\n use std::ptr;\n \n use super::{MirContext, TempRef};\n+use super::operand::OperandValue;\n \n #[derive(Copy, Clone, Debug)]\n pub struct LvalueRef<'tcx> {\n@@ -121,6 +122,26 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 let return_ty = fn_return_ty.unwrap();\n                 LvalueRef::new_sized(llval, LvalueTy::from_ty(return_ty))\n             },\n+            mir::Lvalue::Projection(box mir::Projection {\n+                ref base,\n+                elem: mir::ProjectionElem::Deref\n+            }) => {\n+                // Load the pointer from its location.\n+                let ptr = self.trans_consume(bcx, base);\n+                let projected_ty = LvalueTy::from_ty(ptr.ty)\n+                    .projection_ty(tcx, &mir::ProjectionElem::Deref);\n+                let projected_ty = bcx.monomorphize(&projected_ty);\n+                let (llptr, llextra) = match ptr.val {\n+                    OperandValue::Immediate(llptr) => (llptr, ptr::null_mut()),\n+                    OperandValue::Pair(llptr, llextra) => (llptr, llextra),\n+                    OperandValue::Ref(_) => bug!(\"Deref of by-Ref type {:?}\", ptr.ty)\n+                };\n+                LvalueRef {\n+                    llval: llptr,\n+                    llextra: llextra,\n+                    ty: projected_ty,\n+                }\n+            }\n             mir::Lvalue::Projection(ref projection) => {\n                 let tr_base = self.trans_lvalue(bcx, &projection.base);\n                 let projected_ty = tr_base.ty.projection_ty(tcx, &projection.elem);\n@@ -138,15 +159,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 };\n \n                 let (llprojected, llextra) = match projection.elem {\n-                    mir::ProjectionElem::Deref => {\n-                        let base_ty = tr_base.ty.to_ty(tcx);\n-                        if common::type_is_sized(tcx, projected_ty.to_ty(tcx)) {\n-                            (base::load_ty_builder(bcx, tr_base.llval, base_ty),\n-                             ptr::null_mut())\n-                        } else {\n-                            load_fat_ptr(bcx, tr_base.llval)\n-                        }\n-                    }\n+                    mir::ProjectionElem::Deref => bug!(),\n                     mir::ProjectionElem::Field(ref field, _) => {\n                         let base_ty = tr_base.ty.to_ty(tcx);\n                         let base_repr = adt::represent_type(ccx, base_ty);"}]}