{"sha": "b79ce1b1b10d6de1dac516d5e129f8251725ebe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OWNlMWIxYjEwZDZkZTFkYWM1MTZkNWUxMjlmODI1MTcyNWViZTI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-08-17T13:39:21Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-08-17T15:01:04Z"}, "message": "Rename private helper method allocate_for_unsized to allocate_for_layout", "tree": {"sha": "349ac4ba889292137c0ee4d34398a97a00f219da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/349ac4ba889292137c0ee4d34398a97a00f219da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b79ce1b1b10d6de1dac516d5e129f8251725ebe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b79ce1b1b10d6de1dac516d5e129f8251725ebe2", "html_url": "https://github.com/rust-lang/rust/commit/b79ce1b1b10d6de1dac516d5e129f8251725ebe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b79ce1b1b10d6de1dac516d5e129f8251725ebe2/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba0328327c8ce94f7bf380223d655c70de584e93", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba0328327c8ce94f7bf380223d655c70de584e93", "html_url": "https://github.com/rust-lang/rust/commit/ba0328327c8ce94f7bf380223d655c70de584e93"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "2b222caf13f3d48c3333aa35ff78a01e1ced57b1", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b79ce1b1b10d6de1dac516d5e129f8251725ebe2/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79ce1b1b10d6de1dac516d5e129f8251725ebe2/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=b79ce1b1b10d6de1dac516d5e129f8251725ebe2", "patch": "@@ -351,7 +351,7 @@ impl<T> Rc<T> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit() -> Rc<mem::MaybeUninit<T>> {\n         unsafe {\n-            Rc::from_ptr(Rc::allocate_for_unsized(\n+            Rc::from_ptr(Rc::allocate_for_layout(\n                 Layout::new::<T>(),\n                 |mem| mem as *mut RcBox<mem::MaybeUninit<T>>,\n             ))\n@@ -880,11 +880,11 @@ impl Rc<dyn Any> {\n \n impl<T: ?Sized> Rc<T> {\n     /// Allocates an `RcBox<T>` with sufficient space for\n-    /// an unsized value where the value has the layout provided.\n+    /// a possibly-unsized value where the value has the layout provided.\n     ///\n     /// The function `mem_to_rcbox` is called with the data pointer\n     /// and must return back a (potentially fat)-pointer for the `RcBox<T>`.\n-    unsafe fn allocate_for_unsized(\n+    unsafe fn allocate_for_layout(\n         value_layout: Layout,\n         mem_to_rcbox: impl FnOnce(*mut u8) -> *mut RcBox<T>\n     ) -> *mut RcBox<T> {\n@@ -913,7 +913,7 @@ impl<T: ?Sized> Rc<T> {\n     /// Allocates an `RcBox<T>` with sufficient space for an unsized value\n     unsafe fn allocate_for_ptr(ptr: *const T) -> *mut RcBox<T> {\n         // Allocate for the `RcBox<T>` using the given value.\n-        Self::allocate_for_unsized(\n+        Self::allocate_for_layout(\n             Layout::for_value(&*ptr),\n             |mem| set_data_ptr(ptr as *mut T, mem) as *mut RcBox<T>,\n         )\n@@ -944,7 +944,7 @@ impl<T: ?Sized> Rc<T> {\n impl<T> Rc<[T]> {\n     /// Allocates an `RcBox<[T]>` with the given length.\n     unsafe fn allocate_for_slice(len: usize) -> *mut RcBox<[T]> {\n-        Self::allocate_for_unsized(\n+        Self::allocate_for_layout(\n             Layout::array::<T>(len).unwrap(),\n             |mem| ptr::slice_from_raw_parts_mut(mem as *mut T, len) as *mut RcBox<[T]>,\n         )"}, {"sha": "341172136e25833f87837dd8aa5066b14d5b61de", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b79ce1b1b10d6de1dac516d5e129f8251725ebe2/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79ce1b1b10d6de1dac516d5e129f8251725ebe2/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=b79ce1b1b10d6de1dac516d5e129f8251725ebe2", "patch": "@@ -335,7 +335,7 @@ impl<T> Arc<T> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit() -> Arc<mem::MaybeUninit<T>> {\n         unsafe {\n-            Arc::from_ptr(Arc::allocate_for_unsized(\n+            Arc::from_ptr(Arc::allocate_for_layout(\n                 Layout::new::<T>(),\n                 |mem| mem as *mut ArcInner<mem::MaybeUninit<T>>,\n             ))\n@@ -736,11 +736,11 @@ impl<T: ?Sized> Arc<T> {\n \n impl<T: ?Sized> Arc<T> {\n     /// Allocates an `ArcInner<T>` with sufficient space for\n-    /// an unsized value where the value has the layout provided.\n+    /// a possibly-unsized value where the value has the layout provided.\n     ///\n     /// The function `mem_to_arcinner` is called with the data pointer\n     /// and must return back a (potentially fat)-pointer for the `ArcInner<T>`.\n-    unsafe fn allocate_for_unsized(\n+    unsafe fn allocate_for_layout(\n         value_layout: Layout,\n         mem_to_arcinner: impl FnOnce(*mut u8) -> *mut ArcInner<T>\n     ) -> *mut ArcInner<T> {\n@@ -768,7 +768,7 @@ impl<T: ?Sized> Arc<T> {\n     /// Allocates an `ArcInner<T>` with sufficient space for an unsized value.\n     unsafe fn allocate_for_ptr(ptr: *const T) -> *mut ArcInner<T> {\n         // Allocate for the `ArcInner<T>` using the given value.\n-        Self::allocate_for_unsized(\n+        Self::allocate_for_layout(\n             Layout::for_value(&*ptr),\n             |mem| set_data_ptr(ptr as *mut T, mem) as *mut ArcInner<T>,\n         )\n@@ -799,7 +799,7 @@ impl<T: ?Sized> Arc<T> {\n impl<T> Arc<[T]> {\n     /// Allocates an `ArcInner<[T]>` with the given length.\n     unsafe fn allocate_for_slice(len: usize) -> *mut ArcInner<[T]> {\n-        Self::allocate_for_unsized(\n+        Self::allocate_for_layout(\n             Layout::array::<T>(len).unwrap(),\n             |mem| ptr::slice_from_raw_parts_mut(mem as *mut T, len) as *mut ArcInner<[T]>,\n         )"}]}