{"sha": "dbf4b8a4369621658ce4a98aeccf59c96f4ceef6", "node_id": "C_kwDOAAsO6NoAKGRiZjRiOGE0MzY5NjIxNjU4Y2U0YTk4YWVjY2Y1OWM5NmY0Y2VlZjY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-12T12:12:40Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-12T12:12:40Z"}, "message": "Round 1: add some binders (fails due to losing bound vars and then rebinding them with `Binder::dummy`)", "tree": {"sha": "cf08c917cf811c09c77ccfa9f3c624f8b7033a1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf08c917cf811c09c77ccfa9f3c624f8b7033a1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbf4b8a4369621658ce4a98aeccf59c96f4ceef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf4b8a4369621658ce4a98aeccf59c96f4ceef6", "html_url": "https://github.com/rust-lang/rust/commit/dbf4b8a4369621658ce4a98aeccf59c96f4ceef6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbf4b8a4369621658ce4a98aeccf59c96f4ceef6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2176e3a7a4a8dfbea92f3104244fbf8fad4faf9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2176e3a7a4a8dfbea92f3104244fbf8fad4faf9a", "html_url": "https://github.com/rust-lang/rust/commit/2176e3a7a4a8dfbea92f3104244fbf8fad4faf9a"}], "stats": {"total": 59, "additions": 33, "deletions": 26}, "files": [{"sha": "470bfc484bfcbe559549f07f5fbf4ec1aab999fc", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbf4b8a4369621658ce4a98aeccf59c96f4ceef6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf4b8a4369621658ce4a98aeccf59c96f4ceef6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=dbf4b8a4369621658ce4a98aeccf59c96f4ceef6", "patch": "@@ -1128,6 +1128,13 @@ impl<'tcx, T> Binder<'tcx, Option<T>> {\n     }\n }\n \n+impl<'tcx, T: IntoIterator> Binder<'tcx, T> {\n+    pub fn iter(self) -> impl Iterator<Item = ty::Binder<'tcx, T::Item>> {\n+        let bound_vars = self.1;\n+        self.0.into_iter().map(|v| Binder(v, bound_vars))\n+    }\n+}\n+\n /// Represents the projection of an associated type. In explicit UFCS\n /// form this would be written `<T as Trait<..>>::N`.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]"}, {"sha": "f8316e66bdafa8f3dcebc3c840010a6cc9e78a7e", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbf4b8a4369621658ce4a98aeccf59c96f4ceef6/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf4b8a4369621658ce4a98aeccf59c96f4ceef6/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=dbf4b8a4369621658ce4a98aeccf59c96f4ceef6", "patch": "@@ -44,7 +44,7 @@ where\n         discard_positive_impl: bool,\n     ) -> Option<Item> {\n         let tcx = self.cx.tcx;\n-        let trait_ref = tcx.mk_trait_ref(trait_def_id, [ty]);\n+        let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(trait_def_id, [ty]));\n         if !self.cx.generated_synthetics.insert((ty, trait_def_id)) {\n             debug!(\"get_auto_trait_impl_for({:?}): already generated, aborting\", trait_ref);\n             return None;"}, {"sha": "5facac45be6029d6dbc5ebc97a76237ae8457ba0", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbf4b8a4369621658ce4a98aeccf59c96f4ceef6/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf4b8a4369621658ce4a98aeccf59c96f4ceef6/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=dbf4b8a4369621658ce4a98aeccf59c96f4ceef6", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                         // the post-inference `trait_ref`, as it's more accurate.\n                         trait_: Some(clean_trait_ref_with_bindings(\n                             cx,\n-                            trait_ref.0,\n+                            ty::Binder::dummy(trait_ref.0),\n                             ThinVec::new(),\n                         )),\n                         for_: clean_middle_ty(ty.0, cx, None),"}, {"sha": "fbce6d4dd0ba8e55daef2ca5ad15822b9204588f", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbf4b8a4369621658ce4a98aeccf59c96f4ceef6/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf4b8a4369621658ce4a98aeccf59c96f4ceef6/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=dbf4b8a4369621658ce4a98aeccf59c96f4ceef6", "patch": "@@ -496,7 +496,8 @@ pub(crate) fn build_impl(\n         ),\n     };\n     let polarity = tcx.impl_polarity(did);\n-    let trait_ = associated_trait.map(|t| clean_trait_ref_with_bindings(cx, t, ThinVec::new()));\n+    let trait_ = associated_trait\n+        .map(|t| clean_trait_ref_with_bindings(cx, ty::Binder::dummy(t), ThinVec::new()));\n     if trait_.as_ref().map(|t| t.def_id()) == tcx.lang_items().deref_trait() {\n         super::build_deref_target_impls(cx, &trait_items, ret);\n     }"}, {"sha": "89c2223668d6e1dd89e2fb319ff4782a4cc2d974", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/dbf4b8a4369621658ce4a98aeccf59c96f4ceef6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf4b8a4369621658ce4a98aeccf59c96f4ceef6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=dbf4b8a4369621658ce4a98aeccf59c96f4ceef6", "patch": "@@ -127,7 +127,7 @@ fn clean_generic_bound<'tcx>(\n         hir::GenericBound::LangItemTrait(lang_item, span, _, generic_args) => {\n             let def_id = cx.tcx.require_lang_item(lang_item, Some(span));\n \n-            let trait_ref = ty::TraitRef::identity(cx.tcx, def_id).skip_binder();\n+            let trait_ref = ty::TraitRef::identity(cx.tcx, def_id);\n \n             let generic_args = clean_generic_args(generic_args, cx);\n             let GenericArgs::AngleBracketed { bindings, .. } = generic_args\n@@ -156,17 +156,18 @@ fn clean_generic_bound<'tcx>(\n \n pub(crate) fn clean_trait_ref_with_bindings<'tcx>(\n     cx: &mut DocContext<'tcx>,\n-    trait_ref: ty::TraitRef<'tcx>,\n+    trait_ref: ty::PolyTraitRef<'tcx>,\n     bindings: ThinVec<TypeBinding>,\n ) -> Path {\n-    let kind = cx.tcx.def_kind(trait_ref.def_id).into();\n+    let kind = cx.tcx.def_kind(trait_ref.def_id()).into();\n     if !matches!(kind, ItemType::Trait | ItemType::TraitAlias) {\n-        span_bug!(cx.tcx.def_span(trait_ref.def_id), \"`TraitRef` had unexpected kind {:?}\", kind);\n+        span_bug!(cx.tcx.def_span(trait_ref.def_id()), \"`TraitRef` had unexpected kind {:?}\", kind);\n     }\n-    inline::record_extern_fqn(cx, trait_ref.def_id, kind);\n-    let path = external_path(cx, trait_ref.def_id, true, bindings, trait_ref.substs);\n+    inline::record_extern_fqn(cx, trait_ref.def_id(), kind);\n+    let path =\n+        external_path(cx, trait_ref.def_id(), true, bindings, trait_ref.skip_binder().substs);\n \n-    debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", trait_ref.substs);\n+    debug!(?trait_ref);\n \n     path\n }\n@@ -187,7 +188,7 @@ fn clean_poly_trait_ref_with_bindings<'tcx>(\n         })\n         .collect();\n \n-    let trait_ = clean_trait_ref_with_bindings(cx, poly_trait_ref.skip_binder(), bindings);\n+    let trait_ = clean_trait_ref_with_bindings(cx, poly_trait_ref, bindings);\n     GenericBound::TraitBound(\n         PolyTrait { trait_, generic_params: late_bound_regions },\n         hir::TraitBoundModifier::None,\n@@ -398,40 +399,39 @@ fn clean_projection_predicate<'tcx>(\n         })\n         .collect();\n \n-    let ty::ProjectionPredicate { projection_ty, term } = pred.skip_binder();\n-\n     WherePredicate::EqPredicate {\n-        lhs: Box::new(clean_projection(projection_ty, cx, None)),\n-        rhs: Box::new(clean_middle_term(term, cx)),\n+        lhs: Box::new(clean_projection(pred.map_bound(|p| p.projection_ty), cx, None)),\n+        rhs: Box::new(clean_middle_term(pred.skip_binder().term, cx)),\n         bound_params: late_bound_regions,\n     }\n }\n \n fn clean_projection<'tcx>(\n-    ty: ty::ProjectionTy<'tcx>,\n+    ty: ty::Binder<'tcx, ty::ProjectionTy<'tcx>>,\n     cx: &mut DocContext<'tcx>,\n     def_id: Option<DefId>,\n ) -> Type {\n-    if cx.tcx.def_kind(ty.item_def_id) == DefKind::ImplTraitPlaceholder {\n+    if cx.tcx.def_kind(ty.skip_binder().item_def_id) == DefKind::ImplTraitPlaceholder {\n         let bounds = cx\n             .tcx\n-            .explicit_item_bounds(ty.item_def_id)\n+            .explicit_item_bounds(ty.skip_binder().item_def_id)\n             .iter()\n-            .map(|(bound, _)| EarlyBinder(*bound).subst(cx.tcx, ty.substs))\n+            .map(|(bound, _)| EarlyBinder(*bound).subst(cx.tcx, ty.skip_binder().substs))\n             .collect::<Vec<_>>();\n         return clean_middle_opaque_bounds(cx, bounds);\n     }\n \n-    let trait_ = clean_trait_ref_with_bindings(cx, ty.trait_ref(cx.tcx), ThinVec::new());\n-    let self_type = clean_middle_ty(ty.self_ty(), cx, None);\n+    let trait_ =\n+        clean_trait_ref_with_bindings(cx, ty.map_bound(|ty| ty.trait_ref(cx.tcx)), ThinVec::new());\n+    let self_type = clean_middle_ty(ty.skip_binder().self_ty(), cx, None);\n     let self_def_id = if let Some(def_id) = def_id {\n         cx.tcx.opt_parent(def_id).or(Some(def_id))\n     } else {\n         self_type.def_id(&cx.cache)\n     };\n     let should_show_cast = compute_should_show_cast(self_def_id, &trait_, &self_type);\n     Type::QPath(Box::new(QPathData {\n-        assoc: projection_to_path_segment(ty, cx),\n+        assoc: projection_to_path_segment(ty.skip_binder(), cx),\n         should_show_cast,\n         self_type,\n         trait_,\n@@ -783,7 +783,7 @@ fn clean_ty_generics<'tcx>(\n \n                     let proj = projection.map(|p| {\n                         (\n-                            clean_projection(p.skip_binder().projection_ty, cx, None),\n+                            clean_projection(p.map_bound(|p| p.projection_ty), cx, None),\n                             p.skip_binder().term,\n                         )\n                     });\n@@ -1076,11 +1076,10 @@ fn clean_fn_decl_from_did_and_sig<'tcx>(\n         c_variadic: sig.skip_binder().c_variadic,\n         inputs: Arguments {\n             values: sig\n-                .skip_binder()\n                 .inputs()\n                 .iter()\n                 .map(|t| Argument {\n-                    type_: clean_middle_ty(*t, cx, None),\n+                    type_: clean_middle_ty(*t.skip_binder(), cx, None),\n                     name: names\n                         .next()\n                         .map(|i| i.name)\n@@ -1781,7 +1780,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n         }\n         ty::Tuple(t) => Tuple(t.iter().map(|t| clean_middle_ty(t, cx, None)).collect()),\n \n-        ty::Projection(ref data) => clean_projection(*data, cx, def_id),\n+        ty::Projection(ref data) => clean_projection(ty::Binder::dummy(*data), cx, def_id),\n \n         ty::Param(ref p) => {\n             if let Some(bounds) = cx.impl_trait_bounds.remove(&p.index.into()) {"}]}