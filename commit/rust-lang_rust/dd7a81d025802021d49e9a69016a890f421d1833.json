{"sha": "dd7a81d025802021d49e9a69016a890f421d1833", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkN2E4MWQwMjU4MDIwMjFkNDllOWE2OTAxNmE4OTBmNDIxZDE4MzM=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-02-08T09:52:47Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-02-08T09:52:47Z"}, "message": "Let llsize_of be a ConstantInt", "tree": {"sha": "a6512556f5c7e277ebaa9796365577ab3bfa6ac8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6512556f5c7e277ebaa9796365577ab3bfa6ac8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd7a81d025802021d49e9a69016a890f421d1833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd7a81d025802021d49e9a69016a890f421d1833", "html_url": "https://github.com/rust-lang/rust/commit/dd7a81d025802021d49e9a69016a890f421d1833", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd7a81d025802021d49e9a69016a890f421d1833/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd41f044da5f8f20798122d2a138ea614600c16e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd41f044da5f8f20798122d2a138ea614600c16e", "html_url": "https://github.com/rust-lang/rust/commit/dd41f044da5f8f20798122d2a138ea614600c16e"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "dfbc75376c7cdc3159b759b7db486a5ef20a498c", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dd7a81d025802021d49e9a69016a890f421d1833/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7a81d025802021d49e9a69016a890f421d1833/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=dd7a81d025802021d49e9a69016a890f421d1833", "patch": "@@ -126,17 +126,16 @@ pub fn llbitsize_of_real(cx: @crate_ctxt, t: TypeRef) -> uint {\n     }\n }\n \n-// Returns the \"default\" size of t, which is calculated by casting null to a\n-// *T and then doing gep(1) on it and measuring the result. Really, look in\n-// the LLVM sources. It does that. So this is likely similar to the ABI size\n-// (i.e. including alignment-padding), but goodness knows which alignment it\n-// winds up using. Probably the ABI one? Not recommended.\n+/// Returns the size of the type as an LLVM constant integer value.\n pub fn llsize_of(cx: @crate_ctxt, t: TypeRef) -> ValueRef {\n-    unsafe {\n-        return llvm::LLVMConstIntCast(lib::llvm::llvm::LLVMSizeOf(t),\n-                                      cx.int_type,\n-                                      False);\n-    }\n+    // Once upon a time, this called LLVMSizeOf, which does a\n+    // getelementptr(1) on a null pointer and casts to an int, in\n+    // order to obtain the type size as a value without requiring the\n+    // target data layout.  But we have the target data layout, so\n+    // there's no need for that contrivance.  The instruction\n+    // selection DAG generator would flatten that GEP(1) node into a\n+    // constant of the type's alloc size, so let's save it some work.\n+    return C_uint(cx, llsize_of_alloc(cx, t));\n }\n \n // Returns the \"default\" size of t (see above), or 1 if the size would"}]}