{"sha": "5adc7a5e3792edd4151685ab3cbf84c129123713", "node_id": "C_kwDOAAsO6NoAKDVhZGM3YTVlMzc5MmVkZDQxNTE2ODVhYjNjYmY4NGMxMjkxMjM3MTM", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2023-01-13T07:54:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-13T07:54:24Z"}, "message": "Rollup merge of #106785 - compiler-errors:better-impl-wf-spans, r=estebank\n\nMake blame spans better for impl wfcheck\n\nr? types", "tree": {"sha": "38e2f7465c362038e01c7360df6fb6589517d5e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38e2f7465c362038e01c7360df6fb6589517d5e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5adc7a5e3792edd4151685ab3cbf84c129123713", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjwQ4wCRBK7hj4Ov3rIwAAwD8IAG4lW2LyiOw3rN8P1lgBe1+2\nOuo31hxoE5T9/c0v1ycny2IZ5EIJV+RN0sudfE5FkPhamMlrZ0H5aHXp8t2ud0KI\nLg2oDar3otiK15ENXlI2bkHs5E9ipwqH6zjfrU+c4MFKgrbl3WZ3HOCC7b8MIq2U\nIIS2/vXZacLfxcXiVKnNQi+bxJzq1WJBsw1oVKf8vRDuBL8I957ssvwenTyu76Tz\n4UUwcsoYn2HIdb//wmPxxK7piZ0Ac/fa8/CxdvSp/ZHEsYnR0/+JbGneA+OZRA8k\nCK/M8S16ujc9VqPM/TpRo5WKzhDvYNbiRuV5c3lyBCxnjtELReAuowTd9myRVtw=\n=Vr0A\n-----END PGP SIGNATURE-----\n", "payload": "tree 38e2f7465c362038e01c7360df6fb6589517d5e7\nparent 796847a3da6951219f3ca76a407489b8c5e09619\nparent 5924c2511e43dd077df78d9936ccd0d76168ad30\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1673596464 +0900\ncommitter GitHub <noreply@github.com> 1673596464 +0900\n\nRollup merge of #106785 - compiler-errors:better-impl-wf-spans, r=estebank\n\nMake blame spans better for impl wfcheck\n\nr? types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5adc7a5e3792edd4151685ab3cbf84c129123713", "html_url": "https://github.com/rust-lang/rust/commit/5adc7a5e3792edd4151685ab3cbf84c129123713", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5adc7a5e3792edd4151685ab3cbf84c129123713/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "796847a3da6951219f3ca76a407489b8c5e09619", "url": "https://api.github.com/repos/rust-lang/rust/commits/796847a3da6951219f3ca76a407489b8c5e09619", "html_url": "https://github.com/rust-lang/rust/commit/796847a3da6951219f3ca76a407489b8c5e09619"}, {"sha": "5924c2511e43dd077df78d9936ccd0d76168ad30", "url": "https://api.github.com/repos/rust-lang/rust/commits/5924c2511e43dd077df78d9936ccd0d76168ad30", "html_url": "https://github.com/rust-lang/rust/commit/5924c2511e43dd077df78d9936ccd0d76168ad30"}], "stats": {"total": 189, "additions": 106, "deletions": 83}, "files": [{"sha": "92fd4625ee83574dbe515e06928cfe2373b5878a", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1254,7 +1254,11 @@ fn check_impl<'tcx>(\n                 // therefore don't need to be WF (the trait's `Self: Trait` predicate\n                 // won't hold).\n                 let trait_ref = tcx.impl_trait_ref(item.owner_id).unwrap();\n-                let trait_ref = wfcx.normalize(ast_trait_ref.path.span, None, trait_ref);\n+                let trait_ref = wfcx.normalize(\n+                    ast_trait_ref.path.span,\n+                    Some(WellFormedLoc::Ty(item.hir_id().expect_owner().def_id)),\n+                    trait_ref,\n+                );\n                 let trait_pred = ty::TraitPredicate {\n                     trait_ref,\n                     constness: match constness {\n@@ -1263,14 +1267,21 @@ fn check_impl<'tcx>(\n                     },\n                     polarity: ty::ImplPolarity::Positive,\n                 };\n-                let obligations = traits::wf::trait_obligations(\n+                let mut obligations = traits::wf::trait_obligations(\n                     wfcx.infcx,\n                     wfcx.param_env,\n                     wfcx.body_id,\n                     &trait_pred,\n                     ast_trait_ref.path.span,\n                     item,\n                 );\n+                for obligation in &mut obligations {\n+                    if let Some(pred) = obligation.predicate.to_opt_poly_trait_pred()\n+                        && pred.self_ty().skip_binder() == trait_ref.self_ty()\n+                    {\n+                        obligation.cause.span = ast_self_ty.span;\n+                    }\n+                }\n                 debug!(?obligations);\n                 wfcx.register_obligations(obligations);\n             }"}, {"sha": "2dbfc1bc9a229c4a4a069ddf76ab79cbb26db179", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -114,51 +114,63 @@ fn diagnostic_hir_wf_check<'tcx>(\n     // Get the starting `hir::Ty` using our `WellFormedLoc`.\n     // We will walk 'into' this type to try to find\n     // a more precise span for our predicate.\n-    let ty = match loc {\n+    let tys = match loc {\n         WellFormedLoc::Ty(_) => match hir.get(hir_id) {\n             hir::Node::ImplItem(item) => match item.kind {\n-                hir::ImplItemKind::Type(ty) => Some(ty),\n-                hir::ImplItemKind::Const(ty, _) => Some(ty),\n+                hir::ImplItemKind::Type(ty) => vec![ty],\n+                hir::ImplItemKind::Const(ty, _) => vec![ty],\n                 ref item => bug!(\"Unexpected ImplItem {:?}\", item),\n             },\n             hir::Node::TraitItem(item) => match item.kind {\n-                hir::TraitItemKind::Type(_, ty) => ty,\n-                hir::TraitItemKind::Const(ty, _) => Some(ty),\n+                hir::TraitItemKind::Type(_, ty) => ty.into_iter().collect(),\n+                hir::TraitItemKind::Const(ty, _) => vec![ty],\n                 ref item => bug!(\"Unexpected TraitItem {:?}\", item),\n             },\n             hir::Node::Item(item) => match item.kind {\n-                hir::ItemKind::Static(ty, _, _) | hir::ItemKind::Const(ty, _) => Some(ty),\n-                hir::ItemKind::Impl(ref impl_) => {\n-                    assert!(impl_.of_trait.is_none(), \"Unexpected trait impl: {:?}\", impl_);\n-                    Some(impl_.self_ty)\n-                }\n+                hir::ItemKind::Static(ty, _, _) | hir::ItemKind::Const(ty, _) => vec![ty],\n+                hir::ItemKind::Impl(ref impl_) => match &impl_.of_trait {\n+                    Some(t) => t\n+                        .path\n+                        .segments\n+                        .last()\n+                        .iter()\n+                        .flat_map(|seg| seg.args().args)\n+                        .filter_map(|arg| {\n+                            if let hir::GenericArg::Type(ty) = arg { Some(*ty) } else { None }\n+                        })\n+                        .chain([impl_.self_ty])\n+                        .collect(),\n+                    None => {\n+                        vec![impl_.self_ty]\n+                    }\n+                },\n                 ref item => bug!(\"Unexpected item {:?}\", item),\n             },\n-            hir::Node::Field(field) => Some(field.ty),\n+            hir::Node::Field(field) => vec![field.ty],\n             hir::Node::ForeignItem(ForeignItem {\n                 kind: ForeignItemKind::Static(ty, _), ..\n-            }) => Some(*ty),\n+            }) => vec![*ty],\n             hir::Node::GenericParam(hir::GenericParam {\n                 kind: hir::GenericParamKind::Type { default: Some(ty), .. },\n                 ..\n-            }) => Some(*ty),\n+            }) => vec![*ty],\n             ref node => bug!(\"Unexpected node {:?}\", node),\n         },\n         WellFormedLoc::Param { function: _, param_idx } => {\n             let fn_decl = hir.fn_decl_by_hir_id(hir_id).unwrap();\n             // Get return type\n             if param_idx as usize == fn_decl.inputs.len() {\n                 match fn_decl.output {\n-                    hir::FnRetTy::Return(ty) => Some(ty),\n+                    hir::FnRetTy::Return(ty) => vec![ty],\n                     // The unit type `()` is always well-formed\n-                    hir::FnRetTy::DefaultReturn(_span) => None,\n+                    hir::FnRetTy::DefaultReturn(_span) => vec![],\n                 }\n             } else {\n-                Some(&fn_decl.inputs[param_idx as usize])\n+                vec![&fn_decl.inputs[param_idx as usize]]\n             }\n         }\n     };\n-    if let Some(ty) = ty {\n+    for ty in tys {\n         visitor.visit_ty(ty);\n     }\n     visitor.cause"}, {"sha": "592aa4369ce0d404606962514f33ea83a08f623e", "filename": "tests/ui/builtin-superkinds/builtin-superkinds-double-superkind.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/builtin-superkinds-double-superkind.rs:6:24\n+  --> $DIR/builtin-superkinds-double-superkind.rs:6:32\n    |\n LL | impl <T: Sync+'static> Foo for (T,) { }\n-   |                        ^^^ `T` cannot be sent between threads safely\n+   |                                ^^^^ `T` cannot be sent between threads safely\n    |\n    = note: required because it appears within the type `(T,)`\n note: required by a bound in `Foo`\n@@ -16,10 +16,10 @@ LL | impl <T: Sync+'static + std::marker::Send> Foo for (T,) { }\n    |                       +++++++++++++++++++\n \n error[E0277]: `T` cannot be shared between threads safely\n-  --> $DIR/builtin-superkinds-double-superkind.rs:9:16\n+  --> $DIR/builtin-superkinds-double-superkind.rs:9:24\n    |\n LL | impl <T: Send> Foo for (T,T) { }\n-   |                ^^^ `T` cannot be shared between threads safely\n+   |                        ^^^^^ `T` cannot be shared between threads safely\n    |\n    = note: required because it appears within the type `(T, T)`\n note: required by a bound in `Foo`"}, {"sha": "f9d548bb8fbe938a3e4093337db91eec8996c784", "filename": "tests/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/builtin-superkinds-in-metadata.rs:13:23\n+  --> $DIR/builtin-superkinds-in-metadata.rs:13:56\n    |\n LL | impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely\n+   |                                                        ^^^^ `T` cannot be sent between threads safely\n    |\n note: required because it appears within the type `X<T>`\n   --> $DIR/builtin-superkinds-in-metadata.rs:9:8"}, {"sha": "8b19170b0f100e86ea03c8aeed6be1fdf059c46c", "filename": "tests/ui/builtin-superkinds/builtin-superkinds-simple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `Rc<i8>` cannot be sent between threads safely\n-  --> $DIR/builtin-superkinds-simple.rs:6:6\n+  --> $DIR/builtin-superkinds-simple.rs:6:14\n    |\n LL | impl Foo for std::rc::Rc<i8> { }\n-   |      ^^^ `Rc<i8>` cannot be sent between threads safely\n+   |              ^^^^^^^^^^^^^^^ `Rc<i8>` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `Rc<i8>`\n note: required by a bound in `Foo`"}, {"sha": "0cfea72d5f184dddebc0027c2fc9a9def07c7afd", "filename": "tests/ui/builtin-superkinds/builtin-superkinds-typaram-not-send.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/builtin-superkinds-typaram-not-send.rs:5:24\n+  --> $DIR/builtin-superkinds-typaram-not-send.rs:5:32\n    |\n LL | impl <T: Sync+'static> Foo for T { }\n-   |                        ^^^ `T` cannot be sent between threads safely\n+   |                                ^ `T` cannot be sent between threads safely\n    |\n note: required by a bound in `Foo`\n   --> $DIR/builtin-superkinds-typaram-not-send.rs:3:13"}, {"sha": "84c32fa3771a061a2c365335dcfd993f0df8dce4", "filename": "tests/ui/chalkify/impl_wf.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fchalkify%2Fimpl_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fchalkify%2Fimpl_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchalkify%2Fimpl_wf.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/impl_wf.rs:11:6\n+  --> $DIR/impl_wf.rs:11:14\n    |\n LL | impl Foo for str { }\n-   |      ^^^ doesn't have a size known at compile-time\n+   |              ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n note: required by a bound in `Foo`\n@@ -12,10 +12,10 @@ LL | trait Foo: Sized { }\n    |            ^^^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `f32: Foo` is not satisfied\n-  --> $DIR/impl_wf.rs:22:6\n+  --> $DIR/impl_wf.rs:22:19\n    |\n LL | impl Baz<f32> for f32 { }\n-   |      ^^^^^^^^ the trait `Foo` is not implemented for `f32`\n+   |                   ^^^ the trait `Foo` is not implemented for `f32`\n    |\n    = help: the trait `Foo` is implemented for `i32`\n note: required by a bound in `Baz`"}, {"sha": "668b8319b3875fba17d26ceda66a8b3700ced1bc", "filename": "tests/ui/coherence/coherence-overlap-trait-alias.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,8 +1,8 @@\n error[E0283]: type annotations needed: cannot satisfy `u32: C`\n-  --> $DIR/coherence-overlap-trait-alias.rs:15:6\n+  --> $DIR/coherence-overlap-trait-alias.rs:15:12\n    |\n LL | impl C for u32 {}\n-   |      ^\n+   |            ^^^\n    |\n note: multiple `impl`s satisfying `u32: C` found\n   --> $DIR/coherence-overlap-trait-alias.rs:14:1"}, {"sha": "60e9de90332cc381dff3058e401659ece13e34f4", "filename": "tests/ui/dst/dst-sized-trait-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-sized-trait-param.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -16,10 +16,10 @@ LL | trait Foo<T: ?Sized> : Sized { fn take(self, x: &T) { } } // Note: T is siz\n    |            ++++++++\n \n error[E0277]: the size for values of type `[usize]` cannot be known at compilation time\n-  --> $DIR/dst-sized-trait-param.rs:10:6\n+  --> $DIR/dst-sized-trait-param.rs:10:21\n    |\n LL | impl Foo<isize> for [usize] { }\n-   |      ^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[usize]`\n note: required by a bound in `Foo`"}, {"sha": "3a8a81a73a6cec4a598845accd4d88f6350f0619", "filename": "tests/ui/error-codes/E0308-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Ferror-codes%2FE0308-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Ferror-codes%2FE0308-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0308-2.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/E0308-2.rs:9:6\n+  --> $DIR/E0308-2.rs:9:13\n    |\n LL | impl Eq for &dyn DynEq {}\n-   |      ^^ lifetime mismatch\n+   |             ^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected trait `<&dyn DynEq as PartialEq>`\n               found trait `<&(dyn DynEq + 'static) as PartialEq>`"}, {"sha": "7ccab88948371bd63ec4885fd722919f8736c518", "filename": "tests/ui/issues/issue-65230.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fissues%2Fissue-65230.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fissues%2Fissue-65230.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-65230.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-65230.rs:8:6\n+  --> $DIR/issue-65230.rs:8:13\n    |\n LL | impl T1 for &dyn T2 {}\n-   |      ^^ lifetime mismatch\n+   |             ^^^^^^^ lifetime mismatch\n    |\n    = note: expected trait `<&dyn T2 as T0>`\n               found trait `<&(dyn T2 + 'static) as T0>`"}, {"sha": "3cd59d6926eb4a3f6c6c0c381baf77fb1f5c4047", "filename": "tests/ui/marker_trait_attr/overlap-marker-trait-with-underscore-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait-with-underscore-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait-with-underscore-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait-with-underscore-lifetime.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,8 +1,8 @@\n error[E0283]: type annotations needed: cannot satisfy `&(): Marker`\n-  --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:6:6\n+  --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:6:17\n    |\n LL | impl Marker for &'_ () {}\n-   |      ^^^^^^\n+   |                 ^^^^^^\n    |\n note: multiple `impl`s satisfying `&(): Marker` found\n   --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:6:1\n@@ -13,10 +13,10 @@ LL | impl Marker for &'_ () {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed: cannot satisfy `&(): Marker`\n-  --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:7:6\n+  --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:7:17\n    |\n LL | impl Marker for &'_ () {}\n-   |      ^^^^^^\n+   |                 ^^^^^^\n    |\n note: multiple `impl`s satisfying `&(): Marker` found\n   --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:6:1"}, {"sha": "c6497b4669de6666eec7bb017f5b53b05d2c0245", "filename": "tests/ui/marker_trait_attr/region-overlap.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,8 +1,8 @@\n error[E0283]: type annotations needed: cannot satisfy `(&'static (), &'a ()): A`\n-  --> $DIR/region-overlap.rs:5:10\n+  --> $DIR/region-overlap.rs:5:16\n    |\n LL | impl<'a> A for (&'static (), &'a ()) {}\n-   |          ^\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: multiple `impl`s satisfying `(&'static (), &'a ()): A` found\n   --> $DIR/region-overlap.rs:5:1\n@@ -13,10 +13,10 @@ LL | impl<'a> A for (&'a (), &'static ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed: cannot satisfy `(&'a (), &'static ()): A`\n-  --> $DIR/region-overlap.rs:6:10\n+  --> $DIR/region-overlap.rs:6:16\n    |\n LL | impl<'a> A for (&'a (), &'static ()) {}\n-   |          ^\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: multiple `impl`s satisfying `(&'a (), &'static ()): A` found\n   --> $DIR/region-overlap.rs:5:1"}, {"sha": "bf12ef1ca77dfa9b0138f5f6000c4bb793c6bb39", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,14 +1,14 @@\n error[E0277]: the trait bound `S: ~const Foo` is not satisfied\n-  --> $DIR/super-traits-fail.rs:15:12\n+  --> $DIR/super-traits-fail.rs:15:20\n    |\n LL | impl const Bar for S {}\n-   |            ^^^ the trait `~const Foo` is not implemented for `S`\n+   |                    ^ the trait `~const Foo` is not implemented for `S`\n    |\n note: the trait `Foo` is implemented for `S`, but that implementation is not `const`\n-  --> $DIR/super-traits-fail.rs:15:12\n+  --> $DIR/super-traits-fail.rs:15:20\n    |\n LL | impl const Bar for S {}\n-   |            ^^^\n+   |                    ^\n note: required by a bound in `Bar`\n   --> $DIR/super-traits-fail.rs:8:12\n    |"}, {"sha": "cb5cc320276d85b4ffcb40e9a8d949b045e99528", "filename": "tests/ui/span/issue-71363.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fspan%2Fissue-71363.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fspan%2Fissue-71363.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-71363.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,19 +1,19 @@\n error[E0277]: `MyError` doesn't implement `std::fmt::Display`\n- --> $DIR/issue-71363.rs:4:6\n+ --> $DIR/issue-71363.rs:4:28\n   |\n 4 | impl std::error::Error for MyError {}\n-  |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted with the default formatter\n+  |                            ^^^^^^^ `MyError` cannot be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display` is not implemented for `MyError`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n note: required by a bound in `std::error::Error`\n  --> $SRC_DIR/core/src/error.rs:LL:COL\n \n error[E0277]: `MyError` doesn't implement `Debug`\n- --> $DIR/issue-71363.rs:4:6\n+ --> $DIR/issue-71363.rs:4:28\n   |\n 4 | impl std::error::Error for MyError {}\n-  |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted using `{:?}`\n+  |                            ^^^^^^^ `MyError` cannot be formatted using `{:?}`\n   |\n   = help: the trait `Debug` is not implemented for `MyError`\n   = note: add `#[derive(Debug)]` to `MyError` or manually `impl Debug for MyError`"}, {"sha": "505baa23ca336c8c6202f23d14fec317fca13838", "filename": "tests/ui/specialization/min_specialization/issue-79224.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `B: Clone` is not satisfied\n-  --> $DIR/issue-79224.rs:18:17\n+  --> $DIR/issue-79224.rs:18:29\n    |\n LL | impl<B: ?Sized> Display for Cow<'_, B> {\n-   |                 ^^^^^^^ the trait `Clone` is not implemented for `B`\n+   |                             ^^^^^^^^^^ the trait `Clone` is not implemented for `B`\n    |\n    = note: required for `B` to implement `ToOwned`\n help: consider further restricting this bound"}, {"sha": "da27ba1c58dbee7913b913838477ca5d751859c7", "filename": "tests/ui/trait-bounds/unsized-bound.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `B` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:2:12\n+  --> $DIR/unsized-bound.rs:2:30\n    |\n LL | impl<A, B> Trait<(A, B)> for (A, B) where A: ?Sized, B: ?Sized, {}\n-   |         -  ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         -                    ^^^^^^ doesn't have a size known at compile-time\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n@@ -38,10 +38,10 @@ LL + impl<A, B> Trait<(A, B)> for (A, B) where B: ?Sized, {}\n    |\n \n error[E0277]: the size for values of type `C` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:5:31\n+  --> $DIR/unsized-bound.rs:5:52\n    |\n LL | impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n-   |                    -          ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    -                               ^^^^^^^^^ doesn't have a size known at compile-time\n    |                    |\n    |                    this type parameter needs to be `std::marker::Sized`\n    |\n@@ -92,10 +92,10 @@ LL + impl<A, B, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n    |\n \n error[E0277]: the size for values of type `B` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:10:28\n+  --> $DIR/unsized-bound.rs:10:47\n    |\n LL | impl<A: ?Sized, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n-   |                 -          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                 -                             ^^^^^^ doesn't have a size known at compile-time\n    |                 |\n    |                 this type parameter needs to be `std::marker::Sized`\n    |\n@@ -131,10 +131,10 @@ LL + impl<A, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n    |\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:14:9\n+  --> $DIR/unsized-bound.rs:14:23\n    |\n LL | impl<A> Trait3<A> for A where A: ?Sized {}\n-   |      -  ^^^^^^^^^ doesn't have a size known at compile-time\n+   |      -                ^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n@@ -154,10 +154,10 @@ LL | trait Trait3<A: ?Sized> {}\n    |               ++++++++\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:17:17\n+  --> $DIR/unsized-bound.rs:17:31\n    |\n LL | impl<A: ?Sized> Trait4<A> for A {}\n-   |      -          ^^^^^^^^^ doesn't have a size known at compile-time\n+   |      -                        ^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n@@ -177,10 +177,10 @@ LL | trait Trait4<A: ?Sized> {}\n    |               ++++++++\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:20:12\n+  --> $DIR/unsized-bound.rs:20:29\n    |\n LL | impl<X, Y> Trait5<X, Y> for X where X: ?Sized {}\n-   |      -     ^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |      -                      ^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n@@ -200,10 +200,10 @@ LL | trait Trait5<A: ?Sized, B> {}\n    |               ++++++++\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:23:20\n+  --> $DIR/unsized-bound.rs:23:37\n    |\n LL | impl<X: ?Sized, Y> Trait6<X, Y> for X {}\n-   |      -             ^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |      -                              ^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |"}, {"sha": "1f969efe1141d8dab48aaacd1200f467957fb6f9", "filename": "tests/ui/traits/impl-bounds-checking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Ftraits%2Fimpl-bounds-checking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Ftraits%2Fimpl-bounds-checking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fimpl-bounds-checking.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `isize: Clone2` is not satisfied\n-  --> $DIR/impl-bounds-checking.rs:10:6\n+  --> $DIR/impl-bounds-checking.rs:10:24\n    |\n LL | impl Getter<isize> for isize {\n-   |      ^^^^^^^^^^^^^ the trait `Clone2` is not implemented for `isize`\n+   |                        ^^^^^ the trait `Clone2` is not implemented for `isize`\n    |\n note: required by a bound in `Getter`\n   --> $DIR/impl-bounds-checking.rs:6:17"}, {"sha": "1bace8ab2864bf4b14c7d9c3cdbafc4e529e4263", "filename": "tests/ui/traits/impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,8 +1,8 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n-  --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:13\n+  --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:28\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n-   |             ^^^^^^^^^^\n+   |                            ^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:6\n@@ -15,10 +15,10 @@ note: ...but the lifetime must also be valid for the lifetime `'b` as defined he\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n    |         ^^\n note: ...so that the types are compatible\n-  --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:13\n+  --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:28\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n-   |             ^^^^^^^^^^\n+   |                            ^^^^^^^^^\n    = note: expected `T1<'a>`\n               found `T1<'_>`\n "}, {"sha": "4fe12731475b493d8e9426b04cae17c35f95410e", "filename": "tests/ui/traits/issue-43784-supertrait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-43784-supertrait.rs:8:9\n+  --> $DIR/issue-43784-supertrait.rs:8:22\n    |\n LL | impl<T> Complete for T {}\n-   |         ^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |                      ^ the trait `Copy` is not implemented for `T`\n    |\n note: required by a bound in `Complete`\n   --> $DIR/issue-43784-supertrait.rs:4:21"}, {"sha": "85d903fadd120ac36831dbd02c5e80ed0c7780a4", "filename": "tests/ui/traits/issue-91594.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Ftraits%2Fissue-91594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5adc7a5e3792edd4151685ab3cbf84c129123713/tests%2Fui%2Ftraits%2Fissue-91594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-91594.stderr?ref=5adc7a5e3792edd4151685ab3cbf84c129123713", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `Foo: HasComponent<()>` is not satisfied\n-  --> $DIR/issue-91594.rs:10:6\n+  --> $DIR/issue-91594.rs:10:19\n    |\n LL | impl HasComponent<<Foo as Component<Foo>>::Interface> for Foo {}\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `HasComponent<()>` is not implemented for `Foo`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `HasComponent<()>` is not implemented for `Foo`\n    |\n    = help: the trait `HasComponent<<Foo as Component<Foo>>::Interface>` is implemented for `Foo`\n note: required for `Foo` to implement `Component<Foo>`"}]}