{"sha": "32690b586d6bbe2541ec94adbdc7c226978332c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNjkwYjU4NmQ2YmJlMjU0MWVjOTRhZGJkYzdjMjI2OTc4MzMyYzU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-14T09:24:09Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-14T09:24:09Z"}, "message": "Tweek save-analysis treatment of impls", "tree": {"sha": "cd54af07b8da8468962d6f72f3ca77f761c18e8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd54af07b8da8468962d6f72f3ca77f761c18e8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32690b586d6bbe2541ec94adbdc7c226978332c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32690b586d6bbe2541ec94adbdc7c226978332c5", "html_url": "https://github.com/rust-lang/rust/commit/32690b586d6bbe2541ec94adbdc7c226978332c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32690b586d6bbe2541ec94adbdc7c226978332c5/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "170c4399e614fe599c3d41306b3429ca8b3b68c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/170c4399e614fe599c3d41306b3429ca8b3b68c6", "html_url": "https://github.com/rust-lang/rust/commit/170c4399e614fe599c3d41306b3429ca8b3b68c6"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "2cfe7940bbb585886088568d562ccb586619adde", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/32690b586d6bbe2541ec94adbdc7c226978332c5/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32690b586d6bbe2541ec94adbdc7c226978332c5/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=32690b586d6bbe2541ec94adbdc7c226978332c5", "patch": "@@ -392,8 +392,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n     }\n \n     fn process_trait_ref(&mut self,\n-                         trait_ref: &ast::TraitRef,\n-                         impl_id: Option<NodeId>) {\n+                         trait_ref: &ast::TraitRef) {\n         match self.lookup_type_ref(trait_ref.ref_id) {\n             Some(id) => {\n                 let sub_span = self.span.sub_span_for_type_name(trait_ref.path.span);\n@@ -402,14 +401,6 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                                  sub_span,\n                                  id,\n                                  self.cur_scope);\n-                match impl_id {\n-                    Some(impl_id) => self.fmt.impl_str(trait_ref.path.span,\n-                                                       sub_span,\n-                                                       impl_id,\n-                                                       id,\n-                                                       self.cur_scope),\n-                    None => (),\n-                }\n                 visit::walk_path(self, &trait_ref.path);\n             },\n             None => ()\n@@ -652,7 +643,9 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                     trait_ref: &Option<ast::TraitRef>,\n                     typ: &ast::Ty,\n                     impl_items: &Vec<ast::ImplItem>) {\n+        let trait_id = trait_ref.as_ref().and_then(|tr| self.lookup_type_ref(tr.ref_id));\n         match typ.node {\n+            // Common case impl for a struct or something basic.\n             ast::TyPath(ref path, id) => {\n                 match self.lookup_type_ref(id) {\n                     Some(id) => {\n@@ -665,17 +658,29 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                         self.fmt.impl_str(path.span,\n                                           sub_span,\n                                           item.id,\n-                                          id,\n+                                          Some(id),\n+                                          trait_id,\n                                           self.cur_scope);\n                     },\n                     None => ()\n                 }\n             },\n-            _ => self.visit_ty(&*typ),\n+            _ => {\n+                // Less useful case, impl for a compound type.\n+                self.visit_ty(&*typ);\n+\n+                let sub_span = self.span.sub_span_for_type_name(typ.span);\n+                self.fmt.impl_str(typ.span,\n+                                  sub_span,\n+                                  item.id,\n+                                  None,\n+                                  trait_id,\n+                                  self.cur_scope);\n+            }\n         }\n \n         match *trait_ref {\n-            Some(ref trait_ref) => self.process_trait_ref(trait_ref, Some(item.id)),\n+            Some(ref trait_ref) => self.process_trait_ref(trait_ref),\n             None => (),\n         }\n \n@@ -1076,7 +1081,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n         for param in generics.ty_params.iter() {\n             for bound in param.bounds.iter() {\n                 if let ast::TraitTyParamBound(ref trait_ref, _) = *bound {\n-                    self.process_trait_ref(&trait_ref.trait_ref, None);\n+                    self.process_trait_ref(&trait_ref.trait_ref);\n                 }\n             }\n             if let Some(ref ty) = param.default {"}, {"sha": "5cd3b9f20b620aebd6a517aa6192cf0721ec5f6d", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32690b586d6bbe2541ec94adbdc7c226978332c5/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32690b586d6bbe2541ec94adbdc7c226978332c5/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=32690b586d6bbe2541ec94adbdc7c226978332c5", "patch": "@@ -19,6 +19,8 @@ use syntax::ast;\n use syntax::ast::{NodeId,DefId};\n use syntax::codemap::*;\n \n+const ZERO_DEF_ID: DefId = DefId { node: 0, krate: 0 };\n+\n pub struct Recorder {\n     // output file\n     pub out: Box<Writer+'static>,\n@@ -121,7 +123,9 @@ impl<'a> FmtStrs<'a> {\n             MethodDecl => (\"method_decl\", vec!(\"id\",\"qualname\",\"scopeid\"), true, true),\n             Struct => (\"struct\", vec!(\"id\",\"ctor_id\",\"qualname\",\"scopeid\",\"value\"), true, true),\n             Trait => (\"trait\", vec!(\"id\",\"qualname\",\"scopeid\",\"value\"), true, true),\n-            Impl => (\"impl\", vec!(\"id\",\"refid\",\"refidcrate\",\"scopeid\"), true, true),\n+            Impl => (\"impl\",\n+                     vec!(\"id\",\"refid\",\"refidcrate\",\"traitid\",\"traitidcrate\",\"scopeid\"),\n+                     true, true),\n             Module => (\"module\", vec!(\"id\",\"qualname\",\"scopeid\",\"def_file\"), true, false),\n             UseAlias => (\"use_alias\",\n                          vec!(\"id\",\"refid\",\"refidcrate\",\"name\",\"scopeid\"),\n@@ -444,12 +448,20 @@ impl<'a> FmtStrs<'a> {\n                     span: Span,\n                     sub_span: Option<Span>,\n                     id: NodeId,\n-                    ref_id: DefId,\n+                    ref_id: Option<DefId>,\n+                    trait_id: Option<DefId>,\n                     scope_id: NodeId) {\n+        let ref_id = ref_id.unwrap_or(ZERO_DEF_ID);\n+        let trait_id = trait_id.unwrap_or(ZERO_DEF_ID);\n         self.check_and_record(Impl,\n                               span,\n                               sub_span,\n-                              svec!(id, ref_id.node, ref_id.krate, scope_id));\n+                              svec!(id,\n+                                    ref_id.node,\n+                                    ref_id.krate,\n+                                    trait_id.node,\n+                                    trait_id.krate,\n+                                    scope_id));\n     }\n \n     pub fn mod_str(&mut self,"}]}