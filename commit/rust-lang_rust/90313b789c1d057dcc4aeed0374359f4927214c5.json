{"sha": "90313b789c1d057dcc4aeed0374359f4927214c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMzEzYjc4OWMxZDA1N2RjYzRhZWVkMDM3NDM1OWY0OTI3MjE0YzU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-04-19T14:07:07Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-19T14:37:15Z"}, "message": "libcore: add an UnfoldrIterator like Haskell's `unfoldr`", "tree": {"sha": "01e8cc5bf5a2f4d5ac39c326c37aeaadcbeebd19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01e8cc5bf5a2f4d5ac39c326c37aeaadcbeebd19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90313b789c1d057dcc4aeed0374359f4927214c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90313b789c1d057dcc4aeed0374359f4927214c5", "html_url": "https://github.com/rust-lang/rust/commit/90313b789c1d057dcc4aeed0374359f4927214c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90313b789c1d057dcc4aeed0374359f4927214c5/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7a2ae6c42f1d9755178485fd93f234c2df8a8fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a2ae6c42f1d9755178485fd93f234c2df8a8fe", "html_url": "https://github.com/rust-lang/rust/commit/d7a2ae6c42f1d9755178485fd93f234c2df8a8fe"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "7ca40ae3a300a00c2544ba6f67002cedd4960293", "filename": "src/libcore/iterator.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/90313b789c1d057dcc4aeed0374359f4927214c5/src%2Flibcore%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90313b789c1d057dcc4aeed0374359f4927214c5/src%2Flibcore%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiterator.rs?ref=90313b789c1d057dcc4aeed0374359f4927214c5", "patch": "@@ -261,6 +261,28 @@ impl<A, T: Iterator<A>> Iterator<A> for TakeIterator<T> {\n     }\n }\n \n+pub struct UnfoldrIterator<'self, A, St> {\n+    priv f: &'self fn(&mut St) -> Option<A>,\n+    priv state: St\n+}\n+\n+pub impl<'self, A, St> UnfoldrIterator<'self, A, St> {\n+    #[inline]\n+    fn new(f: &'self fn(&mut St) -> Option<A>, initial_state: St) -> UnfoldrIterator<'self, A, St> {\n+        UnfoldrIterator {\n+            f: f,\n+            state: initial_state\n+        }\n+    }\n+}\n+\n+impl<'self, A, St> Iterator<A> for UnfoldrIterator<'self, A, St> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        (self.f)(&mut self.state)\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -326,4 +348,25 @@ mod tests {\n         }\n         assert_eq!(i, ys.len());\n     }\n+\n+    #[test]\n+    fn test_unfoldr() {\n+        fn count(st: &mut uint) -> Option<uint> {\n+            if *st < 10 {\n+                let ret = Some(*st);\n+                *st += 1;\n+                ret\n+            } else {\n+                None\n+            }\n+        }\n+\n+        let mut it = UnfoldrIterator::new(count, 0);\n+        let mut i = 0;\n+        for it.advance |counted| {\n+            assert_eq!(counted, i);\n+            i += 1;\n+        }\n+        assert_eq!(i, 10);\n+    }\n }"}]}