{"sha": "00ca42fe5bcd1eb412f4486237abf4ae586de99a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwY2E0MmZlNWJjZDFlYjQxMmY0NDg2MjM3YWJmNGFlNTg2ZGU5OWE=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-09-12T06:36:05Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-09-12T06:36:05Z"}, "message": "Fix lint warnings", "tree": {"sha": "6eb48da88753a41f516eeccc726b76fd4e8e02f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eb48da88753a41f516eeccc726b76fd4e8e02f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00ca42fe5bcd1eb412f4486237abf4ae586de99a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00ca42fe5bcd1eb412f4486237abf4ae586de99a", "html_url": "https://github.com/rust-lang/rust/commit/00ca42fe5bcd1eb412f4486237abf4ae586de99a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00ca42fe5bcd1eb412f4486237abf4ae586de99a/comments", "author": null, "committer": null, "parents": [{"sha": "4a3bc6b5923217a53441b7745b9f5542ed4245e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a3bc6b5923217a53441b7745b9f5542ed4245e8", "html_url": "https://github.com/rust-lang/rust/commit/4a3bc6b5923217a53441b7745b9f5542ed4245e8"}], "stats": {"total": 121, "additions": 63, "deletions": 58}, "files": [{"sha": "efd4e1e0334cc0fba99f506f3516318adfdd3dc8", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00ca42fe5bcd1eb412f4486237abf4ae586de99a/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ca42fe5bcd1eb412f4486237abf4ae586de99a/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=00ca42fe5bcd1eb412f4486237abf4ae586de99a", "patch": "@@ -101,7 +101,7 @@ struct DivergenceVisitor<'a, 'tcx> {\n impl<'a, 'tcx> DivergenceVisitor<'a, 'tcx> {\n     fn maybe_walk_expr(&mut self, e: &'tcx Expr) {\n         match e.node {\n-            ExprKind::Closure(.., _) => {},\n+            ExprKind::Closure(..) => {},\n             ExprKind::Match(ref e, ref arms, _) => {\n                 self.visit_expr(e);\n                 for arm in arms {"}, {"sha": "17c44d148b468ec45b8c44648840853d346284ee", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 60, "deletions": 55, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/00ca42fe5bcd1eb412f4486237abf4ae586de99a/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ca42fe5bcd1eb412f4486237abf4ae586de99a/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=00ca42fe5bcd1eb412f4486237abf4ae586de99a", "patch": "@@ -362,61 +362,7 @@ impl EarlyLintPass for MiscEarlyLints {\n             }\n         }\n \n-        if let PatKind::TupleStruct(_, ref patterns) | PatKind::Tuple(ref patterns) = pat.node {\n-            fn span_lint(cx: &EarlyContext<'_>, span: Span, only_one: bool) {\n-                span_lint_and_sugg(\n-                    cx,\n-                    UNNEEDED_WILDCARD_PATTERN,\n-                    span,\n-                    if only_one {\n-                        \"this pattern is unneeded as the `..` pattern can match that element\"\n-                    } else {\n-                        \"these patterns are unneeded as the `..` pattern can match those elements\"\n-                    },\n-                    if only_one { \"remove it\" } else { \"remove them\" },\n-                    \"\".to_string(),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-\n-            fn is_rest<P: std::ops::Deref<Target = Pat>>(pat: &P) -> bool {\n-                if let PatKind::Rest = pat.node {\n-                    true\n-                } else {\n-                    false\n-                }\n-            }\n-\n-            fn is_wild<P: std::ops::Deref<Target = Pat>>(pat: &&P) -> bool {\n-                if let PatKind::Wild = pat.node {\n-                    true\n-                } else {\n-                    false\n-                }\n-            }\n-\n-            if let Some(rest_index) = patterns.iter().position(is_rest) {\n-                if let Some((left_index, left_pat)) = patterns[..rest_index]\n-                    .iter()\n-                    .rev()\n-                    .take_while(is_wild)\n-                    .enumerate()\n-                    .last()\n-                {\n-                    span_lint(cx, left_pat.span.until(patterns[rest_index].span), left_index == 0);\n-                }\n-\n-                if let Some((right_index, right_pat)) =\n-                    patterns[rest_index + 1..].iter().take_while(is_wild).enumerate().last()\n-                {\n-                    span_lint(\n-                        cx,\n-                        patterns[rest_index].span.shrink_to_hi().to(right_pat.span),\n-                        right_index == 0,\n-                    );\n-                }\n-            }\n-        }\n+        check_unneeded_wildcard_pattern(cx, pat);\n     }\n \n     fn check_fn(&mut self, cx: &EarlyContext<'_>, _: FnKind<'_>, decl: &FnDecl, _: Span, _: NodeId) {\n@@ -611,3 +557,62 @@ impl MiscEarlyLints {\n         }\n     }\n }\n+\n+fn check_unneeded_wildcard_pattern(cx: &EarlyContext<'_>, pat: &Pat) {\n+    if let PatKind::TupleStruct(_, ref patterns) | PatKind::Tuple(ref patterns) = pat.node {\n+        fn span_lint(cx: &EarlyContext<'_>, span: Span, only_one: bool) {\n+            span_lint_and_sugg(\n+                cx,\n+                UNNEEDED_WILDCARD_PATTERN,\n+                span,\n+                if only_one {\n+                    \"this pattern is unneeded as the `..` pattern can match that element\"\n+                } else {\n+                    \"these patterns are unneeded as the `..` pattern can match those elements\"\n+                },\n+                if only_one { \"remove it\" } else { \"remove them\" },\n+                \"\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+\n+        fn is_rest<P: std::ops::Deref<Target = Pat>>(pat: &P) -> bool {\n+            if let PatKind::Rest = pat.node {\n+                true\n+            } else {\n+                false\n+            }\n+        }\n+\n+        #[allow(clippy::trivially_copy_pass_by_ref)]\n+        fn is_wild<P: std::ops::Deref<Target = Pat>>(pat: &&P) -> bool {\n+            if let PatKind::Wild = pat.node {\n+                true\n+            } else {\n+                false\n+            }\n+        }\n+\n+        if let Some(rest_index) = patterns.iter().position(is_rest) {\n+            if let Some((left_index, left_pat)) = patterns[..rest_index]\n+                .iter()\n+                .rev()\n+                .take_while(is_wild)\n+                .enumerate()\n+                .last()\n+            {\n+                span_lint(cx, left_pat.span.until(patterns[rest_index].span), left_index == 0);\n+            }\n+\n+            if let Some((right_index, right_pat)) =\n+                patterns[rest_index + 1..].iter().take_while(is_wild).enumerate().last()\n+            {\n+                span_lint(\n+                    cx,\n+                    patterns[rest_index].span.shrink_to_hi().to(right_pat.span),\n+                    right_index == 0,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "22129a3abb9451e5657b01ee16c1eee01a6934af", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00ca42fe5bcd1eb412f4486237abf4ae586de99a/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ca42fe5bcd1eb412f4486237abf4ae586de99a/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=00ca42fe5bcd1eb412f4486237abf4ae586de99a", "patch": "@@ -47,7 +47,7 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n         return false;\n     }\n     match expr.node {\n-        ExprKind::Lit(..) | ExprKind::Closure(.., _) => true,\n+        ExprKind::Lit(..) | ExprKind::Closure(..) => true,\n         ExprKind::Path(..) => !has_drop(cx, cx.tables.expr_ty(expr)),\n         ExprKind::Index(ref a, ref b) | ExprKind::Binary(_, ref a, ref b) => {\n             has_no_effect(cx, a) && has_no_effect(cx, b)"}, {"sha": "249df8e0e230abae23f4dd7ae7186835729a7084", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00ca42fe5bcd1eb412f4486237abf4ae586de99a/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ca42fe5bcd1eb412f4486237abf4ae586de99a/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=00ca42fe5bcd1eb412f4486237abf4ae586de99a", "patch": "@@ -93,7 +93,7 @@ impl<'a> Sugg<'a> {\n         match expr.node {\n             hir::ExprKind::AddrOf(..)\n             | hir::ExprKind::Box(..)\n-            | hir::ExprKind::Closure(.., _)\n+            | hir::ExprKind::Closure(..)\n             | hir::ExprKind::Unary(..)\n             | hir::ExprKind::Match(..) => Sugg::MaybeParen(snippet),\n             hir::ExprKind::Continue(..)"}]}