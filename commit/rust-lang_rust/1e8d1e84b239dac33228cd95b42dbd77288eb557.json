{"sha": "1e8d1e84b239dac33228cd95b42dbd77288eb557", "node_id": "C_kwDOAAsO6NoAKDFlOGQxZTg0YjIzOWRhYzMzMjI4Y2Q5NWI0MmRiZDc3Mjg4ZWI1NTc", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-10T21:08:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-10T21:08:51Z"}, "message": "Merge #10689\n\n10689: Handle pub tuple fields in tuple structs r=Veykril a=adamrk\n\nThe current implementation will throw a parser error for tuple structs\r\nthat contain a pub tuple field. For example,\r\n```rust\r\nstruct Foo(pub (u32, u32));\r\n```\r\nis valid Rust, but rust-analyzer will throw a parser error.  This is\r\nbecause the parens after `pub` is treated as a visibility context.\r\nAllowing a tuple type to follow `pub` in the special case when we are\r\ndefining fields in a tuple struct can fix the issue.\r\n\r\nI guess this is a really minor case because there's not much reason\r\nfor having a tuple type within a struct tuple, but it is valid rust syntax...\n\nCo-authored-by: Adam Bratschi-Kaye <ark.email@gmail.com>", "tree": {"sha": "b7e5dc9fa50bd31316e4090293acac88188febc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7e5dc9fa50bd31316e4090293acac88188febc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e8d1e84b239dac33228cd95b42dbd77288eb557", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhjDTjCRBK7hj4Ov3rIwAAgHgIAJY3MUCE4qWJgoeRofdc6nIP\ncM+Y9fbtf2nAvTTLpJPLE5dZ5Ud46w1gIIyPj7TkDDWCjfr32BWym1wYVM+n6DtF\nm2HMpqttI7YHvlhpzt52VR1hZ4fvfTV7jx95zuPeLFwofM2XFthTTP7suL0tCrUA\nRQjavFoQfeinPc5AFUggnb+GZans8gOXTyC/+4GIoG0V8kTebfPuwlCoJrJN9wfS\nlXFlCzJdXeXSTNPZlC4ATKLNCpxIvVEAytQeMdoF+Z2T6n2JbjRy09wjcG90d2NP\nUbVHctFksK1wsZ6uSIZnjdBud0/d7KUZljx/aLSArqq1KnhyoPtRwvs8HIDmIa0=\n=/5N9\n-----END PGP SIGNATURE-----\n", "payload": "tree b7e5dc9fa50bd31316e4090293acac88188febc3\nparent e7244e899f84721857d9702479c051292862f7f9\nparent 0d54754ca73d8f370a902f605c94f4b588ded532\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1636578531 +0000\ncommitter GitHub <noreply@github.com> 1636578531 +0000\n\nMerge #10689\n\n10689: Handle pub tuple fields in tuple structs r=Veykril a=adamrk\n\nThe current implementation will throw a parser error for tuple structs\r\nthat contain a pub tuple field. For example,\r\n```rust\r\nstruct Foo(pub (u32, u32));\r\n```\r\nis valid Rust, but rust-analyzer will throw a parser error.  This is\r\nbecause the parens after `pub` is treated as a visibility context.\r\nAllowing a tuple type to follow `pub` in the special case when we are\r\ndefining fields in a tuple struct can fix the issue.\r\n\r\nI guess this is a really minor case because there's not much reason\r\nfor having a tuple type within a struct tuple, but it is valid rust syntax...\n\nCo-authored-by: Adam Bratschi-Kaye <ark.email@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e8d1e84b239dac33228cd95b42dbd77288eb557", "html_url": "https://github.com/rust-lang/rust/commit/1e8d1e84b239dac33228cd95b42dbd77288eb557", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e8d1e84b239dac33228cd95b42dbd77288eb557/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7244e899f84721857d9702479c051292862f7f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7244e899f84721857d9702479c051292862f7f9", "html_url": "https://github.com/rust-lang/rust/commit/e7244e899f84721857d9702479c051292862f7f9"}, {"sha": "0d54754ca73d8f370a902f605c94f4b588ded532", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d54754ca73d8f370a902f605c94f4b588ded532", "html_url": "https://github.com/rust-lang/rust/commit/0d54754ca73d8f370a902f605c94f4b588ded532"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "25178ddd775ac301ff056e08c269804650a19f32", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1e8d1e84b239dac33228cd95b42dbd77288eb557/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8d1e84b239dac33228cd95b42dbd77288eb557/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=1e8d1e84b239dac33228cd95b42dbd77288eb557", "patch": "@@ -75,7 +75,7 @@ pub(crate) mod entry_points {\n     }\n \n     pub(crate) fn visibility(p: &mut Parser) {\n-        let _ = opt_visibility(p);\n+        let _ = opt_visibility(p, false);\n     }\n \n     // Parse a meta item , which excluded [], e.g : #[ MetaItem ]\n@@ -149,7 +149,7 @@ impl BlockLike {\n     }\n }\n \n-fn opt_visibility(p: &mut Parser) -> bool {\n+fn opt_visibility(p: &mut Parser, in_tuple_field: bool) -> bool {\n     match p.current() {\n         T![pub] => {\n             let m = p.start();\n@@ -165,9 +165,17 @@ fn opt_visibility(p: &mut Parser) -> bool {\n                     // struct B(pub (super::A));\n                     // struct B(pub (crate::A,));\n                     T![crate] | T![self] | T![super] | T![ident] if p.nth(2) != T![:] => {\n-                        p.bump(T!['(']);\n-                        paths::use_path(p);\n-                        p.expect(T![')']);\n+                        // If we are in a tuple struct, then the parens following `pub`\n+                        // might be an tuple field, not part of the visibility. So in that\n+                        // case we don't want to consume an identifier.\n+\n+                        // test pub_tuple_field\n+                        // struct MyStruct(pub (u32, u32));\n+                        if !(in_tuple_field && matches!(p.nth(1), T![ident])) {\n+                            p.bump(T!['(']);\n+                            paths::use_path(p);\n+                            p.expect(T![')']);\n+                        }\n                     }\n                     // test crate_visibility_in\n                     // pub(in super::A) struct S;"}, {"sha": "39be0e1a1926e40c6059fbe94e4134a3b3fa0fd6", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8d1e84b239dac33228cd95b42dbd77288eb557/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8d1e84b239dac33228cd95b42dbd77288eb557/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=1e8d1e84b239dac33228cd95b42dbd77288eb557", "patch": "@@ -87,7 +87,7 @@ pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool) {\n pub(super) fn opt_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n     // test_err pub_expr\n     // fn foo() { pub 92; }\n-    let has_visibility = opt_visibility(p);\n+    let has_visibility = opt_visibility(p, false);\n \n     let m = match opt_item_without_modifiers(p, m) {\n         Ok(()) => return Ok(()),"}, {"sha": "c5bd5b14baed39f7e86ff6488750917bbba9200f", "filename": "crates/parser/src/grammar/items/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e8d1e84b239dac33228cd95b42dbd77288eb557/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8d1e84b239dac33228cd95b42dbd77288eb557/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs?ref=1e8d1e84b239dac33228cd95b42dbd77288eb557", "patch": "@@ -128,7 +128,7 @@ pub(crate) fn record_field_list(p: &mut Parser) {\n         // test record_field_attrs\n         // struct S { #[attr] f: f32 }\n         attributes::outer_attrs(p);\n-        opt_visibility(p);\n+        opt_visibility(p, false);\n         if p.at(IDENT) {\n             name(p);\n             p.expect(T![:]);\n@@ -150,7 +150,7 @@ fn tuple_field_list(p: &mut Parser) {\n         // test tuple_field_attrs\n         // struct S (#[attr] f32);\n         attributes::outer_attrs(p);\n-        opt_visibility(p);\n+        opt_visibility(p, true);\n         if !p.at_ts(types::TYPE_FIRST) {\n             p.error(\"expected a type\");\n             m.complete(p, ERROR);"}, {"sha": "8a1f5903d20d440bfe17f311753e2d6d8f828d00", "filename": "crates/syntax/test_data/parser/inline/ok/0196_pub_tuple_field.rast", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1e8d1e84b239dac33228cd95b42dbd77288eb557/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0196_pub_tuple_field.rast", "raw_url": "https://github.com/rust-lang/rust/raw/1e8d1e84b239dac33228cd95b42dbd77288eb557/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0196_pub_tuple_field.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0196_pub_tuple_field.rast?ref=1e8d1e84b239dac33228cd95b42dbd77288eb557", "patch": "@@ -0,0 +1,30 @@\n+SOURCE_FILE@0..33\n+  STRUCT@0..32\n+    STRUCT_KW@0..6 \"struct\"\n+    WHITESPACE@6..7 \" \"\n+    NAME@7..15\n+      IDENT@7..15 \"MyStruct\"\n+    TUPLE_FIELD_LIST@15..31\n+      L_PAREN@15..16 \"(\"\n+      TUPLE_FIELD@16..30\n+        VISIBILITY@16..19\n+          PUB_KW@16..19 \"pub\"\n+        WHITESPACE@19..20 \" \"\n+        TUPLE_TYPE@20..30\n+          L_PAREN@20..21 \"(\"\n+          PATH_TYPE@21..24\n+            PATH@21..24\n+              PATH_SEGMENT@21..24\n+                NAME_REF@21..24\n+                  IDENT@21..24 \"u32\"\n+          COMMA@24..25 \",\"\n+          WHITESPACE@25..26 \" \"\n+          PATH_TYPE@26..29\n+            PATH@26..29\n+              PATH_SEGMENT@26..29\n+                NAME_REF@26..29\n+                  IDENT@26..29 \"u32\"\n+          R_PAREN@29..30 \")\"\n+      R_PAREN@30..31 \")\"\n+    SEMICOLON@31..32 \";\"\n+  WHITESPACE@32..33 \"\\n\""}, {"sha": "00d8feba96748f23b3436707d5d3a9b225dcd4e1", "filename": "crates/syntax/test_data/parser/inline/ok/0196_pub_tuple_field.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e8d1e84b239dac33228cd95b42dbd77288eb557/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0196_pub_tuple_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8d1e84b239dac33228cd95b42dbd77288eb557/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0196_pub_tuple_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0196_pub_tuple_field.rs?ref=1e8d1e84b239dac33228cd95b42dbd77288eb557", "patch": "@@ -0,0 +1 @@\n+struct MyStruct(pub (u32, u32));"}]}