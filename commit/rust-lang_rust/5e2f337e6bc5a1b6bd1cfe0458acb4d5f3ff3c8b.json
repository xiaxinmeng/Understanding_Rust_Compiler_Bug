{"sha": "5e2f337e6bc5a1b6bd1cfe0458acb4d5f3ff3c8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMmYzMzdlNmJjNWExYjZiZDFjZmUwNDU4YWNiNGQ1ZjNmZjNjOGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-04T07:30:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-04T07:30:24Z"}, "message": "more comments and justify correctness", "tree": {"sha": "2f6801f8b45c7bde2c349ca7f3ef1b938e37b316", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f6801f8b45c7bde2c349ca7f3ef1b938e37b316"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e2f337e6bc5a1b6bd1cfe0458acb4d5f3ff3c8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e2f337e6bc5a1b6bd1cfe0458acb4d5f3ff3c8b", "html_url": "https://github.com/rust-lang/rust/commit/5e2f337e6bc5a1b6bd1cfe0458acb4d5f3ff3c8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e2f337e6bc5a1b6bd1cfe0458acb4d5f3ff3c8b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "936fa6f67fb9b91c78d8e7eb3fda38d76790f4d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/936fa6f67fb9b91c78d8e7eb3fda38d76790f4d3", "html_url": "https://github.com/rust-lang/rust/commit/936fa6f67fb9b91c78d8e7eb3fda38d76790f4d3"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "357b1bb5033c34f891cf894ab662a999cac1b22c", "filename": "src/librustc_mir/borrow_check/nll/escaping_locals.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5e2f337e6bc5a1b6bd1cfe0458acb4d5f3ff3c8b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fescaping_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2f337e6bc5a1b6bd1cfe0458acb4d5f3ff3c8b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fescaping_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fescaping_locals.rs?ref=5e2f337e6bc5a1b6bd1cfe0458acb4d5f3ff3c8b", "patch": "@@ -173,17 +173,22 @@ impl Visitor<'tcx> for GatherAssignedLocalsVisitor<'_, '_, 'tcx> {\n     ) {\n         let local = find_local_in_place(place);\n \n-        // Conservatively check a subset of `Rvalue`s we know our\n-        // benchmarks track, for example `html5ever`.\n+        // Find those cases where there is a `Place` consumed by\n+        // `rvalue` and we know that all regions in its type will be\n+        // incorporated into `place`, the `Place` we are assigning to.\n         match rvalue {\n+            // `x = y` is the simplest possible case.\n             Rvalue::Use(op) => self.union_locals_if_needed(local, find_local_in_operand(op)),\n+\n+            // `X = &'r P` -- the type of `X` will be `&'r T_P`, where\n+            // `T_P` is the type of `P`.\n             Rvalue::Ref(_, _, place) => {\n                 // Special case: if you have `X = &*Y` (or `X = &**Y`\n                 // etc), then the outlives relationships will ensure\n                 // that all regions in `Y` are constrained by regions\n                 // in `X` -- this is because the lifetimes of the\n                 // references we deref through are required to outlive\n-                // the borrow lifetime (which appears in `X`).\n+                // the borrow lifetime `'r` (which appears in `X`).\n                 //\n                 // (We don't actually need to check the type of `Y`:\n                 // since `ProjectionElem::Deref` represents a built-in\n@@ -204,16 +209,23 @@ impl Visitor<'tcx> for GatherAssignedLocalsVisitor<'_, '_, 'tcx> {\n             }\n \n             Rvalue::Cast(kind, op, _) => match kind {\n-                CastKind::Unsize => self.union_locals_if_needed(local, find_local_in_operand(op)),\n+                CastKind::Unsize => {\n+                    // Casting a `&[T; N]` to `&[T]` or `&Foo` to `&Trait` --\n+                    // in both cases, no regions are \"lost\".\n+                    self.union_locals_if_needed(local, find_local_in_operand(op))\n+                }\n                 _ => (),\n             },\n \n+            // Constructing an aggregate like `(x,)` or `Foo { x }`\n+            // includes the full type of `x`.\n             Rvalue::Aggregate(_, ops) => {\n                 for rvalue in ops.iter().map(find_local_in_operand) {\n                     self.union_locals_if_needed(local, rvalue);\n                 }\n             }\n \n+            // For other things, be conservative and do not union.\n             _ => (),\n         };\n "}]}