{"sha": "c865d3934cbcf5c0d77d955a73711bd3700a57c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NjVkMzkzNGNiY2Y1YzBkNzdkOTU1YTczNzExYmQzNzAwYTU3Yzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-05T02:35:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-05T02:35:25Z"}, "message": "Auto merge of #51938 - zackmdavis:and_the_case_of_the_leaking_desugar, r=estebank\n\nin which we plug the crack where `?`-desugaring leaked into errors\n\nMost of the time, it's not a problem that the types of the arm bodies in\na desugared-from-`?` match are different (that is, specifically: in `x?`\nwhere x is a `Result<A, B>`, the `Ok` arm body is an `A`, whereas the\n`Err` arm diverges to return a `Result<A, B>`), because they're being\nassigned to different places. But in tail position, the types do need to\nmatch, and our error message was explicitly referring to \"match arms\",\nwhich is confusing when there's no `match` in the sweetly sugared\nsource.\n\nIt is not without some misgivings that we pollute the clarity-of-purpose\nof `note_error_origin` with the suggestion to wrap with `Ok` (the other\nbranches are pointing out the odd-arm-out in the HIR that is the origin\nof the error; the new branch that issues the `Ok` suggestion is serving\na different purpose), but it's the natural place to do it given that\nwe're already matching on `ObligationCauseCode::MatchExpressionArm {\narm_span, source }` there.\n\nResolves #51632.", "tree": {"sha": "6109694fb8273758f1d0ac278c61ebf36b6a8afe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6109694fb8273758f1d0ac278c61ebf36b6a8afe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c865d3934cbcf5c0d77d955a73711bd3700a57c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c865d3934cbcf5c0d77d955a73711bd3700a57c7", "html_url": "https://github.com/rust-lang/rust/commit/c865d3934cbcf5c0d77d955a73711bd3700a57c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c865d3934cbcf5c0d77d955a73711bd3700a57c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b51ca20ce52716d8eda4797425faba3960409e13", "url": "https://api.github.com/repos/rust-lang/rust/commits/b51ca20ce52716d8eda4797425faba3960409e13", "html_url": "https://github.com/rust-lang/rust/commit/b51ca20ce52716d8eda4797425faba3960409e13"}, {"sha": "6cc78bf8d76383395e307cef5e601cfe561337e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc78bf8d76383395e307cef5e601cfe561337e6", "html_url": "https://github.com/rust-lang/rust/commit/6cc78bf8d76383395e307cef5e601cfe561337e6"}], "stats": {"total": 84, "additions": 82, "deletions": 2}, "files": [{"sha": "1377176bc7fb8a6a09e3d5cf86cd6ea8ac3fb2ba", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c865d3934cbcf5c0d77d955a73711bd3700a57c7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c865d3934cbcf5c0d77d955a73711bd3700a57c7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c865d3934cbcf5c0d77d955a73711bd3700a57c7", "patch": "@@ -518,7 +518,17 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     } else {\n                         err.span_label(arm_span, msg);\n                     }\n-                }\n+                },\n+                hir::MatchSource::TryDesugar => { // Issue #51632\n+                    if let Ok(try_snippet) = self.tcx.sess.codemap().span_to_snippet(arm_span) {\n+                        err.span_suggestion_with_applicability(\n+                            arm_span,\n+                            \"try wrapping with a success variant\",\n+                            format!(\"Ok({})\", try_snippet),\n+                            Applicability::MachineApplicable\n+                        );\n+                    }\n+                },\n                 _ => {\n                     let msg = \"match arm with an incompatible type\";\n                     if self.tcx.sess.codemap().is_multiline(arm_span) {\n@@ -1312,7 +1322,12 @@ impl<'tcx> ObligationCause<'tcx> {\n         match self.code {\n             CompareImplMethodObligation { .. } => Error0308(\"method not compatible with trait\"),\n             MatchExpressionArm { source, .. } => Error0308(match source {\n-                hir::MatchSource::IfLetDesugar { .. } => \"`if let` arms have incompatible types\",\n+                hir::MatchSource::IfLetDesugar { .. } => {\n+                    \"`if let` arms have incompatible types\"\n+                },\n+                hir::MatchSource::TryDesugar => {\n+                    \"try expression alternatives have incompatible types\"\n+                },\n                 _ => \"match arms have incompatible types\",\n             }),\n             IfExpression => Error0308(\"if and else have incompatible types\"),"}, {"sha": "016cff914bd2d7ad3713cfb5908b35b1c68876f7", "filename": "src/test/ui/issue-51632-try-desugar-incompatible-types.fixed", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c865d3934cbcf5c0d77d955a73711bd3700a57c7/src%2Ftest%2Fui%2Fissue-51632-try-desugar-incompatible-types.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c865d3934cbcf5c0d77d955a73711bd3700a57c7/src%2Ftest%2Fui%2Fissue-51632-try-desugar-incompatible-types.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51632-try-desugar-incompatible-types.fixed?ref=c865d3934cbcf5c0d77d955a73711bd3700a57c7", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+fn missing_discourses() -> Result<isize, ()> {\n+    Ok(1)\n+}\n+\n+fn forbidden_narratives() -> Result<isize, ()> {\n+    Ok(missing_discourses()?)\n+    //~^ ERROR try expression alternatives have incompatible types\n+    //~| HELP try wrapping with a success variant\n+}\n+\n+fn main() {}"}, {"sha": "315773a85f00438c6068fe650ab8e087747812a4", "filename": "src/test/ui/issue-51632-try-desugar-incompatible-types.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c865d3934cbcf5c0d77d955a73711bd3700a57c7/src%2Ftest%2Fui%2Fissue-51632-try-desugar-incompatible-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c865d3934cbcf5c0d77d955a73711bd3700a57c7/src%2Ftest%2Fui%2Fissue-51632-try-desugar-incompatible-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51632-try-desugar-incompatible-types.rs?ref=c865d3934cbcf5c0d77d955a73711bd3700a57c7", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+fn missing_discourses() -> Result<isize, ()> {\n+    Ok(1)\n+}\n+\n+fn forbidden_narratives() -> Result<isize, ()> {\n+    missing_discourses()?\n+    //~^ ERROR try expression alternatives have incompatible types\n+    //~| HELP try wrapping with a success variant\n+}\n+\n+fn main() {}"}, {"sha": "a50af5624c0cf504d656379496e3e71eecd405b9", "filename": "src/test/ui/issue-51632-try-desugar-incompatible-types.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c865d3934cbcf5c0d77d955a73711bd3700a57c7/src%2Ftest%2Fui%2Fissue-51632-try-desugar-incompatible-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c865d3934cbcf5c0d77d955a73711bd3700a57c7/src%2Ftest%2Fui%2Fissue-51632-try-desugar-incompatible-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51632-try-desugar-incompatible-types.stderr?ref=c865d3934cbcf5c0d77d955a73711bd3700a57c7", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: try expression alternatives have incompatible types\n+  --> $DIR/issue-51632-try-desugar-incompatible-types.rs:20:5\n+   |\n+LL |     missing_discourses()?\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     expected enum `std::result::Result`, found isize\n+   |     help: try wrapping with a success variant: `Ok(missing_discourses()?)`\n+   |\n+   = note: expected type `std::result::Result<isize, ()>`\n+              found type `isize`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}