{"sha": "5aee3e01a02e0b31ad225e70899a671937ab65ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZWUzZTAxYTAyZTBiMzFhZDIyNWU3MDg5OWE2NzE5MzdhYjY1ZWU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-19T14:24:22Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-22T13:35:29Z"}, "message": "De-spanned<T> and renamed ast::field (now ast::Field)", "tree": {"sha": "3c56d4a34e9320acf99efd25d0ef35fe25d43835", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c56d4a34e9320acf99efd25d0ef35fe25d43835"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aee3e01a02e0b31ad225e70899a671937ab65ee", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aee3e01a02e0b31ad225e70899a671937ab65ee", "html_url": "https://github.com/rust-lang/rust/commit/5aee3e01a02e0b31ad225e70899a671937ab65ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aee3e01a02e0b31ad225e70899a671937ab65ee/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bd14246227255843e420c3c691ec9a59cea1a9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd14246227255843e420c3c691ec9a59cea1a9f", "html_url": "https://github.com/rust-lang/rust/commit/4bd14246227255843e420c3c691ec9a59cea1a9f"}], "stats": {"total": 113, "additions": 52, "deletions": 61}, "files": [{"sha": "aee8ae32178d23d244ef7d7a515771f9a55d6f0f", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=5aee3e01a02e0b31ad225e70899a671937ab65ee", "patch": "@@ -374,7 +374,7 @@ impl CFGBuilder {\n             ast::expr_struct(_, ref fields, base) => {\n                 let base_exit = self.opt_expr(base, pred);\n                 let field_exprs: ~[@ast::expr] =\n-                    fields.iter().transform(|f| f.node.expr).collect();\n+                    fields.iter().transform(|f| f.expr).collect();\n                 self.straightline(expr, base_exit, field_exprs)\n             }\n "}, {"sha": "59dbc7251da7604f90bd428ae502ab046226c418", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=5aee3e01a02e0b31ad225e70899a671937ab65ee", "patch": "@@ -117,7 +117,7 @@ pub fn classify(e: &expr,\n \n               ast::expr_struct(_, ref fs, None) => {\n                 let cs = do fs.iter().transform |f| {\n-                    classify(f.node.expr, tcx)\n+                    classify(f.expr, tcx)\n                 };\n                 join_all(cs)\n               }"}, {"sha": "2cdae04478ca3be2a96031ce976c948556990c74", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=5aee3e01a02e0b31ad225e70899a671937ab65ee", "patch": "@@ -705,7 +705,7 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n \n             ast::expr_struct(_, ref fields, with_expr) => {\n                 for fields.iter().advance |field| {\n-                    self.walk_expr(field.node.expr, in_out, loop_scopes);\n+                    self.walk_expr(field.expr, in_out, loop_scopes);\n                 }\n                 self.walk_opt_expr(with_expr, in_out, loop_scopes);\n             }"}, {"sha": "f9b42d593c25791160312583ddbabdfb9cd568a5", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=5aee3e01a02e0b31ad225e70899a671937ab65ee", "patch": "@@ -1161,7 +1161,7 @@ impl Liveness {\n           expr_struct(_, ref fields, with_expr) => {\n             let succ = self.propagate_through_opt_expr(with_expr, succ);\n             do fields.rev_iter().fold(succ) |succ, field| {\n-                self.propagate_through_expr(field.node.expr, succ)\n+                self.propagate_through_expr(field.expr, succ)\n             }\n           }\n "}, {"sha": "d8ce0a966363103e68cab4880559c208cdc97c23", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=5aee3e01a02e0b31ad225e70899a671937ab65ee", "patch": "@@ -394,7 +394,7 @@ impl VisitContext {\n \n             expr_struct(_, ref fields, opt_with) => {\n                 for fields.iter().advance |field| {\n-                    self.consume_expr(field.node.expr, visitor);\n+                    self.consume_expr(field.expr, visitor);\n                 }\n \n                 for opt_with.iter().advance |with_expr| {\n@@ -417,7 +417,7 @@ impl VisitContext {\n                     // specified and (2) have a type that\n                     // moves-by-default:\n                     let consume_with = with_fields.iter().any(|tf| {\n-                        !fields.iter().any(|f| f.node.ident == tf.ident) &&\n+                        !fields.iter().any(|f| f.ident == tf.ident) &&\n                             ty::type_moves_by_default(self.tcx, tf.mt.ty)\n                     });\n "}, {"sha": "1ea32b3f4046996da86288eefdaaf0a5d40d6524", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=5aee3e01a02e0b31ad225e70899a671937ab65ee", "patch": "@@ -413,9 +413,7 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n                                 Some(ref entry) => {\n                                     debug!(\"(privacy checking) checking \\\n                                             impl method\");\n-                                    check_method(expr.span,\n-                                                 &entry.origin,\n-                                                 ident);\n+                                    check_method(expr.span, &entry.origin, ident);\n                                 }\n                             }\n                         }\n@@ -433,8 +431,7 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n                                 for (*fields).iter().advance |field| {\n                                         debug!(\"(privacy checking) checking \\\n                                                 field in struct literal\");\n-                                    check_field(expr.span, id,\n-                                                field.node.ident);\n+                                    check_field(expr.span, id, field.ident);\n                                 }\n                             }\n                         }\n@@ -448,8 +445,7 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n                                                         checking field in \\\n                                                         struct variant \\\n                                                         literal\");\n-                                            check_field(expr.span, variant_id,\n-                                                        field.node.ident);\n+                                            check_field(expr.span, variant_id, field.ident);\n                                         }\n                                     }\n                                     _ => {\n@@ -499,8 +495,7 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n                                 for fields.iter().advance |field| {\n                                         debug!(\"(privacy checking) checking \\\n                                                 struct pattern\");\n-                                    check_field(pattern.span, id,\n-                                                field.ident);\n+                                    check_field(pattern.span, id, field.ident);\n                                 }\n                             }\n                         }\n@@ -513,9 +508,7 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n                                             debug!(\"(privacy checking) \\\n                                                     checking field in \\\n                                                     struct variant pattern\");\n-                                            check_field(pattern.span,\n-                                                        variant_id,\n-                                                        field.ident);\n+                                            check_field(pattern.span, variant_id, field.ident);\n                                         }\n                                     }\n                                     _ => {"}, {"sha": "9246ca1f6410b430b40353c1ebcd8fec4a301865", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=5aee3e01a02e0b31ad225e70899a671937ab65ee", "patch": "@@ -488,8 +488,8 @@ fn const_expr_unadjusted(cx: @mut CrateContext, e: &ast::expr) -> ValueRef {\n               do expr::with_field_tys(tcx, ety, Some(e.id))\n                   |discr, field_tys| {\n                   let cs = field_tys.map(|field_ty| {\n-                      match fs.iter().find_(|f| field_ty.ident == f.node.ident) {\n-                          Some(f) => const_expr(cx, (*f).node.expr),\n+                      match fs.iter().find_(|f| field_ty.ident == f.ident) {\n+                          Some(f) => const_expr(cx, (*f).expr),\n                           None => {\n                               cx.tcx.sess.span_bug(e.span, \"missing struct field\");\n                           }"}, {"sha": "d9fdf8d52c7dc107b527453f94c2252df874a1d5", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=5aee3e01a02e0b31ad225e70899a671937ab65ee", "patch": "@@ -1124,7 +1124,7 @@ pub fn with_field_tys<R>(tcx: ty::ctxt,\n }\n \n fn trans_rec_or_struct(bcx: block,\n-                       fields: &[ast::field],\n+                       fields: &[ast::Field],\n                        base: Option<@ast::expr>,\n                        expr_span: codemap::span,\n                        id: ast::node_id,\n@@ -1139,11 +1139,11 @@ fn trans_rec_or_struct(bcx: block,\n         let mut need_base = vec::from_elem(field_tys.len(), true);\n \n         let numbered_fields = do fields.map |field| {\n-            let opt_pos = field_tys.iter().position(|field_ty| field_ty.ident == field.node.ident);\n+            let opt_pos = field_tys.iter().position(|field_ty| field_ty.ident == field.ident);\n             match opt_pos {\n                 Some(i) => {\n                     need_base[i] = false;\n-                    (i, field.node.expr)\n+                    (i, field.expr)\n                 }\n                 None => {\n                     tcx.sess.span_bug(field.span,"}, {"sha": "c04e1c2515cc533d155b48639e64dc82a398e110", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=5aee3e01a02e0b31ad225e70899a671937ab65ee", "patch": "@@ -1872,7 +1872,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                                       node_id: ast::node_id,\n                                       substitutions: ty::substs,\n                                       field_types: &[ty::field_ty],\n-                                      ast_fields: &[ast::field],\n+                                      ast_fields: &[ast::Field],\n                                       check_completeness: bool)  {\n         let tcx = fcx.ccx.tcx;\n \n@@ -1888,37 +1888,37 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         for ast_fields.iter().advance |field| {\n             let mut expected_field_type = ty::mk_err();\n \n-            let pair = class_field_map.find(&field.node.ident).\n+            let pair = class_field_map.find(&field.ident).\n                                        map_consume(|x| *x);\n             match pair {\n                 None => {\n                     tcx.sess.span_err(\n                         field.span,\n                         fmt!(\"structure has no field named `%s`\",\n-                             tcx.sess.str_of(field.node.ident)));\n+                             tcx.sess.str_of(field.ident)));\n                     error_happened = true;\n                 }\n                 Some((_, true)) => {\n                     tcx.sess.span_err(\n                         field.span,\n                         fmt!(\"field `%s` specified more than once\",\n-                             tcx.sess.str_of(field.node.ident)));\n+                             tcx.sess.str_of(field.ident)));\n                     error_happened = true;\n                 }\n                 Some((field_id, false)) => {\n                     expected_field_type =\n                         ty::lookup_field_type(\n                             tcx, class_id, field_id, &substitutions);\n                     class_field_map.insert(\n-                        field.node.ident, (field_id, true));\n+                        field.ident, (field_id, true));\n                     fields_found += 1;\n                 }\n             }\n             // Make sure to give a type to the field even if there's\n             // an error, so we can continue typechecking\n             check_expr_coercable_to_type(\n                     fcx,\n-                    field.node.expr,\n+                    field.expr,\n                     expected_field_type);\n         }\n \n@@ -1961,7 +1961,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                                 id: ast::node_id,\n                                 span: codemap::span,\n                                 class_id: ast::def_id,\n-                                fields: &[ast::field],\n+                                fields: &[ast::Field],\n                                 base_expr: Option<@ast::expr>) {\n         let tcx = fcx.ccx.tcx;\n \n@@ -2051,7 +2051,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                                  span: codemap::span,\n                                  enum_id: ast::def_id,\n                                  variant_id: ast::def_id,\n-                                 fields: &[ast::field]) {\n+                                 fields: &[ast::Field]) {\n         let tcx = fcx.ccx.tcx;\n \n         // Look up the number of type parameters and the raw type, and"}, {"sha": "733e8093a9d706788e76c7b34b0019c674ddf00c", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=5aee3e01a02e0b31ad225e70899a671937ab65ee", "patch": "@@ -54,10 +54,10 @@ pub fn indenter() -> _indenter {\n     _indenter(())\n }\n \n-pub fn field_expr(f: ast::field) -> @ast::expr { return f.node.expr; }\n+pub fn field_expr(f: ast::Field) -> @ast::expr { return f.expr; }\n \n-pub fn field_exprs(fields: ~[ast::field]) -> ~[@ast::expr] {\n-    fields.map(|f| f.node.expr)\n+pub fn field_exprs(fields: ~[ast::Field]) -> ~[@ast::expr] {\n+    fields.map(|f| f.expr)\n }\n \n // Takes a predicate p, returns true iff p is true for any subexpressions"}, {"sha": "95691c334b137962658c69c1bb320e59af6f9744", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5aee3e01a02e0b31ad225e70899a671937ab65ee", "patch": "@@ -409,13 +409,12 @@ pub struct arm {\n }\n \n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n-pub struct field_ {\n+pub struct Field {\n     ident: ident,\n     expr: @expr,\n+    span: span,\n }\n \n-pub type field = spanned<field_>;\n-\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub enum blk_check_mode {\n     default_blk,\n@@ -495,7 +494,7 @@ pub enum expr_ {\n     expr_mac(mac),\n \n     // A struct literal expression.\n-    expr_struct(Path, ~[field], Option<@expr>),\n+    expr_struct(Path, ~[Field], Option<@expr>),\n \n     // A vector literal constructed from one repeated element.\n     expr_repeat(@expr /* element */, @expr /* count */, mutability),"}, {"sha": "b3d65dfa9e2fa93e0a74e0db6a8fb8f72832c540", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=5aee3e01a02e0b31ad225e70899a671937ab65ee", "patch": "@@ -107,9 +107,9 @@ pub trait AstBuilder {\n                         args: ~[@ast::expr]) -> @ast::expr;\n     fn expr_blk(&self, b: ast::Block) -> @ast::expr;\n \n-    fn field_imm(&self, span: span, name: ident, e: @ast::expr) -> ast::field;\n-    fn expr_struct(&self, span: span, path: ast::Path, fields: ~[ast::field]) -> @ast::expr;\n-    fn expr_struct_ident(&self, span: span, id: ast::ident, fields: ~[ast::field]) -> @ast::expr;\n+    fn field_imm(&self, span: span, name: ident, e: @ast::expr) -> ast::Field;\n+    fn expr_struct(&self, span: span, path: ast::Path, fields: ~[ast::Field]) -> @ast::expr;\n+    fn expr_struct_ident(&self, span: span, id: ast::ident, fields: ~[ast::Field]) -> @ast::expr;\n \n     fn expr_lit(&self, sp: span, lit: ast::lit_) -> @ast::expr;\n \n@@ -477,14 +477,14 @@ impl AstBuilder for @ExtCtxt {\n     fn expr_blk(&self, b: ast::Block) -> @ast::expr {\n         self.expr(b.span, ast::expr_block(b))\n     }\n-    fn field_imm(&self, span: span, name: ident, e: @ast::expr) -> ast::field {\n-        respan(span, ast::field_ { ident: name, expr: e })\n+    fn field_imm(&self, span: span, name: ident, e: @ast::expr) -> ast::Field {\n+        ast::Field { ident: name, expr: e, span: span }\n     }\n-    fn expr_struct(&self, span: span, path: ast::Path, fields: ~[ast::field]) -> @ast::expr {\n+    fn expr_struct(&self, span: span, path: ast::Path, fields: ~[ast::Field]) -> @ast::expr {\n         self.expr(span, ast::expr_struct(path, fields, None))\n     }\n     fn expr_struct_ident(&self, span: span,\n-                         id: ast::ident, fields: ~[ast::field]) -> @ast::expr {\n+                         id: ast::ident, fields: ~[ast::Field]) -> @ast::expr {\n         self.expr_struct(span, self.path_ident(span, id), fields)\n     }\n "}, {"sha": "f27e68641e3af6d0b9ae7b1d6e1df3c68063aa9e", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=5aee3e01a02e0b31ad225e70899a671937ab65ee", "patch": "@@ -488,12 +488,10 @@ pub fn wrap<T>(f: @fn(&T, @ast_fold) -> T)\n }\n \n pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n-    fn fold_field_(field: field, fld: @ast_fold) -> field {\n-        spanned {\n-            node: ast::field_ {\n-                ident: fld.fold_ident(field.node.ident),\n-                expr: fld.fold_expr(field.node.expr),\n-            },\n+    fn fold_field_(field: Field, fld: @ast_fold) -> Field {\n+        ast::Field {\n+            ident: fld.fold_ident(field.ident),\n+            expr: fld.fold_expr(field.expr),\n             span: fld.new_span(field.span),\n         }\n     }"}, {"sha": "a4fd4929400a8f44d5a2578b3eeed4bba8a449d4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5aee3e01a02e0b31ad225e70899a671937ab65ee", "patch": "@@ -29,7 +29,7 @@ use ast::{expr_method_call, expr_paren, expr_path, expr_repeat};\n use ast::{expr_ret, expr_self, expr_struct, expr_tup, expr_unary};\n use ast::{expr_vec, expr_vstore, expr_vstore_mut_box};\n use ast::{expr_vstore_slice, expr_vstore_box};\n-use ast::{expr_vstore_mut_slice, expr_while, extern_fn, field, fn_decl};\n+use ast::{expr_vstore_mut_slice, expr_while, extern_fn, Field, fn_decl};\n use ast::{expr_vstore_uniq, Onceness, Once, Many};\n use ast::{foreign_item, foreign_item_static, foreign_item_fn, foreign_mod};\n use ast::{ident, impure_fn, inherited, item, item_, item_static};\n@@ -1498,15 +1498,16 @@ impl Parser {\n     }\n \n     // parse ident COLON expr\n-    pub fn parse_field(&self) -> field {\n+    pub fn parse_field(&self) -> Field {\n         let lo = self.span.lo;\n         let i = self.parse_ident();\n         self.expect(&token::COLON);\n         let e = self.parse_expr();\n-        spanned(lo, e.span.hi, ast::field_ {\n+        ast::Field {\n             ident: i,\n-            expr: e\n-        })\n+            expr: e,\n+            span: mk_sp(lo, e.span.hi),\n+        }\n     }\n \n     pub fn mk_expr(&self, lo: BytePos, hi: BytePos, node: expr_) -> @expr {"}, {"sha": "8e2c24cacfed794839061f575f2e458e53f7d7c5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5aee3e01a02e0b31ad225e70899a671937ab65ee", "patch": "@@ -1103,14 +1103,14 @@ pub fn print_call_post(s: @ps,\n }\n \n pub fn print_expr(s: @ps, expr: &ast::expr) {\n-    fn print_field(s: @ps, field: &ast::field) {\n+    fn print_field(s: @ps, field: &ast::Field) {\n         ibox(s, indent_unit);\n-        print_ident(s, field.node.ident);\n+        print_ident(s, field.ident);\n         word_space(s, \":\");\n-        print_expr(s, field.node.expr);\n+        print_expr(s, field.expr);\n         end(s);\n     }\n-    fn get_span(field: &ast::field) -> codemap::span { return field.span; }\n+    fn get_span(field: &ast::Field) -> codemap::span { return field.span; }\n \n     maybe_print_comment(s, expr.span.lo);\n     ibox(s, indent_unit);"}, {"sha": "7e86adfcb6306f33112e007a5dfb21bb9ac38d0c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee3e01a02e0b31ad225e70899a671937ab65ee/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=5aee3e01a02e0b31ad225e70899a671937ab65ee", "patch": "@@ -474,7 +474,7 @@ pub fn visit_expr<E:Clone>(ex: @expr, (e, v): (E, vt<E>)) {\n         expr_struct(ref p, ref flds, base) => {\n             visit_path(p, (e.clone(), v));\n             for flds.iter().advance |f| {\n-                (v.visit_expr)(f.node.expr, (e.clone(), v));\n+                (v.visit_expr)(f.expr, (e.clone(), v));\n             }\n             visit_expr_opt(base, (e.clone(), v));\n         }"}]}