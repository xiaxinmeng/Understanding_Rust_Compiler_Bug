{"sha": "b71340552fa0caa870877f87a1273e8d4c91efe6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MTM0MDU1MmZhMGNhYTg3MDg3N2Y4N2ExMjczZThkNGM5MWVmZTY=", "commit": {"author": {"name": "Jeffrey Yasskin", "email": "jyasskin@gmail.com", "date": "2010-08-09T02:24:35Z"}, "committer": {"name": "Jeffrey Yasskin", "email": "jyasskin@gmail.com", "date": "2010-08-09T09:43:16Z"}, "message": "Add names to tasks and domains.  These can either be an explicit literal string\nafter the \"spawn\" keyword, or implicitly the call expression used to start the\nspawn.", "tree": {"sha": "a1a1883cded2c8541a817d41d91c2002a926207b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1a1883cded2c8541a817d41d91c2002a926207b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b71340552fa0caa870877f87a1273e8d4c91efe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b71340552fa0caa870877f87a1273e8d4c91efe6", "html_url": "https://github.com/rust-lang/rust/commit/b71340552fa0caa870877f87a1273e8d4c91efe6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b71340552fa0caa870877f87a1273e8d4c91efe6/comments", "author": {"login": "jyasskin", "id": 83420, "node_id": "MDQ6VXNlcjgzNDIw", "avatar_url": "https://avatars.githubusercontent.com/u/83420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyasskin", "html_url": "https://github.com/jyasskin", "followers_url": "https://api.github.com/users/jyasskin/followers", "following_url": "https://api.github.com/users/jyasskin/following{/other_user}", "gists_url": "https://api.github.com/users/jyasskin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyasskin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyasskin/subscriptions", "organizations_url": "https://api.github.com/users/jyasskin/orgs", "repos_url": "https://api.github.com/users/jyasskin/repos", "events_url": "https://api.github.com/users/jyasskin/events{/privacy}", "received_events_url": "https://api.github.com/users/jyasskin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyasskin", "id": 83420, "node_id": "MDQ6VXNlcjgzNDIw", "avatar_url": "https://avatars.githubusercontent.com/u/83420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyasskin", "html_url": "https://github.com/jyasskin", "followers_url": "https://api.github.com/users/jyasskin/followers", "following_url": "https://api.github.com/users/jyasskin/following{/other_user}", "gists_url": "https://api.github.com/users/jyasskin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyasskin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyasskin/subscriptions", "organizations_url": "https://api.github.com/users/jyasskin/orgs", "repos_url": "https://api.github.com/users/jyasskin/repos", "events_url": "https://api.github.com/users/jyasskin/events{/privacy}", "received_events_url": "https://api.github.com/users/jyasskin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df75a968c56935cca1c1482a8703eca82c607c62", "url": "https://api.github.com/repos/rust-lang/rust/commits/df75a968c56935cca1c1482a8703eca82c607c62", "html_url": "https://github.com/rust-lang/rust/commit/df75a968c56935cca1c1482a8703eca82c607c62"}], "stats": {"total": 246, "additions": 151, "deletions": 95}, "files": [{"sha": "63181f8846ac6c1e2292a76358d35db25bfd61a9", "filename": "doc/rust.texi", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b71340552fa0caa870877f87a1273e8d4c91efe6/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/b71340552fa0caa870877f87a1273e8d4c91efe6/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=b71340552fa0caa870877f87a1273e8d4c91efe6", "patch": "@@ -2822,12 +2822,15 @@ x.y = z + 2;\n @c * Ref.Stmt.Spawn::               Statements creating new tasks.\n @cindex Spawn statement\n \n-A @code{spawn} statement consists of keyword @code{spawn}, followed by a\n-normal @emph{call} statement (@pxref{Ref.Stmt.Call}).  A @code{spawn}\n-statement causes the runtime to construct a new task executing the called\n-function.  The called function is referred to as the @dfn{entry function} for\n-the spawned task, and its arguments are copied from the spawning task to the\n-spawned task before the spawned task begins execution.\n+A @code{spawn} statement consists of keyword @code{spawn}, followed by\n+an optional literal string naming the new task and then a normal\n+@emph{call} statement (@pxref{Ref.Stmt.Call}).  A @code{spawn}\n+statement causes the runtime to construct a new task executing the\n+called function with the given name.  The called function is referred\n+to as the @dfn{entry function} for the spawned task, and its arguments\n+are copied from the spawning task to the spawned task before the\n+spawned task begins execution.  If no explicit name is present, the\n+task is implicitly named with the string of the call statement.\n \n Functions taking alias-slot arguments, or returning non-nil values, cannot be\n spawned. Iterators cannot be spawned.\n@@ -2843,6 +2846,7 @@ fn helper(chan[u8] out) @{\n \n let port[u8] out;\n let task p = spawn helper(chan(out));\n+let task p2 = spawn \"my_helper\" helper(chan(out));\n // let task run, do other things.\n auto result <- out;\n "}, {"sha": "8fc952a5150a9f98a10afab5e2ba96ce73695b6f", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=b71340552fa0caa870877f87a1273e8d4c91efe6", "patch": "@@ -199,7 +199,7 @@ and tup_input = (mutability * atom)\n and stmt' =\n \n   (* lval-assigning stmts. *)\n-    STMT_spawn of (lval * domain * lval * (atom array))\n+    STMT_spawn of (lval * domain * string * lval * (atom array))\n   | STMT_new_rec of (lval * (rec_input array) * lval option)\n   | STMT_new_tup of (lval * (tup_input array))\n   | STMT_new_vec of (lval * mutability * atom array)\n@@ -936,10 +936,11 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n             fmt ff \";\"\n           end\n \n-      | STMT_spawn (dst, domain, fn, args) ->\n+      | STMT_spawn (dst, domain, name, fn, args) ->\n           fmt_lval ff dst;\n           fmt ff \" = spawn \";\n           fmt_domain ff domain;\n+          fmt_str ff (\"\\\"\" ^ name ^ \"\\\"\");\n           fmt_lval ff fn;\n           fmt_atoms ff args;\n           fmt ff \";\";"}, {"sha": "75983c7f8377e208e413db8a8b92addbc9e618c8", "filename": "src/boot/fe/pexp.ml", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Ffe%2Fpexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Ffe%2Fpexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fpexp.ml?ref=b71340552fa0caa870877f87a1273e8d4c91efe6", "patch": "@@ -18,7 +18,7 @@ open Parser;;\n \n type pexp' =\n     PEXP_call of (pexp * pexp array)\n-  | PEXP_spawn of (Ast.domain * pexp)\n+  | PEXP_spawn of (Ast.domain * string * pexp)\n   | PEXP_bind of (pexp * pexp option array)\n   | PEXP_rec of ((Ast.ident * Ast.mutability * pexp) array * pexp option)\n   | PEXP_tup of ((Ast.mutability * pexp) array)\n@@ -558,9 +558,27 @@ and parse_bottom_pexp (ps:pstate) : pexp =\n               THREAD -> bump ps; Ast.DOMAIN_thread\n             | _ -> Ast.DOMAIN_local\n         in\n-        let pexp = ctxt \"spawn [domain] pexp: init call\" parse_pexp ps in\n+          (* Spawns either have an explicit literal string for the spawned\n+             task's name, or the task is named as the entry call\n+             expression. *)\n+        let explicit_name =\n+          match peek ps with\n+              LIT_STR s -> bump ps; Some s\n+            | _ -> None\n+        in\n+        let pexp =\n+          ctxt \"spawn [domain] [name] pexp: init call\" parse_pexp ps\n+        in\n         let bpos = lexpos ps in\n-          span ps apos bpos (PEXP_spawn (domain, pexp))\n+        let name =\n+          match explicit_name with\n+              Some s -> s\n+                (* FIXME: string_of_span returns a string like\n+                   \"./driver.rs:10:16 - 11:52\", not the actual text at those\n+                   characters *)\n+            | None -> Session.string_of_span { lo = apos; hi = bpos }\n+        in\n+          span ps apos bpos (PEXP_spawn (domain, name, pexp))\n \n     | BIND ->\n         let apos = lexpos ps in\n@@ -1183,15 +1201,16 @@ and desugar_expr_init\n           let bind_stmt = ss (Ast.STMT_bind (dst_lval, fn_lval, arg_atoms)) in\n             ac [ fn_stmts; arg_stmts; [| bind_stmt |] ]\n \n-      | PEXP_spawn (domain, sub) ->\n+      | PEXP_spawn (domain, name, sub) ->\n           begin\n             match sub.node with\n                 PEXP_call (fn, args) ->\n                   let (fn_stmts, fn_atom) = desugar_expr_atom ps fn in\n                   let (arg_stmts, arg_atoms) = desugar_expr_atoms ps args in\n                   let fn_lval = atom_lval ps fn_atom in\n                   let spawn_stmt =\n-                    ss (Ast.STMT_spawn (dst_lval, domain, fn_lval, arg_atoms))\n+                    ss (Ast.STMT_spawn\n+                          (dst_lval, domain, name, fn_lval, arg_atoms))\n                   in\n                     ac [ fn_stmts; arg_stmts; [| spawn_stmt |] ]\n               | _ -> raise (err \"non-call spawn\" ps)"}, {"sha": "275753241718af10e17d83873564d96ad66e05be", "filename": "src/boot/me/alias.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Fme%2Falias.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Fme%2Falias.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Falias.ml?ref=b71340552fa0caa870877f87a1273e8d4c91efe6", "patch": "@@ -59,7 +59,7 @@ let alias_analysis_visitor\n              * survive 'into' a sub-block (those formed during iteration)\n              * need to be handled in this module.  *)\n             Ast.STMT_call (dst, callee, args)\n-          | Ast.STMT_spawn (dst, _, callee, args)\n+          | Ast.STMT_spawn (dst, _, _, callee, args)\n             -> alias_call_args dst callee args\n \n           | Ast.STMT_send (_, src) -> alias src"}, {"sha": "73797409d31ff3fb4a9abc5035a90e612974a081", "filename": "src/boot/me/effect.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Fme%2Feffect.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Fme%2Feffect.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Feffect.ml?ref=b71340552fa0caa870877f87a1273e8d4c91efe6", "patch": "@@ -62,7 +62,7 @@ let mutability_checking_visitor\n       match s.node with\n             Ast.STMT_copy (lv_dst, _)\n           | Ast.STMT_call (lv_dst, _, _)\n-          | Ast.STMT_spawn (lv_dst, _, _, _)\n+          | Ast.STMT_spawn (lv_dst, _, _, _, _)\n           | Ast.STMT_recv (lv_dst, _)\n           | Ast.STMT_bind (lv_dst, _, _)\n           | Ast.STMT_new_rec (lv_dst, _, _)"}, {"sha": "1df37f0f9e2b4a9163511411e99390ca3b0d6930", "filename": "src/boot/me/layout.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Fme%2Flayout.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Fme%2Flayout.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Flayout.ml?ref=b71340552fa0caa870877f87a1273e8d4c91efe6", "patch": "@@ -400,7 +400,7 @@ let layout_visitor\n       let callees =\n         match s.node with\n             Ast.STMT_call (_, lv, _)\n-          | Ast.STMT_spawn (_, _, lv, _) -> [| lv |]\n+          | Ast.STMT_spawn (_, _, _, lv, _) -> [| lv |]\n           | Ast.STMT_check (_, calls) -> Array.map (fun (lv, _) -> lv) calls\n           | _ -> [| |]\n       in"}, {"sha": "01a89c56588678502a93b2cc6fabf171ae162787", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=b71340552fa0caa870877f87a1273e8d4c91efe6", "patch": "@@ -2128,10 +2128,12 @@ let trans_visitor\n       ((*initializing*)_:bool)\n       (dst:Ast.lval)\n       (domain:Ast.domain)\n+      (name:string)\n       (fn_lval:Ast.lval)\n       (args:Ast.atom array)\n       : unit =\n     let (task_cell, _) = trans_lval_init dst in\n+    let runtime_name = trans_static_string name in\n     let (fptr_operand, fn_ty) = trans_callee fn_lval in\n     (*let fn_ty_params = [| |] in*)\n     let _ =\n@@ -2165,7 +2167,7 @@ let trans_visitor\n         match domain with\n             Ast.DOMAIN_thread ->\n               begin\n-                trans_upcall \"upcall_new_thread\" new_task [| |];\n+                trans_upcall \"upcall_new_thread\" new_task [| runtime_name |];\n                 copy_fn_args false true (CLONE_all new_task) call;\n                 trans_upcall \"upcall_start_thread\" task_cell\n                   [|\n@@ -2177,7 +2179,7 @@ let trans_visitor\n             end\n          | _ ->\n              begin\n-                 trans_upcall \"upcall_new_task\" new_task [| |];\n+                 trans_upcall \"upcall_new_task\" new_task [| runtime_name |];\n                  copy_fn_args false true (CLONE_chan new_task) call;\n                  trans_upcall \"upcall_start_task\" task_cell\n                    [|\n@@ -4496,8 +4498,9 @@ let trans_visitor\n       | Ast.STMT_send (chan,src) ->\n           trans_send chan src\n \n-      | Ast.STMT_spawn (dst, domain, plv, args) ->\n-          trans_spawn (maybe_init stmt.id \"spawn\" dst) dst domain plv args\n+      | Ast.STMT_spawn (dst, domain, name, plv, args) ->\n+          trans_spawn (maybe_init stmt.id \"spawn\" dst) dst\n+            domain name plv args\n \n       | Ast.STMT_recv (dst, chan) ->\n           trans_recv (maybe_init stmt.id \"recv\" dst) dst chan"}, {"sha": "b2d5a6221d03a9fa9bad062f717c823b348a6df4", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=b71340552fa0caa870877f87a1273e8d4c91efe6", "patch": "@@ -692,7 +692,7 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n     and check_stmt (stmt:Ast.stmt) : unit =\n       check_ret stmt;\n       match stmt.Common.node with\n-          Ast.STMT_spawn (dst, _, callee, args) ->\n+          Ast.STMT_spawn (dst, _, _, callee, args) ->\n             infer_lval Ast.TY_task dst;\n             demand Ast.TY_nil (check_fn callee args)\n "}, {"sha": "207029909defc702e3f6d235093baa966bcf4532", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=b71340552fa0caa870877f87a1273e8d4c91efe6", "patch": "@@ -664,7 +664,7 @@ let condition_assigning_visitor\n             let precond = Array.append dst_init src_init in\n               raise_pre_post_cond s.id precond;\n \n-        | Ast.STMT_spawn (dst, _, lv, args)\n+        | Ast.STMT_spawn (dst, _, _, lv, args)\n         | Ast.STMT_call (dst, lv, args) ->\n             raise_dst_init_precond_if_writing_through s.id dst;\n             visit_callable_pre s.id (lval_slots cx dst) lv args\n@@ -1350,7 +1350,7 @@ let lifecycle_visitor\n         match s.node with\n             Ast.STMT_copy (lv_dst, _)\n           | Ast.STMT_call (lv_dst, _, _)\n-          | Ast.STMT_spawn (lv_dst, _, _, _)\n+          | Ast.STMT_spawn (lv_dst, _, _, _, _)\n           | Ast.STMT_recv (lv_dst, _)\n           | Ast.STMT_bind (lv_dst, _, _)\n           | Ast.STMT_new_rec (lv_dst, _, _)"}, {"sha": "cadfd66b9678428d0c748355b509fca28a249ce0", "filename": "src/boot/me/walk.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Fme%2Fwalk.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Fboot%2Fme%2Fwalk.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fwalk.ml?ref=b71340552fa0caa870877f87a1273e8d4c91efe6", "patch": "@@ -451,7 +451,7 @@ and walk_stmt\n           walk_lval v f;\n           Array.iter (walk_opt_atom v) az\n \n-      | Ast.STMT_spawn (dst,_,p,az) ->\n+      | Ast.STMT_spawn (dst,_,_,p,az) ->\n           walk_lval v dst;\n           walk_lval v p;\n           Array.iter (walk_atom v) az"}, {"sha": "82a19cbcd84d8d0ddd7e98c55018145303556194", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=b71340552fa0caa870877f87a1273e8d4c91efe6", "patch": "@@ -182,7 +182,7 @@ rust_start(uintptr_t main_fn, rust_crate const *crate, int argc, char **argv)\n     int ret;\n     {\n         rust_srv srv;\n-        rust_dom dom(&srv, crate);\n+        rust_dom dom(&srv, crate, \"main\");\n         command_line_args args(dom, argc, argv);\n \n         dom.log(rust_log::DOM, \"startup: %d args\", args.argc);"}, {"sha": "004a10275e46d1cbac83654f54d2cc57d64fae57", "filename": "src/rt/rust_dom.cpp", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Frt%2Frust_dom.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Frt%2Frust_dom.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.cpp?ref=b71340552fa0caa870877f87a1273e8d4c91efe6", "patch": "@@ -5,11 +5,13 @@\n template class ptr_vec<rust_task>;\n \n \n-rust_dom::rust_dom(rust_srv *srv, rust_crate const *root_crate) :\n+rust_dom::rust_dom(rust_srv *srv, rust_crate const *root_crate,\n+                   const char *name) :\n     interrupt_flag(0),\n     root_crate(root_crate),\n     _log(srv, this),\n     srv(srv),\n+    name(name),\n     running_tasks(this),\n     blocked_tasks(this),\n     dead_tasks(this),\n@@ -25,7 +27,7 @@ rust_dom::rust_dom(rust_srv *srv, rust_crate const *root_crate) :\n     pthread_attr_setstacksize(&attr, 1024 * 1024);\n     pthread_attr_setdetachstate(&attr, true);\n #endif\n-    root_task = new (this) rust_task(this, NULL);\n+    root_task = new (this) rust_task(this, NULL, name);\n }\n \n static void\n@@ -42,23 +44,25 @@ rust_dom::delete_proxies() {\n     rust_task *task;\n     rust_proxy<rust_task> *task_proxy;\n     while (_task_proxies.pop(&task, &task_proxy)) {\n-        log(rust_log::TASK, \"deleting proxy %\" PRIxPTR\n-                            \" in dom %\" PRIxPTR, task_proxy, task_proxy->dom);\n+        log(rust_log::TASK,\n+            \"deleting proxy %\" PRIxPTR \" in dom %s @0x%\" PRIxPTR,\n+            task_proxy, task_proxy->dom->name, task_proxy->dom);\n         delete task_proxy;\n     }\n \n     rust_port *port;\n     rust_proxy<rust_port> *port_proxy;\n     while (_port_proxies.pop(&port, &port_proxy)) {\n-        log(rust_log::TASK, \"deleting proxy %\" PRIxPTR\n-                            \" in dom %\" PRIxPTR, port_proxy, port_proxy->dom);\n+        log(rust_log::TASK,\n+            \"deleting proxy %\" PRIxPTR \" in dom %s @0x%\" PRIxPTR,\n+            port_proxy, port_proxy->dom->name, port_proxy->dom);\n         delete port_proxy;\n     }\n }\n \n rust_dom::~rust_dom() {\n     log(rust_log::MEM | rust_log::DOM,\n-             \"~rust_dom 0x%\" PRIxPTR, (uintptr_t)this);\n+        \"~rust_dom %s @0x%\" PRIxPTR, name, (uintptr_t)this);\n \n     log(rust_log::TASK, \"deleting all proxies\");\n     delete_proxies();\n@@ -124,7 +128,8 @@ rust_dom::logptr(char const *msg, T* ptrval) {\n \n void\n rust_dom::fail() {\n-    log(rust_log::DOM, \"domain 0x%\" PRIxPTR \" root task failed\", this);\n+    log(rust_log::DOM, \"domain %s @0x%\" PRIxPTR \" root task failed\",\n+        name, this);\n     I(this, rval == 0);\n     rval = 1;\n }\n@@ -133,8 +138,9 @@ void *\n rust_dom::malloc(size_t sz) {\n     void *p = srv->malloc(sz);\n     I(this, p);\n-    log(rust_log::MEM, \"0x%\" PRIxPTR \" rust_dom::malloc(%d) -> 0x%\" PRIxPTR,\n-        (uintptr_t) this, sz, p);\n+    log(rust_log::MEM,\n+        \"%s @0x%\" PRIxPTR \" rust_dom::malloc(%d) -> 0x%\" PRIxPTR,\n+        name, (uintptr_t) this, sz, p);\n     return p;\n }\n \n@@ -190,8 +196,8 @@ void\n rust_dom::add_task_to_state_vec(ptr_vec<rust_task> *v, rust_task *task)\n {\n     log(rust_log::MEM|rust_log::TASK,\n-        \"adding task 0x%\" PRIxPTR \" in state '%s' to vec 0x%\" PRIxPTR,\n-        (uintptr_t)task, state_vec_name(v), (uintptr_t)v);\n+        \"adding task %s @0x%\" PRIxPTR \" in state '%s' to vec 0x%\" PRIxPTR,\n+        task->name, (uintptr_t)task, state_vec_name(v), (uintptr_t)v);\n     v->push(task);\n }\n \n@@ -200,8 +206,8 @@ void\n rust_dom::remove_task_from_state_vec(ptr_vec<rust_task> *v, rust_task *task)\n {\n     log(rust_log::MEM|rust_log::TASK,\n-        \"removing task 0x%\" PRIxPTR \" in state '%s' from vec 0x%\" PRIxPTR,\n-        (uintptr_t)task, state_vec_name(v), (uintptr_t)v);\n+        \"removing task %s @0x%\" PRIxPTR \" in state '%s' from vec 0x%\" PRIxPTR,\n+        task->name, (uintptr_t)task, state_vec_name(v), (uintptr_t)v);\n     I(this, (*v)[task->idx] == task);\n     v->swap_delete(task);\n }\n@@ -229,7 +235,8 @@ rust_dom::reap_dead_tasks() {\n \n             dead_tasks.swap_delete(task);\n             log(rust_log::TASK,\n-                \"deleting unreferenced dead task 0x%\" PRIxPTR, task);\n+                \"deleting unreferenced dead task %s @0x%\" PRIxPTR,\n+                task->name, task);\n             delete task;\n             continue;\n         }\n@@ -272,7 +279,7 @@ rust_dom::get_task_proxy(rust_task *task) {\n     if (_task_proxies.get(task, &proxy)) {\n         return proxy;\n     }\n-    log(rust_log::COMM, \"no proxy for 0x%\" PRIxPTR, task);\n+    log(rust_log::COMM, \"no proxy for %s @0x%\" PRIxPTR, task->name, task);\n     proxy = new (this) rust_proxy<rust_task> (this, task, false);\n     _task_proxies.put(task, proxy);\n     return proxy;\n@@ -327,23 +334,26 @@ rust_dom::log_state() {\n         log(rust_log::TASK, \"running tasks:\");\n         for (size_t i = 0; i < running_tasks.length(); i++) {\n             log(rust_log::TASK,\n-                \"\\t task: 0x%\" PRIxPTR, running_tasks[i]);\n+                \"\\t task: %s @0x%\" PRIxPTR,\n+                running_tasks[i]->name, running_tasks[i]);\n         }\n     }\n \n     if (!blocked_tasks.is_empty()) {\n         log(rust_log::TASK, \"blocked tasks:\");\n         for (size_t i = 0; i < blocked_tasks.length(); i++) {\n             log(rust_log::TASK,\n-                \"\\t task: 0x%\" PRIxPTR \", blocked on: 0x%\" PRIxPTR,\n-                blocked_tasks[i], blocked_tasks[i]->cond);\n+                \"\\t task: %s @0x%\" PRIxPTR \", blocked on: 0x%\" PRIxPTR,\n+                blocked_tasks[i]->name, blocked_tasks[i],\n+                blocked_tasks[i]->cond);\n         }\n     }\n \n     if (!dead_tasks.is_empty()) {\n         log(rust_log::TASK, \"dead tasks:\");\n         for (size_t i = 0; i < dead_tasks.length(); i++) {\n-            log(rust_log::TASK, \"\\t task: 0x%\" PRIxPTR, dead_tasks[i]);\n+            log(rust_log::TASK, \"\\t task: %s @0x%\" PRIxPTR,\n+                dead_tasks[i]->name, dead_tasks[i]);\n         }\n     }\n }\n@@ -360,7 +370,8 @@ rust_dom::start_main_loop()\n     // Make sure someone is watching, to pull us out of infinite loops.\n     rust_timer timer(this);\n \n-    log(rust_log::DOM, \"running main-loop on domain 0x%\" PRIxPTR, this);\n+    log(rust_log::DOM, \"running main-loop on domain %s @0x%\" PRIxPTR,\n+        name, this);\n     logptr(\"exit-task glue\", root_crate->get_exit_task_glue());\n \n     while (n_live_tasks() > 0) {\n@@ -386,16 +397,18 @@ rust_dom::start_main_loop()\n         I(this, scheduled_task->running());\n \n         log(rust_log::TASK,\n-                 \"activating task 0x%\" PRIxPTR \", sp=0x%\" PRIxPTR,\n-                 (uintptr_t)scheduled_task, scheduled_task->rust_sp);\n+                 \"activating task %s @0x%\" PRIxPTR \", sp=0x%\" PRIxPTR,\n+            scheduled_task->name, (uintptr_t)scheduled_task,\n+            scheduled_task->rust_sp);\n \n         interrupt_flag = 0;\n \n         activate(scheduled_task);\n \n         log(rust_log::TASK,\n-                 \"returned from task 0x%\" PRIxPTR\n+                 \"returned from task %s @0x%\" PRIxPTR\n                  \" in state '%s', sp=0x%\" PRIxPTR,\n+                 scheduled_task->name,\n                  (uintptr_t)scheduled_task,\n                  state_vec_name(scheduled_task->state),\n                  scheduled_task->rust_sp);\n@@ -417,8 +430,9 @@ rust_dom::start_main_loop()\n         if (_log.is_tracing(rust_log::DOM)) {\n             for (size_t i = 0; i < dead_tasks.length(); i++) {\n                 log(rust_log::DOM,\n-                    \"task: 0x%\" PRIxPTR \", index: %d, ref_count: %d\",\n-                    dead_tasks[i], i, dead_tasks[i]->ref_count);\n+                    \"task: %s @0x%\" PRIxPTR \", index: %d, ref_count: %d\",\n+                    dead_tasks[i]->name, dead_tasks[i], i,\n+                    dead_tasks[i]->ref_count);\n             }\n         }\n "}, {"sha": "abf10cefe00d7f1286d374a01470d78d8f29368a", "filename": "src/rt/rust_dom.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Frt%2Frust_dom.h", "raw_url": "https://github.com/rust-lang/rust/raw/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Frt%2Frust_dom.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.h?ref=b71340552fa0caa870877f87a1273e8d4c91efe6", "patch": "@@ -25,6 +25,7 @@ struct rust_dom\n     rust_crate const *root_crate;\n     rust_log _log;\n     rust_srv *srv;\n+    const char *const name;\n     ptr_vec<rust_task> running_tasks;\n     ptr_vec<rust_task> blocked_tasks;\n     ptr_vec<rust_task> dead_tasks;\n@@ -47,7 +48,9 @@ struct rust_dom\n     pthread_attr_t attr;\n #endif\n \n-    rust_dom(rust_srv *srv, rust_crate const *root_crate);\n+    // Only a pointer to 'name' is kept, so it must live as long as this\n+    // domain.\n+    rust_dom(rust_srv *srv, rust_crate const *root_crate, const char *name);\n     ~rust_dom();\n \n     void activate(rust_task *task);"}, {"sha": "279850cb0f8da8def608952a627314d66b33ba4e", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=b71340552fa0caa870877f87a1273e8d4c91efe6", "patch": "@@ -52,14 +52,15 @@ align_down(uintptr_t sp)\n }\n \n \n-rust_task::rust_task(rust_dom *dom, rust_task *spawner) :\n+rust_task::rust_task(rust_dom *dom, rust_task *spawner, const char *name) :\n     maybe_proxy<rust_task>(this),\n     stk(new_stk(dom, 0)),\n     runtime_sp(0),\n     rust_sp(stk->limit),\n     gc_alloc_chain(0),\n     dom(dom),\n     cache(NULL),\n+    name(name),\n     state(&dom->running_tasks),\n     cond(NULL),\n     supervisor(spawner),\n@@ -77,8 +78,8 @@ rust_task::rust_task(rust_dom *dom, rust_task *spawner) :\n rust_task::~rust_task()\n {\n     dom->log(rust_log::MEM|rust_log::TASK,\n-             \"~rust_task 0x%\" PRIxPTR \", refcnt=%d\",\n-             (uintptr_t)this, ref_count);\n+             \"~rust_task %s @0x%\" PRIxPTR \", refcnt=%d\",\n+             name, (uintptr_t)this, ref_count);\n \n     /*\n       for (uintptr_t fp = get_fp(); fp; fp = get_previous_fp(fp)) {\n@@ -311,7 +312,7 @@ void\n rust_task::yield(size_t nargs)\n {\n     log(rust_log::TASK,\n-        \"task 0x%\" PRIxPTR \" yielding\", this);\n+        \"task %s @0x%\" PRIxPTR \" yielding\", name, this);\n     run_after_return(nargs, dom->root_crate->get_yield_glue());\n }\n \n@@ -326,7 +327,7 @@ rust_task::kill() {\n     // Note the distinction here: kill() is when you're in an upcall\n     // from task A and want to force-fail task B, you do B->kill().\n     // If you want to fail yourself you do self->fail(upcall_nargs).\n-    log(rust_log::TASK, \"killing task 0x%\" PRIxPTR, this);\n+    log(rust_log::TASK, \"killing task %s @0x%\" PRIxPTR, name, this);\n     // Unblock the task so it can unwind.\n     unblock();\n \n@@ -339,17 +340,17 @@ rust_task::kill() {\n void\n rust_task::fail(size_t nargs) {\n     // See note in ::kill() regarding who should call this.\n-    dom->log(rust_log::TASK, \"task 0x%\" PRIxPTR \" failing\", this);\n+    dom->log(rust_log::TASK, \"task %s @0x%\" PRIxPTR \" failing\", name, this);\n     // Unblock the task so it can unwind.\n     unblock();\n     if (this == dom->root_task)\n         dom->fail();\n     run_after_return(nargs, dom->root_crate->get_unwind_glue());\n     if (supervisor) {\n         dom->log(rust_log::TASK,\n-                 \"task 0x%\" PRIxPTR\n-                 \" propagating failure to supervisor 0x%\" PRIxPTR,\n-                 this, supervisor);\n+                 \"task %s @0x%\" PRIxPTR\n+                 \" propagating failure to supervisor %s @0x%\" PRIxPTR,\n+                 name, this, supervisor->name, supervisor);\n         supervisor->kill();\n     }\n }\n@@ -358,16 +359,17 @@ void\n rust_task::gc(size_t nargs)\n {\n     dom->log(rust_log::TASK|rust_log::MEM,\n-             \"task 0x%\" PRIxPTR \" garbage collecting\", this);\n+             \"task %s @0x%\" PRIxPTR \" garbage collecting\", name, this);\n     run_after_return(nargs, dom->root_crate->get_gc_glue());\n }\n \n void\n rust_task::unsupervise()\n {\n     dom->log(rust_log::TASK,\n-             \"task 0x%\" PRIxPTR \" disconnecting from supervisor 0x%\" PRIxPTR,\n-             this, supervisor);\n+             \"task %s @0x%\" PRIxPTR\n+             \" disconnecting from supervisor %s @0x%\" PRIxPTR,\n+             name, this, supervisor->name, supervisor);\n     supervisor = NULL;\n }\n \n@@ -468,8 +470,9 @@ rust_task::malloc(size_t sz, type_desc *td)\n     if (td) {\n         gc_alloc *gcm = (gc_alloc*) mem;\n         dom->log(rust_log::TASK|rust_log::MEM|rust_log::GC,\n-                 \"task 0x%\" PRIxPTR \" allocated %d GC bytes = 0x%\" PRIxPTR,\n-                 (uintptr_t)this, sz, gcm);\n+                 \"task %s @0x%\" PRIxPTR\n+                 \" allocated %d GC bytes = 0x%\" PRIxPTR,\n+                 name, (uintptr_t)this, sz, gcm);\n         memset((void*) gcm, 0, sizeof(gc_alloc));\n         link_gc(gcm);\n         gcm->ctrl_word = (uintptr_t)td;\n@@ -488,8 +491,9 @@ rust_task::realloc(void *data, size_t sz, bool is_gc)\n         sz += sizeof(gc_alloc);\n         gcm = (gc_alloc*) dom->realloc((void*)gcm, sz);\n         dom->log(rust_log::TASK|rust_log::MEM|rust_log::GC,\n-                 \"task 0x%\" PRIxPTR \" reallocated %d GC bytes = 0x%\" PRIxPTR,\n-                 (uintptr_t)this, sz, gcm);\n+                 \"task %s @0x%\" PRIxPTR\n+                 \" reallocated %d GC bytes = 0x%\" PRIxPTR,\n+                 name, (uintptr_t)this, sz, gcm);\n         if (!gcm)\n             return gcm;\n         link_gc(gcm);\n@@ -507,8 +511,8 @@ rust_task::free(void *p, bool is_gc)\n         gc_alloc *gcm = (gc_alloc*)(((char *)p) - sizeof(gc_alloc));\n         unlink_gc(gcm);\n         dom->log(rust_log::TASK|rust_log::MEM|rust_log::GC,\n-                 \"task 0x%\" PRIxPTR \" freeing GC memory = 0x%\" PRIxPTR,\n-                 (uintptr_t)this, gcm);\n+                 \"task %s @0x%\" PRIxPTR \" freeing GC memory = 0x%\" PRIxPTR,\n+                 name, (uintptr_t)this, gcm);\n         dom->free(gcm);\n     } else {\n         dom->free(p);\n@@ -521,7 +525,8 @@ rust_task::transition(ptr_vec<rust_task> *src, ptr_vec<rust_task> *dst)\n {\n     I(dom, state == src);\n     dom->log(rust_log::TASK,\n-             \"task 0x%\" PRIxPTR \" state change '%s' -> '%s'\",\n+             \"task %s @0x%\" PRIxPTR \" state change '%s' -> '%s'\",\n+             name,\n              (uintptr_t)this,\n              dom->state_vec_name(src),\n              dom->state_vec_name(dst));"}, {"sha": "27495e2c1ad75a139000e8eda3556ef4a965db16", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=b71340552fa0caa870877f87a1273e8d4c91efe6", "patch": "@@ -21,6 +21,7 @@ rust_task : public maybe_proxy<rust_task>,\n     rust_crate_cache *cache;\n \n     // Fields known only to the runtime.\n+    const char *const name;\n     ptr_vec<rust_task> *state;\n     rust_cond *cond;\n     rust_task *supervisor;     // Parent-link for failure propagation.\n@@ -41,8 +42,10 @@ rust_task : public maybe_proxy<rust_task>,\n \n     rust_alarm alarm;\n \n+    // Only a pointer to 'name' is kept, so it must live as long as this task.\n     rust_task(rust_dom *dom,\n-              rust_task *spawner);\n+              rust_task *spawner,\n+              const char *name);\n     ~rust_task();\n \n     void start(uintptr_t exit_task_glue,"}, {"sha": "b0757e29e42f03934146c53cf35aa704fb1200eb", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b71340552fa0caa870877f87a1273e8d4c91efe6/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=b71340552fa0caa870877f87a1273e8d4c91efe6", "patch": "@@ -6,16 +6,18 @@\n #define LOG_UPCALL_ENTRY(task)                              \\\n     (task)->dom->get_log().reset_indent(0);                 \\\n     (task)->log(rust_log::UPCALL,                           \\\n-                \"> UPCALL %s - task: 0x%\" PRIxPTR           \\\n+                \"> UPCALL %s - task: %s @0x%\" PRIxPTR       \\\n                 \" retpc: x%\" PRIxPTR,                       \\\n                 __FUNCTION__,                               \\\n-                (task), __builtin_return_address(0));       \\\n+                (task)->name, (task),                       \\\n+                __builtin_return_address(0));               \\\n     (task)->dom->get_log().indent();\n #else\n #define LOG_UPCALL_ENTRY(task)                              \\\n     (task)->dom->get_log().reset_indent(0);                 \\\n     (task)->log(rust_log::UPCALL,                           \\\n-                \"> UPCALL task: x%\" PRIxPTR (task));        \\\n+                \"> UPCALL task: %s @x%\" PRIxPTR,            \\\n+                (task)->name, (task));                      \\\n     (task)->dom->get_log().indent();\n #endif\n \n@@ -55,8 +57,8 @@ upcall_new_port(rust_task *task, size_t unit_sz) {\n     LOG_UPCALL_ENTRY(task);\n     rust_dom *dom = task->dom;\n     task->log(rust_log::UPCALL | rust_log::MEM | rust_log::COMM,\n-              \"upcall_new_port(task=0x%\" PRIxPTR \", unit_sz=%d)\",\n-              (uintptr_t) task, unit_sz);\n+              \"upcall_new_port(task=0x%\" PRIxPTR \" (%s), unit_sz=%d)\",\n+              (uintptr_t) task, task->name, unit_sz);\n     return new (dom) rust_port(task, unit_sz);\n }\n \n@@ -76,8 +78,9 @@ upcall_new_chan(rust_task *task, rust_port *port) {\n     LOG_UPCALL_ENTRY(task);\n     rust_dom *dom = task->dom;\n     task->log(rust_log::UPCALL | rust_log::MEM | rust_log::COMM,\n-              \"upcall_new_chan(task=0x%\" PRIxPTR \", port=0x%\" PRIxPTR \")\",\n-              (uintptr_t) task, port);\n+              \"upcall_new_chan(\"\n+              \"task=0x%\" PRIxPTR \" (%s), port=0x%\" PRIxPTR \")\",\n+              (uintptr_t) task, task->name, port);\n     I(dom, port);\n     return new (dom) rust_chan(task, port);\n }\n@@ -136,11 +139,11 @@ extern \"C\" CDECL void upcall_yield(rust_task *task) {\n extern \"C\" CDECL void\n upcall_join(rust_task *task, maybe_proxy<rust_task> *target) {\n     LOG_UPCALL_ENTRY(task);\n+    rust_task *target_task = target->delegate();\n     task->log(rust_log::UPCALL | rust_log::COMM,\n-              \"target: 0x%\" PRIxPTR \", task: 0x%\" PRIxPTR,\n-              target, target->delegate());\n+              \"target: 0x%\" PRIxPTR \", task: %s @0x%\" PRIxPTR,\n+              target, target_task->name, target_task);\n \n-    rust_task *target_task = target->delegate();\n     if (target->is_proxy()) {\n         notify_message::\n         send(notify_message::JOIN, \"join\", task, target->as_proxy());\n@@ -222,8 +225,8 @@ upcall_kill(rust_task *task, maybe_proxy<rust_task> *target) {\n     rust_task *target_task = target->delegate();\n \n     task->log(rust_log::UPCALL | rust_log::TASK,\n-              \"kill task 0x%\" PRIxPTR \", ref count %d\",\n-              target_task,\n+              \"kill task %s @0x%\" PRIxPTR \", ref count %d\",\n+              target_task->name, target_task,\n               target_task->ref_count);\n \n     if (target->is_proxy()) {\n@@ -498,14 +501,14 @@ static void *rust_thread_start(void *ptr)\n }\n \n extern \"C\" CDECL rust_task *\n-upcall_new_task(rust_task *spawner) {\n+upcall_new_task(rust_task *spawner, const char *name) {\n     LOG_UPCALL_ENTRY(spawner);\n \n     rust_dom *dom = spawner->dom;\n-    rust_task *task = new (dom) rust_task(dom, spawner);\n+    rust_task *task = new (dom) rust_task(dom, spawner, name);\n     dom->log(rust_log::UPCALL | rust_log::MEM | rust_log::TASK,\n-             \"upcall new_task(spawner 0x%\" PRIxPTR \") = 0x%\" PRIxPTR,\n-             spawner, task);\n+             \"upcall new_task(spawner %s @0x%\" PRIxPTR \", %s) = 0x%\" PRIxPTR,\n+             spawner->name, spawner, name, task);\n     return task;\n }\n \n@@ -516,26 +519,27 @@ upcall_start_task(rust_task *spawner, rust_task *task,\n \n     rust_dom *dom = spawner->dom;\n     dom->log(rust_log::UPCALL | rust_log::MEM | rust_log::TASK,\n-             \"upcall start_task(task 0x%\" PRIxPTR\n+             \"upcall start_task(task %s @0x%\" PRIxPTR\n              \" exit_task_glue 0x%\" PRIxPTR\n              \", spawnee 0x%\" PRIxPTR\n-             \", callsz %\" PRIdPTR \")\", task, exit_task_glue, spawnee_fn,\n-             callsz);\n+             \", callsz %\" PRIdPTR \")\", task->name, task, exit_task_glue,\n+             spawnee_fn, callsz);\n     task->start(exit_task_glue, spawnee_fn, spawner->rust_sp, callsz);\n     return task;\n }\n \n extern \"C\" CDECL maybe_proxy<rust_task> *\n-upcall_new_thread(rust_task *task) {\n+upcall_new_thread(rust_task *task, const char *name) {\n     LOG_UPCALL_ENTRY(task);\n \n     rust_dom *old_dom = task->dom;\n     rust_dom *new_dom = new rust_dom(old_dom->srv->clone(),\n-                                     old_dom->root_crate);\n+                                     old_dom->root_crate,\n+                                     name);\n \n     task->log(rust_log::UPCALL | rust_log::MEM,\n-              \"upcall new_thread() = dom 0x%\" PRIxPTR \" task 0x%\" PRIxPTR,\n-              new_dom, new_dom->root_task);\n+              \"upcall new_thread(%s) = dom 0x%\" PRIxPTR \" task 0x%\" PRIxPTR,\n+              name, new_dom, new_dom->root_task);\n     rust_proxy<rust_task> *proxy =\n         new (old_dom) rust_proxy<rust_task>(old_dom,\n                                             new_dom->root_task, true);"}]}