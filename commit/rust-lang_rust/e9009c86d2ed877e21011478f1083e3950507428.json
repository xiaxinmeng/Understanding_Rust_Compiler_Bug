{"sha": "e9009c86d2ed877e21011478f1083e3950507428", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MDA5Yzg2ZDJlZDg3N2UyMTAxMTQ3OGYxMDgzZTM5NTA1MDc0Mjg=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-10-03T17:43:07Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-10-04T14:23:03Z"}, "message": "[const-prop] Fix ICE when trying to eval polymorphic promoted MIR", "tree": {"sha": "d2146b469053271fad46a467cf523c9d3632337a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2146b469053271fad46a467cf523c9d3632337a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9009c86d2ed877e21011478f1083e3950507428", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9009c86d2ed877e21011478f1083e3950507428", "html_url": "https://github.com/rust-lang/rust/commit/e9009c86d2ed877e21011478f1083e3950507428", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9009c86d2ed877e21011478f1083e3950507428/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfb6d84720019236e33872e145d187dfd6e81090", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb6d84720019236e33872e145d187dfd6e81090", "html_url": "https://github.com/rust-lang/rust/commit/cfb6d84720019236e33872e145d187dfd6e81090"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "3ba989529f18f1263b943da1e2f6d310d4c7d4a5", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9009c86d2ed877e21011478f1083e3950507428/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9009c86d2ed877e21011478f1083e3950507428/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=e9009c86d2ed877e21011478f1083e3950507428", "patch": "@@ -594,6 +594,13 @@ where\n             StaticKind::Promoted(promoted, promoted_substs) => {\n                 let substs = self.subst_from_frame_and_normalize_erasing_regions(promoted_substs);\n                 let instance = ty::Instance::new(place_static.def_id, substs);\n+\n+                // Even after getting `substs` from the frame, this instance may still be\n+                // polymorphic because `ConstProp` will try to promote polymorphic MIR.\n+                if instance.needs_subst() {\n+                    throw_inval!(TooGeneric);\n+                }\n+\n                 self.const_eval_raw(GlobalId {\n                     instance,\n                     promoted: Some(promoted),"}, {"sha": "b85cecda16e9550fb45726a14b0e55c367ff4cfb", "filename": "src/test/ui/consts/const-eval/issue-50814.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9009c86d2ed877e21011478f1083e3950507428/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9009c86d2ed877e21011478f1083e3950507428/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs?ref=e9009c86d2ed877e21011478f1083e3950507428", "patch": "@@ -11,7 +11,6 @@ struct Sum<A,B>(A,B);\n \n impl<A: Unsigned, B: Unsigned> Unsigned for Sum<A,B> {\n     const MAX: u8 = A::MAX + B::MAX; //~ ERROR any use of this value will cause an error\n-    //~| ERROR any use of this value will cause an error\n }\n \n fn foo<T>(_: T) -> &'static u8 {"}, {"sha": "707dfee7cd5b89c96b2128a858a80a5ebf91ef64", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9009c86d2ed877e21011478f1083e3950507428/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9009c86d2ed877e21011478f1083e3950507428/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=e9009c86d2ed877e21011478f1083e3950507428", "patch": "@@ -9,21 +9,13 @@ LL |     const MAX: u8 = A::MAX + B::MAX;\n    = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-50814.rs:18:5\n+  --> $DIR/issue-50814.rs:17:5\n    |\n LL |     &Sum::<U8,U8>::MAX\n    |     ^-----------------\n    |      |\n    |      referenced constant has errors\n \n-error: any use of this value will cause an error\n-  --> $DIR/issue-50814.rs:13:21\n-   |\n-LL |     const MAX: u8 = A::MAX + B::MAX;\n-   |     ----------------^^^^^^^^^^^^^^^-\n-   |                     |\n-   |                     attempt to add with overflow\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "d2e095072844ff1f6cd5a0baad255a07cac7c844", "filename": "src/test/ui/consts/const-eval/issue-64908.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e9009c86d2ed877e21011478f1083e3950507428/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64908.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9009c86d2ed877e21011478f1083e3950507428/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64908.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64908.rs?ref=e9009c86d2ed877e21011478f1083e3950507428", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+\n+// This test verifies that the `ConstProp` pass doesn't cause an ICE when evaluating polymorphic\n+// promoted MIR.\n+\n+pub trait ArrowPrimitiveType {\n+    type Native;\n+}\n+\n+pub fn new<T: ArrowPrimitiveType>() {\n+    assert_eq!(0, std::mem::size_of::<T::Native>());\n+}\n+\n+impl ArrowPrimitiveType for () {\n+    type Native = ();\n+}\n+\n+fn main() {\n+    new::<()>();\n+}"}]}