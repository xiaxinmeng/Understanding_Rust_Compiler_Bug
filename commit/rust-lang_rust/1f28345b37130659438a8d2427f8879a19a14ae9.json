{"sha": "1f28345b37130659438a8d2427f8879a19a14ae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMjgzNDViMzcxMzA2NTk0MzhhOGQyNDI3Zjg4NzlhMTlhMTRhZTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-15T17:40:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-15T17:40:14Z"}, "message": "Merge #8037\n\n8037: Assist is empty 7709 r=Veykril a=chetankhilosiya\n\nUpdated the implementation to get the function from implementation\n\nCo-authored-by: Chetan Khilosiya <chetan.khilosiya@gmail.com>", "tree": {"sha": "120e085c1fb07e7ca0df7269936eb749827e2735", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/120e085c1fb07e7ca0df7269936eb749827e2735"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f28345b37130659438a8d2427f8879a19a14ae9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgT5v+CRBK7hj4Ov3rIwAAdHIIAFcTF1+kkKJeL+ATeIsL9wjn\nttaP0lCnxCz1MHZeL3V3MGyDddqVfbIU7iNBBswoeJgSqRQt8RRVVAXX3lrSILmK\nXfmEpghrXPmexHSVgIYPWW1RWC4upH+Ray0l6lVfIJg6wLCJY1jgvnweQwGCMytf\nC5HeDp39V3twU2ugfrwt91LWCKiuH8GmReJyX6RwKpDSbmjV6BTr73Qtv7XmrQR8\nyVGDovKRq8YzWzx14Xo98hlW97uUSaMKDuKyEtxFeqVv7haWrr7RRpD7yCmzw/in\nLIkidxpLAaGCI9MvN1l5hBxT6Vr1e+64gDZG8B2SZ+GFMME6DH7KCwDzI9Ot7z8=\n=vcv8\n-----END PGP SIGNATURE-----\n", "payload": "tree 120e085c1fb07e7ca0df7269936eb749827e2735\nparent ce3125165a6658318def7c49f415ea7f5e9dce92\nparent 0c2d4a8a7758793765d33790e22c70b79b8bea56\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615830014 +0000\ncommitter GitHub <noreply@github.com> 1615830014 +0000\n\nMerge #8037\n\n8037: Assist is empty 7709 r=Veykril a=chetankhilosiya\n\nUpdated the implementation to get the function from implementation\n\nCo-authored-by: Chetan Khilosiya <chetan.khilosiya@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f28345b37130659438a8d2427f8879a19a14ae9", "html_url": "https://github.com/rust-lang/rust/commit/1f28345b37130659438a8d2427f8879a19a14ae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f28345b37130659438a8d2427f8879a19a14ae9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce3125165a6658318def7c49f415ea7f5e9dce92", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce3125165a6658318def7c49f415ea7f5e9dce92", "html_url": "https://github.com/rust-lang/rust/commit/ce3125165a6658318def7c49f415ea7f5e9dce92"}, {"sha": "0c2d4a8a7758793765d33790e22c70b79b8bea56", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c2d4a8a7758793765d33790e22c70b79b8bea56", "html_url": "https://github.com/rust-lang/rust/commit/0c2d4a8a7758793765d33790e22c70b79b8bea56"}], "stats": {"total": 288, "additions": 288, "deletions": 0}, "files": [{"sha": "43de9edd65a80bdc804831aa84eeb30ca99253c4", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f28345b37130659438a8d2427f8879a19a14ae9/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f28345b37130659438a8d2427f8879a19a14ae9/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=1f28345b37130659438a8d2427f8879a19a14ae9", "patch": "@@ -191,6 +191,8 @@ pub mod known {\n         filter_map,\n         next,\n         iter_mut,\n+        len,\n+        is_empty,\n         // Builtin macros\n         file,\n         column,"}, {"sha": "aa7072f25ccd3add105a3f644c96a3a102bf225b", "filename": "crates/ide_assists/src/handlers/generate_is_empty_from_len.rs", "status": "added", "additions": 255, "deletions": 0, "changes": 255, "blob_url": "https://github.com/rust-lang/rust/blob/1f28345b37130659438a8d2427f8879a19a14ae9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f28345b37130659438a8d2427f8879a19a14ae9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs?ref=1f28345b37130659438a8d2427f8879a19a14ae9", "patch": "@@ -0,0 +1,255 @@\n+use hir::{known, HasSource, Name};\n+use syntax::{\n+    ast::{self, NameOwner},\n+    AstNode, TextRange,\n+};\n+\n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    AssistId, AssistKind,\n+};\n+\n+// Assist: generate_is_empty_from_len\n+//\n+// Generates is_empty implementation from the len method.\n+//\n+// ```\n+// struct MyStruct { data: Vec<String> }\n+//\n+// impl MyStruct {\n+//     p$0ub fn len(&self) -> usize {\n+//         self.data.len()\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// struct MyStruct { data: Vec<String> }\n+//\n+// impl MyStruct {\n+//     pub fn len(&self) -> usize {\n+//         self.data.len()\n+//     }\n+//\n+//     pub fn is_empty(&self) -> bool {\n+//         self.len() == 0\n+//     }\n+// }\n+// ```\n+pub(crate) fn generate_is_empty_from_len(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let fn_node = ctx.find_node_at_offset::<ast::Fn>()?;\n+    let fn_name = fn_node.name()?;\n+\n+    if fn_name.text() != \"len\" {\n+        cov_mark::hit!(len_function_not_present);\n+        return None;\n+    }\n+\n+    if fn_node.param_list()?.params().next().is_some() {\n+        cov_mark::hit!(len_function_with_parameters);\n+        return None;\n+    }\n+\n+    let impl_ = fn_node.syntax().ancestors().find_map(ast::Impl::cast)?;\n+    if get_impl_method(ctx, &impl_, &known::is_empty).is_some() {\n+        cov_mark::hit!(is_empty_already_implemented);\n+        return None;\n+    }\n+\n+    let range = get_text_range_of_len_function(ctx, &impl_)?;\n+\n+    acc.add(\n+        AssistId(\"generate_is_empty_from_len\", AssistKind::Generate),\n+        \"Generate a is_empty impl from a len function\",\n+        range,\n+        |builder| {\n+            let code = r#\"\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\"#\n+            .to_string();\n+            builder.insert(range.end(), code)\n+        },\n+    )\n+}\n+\n+fn get_impl_method(\n+    ctx: &AssistContext,\n+    impl_: &ast::Impl,\n+    fn_name: &Name,\n+) -> Option<hir::Function> {\n+    let db = ctx.sema.db;\n+    let impl_def: hir::Impl = ctx.sema.to_def(impl_)?;\n+\n+    let scope = ctx.sema.scope(impl_.syntax());\n+    let krate = impl_def.module(db).krate();\n+    let ty = impl_def.target_ty(db);\n+    let traits_in_scope = scope.traits_in_scope();\n+    ty.iterate_method_candidates(db, krate, &traits_in_scope, Some(fn_name), |_, func| Some(func))\n+}\n+\n+fn get_text_range_of_len_function(ctx: &AssistContext, impl_: &ast::Impl) -> Option<TextRange> {\n+    let db = ctx.sema.db;\n+    let func = get_impl_method(ctx, impl_, &known::len)?;\n+    let node = func.source(db)?;\n+    Some(node.syntax().value.text_range())\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn len_function_not_present() {\n+        cov_mark::check!(len_function_not_present);\n+        check_assist_not_applicable(\n+            generate_is_empty_from_len,\n+            r#\"\n+struct MyStruct { data: Vec<String> }\n+\n+impl MyStruct {\n+    p$0ub fn test(&self) -> usize {\n+            self.data.len()\n+        }\n+    }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn len_function_with_parameters() {\n+        cov_mark::check!(len_function_with_parameters);\n+        check_assist_not_applicable(\n+            generate_is_empty_from_len,\n+            r#\"\n+struct MyStruct { data: Vec<String> }\n+\n+impl MyStruct {\n+    p$0ub fn len(&self, _i: bool) -> usize {\n+        self.data.len()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn is_empty_already_implemented() {\n+        cov_mark::check!(is_empty_already_implemented);\n+        check_assist_not_applicable(\n+            generate_is_empty_from_len,\n+            r#\"\n+struct MyStruct { data: Vec<String> }\n+\n+impl MyStruct {\n+    p$0ub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn generate_is_empty() {\n+        check_assist(\n+            generate_is_empty_from_len,\n+            r#\"\n+struct MyStruct { data: Vec<String> }\n+\n+impl MyStruct {\n+    p$0ub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+}\n+\"#,\n+            r#\"\n+struct MyStruct { data: Vec<String> }\n+\n+impl MyStruct {\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn multiple_functions_in_impl() {\n+        check_assist(\n+            generate_is_empty_from_len,\n+            r#\"\n+struct MyStruct { data: Vec<String> }\n+\n+impl MyStruct {\n+    pub fn new() -> Self {\n+        Self { data: 0 }\n+    }\n+\n+    p$0ub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    pub fn work(&self) -> Option<usize> {\n+\n+    }\n+}\n+\"#,\n+            r#\"\n+struct MyStruct { data: Vec<String> }\n+\n+impl MyStruct {\n+    pub fn new() -> Self {\n+        Self { data: 0 }\n+    }\n+\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n+\n+    pub fn work(&self) -> Option<usize> {\n+\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn multiple_impls() {\n+        check_assist_not_applicable(\n+            generate_is_empty_from_len,\n+            r#\"\n+struct MyStruct { data: Vec<String> }\n+\n+impl MyStruct {\n+    p$0ub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+}\n+\n+impl MyStruct {\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "8c068a6c0efd87ad20e7418c9b57ecf9f443152e", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f28345b37130659438a8d2427f8879a19a14ae9/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f28345b37130659438a8d2427f8879a19a14ae9/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=1f28345b37130659438a8d2427f8879a19a14ae9", "patch": "@@ -129,6 +129,7 @@ mod handlers {\n     mod flip_trait_bound;\n     mod generate_default_from_enum_variant;\n     mod generate_default_from_new;\n+    mod generate_is_empty_from_len;\n     mod generate_derive;\n     mod generate_enum_is_method;\n     mod generate_enum_projection_method;\n@@ -193,6 +194,7 @@ mod handlers {\n             flip_trait_bound::flip_trait_bound,\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n             generate_default_from_new::generate_default_from_new,\n+            generate_is_empty_from_len::generate_is_empty_from_len,\n             generate_derive::generate_derive,\n             generate_enum_is_method::generate_enum_is_method,\n             generate_enum_projection_method::generate_enum_as_method,"}, {"sha": "736027ff00b6785dc4abaeec09d8ba1a89a0388c", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1f28345b37130659438a8d2427f8879a19a14ae9/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f28345b37130659438a8d2427f8879a19a14ae9/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=1f28345b37130659438a8d2427f8879a19a14ae9", "patch": "@@ -721,6 +721,35 @@ impl<T: Clone> Ctx<T> {\n     )\n }\n \n+#[test]\n+fn doctest_generate_is_empty_from_len() {\n+    check_doc_test(\n+        \"generate_is_empty_from_len\",\n+        r#####\"\n+struct MyStruct { data: Vec<String> }\n+\n+impl MyStruct {\n+    p$0ub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+}\n+\"#####,\n+        r#####\"\n+struct MyStruct { data: Vec<String> }\n+\n+impl MyStruct {\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_generate_new() {\n     check_doc_test("}]}