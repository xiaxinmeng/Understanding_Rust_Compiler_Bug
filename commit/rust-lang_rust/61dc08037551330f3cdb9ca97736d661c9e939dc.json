{"sha": "61dc08037551330f3cdb9ca97736d661c9e939dc", "node_id": "C_kwDOAAsO6NoAKDYxZGMwODAzNzU1MTMzMGYzY2RiOWNhOTc3MzZkNjYxYzllOTM5ZGM", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-06-16T18:04:52Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-06-16T21:07:43Z"}, "message": "adjust const alloc interning partial hash comments", "tree": {"sha": "2c365339f9ae74556e760c6124315c34d616f587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c365339f9ae74556e760c6124315c34d616f587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61dc08037551330f3cdb9ca97736d661c9e939dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61dc08037551330f3cdb9ca97736d661c9e939dc", "html_url": "https://github.com/rust-lang/rust/commit/61dc08037551330f3cdb9ca97736d661c9e939dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61dc08037551330f3cdb9ca97736d661c9e939dc/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1f31f853ed93b651ddd0a1c32d6264085f57ce6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f31f853ed93b651ddd0a1c32d6264085f57ce6", "html_url": "https://github.com/rust-lang/rust/commit/b1f31f853ed93b651ddd0a1c32d6264085f57ce6"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "1d8b1314501f24b9e730f18bdcb9bf369b85ce61", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/61dc08037551330f3cdb9ca97736d661c9e939dc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61dc08037551330f3cdb9ca97736d661c9e939dc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=61dc08037551330f3cdb9ca97736d661c9e939dc", "patch": "@@ -26,6 +26,8 @@ use crate::ty;\n /// Its public API is rather low-level, working directly with allocation offsets and a custom error\n /// type to account for the lack of an AllocId on this level. The Miri/CTFE core engine `memory`\n /// module provides higher-level access.\n+// Note: for performance reasons when interning, some of the `Allocation` fields can be partially\n+// hashed. (see the `Hash` impl below for more details), so the impl is not derived.\n #[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n pub struct Allocation<Tag = AllocId, Extra = ()> {\n@@ -50,13 +52,13 @@ pub struct Allocation<Tag = AllocId, Extra = ()> {\n     pub extra: Extra,\n }\n \n-/// This is the maximum size we will hash at a time from these two structures, when interning. Note,\n-/// we hash that amount of bytes twice: at the start, and at the end of a buffer. Used when an\n-/// `Allocation` and its `InitMask` are large: we only partially hash the larger fields in that\n+/// This is the maximum size we will hash at a time, when interning an `Allocation` and its\n+/// `InitMask`. Note, we hash that amount of bytes twice: at the start, and at the end of a buffer.\n+/// Used when these two structures are large: we only partially hash the larger fields in that\n /// situation. See the comment at the top of their respective `Hash` impl for more details.\n const MAX_BYTES_TO_HASH: usize = 64;\n \n-/// This is the maximum size (in bytes) for which a buffer will be fully hashed when interning.\n+/// This is the maximum size (in bytes) for which a buffer will be fully hashed, when interning.\n /// Otherwise, it will be partially hashed in 2 slices, requiring at least 2 `MAX_BYTES_TO_HASH`\n /// bytes.\n const MAX_HASHED_BUFFER_LEN: usize = 2 * MAX_BYTES_TO_HASH;\n@@ -681,6 +683,8 @@ type Block = u64;\n \n /// A bitmask where each bit refers to the byte with the same index. If the bit is `true`, the byte\n /// is initialized. If it is `false` the byte is uninitialized.\n+// Note: for performance reasons when interning, some of the `InitMask` fields can be partially\n+// hashed. (see the `Hash` impl below for more details), so the impl is not derived.\n #[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n pub struct InitMask {"}]}