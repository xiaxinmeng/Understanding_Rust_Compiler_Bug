{"sha": "e919d7e348932287cc33ec70cdc6f59ab48de255", "node_id": "C_kwDOAAsO6NoAKGU5MTlkN2UzNDg5MzIyODdjYzMzZWM3MGNkYzZmNTlhYjQ4ZGUyNTU", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-02-16T11:55:58Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-02-17T09:30:33Z"}, "message": "Add `Clause::ConstArgHasType` variant", "tree": {"sha": "c209b5676dbdd6db0ca9f441faa54afcb9863c3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c209b5676dbdd6db0ca9f441faa54afcb9863c3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e919d7e348932287cc33ec70cdc6f59ab48de255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e919d7e348932287cc33ec70cdc6f59ab48de255", "html_url": "https://github.com/rust-lang/rust/commit/e919d7e348932287cc33ec70cdc6f59ab48de255", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e919d7e348932287cc33ec70cdc6f59ab48de255/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9556b56dbdbd4238f0051e7230004b0aa488fa14", "url": "https://api.github.com/repos/rust-lang/rust/commits/9556b56dbdbd4238f0051e7230004b0aa488fa14", "html_url": "https://github.com/rust-lang/rust/commit/9556b56dbdbd4238f0051e7230004b0aa488fa14"}], "stats": {"total": 74, "additions": 68, "deletions": 6}, "files": [{"sha": "abc33e84139fc60b27bfc11d9feeba1ec0349611", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -1328,7 +1328,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     ty::Clause::TypeOutlives(_) => {\n                         // Do nothing, we deal with regions separately\n                     }\n-                    ty::Clause::RegionOutlives(_) => bug!(),\n+                    ty::Clause::RegionOutlives(_) | ty::Clause::ConstArgHasType(..) => bug!(),\n                 },\n                 ty::PredicateKind::WellFormed(_)\n                 | ty::PredicateKind::AliasEq(..)"}, {"sha": "2562a1739f503c9809348cc398b777856d4c82f5", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -517,6 +517,7 @@ fn trait_predicate_kind<'tcx>(\n         ty::PredicateKind::Clause(ty::Clause::RegionOutlives(_))\n         | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(_))\n         | ty::PredicateKind::Clause(ty::Clause::Projection(_))\n+        | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n         | ty::PredicateKind::AliasEq(..)\n         | ty::PredicateKind::WellFormed(_)\n         | ty::PredicateKind::Subtype(_)"}, {"sha": "9ee6785970c46b562a5343fa73ff435c6ef337a2", "filename": "compiler/rustc_hir_analysis/src/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -54,6 +54,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n \n                     ty::PredicateKind::Clause(ty::Clause::Trait(..))\n                     | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n+                    | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                     | ty::PredicateKind::WellFormed(..)\n                     | ty::PredicateKind::AliasEq(..)\n                     | ty::PredicateKind::ObjectSafe(..)"}, {"sha": "5b641be062be6921f4fc27fbd7269c924733b137", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -663,6 +663,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 ty::PredicateKind::Clause(ty::Clause::Trait(..))\n                 | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n+                | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                 | ty::PredicateKind::Subtype(..)\n                 | ty::PredicateKind::Coerce(..)\n                 | ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))"}, {"sha": "0e3a16ac7172d49693e1c59d8fb9c42129ef9659", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -826,6 +826,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     }\n                 }\n                 ty::PredicateKind::Subtype(..)\n+                | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                 | ty::PredicateKind::Coerce(..)\n                 | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n                 | ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))"}, {"sha": "83f3d5a74fb48d9a25e422758cc988172c963e8e", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -21,6 +21,7 @@ pub fn explicit_outlives_bounds<'tcx>(\n         .filter_map(move |kind| match kind {\n             ty::PredicateKind::Clause(ty::Clause::Projection(..))\n             | ty::PredicateKind::Clause(ty::Clause::Trait(..))\n+            | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n             | ty::PredicateKind::AliasEq(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::Subtype(..)"}, {"sha": "c1f0a6e98340de4396e21fb4708bf74a5c0a73dd", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -297,6 +297,9 @@ impl<'tcx> Elaborator<'tcx> {\n             ty::PredicateKind::AliasEq(..) => {\n                 // No\n             }\n+            ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => {\n+                // Nothing to elaborate\n+            }\n         }\n     }\n }"}, {"sha": "11fb1f80a111d2741b60af075534eee3aba61ccd", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -1595,6 +1595,8 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n                     Clause(Clause::TypeOutlives(..)) |\n                     Clause(Clause::RegionOutlives(..)) => \"lifetime\",\n \n+                    // `ConstArgHasType` is never global as `ct` is always a param\n+                    Clause(Clause::ConstArgHasType(..)) |\n                     // Ignore projections, as they can only be global\n                     // if the trait bound is global\n                     Clause(Clause::Projection(..)) |"}, {"sha": "91241ff404f4cbd485a50fa6b0f8b84ca27ef81e", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -251,6 +251,10 @@ impl FlagComputation {\n                 self.add_ty(ty);\n                 self.add_region(region);\n             }\n+            ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {\n+                self.add_const(ct);\n+                self.add_ty(ty);\n+            }\n             ty::PredicateKind::Subtype(ty::SubtypePredicate { a_is_expected: _, a, b }) => {\n                 self.add_ty(a);\n                 self.add_ty(b);"}, {"sha": "4b4f62b67f21ea97f0b426d5ac44a4aa5fd76e26", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -552,6 +552,7 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::Clause(Clause::RegionOutlives(_))\n             | PredicateKind::Clause(Clause::TypeOutlives(_))\n             | PredicateKind::Clause(Clause::Projection(_))\n+            | PredicateKind::Clause(Clause::ConstArgHasType(..))\n             | PredicateKind::AliasEq(..)\n             | PredicateKind::ObjectSafe(_)\n             | PredicateKind::ClosureKind(_, _, _)\n@@ -590,6 +591,10 @@ pub enum Clause<'tcx> {\n     /// `where <T as TraitRef>::Name == X`, approximately.\n     /// See the `ProjectionPredicate` struct for details.\n     Projection(ProjectionPredicate<'tcx>),\n+\n+    /// Ensures that a const generic argument to a parameter `const N: u8`\n+    /// is of type `u8`.\n+    ConstArgHasType(Const<'tcx>, Ty<'tcx>),\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n@@ -1193,6 +1198,7 @@ impl<'tcx> Predicate<'tcx> {\n         match predicate.skip_binder() {\n             PredicateKind::Clause(Clause::Trait(t)) => Some(predicate.rebind(t)),\n             PredicateKind::Clause(Clause::Projection(..))\n+            | PredicateKind::Clause(Clause::ConstArgHasType(..))\n             | PredicateKind::AliasEq(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n@@ -1213,6 +1219,7 @@ impl<'tcx> Predicate<'tcx> {\n         match predicate.skip_binder() {\n             PredicateKind::Clause(Clause::Projection(t)) => Some(predicate.rebind(t)),\n             PredicateKind::Clause(Clause::Trait(..))\n+            | PredicateKind::Clause(Clause::ConstArgHasType(..))\n             | PredicateKind::AliasEq(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n@@ -1233,6 +1240,7 @@ impl<'tcx> Predicate<'tcx> {\n         match predicate.skip_binder() {\n             PredicateKind::Clause(Clause::TypeOutlives(data)) => Some(predicate.rebind(data)),\n             PredicateKind::Clause(Clause::Trait(..))\n+            | PredicateKind::Clause(Clause::ConstArgHasType(..))\n             | PredicateKind::Clause(Clause::Projection(..))\n             | PredicateKind::AliasEq(..)\n             | PredicateKind::Subtype(..)"}, {"sha": "1e59983583b14c5d3a2fa81f9e27fbee66468935", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -2822,15 +2822,18 @@ define_print_and_forward_display! {\n             ty::PredicateKind::Clause(ty::Clause::RegionOutlives(predicate)) => p!(print(predicate)),\n             ty::PredicateKind::Clause(ty::Clause::TypeOutlives(predicate)) => p!(print(predicate)),\n             ty::PredicateKind::Clause(ty::Clause::Projection(predicate)) => p!(print(predicate)),\n+            ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {\n+                p!(\"the constant `\", print(ct), \"` has type `\", print(ty), \"`\")\n+            },\n             ty::PredicateKind::WellFormed(arg) => p!(print(arg), \" well-formed\"),\n             ty::PredicateKind::ObjectSafe(trait_def_id) => {\n                 p!(\"the trait `\", print_def_path(trait_def_id, &[]), \"` is object-safe\")\n             }\n-            ty::PredicateKind::ClosureKind(closure_def_id, _closure_substs, kind) => {\n-                p!(\"the closure `\",\n+            ty::PredicateKind::ClosureKind(closure_def_id, _closure_substs, kind) => p!(\n+                \"the closure `\",\n                 print_value_path(closure_def_id, &[]),\n-                write(\"` implements the trait `{}`\", kind))\n-            }\n+                write(\"` implements the trait `{}`\", kind)\n+            ),\n             ty::PredicateKind::ConstEvaluatable(ct) => {\n                 p!(\"the constant `\", print(ct), \"` can be evaluated\")\n             }"}, {"sha": "d8dbd04f43897b7e7fd69c20092ef0d92683c775", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -147,6 +147,7 @@ impl<'tcx> fmt::Debug for ty::Predicate<'tcx> {\n impl<'tcx> fmt::Debug for ty::Clause<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n+            ty::Clause::ConstArgHasType(ct, ty) => write!(f, \"ConstArgHasType({ct:?}, {ty:?})\"),\n             ty::Clause::Trait(ref a) => a.fmt(f),\n             ty::Clause::RegionOutlives(ref pair) => pair.fmt(f),\n             ty::Clause::TypeOutlives(ref pair) => pair.fmt(f),"}, {"sha": "217851ba1d93530424ce6b6a2bbc181c3faba1b5", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -290,6 +290,9 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                 ty::PredicateKind::Clause(ty::Clause::RegionOutlives(predicate)) => {\n                     self.compute_region_outlives_goal(Goal { param_env, predicate })\n                 }\n+                ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => {\n+                    unimplemented!()\n+                }\n                 ty::PredicateKind::Subtype(predicate) => {\n                     self.compute_subtype_goal(Goal { param_env, predicate })\n                 }"}, {"sha": "9776cc57af8e8618e367501c2c6c41885db187a6", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -830,6 +830,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                 // and these don't correspond to adding any new bounds to\n                 // the `ParamEnv`.\n                 ty::PredicateKind::WellFormed(..)\n+                | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                 | ty::PredicateKind::AliasEq(..)\n                 | ty::PredicateKind::ObjectSafe(..)\n                 | ty::PredicateKind::ClosureKind(..)"}, {"sha": "0265220081176a0291a87b8fcaf8ff830717676f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -1282,6 +1282,11 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         span,\n                         \"AliasEq predicate should never be the predicate cause of a SelectionError\"\n                     ),\n+\n+                    ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => {\n+                        // FIXME: don't know how selection error works so unsure when this is reachable (if it is)\n+                        unimplemented!()\n+                    }\n                 }\n             }\n "}, {"sha": "59be80236f81c3df53bdfe03ccecc74cd0d007a6", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -313,6 +313,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 }\n                 ty::PredicateKind::Clause(ty::Clause::RegionOutlives(_))\n                 | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(_))\n+                | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                 | ty::PredicateKind::WellFormed(_)\n                 | ty::PredicateKind::ObjectSafe(_)\n                 | ty::PredicateKind::ClosureKind(..)\n@@ -600,6 +601,9 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 ty::PredicateKind::AliasEq(..) => {\n                     bug!(\"AliasEq is only used for new solver\")\n                 }\n+                ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => {\n+                    unimplemented!()\n+                }\n             },\n         }\n     }"}, {"sha": "93c3364de8f5f0e617598c12910b19b479c5af7e", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -327,6 +327,10 @@ fn predicate_references_self<'tcx>(\n             // possible alternatives.\n             data.projection_ty.substs[1..].iter().any(has_self_ty).then_some(sp)\n         }\n+        ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(_ct, ty)) => {\n+            has_self_ty(&ty.into()).then_some(sp)\n+        }\n+\n         ty::PredicateKind::AliasEq(..) => bug!(\"`AliasEq` not allowed as assumption\"),\n \n         ty::PredicateKind::WellFormed(..)\n@@ -362,6 +366,7 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n                 trait_pred.def_id() == sized_def_id && trait_pred.self_ty().is_param(0)\n             }\n             ty::PredicateKind::Clause(ty::Clause::Projection(..))\n+            | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n             | ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))"}, {"sha": "2cfaaf1d376fba9d8afafe1b6020ecc8b93b4da2", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -993,6 +993,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     bug!(\"AliasEq is only used for new solver\")\n                 }\n                 ty::PredicateKind::Ambiguous => Ok(EvaluatedToAmbig),\n+                ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => {\n+                    unimplemented!()\n+                }\n             }\n         })\n     }"}, {"sha": "6a881c233db093eed446a5b0345d451068a371af", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -163,6 +163,10 @@ pub fn predicate_obligations<'tcx>(\n                 ty::TermKind::Const(c) => c.into(),\n             })\n         }\n+        ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {\n+            wf.compute(ct.into());\n+            wf.compute(ty.into());\n+        }\n         ty::PredicateKind::WellFormed(arg) => {\n             wf.compute(arg);\n         }\n@@ -922,6 +926,7 @@ pub(crate) fn required_region_bounds<'tcx>(\n             match obligation.predicate.kind().skip_binder() {\n                 ty::PredicateKind::Clause(ty::Clause::Projection(..))\n                 | ty::PredicateKind::Clause(ty::Clause::Trait(..))\n+                | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                 | ty::PredicateKind::Subtype(..)\n                 | ty::PredicateKind::Coerce(..)\n                 | ty::PredicateKind::WellFormed(..)"}, {"sha": "7635f4bfec3bad4df60b59394f0b487426708549", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -117,6 +117,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                     )),\n                 },\n                 ty::PredicateKind::ObjectSafe(..)\n+                | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                 | ty::PredicateKind::AliasEq(..)\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Subtype(..)\n@@ -212,6 +213,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n             // We can defer this, but ultimately we'll want to express\n             // some of these in terms of chalk operations.\n             ty::PredicateKind::ClosureKind(..)\n+            | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n             | ty::PredicateKind::AliasEq(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n@@ -646,6 +648,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n                 Some(chalk_ir::WhereClause::AliasEq(predicate.lower_into(interner)))\n             }\n             ty::PredicateKind::WellFormed(_ty) => None,\n+            ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => None,\n \n             ty::PredicateKind::ObjectSafe(..)\n             | ty::PredicateKind::AliasEq(..)\n@@ -780,6 +783,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<Ru\n             }\n             ty::PredicateKind::Clause(ty::Clause::TypeOutlives(_predicate)) => None,\n             ty::PredicateKind::WellFormed(_ty) => None,\n+            ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => None,\n \n             ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))\n             | ty::PredicateKind::AliasEq(..)"}, {"sha": "abf0c1c5f3e9ad55820d4fa35fa24aaf1df4923b", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -99,6 +99,9 @@ fn compute_implied_outlives_bounds<'tcx>(\n             };\n             match pred {\n                 ty::PredicateKind::Clause(ty::Clause::Trait(..))\n+                // FIXME(const_generics): Make sure that `<'a, 'b, const N: &'a &'b u32>` is sound\n+                // if we ever support that\n+                | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                 | ty::PredicateKind::Subtype(..)\n                 | ty::PredicateKind::Coerce(..)\n                 | ty::PredicateKind::Clause(ty::Clause::Projection(..))"}, {"sha": "2c18a034050742ea2a184d019245bfba4259fd89", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -60,6 +60,7 @@ fn not_outlives_predicate(p: ty::Predicate<'_>) -> bool {\n         | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..)) => false,\n         ty::PredicateKind::Clause(ty::Clause::Trait(..))\n         | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n+        | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n         | ty::PredicateKind::AliasEq(..)\n         | ty::PredicateKind::WellFormed(..)\n         | ty::PredicateKind::ObjectSafe(..)"}, {"sha": "0c70d31ed607e413c180f10e5009cd7a1fc89456", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -320,6 +320,7 @@ pub(crate) fn clean_predicate<'tcx>(\n         // FIXME(generic_const_exprs): should this do something?\n         ty::PredicateKind::ConstEvaluatable(..) => None,\n         ty::PredicateKind::WellFormed(..) => None,\n+        ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => None,\n \n         ty::PredicateKind::Subtype(..)\n         | ty::PredicateKind::AliasEq(..)"}, {"sha": "1a35fe05067fc2ec715765c4c3321dd8cc57a6db", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e919d7e348932287cc33ec70cdc6f59ab48de255/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919d7e348932287cc33ec70cdc6f59ab48de255/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=e919d7e348932287cc33ec70cdc6f59ab48de255", "patch": "@@ -30,7 +30,8 @@ pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: &Msrv)\n                     ty::Clause::RegionOutlives(_)\n                     | ty::Clause::TypeOutlives(_)\n                     | ty::Clause::Projection(_)\n-                    | ty::Clause::Trait(..),\n+                    | ty::Clause::Trait(..)\n+                    | ty::Clause::ConstArgHasType(..),\n                 )\n                 | ty::PredicateKind::WellFormed(_)\n                 | ty::PredicateKind::ConstEvaluatable(..)"}]}