{"sha": "c2de8fe29443d8c9c70da66dee2c99d4c8d04930", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZGU4ZmUyOTQ0M2Q4YzljNzBkYTY2ZGVlMmM5OWQ0YzhkMDQ5MzA=", "commit": {"author": {"name": "Chai T. Rex", "email": "ChaiTRex@users.noreply.github.com", "date": "2020-10-18T19:45:09Z"}, "committer": {"name": "Chai T. Rex", "email": "ChaiTRex@users.noreply.github.com", "date": "2020-10-18T19:45:09Z"}, "message": "Stabilize or_insert_with_key", "tree": {"sha": "626683e48816059c6b02c3d9e06cdccea2cfa2b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/626683e48816059c6b02c3d9e06cdccea2cfa2b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2de8fe29443d8c9c70da66dee2c99d4c8d04930", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2de8fe29443d8c9c70da66dee2c99d4c8d04930", "html_url": "https://github.com/rust-lang/rust/commit/c2de8fe29443d8c9c70da66dee2c99d4c8d04930", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2de8fe29443d8c9c70da66dee2c99d4c8d04930/comments", "author": {"login": "ChaiTRex", "id": 23159282, "node_id": "MDQ6VXNlcjIzMTU5Mjgy", "avatar_url": "https://avatars.githubusercontent.com/u/23159282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChaiTRex", "html_url": "https://github.com/ChaiTRex", "followers_url": "https://api.github.com/users/ChaiTRex/followers", "following_url": "https://api.github.com/users/ChaiTRex/following{/other_user}", "gists_url": "https://api.github.com/users/ChaiTRex/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChaiTRex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChaiTRex/subscriptions", "organizations_url": "https://api.github.com/users/ChaiTRex/orgs", "repos_url": "https://api.github.com/users/ChaiTRex/repos", "events_url": "https://api.github.com/users/ChaiTRex/events{/privacy}", "received_events_url": "https://api.github.com/users/ChaiTRex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChaiTRex", "id": 23159282, "node_id": "MDQ6VXNlcjIzMTU5Mjgy", "avatar_url": "https://avatars.githubusercontent.com/u/23159282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChaiTRex", "html_url": "https://github.com/ChaiTRex", "followers_url": "https://api.github.com/users/ChaiTRex/followers", "following_url": "https://api.github.com/users/ChaiTRex/following{/other_user}", "gists_url": "https://api.github.com/users/ChaiTRex/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChaiTRex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChaiTRex/subscriptions", "organizations_url": "https://api.github.com/users/ChaiTRex/orgs", "repos_url": "https://api.github.com/users/ChaiTRex/repos", "events_url": "https://api.github.com/users/ChaiTRex/events{/privacy}", "received_events_url": "https://api.github.com/users/ChaiTRex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98e16884b10630e6e6ef5f4a076af3409122401d", "url": "https://api.github.com/repos/rust-lang/rust/commits/98e16884b10630e6e6ef5f4a076af3409122401d", "html_url": "https://github.com/rust-lang/rust/commit/98e16884b10630e6e6ef5f4a076af3409122401d"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "7aca6fd93f2aea827004719d3b48381787adc823", "filename": "compiler/rustc_data_structures/src/sso/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2de8fe29443d8c9c70da66dee2c99d4c8d04930/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2de8fe29443d8c9c70da66dee2c99d4c8d04930/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs?ref=c2de8fe29443d8c9c70da66dee2c99d4c8d04930", "patch": "@@ -40,7 +40,7 @@ const SSO_ARRAY_SIZE: usize = 8;\n //   into_keys/into_values (unstable)\n //   all raw_entry-related\n //   PartialEq/Eq (requires sorting the array)\n-//   Entry::or_insert_with_key (unstable)\n+//   Entry::or_insert_with_key\n //   Vacant/Occupied entries and related\n //\n // FIXME: In HashMap most methods accepting key reference"}, {"sha": "3ff648fe24cffc0ca0cae72e77ae33bfff7916c5", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2de8fe29443d8c9c70da66dee2c99d4c8d04930/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2de8fe29443d8c9c70da66dee2c99d4c8d04930/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=c2de8fe29443d8c9c70da66dee2c99d4c8d04930", "patch": "@@ -116,15 +116,13 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n         }\n     }\n \n-    #[unstable(feature = \"or_insert_with_key\", issue = \"71024\")]\n     /// Ensures a value is in the entry by inserting, if empty, the result of the default function,\n     /// which takes the key as its argument, and returns a mutable reference to the value in the\n     /// entry.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(or_insert_with_key)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map: BTreeMap<&str, usize> = BTreeMap::new();\n@@ -134,6 +132,7 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n     /// assert_eq!(map[\"poneyland\"], 9);\n     /// ```\n     #[inline]\n+    #[stable(feature = \"or_insert_with_key\", since = \"1.49.0\")]\n     pub fn or_insert_with_key<F: FnOnce(&K) -> V>(self, default: F) -> &'a mut V {\n         match self {\n             Occupied(entry) => entry.into_mut(),"}, {"sha": "3d130c1628e042219abc1d3d312e066e988fcbc3", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2de8fe29443d8c9c70da66dee2c99d4c8d04930/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2de8fe29443d8c9c70da66dee2c99d4c8d04930/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=c2de8fe29443d8c9c70da66dee2c99d4c8d04930", "patch": "@@ -2229,7 +2229,6 @@ impl<'a, K, V> Entry<'a, K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(or_insert_with_key)]\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map: HashMap<&str, usize> = HashMap::new();\n@@ -2239,7 +2238,7 @@ impl<'a, K, V> Entry<'a, K, V> {\n     /// assert_eq!(map[\"poneyland\"], 9);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"or_insert_with_key\", issue = \"71024\")]\n+    #[stable(feature = \"or_insert_with_key\", since = \"1.49.0\")]\n     pub fn or_insert_with_key<F: FnOnce(&K) -> V>(self, default: F) -> &'a mut V {\n         match self {\n             Occupied(entry) => entry.into_mut(),"}]}