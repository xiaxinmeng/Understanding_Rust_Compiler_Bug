{"sha": "5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOWVmM2M4YjI4YzlhMjViZTc0YmMyZTQxMzk5YTRjNjg0ZjA3YjE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-15T13:10:58Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:39:34Z"}, "message": "Implement encoding/decoding unions in metadata\n\nAdd well-formedness check\nImplement some more missing code", "tree": {"sha": "7e8b57b6e8732ba791a50b0c25851a74f2e7f8c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e8b57b6e8732ba791a50b0c25851a74f2e7f8c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "html_url": "https://github.com/rust-lang/rust/commit/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6792bd99febc646f22814b6759e31e622850f405", "url": "https://api.github.com/repos/rust-lang/rust/commits/6792bd99febc646f22814b6759e31e622850f405", "html_url": "https://github.com/rust-lang/rust/commit/6792bd99febc646f22814b6759e31e622850f405"}], "stats": {"total": 157, "additions": 119, "deletions": 38}, "files": [{"sha": "a6835802f1cf9d3292a951fcd422131e52d09a81", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "patch": "@@ -414,7 +414,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n             }\n \n             hir::ExprStruct(_, ref fields, ref opt_with) => {\n-                self.walk_struct_expr(expr, fields, opt_with);\n+                self.walk_struct_expr(fields, opt_with);\n             }\n \n             hir::ExprTup(ref exprs) => {\n@@ -655,7 +655,6 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n     }\n \n     fn walk_struct_expr(&mut self,\n-                        _expr: &hir::Expr,\n                         fields: &[hir::Field],\n                         opt_with: &Option<P<hir::Expr>>) {\n         // Consume the expressions supplying values for each field.\n@@ -687,9 +686,6 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n-            ty::TyUnion(..) => {\n-                unimplemented_unions!();\n-            }\n             _ => {\n                 // the base expression should always evaluate to a\n                 // struct; however, when EUV is run during typeck, it"}, {"sha": "f9ca2484d7efcf6a32907d8b126f40e350e18dff", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "patch": "@@ -30,6 +30,7 @@ pub enum SimplifiedType {\n     TupleSimplifiedType(usize),\n     TraitSimplifiedType(DefId),\n     StructSimplifiedType(DefId),\n+    UnionSimplifiedType(DefId),\n     ClosureSimplifiedType(DefId),\n     AnonSimplifiedType(DefId),\n     FunctionSimplifiedType(usize),\n@@ -66,8 +67,8 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::TyStruct(def, _) => {\n             Some(StructSimplifiedType(def.did))\n         }\n-        ty::TyUnion(..) => {\n-            unimplemented_unions!();\n+        ty::TyUnion(def, _) => {\n+            Some(UnionSimplifiedType(def.did))\n         }\n         ty::TyRef(_, mt) => {\n             // since we introduce auto-refs during method lookup, we"}, {"sha": "8775f58d0b22b4f85e5cd9a3811b974840cda527", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "patch": "@@ -133,6 +133,7 @@ enum Family {\n     DefaultImpl,           // d\n     Trait,                 // I\n     Struct(VariantKind),   // S, s, u\n+    Union,                 // U\n     PublicField,           // g\n     InheritedField,        // N\n     Constant,              // C\n@@ -160,6 +161,7 @@ fn item_family(item: rbml::Doc) -> Family {\n       'S' => Struct(VariantKind::Struct),\n       's' => Struct(VariantKind::Tuple),\n       'u' => Struct(VariantKind::Unit),\n+      'U' => Union,\n       'g' => PublicField,\n       'N' => InheritedField,\n        c => bug!(\"unexpected family char: {}\", c)\n@@ -317,6 +319,7 @@ fn item_to_def_like(cdata: Cmd, item: rbml::Doc, did: DefId) -> DefLike {\n         ImmStatic => DlDef(Def::Static(did, false)),\n         MutStatic => DlDef(Def::Static(did, true)),\n         Struct(..) => DlDef(Def::Struct(did)),\n+        Union => DlDef(Def::Union(did)),\n         Fn        => DlDef(Def::Fn(did)),\n         Method | StaticMethod => {\n             DlDef(Def::Method(did))\n@@ -461,6 +464,10 @@ pub fn get_adt_def<'a, 'tcx>(cdata: Cmd,\n             (ty::AdtKind::Struct,\n              vec![get_struct_variant(cdata, doc, ctor_did.unwrap_or(did))])\n         }\n+        Union => {\n+            (ty::AdtKind::Union,\n+             vec![get_struct_variant(cdata, doc, did)])\n+        }\n         _ => bug!(\"get_adt_def called on a non-ADT {:?} - {:?}\",\n                   item_family(doc), did)\n     };"}, {"sha": "88add66b7dcb0a2059a20e94f7172a12417b9d94", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "patch": "@@ -306,7 +306,8 @@ pub fn check_safety_of_destructor_if_necessary<'a, 'gcx, 'tcx>(\n                                                      variant),\n                         ty::AdtKind::Struct => format!(\"struct {}\",\n                                                        tcx.item_path_str(def_id)),\n-                        ty::AdtKind::Union => unimplemented_unions!(),\n+                        ty::AdtKind::Union => format!(\"union {}\",\n+                                                       tcx.item_path_str(def_id)),\n                     };\n                     span_note!(\n                         &mut err,"}, {"sha": "e2954cecc9c46f61a1161e2ad1679d65d345e110", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "patch": "@@ -713,16 +713,18 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     fcx\n }\n \n-pub fn check_struct(ccx: &CrateCtxt, id: ast::NodeId, span: Span) {\n-    let tcx = ccx.tcx;\n-\n-    check_representable(tcx, span, id, \"struct\");\n+fn check_struct(ccx: &CrateCtxt, id: ast::NodeId, span: Span) {\n+    check_representable(ccx.tcx, span, id);\n \n-    if tcx.lookup_simd(ccx.tcx.map.local_def_id(id)) {\n-        check_simd(tcx, span, id);\n+    if ccx.tcx.lookup_simd(ccx.tcx.map.local_def_id(id)) {\n+        check_simd(ccx.tcx, span, id);\n     }\n }\n \n+fn check_union(ccx: &CrateCtxt, id: ast::NodeId, span: Span) {\n+    check_representable(ccx.tcx, span, id);\n+}\n+\n pub fn check_item_type<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n     debug!(\"check_item_type(it.id={}, it.name={})\",\n            it.id,\n@@ -763,7 +765,7 @@ pub fn check_item_type<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n         check_struct(ccx, it.id, it.span);\n       }\n       hir::ItemUnion(..) => {\n-        unimplemented_unions!();\n+        check_union(ccx, it.id, it.span);\n       }\n       hir::ItemTy(_, ref generics) => {\n         let pty_ty = ccx.tcx.node_id_to_type(it.id);\n@@ -1174,10 +1176,10 @@ fn check_const<'a, 'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n /// Checks whether a type can be represented in memory. In particular, it\n /// identifies types that contain themselves without indirection through a\n /// pointer, which would mean their size is unbounded.\n-pub fn check_representable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                     sp: Span,\n-                                     item_id: ast::NodeId,\n-                                     _designation: &str) -> bool {\n+fn check_representable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                 sp: Span,\n+                                 item_id: ast::NodeId)\n+                                 -> bool {\n     let rty = tcx.node_id_to_type(item_id);\n \n     // Check that it is possible to represent this type. This call identifies\n@@ -1277,7 +1279,7 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n         disr_vals.push(current_disr_val);\n     }\n \n-    check_representable(ccx.tcx, sp, id, \"enum\");\n+    check_representable(ccx.tcx, sp, id);\n }\n \n impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {"}, {"sha": "7cc3be0a8906248c3f62ab7cb62f65d794d71cbb", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "patch": "@@ -136,17 +136,21 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n                 self.check_item_type(item);\n             }\n             hir::ItemStruct(ref struct_def, ref ast_generics) => {\n-                self.check_type_defn(item, |fcx| {\n+                self.check_type_defn(item, false, |fcx| {\n                     vec![fcx.struct_variant(struct_def)]\n                 });\n \n                 self.check_variances_for_type_defn(item, ast_generics);\n             }\n-            hir::ItemUnion(..) => {\n-                unimplemented_unions!();\n+            hir::ItemUnion(ref struct_def, ref ast_generics) => {\n+                self.check_type_defn(item, true, |fcx| {\n+                    vec![fcx.struct_variant(struct_def)]\n+                });\n+\n+                self.check_variances_for_type_defn(item, ast_generics);\n             }\n             hir::ItemEnum(ref enum_def, ref ast_generics) => {\n-                self.check_type_defn(item, |fcx| {\n+                self.check_type_defn(item, false, |fcx| {\n                     fcx.enum_variants(enum_def)\n                 });\n \n@@ -219,24 +223,22 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n     }\n \n     /// In a type definition, we check that to ensure that the types of the fields are well-formed.\n-    fn check_type_defn<F>(&mut self, item: &hir::Item, mut lookup_fields: F) where\n-        F: for<'fcx, 'tcx> FnMut(&FnCtxt<'fcx, 'gcx, 'tcx>)\n-                                 -> Vec<AdtVariant<'tcx>>\n+    fn check_type_defn<F>(&mut self, item: &hir::Item, all_sized: bool, mut lookup_fields: F)\n+        where F: for<'fcx, 'tcx> FnMut(&FnCtxt<'fcx, 'gcx, 'tcx>) -> Vec<AdtVariant<'tcx>>\n     {\n         self.for_item(item).with_fcx(|fcx, this| {\n             let variants = lookup_fields(fcx);\n \n             for variant in &variants {\n                 // For DST, all intermediate types must be sized.\n-                if let Some((_, fields)) = variant.fields.split_last() {\n-                    for field in fields {\n-                        fcx.register_builtin_bound(\n-                            field.ty,\n-                            ty::BoundSized,\n-                            traits::ObligationCause::new(field.span,\n-                                                         fcx.body_id,\n-                                                         traits::FieldSized));\n-                    }\n+                let unsized_len = if all_sized || variant.fields.is_empty() { 0 } else { 1 };\n+                for field in &variant.fields[..variant.fields.len() - unsized_len] {\n+                    fcx.register_builtin_bound(\n+                        field.ty,\n+                        ty::BoundSized,\n+                        traits::ObligationCause::new(field.span,\n+                                                     fcx.body_id,\n+                                                     traits::FieldSized));\n                 }\n \n                 // All field types must be well-formed."}, {"sha": "b07d3e2f9067597ffa9f508df7b9c712bf364817", "filename": "src/test/compile-fail/attr-usage-repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Ftest%2Fcompile-fail%2Fattr-usage-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Ftest%2Fcompile-fail%2Fattr-usage-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-usage-repr.rs?ref=5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "patch": "@@ -11,7 +11,7 @@\n #![allow(dead_code)]\n #![feature(repr_simd)]\n \n-#[repr(C)] //~ ERROR: attribute should be applied to struct or enum\n+#[repr(C)] //~ ERROR: attribute should be applied to struct, enum or union\n fn f() {}\n \n #[repr(C)]"}, {"sha": "7f73d9076ec99eec8ec4665a1c16b7dc54843de0", "filename": "src/test/compile-fail/issue-31769.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Ftest%2Fcompile-fail%2Fissue-31769.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Ftest%2Fcompile-fail%2Fissue-31769.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31769.rs?ref=5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     #[inline] struct Foo;  //~ ERROR attribute should be applied to function\n-    #[repr(C)] fn foo() {} //~ ERROR attribute should be applied to struct or enum\n+    #[repr(C)] fn foo() {} //~ ERROR attribute should be applied to struct, enum or union\n }"}, {"sha": "cb4683c2a0e12bf0abfcef0579ae2a8913472541", "filename": "src/test/compile-fail/union-nonrepresentable.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Ftest%2Fcompile-fail%2Funion-nonrepresentable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Ftest%2Fcompile-fail%2Funion-nonrepresentable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion-nonrepresentable.rs?ref=5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+union U { //~ ERROR recursive type `U` has infinite size\n+    a: u8,\n+    b: U,\n+}\n+\n+fn main() {}"}, {"sha": "381122406d71ff66255d740bb54d49dce757810a", "filename": "src/test/compile-fail/union-unsized.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Ftest%2Fcompile-fail%2Funion-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Ftest%2Fcompile-fail%2Funion-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion-unsized.rs?ref=5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+union U {\n+    a: str, //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "dc0ca7c81c00952d455f688bd61f0921015b9212", "filename": "src/test/run-pass/auxiliary/union.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Ftest%2Frun-pass%2Fauxiliary%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Ftest%2Frun-pass%2Fauxiliary%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Funion.rs?ref=5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+pub union U {\n+    pub a: u8,\n+    b: u16,\n+}"}, {"sha": "2a76c96ef25f545b518bdb1a7f8c7a2a579015a1", "filename": "src/test/run-pass/union-xcrate.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Ftest%2Frun-pass%2Funion-xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1/src%2Ftest%2Frun-pass%2Funion-xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion-xcrate.rs?ref=5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:union.rs\n+\n+// #![feature(untagged_unions)]\n+\n+extern crate union;\n+\n+type A = union::U;\n+\n+fn main() {\n+    assert_eq!(std::mem::size_of::<A>(), 8);\n+}"}]}