{"sha": "204b27937c488eb7c1b81c31d56779861ff488c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNGIyNzkzN2M0ODhlYjdjMWI4MWMzMWQ1Njc3OTg2MWZmNDg4YzM=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-02-25T16:54:51Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-02-27T05:16:02Z"}, "message": "lint for `into_iter().count()`", "tree": {"sha": "e3ec67f15b38c96683a447f542488dea0f95d90c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3ec67f15b38c96683a447f542488dea0f95d90c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/204b27937c488eb7c1b81c31d56779861ff488c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/204b27937c488eb7c1b81c31d56779861ff488c3", "html_url": "https://github.com/rust-lang/rust/commit/204b27937c488eb7c1b81c31d56779861ff488c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/204b27937c488eb7c1b81c31d56779861ff488c3/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7223ee6590bb74e2a7ad02361b51cfa58178c740", "url": "https://api.github.com/repos/rust-lang/rust/commits/7223ee6590bb74e2a7ad02361b51cfa58178c740", "html_url": "https://github.com/rust-lang/rust/commit/7223ee6590bb74e2a7ad02361b51cfa58178c740"}], "stats": {"total": 199, "additions": 116, "deletions": 83}, "files": [{"sha": "e5509ee2c4e0f9dc35fb6599faa1510eb6fce974", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/204b27937c488eb7c1b81c31d56779861ff488c3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b27937c488eb7c1b81c31d56779861ff488c3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=204b27937c488eb7c1b81c31d56779861ff488c3", "patch": "@@ -1691,7 +1691,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 lint_search_is_some(cx, expr, \"rposition\", arg_lists[1], arg_lists[0], method_spans[1])\n             },\n             [\"extend\", ..] => lint_extend(cx, expr, arg_lists[0]),\n-            [\"count\", \"iter\"] => lint_iter_count(cx, expr, &arg_lists[1], false),\n+            [\"count\", \"into_iter\" | \"iter\"] => lint_iter_count(cx, expr, &arg_lists[1], false),\n             [\"count\", \"iter_mut\"] => lint_iter_count(cx, expr, &arg_lists[1], true),\n             [\"nth\", \"iter\"] => lint_iter_nth(cx, expr, &arg_lists, false),\n             [\"nth\", \"iter_mut\"] => lint_iter_nth(cx, expr, &arg_lists, true),\n@@ -2663,6 +2663,13 @@ fn lint_iter_next<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, iter_\n \n fn lint_iter_count<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, iter_args: &'tcx [Expr<'tcx>], is_mut: bool) {\n     let mut_str = if is_mut { \"_mut\" } else { \"\" };\n+    let iter_method = if method_chain_args(expr, &[format!(\"iter{}\", mut_str).as_str(), \"count\"]).is_some() {\n+        \"iter\"\n+    } else if method_chain_args(expr, &[\"into_iter\", \"count\"]).is_some() {\n+        \"into_iter\"\n+    } else {\n+        return;\n+    };\n     if_chain! {\n         let caller_type = if derefs_to_slice(cx, &iter_args[0], cx.typeck_results().expr_ty(&iter_args[0])).is_some() {\n             Some(\"slice\")\n@@ -2682,7 +2689,7 @@ fn lint_iter_count<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, iter_args: &'t\n                 cx,\n                 ITER_COUNT,\n                 expr.span,\n-                &format!(\"called `.iter{}().count()` on a `{}`\", mut_str, caller_type),\n+                &format!(\"called `.{}{}().count()` on a `{}`\", iter_method, mut_str, caller_type),\n                 \"try\",\n                 format!(\n                     \"{}.len()\","}, {"sha": "c8f896408479fc71f56a435102f9fd8cf81e2889", "filename": "tests/ui/iter_count.fixed", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/204b27937c488eb7c1b81c31d56779861ff488c3/tests%2Fui%2Fiter_count.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/204b27937c488eb7c1b81c31d56779861ff488c3/tests%2Fui%2Fiter_count.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_count.fixed?ref=204b27937c488eb7c1b81c31d56779861ff488c3", "patch": "@@ -2,8 +2,13 @@\n // aux-build:option_helpers.rs\n \n #![warn(clippy::iter_count)]\n-#![allow(unused_variables)]\n-#![allow(unused_mut)]\n+#![allow(\n+    unused_variables,\n+    array_into_iter,\n+    unused_mut,\n+    clippy::into_iter_on_ref,\n+    clippy::unnecessary_operation\n+)]\n \n extern crate option_helpers;\n \n@@ -22,37 +27,36 @@ impl HasIter {\n     fn iter_mut(self) -> IteratorFalsePositives {\n         IteratorFalsePositives { foo: 0 }\n     }\n+\n+    fn into_iter(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n }\n \n fn main() {\n-    let mut some_vec = vec![0, 1, 2, 3];\n+    let mut vec = vec![0, 1, 2, 3];\n     let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n-    let mut some_vec_deque: VecDeque<_> = some_vec.iter().cloned().collect();\n-    let mut some_hash_set = HashSet::new();\n-    some_hash_set.insert(1);\n-\n-    {\n-        // Make sure we lint `.iter()` for relevant types.\n-        let bad_vec = some_vec.len();\n-        let bad_slice = &some_vec[..].len();\n-        let bad_boxed_slice = boxed_slice.len();\n-        let bad_vec_deque = some_vec_deque.len();\n-        let bad_hash_set = some_hash_set.len();\n-    }\n+    let mut vec_deque: VecDeque<_> = vec.iter().cloned().collect();\n+    let mut hash_set = HashSet::new();\n+    hash_set.insert(1);\n \n-    {\n-        // Make sure we lint `.iter_mut()` for relevant types.\n-        let bad_vec = some_vec.len();\n-    }\n-    {\n-        let bad_slice = &some_vec[..].len();\n-    }\n-    {\n-        let bad_vec_deque = some_vec_deque.len();\n-    }\n+    &vec[..].len();\n+    vec.len();\n+    boxed_slice.len();\n+    vec_deque.len();\n+    hash_set.len();\n+\n+    vec.len();\n+    &vec[..].len();\n+    vec_deque.len();\n+\n+    &vec[..].len();\n+    vec.len();\n+    vec_deque.len();\n \n     // Make sure we don't lint for non-relevant types.\n     let false_positive = HasIter;\n-    let ok = false_positive.iter().count();\n-    let ok_mut = false_positive.iter_mut().count();\n+    false_positive.iter().count();\n+    false_positive.iter_mut().count();\n+    false_positive.into_iter().count();\n }"}, {"sha": "8ea17ef34fa63a7effff6966a82976b1ff174e65", "filename": "tests/ui/iter_count.rs", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/204b27937c488eb7c1b81c31d56779861ff488c3/tests%2Fui%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204b27937c488eb7c1b81c31d56779861ff488c3/tests%2Fui%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_count.rs?ref=204b27937c488eb7c1b81c31d56779861ff488c3", "patch": "@@ -2,8 +2,13 @@\n // aux-build:option_helpers.rs\n \n #![warn(clippy::iter_count)]\n-#![allow(unused_variables)]\n-#![allow(unused_mut)]\n+#![allow(\n+    unused_variables,\n+    array_into_iter,\n+    unused_mut,\n+    clippy::into_iter_on_ref,\n+    clippy::unnecessary_operation\n+)]\n \n extern crate option_helpers;\n \n@@ -22,37 +27,36 @@ impl HasIter {\n     fn iter_mut(self) -> IteratorFalsePositives {\n         IteratorFalsePositives { foo: 0 }\n     }\n+\n+    fn into_iter(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n }\n \n fn main() {\n-    let mut some_vec = vec![0, 1, 2, 3];\n+    let mut vec = vec![0, 1, 2, 3];\n     let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n-    let mut some_vec_deque: VecDeque<_> = some_vec.iter().cloned().collect();\n-    let mut some_hash_set = HashSet::new();\n-    some_hash_set.insert(1);\n-\n-    {\n-        // Make sure we lint `.iter()` for relevant types.\n-        let bad_vec = some_vec.iter().count();\n-        let bad_slice = &some_vec[..].iter().count();\n-        let bad_boxed_slice = boxed_slice.iter().count();\n-        let bad_vec_deque = some_vec_deque.iter().count();\n-        let bad_hash_set = some_hash_set.iter().count();\n-    }\n+    let mut vec_deque: VecDeque<_> = vec.iter().cloned().collect();\n+    let mut hash_set = HashSet::new();\n+    hash_set.insert(1);\n \n-    {\n-        // Make sure we lint `.iter_mut()` for relevant types.\n-        let bad_vec = some_vec.iter_mut().count();\n-    }\n-    {\n-        let bad_slice = &some_vec[..].iter_mut().count();\n-    }\n-    {\n-        let bad_vec_deque = some_vec_deque.iter_mut().count();\n-    }\n+    &vec[..].iter().count();\n+    vec.iter().count();\n+    boxed_slice.iter().count();\n+    vec_deque.iter().count();\n+    hash_set.iter().count();\n+\n+    vec.iter_mut().count();\n+    &vec[..].iter_mut().count();\n+    vec_deque.iter_mut().count();\n+\n+    &vec[..].into_iter().count();\n+    vec.into_iter().count();\n+    vec_deque.into_iter().count();\n \n     // Make sure we don't lint for non-relevant types.\n     let false_positive = HasIter;\n-    let ok = false_positive.iter().count();\n-    let ok_mut = false_positive.iter_mut().count();\n+    false_positive.iter().count();\n+    false_positive.iter_mut().count();\n+    false_positive.into_iter().count();\n }"}, {"sha": "0820c0014434b5c9dd3fc69208dc6229f8e268d2", "filename": "tests/ui/iter_count.stderr", "status": "modified", "additions": 45, "deletions": 27, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/204b27937c488eb7c1b81c31d56779861ff488c3/tests%2Fui%2Fiter_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/204b27937c488eb7c1b81c31d56779861ff488c3/tests%2Fui%2Fiter_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_count.stderr?ref=204b27937c488eb7c1b81c31d56779861ff488c3", "patch": "@@ -1,52 +1,70 @@\n-error: called `.iter().count()` on a `Vec`\n-  --> $DIR/iter_count.rs:36:23\n+error: called `.iter().count()` on a `slice`\n+  --> $DIR/iter_count.rs:43:6\n    |\n-LL |         let bad_vec = some_vec.iter().count();\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_vec.len()`\n+LL |     &vec[..].iter().count();\n+   |      ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n    |\n    = note: `-D clippy::iter-count` implied by `-D warnings`\n \n-error: called `.iter().count()` on a `slice`\n-  --> $DIR/iter_count.rs:37:26\n+error: called `.iter().count()` on a `Vec`\n+  --> $DIR/iter_count.rs:44:5\n    |\n-LL |         let bad_slice = &some_vec[..].iter().count();\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_vec[..].len()`\n+LL |     vec.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n \n error: called `.iter().count()` on a `slice`\n-  --> $DIR/iter_count.rs:38:31\n+  --> $DIR/iter_count.rs:45:5\n    |\n-LL |         let bad_boxed_slice = boxed_slice.iter().count();\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `boxed_slice.len()`\n+LL |     boxed_slice.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `boxed_slice.len()`\n \n error: called `.iter().count()` on a `VecDeque`\n-  --> $DIR/iter_count.rs:39:29\n+  --> $DIR/iter_count.rs:46:5\n    |\n-LL |         let bad_vec_deque = some_vec_deque.iter().count();\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_vec_deque.len()`\n+LL |     vec_deque.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n \n error: called `.iter().count()` on a `std::iter::Iterator`\n-  --> $DIR/iter_count.rs:40:28\n+  --> $DIR/iter_count.rs:47:5\n    |\n-LL |         let bad_hash_set = some_hash_set.iter().count();\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_hash_set.len()`\n+LL |     hash_set.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_set.len()`\n \n error: called `.iter_mut().count()` on a `Vec`\n-  --> $DIR/iter_count.rs:45:23\n+  --> $DIR/iter_count.rs:49:5\n    |\n-LL |         let bad_vec = some_vec.iter_mut().count();\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_vec.len()`\n+LL |     vec.iter_mut().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n \n error: called `.iter_mut().count()` on a `slice`\n-  --> $DIR/iter_count.rs:48:26\n+  --> $DIR/iter_count.rs:50:6\n    |\n-LL |         let bad_slice = &some_vec[..].iter_mut().count();\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_vec[..].len()`\n+LL |     &vec[..].iter_mut().count();\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n \n error: called `.iter_mut().count()` on a `VecDeque`\n-  --> $DIR/iter_count.rs:51:29\n+  --> $DIR/iter_count.rs:51:5\n+   |\n+LL |     vec_deque.iter_mut().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n+\n+error: called `.into_iter().count()` on a `slice`\n+  --> $DIR/iter_count.rs:53:6\n+   |\n+LL |     &vec[..].into_iter().count();\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n+\n+error: called `.into_iter().count()` on a `Vec`\n+  --> $DIR/iter_count.rs:54:5\n+   |\n+LL |     vec.into_iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n+\n+error: called `.into_iter().count()` on a `VecDeque`\n+  --> $DIR/iter_count.rs:55:5\n    |\n-LL |         let bad_vec_deque = some_vec_deque.iter_mut().count();\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_vec_deque.len()`\n+LL |     vec_deque.into_iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 11 previous errors\n "}]}