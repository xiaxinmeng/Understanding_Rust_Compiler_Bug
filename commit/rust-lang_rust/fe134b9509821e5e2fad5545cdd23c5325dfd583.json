{"sha": "fe134b9509821e5e2fad5545cdd23c5325dfd583", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMTM0Yjk1MDk4MjFlNWUyZmFkNTU0NWNkZDIzYzUzMjVkZmQ1ODM=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-18T16:46:37Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-20T18:30:58Z"}, "message": "dlist: Implement Clone for immutable iterators", "tree": {"sha": "a02b9ea2cbab8a014ad5234f8d4cdef1fe0fbd38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a02b9ea2cbab8a014ad5234f8d4cdef1fe0fbd38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe134b9509821e5e2fad5545cdd23c5325dfd583", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe134b9509821e5e2fad5545cdd23c5325dfd583", "html_url": "https://github.com/rust-lang/rust/commit/fe134b9509821e5e2fad5545cdd23c5325dfd583", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe134b9509821e5e2fad5545cdd23c5325dfd583/comments", "author": null, "committer": null, "parents": [{"sha": "24b6901b26f0bde00706a5cbc16ffc29296ea40d", "url": "https://api.github.com/repos/rust-lang/rust/commits/24b6901b26f0bde00706a5cbc16ffc29296ea40d", "html_url": "https://github.com/rust-lang/rust/commit/24b6901b26f0bde00706a5cbc16ffc29296ea40d"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "fe05b48988eff956d261ecc32f554924745a77af", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fe134b9509821e5e2fad5545cdd23c5325dfd583/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe134b9509821e5e2fad5545cdd23c5325dfd583/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=fe134b9509821e5e2fad5545cdd23c5325dfd583", "patch": "@@ -47,6 +47,7 @@ struct Node<T> {\n }\n \n /// Double-ended DList iterator\n+#[deriving(Clone)]\n pub struct DListIterator<'self, T> {\n     priv head: &'self Link<T>,\n     priv tail: Rawlink<Node<T>>,\n@@ -62,6 +63,7 @@ pub struct MutDListIterator<'self, T> {\n }\n \n /// DList consuming iterator\n+#[deriving(Clone)]\n pub struct ConsumeIterator<T> {\n     priv list: DList<T>\n }\n@@ -93,6 +95,13 @@ impl<T> Rawlink<T> {\n     }\n }\n \n+impl<T> Clone for Rawlink<T> {\n+    #[inline]\n+    fn clone(&self) -> Rawlink<T> {\n+        Rawlink{p: self.p}\n+    }\n+}\n+\n /// Set the .prev field on `next`, then return `Some(next)`\n fn link_with_prev<T>(mut next: ~Node<T>, prev: Rawlink<Node<T>>) -> Link<T> {\n     next.prev = prev;\n@@ -686,6 +695,20 @@ mod tests {\n         assert_eq!(it.next(), None);\n     }\n \n+    #[test]\n+    fn test_iterator_clone() {\n+        let mut n = DList::new();\n+        n.push_back(2);\n+        n.push_back(3);\n+        n.push_back(4);\n+        let mut it = n.iter();\n+        it.next();\n+        let mut jt = it.clone();\n+        assert_eq!(it.next(), jt.next());\n+        assert_eq!(it.next_back(), jt.next_back());\n+        assert_eq!(it.next(), jt.next());\n+    }\n+\n     #[test]\n     fn test_iterator_double_end() {\n         let mut n = DList::new();"}]}