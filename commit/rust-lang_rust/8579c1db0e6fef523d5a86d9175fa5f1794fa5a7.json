{"sha": "8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NzljMWRiMGU2ZmVmNTIzZDVhODZkOTE3NWZhNWYxNzk0ZmE1YTc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-04T05:15:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-04T05:15:58Z"}, "message": "Merge pull request #1495 from topecongiro/poor-formatting/closure\n\nFix weird indentation inside closures", "tree": {"sha": "1a19f187766ff5fff8537909155f541f0accab69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a19f187766ff5fff8537909155f541f0accab69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "html_url": "https://github.com/rust-lang/rust/commit/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c89c01efc0b14f5dff93088243d833b30a9e3ad4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c89c01efc0b14f5dff93088243d833b30a9e3ad4", "html_url": "https://github.com/rust-lang/rust/commit/c89c01efc0b14f5dff93088243d833b30a9e3ad4"}, {"sha": "58d957be3fd559787b7f489ee5f1089ce9a87f30", "url": "https://api.github.com/repos/rust-lang/rust/commits/58d957be3fd559787b7f489ee5f1089ce9a87f30", "html_url": "https://github.com/rust-lang/rust/commit/58d957be3fd559787b7f489ee5f1089ce9a87f30"}], "stats": {"total": 121, "additions": 79, "deletions": 42}, "files": [{"sha": "3d148d19a55fd003f63d8f157a23deb7aef78d53", "filename": "src/chains.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "patch": "@@ -176,9 +176,15 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         .fold(0, |a, b| a + first_line_width(b)) + parent_rewrite.len();\n     let one_line_len = rewrites.iter().fold(0, |a, r| a + r.len()) + parent_rewrite.len();\n \n-    let veto_single_line = if one_line_len > context.config.chain_one_line_max - 1 &&\n-                              rewrites.len() > 1 {\n-        true\n+    let veto_single_line = if one_line_len > context.config.chain_one_line_max {\n+        if rewrites.len() > 1 {\n+            true\n+        } else if rewrites.len() == 1 {\n+            let one_line_len = parent_rewrite.len() + first_line_width(&rewrites[0]);\n+            one_line_len > shape.width\n+        } else {\n+            false\n+        }\n     } else if context.config.take_source_hints && subexpr_list.len() > 1 {\n         // Look at the source code. Unless all chain elements start on the same\n         // line, we won't consider putting them on a single line either."}, {"sha": "5876409a9fa22e95c488dae8a1cb399cd4e746e8", "filename": "src/expr.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "patch": "@@ -577,22 +577,25 @@ fn rewrite_closure(capture: ast::CaptureBy,\n                              -> Option<String> {\n         // Start with visual indent, then fall back to block indent if the\n         // closure is large.\n-        let rewrite = try_opt!(block.rewrite(&context, shape));\n-\n-        let block_threshold = context.config.closure_block_indent_threshold;\n-        if block_threshold < 0 || rewrite.matches('\\n').count() <= block_threshold as usize {\n-            if let Some(rewrite) = wrap_str(rewrite, context.config.max_width, shape) {\n-                return Some(format!(\"{} {}\", prefix, rewrite));\n+        if let Some(block_str) = block.rewrite(&context, shape) {\n+            let block_threshold = context.config.closure_block_indent_threshold;\n+            if block_threshold < 0 || block_str.matches('\\n').count() <= block_threshold as usize {\n+                if let Some(block_str) = block_str.rewrite(context, shape) {\n+                    return Some(format!(\"{} {}\", prefix, block_str));\n+                }\n             }\n         }\n \n         // The body of the closure is big enough to be block indented, that\n         // means we must re-format.\n-        let block_shape = shape.block();\n-        let rewrite = try_opt!(block.rewrite(&context, block_shape));\n+        let block_shape = Shape {\n+            width: context.config.max_width - shape.block().indent.width(),\n+            ..shape.block()\n+        };\n+        let block_str = try_opt!(block.rewrite(&context, block_shape));\n         Some(format!(\"{} {}\",\n                      prefix,\n-                     try_opt!(wrap_str(rewrite, block_shape.width, block_shape))))\n+                     try_opt!(block_str.rewrite(context, block_shape))))\n     }\n }\n \n@@ -679,8 +682,11 @@ impl Rewrite for ast::Block {\n         };\n \n         visitor.visit_block(self);\n-\n-        Some(format!(\"{}{}\", prefix, visitor.buffer))\n+        if visitor.failed {\n+            None\n+        } else {\n+            Some(format!(\"{}{}\", prefix, visitor.buffer))\n+        }\n     }\n }\n "}, {"sha": "a20c8c4d3b3700f96af07f4b70a39fd7e916bb71", "filename": "src/file_lines.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "patch": "@@ -123,10 +123,8 @@ impl FileLines {\n             Some(ref map) => map,\n         };\n \n-        match canonicalize_path_string(range.file_name()).and_then(|canonical| {\n-                                                                       map.get_vec(&canonical)\n-                                                                           .ok_or(())\n-                                                                   }) {\n+        match canonicalize_path_string(range.file_name())\n+                  .and_then(|canonical| map.get_vec(&canonical).ok_or(())) {\n             Ok(ranges) => ranges.iter().any(|r| r.contains(Range::from(range))),\n             Err(_) => false,\n         }\n@@ -140,10 +138,8 @@ impl FileLines {\n             Some(ref map) => map,\n         };\n \n-        match canonicalize_path_string(range.file_name()).and_then(|canonical| {\n-                                                                       map.get_vec(&canonical)\n-                                                                           .ok_or(())\n-                                                                   }) {\n+        match canonicalize_path_string(range.file_name())\n+                  .and_then(|canonical| map.get_vec(&canonical).ok_or(())) {\n             Ok(ranges) => ranges.iter().any(|r| r.intersects(Range::from(range))),\n             Err(_) => false,\n         }"}, {"sha": "0b2ca5a52cbb8dbe3740921385cebf49abee66ac", "filename": "src/items.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "patch": "@@ -278,8 +278,7 @@ impl<'a> FmtVisitor<'a> {\n             result.push(' ');\n         }\n \n-        self.single_line_fn(&result, block)\n-            .or_else(|| Some(result))\n+        self.single_line_fn(&result, block).or_else(|| Some(result))\n     }\n \n     pub fn rewrite_required_fn(&mut self,\n@@ -912,9 +911,7 @@ fn format_struct_struct(context: &RewriteContext,\n         let snippet = context.snippet(mk_sp(body_lo, span.hi - BytePos(1)));\n         if snippet.trim().is_empty() {\n             // `struct S {}`\n-        } else if snippet\n-                      .trim_right_matches(&[' ', '\\t'][..])\n-                      .ends_with('\\n') {\n+        } else if snippet.trim_right_matches(&[' ', '\\t'][..]).ends_with('\\n') {\n             // fix indent\n             result.push_str(&snippet.trim_right());\n             result.push('\\n');\n@@ -1030,9 +1027,7 @@ fn format_tuple_struct(context: &RewriteContext,\n         let snippet = context.snippet(mk_sp(body_lo, context.codemap.span_before(span, \")\")));\n         if snippet.is_empty() {\n             // `struct S ()`\n-        } else if snippet\n-                      .trim_right_matches(&[' ', '\\t'][..])\n-                      .ends_with('\\n') {\n+        } else if snippet.trim_right_matches(&[' ', '\\t'][..]).ends_with('\\n') {\n             result.push_str(&snippet.trim_right());\n             result.push('\\n');\n             result.push_str(&offset.to_string(context.config));\n@@ -1229,8 +1224,7 @@ impl Rewrite for ast::StructField {\n         let type_offset = shape.indent.block_indent(context.config);\n         let rewrite_type_in_next_line = || {\n             let budget = try_opt!(context.config.max_width.checked_sub(type_offset.width()));\n-            self.ty\n-                .rewrite(context, Shape::legacy(budget, type_offset))\n+            self.ty.rewrite(context, Shape::legacy(budget, type_offset))\n         };\n \n         let last_line_width = last_line_width(&result) + type_annotation_spacing.1.len();"}, {"sha": "37a569ce67ddbb29a192d93cf72e1c2e275453cd", "filename": "src/string.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "patch": "@@ -51,10 +51,7 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n     let ender_length = fmt.line_end.len();\n     // If we cannot put at least a single character per line, the rewrite won't\n     // succeed.\n-    let max_chars = try_opt!(shape\n-                                 .width\n-                                 .checked_sub(fmt.opener.len() + ender_length + 1)) +\n-                    1;\n+    let max_chars = try_opt!(shape.width.checked_sub(fmt.opener.len() + ender_length + 1)) + 1;\n \n     // Snip a line at a time from `orig` until it is used up. Push the snippet\n     // onto result."}, {"sha": "e2a95c66832455dc142e50188372dc1622622386", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "patch": "@@ -704,9 +704,9 @@ fn rewrite_bare_fn(bare_fn: &ast::BareFnTy,\n                                       .lifetimes\n                                       .iter()\n                                       .map(|l| {\n-                                               l.rewrite(context,\n+            l.rewrite(context,\n                       Shape::legacy(try_opt!(shape.width.checked_sub(6)), shape.indent + 4))\n-                                           })\n+        })\n                                       .intersperse(Some(\", \".to_string()))\n                                       .collect::<Option<String>>()));\n         result.push_str(\"> \");"}, {"sha": "e2003d1653a2ce4d83dc208411dc275543909a76", "filename": "src/visitor.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "patch": "@@ -39,6 +39,7 @@ pub struct FmtVisitor<'a> {\n     // FIXME: use an RAII util or closure for indenting\n     pub block_indent: Indent,\n     pub config: &'a Config,\n+    pub failed: bool,\n }\n \n impl<'a> FmtVisitor<'a> {\n@@ -65,6 +66,9 @@ impl<'a> FmtVisitor<'a> {\n                                            Shape::legacy(self.config.max_width -\n                                                          self.block_indent.width(),\n                                                          self.block_indent));\n+                if rewrite.is_none() {\n+                    self.failed = true;\n+                }\n                 self.push_rewrite(stmt.span, rewrite);\n             }\n             ast::StmtKind::Mac(ref mac) => {\n@@ -457,6 +461,7 @@ impl<'a> FmtVisitor<'a> {\n                 alignment: 0,\n             },\n             config: config,\n+            failed: false,\n         }\n     }\n "}, {"sha": "20d320ccde89d3830d37eae10186dee6fbff063b", "filename": "tests/source/chains.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/tests%2Fsource%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/tests%2Fsource%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains.rs?ref=8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "patch": "@@ -13,6 +13,8 @@ fn main() {\n \n     bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc.ddddddddddddddddddddddddddd.eeeeeeee();\n \n+    let f = fooooooooooooooooooooooooooooooooooooooooooooooooooo.baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaar;\n+\n     // Test case where first chain element isn't a path, but is shorter than\n     // the size of a tab.\n     x()"}, {"sha": "f6e8c0930822548abd09ef678cb270f0ddbee761", "filename": "tests/source/closure.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/tests%2Fsource%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/tests%2Fsource%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fclosure.rs?ref=8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "patch": "@@ -89,3 +89,18 @@ fn foo() {\n         };\n     });\n }\n+\n+fn issue1405() {\n+    open_raw_fd(fd, b'r')\n+        .and_then(|file| Capture::new_raw(None, |_, err| unsafe {\n+            raw::pcap_fopen_offline(file, err)\n+        }));\n+}\n+\n+fn issue1466() {\n+    let vertex_buffer = frame.scope(|ctx| {\n+        let buffer =\n+            ctx.create_host_visible_buffer::<VertexBuffer<Vertex>>(&vertices);\n+        ctx.create_device_local_buffer(buffer)\n+    });\n+}"}, {"sha": "d77709422b2857b4eba8eb9f85540ea9cf75ec3b", "filename": "tests/source/configs-chain_indent-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/tests%2Fsource%2Fconfigs-chain_indent-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/tests%2Fsource%2Fconfigs-chain_indent-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-chain_indent-block.rs?ref=8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "patch": "@@ -2,5 +2,5 @@\n // Chain indent\n \n fn main() {\n-    let lorem = ipsum.dolor().sit().amet().consectetur().adipiscing().elit();\n+    let lorem = ipsum.dolor().sit().amet().consectetur().adipiscing().elite();\n }"}, {"sha": "67714d32045b4ebec2e9f09166f232e8b76f8074", "filename": "tests/source/configs-chain_indent-visual.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/tests%2Fsource%2Fconfigs-chain_indent-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/tests%2Fsource%2Fconfigs-chain_indent-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-chain_indent-visual.rs?ref=8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "patch": "@@ -2,5 +2,5 @@\n // Chain indent\n \n fn main() {\n-    let lorem = ipsum.dolor().sit().amet().consectetur().adipiscing().elit();\n+    let lorem = ipsum.dolor().sit().amet().consectetur().adipiscing().elite();\n }"}, {"sha": "b8e47607b8329f3a4e07a43ff3a2e8dddceceb1f", "filename": "tests/target/chains.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "patch": "@@ -13,6 +13,9 @@ fn main() {\n         .ddddddddddddddddddddddddddd\n         .eeeeeeee();\n \n+    let f = fooooooooooooooooooooooooooooooooooooooooooooooooooo\n+        .baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaar;\n+\n     // Test case where first chain element isn't a path, but is shorter than\n     // the size of a tab.\n     x().y(|| match cond() {"}, {"sha": "f6d9a855a331b22bfd5fb76445c4accbc54c0543", "filename": "tests/target/closure.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/tests%2Ftarget%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/tests%2Ftarget%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure.rs?ref=8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "patch": "@@ -106,3 +106,16 @@ fn foo() {\n                              };\n                          });\n }\n+\n+fn issue1405() {\n+    open_raw_fd(fd, b'r').and_then(|file| {\n+        Capture::new_raw(None, |_, err| unsafe { raw::pcap_fopen_offline(file, err) })\n+    });\n+}\n+\n+fn issue1466() {\n+    let vertex_buffer = frame.scope(|ctx| {\n+        let buffer = ctx.create_host_visible_buffer::<VertexBuffer<Vertex>>(&vertices);\n+        ctx.create_device_local_buffer(buffer)\n+    });\n+}"}, {"sha": "b172e293b720d8296b5b5b47809e4f0b3a684dcb", "filename": "tests/target/configs-chain_indent-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/tests%2Ftarget%2Fconfigs-chain_indent-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/tests%2Ftarget%2Fconfigs-chain_indent-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-chain_indent-block.rs?ref=8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "patch": "@@ -8,5 +8,5 @@ fn main() {\n         .amet()\n         .consectetur()\n         .adipiscing()\n-        .elit();\n+        .elite();\n }"}, {"sha": "ef7dac93f7f4de51c4165718a331cb84dc4bdb51", "filename": "tests/target/configs-chain_indent-visual.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/tests%2Ftarget%2Fconfigs-chain_indent-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7/tests%2Ftarget%2Fconfigs-chain_indent-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-chain_indent-visual.rs?ref=8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "patch": "@@ -7,5 +7,5 @@ fn main() {\n                      .amet()\n                      .consectetur()\n                      .adipiscing()\n-                     .elit();\n+                     .elite();\n }"}]}