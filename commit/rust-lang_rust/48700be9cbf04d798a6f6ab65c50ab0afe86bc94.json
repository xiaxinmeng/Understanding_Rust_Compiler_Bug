{"sha": "48700be9cbf04d798a6f6ab65c50ab0afe86bc94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NzAwYmU5Y2JmMDRkNzk4YTZmNmFiNjVjNTBhYjBhZmU4NmJjOTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-17T20:08:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-17T20:08:48Z"}, "message": "Auto merge of #30445 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #30370, #30404, #30415, #30419, #30428, #30437, #30439, #30441, #30442, #30443\n- Failed merges:", "tree": {"sha": "6df62088cb4174df4b45e679e8fe7c6e8cb26a92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6df62088cb4174df4b45e679e8fe7c6e8cb26a92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48700be9cbf04d798a6f6ab65c50ab0afe86bc94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48700be9cbf04d798a6f6ab65c50ab0afe86bc94", "html_url": "https://github.com/rust-lang/rust/commit/48700be9cbf04d798a6f6ab65c50ab0afe86bc94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6734dccc3149d62d36a41979424e61dce4473267", "url": "https://api.github.com/repos/rust-lang/rust/commits/6734dccc3149d62d36a41979424e61dce4473267", "html_url": "https://github.com/rust-lang/rust/commit/6734dccc3149d62d36a41979424e61dce4473267"}, {"sha": "7ad8fb9f3c2cea5bee14c1cafb70f024502eff64", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad8fb9f3c2cea5bee14c1cafb70f024502eff64", "html_url": "https://github.com/rust-lang/rust/commit/7ad8fb9f3c2cea5bee14c1cafb70f024502eff64"}], "stats": {"total": 75, "additions": 31, "deletions": 44}, "files": [{"sha": "63b73a7fc31fce3462a6655c40bd05eb84c4fa81", "filename": "src/doc/book/the-stack-and-the-heap.md", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Fdoc%2Fbook%2Fthe-stack-and-the-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Fdoc%2Fbook%2Fthe-stack-and-the-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fthe-stack-and-the-heap.md?ref=48700be9cbf04d798a6f6ab65c50ab0afe86bc94", "patch": "@@ -130,63 +130,64 @@ on the stack is the first one you retrieve from it.\n Let\u2019s try a three-deep example:\n \n ```rust\n-fn bar() {\n+fn italic() {\n     let i = 6;\n }\n \n-fn foo() {\n+fn bold() {\n     let a = 5;\n     let b = 100;\n     let c = 1;\n \n-    bar();\n+    italic();\n }\n \n fn main() {\n     let x = 42;\n \n-    foo();\n+    bold();\n }\n ```\n \n+We have some kooky function names to make the diagrams clearer.\n+\n Okay, first, we call `main()`:\n \n | Address | Name | Value |\n |---------|------|-------|\n | 0       | x    | 42    |\n \n-Next up, `main()` calls `foo()`:\n+Next up, `main()` calls `bold()`:\n \n | Address | Name | Value |\n |---------|------|-------|\n-| 3       | c    | 1     |\n-| 2       | b    | 100   |\n-| 1       | a    | 5     |\n+| **3**   | **c**|**1**  |\n+| **2**   | **b**|**100**|\n+| **1**   | **a**| **5** |\n | 0       | x    | 42    |\n \n-And then `foo()` calls `bar()`:\n+And then `bold()` calls `italic()`:\n \n | Address | Name | Value |\n |---------|------|-------|\n-| 4       | i    | 6     |\n-| 3       | c    | 1     |\n-| 2       | b    | 100   |\n-| 1       | a    | 5     |\n+| *4*     | *i*  | *6*   |\n+| **3**   | **c**|**1**  |\n+| **2**   | **b**|**100**|\n+| **1**   | **a**| **5** |\n | 0       | x    | 42    |\n-\n Whew! Our stack is growing tall.\n \n-After `bar()` is over, its frame is deallocated, leaving just `foo()` and\n+After `italic()` is over, its frame is deallocated, leaving just `bold()` and\n `main()`:\n \n | Address | Name | Value |\n |---------|------|-------|\n-| 3       | c    | 1     |\n-| 2       | b    | 100   |\n-| 1       | a    | 5     |\n-| 0       | x    | 42    |\n+| **3**   | **c**|**1**  |\n+| **2**   | **b**|**100**|\n+| **1**   | **a**| **5** |\n+| 0       | x    | 42    | \n \n-And then `foo()` ends, leaving just `main()`:\n+And then `bold()` ends, leaving just `main()`:\n \n | Address | Name | Value |\n |---------|------|-------|\n@@ -578,3 +579,4 @@ comes at the cost of either significant runtime support (e.g. in the form of a\n garbage collector) or significant programmer effort (in the form of explicit\n memory management calls that require verification not provided by the Rust\n compiler).\n+"}, {"sha": "45eb68baeb732827d6a54751ed22e38e189b2d27", "filename": "src/doc/nomicon/lifetimes.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Fdoc%2Fnomicon%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Fdoc%2Fnomicon%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Flifetimes.md?ref=48700be9cbf04d798a6f6ab65c50ab0afe86bc94", "patch": "@@ -107,8 +107,8 @@ This signature of `as_str` takes a reference to a u32 with *some* lifetime, and\n promises that it can produce a reference to a str that can live *just as long*.\n Already we can see why this signature might be trouble. That basically implies\n that we're going to find a str somewhere in the scope the reference\n-to the u32 originated in, or somewhere *even earlier*. That's a bit of a big\n-ask.\n+to the u32 originated in, or somewhere *even earlier*. That's a bit of a tall\n+order.\n \n We then proceed to compute the string `s`, and return a reference to it. Since\n the contract of our function says the reference must outlive `'a`, that's the"}, {"sha": "bc5927f3d5e1cc26db02c243ec2677de66735be7", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=48700be9cbf04d798a6f6ab65c50ab0afe86bc94", "patch": "@@ -909,15 +909,6 @@ pub trait SliceConcatExt<T: ?Sized> {\n     #[stable(feature = \"rename_connect_to_join\", since = \"1.3.0\")]\n     fn join(&self, sep: &T) -> Self::Output;\n \n-    /// Flattens a slice of `T` into a single value `Self::Output`, placing a\n-    /// given separator between each.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// # #![allow(deprecated)]\n-    /// assert_eq!([\"hello\", \"world\"].connect(\" \"), \"hello world\");\n-    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.3.0\", reason = \"renamed to join\")]\n     fn connect(&self, sep: &T) -> Self::Output;"}, {"sha": "cde86230d7509f50ac70d16c11ac148487813c9c", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=48700be9cbf04d798a6f6ab65c50ab0afe86bc94", "patch": "@@ -23,12 +23,6 @@\n //! nor does it provide concurrency or I/O. These things require\n //! platform integration, and this library is platform-agnostic.\n //!\n-//! *It is not recommended to use the core library*. The stable\n-//! functionality of libcore is reexported from the\n-//! [standard library](../std/index.html). The composition of this library is\n-//! subject to change over time; only the interface exposed through libstd is\n-//! intended to be stable.\n-//!\n //! # How to use the core library\n //!\n // FIXME: Fill me in with more detail when the interface settles"}, {"sha": "8abb12706a5e340973cf1590d155e2bd134b017e", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=48700be9cbf04d798a6f6ab65c50ab0afe86bc94", "patch": "@@ -644,7 +644,7 @@ macro_rules! int_impl {\n             self.overflowing_shl(rhs).0\n         }\n \n-        /// Panic-free bitwise shift-left; yields `self >> mask(rhs)`,\n+        /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\n         /// where `mask` removes any high-order bits of `rhs` that\n         /// would cause the shift to exceed the bitwidth of the type.\n         ///\n@@ -1446,7 +1446,7 @@ macro_rules! uint_impl {\n             self.overflowing_shl(rhs).0\n         }\n \n-        /// Panic-free bitwise shift-left; yields `self >> mask(rhs)`,\n+        /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\n         /// where `mask` removes any high-order bits of `rhs` that\n         /// would cause the shift to exceed the bitwidth of the type.\n         ///"}, {"sha": "dd4702376d43ceba4b8829f3f16ccf1d27cb3b04", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=48700be9cbf04d798a6f6ab65c50ab0afe86bc94", "patch": "@@ -1616,7 +1616,7 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeTo<Idx> {\n }\n \n /// The `Deref` trait is used to specify the functionality of dereferencing\n-/// operations like `*v`.\n+/// operations, like `*v`.\n ///\n /// `Deref` also enables ['`Deref` coercions'][coercions].\n ///"}, {"sha": "6a5910074d91592c5aa5c38d05b786a069dda96e", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=48700be9cbf04d798a6f6ab65c50ab0afe86bc94", "patch": "@@ -1337,7 +1337,7 @@ explanatory comments for the same example:\n \n     // `for`-loops use a protocol based on the `Iterator`\n     // trait. Each item yielded in a `for` loop has the\n-    // type `Iterator::Item` -- that is,I `Item` is the\n+    // type `Iterator::Item` -- that is, `Item` is the\n     // associated type of the concrete iterator impl.\n     for v in &vs {\n //      ~    ~~~"}, {"sha": "0f8b2f6e17b257134f04bff2cc4d0a9585f00c02", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=48700be9cbf04d798a6f6ab65c50ab0afe86bc94", "patch": "@@ -25,7 +25,7 @@\n //!\n //! # How to read this documentation\n //!\n-//! If you already know the name of what you are looking for the fastest way to\n+//! If you already know the name of what you are looking for, the fastest way to\n //! find it is to use the <a href=\"#\" onclick=\"focusSearchBar();\">search\n //! bar</a> at the top of the page.\n //!"}, {"sha": "04568ad85bffea94096b82503f1b2e4356ec8d63", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=48700be9cbf04d798a6f6ab65c50ab0afe86bc94", "patch": "@@ -43,7 +43,7 @@\n //!\n //! [`std::io::prelude`]: ../io/prelude/index.html\n //!\n-//! The differece between 'the prelude' and these other preludes is that they\n+//! The difference between 'the prelude' and these other preludes is that they\n //! are not automatically `use`'d, and must be imported manually. This is still\n //! easier than importing all of their consitutent components.\n //!"}, {"sha": "ed59c51b0f0d843731995151cc84979d34eca6ac", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48700be9cbf04d798a6f6ab65c50ab0afe86bc94/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=48700be9cbf04d798a6f6ab65c50ab0afe86bc94", "patch": "@@ -333,7 +333,7 @@ mod prim_slice { }\n /// let ptr = story.as_ptr();\n /// let len = story.len();\n ///\n-/// // story has thirteen bytes\n+/// // story has nineteen bytes\n /// assert_eq!(19, len);\n ///\n /// // We can re-build a str out of ptr and len. This is all unsafe becuase"}]}