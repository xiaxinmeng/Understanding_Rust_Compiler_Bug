{"sha": "ab49f762a94104125f5878e53a2725fe8f7ddaeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNDlmNzYyYTk0MTA0MTI1ZjU4NzhlNTNhMjcyNWZlOGY3ZGRhZWI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-04T23:42:19Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-04T23:42:19Z"}, "message": "analysis-stats: allow skipping type inference\n\nThis removes \"noise\" from memory profiles since it avoids lowering\nfunction bodies and types", "tree": {"sha": "01f6071d8da21af7c45423eaf26422f5017caca4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01f6071d8da21af7c45423eaf26422f5017caca4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab49f762a94104125f5878e53a2725fe8f7ddaeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab49f762a94104125f5878e53a2725fe8f7ddaeb", "html_url": "https://github.com/rust-lang/rust/commit/ab49f762a94104125f5878e53a2725fe8f7ddaeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab49f762a94104125f5878e53a2725fe8f7ddaeb/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4be4d29853633a0e51b9707edc58c556a99a7249", "url": "https://api.github.com/repos/rust-lang/rust/commits/4be4d29853633a0e51b9707edc58c556a99a7249", "html_url": "https://github.com/rust-lang/rust/commit/4be4d29853633a0e51b9707edc58c556a99a7249"}], "stats": {"total": 64, "additions": 42, "deletions": 22}, "files": [{"sha": "63953098a2407819b9f739baf1b813d3f2a4f0a9", "filename": "crates/rust-analyzer/src/bin/flags.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab49f762a94104125f5878e53a2725fe8f7ddaeb/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab49f762a94104125f5878e53a2725fe8f7ddaeb/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fflags.rs?ref=ab49f762a94104125f5878e53a2725fe8f7ddaeb", "patch": "@@ -71,6 +71,8 @@ xflags::xflags! {\n             optional --load-output-dirs\n             /// Use proc-macro-srv for proc-macro expanding.\n             optional --with-proc-macro\n+            /// Only resolve names, don't run type inference.\n+            optional --skip-inference\n         }\n \n         cmd diagnostics\n@@ -158,6 +160,7 @@ pub struct AnalysisStats {\n     pub no_sysroot: bool,\n     pub load_output_dirs: bool,\n     pub with_proc_macro: bool,\n+    pub skip_inference: bool,\n }\n \n #[derive(Debug)]"}, {"sha": "873e82c7b2b87b69ec721afebc506a650f4ca830", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab49f762a94104125f5878e53a2725fe8f7ddaeb/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab49f762a94104125f5878e53a2725fe8f7ddaeb/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=ab49f762a94104125f5878e53a2725fe8f7ddaeb", "patch": "@@ -78,6 +78,7 @@ fn try_main() -> Result<()> {\n             path: cmd.path,\n             load_output_dirs: cmd.load_output_dirs,\n             with_proc_macro: cmd.with_proc_macro,\n+            skip_inference: cmd.skip_inference,\n         }\n         .run(verbosity)?,\n "}, {"sha": "18fd7ea749eda6009614d58648fbfe014859c663", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ab49f762a94104125f5878e53a2725fe8f7ddaeb/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab49f762a94104125f5878e53a2725fe8f7ddaeb/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=ab49f762a94104125f5878e53a2725fe8f7ddaeb", "patch": "@@ -9,10 +9,11 @@ use std::{\n \n use hir::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    AssocItem, Crate, HasSource, HirDisplay, ModuleDef,\n+    AssocItem, Crate, Function, HasSource, HirDisplay, ModuleDef,\n };\n use hir_def::FunctionId;\n use hir_ty::TypeWalk;\n+use ide::{AnalysisHost, RootDatabase};\n use ide_db::base_db::{\n     salsa::{self, ParallelDatabase},\n     SourceDatabaseExt,\n@@ -24,6 +25,7 @@ use rayon::prelude::*;\n use rustc_hash::FxHashSet;\n use stdx::format_to;\n use syntax::AstNode;\n+use vfs::Vfs;\n \n use crate::cli::{\n     load_cargo::{load_workspace_at, LoadCargoConfig},\n@@ -51,6 +53,7 @@ pub struct AnalysisStatsCmd {\n     pub path: PathBuf,\n     pub load_output_dirs: bool,\n     pub with_proc_macro: bool,\n+    pub skip_inference: bool,\n }\n \n impl AnalysisStatsCmd {\n@@ -128,6 +131,39 @@ impl AnalysisStatsCmd {\n             shuffle(&mut rng, &mut funcs);\n         }\n \n+        if !self.skip_inference {\n+            self.run_inference(&host, db, &vfs, &funcs, verbosity);\n+        }\n+\n+        let total_span = analysis_sw.elapsed();\n+        eprintln!(\"{:<20} {}\", \"Total:\", total_span);\n+        report_metric(\"total time\", total_span.time.as_millis() as u64, \"ms\");\n+        if let Some(instructions) = total_span.instructions {\n+            report_metric(\"total instructions\", instructions, \"#instr\");\n+        }\n+        if let Some(memory) = total_span.memory {\n+            report_metric(\"total memory\", memory.allocated.megabytes() as u64, \"MB\");\n+        }\n+\n+        if env::var(\"RA_COUNT\").is_ok() {\n+            eprintln!(\"{}\", profile::countme::get_all());\n+        }\n+\n+        if self.memory_usage && verbosity.is_verbose() {\n+            print_memory_usage(host, vfs);\n+        }\n+\n+        Ok(())\n+    }\n+\n+    fn run_inference(\n+        &self,\n+        host: &AnalysisHost,\n+        db: &RootDatabase,\n+        vfs: &Vfs,\n+        funcs: &[Function],\n+        verbosity: Verbosity,\n+    ) {\n         let mut bar = match verbosity {\n             Verbosity::Quiet | Verbosity::Spammy => ProgressReport::hidden(),\n             _ if self.parallel => ProgressReport::hidden(),\n@@ -154,7 +190,7 @@ impl AnalysisStatsCmd {\n         let mut num_exprs_unknown = 0;\n         let mut num_exprs_partially_unknown = 0;\n         let mut num_type_mismatches = 0;\n-        for f in funcs {\n+        for f in funcs.iter().copied() {\n             let name = f.name(db);\n             let full_name = f\n                 .module(db)\n@@ -296,26 +332,6 @@ impl AnalysisStatsCmd {\n         report_metric(\"type mismatches\", num_type_mismatches, \"#\");\n \n         eprintln!(\"{:<20} {}\", \"Inference:\", inference_sw.elapsed());\n-\n-        let total_span = analysis_sw.elapsed();\n-        eprintln!(\"{:<20} {}\", \"Total:\", total_span);\n-        report_metric(\"total time\", total_span.time.as_millis() as u64, \"ms\");\n-        if let Some(instructions) = total_span.instructions {\n-            report_metric(\"total instructions\", instructions, \"#instr\");\n-        }\n-        if let Some(memory) = total_span.memory {\n-            report_metric(\"total memory\", memory.allocated.megabytes() as u64, \"MB\");\n-        }\n-\n-        if env::var(\"RA_COUNT\").is_ok() {\n-            eprintln!(\"{}\", profile::countme::get_all());\n-        }\n-\n-        if self.memory_usage && verbosity.is_verbose() {\n-            print_memory_usage(host, vfs);\n-        }\n-\n-        Ok(())\n     }\n \n     fn stop_watch(&self) -> StopWatch {"}]}