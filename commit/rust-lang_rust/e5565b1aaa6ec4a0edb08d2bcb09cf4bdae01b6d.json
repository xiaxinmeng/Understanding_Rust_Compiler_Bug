{"sha": "e5565b1aaa6ec4a0edb08d2bcb09cf4bdae01b6d", "node_id": "C_kwDOAAsO6NoAKGU1NTY1YjFhYWE2ZWM0YTBlZGIwOGQyYmNiMDljZjRiZGFlMDFiNmQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-04T16:34:09Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-20T18:01:15Z"}, "message": "Add incremental tests.", "tree": {"sha": "b6387c4a84435775d2c3f6d1f60ee3a778841597", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6387c4a84435775d2c3f6d1f60ee3a778841597"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5565b1aaa6ec4a0edb08d2bcb09cf4bdae01b6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5565b1aaa6ec4a0edb08d2bcb09cf4bdae01b6d", "html_url": "https://github.com/rust-lang/rust/commit/e5565b1aaa6ec4a0edb08d2bcb09cf4bdae01b6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5565b1aaa6ec4a0edb08d2bcb09cf4bdae01b6d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a395d2a5debac5dd73fb2ccfbfb749a2df5baf69", "url": "https://api.github.com/repos/rust-lang/rust/commits/a395d2a5debac5dd73fb2ccfbfb749a2df5baf69", "html_url": "https://github.com/rust-lang/rust/commit/a395d2a5debac5dd73fb2ccfbfb749a2df5baf69"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "f1449d5681e0ec45483802f7f85650e1e62dd625", "filename": "tests/incremental/const-generics/change-const-param-gat.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e5565b1aaa6ec4a0edb08d2bcb09cf4bdae01b6d/tests%2Fincremental%2Fconst-generics%2Fchange-const-param-gat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5565b1aaa6ec4a0edb08d2bcb09cf4bdae01b6d/tests%2Fincremental%2Fconst-generics%2Fchange-const-param-gat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fconst-generics%2Fchange-const-param-gat.rs?ref=e5565b1aaa6ec4a0edb08d2bcb09cf4bdae01b6d", "patch": "@@ -0,0 +1,29 @@\n+// revisions: rpass1 rpass2 rpass3\n+// compile-flags: -Zincremental-ignore-spans\n+#![feature(generic_associated_types)]\n+\n+// This test unsures that with_opt_const_param returns the\n+// def_id of the N param in the Foo::Assoc GAT.\n+\n+trait Foo {\n+    type Assoc<const N: usize>;\n+    fn foo(\n+        &self,\n+    ) -> Self::Assoc<{ if cfg!(rpass2) { 3 } else { 2 } }>;\n+}\n+\n+impl Foo for () {\n+    type Assoc<const N: usize> = [(); N];\n+    fn foo(\n+        &self,\n+    ) -> Self::Assoc<{ if cfg!(rpass2) { 3 } else { 2 } }> {\n+        [(); { if cfg!(rpass2) { 3 } else { 2 } }]\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(\n+        ().foo(),\n+        [(); { if cfg!(rpass2) { 3 } else { 2 } }]\n+    );\n+}"}, {"sha": "1aac1bc7d722caab214511938ef35a0e93f8b48b", "filename": "tests/incremental/const-generics/change-const-param-type.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e5565b1aaa6ec4a0edb08d2bcb09cf4bdae01b6d/tests%2Fincremental%2Fconst-generics%2Fchange-const-param-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5565b1aaa6ec4a0edb08d2bcb09cf4bdae01b6d/tests%2Fincremental%2Fconst-generics%2Fchange-const-param-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fconst-generics%2Fchange-const-param-type.rs?ref=e5565b1aaa6ec4a0edb08d2bcb09cf4bdae01b6d", "patch": "@@ -0,0 +1,68 @@\n+// revisions: rpass1 rpass2 rpass3\n+// compile-flags: -Zincremental-ignore-spans\n+\n+enum Foo<const N: usize> {\n+    Variant,\n+    Variant2(),\n+    Variant3 {},\n+}\n+\n+impl Foo<1> {\n+    fn foo<const N: usize>(&self) -> [(); N] { [(); N] }\n+}\n+\n+impl Foo<2> {\n+    fn foo<const N: u32>(self) -> usize { N as usize }\n+}\n+\n+struct Bar<const N: usize>;\n+struct Bar2<const N: usize>();\n+struct Bar3<const N: usize> {}\n+\n+#[cfg(rpass1)]\n+struct ChangingStruct<const N: usize>;\n+\n+#[cfg(any(rpass2, rpass3))]\n+struct ChangingStruct<const N: u32>;\n+\n+struct S;\n+\n+impl S {\n+    #[cfg(rpass1)]\n+    fn changing_method<const N: usize>(self) {}\n+\n+    #[cfg(any(rpass2, rpass3))]\n+    fn changing_method<const N: u32>(self) {}\n+}\n+\n+// We want to verify that all goes well when the value of the const argument change.\n+// To avoid modifying `main`'s HIR, we use a separate constant, and use `{ FOO_ARG + 1 }`\n+// inside the body to keep having an `AnonConst` to compute.\n+const FOO_ARG: usize = if cfg!(rpass2) { 1 } else { 0 };\n+\n+fn main() {\n+    let foo = Foo::Variant::<{ FOO_ARG + 1 }>;\n+    foo.foo::<{ if cfg!(rpass3) { 3 } else { 4 } }>();\n+\n+    let foo = Foo::Variant2::<{ FOO_ARG + 1 }>();\n+    foo.foo::<{ if cfg!(rpass3) { 3 } else { 4 } }>();\n+\n+    let foo = Foo::Variant3::<{ FOO_ARG + 1 }> {};\n+    foo.foo::<{ if cfg!(rpass3) { 3 } else { 4 } }>();\n+\n+    let foo = Foo::<{ FOO_ARG + 1 }>::Variant;\n+    foo.foo::<{ if cfg!(rpass3) { 3 } else { 4 } }>();\n+\n+    let foo = Foo::<{ FOO_ARG + 1 }>::Variant2();\n+    foo.foo::<{ if cfg!(rpass3) { 3 } else { 4 } }>();\n+\n+    let foo = Foo::<{ FOO_ARG + 1 }>::Variant3 {};\n+    foo.foo::<{ if cfg!(rpass3) { 3 } else { 4 } }>();\n+\n+    let _ = Bar::<{ FOO_ARG + 1 }>;\n+    let _ = Bar2::<{ FOO_ARG + 1 }>();\n+    let _ = Bar3::<{ FOO_ARG + 1 }> {};\n+\n+    let _ = ChangingStruct::<{ 5 }>;\n+    let _ = S.changing_method::<{ 5 }>();\n+}"}]}