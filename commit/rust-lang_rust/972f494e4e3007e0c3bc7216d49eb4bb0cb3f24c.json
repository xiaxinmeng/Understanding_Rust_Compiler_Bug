{"sha": "972f494e4e3007e0c3bc7216d49eb4bb0cb3f24c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MmY0OTRlNGUzMDA3ZTBjM2JjNzIxNmQ0OWViNGJiMGNiM2YyNGM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-25T05:14:39Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-25T05:14:39Z"}, "message": "Pref for comma on the last field", "tree": {"sha": "1e7034c374671e9a0388103f152156d4626db68a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e7034c374671e9a0388103f152156d4626db68a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/972f494e4e3007e0c3bc7216d49eb4bb0cb3f24c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/972f494e4e3007e0c3bc7216d49eb4bb0cb3f24c", "html_url": "https://github.com/rust-lang/rust/commit/972f494e4e3007e0c3bc7216d49eb4bb0cb3f24c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/972f494e4e3007e0c3bc7216d49eb4bb0cb3f24c/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7adf64155abb3bdc2dcb6bb52ee24ed87206eff", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff", "html_url": "https://github.com/rust-lang/rust/commit/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "6b3e8916e3b637b8a8f9ef5fb0109abf22a4a290", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/972f494e4e3007e0c3bc7216d49eb4bb0cb3f24c/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972f494e4e3007e0c3bc7216d49eb4bb0cb3f24c/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=972f494e4e3007e0c3bc7216d49eb4bb0cb3f24c", "patch": "@@ -19,6 +19,7 @@ pub struct Config {\n     pub newline_style: ::NewlineStyle,\n     pub fn_brace_style: ::BraceStyle,\n     pub fn_return_indent: ::ReturnIndent,\n+    pub struct_trailing_comma: bool,\n }\n \n impl Config {"}, {"sha": "3d06339889375e852e2f1cf79ec32d15383b59d3", "filename": "src/default.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/972f494e4e3007e0c3bc7216d49eb4bb0cb3f24c/src%2Fdefault.toml", "raw_url": "https://github.com/rust-lang/rust/raw/972f494e4e3007e0c3bc7216d49eb4bb0cb3f24c/src%2Fdefault.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdefault.toml?ref=972f494e4e3007e0c3bc7216d49eb4bb0cb3f24c", "patch": "@@ -5,3 +5,4 @@ tab_spaces = 4\n newline_style = \"Unix\"\n fn_brace_style = \"SameLineWhere\"\n fn_return_indent = \"WithArgs\"\n+struct_trailing_comma = true"}, {"sha": "55613ab1bb843f71b99608267b0fc0dfa2510a19", "filename": "src/items.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/972f494e4e3007e0c3bc7216d49eb4bb0cb3f24c/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972f494e4e3007e0c3bc7216d49eb4bb0cb3f24c/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=972f494e4e3007e0c3bc7216d49eb4bb0cb3f24c", "patch": "@@ -431,8 +431,8 @@ impl<'a> FmtVisitor<'a> {\n         self.last_pos = span.lo + BytePos(struct_snippet.find('{').unwrap() as u32 + 1);\n \n         self.block_indent += config!(tab_spaces);\n-        for f in &struct_def.fields {\n-            self.visit_field(f, span.lo, &struct_snippet);\n+        for (i, f) in struct_def.fields.iter().enumerate() {\n+            self.visit_field(f, i == struct_def.fields.len() - 1, span.lo, &struct_snippet);\n         }\n         self.block_indent -= config!(tab_spaces);\n \n@@ -457,6 +457,7 @@ impl<'a> FmtVisitor<'a> {\n     // Field of a struct\n     fn visit_field(&mut self,\n                    field: &ast::StructField,\n+                   last_field: bool,\n                    // These two args are for missing spans hacks.\n                    struct_start: BytePos,\n                    struct_snippet: &str)\n@@ -480,21 +481,25 @@ impl<'a> FmtVisitor<'a> {\n         };\n         let typ = pprust::ty_to_string(&field.node.ty);\n \n-        let field_str = match name {\n+        let mut field_str = match name {\n             Some(name) => {\n                 let budget = config!(ideal_width) - self.block_indent;\n+                // 3 is being conservative and assuming that there will be a trailing comma.\n                 if self.block_indent + vis.len() + name.len() + typ.len() + 3 > budget {\n-                    format!(\"{}{}:\\n{}{},\",\n+                    format!(\"{}{}:\\n{}{}\",\n                             vis,\n                             name,\n                             &make_indent(self.block_indent + config!(tab_spaces)),\n                             typ)\n                 } else {\n-                    format!(\"{}{}: {},\", vis, name, typ)\n+                    format!(\"{}{}: {}\", vis, name, typ)\n                 }\n             }\n-            None => format!(\"{}{},\", vis, typ),\n+            None => format!(\"{}{}\", vis, typ),\n         };\n+        if !last_field || config!(struct_trailing_comma) {\n+            field_str.push(',');\n+        }\n         self.changes.push_str_span(field.span, &field_str);\n \n         // This hack makes sure we only add comments etc. after the comma, and"}]}