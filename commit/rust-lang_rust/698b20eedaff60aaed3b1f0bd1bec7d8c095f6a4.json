{"sha": "698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OGIyMGVlZGFmZjYwYWFlZDNiMWYwYmQxYmVjN2Q4YzA5NWY2YTQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-27T20:56:19Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-31T17:01:49Z"}, "message": "update tests", "tree": {"sha": "8965e5acd8f8b455a03cddf42be116485aae2b71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8965e5acd8f8b455a03cddf42be116485aae2b71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "html_url": "https://github.com/rust-lang/rust/commit/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21c5ccab10b30085479a7189ee555f77c47c79e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/21c5ccab10b30085479a7189ee555f77c47c79e7", "html_url": "https://github.com/rust-lang/rust/commit/21c5ccab10b30085479a7189ee555f77c47c79e7"}], "stats": {"total": 56, "additions": 31, "deletions": 25}, "files": [{"sha": "a193bf998dc73e5104b8aa3358ba2452fa6b2fb3", "filename": "src/test/incremental/const-generics/issue-61516.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-61516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-61516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-61516.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -4,7 +4,7 @@\n \n struct FakeArray<T, const N: usize>(T);\n \n-impl<T, const N: usize> FakeArray<T, { N }> {\n+impl<T, const N: usize> FakeArray<T, N> {\n     fn len(&self) -> usize {\n         N\n     }"}, {"sha": "908c39c7951c06ad510df8db8be8f0906594d539", "filename": "src/test/ui/array-slice-vec/vec-fixed-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-fixed-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-fixed-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-fixed-length.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -9,7 +9,7 @@ fn test_big_vec() {}\n #[cfg(target_pointer_width = \"64\")]\n fn test_big_vec()\n {\n-    assert_eq!(size_of::<[u8; (1 << 32)]>(), (1 << 32));\n+    assert_eq!(size_of::<[u8; 1 << 32]>(), (1 << 32));\n }\n \n fn main() {"}, {"sha": "d993ad9945974bc7091b8798c9ccc4e44af36965", "filename": "src/test/ui/block-fn-coerce.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fblock-fn-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fblock-fn-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-fn-coerce.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#![allow(unused_braces)]\n \n fn force<F>(f: F) -> isize where F: FnOnce() -> isize { return f(); }\n "}, {"sha": "c5dd87c0f5a1fb712de242c120c997ab00e82559", "filename": "src/test/ui/cleanup-rvalue-scopes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fcleanup-rvalue-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fcleanup-rvalue-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcleanup-rvalue-scopes.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-\n+#![allow(unused_braces)]\n #![allow(non_snake_case)]\n #![allow(unused_variables)]\n // Test that destructors for rvalue temporaries run either at end of"}, {"sha": "d486fdf73aba8d795a1dde8c4ff37ad921efed26", "filename": "src/test/ui/coerce/coerce-expect-unsized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fcoerce%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fcoerce%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoerce%2Fcoerce-expect-unsized.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#![allow(unused_braces)]\n #![feature(box_syntax)]\n \n use std::cell::RefCell;"}, {"sha": "d5484607c8b52021ab31d7b36e7a7b688d904543", "filename": "src/test/ui/coerce/coerce-overloaded-autoderef.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fcoerce%2Fcoerce-overloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fcoerce%2Fcoerce-overloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoerce%2Fcoerce-overloaded-autoderef.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#![allow(unused_braces)]\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n "}, {"sha": "212e16253f6b812cb507a8499821faab666030e1", "filename": "src/test/ui/const-generics/issues/issue-62504.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -7,13 +7,13 @@ trait HasSize {\n     const SIZE: usize;\n }\n \n-impl<const X: usize> HasSize for ArrayHolder<{ X }> {\n+impl<const X: usize> HasSize for ArrayHolder<X> {\n     const SIZE: usize = X;\n }\n \n struct ArrayHolder<const X: usize>([u32; X]);\n \n-impl<const X: usize> ArrayHolder<{ X }> {\n+impl<const X: usize> ArrayHolder<X> {\n     pub const fn new() -> Self {\n         ArrayHolder([0; Self::SIZE])\n         //~^ ERROR: mismatched types"}, {"sha": "a3eca0dd7d965585fea9d5be467864248c589081", "filename": "src/test/ui/const-generics/issues/issue-70125-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -13,4 +13,4 @@ trait Foo<const X: usize> {\n     }\n }\n \n-impl Foo<{3}> for () {}\n+impl Foo<3> for () {}"}, {"sha": "ec99c70f6e0b90587871b0c66193b14950e1f440", "filename": "src/test/ui/consts/const-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fconsts%2Fconst-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fconsts%2Fconst-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-\n+#![allow(unused_braces)]\n #![allow(dead_code)]\n #![allow(unused_unsafe)]\n "}, {"sha": "d081cb2be7ee39820bb146a6c5eab90f85a38ada", "filename": "src/test/ui/expr-block-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr-block-generic-unique1.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-\n+#![allow(unused_braces)]\n #![feature(box_syntax)]\n \n fn test_generic<T, F>(expected: Box<T>, eq: F) where T: Clone, F: FnOnce(Box<T>, Box<T>) -> bool {"}, {"sha": "9362eb86fc30976dd713c7a408d70c05469bce09", "filename": "src/test/ui/expr-block-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr-block-generic-unique2.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-\n+#![allow(unused_braces)]\n #![feature(box_syntax)]\n \n fn test_generic<T, F>(expected: T, eq: F) where T: Clone, F: FnOnce(T, T) -> bool {"}, {"sha": "29c7c42219c737df82b4aef911bfa8bd9d737f5d", "filename": "src/test/ui/expr-block-generic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr-block-generic.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#![allow(unused_braces)]\n \n fn test_generic<T: Clone, F>(expected: T, eq: F) where F: FnOnce(T, T) -> bool {\n     let actual: T = { expected.clone() };"}, {"sha": "eff3fd3a15152a78e55d7d38d381d9c037de1ec1", "filename": "src/test/ui/expr-block-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fexpr-block-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fexpr-block-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr-block-unique.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-\n+#![allow(unused_braces)]\n #![feature(box_syntax)]\n \n pub fn main() { let x: Box<_> = { box 100 }; assert_eq!(*x, 100); }"}, {"sha": "ff87595c934e9cca9375284d7df9bb88d4ab3168", "filename": "src/test/ui/expr-block.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr-block.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,10 +1,7 @@\n // run-pass\n-\n+#![allow(unused_braces)]\n #![allow(dead_code)]\n \n-\n-\n-\n // Tests for standalone blocks as expressions\n \n fn test_basic() { let rs: bool = { true }; assert!((rs)); }"}, {"sha": "253cbfd5d38fa12f6926da761a2c5019aa8462e3", "filename": "src/test/ui/expr-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fexpr-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fexpr-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr-fn.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#![allow(unused_braces)]\n \n fn test_int() {\n     fn f() -> isize { 10 }"}, {"sha": "1877414f09942f99d75f2ea9e488175b7f176f25", "filename": "src/test/ui/functions-closures/closure-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Ffunctions-closures%2Fclosure-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Ffunctions-closures%2Fclosure-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Fclosure-inference.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-\n+#![allow(unused_braces)]\n \n fn foo(i: isize) -> isize { i + 1 }\n "}, {"sha": "4ce132e86caa4c89e5c2dadc7a513ba97585f499", "filename": "src/test/ui/functions-closures/closure-inference2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Ffunctions-closures%2Fclosure-inference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Ffunctions-closures%2Fclosure-inference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Fclosure-inference2.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // Test a rather underspecified example:\n-\n+#![allow(unused_braces)]\n \n pub fn main() {\n     let f = {|i| i};"}, {"sha": "9804c421db081cec72c5def5ef4305a808d921da", "filename": "src/test/ui/intrinsics/intrinsic-move-val-cleanups.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-move-val-cleanups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-move-val-cleanups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-move-val-cleanups.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#![allow(unused_braces)]\n #![allow(unused_unsafe)]\n #![allow(unreachable_code)]\n // ignore-emscripten no threads support"}, {"sha": "3de365675ad2214279537a8bcadd2e15dd588ec8", "filename": "src/test/ui/issues/issue-23898.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fissues%2Fissue-23898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fissues%2Fissue-23898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23898.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#![allow(unused_parens)]\n #![allow(non_camel_case_types)]\n \n // Note: This test was used to demonstrate #5873 (now #23898)."}, {"sha": "1f426b7185e8f250c41a55f78c0124e1e6784495", "filename": "src/test/ui/issues/issue-28777.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fissues%2Fissue-28777.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fissues%2Fissue-28777.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28777.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#![allow(unused_braces)]\n fn main() {\n     let v1 = { 1 + {2} * {3} };\n     let v2 =   1 + {2} * {3}  ;"}, {"sha": "f3f7508d12434870b3edd509c44dd0da1dc50828", "filename": "src/test/ui/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-\n+#![allow(unused_braces)]\n #![allow(unused_comparisons)]\n #![allow(dead_code)]\n #![allow(unused_mut)]"}, {"sha": "540b35e0392de1ef5aad30813fc508b5805e6291", "filename": "src/test/ui/range_inclusive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange_inclusive.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // Test inclusive range syntax.\n-\n #![feature(range_is_empty)]\n+#![allow(unused_braces)]\n #![allow(unused_comparisons)]\n \n use std::ops::RangeToInclusive;"}, {"sha": "271ab72c74fc14bec2c953b83008fcab219c7eba", "filename": "src/test/ui/structs-enums/empty-tag.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fstructs-enums%2Fempty-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fstructs-enums%2Fempty-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fempty-tag.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#![allow(unused_braces)]\n #![allow(non_camel_case_types)]\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "7f3f86e4df009320ba1859edc9f973381e18c8f5", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -18,16 +18,16 @@ trait MyTrait<'a, const C: usize> {\n     const MY_CONST: usize;\n }\n \n-impl<'a, const C: usize> MyTrait<'a, { C }> for MyStruct<{ C }> {\n+impl<'a, const C: usize> MyTrait<'a, C> for MyStruct<C> {\n     type MyItem = u8;\n     const MY_CONST: usize = C;\n }\n \n-impl<'a, I, const C: usize> UnwrapItemsExt<'a, { C }> for I {\n-    type Iter = impl MyTrait<'a, { C }>;\n+impl<'a, I, const C: usize> UnwrapItemsExt<'a, C> for I {\n+    type Iter = impl MyTrait<'a, C>;\n \n     fn unwrap_items(self) -> Self::Iter {\n-        MyStruct::<{ C }> {}\n+        MyStruct::<C> {}\n     }\n }\n "}, {"sha": "24c2758a0a255520e58076bd29f841bebeee50b1", "filename": "src/test/ui/unsized-locals/unsized-exprs-rpass.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs-rpass.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-\n+#![allow(unused_braces, unused_parens)]\n #![feature(unsized_tuple_coercion, unsized_locals)]\n \n struct A<X: ?Sized>(X);\n@@ -30,7 +30,6 @@ fn main() {\n         *foo()\n     });\n     udrop::<[u8]>({*foo()});\n-    #[allow(unused_parens)]\n     udrop::<[u8]>((*foo()));\n     udrop::<[u8]>((*tfoo()).1);\n     *afoo() + 42;"}, {"sha": "d812bbd011e0e275c1e120cc2e51784bcdea63d6", "filename": "src/test/ui/weird-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fweird-exprs.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -5,7 +5,7 @@\n #![allow(non_camel_case_types)]\n #![allow(dead_code)]\n #![allow(unreachable_code)]\n-#![allow(unused_parens)]\n+#![allow(unused_braces, unused_parens)]\n \n #![recursion_limit = \"256\"]\n "}, {"sha": "2208590f7d61bbf7d30f6cc8b41adce2769791fe", "filename": "src/test/ui/zero-sized/zero-sized-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fzero-sized%2Fzero-sized-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4/src%2Ftest%2Fui%2Fzero-sized%2Fzero-sized-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fzero-sized%2Fzero-sized-tuple-struct.rs?ref=698b20eedaff60aaed3b1f0bd1bec7d8c095f6a4", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#![allow(unused_braces)]\n #![allow(unused_assignments)]\n \n // Make sure that the constructor args are codegened for zero-sized tuple structs"}]}