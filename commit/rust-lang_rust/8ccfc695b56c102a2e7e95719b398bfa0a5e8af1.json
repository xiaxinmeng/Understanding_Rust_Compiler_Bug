{"sha": "8ccfc695b56c102a2e7e95719b398bfa0a5e8af1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjY2ZjNjk1YjU2YzEwMmEyZTdlOTU3MTliMzk4YmZhMGE1ZThhZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-26T18:12:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-26T18:12:42Z"}, "message": "Auto merge of #36719 - shepmaster:build-env-var-reporting, r=alexcrichton\n\nReport which required build-time environment variable is not set", "tree": {"sha": "da29ce45db9aa404ab742ab4484898cbc57aaa8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da29ce45db9aa404ab742ab4484898cbc57aaa8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1", "html_url": "https://github.com/rust-lang/rust/commit/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2769285ad6d078c9a4499ad9e11278e4b78023c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2769285ad6d078c9a4499ad9e11278e4b78023c", "html_url": "https://github.com/rust-lang/rust/commit/c2769285ad6d078c9a4499ad9e11278e4b78023c"}, {"sha": "cc8727e67518e98a8ce3068d8dfc732a18f6b382", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc8727e67518e98a8ce3068d8dfc732a18f6b382", "html_url": "https://github.com/rust-lang/rust/commit/cc8727e67518e98a8ce3068d8dfc732a18f6b382"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "a70a15b383ccc47cc724487314093429fc76ebfb", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=8ccfc695b56c102a2e7e95719b398bfa0a5e8af1", "patch": "@@ -55,10 +55,10 @@ fn main() {\n     } else {\n         (\"RUSTC_REAL\", \"RUSTC_LIBDIR\")\n     };\n-    let stage = env::var(\"RUSTC_STAGE\").unwrap();\n+    let stage = env::var(\"RUSTC_STAGE\").expect(\"RUSTC_STAGE was not set\");\n \n-    let rustc = env::var_os(rustc).unwrap();\n-    let libdir = env::var_os(libdir).unwrap();\n+    let rustc = env::var_os(rustc).unwrap_or_else(|| panic!(\"{:?} was not set\", rustc));\n+    let libdir = env::var_os(libdir).unwrap_or_else(|| panic!(\"{:?} was not set\", libdir));\n     let mut dylib_path = bootstrap::util::dylib_path();\n     dylib_path.insert(0, PathBuf::from(libdir));\n \n@@ -71,7 +71,7 @@ fn main() {\n     if let Some(target) = target {\n         // The stage0 compiler has a special sysroot distinct from what we\n         // actually downloaded, so we just always pass the `--sysroot` option.\n-        cmd.arg(\"--sysroot\").arg(env::var_os(\"RUSTC_SYSROOT\").unwrap());\n+        cmd.arg(\"--sysroot\").arg(env::var_os(\"RUSTC_SYSROOT\").expect(\"RUSTC_SYSROOT was not set\"));\n \n         // When we build Rust dylibs they're all intended for intermediate\n         // usage, so make sure we pass the -Cprefer-dynamic flag instead of"}, {"sha": "658ff358d6240ae13bba20e1625f3f7ba9fda5bf", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=8ccfc695b56c102a2e7e95719b398bfa0a5e8af1", "patch": "@@ -20,15 +20,16 @@ use std::path::PathBuf;\n \n fn main() {\n     let args = env::args_os().skip(1).collect::<Vec<_>>();\n-    let rustdoc = env::var_os(\"RUSTDOC_REAL\").unwrap();\n-    let libdir = env::var_os(\"RUSTC_LIBDIR\").unwrap();\n+    let rustdoc = env::var_os(\"RUSTDOC_REAL\").expect(\"RUSTDOC_REAL was not set\");\n+    let libdir = env::var_os(\"RUSTC_LIBDIR\").expect(\"RUSTC_LIBDIR was not set\");\n+    let stage = env::var(\"RUSTC_STAGE\").expect(\"RUSTC_STAGE was not set\");\n \n     let mut dylib_path = bootstrap::util::dylib_path();\n     dylib_path.insert(0, PathBuf::from(libdir));\n \n     let mut cmd = Command::new(rustdoc);\n     cmd.args(&args)\n-       .arg(\"--cfg\").arg(format!(\"stage{}\", env::var(\"RUSTC_STAGE\").unwrap()))\n+       .arg(\"--cfg\").arg(format!(\"stage{}\", stage))\n        .arg(\"--cfg\").arg(\"dox\")\n        .env(bootstrap::util::dylib_path_var(),\n             env::join_paths(&dylib_path).unwrap());\n@@ -37,4 +38,3 @@ fn main() {\n         Err(e) => panic!(\"\\n\\nfailed to run {:?}: {}\\n\\n\", cmd, e),\n     })\n }\n-"}, {"sha": "8b31c5a557747765fbdc09967cc9c28ad4cec700", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=8ccfc695b56c102a2e7e95719b398bfa0a5e8af1", "patch": "@@ -22,8 +22,8 @@ fn main() {\n     println!(\"cargo:rustc-cfg=cargobuild\");\n     println!(\"cargo:rerun-if-changed=build.rs\");\n \n-    let target = env::var(\"TARGET\").unwrap();\n-    let host = env::var(\"HOST\").unwrap();\n+    let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n+    let host = env::var(\"HOST\").expect(\"HOST was not set\");\n     let build_dir = PathBuf::from(env::var_os(\"OUT_DIR\").unwrap());\n     let src_dir = env::current_dir().unwrap();\n \n@@ -140,7 +140,7 @@ fn main() {\n             .current_dir(&build_dir)\n             .arg(\"build_lib_static\")\n             .arg(\"-j\")\n-            .arg(env::var(\"NUM_JOBS\").unwrap()));\n+            .arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")));\n \n     if target.contains(\"windows\") {\n         println!(\"cargo:rustc-link-lib=static=jemalloc\");"}, {"sha": "66c683333b9854812767fc92e16b790c296f391d", "filename": "src/libcompiler_builtins/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1/src%2Flibcompiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1/src%2Flibcompiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Fbuild.rs?ref=8ccfc695b56c102a2e7e95719b398bfa0a5e8af1", "patch": "@@ -72,7 +72,7 @@ impl Sources {\n }\n \n fn main() {\n-    let target = env::var(\"TARGET\").unwrap();\n+    let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n     let cfg = &mut gcc::Config::new();\n \n     if target.contains(\"msvc\") {"}, {"sha": "3f551476e2b46b87a6529075e55bd2c6b124f5e5", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=8ccfc695b56c102a2e7e95719b398bfa0a5e8af1", "patch": "@@ -20,7 +20,7 @@ use build_helper::output;\n fn main() {\n     println!(\"cargo:rustc-cfg=cargobuild\");\n \n-    let target = env::var(\"TARGET\").unwrap();\n+    let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n     let llvm_config = env::var_os(\"LLVM_CONFIG\")\n                           .map(PathBuf::from)\n                           .unwrap_or_else(|| {\n@@ -62,8 +62,8 @@ fn main() {\n     // can't trust all the output of llvm-config becaues it might be targeted\n     // for the host rather than the target. As a result a bunch of blocks below\n     // are gated on `if !is_crossed`\n-    let target = env::var(\"TARGET\").unwrap();\n-    let host = env::var(\"HOST\").unwrap();\n+    let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n+    let host = env::var(\"HOST\").expect(\"HOST was not set\");\n     let is_crossed = target != host;\n \n     let optional_components = [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\", \"systemz\"];"}, {"sha": "c5732278db961c49fb5848ed6d67c5e128058531", "filename": "src/libstd/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=8ccfc695b56c102a2e7e95719b398bfa0a5e8af1", "patch": "@@ -23,8 +23,8 @@ fn main() {\n     println!(\"cargo:rustc-cfg=cargobuild\");\n     println!(\"cargo:rerun-if-changed=build.rs\");\n \n-    let target = env::var(\"TARGET\").unwrap();\n-    let host = env::var(\"HOST\").unwrap();\n+    let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n+    let host = env::var(\"HOST\").expect(\"HOST was not set\");\n     if cfg!(feature = \"backtrace\") && !target.contains(\"apple\") && !target.contains(\"msvc\") &&\n         !target.contains(\"emscripten\") {\n         build_libbacktrace(&host, &target);\n@@ -103,5 +103,5 @@ fn build_libbacktrace(host: &str, target: &str) {\n     run(Command::new(\"make\")\n                 .current_dir(&build_dir)\n                 .arg(format!(\"INCDIR={}\", src_dir.display()))\n-                .arg(\"-j\").arg(env::var(\"NUM_JOBS\").unwrap()));\n+                .arg(\"-j\").arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")));\n }"}, {"sha": "e1ddf8b4b7e01437f15da8e606cde47257ade3ff", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=8ccfc695b56c102a2e7e95719b398bfa0a5e8af1", "patch": "@@ -13,7 +13,7 @@ use std::env;\n fn main() {\n     println!(\"cargo:rustc-cfg=cargobuild\");\n \n-    let target = env::var(\"TARGET\").unwrap();\n+    let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n \n     if target.contains(\"linux\") {\n         if target.contains(\"musl\") && !target.contains(\"mips\") {"}]}