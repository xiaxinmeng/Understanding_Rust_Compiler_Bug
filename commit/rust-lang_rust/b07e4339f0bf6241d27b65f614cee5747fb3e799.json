{"sha": "b07e4339f0bf6241d27b65f614cee5747fb3e799", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwN2U0MzM5ZjBiZjYyNDFkMjdiNjVmNjE0Y2VlNTc0N2ZiM2U3OTk=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-12-06T02:52:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-06T02:52:19Z"}, "message": "Merge pull request #2221 from topecongiro/rfc/blank-lines\n\nKeep vertical spaces between items or statements within range", "tree": {"sha": "a76d31b6cb400e5100a0bf5f4c30c5df599ffab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a76d31b6cb400e5100a0bf5f4c30c5df599ffab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b07e4339f0bf6241d27b65f614cee5747fb3e799", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaJ1tjCRBK7hj4Ov3rIwAAdHIIAKdZucXeWN1pGr8nAzp3SbgK\nyfF63dAuUEm+FM1SXhYebd3VKm5d5o9MZOkKGvkVIqATd9AZBPCsi099EK0qJc3y\n+hzTV9eXf744pkdJcU0+nQEMrsYRaxuA5yAZ8SR0C8C7qwPWLw3ZQULfbxs9MCo0\nLXFyiESn0g7b1qFnnVkrMHQhnHEzyC4j07569XRSnIj0RhRuUAuOK6UG5BY4ujq9\nXs6hwkowc+31W0WyjMwFEl7VrPji5+wC7GrbCaTg9Mw1aaDfC9zDzfjdZcmnBkse\nkytQrrClwbJbo3BUNMvSNq37F3e4R7ys9Y2cUV+2AKkpgNt0f6fy2HiRKLYZuxY=\n=9T00\n-----END PGP SIGNATURE-----\n", "payload": "tree a76d31b6cb400e5100a0bf5f4c30c5df599ffab4\nparent ae51f69de42efcec4f7159efabbc8b07163c6a09\nparent 9ed05410a3365dc1e01bbf538ab39b34e85fe299\nauthor Nick Cameron <nrc@ncameron.org> 1512528739 +1300\ncommitter GitHub <noreply@github.com> 1512528739 +1300\n\nMerge pull request #2221 from topecongiro/rfc/blank-lines\n\nKeep vertical spaces between items or statements within range "}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b07e4339f0bf6241d27b65f614cee5747fb3e799", "html_url": "https://github.com/rust-lang/rust/commit/b07e4339f0bf6241d27b65f614cee5747fb3e799", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b07e4339f0bf6241d27b65f614cee5747fb3e799/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae51f69de42efcec4f7159efabbc8b07163c6a09", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae51f69de42efcec4f7159efabbc8b07163c6a09", "html_url": "https://github.com/rust-lang/rust/commit/ae51f69de42efcec4f7159efabbc8b07163c6a09"}, {"sha": "9ed05410a3365dc1e01bbf538ab39b34e85fe299", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed05410a3365dc1e01bbf538ab39b34e85fe299", "html_url": "https://github.com/rust-lang/rust/commit/9ed05410a3365dc1e01bbf538ab39b34e85fe299"}], "stats": {"total": 430, "additions": 267, "deletions": 163}, "files": [{"sha": "2643946236d6c2a52a5172046806a7851ff9ab3c", "filename": "build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -14,7 +14,6 @@ use std::io::Write;\n use std::path::PathBuf;\n use std::process::Command;\n \n-\n fn main() {\n     let out_dir = PathBuf::from(env::var_os(\"OUT_DIR\").unwrap());\n "}, {"sha": "5e7cb458649b3b3d7328522764a8dc9166d5ac2b", "filename": "src/bin/git-fmt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fbin%2Fgit-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fbin%2Fgit-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fgit-fmt.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -14,7 +14,6 @@ use getopts::{Matches, Options};\n use rustfmt::{run, Input};\n use rustfmt::config;\n \n-\n fn prune_files(files: Vec<&str>) -> Vec<&str> {\n     let prefixes: Vec<_> = files\n         .iter()"}, {"sha": "9bf268878817932bde55ec2662078581d7ae40af", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -10,7 +10,6 @@\n \n #![cfg(not(test))]\n \n-\n extern crate env_logger;\n extern crate getopts;\n extern crate rustfmt_nightly as rustfmt;"}, {"sha": "73ef2064295357d761b28fc6a4a5febe5441018a", "filename": "src/closures.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -31,7 +31,6 @@ use utils::{last_line_width, left_most_sub_expr, stmt_expr};\n //     statement without needing a semi-colon), then adding or removing braces\n //     can change whether it is treated as an expression or statement.\n \n-\n pub fn rewrite_closure(\n     capture: ast::CaptureBy,\n     fn_decl: &ast::FnDecl,"}, {"sha": "5903323f2f47c2df561089a24e0a9f8a86f9fa27", "filename": "src/comment.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -18,7 +18,7 @@ use config::Config;\n use rewrite::RewriteContext;\n use shape::{Indent, Shape};\n use string::{rewrite_string, StringFormat};\n-use utils::{first_line_width, last_line_width};\n+use utils::{count_newlines, first_line_width, last_line_width};\n \n fn is_custom_comment(comment: &str) -> bool {\n     if !comment.starts_with(\"//\") {\n@@ -292,7 +292,7 @@ fn rewrite_comment_inner(\n         config: config,\n     };\n \n-    let line_breaks = orig.trim_right().chars().filter(|&c| c == '\\n').count();\n+    let line_breaks = count_newlines(orig.trim_right());\n     let lines = orig.lines()\n         .enumerate()\n         .map(|(i, mut line)| {\n@@ -829,9 +829,6 @@ impl<'a> Iterator for UngroupedCommentCodeSlices<'a> {\n     }\n }\n \n-\n-\n-\n /// Iterator over an alternating sequence of functional and commented parts of\n /// a string. The first item is always a, possibly zero length, subslice of\n /// functional text. Line style comments contain their ending newlines.\n@@ -953,7 +950,6 @@ fn changed_comment_content(orig: &str, new: &str) -> bool {\n     res\n }\n \n-\n /// Iterator over the 'payload' characters of a comment.\n /// It skips whitespace, comment start/end marks, and '*' at the beginning of lines.\n /// The comment must be one comment, ie not more than one start mark (no multiple line comments,\n@@ -999,7 +995,6 @@ impl<'a> Iterator for CommentReducer<'a> {\n     }\n }\n \n-\n fn remove_comment_header(comment: &str) -> &str {\n     if comment.starts_with(\"///\") || comment.starts_with(\"//!\") {\n         &comment[3..]"}, {"sha": "1ece6171d9b4b2d53425616626dce63918ab43e4", "filename": "src/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -21,7 +21,6 @@ use file_lines::FileLines;\n use lists::{ListTactic, SeparatorPlace, SeparatorTactic};\n use Summary;\n \n-\n macro_rules! is_nightly_channel {\n     () => {\n         option_env!(\"CFG_RELEASE_CHANNEL\")\n@@ -88,7 +87,6 @@ configuration_option_enum! { TypeDensity:\n     Wide,\n }\n \n-\n impl Density {\n     pub fn to_list_tactic(self) -> ListTactic {\n         match self {\n@@ -579,8 +577,6 @@ pub fn get_toml_path(dir: &Path) -> Result<Option<PathBuf>, Error> {\n     Ok(None)\n }\n \n-\n-\n create_config! {\n     // Fundamental stuff\n     max_width: usize, 100, true, \"Maximum width of each line\";\n@@ -651,6 +647,10 @@ create_config! {\n         \"Add trailing semicolon after break, continue and return\";\n     match_block_trailing_comma: bool, false, false,\n         \"Put a trailing comma after a block based match arm (non-block arms are not affected)\";\n+    blank_lines_upper_bound: usize, 1, false,\n+        \"Maximum number of blank lines which can be put between items.\";\n+    blank_lines_lower_bound: usize, 0, false,\n+        \"Minimum number of blank lines which must be put between items.\";\n \n     // Options that can change the source code beyond whitespace/blocks (somewhat linty things)\n     merge_derives: bool, true, true, \"Merge multiple `#[derive(...)]` into a single one\";"}, {"sha": "42de975e1278237e651fa35b50d42d3bc16ebd1b", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -2807,12 +2807,8 @@ pub fn choose_rhs<R: Rewrite>(\n }\n \n fn prefer_next_line(orig_rhs: &str, next_line_rhs: &str) -> bool {\n-    fn count_line_breaks(src: &str) -> usize {\n-        src.chars().filter(|&x| x == '\\n').count()\n-    }\n-\n-    !next_line_rhs.contains('\\n')\n-        || count_line_breaks(orig_rhs) > count_line_breaks(next_line_rhs) + 1\n+    use utils::count_newlines;\n+    !next_line_rhs.contains('\\n') || count_newlines(orig_rhs) > count_newlines(next_line_rhs) + 1\n }\n \n fn rewrite_expr_addrof("}, {"sha": "c46b477abaa28b3a46772f4841b917f1bd3edd5a", "filename": "src/filemap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // TODO: add tests\n \n use std::fs::{self, File};"}, {"sha": "f38e41eca8942ae3ceba5f1c814d4ea2e78afaa2", "filename": "src/imports.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -13,7 +13,6 @@ use std::cmp::Ordering;\n use syntax::ast;\n use syntax::codemap::{BytePos, Span};\n \n-\n use spanned::Spanned;\n use codemap::SpanUtils;\n use comment::combine_strs_with_missing_comments;"}, {"sha": "c1345bceb129eb564ecdf69e6961aa8b3364038c", "filename": "src/items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -283,7 +283,6 @@ impl<'a> FmtVisitor<'a> {\n         self.format_item(item);\n     }\n \n-\n     fn format_foreign_item(&mut self, item: &ast::ForeignItem) {\n         let rewrite = item.rewrite(&self.get_context(), self.shape());\n         self.push_rewrite(item.span(), rewrite);"}, {"sha": "12840e26d5dbf4b8f8fbc638003159f686937f9b", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -17,7 +17,7 @@ use comment::{find_comment_end, rewrite_comment, FindUncommented};\n use config::{Config, IndentStyle};\n use rewrite::RewriteContext;\n use shape::{Indent, Shape};\n-use utils::{first_line_width, last_line_width, mk_sp, starts_with_newline};\n+use utils::{count_newlines, first_line_width, last_line_width, mk_sp, starts_with_newline};\n \n /// Formatting tactic for lists. This will be cast down to a\n /// `DefinitiveListTactic` depending on the number and length of the items and\n@@ -677,7 +677,7 @@ where\n                 // From the end of the first line of comments to the next non-whitespace char.\n                 let test_snippet = &test_snippet[..first];\n \n-                if test_snippet.chars().filter(|c| c == &'\\n').count() > 1 {\n+                if count_newlines(test_snippet) > 1 {\n                     // There were multiple line breaks which got trimmed to nothing.\n                     new_lines = true;\n                 }"}, {"sha": "a3cad47063e2eece191db69f3a35ff9453d02658", "filename": "src/missed_spans.rs", "status": "modified", "additions": 181, "deletions": 108, "changes": 289, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -9,13 +9,15 @@\n // except according to those terms.\n \n use std::borrow::Cow;\n+use std::iter::repeat;\n \n use syntax::codemap::{BytePos, Pos, Span};\n \n+use codemap::LineRangeUtils;\n use comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};\n use config::WriteMode;\n use shape::{Indent, Shape};\n-use utils::mk_sp;\n+use utils::{count_newlines, mk_sp};\n use visitor::FmtVisitor;\n \n impl<'a> FmtVisitor<'a> {\n@@ -74,8 +76,28 @@ impl<'a> FmtVisitor<'a> {\n \n         self.last_pos = end;\n         let span = mk_sp(start, end);\n+        let snippet = self.snippet(span);\n+        if snippet.trim().is_empty() && !out_of_file_lines_range!(self, span) {\n+            // Keep vertical spaces within range.\n+            self.push_vertical_spaces(count_newlines(&snippet));\n+            process_last_snippet(self, \"\", &snippet);\n+        } else {\n+            self.write_snippet(span, &process_last_snippet);\n+        }\n+    }\n \n-        self.write_snippet(span, &process_last_snippet);\n+    fn push_vertical_spaces(&mut self, mut newline_count: usize) {\n+        // The buffer already has a trailing newline.\n+        let offset = if self.buffer.cur_offset() == 0 { 0 } else { 1 };\n+        let newline_upper_bound = self.config.blank_lines_upper_bound() + offset;\n+        let newline_lower_bound = self.config.blank_lines_lower_bound() + offset;\n+        if newline_count > newline_upper_bound {\n+            newline_count = newline_upper_bound;\n+        } else if newline_count < newline_lower_bound {\n+            newline_count = newline_lower_bound;\n+        }\n+        let blank_lines: String = repeat('\\n').take(newline_count).collect();\n+        self.buffer.push_str(&blank_lines);\n     }\n \n     fn write_snippet<F>(&mut self, span: Span, process_last_snippet: F)\n@@ -100,6 +122,85 @@ impl<'a> FmtVisitor<'a> {\n         self.write_snippet_inner(big_snippet, big_diff, &snippet, span, process_last_snippet);\n     }\n \n+    fn process_comment(\n+        &mut self,\n+        status: &mut SnippetStatus,\n+        snippet: &str,\n+        big_snippet: &str,\n+        offset: usize,\n+        big_diff: usize,\n+        subslice: &str,\n+        file_name: &str,\n+    ) -> bool {\n+        let last_char = big_snippet[..(offset + big_diff)]\n+            .chars()\n+            .rev()\n+            .skip_while(|rev_c| [' ', '\\t'].contains(rev_c))\n+            .next();\n+\n+        let fix_indent = last_char.map_or(true, |rev_c| ['{', '\\n'].contains(&rev_c));\n+\n+        let subslice_num_lines = count_newlines(subslice);\n+        let skip_this_range = !self.config.file_lines().intersects_range(\n+            file_name,\n+            status.cur_line,\n+            status.cur_line + subslice_num_lines,\n+        );\n+\n+        if status.rewrite_next_comment && skip_this_range {\n+            status.rewrite_next_comment = false;\n+        }\n+\n+        if status.rewrite_next_comment {\n+            if fix_indent {\n+                if let Some('{') = last_char {\n+                    self.buffer.push_str(\"\\n\");\n+                }\n+                self.buffer\n+                    .push_str(&self.block_indent.to_string(self.config));\n+            } else {\n+                self.buffer.push_str(\" \");\n+            }\n+\n+            let comment_width = ::std::cmp::min(\n+                self.config.comment_width(),\n+                self.config.max_width() - self.block_indent.width(),\n+            );\n+            let comment_indent = Indent::from_width(self.config, self.buffer.cur_offset());\n+            let comment_shape = Shape::legacy(comment_width, comment_indent);\n+            let comment_str = rewrite_comment(subslice, false, comment_shape, self.config)\n+                .unwrap_or_else(|| String::from(subslice));\n+            self.buffer.push_str(&comment_str);\n+\n+            status.last_wspace = None;\n+            status.line_start = offset + subslice.len();\n+\n+            if let Some('/') = subslice.chars().nth(1) {\n+                // check that there are no contained block comments\n+                if !subslice\n+                    .split('\\n')\n+                    .map(|s| s.trim_left())\n+                    .any(|s| s.len() >= 2 && &s[0..2] == \"/*\")\n+                {\n+                    // Add a newline after line comments\n+                    self.buffer.push_str(\"\\n\");\n+                }\n+            } else if status.line_start <= snippet.len() {\n+                // For other comments add a newline if there isn't one at the end already\n+                match snippet[status.line_start..].chars().next() {\n+                    Some('\\n') | Some('\\r') => (),\n+                    _ => self.buffer.push_str(\"\\n\"),\n+                }\n+            }\n+\n+            status.cur_line += subslice_num_lines;\n+            true\n+        } else {\n+            status.rewrite_next_comment = false;\n+            false\n+        }\n+    }\n+\n     fn write_snippet_inner<F>(\n         &mut self,\n         big_snippet: &str,\n@@ -113,13 +214,9 @@ impl<'a> FmtVisitor<'a> {\n         // Trim whitespace from the right hand side of each line.\n         // Annoyingly, the library functions for splitting by lines etc. are not\n         // quite right, so we must do it ourselves.\n-        let mut line_start = 0;\n-        let mut last_wspace = None;\n-        let mut rewrite_next_comment = true;\n-\n         let char_pos = self.codemap.lookup_char_pos(span.lo());\n         let file_name = &char_pos.file.name;\n-        let mut cur_line = char_pos.line;\n+        let mut status = SnippetStatus::new(char_pos.line);\n \n         fn replace_chars<'a>(string: &'a str) -> Cow<'a, str> {\n             if string.contains(char::is_whitespace) {\n@@ -143,121 +240,97 @@ impl<'a> FmtVisitor<'a> {\n             debug!(\"{:?}: {:?}\", kind, subslice);\n \n             if let CodeCharKind::Comment = kind {\n-                let last_char = big_snippet[..(offset + big_diff)]\n-                    .chars()\n-                    .rev()\n-                    .skip_while(|rev_c| [' ', '\\t'].contains(rev_c))\n-                    .next();\n-\n-                let fix_indent = last_char.map_or(true, |rev_c| ['{', '\\n'].contains(&rev_c));\n-\n-                let subslice_num_lines = subslice.chars().filter(|c| *c == '\\n').count();\n-\n-                if rewrite_next_comment\n-                    && !self.config.file_lines().intersects_range(\n-                        file_name,\n-                        cur_line,\n-                        cur_line + subslice_num_lines,\n-                    ) {\n-                    rewrite_next_comment = false;\n+                if self.process_comment(\n+                    &mut status,\n+                    snippet,\n+                    big_snippet,\n+                    offset,\n+                    big_diff,\n+                    subslice,\n+                    file_name,\n+                ) {\n+                    continue;\n                 }\n+            }\n \n-                if rewrite_next_comment {\n-                    if fix_indent {\n-                        if let Some('{') = last_char {\n-                            self.buffer.push_str(\"\\n\");\n-                        }\n-                        self.buffer\n-                            .push_str(&self.block_indent.to_string(self.config));\n-                    } else {\n-                        self.buffer.push_str(\" \");\n-                    }\n+            let newline_count = count_newlines(&subslice);\n+            if subslice.trim().is_empty() && newline_count > 0\n+                && self.config.file_lines().intersects_range(\n+                    file_name,\n+                    status.cur_line,\n+                    status.cur_line + newline_count,\n+                ) {\n+                self.push_vertical_spaces(newline_count);\n+                status.cur_line += newline_count;\n+                status.rewrite_next_comment = true;\n+                status.line_start = offset + newline_count;\n+            } else {\n+                for (mut i, c) in subslice.char_indices() {\n+                    i += offset;\n \n-                    let comment_width = ::std::cmp::min(\n-                        self.config.comment_width(),\n-                        self.config.max_width() - self.block_indent.width(),\n-                    );\n-                    let comment_indent = Indent::from_width(self.config, self.buffer.cur_offset());\n-\n-                    self.buffer.push_str(&rewrite_comment(\n-                        subslice,\n-                        false,\n-                        Shape::legacy(comment_width, comment_indent),\n-                        self.config,\n-                    ).unwrap());\n-\n-                    last_wspace = None;\n-                    line_start = offset + subslice.len();\n-\n-                    if let Some('/') = subslice.chars().nth(1) {\n-                        // check that there are no contained block comments\n-                        if !subslice\n-                            .split('\\n')\n-                            .map(|s| s.trim_left())\n-                            .any(|s| s.len() >= 2 && &s[0..2] == \"/*\")\n+                    if c == '\\n' {\n+                        if !self.config\n+                            .file_lines()\n+                            .contains_line(file_name, status.cur_line)\n                         {\n-                            // Add a newline after line comments\n-                            self.buffer.push_str(\"\\n\");\n+                            status.last_wspace = None;\n                         }\n-                    } else if line_start <= snippet.len() {\n-                        // For other comments add a newline if there isn't one at the end already\n-                        match snippet[line_start..].chars().next() {\n-                            Some('\\n') | Some('\\r') => (),\n-                            _ => self.buffer.push_str(\"\\n\"),\n-                        }\n-                    }\n-\n-                    cur_line += subslice_num_lines;\n-                    continue;\n-                } else {\n-                    rewrite_next_comment = false;\n-                }\n-            }\n \n-            for (mut i, c) in subslice.char_indices() {\n-                i += offset;\n+                        if let Some(lw) = status.last_wspace {\n+                            self.buffer.push_str(&snippet[status.line_start..lw]);\n+                            self.buffer.push_str(\"\\n\");\n+                        } else {\n+                            self.buffer.push_str(&snippet[status.line_start..i + 1]);\n+                        }\n \n-                if c == '\\n' {\n-                    if !self.config.file_lines().contains_line(file_name, cur_line) {\n-                        last_wspace = None;\n-                    }\n+                        status.cur_line += 1;\n+                        status.line_start = i + 1;\n+                        status.last_wspace = None;\n+                        status.rewrite_next_comment = true;\n+                    } else if c.is_whitespace() {\n+                        if status.last_wspace.is_none() {\n+                            status.last_wspace = Some(i);\n+                        }\n+                    } else if c == ';' {\n+                        if status.last_wspace.is_some() {\n+                            status.line_start = i;\n+                        }\n \n-                    if let Some(lw) = last_wspace {\n-                        self.buffer.push_str(&snippet[line_start..lw]);\n-                        self.buffer.push_str(\"\\n\");\n+                        status.rewrite_next_comment = true;\n+                        status.last_wspace = None;\n                     } else {\n-                        self.buffer.push_str(&snippet[line_start..i + 1]);\n-                    }\n-\n-                    cur_line += 1;\n-                    line_start = i + 1;\n-                    last_wspace = None;\n-                    rewrite_next_comment = rewrite_next_comment || kind == CodeCharKind::Normal;\n-                } else if c.is_whitespace() {\n-                    if last_wspace.is_none() {\n-                        last_wspace = Some(i);\n-                    }\n-                } else if c == ';' {\n-                    if last_wspace.is_some() {\n-                        line_start = i;\n+                        status.rewrite_next_comment = true;\n+                        status.last_wspace = None;\n                     }\n-\n-                    rewrite_next_comment = rewrite_next_comment || kind == CodeCharKind::Normal;\n-                    last_wspace = None;\n-                } else {\n-                    rewrite_next_comment = rewrite_next_comment || kind == CodeCharKind::Normal;\n-                    last_wspace = None;\n                 }\n-            }\n \n-            let remaining = snippet[line_start..subslice.len() + offset].trim();\n-            if !remaining.is_empty() {\n-                self.buffer.push_str(remaining);\n-                line_start = subslice.len() + offset;\n-                rewrite_next_comment = rewrite_next_comment || kind == CodeCharKind::Normal;\n+                let remaining = snippet[status.line_start..subslice.len() + offset].trim();\n+                if !remaining.is_empty() {\n+                    self.buffer.push_str(remaining);\n+                    status.line_start = subslice.len() + offset;\n+                    status.rewrite_next_comment = true;\n+                }\n             }\n         }\n \n-        process_last_snippet(self, &snippet[line_start..], snippet);\n+        process_last_snippet(self, &snippet[status.line_start..], snippet);\n+    }\n+}\n+\n+struct SnippetStatus {\n+    line_start: usize,\n+    last_wspace: Option<usize>,\n+    rewrite_next_comment: bool,\n+    cur_line: usize,\n+}\n+\n+impl SnippetStatus {\n+    fn new(cur_line: usize) -> Self {\n+        SnippetStatus {\n+            line_start: 0,\n+            last_wspace: None,\n+            rewrite_next_comment: true,\n+            cur_line,\n+        }\n     }\n }"}, {"sha": "30deafd3f9e99d584ac987f0c22136a5c15546ad", "filename": "src/modules.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -18,7 +18,6 @@ use syntax::parse::parser;\n \n use utils::contains_skip;\n \n-\n /// List all the files containing modules of a crate.\n /// If a file is used twice in a crate, it appears only once.\n pub fn list_files<'a>("}, {"sha": "7d3fcf73d56506e6cd0e7954d1073dccd8659219", "filename": "src/utils.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -262,6 +262,11 @@ pub fn stmt_expr(stmt: &ast::Stmt) -> Option<&ast::Expr> {\n     }\n }\n \n+#[inline]\n+pub fn count_newlines(input: &str) -> usize {\n+    input.chars().filter(|&c| c == '\\n').count()\n+}\n+\n #[inline]\n pub fn trim_newlines(input: &str) -> &str {\n     match input.find(|c| c != '\\n' && c != '\\r') {"}, {"sha": "6db1999ee23747dd6e2cbdabec3ec0f315b0fc6b", "filename": "src/visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -31,7 +31,7 @@ use macros::{rewrite_macro, MacroPosition};\n use regex::Regex;\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n-use utils::{self, contains_skip, inner_attributes, mk_sp, ptr_vec_to_ref_vec};\n+use utils::{self, contains_skip, count_newlines, inner_attributes, mk_sp, ptr_vec_to_ref_vec};\n \n fn is_use_item(item: &ast::Item) -> bool {\n     match item.node {\n@@ -833,7 +833,7 @@ where\n             // Extract comments between two attributes.\n             let span_between_attr = mk_sp(attr.span.hi(), next_attr.span.lo());\n             let snippet = context.snippet(span_between_attr);\n-            if snippet.chars().filter(|c| *c == '\\n').count() >= 2 || snippet.contains('/') {\n+            if count_newlines(&snippet) >= 2 || snippet.contains('/') {\n                 break;\n             }\n         }\n@@ -886,7 +886,7 @@ fn has_newlines_before_after_comment(comment: &str) -> (&str, &str) {\n     // Look at before and after comment and see if there are any empty lines.\n     let comment_begin = comment.chars().position(|c| c == '/');\n     let len = comment_begin.unwrap_or_else(|| comment.len());\n-    let mlb = comment.chars().take(len).filter(|c| *c == '\\n').count() > 1;\n+    let mlb = count_newlines(&comment[..len]) > 1;\n     let mla = if comment_begin.is_none() {\n         mlb\n     } else {"}, {"sha": "c6058a55b0aeed72d6f3d3df4078ca270b4e2685", "filename": "tests/source/configs-blank_lines_lower_bound-1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Fsource%2Fconfigs-blank_lines_lower_bound-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Fsource%2Fconfigs-blank_lines_lower_bound-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-blank_lines_lower_bound-1.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -0,0 +1,13 @@\n+// rustfmt-blank_lines_lower_bound: 1\n+\n+fn foo() {}\n+fn bar() {}\n+// comment\n+fn foobar() {}\n+\n+fn foo1() {}\n+fn bar1() {}\n+\n+// comment\n+\n+fn foobar1() {}"}, {"sha": "7466e21eed845dd337f600ffb44f963172bfdbfd", "filename": "tests/source/remove_blank_lines.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Fsource%2Fremove_blank_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Fsource%2Fremove_blank_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fremove_blank_lines.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -6,10 +6,16 @@ fn main() {\n     let x = 1;\n \n \n+    let y = 2;\n+\n+\n+    println!(\"x + y = {}\", x + y);\n+\n \n \n }\n \n+\n fn foo() {\n \n     #![attribute]\n@@ -20,3 +26,19 @@ fn foo() {\n \n \n }\n+// comment after item\n+\n+\n+// comment before item\n+fn bar() {\n+    let x = 1;\n+    // comment after statement\n+\n+\n+    // comment before statment\n+    let y = 2;\n+    let z = 3;\n+\n+\n+    println!(\"x + y + z = {}\", x + y + z);\n+}"}, {"sha": "3bb41b1cd6ba05f2e3906715fd80778e8285cd23", "filename": "tests/system.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -71,7 +71,6 @@ fn checkstyle_test() {\n     assert_output(filename, expected_filename);\n }\n \n-\n // Helper function for comparing the results of rustfmt\n // to a known output file generated by one of the write modes.\n fn assert_output(source: &str, expected_filename: &str) {"}, {"sha": "9706699dc7a3c5ec64930773b3d9fab0e72bf484", "filename": "tests/target/configs-blank_lines_lower_bound-1.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fconfigs-blank_lines_lower_bound-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fconfigs-blank_lines_lower_bound-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-blank_lines_lower_bound-1.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -0,0 +1,16 @@\n+// rustfmt-blank_lines_lower_bound: 1\n+\n+fn foo() {}\n+\n+fn bar() {}\n+\n+// comment\n+fn foobar() {}\n+\n+fn foo1() {}\n+\n+fn bar1() {}\n+\n+// comment\n+\n+fn foobar1() {}"}, {"sha": "c4a7f5d38020cf01fb24ae8e580499ab024923ae", "filename": "tests/target/configs-where_single_line.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fconfigs-where_single_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fconfigs-where_single_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-where_single_line.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -1,7 +1,6 @@\n // rustfmt-where_single_line: true\n // Where style\n \n-\n fn lorem_two_items<Ipsum, Dolor, Sit, Amet>() -> T\n where\n     Ipsum: Eq,"}, {"sha": "054a3075ca0c5aa675d7b0336ac632a1d1135920", "filename": "tests/target/control-brace-style-always-next-line.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fcontrol-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fcontrol-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcontrol-brace-style-always-next-line.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -7,28 +7,24 @@ fn main() {\n         ();\n     }\n \n-\n     'label: loop\n     // loop comment\n     {\n         ();\n     }\n \n-\n     cond = true;\n     while cond\n     {\n         ();\n     }\n \n-\n     'while_label: while cond\n     {\n         // while comment\n         ();\n     }\n \n-\n     for obj in iter\n     {\n         for sub_obj in obj"}, {"sha": "ae6bf4a56821c768fb4a54a03a9363b224b9a029", "filename": "tests/target/control-brace-style-always-same-line.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fcontrol-brace-style-always-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fcontrol-brace-style-always-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcontrol-brace-style-always-same-line.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -6,26 +6,22 @@ fn main() {\n         ();\n     }\n \n-\n     'label: loop\n     // loop comment\n     {\n         ();\n     }\n \n-\n     cond = true;\n     while cond {\n         ();\n     }\n \n-\n     'while_label: while cond {\n         // while comment\n         ();\n     }\n \n-\n     for obj in iter {\n         for sub_obj in obj {\n             'nested_while_label: while cond {"}, {"sha": "31e12cfa0d02e94eaa3ca8f1732b05c8a706c54a", "filename": "tests/target/else-if-brace-style-always-next-line.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Felse-if-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Felse-if-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Felse-if-brace-style-always-next-line.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -14,10 +14,8 @@ fn main() {\n         ();\n     }\n \n-\n     let a = if 0 > 1 { unreachable!() } else { 0x0 };\n \n-\n     if true\n     {\n         ();"}, {"sha": "5e5ab21a0d884ae7b701e793a9c1b3b0e772313b", "filename": "tests/target/else-if-brace-style-always-same-line.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Felse-if-brace-style-always-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Felse-if-brace-style-always-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Felse-if-brace-style-always-same-line.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -13,10 +13,8 @@ fn main() {\n         ();\n     }\n \n-\n     let a = if 0 > 1 { unreachable!() } else { 0x0 };\n \n-\n     if true {\n         ();\n     } else if false {"}, {"sha": "c99807dc06db460f8a447a4f85c798d3506e4d1b", "filename": "tests/target/else-if-brace-style-closing-next-line.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Felse-if-brace-style-closing-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Felse-if-brace-style-closing-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Felse-if-brace-style-closing-next-line.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -13,10 +13,8 @@ fn main() {\n         ();\n     }\n \n-\n     let a = if 0 > 1 { unreachable!() } else { 0x0 };\n \n-\n     if true {\n         ();\n     }"}, {"sha": "0b9a15e8a9261601edbc4e54e0ec9ca6782b8e23", "filename": "tests/target/empty-tuple-no-conversion-to-unit-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fempty-tuple-no-conversion-to-unit-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fempty-tuple-no-conversion-to-unit-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fempty-tuple-no-conversion-to-unit-struct.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -3,7 +3,6 @@ enum TestEnum {\n     Arm2,\n }\n \n-\n fn foo() {\n     let test = TestEnum::Arm1;\n     match test {"}, {"sha": "779c8b168a3a8299986d691d07f77508d5fec286", "filename": "tests/target/enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -95,7 +95,6 @@ where\n     Right { list: I, root: T }, // Post Comment\n }\n \n-\n enum EmtpyWithComment {\n     // Some comment\n }"}, {"sha": "4e6e649383559a02f2defadeb0002ffe8f3b4459", "filename": "tests/target/fn-simple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-simple.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -18,7 +18,6 @@ fn simple(\n     \"cool\"\n }\n \n-\n fn weird_comment(\n     // /*/ double level */ comment\n     x: Hello, // /*/* triple, even */*/"}, {"sha": "b78a8b5b21ed539ec543eccfb5399f1c1183f8bd", "filename": "tests/target/fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Ffn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Ffn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -24,7 +24,6 @@ where\n \n }\n \n-\n fn foo<U, T>(\n     a: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n     b: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,"}, {"sha": "a743d7f3067df40ddb183c67bd02faa1f7594d4e", "filename": "tests/target/impls.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpls.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -78,7 +78,6 @@ mod a {\n     }\n }\n \n-\n mod b {\n     mod a {\n         impl Foo {"}, {"sha": "0c330d80a56444b683bce86b34b96faae6744268", "filename": "tests/target/multiple.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmultiple.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -4,7 +4,6 @@\n // Test of lots of random stuff.\n // FIXME split this into multiple, self-contained tests.\n \n-\n #[attr1]\n extern crate foo;\n #[attr2]\n@@ -24,7 +23,6 @@ use std::{self, any, ascii, borrow, borrow, borrow, borrow, borrow, borrow, borr\n mod doc;\n mod other;\n \n-\n // sfdgfffffffffffffffffffffffffffffffffffffffffffffffffffffff\n // ffffffffffffffffffffffffffffffffffffffffff\n \n@@ -129,7 +127,6 @@ fn main() {\n         println!(\"{}\", i);\n     }\n \n-\n     while true {\n         hello();\n     }"}, {"sha": "89b18e40b83d2d9fb52b697a36c65c59de7600d3", "filename": "tests/target/remove_blank_lines.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fremove_blank_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Fremove_blank_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fremove_blank_lines.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -1,5 +1,9 @@\n fn main() {\n     let x = 1;\n+\n+    let y = 2;\n+\n+    println!(\"x + y = {}\", x + y);\n }\n \n fn foo() {\n@@ -9,3 +13,16 @@ fn foo() {\n \n     // comment\n }\n+// comment after item\n+\n+// comment before item\n+fn bar() {\n+    let x = 1;\n+    // comment after statement\n+\n+    // comment before statment\n+    let y = 2;\n+    let z = 3;\n+\n+    println!(\"x + y + z = {}\", x + y + z);\n+}"}, {"sha": "8833be9e1a0f0a9af925271a3e76ed5318af60d1", "filename": "tests/target/type_alias.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07e4339f0bf6241d27b65f614cee5747fb3e799/tests%2Ftarget%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype_alias.rs?ref=b07e4339f0bf6241d27b65f614cee5747fb3e799", "patch": "@@ -52,7 +52,6 @@ pub type CommentTest<\n     T,\n > = ();\n \n-\n pub type WithWhereClause<LONGPARAMETERNAME, T>\n where\n     T: Clone,"}]}