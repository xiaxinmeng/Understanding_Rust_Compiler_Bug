{"sha": "5ea959dc8bfdf0dd62fd8ac611ba4e9e8d75c69d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYTk1OWRjOGJmZGYwZGQ2MmZkOGFjNjExYmE0ZTllOGQ3NWM2OWQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-16T08:30:05Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-31T01:11:55Z"}, "message": "Convert symbols to strings for pretty printing", "tree": {"sha": "e674285e8e49697b015c946f65d0f5f29ab929f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e674285e8e49697b015c946f65d0f5f29ab929f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ea959dc8bfdf0dd62fd8ac611ba4e9e8d75c69d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea959dc8bfdf0dd62fd8ac611ba4e9e8d75c69d", "html_url": "https://github.com/rust-lang/rust/commit/5ea959dc8bfdf0dd62fd8ac611ba4e9e8d75c69d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ea959dc8bfdf0dd62fd8ac611ba4e9e8d75c69d/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "438f6b04c6fe2daf7f6000294edd50c26f6da619", "url": "https://api.github.com/repos/rust-lang/rust/commits/438f6b04c6fe2daf7f6000294edd50c26f6da619", "html_url": "https://github.com/rust-lang/rust/commit/438f6b04c6fe2daf7f6000294edd50c26f6da619"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "d1020a2d151d4922a09d21ddc2affa027b70ca42", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ea959dc8bfdf0dd62fd8ac611ba4e9e8d75c69d/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea959dc8bfdf0dd62fd8ac611ba4e9e8d75c69d/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=5ea959dc8bfdf0dd62fd8ac611ba4e9e8d75c69d", "patch": "@@ -622,7 +622,7 @@ impl<'a> State<'a> {\n             }\n             hir::ItemKind::GlobalAsm(ref ga) => {\n                 self.head(visibility_qualified(&item.vis, \"global asm\"))?;\n-                self.s.word(ga.asm.as_str().get())?;\n+                self.s.word(ga.asm.as_str().to_string())?;\n                 self.end()?\n             }\n             hir::ItemKind::Ty(ref ty, ref generics) => {\n@@ -1591,7 +1591,7 @@ impl<'a> State<'a> {\n         if ident.is_raw_guess() {\n             self.s.word(format!(\"r#{}\", ident.name))?;\n         } else {\n-            self.s.word(ident.as_str().get())?;\n+            self.s.word(ident.as_str().to_string())?;\n         }\n         self.ann.post(self, AnnNode::Name(&ident.name))\n     }\n@@ -1998,7 +1998,7 @@ impl<'a> State<'a> {\n         self.commasep(Inconsistent, &decl.inputs, |s, ty| {\n             s.ibox(indent_unit)?;\n             if let Some(arg_name) = arg_names.get(i) {\n-                s.s.word(arg_name.as_str().get())?;\n+                s.s.word(arg_name.as_str().to_string())?;\n                 s.s.word(\":\")?;\n                 s.s.space()?;\n             } else if let Some(body_id) = body_id {"}, {"sha": "d8a8cbb655b4b548720afa23594b5cef95783bc4", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ea959dc8bfdf0dd62fd8ac611ba4e9e8d75c69d/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea959dc8bfdf0dd62fd8ac611ba4e9e8d75c69d/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=5ea959dc8bfdf0dd62fd8ac611ba4e9e8d75c69d", "patch": "@@ -369,7 +369,7 @@ impl<'a> Printer<'a> {\n         Ok(())\n     }\n \n-    fn pretty_print_string<'s>(&mut self, s: Cow<'s, str>, len: isize) -> io::Result<()> {\n+    fn pretty_print_string(&mut self, s: Cow<'static, str>, len: isize) -> io::Result<()> {\n         if self.scan_stack.is_empty() {\n             debug!(\"pp String('{}')/print Vec<{},{}>\",\n                    s, self.left, self.right);\n@@ -378,10 +378,7 @@ impl<'a> Printer<'a> {\n             debug!(\"pp String('{}')/buffer Vec<{},{}>\",\n                    s, self.left, self.right);\n             self.advance_right();\n-            self.buf[self.right] = BufEntry {\n-                token: Token::String(s.into_owned().into(), len),\n-                size: len\n-            };\n+            self.buf[self.right] = BufEntry { token: Token::String(s, len), size: len };\n             self.right_total += len;\n             self.check_stream()\n         }\n@@ -579,7 +576,7 @@ impl<'a> Printer<'a> {\n         }\n     }\n \n-    pub fn print_string(&mut self, s: Cow<'_, str>, len: isize) -> io::Result<()> {\n+    pub fn print_string(&mut self, s: Cow<'static, str>, len: isize) -> io::Result<()> {\n         debug!(\"print String({})\", s);\n         // assert!(len <= space);\n         self.space -= len;\n@@ -644,7 +641,7 @@ impl<'a> Printer<'a> {\n         self.pretty_print_eof()\n     }\n \n-    pub fn word<'s, S: Into<Cow<'s, str>>>(&mut self, wrd: S) -> io::Result<()> {\n+    pub fn word<S: Into<Cow<'static, str>>>(&mut self, wrd: S) -> io::Result<()> {\n         let s = wrd.into();\n         let len = s.len() as isize;\n         self.pretty_print_string(s, len)"}, {"sha": "ca05ff71c9433a8f737b4544ef04ad7967f4ec68", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ea959dc8bfdf0dd62fd8ac611ba4e9e8d75c69d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea959dc8bfdf0dd62fd8ac611ba4e9e8d75c69d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5ea959dc8bfdf0dd62fd8ac611ba4e9e8d75c69d", "patch": "@@ -645,7 +645,7 @@ pub trait PrintState<'a> {\n             ast::LitKind::Float(ref f, t) => {\n                 self.writer().word(format!(\"{}{}\", &f, t.ty_to_string()))\n             }\n-            ast::LitKind::FloatUnsuffixed(ref f) => self.writer().word(f.as_str().get()),\n+            ast::LitKind::FloatUnsuffixed(ref f) => self.writer().word(f.as_str().to_string()),\n             ast::LitKind::Bool(val) => {\n                 if val { self.writer().word(\"true\") } else { self.writer().word(\"false\") }\n             }\n@@ -731,7 +731,7 @@ pub trait PrintState<'a> {\n                 if segment.ident.name == keywords::DollarCrate.name() {\n                     self.print_dollar_crate(segment.ident)?;\n                 } else {\n-                    self.writer().word(segment.ident.as_str().get())?;\n+                    self.writer().word(segment.ident.as_str().to_string())?;\n                 }\n             }\n         }\n@@ -749,7 +749,7 @@ pub trait PrintState<'a> {\n         }\n         self.maybe_print_comment(attr.span.lo())?;\n         if attr.is_sugared_doc {\n-            self.writer().word(attr.value_str().unwrap().as_str().get())?;\n+            self.writer().word(attr.value_str().unwrap().as_str().to_string())?;\n             self.writer().hardbreak()\n         } else {\n             match attr.style {\n@@ -858,7 +858,7 @@ pub trait PrintState<'a> {\n         if !ast::Ident::with_empty_ctxt(name).is_path_segment_keyword() {\n             self.writer().word(\"::\")?;\n         }\n-        self.writer().word(name.as_str().get())\n+        self.writer().word(name.as_str().to_string())\n     }\n }\n \n@@ -1300,7 +1300,7 @@ impl<'a> State<'a> {\n             }\n             ast::ItemKind::GlobalAsm(ref ga) => {\n                 self.head(visibility_qualified(&item.vis, \"global_asm!\"))?;\n-                self.s.word(ga.asm.as_str().get())?;\n+                self.s.word(ga.asm.as_str().to_string())?;\n                 self.end()?;\n             }\n             ast::ItemKind::Ty(ref ty, ref generics) => {\n@@ -2437,7 +2437,7 @@ impl<'a> State<'a> {\n         if ident.is_raw_guess() {\n             self.s.word(format!(\"r#{}\", ident))?;\n         } else {\n-            self.s.word(ident.as_str().get())?;\n+            self.s.word(ident.as_str().to_string())?;\n         }\n         self.ann.post(self, AnnNode::Ident(&ident))\n     }\n@@ -2447,7 +2447,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_name(&mut self, name: ast::Name) -> io::Result<()> {\n-        self.s.word(name.as_str().get())?;\n+        self.s.word(name.as_str().to_string())?;\n         self.ann.post(self, AnnNode::Name(&name))\n     }\n "}]}