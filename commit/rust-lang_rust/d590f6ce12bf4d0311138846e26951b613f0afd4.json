{"sha": "d590f6ce12bf4d0311138846e26951b613f0afd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1OTBmNmNlMTJiZjRkMDMxMTEzODg0NmUyNjk1MWI2MTNmMGFmZDQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-20T14:36:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-20T14:36:53Z"}, "message": "Merge #2592\n\n2592: Add std::ops::Index support for infering r=edwin0cheng a=edwin0cheng\n\nsee also #2534\r\n\r\nSeem like this can't fix #2534 for this case:\r\n\r\n```rust\r\nfn foo3(bar: [usize; 2]) {\r\n    let baz = bar[1];   // <--- baz is still unknown ?\r\n    println!(\"{}\", baz);\r\n}\r\n```\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "d73816f61ccdaa2b9710ff5c7efbb3b62367c9c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d73816f61ccdaa2b9710ff5c7efbb3b62367c9c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d590f6ce12bf4d0311138846e26951b613f0afd4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/NyFCRBK7hj4Ov3rIwAAdHIIAClT9SM9f0qVAxNR1z6c15hr\nM1zT8aMcIrCytPHddQaM6Tk0Pk/B6oOYTNsjzIvei9FTB5NK30x0J9HgPb0GsCkT\nIBHcZzPZU4XYGVYIu8Ht8oH11U3pIQGRNTNUxTpv0VW484kkTs0OnCcciL5Az9fa\nb8jF+lPSWti1jlcQTReYH0W/q1nhM++V4BY7T9PxdNvzKslzljcB6Ms18Yqw6TA9\nFdyjx87SK9TbpCLl+lsOkszqhRwD4Rw2Hj0C5GXPBWT7wygPSEUSbRpoBT/DE68j\nhoeRM4BkjRLO0PzRWBzkMft3tCPPe1Fu2kLetu3npchn8LJQrqIboSwlDuSFFio=\n=rW95\n-----END PGP SIGNATURE-----\n", "payload": "tree d73816f61ccdaa2b9710ff5c7efbb3b62367c9c3\nparent 81a1b14d78d6078c63dd42c09da5a3e171c85a3a\nparent 76d688a328ab53b6264f9e489b88524377a7271d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576852613 +0000\ncommitter GitHub <noreply@github.com> 1576852613 +0000\n\nMerge #2592\n\n2592: Add std::ops::Index support for infering r=edwin0cheng a=edwin0cheng\n\nsee also #2534\r\n\r\nSeem like this can't fix #2534 for this case:\r\n\r\n```rust\r\nfn foo3(bar: [usize; 2]) {\r\n    let baz = bar[1];   // <--- baz is still unknown ?\r\n    println!(\"{}\", baz);\r\n}\r\n```\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d590f6ce12bf4d0311138846e26951b613f0afd4", "html_url": "https://github.com/rust-lang/rust/commit/d590f6ce12bf4d0311138846e26951b613f0afd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d590f6ce12bf4d0311138846e26951b613f0afd4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81a1b14d78d6078c63dd42c09da5a3e171c85a3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/81a1b14d78d6078c63dd42c09da5a3e171c85a3a", "html_url": "https://github.com/rust-lang/rust/commit/81a1b14d78d6078c63dd42c09da5a3e171c85a3a"}, {"sha": "76d688a328ab53b6264f9e489b88524377a7271d", "url": "https://api.github.com/repos/rust-lang/rust/commits/76d688a328ab53b6264f9e489b88524377a7271d", "html_url": "https://github.com/rust-lang/rust/commit/76d688a328ab53b6264f9e489b88524377a7271d"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "00325cd99ad3ce2453455dc30622b3e193835f91", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d590f6ce12bf4d0311138846e26951b613f0afd4/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d590f6ce12bf4d0311138846e26951b613f0afd4/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=d590f6ce12bf4d0311138846e26951b613f0afd4", "patch": "@@ -257,6 +257,7 @@ macro_rules! __known_path {\n     (std::ops::Try) => {};\n     (std::ops::Neg) => {};\n     (std::ops::Not) => {};\n+    (std::ops::Index) => {};\n     ($path:path) => {\n         compile_error!(\"Please register your known path in the path module\")\n     };"}, {"sha": "fd02ffa4e12d1ce197771545d31506c354bb6cd6", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d590f6ce12bf4d0311138846e26951b613f0afd4/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d590f6ce12bf4d0311138846e26951b613f0afd4/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=d590f6ce12bf4d0311138846e26951b613f0afd4", "patch": "@@ -161,6 +161,7 @@ pub mod known {\n         Range,\n         Neg,\n         Not,\n+        Index,\n         // Builtin macros\n         file,\n         column,"}, {"sha": "bbbc391c4f561bbb148e2be1fcb0cd6dcd2e0c39", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d590f6ce12bf4d0311138846e26951b613f0afd4/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d590f6ce12bf4d0311138846e26951b613f0afd4/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=d590f6ce12bf4d0311138846e26951b613f0afd4", "patch": "@@ -363,14 +363,26 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn resolve_associated_type(&mut self, inner_ty: Ty, assoc_ty: Option<TypeAliasId>) -> Ty {\n+        self.resolve_associated_type_with_params(inner_ty, assoc_ty, &[])\n+    }\n+\n+    fn resolve_associated_type_with_params(\n+        &mut self,\n+        inner_ty: Ty,\n+        assoc_ty: Option<TypeAliasId>,\n+        params: &[Ty],\n+    ) -> Ty {\n         match assoc_ty {\n             Some(res_assoc_ty) => {\n                 let ty = self.table.new_type_var();\n+                let builder = Substs::build_for_def(self.db, res_assoc_ty)\n+                    .push(inner_ty)\n+                    .fill(params.iter().cloned());\n                 let projection = ProjectionPredicate {\n                     ty: ty.clone(),\n                     projection_ty: ProjectionTy {\n                         associated_ty: res_assoc_ty,\n-                        parameters: Substs::single(inner_ty),\n+                        parameters: builder.build(),\n                     },\n                 };\n                 self.obligations.push(Obligation::Projection(projection));\n@@ -517,6 +529,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let struct_ = self.resolver.resolve_known_struct(self.db, &path)?;\n         Some(struct_.into())\n     }\n+\n+    fn resolve_ops_index_output(&self) -> Option<TypeAliasId> {\n+        let path = path![std::ops::Index];\n+        let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n+        self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n+    }\n }\n \n /// The kinds of placeholders we need during type inference. There's separate"}, {"sha": "8be56791779087dac51c968086f5498a6bf29dbc", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d590f6ce12bf4d0311138846e26951b613f0afd4/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d590f6ce12bf4d0311138846e26951b613f0afd4/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=d590f6ce12bf4d0311138846e26951b613f0afd4", "patch": "@@ -422,10 +422,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 }\n             }\n             Expr::Index { base, index } => {\n-                let _base_ty = self.infer_expr_inner(*base, &Expectation::none());\n-                let _index_ty = self.infer_expr(*index, &Expectation::none());\n-                // FIXME: use `std::ops::Index::Output` to figure out the real return type\n-                Ty::Unknown\n+                let base_ty = self.infer_expr_inner(*base, &Expectation::none());\n+                let index_ty = self.infer_expr(*index, &Expectation::none());\n+\n+                self.resolve_associated_type_with_params(\n+                    base_ty,\n+                    self.resolve_ops_index_output(),\n+                    &[index_ty],\n+                )\n             }\n             Expr::Tuple { exprs } => {\n                 let mut tys = match &expected.ty {"}, {"sha": "2d92a5eec266040ddf66c05234c6e6f804420ef1", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d590f6ce12bf4d0311138846e26951b613f0afd4/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d590f6ce12bf4d0311138846e26951b613f0afd4/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=d590f6ce12bf4d0311138846e26951b613f0afd4", "patch": "@@ -426,6 +426,38 @@ fn indexing_arrays() {\n     )\n }\n \n+#[test]\n+fn infer_ops_index() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+\n+struct Bar;\n+struct Foo;\n+\n+impl std::ops::Index<u32> for Bar {\n+    type Output = Foo;\n+}\n+\n+fn test() {\n+    let a = Bar;\n+    let b = a[1];\n+    b<|>;\n+}\n+\n+//- /std.rs crate:std\n+\n+#[prelude_import] use ops::*;\n+mod ops {\n+    pub trait Index<Idx> {\n+        type Output;\n+    }\n+}\n+\"#,\n+    );\n+    assert_eq!(\"Foo\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn deref_trait() {\n     let t = type_at("}]}