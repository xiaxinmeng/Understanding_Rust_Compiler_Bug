{"sha": "2490ab7718020be373ac31dcb4cc55b791d46044", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0OTBhYjc3MTgwMjBiZTM3M2FjMzFkY2I0Y2M1NWI3OTFkNDYwNDQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-30T09:47:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-30T09:47:49Z"}, "message": "Merge #8254\n\n8254: internal: switch from CLI to internal benchmarking r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8455d51018e4c395ac33d6df4174c94dbd6dbcb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8455d51018e4c395ac33d6df4174c94dbd6dbcb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2490ab7718020be373ac31dcb4cc55b791d46044", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgYvPFCRBK7hj4Ov3rIwAAdHIIALMAPzeB24LhzQvBgaVGkJek\n0Qx7zCwwny14uTrOoOY7Nvf60Ld/dP9dsNemGOdBUBXMkv3B3anQbkCcH7sLC5lb\nWZ2bHrDg/hkyWvCSTjCwamyOnxzSLpP2wNlY37IbJwYuV0rN9xSJrc8+qlusBMFC\nhN/W908llmD72su8TiHm4/0Czd3GBWgPzLUhGCGyKah7s50wPa+1XYNMV9NzFNk0\nzyd0t/+zF2R3ebdQDCAWjaGR3ONZtnWlrWFAyTejm60ns6Dnhdy6kHcaLf48dwSR\nqKgJRE1C8AsstsbeYmSkTWk7pZxvnbtB8EqhBzIdsUas5CvwaHscj6GOSbRfrP4=\n=tdp8\n-----END PGP SIGNATURE-----\n", "payload": "tree 8455d51018e4c395ac33d6df4174c94dbd6dbcb1\nparent 904bdff2241a54c6aebe0f6fd39e6560550a66b0\nparent 797185e1b66fb0d6ec1dedf206616890b5e3fef3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617097669 +0000\ncommitter GitHub <noreply@github.com> 1617097669 +0000\n\nMerge #8254\n\n8254: internal: switch from CLI to internal benchmarking r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2490ab7718020be373ac31dcb4cc55b791d46044", "html_url": "https://github.com/rust-lang/rust/commit/2490ab7718020be373ac31dcb4cc55b791d46044", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2490ab7718020be373ac31dcb4cc55b791d46044/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "904bdff2241a54c6aebe0f6fd39e6560550a66b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/904bdff2241a54c6aebe0f6fd39e6560550a66b0", "html_url": "https://github.com/rust-lang/rust/commit/904bdff2241a54c6aebe0f6fd39e6560550a66b0"}, {"sha": "797185e1b66fb0d6ec1dedf206616890b5e3fef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/797185e1b66fb0d6ec1dedf206616890b5e3fef3", "html_url": "https://github.com/rust-lang/rust/commit/797185e1b66fb0d6ec1dedf206616890b5e3fef3"}], "stats": {"total": 338, "additions": 76, "deletions": 262}, "files": [{"sha": "a6f997af80d4b4e79e7f8a81abb32a03ee35cd1d", "filename": "crates/rust-analyzer/src/benchmarks.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/2490ab7718020be373ac31dcb4cc55b791d46044/crates%2Frust-analyzer%2Fsrc%2Fbenchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2490ab7718020be373ac31dcb4cc55b791d46044/crates%2Frust-analyzer%2Fsrc%2Fbenchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbenchmarks.rs?ref=2490ab7718020be373ac31dcb4cc55b791d46044", "patch": "@@ -0,0 +1,69 @@\n+//! Fully integrated benchmarks for rust-analyzer, which load real cargo\n+//! projects.\n+//!\n+//! The benchmark here is used to debug specific performance regressions. If you\n+//! notice that, eg, completion is slow in some specific case, you can  modify\n+//! code here exercise this specific completion, and thus have a fast\n+//! edit/compile/test cycle.\n+//!\n+//! Note that \"Rust Analyzer: Run\" action does not allow running a single test\n+//! in release mode in VS Code. There's however \"Rust Analyzer: Copy Run Command Line\"\n+//! which you can use to paste the command in terminal and add `--release` manually.\n+\n+use std::sync::Arc;\n+\n+use ide::Change;\n+use test_utils::project_root;\n+use vfs::{AbsPathBuf, VfsPath};\n+\n+use crate::cli::load_cargo::{load_workspace_at, LoadCargoConfig};\n+\n+#[test]\n+fn benchmark_integrated_highlighting() {\n+    // Don't run slow benchmark by default\n+    if true {\n+        return;\n+    }\n+\n+    // Load rust-analyzer itself.\n+    let workspace_to_load = project_root();\n+    let file = \"./crates/ide_db/src/apply_change.rs\";\n+\n+    let cargo_config = Default::default();\n+    let load_cargo_config =\n+        LoadCargoConfig { load_out_dirs_from_check: true, with_proc_macro: false };\n+\n+    let (mut host, vfs, _proc_macro) = {\n+        let _it = stdx::timeit(\"workspace loading\");\n+        load_workspace_at(&workspace_to_load, &cargo_config, &load_cargo_config, &|_| {}).unwrap()\n+    };\n+\n+    let file_id = {\n+        let file = workspace_to_load.join(file);\n+        let path = VfsPath::from(AbsPathBuf::assert(file));\n+        vfs.file_id(&path).unwrap_or_else(|| panic!(\"can't find virtual file for {}\", path))\n+    };\n+\n+    {\n+        let _it = stdx::timeit(\"initial\");\n+        let analysis = host.analysis();\n+        analysis.highlight_as_html(file_id, false).unwrap();\n+    }\n+\n+    profile::init_from(\"*>100\");\n+\n+    {\n+        let _it = stdx::timeit(\"change\");\n+        let mut text = host.analysis().file_text(file_id).unwrap().to_string();\n+        text.push_str(\"\\npub fn _dummy() {}\\n\");\n+        let mut change = Change::new();\n+        change.change_file(file_id, Some(Arc::new(text)));\n+        host.apply_change(change);\n+    }\n+\n+    {\n+        let _it = stdx::timeit(\"after change\");\n+        let analysis = host.analysis();\n+        analysis.highlight_as_html(file_id, false).unwrap();\n+    }\n+}"}, {"sha": "b05fc00b957b047550e617fb261091a16e8e2ed3", "filename": "crates/rust-analyzer/src/bin/flags.rs", "status": "modified", "additions": 2, "deletions": 51, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2490ab7718020be373ac31dcb4cc55b791d46044/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2490ab7718020be373ac31dcb4cc55b791d46044/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fflags.rs?ref=2490ab7718020be373ac31dcb4cc55b791d46044", "patch": "@@ -1,10 +1,9 @@\n //! Grammar for the command-line arguments.\n #![allow(unreachable_pub)]\n-use std::{env, path::PathBuf};\n+use std::path::PathBuf;\n \n use ide_ssr::{SsrPattern, SsrRule};\n-use rust_analyzer::cli::{BenchWhat, Position, Verbosity};\n-use vfs::AbsPathBuf;\n+use rust_analyzer::cli::Verbosity;\n \n xflags::xflags! {\n     src \"./src/bin/flags.rs\"\n@@ -74,27 +73,6 @@ xflags::xflags! {\n             optional --with-proc-macro\n         }\n \n-        /// Benchmark specific analysis operation\n-        cmd analysis-bench\n-            /// Directory with Cargo.toml.\n-            required path: PathBuf\n-        {\n-            /// Collect memory usage statistics.\n-            optional --memory-usage\n-\n-            /// Compute syntax highlighting for this file\n-            optional --highlight path: PathBuf\n-            /// Compute completions at file:line:column location.\n-            optional --complete location: Position\n-            /// Compute goto definition at file:line:column location.\n-            optional --goto-def location: Position\n-\n-            /// Load OUT_DIR values by running `cargo check` before analysis.\n-            optional --load-output-dirs\n-            /// Use proc-macro-srv for proc-macro expanding.\n-            optional --with-proc-macro\n-        }\n-\n         cmd diagnostics\n             /// Directory with Cargo.toml.\n             required path: PathBuf\n@@ -142,7 +120,6 @@ pub enum RustAnalyzerCmd {\n     Symbols(Symbols),\n     Highlight(Highlight),\n     AnalysisStats(AnalysisStats),\n-    AnalysisBench(AnalysisBench),\n     Diagnostics(Diagnostics),\n     Ssr(Ssr),\n     Search(Search),\n@@ -183,18 +160,6 @@ pub struct AnalysisStats {\n     pub with_proc_macro: bool,\n }\n \n-#[derive(Debug)]\n-pub struct AnalysisBench {\n-    pub path: PathBuf,\n-\n-    pub memory_usage: bool,\n-    pub highlight: Option<PathBuf>,\n-    pub complete: Option<Position>,\n-    pub goto_def: Option<Position>,\n-    pub load_output_dirs: bool,\n-    pub with_proc_macro: bool,\n-}\n-\n #[derive(Debug)]\n pub struct Diagnostics {\n     pub path: PathBuf,\n@@ -239,17 +204,3 @@ impl RustAnalyzer {\n         }\n     }\n }\n-\n-impl AnalysisBench {\n-    pub(crate) fn what(&self) -> BenchWhat {\n-        match (&self.highlight, &self.complete, &self.goto_def) {\n-            (Some(path), None, None) => {\n-                let path = env::current_dir().unwrap().join(path);\n-                BenchWhat::Highlight { path: AbsPathBuf::assert(path) }\n-            }\n-            (None, Some(position), None) => BenchWhat::Complete(position.clone()),\n-            (None, None, Some(position)) => BenchWhat::GotoDef(position.clone()),\n-            _ => panic!(\"exactly one of  `--highlight`, `--complete` or `--goto-def` must be set\"),\n-        }\n-    }\n-}"}, {"sha": "ae99eefe3ef9486a31224e003a335ae624f9b9bd", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2490ab7718020be373ac31dcb4cc55b791d46044/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2490ab7718020be373ac31dcb4cc55b791d46044/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=2490ab7718020be373ac31dcb4cc55b791d46044", "patch": "@@ -9,7 +9,7 @@ use std::{convert::TryFrom, env, fs, path::Path, process};\n use lsp_server::Connection;\n use project_model::ProjectManifest;\n use rust_analyzer::{\n-    cli::{self, AnalysisStatsCmd, BenchCmd},\n+    cli::{self, AnalysisStatsCmd},\n     config::Config,\n     from_json,\n     lsp_ext::supports_utf8,\n@@ -80,17 +80,6 @@ fn try_main() -> Result<()> {\n             with_proc_macro: cmd.with_proc_macro,\n         }\n         .run(verbosity)?,\n-        flags::RustAnalyzerCmd::AnalysisBench(cmd) => {\n-            let what = cmd.what();\n-            BenchCmd {\n-                memory_usage: cmd.memory_usage,\n-                path: cmd.path,\n-                load_output_dirs: cmd.load_output_dirs,\n-                with_proc_macro: cmd.with_proc_macro,\n-                what,\n-            }\n-            .run(verbosity)?\n-        }\n \n         flags::RustAnalyzerCmd::Diagnostics(cmd) => {\n             cli::diagnostics(&cmd.path, cmd.load_output_dirs, cmd.with_proc_macro)?"}, {"sha": "76b666dc27c716e6141e009b32411abd7c90e31d", "filename": "crates/rust-analyzer/src/cli.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2490ab7718020be373ac31dcb4cc55b791d46044/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2490ab7718020be373ac31dcb4cc55b791d46044/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli.rs?ref=2490ab7718020be373ac31dcb4cc55b791d46044", "patch": "@@ -1,8 +1,7 @@\n //! Various batch processing tasks, intended primarily for debugging.\n \n-mod load_cargo;\n+pub(crate) mod load_cargo;\n mod analysis_stats;\n-mod analysis_bench;\n mod diagnostics;\n mod progress_report;\n mod ssr;\n@@ -15,7 +14,6 @@ use syntax::{AstNode, SourceFile};\n use vfs::Vfs;\n \n pub use self::{\n-    analysis_bench::{BenchCmd, BenchWhat, Position},\n     analysis_stats::AnalysisStatsCmd,\n     diagnostics::diagnostics,\n     load_cargo::{load_workspace, load_workspace_at, LoadCargoConfig},"}, {"sha": "49994824f5369d83076cc3950009f3eb56158d60", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "removed", "additions": 0, "deletions": 196, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/904bdff2241a54c6aebe0f6fd39e6560550a66b0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904bdff2241a54c6aebe0f6fd39e6560550a66b0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=904bdff2241a54c6aebe0f6fd39e6560550a66b0", "patch": "@@ -1,196 +0,0 @@\n-//! Benchmark operations like highlighting or goto definition.\n-\n-use std::{env, path::PathBuf, str::FromStr, sync::Arc, time::Instant};\n-\n-use anyhow::{bail, format_err, Result};\n-use hir::PrefixKind;\n-use ide::{\n-    Analysis, AnalysisHost, Change, CompletionConfig, DiagnosticsConfig, FilePosition, LineCol,\n-};\n-use ide_db::{\n-    base_db::{\n-        salsa::{Database, Durability},\n-        FileId,\n-    },\n-    helpers::{insert_use::InsertUseConfig, SnippetCap},\n-};\n-use vfs::AbsPathBuf;\n-\n-use crate::cli::{\n-    load_cargo::{load_workspace_at, LoadCargoConfig},\n-    print_memory_usage, Verbosity,\n-};\n-\n-pub struct BenchCmd {\n-    pub path: PathBuf,\n-    pub what: BenchWhat,\n-    pub memory_usage: bool,\n-    pub load_output_dirs: bool,\n-    pub with_proc_macro: bool,\n-}\n-\n-pub enum BenchWhat {\n-    Highlight { path: AbsPathBuf },\n-    Complete(Position),\n-    GotoDef(Position),\n-}\n-\n-#[derive(Debug, Clone)]\n-pub struct Position {\n-    pub path: AbsPathBuf,\n-    pub line: u32,\n-    pub column: u32,\n-}\n-\n-impl FromStr for Position {\n-    type Err = anyhow::Error;\n-    fn from_str(s: &str) -> Result<Self> {\n-        let mut split = s.rsplitn(3, ':');\n-        match (split.next(), split.next(), split.next()) {\n-            (Some(column), Some(line), Some(path)) => {\n-                let path = env::current_dir().unwrap().join(path);\n-                let path = AbsPathBuf::assert(path);\n-                Ok(Position { path, line: line.parse()?, column: column.parse()? })\n-            }\n-            _ => bail!(\"position should be in file:line:column format: {:?}\", s),\n-        }\n-    }\n-}\n-\n-impl BenchCmd {\n-    pub fn run(self, verbosity: Verbosity) -> Result<()> {\n-        profile::init();\n-\n-        let start = Instant::now();\n-        eprint!(\"loading: \");\n-\n-        let cargo_config = Default::default();\n-        let load_cargo_config = LoadCargoConfig {\n-            load_out_dirs_from_check: self.load_output_dirs,\n-            with_proc_macro: self.with_proc_macro,\n-        };\n-        let (mut host, vfs, _proc_macro) =\n-            load_workspace_at(&self.path, &cargo_config, &load_cargo_config, &|_| {})?;\n-        eprintln!(\"{:?}\\n\", start.elapsed());\n-\n-        let file_id = {\n-            let path = match &self.what {\n-                BenchWhat::Highlight { path } => path,\n-                BenchWhat::Complete(pos) | BenchWhat::GotoDef(pos) => &pos.path,\n-            };\n-            let path = path.clone().into();\n-            vfs.file_id(&path).ok_or_else(|| format_err!(\"Can't find {}\", path))?\n-        };\n-\n-        match &self.what {\n-            BenchWhat::Highlight { .. } => {\n-                let res = do_work(&mut host, file_id, |analysis| {\n-                    analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap();\n-                    analysis.highlight_as_html(file_id, false).unwrap()\n-                });\n-                if verbosity.is_verbose() {\n-                    println!(\"\\n{}\", res);\n-                }\n-            }\n-            BenchWhat::Complete(pos) | BenchWhat::GotoDef(pos) => {\n-                let is_completion = matches!(self.what, BenchWhat::Complete(..));\n-\n-                let offset = host\n-                    .analysis()\n-                    .file_line_index(file_id)?\n-                    .offset(LineCol { line: pos.line - 1, col: pos.column });\n-                let file_position = FilePosition { file_id, offset };\n-\n-                if is_completion {\n-                    let options = CompletionConfig {\n-                        enable_postfix_completions: true,\n-                        enable_imports_on_the_fly: true,\n-                        add_call_parenthesis: true,\n-                        add_call_argument_snippets: true,\n-                        snippet_cap: SnippetCap::new(true),\n-                        insert_use: InsertUseConfig {\n-                            merge: None,\n-                            prefix_kind: PrefixKind::Plain,\n-                            group: true,\n-                        },\n-                    };\n-                    let res = do_work(&mut host, file_id, |analysis| {\n-                        analysis.completions(&options, file_position)\n-                    });\n-                    if verbosity.is_verbose() {\n-                        println!(\"\\n{:#?}\", res);\n-                    }\n-                } else {\n-                    let res = do_work(&mut host, file_id, |analysis| {\n-                        analysis.goto_definition(file_position)\n-                    });\n-                    if verbosity.is_verbose() {\n-                        println!(\"\\n{:#?}\", res);\n-                    }\n-                }\n-            }\n-        }\n-\n-        if self.memory_usage {\n-            print_memory_usage(host, vfs);\n-        }\n-\n-        Ok(())\n-    }\n-}\n-\n-fn do_work<F: Fn(&Analysis) -> T, T>(host: &mut AnalysisHost, file_id: FileId, work: F) -> T {\n-    {\n-        let start = Instant::now();\n-        eprint!(\"from scratch:   \");\n-        work(&host.analysis());\n-        eprintln!(\"{:?}\", start.elapsed());\n-    }\n-    {\n-        let start = Instant::now();\n-        eprint!(\"no change:      \");\n-        work(&host.analysis());\n-        eprintln!(\"{:?}\", start.elapsed());\n-    }\n-    {\n-        let start = Instant::now();\n-        eprint!(\"trivial change: \");\n-        host.raw_database_mut().salsa_runtime_mut().synthetic_write(Durability::LOW);\n-        work(&host.analysis());\n-        eprintln!(\"{:?}\", start.elapsed());\n-    }\n-    {\n-        let start = Instant::now();\n-        eprint!(\"comment change: \");\n-        {\n-            let mut text = host.analysis().file_text(file_id).unwrap().to_string();\n-            text.push_str(\"\\n/* Hello world */\\n\");\n-            let mut change = Change::new();\n-            change.change_file(file_id, Some(Arc::new(text)));\n-            host.apply_change(change);\n-        }\n-        work(&host.analysis());\n-        eprintln!(\"{:?}\", start.elapsed());\n-    }\n-    {\n-        let start = Instant::now();\n-        eprint!(\"item change:    \");\n-        {\n-            let mut text = host.analysis().file_text(file_id).unwrap().to_string();\n-            text.push_str(\"\\npub fn _dummy() {}\\n\");\n-            let mut change = Change::new();\n-            change.change_file(file_id, Some(Arc::new(text)));\n-            host.apply_change(change);\n-        }\n-        work(&host.analysis());\n-        eprintln!(\"{:?}\", start.elapsed());\n-    }\n-    {\n-        let start = Instant::now();\n-        eprint!(\"const change:   \");\n-        host.raw_database_mut().salsa_runtime_mut().synthetic_write(Durability::HIGH);\n-        let res = work(&host.analysis());\n-        eprintln!(\"{:?}\", start.elapsed());\n-        res\n-    }\n-}"}, {"sha": "d9a5030a0fd46ae94841a3587ec3e197b0ab1d75", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2490ab7718020be373ac31dcb4cc55b791d46044/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2490ab7718020be373ac31dcb4cc55b791d46044/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=2490ab7718020be373ac31dcb4cc55b791d46044", "patch": "@@ -39,6 +39,9 @@ mod op_queue;\n pub mod lsp_ext;\n pub mod config;\n \n+#[cfg(test)]\n+mod benchmarks;\n+\n use serde::de::DeserializeOwned;\n use std::fmt;\n "}]}