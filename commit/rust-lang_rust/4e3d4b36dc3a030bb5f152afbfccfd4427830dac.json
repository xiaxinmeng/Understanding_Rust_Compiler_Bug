{"sha": "4e3d4b36dc3a030bb5f152afbfccfd4427830dac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlM2Q0YjM2ZGMzYTAzMGJiNWYxNTJhZmJmY2NmZDQ0Mjc4MzBkYWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-24T02:47:38Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-30T02:04:51Z"}, "message": "libsyntax: Stop parsing mutable fields", "tree": {"sha": "d87281f9ec48a03d9e7bc66de07be6e80c5ce371", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d87281f9ec48a03d9e7bc66de07be6e80c5ce371"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e3d4b36dc3a030bb5f152afbfccfd4427830dac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3d4b36dc3a030bb5f152afbfccfd4427830dac", "html_url": "https://github.com/rust-lang/rust/commit/4e3d4b36dc3a030bb5f152afbfccfd4427830dac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e3d4b36dc3a030bb5f152afbfccfd4427830dac/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481d4ca43fde15443120f607a71fc951873532e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/481d4ca43fde15443120f607a71fc951873532e5", "html_url": "https://github.com/rust-lang/rust/commit/481d4ca43fde15443120f607a71fc951873532e5"}], "stats": {"total": 21, "additions": 6, "deletions": 15}, "files": [{"sha": "448ca4ab52398d862deeb9f17a978a6cccef58c8", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e3d4b36dc3a030bb5f152afbfccfd4427830dac/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3d4b36dc3a030bb5f152afbfccfd4427830dac/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=4e3d4b36dc3a030bb5f152afbfccfd4427830dac", "patch": "@@ -118,11 +118,7 @@ pub fn classify(e: @expr,\n \n               ast::expr_struct(_, ref fs, None) => {\n                 let cs = do vec::map((*fs)) |f| {\n-                    if f.node.mutbl == ast::m_imm {\n-                        classify(f.node.expr, tcx)\n-                    } else {\n-                        non_const\n-                    }\n+                    classify(f.node.expr, tcx)\n                 };\n                 join_all(cs)\n               }"}, {"sha": "cdd16e5d890e24f30fa773337f14b0b15bc5c3d8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e3d4b36dc3a030bb5f152afbfccfd4427830dac/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3d4b36dc3a030bb5f152afbfccfd4427830dac/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4e3d4b36dc3a030bb5f152afbfccfd4427830dac", "patch": "@@ -425,7 +425,6 @@ pub struct arm {\n \n #[deriving(Eq, Encodable, Decodable)]\n pub struct field_ {\n-    mutbl: mutability,\n     ident: ident,\n     expr: @expr,\n }"}, {"sha": "2a3c266cfa6e206f4af4602aa4c3843bf21b9954", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3d4b36dc3a030bb5f152afbfccfd4427830dac/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3d4b36dc3a030bb5f152afbfccfd4427830dac/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=4e3d4b36dc3a030bb5f152afbfccfd4427830dac", "patch": "@@ -486,7 +486,7 @@ impl AstBuilder for @ExtCtxt {\n         self.expr(b.span, ast::expr_block(b))\n     }\n     fn field_imm(&self, span: span, name: ident, e: @ast::expr) -> ast::field {\n-        respan(span, ast::field_ { mutbl: ast::m_imm, ident: name, expr: e })\n+        respan(span, ast::field_ { ident: name, expr: e })\n     }\n     fn expr_struct(&self, span: span, path: @ast::Path, fields: ~[ast::field]) -> @ast::expr {\n         self.expr(span, ast::expr_struct(path, fields, None))"}, {"sha": "0d863c736edcb3b977ba6a6c5620da1f9e2bfcc6", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e3d4b36dc3a030bb5f152afbfccfd4427830dac/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3d4b36dc3a030bb5f152afbfccfd4427830dac/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=4e3d4b36dc3a030bb5f152afbfccfd4427830dac", "patch": "@@ -433,7 +433,6 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n     fn fold_field_(field: field, fld: @ast_fold) -> field {\n         spanned {\n             node: ast::field_ {\n-                mutbl: field.node.mutbl,\n                 ident: fld.fold_ident(field.node.ident),\n                 expr: fld.fold_expr(field.node.expr),\n             },"}, {"sha": "de93bb3712ba19af0cc71febc0cd366fc5d45220", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e3d4b36dc3a030bb5f152afbfccfd4427830dac/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3d4b36dc3a030bb5f152afbfccfd4427830dac/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4e3d4b36dc3a030bb5f152afbfccfd4427830dac", "patch": "@@ -1157,11 +1157,13 @@ pub impl Parser {\n     // parse ident COLON expr\n     fn parse_field(&self) -> field {\n         let lo = self.span.lo;\n-        let m = self.parse_mutability();\n         let i = self.parse_ident();\n         self.expect(&token::COLON);\n         let e = self.parse_expr();\n-        spanned(lo, e.span.hi, ast::field_ { mutbl: m, ident: i, expr: e })\n+        spanned(lo, e.span.hi, ast::field_ {\n+            ident: i,\n+            expr: e\n+        })\n     }\n \n     fn mk_expr(&self, lo: BytePos, hi: BytePos, node: expr_) -> @expr {\n@@ -2566,10 +2568,6 @@ pub impl Parser {\n                          pr: visibility,\n                          attrs: ~[attribute]) -> @struct_field {\n         let lo = self.span.lo;\n-        if self.eat_keyword(keywords::Mut) {\n-            // Do nothing, for backwards compatibility.\n-            // XXX: Remove after snapshot.\n-        }\n         if !is_plain_ident(&*self.token) {\n             self.fatal(\"expected ident\");\n         }"}, {"sha": "5f814cc3576d2fe1a32cccf7a7169ea2b4254465", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e3d4b36dc3a030bb5f152afbfccfd4427830dac/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3d4b36dc3a030bb5f152afbfccfd4427830dac/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4e3d4b36dc3a030bb5f152afbfccfd4427830dac", "patch": "@@ -1083,7 +1083,6 @@ pub fn print_call_post(s: @ps,\n pub fn print_expr(s: @ps, expr: @ast::expr) {\n     fn print_field(s: @ps, field: ast::field) {\n         ibox(s, indent_unit);\n-        if field.node.mutbl == ast::m_mutbl { word_nbsp(s, \"mut\"); }\n         print_ident(s, field.node.ident);\n         word_space(s, \":\");\n         print_expr(s, field.node.expr);"}]}