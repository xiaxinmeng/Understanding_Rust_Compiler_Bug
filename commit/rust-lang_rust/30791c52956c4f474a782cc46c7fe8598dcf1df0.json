{"sha": "30791c52956c4f474a782cc46c7fe8598dcf1df0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNzkxYzUyOTU2YzRmNDc0YTc4MmNjNDZjN2ZlODU5OGRjZjFkZjA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-09T11:31:16Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-09T11:31:16Z"}, "message": "Use `Type::new_with_resolver_inner` more", "tree": {"sha": "ebf679fbfa8ec0bfaaa51b2d6cca78fbd2081fce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebf679fbfa8ec0bfaaa51b2d6cca78fbd2081fce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30791c52956c4f474a782cc46c7fe8598dcf1df0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30791c52956c4f474a782cc46c7fe8598dcf1df0", "html_url": "https://github.com/rust-lang/rust/commit/30791c52956c4f474a782cc46c7fe8598dcf1df0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30791c52956c4f474a782cc46c7fe8598dcf1df0/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "297240744d1d55ef5451ed4db3a3f37f8df38380", "url": "https://api.github.com/repos/rust-lang/rust/commits/297240744d1d55ef5451ed4db3a3f37f8df38380", "html_url": "https://github.com/rust-lang/rust/commit/297240744d1d55ef5451ed4db3a3f37f8df38380"}], "stats": {"total": 40, "additions": 14, "deletions": 26}, "files": [{"sha": "e3a332d30a4287264b58525aa9447d1325eda271", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/30791c52956c4f474a782cc46c7fe8598dcf1df0/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30791c52956c4f474a782cc46c7fe8598dcf1df0/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=30791c52956c4f474a782cc46c7fe8598dcf1df0", "patch": "@@ -812,13 +812,11 @@ impl Function {\n     /// Get this function's return type\n     pub fn ret_type(self, db: &dyn HirDatabase) -> Type {\n         let resolver = self.id.resolver(db.upcast());\n+        let krate = self.id.lookup(db.upcast()).container.module(db.upcast()).krate();\n         let ret_type = &db.function_data(self.id).ret_type;\n         let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n-        let environment = TraitEnvironment::lower(db, &resolver);\n-        Type {\n-            krate: self.id.lookup(db.upcast()).container.module(db.upcast()).krate(),\n-            ty: InEnvironment { value: Ty::from_hir_ext(&ctx, ret_type).0, environment },\n-        }\n+        let ty = Ty::from_hir_ext(&ctx, ret_type).0;\n+        Type::new_with_resolver_inner(db, krate, &resolver, ty)\n     }\n \n     pub fn self_param(self, db: &dyn HirDatabase) -> Option<SelfParam> {\n@@ -830,14 +828,15 @@ impl Function {\n \n     pub fn assoc_fn_params(self, db: &dyn HirDatabase) -> Vec<Param> {\n         let resolver = self.id.resolver(db.upcast());\n+        let krate = self.id.lookup(db.upcast()).container.module(db.upcast()).krate();\n         let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n         let environment = TraitEnvironment::lower(db, &resolver);\n         db.function_data(self.id)\n             .params\n             .iter()\n             .map(|type_ref| {\n                 let ty = Type {\n-                    krate: self.id.lookup(db.upcast()).container.module(db.upcast()).krate(),\n+                    krate,\n                     ty: InEnvironment {\n                         value: Ty::from_hir_ext(&ctx, type_ref).0,\n                         environment: environment.clone(),\n@@ -1402,12 +1401,9 @@ impl TypeParam {\n \n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n         let resolver = self.id.parent.resolver(db.upcast());\n-        let environment = TraitEnvironment::lower(db, &resolver);\n+        let krate = self.id.parent.module(db.upcast()).krate();\n         let ty = Ty::Placeholder(self.id);\n-        Type {\n-            krate: self.id.parent.module(db.upcast()).krate(),\n-            ty: InEnvironment { value: ty, environment },\n-        }\n+        Type::new_with_resolver_inner(db, krate, &resolver, ty)\n     }\n \n     pub fn trait_bounds(self, db: &dyn HirDatabase) -> Vec<Trait> {\n@@ -1426,14 +1422,11 @@ impl TypeParam {\n         let params = db.generic_defaults(self.id.parent);\n         let local_idx = hir_ty::param_idx(db, self.id)?;\n         let resolver = self.id.parent.resolver(db.upcast());\n-        let environment = TraitEnvironment::lower(db, &resolver);\n+        let krate = self.id.parent.module(db.upcast()).krate();\n         let ty = params.get(local_idx)?.clone();\n         let subst = Substs::type_params(db, self.id.parent);\n         let ty = ty.subst(&subst.prefix(local_idx));\n-        Some(Type {\n-            krate: self.id.parent.module(db.upcast()).krate(),\n-            ty: InEnvironment { value: ty, environment },\n-        })\n+        Some(Type::new_with_resolver_inner(db, krate, &resolver, ty))\n     }\n }\n \n@@ -1522,13 +1515,10 @@ impl Impl {\n     pub fn target_ty(self, db: &dyn HirDatabase) -> Type {\n         let impl_data = db.impl_data(self.id);\n         let resolver = self.id.resolver(db.upcast());\n+        let krate = self.id.lookup(db.upcast()).container.module(db.upcast()).krate();\n         let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n-        let environment = TraitEnvironment::lower(db, &resolver);\n         let ty = Ty::from_hir(&ctx, &impl_data.target_type);\n-        Type {\n-            krate: self.id.lookup(db.upcast()).container.module(db.upcast()).krate(),\n-            ty: InEnvironment { value: ty, environment },\n-        }\n+        Type::new_with_resolver_inner(db, krate, &resolver, ty)\n     }\n \n     pub fn items(self, db: &dyn HirDatabase) -> Vec<AssocItem> {\n@@ -1724,13 +1714,11 @@ impl Type {\n         };\n \n         match db.trait_solve(self.krate, goal)? {\n-            Solution::Unique(SolutionVariables(subst)) => subst.value.first().cloned(),\n+            Solution::Unique(SolutionVariables(subst)) => {\n+                subst.value.first().map(|ty| self.derived(ty.clone()))\n+            }\n             Solution::Ambig(_) => None,\n         }\n-        .map(|ty| Type {\n-            krate: self.krate,\n-            ty: InEnvironment { value: ty, environment: Arc::clone(&self.ty.environment) },\n-        })\n     }\n \n     pub fn is_copy(&self, db: &dyn HirDatabase) -> bool {"}]}