{"sha": "999b3004c499e96e62d677d79fab47c5c514636a", "node_id": "C_kwDOAAsO6NoAKDk5OWIzMDA0YzQ5OWU5NmU2MmQ2NzdkNzlmYWI0N2M1YzUxNDYzNmE", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2021-10-25T07:46:47Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2021-10-26T07:05:28Z"}, "message": "new lint: string-slice", "tree": {"sha": "79bcf55b398d7f2670d94da5d13d74c70d55fcdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79bcf55b398d7f2670d94da5d13d74c70d55fcdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/999b3004c499e96e62d677d79fab47c5c514636a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/999b3004c499e96e62d677d79fab47c5c514636a", "html_url": "https://github.com/rust-lang/rust/commit/999b3004c499e96e62d677d79fab47c5c514636a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/999b3004c499e96e62d677d79fab47c5c514636a/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73a443d611f7e412ee11c2d216fdb0755b1721dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/73a443d611f7e412ee11c2d216fdb0755b1721dc", "html_url": "https://github.com/rust-lang/rust/commit/73a443d611f7e412ee11c2d216fdb0755b1721dc"}], "stats": {"total": 141, "additions": 106, "deletions": 35}, "files": [{"sha": "fe4c3bf6261bab915dfb8f089518cbd335b3109a", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/999b3004c499e96e62d677d79fab47c5c514636a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/999b3004c499e96e62d677d79fab47c5c514636a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=999b3004c499e96e62d677d79fab47c5c514636a", "patch": "@@ -3000,6 +3000,7 @@ Released 2018-09-13\n [`string_extend_chars`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_extend_chars\n [`string_from_utf8_as_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_from_utf8_as_bytes\n [`string_lit_as_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_lit_as_bytes\n+[`string_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_slice\n [`string_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_to_string\n [`strlen_on_c_strings`]: https://rust-lang.github.io/rust-clippy/master/index.html#strlen_on_c_strings\n [`struct_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools"}, {"sha": "ff0a0f973976a9b7327d6331d29d04a227160bfb", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/999b3004c499e96e62d677d79fab47c5c514636a/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999b3004c499e96e62d677d79fab47c5c514636a/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=999b3004c499e96e62d677d79fab47c5c514636a", "patch": "@@ -431,6 +431,7 @@ store.register_lints(&[\n     strings::STRING_ADD_ASSIGN,\n     strings::STRING_FROM_UTF8_AS_BYTES,\n     strings::STRING_LIT_AS_BYTES,\n+    strings::STRING_SLICE,\n     strings::STRING_TO_STRING,\n     strings::STR_TO_STRING,\n     strlen_on_c_strings::STRLEN_ON_C_STRINGS,"}, {"sha": "4929bbecde090c72ac28c288d8d77bbb92e69213", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/999b3004c499e96e62d677d79fab47c5c514636a/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999b3004c499e96e62d677d79fab47c5c514636a/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=999b3004c499e96e62d677d79fab47c5c514636a", "patch": "@@ -53,6 +53,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(shadow::SHADOW_SAME),\n     LintId::of(shadow::SHADOW_UNRELATED),\n     LintId::of(strings::STRING_ADD),\n+    LintId::of(strings::STRING_SLICE),\n     LintId::of(strings::STRING_TO_STRING),\n     LintId::of(strings::STR_TO_STRING),\n     LintId::of(types::RC_BUFFER),"}, {"sha": "6435107b8b4643f02f94078b7fe0c70802458d56", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 71, "deletions": 35, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/999b3004c499e96e62d677d79fab47c5c514636a/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999b3004c499e96e62d677d79fab47c5c514636a/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=999b3004c499e96e62d677d79fab47c5c514636a", "patch": "@@ -107,51 +107,87 @@ declare_clippy_lint! {\n     \"calling `as_bytes` on a string literal instead of using a byte string literal\"\n }\n \n-declare_lint_pass!(StringAdd => [STRING_ADD, STRING_ADD_ASSIGN]);\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for slice operations on strings\n+    ///\n+    /// ### Why is this bad?\n+    /// UTF-8 characters span multiple bytes, and it is easy to inadvertently confuse character\n+    /// counts and string indices. This may lead to panics, and should warrant some test cases\n+    /// containing wide UTF-8 characters. This lint is most useful in code that should avoid\n+    /// panics at all costs.\n+    ///\n+    /// ### Known problems\n+    /// Probably lots of false positives. If an index comes from a known valid position (e.g.\n+    /// obtained via `char_indices` over the same string), it is totally OK.\n+    ///\n+    /// # Example\n+    /// ```rust,should_panic\n+    /// &\"\u00d6lkanne\"[1..];\n+    /// ```\n+    pub STRING_SLICE,\n+    restriction,\n+    \"slicing a string\"\n+}\n+\n+declare_lint_pass!(StringAdd => [STRING_ADD, STRING_ADD_ASSIGN, STRING_SLICE]);\n \n impl<'tcx> LateLintPass<'tcx> for StringAdd {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         if in_external_macro(cx.sess(), e.span) {\n             return;\n         }\n-\n-        if let ExprKind::Binary(\n-            Spanned {\n-                node: BinOpKind::Add, ..\n-            },\n-            left,\n-            _,\n-        ) = e.kind\n-        {\n-            if is_string(cx, left) {\n-                if !is_lint_allowed(cx, STRING_ADD_ASSIGN, e.hir_id) {\n-                    let parent = get_parent_expr(cx, e);\n-                    if let Some(p) = parent {\n-                        if let ExprKind::Assign(target, _, _) = p.kind {\n-                            // avoid duplicate matches\n-                            if SpanlessEq::new(cx).eq_expr(target, left) {\n-                                return;\n+        match e.kind {\n+            ExprKind::Binary(\n+                Spanned {\n+                    node: BinOpKind::Add, ..\n+                },\n+                left,\n+                _,\n+            ) => {\n+                if is_string(cx, left) {\n+                    if !is_lint_allowed(cx, STRING_ADD_ASSIGN, e.hir_id) {\n+                        let parent = get_parent_expr(cx, e);\n+                        if let Some(p) = parent {\n+                            if let ExprKind::Assign(target, _, _) = p.kind {\n+                                // avoid duplicate matches\n+                                if SpanlessEq::new(cx).eq_expr(target, left) {\n+                                    return;\n+                                }\n                             }\n                         }\n                     }\n+                    span_lint(\n+                        cx,\n+                        STRING_ADD,\n+                        e.span,\n+                        \"you added something to a string. Consider using `String::push_str()` instead\",\n+                    );\n                 }\n-                span_lint(\n-                    cx,\n-                    STRING_ADD,\n-                    e.span,\n-                    \"you added something to a string. Consider using `String::push_str()` instead\",\n-                );\n-            }\n-        } else if let ExprKind::Assign(target, src, _) = e.kind {\n-            if is_string(cx, target) && is_add(cx, src, target) {\n-                span_lint(\n-                    cx,\n-                    STRING_ADD_ASSIGN,\n-                    e.span,\n-                    \"you assigned the result of adding something to this string. Consider using \\\n-                     `String::push_str()` instead\",\n-                );\n-            }\n+            },\n+            ExprKind::Assign(target, src, _) => {\n+                if is_string(cx, target) && is_add(cx, src, target) {\n+                    span_lint(\n+                        cx,\n+                        STRING_ADD_ASSIGN,\n+                        e.span,\n+                        \"you assigned the result of adding something to this string. Consider using \\\n+                         `String::push_str()` instead\",\n+                    );\n+                }\n+            },\n+            ExprKind::Index(target, _idx) => {\n+                let e_ty = cx.typeck_results().expr_ty(target).peel_refs();\n+                if matches!(e_ty.kind(), ty::Str) || is_type_diagnostic_item(cx, e_ty, sym::String) {\n+                    span_lint(\n+                        cx,\n+                        STRING_SLICE,\n+                        e.span,\n+                        \"indexing into a string may panic if the index is within a UTF-8 character\",\n+                    );\n+                }\n+            },\n+            _ => {},\n         }\n     }\n }"}, {"sha": "be4dfc8816c7f178091a88305c3fa162ee261a78", "filename": "tests/ui/string_slice.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/999b3004c499e96e62d677d79fab47c5c514636a/tests%2Fui%2Fstring_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999b3004c499e96e62d677d79fab47c5c514636a/tests%2Fui%2Fstring_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_slice.rs?ref=999b3004c499e96e62d677d79fab47c5c514636a", "patch": "@@ -0,0 +1,10 @@\n+#[warn(clippy::string_slice)]\n+#[allow(clippy::no_effect)]\n+\n+fn main() {\n+    &\"\u00d6lkanne\"[1..];\n+    let m = \"M\u00f6t\u00f6rhead\";\n+    &m[2..5];\n+    let s = String::from(m);\n+    &s[0..2];\n+}"}, {"sha": "55040bf5df2de6d3689f825132ee06e3798dcf3f", "filename": "tests/ui/string_slice.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/999b3004c499e96e62d677d79fab47c5c514636a/tests%2Fui%2Fstring_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/999b3004c499e96e62d677d79fab47c5c514636a/tests%2Fui%2Fstring_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_slice.stderr?ref=999b3004c499e96e62d677d79fab47c5c514636a", "patch": "@@ -0,0 +1,22 @@\n+error: indexing into a string may panic if the index is within a UTF-8 character\n+  --> $DIR/string_slice.rs:5:6\n+   |\n+LL |     &\"\u00d6lkanne\"[1..];\n+   |      ^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::string-slice` implied by `-D warnings`\n+\n+error: indexing into a string may panic if the index is within a UTF-8 character\n+  --> $DIR/string_slice.rs:7:6\n+   |\n+LL |     &m[2..5];\n+   |      ^^^^^^^\n+\n+error: indexing into a string may panic if the index is within a UTF-8 character\n+  --> $DIR/string_slice.rs:9:6\n+   |\n+LL |     &s[0..2];\n+   |      ^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}