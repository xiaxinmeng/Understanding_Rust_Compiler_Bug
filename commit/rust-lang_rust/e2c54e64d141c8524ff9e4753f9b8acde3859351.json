{"sha": "e2c54e64d141c8524ff9e4753f9b8acde3859351", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYzU0ZTY0ZDE0MWM4NTI0ZmY5ZTQ3NTNmOWI4YWNkZTM4NTkzNTE=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-23T02:39:17Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-23T02:39:17Z"}, "message": "Ignore integers", "tree": {"sha": "5ef596b5922ae3073d87115a6e02c2ac5110d509", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ef596b5922ae3073d87115a6e02c2ac5110d509"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2c54e64d141c8524ff9e4753f9b8acde3859351", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c54e64d141c8524ff9e4753f9b8acde3859351", "html_url": "https://github.com/rust-lang/rust/commit/e2c54e64d141c8524ff9e4753f9b8acde3859351", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2c54e64d141c8524ff9e4753f9b8acde3859351/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7366360383f6df430fb5dc7145f4ce8cab5f5e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7366360383f6df430fb5dc7145f4ce8cab5f5e6", "html_url": "https://github.com/rust-lang/rust/commit/f7366360383f6df430fb5dc7145f4ce8cab5f5e6"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "4ccdbdc0d7c31b772498b61fda9d4fd777431429", "filename": "src/shims/mod.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e2c54e64d141c8524ff9e4753f9b8acde3859351/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c54e64d141c8524ff9e4753f9b8acde3859351/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=e2c54e64d141c8524ff9e4753f9b8acde3859351", "patch": "@@ -1,10 +1,10 @@\n+pub mod dlsym;\n+pub mod env;\n pub mod foreign_items;\n pub mod intrinsics;\n pub mod tls;\n-pub mod dlsym;\n-pub mod env;\n \n-use rustc::{ty, mir};\n+use rustc::{mir, ty};\n \n use crate::*;\n \n@@ -18,7 +18,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         ret: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n         let this = self.eval_context_mut();\n-        trace!(\"eval_fn_call: {:#?}, {:?}\", instance, dest.map(|place| *place));\n+        trace!(\n+            \"eval_fn_call: {:#?}, {:?}\",\n+            instance,\n+            dest.map(|place| *place)\n+        );\n \n         // First, run the common hooks also supported by CTFE.\n         if this.hook_fn(instance, args, dest)? {\n@@ -28,7 +32,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // There are some more lang items we want to hook that CTFE does not hook (yet).\n         if this.tcx.lang_items().align_offset_fn() == Some(instance.def.def_id()) {\n             let dest = dest.unwrap();\n-            let n = this.align_offset(args[0], args[1], dest.layout)?;\n+            let n = this\n+                .align_offset(args[0], args[1])?\n+                .unwrap_or_else(|| this.truncate(u128::max_value(), dest.layout));\n             this.write_scalar(Scalar::from_uint(n, dest.layout.size), dest)?;\n             this.goto_block(ret)?;\n             return Ok(None);\n@@ -51,13 +57,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         &mut self,\n         ptr_op: OpTy<'tcx, Tag>,\n         align_op: OpTy<'tcx, Tag>,\n-        layout: ty::layout::TyLayout<'tcx>,\n-    ) -> InterpResult<'tcx, u128> {\n+    ) -> InterpResult<'tcx, Option<u128>> {\n         let this = self.eval_context_mut();\n \n         let req_align = this.force_bits(\n             this.read_scalar(align_op)?.not_undef()?,\n-            this.pointer_size()\n+            this.pointer_size(),\n         )? as usize;\n \n         // FIXME: This should actually panic in the interpreted program\n@@ -67,18 +72,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let ptr_scalar = this.read_scalar(ptr_op)?.not_undef()?;\n \n-        if let Scalar::Ptr(ptr) = ptr_scalar {\n+        if let Ok(ptr) = this.force_ptr(ptr_scalar) {\n             let cur_align = this.memory().get(ptr.alloc_id)?.align.bytes() as usize;\n-            if cur_align < req_align {\n-                return Ok(this.truncate(u128::max_value(), layout));\n+            if cur_align >= req_align {\n+                // if the allocation alignment is at least the required alignment we use the\n+                // libcore implementation\n+                return Ok(Some(\n+                    (this.force_bits(ptr_scalar, this.pointer_size())? as *const i8)\n+                        .align_offset(req_align) as u128,\n+                ));\n             }\n         }\n-\n-        // if the allocation alignment is at least the required alignment or if the pointer is an\n-        // integer, we use the libcore implementation\n-        Ok(\n-            (this.force_bits(ptr_scalar, this.pointer_size())? as *const i8)\n-            .align_offset(req_align) as u128\n-        )\n+        // If the allocation alignment is smaller than then required alignment or the pointer was\n+        // actually an integer, we return `None`\n+        Ok(None)\n     }\n }"}, {"sha": "971c19b0576efea0f79201ba59b30f2f6ec7de50", "filename": "tests/run-pass/integer_align_offset.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7366360383f6df430fb5dc7145f4ce8cab5f5e6/tests%2Frun-pass%2Finteger_align_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7366360383f6df430fb5dc7145f4ce8cab5f5e6/tests%2Frun-pass%2Finteger_align_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Finteger_align_offset.rs?ref=f7366360383f6df430fb5dc7145f4ce8cab5f5e6", "patch": "@@ -1,3 +0,0 @@\n-fn main() {\n-    assert_eq!(2, (2 as *const i8).align_offset(4));\n-}"}]}