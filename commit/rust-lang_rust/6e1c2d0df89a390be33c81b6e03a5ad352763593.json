{"sha": "6e1c2d0df89a390be33c81b6e03a5ad352763593", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMWMyZDBkZjg5YTM5MGJlMzNjODFiNmUwM2E1YWQzNTI3NjM1OTM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-15T17:56:38Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-15T17:56:38Z"}, "message": "Handle impl Trait more correctly\n\nWhen calling a function, argument-position impl Trait is transparent; same for\nreturn-position impl Trait when inside the function. So in these cases, we need\nto represent that type not by `Ty::Opaque`, but by a type variable that can be\nunified with whatever flows into there.", "tree": {"sha": "f3ba344e185e17e6e62ce650462fd63af9eddd26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3ba344e185e17e6e62ce650462fd63af9eddd26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e1c2d0df89a390be33c81b6e03a5ad352763593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e1c2d0df89a390be33c81b6e03a5ad352763593", "html_url": "https://github.com/rust-lang/rust/commit/6e1c2d0df89a390be33c81b6e03a5ad352763593", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e1c2d0df89a390be33c81b6e03a5ad352763593/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac961b261458bfeb23f7d4e896d5f957b0854a3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac961b261458bfeb23f7d4e896d5f957b0854a3a", "html_url": "https://github.com/rust-lang/rust/commit/ac961b261458bfeb23f7d4e896d5f957b0854a3a"}], "stats": {"total": 57, "additions": 56, "deletions": 1}, "files": [{"sha": "1aa1330a6cedc6d3cdbf708c5664d961c8230985", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6e1c2d0df89a390be33c81b6e03a5ad352763593/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1c2d0df89a390be33c81b6e03a5ad352763593/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=6e1c2d0df89a390be33c81b6e03a5ad352763593", "patch": "@@ -274,6 +274,28 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         self.normalize_associated_types_in(ty)\n     }\n \n+    /// Replaces `impl Trait` in `ty` by type variables and obligations for\n+    /// those variables. This is done for function arguments when calling a\n+    /// function, and for return types when inside the function body, i.e. in\n+    /// the cases where the `impl Trait` is 'transparent'. In other cases, `impl\n+    /// Trait` is represented by `Ty::Opaque`.\n+    fn insert_vars_for_impl_trait(&mut self, ty: Ty) -> Ty {\n+        ty.fold(&mut |ty| match ty {\n+            Ty::Opaque(preds) => {\n+                let var = self.table.new_type_var();\n+                let var_subst = Substs::builder(1).push(var.clone()).build();\n+                self.obligations.extend(\n+                    preds\n+                        .iter()\n+                        .map(|pred| pred.clone().subst_bound_vars(&var_subst))\n+                        .filter_map(Obligation::from_predicate),\n+                );\n+                var\n+            }\n+            _ => ty,\n+        })\n+    }\n+\n     /// Replaces Ty::Unknown by a new type var, so we can maybe still infer it.\n     fn insert_type_vars_shallow(&mut self, ty: Ty) -> Ty {\n         match ty {\n@@ -414,7 +436,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n             self.infer_pat(*pat, &ty, BindingMode::default());\n         }\n-        self.return_ty = self.make_ty(&data.ret_type);\n+        let return_ty = self.make_ty(&data.ret_type);\n+        self.return_ty = self.insert_vars_for_impl_trait(return_ty);\n     }\n \n     fn infer_body(&mut self) {"}, {"sha": "924ad3e81386a188c75bc424e3e9ba90ff17235f", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e1c2d0df89a390be33c81b6e03a5ad352763593/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1c2d0df89a390be33c81b6e03a5ad352763593/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=6e1c2d0df89a390be33c81b6e03a5ad352763593", "patch": "@@ -613,6 +613,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     continue;\n                 }\n \n+                let param_ty = self.insert_vars_for_impl_trait(param_ty);\n                 let param_ty = self.normalize_associated_types_in(param_ty);\n                 self.infer_expr_coerce(arg, &Expectation::has_type(param_ty.clone()));\n             }"}, {"sha": "d8673c90d34bdc98f9325dbdff70afebd2fb7f29", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6e1c2d0df89a390be33c81b6e03a5ad352763593/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1c2d0df89a390be33c81b6e03a5ad352763593/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=6e1c2d0df89a390be33c81b6e03a5ad352763593", "patch": "@@ -1509,6 +1509,37 @@ fn test() -> impl Trait<i32> {\n }\n \"#, true),\n         @r###\"\n+    [27; 28) 'x': impl Trait<u32>\n+    [47; 58) '{ loop {} }': ()\n+    [49; 56) 'loop {}': !\n+    [54; 56) '{}': ()\n+    [69; 70) 'x': impl Trait<T>\n+    [92; 103) '{ loop {} }': T\n+    [94; 101) 'loop {}': !\n+    [99; 101) '{}': ()\n+    [172; 183) '{ loop {} }': T\n+    [174; 181) 'loop {}': !\n+    [179; 181) '{}': ()\n+    [214; 310) '{     ...t()) }': S<i32>\n+    [224; 226) 's1': S<u32>\n+    [229; 230) 'S': S<u32>(T) -> S<T>\n+    [229; 241) 'S(default())': S<u32>\n+    [231; 238) 'default': fn default<u32>() -> T\n+    [231; 240) 'default()': u32\n+    [247; 250) 'foo': fn foo(impl Trait<u32>) -> ()\n+    [247; 254) 'foo(s1)': ()\n+    [251; 253) 's1': S<u32>\n+    [264; 265) 'x': i32\n+    [273; 276) 'bar': fn bar<i32>(impl Trait<T>) -> T\n+    [273; 290) 'bar(S(...lt()))': i32\n+    [277; 278) 'S': S<i32>(T) -> S<T>\n+    [277; 289) 'S(default())': S<i32>\n+    [279; 286) 'default': fn default<i32>() -> T\n+    [279; 288) 'default()': i32\n+    [296; 297) 'S': S<i32>(T) -> S<T>\n+    [296; 308) 'S(default())': S<i32>\n+    [298; 305) 'default': fn default<i32>() -> T\n+    [298; 307) 'default()': i32\n     \"###\n     );\n }"}]}