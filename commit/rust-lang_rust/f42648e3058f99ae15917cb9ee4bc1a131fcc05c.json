{"sha": "f42648e3058f99ae15917cb9ee4bc1a131fcc05c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MjY0OGUzMDU4Zjk5YWUxNTkxN2NiOWVlNGJjMWExMzFmY2MwNWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-11T11:55:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-11T11:55:24Z"}, "message": "internal: remove needless distinction between a carte and its root mod", "tree": {"sha": "8a601868e7ccab8d94c6cc1266163e549a31e977", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a601868e7ccab8d94c6cc1266163e549a31e977"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f42648e3058f99ae15917cb9ee4bc1a131fcc05c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f42648e3058f99ae15917cb9ee4bc1a131fcc05c", "html_url": "https://github.com/rust-lang/rust/commit/f42648e3058f99ae15917cb9ee4bc1a131fcc05c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f42648e3058f99ae15917cb9ee4bc1a131fcc05c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dedf0ff7c549a72063fc4823e915aeab2d264f5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dedf0ff7c549a72063fc4823e915aeab2d264f5e", "html_url": "https://github.com/rust-lang/rust/commit/dedf0ff7c549a72063fc4823e915aeab2d264f5e"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "ab48e5ad2897419039492806ab1e940b7a53892e", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f42648e3058f99ae15917cb9ee4bc1a131fcc05c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42648e3058f99ae15917cb9ee4bc1a131fcc05c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=f42648e3058f99ae15917cb9ee4bc1a131fcc05c", "patch": "@@ -111,7 +111,6 @@ pub(super) fn element(\n                     }\n                 };\n                 let h = match name_class {\n-                    NameRefClass::ExternCrate(_) => SymbolKind::Module.into(),\n                     NameRefClass::Definition(def) => {\n                         if let Definition::Local(local) = &def {\n                             if let Some(name) = local.name(db) {"}, {"sha": "957fe2f86561638b4d2a5f5bdfbaeba36181d941", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_extern_crate.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f42648e3058f99ae15917cb9ee4bc1a131fcc05c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "raw_url": "https://github.com/rust-lang/rust/raw/f42648e3058f99ae15917cb9ee4bc1a131fcc05c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html?ref=f42648e3058f99ae15917cb9ee4bc1a131fcc05c", "patch": "@@ -38,6 +38,6 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module\">std</span><span class=\"semicolon\">;</span>\n-<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module\">abc</span><span class=\"semicolon\">;</span>\n+<pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module library\">std</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module library\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module\">abc</span><span class=\"semicolon\">;</span>\n </code></pre>\n\\ No newline at end of file"}, {"sha": "d08111a90dab20bc056b2738b5c07343cc00bba3", "filename": "crates/ide_assists/src/handlers/add_turbo_fish.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42648e3058f99ae15917cb9ee4bc1a131fcc05c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42648e3058f99ae15917cb9ee4bc1a131fcc05c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs?ref=f42648e3058f99ae15917cb9ee4bc1a131fcc05c", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n     let name_ref = ast::NameRef::cast(ident.parent()?)?;\n     let def = match NameRefClass::classify(&ctx.sema, &name_ref)? {\n         NameRefClass::Definition(def) => def,\n-        NameRefClass::ExternCrate(_) | NameRefClass::FieldShorthand { .. } => return None,\n+        NameRefClass::FieldShorthand { .. } => return None,\n     };\n     let fun = match def {\n         Definition::ModuleDef(hir::ModuleDef::Function(it)) => it,"}, {"sha": "60bf11a4e356856ad9bb9e6ec0cca1d660ec25d6", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f42648e3058f99ae15917cb9ee4bc1a131fcc05c/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42648e3058f99ae15917cb9ee4bc1a131fcc05c/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=f42648e3058f99ae15917cb9ee4bc1a131fcc05c", "patch": "@@ -303,16 +303,14 @@ impl NameClass {\n /// reference to point to two different defs.\n #[derive(Debug)]\n pub enum NameRefClass {\n-    ExternCrate(Crate),\n     Definition(Definition),\n     FieldShorthand { local_ref: Local, field_ref: Definition },\n }\n \n impl NameRefClass {\n     /// `Definition`, which this name refers to.\n-    pub fn referenced(self, db: &dyn HirDatabase) -> Definition {\n+    pub fn referenced(self, _db: &dyn HirDatabase) -> Definition {\n         match self {\n-            NameRefClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameRefClass::Definition(def) => def,\n             NameRefClass::FieldShorthand { local_ref, field_ref: _ } => {\n                 // FIXME: this is inherently ambiguous -- this name refers to\n@@ -428,8 +426,9 @@ impl NameRefClass {\n         }\n \n         let extern_crate = ast::ExternCrate::cast(parent)?;\n-        let resolved = sema.resolve_extern_crate(&extern_crate)?;\n-        Some(NameRefClass::ExternCrate(resolved))\n+        let krate = sema.resolve_extern_crate(&extern_crate)?;\n+        let root_module = krate.root_module(sema.db);\n+        Some(NameRefClass::Definition(Definition::ModuleDef(root_module.into())))\n     }\n \n     pub fn classify_lifetime("}]}