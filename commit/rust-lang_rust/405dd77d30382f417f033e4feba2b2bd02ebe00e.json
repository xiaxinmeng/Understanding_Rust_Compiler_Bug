{"sha": "405dd77d30382f417f033e4feba2b2bd02ebe00e", "node_id": "C_kwDOAAsO6NoAKDQwNWRkNzdkMzAzODJmNDE3ZjAzM2U0ZmViYTJiMmJkMDJlYmUwMGU", "commit": {"author": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-07-20T17:03:18Z"}, "committer": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-08-02T18:37:12Z"}, "message": "Support adding variants via structural editing", "tree": {"sha": "15de5cc10a88013cc5cd551578463ce3a87b0a02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15de5cc10a88013cc5cd551578463ce3a87b0a02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/405dd77d30382f417f033e4feba2b2bd02ebe00e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/405dd77d30382f417f033e4feba2b2bd02ebe00e", "html_url": "https://github.com/rust-lang/rust/commit/405dd77d30382f417f033e4feba2b2bd02ebe00e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/405dd77d30382f417f033e4feba2b2bd02ebe00e/comments", "author": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "113f1dbc9102d8eb693fefc1f369868c2a497910", "url": "https://api.github.com/repos/rust-lang/rust/commits/113f1dbc9102d8eb693fefc1f369868c2a497910", "html_url": "https://github.com/rust-lang/rust/commit/113f1dbc9102d8eb693fefc1f369868c2a497910"}], "stats": {"total": 176, "additions": 148, "deletions": 28}, "files": [{"sha": "8efd58e2c39aa48c098844ad853a30993d314f42", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 144, "deletions": 27, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/405dd77d30382f417f033e4feba2b2bd02ebe00e/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405dd77d30382f417f033e4feba2b2bd02ebe00e/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=405dd77d30382f417f033e4feba2b2bd02ebe00e", "patch": "@@ -11,7 +11,7 @@ use crate::{\n     ted::{self, Position},\n     AstNode, AstToken, Direction,\n     SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n-    SyntaxNode,\n+    SyntaxNode, SyntaxToken,\n };\n \n use super::HasName;\n@@ -506,19 +506,7 @@ impl ast::RecordExprFieldList {\n \n         let position = match self.fields().last() {\n             Some(last_field) => {\n-                let comma = match last_field\n-                    .syntax()\n-                    .siblings_with_tokens(Direction::Next)\n-                    .filter_map(|it| it.into_token())\n-                    .find(|it| it.kind() == T![,])\n-                {\n-                    Some(it) => it,\n-                    None => {\n-                        let comma = ast::make::token(T![,]);\n-                        ted::insert(Position::after(last_field.syntax()), &comma);\n-                        comma\n-                    }\n-                };\n+                let comma = get_or_insert_comma_after(last_field.syntax());\n                 Position::after(comma)\n             }\n             None => match self.l_curly_token() {\n@@ -579,19 +567,8 @@ impl ast::RecordPatFieldList {\n \n         let position = match self.fields().last() {\n             Some(last_field) => {\n-                let comma = match last_field\n-                    .syntax()\n-                    .siblings_with_tokens(Direction::Next)\n-                    .filter_map(|it| it.into_token())\n-                    .find(|it| it.kind() == T![,])\n-                {\n-                    Some(it) => it,\n-                    None => {\n-                        let comma = ast::make::token(T![,]);\n-                        ted::insert(Position::after(last_field.syntax()), &comma);\n-                        comma\n-                    }\n-                };\n+                let syntax = last_field.syntax();\n+                let comma = get_or_insert_comma_after(syntax);\n                 Position::after(comma)\n             }\n             None => match self.l_curly_token() {\n@@ -606,12 +583,53 @@ impl ast::RecordPatFieldList {\n         }\n     }\n }\n+\n+fn get_or_insert_comma_after(syntax: &SyntaxNode) -> SyntaxToken {\n+    let comma = match syntax\n+        .siblings_with_tokens(Direction::Next)\n+        .filter_map(|it| it.into_token())\n+        .find(|it| it.kind() == T![,])\n+    {\n+        Some(it) => it,\n+        None => {\n+            let comma = ast::make::token(T![,]);\n+            ted::insert(Position::after(syntax), &comma);\n+            comma\n+        }\n+    };\n+    comma\n+}\n+\n impl ast::StmtList {\n     pub fn push_front(&self, statement: ast::Stmt) {\n         ted::insert(Position::after(self.l_curly_token().unwrap()), statement.syntax());\n     }\n }\n \n+impl ast::VariantList {\n+    pub fn add_variant(&self, variant: ast::Variant) {\n+        let (indent, position) = match self.variants().last() {\n+            Some(last_item) => (\n+                IndentLevel::from_node(last_item.syntax()),\n+                Position::after(get_or_insert_comma_after(last_item.syntax())),\n+            ),\n+            None => match self.l_curly_token() {\n+                Some(l_curly) => {\n+                    normalize_ws_between_braces(self.syntax());\n+                    (IndentLevel::from_token(&l_curly) + 1, Position::after(&l_curly))\n+                }\n+                None => (IndentLevel::single(), Position::last_child_of(self.syntax())),\n+            },\n+        };\n+        let elements: Vec<SyntaxElement<_>> = vec![\n+            make::tokens::whitespace(&format!(\"{}{}\", \"\\n\", indent)).into(),\n+            variant.syntax().clone().into(),\n+            ast::make::token(T![,]).into(),\n+        ];\n+        ted::insert_all(position, elements);\n+    }\n+}\n+\n fn normalize_ws_between_braces(node: &SyntaxNode) -> Option<()> {\n     let l = node\n         .children_with_tokens()\n@@ -661,6 +679,9 @@ impl<N: AstNode + Clone> Indent for N {}\n mod tests {\n     use std::fmt;\n \n+    use stdx::trim_indent;\n+    use test_utils::assert_eq_text;\n+\n     use crate::SourceFile;\n \n     use super::*;\n@@ -714,4 +735,100 @@ mod tests {\n         }\",\n         );\n     }\n+\n+    #[test]\n+    fn add_variant_to_empty_enum() {\n+        let variant = make::variant(make::name(\"Bar\"), None).clone_for_update();\n+\n+        check_add_variant(\n+            r#\"\n+enum Foo {}\n+\"#,\n+            r#\"\n+enum Foo {\n+    Bar,\n+}\n+\"#,\n+            variant,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_variant_to_non_empty_enum() {\n+        let variant = make::variant(make::name(\"Baz\"), None).clone_for_update();\n+\n+        check_add_variant(\n+            r#\"\n+enum Foo {\n+    Bar,\n+}\n+\"#,\n+            r#\"\n+enum Foo {\n+    Bar,\n+    Baz,\n+}\n+\"#,\n+            variant,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_variant_with_tuple_field_list() {\n+        let variant = make::variant(\n+            make::name(\"Baz\"),\n+            Some(ast::FieldList::TupleFieldList(make::tuple_field_list(std::iter::once(\n+                make::tuple_field(None, make::ty(\"bool\")),\n+            )))),\n+        )\n+        .clone_for_update();\n+\n+        check_add_variant(\n+            r#\"\n+enum Foo {\n+    Bar,\n+}\n+\"#,\n+            r#\"\n+enum Foo {\n+    Bar,\n+    Baz(bool),\n+}\n+\"#,\n+            variant,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_variant_with_record_field_list() {\n+        let variant = make::variant(\n+            make::name(\"Baz\"),\n+            Some(ast::FieldList::RecordFieldList(make::record_field_list(std::iter::once(\n+                make::record_field(None, make::name(\"x\"), make::ty(\"bool\")),\n+            )))),\n+        )\n+        .clone_for_update();\n+\n+        check_add_variant(\n+            r#\"\n+enum Foo {\n+    Bar,\n+}\n+\"#,\n+            r#\"\n+enum Foo {\n+    Bar,\n+    Baz { x: bool },\n+}\n+\"#,\n+            variant,\n+        );\n+    }\n+\n+    fn check_add_variant(before: &str, expected: &str, variant: ast::Variant) {\n+        let enum_ = ast_mut_from_text::<ast::Enum>(before);\n+        enum_.variant_list().map(|it| it.add_variant(variant));\n+        let after = enum_.to_string();\n+        assert_eq_text!(&trim_indent(expected.trim()), &trim_indent(&after.trim()));\n+    }\n }"}, {"sha": "037de876d45c94f16955502621129bc2872b2b85", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/405dd77d30382f417f033e4feba2b2bd02ebe00e/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405dd77d30382f417f033e4feba2b2bd02ebe00e/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=405dd77d30382f417f033e4feba2b2bd02ebe00e", "patch": "@@ -745,7 +745,10 @@ pub fn tuple_field(visibility: Option<ast::Visibility>, ty: ast::Type) -> ast::T\n pub fn variant(name: ast::Name, field_list: Option<ast::FieldList>) -> ast::Variant {\n     let field_list = match field_list {\n         None => String::new(),\n-        Some(it) => format!(\"{}\", it),\n+        Some(it) => match it {\n+            ast::FieldList::RecordFieldList(record) => format!(\" {}\", record),\n+            ast::FieldList::TupleFieldList(tuple) => format!(\"{}\", tuple),\n+        },\n     };\n     ast_from_text(&format!(\"enum f {{ {}{} }}\", name, field_list))\n }"}]}