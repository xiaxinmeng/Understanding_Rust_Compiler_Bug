{"sha": "4fb427743c27c63a4aa3ccd54c488b22d4308bc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYjQyNzc0M2MyN2M2M2E0YWEzY2NkNTRjNDg4YjIyZDQzMDhiYzI=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-14T21:04:50Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-14T21:04:50Z"}, "message": "vscode: moved to getters as per matklad", "tree": {"sha": "45dfb0fca0912d45e83fd33b1eb065898febec2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45dfb0fca0912d45e83fd33b1eb065898febec2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fb427743c27c63a4aa3ccd54c488b22d4308bc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb427743c27c63a4aa3ccd54c488b22d4308bc2", "html_url": "https://github.com/rust-lang/rust/commit/4fb427743c27c63a4aa3ccd54c488b22d4308bc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fb427743c27c63a4aa3ccd54c488b22d4308bc2/comments", "author": null, "committer": null, "parents": [{"sha": "fd37151ade9948398e863c38418fb4f0d0acdfa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd37151ade9948398e863c38418fb4f0d0acdfa7", "html_url": "https://github.com/rust-lang/rust/commit/fd37151ade9948398e863c38418fb4f0d0acdfa7"}], "stats": {"total": 72, "additions": 33, "deletions": 39}, "files": [{"sha": "4484b216745d98e77df305134c609a79ee98eaec", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4fb427743c27c63a4aa3ccd54c488b22d4308bc2/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4fb427743c27c63a4aa3ccd54c488b22d4308bc2/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=4fb427743c27c63a4aa3ccd54c488b22d4308bc2", "patch": "@@ -10,7 +10,7 @@ export async function createClient(config: Config): Promise<null | lc.LanguageCl\n     // It might be a good idea to test if the uri points to a file.\n     const workspaceFolderPath = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath ?? '.';\n \n-    const langServerPath = await ensureLanguageServerBinary(config.langServerBinarySource());\n+    const langServerPath = await ensureLanguageServerBinary(config.langServerBinarySource);\n     if (!langServerPath) return null;\n \n     const run: lc.Executable = {\n@@ -24,23 +24,23 @@ export async function createClient(config: Config): Promise<null | lc.LanguageCl\n     const traceOutputChannel = vscode.window.createOutputChannel(\n         'Rust Analyzer Language Server Trace',\n     );\n-    const cargoWatchOpts = config.cargoWatchOptions();\n+    const cargoWatchOpts = config.cargoWatchOptions;\n \n     const clientOptions: lc.LanguageClientOptions = {\n         documentSelector: [{ scheme: 'file', language: 'rust' }],\n         initializationOptions: {\n             publishDecorations: true,\n-            lruCapacity: config.lruCapacity(),\n-            maxInlayHintLength: config.maxInlayHintLength(),\n+            lruCapacity: config.lruCapacity,\n+            maxInlayHintLength: config.maxInlayHintLength,\n             cargoWatchEnable: cargoWatchOpts.enable,\n             cargoWatchArgs: cargoWatchOpts.arguments,\n             cargoWatchCommand: cargoWatchOpts.command,\n             cargoWatchAllTargets: cargoWatchOpts.allTargets,\n-            excludeGlobs: config.excludeGlobs(),\n-            useClientWatching: config.useClientWatching(),\n-            featureFlags: config.featureFlags(),\n-            withSysroot: config.withSysroot(),\n-            cargoFeatures: config.cargoFeatures(),\n+            excludeGlobs: config.excludeGlobs,\n+            useClientWatching: config.useClientWatching,\n+            featureFlags: config.featureFlags,\n+            withSysroot: config.withSysroot,\n+            cargoFeatures: config.cargoFeatures,\n         },\n         traceOutputChannel,\n     };"}, {"sha": "3ce669330b332f5a45827d64b484c57312516b24", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4fb427743c27c63a4aa3ccd54c488b22d4308bc2/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4fb427743c27c63a4aa3ccd54c488b22d4308bc2/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=4fb427743c27c63a4aa3ccd54c488b22d4308bc2", "patch": "@@ -68,17 +68,14 @@ export class Config {\n      * `platform` on GitHub releases. (It is also stored under the same name when\n      * downloaded by the extension).\n      */\n-    private static prebuiltLangServerFileName(\n-        platform: NodeJS.Platform,\n-        arch: string\n-    ): null | string {\n+    get prebuiltLangServerFileName(): null | string {\n         // See possible `arch` values here:\n         // https://nodejs.org/api/process.html#process_process_arch\n \n-        switch (platform) {\n+        switch (process.platform) {\n \n             case \"linux\": {\n-                switch (arch) {\n+                switch (process.arch) {\n                     case \"arm\":\n                     case \"arm64\": return null;\n \n@@ -101,7 +98,7 @@ export class Config {\n         }\n     }\n \n-    langServerBinarySource(): null | BinarySource {\n+    get langServerBinarySource(): null | BinarySource {\n         const langServerPath = RA_LSP_DEBUG ?? this.cfg.get<null | string>(\"raLspServerPath\");\n \n         if (langServerPath) {\n@@ -111,9 +108,7 @@ export class Config {\n             };\n         }\n \n-        const prebuiltBinaryName = Config.prebuiltLangServerFileName(\n-            process.platform, process.arch\n-        );\n+        const prebuiltBinaryName = this.prebuiltLangServerFileName;\n \n         if (!prebuiltBinaryName) return null;\n \n@@ -131,17 +126,16 @@ export class Config {\n     // We don't do runtime config validation here for simplicity. More on stackoverflow:\n     // https://stackoverflow.com/questions/60135780/what-is-the-best-way-to-type-check-the-configuration-for-vscode-extension\n \n-    // FIXME: add codegen for primitive configurations\n-    highlightingOn()        { return this.cfg.get(\"highlightingOn\") as boolean; }\n-    rainbowHighlightingOn() { return this.cfg.get(\"rainbowHighlightingOn\") as boolean; }\n-    lruCapacity()           { return this.cfg.get(\"lruCapacity\") as null | number; }\n-    displayInlayHints()     { return this.cfg.get(\"displayInlayHints\") as boolean; }\n-    maxInlayHintLength()    { return this.cfg.get(\"maxInlayHintLength\") as number; }\n-    excludeGlobs()          { return this.cfg.get(\"excludeGlobs\") as string[]; }\n-    useClientWatching()     { return this.cfg.get(\"useClientWatching\") as boolean; }\n-    featureFlags()          { return this.cfg.get(\"featureFlags\") as Record<string, boolean>; }\n-\n-    cargoWatchOptions(): CargoWatchOptions {\n+    get highlightingOn()        { return this.cfg.get(\"highlightingOn\") as boolean; }\n+    get rainbowHighlightingOn() { return this.cfg.get(\"rainbowHighlightingOn\") as boolean; }\n+    get lruCapacity()           { return this.cfg.get(\"lruCapacity\") as null | number; }\n+    get displayInlayHints()     { return this.cfg.get(\"displayInlayHints\") as boolean; }\n+    get maxInlayHintLength()    { return this.cfg.get(\"maxInlayHintLength\") as number; }\n+    get excludeGlobs()          { return this.cfg.get(\"excludeGlobs\") as string[]; }\n+    get useClientWatching()     { return this.cfg.get(\"useClientWatching\") as boolean; }\n+    get featureFlags()          { return this.cfg.get(\"featureFlags\") as Record<string, boolean>; }\n+\n+    get cargoWatchOptions(): CargoWatchOptions {\n         return {\n             enable:     this.cfg.get(\"cargo-watch.enable\") as boolean,\n             arguments:  this.cfg.get(\"cargo-watch.arguments\") as string[],\n@@ -150,7 +144,7 @@ export class Config {\n         };\n     }\n \n-    cargoFeatures(): CargoFeatures {\n+    get cargoFeatures(): CargoFeatures {\n         return {\n             noDefaultFeatures: this.cfg.get(\"cargoFeatures.noDefaultFeatures\") as boolean,\n             allFeatures:       this.cfg.get(\"cargoFeatures.allFeatures\") as boolean,\n@@ -159,5 +153,5 @@ export class Config {\n     }\n \n     // for internal use\n-    withSysroot() { return this.cfg.get(\"withSysroot\", false); }\n+    get withSysroot() { return this.cfg.get(\"withSysroot\", false); }\n }"}, {"sha": "4fbbe3ddc5c64d04e1ca61c34a546ea53143e4e1", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fb427743c27c63a4aa3ccd54c488b22d4308bc2/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4fb427743c27c63a4aa3ccd54c488b22d4308bc2/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=4fb427743c27c63a4aa3ccd54c488b22d4308bc2", "patch": "@@ -11,7 +11,7 @@ export function activateHighlighting(ctx: Ctx) {\n         client.onNotification(\n             'rust-analyzer/publishDecorations',\n             (params: PublishDecorationsParams) => {\n-                if (!ctx.config.highlightingOn()) return;\n+                if (!ctx.config.highlightingOn) return;\n \n                 const targetEditor = vscode.window.visibleTextEditors.find(\n                     editor => {\n@@ -39,7 +39,7 @@ export function activateHighlighting(ctx: Ctx) {\n     vscode.window.onDidChangeActiveTextEditor(\n         async (editor: vscode.TextEditor | undefined) => {\n             if (!editor || editor.document.languageId !== 'rust') return;\n-            if (!ctx.config.highlightingOn()) return;\n+            if (!ctx.config.highlightingOn) return;\n             const client = ctx.client;\n             if (!client) return;\n \n@@ -122,7 +122,7 @@ class Highlighter {\n             string,\n             [vscode.Range[], boolean]\n         > = new Map();\n-        const rainbowTime = this.ctx.config.rainbowHighlightingOn();\n+        const rainbowTime = this.ctx.config.rainbowHighlightingOn;\n \n         for (const tag of this.decorations.keys()) {\n             byTag.set(tag, []);"}, {"sha": "1c019a51bcc63a5ee8e206d20cf73dd132cedeb4", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fb427743c27c63a4aa3ccd54c488b22d4308bc2/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4fb427743c27c63a4aa3ccd54c488b22d4308bc2/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=4fb427743c27c63a4aa3ccd54c488b22d4308bc2", "patch": "@@ -22,12 +22,12 @@ export function activateInlayHints(ctx: Ctx) {\n     );\n \n     vscode.workspace.onDidChangeConfiguration(\n-        async _ => hintsUpdater.setEnabled(ctx.config.displayInlayHints()),\n+        async _ => hintsUpdater.setEnabled(ctx.config.displayInlayHints),\n         null,\n         ctx.subscriptions\n     );\n \n-    ctx.onDidRestart(_ => hintsUpdater.setEnabled(ctx.config.displayInlayHints()));\n+    ctx.onDidRestart(_ => hintsUpdater.setEnabled(ctx.config.displayInlayHints));\n }\n \n interface InlayHintsParams {\n@@ -59,7 +59,7 @@ class HintsUpdater {\n \n     constructor(ctx: Ctx) {\n         this.ctx = ctx;\n-        this.enabled = ctx.config.displayInlayHints();\n+        this.enabled = ctx.config.displayInlayHints;\n     }\n \n     async setEnabled(enabled: boolean) {"}, {"sha": "993e79d70360f274ebd303ee4ff64aed611b8bca", "filename": "editors/code/src/status_display.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fb427743c27c63a4aa3ccd54c488b22d4308bc2/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4fb427743c27c63a4aa3ccd54c488b22d4308bc2/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fstatus_display.ts?ref=4fb427743c27c63a4aa3ccd54c488b22d4308bc2", "patch": "@@ -7,7 +7,7 @@ import { Ctx } from './ctx';\n const spinnerFrames = ['\u280b', '\u2819', '\u2839', '\u2838', '\u283c', '\u2834', '\u2826', '\u2827', '\u2807', '\u280f'];\n \n export function activateStatusDisplay(ctx: Ctx) {\n-    const statusDisplay = new StatusDisplay(ctx.config.cargoWatchOptions().command);\n+    const statusDisplay = new StatusDisplay(ctx.config.cargoWatchOptions.command);\n     ctx.pushCleanup(statusDisplay);\n     ctx.onDidRestart(client => ctx.pushCleanup(client.onProgress(\n         WorkDoneProgress.type,"}]}