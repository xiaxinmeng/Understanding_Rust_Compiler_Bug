{"sha": "7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYzIxZTc2MzZmN2IzYzBlYjNlMzFiMTNjNzA4N2I0ZGU3YWE1YTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-16T21:22:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-16T21:22:54Z"}, "message": "Auto merge of #64526 - Centril:rollup-k4cz2xn, r=Centril\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #64357 (`AdtDef` is an algebraic data type, not abstract data type)\n - #64485 (update Miri)\n - #64509 (Make some adjustments to the documentation for `std::convert::identity`)\n - #64518 (Use while let slice_pattern instead of carrying an index around)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "12f4193064ae6228052f8162a14ea1325f32f651", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12f4193064ae6228052f8162a14ea1325f32f651"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "html_url": "https://github.com/rust-lang/rust/commit/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a44881d892fb4f4a8ed93f8f392bab942fac7a41", "url": "https://api.github.com/repos/rust-lang/rust/commits/a44881d892fb4f4a8ed93f8f392bab942fac7a41", "html_url": "https://github.com/rust-lang/rust/commit/a44881d892fb4f4a8ed93f8f392bab942fac7a41"}, {"sha": "1376ccd84d5b62f10967dbd8c903d1ee7ee51174", "url": "https://api.github.com/repos/rust-lang/rust/commits/1376ccd84d5b62f10967dbd8c903d1ee7ee51174", "html_url": "https://github.com/rust-lang/rust/commit/1376ccd84d5b62f10967dbd8c903d1ee7ee51174"}], "stats": {"total": 79, "additions": 46, "deletions": 33}, "files": [{"sha": "0fe3138427468d5276d1d901740ef8966fd2d351", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "patch": "@@ -234,9 +234,9 @@ dependencies = [\n \n [[package]]\n name = \"byteorder\"\n-version = \"1.2.7\"\n+version = \"1.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"94f88df23a25417badc922ab0f5716cc1330e87f71ddd9203b3a3ccd9cedf75d\"\n+checksum = \"a7c3dd8985a7111efc5c80b44e23ecdd8c007de8ade3b96595387e812b957cf5\"\n \n [[package]]\n name = \"bytes\"\n@@ -2067,7 +2067,7 @@ dependencies = [\n  \"hex\",\n  \"log\",\n  \"num-traits\",\n- \"rand 0.6.1\",\n+ \"rand 0.7.0\",\n  \"rustc-workspace-hack\",\n  \"rustc_version\",\n  \"shell-escape\",\n@@ -3255,7 +3255,6 @@ dependencies = [\n name = \"rustc-workspace-hack\"\n version = \"1.0.0\"\n dependencies = [\n- \"byteorder\",\n  \"crossbeam-utils 0.6.5\",\n  \"serde\",\n  \"serde_json\","}, {"sha": "06f2b7bab12ebc548c8c051ce8ee3d1a258b3eb2", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "patch": "@@ -42,11 +42,11 @@\n \n use crate::fmt;\n \n-/// An identity function.\n+/// The identity function.\n ///\n /// Two things are important to note about this function:\n ///\n-/// - It is not always equivalent to a closure like `|x| x` since the\n+/// - It is not always equivalent to a closure like `|x| x`, since the\n ///   closure may coerce `x` into a different type.\n ///\n /// - It moves the input `x` passed to the function.\n@@ -56,31 +56,32 @@ use crate::fmt;\n ///\n /// # Examples\n ///\n-/// Using `identity` to do nothing among other interesting functions:\n+/// Using `identity` to do nothing in a sequence of other, interesting,\n+/// functions:\n ///\n /// ```rust\n /// use std::convert::identity;\n ///\n /// fn manipulation(x: u32) -> u32 {\n-///     // Let's assume that this function does something interesting.\n+///     // Let's pretend that adding one is an interesting function.\n ///     x + 1\n /// }\n ///\n /// let _arr = &[identity, manipulation];\n /// ```\n ///\n-/// Using `identity` to get a function that changes nothing in a conditional:\n+/// Using `identity` as a \"do nothing\" base case in a conditional:\n ///\n /// ```rust\n /// use std::convert::identity;\n ///\n /// # let condition = true;\n-///\n+/// #\n /// # fn manipulation(x: u32) -> u32 { x + 1 }\n-///\n+/// #\n /// let do_stuff = if condition { manipulation } else { identity };\n ///\n-/// // do more interesting stuff..\n+/// // Do more interesting stuff...\n ///\n /// let _results = do_stuff(42);\n /// ```"}, {"sha": "0834faf1324245b9249c0625b5a56a14e6e95fc4", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "patch": "@@ -31,7 +31,7 @@ syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n backtrace = \"0.3.3\"\n parking_lot = \"0.9\"\n-byteorder = { version = \"1.1\", features = [\"i128\"]}\n+byteorder = { version = \"1.3\" }\n chalk-engine = { version = \"0.9.0\", default-features=false }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "5ca819e12f23251dd4a1a18416afa82a2f17330d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "patch": "@@ -1938,9 +1938,15 @@ pub struct FieldDef {\n     pub vis: Visibility,\n }\n \n-/// The definition of an abstract data type -- a struct or enum.\n+/// The definition of a user-defined type, e.g., a `struct`, `enum`, or `union`.\n ///\n /// These are all interned (by `intern_adt_def`) into the `adt_defs` table.\n+///\n+/// The initialism *\"Adt\"* stands for an [*algebraic data type (ADT)*][adt].\n+/// This is slightly wrong because `union`s are not ADTs.\n+/// Moreover, Rust only allows recursive data types through indirection.\n+///\n+/// [adt]: https://en.wikipedia.org/wiki/Algebraic_data_type\n pub struct AdtDef {\n     /// `DefId` of the struct, enum or union item.\n     pub did: DefId,"}, {"sha": "0691390bead4beaeffd0053589277a192fd17788", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "patch": "@@ -24,6 +24,6 @@ rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-byteorder = { version = \"1.1\", features = [\"i128\"] }\n+byteorder = { version = \"1.3\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "81359c6a46e992822ea40fb9266ceb30f3bfa3af", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "patch": "@@ -614,8 +614,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     projection,\n                 } = first_borrowed_place;\n \n-                for (i, elem) in projection.iter().enumerate().rev() {\n-                    let proj_base = &projection[..i];\n+                let mut cursor = &**projection;\n+                while let [proj_base @ .., elem] = cursor {\n+                    cursor = proj_base;\n \n                     match elem {\n                         ProjectionElem::Field(field, _) if union_ty(base, proj_base).is_some() => {\n@@ -637,8 +638,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     projection,\n                 } = second_borrowed_place;\n \n-                for (i, elem) in projection.iter().enumerate().rev() {\n-                    let proj_base = &projection[..i];\n+                let mut cursor = &**projection;\n+                while let [proj_base @ .., elem] = cursor {\n+                    cursor = proj_base;\n \n                     if let ProjectionElem::Field(field, _) = elem {\n                         if let Some(union_ty) = union_ty(base, proj_base) {"}, {"sha": "1d3576244c4afc0d597389a18b5231e0a32fbf6d", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "patch": "@@ -1758,7 +1758,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         debug!(\"check_if_assigned_path_is_moved place: {:?}\", place);\n \n         // None case => assigning to `x` does not require `x` be initialized.\n-        for (i, elem) in place.projection.iter().enumerate().rev() {\n+        let mut cursor = &*place.projection;\n+        while let [proj_base @ .., elem] = cursor {\n+            cursor = proj_base;\n+\n             match elem {\n                 ProjectionElem::Index(_/*operand*/) |\n                 ProjectionElem::ConstantIndex { .. } |\n@@ -1771,8 +1774,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                 // assigning to (*P) requires P to be initialized\n                 ProjectionElem::Deref => {\n-                    let proj_base = &place.projection[..i];\n-\n                     self.check_if_full_path_is_moved(\n                         location, InitializationRequiringAction::Use,\n                         (PlaceRef {\n@@ -1790,7 +1791,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n \n                 ProjectionElem::Field(..) => {\n-                    let proj_base = &place.projection[..i];\n                     // if type of `P` has a dtor, then\n                     // assigning to `P.f` requires `P` itself\n                     // be already initialized"}, {"sha": "62bff3421a0785f25e9d7abd5faa52252ee268e5", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "patch": "@@ -2417,9 +2417,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             \"add_reborrow_constraint({:?}, {:?}, {:?})\",\n             location, borrow_region, borrowed_place\n         );\n-        for (i, elem) in borrowed_place.projection.iter().enumerate().rev() {\n+\n+        let mut cursor = &*borrowed_place.projection;\n+        while let [proj_base @ .., elem] = cursor {\n+            cursor = proj_base;\n+\n             debug!(\"add_reborrow_constraint - iteration {:?}\", elem);\n-            let proj_base = &borrowed_place.projection[..i];\n \n             match elem {\n                 ProjectionElem::Deref => {"}, {"sha": "2b0237c7c08b98f98407d5cd7a8f2c2c27baa1f8", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "patch": "@@ -1296,8 +1296,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // Insert a Shallow borrow of the prefixes of any fake borrows.\n         for place in fake_borrows\n         {\n-            for (i, elem) in place.projection.iter().enumerate().rev() {\n-                let proj_base = &place.projection[..i];\n+            let mut cursor = &*place.projection;\n+            while let [proj_base @ .., elem] = cursor {\n+                cursor = proj_base;\n \n                 if let ProjectionElem::Deref = elem {\n                     // Insert a shallow borrow after a deref. For other"}, {"sha": "39aa5c717acc13696687b12dddb5b0a4bd396c9e", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "patch": "@@ -407,8 +407,9 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         place: &Place<'tcx>,\n         is_mut_use: bool,\n     ) {\n-        for (i, elem) in place.projection.iter().enumerate().rev() {\n-            let proj_base = &place.projection[..i];\n+        let mut cursor = &*place.projection;\n+        while let [proj_base @ .., elem] = cursor {\n+            cursor = proj_base;\n \n             match elem {\n                 ProjectionElem::Field(..) => {"}, {"sha": "a75c1af04f0475b51874cf422494237451d0e939", "filename": "src/librustc_mir/util/alignment.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc_mir%2Futil%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Flibrustc_mir%2Futil%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Falignment.rs?ref=7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "patch": "@@ -38,8 +38,9 @@ fn is_within_packed<'tcx, L>(tcx: TyCtxt<'tcx>, local_decls: &L, place: &Place<'\n where\n     L: HasLocalDecls<'tcx>,\n {\n-    for (i, elem) in place.projection.iter().enumerate().rev() {\n-        let proj_base = &place.projection[..i];\n+    let mut cursor = &*place.projection;\n+    while let [proj_base @ .., elem] = cursor {\n+        cursor = proj_base;\n \n         match elem {\n             // encountered a Deref, which is ABI-aligned"}, {"sha": "d88138723780d11ca2c09560111223dc20b9d5f3", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "patch": "@@ -1 +1 @@\n-Subproject commit dd94c7c5a32be2ee0adeeaf9d46f26f14925797c\n+Subproject commit d88138723780d11ca2c09560111223dc20b9d5f3"}, {"sha": "930279c0ca27bcab16cb87f328548786fdbcbcea", "filename": "src/tools/rustc-workspace-hack/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml?ref=7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "patch": "@@ -62,7 +62,6 @@ crossbeam-utils = { version = \"0.6.5\", features = [\"nightly\"] }\n serde = { version = \"1.0.82\", features = ['derive'] }\n serde_json = { version = \"1.0.31\", features = [\"raw_value\"] }\n smallvec = { version = \"0.6\", features = ['union', 'may_dangle'] }\n-byteorder = { version = \"1.2.7\", features = [\"i128\"] }\n \n \n [target.'cfg(not(windows))'.dependencies]"}]}