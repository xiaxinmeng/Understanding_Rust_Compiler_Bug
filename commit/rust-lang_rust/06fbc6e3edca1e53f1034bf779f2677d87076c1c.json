{"sha": "06fbc6e3edca1e53f1034bf779f2677d87076c1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZmJjNmUzZWRjYTFlNTNmMTAzNGJmNzc5ZjI2NzdkODcwNzZjMWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-07T18:17:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-07T18:17:18Z"}, "message": "Do more work in classify", "tree": {"sha": "7f1c94986802174f27b16b454500cd702cb255f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f1c94986802174f27b16b454500cd702cb255f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06fbc6e3edca1e53f1034bf779f2677d87076c1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06fbc6e3edca1e53f1034bf779f2677d87076c1c", "html_url": "https://github.com/rust-lang/rust/commit/06fbc6e3edca1e53f1034bf779f2677d87076c1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06fbc6e3edca1e53f1034bf779f2677d87076c1c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "397c235086cfaf5247d971c1867a38640895e014", "url": "https://api.github.com/repos/rust-lang/rust/commits/397c235086cfaf5247d971c1867a38640895e014", "html_url": "https://github.com/rust-lang/rust/commit/397c235086cfaf5247d971c1867a38640895e014"}], "stats": {"total": 68, "additions": 30, "deletions": 38}, "files": [{"sha": "f708f07a0b687409471e7c3b6d9d975878e542a0", "filename": "crates/ra_analysis/src/completion/reference_completion.rs", "status": "modified", "additions": 30, "deletions": 38, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/06fbc6e3edca1e53f1034bf779f2677d87076c1c/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fbc6e3edca1e53f1034bf779f2677d87076c1c/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs?ref=06fbc6e3edca1e53f1034bf779f2677d87076c1c", "patch": "@@ -11,7 +11,7 @@ use crate::{\n     db::RootDatabase,\n     input::{SourceRootId},\n     completion::CompletionItem,\n-    descriptors::module::{ModuleId, ModuleScope, ModuleTree},\n+    descriptors::module::{ModuleId, ModuleTree},\n     descriptors::function::FnScopes,\n     descriptors::DescriptorDatabase,\n     Cancelable\n@@ -32,12 +32,29 @@ pub(super) fn completions(\n     };\n \n     match kind {\n-        NameRefKind::LocalRef => {\n-            let module_scope = db.module_scope(source_root_id, module_id)?;\n-            if let Some(fn_def) = complete_local_name(acc, &module_scope, name_ref) {\n+        NameRefKind::LocalRef { enclosing_fn } => {\n+            if let Some(fn_def) = enclosing_fn {\n+                let scopes = FnScopes::new(fn_def);\n+                complete_fn(name_ref, &scopes, acc);\n                 complete_expr_keywords(&file, fn_def, name_ref, acc);\n                 complete_expr_snippets(acc);\n             }\n+\n+            let module_scope = db.module_scope(source_root_id, module_id)?;\n+            acc.extend(\n+                module_scope\n+                    .entries()\n+                    .iter()\n+                    .filter(|entry| {\n+                        // Don't expose this item\n+                        !entry.ptr().range().is_subrange(&name_ref.syntax().range())\n+                    })\n+                    .map(|entry| CompletionItem {\n+                        label: entry.name().to_string(),\n+                        lookup: None,\n+                        snippet: None,\n+                    }),\n+            );\n         }\n         NameRefKind::CratePath(path) => {\n             complete_path(acc, db, source_root_id, module_tree, module_id, path)?\n@@ -62,7 +79,9 @@ pub(super) fn completions(\n enum NameRefKind<'a> {\n     /// NameRef is a part of single-segment path, for example, a refernece to a\n     /// local variable.\n-    LocalRef,\n+    LocalRef {\n+        enclosing_fn: Option<ast::FnDef<'a>>,\n+    },\n     /// NameRef is the last segment in crate:: path\n     CratePath(Vec<ast::NameRef<'a>>),\n     /// NameRef is bare identifier at the module's root.\n@@ -87,7 +106,12 @@ fn classify_name_ref(name_ref: ast::NameRef) -> Option<NameRefKind> {\n     if let Some(segment) = ast::PathSegment::cast(parent) {\n         let path = segment.parent_path();\n         if path.qualifier().is_none() {\n-            return Some(NameRefKind::LocalRef);\n+            let enclosing_fn = name_ref\n+                .syntax()\n+                .ancestors()\n+                .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n+                .find_map(ast::FnDef::cast);\n+            return Some(NameRefKind::LocalRef { enclosing_fn });\n         }\n         if let Some(crate_path) = crate_path(path) {\n             return Some(NameRefKind::CratePath(crate_path));\n@@ -111,38 +135,6 @@ fn crate_path(mut path: ast::Path) -> Option<Vec<ast::NameRef>> {\n     Some(res)\n }\n \n-fn complete_local_name<'a>(\n-    acc: &mut Vec<CompletionItem>,\n-    module_scope: &ModuleScope,\n-    name_ref: ast::NameRef<'a>,\n-) -> Option<ast::FnDef<'a>> {\n-    let enclosing_fn = name_ref\n-        .syntax()\n-        .ancestors()\n-        .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n-        .find_map(ast::FnDef::cast);\n-    if let Some(fn_def) = enclosing_fn {\n-        let scopes = FnScopes::new(fn_def);\n-        complete_fn(name_ref, &scopes, acc);\n-    }\n-\n-    acc.extend(\n-        module_scope\n-            .entries()\n-            .iter()\n-            .filter(|entry| {\n-                // Don't expose this item\n-                !entry.ptr().range().is_subrange(&name_ref.syntax().range())\n-            })\n-            .map(|entry| CompletionItem {\n-                label: entry.name().to_string(),\n-                lookup: None,\n-                snippet: None,\n-            }),\n-    );\n-    enclosing_fn\n-}\n-\n fn complete_fn(name_ref: ast::NameRef, scopes: &FnScopes, acc: &mut Vec<CompletionItem>) {\n     let mut shadowed = FxHashSet::default();\n     acc.extend("}]}