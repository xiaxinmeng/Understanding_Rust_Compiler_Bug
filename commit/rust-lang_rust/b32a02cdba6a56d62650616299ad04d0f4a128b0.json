{"sha": "b32a02cdba6a56d62650616299ad04d0f4a128b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMmEwMmNkYmE2YTU2ZDYyNjUwNjE2Mjk5YWQwNGQwZjRhMTI4YjA=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-07-10T05:57:07Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-07-21T07:22:59Z"}, "message": "Derive Clone for bitv stuff", "tree": {"sha": "72afa914e94ea055c7c5115fecabb9650c5e412a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72afa914e94ea055c7c5115fecabb9650c5e412a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b32a02cdba6a56d62650616299ad04d0f4a128b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b32a02cdba6a56d62650616299ad04d0f4a128b0", "html_url": "https://github.com/rust-lang/rust/commit/b32a02cdba6a56d62650616299ad04d0f4a128b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b32a02cdba6a56d62650616299ad04d0f4a128b0/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f208b82e9af1150030095377ea7ad5dda4021fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f208b82e9af1150030095377ea7ad5dda4021fb", "html_url": "https://github.com/rust-lang/rust/commit/5f208b82e9af1150030095377ea7ad5dda4021fb"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "7e6b2490b7eef6326de6f36cec8af1245a7a1ce6", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b32a02cdba6a56d62650616299ad04d0f4a128b0/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a02cdba6a56d62650616299ad04d0f4a128b0/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=b32a02cdba6a56d62650616299ad04d0f4a128b0", "patch": "@@ -17,6 +17,7 @@ use std::ops;\n use std::uint;\n use std::vec;\n \n+#[deriving(Clone)]\n struct SmallBitv {\n     /// only the lowest nbits of this value are used. the rest is undefined.\n     bits: uint\n@@ -107,6 +108,7 @@ impl SmallBitv {\n     pub fn negate(&mut self) { self.bits = !self.bits; }\n }\n \n+#[deriving(Clone)]\n struct BigBitv {\n     storage: ~[uint]\n }\n@@ -212,11 +214,13 @@ impl BigBitv {\n     }\n }\n \n+#[deriving(Clone)]\n enum BitvVariant { Big(~BigBitv), Small(~SmallBitv) }\n \n enum Op {Union, Intersect, Assign, Difference}\n \n /// The bitvector type\n+#[deriving(Clone)]\n pub struct Bitv {\n     /// Internal representation of the bit vector (small or large)\n     rep: BitvVariant,\n@@ -504,24 +508,6 @@ impl Bitv {\n \n }\n \n-impl Clone for Bitv {\n-    /// Makes a copy of a bitvector\n-    #[inline]\n-    fn clone(&self) -> Bitv {\n-        match self.rep {\n-          Small(ref b) => {\n-            Bitv{nbits: self.nbits, rep: Small(~SmallBitv{bits: b.bits})}\n-          }\n-          Big(ref b) => {\n-            let mut st = vec::from_elem(self.nbits / uint::bits + 1, 0u);\n-            let len = st.len();\n-            for uint::range(0, len) |i| { st[i] = b.storage[i]; };\n-            Bitv{nbits: self.nbits, rep: Big(~BigBitv{storage: st})}\n-          }\n-        }\n-    }\n-}\n-\n /**\n  * Transform a byte-vector into a bitv. Each byte becomes 8 bits,\n  * with the most significant bits of each byte coming first. Each\n@@ -604,6 +590,7 @@ impl<'self> Iterator<bool> for BitvIterator<'self> {\n /// It should also be noted that the amount of storage necessary for holding a\n /// set of objects is proportional to the maximum of the objects when viewed\n /// as a uint.\n+#[deriving(Clone)]\n pub struct BitvSet {\n     priv size: uint,\n \n@@ -1454,6 +1441,25 @@ mod tests {\n         assert_eq!(a.capacity(), uint::bits);\n     }\n \n+    #[test]\n+    fn test_bitv_clone() {\n+        let mut a = BitvSet::new();\n+\n+        assert!(a.insert(1));\n+        assert!(a.insert(100));\n+        assert!(a.insert(1000));\n+\n+        let mut b = a.clone();\n+\n+        assert_eq!(&a, &b);\n+\n+        assert!(b.remove(&1));\n+        assert!(a.contains(&1));\n+\n+        assert!(a.remove(&1000));\n+        assert!(b.contains(&1000));\n+    }\n+\n     fn rng() -> rand::IsaacRng {\n         let seed = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n         rand::IsaacRng::new_seeded(seed)"}]}