{"sha": "eff71b9927a98900ace67494fb9b1cb45a3b80a5", "node_id": "C_kwDOAAsO6NoAKGVmZjcxYjk5MjdhOTg5MDBhY2U2NzQ5NGZiOWIxY2I0NWEzYjgwYTU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-10T16:28:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-10T16:28:25Z"}, "message": "Rollup merge of #100371 - xfix:inline-from-bytes-with-nul-unchecked-rt-impl, r=scottmcm\n\nInline CStr::from_bytes_with_nul_unchecked::rt_impl\n\nCurrently `CStr::from_bytes_with_nul_unchecked::rt_impl` is not being inlined. The following function:\n\n```rust\npub unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) {\n    CStr::from_bytes_with_nul_unchecked(bytes);\n}\n```\n\nOutputs the following assembly on current nightly\n\n```asm\nexample::from_bytes_with_nul_unchecked:\n        jmp     qword ptr [rip + _ZN4core3ffi5c_str4CStr29from_bytes_with_nul_unchecked7rt_impl17h026f29f3d6a41333E@GOTPCREL]\n```\n\nMeanwhile on beta this provides the following assembly:\n\n```asm\nexample::from_bytes_with_nul_unchecked:\n        ret\n```\n\nThis pull request adds `#[inline]` annotation to`rt_impl` to fix a code generation regression for `CStr::from_bytes_with_nul_unchecked`.", "tree": {"sha": "969be2fcbe825df2c156e86fcd433c02fce05394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/969be2fcbe825df2c156e86fcd433c02fce05394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eff71b9927a98900ace67494fb9b1cb45a3b80a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi89ypCRBK7hj4Ov3rIwAAcIwIAA76mspVhEJLOGhNzrODBs0g\nDQ2m74xZYUidbPmMboEOIW/yDXoVeui6GVeJATVIJLVPMcyPE1hi3T3yWFd0ib1l\ncnwXL6Az7HsyeJSByzr4hzuYc9EGND+H/h3KXiv1x0N6hcCgIIEERibgKoh2kS76\n307EYae7PBmW5Kow40KyezSURbGr4Jb2Ya//R3L4kOCXe37nderjf+90mzPWtrUT\nlqhsInDPbYV9HIHS1q4MO/hO4qif981SLSvnzYU1Q/sV98/v17m7602G9HTOf8Of\nex525C4XUzYN56ZFhg+30JEpvPFzm7rxwYxitq1soCkM1HHugyvFIbY5WPneR20=\n=Qzke\n-----END PGP SIGNATURE-----\n", "payload": "tree 969be2fcbe825df2c156e86fcd433c02fce05394\nparent 96fc9f177e37f560787e37b8fee4e1dd772b6bfa\nparent de95117ea8480ad6f5be175de8a1348b09970153\nauthor Michael Goulet <michael@errs.io> 1660148905 -0700\ncommitter GitHub <noreply@github.com> 1660148905 -0700\n\nRollup merge of #100371 - xfix:inline-from-bytes-with-nul-unchecked-rt-impl, r=scottmcm\n\nInline CStr::from_bytes_with_nul_unchecked::rt_impl\n\nCurrently `CStr::from_bytes_with_nul_unchecked::rt_impl` is not being inlined. The following function:\n\n```rust\npub unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) {\n    CStr::from_bytes_with_nul_unchecked(bytes);\n}\n```\n\nOutputs the following assembly on current nightly\n\n```asm\nexample::from_bytes_with_nul_unchecked:\n        jmp     qword ptr [rip + _ZN4core3ffi5c_str4CStr29from_bytes_with_nul_unchecked7rt_impl17h026f29f3d6a41333E@GOTPCREL]\n```\n\nMeanwhile on beta this provides the following assembly:\n\n```asm\nexample::from_bytes_with_nul_unchecked:\n        ret\n```\n\nThis pull request adds `#[inline]` annotation to`rt_impl` to fix a code generation regression for `CStr::from_bytes_with_nul_unchecked`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eff71b9927a98900ace67494fb9b1cb45a3b80a5", "html_url": "https://github.com/rust-lang/rust/commit/eff71b9927a98900ace67494fb9b1cb45a3b80a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eff71b9927a98900ace67494fb9b1cb45a3b80a5/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96fc9f177e37f560787e37b8fee4e1dd772b6bfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/96fc9f177e37f560787e37b8fee4e1dd772b6bfa", "html_url": "https://github.com/rust-lang/rust/commit/96fc9f177e37f560787e37b8fee4e1dd772b6bfa"}, {"sha": "de95117ea8480ad6f5be175de8a1348b09970153", "url": "https://api.github.com/repos/rust-lang/rust/commits/de95117ea8480ad6f5be175de8a1348b09970153", "html_url": "https://github.com/rust-lang/rust/commit/de95117ea8480ad6f5be175de8a1348b09970153"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "d8b8ac4d8710be98a5efa629b0fdd35d8c4ad48b", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eff71b9927a98900ace67494fb9b1cb45a3b80a5/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff71b9927a98900ace67494fb9b1cb45a3b80a5/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=eff71b9927a98900ace67494fb9b1cb45a3b80a5", "patch": "@@ -387,6 +387,7 @@ impl CStr {\n     #[rustc_const_stable(feature = \"const_cstr_unchecked\", since = \"1.59.0\")]\n     #[rustc_allow_const_fn_unstable(const_eval_select)]\n     pub const unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {\n+        #[inline]\n         fn rt_impl(bytes: &[u8]) -> &CStr {\n             // Chance at catching some UB at runtime with debug builds.\n             debug_assert!(!bytes.is_empty() && bytes[bytes.len() - 1] == 0);"}]}