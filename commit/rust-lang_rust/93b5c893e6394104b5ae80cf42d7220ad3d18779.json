{"sha": "93b5c893e6394104b5ae80cf42d7220ad3d18779", "node_id": "C_kwDOAAsO6NoAKDkzYjVjODkzZTYzOTQxMDRiNWFlODBjZjQyZDcyMjBhZDNkMTg3Nzk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-10T12:19:15Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-25T16:10:10Z"}, "message": "Add semicolon-outside/inside-block lints", "tree": {"sha": "64740f1abc15aa386c2ef666f4389444cc5bd644", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64740f1abc15aa386c2ef666f4389444cc5bd644"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93b5c893e6394104b5ae80cf42d7220ad3d18779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93b5c893e6394104b5ae80cf42d7220ad3d18779", "html_url": "https://github.com/rust-lang/rust/commit/93b5c893e6394104b5ae80cf42d7220ad3d18779", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93b5c893e6394104b5ae80cf42d7220ad3d18779/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a9657139d1beca1d01486ba360fa17c43b9f58f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a9657139d1beca1d01486ba360fa17c43b9f58f", "html_url": "https://github.com/rust-lang/rust/commit/1a9657139d1beca1d01486ba360fa17c43b9f58f"}], "stats": {"total": 547, "additions": 547, "deletions": 0}, "files": [{"sha": "dac4a54b11fdc94036119ee648c4092733fb6e33", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b5c893e6394104b5ae80cf42d7220ad3d18779/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/93b5c893e6394104b5ae80cf42d7220ad3d18779/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=93b5c893e6394104b5ae80cf42d7220ad3d18779", "patch": "@@ -4353,6 +4353,8 @@ Released 2018-09-13\n [`self_named_constructors`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_named_constructors\n [`self_named_module_files`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_named_module_files\n [`semicolon_if_nothing_returned`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\n+[`semicolon_inside_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_inside_block\n+[`semicolon_outside_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_outside_block\n [`separated_literal_suffix`]: https://rust-lang.github.io/rust-clippy/master/index.html#separated_literal_suffix\n [`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse\n [`shadow_reuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse"}, {"sha": "76b4a2ccf5e1189588cdec17e62c18a531024f37", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b5c893e6394104b5ae80cf42d7220ad3d18779/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b5c893e6394104b5ae80cf42d7220ad3d18779/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=93b5c893e6394104b5ae80cf42d7220ad3d18779", "patch": "@@ -525,6 +525,8 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::returns::NEEDLESS_RETURN_INFO,\n     crate::same_name_method::SAME_NAME_METHOD_INFO,\n     crate::self_named_constructors::SELF_NAMED_CONSTRUCTORS_INFO,\n+    crate::semicolon_block::SEMICOLON_INSIDE_BLOCK_INFO,\n+    crate::semicolon_block::SEMICOLON_OUTSIDE_BLOCK_INFO,\n     crate::semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED_INFO,\n     crate::serde_api::SERDE_API_MISUSE_INFO,\n     crate::shadow::SHADOW_REUSE_INFO,"}, {"sha": "cbca317a14633efa3a205e9e1b294a6035384428", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b5c893e6394104b5ae80cf42d7220ad3d18779/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b5c893e6394104b5ae80cf42d7220ad3d18779/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=93b5c893e6394104b5ae80cf42d7220ad3d18779", "patch": "@@ -257,6 +257,7 @@ mod return_self_not_must_use;\n mod returns;\n mod same_name_method;\n mod self_named_constructors;\n+mod semicolon_block;\n mod semicolon_if_nothing_returned;\n mod serde_api;\n mod shadow;\n@@ -884,6 +885,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(from_raw_with_void_ptr::FromRawWithVoidPtr));\n     store.register_late_pass(|_| Box::new(suspicious_xor_used_as_pow::ConfusingXorAndPow));\n     store.register_late_pass(move |_| Box::new(manual_is_ascii_check::ManualIsAsciiCheck::new(msrv())));\n+    store.register_late_pass(|_| Box::new(semicolon_block::SemicolonBlock));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "911d38f65d6c8087e39d4bcaa3e2438ca29699ef", "filename": "clippy_lints/src/semicolon_block.rs", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/93b5c893e6394104b5ae80cf42d7220ad3d18779/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b5c893e6394104b5ae80cf42d7220ad3d18779/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_block.rs?ref=93b5c893e6394104b5ae80cf42d7220ad3d18779", "patch": "@@ -0,0 +1,131 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_macro_callsite;\n+use clippy_utils::{get_parent_expr_for_hir, get_parent_node};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Block, Expr, ExprKind, Node, Stmt, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// For () returning expressions, check that the semicolon is inside the block.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// For consistency it's best to have the semicolon inside/outside the block. Either way is fine and this lint suggests inside the block.\n+    /// Take a look at `semicolon_outside_block` for the other alternative.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # fn f(_: u32) {}\n+    /// # let x = 0;\n+    /// unsafe { f(x) };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn f(_: u32) {}\n+    /// # let x = 0;\n+    /// unsafe { f(x); }\n+    /// ```\n+    #[clippy::version = \"1.66.0\"]\n+    pub SEMICOLON_INSIDE_BLOCK,\n+    restriction,\n+    \"add a semicolon inside the block\"\n+}\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// For () returning expressions, check that the semicolon is outside the block.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// For consistency it's best to have the semicolon inside/outside the block. Either way is fine and this lint suggests outside the block.\n+    /// Take a look at `semicolon_inside_block` for the other alternative.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # fn f(_: u32) {}\n+    /// # let x = 0;\n+    /// unsafe { f(x); }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn f(_: u32) {}\n+    /// # let x = 0;\n+    /// unsafe { f(x) };\n+    /// ```\n+    #[clippy::version = \"1.66.0\"]\n+    pub SEMICOLON_OUTSIDE_BLOCK,\n+    restriction,\n+    \"add a semicolon outside the block\"\n+}\n+declare_lint_pass!(SemicolonBlock => [SEMICOLON_INSIDE_BLOCK, SEMICOLON_OUTSIDE_BLOCK]);\n+\n+impl LateLintPass<'_> for SemicolonBlock {\n+    fn check_block(&mut self, cx: &LateContext<'_>, block: &Block<'_>) {\n+        semicolon_inside_block(cx, block);\n+        semicolon_outside_block(cx, block);\n+    }\n+}\n+\n+fn semicolon_inside_block(cx: &LateContext<'_>, block: &Block<'_>) {\n+    if !block.span.from_expansion()\n+    && let Some(tail) = block.expr\n+    && let Some(block_expr @ Expr { kind: ExprKind::Block(_, _), ..}) = get_parent_expr_for_hir(cx, block.hir_id)\n+    && let Some(Node::Stmt(Stmt { kind: StmtKind::Semi(_), span, .. })) = get_parent_node(cx.tcx, block_expr.hir_id)\n+    {\n+        let expr_snip = snippet_with_macro_callsite(cx, tail.span, \"..\");\n+\n+        let mut suggestion: String = snippet_with_macro_callsite(cx, block.span, \"..\").to_string();\n+\n+        if let Some((expr_offset, _)) = suggestion.rmatch_indices(&*expr_snip).next() {\n+            suggestion.insert(expr_offset + expr_snip.len(), ';');\n+        } else {\n+            return;\n+        }\n+\n+        span_lint_and_sugg(\n+            cx,\n+            SEMICOLON_INSIDE_BLOCK,\n+            *span,\n+            \"consider moving the `;` inside the block for consistent formatting\",\n+            \"put the `;` here\",\n+            suggestion,\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+}\n+\n+fn semicolon_outside_block(cx: &LateContext<'_>, block: &Block<'_>) {\n+    if !block.span.from_expansion()\n+    && block.expr.is_none()\n+    && let [.., Stmt { kind: StmtKind::Semi(expr), .. }] = block.stmts\n+    && let Some(block_expr @ Expr { kind: ExprKind::Block(_, _), ..}) = get_parent_expr_for_hir(cx,block.hir_id)\n+    && let Some(Node::Stmt(Stmt { kind: StmtKind::Expr(_), .. })) = get_parent_node(cx.tcx, block_expr.hir_id) {\n+        let expr_snip = snippet_with_macro_callsite(cx, expr.span, \"..\");\n+\n+        let mut suggestion: String = snippet_with_macro_callsite(cx, block.span, \"..\").to_string();\n+\n+        if let Some((expr_offset, _)) = suggestion.rmatch_indices(&*expr_snip).next()\n+        && let Some(semi_offset) = suggestion[expr_offset + expr_snip.len()..].find(';') {\n+            suggestion.remove(expr_offset +  expr_snip.len() + semi_offset);\n+        } else {\n+            return;\n+        }\n+\n+        suggestion.push(';');\n+\n+        span_lint_and_sugg(\n+            cx,\n+            SEMICOLON_OUTSIDE_BLOCK,\n+            block.span,\n+            \"consider moving the `;` outside the block for consistent formatting\",\n+            \"put the `;` outside the block\",\n+            suggestion,\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+}"}, {"sha": "4cd112dd5e12cdaa3b1019e78bfea7f78c993c8a", "filename": "tests/ui/semicolon_inside_block.fixed", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/93b5c893e6394104b5ae80cf42d7220ad3d18779/tests%2Fui%2Fsemicolon_inside_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/93b5c893e6394104b5ae80cf42d7220ad3d18779/tests%2Fui%2Fsemicolon_inside_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_inside_block.fixed?ref=93b5c893e6394104b5ae80cf42d7220ad3d18779", "patch": "@@ -0,0 +1,83 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_inside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()); }\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    unit_fn_block()\n+}"}, {"sha": "7512125c051d3efa20074490017d82b465860bed", "filename": "tests/ui/semicolon_inside_block.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/93b5c893e6394104b5ae80cf42d7220ad3d18779/tests%2Fui%2Fsemicolon_inside_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b5c893e6394104b5ae80cf42d7220ad3d18779/tests%2Fui%2Fsemicolon_inside_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_inside_block.rs?ref=93b5c893e6394104b5ae80cf42d7220ad3d18779", "patch": "@@ -0,0 +1,83 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_inside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    unit_fn_block()\n+}"}, {"sha": "febe74b49bdad6054e007a9788a28b8e17709c68", "filename": "tests/ui/semicolon_inside_block.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/93b5c893e6394104b5ae80cf42d7220ad3d18779/tests%2Fui%2Fsemicolon_inside_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93b5c893e6394104b5ae80cf42d7220ad3d18779/tests%2Fui%2Fsemicolon_inside_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_inside_block.stderr?ref=93b5c893e6394104b5ae80cf42d7220ad3d18779", "patch": "@@ -0,0 +1,39 @@\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/semicolon_inside_block.rs:39:5\n+   |\n+LL |     { unit_fn_block() };\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: put the `;` here: `{ unit_fn_block(); }`\n+   |\n+   = note: `-D clippy::semicolon-inside-block` implied by `-D warnings`\n+\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/semicolon_inside_block.rs:40:5\n+   |\n+LL |     unsafe { unit_fn_block() };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: put the `;` here: `unsafe { unit_fn_block(); }`\n+\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/semicolon_inside_block.rs:48:5\n+   |\n+LL | /     {\n+LL | |         unit_fn_block();\n+LL | |         unit_fn_block()\n+LL | |     };\n+   | |______^\n+   |\n+help: put the `;` here\n+   |\n+LL ~     {\n+LL +         unit_fn_block();\n+LL +         unit_fn_block();\n+LL +     }\n+   |\n+\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/semicolon_inside_block.rs:61:5\n+   |\n+LL |     { m!(()) };\n+   |     ^^^^^^^^^^^ help: put the `;` here: `{ m!(()); }`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "5bc18faaad8ec47da3273653d6ab18cb59c07db3", "filename": "tests/ui/semicolon_outside_block.fixed", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/93b5c893e6394104b5ae80cf42d7220ad3d18779/tests%2Fui%2Fsemicolon_outside_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/93b5c893e6394104b5ae80cf42d7220ad3d18779/tests%2Fui%2Fsemicolon_outside_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_outside_block.fixed?ref=93b5c893e6394104b5ae80cf42d7220ad3d18779", "patch": "@@ -0,0 +1,83 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_outside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()) };\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    unit_fn_block()\n+}"}, {"sha": "0a42932387630e851a183c53819aac5a607beaf4", "filename": "tests/ui/semicolon_outside_block.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/93b5c893e6394104b5ae80cf42d7220ad3d18779/tests%2Fui%2Fsemicolon_outside_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b5c893e6394104b5ae80cf42d7220ad3d18779/tests%2Fui%2Fsemicolon_outside_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_outside_block.rs?ref=93b5c893e6394104b5ae80cf42d7220ad3d18779", "patch": "@@ -0,0 +1,83 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_outside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    unit_fn_block()\n+}"}, {"sha": "fddf51208130d90e9b12e76b98393fd6676d9a2d", "filename": "tests/ui/semicolon_outside_block.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/93b5c893e6394104b5ae80cf42d7220ad3d18779/tests%2Fui%2Fsemicolon_outside_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93b5c893e6394104b5ae80cf42d7220ad3d18779/tests%2Fui%2Fsemicolon_outside_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_outside_block.stderr?ref=93b5c893e6394104b5ae80cf42d7220ad3d18779", "patch": "@@ -0,0 +1,39 @@\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:42:5\n+   |\n+LL |     { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: put the `;` outside the block: `{ unit_fn_block() };`\n+   |\n+   = note: `-D clippy::semicolon-outside-block` implied by `-D warnings`\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:43:5\n+   |\n+LL |     unsafe { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: put the `;` outside the block: `unsafe { unit_fn_block() };`\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:52:5\n+   |\n+LL | /     {\n+LL | |         unit_fn_block();\n+LL | |         unit_fn_block();\n+LL | |     }\n+   | |_____^\n+   |\n+help: put the `;` outside the block\n+   |\n+LL ~     {\n+LL +         unit_fn_block();\n+LL +         unit_fn_block()\n+LL +     };\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:62:5\n+   |\n+LL |     { m!(()); }\n+   |     ^^^^^^^^^^^ help: put the `;` outside the block: `{ m!(()) };`\n+\n+error: aborting due to 4 previous errors\n+"}]}