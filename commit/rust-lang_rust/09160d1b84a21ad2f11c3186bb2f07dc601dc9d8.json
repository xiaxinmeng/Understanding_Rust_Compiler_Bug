{"sha": "09160d1b84a21ad2f11c3186bb2f07dc601dc9d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MTYwZDFiODRhMjFhZDJmMTFjMzE4NmJiMmYwN2RjNjAxZGM5ZDg=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-04T19:46:03Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-05T04:36:18Z"}, "message": "Use consistent feature naming", "tree": {"sha": "c528686937b317fc3cb6458b2a89a97be0f2049c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c528686937b317fc3cb6458b2a89a97be0f2049c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09160d1b84a21ad2f11c3186bb2f07dc601dc9d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09160d1b84a21ad2f11c3186bb2f07dc601dc9d8", "html_url": "https://github.com/rust-lang/rust/commit/09160d1b84a21ad2f11c3186bb2f07dc601dc9d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09160d1b84a21ad2f11c3186bb2f07dc601dc9d8/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e9fd80bd7c0b3aeb700c474edd93a078f822dbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9fd80bd7c0b3aeb700c474edd93a078f822dbc", "html_url": "https://github.com/rust-lang/rust/commit/3e9fd80bd7c0b3aeb700c474edd93a078f822dbc"}], "stats": {"total": 98, "additions": 49, "deletions": 49}, "files": [{"sha": "1fd70e1a1b049aeadef92fe39f5922e2a0131f5f", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09160d1b84a21ad2f11c3186bb2f07dc601dc9d8/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09160d1b84a21ad2f11c3186bb2f07dc601dc9d8/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=09160d1b84a21ad2f11c3186bb2f07dc601dc9d8", "patch": "@@ -72,10 +72,10 @@\n #![feature(concat_idents)]\n #![feature(const_alloc_layout)]\n #![feature(const_if_match)]\n-#![feature(const_int_checked)]\n-#![feature(const_int_euclidean)]\n-#![feature(const_int_overflowing)]\n-#![feature(const_int_saturating)]\n+#![feature(const_checked_int_methods)]\n+#![feature(const_euclidean_int_methods)]\n+#![feature(const_overflowing_int_methods)]\n+#![feature(const_saturating_int_methods)]\n #![feature(const_int_unchecked_arith)]\n #![feature(const_panic)]\n #![feature(const_fn_union)]"}, {"sha": "ed37b48b3e8556fbb45733f3376d23531a2889f7", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/09160d1b84a21ad2f11c3186bb2f07dc601dc9d8/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09160d1b84a21ad2f11c3186bb2f07dc601dc9d8/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=09160d1b84a21ad2f11c3186bb2f07dc601dc9d8", "patch": "@@ -701,7 +701,7 @@ assert_eq!((\", stringify!($SelfT), \"::max_value() - 2).checked_add(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -726,7 +726,7 @@ assert_eq!((\", stringify!($SelfT), \"::min_value() + 2).checked_sub(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -751,7 +751,7 @@ assert_eq!(\", stringify!($SelfT), \"::max_value().checked_mul(2), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -777,7 +777,7 @@ assert_eq!((1\", stringify!($SelfT), \").checked_div(0), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -806,7 +806,7 @@ assert_eq!(\", stringify!($SelfT), \"::min_value().checked_div_euclid(-1), None);\n assert_eq!((1\", stringify!($SelfT), \").checked_div_euclid(0), None);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -836,7 +836,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem(-1), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -866,7 +866,7 @@ assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\n assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem_euclid(-1), None);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -894,7 +894,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_neg(), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[inline]\n             pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n@@ -916,7 +916,7 @@ assert_eq!(0x1\", stringify!($SelfT), \".checked_shl(129), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -940,7 +940,7 @@ assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(128), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -966,7 +966,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_abs(), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[inline]\n             pub const fn checked_abs(self) -> Option<Self> {\n                 if self.is_negative() {\n@@ -1091,7 +1091,7 @@ $EndFeature, \"\n ```\"),\n \n             #[unstable(feature = \"saturating_neg\", issue = \"59983\")]\n-            #[rustc_const_unstable(feature = \"const_int_saturating\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n             #[inline]\n             pub const fn saturating_neg(self) -> Self {\n                 intrinsics::saturating_sub(0, self)\n@@ -1118,7 +1118,7 @@ $EndFeature, \"\n ```\"),\n \n             #[unstable(feature = \"saturating_neg\", issue = \"59983\")]\n-            #[rustc_const_unstable(feature = \"const_int_saturating\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n             #[inline]\n             pub const fn saturating_abs(self) -> Self {\n                 if self.is_negative() {\n@@ -1146,7 +1146,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_mul(10), \", stringify!($Self\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_saturating\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1284,7 +1284,7 @@ assert_eq!((-128i8).wrapping_div(-1), -128);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_wrapping_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1314,7 +1314,7 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euclid(10), 10);\n assert_eq!((-128i8).wrapping_div_euclid(-1), -128);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1345,7 +1345,7 @@ assert_eq!((-128i8).wrapping_rem(-1), 0);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_wrapping_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1374,7 +1374,7 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\n assert_eq!((-128i8).wrapping_rem_euclid(-1), 0);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1654,7 +1654,7 @@ $EndFeature, \"\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_overflowing\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_overflowing_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             pub const fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n@@ -1689,7 +1689,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_div_euclid(-1), (\", stringi\n ```\"),\n             #[inline]\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             pub const fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n@@ -1724,7 +1724,7 @@ $EndFeature, \"\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_overflowing\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_overflowing_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             pub const fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n@@ -1758,7 +1758,7 @@ assert_eq!(5\", stringify!($SelfT), \".overflowing_rem_euclid(2), (1, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_rem_euclid(-1), (0, true));\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -2004,7 +2004,7 @@ assert_eq!((-a).div_euclid(b), -2); // -7 >= 4 * -2\n assert_eq!((-a).div_euclid(-b), 2); // -7 >= -4 * 2\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -2044,7 +2044,7 @@ assert_eq!(a.rem_euclid(-b), 3);\n assert_eq!((-a).rem_euclid(-b), 1);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -2872,7 +2872,7 @@ Basic usage:\n assert_eq!((\", stringify!($SelfT), \"::max_value() - 2).checked_add(3), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -2895,7 +2895,7 @@ Basic usage:\n assert_eq!(0\", stringify!($SelfT), \".checked_sub(1), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -2918,7 +2918,7 @@ Basic usage:\n assert_eq!(\", stringify!($SelfT), \"::max_value().checked_mul(2), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -2941,7 +2941,7 @@ Basic usage:\n assert_eq!(1\", stringify!($SelfT), \".checked_div(0), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -2968,7 +2968,7 @@ assert_eq!(128\", stringify!($SelfT), \".checked_div_euclid(2), Some(64));\n assert_eq!(1\", stringify!($SelfT), \".checked_div_euclid(0), None);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -2995,7 +2995,7 @@ Basic usage:\n assert_eq!(5\", stringify!($SelfT), \".checked_rem(0), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3023,7 +3023,7 @@ assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(2), Some(1));\n assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3051,7 +3051,7 @@ Basic usage:\n assert_eq!(1\", stringify!($SelfT), \".checked_neg(), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[inline]\n             pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n@@ -3072,7 +3072,7 @@ Basic usage:\n assert_eq!(0x10\", stringify!($SelfT), \".checked_shl(129), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3095,7 +3095,7 @@ Basic usage:\n assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(129), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3205,7 +3205,7 @@ assert_eq!((\", stringify!($SelfT), \"::MAX).saturating_mul(10), \", stringify!($Se\n \"::MAX);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_saturating\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3328,7 +3328,7 @@ Basic usage:\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".wrapping_div(10), 10);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_wrapping_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3355,7 +3355,7 @@ Basic usage:\n assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euclid(10), 10);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3380,7 +3380,7 @@ Basic usage:\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".wrapping_rem(10), 0);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_wrapping_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3408,7 +3408,7 @@ Basic usage:\n assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3657,7 +3657,7 @@ Basic usage\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_overflowing\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_overflowing_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             pub const fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n@@ -3689,7 +3689,7 @@ assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euclid(2), (2, false));\n ```\"),\n             #[inline]\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             pub const fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n@@ -3718,7 +3718,7 @@ Basic usage\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_overflowing\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_overflowing_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             pub const fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n@@ -3750,7 +3750,7 @@ assert_eq!(5\", stringify!($SelfT), \".overflowing_rem_euclid(2), (1, false));\n ```\"),\n             #[inline]\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             pub const fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n@@ -3944,7 +3944,7 @@ Basic usage:\n assert_eq!(7\", stringify!($SelfT), \".div_euclid(4), 1); // or any other integer type\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3974,7 +3974,7 @@ Basic usage:\n assert_eq!(7\", stringify!($SelfT), \".rem_euclid(4), 3); // or any other integer type\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n+            #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]"}]}