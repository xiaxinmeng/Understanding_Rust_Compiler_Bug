{"sha": "19adeaa3c6482fb52a7926cba1e3842e788177eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YWRlYWEzYzY0ODJmYjUyYTc5MjZjYmExZTM4NDJlNzg4MTc3ZWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-05T10:03:59Z"}, "committer": {"name": "Bastian K\u00f6cher", "email": "git@kchr.de", "date": "2017-12-26T11:26:39Z"}, "message": "convert print-type-sizes to use `start` instead of `main`\n\nThis avoids bringing in unwind machinery.", "tree": {"sha": "9a8d0f4ea5cd7481cdfbf4c8802bdb399065b385", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a8d0f4ea5cd7481cdfbf4c8802bdb399065b385"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19adeaa3c6482fb52a7926cba1e3842e788177eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19adeaa3c6482fb52a7926cba1e3842e788177eb", "html_url": "https://github.com/rust-lang/rust/commit/19adeaa3c6482fb52a7926cba1e3842e788177eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19adeaa3c6482fb52a7926cba1e3842e788177eb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkchr", "id": 5718007, "node_id": "MDQ6VXNlcjU3MTgwMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5718007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkchr", "html_url": "https://github.com/bkchr", "followers_url": "https://api.github.com/users/bkchr/followers", "following_url": "https://api.github.com/users/bkchr/following{/other_user}", "gists_url": "https://api.github.com/users/bkchr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkchr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkchr/subscriptions", "organizations_url": "https://api.github.com/users/bkchr/orgs", "repos_url": "https://api.github.com/users/bkchr/repos", "events_url": "https://api.github.com/users/bkchr/events{/privacy}", "received_events_url": "https://api.github.com/users/bkchr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b452c432cd16e7d71c8311a574b0dcbbb66a6583", "url": "https://api.github.com/repos/rust-lang/rust/commits/b452c432cd16e7d71c8311a574b0dcbbb66a6583", "html_url": "https://github.com/rust-lang/rust/commit/b452c432cd16e7d71c8311a574b0dcbbb66a6583"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "56c05f566c9abc4ddd117ce1bedc29f0d2447008", "filename": "src/test/ui/print_type_sizes/anonymous.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.rs?ref=19adeaa3c6482fb52a7926cba1e3842e788177eb", "patch": "@@ -15,7 +15,10 @@\n // that one cannot control the sizes of these types with the same sort\n // of enum-variant manipulation tricks.\n \n-pub fn main() {\n+#![feature(start)]\n+\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _byte: u8 = 0;\n     let _word: usize = 0;\n     let _tuple: (u8, usize)= (0, 0);\n@@ -25,4 +28,6 @@ pub fn main() {\n \n     fn id(x: u8) -> u8 { x };\n     fn bye(_: u8) -> ! { loop { } }\n+\n+    0\n }"}, {"sha": "d0e5bd1d92abfd07dd9c2d9b860ae781035c0200", "filename": "src/test/ui/print_type_sizes/generics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs?ref=19adeaa3c6482fb52a7926cba1e3842e788177eb", "patch": "@@ -15,6 +15,8 @@\n // monomorphized, in the MIR of the original function in which they\n // occur, to have their size reported.\n \n+#![feature(start)]\n+\n // In an ad-hoc attempt to avoid the injection of unwinding code\n // (which clutters the output of `-Z print-type-sizes` with types from\n // `unwind::libunwind`):\n@@ -66,9 +68,11 @@ pub fn f1<T:Copy>(x: T) {\n         Pair::new(FiftyBytes::new(), FiftyBytes::new());\n }\n \n-pub fn main() {\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _b: Pair<u8> = Pair::new(0, 0);\n     let _s: Pair<SevenBytes> = Pair::new(SevenBytes::new(), SevenBytes::new());\n     let _z: ZeroSized = ZeroSized;\n     f1::<SevenBytes>(SevenBytes::new());\n+    0\n }"}, {"sha": "a50b28f3c4952ffaad472a7e28c2139a9716a1d2", "filename": "src/test/ui/print_type_sizes/multiple_types.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs?ref=19adeaa3c6482fb52a7926cba1e3842e788177eb", "patch": "@@ -14,6 +14,8 @@\n // This file illustrates that when multiple structural types occur in\n // a function, every one of them is included in the output.\n \n+#![feature(start)]\n+\n pub struct SevenBytes([u8;  7]);\n pub struct FiftyBytes([u8; 50]);\n \n@@ -22,8 +24,10 @@ pub enum Enum {\n     Large(FiftyBytes),\n }\n \n-pub fn main() {\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _e: Enum;\n     let _f: FiftyBytes;\n     let _s: SevenBytes;\n+    0\n }"}, {"sha": "7f234e243e9265b00dbe1059e6b45193d4d34276", "filename": "src/test/ui/print_type_sizes/niche-filling.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs?ref=19adeaa3c6482fb52a7926cba1e3842e788177eb", "patch": "@@ -21,6 +21,7 @@\n // aligned (while on most it is 8-byte aligned) and so the resulting\n // padding and overall computed sizes can be quite different.\n \n+#![feature(start)]\n #![feature(nonzero)]\n #![allow(dead_code)]\n \n@@ -76,7 +77,8 @@ pub enum Enum4<A, B, C, D> {\n     Four(D)\n }\n \n-pub fn main() {\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _x: MyOption<NonZero<u32>> = Default::default();\n     let _y: EmbeddedDiscr = Default::default();\n     let _z: MyOption<IndirectNonZero<u32>> = Default::default();\n@@ -87,4 +89,5 @@ pub fn main() {\n     let _e: Enum4<(), char, (), ()> = Enum4::One(());\n     let _f: Enum4<(), (), bool, ()> = Enum4::One(());\n     let _g: Enum4<(), (), (), MyOption<u8>> = Enum4::One(());\n+    0\n }"}, {"sha": "d9b90260364b2aa270f9c4023270c2ad1fcab2e3", "filename": "src/test/ui/print_type_sizes/no_duplicates.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs?ref=19adeaa3c6482fb52a7926cba1e3842e788177eb", "patch": "@@ -15,12 +15,16 @@\n // (even if multiple functions), it is only printed once in the\n // print-type-sizes output.\n \n+#![feature(start)]\n+\n pub struct SevenBytes([u8; 7]);\n \n pub fn f1() {\n     let _s: SevenBytes = SevenBytes([0; 7]);\n }\n \n-pub fn main() {\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _s: SevenBytes = SevenBytes([0; 7]);\n+    0\n }"}, {"sha": "a4288f67899a2289bea39489d77b409fcba7389a", "filename": "src/test/ui/print_type_sizes/packed.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs?ref=19adeaa3c6482fb52a7926cba1e3842e788177eb", "patch": "@@ -20,6 +20,7 @@\n // padding and overall computed sizes can be quite different.\n \n #![allow(dead_code)]\n+#![feature(start)]\n \n #[derive(Default)]\n #[repr(packed)]\n@@ -42,7 +43,9 @@ struct Padded {\n     d: u8,\n }\n \n-pub fn main() {\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _c: Packed = Default::default();\n     let _d: Padded = Default::default();\n+    0\n }"}, {"sha": "b4661efdd27a249739394f55ca28fc5fc158a700", "filename": "src/test/ui/print_type_sizes/padding.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs?ref=19adeaa3c6482fb52a7926cba1e3842e788177eb", "patch": "@@ -19,6 +19,7 @@\n // aligned (while on most it is 8-byte aligned) and so the resulting\n // padding and overall computed sizes can be quite different.\n \n+#![feature(start)]\n #![allow(dead_code)]\n \n struct S {\n@@ -37,4 +38,7 @@ enum E2 {\n     B(S),\n }\n \n-fn main() { }\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n+    0\n+}"}, {"sha": "108b8dbba0198f10905ff645436a046d635dda9d", "filename": "src/test/ui/print_type_sizes/repr-align.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs?ref=19adeaa3c6482fb52a7926cba1e3842e788177eb", "patch": "@@ -20,6 +20,7 @@\n // padding and overall computed sizes can be quite different.\n #![feature(attr_literals)]\n #![feature(repr_align)]\n+#![feature(start)]\n #![allow(dead_code)]\n \n #[repr(align(16))]\n@@ -39,6 +40,8 @@ struct S {\n     d: i8,\n }\n \n-fn main() {\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _s: S = Default::default();\n+    0\n }"}, {"sha": "4d0396903e555d507861c3de9fc6e9a77b2cd56a", "filename": "src/test/ui/print_type_sizes/uninhabited.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs?ref=19adeaa3c6482fb52a7926cba1e3842e788177eb", "patch": "@@ -12,8 +12,11 @@\n // must-compile-successfully\n \n #![feature(never_type)]\n+#![feature(start)]\n \n-pub fn main() {\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _x: Option<!> = None;\n     let _y: Result<u32, !> = Ok(42);\n+    0\n }"}, {"sha": "e4d54162e73af5bcb93e31775259ff9d990f948d", "filename": "src/test/ui/print_type_sizes/variants.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19adeaa3c6482fb52a7926cba1e3842e788177eb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs?ref=19adeaa3c6482fb52a7926cba1e3842e788177eb", "patch": "@@ -19,6 +19,8 @@\n // 2. For an enum, the print-type-sizes output will also include the\n //    size of each variant.\n \n+#![feature(start)]\n+\n pub struct SevenBytes([u8;  7]);\n pub struct FiftyBytes([u8; 50]);\n \n@@ -27,6 +29,8 @@ pub enum Enum {\n     Large(FiftyBytes),\n }\n \n-pub fn main() {\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _e: Enum;\n+    0\n }"}]}