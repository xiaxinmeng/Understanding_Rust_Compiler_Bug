{"sha": "ee013d83c3c8e1271216e92e932a54b4f6e95a7e", "node_id": "C_kwDOAAsO6NoAKGVlMDEzZDgzYzNjOGUxMjcxMjE2ZTkyZTkzMmE1NGI0ZjZlOTVhN2U", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-25T20:59:17Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-25T21:00:26Z"}, "message": "Avoid some unnecessary local `attr` variables.", "tree": {"sha": "fd6beb6c5d37414df4202125331bf3c43b909b91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd6beb6c5d37414df4202125331bf3c43b909b91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee013d83c3c8e1271216e92e932a54b4f6e95a7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee013d83c3c8e1271216e92e932a54b4f6e95a7e", "html_url": "https://github.com/rust-lang/rust/commit/ee013d83c3c8e1271216e92e932a54b4f6e95a7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee013d83c3c8e1271216e92e932a54b4f6e95a7e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b0324fce09e1b08d4ebb51e90d1e37d206bef3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0324fce09e1b08d4ebb51e90d1e37d206bef3b", "html_url": "https://github.com/rust-lang/rust/commit/5b0324fce09e1b08d4ebb51e90d1e37d206bef3b"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "9ba98d0a5d187a9d4a35b0ea49b6d35c28cfa1c9", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee013d83c3c8e1271216e92e932a54b4f6e95a7e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee013d83c3c8e1271216e92e932a54b4f6e95a7e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=ee013d83c3c8e1271216e92e932a54b4f6e95a7e", "patch": "@@ -68,7 +68,6 @@ pub fn expand_deriving_clone(\n         _ => cx.span_bug(span, \"`#[derive(Clone)]` on trait item or impl item\"),\n     }\n \n-    let attrs = thin_vec![cx.attr_word(sym::inline, span)];\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(clone::Clone),\n@@ -82,7 +81,7 @@ pub fn expand_deriving_clone(\n             explicit_self: true,\n             nonself_args: Vec::new(),\n             ret_ty: Self_,\n-            attributes: attrs,\n+            attributes: thin_vec![cx.attr_word(sym::inline, span)],\n             fieldless_variants_strategy: FieldlessVariantsStrategy::Default,\n             combine_substructure: substructure,\n         }],"}, {"sha": "c78a0eb04a074c2d73b66d351ed0640c1406dba4", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee013d83c3c8e1271216e92e932a54b4f6e95a7e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee013d83c3c8e1271216e92e932a54b4f6e95a7e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=ee013d83c3c8e1271216e92e932a54b4f6e95a7e", "patch": "@@ -18,11 +18,6 @@ pub fn expand_deriving_eq(\n     is_const: bool,\n ) {\n     let span = cx.with_def_site_ctxt(span);\n-    let attrs = thin_vec![\n-        cx.attr_word(sym::inline, span),\n-        cx.attr_nested_word(sym::doc, sym::hidden, span),\n-        cx.attr_word(sym::no_coverage, span)\n-    ];\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::Eq),\n@@ -36,7 +31,11 @@ pub fn expand_deriving_eq(\n             explicit_self: true,\n             nonself_args: vec![],\n             ret_ty: Unit,\n-            attributes: attrs,\n+            attributes: thin_vec![\n+                cx.attr_word(sym::inline, span),\n+                cx.attr_nested_word(sym::doc, sym::hidden, span),\n+                cx.attr_word(sym::no_coverage, span)\n+            ],\n             fieldless_variants_strategy: FieldlessVariantsStrategy::Unify,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                 cs_total_eq_assert(a, b, c)"}, {"sha": "4401cf8a9c5650f0768792a3a4167224cbd9701b", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee013d83c3c8e1271216e92e932a54b4f6e95a7e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee013d83c3c8e1271216e92e932a54b4f6e95a7e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=ee013d83c3c8e1271216e92e932a54b4f6e95a7e", "patch": "@@ -15,7 +15,6 @@ pub fn expand_deriving_ord(\n     push: &mut dyn FnMut(Annotatable),\n     is_const: bool,\n ) {\n-    let attrs = thin_vec![cx.attr_word(sym::inline, span)];\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::Ord),\n@@ -29,7 +28,7 @@ pub fn expand_deriving_ord(\n             explicit_self: true,\n             nonself_args: vec![(self_ref(), sym::other)],\n             ret_ty: Path(path_std!(cmp::Ordering)),\n-            attributes: attrs,\n+            attributes: thin_vec![cx.attr_word(sym::inline, span)],\n             fieldless_variants_strategy: FieldlessVariantsStrategy::Unify,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| cs_cmp(a, b, c))),\n         }],"}, {"sha": "a71ecc5db7d97def9041cb8d59622d4b6c5589ff", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee013d83c3c8e1271216e92e932a54b4f6e95a7e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee013d83c3c8e1271216e92e932a54b4f6e95a7e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=ee013d83c3c8e1271216e92e932a54b4f6e95a7e", "patch": "@@ -82,14 +82,13 @@ pub fn expand_deriving_partial_eq(\n \n     // No need to generate `ne`, the default suffices, and not generating it is\n     // faster.\n-    let attrs = thin_vec![cx.attr_word(sym::inline, span)];\n     let methods = vec![MethodDef {\n         name: sym::eq,\n         generics: Bounds::empty(),\n         explicit_self: true,\n         nonself_args: vec![(self_ref(), sym::other)],\n         ret_ty: Path(path_local!(bool)),\n-        attributes: attrs,\n+        attributes: thin_vec![cx.attr_word(sym::inline, span)],\n         fieldless_variants_strategy: FieldlessVariantsStrategy::Unify,\n         combine_substructure: combine_substructure(Box::new(|a, b, c| cs_eq(a, b, c))),\n     }];"}, {"sha": "54b6cb7d71301f97c16370fcf880d2176bf1e5c5", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee013d83c3c8e1271216e92e932a54b4f6e95a7e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee013d83c3c8e1271216e92e932a54b4f6e95a7e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=ee013d83c3c8e1271216e92e932a54b4f6e95a7e", "patch": "@@ -19,8 +19,6 @@ pub fn expand_deriving_partial_ord(\n     let ret_ty =\n         Path(Path::new_(pathvec_std!(option::Option), vec![Box::new(ordering_ty)], PathKind::Std));\n \n-    let attrs = thin_vec![cx.attr_word(sym::inline, span)];\n-\n     // Order in which to perform matching\n     let tag_then_data = if let Annotatable::Item(item) = item\n         && let ItemKind::Enum(def, _) = &item.kind {\n@@ -48,7 +46,7 @@ pub fn expand_deriving_partial_ord(\n         explicit_self: true,\n         nonself_args: vec![(self_ref(), sym::other)],\n         ret_ty,\n-        attributes: attrs,\n+        attributes: thin_vec![cx.attr_word(sym::inline, span)],\n         fieldless_variants_strategy: FieldlessVariantsStrategy::Unify,\n         combine_substructure: combine_substructure(Box::new(|cx, span, substr| {\n             cs_partial_cmp(cx, span, substr, tag_then_data)"}, {"sha": "07b172bc757b2ae7f26e6c026431caaa9c97da89", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee013d83c3c8e1271216e92e932a54b4f6e95a7e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee013d83c3c8e1271216e92e932a54b4f6e95a7e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=ee013d83c3c8e1271216e92e932a54b4f6e95a7e", "patch": "@@ -20,7 +20,6 @@ pub fn expand_deriving_default(\n ) {\n     item.visit_with(&mut DetectNonVariantDefaultAttr { cx });\n \n-    let attrs = thin_vec![cx.attr_word(sym::inline, span)];\n     let trait_def = TraitDef {\n         span,\n         path: Path::new(vec![kw::Default, sym::Default]),\n@@ -34,7 +33,7 @@ pub fn expand_deriving_default(\n             explicit_self: false,\n             nonself_args: Vec::new(),\n             ret_ty: Self_,\n-            attributes: attrs,\n+            attributes: thin_vec![cx.attr_word(sym::inline, span)],\n             fieldless_variants_strategy: FieldlessVariantsStrategy::Default,\n             combine_substructure: combine_substructure(Box::new(|cx, trait_span, substr| {\n                 match substr.fields {"}, {"sha": "101401f9c85b7929c9582086fc8e5b62e515f74b", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee013d83c3c8e1271216e92e932a54b4f6e95a7e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee013d83c3c8e1271216e92e932a54b4f6e95a7e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=ee013d83c3c8e1271216e92e932a54b4f6e95a7e", "patch": "@@ -20,7 +20,6 @@ pub fn expand_deriving_hash(\n     let typaram = sym::__H;\n \n     let arg = Path::new_local(typaram);\n-    let attrs = thin_vec![cx.attr_word(sym::inline, span)];\n     let hash_trait_def = TraitDef {\n         span,\n         path,\n@@ -34,7 +33,7 @@ pub fn expand_deriving_hash(\n             explicit_self: true,\n             nonself_args: vec![(Ref(Box::new(Path(arg)), Mutability::Mut), sym::state)],\n             ret_ty: Unit,\n-            attributes: attrs,\n+            attributes: thin_vec![cx.attr_word(sym::inline, span)],\n             fieldless_variants_strategy: FieldlessVariantsStrategy::Unify,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                 hash_substructure(a, b, c)"}]}