{"sha": "e5b340017e39dc90e3f9cf9966244faa585321b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YjM0MDAxN2UzOWRjOTBlM2Y5Y2Y5OTY2MjQ0ZmFhNTg1MzIxYjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-15T13:14:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-15T13:14:14Z"}, "message": "Auto merge of #1798 - RalfJung:nogit, r=oli-obk\n\nsupport building Miri outside a git repo\n\nFixes https://github.com/rust-lang/rust/issues/84182\n\n`@semarie` this should fix your problem... but I think any version of Miri actually shipped to users should have the proper git version information embedded, so I am not sure if this is the right fix. How do you do this for rustc proper? Even stable builds usually have a git version:\n```\n$ rustc +stable --version\nrustc 1.51.0 (2fd73fabe 2021-03-23)\n```", "tree": {"sha": "ac920845dc211cffdb6d2257100161b992d9512a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac920845dc211cffdb6d2257100161b992d9512a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5b340017e39dc90e3f9cf9966244faa585321b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b340017e39dc90e3f9cf9966244faa585321b5", "html_url": "https://github.com/rust-lang/rust/commit/e5b340017e39dc90e3f9cf9966244faa585321b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5b340017e39dc90e3f9cf9966244faa585321b5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcae3315a76876eb48e06519749cfe6e453a8e93", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcae3315a76876eb48e06519749cfe6e453a8e93", "html_url": "https://github.com/rust-lang/rust/commit/bcae3315a76876eb48e06519749cfe6e453a8e93"}, {"sha": "64f128c45687d18d64fc6856a30fde585b007e00", "url": "https://api.github.com/repos/rust-lang/rust/commits/64f128c45687d18d64fc6856a30fde585b007e00", "html_url": "https://github.com/rust-lang/rust/commit/64f128c45687d18d64fc6856a30fde585b007e00"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "84447b3a1a20485e0d767cfa632c89bb05728e8a", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5b340017e39dc90e3f9cf9966244faa585321b5/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b340017e39dc90e3f9cf9966244faa585321b5/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=e5b340017e39dc90e3f9cf9966244faa585321b5", "patch": "@@ -6,6 +6,7 @@ use std::io::{self, BufRead, BufReader, BufWriter, Read, Write};\n use std::ops::Not;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n+use std::fmt::{Write as _};\n \n use serde::{Deserialize, Serialize};\n \n@@ -90,12 +91,13 @@ fn show_help() {\n }\n \n fn show_version() {\n-    println!(\n-        \"miri {} ({} {})\",\n-        env!(\"CARGO_PKG_VERSION\"),\n-        env!(\"VERGEN_GIT_SHA_SHORT\"),\n-        env!(\"VERGEN_GIT_COMMIT_DATE\")\n-    );\n+    let mut version = format!(\"miri {}\", env!(\"CARGO_PKG_VERSION\"));\n+    // Only use `option_env` on vergen variables to ensure the build succeeds\n+    // when vergen failed to find the git info.\n+    if let Some(sha) = option_env!(\"VERGEN_GIT_SHA_SHORT\") {\n+        write!(&mut version, \" ({} {})\", sha, option_env!(\"VERGEN_GIT_COMMIT_DATE\").unwrap()).unwrap();\n+    }\n+    println!(\"{}\", version);\n }\n \n fn show_error(msg: String) -> ! {"}, {"sha": "ebd8e7003d5f72c70cc5a0992258f291c9cc4a99", "filename": "cargo-miri/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b340017e39dc90e3f9cf9966244faa585321b5/cargo-miri%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b340017e39dc90e3f9cf9966244faa585321b5/cargo-miri%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbuild.rs?ref=e5b340017e39dc90e3f9cf9966244faa585321b5", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let mut gen_config = vergen::Config::default();\n     *gen_config.git_mut().sha_kind_mut() = vergen::ShaKind::Short;\n     *gen_config.git_mut().commit_timestamp_kind_mut() = vergen::TimestampKind::DateOnly;\n-    vergen(gen_config).expect(\"Unable to generate vergen keys!\");\n+    vergen(gen_config).ok(); // Ignore failure (in case we are built outside a git repo)\n }"}]}