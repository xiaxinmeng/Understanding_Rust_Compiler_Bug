{"sha": "9ef5b884b248f5d4a9d0bf8594077e6698f1172c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZjViODg0YjI0OGY1ZDRhOWQwYmY4NTk0MDc3ZTY2OThmMTE3MmM=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-12T21:35:32Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-13T06:59:57Z"}, "message": "bless diff\n\nJust output the current bless'd MIR diff\nThe tests are still fairly broken rn", "tree": {"sha": "a143950fb9d0842eebf4131606a72687dededff6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a143950fb9d0842eebf4131606a72687dededff6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ef5b884b248f5d4a9d0bf8594077e6698f1172c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ef5b884b248f5d4a9d0bf8594077e6698f1172c", "html_url": "https://github.com/rust-lang/rust/commit/9ef5b884b248f5d4a9d0bf8594077e6698f1172c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ef5b884b248f5d4a9d0bf8594077e6698f1172c/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f51422b47473b49e5a7f69e64d59f6739d5e175a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f51422b47473b49e5a7f69e64d59f6739d5e175a", "html_url": "https://github.com/rust-lang/rust/commit/f51422b47473b49e5a7f69e64d59f6739d5e175a"}], "stats": {"total": 80, "additions": 75, "deletions": 5}, "files": [{"sha": "74da6d5e629b3c0971c83dcf78320fc70a8c9c60", "filename": "src/librustc_mir/transform/match_branches.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ef5b884b248f5d4a9d0bf8594077e6698f1172c/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ef5b884b248f5d4a9d0bf8594077e6698f1172c/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs?ref=9ef5b884b248f5d4a9d0bf8594077e6698f1172c", "patch": "@@ -52,8 +52,11 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                         if let Some(f_c) = f_c.literal.try_eval_bool(tcx, param_env) {\n                             // This should also be a bool because it's writing to the same place\n                             let s_c = s_c.literal.try_eval_bool(tcx, param_env).unwrap();\n-                            assert_ne!(f_c, s_c, \"Unexpected match would've compared eq earlier\");\n-                            continue;\n+                            if f_c != s_c {\n+                                // have to check this here because f_c & s_c might have\n+                                // different spans.\n+                                continue;\n+                            }\n                         }\n                         continue 'outer;\n                     }\n@@ -63,9 +66,9 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n             }\n             // Take owenership of items now that we know we can optimize.\n             let discr = discr.clone();\n+            let (from, first) = bbs.pick2_mut(bb_idx, first);\n \n-            bbs[bb_idx].terminator_mut().kind = TerminatorKind::Goto { target: first };\n-            for s in bbs[first].statements.iter_mut() {\n+            let new_stmts = first.statements.iter().cloned().map(|mut s| {\n                 if let StatementKind::Assign(box (_, ref mut rhs)) = s.kind {\n                     if let Rvalue::Use(Operand::Constant(c)) = rhs {\n                         let size = tcx.layout_of(param_env.and(switch_ty)).unwrap().size;\n@@ -81,7 +84,10 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                         }\n                     }\n                 }\n-            }\n+                s\n+            });\n+            from.statements.extend(new_stmts);\n+            from.terminator_mut().kind = first.terminator().kind.clone();\n         }\n     }\n }"}, {"sha": "b0a861f6c5ea21da491377176a4a1e264b7510c7", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.diff", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9ef5b884b248f5d4a9d0bf8594077e6698f1172c/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ef5b884b248f5d4a9d0bf8594077e6698f1172c/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff?ref=9ef5b884b248f5d4a9d0bf8594077e6698f1172c", "patch": "@@ -0,0 +1,64 @@\n+- // MIR for `foo` before MatchBranchSimplification\n++ // MIR for `foo` after MatchBranchSimplification\n+  \n+  fn foo(_1: std::option::Option<()>) -> () {\n+      debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:3:8: 3:11\n+      let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:3:25: 3:25\n+      let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _3: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:4:22: 4:26\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:4:22: 4:26\n+-         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:4:22: 4:26\n++         goto -> bb2;                     // scope 0 at $DIR/matches_reduce_branches.rs:4:22: 4:26\n+      }\n+  \n+      bb1: {\n+          _2 = const false;                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+          goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb2: {\n+-         _2 = const true;                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         _2 = Eq(move _3, const 0_isize); // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+-                                          // + ty: bool\n+-                                          // + val: Value(Scalar(0x01))\n++                                          // + ty: isize\n++                                          // + val: Value(Scalar(0x0000000000000000))\n+                                           // mir::Constant\n+-                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++                                          // + span: $DIR/matches_reduce_branches.rs:1:1: 1:1\n++                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000000)) }\n+          goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb3: {\n+          switchInt(_2) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/matches_reduce_branches.rs:4:5: 6:6\n+      }\n+  \n+      bb4: {\n+          _0 = const ();                   // scope 0 at $DIR/matches_reduce_branches.rs:4:5: 6:6\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_reduce_branches.rs:4:5: 6:6\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          goto -> bb5;                     // scope 0 at $DIR/matches_reduce_branches.rs:4:5: 6:6\n+      }\n+  \n+      bb5: {\n+          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:7:1: 7:2\n+          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:7:2: 7:2\n+      }\n+  }\n+  "}]}