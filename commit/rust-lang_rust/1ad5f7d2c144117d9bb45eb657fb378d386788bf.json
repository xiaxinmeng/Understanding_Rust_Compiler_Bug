{"sha": "1ad5f7d2c144117d9bb45eb657fb378d386788bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZDVmN2QyYzE0NDExN2Q5YmI0NWViNjU3ZmIzNzhkMzg2Nzg4YmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-21T13:15:58Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-21T13:18:12Z"}, "message": "make list based on boxes", "tree": {"sha": "14e347b54f708d048402d40bceec22b9e66028b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14e347b54f708d048402d40bceec22b9e66028b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ad5f7d2c144117d9bb45eb657fb378d386788bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad5f7d2c144117d9bb45eb657fb378d386788bf", "html_url": "https://github.com/rust-lang/rust/commit/1ad5f7d2c144117d9bb45eb657fb378d386788bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ad5f7d2c144117d9bb45eb657fb378d386788bf/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "239cf80c7395c7b51199835273ea86982a5175d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/239cf80c7395c7b51199835273ea86982a5175d1", "html_url": "https://github.com/rust-lang/rust/commit/239cf80c7395c7b51199835273ea86982a5175d1"}], "stats": {"total": 91, "additions": 39, "deletions": 52}, "files": [{"sha": "5e99f86297caa2c27a92b94e9f4e7aa1474471f5", "filename": "src/libstd/list.rs", "status": "modified", "additions": 39, "deletions": 52, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/1ad5f7d2c144117d9bb45eb657fb378d386788bf/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad5f7d2c144117d9bb45eb657fb378d386788bf/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=1ad5f7d2c144117d9bb45eb657fb378d386788bf", "patch": "@@ -10,8 +10,8 @@ enum list<T> {\n }\n \n #[doc = \"Create a list from a vector\"]\n-fn from_vec<T: copy>(v: [const T]) -> list<T> {\n-    *vec::foldr(v, @nil::<T>, { |h, t| @cons(h, t) })\n+fn from_vec<T: copy>(v: [const T]) -> @list<T> {\n+    @vec::foldr(v, @nil::<T>, { |h, t| @cons(h, t) })\n }\n \n #[doc = \"\n@@ -27,7 +27,7 @@ accumulated result.\n * z - The initial value\n * f - The function to apply\n \"]\n-fn foldl<T: copy, U>(z: T, ls: list<U>, f: fn(T, U) -> T) -> T {\n+fn foldl<T: copy, U>(z: T, ls: @list<U>, f: fn(T, U) -> T) -> T {\n     let mut accum: T = z;\n     iter(ls) {|elt| accum = f(accum, elt);}\n     accum\n@@ -40,105 +40,92 @@ Apply function `f` to each element of `v`, starting from the first.\n When function `f` returns true then an option containing the element\n is returned. If `f` matches no elements then none is returned.\n \"]\n-fn find<T: copy>(ls: list<T>, f: fn(T) -> bool) -> option<T> {\n+fn find<T: copy>(ls: @list<T>, f: fn(T) -> bool) -> option<T> {\n     let mut ls = ls;\n     loop {\n         ls = alt ls {\n           cons(hd, tl) {\n             if f(hd) { ret some(hd); }\n-            *tl\n+            tl\n           }\n           nil { ret none; }\n         }\n     };\n }\n \n #[doc = \"Returns true if a list contains an element with the given value\"]\n-fn has<T: copy>(ls: list<T>, elt: T) -> bool {\n+fn has<T: copy>(ls: @list<T>, elt: T) -> bool {\n     for each(ls) { |e|\n         if e == elt { ret true; }\n     }\n     ret false;\n }\n \n #[doc = \"Returns true if the list is empty\"]\n-pure fn is_empty<T: copy>(ls: list<T>) -> bool {\n-    alt ls {\n+pure fn is_empty<T: copy>(ls: @list<T>) -> bool {\n+    alt *ls {\n         nil { true }\n         _ { false }\n     }\n }\n \n #[doc = \"Returns true if the list is not empty\"]\n-pure fn is_not_empty<T: copy>(ls: list<T>) -> bool {\n+pure fn is_not_empty<T: copy>(ls: @list<T>) -> bool {\n     ret !is_empty(ls);\n }\n \n #[doc = \"Returns the length of a list\"]\n-fn len<T>(ls: list<T>) -> uint {\n+fn len<T>(ls: @list<T>) -> uint {\n     let mut count = 0u;\n     iter(ls) {|_e| count += 1u;}\n     count\n }\n \n #[doc = \"Returns all but the first element of a list\"]\n-pure fn tail<T: copy>(ls: list<T>) -> list<T> {\n-    alt ls {\n-        cons(_, tl) { ret *tl; }\n+pure fn tail<T: copy>(ls: @list<T>) -> list<T> {\n+    alt *ls {\n+        cons(_, tl) { ret tl; }\n         nil { fail \"list empty\" }\n     }\n }\n \n #[doc = \"Returns the first element of a list\"]\n-pure fn head<T: copy>(ls: list<T>) -> T {\n-    alt check ls { cons(hd, _) { hd } }\n+pure fn head<T: copy>(ls: @list<T>) -> T {\n+    alt check *ls { cons(hd, _) { hd } }\n }\n \n #[doc = \"Appends one list to another\"]\n-pure fn append<T: copy>(l: list<T>, m: list<T>) -> list<T> {\n-    alt l {\n+pure fn append<T: copy>(l: @list<T>, m: @list<T>) -> @list<T> {\n+    alt *l {\n       nil { ret m; }\n-      cons(x, xs) { let rest = append(*xs, m); ret cons(x, @rest); }\n+      cons(x, xs) { let rest = append(*xs, m); ret @cons(x, @rest); }\n     }\n }\n \n #[doc = \"Iterate over a list\"]\n-fn iter<T>(l: list<T>, f: fn(T)) {\n-    alt l {\n-      cons(hd, tl) {\n-        f(hd);\n-        let mut cur = tl;\n-        loop {\n-            alt *cur {\n-              cons(hd, tl) {\n-                f(hd);\n-                cur = tl;\n-              }\n-              nil { break; }\n-            }\n+fn iter<T>(l: @list<T>, f: fn(T)) {\n+    let mut cur = l;\n+    loop {\n+        cur = alt *cur {\n+          cons(hd, tl) {\n+            f(hd);\n+            tl\n+          }\n+          nil { break; }\n         }\n-      }\n-      nil {}\n     }\n }\n \n #[doc = \"Iterate over a list\"]\n fn each<T>(l: list<T>, f: fn(T) -> bool) {\n-    alt l {\n-      cons(hd, tl) {\n-        if !f(hd) { ret; }\n-        let mut cur = tl;\n-        loop {\n-            alt *cur {\n-              cons(hd, tl) {\n-                if !f(hd) { ret; }\n-                cur = tl;\n-              }\n-              nil { break; }\n-            }\n+    let mut cur = l;\n+    loop {\n+        cur = alt *cur {\n+          cons(hd, tl) {\n+            if !f(hd) { ret; }\n+          }\n+          nil { break; }\n         }\n-      }\n-      nil {}\n     }\n }\n \n@@ -147,7 +134,7 @@ mod tests {\n \n     #[test]\n     fn test_is_empty() {\n-        let empty : list::list<int> = from_vec([]);\n+        let empty : @list::list<int> = from_vec([]);\n         let full1 = from_vec([1]);\n         let full2 = from_vec(['r', 'u']);\n \n@@ -175,7 +162,7 @@ mod tests {\n \n     #[test]\n     fn test_from_vec_empty() {\n-        let empty : list::list<int> = from_vec([]);\n+        let empty : @list::list<int> = from_vec([]);\n         assert (empty == list::nil::<int>);\n     }\n \n@@ -196,7 +183,7 @@ mod tests {\n     fn test_foldl() {\n         fn add(&&a: uint, &&b: int) -> uint { ret a + (b as uint); }\n         let l = from_vec([0, 1, 2, 3, 4]);\n-        let empty = list::nil::<int>;\n+        let empty = @list::nil::<int>;\n         assert (list::foldl(0u, l, add) == 10u);\n         assert (list::foldl(0u, empty, add) == 0u);\n     }\n@@ -229,7 +216,7 @@ mod tests {\n     #[test]\n     fn test_has() {\n         let l = from_vec([5, 8, 6]);\n-        let empty = list::nil::<int>;\n+        let empty = @list::nil::<int>;\n         assert (list::has(l, 5));\n         assert (!list::has(l, 7));\n         assert (list::has(l, 8));\n@@ -239,7 +226,7 @@ mod tests {\n     #[test]\n     fn test_len() {\n         let l = from_vec([0, 1, 2]);\n-        let empty = list::nil::<int>;\n+        let empty = @list::nil::<int>;\n         assert (list::len(l) == 3u);\n         assert (list::len(empty) == 0u);\n     }"}]}