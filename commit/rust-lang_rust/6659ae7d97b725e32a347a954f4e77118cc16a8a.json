{"sha": "6659ae7d97b725e32a347a954f4e77118cc16a8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NTlhZTdkOTdiNzI1ZTMyYTM0N2E5NTRmNGU3NzExOGNjMTZhOGE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T20:28:47Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:35Z"}, "message": "librustc: De-`@mut` `Rib::self_binding`", "tree": {"sha": "f98616acfe86d479c06fb35e2c760b2a84457905", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f98616acfe86d479c06fb35e2c760b2a84457905"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6659ae7d97b725e32a347a954f4e77118cc16a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6659ae7d97b725e32a347a954f4e77118cc16a8a", "html_url": "https://github.com/rust-lang/rust/commit/6659ae7d97b725e32a347a954f4e77118cc16a8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6659ae7d97b725e32a347a954f4e77118cc16a8a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e23aeb0e3056a4da5c8aac86c10ae0353a8c2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e23aeb0e3056a4da5c8aac86c10ae0353a8c2d", "html_url": "https://github.com/rust-lang/rust/commit/d1e23aeb0e3056a4da5c8aac86c10ae0353a8c2d"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "e9201301987e2cfae18f10b03c9b79bff8ace8b5", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6659ae7d97b725e32a347a954f4e77118cc16a8a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6659ae7d97b725e32a347a954f4e77118cc16a8a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=6659ae7d97b725e32a347a954f4e77118cc16a8a", "patch": "@@ -285,15 +285,15 @@ enum DuplicateCheckingMode {\n /// One local scope.\n struct Rib {\n     bindings: RefCell<HashMap<Name, DefLike>>,\n-    self_binding: @mut Option<DefLike>,\n+    self_binding: RefCell<Option<DefLike>>,\n     kind: RibKind,\n }\n \n impl Rib {\n     fn new(kind: RibKind) -> Rib {\n         Rib {\n             bindings: RefCell::new(HashMap::new()),\n-            self_binding: @mut None,\n+            self_binding: RefCell::new(None),\n             kind: kind\n         }\n     }\n@@ -3883,7 +3883,7 @@ impl Resolver {\n                         _ => false\n                     };\n                     let def_like = DlDef(DefSelf(self_node_id, mutable));\n-                    *function_value_rib.self_binding = Some(def_like);\n+                    function_value_rib.self_binding.set(Some(def_like));\n                 }\n             }\n \n@@ -4947,7 +4947,7 @@ impl Resolver {\n         let mut i = self.value_ribs.len();\n         while i != 0 {\n             i -= 1;\n-            match *self.value_ribs[i].self_binding {\n+            match self.value_ribs[i].self_binding.get() {\n                 Some(def_like) => {\n                     match self.upvarify(self.value_ribs,\n                                         i,"}]}