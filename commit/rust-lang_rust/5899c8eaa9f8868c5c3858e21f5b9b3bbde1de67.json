{"sha": "5899c8eaa9f8868c5c3858e21f5b9b3bbde1de67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4OTljOGVhYTlmODg2OGM1YzM4NThlMjFmNWI5YjNiYmRlMWRlNjc=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin@m-inverse.com", "date": "2020-05-04T10:34:32Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin@m-inverse.com", "date": "2020-05-04T10:34:32Z"}, "message": "Fixes names for collect_item funtions", "tree": {"sha": "d1b21267707207cd542b44da1931eb1f4420519f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1b21267707207cd542b44da1931eb1f4420519f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5899c8eaa9f8868c5c3858e21f5b9b3bbde1de67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5899c8eaa9f8868c5c3858e21f5b9b3bbde1de67", "html_url": "https://github.com/rust-lang/rust/commit/5899c8eaa9f8868c5c3858e21f5b9b3bbde1de67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5899c8eaa9f8868c5c3858e21f5b9b3bbde1de67/comments", "author": {"login": "edwin0minv", "id": 24450993, "node_id": "MDQ6VXNlcjI0NDUwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/24450993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0minv", "html_url": "https://github.com/edwin0minv", "followers_url": "https://api.github.com/users/edwin0minv/followers", "following_url": "https://api.github.com/users/edwin0minv/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0minv/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0minv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0minv/subscriptions", "organizations_url": "https://api.github.com/users/edwin0minv/orgs", "repos_url": "https://api.github.com/users/edwin0minv/repos", "events_url": "https://api.github.com/users/edwin0minv/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0minv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0minv", "id": 24450993, "node_id": "MDQ6VXNlcjI0NDUwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/24450993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0minv", "html_url": "https://github.com/edwin0minv", "followers_url": "https://api.github.com/users/edwin0minv/followers", "following_url": "https://api.github.com/users/edwin0minv/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0minv/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0minv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0minv/subscriptions", "organizations_url": "https://api.github.com/users/edwin0minv/orgs", "repos_url": "https://api.github.com/users/edwin0minv/repos", "events_url": "https://api.github.com/users/edwin0minv/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0minv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73ed2f2e9063fbf16f92d9d2edc87bed1259b883", "url": "https://api.github.com/repos/rust-lang/rust/commits/73ed2f2e9063fbf16f92d9d2edc87bed1259b883", "html_url": "https://github.com/rust-lang/rust/commit/73ed2f2e9063fbf16f92d9d2edc87bed1259b883"}], "stats": {"total": 39, "additions": 14, "deletions": 25}, "files": [{"sha": "d4cba4d05eec503525d7930030471ff255c7ad9b", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5899c8eaa9f8868c5c3858e21f5b9b3bbde1de67/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5899c8eaa9f8868c5c3858e21f5b9b3bbde1de67/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=5899c8eaa9f8868c5c3858e21f5b9b3bbde1de67", "patch": "@@ -161,14 +161,14 @@ impl TraitData {\n \n         if let Some(item_list) = src.value.item_list() {\n             let mut expander = Expander::new(db, tr_loc.ast_id.file_id, module_id);\n-            items.extend(collect_impl_items(\n+            items.extend(collect_items(\n                 db,\n                 &mut expander,\n                 item_list.impl_items(),\n                 src.file_id,\n                 container,\n             ));\n-            items.extend(collect_impl_items_in_macros(\n+            items.extend(collect_items_in_macros(\n                 db,\n                 &mut expander,\n                 &src.with_value(item_list),\n@@ -219,25 +219,14 @@ impl ImplData {\n         if let Some(item_list) = src.value.item_list() {\n             let mut expander = Expander::new(db, impl_loc.ast_id.file_id, module_id);\n             items.extend(\n-                collect_impl_items(\n-                    db,\n-                    &mut expander,\n-                    item_list.impl_items(),\n-                    src.file_id,\n-                    container,\n-                )\n-                .into_iter()\n-                .map(|(_, item)| item),\n+                collect_items(db, &mut expander, item_list.impl_items(), src.file_id, container)\n+                    .into_iter()\n+                    .map(|(_, item)| item),\n             );\n             items.extend(\n-                collect_impl_items_in_macros(\n-                    db,\n-                    &mut expander,\n-                    &src.with_value(item_list),\n-                    container,\n-                )\n-                .into_iter()\n-                .map(|(_, item)| item),\n+                collect_items_in_macros(db, &mut expander, &src.with_value(item_list), container)\n+                    .into_iter()\n+                    .map(|(_, item)| item),\n             );\n         }\n \n@@ -281,7 +270,7 @@ impl ConstData {\n     }\n }\n \n-fn collect_impl_items_in_macros(\n+fn collect_items_in_macros(\n     db: &dyn DefDatabase,\n     expander: &mut Expander,\n     impl_def: &InFile<ast::ItemList>,\n@@ -293,13 +282,13 @@ fn collect_impl_items_in_macros(\n     let limit = 100;\n \n     for m in impl_def.value.syntax().children().filter_map(ast::MacroCall::cast) {\n-        res.extend(collect_impl_items_in_macro(db, expander, m, container, limit))\n+        res.extend(collect_items_in_macro(db, expander, m, container, limit))\n     }\n \n     res\n }\n \n-fn collect_impl_items_in_macro(\n+fn collect_items_in_macro(\n     db: &dyn DefDatabase,\n     expander: &mut Expander,\n     m: ast::MacroCall,\n@@ -312,7 +301,7 @@ fn collect_impl_items_in_macro(\n \n     if let Some((mark, items)) = expander.enter_expand(db, None, m) {\n         let items: InFile<ast::MacroItems> = expander.to_source(items);\n-        let mut res = collect_impl_items(\n+        let mut res = collect_items(\n             db,\n             expander,\n             items.value.items().filter_map(|it| ImplItem::cast(it.syntax().clone())),\n@@ -324,7 +313,7 @@ fn collect_impl_items_in_macro(\n         // Note that ast::ModuleItem do not include ast::MacroCall\n         // We cannot use ModuleItemOwner::items here\n         for it in items.value.syntax().children().filter_map(ast::MacroCall::cast) {\n-            res.extend(collect_impl_items_in_macro(db, expander, it, container, limit - 1))\n+            res.extend(collect_items_in_macro(db, expander, it, container, limit - 1))\n         }\n         expander.exit(db, mark);\n         res\n@@ -333,7 +322,7 @@ fn collect_impl_items_in_macro(\n     }\n }\n \n-fn collect_impl_items(\n+fn collect_items(\n     db: &dyn DefDatabase,\n     expander: &mut Expander,\n     impl_items: impl Iterator<Item = ImplItem>,"}]}