{"sha": "e8694589143830f1eff367016a3bb72c124345a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4Njk0NTg5MTQzODMwZjFlZmYzNjcwMTZhM2JiNzJjMTI0MzQ1YTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-25T05:16:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-25T07:24:54Z"}, "message": "rustdoc: Extract a general apply-function-to-strings pass from trim_pass", "tree": {"sha": "fcf2a4a17483d56026027d7ace6ef5ad53f8b66e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcf2a4a17483d56026027d7ace6ef5ad53f8b66e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8694589143830f1eff367016a3bb72c124345a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8694589143830f1eff367016a3bb72c124345a5", "html_url": "https://github.com/rust-lang/rust/commit/e8694589143830f1eff367016a3bb72c124345a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8694589143830f1eff367016a3bb72c124345a5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7d7f4e4b7ff73905a51c936fda9ec553a628dd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d7f4e4b7ff73905a51c936fda9ec553a628dd9", "html_url": "https://github.com/rust-lang/rust/commit/e7d7f4e4b7ff73905a51c936fda9ec553a628dd9"}], "stats": {"total": 143, "additions": 78, "deletions": 65}, "files": [{"sha": "6fdf00f7176fe9f59bff8c8f299df160c3c060e9", "filename": "src/rustdoc/desc_pass.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e8694589143830f1eff367016a3bb72c124345a5/src%2Frustdoc%2Fdesc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8694589143830f1eff367016a3bb72c124345a5/src%2Frustdoc%2Fdesc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_pass.rs?ref=e8694589143830f1eff367016a3bb72c124345a5", "patch": "@@ -0,0 +1,70 @@\n+#[doc = \"Generic pass for performing an operation on all descriptions\"];\n+\n+export mk_pass;\n+\n+fn mk_pass(op: fn~(str) -> str) -> pass {\n+    fn~(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc {\n+        run(srv, doc, op)\n+    }\n+}\n+\n+type op = fn~(str) -> str;\n+\n+fn run(\n+    _srv: astsrv::srv,\n+    doc: doc::cratedoc,\n+    op: op\n+) -> doc::cratedoc {\n+    let fold = fold::fold({\n+        fold_mod: fold_mod,\n+        fold_const: fold_const,\n+        fold_fn: fold_fn\n+        with *fold::default_seq_fold(op)\n+    });\n+    fold.fold_crate(fold, doc)\n+}\n+\n+fn maybe_apply_op(op: op, s: option<str>) -> option<str> {\n+    option::map(s) {|s| op(s) }\n+}\n+\n+fn fold_mod(fold: fold::fold<op>, doc: doc::moddoc) -> doc::moddoc {\n+    let doc = fold::default_seq_fold_mod(fold, doc);\n+\n+    ~{\n+        brief: maybe_apply_op(fold.ctxt, doc.brief),\n+        desc: maybe_apply_op(fold.ctxt, doc.desc)\n+        with *doc\n+    }\n+}\n+\n+fn fold_const(fold: fold::fold<op>, doc: doc::constdoc) -> doc::constdoc {\n+    let doc = fold::default_seq_fold_const(fold, doc);\n+\n+    ~{\n+        brief: maybe_apply_op(fold.ctxt, doc.brief),\n+        desc: maybe_apply_op(fold.ctxt, doc.desc)\n+        with *doc\n+    }\n+}\n+\n+fn fold_fn(fold: fold::fold<op>, doc: doc::fndoc) -> doc::fndoc {\n+    let doc = fold::default_seq_fold_fn(fold, doc);\n+\n+    ~{\n+        brief: maybe_apply_op(fold.ctxt, doc.brief),\n+        desc: maybe_apply_op(fold.ctxt, doc.desc),\n+        args: vec::map(doc.args) {|doc|\n+            ~{\n+                desc: maybe_apply_op(fold.ctxt, doc.desc)\n+                with *doc\n+            }\n+        },\n+        return: {\n+            desc: maybe_apply_op(fold.ctxt, doc.return.desc)\n+            with doc.return\n+        },\n+        failure: maybe_apply_op(fold.ctxt, doc.failure)\n+        with *doc\n+    }\n+}"}, {"sha": "15083e569b916588b3a55c631e88ab3a950c0ad1", "filename": "src/rustdoc/rustdoc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8694589143830f1eff367016a3bb72c124345a5/src%2Frustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e8694589143830f1eff367016a3bb72c124345a5/src%2Frustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rc?ref=e8694589143830f1eff367016a3bb72c124345a5", "patch": "@@ -24,6 +24,7 @@ mod tystr_pass;\n mod prune_undoc_pass;\n mod prune_unexported_pass;\n mod desc_to_brief_pass;\n+mod desc_pass;\n mod trim_pass;\n mod astsrv;\n mod demo;"}, {"sha": "871605e555473657d50e248e6a9b50911cc78e5a", "filename": "src/rustdoc/trim_pass.rs", "status": "modified", "additions": 7, "deletions": 65, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e8694589143830f1eff367016a3bb72c124345a5/src%2Frustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8694589143830f1eff367016a3bb72c124345a5/src%2Frustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftrim_pass.rs?ref=e8694589143830f1eff367016a3bb72c124345a5", "patch": "@@ -10,34 +10,7 @@ is interpreted as the brief description.\n export mk_pass;\n \n fn mk_pass() -> pass {\n-    run\n-}\n-\n-fn run(\n-    _srv: astsrv::srv,\n-    doc: doc::cratedoc\n-) -> doc::cratedoc {\n-    let fold = fold::fold({\n-        fold_mod: fold_mod,\n-        fold_const: fold_const,\n-        fold_fn: fold_fn\n-        with *fold::default_seq_fold(())\n-    });\n-    fold.fold_crate(fold, doc)\n-}\n-\n-fn trimopt(s: option<str>) -> option<str> {\n-    option::map(s, {|s| str::trim(s) })\n-}\n-\n-fn fold_mod(fold: fold::fold<()>, doc: doc::moddoc) -> doc::moddoc {\n-    let doc = fold::default_seq_fold_mod(fold, doc);\n-\n-    ~{\n-        brief: trimopt(doc.brief),\n-        desc: trimopt(doc.desc)\n-        with *doc\n-    }\n+    desc_pass::mk_pass(str::trim)\n }\n \n #[test]\n@@ -48,21 +21,11 @@ fn should_trim_mod() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n-    let doc = run(srv, doc);\n+    let doc = mk_pass()(srv, doc);\n     assert doc.topmod.mods[0].brief == some(\"brief\");\n     assert doc.topmod.mods[0].desc == some(\"desc\");\n }\n \n-fn fold_const(fold: fold::fold<()>, doc: doc::constdoc) -> doc::constdoc {\n-    let doc = fold::default_seq_fold_const(fold, doc);\n-\n-    ~{\n-        brief: trimopt(doc.brief),\n-        desc: trimopt(doc.desc)\n-        with *doc\n-    }\n-}\n-\n #[test]\n fn should_trim_const() {\n     let source = \"#[doc(brief = \\\"\\nbrief\\n\\\", \\\n@@ -71,32 +34,11 @@ fn should_trim_const() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n-    let doc = run(srv, doc);\n+    let doc = mk_pass()(srv, doc);\n     assert doc.topmod.consts[0].brief == some(\"brief\");\n     assert doc.topmod.consts[0].desc == some(\"desc\");\n }\n \n-fn fold_fn(fold: fold::fold<()>, doc: doc::fndoc) -> doc::fndoc {\n-    let doc = fold::default_seq_fold_fn(fold, doc);\n-\n-    ~{\n-        brief: trimopt(doc.brief),\n-        desc: trimopt(doc.desc),\n-        args: vec::map(doc.args) {|doc|\n-            ~{\n-                desc: trimopt(doc.desc)\n-                with *doc\n-            }\n-        },\n-        return: {\n-            desc: trimopt(doc.return.desc)\n-            with doc.return\n-        },\n-        failure: trimopt(doc.failure)\n-        with *doc\n-    }\n-}\n-\n #[test]\n fn should_trim_fn() {\n     let source = \"#[doc(brief = \\\"\\nbrief\\n\\\", \\\n@@ -105,7 +47,7 @@ fn should_trim_fn() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n-    let doc = run(srv, doc);\n+    let doc = mk_pass()(srv, doc);\n     assert doc.topmod.fns[0].brief == some(\"brief\");\n     assert doc.topmod.fns[0].desc == some(\"desc\");\n }\n@@ -116,7 +58,7 @@ fn should_trim_args() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n-    let doc = run(srv, doc);\n+    let doc = mk_pass()(srv, doc);\n     assert doc.topmod.fns[0].args[0].desc == some(\"a\");\n }\n \n@@ -126,7 +68,7 @@ fn should_trim_ret() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n-    let doc = run(srv, doc);\n+    let doc = mk_pass()(srv, doc);\n     assert doc.topmod.fns[0].return.desc == some(\"a\");\n }\n \n@@ -136,6 +78,6 @@ fn should_trim_failure_conditions() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n-    let doc = run(srv, doc);\n+    let doc = mk_pass()(srv, doc);\n     assert doc.topmod.fns[0].failure == some(\"a\");\n }\n\\ No newline at end of file"}]}