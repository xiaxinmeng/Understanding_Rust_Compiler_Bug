{"sha": "65d4dbeb1239896758f4e4ee999879b9c2dc6370", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZDRkYmViMTIzOTg5Njc1OGY0ZTRlZTk5OTg3OWI5YzJkYzYzNzA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-31T01:31:47Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-02T16:56:35Z"}, "message": "rustc: Implement dereference via unary '*' for structs. r=nmatsakis", "tree": {"sha": "f93bf70cbd149e6b6ace7731a4df2c3502f2c4a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f93bf70cbd149e6b6ace7731a4df2c3502f2c4a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65d4dbeb1239896758f4e4ee999879b9c2dc6370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65d4dbeb1239896758f4e4ee999879b9c2dc6370", "html_url": "https://github.com/rust-lang/rust/commit/65d4dbeb1239896758f4e4ee999879b9c2dc6370", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65d4dbeb1239896758f4e4ee999879b9c2dc6370/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4165edff227545cb2a7267051347bdae1868895d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4165edff227545cb2a7267051347bdae1868895d", "html_url": "https://github.com/rust-lang/rust/commit/4165edff227545cb2a7267051347bdae1868895d"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "700ac402a8ad421d7a42593b693921c852ee8634", "filename": "src/rustc/middle/trans/datum.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/65d4dbeb1239896758f4e4ee999879b9c2dc6370/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d4dbeb1239896758f4e4ee999879b9c2dc6370/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=65d4dbeb1239896758f4e4ee999879b9c2dc6370", "patch": "@@ -651,6 +651,41 @@ impl Datum {\n                     }\n                 };\n             }\n+            ty::ty_class(did, ref substs) => {\n+                // Check whether this struct is a newtype struct.\n+                let fields = ty::class_items_as_fields(ccx.tcx, did, substs);\n+                if fields.len() != 1 || fields[0].ident !=\n+                    syntax::parse::token::special_idents::unnamed_field {\n+                    return None;\n+                }\n+\n+                let ty = fields[0].mt.ty;\n+                return match self.mode {\n+                    ByRef => {\n+                        // Recast lv.val as a pointer to the newtype rather\n+                        // than a pointer to the struct type.\n+                        // XXX: This isn't correct for structs with\n+                        // destructors.\n+                        Some(Datum {\n+                            val: GEPi(bcx, self.val, [0, 0, 0]),\n+                            ty: ty,\n+                            mode: ByRef,\n+                            source: FromLvalue\n+                        })\n+                    }\n+                    ByValue => {\n+                        // Actually, this case cannot happen right now,\n+                        // because structs are never immediate. But in\n+                        // principle, newtype'd immediate values should be\n+                        // immediate, and in that case the * would be a no-op\n+                        // except for changing the type, so I am putting this\n+                        // code in place here to do the right thing if this\n+                        // change ever goes through.\n+                        assert ty::type_is_immediate(ty);\n+                        Some(Datum {ty: ty, ..self})\n+                    }\n+                }\n+            }\n             _ => { // not derefable.\n                 return None;\n             }"}, {"sha": "4391388331c634297d7deeda5918431e48cb24e2", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65d4dbeb1239896758f4e4ee999879b9c2dc6370/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d4dbeb1239896758f4e4ee999879b9c2dc6370/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=65d4dbeb1239896758f4e4ee999879b9c2dc6370", "patch": "@@ -2597,6 +2597,16 @@ fn deref_sty(cx: ctxt, sty: &sty, expl: bool) -> Option<mt> {\n         }\n       }\n \n+      ty_class(did, ref substs) => {\n+        let fields = class_items_as_fields(cx, did, substs);\n+        if fields.len() == 1 && fields[0].ident ==\n+                syntax::parse::token::special_idents::unnamed_field {\n+            Some({ty: fields[0].mt.ty, mutbl: ast::m_imm})\n+        } else {\n+            None\n+        }\n+      }\n+\n       _ => None\n     }\n }"}, {"sha": "8a74a8ed48b0ad63f0d7fa1722a1ab20f911c2e9", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65d4dbeb1239896758f4e4ee999879b9c2dc6370/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d4dbeb1239896758f4e4ee999879b9c2dc6370/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=65d4dbeb1239896758f4e4ee999879b9c2dc6370", "patch": "@@ -1768,6 +1768,12 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n                          with a single variant which has a \\\n                          single argument\");\n                   }\n+                  ty::ty_class(*) => {\n+                    tcx.sess.span_err(\n+                        expr.span,\n+                        ~\"can only dereference structs with one anonymous \\\n+                          field\");\n+                  }\n                   _ => {\n                     tcx.sess.span_err(\n                         expr.span,"}, {"sha": "74726f3c867fd3e0db641e61798869236ccd47aa", "filename": "src/test/run-pass/struct-deref.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65d4dbeb1239896758f4e4ee999879b9c2dc6370/src%2Ftest%2Frun-pass%2Fstruct-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d4dbeb1239896758f4e4ee999879b9c2dc6370/src%2Ftest%2Frun-pass%2Fstruct-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-deref.rs?ref=65d4dbeb1239896758f4e4ee999879b9c2dc6370", "patch": "@@ -0,0 +1,7 @@\n+struct Foo(int);\n+\n+fn main() {\n+    let x: Foo = Foo(2);\n+    assert *x == 2;\n+}\n+"}]}