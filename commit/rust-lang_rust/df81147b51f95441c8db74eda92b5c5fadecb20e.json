{"sha": "df81147b51f95441c8db74eda92b5c5fadecb20e", "node_id": "C_kwDOAAsO6NoAKGRmODExNDdiNTFmOTU0NDFjOGRiNzRlZGE5MmI1YzVmYWRlY2IyMGU", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-08T19:12:15Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-23T14:47:00Z"}, "message": "Ensure suggestion correctness", "tree": {"sha": "bb190f2ba3b7cad564feab622d02cfca1471646c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb190f2ba3b7cad564feab622d02cfca1471646c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df81147b51f95441c8db74eda92b5c5fadecb20e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df81147b51f95441c8db74eda92b5c5fadecb20e", "html_url": "https://github.com/rust-lang/rust/commit/df81147b51f95441c8db74eda92b5c5fadecb20e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df81147b51f95441c8db74eda92b5c5fadecb20e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcf0ed90187ae60739c76ef3e72e8232bf14746b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf0ed90187ae60739c76ef3e72e8232bf14746b", "html_url": "https://github.com/rust-lang/rust/commit/fcf0ed90187ae60739c76ef3e72e8232bf14746b"}], "stats": {"total": 131, "additions": 130, "deletions": 1}, "files": [{"sha": "97490194e2558cc8763a7c76473112a42ce685f3", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df81147b51f95441c8db74eda92b5c5fadecb20e/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df81147b51f95441c8db74eda92b5c5fadecb20e/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=df81147b51f95441c8db74eda92b5c5fadecb20e", "patch": "@@ -713,6 +713,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if Some(e.did()) != self.tcx.get_diagnostic_item(sym::Result) {\n             return false;\n         }\n+        let map = self.tcx.hir();\n+        if let Some(hir::Node::Expr(expr)) = map.find_parent(expr.hir_id)\n+            && let hir::ExprKind::Ret(_) = expr.kind\n+        {\n+            // `return foo;`\n+        } else if map.get_return_block(expr.hir_id).is_some() {\n+            // Function's tail expression.\n+        } else {\n+            return false;\n+        }\n         let e = substs_e.type_at(1);\n         let f = substs_f.type_at(1);\n         if self"}, {"sha": "23bafa6c5c94c70a93afabd380f71ab5c3f74427", "filename": "tests/ui/type/type-check/coerce-result-return-value-2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/df81147b51f95441c8db74eda92b5c5fadecb20e/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df81147b51f95441c8db74eda92b5c5fadecb20e/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value-2.rs?ref=df81147b51f95441c8db74eda92b5c5fadecb20e", "patch": "@@ -0,0 +1,24 @@\n+struct A;\n+struct B;\n+impl From<A> for B {\n+    fn from(_: A) -> Self { B }\n+}\n+fn foo4(x: Result<(), A>) -> Result<(), B> {\n+    match true {\n+        true => x, //~ ERROR mismatched types\n+        false => x,\n+    }\n+}\n+fn foo5(x: Result<(), A>) -> Result<(), B> {\n+    match true {\n+        true => return x, //~ ERROR mismatched types\n+        false => return x,\n+    }\n+}\n+fn main() {\n+    let _ = foo4(Ok(()));\n+    let _ = foo5(Ok(()));\n+    let _: Result<(), B> = { //~ ERROR mismatched types\n+        Err(A);\n+    };\n+}"}, {"sha": "64a8c779fce76df3d9266dfb7dd77133bb2ae471", "filename": "tests/ui/type/type-check/coerce-result-return-value-2.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/df81147b51f95441c8db74eda92b5c5fadecb20e/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df81147b51f95441c8db74eda92b5c5fadecb20e/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value-2.stderr?ref=df81147b51f95441c8db74eda92b5c5fadecb20e", "patch": "@@ -0,0 +1,47 @@\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-result-return-value-2.rs:8:17\n+   |\n+LL | fn foo4(x: Result<(), A>) -> Result<(), B> {\n+   |                              ------------- expected `Result<(), B>` because of return type\n+LL |     match true {\n+LL |         true => x,\n+   |                 ^ expected struct `B`, found struct `A`\n+   |\n+   = note: expected enum `Result<_, B>`\n+              found enum `Result<_, A>`\n+help: you can rely on the implicit conversion that `?` does to transform the error type\n+   |\n+LL |         true => Ok(x?),\n+   |                 +++ ++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-result-return-value-2.rs:14:24\n+   |\n+LL | fn foo5(x: Result<(), A>) -> Result<(), B> {\n+   |                              ------------- expected `Result<(), B>` because of return type\n+LL |     match true {\n+LL |         true => return x,\n+   |                        ^ expected struct `B`, found struct `A`\n+   |\n+   = note: expected enum `Result<_, B>`\n+              found enum `Result<_, A>`\n+help: you can rely on the implicit conversion that `?` does to transform the error type\n+   |\n+LL |         true => return Ok(x?),\n+   |                        +++ ++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-result-return-value-2.rs:21:28\n+   |\n+LL |       let _: Result<(), B> = {\n+   |  ____________________________^\n+LL | |         Err(A);\n+LL | |     };\n+   | |_____^ expected enum `Result`, found `()`\n+   |\n+   = note:   expected enum `Result<(), B>`\n+           found unit type `()`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8a05407070dada4298d08914dc33301334f89d97", "filename": "tests/ui/type/type-check/coerce-result-return-value.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df81147b51f95441c8db74eda92b5c5fadecb20e/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/df81147b51f95441c8db74eda92b5c5fadecb20e/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.fixed?ref=df81147b51f95441c8db74eda92b5c5fadecb20e", "patch": "@@ -10,7 +10,15 @@ fn foo1(x: Result<(), A>) -> Result<(), B> {\n fn foo2(x: Result<(), A>) -> Result<(), B> {\n     return Ok(x?); //~ ERROR mismatched types\n }\n+fn foo3(x: Result<(), A>) -> Result<(), B> {\n+    if true {\n+        Ok(x?) //~ ERROR mismatched types\n+    } else {\n+        Ok(x?) //~ ERROR mismatched types\n+    }\n+}\n fn main() {\n     let _ = foo1(Ok(()));\n     let _ = foo2(Ok(()));\n+    let _ = foo3(Ok(()));\n }"}, {"sha": "442203addb787241788f92c9ee179506ae498367", "filename": "tests/ui/type/type-check/coerce-result-return-value.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df81147b51f95441c8db74eda92b5c5fadecb20e/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df81147b51f95441c8db74eda92b5c5fadecb20e/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.rs?ref=df81147b51f95441c8db74eda92b5c5fadecb20e", "patch": "@@ -10,7 +10,15 @@ fn foo1(x: Result<(), A>) -> Result<(), B> {\n fn foo2(x: Result<(), A>) -> Result<(), B> {\n     return x; //~ ERROR mismatched types\n }\n+fn foo3(x: Result<(), A>) -> Result<(), B> {\n+    if true {\n+        x //~ ERROR mismatched types\n+    } else {\n+        x //~ ERROR mismatched types\n+    }\n+}\n fn main() {\n     let _ = foo1(Ok(()));\n     let _ = foo2(Ok(()));\n+    let _ = foo3(Ok(()));\n }"}, {"sha": "18993b3cef1b997e53d32223399f5996be616670", "filename": "tests/ui/type/type-check/coerce-result-return-value.stderr", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/df81147b51f95441c8db74eda92b5c5fadecb20e/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df81147b51f95441c8db74eda92b5c5fadecb20e/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.stderr?ref=df81147b51f95441c8db74eda92b5c5fadecb20e", "patch": "@@ -28,6 +28,38 @@ help: you can rely on the implicit conversion that `?` does to transform the err\n LL |     return Ok(x?);\n    |            +++ ++\n \n-error: aborting due to 2 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-result-return-value.rs:15:9\n+   |\n+LL | fn foo3(x: Result<(), A>) -> Result<(), B> {\n+   |                              ------------- expected `Result<(), B>` because of return type\n+LL |     if true {\n+LL |         x\n+   |         ^ expected struct `B`, found struct `A`\n+   |\n+   = note: expected enum `Result<_, B>`\n+              found enum `Result<_, A>`\n+help: you can rely on the implicit conversion that `?` does to transform the error type\n+   |\n+LL |         Ok(x?)\n+   |         +++ ++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-result-return-value.rs:17:9\n+   |\n+LL | fn foo3(x: Result<(), A>) -> Result<(), B> {\n+   |                              ------------- expected `Result<(), B>` because of return type\n+...\n+LL |         x\n+   |         ^ expected struct `B`, found struct `A`\n+   |\n+   = note: expected enum `Result<_, B>`\n+              found enum `Result<_, A>`\n+help: you can rely on the implicit conversion that `?` does to transform the error type\n+   |\n+LL |         Ok(x?)\n+   |         +++ ++\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}