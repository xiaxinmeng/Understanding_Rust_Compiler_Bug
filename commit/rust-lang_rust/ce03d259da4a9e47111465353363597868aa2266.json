{"sha": "ce03d259da4a9e47111465353363597868aa2266", "node_id": "C_kwDOAAsO6NoAKGNlMDNkMjU5ZGE0YTllNDcxMTE0NjUzNTMzNjM1OTc4NjhhYTIyNjY", "commit": {"author": {"name": "Ben Reeves", "email": "benwolverine2019@gmail.com", "date": "2022-09-14T03:18:14Z"}, "committer": {"name": "Ben Reeves", "email": "benwolverine2019@gmail.com", "date": "2022-11-10T18:37:06Z"}, "message": "Disallow specializing on const impls with non-const impls.", "tree": {"sha": "bcb3774d4997b5b66d8b41129cfb414ba2862005", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcb3774d4997b5b66d8b41129cfb414ba2862005"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce03d259da4a9e47111465353363597868aa2266", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce03d259da4a9e47111465353363597868aa2266", "html_url": "https://github.com/rust-lang/rust/commit/ce03d259da4a9e47111465353363597868aa2266", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce03d259da4a9e47111465353363597868aa2266/comments", "author": {"login": "BGR360", "id": 13339928, "node_id": "MDQ6VXNlcjEzMzM5OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/13339928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BGR360", "html_url": "https://github.com/BGR360", "followers_url": "https://api.github.com/users/BGR360/followers", "following_url": "https://api.github.com/users/BGR360/following{/other_user}", "gists_url": "https://api.github.com/users/BGR360/gists{/gist_id}", "starred_url": "https://api.github.com/users/BGR360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BGR360/subscriptions", "organizations_url": "https://api.github.com/users/BGR360/orgs", "repos_url": "https://api.github.com/users/BGR360/repos", "events_url": "https://api.github.com/users/BGR360/events{/privacy}", "received_events_url": "https://api.github.com/users/BGR360/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BGR360", "id": 13339928, "node_id": "MDQ6VXNlcjEzMzM5OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/13339928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BGR360", "html_url": "https://github.com/BGR360", "followers_url": "https://api.github.com/users/BGR360/followers", "following_url": "https://api.github.com/users/BGR360/following{/other_user}", "gists_url": "https://api.github.com/users/BGR360/gists{/gist_id}", "starred_url": "https://api.github.com/users/BGR360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BGR360/subscriptions", "organizations_url": "https://api.github.com/users/BGR360/orgs", "repos_url": "https://api.github.com/users/BGR360/repos", "events_url": "https://api.github.com/users/BGR360/events{/privacy}", "received_events_url": "https://api.github.com/users/BGR360/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c25d30f6fe9996f815a96f4b328e62c452cc3e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c25d30f6fe9996f815a96f4b328e62c452cc3e3", "html_url": "https://github.com/rust-lang/rust/commit/5c25d30f6fe9996f815a96f4b328e62c452cc3e3"}], "stats": {"total": 131, "additions": 51, "deletions": 80}, "files": [{"sha": "9c7150b79240a83a17393d900ccdd3a20a32fbdf", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ce03d259da4a9e47111465353363597868aa2266/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce03d259da4a9e47111465353363597868aa2266/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=ce03d259da4a9e47111465353363597868aa2266", "patch": "@@ -69,6 +69,7 @@ use crate::constrained_generic_params as cgp;\n use crate::errors::SubstsOnOverriddenImpl;\n \n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -117,12 +118,33 @@ fn check_always_applicable(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId, impl2_node\n         };\n \n         let span = tcx.def_span(impl1_def_id);\n+        check_constness(tcx, impl1_def_id, impl2_node, span);\n         check_static_lifetimes(tcx, &parent_substs, span);\n         check_duplicate_params(tcx, impl1_substs, &parent_substs, span);\n         check_predicates(tcx, impl1_def_id, impl1_substs, impl2_node, impl2_substs, span);\n     }\n }\n \n+/// Check that the specializing impl `impl1` is at least as const as the base\n+/// impl `impl2`\n+fn check_constness(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId, impl2_node: Node, span: Span) {\n+    if impl2_node.is_from_trait() {\n+        // This isn't a specialization\n+        return;\n+    }\n+\n+    let impl1_constness = tcx.constness(impl1_def_id.to_def_id());\n+    let impl2_constness = tcx.constness(impl2_node.def_id());\n+\n+    if let hir::Constness::Const = impl2_constness {\n+        if let hir::Constness::NotConst = impl1_constness {\n+            tcx.sess\n+                .struct_span_err(span, \"cannot specialize on const impl with non-const impl\")\n+                .emit();\n+        }\n+    }\n+}\n+\n /// Given a specializing impl `impl1`, and the base impl `impl2`, returns two\n /// substitutions `(S1, S2)` that equate their trait references. The returned\n /// types are expressed in terms of the generics of `impl1`.\n@@ -277,7 +299,7 @@ fn check_static_lifetimes<'tcx>(\n \n /// Check whether predicates on the specializing impl (`impl1`) are allowed.\n ///\n-/// Each predicate `P` must be:\n+/// Each predicate `P` must be one of:\n ///\n /// * Global (not reference any parameters).\n /// * A `T: Tr` predicate where `Tr` is an always-applicable trait.\n@@ -375,16 +397,19 @@ fn check_predicates<'tcx>(\n     }\n }\n \n-/// Checks whether two predicates are the same for the purposes of specialization.\n+/// Checks if some predicate on the specializing impl (`predicate1`) is the same\n+/// as some predicate on the base impl (`predicate2`).\n ///\n /// This is slightly more complicated than simple syntactic equivalence, since\n /// we want to equate `T: Tr` with `T: ~const Tr` so this can work:\n ///\n+/// ```ignore (illustrative)\n /// #[rustc_specialization_trait]\n /// trait Specialize { }\n ///\n-/// impl<T: ~const Bound> const Tr for T { }\n-/// impl<T: Bound + Specialize> Tr for T { }\n+/// impl<T: Bound> Tr for T { }\n+/// impl<T: ~const Bound + Specialize> const Tr for T { }\n+/// ```\n fn trait_predicates_eq<'tcx>(\n     predicate1: ty::Predicate<'tcx>,\n     predicate2: ty::Predicate<'tcx>,\n@@ -400,6 +425,8 @@ fn trait_predicates_eq<'tcx>(\n         _ => kind,\n     };\n \n+    // We rely on `check_constness` above to ensure that pred1 is const if pred2\n+    // is const.\n     let pred1_kind_not_const = predicate1.kind().map_bound(predicate_kind_without_constness);\n     let pred2_kind_not_const = predicate2.kind().map_bound(predicate_kind_without_constness);\n "}, {"sha": "a25329ba388d21e7c8a75bd592debfb8dde02d9b", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/const-default-non-const-specialized.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ce03d259da4a9e47111465353363597868aa2266/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-non-const-specialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce03d259da4a9e47111465353363597868aa2266/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-non-const-specialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-non-const-specialized.rs?ref=ce03d259da4a9e47111465353363597868aa2266", "patch": "@@ -1,5 +1,5 @@\n-// Tests that a const default trait impl can be specialized by a non-const trait\n-// impl, but that the specializing impl cannot be used in a const context.\n+// Tests that a const default trait impl cannot be specialized by a non-const\n+// trait impl.\n \n #![feature(const_trait_impl)]\n #![feature(min_specialization)]\n@@ -8,12 +8,6 @@ trait Value {\n     fn value() -> u32;\n }\n \n-const fn get_value<T: ~const Value>() -> u32 {\n-    T::value()\n-    //~^ ERROR any use of this value will cause an error [const_err]\n-    //~| WARNING this was previously accepted\n-}\n-\n impl<T> const Value for T {\n     default fn value() -> u32 {\n         0\n@@ -22,16 +16,11 @@ impl<T> const Value for T {\n \n struct FortyTwo;\n \n-impl Value for FortyTwo {\n+impl Value for FortyTwo { //~ ERROR cannot specialize on const impl with non-const impl\n     fn value() -> u32 {\n         println!(\"You can't do that (constly)\");\n         42\n     }\n }\n \n-const ZERO: u32 = get_value::<()>();\n-\n-const FORTY_TWO: u32 =\n-    get_value::<FortyTwo>(); // This is the line that causes the error, but it gets reported above\n-\n fn main() {}"}, {"sha": "b0b76e7eca8acb433a7c1dc91d00a4bc491f34b9", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/const-default-non-const-specialized.stderr", "status": "modified", "additions": 4, "deletions": 33, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ce03d259da4a9e47111465353363597868aa2266/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-non-const-specialized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce03d259da4a9e47111465353363597868aa2266/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-non-const-specialized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-non-const-specialized.stderr?ref=ce03d259da4a9e47111465353363597868aa2266", "patch": "@@ -1,37 +1,8 @@\n-error: any use of this value will cause an error\n-  --> $DIR/const-default-non-const-specialized.rs:12:5\n+error: cannot specialize on const impl with non-const impl\n+  --> $DIR/const-default-non-const-specialized.rs:19:1\n    |\n-LL |     T::value()\n-   |     ^^^^^^^^^^\n-   |     |\n-   |     calling non-const function `<FortyTwo as Value>::value`\n-   |     inside `get_value::<FortyTwo>` at $DIR/const-default-non-const-specialized.rs:12:5\n-   |     inside `FORTY_TWO` at $DIR/const-default-non-const-specialized.rs:35:5\n-...\n-LL | const FORTY_TWO: u32 =\n-   | --------------------\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL | impl Value for FortyTwo {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: any use of this value will cause an error\n-  --> $DIR/const-default-non-const-specialized.rs:12:5\n-   |\n-LL |     T::value()\n-   |     ^^^^^^^^^^\n-   |     |\n-   |     calling non-const function `<FortyTwo as Value>::value`\n-   |     inside `get_value::<FortyTwo>` at $DIR/const-default-non-const-specialized.rs:12:5\n-   |     inside `FORTY_TWO` at $DIR/const-default-non-const-specialized.rs:35:5\n-...\n-LL | const FORTY_TWO: u32 =\n-   | --------------------\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-"}, {"sha": "da6df064d4fd15ec519c6885da091041d63e6322", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/issue-95187-same-trait-bound-different-constness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce03d259da4a9e47111465353363597868aa2266/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce03d259da4a9e47111465353363597868aa2266/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs?ref=ce03d259da4a9e47111465353363597868aa2266", "patch": "@@ -1,4 +1,4 @@\n-// Tests that `T: ~const Foo` and `T: Foo` are treated as equivalent for the\n+// Tests that `T: Foo` and `T: ~const Foo` are treated as equivalent for the\n // purposes of min_specialization.\n \n // check-pass\n@@ -14,14 +14,14 @@ trait Foo {}\n \n trait Bar {}\n \n-impl<T> const Bar for T\n+impl<T> Bar for T\n where\n-    T: ~const Foo,\n+    T: Foo,\n {}\n \n-impl<T> Bar for T\n+impl<T> const Bar for T\n where\n-    T: Foo,\n+    T: ~const Foo,\n     T: Specialize,\n {}\n "}, {"sha": "84614f5459d63bfa7c97e5c7166cd03efb74a9cd", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/non-const-default-const-specialized.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce03d259da4a9e47111465353363597868aa2266/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fnon-const-default-const-specialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce03d259da4a9e47111465353363597868aa2266/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fnon-const-default-const-specialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fnon-const-default-const-specialized.rs?ref=ce03d259da4a9e47111465353363597868aa2266", "patch": "@@ -1,6 +1,8 @@\n // Tests that a non-const default impl can be specialized by a const trait impl,\n // but that the default impl cannot be used in a const context.\n \n+// run-pass\n+\n #![feature(const_trait_impl)]\n #![feature(min_specialization)]\n \n@@ -27,8 +29,10 @@ impl const Value for FortyTwo {\n     }\n }\n \n-const ZERO: u32 = get_value::<()>(); //~ ERROR the trait bound `(): ~const Value` is not satisfied\n-\n-const FORTY_TWO: u32 = get_value::<FortyTwo>();\n+fn main() {\n+    let zero = get_value::<()>();\n+    assert_eq!(zero, 0);\n \n-fn main() {}\n+    const FORTY_TWO: u32 = get_value::<FortyTwo>();\n+    assert_eq!(FORTY_TWO, 42);\n+}"}, {"sha": "1065009c8910ea7a07c2e70fd7a98fc096d3a9da", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/non-const-default-const-specialized.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fnon-const-default-const-specialized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fnon-const-default-const-specialized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fnon-const-default-const-specialized.stderr?ref=5c25d30f6fe9996f815a96f4b328e62c452cc3e3", "patch": "@@ -1,20 +0,0 @@\n-error[E0277]: the trait bound `(): ~const Value` is not satisfied\n-  --> $DIR/non-const-default-const-specialized.rs:30:31\n-   |\n-LL | const ZERO: u32 = get_value::<()>();\n-   |                               ^^ the trait `~const Value` is not implemented for `()`\n-   |\n-note: the trait `Value` is implemented for `()`, but that implementation is not `const`\n-  --> $DIR/non-const-default-const-specialized.rs:30:31\n-   |\n-LL | const ZERO: u32 = get_value::<()>();\n-   |                               ^^\n-note: required by a bound in `get_value`\n-  --> $DIR/non-const-default-const-specialized.rs:11:23\n-   |\n-LL | const fn get_value<T: ~const Value>() -> u32 {\n-   |                       ^^^^^^^^^^^^ required by this bound in `get_value`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}]}