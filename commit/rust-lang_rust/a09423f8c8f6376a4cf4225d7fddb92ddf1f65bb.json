{"sha": "a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "node_id": "C_kwDOAAsO6NoAKGEwOTQyM2Y4YzhmNjM3NmE0Y2Y0MjI1ZDdmZGRiOTJkZGYxZjY1YmI", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-07-05T16:56:16Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-11-18T06:16:20Z"}, "message": "Rm diagnostic item, use lang item", "tree": {"sha": "b530cbfb3eb8d528254f8dcebf0d205cba0a25c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b530cbfb3eb8d528254f8dcebf0d205cba0a25c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "html_url": "https://github.com/rust-lang/rust/commit/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11d632f7b10be252d7445b78ce771cd99f046393", "url": "https://api.github.com/repos/rust-lang/rust/commits/11d632f7b10be252d7445b78ce771cd99f046393", "html_url": "https://github.com/rust-lang/rust/commit/11d632f7b10be252d7445b78ce771cd99f046393"}], "stats": {"total": 186, "additions": 95, "deletions": 91}, "files": [{"sha": "d0fab6949604090dfb02129c971eccb4246dd7be", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -73,7 +73,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n                 if format_args.format_string.parts == [kw::Empty];\n                 if arg.format.is_default();\n                 if match cx.typeck_results().expr_ty(value).peel_refs().kind() {\n-                    ty::Adt(adt, _) => cx.tcx.is_diagnostic_item(sym::String, adt.did()),\n+                    ty::Adt(adt, _) => Some(adt.did()) == cx.tcx.lang_items().string(),\n                     ty::Str => true,\n                     _ => false,\n                 };"}, {"sha": "68c5c3673fe1544fb3e3c0b80df66870afa9df52", "filename": "clippy_lints/src/format_push_string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fformat_push_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fformat_push_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_push_string.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::ty::is_type_lang_item;\n use clippy_utils::{match_def_path, paths, peel_hir_expr_refs};\n-use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_hir::{BinOpKind, Expr, ExprKind, LangItem};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -41,7 +41,7 @@ declare_clippy_lint! {\n declare_lint_pass!(FormatPushString => [FORMAT_PUSH_STRING]);\n \n fn is_string(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n-    is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(e).peel_refs(), sym::String)\n+    is_type_lang_item(cx, cx.typeck_results().expr_ty(e).peel_refs(), LangItem::String)\n }\n fn is_format(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n     if let Some(macro_def_id) = e.span.ctxt().outer_expn_data().macro_def_id {"}, {"sha": "74a60b6a0d24b4ba8ba1a70f604d9bce2d5791be", "filename": "clippy_lints/src/from_str_radix_10.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,10 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::is_integer_literal;\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{def, Expr, ExprKind, PrimTy, QPath, TyKind};\n+use rustc_hir::{def, Expr, ExprKind, LangItem, PrimTy, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::Ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -98,5 +98,5 @@ impl<'tcx> LateLintPass<'tcx> for FromStrRadix10 {\n \n /// Checks if a Ty is `String` or `&str`\n fn is_ty_stringish(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n-    is_type_diagnostic_item(cx, ty, sym::String) || is_type_diagnostic_item(cx, ty, sym::str)\n+    is_type_lang_item(cx, ty, LangItem::String) || is_type_diagnostic_item(cx, ty, sym::str)\n }"}, {"sha": "aaecc4fa8f25698e68b705906deba938d01ed6f8", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n+use clippy_utils::ty::{implements_trait, is_type_lang_item};\n use clippy_utils::{return_ty, trait_ref_of_method};\n use if_chain::if_chain;\n-use rustc_hir::{GenericParamKind, ImplItem, ImplItemKind};\n+use rustc_hir::{GenericParamKind, ImplItem, ImplItemKind, LangItem};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -105,7 +105,7 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n             if impl_item.generics.params.iter().all(|p| matches!(p.kind, GenericParamKind::Lifetime { .. }));\n \n             // Check if return type is String\n-            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::String);\n+            if is_type_lang_item(cx, return_ty(cx, impl_item.hir_id()), LangItem::String);\n \n             // Filters instances of to_string which are required by a trait\n             if trait_ref_of_method(cx, impl_item.owner_id.def_id).is_none();"}, {"sha": "d6438ca7fec2aca306b8be7c776eef7fef382b33", "filename": "clippy_lints/src/manual_retain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_retain.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet;\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n use clippy_utils::{get_parent_expr, match_def_path, paths, SpanlessEq};\n use clippy_utils::{meets_msrv, msrvs};\n use rustc_errors::Applicability;\n@@ -140,7 +140,7 @@ fn check_to_owned(\n         && let Some(chars_expr_def_id) = cx.typeck_results().type_dependent_def_id(chars_expr.hir_id)\n         && match_def_path(cx, chars_expr_def_id, &paths::STR_CHARS)\n         && let ty = cx.typeck_results().expr_ty(str_expr).peel_refs()\n-        && is_type_diagnostic_item(cx, ty, sym::String)\n+        && is_type_lang_item(cx, ty, hir::LangItem::String)\n         && SpanlessEq::new(cx).eq_expr(left_expr, str_expr) {\n         suggest(cx, parent_expr, left_expr, filter_expr);\n     }"}, {"sha": "c20d7959fc4a258576c48ec3792fc2f90338c4cb", "filename": "clippy_lints/src/manual_string_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmanual_string_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmanual_string_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_string_new.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -44,7 +44,7 @@ impl LateLintPass<'_> for ManualStringNew {\n         let ty = cx.typeck_results().expr_ty(expr);\n         match ty.kind() {\n             ty::Adt(adt_def, _) if adt_def.is_struct() => {\n-                if !cx.tcx.is_diagnostic_item(sym::String, adt_def.did()) {\n+                if cx.tcx.lang_items().string() != Some(adt_def.did()) {\n                     return;\n                 }\n             },"}, {"sha": "675a85ae5553a7833079969be6d354f0291bcdae", "filename": "clippy_lints/src/matches/match_str_case_mismatch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmatches%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmatches%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_str_case_mismatch.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,13 +1,13 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::ty::is_type_lang_item;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{Arm, Expr, ExprKind, PatKind};\n+use rustc_hir::{Arm, Expr, ExprKind, LangItem, PatKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{sym, Span};\n+use rustc_span::Span;\n \n use super::MATCH_STR_CASE_MISMATCH;\n \n@@ -59,7 +59,7 @@ impl<'a, 'tcx> MatchExprVisitor<'a, 'tcx> {\n         if let Some(case_method) = get_case_method(segment_ident) {\n             let ty = self.cx.typeck_results().expr_ty(receiver).peel_refs();\n \n-            if is_type_diagnostic_item(self.cx, ty, sym::String) || ty.kind() == &ty::Str {\n+            if is_type_lang_item(self.cx, ty, LangItem::String) || ty.kind() == &ty::Str {\n                 self.case_method = Some(case_method);\n                 return true;\n             }"}, {"sha": "89aaad359d4acf09662cd41e666620ec407ac5c6", "filename": "clippy_lints/src/methods/bytes_count_to_len.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Fbytes_count_to_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Fbytes_count_to_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbytes_count_to_len.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,11 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::ty::is_type_lang_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_span::sym;\n \n use super::BYTES_COUNT_TO_LEN;\n \n@@ -20,7 +19,7 @@ pub(super) fn check<'tcx>(\n         if let Some(impl_id) = cx.tcx.impl_of_method(bytes_id);\n         if cx.tcx.type_of(impl_id).is_str();\n         let ty = cx.typeck_results().expr_ty(bytes_recv).peel_refs();\n-        if ty.is_str() || is_type_diagnostic_item(cx, ty, sym::String);\n+        if ty.is_str() || is_type_lang_item(cx, ty, hir::LangItem::String);\n         then {\n             let mut applicability = Applicability::MachineApplicable;\n             span_lint_and_sugg("}, {"sha": "d512cc4eeae125acebd79058624d98ade6ab2d49", "filename": "clippy_lints/src/methods/bytes_nth.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,18 +1,17 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::ty::is_type_lang_item;\n use rustc_errors::Applicability;\n-use rustc_hir::Expr;\n+use rustc_hir::{Expr, LangItem};\n use rustc_lint::LateContext;\n-use rustc_span::sym;\n \n use super::BYTES_NTH;\n \n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, recv: &'tcx Expr<'tcx>, n_arg: &'tcx Expr<'tcx>) {\n     let ty = cx.typeck_results().expr_ty(recv).peel_refs();\n     let caller_type = if ty.is_str() {\n         \"str\"\n-    } else if is_type_diagnostic_item(cx, ty, sym::String) {\n+    } else if is_type_lang_item(cx, ty, LangItem::String) {\n         \"String\"\n     } else {\n         return;"}, {"sha": "d226c0bba6593f4fccfc89237d866d8d8d1784e2", "filename": "clippy_lints/src/methods/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,10 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::ty::is_type_lang_item;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n-use rustc_hir::{Expr, ExprKind};\n+use rustc_hir::{Expr, ExprKind, LangItem};\n use rustc_lint::LateContext;\n-use rustc_span::{source_map::Spanned, symbol::sym, Span};\n+use rustc_span::{source_map::Spanned, Span};\n \n use super::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS;\n \n@@ -26,7 +26,7 @@ pub(super) fn check<'tcx>(\n         if ext_str.chars().skip(1).all(|c| c.is_uppercase() || c.is_ascii_digit())\n             || ext_str.chars().skip(1).all(|c| c.is_lowercase() || c.is_ascii_digit());\n         let recv_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n-        if recv_ty.is_str() || is_type_diagnostic_item(cx, recv_ty, sym::String);\n+        if recv_ty.is_str() || is_type_lang_item(cx, recv_ty, LangItem::String);\n         then {\n             span_lint_and_help(\n                 cx,"}, {"sha": "a9189b31c57108990d96fbe740632ede6cb3c6f6", "filename": "clippy_lints/src/methods/expect_fun_call.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::macros::{root_macro_call_first_node, FormatArgsExpn};\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -33,7 +33,7 @@ pub(super) fn check<'tcx>(\n                     if (method_name.ident.name == sym::as_str || method_name.ident.name == sym::as_ref) && {\n                         let arg_type = cx.typeck_results().expr_ty(receiver);\n                         let base_type = arg_type.peel_refs();\n-                        *base_type.kind() == ty::Str || is_type_diagnostic_item(cx, base_type, sym::String)\n+                        *base_type.kind() == ty::Str || is_type_lang_item(cx, base_type, hir::LangItem::String)\n                     } {\n                         receiver\n                     } else {\n@@ -50,7 +50,7 @@ pub(super) fn check<'tcx>(\n     // converted to string.\n     fn requires_to_string(cx: &LateContext<'_>, arg: &hir::Expr<'_>) -> bool {\n         let arg_ty = cx.typeck_results().expr_ty(arg);\n-        if is_type_diagnostic_item(cx, arg_ty, sym::String) {\n+        if is_type_lang_item(cx, arg_ty, hir::LangItem::String) {\n             return false;\n         }\n         if let ty::Ref(_, ty, ..) = arg_ty.kind() {"}, {"sha": "4f4f543e8a912abd079ddaf9b74724100376ce00", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,13 +1,13 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::{is_type_diagnostic_item, walk_ptrs_ty_depth};\n+use clippy_utils::ty::{is_type_lang_item, walk_ptrs_ty_depth};\n use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{Symbol, sym};\n \n use super::INEFFICIENT_TO_STRING;\n \n@@ -60,7 +60,7 @@ fn specializes_tostring(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n         return true;\n     }\n \n-    if is_type_diagnostic_item(cx, ty, sym::String) {\n+    if is_type_lang_item(cx, ty, hir::LangItem::String) {\n         return true;\n     }\n "}, {"sha": "13c47c03a80dd583d6a006315dc2ce3fdd3f30f5", "filename": "clippy_lints/src/methods/manual_str_repeat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -36,14 +36,14 @@ fn parse_repeat_arg(cx: &LateContext<'_>, e: &Expr<'_>) -> Option<RepeatKind> {\n         }\n     } else {\n         let ty = cx.typeck_results().expr_ty(e);\n-        if is_type_diagnostic_item(cx, ty, sym::String)\n+        if is_type_lang_item(cx, ty, LangItem::String)\n             || (is_type_lang_item(cx, ty, LangItem::OwnedBox) && get_ty_param(ty).map_or(false, Ty::is_str))\n             || (is_type_diagnostic_item(cx, ty, sym::Cow) && get_ty_param(ty).map_or(false, Ty::is_str))\n         {\n             Some(RepeatKind::String)\n         } else {\n             let ty = ty.peel_refs();\n-            (ty.is_str() || is_type_diagnostic_item(cx, ty, sym::String)).then_some(RepeatKind::String)\n+            (ty.is_str() || is_type_lang_item(cx, ty, LangItem::String)).then_some(RepeatKind::String)\n         }\n     }\n }\n@@ -58,7 +58,7 @@ pub(super) fn check(\n     if_chain! {\n         if let ExprKind::Call(repeat_fn, [repeat_arg]) = take_self_arg.kind;\n         if is_path_diagnostic_item(cx, repeat_fn, sym::iter_repeat);\n-        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(collect_expr), sym::String);\n+        if is_type_lang_item(cx, cx.typeck_results().expr_ty(collect_expr), LangItem::String);\n         if let Some(collect_id) = cx.typeck_results().type_dependent_def_id(collect_expr.hir_id);\n         if let Some(take_id) = cx.typeck_results().type_dependent_def_id(take_expr.hir_id);\n         if let Some(iter_trait_id) = cx.tcx.get_diagnostic_item(sym::Iterator);"}, {"sha": "01655e860c43fa6c6c3d21f572ffc186d8dd899f", "filename": "clippy_lints/src/methods/no_effect_replace.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Fno_effect_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Fno_effect_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fno_effect_replace.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,11 +1,10 @@\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::ty::is_type_lang_item;\n use clippy_utils::SpanlessEq;\n use if_chain::if_chain;\n use rustc_ast::LitKind;\n-use rustc_hir::ExprKind;\n+use rustc_hir::{ExprKind, LangItem};\n use rustc_lint::LateContext;\n-use rustc_span::sym;\n \n use super::NO_EFFECT_REPLACE;\n \n@@ -16,7 +15,7 @@ pub(super) fn check<'tcx>(\n     arg2: &'tcx rustc_hir::Expr<'_>,\n ) {\n     let ty = cx.typeck_results().expr_ty(expr).peel_refs();\n-    if !(ty.is_str() || is_type_diagnostic_item(cx, ty, sym::String)) {\n+    if !(ty.is_str() || is_type_lang_item(cx, ty, LangItem::String)) {\n         return;\n     }\n "}, {"sha": "a345ec813ff502f8231fc6cd777b35f042273401", "filename": "clippy_lints/src/methods/repeat_once.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Frepeat_once.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,11 +1,10 @@\n use clippy_utils::consts::{constant_context, Constant};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet;\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::ty::is_type_lang_item;\n use rustc_errors::Applicability;\n-use rustc_hir::Expr;\n+use rustc_hir::{Expr, LangItem};\n use rustc_lint::LateContext;\n-use rustc_span::sym;\n \n use super::REPEAT_ONCE;\n \n@@ -37,7 +36,7 @@ pub(super) fn check<'tcx>(\n                 format!(\"{}.to_vec()\", snippet(cx, recv.span, r#\"\"...\"\"#)),\n                 Applicability::MachineApplicable,\n             );\n-        } else if is_type_diagnostic_item(cx, ty, sym::String) {\n+        } else if is_type_lang_item(cx, ty, LangItem::String) {\n             span_lint_and_sugg(\n                 cx,\n                 REPEAT_ONCE,"}, {"sha": "1c031ad6acbafbda64f697eb47c202da7072a3a2", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::sugg::deref_closure_args;\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::ty::is_type_lang_item;\n use clippy_utils::{is_trait_method, strip_pat_refs};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -105,7 +105,7 @@ pub(super) fn check<'tcx>(\n     else if search_method == \"find\" {\n         let is_string_or_str_slice = |e| {\n             let self_ty = cx.typeck_results().expr_ty(e).peel_refs();\n-            if is_type_diagnostic_item(cx, self_ty, sym::String) {\n+            if is_type_lang_item(cx, self_ty, hir::LangItem::String) {\n                 true\n             } else {\n                 *self_ty.kind() == ty::Str"}, {"sha": "6f4cec546e969693a0ec9b5260dd98f3ea58f519", "filename": "clippy_lints/src/methods/string_extend_chars.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,26 +1,25 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::method_chain_args;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::ty::is_type_lang_item;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n-use rustc_span::symbol::sym;\n \n use super::STRING_EXTEND_CHARS;\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, arg: &hir::Expr<'_>) {\n     let obj_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n-    if !is_type_diagnostic_item(cx, obj_ty, sym::String) {\n+    if !is_type_lang_item(cx, obj_ty, hir::LangItem::String) {\n         return;\n     }\n     if let Some(arglists) = method_chain_args(arg, &[\"chars\"]) {\n         let target = &arglists[0].0;\n         let self_ty = cx.typeck_results().expr_ty(target).peel_refs();\n         let ref_str = if *self_ty.kind() == ty::Str {\n             \"\"\n-        } else if is_type_diagnostic_item(cx, self_ty, sym::String) {\n+        } else if is_type_lang_item(cx, self_ty, hir::LangItem::String) {\n             \"&\"\n         } else {\n             return;"}, {"sha": "c9b87bc6bf29d8e9df51a8b64291438300d772e1", "filename": "clippy_lints/src/methods/unnecessary_join.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_join.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,10 +1,10 @@\n-use clippy_utils::{diagnostics::span_lint_and_sugg, ty::is_type_diagnostic_item};\n+use clippy_utils::{diagnostics::span_lint_and_sugg, ty::is_type_lang_item};\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind};\n+use rustc_hir::{Expr, ExprKind, LangItem};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{Ref, Slice};\n-use rustc_span::{sym, Span};\n+use rustc_span::Span;\n \n use super::UNNECESSARY_JOIN;\n \n@@ -21,7 +21,7 @@ pub(super) fn check<'tcx>(\n         // the turbofish for collect is ::<Vec<String>>\n         if let Ref(_, ref_type, _) = collect_output_adjusted_type.kind();\n         if let Slice(slice) = ref_type.kind();\n-        if is_type_diagnostic_item(cx, *slice, sym::String);\n+        if is_type_lang_item(cx, *slice, LangItem::String);\n         // the argument for join is \"\"\n         if let ExprKind::Lit(spanned) = &join_arg.kind;\n         if let LitKind::Str(symbol, _) = spanned.node;"}, {"sha": "79aa15b06ef4d4abf97c94ebeef4b35e9dc15b4f", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n use clippy_utils::ptr::get_spans;\n use clippy_utils::source::{snippet, snippet_opt};\n-use clippy_utils::ty::{implements_trait, is_copy, is_type_diagnostic_item};\n+use clippy_utils::ty::{implements_trait, is_copy, is_type_diagnostic_item, is_type_lang_item};\n use clippy_utils::{get_trait_def_id, is_self, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n@@ -11,7 +11,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n     BindingAnnotation, Body, FnDecl, GenericArg, HirId, Impl, ItemKind, Mutability, Node, PatKind, QPath, TyKind,\n };\n-use rustc_hir::{HirIdMap, HirIdSet};\n+use rustc_hir::{HirIdMap, HirIdSet, LangItem};\n use rustc_hir_typeck::expr_use_visitor as euv;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -249,7 +249,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                             }\n                         }\n \n-                        if is_type_diagnostic_item(cx, ty, sym::String) {\n+                        if is_type_lang_item(cx, ty, LangItem::String) {\n                             if let Some(clone_spans) =\n                                 get_spans(cx, Some(body.id()), idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n                                 diag.span_suggestion("}, {"sha": "612ee8a55a66a792c9652b46c97dd85205c802da", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -450,7 +450,7 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                                 substs.type_at(0),\n                             ),\n                         ),\n-                        Some(sym::String) => (\n+                        _ if Some(adt.did()) == cx.tcx.lang_items().string() => (\n                             [(\"clone\", \".to_owned()\"), (\"as_str\", \"\")].as_slice(),\n                             DerefTy::Str,\n                         ),"}, {"sha": "c1677fb3da1c4850215dfd6a88e1ee485d4c54ed", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,12 +1,12 @@\n use clippy_utils::diagnostics::{span_lint_hir, span_lint_hir_and_then};\n use clippy_utils::mir::{visit_local_usage, LocalUsage, PossibleBorrowerMap};\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::ty::{has_drop, is_copy, is_type_diagnostic_item, walk_ptrs_ty_depth};\n+use clippy_utils::ty::{has_drop, is_copy, is_type_diagnostic_item, is_type_lang_item, walk_ptrs_ty_depth};\n use clippy_utils::{fn_has_unsatisfiable_preds, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{def_id, Body, FnDecl, HirId};\n+use rustc_hir::{def_id, Body, FnDecl, HirId, LangItem};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty};\n@@ -102,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n             let from_borrow = match_def_path(cx, fn_def_id, &paths::CLONE_TRAIT_METHOD)\n                 || match_def_path(cx, fn_def_id, &paths::TO_OWNED_METHOD)\n                 || (match_def_path(cx, fn_def_id, &paths::TO_STRING_METHOD)\n-                    && is_type_diagnostic_item(cx, arg_ty, sym::String));\n+                    && is_type_lang_item(cx, arg_ty, LangItem::String));\n \n             let from_deref = !from_borrow\n                 && (match_def_path(cx, fn_def_id, &paths::PATH_TO_PATH_BUF)"}, {"sha": "f4705481d4e69b3131ad73ce0439ba6903092dca", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sugg};\n use clippy_utils::source::{snippet, snippet_with_applicability};\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::ty::is_type_lang_item;\n use clippy_utils::{get_parent_expr, is_lint_allowed, match_function_call, method_calls, paths};\n use clippy_utils::{peel_blocks, SpanlessEq};\n use if_chain::if_chain;\n@@ -190,7 +190,7 @@ impl<'tcx> LateLintPass<'tcx> for StringAdd {\n             },\n             ExprKind::Index(target, _idx) => {\n                 let e_ty = cx.typeck_results().expr_ty(target).peel_refs();\n-                if matches!(e_ty.kind(), ty::Str) || is_type_diagnostic_item(cx, e_ty, sym::String) {\n+                if matches!(e_ty.kind(), ty::Str) || is_type_lang_item(cx, e_ty, LangItem::String) {\n                     span_lint(\n                         cx,\n                         STRING_SLICE,\n@@ -205,7 +205,7 @@ impl<'tcx> LateLintPass<'tcx> for StringAdd {\n }\n \n fn is_string(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n-    is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(e).peel_refs(), sym::String)\n+    is_type_lang_item(cx, cx.typeck_results().expr_ty(e).peel_refs(), LangItem::String)\n }\n \n fn is_add(cx: &LateContext<'_>, src: &Expr<'_>, target: &Expr<'_>) -> bool {\n@@ -446,7 +446,7 @@ impl<'tcx> LateLintPass<'tcx> for StringToString {\n             if let ExprKind::MethodCall(path, self_arg, ..) = &expr.kind;\n             if path.ident.name == sym::to_string;\n             let ty = cx.typeck_results().expr_ty(self_arg);\n-            if is_type_diagnostic_item(cx, ty, sym::String);\n+            if is_type_lang_item(cx, ty, LangItem::String);\n             then {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "802415e163df541c83b28a9dbcb2b7469be5854e", "filename": "clippy_lints/src/types/box_collection.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -37,18 +37,19 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n fn get_std_collection(cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<Symbol> {\n     let param = qpath_generic_tys(qpath).next()?;\n     let id = path_def_id(cx, param)?;\n-    cx.tcx.get_diagnostic_name(id).filter(|&name| {\n-        matches!(\n-            name,\n-            sym::HashMap\n-                | sym::String\n-                | sym::Vec\n-                | sym::HashSet\n-                | sym::VecDeque\n-                | sym::LinkedList\n-                | sym::BTreeMap\n-                | sym::BTreeSet\n-                | sym::BinaryHeap\n-        )\n-    })\n+    cx.tcx\n+        .get_diagnostic_name(id)\n+        .filter(|&name| matches!(name, sym::HashMap | sym::Vec | sym::HashSet\n+            | sym::VecDeque\n+            | sym::LinkedList\n+            | sym::BTreeMap\n+            | sym::BTreeSet\n+            | sym::BinaryHeap))\n+        .or_else(|| {\n+            cx.tcx\n+                .lang_items()\n+                .string()\n+                .filter(|did| id == *did)\n+                .map(|_| sym::String)\n+        })\n }"}, {"sha": "855137b14d84bdbee4802b3659225c936aff981f", "filename": "clippy_lints/src/types/rc_buffer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -91,10 +91,10 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n fn match_buffer_type(cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<&'static str> {\n     let ty = qpath_generic_tys(qpath).next()?;\n     let id = path_def_id(cx, ty)?;\n-    let path = match cx.tcx.get_diagnostic_name(id)? {\n-        sym::String => \"str\",\n-        sym::OsString => \"std::ffi::OsStr\",\n-        sym::PathBuf => \"std::path::Path\",\n+    let path = match cx.tcx.get_diagnostic_name(id) {\n+        Some(sym::OsString) => \"std::ffi::OsStr\",\n+        Some(sym::PathBuf) => \"std::path::Path\",\n+        _ if Some(id) == cx.tcx.lang_items().string() => \"str\",\n         _ => return None,\n     };\n     Some(path)"}, {"sha": "9f207d32fcfff1c4fff43c48266a9a24d72f1fa8", "filename": "clippy_lints/src/unnecessary_owned_empty_strings.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Funnecessary_owned_empty_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_lints%2Fsrc%2Funnecessary_owned_empty_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_owned_empty_strings.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -1,13 +1,12 @@\n-use clippy_utils::{diagnostics::span_lint_and_sugg, ty::is_type_diagnostic_item};\n+use clippy_utils::{diagnostics::span_lint_and_sugg, ty::is_type_lang_item};\n use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability};\n+use rustc_hir::{BorrowKind, Expr, ExprKind, LangItem, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -61,7 +60,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryOwnedEmptyStrings {\n                         if let LitKind::Str(symbol, _) = spanned.node;\n                         if symbol.is_empty();\n                         let inner_expr_type = cx.typeck_results().expr_ty(inner_expr);\n-                        if is_type_diagnostic_item(cx, inner_expr_type, sym::String);\n+                        if is_type_lang_item(cx, inner_expr_type, LangItem::String);\n                         then {\n                             span_lint_and_sugg(\n                                 cx,"}, {"sha": "fac91dfdbda019f77a1b321c7389270ddff1dc1c", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=a09423f8c8f6376a4cf4225d7fddb92ddf1f65bb", "patch": "@@ -434,6 +434,16 @@ pub fn is_expr_path_def_path(cx: &LateContext<'_>, expr: &Expr<'_>, segments: &[\n     path_def_id(cx, expr).map_or(false, |id| match_def_path(cx, id, segments))\n }\n \n+/// If `maybe_path` is a path node which resolves to an item, resolves it to a `DefId` and checks if\n+/// it matches the given lang item.\n+pub fn is_path_lang_item<'tcx>(\n+    cx: &LateContext<'_>,\n+    maybe_path: &impl MaybePath<'tcx>,\n+    lang_item: LangItem,\n+) -> bool {\n+    path_def_id(cx, maybe_path).map_or(false, |id| cx.tcx.lang_items().get(lang_item) == Some(id))\n+}\n+\n /// If `maybe_path` is a path node which resolves to an item, resolves it to a `DefId` and checks if\n /// it matches the given diagnostic item.\n pub fn is_path_diagnostic_item<'tcx>(\n@@ -760,7 +770,6 @@ pub fn can_mut_borrow_both(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>) -\n /// constructor from the std library\n fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QPath<'_>) -> bool {\n     let std_types_symbols = &[\n-        sym::String,\n         sym::Vec,\n         sym::VecDeque,\n         sym::LinkedList,\n@@ -777,7 +786,7 @@ fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QPath<\n                 if let Some(adt) = cx.tcx.type_of(impl_did).ty_adt_def() {\n                     return std_types_symbols\n                         .iter()\n-                        .any(|&symbol| cx.tcx.is_diagnostic_item(symbol, adt.did()));\n+                        .any(|&symbol| cx.tcx.is_diagnostic_item(symbol, adt.did()) || Some(adt.did()) == cx.tcx.lang_items().string());\n                 }\n             }\n         }\n@@ -834,7 +843,7 @@ fn is_default_equivalent_from(cx: &LateContext<'_>, from_func: &Expr<'_>, arg: &\n             ExprKind::Lit(hir::Lit {\n                 node: LitKind::Str(ref sym, _),\n                 ..\n-            }) => return sym.is_empty() && is_path_diagnostic_item(cx, ty, sym::String),\n+            }) => return sym.is_empty() && is_path_lang_item(cx, ty, LangItem::String),\n             ExprKind::Array([]) => return is_path_diagnostic_item(cx, ty, sym::Vec),\n             ExprKind::Repeat(_, ArrayLen::Body(len)) => {\n                 if let ExprKind::Lit(ref const_lit) = cx.tcx.hir().body(len.body).value.kind &&"}]}