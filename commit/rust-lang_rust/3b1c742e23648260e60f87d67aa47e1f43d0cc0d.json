{"sha": "3b1c742e23648260e60f87d67aa47e1f43d0cc0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMWM3NDJlMjM2NDgyNjBlNjBmODdkNjdhYTQ3ZTFmNDNkMGNjMGQ=", "commit": {"author": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-11-23T16:07:31Z"}, "committer": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-11-23T16:24:14Z"}, "message": "Add as_mut_ptr method to atomic types.", "tree": {"sha": "245c4063fc5e4883364d65b85e282e495cb9a0af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/245c4063fc5e4883364d65b85e282e495cb9a0af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b1c742e23648260e60f87d67aa47e1f43d0cc0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1c742e23648260e60f87d67aa47e1f43d0cc0d", "html_url": "https://github.com/rust-lang/rust/commit/3b1c742e23648260e60f87d67aa47e1f43d0cc0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b1c742e23648260e60f87d67aa47e1f43d0cc0d/comments", "author": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98c173afe4b7019d0b739151b7d4d4343a85ea2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c173afe4b7019d0b739151b7d4d4343a85ea2b", "html_url": "https://github.com/rust-lang/rust/commit/98c173afe4b7019d0b739151b7d4d4343a85ea2b"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "5d6972bf75c7966939153ef286b8e96c1c4d7d7e", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c742e23648260e60f87d67aa47e1f43d0cc0d/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c742e23648260e60f87d67aa47e1f43d0cc0d/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=3b1c742e23648260e60f87d67aa47e1f43d0cc0d", "patch": "@@ -802,6 +802,37 @@ impl AtomicBool {\n     pub fn fetch_xor(&self, val: bool, order: Ordering) -> bool {\n         unsafe { atomic_xor(self.v.get(), val as u8, order) != 0 }\n     }\n+\n+    /// Returns a mutable pointer to the underlying [`bool`].\n+    ///\n+    /// Doing non-atomic reads and writes on the resulting integer can be a data race.\n+    /// This method is mostly useful for FFI, where the function signature may use\n+    /// `*mut bool` instead of `&AtomicBool`.\n+    ///\n+    /// [`bool`]: ../../../std/primitive.bool.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```ignore (extern-declaration)\n+    /// # fn main() {\n+    /// use std::sync::atomic::AtomicBool;\n+    /// extern {\n+    ///     fn my_atomic_op(arg: *mut bool);\n+    /// }\n+    ///\n+    /// let mut atomic = AtomicBool::new(true);\n+    /// unsafe {\n+    ///     my_atomic_op(atomic.as_mut_ptr());\n+    /// }\n+    /// # }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"atomic_mut_ptr\",\n+           reason = \"recently added\",\n+           issue = \"0\")]\n+    pub fn as_mut_ptr(&self) -> *mut bool {\n+        self.v.get() as *mut bool\n+    }\n }\n \n #[cfg(any(bootstrap, target_has_atomic_load_store = \"ptr\"))]\n@@ -1891,6 +1922,37 @@ assert_eq!(min_foo, 12);\n                 }\n             }\n \n+            doc_comment! {\n+                concat!(\"Returns a mutable pointer to the underlying integer.\n+\n+Doing non-atomic reads and writes on the resulting integer can be a data race.\n+This method is mostly useful for FFI, where the function signature may use\n+`*mut \", stringify!($int_type), \"` instead of `&\", stringify!($atomic_type), \"`.\n+\n+# Examples\n+\n+```ignore (extern-declaration)\n+# fn main() {\n+\", $extra_feature, \"use std::sync::atomic::\", stringify!($atomic_type), \";\n+\n+extern {\n+    fn my_atomic_op(arg: *mut \", stringify!($int_type), \");\n+}\n+\n+let mut atomic = \", stringify!($atomic_type), \"::new(1);\n+unsafe {\n+    my_atomic_op(atomic.as_mut_ptr());\n+}\n+# }\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"atomic_mut_ptr\",\n+                       reason = \"recently added\",\n+                       issue = \"0\")]\n+                pub fn as_mut_ptr(&self) -> *mut $int_type {\n+                    self.v.get()\n+                }\n+            }\n         }\n     }\n }"}]}