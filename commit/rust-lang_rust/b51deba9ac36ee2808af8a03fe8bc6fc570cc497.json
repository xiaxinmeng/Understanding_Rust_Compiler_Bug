{"sha": "b51deba9ac36ee2808af8a03fe8bc6fc570cc497", "node_id": "C_kwDOAAsO6NoAKGI1MWRlYmE5YWMzNmVlMjgwOGFmOGEwM2ZlOGJjNmZjNTcwY2M0OTc", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-27T22:37:11Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-27T23:50:21Z"}, "message": "Remove `MemDecoder::read_raw_bytes_inherent`.\n\nIt's unnecessary. Note that `MemDecoder::read_raw_bytes` how has a `&'a\n[u8]` return type, the same as what `read_raw_bytes_inherent` had.", "tree": {"sha": "8e4163dd9e9a1f67da7e96414739b5bdda692798", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e4163dd9e9a1f67da7e96414739b5bdda692798"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b51deba9ac36ee2808af8a03fe8bc6fc570cc497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b51deba9ac36ee2808af8a03fe8bc6fc570cc497", "html_url": "https://github.com/rust-lang/rust/commit/b51deba9ac36ee2808af8a03fe8bc6fc570cc497", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b51deba9ac36ee2808af8a03fe8bc6fc570cc497/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c14882f74e8feb3f76ae85ed5cd66afaccd1da67", "url": "https://api.github.com/repos/rust-lang/rust/commits/c14882f74e8feb3f76ae85ed5cd66afaccd1da67", "html_url": "https://github.com/rust-lang/rust/commit/c14882f74e8feb3f76ae85ed5cd66afaccd1da67"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "012a6406de35cbaf930005736d3916a331650e5d", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b51deba9ac36ee2808af8a03fe8bc6fc570cc497/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51deba9ac36ee2808af8a03fe8bc6fc570cc497/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=b51deba9ac36ee2808af8a03fe8bc6fc570cc497", "patch": "@@ -573,22 +573,6 @@ impl<'a> MemDecoder<'a> {\n         self.read_raw_bytes(N).try_into().unwrap()\n     }\n \n-    // The trait method doesn't have a lifetime parameter, and we need a version of this\n-    // that definitely returns a slice based on the underlying storage as opposed to\n-    // the Decoder itself in order to implement read_str efficiently.\n-    #[inline]\n-    fn read_raw_bytes_inherent(&mut self, bytes: usize) -> &'a [u8] {\n-        if bytes > self.remaining() {\n-            Self::decoder_exhausted();\n-        }\n-        // SAFETY: We just checked if this range is in-bounds above.\n-        unsafe {\n-            let slice = std::slice::from_raw_parts(self.current, bytes);\n-            self.current = self.current.add(bytes);\n-            slice\n-        }\n-    }\n-\n     /// While we could manually expose manipulation of the decoder position,\n     /// all current users of that method would need to reset the position later,\n     /// incurring the bounds check of set_position twice.\n@@ -706,14 +690,22 @@ impl<'a> Decoder for MemDecoder<'a> {\n     #[inline]\n     fn read_str(&mut self) -> &str {\n         let len = self.read_usize();\n-        let bytes = self.read_raw_bytes_inherent(len + 1);\n+        let bytes = self.read_raw_bytes(len + 1);\n         assert!(bytes[len] == STR_SENTINEL);\n         unsafe { std::str::from_utf8_unchecked(&bytes[..len]) }\n     }\n \n     #[inline]\n-    fn read_raw_bytes(&mut self, bytes: usize) -> &[u8] {\n-        self.read_raw_bytes_inherent(bytes)\n+    fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {\n+        if bytes > self.remaining() {\n+            Self::decoder_exhausted();\n+        }\n+        // SAFETY: We just checked if this range is in-bounds above.\n+        unsafe {\n+            let slice = std::slice::from_raw_parts(self.current, bytes);\n+            self.current = self.current.add(bytes);\n+            slice\n+        }\n     }\n \n     #[inline]"}]}