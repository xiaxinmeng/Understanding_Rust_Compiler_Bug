{"sha": "989d06a76dd5f43ce6237440366a83eb1e436763", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OWQwNmE3NmRkNWY0M2NlNjIzNzQ0MDM2NmE4M2ViMWU0MzY3NjM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-18T22:24:48Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-19T14:06:20Z"}, "message": "Rollup merge of #55953 - blitzerr:master, r=nikomatsakis\n\n#53488 Refactoring UpvarId", "tree": {"sha": "251cc7001c068064346826ddbcbadef09c6b5f48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/251cc7001c068064346826ddbcbadef09c6b5f48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/989d06a76dd5f43ce6237440366a83eb1e436763", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvyw1wACgkQ/vbIBR0O\nATycIw/8DpcuzC23cyHvpqtSsu/4OkOd7oEzC6tmnZVpUjniNImDha/LhZ/dVjjl\nVMLwVY0DzNRw9NsskaHeQqTxee5/hX+FA1fYDjF5MYci1GSLab7hPVgrXwYMfkAQ\nv9RMR+N5jVVNsN1JAjdi5xjERLcIAqGvJ9hheBBsAioCwtksZZRltAlGF0aPAyKY\n56kaGDrfLnpRqmCfdJWVZNttk3wSkb0R6FMpuCkI4zDmV4wnwYhekUI8bXHnCBjK\nO0zvWWFi7eGvxflEh7UShO46PmsrE7ckkBkuMvC/9n92kYQHXtlZ0TuuUIMLJlbP\nAVYGAM2g4jvLWvOM0OvsZFJmVwpqsBMsfex906byZXeLY5FV9c77W48SfbRkTDfn\nCAd4cPoWe5W8a92+b0l+MqEqvfiIBv6usNnTUrszCzCtIPAakTue6lS5lfPDhKW1\njg0m3sVsomzkS0NBOCtvz1LgmSA/4eLhZr8fTpnPliDjlqkEJwz7NHEO3wceWEF1\nouAstpKtdISeB5P99Pi2DYc6Jll60Xsy05S+w1ytM9s/9dmS5BZ+JH6iiedaWxfF\n6HNcAWyhvUPatyCUkaUY2mQ0pd6oAxkDw6rQTwa/H4N+0dzFvTZjvKYuuN0X5bBx\nYujxVh4Sx/s28XIdq+scXgGO0Wp3xBVfGp8W4XTwV1Fi0MC7lrM=\n=/gUq\n-----END PGP SIGNATURE-----", "payload": "tree 251cc7001c068064346826ddbcbadef09c6b5f48\nparent 32e4eb9cb96212a1208646d364d95bc2621f4cff\nparent 6779bb485c7fb3af47278d7eeefce34eeeb5eaf8\nauthor Pietro Albini <pietro@pietroalbini.org> 1542579888 +0100\ncommitter kennytm <kennytm@gmail.com> 1542636380 +0800\n\nRollup merge of #55953 - blitzerr:master, r=nikomatsakis\n\n#53488 Refactoring UpvarId\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/989d06a76dd5f43ce6237440366a83eb1e436763", "html_url": "https://github.com/rust-lang/rust/commit/989d06a76dd5f43ce6237440366a83eb1e436763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/989d06a76dd5f43ce6237440366a83eb1e436763/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32e4eb9cb96212a1208646d364d95bc2621f4cff", "url": "https://api.github.com/repos/rust-lang/rust/commits/32e4eb9cb96212a1208646d364d95bc2621f4cff", "html_url": "https://github.com/rust-lang/rust/commit/32e4eb9cb96212a1208646d364d95bc2621f4cff"}, {"sha": "6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "html_url": "https://github.com/rust-lang/rust/commit/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8"}], "stats": {"total": 215, "additions": 113, "deletions": 102}, "files": [{"sha": "9a6c23703bbfe3cb6766385656a0042cb5c3efeb", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=989d06a76dd5f43ce6237440366a83eb1e436763", "patch": "@@ -216,7 +216,9 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::adjustment::AutoBorrow\n     }\n }\n \n-impl_stable_hash_for!(struct ty::UpvarId { var_id, closure_expr_id });\n+impl_stable_hash_for!(struct ty::UpvarPath { hir_id });\n+\n+impl_stable_hash_for!(struct ty::UpvarId { var_path, closure_expr_id });\n \n impl_stable_hash_for!(enum ty::BorrowKind {\n     ImmBorrow,"}, {"sha": "59a490f4a013d9a6dc6dec97f74fcd682e149f44", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=989d06a76dd5f43ce6237440366a83eb1e436763", "patch": "@@ -1315,7 +1315,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 format!(\" for lifetime parameter `{}` in coherence check\", name)\n             }\n             infer::UpvarRegion(ref upvar_id, _) => {\n-                let var_node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_id);\n+                let var_node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_path.hir_id);\n                 let var_name = self.tcx.hir.name(var_node_id);\n                 format!(\" for capture of `{}` by closure\", var_name)\n             }"}, {"sha": "a539c321af3f0be79cc570f22a72bd560d171a84", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=989d06a76dd5f43ce6237440366a83eb1e436763", "patch": "@@ -41,7 +41,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                               \"...so that reference does not outlive borrowed content\");\n             }\n             infer::ReborrowUpvar(span, ref upvar_id) => {\n-                let var_node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_id);\n+                let var_node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_path.hir_id);\n                 let var_name = self.tcx.hir.name(var_node_id);\n                 err.span_note(span,\n                               &format!(\"...so that closure can access `{}`\", var_name));\n@@ -174,7 +174,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 err\n             }\n             infer::ReborrowUpvar(span, ref upvar_id) => {\n-                let var_node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_id);\n+                let var_node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_path.hir_id);\n                 let var_name = self.tcx.hir.name(var_node_id);\n                 let mut err = struct_span_err!(self.tcx.sess,\n                                                span,"}, {"sha": "5b92bfe6ad3c48629a67600f4e5e45b91e84ff15", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=989d06a76dd5f43ce6237440366a83eb1e436763", "patch": "@@ -938,7 +938,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 let var_hir_id = self.tcx().hir.node_to_hir_id(freevar.var_id());\n                 let closure_def_id = self.tcx().hir.local_def_id(closure_expr.id);\n                 let upvar_id = ty::UpvarId {\n-                    var_id: var_hir_id,\n+                    var_path: ty::UpvarPath { hir_id: var_hir_id },\n                     closure_expr_id: closure_def_id.to_local(),\n                 };\n                 let upvar_capture = self.mc.tables.upvar_capture(upvar_id);"}, {"sha": "cadf0c42d228fe21575c5cf2dc5a68c8d95fce36", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=989d06a76dd5f43ce6237440366a83eb1e436763", "patch": "@@ -818,7 +818,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         let closure_expr_def_id = self.tcx.hir.local_def_id(fn_node_id);\n         let var_hir_id = self.tcx.hir.node_to_hir_id(var_id);\n         let upvar_id = ty::UpvarId {\n-            var_id: var_hir_id,\n+            var_path: ty::UpvarPath { hir_id: var_hir_id },\n             closure_expr_id: closure_expr_def_id.to_local(),\n         };\n "}, {"sha": "923d362c2345ff6a4fcdcdd163de411683463da4", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=989d06a76dd5f43ce6237440366a83eb1e436763", "patch": "@@ -789,7 +789,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n             pat_adjustments.hash_stable(hcx, hasher);\n             hash_stable_hashmap(hcx, hasher, upvar_capture_map, |up_var_id, hcx| {\n                 let ty::UpvarId {\n-                    var_id,\n+                    var_path,\n                     closure_expr_id\n                 } = *up_var_id;\n \n@@ -798,14 +798,14 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n \n                 let var_owner_def_id = DefId {\n                     krate: local_id_root.krate,\n-                    index: var_id.owner,\n+                    index: var_path.hir_id.owner,\n                 };\n                 let closure_def_id = DefId {\n                     krate: local_id_root.krate,\n                     index: closure_expr_id.to_def_id().index,\n                 };\n                 (hcx.def_path_hash(var_owner_def_id),\n-                 var_id.local_id,\n+                 var_path.hir_id.local_id,\n                  hcx.def_path_hash(closure_def_id))\n             });\n "}, {"sha": "dfdffa2d54783dcb87baf7a6b9571ab000c931d8", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=989d06a76dd5f43ce6237440366a83eb1e436763", "patch": "@@ -730,12 +730,17 @@ impl<T> List<T> {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+pub struct UpvarPath {\n+    pub hir_id: hir::HirId,\n+}\n+\n /// Upvars do not get their own node-id. Instead, we use the pair of\n /// the original var id (that is, the root variable that is referenced\n /// by the upvar) and the id of the closure expression.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct UpvarId {\n-    pub var_id: hir::HirId,\n+    pub var_path: UpvarPath,\n     pub closure_expr_id: LocalDefId,\n }\n "}, {"sha": "d53370d242bd94c842e2bdc3557470e4aeb06453", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=989d06a76dd5f43ce6237440366a83eb1e436763", "patch": "@@ -678,8 +678,8 @@ impl<'tcx> fmt::Debug for ty::ClosureUpvar<'tcx> {\n impl fmt::Debug for ty::UpvarId {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"UpvarId({:?};`{}`;{:?})\",\n-               self.var_id,\n-               ty::tls::with(|tcx| tcx.hir.name(tcx.hir.hir_to_node_id(self.var_id))),\n+               self.var_path.hir_id,\n+               ty::tls::with(|tcx| tcx.hir.name(tcx.hir.hir_to_node_id(self.var_path.hir_id))),\n                self.closure_expr_id)\n     }\n }"}, {"sha": "21fb0cdf90ad12306cfa346806ec747c9f0cc725", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=989d06a76dd5f43ce6237440366a83eb1e436763", "patch": "@@ -453,8 +453,8 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n                     }\n                     None\n                 }\n-                LpUpvar(ty::UpvarId{ var_id, closure_expr_id: _ }) => {\n-                    self.bccx.used_mut_nodes.borrow_mut().insert(var_id);\n+                LpUpvar(ty::UpvarId{ var_path: ty::UpvarPath { hir_id }, closure_expr_id: _ }) => {\n+                    self.bccx.used_mut_nodes.borrow_mut().insert(hir_id);\n                     None\n                 }\n                 LpExtend(ref base, mc::McInherited, LpDeref(pointer_kind)) |"}, {"sha": "cfd530b7e3d0924bc346687df631c92b8d05f657", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=989d06a76dd5f43ce6237440366a83eb1e436763", "patch": "@@ -97,7 +97,7 @@ fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, errors: &[MoveErr\n             }\n         }\n         if let NoteClosureEnv(upvar_id) = error.move_from.note {\n-            let var_node_id = bccx.tcx.hir.hir_to_node_id(upvar_id.var_id);\n+            let var_node_id = bccx.tcx.hir.hir_to_node_id(upvar_id.var_path.hir_id);\n             err.span_label(bccx.tcx.hir.span(var_node_id),\n                            \"captured outer variable\");\n         }"}, {"sha": "d189460d088484af00d84dd6656a173266f5e39a", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=989d06a76dd5f43ce6237440366a83eb1e436763", "patch": "@@ -846,7 +846,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     MutabilityViolation => {\n                         let mut db = self.cannot_assign(error_span, &descr, Origin::Ast);\n                         if let mc::NoteClosureEnv(upvar_id) = err.cmt.note {\n-                            let node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_id);\n+                            let node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_path.hir_id);\n                             let sp = self.tcx.hir.span(node_id);\n                             let fn_closure_msg = \"`Fn` closures cannot capture their enclosing \\\n                                                   environment for modifications\";\n@@ -1415,7 +1415,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                       loan_path: &LoanPath<'tcx>,\n                                       out: &mut String) {\n         match loan_path.kind {\n-            LpUpvar(ty::UpvarId { var_id: id, closure_expr_id: _ }) => {\n+            LpUpvar(ty::UpvarId { var_path: ty::UpvarPath { hir_id: id}, closure_expr_id: _ }) => {\n                 out.push_str(&self.tcx.hir.name(self.tcx.hir.hir_to_node_id(id)).as_str());\n             }\n             LpVar(id) => {\n@@ -1533,7 +1533,7 @@ impl<'tcx> fmt::Debug for LoanPath<'tcx> {\n                 write!(f, \"$({})\", ty::tls::with(|tcx| tcx.hir.node_to_string(id)))\n             }\n \n-            LpUpvar(ty::UpvarId{ var_id, closure_expr_id }) => {\n+            LpUpvar(ty::UpvarId{ var_path: ty::UpvarPath {hir_id: var_id}, closure_expr_id }) => {\n                 let s = ty::tls::with(|tcx| {\n                     let var_node_id = tcx.hir.hir_to_node_id(var_id);\n                     tcx.hir.node_to_string(var_node_id)\n@@ -1568,9 +1568,9 @@ impl<'tcx> fmt::Display for LoanPath<'tcx> {\n                 write!(f, \"$({})\", ty::tls::with(|tcx| tcx.hir.node_to_user_string(id)))\n             }\n \n-            LpUpvar(ty::UpvarId{ var_id, closure_expr_id: _ }) => {\n+            LpUpvar(ty::UpvarId{ var_path: ty::UpvarPath { hir_id }, closure_expr_id: _ }) => {\n                 let s = ty::tls::with(|tcx| {\n-                    let var_node_id = tcx.hir.hir_to_node_id(var_id);\n+                    let var_node_id = tcx.hir.hir_to_node_id(hir_id);\n                     tcx.hir.node_to_string(var_node_id)\n                 });\n                 write!(f, \"$({} captured by closure)\", s)"}, {"sha": "0aa1924c0e59c693df6a4524a569418391aa0111", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=989d06a76dd5f43ce6237440366a83eb1e436763", "patch": "@@ -664,7 +664,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n             let var_hir_id = tcx.hir.node_to_hir_id(var_id);\n             let closure_expr_id = tcx.hir.local_def_id(fn_id);\n             let capture = hir.tables().upvar_capture(ty::UpvarId {\n-                var_id: var_hir_id,\n+                var_path: ty::UpvarPath {hir_id: var_hir_id},\n                 closure_expr_id: LocalDefId::from_def_id(closure_expr_id),\n             });\n             let by_ref = match capture {"}, {"sha": "2e9edf20c5708f3e2dc966fd2d04a10f9d1fa44d", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=989d06a76dd5f43ce6237440366a83eb1e436763", "patch": "@@ -1061,7 +1061,7 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             // ...but the upvar might be an `&T` or `&mut T` capture, at which\n             // point we need an implicit deref\n             let upvar_id = ty::UpvarId {\n-                var_id: var_hir_id,\n+                var_path: ty::UpvarPath {hir_id: var_hir_id},\n                 closure_expr_id: LocalDefId::from_def_id(closure_def_id),\n             };\n             match cx.tables().upvar_capture(upvar_id) {\n@@ -1178,7 +1178,7 @@ fn capture_freevar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                    -> ExprRef<'tcx> {\n     let var_hir_id = cx.tcx.hir.node_to_hir_id(freevar.var_id());\n     let upvar_id = ty::UpvarId {\n-        var_id: var_hir_id,\n+        var_path: ty::UpvarPath { hir_id: var_hir_id },\n         closure_expr_id: cx.tcx.hir.local_def_id(closure_expr.id).to_local(),\n     };\n     let upvar_capture = cx.tables().upvar_capture(upvar_id);"}, {"sha": "312ce402775d226759853d2c424ace38fe65a373", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 82, "deletions": 78, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=989d06a76dd5f43ce6237440366a83eb1e436763", "patch": "@@ -45,14 +45,14 @@ use super::FnCtxt;\n use middle::expr_use_visitor as euv;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Categorization;\n+use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::ty::{self, Ty, TyCtxt, UpvarSubsts};\n+use rustc::hir::def_id::LocalDefId;\n+use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::infer::UpvarRegion;\n+use rustc::ty::{self, Ty, TyCtxt, UpvarSubsts};\n use syntax::ast;\n use syntax_pos::Span;\n-use rustc::hir;\n-use rustc::hir::def_id::LocalDefId;\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn closure_analyze(&self, body: &'gcx hir::Body) {\n@@ -121,7 +121,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n \n-        let infer_kind = if let UpvarSubsts::Closure(closure_substs) = substs{\n+        let infer_kind = if let UpvarSubsts::Closure(closure_substs) = substs {\n             if self.closure_kind(closure_def_id, closure_substs).is_none() {\n                 Some(closure_substs)\n             } else {\n@@ -134,7 +134,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.tcx.with_freevars(closure_node_id, |freevars| {\n             for freevar in freevars {\n                 let upvar_id = ty::UpvarId {\n-                    var_id: self.tcx.hir.node_to_hir_id(freevar.var_id()),\n+                    var_path: ty::UpvarPath {\n+                        hir_id : self.tcx.hir.node_to_hir_id(freevar.var_id()),\n+                    },\n                     closure_expr_id: LocalDefId::from_def_id(closure_def_id),\n                 };\n                 debug!(\"seed upvar_id {:?}\", upvar_id);\n@@ -213,12 +215,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let final_upvar_tys = self.final_upvar_tys(closure_node_id);\n         debug!(\n             \"analyze_closure: id={:?} substs={:?} final_upvar_tys={:?}\",\n-            closure_node_id,\n-            substs,\n-            final_upvar_tys\n+            closure_node_id, substs, final_upvar_tys\n         );\n-        for (upvar_ty, final_upvar_ty) in substs.upvar_tys(closure_def_id, self.tcx)\n-                                                .zip(final_upvar_tys)\n+        for (upvar_ty, final_upvar_ty) in substs\n+            .upvar_tys(closure_def_id, self.tcx)\n+            .zip(final_upvar_tys)\n         {\n             self.demand_suptype(span, upvar_ty, final_upvar_ty);\n         }\n@@ -249,16 +250,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     let var_hir_id = tcx.hir.node_to_hir_id(var_node_id);\n                     let freevar_ty = self.node_ty(var_hir_id);\n                     let upvar_id = ty::UpvarId {\n-                        var_id: var_hir_id,\n+                        var_path: ty::UpvarPath {\n+                            hir_id: var_hir_id,\n+                        },\n                         closure_expr_id: LocalDefId::from_def_id(closure_def_index),\n                     };\n                     let capture = self.tables.borrow().upvar_capture(upvar_id);\n \n                     debug!(\n                         \"var_id={:?} freevar_ty={:?} capture={:?}\",\n-                        var_node_id,\n-                        freevar_ty,\n-                        capture\n+                        var_node_id, freevar_ty, capture\n                     );\n \n                     match capture {\n@@ -271,8 +272,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             },\n                         ),\n                     }\n-                })\n-                .collect()\n+                }).collect()\n         })\n     }\n }\n@@ -301,12 +301,14 @@ struct InferBorrowKind<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n-    fn adjust_upvar_borrow_kind_for_consume(&mut self, cmt: &mc::cmt_<'tcx>,\n-                                            mode: euv::ConsumeMode) {\n+    fn adjust_upvar_borrow_kind_for_consume(\n+        &mut self,\n+        cmt: &mc::cmt_<'tcx>,\n+        mode: euv::ConsumeMode,\n+    ) {\n         debug!(\n             \"adjust_upvar_borrow_kind_for_consume(cmt={:?}, mode={:?})\",\n-            cmt,\n-            mode\n+            cmt, mode\n         );\n \n         // we only care about moves\n@@ -349,7 +351,7 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n                         upvar_id.closure_expr_id,\n                         ty::ClosureKind::FnOnce,\n                         guarantor.span,\n-                        var_name(tcx, upvar_id.var_id),\n+                        var_name(tcx, upvar_id.var_path.hir_id),\n                     );\n \n                     self.adjust_upvar_captures\n@@ -366,7 +368,7 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n                         upvar_id.closure_expr_id,\n                         ty::ClosureKind::FnOnce,\n                         guarantor.span,\n-                        var_name(tcx, upvar_id.var_id),\n+                        var_name(tcx, upvar_id.var_path.hir_id),\n                     );\n                 }\n                 mc::NoteIndex | mc::NoteNone => {}\n@@ -381,9 +383,9 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n         debug!(\"adjust_upvar_borrow_kind_for_mut(cmt={:?})\", cmt);\n \n         match cmt.cat.clone() {\n-            Categorization::Deref(base, mc::Unique) |\n-            Categorization::Interior(base, _) |\n-            Categorization::Downcast(base, _) => {\n+            Categorization::Deref(base, mc::Unique)\n+            | Categorization::Interior(base, _)\n+            | Categorization::Downcast(base, _) => {\n                 // Interior or owned data is mutable if base is\n                 // mutable, so iterate to the base.\n                 self.adjust_upvar_borrow_kind_for_mut(&base);\n@@ -399,12 +401,12 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            Categorization::Deref(_, mc::UnsafePtr(..)) |\n-            Categorization::StaticItem |\n-            Categorization::ThreadLocal(..) |\n-            Categorization::Rvalue(..) |\n-            Categorization::Local(_) |\n-            Categorization::Upvar(..) => {\n+            Categorization::Deref(_, mc::UnsafePtr(..))\n+            | Categorization::StaticItem\n+            | Categorization::ThreadLocal(..)\n+            | Categorization::Rvalue(..)\n+            | Categorization::Local(_)\n+            | Categorization::Upvar(..) => {\n                 return;\n             }\n         }\n@@ -414,9 +416,9 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n         debug!(\"adjust_upvar_borrow_kind_for_unique(cmt={:?})\", cmt);\n \n         match cmt.cat.clone() {\n-            Categorization::Deref(base, mc::Unique) |\n-            Categorization::Interior(base, _) |\n-            Categorization::Downcast(base, _) => {\n+            Categorization::Deref(base, mc::Unique)\n+            | Categorization::Interior(base, _)\n+            | Categorization::Downcast(base, _) => {\n                 // Interior or owned data is unique if base is\n                 // unique.\n                 self.adjust_upvar_borrow_kind_for_unique(&base);\n@@ -430,18 +432,20 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            Categorization::Deref(_, mc::UnsafePtr(..)) |\n-            Categorization::StaticItem |\n-            Categorization::ThreadLocal(..) |\n-            Categorization::Rvalue(..) |\n-            Categorization::Local(_) |\n-            Categorization::Upvar(..) => {}\n+            Categorization::Deref(_, mc::UnsafePtr(..))\n+            | Categorization::StaticItem\n+            | Categorization::ThreadLocal(..)\n+            | Categorization::Rvalue(..)\n+            | Categorization::Local(_)\n+            | Categorization::Upvar(..) => {}\n         }\n     }\n \n-    fn try_adjust_upvar_deref(&mut self, cmt: &mc::cmt_<'tcx>, borrow_kind: ty::BorrowKind)\n-                              -> bool\n-    {\n+    fn try_adjust_upvar_deref(\n+        &mut self,\n+        cmt: &mc::cmt_<'tcx>,\n+        borrow_kind: ty::BorrowKind,\n+    ) -> bool {\n         assert!(match borrow_kind {\n             ty::MutBorrow => true,\n             ty::UniqueImmBorrow => true,\n@@ -465,7 +469,7 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n                     upvar_id.closure_expr_id,\n                     ty::ClosureKind::FnMut,\n                     cmt.span,\n-                    var_name(tcx, upvar_id.var_id),\n+                    var_name(tcx, upvar_id.var_path.hir_id),\n                 );\n \n                 true\n@@ -478,7 +482,7 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n                     upvar_id.closure_expr_id,\n                     ty::ClosureKind::FnMut,\n                     cmt.span,\n-                    var_name(tcx, upvar_id.var_id),\n+                    var_name(tcx, upvar_id.var_path.hir_id),\n                 );\n \n                 true\n@@ -493,15 +497,14 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n     /// Here the argument `mutbl` is the borrow_kind that is required by\n     /// some particular use.\n     fn adjust_upvar_borrow_kind(&mut self, upvar_id: ty::UpvarId, kind: ty::BorrowKind) {\n-        let upvar_capture = self.adjust_upvar_captures\n+        let upvar_capture = self\n+            .adjust_upvar_captures\n             .get(&upvar_id)\n             .cloned()\n             .unwrap_or_else(|| self.fcx.tables.borrow().upvar_capture(upvar_id));\n         debug!(\n             \"adjust_upvar_borrow_kind(upvar_id={:?}, upvar_capture={:?}, kind={:?})\",\n-            upvar_id,\n-            upvar_capture,\n-            kind\n+            upvar_id, upvar_capture, kind\n         );\n \n         match upvar_capture {\n@@ -511,18 +514,18 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n             ty::UpvarCapture::ByRef(mut upvar_borrow) => {\n                 match (upvar_borrow.kind, kind) {\n                     // Take RHS:\n-                    (ty::ImmBorrow, ty::UniqueImmBorrow) |\n-                    (ty::ImmBorrow, ty::MutBorrow) |\n-                    (ty::UniqueImmBorrow, ty::MutBorrow) => {\n+                    (ty::ImmBorrow, ty::UniqueImmBorrow)\n+                    | (ty::ImmBorrow, ty::MutBorrow)\n+                    | (ty::UniqueImmBorrow, ty::MutBorrow) => {\n                         upvar_borrow.kind = kind;\n                         self.adjust_upvar_captures\n                             .insert(upvar_id, ty::UpvarCapture::ByRef(upvar_borrow));\n                     }\n                     // Take LHS:\n-                    (ty::ImmBorrow, ty::ImmBorrow) |\n-                    (ty::UniqueImmBorrow, ty::ImmBorrow) |\n-                    (ty::UniqueImmBorrow, ty::UniqueImmBorrow) |\n-                    (ty::MutBorrow, _) => {}\n+                    (ty::ImmBorrow, ty::ImmBorrow)\n+                    | (ty::UniqueImmBorrow, ty::ImmBorrow)\n+                    | (ty::UniqueImmBorrow, ty::UniqueImmBorrow)\n+                    | (ty::MutBorrow, _) => {}\n                 }\n             }\n         }\n@@ -537,10 +540,7 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n     ) {\n         debug!(\n             \"adjust_closure_kind(closure_id={:?}, new_kind={:?}, upvar_span={:?}, var_name={})\",\n-            closure_id,\n-            new_kind,\n-            upvar_span,\n-            var_name\n+            closure_id, new_kind, upvar_span, var_name\n         );\n \n         // Is this the closure whose kind is currently being inferred?\n@@ -554,22 +554,20 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n \n         debug!(\n             \"adjust_closure_kind: closure_id={:?}, existing_kind={:?}, new_kind={:?}\",\n-            closure_id,\n-            existing_kind,\n-            new_kind\n+            closure_id, existing_kind, new_kind\n         );\n \n         match (existing_kind, new_kind) {\n-            (ty::ClosureKind::Fn, ty::ClosureKind::Fn) |\n-            (ty::ClosureKind::FnMut, ty::ClosureKind::Fn) |\n-            (ty::ClosureKind::FnMut, ty::ClosureKind::FnMut) |\n-            (ty::ClosureKind::FnOnce, _) => {\n+            (ty::ClosureKind::Fn, ty::ClosureKind::Fn)\n+            | (ty::ClosureKind::FnMut, ty::ClosureKind::Fn)\n+            | (ty::ClosureKind::FnMut, ty::ClosureKind::FnMut)\n+            | (ty::ClosureKind::FnOnce, _) => {\n                 // no change needed\n             }\n \n-            (ty::ClosureKind::Fn, ty::ClosureKind::FnMut) |\n-            (ty::ClosureKind::Fn, ty::ClosureKind::FnOnce) |\n-            (ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n+            (ty::ClosureKind::Fn, ty::ClosureKind::FnMut)\n+            | (ty::ClosureKind::Fn, ty::ClosureKind::FnOnce)\n+            | (ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n                 // new kind is stronger than the old kind\n                 self.current_closure_kind = new_kind;\n                 self.current_origin = Some((upvar_span, var_name));\n@@ -590,12 +588,20 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'gcx, 'tcx> {\n         self.adjust_upvar_borrow_kind_for_consume(cmt, mode);\n     }\n \n-    fn matched_pat(&mut self, _matched_pat: &hir::Pat, _cmt: &mc::cmt_<'tcx>,\n-                   _mode: euv::MatchMode) {\n+    fn matched_pat(\n+        &mut self,\n+        _matched_pat: &hir::Pat,\n+        _cmt: &mc::cmt_<'tcx>,\n+        _mode: euv::MatchMode,\n+    ) {\n     }\n \n-    fn consume_pat(&mut self, _consume_pat: &hir::Pat, cmt: &mc::cmt_<'tcx>,\n-                   mode: euv::ConsumeMode) {\n+    fn consume_pat(\n+        &mut self,\n+        _consume_pat: &hir::Pat,\n+        cmt: &mc::cmt_<'tcx>,\n+        mode: euv::ConsumeMode,\n+    ) {\n         debug!(\"consume_pat(cmt={:?},mode={:?})\", cmt, mode);\n         self.adjust_upvar_borrow_kind_for_consume(cmt, mode);\n     }\n@@ -611,9 +617,7 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'gcx, 'tcx> {\n     ) {\n         debug!(\n             \"borrow(borrow_id={}, cmt={:?}, bk={:?})\",\n-            borrow_id,\n-            cmt,\n-            bk\n+            borrow_id, cmt, bk\n         );\n \n         match bk {"}, {"sha": "4460d5f64ce26283e7d93e99dd29622b8a7fa941", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989d06a76dd5f43ce6237440366a83eb1e436763/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=989d06a76dd5f43ce6237440366a83eb1e436763", "patch": "@@ -306,7 +306,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                 ty::UpvarCapture::ByValue => ty::UpvarCapture::ByValue,\n                 ty::UpvarCapture::ByRef(ref upvar_borrow) => {\n                     let r = upvar_borrow.region;\n-                    let r = self.resolve(&r, &upvar_id.var_id);\n+                    let r = self.resolve(&r, &upvar_id.var_path.hir_id);\n                     ty::UpvarCapture::ByRef(ty::UpvarBorrow {\n                         kind: upvar_borrow.kind,\n                         region: r,"}]}