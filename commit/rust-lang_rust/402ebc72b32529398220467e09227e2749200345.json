{"sha": "402ebc72b32529398220467e09227e2749200345", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMmViYzcyYjMyNTI5Mzk4MjIwNDY3ZTA5MjI3ZTI3NDkyMDAzNDU=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-09-20T19:06:09Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-09-20T19:25:44Z"}, "message": "Fix ICE when `indirect_structural_match` is allowed", "tree": {"sha": "ad9acd0c029a067a614a832fb34429ef6f365d2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad9acd0c029a067a614a832fb34429ef6f365d2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/402ebc72b32529398220467e09227e2749200345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/402ebc72b32529398220467e09227e2749200345", "html_url": "https://github.com/rust-lang/rust/commit/402ebc72b32529398220467e09227e2749200345", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/402ebc72b32529398220467e09227e2749200345/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bb9eecf07630be796c587a4bba70c49ae6a1bae", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bb9eecf07630be796c587a4bba70c49ae6a1bae", "html_url": "https://github.com/rust-lang/rust/commit/3bb9eecf07630be796c587a4bba70c49ae6a1bae"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "847b89f0464f6fa474ea962ed70448b24711a903", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/402ebc72b32529398220467e09227e2749200345/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402ebc72b32529398220467e09227e2749200345/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=402ebc72b32529398220467e09227e2749200345", "patch": "@@ -322,16 +322,18 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     && !self.saw_const_match_lint.get()\n                 {\n                     self.saw_const_match_lint.set(true);\n-                    let msg = format!(\n-                        \"to use a constant of type `{}` in a pattern, \\\n-                        `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                        cv.ty, cv.ty,\n-                    );\n                     tcx.struct_span_lint_hir(\n                         lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n                         id,\n                         span,\n-                        |lint| lint.build(&msg).emit(),\n+                        |lint| {\n+                            let msg = format!(\n+                                \"to use a constant of type `{}` in a pattern, \\\n+                                 `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                                cv.ty, cv.ty,\n+                            );\n+                            lint.build(&msg).emit()\n+                        },\n                     );\n                 }\n                 // Since we are behind a reference, we can just bubble the error up so we get a"}, {"sha": "40cc665fb612bd325835d1c1652171261fc05a76", "filename": "src/test/ui/consts/issue-89088.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/402ebc72b32529398220467e09227e2749200345/src%2Ftest%2Fui%2Fconsts%2Fissue-89088.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402ebc72b32529398220467e09227e2749200345/src%2Ftest%2Fui%2Fconsts%2Fissue-89088.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-89088.rs?ref=402ebc72b32529398220467e09227e2749200345", "patch": "@@ -0,0 +1,22 @@\n+// Regression test for the ICE described in #89088.\n+\n+// check-pass\n+\n+#![allow(indirect_structural_match)]\n+use std::borrow::Cow;\n+\n+const FOO: &A = &A::Field(Cow::Borrowed(\"foo\"));\n+\n+#[derive(PartialEq, Eq)]\n+enum A {\n+    Field(Cow<'static, str>)\n+}\n+\n+fn main() {\n+    let var = A::Field(Cow::Borrowed(\"bar\"));\n+\n+    match &var {\n+        FOO => todo!(),\n+        _ => todo!()\n+    }\n+}"}]}