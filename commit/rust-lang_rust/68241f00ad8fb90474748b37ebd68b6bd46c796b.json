{"sha": "68241f00ad8fb90474748b37ebd68b6bd46c796b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MjQxZjAwYWQ4ZmI5MDQ3NDc0OGIzN2ViZDY4YjZiZDQ2Yzc5NmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-10T11:50:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-10T11:50:46Z"}, "message": "Auto merge of #34178 - shepmaster:llvm-3.7-and-up, r=alexcrichton\n\nReflect supporting only LLVM 3.7+ in the LLVM wrappers\n\nBased on 12abddb06b681f5c1cb389074b5a35d3e260698f, it appears we can drop support for these older LLVM versions. Hopefully, this will make it slightly easier to support the changes needed for LLVM 3.9.\n\nr? @nagisa\n\n/cc @brson", "tree": {"sha": "e12d369a793cb9997f8063558098aeb5ec80c4cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e12d369a793cb9997f8063558098aeb5ec80c4cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68241f00ad8fb90474748b37ebd68b6bd46c796b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68241f00ad8fb90474748b37ebd68b6bd46c796b", "html_url": "https://github.com/rust-lang/rust/commit/68241f00ad8fb90474748b37ebd68b6bd46c796b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68241f00ad8fb90474748b37ebd68b6bd46c796b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9234c11e00d976e69bcab95342b8af469c82d5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9234c11e00d976e69bcab95342b8af469c82d5b", "html_url": "https://github.com/rust-lang/rust/commit/a9234c11e00d976e69bcab95342b8af469c82d5b"}, {"sha": "f3d9de4528e7be9428b5afddec25d9ed4622f305", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3d9de4528e7be9428b5afddec25d9ed4622f305", "html_url": "https://github.com/rust-lang/rust/commit/f3d9de4528e7be9428b5afddec25d9ed4622f305"}], "stats": {"total": 229, "additions": 5, "deletions": 224}, "files": [{"sha": "1e7b04c814cee2ae3f85d19d6a88f93dbcaf933b", "filename": "src/rustllvm/ArchiveWrapper.cpp", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/68241f00ad8fb90474748b37ebd68b6bd46c796b/src%2Frustllvm%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/68241f00ad8fb90474748b37ebd68b6bd46c796b/src%2Frustllvm%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FArchiveWrapper.cpp?ref=68241f00ad8fb90474748b37ebd68b6bd46c796b", "patch": "@@ -11,10 +11,7 @@\n #include \"rustllvm.h\"\n \n #include \"llvm/Object/Archive.h\"\n-\n-#if LLVM_VERSION_MINOR >= 7\n #include \"llvm/Object/ArchiveWriter.h\"\n-#endif\n \n using namespace llvm;\n using namespace llvm::object;\n@@ -34,13 +31,7 @@ struct LLVMRustArchiveMember {\n   ~LLVMRustArchiveMember() {}\n };\n \n-#if LLVM_VERSION_MINOR >= 6\n typedef OwningBinary<Archive> RustArchive;\n-#define GET_ARCHIVE(a) ((a)->getBinary())\n-#else\n-typedef Archive RustArchive;\n-#define GET_ARCHIVE(a) (a)\n-#endif\n \n extern \"C\" void*\n LLVMRustOpenArchive(char *path) {\n@@ -52,7 +43,6 @@ LLVMRustOpenArchive(char *path) {\n         return nullptr;\n     }\n \n-#if LLVM_VERSION_MINOR >= 6\n     ErrorOr<std::unique_ptr<Archive>> archive_or =\n         Archive::create(buf_or.get()->getMemBufferRef());\n \n@@ -63,14 +53,6 @@ LLVMRustOpenArchive(char *path) {\n \n     OwningBinary<Archive> *ret = new OwningBinary<Archive>(\n             std::move(archive_or.get()), std::move(buf_or.get()));\n-#else\n-    std::error_code err;\n-    Archive *ret = new Archive(std::move(buf_or.get()), err);\n-    if (err) {\n-        LLVMRustSetLastError(err.message().c_str());\n-        return nullptr;\n-    }\n-#endif\n \n     return ret;\n }\n@@ -87,7 +69,7 @@ struct RustArchiveIterator {\n \n extern \"C\" RustArchiveIterator*\n LLVMRustArchiveIteratorNew(RustArchive *ra) {\n-    Archive *ar = GET_ARCHIVE(ra);\n+    Archive *ar = ra->getBinary();\n     RustArchiveIterator *rai = new RustArchiveIterator();\n     rai->cur = ar->child_begin();\n     rai->end = ar->child_end();\n@@ -137,16 +119,12 @@ LLVMRustArchiveChildName(const Archive::Child *child, size_t *size) {\n extern \"C\" const char*\n LLVMRustArchiveChildData(Archive::Child *child, size_t *size) {\n     StringRef buf;\n-#if LLVM_VERSION_MINOR >= 7\n     ErrorOr<StringRef> buf_or_err = child->getBuffer();\n     if (buf_or_err.getError()) {\n       LLVMRustSetLastError(buf_or_err.getError().message().c_str());\n       return NULL;\n     }\n     buf = buf_or_err.get();\n-#else\n-    buf = child->getBuffer();\n-#endif\n     *size = buf.size();\n     return buf.data();\n }\n@@ -172,7 +150,6 @@ LLVMRustWriteArchive(char *Dst,\n                      const LLVMRustArchiveMember **NewMembers,\n                      bool WriteSymbtab,\n                      Archive::Kind Kind) {\n-#if LLVM_VERSION_MINOR >= 7\n   std::vector<NewArchiveIterator> Members;\n \n   for (size_t i = 0; i < NumMembers; i++) {\n@@ -196,8 +173,5 @@ LLVMRustWriteArchive(char *Dst,\n   if (!pair.second)\n     return 0;\n   LLVMRustSetLastError(pair.second.message().c_str());\n-#else\n-  LLVMRustSetLastError(\"writing archives not supported with this LLVM version\");\n-#endif\n   return -1;\n }"}, {"sha": "b26ab44601998d9dd89d81d92eae1ac0b7d70760", "filename": "src/rustllvm/ExecutionEngineWrapper.cpp", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68241f00ad8fb90474748b37ebd68b6bd46c796b/src%2Frustllvm%2FExecutionEngineWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/68241f00ad8fb90474748b37ebd68b6bd46c796b/src%2Frustllvm%2FExecutionEngineWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FExecutionEngineWrapper.cpp?ref=68241f00ad8fb90474748b37ebd68b6bd46c796b", "patch": "@@ -90,13 +90,8 @@ extern \"C\" LLVMExecutionEngineRef LLVMBuildExecutionEngine(LLVMModuleRef mod)\n     RustJITMemoryManager *mm = new RustJITMemoryManager;\n \n     ExecutionEngine *ee =\n-    #if LLVM_VERSION_MINOR >= 6\n         EngineBuilder(std::unique_ptr<Module>(unwrap(mod)))\n             .setMCJITMemoryManager(std::unique_ptr<RustJITMemoryManager>(mm))\n-    #else\n-        EngineBuilder(unwrap(mod))\n-            .setMCJITMemoryManager(mm)\n-    #endif\n             .setEngineKind(EngineKind::JIT)\n             .setErrorStr(&error_str)\n             .setTargetOptions(options)"}, {"sha": "3564f338a029f6bb9e25c90894a785f27afa4da9", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 1, "deletions": 52, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/68241f00ad8fb90474748b37ebd68b6bd46c796b/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/68241f00ad8fb90474748b37ebd68b6bd46c796b/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=68241f00ad8fb90474748b37ebd68b6bd46c796b", "patch": "@@ -15,12 +15,8 @@\n #include \"llvm/Support/CBindingWrapping.h\"\n #include \"llvm/Support/FileSystem.h\"\n #include \"llvm/Support/Host.h\"\n-#if LLVM_VERSION_MINOR >= 7\n #include \"llvm/Analysis/TargetLibraryInfo.h\"\n #include \"llvm/Analysis/TargetTransformInfo.h\"\n-#else\n-#include \"llvm/Target/TargetLibraryInfo.h\"\n-#endif\n #include \"llvm/Target/TargetMachine.h\"\n #include \"llvm/Target/TargetSubtargetInfo.h\"\n #include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n@@ -49,7 +45,7 @@ LLVMInitializePasses() {\n   initializeVectorization(Registry);\n   initializeIPO(Registry);\n   initializeAnalysis(Registry);\n-#if LLVM_VERSION_MINOR <= 7\n+#if LLVM_VERSION_MINOR == 7\n   initializeIPA(Registry);\n #endif\n   initializeTransformUtils(Registry);\n@@ -223,17 +219,8 @@ LLVMRustAddAnalysisPasses(LLVMTargetMachineRef TM,\n                           LLVMPassManagerRef PMR,\n                           LLVMModuleRef M) {\n     PassManagerBase *PM = unwrap(PMR);\n-#if LLVM_VERSION_MINOR >= 7\n     PM->add(createTargetTransformInfoWrapperPass(\n           unwrap(TM)->getTargetIRAnalysis()));\n-#else\n-#if LLVM_VERSION_MINOR == 6\n-    PM->add(new DataLayoutPass());\n-#else\n-    PM->add(new DataLayoutPass(unwrap(M)));\n-#endif\n-    unwrap(TM)->addAnalysisPasses(*PM);\n-#endif\n }\n \n extern \"C\" void\n@@ -242,10 +229,8 @@ LLVMRustConfigurePassManagerBuilder(LLVMPassManagerBuilderRef PMB,\n                                     bool MergeFunctions,\n                                     bool SLPVectorize,\n                                     bool LoopVectorize) {\n-#if LLVM_VERSION_MINOR >= 6\n     // Ignore mergefunc for now as enabling it causes crashes.\n     //unwrap(PMB)->MergeFunctions = MergeFunctions;\n-#endif\n     unwrap(PMB)->SLPVectorize = SLPVectorize;\n     unwrap(PMB)->OptLevel = OptLevel;\n     unwrap(PMB)->LoopVectorize = LoopVectorize;\n@@ -258,11 +243,7 @@ LLVMRustAddBuilderLibraryInfo(LLVMPassManagerBuilderRef PMB,\n                               LLVMModuleRef M,\n                               bool DisableSimplifyLibCalls) {\n     Triple TargetTriple(unwrap(M)->getTargetTriple());\n-#if LLVM_VERSION_MINOR >= 7\n     TargetLibraryInfoImpl *TLI = new TargetLibraryInfoImpl(TargetTriple);\n-#else\n-    TargetLibraryInfo *TLI = new TargetLibraryInfo(TargetTriple);\n-#endif\n     if (DisableSimplifyLibCalls)\n       TLI->disableAllFunctions();\n     unwrap(PMB)->LibraryInfo = TLI;\n@@ -275,17 +256,10 @@ LLVMRustAddLibraryInfo(LLVMPassManagerRef PMB,\n                        LLVMModuleRef M,\n                        bool DisableSimplifyLibCalls) {\n     Triple TargetTriple(unwrap(M)->getTargetTriple());\n-#if LLVM_VERSION_MINOR >= 7\n     TargetLibraryInfoImpl TLII(TargetTriple);\n     if (DisableSimplifyLibCalls)\n       TLII.disableAllFunctions();\n     unwrap(PMB)->add(new TargetLibraryInfoWrapperPass(TLII));\n-#else\n-    TargetLibraryInfo *TLI = new TargetLibraryInfo(TargetTriple);\n-    if (DisableSimplifyLibCalls)\n-      TLI->disableAllFunctions();\n-    unwrap(PMB)->add(TLI);\n-#endif\n }\n \n // Unfortunately, the LLVM C API doesn't provide an easy way of iterating over\n@@ -323,25 +297,16 @@ LLVMRustWriteOutputFile(LLVMTargetMachineRef Target,\n   PassManager *PM = unwrap<PassManager>(PMR);\n \n   std::string ErrorInfo;\n-#if LLVM_VERSION_MINOR >= 6\n   std::error_code EC;\n   raw_fd_ostream OS(path, EC, sys::fs::F_None);\n   if (EC)\n     ErrorInfo = EC.message();\n-#else\n-  raw_fd_ostream OS(path, ErrorInfo, sys::fs::F_None);\n-#endif\n   if (ErrorInfo != \"\") {\n     LLVMRustSetLastError(ErrorInfo.c_str());\n     return false;\n   }\n \n-#if LLVM_VERSION_MINOR >= 7\n   unwrap(Target)->addPassesToEmitFile(*PM, OS, FileType, false);\n-#else\n-  formatted_raw_ostream FOS(OS);\n-  unwrap(Target)->addPassesToEmitFile(*PM, FOS, FileType, false);\n-#endif\n   PM->run(*unwrap(M));\n \n   // Apparently `addPassesToEmitFile` adds a pointer to our on-the-stack output\n@@ -358,14 +323,10 @@ LLVMRustPrintModule(LLVMPassManagerRef PMR,\n   PassManager *PM = unwrap<PassManager>(PMR);\n   std::string ErrorInfo;\n \n-#if LLVM_VERSION_MINOR >= 6\n   std::error_code EC;\n   raw_fd_ostream OS(path, EC, sys::fs::F_None);\n   if (EC)\n     ErrorInfo = EC.message();\n-#else\n-  raw_fd_ostream OS(path, ErrorInfo, sys::fs::F_None);\n-#endif\n \n   formatted_raw_ostream FOS(OS);\n \n@@ -428,22 +389,10 @@ extern \"C\" void\n LLVMRustSetDataLayoutFromTargetMachine(LLVMModuleRef Module,\n                                        LLVMTargetMachineRef TMR) {\n     TargetMachine *Target = unwrap(TMR);\n-#if LLVM_VERSION_MINOR >= 7\n     unwrap(Module)->setDataLayout(Target->createDataLayout());\n-#elif LLVM_VERSION_MINOR >= 6\n-    if (const DataLayout *DL = Target->getSubtargetImpl()->getDataLayout())\n-        unwrap(Module)->setDataLayout(DL);\n-#else\n-    if (const DataLayout *DL = Target->getDataLayout())\n-        unwrap(Module)->setDataLayout(DL);\n-#endif\n }\n \n extern \"C\" LLVMTargetDataRef\n LLVMRustGetModuleDataLayout(LLVMModuleRef M) {\n-#if LLVM_VERSION_MINOR >= 7\n     return wrap(&unwrap(M)->getDataLayout());\n-#else\n-    return wrap(unwrap(M)->getDataLayout());\n-#endif\n }"}, {"sha": "fadd95c9a72459fce25a9810baf5213eb090d4ec", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 3, "deletions": 140, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/68241f00ad8fb90474748b37ebd68b6bd46c796b/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/68241f00ad8fb90474748b37ebd68b6bd46c796b/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=68241f00ad8fb90474748b37ebd68b6bd46c796b", "patch": "@@ -243,7 +243,6 @@ extern \"C\" LLVMValueRef LLVMInlineAsm(LLVMTypeRef Ty,\n \n typedef DIBuilder* DIBuilderRef;\n \n-#if LLVM_VERSION_MINOR >= 6\n typedef struct LLVMOpaqueMetadata *LLVMMetadataRef;\n \n namespace llvm {\n@@ -253,29 +252,15 @@ inline Metadata **unwrap(LLVMMetadataRef *Vals) {\n   return reinterpret_cast<Metadata**>(Vals);\n }\n }\n-#else\n-typedef LLVMValueRef LLVMMetadataRef;\n-#endif\n \n template<typename DIT>\n DIT* unwrapDIptr(LLVMMetadataRef ref) {\n     return (DIT*) (ref ? unwrap<MDNode>(ref) : NULL);\n }\n \n-#if LLVM_VERSION_MINOR <= 6\n-template<typename DIT>\n-DIT unwrapDI(LLVMMetadataRef ref) {\n-    return DIT(ref ? unwrap<MDNode>(ref) : NULL);\n-}\n-#else\n #define DIDescriptor DIScope\n #define DIArray DINodeArray\n #define unwrapDI unwrapDIptr\n-#endif\n-\n-#if LLVM_VERSION_MINOR <= 5\n-#define DISubroutineType DICompositeType\n-#endif\n \n extern \"C\" uint32_t LLVMRustDebugMetadataVersion() {\n     return DEBUG_METADATA_VERSION;\n@@ -339,16 +324,10 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateSubroutineType(\n     LLVMMetadataRef File,\n     LLVMMetadataRef ParameterTypes) {\n     return wrap(Builder->createSubroutineType(\n-#if LLVM_VERSION_MINOR <= 7\n+#if LLVM_VERSION_MINOR == 7\n         unwrapDI<DIFile>(File),\n #endif\n-#if LLVM_VERSION_MINOR >= 7\n         DITypeRefArray(unwrap<MDTuple>(ParameterTypes))));\n-#elif LLVM_VERSION_MINOR >= 6\n-        unwrapDI<DITypeArray>(ParameterTypes)));\n-#else\n-        unwrapDI<DIArray>(ParameterTypes)));\n-#endif\n }\n \n extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateFunction(\n@@ -435,11 +414,7 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateStructType(\n         AlignInBits,\n         Flags,\n         unwrapDI<DIType>(DerivedFrom),\n-#if LLVM_VERSION_MINOR >= 7\n         DINodeArray(unwrapDI<MDTuple>(Elements)),\n-#else\n-        unwrapDI<DIArray>(Elements),\n-#endif\n         RunTimeLang,\n         unwrapDI<DIType>(VTableHolder),\n         UniqueId\n@@ -473,9 +448,6 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateLexicalBlock(\n     return wrap(Builder->createLexicalBlock(\n         unwrapDI<DIDescriptor>(Scope),\n         unwrapDI<DIFile>(File), Line, Col\n-#if LLVM_VERSION_MINOR == 5\n-        , 0\n-#endif\n         ));\n }\n \n@@ -490,11 +462,7 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateStaticVariable(\n     bool isLocalToUnit,\n     LLVMValueRef Val,\n     LLVMMetadataRef Decl = NULL) {\n-#if LLVM_VERSION_MINOR >= 6\n     return wrap(Builder->createGlobalVariable(unwrapDI<DIDescriptor>(Context),\n-#else\n-    return wrap(Builder->createStaticVariable(unwrapDI<DIDescriptor>(Context),\n-#endif\n         Name,\n         LinkageName,\n         unwrapDI<DIFile>(File),\n@@ -518,25 +486,6 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateVariable(\n     int64_t* AddrOps,\n     unsigned AddrOpsCount,\n     unsigned ArgNo) {\n-#if LLVM_VERSION_MINOR == 5\n-    if (AddrOpsCount > 0) {\n-        SmallVector<llvm::Value *, 16> addr_ops;\n-        llvm::Type *Int64Ty = Type::getInt64Ty(unwrap<MDNode>(Scope)->getContext());\n-        for (unsigned i = 0; i < AddrOpsCount; ++i)\n-            addr_ops.push_back(ConstantInt::get(Int64Ty, AddrOps[i]));\n-\n-        return wrap(Builder->createComplexVariable(\n-            Tag,\n-            unwrapDI<DIDescriptor>(Scope),\n-            Name,\n-            unwrapDI<DIFile>(File),\n-            LineNo,\n-            unwrapDI<DIType>(Ty),\n-            addr_ops,\n-            ArgNo\n-        ));\n-    }\n-#endif\n #if LLVM_VERSION_MINOR >= 8\n     if (Tag == 0x100) { // DW_TAG_auto_variable\n         return wrap(Builder->createAutoVariable(\n@@ -568,11 +517,7 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateArrayType(\n     LLVMMetadataRef Subscripts) {\n     return wrap(Builder->createArrayType(Size, AlignInBits,\n         unwrapDI<DIType>(Ty),\n-#if LLVM_VERSION_MINOR >= 7\n         DINodeArray(unwrapDI<MDTuple>(Subscripts))\n-#else\n-        unwrapDI<DIArray>(Subscripts)\n-#endif\n     ));\n }\n \n@@ -584,11 +529,7 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateVectorType(\n     LLVMMetadataRef Subscripts) {\n     return wrap(Builder->createVectorType(Size, AlignInBits,\n         unwrapDI<DIType>(Ty),\n-#if LLVM_VERSION_MINOR >= 7\n         DINodeArray(unwrapDI<MDTuple>(Subscripts))\n-#else\n-        unwrapDI<DIArray>(Subscripts)\n-#endif\n     ));\n }\n \n@@ -603,18 +544,9 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderGetOrCreateArray(\n     DIBuilderRef Builder,\n     LLVMMetadataRef* Ptr,\n     unsigned Count) {\n-#if LLVM_VERSION_MINOR >= 7\n     Metadata **DataValue = unwrap(Ptr);\n     return wrap(Builder->getOrCreateArray(\n         ArrayRef<Metadata*>(DataValue, Count)).get());\n-#else\n-    return wrap(Builder->getOrCreateArray(\n-#if LLVM_VERSION_MINOR >= 6\n-        ArrayRef<Metadata*>(unwrap(Ptr), Count)));\n-#else\n-        ArrayRef<Value*>(reinterpret_cast<Value**>(Ptr), Count)));\n-#endif\n-#endif\n }\n \n extern \"C\" LLVMValueRef LLVMDIBuilderInsertDeclareAtEnd(\n@@ -627,18 +559,10 @@ extern \"C\" LLVMValueRef LLVMDIBuilderInsertDeclareAtEnd(\n     LLVMBasicBlockRef InsertAtEnd) {\n     return wrap(Builder->insertDeclare(\n         unwrap(Val),\n-#if LLVM_VERSION_MINOR >= 7\n         unwrap<DILocalVariable>(VarInfo),\n-#else\n-        unwrapDI<DIVariable>(VarInfo),\n-#endif\n-#if LLVM_VERSION_MINOR >= 6\n         Builder->createExpression(\n           llvm::ArrayRef<int64_t>(AddrOps, AddrOpsCount)),\n-#endif\n-#if LLVM_VERSION_MINOR >= 7\n         DebugLoc(cast<MDNode>(unwrap<MetadataAsValue>(DL)->getMetadata())),\n-#endif\n         unwrap(InsertAtEnd)));\n }\n \n@@ -650,22 +574,12 @@ extern \"C\" LLVMValueRef LLVMDIBuilderInsertDeclareBefore(\n     unsigned AddrOpsCount,\n     LLVMValueRef DL,\n     LLVMValueRef InsertBefore) {\n-#if LLVM_VERSION_MINOR >= 6\n-#endif\n     return wrap(Builder->insertDeclare(\n         unwrap(Val),\n-#if LLVM_VERSION_MINOR >= 7\n         unwrap<DILocalVariable>(VarInfo),\n-#else\n-        unwrapDI<DIVariable>(VarInfo),\n-#endif\n-#if LLVM_VERSION_MINOR >= 6\n         Builder->createExpression(\n           llvm::ArrayRef<int64_t>(AddrOps, AddrOpsCount)),\n-#endif\n-#if LLVM_VERSION_MINOR >= 7\n         DebugLoc(cast<MDNode>(unwrap<MetadataAsValue>(DL)->getMetadata())),\n-#endif\n         unwrap<Instruction>(InsertBefore)));\n }\n \n@@ -695,11 +609,7 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateEnumerationType(\n         LineNumber,\n         SizeInBits,\n         AlignInBits,\n-#if LLVM_VERSION_MINOR >= 7\n         DINodeArray(unwrapDI<MDTuple>(Elements)),\n-#else\n-        unwrapDI<DIArray>(Elements),\n-#endif\n         unwrapDI<DIType>(ClassType)));\n }\n \n@@ -724,11 +634,7 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateUnionType(\n         SizeInBits,\n         AlignInBits,\n         Flags,\n-#if LLVM_VERSION_MINOR >= 7\n         DINodeArray(unwrapDI<MDTuple>(Elements)),\n-#else\n-        unwrapDI<DIArray>(Elements),\n-#endif\n         RunTimeLang,\n         UniqueId\n         ));\n@@ -747,12 +653,6 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateTemplateTypeParameter(\n       unwrapDI<DIDescriptor>(Scope),\n       Name,\n       unwrapDI<DIType>(Ty)\n-#if LLVM_VERSION_MINOR <= 6\n-      ,\n-      unwrapDI<MDNode*>(File),\n-      LineNo,\n-      ColumnNo\n-#endif\n       ));\n }\n \n@@ -785,15 +685,8 @@ extern \"C\" void LLVMDICompositeTypeSetTypeArray(\n     LLVMMetadataRef CompositeType,\n     LLVMMetadataRef TypeArray)\n {\n-#if LLVM_VERSION_MINOR >= 7\n     DICompositeType *tmp = unwrapDI<DICompositeType>(CompositeType);\n     Builder->replaceArrays(tmp, DINodeArray(unwrap<MDTuple>(TypeArray)));\n-#elif LLVM_VERSION_MINOR >= 6\n-    DICompositeType tmp = unwrapDI<DICompositeType>(CompositeType);\n-    Builder->replaceArrays(tmp, unwrapDI<DIArray>(TypeArray));\n-#else\n-    unwrapDI<DICompositeType>(CompositeType).setTypeArray(unwrapDI<DIArray>(TypeArray));\n-#endif\n }\n \n extern \"C\" LLVMValueRef LLVMDIBuilderCreateDebugLocation(\n@@ -810,15 +703,7 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateDebugLocation(\n                                        unwrapDIptr<MDNode>(Scope),\n                                        unwrapDIptr<MDNode>(InlinedAt));\n \n-#if LLVM_VERSION_MINOR >= 6\n-    return wrap(MetadataAsValue::get(context, debug_loc.getAsMDNode(\n-#if LLVM_VERSION_MINOR <= 6\n-            context\n-#endif\n-        )));\n-#else\n-    return wrap(debug_loc.getAsMDNode(context));\n-#endif\n+    return wrap(MetadataAsValue::get(context, debug_loc.getAsMDNode()));\n }\n \n extern \"C\" void LLVMWriteTypeToString(LLVMTypeRef Type, RustStringRef str) {\n@@ -838,40 +723,22 @@ extern \"C\" void LLVMWriteValueToString(LLVMValueRef Value, RustStringRef str) {\n extern \"C\" bool\n LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n     Module *Dst = unwrap(dst);\n-#if LLVM_VERSION_MINOR >= 6\n     std::unique_ptr<MemoryBuffer> buf = MemoryBuffer::getMemBufferCopy(StringRef(bc, len));\n-#if LLVM_VERSION_MINOR >= 7\n     ErrorOr<std::unique_ptr<Module>> Src =\n         llvm::getLazyBitcodeModule(std::move(buf), Dst->getContext());\n-#else\n-    ErrorOr<Module *> Src = llvm::getLazyBitcodeModule(std::move(buf), Dst->getContext());\n-#endif\n-#else\n-    MemoryBuffer* buf = MemoryBuffer::getMemBufferCopy(StringRef(bc, len));\n-    ErrorOr<Module *> Src = llvm::getLazyBitcodeModule(buf, Dst->getContext());\n-#endif\n     if (!Src) {\n         LLVMRustSetLastError(Src.getError().message().c_str());\n-#if LLVM_VERSION_MINOR == 5\n-        delete buf;\n-#endif\n         return false;\n     }\n \n     std::string Err;\n \n-#if LLVM_VERSION_MINOR >= 6\n     raw_string_ostream Stream(Err);\n     DiagnosticPrinterRawOStream DP(Stream);\n #if LLVM_VERSION_MINOR >= 8\n     if (Linker::linkModules(*Dst, std::move(Src.get()))) {\n-#elif LLVM_VERSION_MINOR >= 7\n-    if (Linker::LinkModules(Dst, Src->get(), [&](const DiagnosticInfo &DI) { DI.print(DP); })) {\n-#else\n-    if (Linker::LinkModules(Dst, *Src, [&](const DiagnosticInfo &DI) { DI.print(DP); })) {\n-#endif\n #else\n-    if (Linker::LinkModules(Dst, *Src, Linker::DestroySource, &Err)) {\n+    if (Linker::LinkModules(Dst, Src->get(), [&](const DiagnosticInfo &DI) { DI.print(DP); })) {\n #endif\n         LLVMRustSetLastError(Err.c_str());\n         return false;\n@@ -975,11 +842,7 @@ extern \"C\" void LLVMWriteDebugLocToString(\n     RustStringRef str)\n {\n     raw_rust_string_ostream os(str);\n-#if LLVM_VERSION_MINOR >= 7\n     unwrap(dl)->print(os);\n-#else\n-    unwrap(dl)->print(*unwrap(C), os);\n-#endif\n }\n \n DEFINE_SIMPLE_CONVERSION_FUNCTIONS(SMDiagnostic, LLVMSMDiagnosticRef)"}]}