{"sha": "1f232b8e6de8ef170e896a2a98734dd54273349b", "node_id": "C_kwDOAAsO6NoAKDFmMjMyYjhlNmRlOGVmMTcwZTg5NmEyYTk4NzM0ZGQ1NDI3MzM0OWI", "commit": {"author": {"name": "niluxv", "email": "niluxv.opensource.C-h2ty6xl@yandex.com", "date": "2022-04-01T08:38:41Z"}, "committer": {"name": "niluxv", "email": "niluxv.opensource.C-h2ty6xl@yandex.com", "date": "2022-04-01T08:38:41Z"}, "message": "Fix `thread_local!` macro to be compatible with `no_implicit_prelude`\n\nFixes issue  #95533", "tree": {"sha": "0f70d87511c0d7e2e105e149ac1194587f0be7e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f70d87511c0d7e2e105e149ac1194587f0be7e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f232b8e6de8ef170e896a2a98734dd54273349b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f232b8e6de8ef170e896a2a98734dd54273349b", "html_url": "https://github.com/rust-lang/rust/commit/1f232b8e6de8ef170e896a2a98734dd54273349b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f232b8e6de8ef170e896a2a98734dd54273349b/comments", "author": {"login": "niluxv", "id": 34834616, "node_id": "MDQ6VXNlcjM0ODM0NjE2", "avatar_url": "https://avatars.githubusercontent.com/u/34834616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niluxv", "html_url": "https://github.com/niluxv", "followers_url": "https://api.github.com/users/niluxv/followers", "following_url": "https://api.github.com/users/niluxv/following{/other_user}", "gists_url": "https://api.github.com/users/niluxv/gists{/gist_id}", "starred_url": "https://api.github.com/users/niluxv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niluxv/subscriptions", "organizations_url": "https://api.github.com/users/niluxv/orgs", "repos_url": "https://api.github.com/users/niluxv/repos", "events_url": "https://api.github.com/users/niluxv/events{/privacy}", "received_events_url": "https://api.github.com/users/niluxv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "niluxv", "id": 34834616, "node_id": "MDQ6VXNlcjM0ODM0NjE2", "avatar_url": "https://avatars.githubusercontent.com/u/34834616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niluxv", "html_url": "https://github.com/niluxv", "followers_url": "https://api.github.com/users/niluxv/followers", "following_url": "https://api.github.com/users/niluxv/following{/other_user}", "gists_url": "https://api.github.com/users/niluxv/gists{/gist_id}", "starred_url": "https://api.github.com/users/niluxv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niluxv/subscriptions", "organizations_url": "https://api.github.com/users/niluxv/orgs", "repos_url": "https://api.github.com/users/niluxv/repos", "events_url": "https://api.github.com/users/niluxv/events{/privacy}", "received_events_url": "https://api.github.com/users/niluxv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0677edc86e342f333d4828b0ee1ef395a4e70fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0677edc86e342f333d4828b0ee1ef395a4e70fe5", "html_url": "https://github.com/rust-lang/rust/commit/0677edc86e342f333d4828b0ee1ef395a4e70fe5"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "587e453ceef91b348f478bbb4032d0435cceaecf", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f232b8e6de8ef170e896a2a98734dd54273349b/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f232b8e6de8ef170e896a2a98734dd54273349b/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=1f232b8e6de8ef170e896a2a98734dd54273349b", "patch": "@@ -193,7 +193,7 @@ macro_rules! __thread_local_inner {\n             #[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))]\n             {\n                 static mut VAL: $t = INIT_EXPR;\n-                Some(&VAL)\n+                $crate::option::Option::Some(&VAL)\n             }\n \n             // If the platform has support for `#[thread_local]`, use it.\n@@ -209,7 +209,7 @@ macro_rules! __thread_local_inner {\n                 // just get going.\n                 if !$crate::mem::needs_drop::<$t>() {\n                     unsafe {\n-                        return Some(&VAL)\n+                        return $crate::option::Option::Some(&VAL)\n                     }\n                 }\n \n@@ -223,7 +223,7 @@ macro_rules! __thread_local_inner {\n                     let ptr = ptr as *mut $t;\n \n                     unsafe {\n-                        debug_assert_eq!(STATE, 1);\n+                        $crate::debug_assert_eq!(STATE, 1);\n                         STATE = 2;\n                         $crate::ptr::drop_in_place(ptr);\n                     }\n@@ -239,14 +239,14 @@ macro_rules! __thread_local_inner {\n                                 destroy,\n                             );\n                             STATE = 1;\n-                            Some(&VAL)\n+                            $crate::option::Option::Some(&VAL)\n                         }\n                         // 1 == the destructor is registered and the value\n                         //   is valid, so return the pointer.\n-                        1 => Some(&VAL),\n+                        1 => $crate::option::Option::Some(&VAL),\n                         // otherwise the destructor has already run, so we\n                         // can't give access.\n-                        _ => None,\n+                        _ => $crate::option::Option::None,\n                     }\n                 }\n             }\n@@ -269,7 +269,7 @@ macro_rules! __thread_local_inner {\n                             if let $crate::option::Option::Some(value) = init.take() {\n                                 return value;\n                             } else if $crate::cfg!(debug_assertions) {\n-                                unreachable!(\"missing initial value\");\n+                                $crate::unreachable!(\"missing initial value\");\n                             }\n                         }\n                         __init()\n@@ -344,7 +344,7 @@ macro_rules! __thread_local_inner {\n                             if let $crate::option::Option::Some(value) = init.take() {\n                                 return value;\n                             } else if $crate::cfg!(debug_assertions) {\n-                                unreachable!(\"missing default value\");\n+                                $crate::unreachable!(\"missing default value\");\n                             }\n                         }\n                         __init()"}, {"sha": "905c14dc5fd219da60c363dd78bcc9d2c2e4747f", "filename": "src/test/ui/macros/issue-95533.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f232b8e6de8ef170e896a2a98734dd54273349b/src%2Ftest%2Fui%2Fmacros%2Fissue-95533.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f232b8e6de8ef170e896a2a98734dd54273349b/src%2Ftest%2Fui%2Fmacros%2Fissue-95533.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-95533.rs?ref=1f232b8e6de8ef170e896a2a98734dd54273349b", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+\n+#![no_implicit_prelude]\n+// the macro should not rely on the prelude being imported\n+::std::thread_local! { static P: () = (); }\n+::std::thread_local! { static Q: () = const { () }; }\n+\n+fn main () {}"}]}