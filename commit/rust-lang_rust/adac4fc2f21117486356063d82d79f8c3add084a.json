{"sha": "adac4fc2f21117486356063d82d79f8c3add084a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYWM0ZmMyZjIxMTE3NDg2MzU2MDYzZDgyZDc5ZjhjM2FkZDA4NGE=", "commit": {"author": {"name": "bravomikekilo", "email": "bmk1221@126.com", "date": "2019-11-24T05:14:57Z"}, "committer": {"name": "bravomikekilo", "email": "bmk1221@126.com", "date": "2019-11-24T05:14:57Z"}, "message": "do refact and fix some issue", "tree": {"sha": "5d99ff1e3b5b0dcc19aa28633c102490454b3a89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d99ff1e3b5b0dcc19aa28633c102490454b3a89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adac4fc2f21117486356063d82d79f8c3add084a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adac4fc2f21117486356063d82d79f8c3add084a", "html_url": "https://github.com/rust-lang/rust/commit/adac4fc2f21117486356063d82d79f8c3add084a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adac4fc2f21117486356063d82d79f8c3add084a/comments", "author": {"login": "bravomikekilo", "id": 17548436, "node_id": "MDQ6VXNlcjE3NTQ4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/17548436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bravomikekilo", "html_url": "https://github.com/bravomikekilo", "followers_url": "https://api.github.com/users/bravomikekilo/followers", "following_url": "https://api.github.com/users/bravomikekilo/following{/other_user}", "gists_url": "https://api.github.com/users/bravomikekilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/bravomikekilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bravomikekilo/subscriptions", "organizations_url": "https://api.github.com/users/bravomikekilo/orgs", "repos_url": "https://api.github.com/users/bravomikekilo/repos", "events_url": "https://api.github.com/users/bravomikekilo/events{/privacy}", "received_events_url": "https://api.github.com/users/bravomikekilo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bravomikekilo", "id": 17548436, "node_id": "MDQ6VXNlcjE3NTQ4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/17548436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bravomikekilo", "html_url": "https://github.com/bravomikekilo", "followers_url": "https://api.github.com/users/bravomikekilo/followers", "following_url": "https://api.github.com/users/bravomikekilo/following{/other_user}", "gists_url": "https://api.github.com/users/bravomikekilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/bravomikekilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bravomikekilo/subscriptions", "organizations_url": "https://api.github.com/users/bravomikekilo/orgs", "repos_url": "https://api.github.com/users/bravomikekilo/repos", "events_url": "https://api.github.com/users/bravomikekilo/events{/privacy}", "received_events_url": "https://api.github.com/users/bravomikekilo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ebfa908d50a7ef4765d2abb432531d9c98cbb58", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ebfa908d50a7ef4765d2abb432531d9c98cbb58", "html_url": "https://github.com/rust-lang/rust/commit/1ebfa908d50a7ef4765d2abb432531d9c98cbb58"}], "stats": {"total": 132, "additions": 72, "deletions": 60}, "files": [{"sha": "7c57c0560dfc6d62ada217f6e2d50bd28065ce32", "filename": "crates/ra_assists/src/assists/apply_demorgan.rs", "status": "modified", "additions": 9, "deletions": 31, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/adac4fc2f21117486356063d82d79f8c3add084a/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adac4fc2f21117486356063d82d79f8c3add084a/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs?ref=adac4fc2f21117486356063d82d79f8c3add084a", "patch": "@@ -1,6 +1,6 @@\n+use super::invert_if::invert_boolean_expression;\n use hir::db::HirDatabase;\n use ra_syntax::ast::{self, AstNode};\n-use ra_syntax::SyntaxNode;\n \n use crate::{Assist, AssistCtx, AssistId};\n \n@@ -32,18 +32,18 @@ pub(crate) fn apply_demorgan(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist>\n     if !cursor_in_range {\n         return None;\n     }\n-    let lhs = expr.lhs()?.syntax().clone();\n-    let lhs_range = lhs.text_range();\n-    let rhs = expr.rhs()?.syntax().clone();\n-    let rhs_range = rhs.text_range();\n-    let not_lhs = undo_negation(lhs)?;\n-    let not_rhs = undo_negation(rhs)?;\n+    let lhs = expr.lhs()?;\n+    let lhs_range = lhs.syntax().text_range();\n+    let rhs = expr.rhs()?;\n+    let rhs_range = rhs.syntax().text_range();\n+    let not_lhs = invert_boolean_expression(&lhs)?;\n+    let not_rhs = invert_boolean_expression(&rhs)?;\n \n     ctx.add_assist(AssistId(\"apply_demorgan\"), \"apply demorgan's law\", |edit| {\n         edit.target(op_range);\n         edit.replace(op_range, opposite_op);\n-        edit.replace(lhs_range, format!(\"!({}\", not_lhs));\n-        edit.replace(rhs_range, format!(\"{})\", not_rhs));\n+        edit.replace(lhs_range, format!(\"!({}\", not_lhs.syntax().text()));\n+        edit.replace(rhs_range, format!(\"{})\", not_rhs.syntax().text()));\n     })\n }\n \n@@ -56,28 +56,6 @@ fn opposite_logic_op(kind: ast::BinOp) -> Option<&'static str> {\n     }\n }\n \n-// This function tries to undo unary negation, or inequality\n-pub(crate) fn undo_negation(node: SyntaxNode) -> Option<String> {\n-    match ast::Expr::cast(node)? {\n-        ast::Expr::BinExpr(bin) => match bin.op_kind()? {\n-            ast::BinOp::NegatedEqualityTest => {\n-                let lhs = bin.lhs()?.syntax().text();\n-                let rhs = bin.rhs()?.syntax().text();\n-                Some(format!(\"{} == {}\", lhs, rhs))\n-            }\n-            _ => None,\n-        },\n-        ast::Expr::PrefixExpr(pe) => match pe.op_kind()? {\n-            ast::PrefixOp::Not => {\n-                let child = pe.expr()?.syntax().text();\n-                Some(String::from(child))\n-            }\n-            _ => None,\n-        },\n-        _ => None,\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "bababa3e25f38cb2e9c9f45f97a9ff043e17f40c", "filename": "crates/ra_assists/src/assists/invert_if.rs", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/adac4fc2f21117486356063d82d79f8c3add084a/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adac4fc2f21117486356063d82d79f8c3add084a/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs?ref=adac4fc2f21117486356063d82d79f8c3add084a", "patch": "@@ -1,8 +1,7 @@\n use hir::db::HirDatabase;\n use ra_syntax::ast::{self, AstNode};\n-use ra_syntax::{TextRange, TextUnit};\n+use ra_syntax::T;\n \n-use super::apply_demorgan::undo_negation;\n use crate::{Assist, AssistCtx, AssistId};\n \n // Assist: invert_if\n@@ -14,42 +13,56 @@ use crate::{Assist, AssistCtx, AssistId};\n //\n // ```\n // fn main() {\n-//     if<|> !y {A} else {B}\n+//     if<|> !y { A } else { B }\n // }\n // ```\n // ->\n // ```\n // fn main() {\n-//     if y {B} else {A}\n+//     if y { B } else { A }\n // }\n // ```\n \n pub(crate) fn invert_if(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let expr = ctx.find_node_at_offset::<ast::IfExpr>()?;\n-    let expr_range = expr.syntax().text_range();\n-    let if_range = TextRange::offset_len(expr_range.start(), TextUnit::from_usize(2));\n+    let if_keyword = ctx.find_token_at_offset(T![if])?;\n+    let expr = ast::IfExpr::cast(if_keyword.parent())?;\n+    let if_range = if_keyword.text_range();\n     let cursor_in_range = ctx.frange.range.is_subrange(&if_range);\n     if !cursor_in_range {\n         return None;\n     }\n \n-    let cond = expr.condition()?.expr()?.syntax().clone();\n+    let cond = expr.condition()?.expr()?;\n     let then_node = expr.then_branch()?.syntax().clone();\n \n     if let ast::ElseBranch::Block(else_block) = expr.else_branch()? {\n-        let flip_cond = undo_negation(cond.clone())?;\n-        let cond_range = cond.text_range();\n+        let flip_cond = invert_boolean_expression(&cond)?;\n+        let cond_range = cond.syntax().text_range();\n         let else_node = else_block.syntax();\n         let else_range = else_node.text_range();\n         let then_range = then_node.text_range();\n-        ctx.add_assist(AssistId(\"invert_if\"), \"invert if branches\", |edit| {\n+        return ctx.add_assist(AssistId(\"invert_if\"), \"invert if branches\", |edit| {\n             edit.target(if_range);\n-            edit.replace(cond_range, flip_cond);\n+            edit.replace(cond_range, flip_cond.syntax().text());\n             edit.replace(else_range, then_node.text());\n             edit.replace(then_range, else_node.text());\n-        })\n-    } else {\n-        None\n+        });\n+    }\n+\n+    None\n+}\n+\n+pub(crate) fn invert_boolean_expression(expr: &ast::Expr) -> Option<ast::Expr> {\n+    match expr {\n+        ast::Expr::BinExpr(bin) => match bin.op_kind()? {\n+            ast::BinOp::NegatedEqualityTest => bin.replace_op(T![==]).map(|it| it.into()),\n+            _ => None,\n+        },\n+        ast::Expr::PrefixExpr(pe) => match pe.op_kind()? {\n+            ast::PrefixOp::Not => pe.expr(),\n+            _ => None,\n+        },\n+        _ => None,\n     }\n }\n \n@@ -63,27 +76,27 @@ mod tests {\n     fn invert_if_remove_inequality() {\n         check_assist(\n             invert_if,\n-            \"fn f() { i<|>f x != 3 {1} else {3 + 2} }\",\n-            \"fn f() { i<|>f x == 3 {3 + 2} else {1} }\",\n+            \"fn f() { i<|>f x != 3 { 1 } else { 3 + 2 } }\",\n+            \"fn f() { i<|>f x == 3 { 3 + 2 } else { 1 } }\",\n         )\n     }\n \n     #[test]\n     fn invert_if_remove_not() {\n         check_assist(\n             invert_if,\n-            \"fn f() { <|>if !cond {3 * 2} else {1} }\",\n-            \"fn f() { <|>if cond {1} else {3 * 2} }\",\n+            \"fn f() { <|>if !cond { 3 * 2 } else { 1 } }\",\n+            \"fn f() { <|>if cond { 1 } else { 3 * 2 } }\",\n         )\n     }\n \n     #[test]\n     fn invert_if_doesnt_apply_with_cursor_not_on_if() {\n-        check_assist_not_applicable(invert_if, \"fn f() { if !<|>cond {3 * 2} else {1} }\")\n+        check_assist_not_applicable(invert_if, \"fn f() { if !<|>cond { 3 * 2 } else { 1 } }\")\n     }\n \n     #[test]\n     fn invert_if_doesnt_apply_without_negated() {\n-        check_assist_not_applicable(invert_if, \"fn f() { i<|>f cond {3 * 2} else {1} }\")\n+        check_assist_not_applicable(invert_if, \"fn f() { i<|>f cond { 3 * 2 } else { 1 } }\")\n     }\n }"}, {"sha": "3c716c2d121a392f2b9db699675eaa67c16faa87", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adac4fc2f21117486356063d82d79f8c3add084a/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adac4fc2f21117486356063d82d79f8c3add084a/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=adac4fc2f21117486356063d82d79f8c3add084a", "patch": "@@ -347,12 +347,12 @@ fn doctest_invert_if() {\n         \"invert_if\",\n         r#####\"\n fn main() {\n-    if<|> !y {A} else {B}\n+    if<|> !y { A } else { B }\n }\n \"#####,\n         r#####\"\n fn main() {\n-    if y {B} else {A}\n+    if y { B } else { A }\n }\n \"#####,\n     )"}, {"sha": "95bf9db14733b0e49e433449a2e332b3e9b7f71e", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/adac4fc2f21117486356063d82d79f8c3add084a/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adac4fc2f21117486356063d82d79f8c3add084a/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=adac4fc2f21117486356063d82d79f8c3add084a", "patch": "@@ -13,11 +13,21 @@ use crate::{\n         make::{self, tokens},\n         AstNode, TypeBoundsOwner,\n     },\n-    AstToken, Direction, InsertPosition, SmolStr, SyntaxElement,\n+    AstToken, Direction, InsertPosition, SmolStr, SyntaxElement, SyntaxKind,\n     SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n     SyntaxNode, SyntaxToken, T,\n };\n \n+impl ast::BinExpr {\n+    #[must_use]\n+    pub fn replace_op(&self, op: SyntaxKind) -> Option<ast::BinExpr> {\n+        let op_node: SyntaxElement = self.op_details()?.0.into();\n+        let to_insert: Option<SyntaxElement> = Some(tokens::op(op).into());\n+        let replace_range = RangeInclusive::new(op_node.clone(), op_node);\n+        Some(replace_children(self, replace_range, to_insert.into_iter()))\n+    }\n+}\n+\n impl ast::FnDef {\n     #[must_use]\n     pub fn with_body(&self, body: ast::Block) -> ast::FnDef {"}, {"sha": "2fd039837828185dfbe1b2e1a332d59a2478d9f7", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adac4fc2f21117486356063d82d79f8c3add084a/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adac4fc2f21117486356063d82d79f8c3add084a/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=adac4fc2f21117486356063d82d79f8c3add084a", "patch": "@@ -127,7 +127,7 @@ pub enum BinOp {\n }\n \n impl ast::BinExpr {\n-    fn op_details(&self) -> Option<(SyntaxToken, BinOp)> {\n+    pub fn op_details(&self) -> Option<(SyntaxToken, BinOp)> {\n         self.syntax().children_with_tokens().filter_map(|it| it.into_token()).find_map(|c| {\n             let bin_op = match c.kind() {\n                 T![||] => BinOp::BooleanOr,"}, {"sha": "40db570da0b58e0a7c416a265d7900be1ca6b41c", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/adac4fc2f21117486356063d82d79f8c3add084a/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adac4fc2f21117486356063d82d79f8c3add084a/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=adac4fc2f21117486356063d82d79f8c3add084a", "patch": "@@ -173,10 +173,21 @@ fn ast_from_text<N: AstNode>(text: &str) -> N {\n }\n \n pub mod tokens {\n-    use crate::{AstNode, Parse, SourceFile, SyntaxKind::*, SyntaxToken, T};\n+    use crate::{AstNode, Parse, SourceFile, SyntaxKind, SyntaxKind::*, SyntaxToken, T};\n     use once_cell::sync::Lazy;\n \n-    static SOURCE_FILE: Lazy<Parse<SourceFile>> = Lazy::new(|| SourceFile::parse(\",\\n; ;\"));\n+    static SOURCE_FILE: Lazy<Parse<SourceFile>> =\n+        Lazy::new(|| SourceFile::parse(\"const C: () = (1 != 1, 2 == 2)\\n;\"));\n+\n+    pub fn op(op: SyntaxKind) -> SyntaxToken {\n+        SOURCE_FILE\n+            .tree()\n+            .syntax()\n+            .descendants_with_tokens()\n+            .filter_map(|it| it.into_token())\n+            .find(|it| it.kind() == op)\n+            .unwrap()\n+    }\n \n     pub fn comma() -> SyntaxToken {\n         SOURCE_FILE"}, {"sha": "6f4c30bee3d769bc4841a88bafafa58fd25d0fa6", "filename": "docs/user/assists.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adac4fc2f21117486356063d82d79f8c3add084a/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/adac4fc2f21117486356063d82d79f8c3add084a/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=adac4fc2f21117486356063d82d79f8c3add084a", "patch": "@@ -339,12 +339,12 @@ on `if`.\n ```rust\n // BEFORE\n fn main() {\n-    if\u2503 !y {A} else {B}\n+    if\u2503 !y { A } else { B }\n }\n \n // AFTER\n fn main() {\n-    if y {B} else {A}\n+    if y { B } else { A }\n }\n ```\n "}]}