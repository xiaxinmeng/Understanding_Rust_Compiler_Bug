{"sha": "ac71a7f7cba1c0b543d1ebd928b6a175ce2049bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNzFhN2Y3Y2JhMWMwYjU0M2QxZWJkOTI4YjZhMTc1Y2UyMDQ5YmI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-30T21:08:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-30T21:08:04Z"}, "message": "Rollup merge of #63999 - GuillaumeGomez:as-ref-missing-links, r=Mark-Simulacrum\n\nAdd missing links on AsRef trait\n\ncc @rust-lang/docs", "tree": {"sha": "71c916a72af5e4643b761e7cc4a3e00659b343a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71c916a72af5e4643b761e7cc4a3e00659b343a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac71a7f7cba1c0b543d1ebd928b6a175ce2049bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdaZA0CRBK7hj4Ov3rIwAAdHIIAGGq5gNKcpZpCZ3VatFXJR8m\nj3HZJbdUakpuyeBrhzvkJgOQ6QPTlq8K0yEC7FTWCAfiQWHAEdm+q+f0E0FUC4I2\nhSYUx+lFic9oPjkYJApJqewWsBw5xZRaR4cgMksT6QO4TYtoRw0ElqjwvNFFmBmC\npcTsyhiEROWzjYSPlz1LrePaFO5aDgSR5d40NvNOBEMJPY25T7L467HMWDB8Rr1T\n1Ymxyx4hQhbaqQEeZQXyv/+SfqBTuTVaxJL6p1ih3E23/MFToDd+J1DjhASQw+IC\npX6Ee9f9BECizdglypDUr6CUeMwCnMxQZlwkblZDYbOrvaZobaLfLzol/tFUPlc=\n=nfb2\n-----END PGP SIGNATURE-----\n", "payload": "tree 71c916a72af5e4643b761e7cc4a3e00659b343a0\nparent 5f07ff70870bc976ffdc691f75cf5a710f940c60\nparent 0e7424653e82187bd6b17bf90239247d92bb5753\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567199284 +0200\ncommitter GitHub <noreply@github.com> 1567199284 +0200\n\nRollup merge of #63999 - GuillaumeGomez:as-ref-missing-links, r=Mark-Simulacrum\n\nAdd missing links on AsRef trait\n\ncc @rust-lang/docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac71a7f7cba1c0b543d1ebd928b6a175ce2049bb", "html_url": "https://github.com/rust-lang/rust/commit/ac71a7f7cba1c0b543d1ebd928b6a175ce2049bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac71a7f7cba1c0b543d1ebd928b6a175ce2049bb/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f07ff70870bc976ffdc691f75cf5a710f940c60", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f07ff70870bc976ffdc691f75cf5a710f940c60", "html_url": "https://github.com/rust-lang/rust/commit/5f07ff70870bc976ffdc691f75cf5a710f940c60"}, {"sha": "0e7424653e82187bd6b17bf90239247d92bb5753", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e7424653e82187bd6b17bf90239247d92bb5753", "html_url": "https://github.com/rust-lang/rust/commit/0e7424653e82187bd6b17bf90239247d92bb5753"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "402a7b2c95a46f1e4638ddb5c4500f1dfd379003", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ac71a7f7cba1c0b543d1ebd928b6a175ce2049bb/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac71a7f7cba1c0b543d1ebd928b6a175ce2049bb/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=ac71a7f7cba1c0b543d1ebd928b6a175ce2049bb", "patch": "@@ -104,22 +104,17 @@ pub const fn identity<T>(x: T) -> T { x }\n /// If you need to do a costly conversion it is better to implement [`From`] with type\n /// `&T` or write a custom function.\n ///\n-/// `AsRef` has the same signature as [`Borrow`], but `Borrow` is different in few aspects:\n+/// `AsRef` has the same signature as [`Borrow`], but [`Borrow`] is different in few aspects:\n ///\n-/// - Unlike `AsRef`, `Borrow` has a blanket impl for any `T`, and can be used to accept either\n+/// - Unlike `AsRef`, [`Borrow`] has a blanket impl for any `T`, and can be used to accept either\n ///   a reference or a value.\n-/// - `Borrow` also requires that `Hash`, `Eq` and `Ord` for borrowed value are\n+/// - [`Borrow`] also requires that [`Hash`], [`Eq`] and [`Ord`] for borrowed value are\n ///   equivalent to those of the owned value. For this reason, if you want to\n-///   borrow only a single field of a struct you can implement `AsRef`, but not `Borrow`.\n-///\n-/// [`Borrow`]: ../../std/borrow/trait.Borrow.html\n+///   borrow only a single field of a struct you can implement `AsRef`, but not [`Borrow`].\n ///\n /// **Note: This trait must not fail**. If the conversion can fail, use a\n /// dedicated method which returns an [`Option<T>`] or a [`Result<T, E>`].\n ///\n-/// [`Option<T>`]: ../../std/option/enum.Option.html\n-/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n-///\n /// # Generic Implementations\n ///\n /// - `AsRef` auto-dereferences if the inner type is a reference or a mutable\n@@ -132,9 +127,16 @@ pub const fn identity<T>(x: T) -> T { x }\n /// converted to the specified type `T`.\n ///\n /// For example: By creating a generic function that takes an `AsRef<str>` we express that we\n-/// want to accept all references that can be converted to `&str` as an argument.\n-/// Since both [`String`] and `&str` implement `AsRef<str>` we can accept both as input argument.\n+/// want to accept all references that can be converted to [`&str`] as an argument.\n+/// Since both [`String`] and [`&str`] implement `AsRef<str>` we can accept both as input argument.\n ///\n+/// [`Option<T>`]: ../../std/option/enum.Option.html\n+/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n+/// [`Borrow`]: ../../std/borrow/trait.Borrow.html\n+/// [`Hash`]: ../../std/hash/trait.Hash.html\n+/// [`Eq`]: ../../std/cmp/trait.Eq.html\n+/// [`Ord`]: ../../std/cmp/trait.Ord.html\n+/// [`&str`]: ../../std/primitive.str.html\n /// [`String`]: ../../std/string/struct.String.html\n ///\n /// ```"}]}