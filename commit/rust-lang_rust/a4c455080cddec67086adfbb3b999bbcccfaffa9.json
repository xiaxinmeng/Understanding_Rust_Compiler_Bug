{"sha": "a4c455080cddec67086adfbb3b999bbcccfaffa9", "node_id": "C_kwDOAAsO6NoAKGE0YzQ1NTA4MGNkZGVjNjcwODZhZGZiYjNiOTk5YmJjY2NmYWZmYTk", "commit": {"author": {"name": "Yoshua Wuyts", "email": "2467194+yoshuawuyts@users.noreply.github.com", "date": "2022-06-08T11:15:50Z"}, "committer": {"name": "Yoshua Wuyts", "email": "2467194+yoshuawuyts@users.noreply.github.com", "date": "2022-06-08T13:21:16Z"}, "message": "update docs for `std::future::IntoFuture`", "tree": {"sha": "8f06b864dd08bbfd6f6e332a48043e997fcebaf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f06b864dd08bbfd6f6e332a48043e997fcebaf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4c455080cddec67086adfbb3b999bbcccfaffa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4c455080cddec67086adfbb3b999bbcccfaffa9", "html_url": "https://github.com/rust-lang/rust/commit/a4c455080cddec67086adfbb3b999bbcccfaffa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4c455080cddec67086adfbb3b999bbcccfaffa9/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e45d9973b2665897a768312e971b82cc62633103", "url": "https://api.github.com/repos/rust-lang/rust/commits/e45d9973b2665897a768312e971b82cc62633103", "html_url": "https://github.com/rust-lang/rust/commit/e45d9973b2665897a768312e971b82cc62633103"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "d22094130ad9a1cf0eca2686b847a94bdc65606a", "filename": "library/core/src/future/into_future.rs", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/a4c455080cddec67086adfbb3b999bbcccfaffa9/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4c455080cddec67086adfbb3b999bbcccfaffa9/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs?ref=a4c455080cddec67086adfbb3b999bbcccfaffa9", "patch": "@@ -1,6 +1,109 @@\n use crate::future::Future;\n \n /// Conversion into a `Future`.\n+///\n+/// By implementing `Intofuture` for a type, you define how it will be\n+/// converted to a future.\n+///\n+/// # `.await` desugaring\n+///\n+/// The `.await` keyword desugars into a call to `IntoFuture::into_future`\n+/// first before polling the future to completion. `IntoFuture` is implemented\n+/// for all `T: Future` which means the `into_future` method will be available\n+/// on all futures.\n+///\n+/// ```no_run\n+/// #![feature(into_future)]\n+///\n+/// use std::future::IntoFuture;\n+///\n+/// # async fn foo() {\n+/// let v = async { \"meow\" };\n+/// let mut fut = v.into_future();\n+/// assert_eq!(\"meow\", fut.await);\n+/// # }\n+/// ```\n+///\n+/// # Async builders\n+///\n+/// When implementing futures manually there will often be a choice between\n+/// implementing `Future` or `IntoFuture` for a type. Implementing `Future` is a\n+/// good choice in most cases. But implementing `IntoFuture` is most useful when\n+/// implementing \"async builder\" types, which allows the type to be modified\n+/// multiple times before being `.await`ed.\n+///\n+/// ```rust\n+/// #![feature(into_future)]\n+///\n+/// use std::future::{ready, Ready, IntoFuture};\n+///\n+/// /// Eventually multiply two numbers\n+/// pub struct Multiply {\n+///     num: u16,\n+///     factor: u16,\n+/// }\n+///\n+/// impl Multiply {\n+///     /// Construct a new instance of `Multiply`.\n+///     pub fn new(num: u16, factor: u16) -> Self {\n+///         Self { num, factor }\n+///     }\n+///\n+///     /// Set the number to multiply by the factor.\n+///     pub fn number(mut self, num: u16) -> Self {\n+///         self.num = num;\n+///         self\n+///     }\n+///\n+///     /// Set the factor to multiply the number with.\n+///     pub fn factor(mut self, factor: u16) -> Self {\n+///         self.factor = factor;\n+///         self\n+///     }\n+/// }\n+///\n+/// impl IntoFuture for Multiply {\n+///     type Output = u16;\n+///     type IntoFuture = Ready<Self::Output>;\n+///\n+///     fn into_future(self) -> Self::IntoFuture {\n+///         ready(self.num * self.factor)\n+///     }\n+/// }\n+///\n+/// // NOTE: Rust does not yet have an `async fn main` function, that functionality\n+/// // currently only exists in the ecosystem.\n+/// async fn run() {\n+///     let num = Multiply::new(0, 0)  // initialize the builder to number: 0, factor: 0\n+///         .number(2)                 // change the number to 2\n+///         .factor(2)                 // change the factor to 2\n+///         .await;                    // convert to future and .await\n+///\n+///     assert_eq!(num, 4);\n+/// }\n+/// ```\n+///\n+/// # Usage in trait bounds\n+///\n+/// Using `IntoFuture` in trait bounds allows a function to be generic over both\n+/// `Future` and `IntoFuture`. This is convenient for users of the function, so\n+/// when they are using it they don't have to make an extra call to\n+/// `IntoFuture::into_future` to obtain an instance of `Future`:\n+///\n+/// ```rust\n+/// #![feature(into_future)]\n+///\n+/// use std::future::IntoFuture;\n+///\n+/// /// Convert the output of a future to a string.\n+/// async fn fut_to_string<Fut>(fut: Fut) -> String\n+/// where\n+///     Fut: IntoFuture,\n+///     Fut::Output: std::fmt::Debug,\n+/// {\n+///     format!(\"{:?}\", fut.await)\n+/// }\n+/// ```\n #[unstable(feature = \"into_future\", issue = \"67644\")]\n pub trait IntoFuture {\n     /// The output that the future will produce on completion.\n@@ -12,6 +115,22 @@ pub trait IntoFuture {\n     type IntoFuture: Future<Output = Self::Output>;\n \n     /// Creates a future from a value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```no_run\n+    /// #![feature(into_future)]\n+    ///\n+    /// use std::future::IntoFuture;\n+    ///\n+    /// # async fn foo() {\n+    /// let v = async { \"meow\" };\n+    /// let mut fut = v.into_future();\n+    /// assert_eq!(\"meow\", fut.await);\n+    /// # }\n+    /// ```\n     #[unstable(feature = \"into_future\", issue = \"67644\")]\n     #[lang = \"into_future\"]\n     fn into_future(self) -> Self::IntoFuture;"}]}