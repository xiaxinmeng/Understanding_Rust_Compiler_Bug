{"sha": "dcdfff61d299954557c1a6e3fa9ebb83fe8af30c", "node_id": "C_kwDOAAsO6NoAKGRjZGZmZjYxZDI5OTk1NDU1N2MxYTZlM2ZhOWViYjgzZmU4YWYzMGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-10T09:20:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-10T09:20:11Z"}, "message": "Rollup merge of #112481 - compiler-errors:new-solver-ignore-bad-tests, r=lqd\n\nIgnore tests that hang in new solver\n\nThis makes it easier to run `--compare-mode=next-solver`, and we can revisit these tests later to find out how to make them less overflowy \ud83d\ude05\n\nr? `@lcnr`", "tree": {"sha": "1b4cb2c2cb64500f4efa7f45dfe39cfe38ccc537", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b4cb2c2cb64500f4efa7f45dfe39cfe38ccc537"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkhEBLCRBK7hj4Ov3rIwAA5twIADIwLA5jCSM9gScxZrwh/rY+\ntObuwrcDZ+H8bQazAncqqq/XA/NNMxQex46iiHSobOvlbN0ywX7I5K9wx2zjXJTN\nt6jiZceYAf/Tu2Df6SuSb4FR/+5jAdL4AD3JawaVQQIwkqAyx34tRlSjjadvVbFq\nqGNgZYsmnAzfY+4di6W81ODjgzqb3suImhmmLr1yDdZuxWO3H0cmxuHj85vsuSy+\nMrRbD0Piun0IiqLvcetr0H1uWs6UeP+9YVbH+L3/0c4T5433UxuMCHVv8wv8lX9w\nVjmbwkhlCQsiVsZBpWAO8G7P1wBAW1jvIc3H7hOMvPXifYomD3bmmm5+BZLHFG4=\n=/GVQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b4cb2c2cb64500f4efa7f45dfe39cfe38ccc537\nparent fc9fff6d59ef4bbcfa8782704d3d9026948ae16b\nparent 3152ac34bd36bd3b4e580f65f4c95b964fbfe34b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686388811 +0200\ncommitter GitHub <noreply@github.com> 1686388811 +0200\n\nRollup merge of #112481 - compiler-errors:new-solver-ignore-bad-tests, r=lqd\n\nIgnore tests that hang in new solver\n\nThis makes it easier to run `--compare-mode=next-solver`, and we can revisit these tests later to find out how to make them less overflowy \ud83d\ude05\n\nr? `@lcnr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c", "html_url": "https://github.com/rust-lang/rust/commit/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc9fff6d59ef4bbcfa8782704d3d9026948ae16b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9fff6d59ef4bbcfa8782704d3d9026948ae16b", "html_url": "https://github.com/rust-lang/rust/commit/fc9fff6d59ef4bbcfa8782704d3d9026948ae16b"}, {"sha": "3152ac34bd36bd3b4e580f65f4c95b964fbfe34b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3152ac34bd36bd3b4e580f65f4c95b964fbfe34b", "html_url": "https://github.com/rust-lang/rust/commit/3152ac34bd36bd3b4e580f65f4c95b964fbfe34b"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "d064ebceffd5ccb1c4dd8516175da607b497cf85", "filename": "tests/ui/closures/issue-72408-nested-closures-exponential.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c/tests%2Fui%2Fclosures%2Fissue-72408-nested-closures-exponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c/tests%2Fui%2Fclosures%2Fissue-72408-nested-closures-exponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fissue-72408-nested-closures-exponential.rs?ref=dcdfff61d299954557c1a6e3fa9ebb83fe8af30c", "patch": "@@ -1,4 +1,5 @@\n // build-pass\n+// ignore-compare-mode-next-solver (hangs)\n \n // Closures include captured types twice in a type tree.\n //"}, {"sha": "c109be005238fcdfa6350bc6449a4dfd863a252c", "filename": "tests/ui/issues/issue-37311-type-length-limit/issue-37311.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c/tests%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c/tests%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.rs?ref=dcdfff61d299954557c1a6e3fa9ebb83fe8af30c", "patch": "@@ -1,5 +1,6 @@\n // build-fail\n // normalize-stderr-test: \".nll/\" -> \"/\"\n+// ignore-compare-mode-next-solver (hangs)\n \n trait Mirror {\n     type Image;"}, {"sha": "87832dd29b284c2a41d474558aae1716c4bf8871", "filename": "tests/ui/issues/issue-37311-type-length-limit/issue-37311.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c/tests%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c/tests%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr?ref=dcdfff61d299954557c1a6e3fa9ebb83fe8af30c", "patch": "@@ -1,11 +1,11 @@\n error: reached the recursion limit while instantiating `<(&(&(..., ...), ...), ...) as Foo>::recurse`\n-  --> $DIR/issue-37311.rs:17:9\n+  --> $DIR/issue-37311.rs:18:9\n    |\n LL |         (self, self).recurse();\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `<T as Foo>::recurse` defined here\n-  --> $DIR/issue-37311.rs:16:5\n+  --> $DIR/issue-37311.rs:17:5\n    |\n LL |     fn recurse(&self) {\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "8e9cc84ec0339f2e977a183d6e4c807c8bb3d040", "filename": "tests/ui/iterators/issue-58952-filter-type-length.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c/tests%2Fui%2Fiterators%2Fissue-58952-filter-type-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c/tests%2Fui%2Fiterators%2Fissue-58952-filter-type-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiterators%2Fissue-58952-filter-type-length.rs?ref=dcdfff61d299954557c1a6e3fa9ebb83fe8af30c", "patch": "@@ -1,4 +1,6 @@\n // run-pass\n+// ignore-compare-mode-next-solver (hangs)\n+\n //! This snippet causes the type length to blowup exponentially,\n //! so check that we don't accidentally exceed the type length limit.\n // FIXME: Once the size of iterator adaptors is further reduced,"}, {"sha": "75dcdc59f21c1a292ac3288ce0258a71cb5181d2", "filename": "tests/ui/recursion/issue-83150.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c/tests%2Fui%2Frecursion%2Fissue-83150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c/tests%2Fui%2Frecursion%2Fissue-83150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frecursion%2Fissue-83150.rs?ref=dcdfff61d299954557c1a6e3fa9ebb83fe8af30c", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -Copt-level=0\n // normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n //~^^^ ERROR overflow evaluating the requirement\n+// ignore-compare-mode-next-solver (hangs)\n \n fn main() {\n     let mut iter = 0u8..1;"}, {"sha": "eae58771a4169f4678fd5888dfe460a90dbffdf0", "filename": "tests/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c/tests%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c/tests%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frecursion%2Fissue-83150.stderr?ref=dcdfff61d299954557c1a6e3fa9ebb83fe8af30c", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/issue-83150.rs:11:1\n+  --> $DIR/issue-83150.rs:12:1\n    |\n LL | fn func<T: Iterator<Item = u8>>(iter: &mut T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n@@ -9,10 +9,10 @@ LL |     func(&mut iter.map(|x| x + 1))\n    = help: a `loop` may express intention better if this is on purpose\n    = note: `#[warn(unconditional_recursion)]` on by default\n \n-error[E0275]: overflow evaluating the requirement `Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:12:24: 12:27]>: Iterator`\n+error[E0275]: overflow evaluating the requirement `Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:13:24: 13:27]>: Iterator`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n-   = note: required for `&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:12:24: 12:27]>` to implement `Iterator`\n+   = note: required for `&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:13:24: 13:27]>` to implement `Iterator`\n    = note: 65 redundant requirements hidden\n    = note: required for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<..., ...>, ...>, ...>, ...>, ...>, ...>, ...>` to implement `Iterator`\n    = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/issue-83150/issue-83150.long-type-hash.txt'"}, {"sha": "312d5d08c7df8433ed10549b757d6c5ab61b8cc9", "filename": "tests/ui/traits/issue-91949-hangs-on-recursion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c/tests%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c/tests%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs?ref=dcdfff61d299954557c1a6e3fa9ebb83fe8af30c", "patch": "@@ -3,6 +3,7 @@\n // error-pattern: overflow evaluating the requirement `<std::iter::Empty<()> as Iterator>::Item == ()`\n // error-pattern: function cannot return without recursing\n // normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n+// ignore-compare-mode-next-solver (hangs)\n \n // Regression test for #91949.\n // This hanged *forever* on 1.56, fixed by #90423."}, {"sha": "c721dd41a2c153a4afeb4ef9939b4a24c545ead9", "filename": "tests/ui/traits/issue-91949-hangs-on-recursion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c/tests%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdfff61d299954557c1a6e3fa9ebb83fe8af30c/tests%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr?ref=dcdfff61d299954557c1a6e3fa9ebb83fe8af30c", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/issue-91949-hangs-on-recursion.rs:23:1\n+  --> $DIR/issue-91949-hangs-on-recursion.rs:24:1\n    |\n LL | / fn recurse<T>(elements: T) -> Vec<char>\n LL | | where\n@@ -16,7 +16,7 @@ error[E0275]: overflow evaluating the requirement `<std::iter::Empty<()> as Iter\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"512\"]` attribute to your crate (`issue_91949_hangs_on_recursion`)\n note: required for `IteratorOfWrapped<(), std::iter::Empty<()>>` to implement `Iterator`\n-  --> $DIR/issue-91949-hangs-on-recursion.rs:16:32\n+  --> $DIR/issue-91949-hangs-on-recursion.rs:17:32\n    |\n LL | impl<T, I: Iterator<Item = T>> Iterator for IteratorOfWrapped<T, I> {\n    |                     --------   ^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^"}]}