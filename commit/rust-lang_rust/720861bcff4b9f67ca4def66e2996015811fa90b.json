{"sha": "720861bcff4b9f67ca4def66e2996015811fa90b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMDg2MWJjZmY0YjlmNjdjYTRkZWY2NmUyOTk2MDE1ODExZmE5MGI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-05T15:16:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-05T15:16:52Z"}, "message": "Lopps && logical ops", "tree": {"sha": "9bed19490f802860e0c17532eaed853dfeb548bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bed19490f802860e0c17532eaed853dfeb548bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/720861bcff4b9f67ca4def66e2996015811fa90b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/720861bcff4b9f67ca4def66e2996015811fa90b", "html_url": "https://github.com/rust-lang/rust/commit/720861bcff4b9f67ca4def66e2996015811fa90b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/720861bcff4b9f67ca4def66e2996015811fa90b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0291cd8c2ec1d6d164caaa743f7484416e9b3f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5", "html_url": "https://github.com/rust-lang/rust/commit/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5"}], "stats": {"total": 54, "additions": 40, "deletions": 14}, "files": [{"sha": "d5bdb206ce62cfd59be500d03cf4ca3391a31c86", "filename": "src/grammar.ron", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/720861bcff4b9f67ca4def66e2996015811fa90b/src%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/720861bcff4b9f67ca4def66e2996015811fa90b/src%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar.ron?ref=720861bcff4b9f67ca4def66e2996015811fa90b", "patch": "@@ -41,6 +41,8 @@ Grammar(\n         [\">=\", \"GTEQ\"],\n         [\"+=\", \"PLUSEQ\"],\n         [\"-=\", \"MINUSEQ\"],\n+        [\"&&\", \"AMPERSANDAMPERSAND\"],\n+        [\"||\", \"PIPEPIPE\"],\n     ],\n     keywords: [\n         \"use\",\n@@ -143,6 +145,7 @@ Grammar(\n         \"LAMBDA_EXPR\",\n         \"IF_EXPR\",\n         \"WHILE_EXPR\",\n+        \"LOOP_EXPR\",\n         \"BLOCK_EXPR\",\n         \"RETURN_EXPR\",\n         \"MATCH_EXPR\","}, {"sha": "65b9e5ef0cefa5947ae37b33ec28b5b0482b35db", "filename": "src/grammar/expressions/atom.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/720861bcff4b9f67ca4def66e2996015811fa90b/src%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720861bcff4b9f67ca4def66e2996015811fa90b/src%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fexpressions%2Fatom.rs?ref=720861bcff4b9f67ca4def66e2996015811fa90b", "patch": "@@ -48,6 +48,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMark\n         MOVE_KW if la == PIPE => lambda_expr(p),\n         IF_KW => if_expr(p),\n         WHILE_KW => while_expr(p),\n+        LOOP_KW => loop_expr(p),\n         MATCH_KW => match_expr(p),\n         UNSAFE_KW if la == L_CURLY => block_expr(p),\n         L_CURLY => block_expr(p),\n@@ -143,6 +144,18 @@ fn while_expr(p: &mut Parser) -> CompletedMarker {\n     m.complete(p, WHILE_EXPR)\n }\n \n+// test loop_expr\n+// fn foo() {\n+//     loop {};\n+// }\n+fn loop_expr(p: &mut Parser) -> CompletedMarker {\n+    assert!(p.at(LOOP_KW));\n+    let m = p.start();\n+    p.bump();\n+    block(p);\n+    m.complete(p, LOOP_EXPR)\n+}\n+\n // test cond\n // fn foo() { if let Some(_) = None {} }\n fn cond(p: &mut Parser) {"}, {"sha": "18e3f579874a1080a7e0842ef923a7388c3a6524", "filename": "src/grammar/expressions/mod.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/720861bcff4b9f67ca4def66e2996015811fa90b/src%2Fgrammar%2Fexpressions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720861bcff4b9f67ca4def66e2996015811fa90b/src%2Fgrammar%2Fexpressions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fexpressions%2Fmod.rs?ref=720861bcff4b9f67ca4def66e2996015811fa90b", "patch": "@@ -56,27 +56,34 @@ enum Op {\n //     x += 1;\n //     1 + 1 <= 2 * 3;\n //     z -= 3 >= 0;\n+//     true || true && false;\n // }\n fn current_op(p: &Parser) -> (u8, Op) {\n-    if p.at_compound2(L_ANGLE, EQ) {\n-        return (3, Op::Composite(LTEQ, 2));\n-    }\n-    if p.at_compound2(R_ANGLE, EQ) {\n-        return (3, Op::Composite(GTEQ, 2));\n-    }\n     if p.at_compound2(PLUS, EQ) {\n         return (1, Op::Composite(PLUSEQ, 2));\n     }\n     if p.at_compound2(MINUS, EQ) {\n         return (1, Op::Composite(MINUSEQ, 2));\n     }\n+    if p.at_compound2(PIPE, PIPE) {\n+        return (3, Op::Composite(PIPEPIPE, 2));\n+    }\n+    if p.at_compound2(AMPERSAND, AMPERSAND) {\n+        return (4, Op::Composite(AMPERSANDAMPERSAND, 2));\n+    }\n+    if p.at_compound2(L_ANGLE, EQ) {\n+        return (5, Op::Composite(LTEQ, 2));\n+    }\n+    if p.at_compound2(R_ANGLE, EQ) {\n+        return (5, Op::Composite(GTEQ, 2));\n+    }\n \n     let bp = match p.current() {\n         EQ => 1,\n         DOTDOT => 2,\n-        EQEQ | NEQ => 3,\n-        MINUS | PLUS => 4,\n-        STAR | SLASH => 5,\n+        EQEQ | NEQ => 5,\n+        MINUS | PLUS => 6,\n+        STAR | SLASH => 7,\n         _ => 0,\n     };\n     (bp, Op::Simple)"}, {"sha": "20f01c505d7abe492123add4bf0a7a34c27f7492", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/720861bcff4b9f67ca4def66e2996015811fa90b/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720861bcff4b9f67ca4def66e2996015811fa90b/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=720861bcff4b9f67ca4def66e2996015811fa90b", "patch": "@@ -44,6 +44,8 @@ pub enum SyntaxKind {\n     GTEQ,\n     PLUSEQ,\n     MINUSEQ,\n+    AMPERSANDAMPERSAND,\n+    PIPEPIPE,\n     USE_KW,\n     FN_KW,\n     STRUCT_KW,\n@@ -133,6 +135,7 @@ pub enum SyntaxKind {\n     LAMBDA_EXPR,\n     IF_EXPR,\n     WHILE_EXPR,\n+    LOOP_EXPR,\n     BLOCK_EXPR,\n     RETURN_EXPR,\n     MATCH_EXPR,\n@@ -272,6 +275,8 @@ impl SyntaxKind {\n             GTEQ => &SyntaxInfo { name: \"GTEQ\" },\n             PLUSEQ => &SyntaxInfo { name: \"PLUSEQ\" },\n             MINUSEQ => &SyntaxInfo { name: \"MINUSEQ\" },\n+            AMPERSANDAMPERSAND => &SyntaxInfo { name: \"AMPERSANDAMPERSAND\" },\n+            PIPEPIPE => &SyntaxInfo { name: \"PIPEPIPE\" },\n             USE_KW => &SyntaxInfo { name: \"USE_KW\" },\n             FN_KW => &SyntaxInfo { name: \"FN_KW\" },\n             STRUCT_KW => &SyntaxInfo { name: \"STRUCT_KW\" },\n@@ -361,6 +366,7 @@ impl SyntaxKind {\n             LAMBDA_EXPR => &SyntaxInfo { name: \"LAMBDA_EXPR\" },\n             IF_EXPR => &SyntaxInfo { name: \"IF_EXPR\" },\n             WHILE_EXPR => &SyntaxInfo { name: \"WHILE_EXPR\" },\n+            LOOP_EXPR => &SyntaxInfo { name: \"LOOP_EXPR\" },\n             BLOCK_EXPR => &SyntaxInfo { name: \"BLOCK_EXPR\" },\n             RETURN_EXPR => &SyntaxInfo { name: \"RETURN_EXPR\" },\n             MATCH_EXPR => &SyntaxInfo { name: \"MATCH_EXPR\" },\n@@ -520,6 +526,8 @@ impl SyntaxKind {\n             GTEQ => \">=\",\n             PLUSEQ => \"+=\",\n             MINUSEQ => \"-=\",\n+            AMPERSANDAMPERSAND => \"&&\",\n+            PIPEPIPE => \"||\",\n \n             USE_KW => \"use\",\n             FN_KW => \"fn\","}, {"sha": "48be5aebe9c9a6c8c224c5a15f5d55b66a026de9", "filename": "tests/data/parser/inline/0079_compound_ops.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5/tests%2Fdata%2Fparser%2Finline%2F0079_compound_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5/tests%2Fdata%2Fparser%2Finline%2F0079_compound_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0079_compound_ops.rs?ref=b0291cd8c2ec1d6d164caaa743f7484416e9b3f5", "patch": "@@ -1,5 +0,0 @@\n-fn foo() {\n-    x += 1;\n-    1 + 1 <= 2 * 3;\n-    z -= 3 >= 0;\n-}"}]}