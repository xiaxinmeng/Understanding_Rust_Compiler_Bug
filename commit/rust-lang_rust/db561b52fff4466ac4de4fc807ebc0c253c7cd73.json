{"sha": "db561b52fff4466ac4de4fc807ebc0c253c7cd73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNTYxYjUyZmZmNDQ2NmFjNGRlNGZjODA3ZWJjMGMyNTNjN2NkNzM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-06T00:44:35Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-06T00:44:35Z"}, "message": "Degrade emitter size cache to just a flat hashtable with regular flushes (sigh) and re-introduce horrible bounce-off-spill hack for DIV, MUL, etc.", "tree": {"sha": "8c1a2482f839e5e6b55122a0c0cafb3dfd06471c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c1a2482f839e5e6b55122a0c0cafb3dfd06471c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db561b52fff4466ac4de4fc807ebc0c253c7cd73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db561b52fff4466ac4de4fc807ebc0c253c7cd73", "html_url": "https://github.com/rust-lang/rust/commit/db561b52fff4466ac4de4fc807ebc0c253c7cd73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db561b52fff4466ac4de4fc807ebc0c253c7cd73/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9da8101cc83116c3804393a1abe3eb5e1d0dc02a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9da8101cc83116c3804393a1abe3eb5e1d0dc02a", "html_url": "https://github.com/rust-lang/rust/commit/9da8101cc83116c3804393a1abe3eb5e1d0dc02a"}], "stats": {"total": 106, "additions": 73, "deletions": 33}, "files": [{"sha": "172d866143017d84dd9a99475c1a0daf0f7446e0", "filename": "src/boot/be/il.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db561b52fff4466ac4de4fc807ebc0c253c7cd73/src%2Fboot%2Fbe%2Fil.ml", "raw_url": "https://github.com/rust-lang/rust/raw/db561b52fff4466ac4de4fc807ebc0c253c7cd73/src%2Fboot%2Fbe%2Fil.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fil.ml?ref=db561b52fff4466ac4de4fc807ebc0c253c7cd73", "patch": "@@ -695,7 +695,7 @@ type emitter = { mutable emit_pc: int;\n                  emit_target_specific: (emitter -> quad -> unit);\n                  mutable emit_quads: quads;\n                  emit_annotations: (int,string) Hashtbl.t;\n-                 emit_size_cache: ((size,operand) Hashtbl.t) Stack.t;\n+                 emit_size_cache: (size,operand) Hashtbl.t;\n                  emit_node: node_id option;\n                }\n \n@@ -722,7 +722,7 @@ let new_emitter\n     emit_target_specific = emit_target_specific;\n     emit_quads = Array.create 4 badq;\n     emit_annotations = Hashtbl.create 0;\n-    emit_size_cache = Stack.create ();\n+    emit_size_cache = Hashtbl.create 0;\n     emit_node = node;\n   }\n ;;"}, {"sha": "55b101bbd348c9063ad2d65c79d3dfa1f07d54e4", "filename": "src/boot/be/x86.ml", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/db561b52fff4466ac4de4fc807ebc0c253c7cd73/src%2Fboot%2Fbe%2Fx86.ml", "raw_url": "https://github.com/rust-lang/rust/raw/db561b52fff4466ac4de4fc807ebc0c253c7cd73/src%2Fboot%2Fbe%2Fx86.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fx86.ml?ref=db561b52fff4466ac4de4fc807ebc0c253c7cd73", "patch": "@@ -302,19 +302,49 @@ let emit_target_specific\n               | Il.IMOD | Il.UMOD ->\n                   let dst_eax = hr_like_cell eax dst in\n                   let lhs_eax = hr_like_op eax lhs in\n-                  let rhs_ecx = hr_like_op ecx lhs in\n-                    if lhs <> (Il.Cell lhs_eax)\n-                    then mov lhs_eax lhs;\n-                    if rhs <> (Il.Cell rhs_ecx)\n-                    then mov rhs_ecx rhs;\n+                  let rhs_ecx = hr_like_op ecx rhs in\n+                    (* Horrible: we bounce complex mul inputs off spill slots\n+                     * to ensure non-interference between the temporaries used\n+                     * during mem-base-reg reloads and the registers we're\n+                     * preparing.  *)\n+                  let next_spill_like op =\n+                    Il.Mem (Il.next_spill_slot e\n+                              (Il.ScalarTy (Il.operand_scalar_ty op)))\n+                  in\n+                  let is_mem op =\n+                    match op with\n+                        Il.Cell (Il.Mem _) -> true\n+                      | _ -> false\n+                  in\n+                  let bounce_lhs = is_mem lhs in\n+                  let bounce_rhs = is_mem rhs in\n+                  let lhs_spill = next_spill_like lhs in\n+                  let rhs_spill = next_spill_like rhs in\n+\n+                    if bounce_lhs\n+                    then mov lhs_spill lhs;\n+\n+                    if bounce_rhs\n+                    then mov rhs_spill rhs;\n+\n+                    mov lhs_eax\n+                      (if bounce_lhs\n+                       then (Il.Cell lhs_spill)\n+                       else lhs);\n+\n+                    mov rhs_ecx\n+                      (if bounce_rhs\n+                       then (Il.Cell rhs_spill)\n+                       else rhs);\n+                    \n                     put (Il.Binary\n                            { b with\n                                Il.binary_lhs = (Il.Cell lhs_eax);\n                                Il.binary_rhs = (Il.Cell rhs_ecx);\n                                Il.binary_dst = dst_eax; });\n                     if dst <> dst_eax\n                     then mov dst (Il.Cell dst_eax);\n-\n+                    \n               | _ when (Il.Cell dst) <> lhs ->\n                   mov dst lhs;\n                   put (Il.Binary"}, {"sha": "b708bb268ff4e0f728485d127c04d72c6fb811e7", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/db561b52fff4466ac4de4fc807ebc0c253c7cd73/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/db561b52fff4466ac4de4fc807ebc0c253c7cd73/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=db561b52fff4466ac4de4fc807ebc0c253c7cd73", "patch": "@@ -163,7 +163,6 @@ let trans_visitor\n          abi.Abi.abi_emit_target_specific\n          vregs_ok fnid\n     in\n-      Stack.push (Hashtbl.create 0) e.Il.emit_size_cache;\n       Stack.push e emitters;\n   in\n \n@@ -172,16 +171,20 @@ let trans_visitor\n \n   let pop_emitter _ = ignore (Stack.pop emitters) in\n   let emitter _ = Stack.top emitters in\n-  let emitter_size_cache _ = Stack.top (emitter()).Il.emit_size_cache in\n-  let push_emitter_size_cache _ =\n-    Stack.push\n-      (Hashtbl.copy (emitter_size_cache()))\n-      (emitter()).Il.emit_size_cache\n+  let emitter_size_cache _ = (emitter()).Il.emit_size_cache in\n+  let flush_emitter_size_cache _ =\n+    Hashtbl.clear (emitter_size_cache())\n   in\n-  let pop_emitter_size_cache _ =\n-    ignore (Stack.pop (emitter()).Il.emit_size_cache)\n+\n+  let emit q =\n+    begin\n+      match q with\n+        Il.Jmp _ -> flush_emitter_size_cache();\n+        | _ -> ()\n+    end;        \n+    Il.emit (emitter()) q\n   in\n-  let emit q = Il.emit (emitter()) q in\n+\n   let next_vreg _ = Il.next_vreg (emitter()) in\n   let next_vreg_cell t = Il.next_vreg_cell (emitter()) t in\n   let next_spill_cell t =\n@@ -190,12 +193,17 @@ let trans_visitor\n     let spill_ta = (spill_mem, Il.ScalarTy t) in\n       Il.Mem spill_ta\n   in\n-  let mark _ : quad_idx = (emitter()).Il.emit_pc in\n+  let mark _ : quad_idx =\n+    flush_emitter_size_cache ();\n+    (emitter()).Il.emit_pc\n+  in\n   let patch_existing (jmp:quad_idx) (targ:quad_idx) : unit =\n-    Il.patch_jump (emitter()) jmp targ\n+    Il.patch_jump (emitter()) jmp targ;\n+    flush_emitter_size_cache ();\n   in\n   let patch (i:quad_idx) : unit =\n     Il.patch_jump (emitter()) i (mark());\n+    flush_emitter_size_cache ();\n     (* Insert a dead quad to ensure there's an otherwise-unused\n      * jump-target here.\n      *)\n@@ -583,7 +591,13 @@ let trans_visitor\n                 (string_of_size size)));\n     let sub_sz = calculate_sz ty_params in\n     match htab_search (emitter_size_cache()) size with\n-        Some op -> op\n+        Some op ->\n+          iflog (fun _ -> annotate\n+                   (Printf.sprintf \"cached size %s is %s\"\n+                      (string_of_size size)\n+                      (oper_str op)));\n+          op\n+\n       | _ ->\n           let res =\n             match size with\n@@ -674,9 +688,7 @@ let trans_visitor\n                      (Printf.sprintf \"calculated size %s is %s\"\n                         (string_of_size size)\n                         (oper_str res)));\n-\n-            (* FIXME: this appears to be incorrect; investigate why.*)\n-            (* htab_put (emitter_size_cache()) size res; *)\n+            htab_put (emitter_size_cache()) size res;\n             res\n \n \n@@ -1926,8 +1938,8 @@ let trans_visitor\n       : quad_idx list =\n     emit (Il.cmp (Il.Cell (Il.Reg (force_to_reg lhs))) rhs);\n     let jmp = mark() in\n-    emit (Il.jmp cjmp Il.CodeNone);\n-    [ jmp ]\n+      emit (Il.jmp cjmp Il.CodeNone);\n+      [ jmp ]\n \n   and trans_compare\n       ?ty_params:(ty_params=get_ty_params_of_current_frame())\n@@ -1946,7 +1958,6 @@ let trans_visitor\n       | _ -> trans_compare_simple cjmp lhs rhs\n \n   and trans_cond (invert:bool) (expr:Ast.expr) : quad_idx list =\n-\n     let anno _ =\n       iflog\n         begin\n@@ -2078,15 +2089,14 @@ let trans_visitor\n             trans_atom a\n \n   and trans_block (block:Ast.block) : unit =\n+    flush_emitter_size_cache();\n     trace_str cx.ctxt_sess.Session.sess_trace_block\n       \"entering block\";\n-    push_emitter_size_cache ();\n     emit (Il.Enter (Hashtbl.find cx.ctxt_block_fixups block.id));\n     Array.iter trans_stmt block.node;\n     trace_str cx.ctxt_sess.Session.sess_trace_block\n       \"exiting block\";\n     emit Il.Leave;\n-    pop_emitter_size_cache ();\n     trace_str cx.ctxt_sess.Session.sess_trace_block\n       \"exited block\";\n \n@@ -4398,11 +4408,11 @@ let trans_visitor\n                     let back_jmp =\n                       trans_compare_simple Il.JB (Il.Cell dptr) (Il.Cell dlim)\n                     in\n-                    List.iter\n-                      (fun j -> patch_existing j back_jmp_targ) back_jmp;\n-                    let v = next_vreg_cell word_sty in\n-                      mov v (Il.Cell src_fill);\n-                      add_to dst_fill (Il.Cell v);\n+                      List.iter\n+                        (fun j -> patch_existing j back_jmp_targ) back_jmp;\n+                      let v = next_vreg_cell word_sty in\n+                        mov v (Il.Cell src_fill);\n+                        add_to dst_fill (Il.Cell v);\n         | t ->\n             begin\n               bug () \"unsupported vector-append type %a\" Ast.sprintf_ty t"}]}