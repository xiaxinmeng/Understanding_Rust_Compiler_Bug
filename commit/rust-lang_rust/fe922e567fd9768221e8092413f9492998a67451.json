{"sha": "fe922e567fd9768221e8092413f9492998a67451", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlOTIyZTU2N2ZkOTc2ODIyMWU4MDkyNDEzZjk0OTI5OThhNjc0NTE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-06T20:51:15Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-16T18:21:18Z"}, "message": "Lower inline const down to MIR", "tree": {"sha": "6a22df1af5778f9129a26aff443f40503221384d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a22df1af5778f9129a26aff443f40503221384d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe922e567fd9768221e8092413f9492998a67451", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl+J5J4ACgkQgTGiTgx5\n76/H4w//XQ3hPFRuM+0PJ72d/jtAFZmDnyL8CaE8mVhDGpbXSyznY0HAv4tauX1H\nu499nNHGF0PiWw+N6zW0TLEgK75pv0wCAR0QplF7Qbkzj1GeUqv8X5xEjhjOOQRP\nG9DLkFpJKFF1ZQAB02oh8ElEfcEmETLv+tiVFJGcZ1Lh2EJ7saZ2ACn1o9N+lW+t\nExeiwOe+gM35U0igS15KiImR95w/8aNdpvwY/JpjDptmgg7NcYbO2W8aGLhHgsDU\nobhxAaI6Ljqmr1+WDyCD8O/fZLFIoqEPy3jTkc92JbCVWepCCtHTLC+AcoCLKPqz\ne8EoMTOpDYjw4BdnVV6WY7yaRk52UicOaRdmaF7b6oizLlu1jjyfLUlDOVbFSLJ7\nxdgoTyHXk1QfOAQm1wZQNDGA+3/HtfmGbYp/VJHB8UceVrx3fRQBFOnbWyMATd04\nwZ4Kc16OwfcoLEqaf7LCWa6bDM1QNIryzaTxAu+xePCEq5G6YgqLcGyMMoRA1eyQ\nWoKct+jQtjsAQFcwVClYqvGxvE8MtGZuqLWFBy8Z634V/zpOLw90EPK1/aLLrsz4\nXvBB9fk1PpjVf+7/rUt8zlZR2UEtAUyu7OAqXHSvg96+Exj44t7tLBuZvF1+RKbY\nV9MtVpJR5IRyhZvgM1Go03butcMjbPZg08lTKWzW46zihfGmJ24=\n=I9ns\n-----END PGP SIGNATURE-----", "payload": "tree 6a22df1af5778f9129a26aff443f40503221384d\nparent 66e254314d7fbb0defa2feb3b56ab212aafae933\nauthor Santiago Pastorino <spastorino@gmail.com> 1602017475 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1602872478 -0300\n\nLower inline const down to MIR\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe922e567fd9768221e8092413f9492998a67451", "html_url": "https://github.com/rust-lang/rust/commit/fe922e567fd9768221e8092413f9492998a67451", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe922e567fd9768221e8092413f9492998a67451/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66e254314d7fbb0defa2feb3b56ab212aafae933", "url": "https://api.github.com/repos/rust-lang/rust/commits/66e254314d7fbb0defa2feb3b56ab212aafae933", "html_url": "https://github.com/rust-lang/rust/commit/66e254314d7fbb0defa2feb3b56ab212aafae933"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "0ebed5c34806db8eef8bb260e5f8d51f8c81f1f4", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=fe922e567fd9768221e8092413f9492998a67451", "patch": "@@ -1361,6 +1361,7 @@ impl Expr<'_> {\n     pub fn precedence(&self) -> ExprPrecedence {\n         match self.kind {\n             ExprKind::Box(_) => ExprPrecedence::Box,\n+            ExprKind::ConstBlock(_) => ExprPrecedence::ConstBlock,\n             ExprKind::Array(_) => ExprPrecedence::Array,\n             ExprKind::Call(..) => ExprPrecedence::Call,\n             ExprKind::MethodCall(..) => ExprPrecedence::MethodCall,\n@@ -1446,6 +1447,7 @@ impl Expr<'_> {\n             | ExprKind::LlvmInlineAsm(..)\n             | ExprKind::AssignOp(..)\n             | ExprKind::Lit(_)\n+            | ExprKind::ConstBlock(..)\n             | ExprKind::Unary(..)\n             | ExprKind::Box(..)\n             | ExprKind::AddrOf(..)\n@@ -1501,6 +1503,8 @@ pub fn is_range_literal(expr: &Expr<'_>) -> bool {\n pub enum ExprKind<'hir> {\n     /// A `box x` expression.\n     Box(&'hir Expr<'hir>),\n+    /// Allow anonymous constants from an inline `const` block\n+    ConstBlock(AnonConst),\n     /// An array (e.g., `[a, b, c, d]`).\n     Array(&'hir [Expr<'hir>]),\n     /// A function call."}, {"sha": "35615af0fc7dfeb3153b532cfa097c1747738360", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=fe922e567fd9768221e8092413f9492998a67451", "patch": "@@ -1068,6 +1068,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n         ExprKind::Array(subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }\n+        ExprKind::ConstBlock(ref anon_const) => visitor.visit_anon_const(anon_const),\n         ExprKind::Repeat(ref element, ref count) => {\n             visitor.visit_expr(element);\n             visitor.visit_anon_const(count)"}, {"sha": "4686b4989ae527b135f4de05fce7cc00b787a367", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=fe922e567fd9768221e8092413f9492998a67451", "patch": "@@ -1135,6 +1135,15 @@ impl<'a> State<'a> {\n         self.end()\n     }\n \n+    fn print_expr_anon_const(&mut self, anon_const: &hir::AnonConst) {\n+        self.ibox(INDENT_UNIT);\n+        self.s.word_space(\"const\");\n+        self.s.word(\"{\");\n+        self.print_anon_const(anon_const);\n+        self.s.word(\"}\");\n+        self.end()\n+    }\n+\n     fn print_expr_repeat(&mut self, element: &hir::Expr<'_>, count: &hir::AnonConst) {\n         self.ibox(INDENT_UNIT);\n         self.s.word(\"[\");\n@@ -1287,6 +1296,9 @@ impl<'a> State<'a> {\n             hir::ExprKind::Array(ref exprs) => {\n                 self.print_expr_vec(exprs);\n             }\n+            hir::ExprKind::ConstBlock(ref anon_const) => {\n+                self.print_expr_anon_const(anon_const);\n+            }\n             hir::ExprKind::Repeat(ref element, ref count) => {\n                 self.print_expr_repeat(&element, count);\n             }"}, {"sha": "3a36ad590c506faa0842a51e55a2b2d3ced1645d", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=fe922e567fd9768221e8092413f9492998a67451", "patch": "@@ -33,6 +33,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Constant { span, user_ty, literal }\n             }\n             ExprKind::StaticRef { literal, .. } => Constant { span, user_ty: None, literal },\n+            ExprKind::ConstBlock { value } => Constant { span, user_ty: None, literal: value },\n             _ => span_bug!(span, \"expression is not a valid constant {:?}\", kind),\n         }\n     }"}, {"sha": "443025c4f84581dbd2becaad2a4d962faf084ffd", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=fe922e567fd9768221e8092413f9492998a67451", "patch": "@@ -254,6 +254,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Continue { .. }\n             | ExprKind::Return { .. }\n             | ExprKind::Literal { .. }\n+            | ExprKind::ConstBlock { .. }\n             | ExprKind::StaticRef { .. }\n             | ExprKind::InlineAsm { .. }\n             | ExprKind::LlvmInlineAsm { .. }"}, {"sha": "4033cc6cf46c4ed673f1d5ddfee1508d378d3dfa", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=fe922e567fd9768221e8092413f9492998a67451", "patch": "@@ -234,6 +234,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Yield { .. }\n             | ExprKind::Literal { .. }\n+            | ExprKind::ConstBlock { .. }\n             | ExprKind::StaticRef { .. }\n             | ExprKind::Block { .. }\n             | ExprKind::Match { .. }"}, {"sha": "ac5cf187aa01bced7ceaf74bc114a1f4d72798bd", "filename": "compiler/rustc_mir_build/src/build/expr/category.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs?ref=fe922e567fd9768221e8092413f9492998a67451", "patch": "@@ -68,7 +68,9 @@ impl Category {\n             | ExprKind::ThreadLocalRef(_)\n             | ExprKind::LlvmInlineAsm { .. } => Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n \n-            ExprKind::Literal { .. } | ExprKind::StaticRef { .. } => Some(Category::Constant),\n+            ExprKind::ConstBlock { .. } | ExprKind::Literal { .. } | ExprKind::StaticRef { .. } => {\n+                Some(Category::Constant)\n+            }\n \n             ExprKind::Loop { .. }\n             | ExprKind::Block { .. }"}, {"sha": "a268b0b46ff51980017c5798c7004d78912cd98c", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=fe922e567fd9768221e8092413f9492998a67451", "patch": "@@ -454,6 +454,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Array { .. }\n             | ExprKind::Tuple { .. }\n             | ExprKind::Closure { .. }\n+            | ExprKind::ConstBlock { .. }\n             | ExprKind::Literal { .. }\n             | ExprKind::ThreadLocalRef(_)\n             | ExprKind::StaticRef { .. } => {"}, {"sha": "731bd954246cecf8cdc3cbb54bb244d546d432e8", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=fe922e567fd9768221e8092413f9492998a67451", "patch": "@@ -511,6 +511,12 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             inputs: asm.inputs_exprs.to_ref(),\n         },\n \n+        hir::ExprKind::ConstBlock(ref anon_const) => {\n+            let anon_const_def_id = cx.tcx.hir().local_def_id(anon_const.hir_id);\n+            let value = ty::Const::from_anon_const(cx.tcx, anon_const_def_id);\n+\n+            ExprKind::ConstBlock { value }\n+        }\n         // Now comes the rote stuff:\n         hir::ExprKind::Repeat(ref v, ref count) => {\n             let count_def_id = cx.tcx.hir().local_def_id(count.hir_id);"}, {"sha": "f2a2ef0d8f2bcf5ae8d44ea4eabc05f13c53fdf8", "filename": "compiler/rustc_mir_build/src/thir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs?ref=fe922e567fd9768221e8092413f9492998a67451", "patch": "@@ -232,6 +232,9 @@ crate enum ExprKind<'tcx> {\n     Return {\n         value: Option<ExprRef<'tcx>>,\n     },\n+    ConstBlock {\n+        value: &'tcx Const<'tcx>,\n+    },\n     Repeat {\n         value: ExprRef<'tcx>,\n         count: &'tcx Const<'tcx>,"}, {"sha": "b05ddb3b46452d9f6d749e111b182c9897a564d5", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=fe922e567fd9768221e8092413f9492998a67451", "patch": "@@ -856,6 +856,11 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             *self.lower_path(qpath, expr.hir_id, expr.span).kind\n         } else {\n             let (lit, neg) = match expr.kind {\n+                hir::ExprKind::ConstBlock(ref anon_const) => {\n+                    let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n+                    let value = ty::Const::from_anon_const(self.tcx, anon_const_def_id);\n+                    return *self.const_to_pat(value, expr.hir_id, expr.span, false).kind;\n+                }\n                 hir::ExprKind::Lit(ref lit) => (lit, false),\n                 hir::ExprKind::Unary(hir::UnOp::UnNeg, ref expr) => {\n                     let lit = match expr.kind {"}, {"sha": "ae810b9e79a5f85569db03f8a96d3ca218274c7e", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe922e567fd9768221e8092413f9492998a67451/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=fe922e567fd9768221e8092413f9492998a67451", "patch": "@@ -432,6 +432,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n             | hir::ExprKind::Break(..)\n             | hir::ExprKind::Continue(_)\n             | hir::ExprKind::Lit(_)\n+            | hir::ExprKind::ConstBlock(..)\n             | hir::ExprKind::Ret(..)\n             | hir::ExprKind::Block(..)\n             | hir::ExprKind::Assign(..)\n@@ -1232,6 +1233,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n \n             hir::ExprKind::Lit(..)\n+            | hir::ExprKind::ConstBlock(..)\n             | hir::ExprKind::Err\n             | hir::ExprKind::Path(hir::QPath::TypeRelative(..))\n             | hir::ExprKind::Path(hir::QPath::LangItem(..)) => succ,\n@@ -1478,6 +1480,7 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr<'tcx>) {\n         | hir::ExprKind::Break(..)\n         | hir::ExprKind::Continue(..)\n         | hir::ExprKind::Lit(_)\n+        | hir::ExprKind::ConstBlock(..)\n         | hir::ExprKind::Block(..)\n         | hir::ExprKind::AddrOf(..)\n         | hir::ExprKind::Struct(..)"}]}