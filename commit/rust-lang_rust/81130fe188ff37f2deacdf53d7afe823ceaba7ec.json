{"sha": "81130fe188ff37f2deacdf53d7afe823ceaba7ec", "node_id": "C_kwDOAAsO6NoAKDgxMTMwZmUxODhmZjM3ZjJkZWFjZGY1M2Q3YWZlODIzY2VhYmE3ZWM", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2021-10-27T13:25:00Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2021-10-27T15:00:57Z"}, "message": "replace `&` with `&&` in {integer}::checked_div\n\nUsing short-circuit operators makes it easier to perform some kinds of\nsource code analysis, like MC/DC code coverage (a requirement in\nsafety-critical environments). The optimized x86 assembly is the same\nbetween the old and new versions:\n\n```\nxor eax, eax\ntest esi, esi\nje .LBB0_1\ncmp edi, -2147483648\njne .LBB0_4\ncmp esi, -1\njne .LBB0_4\nret\n.LBB0_1:\nret\n.LBB0_4:\nmov eax, edi\ncdq\nidiv esi\nmov edx, eax\nmov eax, 1\nret\n```", "tree": {"sha": "f8069d81d3139bfc496da4ed369126cd564d0e3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8069d81d3139bfc496da4ed369126cd564d0e3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81130fe188ff37f2deacdf53d7afe823ceaba7ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmF5aa4ACgkQzXazX3c0\ndp4iaQ/8D4CMUDMoHQgryty4VhQxCmWWrFYd2EoEsODr0e3/CXRi33kjBI6v+4fL\nj1imyNu2HENuNlpfm9dBNN4RFm9gPI5BZPOk+gI/uVUzSnPAq4hpieSUAU7e/u7k\nCVVA8pJvPdOPJxgpl3CVLWQAq8rdyAwxod8/IDQR6F+UHEH1Jkn5f9Ewnvs1lLvz\nkCcRtPZ2Aq96Xyy01Aq58lffVnA9S2meBjp2BmRv1CI7MHcvbo0dNq3dzV7HK+i+\nSSjLQPFtkVKQZE0XzvkBHHtKyiJSlGEYza1hU9EnnOCIlgeZeHkA9EufDfL4ZjUS\nfJ8i3Fylm+hKZS31RzPnwwi4t1j7PTOmOgQbby0SFLwUH3uyhIW1iPDyYxizFV1S\n79zdKwWSQAVeZFero3FG2uLaEqofq6/k3FhoP3n29VZm0WJg86xSkUTkL2qQTa/9\nx0dFypmFyBrXd1Em/RRI+mPycdWLGsaSwehTCPqfwDFpeZthCtU9OGA849dfsLNT\nqUgxHNSznD+hVV1YhTzHj964tcuBtMxAEGxnwVVqxh/NqIZ+JELEzSKVV//zMWbW\n366gSrX963OwIjie+aDgNRBAvs4SabSNhly0eyqqN3waY5N2nIBObI8aVH11n+cH\niowuRFch8+gFWgk4Ku4MHL3NWcyu5ze/xMV2R/CqGdU4xO7g3EU=\n=8smt\n-----END PGP SIGNATURE-----", "payload": "tree f8069d81d3139bfc496da4ed369126cd564d0e3f\nparent a5a8bb012540c23a9b4ab5a38bc7f75d5ebaba60\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1635341100 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1635346857 +0200\n\nreplace `&` with `&&` in {integer}::checked_div\n\nUsing short-circuit operators makes it easier to perform some kinds of\nsource code analysis, like MC/DC code coverage (a requirement in\nsafety-critical environments). The optimized x86 assembly is the same\nbetween the old and new versions:\n\n```\nxor eax, eax\ntest esi, esi\nje .LBB0_1\ncmp edi, -2147483648\njne .LBB0_4\ncmp esi, -1\njne .LBB0_4\nret\n.LBB0_1:\nret\n.LBB0_4:\nmov eax, edi\ncdq\nidiv esi\nmov edx, eax\nmov eax, 1\nret\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81130fe188ff37f2deacdf53d7afe823ceaba7ec", "html_url": "https://github.com/rust-lang/rust/commit/81130fe188ff37f2deacdf53d7afe823ceaba7ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81130fe188ff37f2deacdf53d7afe823ceaba7ec/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5a8bb012540c23a9b4ab5a38bc7f75d5ebaba60", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5a8bb012540c23a9b4ab5a38bc7f75d5ebaba60", "html_url": "https://github.com/rust-lang/rust/commit/a5a8bb012540c23a9b4ab5a38bc7f75d5ebaba60"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "22d36d4eba3ff80cdd40493bc86aa0371d4d6415", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81130fe188ff37f2deacdf53d7afe823ceaba7ec/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81130fe188ff37f2deacdf53d7afe823ceaba7ec/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=81130fe188ff37f2deacdf53d7afe823ceaba7ec", "patch": "@@ -608,8 +608,7 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn checked_div(self, rhs: Self) -> Option<Self> {\n-            // Using `&` helps LLVM see that it is the same check made in division.\n-            if unlikely!(rhs == 0 || ((self == Self::MIN) & (rhs == -1))) {\n+            if unlikely!(rhs == 0 || ((self == Self::MIN) && (rhs == -1))) {\n                 None\n             } else {\n                 // SAFETY: div by zero and by INT_MIN have been checked above"}]}