{"sha": "82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyY2NiNjU4MmE3NmQ3MmZiNWFiYWY3MTk1ZGM3YTY1M2YxYWE1NGI=", "commit": {"author": {"name": "Jeremy Fitzhardinge", "email": "jeremy@goop.org", "date": "2020-05-25T23:21:25Z"}, "committer": {"name": "Jeremy Fitzhardinge", "email": "jeremy@goop.org", "date": "2021-02-07T22:54:20Z"}, "message": "Add `--extern-loc` to augment unused crate dependency diagnostics\n\nThis allows a build system to indicate a location in its own dependency\nspecification files (eg Cargo's `Cargo.toml`) which can be reported\nalong side any unused crate dependency.\n\nThis supports several types of location:\n - 'json' - provide some json-structured data, which is included in the json diagnostics\n     in a `tool_metadata` field\n - 'raw' - emit the provided string into the output. This also appears as a json string in\n     `tool_metadata`.\n\nIf no `--extern-location` is explicitly provided then a default json entry of the form\n`\"tool_metadata\":{\"name\":<cratename>,\"path\":<cratepath>}` is emitted.", "tree": {"sha": "3b576e8c494f7aab329b398836948bfb3747f754", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b576e8c494f7aab329b398836948bfb3747f754"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "html_url": "https://github.com/rust-lang/rust/commit/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/comments", "author": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9778068cbc1e06cc3685422323ff38a2f397de26", "url": "https://api.github.com/repos/rust-lang/rust/commits/9778068cbc1e06cc3685422323ff38a2f397de26", "html_url": "https://github.com/rust-lang/rust/commit/9778068cbc1e06cc3685422323ff38a2f397de26"}], "stats": {"total": 559, "additions": 512, "deletions": 47}, "files": [{"sha": "fd23b2764c08196769095fad13531e5f656d959b", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -726,9 +726,9 @@ dependencies = [\n \n [[package]]\n name = \"const_fn\"\n-version = \"0.4.2\"\n+version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ce90df4c658c62f12d78f7508cf92f9173e5184a539c10bfe54a3107b3ffd0f2\"\n+checksum = \"c478836e029dcef17fb47c89023448c64f781a046e0300e257ad8225ae59afab\"\n \n [[package]]\n name = \"constant_time_eq\"\n@@ -3914,6 +3914,7 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_middle\",\n  \"rustc_parse_format\",\n+ \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\","}, {"sha": "ef4a45cab41356128d6916bbfb95131e51c4d3e1", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -4,7 +4,9 @@ use crate::Level;\n use crate::Substitution;\n use crate::SubstitutionPart;\n use crate::SuggestionStyle;\n+use crate::ToolMetadata;\n use rustc_lint_defs::Applicability;\n+use rustc_serialize::json::Json;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use std::fmt;\n \n@@ -303,6 +305,7 @@ impl Diagnostic {\n             msg: msg.to_owned(),\n             style: SuggestionStyle::ShowCode,\n             applicability,\n+            tool_metadata: Default::default(),\n         });\n         self\n     }\n@@ -328,6 +331,7 @@ impl Diagnostic {\n             msg: msg.to_owned(),\n             style: SuggestionStyle::ShowCode,\n             applicability,\n+            tool_metadata: Default::default(),\n         });\n         self\n     }\n@@ -354,6 +358,7 @@ impl Diagnostic {\n             msg: msg.to_owned(),\n             style: SuggestionStyle::CompletelyHidden,\n             applicability,\n+            tool_metadata: Default::default(),\n         });\n         self\n     }\n@@ -408,6 +413,7 @@ impl Diagnostic {\n             msg: msg.to_owned(),\n             style,\n             applicability,\n+            tool_metadata: Default::default(),\n         });\n         self\n     }\n@@ -446,6 +452,7 @@ impl Diagnostic {\n             msg: msg.to_owned(),\n             style: SuggestionStyle::ShowCode,\n             applicability,\n+            tool_metadata: Default::default(),\n         });\n         self\n     }\n@@ -515,6 +522,23 @@ impl Diagnostic {\n         self\n     }\n \n+    /// Adds a suggestion intended only for a tool. The intent is that the metadata encodes\n+    /// the suggestion in a tool-specific way, as it may not even directly involve Rust code.\n+    pub fn tool_only_suggestion_with_metadata(\n+        &mut self,\n+        msg: &str,\n+        applicability: Applicability,\n+        tool_metadata: Json,\n+    ) {\n+        self.suggestions.push(CodeSuggestion {\n+            substitutions: vec![],\n+            msg: msg.to_owned(),\n+            style: SuggestionStyle::CompletelyHidden,\n+            applicability,\n+            tool_metadata: ToolMetadata::new(tool_metadata),\n+        })\n+    }\n+\n     pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self {\n         self.span = sp.into();\n         if let Some(span) = self.span.primary_span() {"}, {"sha": "89e844879f74014ceb6cd9cfa52483cb989f3fdb", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -14,6 +14,7 @@ use rustc_span::source_map::{FilePathMapping, SourceMap};\n use crate::emitter::{Emitter, HumanReadableErrorType};\n use crate::registry::Registry;\n use crate::DiagnosticId;\n+use crate::ToolMetadata;\n use crate::{CodeSuggestion, SubDiagnostic};\n use rustc_lint_defs::{Applicability, FutureBreakage};\n \n@@ -180,6 +181,8 @@ struct Diagnostic {\n     children: Vec<Diagnostic>,\n     /// The message as rustc would render it.\n     rendered: Option<String>,\n+    /// Extra tool metadata\n+    tool_metadata: ToolMetadata,\n }\n \n #[derive(Encodable)]\n@@ -269,6 +272,7 @@ impl Diagnostic {\n             spans: DiagnosticSpan::from_suggestion(sugg, je),\n             children: vec![],\n             rendered: None,\n+            tool_metadata: sugg.tool_metadata.clone(),\n         });\n \n         // generate regular command line output and store it in the json\n@@ -312,6 +316,7 @@ impl Diagnostic {\n                 .chain(sugg)\n                 .collect(),\n             rendered: Some(output),\n+            tool_metadata: ToolMetadata::default(),\n         }\n     }\n \n@@ -327,6 +332,7 @@ impl Diagnostic {\n                 .unwrap_or_else(|| DiagnosticSpan::from_multispan(&diag.span, je)),\n             children: vec![],\n             rendered: None,\n+            tool_metadata: ToolMetadata::default(),\n         }\n     }\n }"}, {"sha": "73ddf50772324ab16a3be5d0ae593f6f0d0c1e9f", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -23,10 +23,13 @@ use rustc_data_structures::sync::{self, Lock, Lrc};\n use rustc_data_structures::AtomicRef;\n use rustc_lint_defs::FutureBreakage;\n pub use rustc_lint_defs::{pluralize, Applicability};\n+use rustc_serialize::json::Json;\n+use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::source_map::SourceMap;\n use rustc_span::{Loc, MultiSpan, Span};\n \n use std::borrow::Cow;\n+use std::hash::{Hash, Hasher};\n use std::panic;\n use std::path::Path;\n use std::{error, fmt};\n@@ -73,6 +76,35 @@ impl SuggestionStyle {\n     }\n }\n \n+#[derive(Clone, Debug, PartialEq, Default)]\n+pub struct ToolMetadata(pub Option<Json>);\n+\n+impl ToolMetadata {\n+    fn new(json: Json) -> Self {\n+        ToolMetadata(Some(json))\n+    }\n+}\n+\n+impl Hash for ToolMetadata {\n+    fn hash<H: Hasher>(&self, _state: &mut H) {}\n+}\n+\n+// Doesn't really need to round-trip\n+impl<D: Decoder> Decodable<D> for ToolMetadata {\n+    fn decode(_d: &mut D) -> Result<Self, D::Error> {\n+        Ok(ToolMetadata(None))\n+    }\n+}\n+\n+impl<S: Encoder> Encodable<S> for ToolMetadata {\n+    fn encode(&self, e: &mut S) -> Result<(), S::Error> {\n+        match &self.0 {\n+            None => e.emit_unit(),\n+            Some(json) => json.encode(e),\n+        }\n+    }\n+}\n+\n #[derive(Clone, Debug, PartialEq, Hash, Encodable, Decodable)]\n pub struct CodeSuggestion {\n     /// Each substitute can have multiple variants due to multiple\n@@ -106,6 +138,8 @@ pub struct CodeSuggestion {\n     /// which are useful for users but not useful for\n     /// tools like rustfix\n     pub applicability: Applicability,\n+    /// Tool-specific metadata\n+    pub tool_metadata: ToolMetadata,\n }\n \n #[derive(Clone, Debug, PartialEq, Hash, Encodable, Decodable)]\n@@ -775,7 +809,6 @@ impl HandlerInner {\n         }\n \n         let already_emitted = |this: &mut Self| {\n-            use std::hash::Hash;\n             let mut hasher = StableHasher::new();\n             diagnostic.hash(&mut hasher);\n             let diagnostic_hash = hasher.finish();"}, {"sha": "90badd3d573a8e19a5c3d5d1caaaef1e2ff9b737", "filename": "compiler/rustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2FCargo.toml?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -19,5 +19,6 @@ rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_feature = { path = \"../rustc_feature\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_session = { path = \"../rustc_session\" }\n+rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_parse_format = { path = \"../rustc_parse_format\" }"}, {"sha": "b8db51f590d8489e64b6de106c33316c58f84a9f", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -21,7 +21,9 @@ use crate::passes::{EarlyLintPassObject, LateLintPassObject};\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n-use rustc_errors::{add_elided_lifetime_in_path_suggestion, struct_span_err, Applicability};\n+use rustc_errors::{\n+    add_elided_lifetime_in_path_suggestion, struct_span_err, Applicability, SuggestionStyle,\n+};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::{CrateNum, DefId};\n@@ -32,7 +34,8 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::layout::{LayoutError, TyAndLayout};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, print::Printer, subst::GenericArg, Ty, TyCtxt};\n-use rustc_session::lint::BuiltinLintDiagnostics;\n+use rustc_serialize::json::Json;\n+use rustc_session::lint::{BuiltinLintDiagnostics, ExternDepSpec};\n use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_session::Session;\n use rustc_session::SessionLintStore;\n@@ -639,6 +642,30 @@ pub trait LintContext: Sized {\n                 BuiltinLintDiagnostics::LegacyDeriveHelpers(span) => {\n                     db.span_label(span, \"the attribute is introduced here\");\n                 }\n+                BuiltinLintDiagnostics::ExternDepSpec(krate, loc) => {\n+                    let json = match loc {\n+                        ExternDepSpec::Json(json) => {\n+                            db.help(&format!(\"remove unnecessary dependency `{}`\", krate));\n+                            json\n+                        }\n+                        ExternDepSpec::Raw(raw) => {\n+                            db.help(&format!(\"remove unnecessary dependency `{}` at `{}`\", krate, raw));\n+                            db.span_suggestion_with_style(\n+                                DUMMY_SP,\n+                                \"raw extern location\",\n+                                raw.clone(),\n+                                Applicability::Unspecified,\n+                                SuggestionStyle::CompletelyHidden,\n+                            );\n+                            Json::String(raw)\n+                        }\n+                    };\n+                    db.tool_only_suggestion_with_metadata(\n+                        \"json extern location\",\n+                        Applicability::Unspecified,\n+                        json\n+                    );\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(LintDiagnosticBuilder::new(db));"}, {"sha": "4c7d3f6c8c0721f321151c15a29644da6b51a05d", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -4,6 +4,7 @@ extern crate rustc_macros;\n pub use self::Level::*;\n use rustc_ast::node_id::{NodeId, NodeMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n+use rustc_serialize::json::Json;\n use rustc_span::edition::Edition;\n use rustc_span::{sym, symbol::Ident, MultiSpan, Span, Symbol};\n use rustc_target::spec::abi::Abi;\n@@ -239,6 +240,13 @@ impl<HCX> ToStableHashKey<HCX> for LintId {\n     }\n }\n \n+// Duplicated from rustc_session::config::ExternDepSpec to avoid cyclic dependency\n+#[derive(PartialEq)]\n+pub enum ExternDepSpec {\n+    Json(Json),\n+    Raw(String),\n+}\n+\n // This could be a closure, but then implementing derive trait\n // becomes hacky (and it gets allocated).\n #[derive(PartialEq)]\n@@ -257,6 +265,7 @@ pub enum BuiltinLintDiagnostics {\n     UnusedDocComment(Span),\n     PatternsInFnsWithoutBody(Span, Ident),\n     LegacyDeriveHelpers(Span),\n+    ExternDepSpec(String, ExternDepSpec),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "63c6f369eb685a74fe791ce8cd29c7d4aed01936", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -16,8 +16,9 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::middle::cstore::{CrateDepKind, CrateSource, ExternCrate};\n use rustc_middle::middle::cstore::{ExternCrateSource, MetadataLoaderDyn};\n use rustc_middle::ty::TyCtxt;\n+use rustc_serialize::json::ToJson;\n use rustc_session::config::{self, CrateType, ExternLocation};\n-use rustc_session::lint;\n+use rustc_session::lint::{self, BuiltinLintDiagnostics, ExternDepSpec};\n use rustc_session::output::validate_crate_name;\n use rustc_session::search_paths::PathKind;\n use rustc_session::{CrateDisambiguator, Session};\n@@ -27,6 +28,7 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n \n use proc_macro::bridge::client::ProcMacro;\n+use std::collections::BTreeMap;\n use std::path::Path;\n use std::{cmp, env};\n use tracing::{debug, info};\n@@ -871,8 +873,25 @@ impl<'a> CrateLoader<'a> {\n                 // Don't worry about pathless `--extern foo` sysroot references\n                 continue;\n             }\n-            if !self.used_extern_options.contains(&Symbol::intern(name)) {\n-                self.sess.parse_sess.buffer_lint(\n+            if self.used_extern_options.contains(&Symbol::intern(name)) {\n+                continue;\n+            }\n+\n+            // Got a real unused --extern\n+            let diag = match self.sess.opts.extern_dep_specs.get(name) {\n+                Some(loc) => BuiltinLintDiagnostics::ExternDepSpec(name.clone(), loc.into()),\n+                None => {\n+                    // If we don't have a specific location, provide a json encoding of the `--extern`\n+                    // option.\n+                    let meta: BTreeMap<String, String> =\n+                        std::iter::once((\"name\".to_string(), name.to_string())).collect();\n+                    BuiltinLintDiagnostics::ExternDepSpec(\n+                        name.clone(),\n+                        ExternDepSpec::Json(meta.to_json()),\n+                    )\n+                }\n+            };\n+            self.sess.parse_sess.buffer_lint_with_diagnostic(\n                     lint::builtin::UNUSED_CRATE_DEPENDENCIES,\n                     span,\n                     ast::CRATE_NODE_ID,\n@@ -881,8 +900,8 @@ impl<'a> CrateLoader<'a> {\n                         name,\n                         self.local_crate_name,\n                         name),\n+                    diag,\n                 );\n-            }\n         }\n     }\n "}, {"sha": "e9ea0ab6f98f57b1ccd07b65ac7a2bd34224f7cd", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -15,6 +15,8 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_target::abi::{Align, TargetDataLayout};\n use rustc_target::spec::{SplitDebuginfo, Target, TargetTriple};\n \n+use rustc_serialize::json;\n+\n use crate::parse::CrateConfig;\n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::{Edition, DEFAULT_EDITION, EDITION_NAME_LIST};\n@@ -408,6 +410,9 @@ impl OutputTypes {\n #[derive(Clone)]\n pub struct Externs(BTreeMap<String, ExternEntry>);\n \n+#[derive(Clone)]\n+pub struct ExternDepSpecs(BTreeMap<String, ExternDepSpec>);\n+\n #[derive(Clone, Debug)]\n pub struct ExternEntry {\n     pub location: ExternLocation,\n@@ -439,6 +444,27 @@ pub enum ExternLocation {\n     ExactPaths(BTreeSet<CanonicalizedPath>),\n }\n \n+/// Supplied source location of a dependency - for example in a build specification\n+/// file like Cargo.toml. We support several syntaxes: if it makes sense to reference\n+/// a file and line, then the build system can specify that. On the other hand, it may\n+/// make more sense to have an arbitrary raw string.\n+#[derive(Clone, PartialEq)]\n+pub enum ExternDepSpec {\n+    /// Raw string\n+    Raw(String),\n+    /// Raw data in json format\n+    Json(json::Json),\n+}\n+\n+impl<'a> From<&'a ExternDepSpec> for rustc_lint_defs::ExternDepSpec {\n+    fn from(from: &'a ExternDepSpec) -> Self {\n+        match from {\n+            ExternDepSpec::Raw(s) => rustc_lint_defs::ExternDepSpec::Raw(s.clone()),\n+            ExternDepSpec::Json(json) => rustc_lint_defs::ExternDepSpec::Json(json.clone()),\n+        }\n+    }\n+}\n+\n impl Externs {\n     pub fn new(data: BTreeMap<String, ExternEntry>) -> Externs {\n         Externs(data)\n@@ -466,6 +492,25 @@ impl ExternEntry {\n     }\n }\n \n+impl ExternDepSpecs {\n+    pub fn new(data: BTreeMap<String, ExternDepSpec>) -> ExternDepSpecs {\n+        ExternDepSpecs(data)\n+    }\n+\n+    pub fn get(&self, key: &str) -> Option<&ExternDepSpec> {\n+        self.0.get(key)\n+    }\n+}\n+\n+impl fmt::Display for ExternDepSpec {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            ExternDepSpec::Raw(raw) => fmt.write_str(raw),\n+            ExternDepSpec::Json(json) => json::as_json(json).fmt(fmt),\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum PrintRequest {\n     FileNames,\n@@ -679,6 +724,7 @@ impl Default for Options {\n             cg: basic_codegen_options(),\n             error_format: ErrorOutputType::default(),\n             externs: Externs(BTreeMap::new()),\n+            extern_dep_specs: ExternDepSpecs(BTreeMap::new()),\n             crate_name: None,\n             alt_std_name: None,\n             libs: Vec::new(),\n@@ -1105,6 +1151,12 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n             \"Specify where an external rust library is located\",\n             \"NAME[=PATH]\",\n         ),\n+        opt::multi_s(\n+            \"\",\n+            \"extern-location\",\n+            \"Location where an external crate dependency is specified\",\n+            \"NAME=LOCATION\",\n+        ),\n         opt::opt_s(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n         opt::multi(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n         opt::opt_s(\n@@ -1727,6 +1779,68 @@ pub fn parse_externs(\n     Externs(externs)\n }\n \n+fn parse_extern_dep_specs(\n+    matches: &getopts::Matches,\n+    debugging_opts: &DebuggingOptions,\n+    error_format: ErrorOutputType,\n+) -> ExternDepSpecs {\n+    let is_unstable_enabled = debugging_opts.unstable_options;\n+    let mut map = BTreeMap::new();\n+\n+    for arg in matches.opt_strs(\"extern-location\") {\n+        if !is_unstable_enabled {\n+            early_error(\n+                error_format,\n+                \"`--extern-location` option is unstable: set `-Z unstable-options`\",\n+            );\n+        }\n+\n+        let mut parts = arg.splitn(2, '=');\n+        let name = parts.next().unwrap_or_else(|| {\n+            early_error(error_format, \"`--extern-location` value must not be empty\")\n+        });\n+        let loc = parts.next().unwrap_or_else(|| {\n+            early_error(\n+                error_format,\n+                &format!(\"`--extern-location`: specify location for extern crate `{}`\", name),\n+            )\n+        });\n+\n+        let locparts: Vec<_> = loc.split(\":\").collect();\n+        let spec = match &locparts[..] {\n+            [\"raw\", ..] => {\n+                // Don't want `:` split string\n+                let raw = loc.splitn(2, ':').nth(1).unwrap_or_else(|| {\n+                    early_error(error_format, \"`--extern-location`: missing `raw` location\")\n+                });\n+                ExternDepSpec::Raw(raw.to_string())\n+            }\n+            [\"json\", ..] => {\n+                // Don't want `:` split string\n+                let raw = loc.splitn(2, ':').nth(1).unwrap_or_else(|| {\n+                    early_error(error_format, \"`--extern-location`: missing `json` location\")\n+                });\n+                let json = json::from_str(raw).unwrap_or_else(|_| {\n+                    early_error(\n+                        error_format,\n+                        &format!(\"`--extern-location`: malformed json location `{}`\", raw),\n+                    )\n+                });\n+                ExternDepSpec::Json(json)\n+            }\n+            [bad, ..] => early_error(\n+                error_format,\n+                &format!(\"unknown location type `{}`: use `raw` or `json`\", bad),\n+            ),\n+            [] => early_error(error_format, \"missing location specification\"),\n+        };\n+\n+        map.insert(name.to_string(), spec);\n+    }\n+\n+    ExternDepSpecs::new(map)\n+}\n+\n fn parse_remap_path_prefix(\n     matches: &getopts::Matches,\n     error_format: ErrorOutputType,\n@@ -1888,6 +2002,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     }\n \n     let externs = parse_externs(matches, &debugging_opts, error_format);\n+    let extern_dep_specs = parse_extern_dep_specs(matches, &debugging_opts, error_format);\n \n     let crate_name = matches.opt_str(\"crate-name\");\n \n@@ -1924,6 +2039,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         error_format,\n         externs,\n         unstable_features: UnstableFeatures::from_environment(crate_name.as_deref()),\n+        extern_dep_specs,\n         crate_name,\n         alt_std_name: None,\n         libs,"}, {"sha": "f78df8a7e29fa40d502538ee3ed3e0982efccd9e", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -112,6 +112,7 @@ top_level_options!(\n         borrowck_mode: BorrowckMode [UNTRACKED],\n         cg: CodegenOptions [TRACKED],\n         externs: Externs [UNTRACKED],\n+        extern_dep_specs: ExternDepSpecs [UNTRACKED],\n         crate_name: Option<String> [TRACKED],\n         // An optional name to use as the crate for std during std injection,\n         // written `extern crate name as std`. Defaults to `std`. Used by"}, {"sha": "1c80d5426bf75e6512aa5ccbc371a86395fa741d", "filename": "src/doc/unstable-book/src/compiler-flags/extern-location.md", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-location.md", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-location.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-location.md?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,31 @@\n+# `extern-location`\n+\n+MCP for this feature: [#303]\n+\n+[#303]: https://github.com/rust-lang/compiler-team/issues/303\n+\n+------------------------\n+\n+The `unused-extern-crates` lint reports when a crate was specified on the rustc\n+command-line with `--extern name=path` but no symbols were referenced in it.\n+This is useful to know, but it's hard to map that back to a specific place a user\n+or tool could fix (ie, to remove the unused dependency).\n+\n+The `--extern-location` flag allows the build system to associate a location with\n+the `--extern` option, which is then emitted as part of the diagnostics. This location\n+is abstract and just round-tripped through rustc; the compiler never attempts to\n+interpret it in any way.\n+\n+There are two supported forms of location: a bare string, or a blob of json:\n+- `--extern-location foo=raw:Makefile:123` would associate the raw string `Makefile:123`\n+- `--extern-location 'bar=json:{\"target\":\"//my_project:library\",\"dep\":\"//common:serde\"}` would\n+  associate the json structure with `--extern bar=<path>`, indicating which dependency of\n+  which rule introduced the unused extern crate.\n+\n+This primarily intended to be used with tooling - for example a linter which can automatically\n+remove unused dependencies - rather than being directly presented to users.\n+\n+`raw` locations are presented as part of the normal rendered diagnostics and included in\n+the json form. `json` locations are only included in the json form of diagnostics,\n+as a `tool_metadata` field. For `raw` locations `tool_metadata` is simply a json string,\n+whereas `json` allows the rustc invoker to fully control its form and content."}, {"sha": "747bf88e45de717f0ac714c0d3dc1de4e86d5710", "filename": "src/test/ui/json-bom-plus-crlf-multifile.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -24,8 +24,8 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":612,\"byte_end\":618,\"line_start\":17,\"line_end\":17,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n-\"}\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":612,\"byte_end\":618,\"line_start\":17,\"line_end\":17,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null,\"tool_metadata\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n+\",\"tool_metadata\":null}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n Erroneous code examples:\n@@ -52,8 +52,8 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":672,\"byte_end\":678,\"line_start\":19,\"line_end\":19,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n-\"}\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":672,\"byte_end\":678,\"line_start\":19,\"line_end\":19,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null,\"tool_metadata\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n+\",\"tool_metadata\":null}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n Erroneous code examples:\n@@ -80,8 +80,8 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":735,\"byte_end\":741,\"line_start\":22,\"line_end\":22,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n-\"}\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":735,\"byte_end\":741,\"line_start\":22,\"line_end\":22,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null,\"tool_metadata\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n+\",\"tool_metadata\":null}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n Erroneous code examples:\n@@ -109,6 +109,6 @@ expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":792,\"byte_end\":798,\"line_start\":25,\"line_end\":25,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n-\"}\n+\",\"tool_metadata\":null}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors\n-\"}\n+\",\"tool_metadata\":null}"}, {"sha": "55a509fb9d9b456693f1e7f2cfbbe37636a31d74", "filename": "src/test/ui/json-bom-plus-crlf.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -24,8 +24,8 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":597,\"byte_end\":603,\"line_start\":16,\"line_end\":16,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:16:22: error[E0308]: mismatched types\n-\"}\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":597,\"byte_end\":603,\"line_start\":16,\"line_end\":16,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null,\"tool_metadata\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:16:22: error[E0308]: mismatched types\n+\",\"tool_metadata\":null}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n Erroneous code examples:\n@@ -52,8 +52,8 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":657,\"byte_end\":663,\"line_start\":18,\"line_end\":18,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:18:22: error[E0308]: mismatched types\n-\"}\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":657,\"byte_end\":663,\"line_start\":18,\"line_end\":18,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null,\"tool_metadata\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:18:22: error[E0308]: mismatched types\n+\",\"tool_metadata\":null}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n Erroneous code examples:\n@@ -80,8 +80,8 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":720,\"byte_end\":726,\"line_start\":21,\"line_end\":21,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:22:1: error[E0308]: mismatched types\n-\"}\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":720,\"byte_end\":726,\"line_start\":21,\"line_end\":21,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null,\"tool_metadata\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:22:1: error[E0308]: mismatched types\n+\",\"tool_metadata\":null}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n Erroneous code examples:\n@@ -109,6 +109,6 @@ expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":786,\"byte_end\":794,\"line_start\":24,\"line_end\":25,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":777,\"byte_end\":783,\"line_start\":24,\"line_end\":24,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:24:22: error[E0308]: mismatched types\n-\"}\n+\",\"tool_metadata\":null}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors\n-\"}\n+\",\"tool_metadata\":null}"}, {"sha": "23d150f20547d47d0e0a2b90567f780e98efcb09", "filename": "src/test/ui/json-short.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Fjson-short.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Fjson-short.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-short.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -14,6 +14,6 @@ If you don't know the basics of Rust, you can look at the\n \n [rust-book]: https://doc.rust-lang.org/book/\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-short.rs\",\"byte_start\":62,\"byte_end\":62,\"line_start\":1,\"line_end\":1,\"column_start\":63,\"column_end\":63,\"is_primary\":true,\"text\":[{\"text\":\"// compile-flags: --json=diagnostic-short --error-format=json\",\"highlight_start\":63,\"highlight_end\":63}],\"label\":\"consider adding a `main` function to `$DIR/json-short.rs`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-short.rs:1:63: error[E0601]: `main` function not found in crate `json_short`\n-\"}\n+\",\"tool_metadata\":null}\n {\"message\":\"aborting due to previous error\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to previous error\n-\"}\n+\",\"tool_metadata\":null}"}, {"sha": "468f2fc726c62805de8658d2ea68d35419274b08", "filename": "src/test/ui/lint/unused_parens_json_suggestion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![deny(unused_parens)]\n    |         ^^^^^^^^^^^^^\n \n-\"}\n+\",\"tool_metadata\":null}\n {\"message\":\"aborting due to previous error\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to previous error\n \n-\"}\n+\",\"tool_metadata\":null}"}, {"sha": "a5ff4f8eb9e6bf7e338182386612d465585fca9b", "filename": "src/test/ui/lint/unused_parens_remove_json_suggestion.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -10,63 +10,63 @@ note: the lint level is defined here\n LL | #![deny(unused_parens)]\n    |         ^^^^^^^^^^^^^\n \n-\"}\n+\",\"tool_metadata\":null}\n {\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":631,\"byte_end\":634,\"line_start\":28,\"line_end\":28,\"column_start\":7,\"column_end\":10,\"is_primary\":true,\"text\":[{\"text\":\"    if(c) {\n   --> $DIR/unused_parens_remove_json_suggestion.rs:28:7\n    |\n LL |     if(c) {\n    |       ^^^ help: remove these parentheses\n \n-\"}\n+\",\"tool_metadata\":null}\n {\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":711,\"byte_end\":714,\"line_start\":32,\"line_end\":32,\"column_start\":8,\"column_end\":11,\"is_primary\":true,\"text\":[{\"text\":\"    if (c){\n   --> $DIR/unused_parens_remove_json_suggestion.rs:32:8\n    |\n LL |     if (c){\n    |        ^^^ help: remove these parentheses\n \n-\"}\n-{\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":793,\"byte_end\":808,\"line_start\":36,\"line_end\":36,\"column_start\":11,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":11,\"highlight_end\":26}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"remove these parentheses\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":793,\"byte_end\":808,\"line_start\":36,\"line_end\":36,\"column_start\":11,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":11,\"highlight_end\":26}],\"label\":null,\"suggested_replacement\":\"false && true \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"error: unnecessary parentheses around `while` condition\n+\",\"tool_metadata\":null}\n+{\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":793,\"byte_end\":808,\"line_start\":36,\"line_end\":36,\"column_start\":11,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":11,\"highlight_end\":26}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"remove these parentheses\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":793,\"byte_end\":808,\"line_start\":36,\"line_end\":36,\"column_start\":11,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":11,\"highlight_end\":26}],\"label\":null,\"suggested_replacement\":\"false && true \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null,\"tool_metadata\":null}],\"rendered\":\"error: unnecessary parentheses around `while` condition\n   --> $DIR/unused_parens_remove_json_suggestion.rs:36:11\n    |\n LL |     while (false && true){\n    |           ^^^^^^^^^^^^^^^ help: remove these parentheses\n \n-\"}\n+\",\"tool_metadata\":null}\n {\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":821,\"byte_end\":824,\"line_start\":37,\"line_end\":37,\"column_start\":12,\"column_end\":15,\"is_primary\":true,\"text\":[{\"text\":\"        if (c) {\n   --> $DIR/unused_parens_remove_json_suggestion.rs:37:12\n    |\n LL |         if (c) {\n    |            ^^^ help: remove these parentheses\n \n-\"}\n+\",\"tool_metadata\":null}\n {\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":918,\"byte_end\":933,\"line_start\":43,\"line_end\":43,\"column_start\":10,\"column_end\":25,\"is_primary\":true,\"text\":[{\"text\":\"    while(true && false) {\n   --> $DIR/unused_parens_remove_json_suggestion.rs:43:10\n    |\n LL |     while(true && false) {\n    |          ^^^^^^^^^^^^^^^ help: remove these parentheses\n \n-\"}\n+\",\"tool_metadata\":null}\n {\"message\":\"unnecessary parentheses around `for` iterator expression\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":987,\"byte_end\":995,\"line_start\":44,\"line_end\":44,\"column_start\":18,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"        for _ in (0 .. 3){\n   --> $DIR/unused_parens_remove_json_suggestion.rs:44:18\n    |\n LL |         for _ in (0 .. 3){\n    |                  ^^^^^^^^ help: remove these parentheses\n \n-\"}\n+\",\"tool_metadata\":null}\n {\"message\":\"unnecessary parentheses around `for` iterator expression\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":1088,\"byte_end\":1096,\"line_start\":49,\"line_end\":49,\"column_start\":14,\"column_end\":22,\"is_primary\":true,\"text\":[{\"text\":\"    for _ in (0 .. 3) {\n   --> $DIR/unused_parens_remove_json_suggestion.rs:49:14\n    |\n LL |     for _ in (0 .. 3) {\n    |              ^^^^^^^^ help: remove these parentheses\n \n-\"}\n+\",\"tool_metadata\":null}\n {\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":1147,\"byte_end\":1162,\"line_start\":50,\"line_end\":50,\"column_start\":15,\"column_end\":30,\"is_primary\":true,\"text\":[{\"text\":\"        while (true && false) {\n   --> $DIR/unused_parens_remove_json_suggestion.rs:50:15\n    |\n LL |         while (true && false) {\n    |               ^^^^^^^^^^^^^^^ help: remove these parentheses\n \n-\"}\n+\",\"tool_metadata\":null}\n {\"message\":\"aborting due to 9 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 9 previous errors\n \n-\"}\n+\",\"tool_metadata\":null}"}, {"sha": "6e225a914396d113e20fe40da5cd112ab2933ea3", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -376,7 +376,8 @@ mod foo {\n         }\n       ],\n       \"children\": [],\n-      \"rendered\": null\n+      \"rendered\": null,\n+      \"tool_metadata\": null\n     }\n   ],\n   \"rendered\": \"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0412]\\u001b[0m\\u001b[0m\\u001b[1m: cannot find type `Iter` in this scope\\u001b[0m\n@@ -397,7 +398,8 @@ mod foo {\n \\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\n \\u001b[0m     and 8 other candidates\\u001b[0m\n \n-\"\n+\",\n+  \"tool_metadata\": null\n }\n {\n   \"message\": \"aborting due to previous error\",\n@@ -407,7 +409,8 @@ mod foo {\n   \"children\": [],\n   \"rendered\": \"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror\\u001b[0m\\u001b[0m\\u001b[1m: aborting due to previous error\\u001b[0m\n \n-\"\n+\",\n+  \"tool_metadata\": null\n }\n {\n   \"message\": \"For more information about this error, try `rustc --explain E0412`.\",\n@@ -416,5 +419,6 @@ mod foo {\n   \"spans\": [],\n   \"children\": [],\n   \"rendered\": \"\\u001b[0m\\u001b[1mFor more information about this error, try `rustc --explain E0412`.\\u001b[0m\n-\"\n+\",\n+  \"tool_metadata\": null\n }"}, {"sha": "76cb5bfb3b65617c94e85071b906dffbff36dce9", "filename": "src/test/ui/terminal-width/flag-json.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -32,9 +32,9 @@ LL | ..._: () = 42;\n    |       |\n    |       expected due to this\n \n-\"}\n+\",\"tool_metadata\":null}\n {\"message\":\"aborting due to previous error\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to previous error\n \n-\"}\n+\",\"tool_metadata\":null}\n {\"message\":\"For more information about this error, try `rustc --explain E0308`.\",\"code\":null,\"level\":\"failure-note\",\"spans\":[],\"children\":[],\"rendered\":\"For more information about this error, try `rustc --explain E0308`.\n-\"}\n+\",\"tool_metadata\":null}"}, {"sha": "3e1527e2c2e71623f177b205f942580352284abc", "filename": "src/test/ui/unused-crate-deps/extern-loc-bad-loctype.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,8 @@\n+// --extern-location with bad location type\n+\n+// aux-crate:bar=bar.rs\n+// compile-flags:--extern-location bar=badloc:in-the-test-file\n+\n+#![warn(unused_crate_dependencies)]\n+\n+fn main() {}"}, {"sha": "12378f12557b7063e1da78e0d127ef02661cca6c", "filename": "src/test/ui/unused-crate-deps/extern-loc-bad-loctype.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,2 @@\n+error: unknown location type `badloc`: use `raw` or `json`\n+"}, {"sha": "a023f535b8198b6a20beefb91b2423a853e305dc", "filename": "src/test/ui/unused-crate-deps/extern-loc-defl-json.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,10 @@\n+// Default extern location from name and path if one isn't specified\n+\n+// check-pass\n+// aux-crate:bar=bar.rs\n+// compile-flags:--error-format json\n+\n+#![warn(unused_crate_dependencies)]\n+//~^ WARNING external crate `bar` unused in\n+\n+fn main() {}"}, {"sha": "6f51c5a1e734258cb3723dc0adb61265635376d4", "filename": "src/test/ui/unused-crate-deps/extern-loc-defl-json.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,17 @@\n+{\"message\":\"external crate `bar` unused in `extern_loc_defl_json`: remove the dependency or add `use bar as _;`\",\"code\":{\"code\":\"unused_crate_dependencies\",\"explanation\":null},\"level\":\"warning\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-defl-json.rs\",\"byte_start\":146,\"byte_end\":146,\"line_start\":7,\"line_end\":7,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"the lint level is defined here\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-defl-json.rs\",\"byte_start\":154,\"byte_end\":179,\"line_start\":7,\"line_end\":7,\"column_start\":9,\"column_end\":34,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":9,\"highlight_end\":34}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null,\"tool_metadata\":null},{\"message\":\"remove unnecessary dependency `bar`\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null,\"tool_metadata\":null},{\"message\":\"json extern location\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null,\"tool_metadata\":{\"name\":\"bar\"}}],\"rendered\":\"warning: external crate `bar` unused in `extern_loc_defl_json`: remove the dependency or add `use bar as _;`\n+  --> $DIR/extern-loc-defl-json.rs:7:1\n+   |\n+LL | #![warn(unused_crate_dependencies)]\n+   | ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/extern-loc-defl-json.rs:7:9\n+   |\n+LL | #![warn(unused_crate_dependencies)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: remove unnecessary dependency `bar`\n+\n+\",\"tool_metadata\":null}\n+{\"message\":\"1 warning emitted\",\"code\":null,\"level\":\"warning\",\"spans\":[],\"children\":[],\"rendered\":\"warning: 1 warning emitted\n+\n+\",\"tool_metadata\":null}"}, {"sha": "6fdf710a1268dfd004b254b7d327bf33d5abc9ad", "filename": "src/test/ui/unused-crate-deps/extern-loc-json-bad-json.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,8 @@\n+// --extern-location with a raw reference\n+\n+// aux-crate:bar=bar.rs\n+// compile-flags:--extern-location bar=json:[{\"malformed\n+\n+#![warn(unused_crate_dependencies)]\n+\n+fn main() {}"}, {"sha": "20d606372e0274bc57b6956f71f7a910c420b675", "filename": "src/test/ui/unused-crate-deps/extern-loc-json-bad-json.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,2 @@\n+error: `--extern-location`: malformed json location `[{\"malformed`\n+"}, {"sha": "02a9869151f3296d443abe0666ed8733f2341a7a", "filename": "src/test/ui/unused-crate-deps/extern-loc-json-json.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,10 @@\n+// --extern-location with a raw reference\n+\n+// check-pass\n+// aux-crate:bar=bar.rs\n+// compile-flags:--extern-location bar=json:{\"key\":123,\"value\":{}} --error-format json\n+\n+#![warn(unused_crate_dependencies)]\n+//~^ WARNING external crate `bar` unused in\n+\n+fn main() {}"}, {"sha": "e0d14aad5dfe4d5102a3ffd13b259c3a28f92562", "filename": "src/test/ui/unused-crate-deps/extern-loc-json-json.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,17 @@\n+{\"message\":\"external crate `bar` unused in `extern_loc_json_json`: remove the dependency or add `use bar as _;`\",\"code\":{\"code\":\"unused_crate_dependencies\",\"explanation\":null},\"level\":\"warning\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-json-json.rs\",\"byte_start\":169,\"byte_end\":169,\"line_start\":7,\"line_end\":7,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"the lint level is defined here\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-json-json.rs\",\"byte_start\":177,\"byte_end\":202,\"line_start\":7,\"line_end\":7,\"column_start\":9,\"column_end\":34,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":9,\"highlight_end\":34}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null,\"tool_metadata\":null},{\"message\":\"remove unnecessary dependency `bar`\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null,\"tool_metadata\":null},{\"message\":\"json extern location\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null,\"tool_metadata\":{\"key\":123,\"value\":{}}}],\"rendered\":\"warning: external crate `bar` unused in `extern_loc_json_json`: remove the dependency or add `use bar as _;`\n+  --> $DIR/extern-loc-json-json.rs:7:1\n+   |\n+LL | #![warn(unused_crate_dependencies)]\n+   | ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/extern-loc-json-json.rs:7:9\n+   |\n+LL | #![warn(unused_crate_dependencies)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: remove unnecessary dependency `bar`\n+\n+\",\"tool_metadata\":null}\n+{\"message\":\"1 warning emitted\",\"code\":null,\"level\":\"warning\",\"spans\":[],\"children\":[],\"rendered\":\"warning: 1 warning emitted\n+\n+\",\"tool_metadata\":null}"}, {"sha": "212610d532e1c6c5c50423e0cdb2195fd4842923", "filename": "src/test/ui/unused-crate-deps/extern-loc-json.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,10 @@\n+// --extern-location with a raw reference\n+\n+// check-pass\n+// aux-crate:bar=bar.rs\n+// compile-flags:--extern-location bar=json:{\"key\":123,\"value\":{}}\n+\n+#![warn(unused_crate_dependencies)]\n+//~^ WARNING external crate `bar` unused in\n+\n+fn main() {}"}, {"sha": "a6bbc0da1c6b48e0568a08d5b151d083f1043149", "filename": "src/test/ui/unused-crate-deps/extern-loc-json.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,15 @@\n+warning: external crate `bar` unused in `extern_loc_json`: remove the dependency or add `use bar as _;`\n+  --> $DIR/extern-loc-json.rs:7:1\n+   |\n+LL | #![warn(unused_crate_dependencies)]\n+   | ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/extern-loc-json.rs:7:9\n+   |\n+LL | #![warn(unused_crate_dependencies)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: remove unnecessary dependency `bar`\n+\n+warning: 1 warning emitted\n+"}, {"sha": "9339a004d3b742bf138b79f0c3014e08737d72c5", "filename": "src/test/ui/unused-crate-deps/extern-loc-missing-loc.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,8 @@\n+// --extern-location with a raw reference\n+\n+// aux-crate:bar=bar.rs\n+// compile-flags:--extern-location bar\n+\n+#![warn(unused_crate_dependencies)]\n+\n+fn main() {}"}, {"sha": "4584fbfb67ff7839bc25ef3d068df95ee2a2c263", "filename": "src/test/ui/unused-crate-deps/extern-loc-missing-loc.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,2 @@\n+error: `--extern-location`: specify location for extern crate `bar`\n+"}, {"sha": "4768365a653257203d1febef8404959a33519989", "filename": "src/test/ui/unused-crate-deps/extern-loc-missing-loctype.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,8 @@\n+// --extern-location with no type\n+\n+// aux-crate:bar=bar.rs\n+// compile-flags:--extern-location bar=missing-loc-type\n+\n+#![warn(unused_crate_dependencies)]\n+\n+fn main() {}"}, {"sha": "d0c36ebeb142ef4eb6cec059e143b61947be9e4f", "filename": "src/test/ui/unused-crate-deps/extern-loc-missing-loctype.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,2 @@\n+error: unknown location type `missing-loc-type`: use `raw` or `json`\n+"}, {"sha": "207615ccc87b66253d139059892cde6e6dd9f3ce", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw-json.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,10 @@\n+// --extern-location with a raw reference\n+\n+// check-pass\n+// aux-crate:bar=bar.rs\n+// compile-flags:--extern-location bar=raw:in-the-test-file --error-format json\n+\n+#![warn(unused_crate_dependencies)]\n+//~^ WARNING external crate `bar` unused in\n+\n+fn main() {}"}, {"sha": "6edf6335a9ff97df1ad0ce0b8875084121b2078e", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw-json.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,17 @@\n+{\"message\":\"external crate `bar` unused in `extern_loc_raw_json`: remove the dependency or add `use bar as _;`\",\"code\":{\"code\":\"unused_crate_dependencies\",\"explanation\":null},\"level\":\"warning\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-raw-json.rs\",\"byte_start\":162,\"byte_end\":162,\"line_start\":7,\"line_end\":7,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"the lint level is defined here\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-raw-json.rs\",\"byte_start\":170,\"byte_end\":195,\"line_start\":7,\"line_end\":7,\"column_start\":9,\"column_end\":34,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":9,\"highlight_end\":34}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null,\"tool_metadata\":null},{\"message\":\"remove unnecessary dependency `bar` at `in-the-test-file`\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null,\"tool_metadata\":null},{\"message\":\"raw extern location\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-raw-json.rs\",\"byte_start\":0,\"byte_end\":0,\"line_start\":1,\"line_end\":1,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[],\"label\":null,\"suggested_replacement\":\"in-the-test-file\",\"suggestion_applicability\":\"Unspecified\",\"expansion\":null}],\"children\":[],\"rendered\":null,\"tool_metadata\":null},{\"message\":\"json extern location\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null,\"tool_metadata\":\"in-the-test-file\"}],\"rendered\":\"warning: external crate `bar` unused in `extern_loc_raw_json`: remove the dependency or add `use bar as _;`\n+  --> $DIR/extern-loc-raw-json.rs:7:1\n+   |\n+LL | #![warn(unused_crate_dependencies)]\n+   | ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/extern-loc-raw-json.rs:7:9\n+   |\n+LL | #![warn(unused_crate_dependencies)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: remove unnecessary dependency `bar` at `in-the-test-file`\n+\n+\",\"tool_metadata\":null}\n+{\"message\":\"1 warning emitted\",\"code\":null,\"level\":\"warning\",\"spans\":[],\"children\":[],\"rendered\":\"warning: 1 warning emitted\n+\n+\",\"tool_metadata\":null}"}, {"sha": "65b6426839471bec1425250ad7d9802d718828ce", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw-missing-loc.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,8 @@\n+// --extern-location with a raw reference\n+\n+// aux-crate:bar=bar.rs\n+// compile-flags:--extern-location bar=raw\n+\n+#![warn(unused_crate_dependencies)]\n+\n+fn main() {}"}, {"sha": "4b51266e4f6fad6cbde30e126439b729ae60b94d", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw-missing-loc.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,2 @@\n+error: `--extern-location`: missing `raw` location\n+"}, {"sha": "fc3fed1e10e8052c5c31087cb08cc00e33f7af14", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.rs?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,10 @@\n+// --extern-location with a raw reference\n+\n+// check-pass\n+// aux-crate:bar=bar.rs\n+// compile-flags:--extern-location bar=raw:in-the-test-file\n+\n+#![warn(unused_crate_dependencies)]\n+//~^ WARNING external crate `bar` unused in\n+\n+fn main() {}"}, {"sha": "2cdd00558667352aac003952997405b5f7252167", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,15 @@\n+warning: external crate `bar` unused in `extern_loc_raw`: remove the dependency or add `use bar as _;`\n+  --> $DIR/extern-loc-raw.rs:7:1\n+   |\n+LL | #![warn(unused_crate_dependencies)]\n+   | ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/extern-loc-raw.rs:7:9\n+   |\n+LL | #![warn(unused_crate_dependencies)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: remove unnecessary dependency `bar` at `in-the-test-file`\n+\n+warning: 1 warning emitted\n+"}, {"sha": "479f51bff464d61f1ee8aa324d4426d520e3d699", "filename": "src/test/ui/unused-crate-deps/libfib.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Flibfib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Flibfib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Flibfib.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -5,6 +5,7 @@ LL | pub fn fib(n: u32) -> Vec<u32> {\n    | ^\n    |\n    = note: requested on the command line with `-W unused-crate-dependencies`\n+   = help: remove unnecessary dependency `bar`\n \n warning: 1 warning emitted\n "}, {"sha": "0b98b4e44fb2af83229800eecf21a772926bc5b6", "filename": "src/test/ui/unused-crate-deps/test.mk", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Ftest.mk", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Ftest.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Ftest.mk?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -0,0 +1,7 @@\n+# Everyone uses make for building Rust\n+\n+foo: bar.rlib\n+\t$(RUSTC) --crate-type bin --extern bar=bar.rlib\n+\n+%.rlib: %.rs\n+\t$(RUSTC) --crate-type lib $<"}, {"sha": "1142d156d0e96e507d863f77532d7f710075309c", "filename": "src/test/ui/unused-crate-deps/unused-aliases.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Funused-aliases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Funused-aliases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Funused-aliases.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -9,6 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(unused_crate_dependencies)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: remove unnecessary dependency `barbar`\n \n warning: 1 warning emitted\n "}, {"sha": "29667d9525cb4b266fc00b7783416079b9fd91cd", "filename": "src/test/ui/unused-crate-deps/warn-attr.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-attr.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -9,6 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(unused_crate_dependencies)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: remove unnecessary dependency `bar`\n \n warning: 1 warning emitted\n "}, {"sha": "2c0c9215129866c593193ebfce314d02946ecea1", "filename": "src/test/ui/unused-crate-deps/warn-cmdline-static.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-static.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -5,6 +5,7 @@ LL | fn main() {}\n    | ^\n    |\n    = note: requested on the command line with `-W unused-crate-dependencies`\n+   = help: remove unnecessary dependency `bar`\n \n warning: 1 warning emitted\n "}, {"sha": "2cd49218f5ad85728a314ac64aebf715c5a1f4bd", "filename": "src/test/ui/unused-crate-deps/warn-cmdline.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ccb6582a76d72fb5abaf7195dc7a653f1aa54b/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline.stderr?ref=82ccb6582a76d72fb5abaf7195dc7a653f1aa54b", "patch": "@@ -5,6 +5,7 @@ LL | fn main() {}\n    | ^\n    |\n    = note: requested on the command line with `-W unused-crate-dependencies`\n+   = help: remove unnecessary dependency `bar`\n \n warning: 1 warning emitted\n "}]}