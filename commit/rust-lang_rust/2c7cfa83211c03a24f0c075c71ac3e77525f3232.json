{"sha": "2c7cfa83211c03a24f0c075c71ac3e77525f3232", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjN2NmYTgzMjExYzAzYTI0ZjBjMDc1YzcxYWMzZTc3NTI1ZjMyMzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-24T06:44:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-24T06:44:09Z"}, "message": "Auto merge of #5027 - sinkuu:vectored_io, r=phansch\n\nLint vectored IO in unused_io_amount lint\n\n`read_vectored` & `write_vectored` require handling returned value likewise non-vectored methods. https://github.com/rust-lang/rust/issues/68041\n\n---\n\nchangelog: lint vectored IO in `unused_io_amount` lint", "tree": {"sha": "2e7bdb23dee9f88b88bd362537c6fe6ad3eeee02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e7bdb23dee9f88b88bd362537c6fe6ad3eeee02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c7cfa83211c03a24f0c075c71ac3e77525f3232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7cfa83211c03a24f0c075c71ac3e77525f3232", "html_url": "https://github.com/rust-lang/rust/commit/2c7cfa83211c03a24f0c075c71ac3e77525f3232", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c7cfa83211c03a24f0c075c71ac3e77525f3232/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3237b7a69f950bc6db7fba602d3dd831bd1b5b29", "url": "https://api.github.com/repos/rust-lang/rust/commits/3237b7a69f950bc6db7fba602d3dd831bd1b5b29", "html_url": "https://github.com/rust-lang/rust/commit/3237b7a69f950bc6db7fba602d3dd831bd1b5b29"}, {"sha": "b3971fdd5d69448fa80ef6f7b198fc9e605fd6c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3971fdd5d69448fa80ef6f7b198fc9e605fd6c2", "html_url": "https://github.com/rust-lang/rust/commit/b3971fdd5d69448fa80ef6f7b198fc9e605fd6c2"}], "stats": {"total": 53, "additions": 38, "deletions": 15}, "files": [{"sha": "b85134e3d7a9aaa7a8f565f672408f2e3133061f", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2c7cfa83211c03a24f0c075c71ac3e77525f3232/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7cfa83211c03a24f0c075c71ac3e77525f3232/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=2c7cfa83211c03a24f0c075c71ac3e77525f3232", "patch": "@@ -6,8 +6,8 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n declare_clippy_lint! {\n     /// **What it does:** Checks for unused written/read amount.\n     ///\n-    /// **Why is this bad?** `io::Write::write` and `io::Read::read` are not\n-    /// guaranteed to\n+    /// **Why is this bad?** `io::Write::write(_vectored)` and\n+    /// `io::Read::read(_vectored)` are not guaranteed to\n     /// process the entire buffer. They return how many bytes were processed, which\n     /// might be smaller\n     /// than a given buffer's length. If you don't need to deal with\n@@ -67,20 +67,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedIoAmount {\n fn check_method_call(cx: &LateContext<'_, '_>, call: &hir::Expr<'_>, expr: &hir::Expr<'_>) {\n     if let hir::ExprKind::MethodCall(ref path, _, _) = call.kind {\n         let symbol = &*path.ident.as_str();\n-        if match_trait_method(cx, call, &paths::IO_READ) && symbol == \"read\" {\n-            span_lint(\n+        let read_trait = match_trait_method(cx, call, &paths::IO_READ);\n+        let write_trait = match_trait_method(cx, call, &paths::IO_WRITE);\n+\n+        match (read_trait, write_trait, symbol) {\n+            (true, _, \"read\") => span_lint(\n                 cx,\n                 UNUSED_IO_AMOUNT,\n                 expr.span,\n-                \"handle read amount returned or use `Read::read_exact` instead\",\n-            );\n-        } else if match_trait_method(cx, call, &paths::IO_WRITE) && symbol == \"write\" {\n-            span_lint(\n+                \"read amount is not handled. Use `Read::read_exact` instead\",\n+            ),\n+            (true, _, \"read_vectored\") => span_lint(cx, UNUSED_IO_AMOUNT, expr.span, \"read amount is not handled\"),\n+            (_, true, \"write\") => span_lint(\n                 cx,\n                 UNUSED_IO_AMOUNT,\n                 expr.span,\n-                \"handle written amount returned or use `Write::write_all` instead\",\n-            );\n+                \"written amount is not handled. Use `Write::write_all` instead\",\n+            ),\n+            (_, true, \"write_vectored\") => span_lint(cx, UNUSED_IO_AMOUNT, expr.span, \"written amount is not handled\"),\n+            _ => (),\n         }\n     }\n }"}, {"sha": "ebaba9629db16d515367030d40d31f792754b057", "filename": "tests/ui/unused_io_amount.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c7cfa83211c03a24f0c075c71ac3e77525f3232/tests%2Fui%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7cfa83211c03a24f0c075c71ac3e77525f3232/tests%2Fui%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.rs?ref=2c7cfa83211c03a24f0c075c71ac3e77525f3232", "patch": "@@ -16,4 +16,10 @@ fn unwrap<T: io::Read + io::Write>(s: &mut T) {\n     s.read(&mut buf).unwrap();\n }\n \n+fn vectored<T: io::Read + io::Write>(s: &mut T) -> io::Result<()> {\n+    s.read_vectored(&mut [io::IoSliceMut::new(&mut [])])?;\n+    s.write_vectored(&[io::IoSlice::new(&[])])?;\n+    Ok(())\n+}\n+\n fn main() {}"}, {"sha": "5219d63980b4b164f2f9411a59fac8d95a55ccd1", "filename": "tests/ui/unused_io_amount.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2c7cfa83211c03a24f0c075c71ac3e77525f3232/tests%2Fui%2Funused_io_amount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7cfa83211c03a24f0c075c71ac3e77525f3232/tests%2Fui%2Funused_io_amount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.stderr?ref=2c7cfa83211c03a24f0c075c71ac3e77525f3232", "patch": "@@ -1,28 +1,40 @@\n-error: handle written amount returned or use `Write::write_all` instead\n+error: written amount is not handled. Use `Write::write_all` instead\n   --> $DIR/unused_io_amount.rs:7:5\n    |\n LL |     s.write(b\"test\")?;\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unused-io-amount` implied by `-D warnings`\n \n-error: handle read amount returned or use `Read::read_exact` instead\n+error: read amount is not handled. Use `Read::read_exact` instead\n   --> $DIR/unused_io_amount.rs:9:5\n    |\n LL |     s.read(&mut buf)?;\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: handle written amount returned or use `Write::write_all` instead\n+error: written amount is not handled. Use `Write::write_all` instead\n   --> $DIR/unused_io_amount.rs:14:5\n    |\n LL |     s.write(b\"test\").unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: handle read amount returned or use `Read::read_exact` instead\n+error: read amount is not handled. Use `Read::read_exact` instead\n   --> $DIR/unused_io_amount.rs:16:5\n    |\n LL |     s.read(&mut buf).unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: read amount is not handled\n+  --> $DIR/unused_io_amount.rs:20:5\n+   |\n+LL |     s.read_vectored(&mut [io::IoSliceMut::new(&mut [])])?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: written amount is not handled\n+  --> $DIR/unused_io_amount.rs:21:5\n+   |\n+LL |     s.write_vectored(&[io::IoSlice::new(&[])])?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n "}]}