{"sha": "4a63e1e991cadfdfceb7f421c0dec9ba823b42c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNjNlMWU5OTFjYWRmZGZjZWI3ZjQyMWMwZGVjOWJhODIzYjQyYzg=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-30T14:54:18Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-30T14:57:07Z"}, "message": "Allow using `core::` in intra-doc links within core itself\n\nI came up with this idea ages ago, but rustdoc used to ICE on it. Now it\ndoesn't.", "tree": {"sha": "68fe4447ea0daa6640706bb7e2d45cd192cb0c46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68fe4447ea0daa6640706bb7e2d45cd192cb0c46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a63e1e991cadfdfceb7f421c0dec9ba823b42c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a63e1e991cadfdfceb7f421c0dec9ba823b42c8", "html_url": "https://github.com/rust-lang/rust/commit/4a63e1e991cadfdfceb7f421c0dec9ba823b42c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a63e1e991cadfdfceb7f421c0dec9ba823b42c8/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "814a560072c305d274affc78219e4a7e0558252f", "url": "https://api.github.com/repos/rust-lang/rust/commits/814a560072c305d274affc78219e4a7e0558252f", "html_url": "https://github.com/rust-lang/rust/commit/814a560072c305d274affc78219e4a7e0558252f"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "f5bfc98c71938afc6b1fcee483dd79d71c463e46", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4a63e1e991cadfdfceb7f421c0dec9ba823b42c8/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a63e1e991cadfdfceb7f421c0dec9ba823b42c8/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=4a63e1e991cadfdfceb7f421c0dec9ba823b42c8", "patch": "@@ -723,7 +723,7 @@ extern \"rust-intrinsic\" {\n     /// macro, which panics when it is executed, it is *undefined behavior* to\n     /// reach code marked with this function.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::hint::unreachable_unchecked`](crate::hint::unreachable_unchecked).\n+    /// The stabilized version of this intrinsic is [`core::hint::unreachable_unchecked`].\n     #[rustc_const_unstable(feature = \"const_unreachable_unchecked\", issue = \"53188\")]\n     pub fn unreachable() -> !;\n \n@@ -768,13 +768,13 @@ extern \"rust-intrinsic\" {\n     /// More specifically, this is the offset in bytes between successive\n     /// items of the same type, including alignment padding.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::mem::size_of`](crate::mem::size_of).\n+    /// The stabilized version of this intrinsic is [`core::mem::size_of`].\n     #[rustc_const_stable(feature = \"const_size_of\", since = \"1.40.0\")]\n     pub fn size_of<T>() -> usize;\n \n     /// The minimum alignment of a type.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::mem::align_of`](crate::mem::align_of).\n+    /// The stabilized version of this intrinsic is [`core::mem::align_of`].\n     #[rustc_const_stable(feature = \"const_min_align_of\", since = \"1.40.0\")]\n     pub fn min_align_of<T>() -> usize;\n     /// The preferred alignment of a type.\n@@ -790,21 +790,21 @@ extern \"rust-intrinsic\" {\n     pub fn size_of_val<T: ?Sized>(_: *const T) -> usize;\n     /// The required alignment of the referenced value.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::mem::align_of_val`](crate::mem::align_of_val).\n+    /// The stabilized version of this intrinsic is [`core::mem::align_of_val`].\n     #[rustc_const_unstable(feature = \"const_align_of_val\", issue = \"46571\")]\n     pub fn min_align_of_val<T: ?Sized>(_: *const T) -> usize;\n \n     /// Gets a static string slice containing the name of a type.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::any::type_name`](crate::any::type_name).\n+    /// The stabilized version of this intrinsic is [`core::any::type_name`].\n     #[rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\")]\n     pub fn type_name<T: ?Sized>() -> &'static str;\n \n     /// Gets an identifier which is globally unique to the specified type. This\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::any::TypeId::of`](crate::any::TypeId::of).\n+    /// The stabilized version of this intrinsic is [`core::any::TypeId::of`].\n     #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n@@ -829,7 +829,7 @@ extern \"rust-intrinsic\" {\n \n     /// Gets a reference to a static `Location` indicating where it was called.\n     ///\n-    /// Consider using [`core::panic::Location::caller`](crate::panic::Location::caller) instead.\n+    /// Consider using [`core::panic::Location::caller`] instead.\n     #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"76156\")]\n     pub fn caller_location() -> &'static crate::panic::Location<'static>;\n \n@@ -1158,11 +1158,11 @@ extern \"rust-intrinsic\" {\n \n     /// Performs a volatile load from the `src` pointer.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::ptr::read_volatile`](crate::ptr::read_volatile).\n+    /// The stabilized version of this intrinsic is [`core::ptr::read_volatile`].\n     pub fn volatile_load<T>(src: *const T) -> T;\n     /// Performs a volatile store to the `dst` pointer.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::ptr::write_volatile`](crate::ptr::write_volatile).\n+    /// The stabilized version of this intrinsic is [`core::ptr::write_volatile`].\n     pub fn volatile_store<T>(dst: *mut T, val: T);\n \n     /// Performs a volatile load from the `src` pointer\n@@ -1703,7 +1703,7 @@ extern \"rust-intrinsic\" {\n     /// Returns the value of the discriminant for the variant in 'v';\n     /// if `T` has no discriminant, returns `0`.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::mem::discriminant`](crate::mem::discriminant).\n+    /// The stabilized version of this intrinsic is [`core::mem::discriminant`].\n     #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n     pub fn discriminant_value<T>(v: &T) -> <T as DiscriminantKind>::Discriminant;\n "}, {"sha": "cbabf55d17b66f0c7d24bb2404b1b1600a8fc7ce", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a63e1e991cadfdfceb7f421c0dec9ba823b42c8/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a63e1e991cadfdfceb7f421c0dec9ba823b42c8/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=4a63e1e991cadfdfceb7f421c0dec9ba823b42c8", "patch": "@@ -169,6 +169,10 @@\n #![feature(int_error_matching)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n+// allow using `core::` in intra-doc links\n+#[allow(unused_extern_crates)]\n+extern crate self as core;\n+\n #[prelude_import]\n #[allow(unused)]\n use prelude::v1::*;"}]}