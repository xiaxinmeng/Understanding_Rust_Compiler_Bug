{"sha": "07cf62fc427635fef235dfad0272a0d936f31380", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3Y2Y2MmZjNDI3NjM1ZmVmMjM1ZGZhZDAyNzJhMGQ5MzZmMzEzODA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2016-04-04T23:02:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2016-04-04T23:45:39Z"}, "message": "simplify tests\n\n* change layout so that test group `foo` has source files in\n`test/foo/source` and target files in `test/foo/target`.\n\n* use significant comments to specify write mode instead of threading\n  Option<WriteMode>", "tree": {"sha": "822b6a9ccec64118cf65ca68cbb82bda7428e38c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/822b6a9ccec64118cf65ca68cbb82bda7428e38c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07cf62fc427635fef235dfad0272a0d936f31380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07cf62fc427635fef235dfad0272a0d936f31380", "html_url": "https://github.com/rust-lang/rust/commit/07cf62fc427635fef235dfad0272a0d936f31380", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07cf62fc427635fef235dfad0272a0d936f31380/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea", "html_url": "https://github.com/rust-lang/rust/commit/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea"}], "stats": {"total": 164, "additions": 115, "deletions": 49}, "files": [{"sha": "e79557af713e511b792d078dea66aa975bf7f6b2", "filename": "tests/coverage/source/comments.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07cf62fc427635fef235dfad0272a0d936f31380/tests%2Fcoverage%2Fsource%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cf62fc427635fef235dfad0272a0d936f31380/tests%2Fcoverage%2Fsource%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcoverage%2Fsource%2Fcomments.rs?ref=07cf62fc427635fef235dfad0272a0d936f31380", "patch": "@@ -1,3 +1,4 @@\n+// rustfmt-write_mode: coverage\n /// Here's a doc comment!\n fn main() {\n     // foo is bar", "previous_filename": "tests/coverage-source/comments.rs"}, {"sha": "8f9c223aef29c678aa42f4c1b8bde9a54cc050a5", "filename": "tests/coverage/target/comments.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07cf62fc427635fef235dfad0272a0d936f31380/tests%2Fcoverage%2Ftarget%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cf62fc427635fef235dfad0272a0d936f31380/tests%2Fcoverage%2Ftarget%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcoverage%2Ftarget%2Fcomments.rs?ref=07cf62fc427635fef235dfad0272a0d936f31380", "patch": "@@ -1,3 +1,4 @@\n+XX XXXXXXXXXXXXXXXXXXX XXXXXXXX\n /// Here's a doc comment!\n fn main() {\n     XX XXX XX XXX", "previous_filename": "tests/coverage-target/comments.rs"}, {"sha": "ef3486b0bdcef4f94ad0f19de79a073e57881028", "filename": "tests/system.rs", "status": "modified", "additions": 31, "deletions": 47, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/07cf62fc427635fef235dfad0272a0d936f31380/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cf62fc427635fef235dfad0272a0d936f31380/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=07cf62fc427635fef235dfad0272a0d936f31380", "patch": "@@ -20,7 +20,7 @@ use std::path::{Path, PathBuf};\n \n use rustfmt::*;\n use rustfmt::filemap::{write_system_newlines, FileMap};\n-use rustfmt::config::{Config, ReportTactic, WriteMode};\n+use rustfmt::config::{Config, ReportTactic};\n use rustfmt::rustfmt_diff::*;\n \n const DIFF_CONTEXT_SIZE: usize = 3;\n@@ -44,7 +44,7 @@ fn system_tests() {\n     // Turn a DirEntry into a String that represents the relative path to the\n     // file.\n     let files = files.map(get_path_string);\n-    let (_reports, count, fails) = check_files(files, None);\n+    let (_reports, count, fails) = check_files(files);\n \n     // Display results.\n     println!(\"Ran {} system tests.\", count);\n@@ -55,26 +55,26 @@ fn system_tests() {\n // the only difference is the coverage mode\n #[test]\n fn coverage_tests() {\n-    let files = fs::read_dir(\"tests/coverage-source\").expect(\"Couldn't read source dir\");\n+    let files = fs::read_dir(\"tests/coverage/source\").expect(\"Couldn't read source dir\");\n     let files = files.map(get_path_string);\n-    let (_reports, count, fails) = check_files(files, Some(WriteMode::Coverage));\n+    let (_reports, count, fails) = check_files(files);\n \n     println!(\"Ran {} tests in coverage mode.\", count);\n     assert!(fails == 0, \"{} tests failed\", fails);\n }\n \n #[test]\n fn checkstyle_test() {\n-    let filename = \"tests/source/fn-single-line.rs\";\n-    let expected_filename = \"tests/writemode/checkstyle.xml\";\n-    assert_output(filename, expected_filename, Some(WriteMode::Checkstyle));\n+    let filename = \"tests/writemode/source/fn-single-line.rs\";\n+    let expected_filename = \"tests/writemode/target/checkstyle.xml\";\n+    assert_output(filename, expected_filename);\n }\n \n \n // Helper function for comparing the results of rustfmt\n // to a known output file generated by one of the write modes.\n-fn assert_output(source: &str, expected_filename: &str, write_mode: Option<WriteMode>) {\n-    let config = read_config(&source, write_mode);\n+fn assert_output(source: &str, expected_filename: &str) {\n+    let config = read_config(&source);\n     let (file_map, _report) = format_file(source, &config);\n \n     // Populate output by writing to a vec.\n@@ -104,7 +104,7 @@ fn idempotence_tests() {\n     let files = fs::read_dir(\"tests/target\")\n                     .expect(\"Couldn't read target dir\")\n                     .map(get_path_string);\n-    let (_reports, count, fails) = check_files(files, None);\n+    let (_reports, count, fails) = check_files(files);\n \n     // Display results.\n     println!(\"Ran {} idempotent tests.\", count);\n@@ -122,7 +122,7 @@ fn self_tests() {\n     // Hack because there's no `IntoIterator` impl for `[T; N]`.\n     let files = files.chain(Some(\"src/lib.rs\".to_owned()).into_iter());\n \n-    let (reports, count, fails) = check_files(files, None);\n+    let (reports, count, fails) = check_files(files);\n     let mut warnings = 0;\n \n     // Display results.\n@@ -141,7 +141,7 @@ fn self_tests() {\n \n // For each file, run rustfmt and collect the output.\n // Returns the number of files checked and the number of failures.\n-fn check_files<I>(files: I, write_mode: Option<WriteMode>) -> (Vec<FormatReport>, u32, u32)\n+fn check_files<I>(files: I) -> (Vec<FormatReport>, u32, u32)\n     where I: Iterator<Item = String>\n {\n     let mut count = 0;\n@@ -151,7 +151,7 @@ fn check_files<I>(files: I, write_mode: Option<WriteMode>) -> (Vec<FormatReport>\n     for file_name in files.filter(|f| f.ends_with(\".rs\")) {\n         println!(\"Testing '{}'...\", file_name);\n \n-        match idempotent_check(file_name, write_mode) {\n+        match idempotent_check(file_name) {\n             Ok(report) => reports.push(report),\n             Err(msg) => {\n                 print_mismatches(msg);\n@@ -176,7 +176,7 @@ fn print_mismatches(result: HashMap<String, Vec<Mismatch>>) {\n     assert!(t.reset().unwrap());\n }\n \n-fn read_config(filename: &str, write_mode: Option<WriteMode>) -> Config {\n+fn read_config(filename: &str) -> Config {\n     let sig_comments = read_significant_comments(&filename);\n     let mut config = get_config(sig_comments.get(\"config\").map(|x| &(*x)[..]));\n \n@@ -189,10 +189,6 @@ fn read_config(filename: &str, write_mode: Option<WriteMode>) -> Config {\n     // Don't generate warnings for to-do items.\n     config.report_todo = ReportTactic::Never;\n \n-    if let Some(mode) = write_mode {\n-        config.write_mode = mode\n-    }\n-\n     config\n }\n \n@@ -201,11 +197,9 @@ fn format_file<P: Into<PathBuf>>(filename: P, config: &Config) -> (FileMap, Form\n     format_input(input, &config)\n }\n \n-pub fn idempotent_check(filename: String,\n-                        write_mode: Option<WriteMode>)\n-                        -> Result<FormatReport, HashMap<String, Vec<Mismatch>>> {\n+pub fn idempotent_check(filename: String) -> Result<FormatReport, HashMap<String, Vec<Mismatch>>> {\n     let sig_comments = read_significant_comments(&filename);\n-    let config = read_config(&filename, write_mode);\n+    let config = read_config(&filename);\n     let (file_map, format_report) = format_file(filename, &config);\n \n     let mut write_result = HashMap::new();\n@@ -220,7 +214,7 @@ pub fn idempotent_check(filename: String,\n \n     let target = sig_comments.get(\"target\").map(|x| &(*x)[..]);\n \n-    handle_result(write_result, target, write_mode).map(|_| format_report)\n+    handle_result(write_result, target).map(|_| format_report)\n }\n \n // Reads test config file from comments and reads its contents.\n@@ -268,14 +262,13 @@ fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n // Compare output to input.\n // TODO: needs a better name, more explanation.\n fn handle_result(result: HashMap<String, String>,\n-                 target: Option<&str>,\n-                 write_mode: Option<WriteMode>)\n+                 target: Option<&str>)\n                  -> Result<(), HashMap<String, Vec<Mismatch>>> {\n     let mut failures = HashMap::new();\n \n     for (file_name, fmt_text) in result {\n         // If file is in tests/source, compare to file with same name in tests/target.\n-        let target = get_target(&file_name, target, write_mode);\n+        let target = get_target(&file_name, target);\n         let mut f = fs::File::open(&target).expect(\"Couldn't open target\");\n \n         let mut text = String::new();\n@@ -297,29 +290,20 @@ fn handle_result(result: HashMap<String, String>,\n }\n \n // Map source file paths to their target paths.\n-fn get_target(file_name: &str, target: Option<&str>, write_mode: Option<WriteMode>) -> String {\n-    let file_path = Path::new(file_name);\n-    let (source_path_prefix, target_path_prefix) = match write_mode {\n-        Some(WriteMode::Coverage) => {\n-            (Path::new(\"tests/coverage-source/\"), \"tests/coverage-target/\")\n+fn get_target(file_name: &str, target: Option<&str>) -> String {\n+    if file_name.contains(\"source\") {\n+        let target_file_name = file_name.replace(\"source\", \"target\");\n+        if let Some(replace_name) = target {\n+            Path::new(&target_file_name)\n+                .with_file_name(replace_name)\n+                .into_os_string()\n+                .into_string()\n+                .unwrap()\n+        } else {\n+            target_file_name\n         }\n-        _ => (Path::new(\"tests/source/\"), \"tests/target/\"),\n-    };\n-\n-    if file_path.starts_with(source_path_prefix) {\n-        let mut components = file_path.components();\n-        // Can't skip(2) as the resulting iterator can't as_path()\n-        components.next();\n-        components.next();\n-\n-        let new_target = match components.as_path().to_str() {\n-            Some(string) => string,\n-            None => file_name,\n-        };\n-        let base = target.unwrap_or(new_target);\n-\n-        format!(\"{}{}\", target_path_prefix, base)\n     } else {\n+        // This is either and idempotence check or a self check\n         file_name.to_owned()\n     }\n }"}, {"sha": "12c7dd9fdf1a0e2830645f4e32650d476fc54c1f", "filename": "tests/writemode/checkstyle.xml", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea/tests%2Fwritemode%2Fcheckstyle.xml", "raw_url": "https://github.com/rust-lang/rust/raw/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea/tests%2Fwritemode%2Fcheckstyle.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Fcheckstyle.xml?ref=4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea", "patch": "@@ -1,2 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<checkstyle version=\"4.3\"><file name=\"tests/source/fn-single-line.rs\"><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_expr() { 1 }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_stmt() { foo(); }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_local() { let z = 5; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_item(x: &amp;mut i32) { x = 3; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn empty() {}`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_return() -&gt; String { &quot;yay&quot; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_where() -&gt; T`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `    where T: Sync`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `{`\" /><error line=\"50\" severity=\"warning\" message=\"Should be `fn lots_of_space() { 1 }`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `trait CoolerTypes {`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `fn Foo&lt;T&gt;() where T: Bar {}`\" /></file></checkstyle>"}, {"sha": "289dd9aa093affd4c63ae3a0a690f678f5d07530", "filename": "tests/writemode/source/fn-single-line.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/07cf62fc427635fef235dfad0272a0d936f31380/tests%2Fwritemode%2Fsource%2Ffn-single-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cf62fc427635fef235dfad0272a0d936f31380/tests%2Fwritemode%2Fsource%2Ffn-single-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Fsource%2Ffn-single-line.rs?ref=07cf62fc427635fef235dfad0272a0d936f31380", "patch": "@@ -0,0 +1,80 @@\n+// rustfmt-fn_single_line: true\n+// rustfmt-write_mode: checkstyle\n+// Test single-line functions.\n+\n+fn foo_expr() {\n+    1\n+}\n+\n+fn foo_stmt() {\n+    foo();\n+}\n+\n+fn foo_decl_local()  {\n+    let z = 5;\n+   }\n+\n+fn    foo_decl_item(x: &mut i32) {\n+    x = 3;\n+}\n+\n+   fn empty()     {\n+\n+}\n+\n+fn foo_return() -> String {\n+    \"yay\"\n+}\n+\n+fn foo_where() -> T where T: Sync {\n+    let x = 2;\n+}\n+\n+fn fooblock() {\n+    {\n+        \"inner-block\"\n+    }\n+}\n+\n+fn fooblock2(x: i32) {\n+    let z = match x {\n+        _ => 2,\n+    };\n+}\n+\n+fn comment() {\n+    // this is a test comment\n+    1\n+}\n+\n+fn comment2() {\n+    // multi-line comment\n+    let z = 2;\n+    1\n+}\n+\n+fn only_comment() {\n+    // Keep this here\n+}\n+\n+fn aaaaaaaaaaaaaaaaa_looooooooooooooooooooooong_name() {\n+    let z = \"aaaaaaawwwwwwwwwwwwwwwwwwwwwwwwwwww\";\n+}\n+\n+fn lots_of_space                      ()                                                           {\n+                           1                 \n+}\n+\n+fn mac() -> Vec<i32> { vec![] }\n+\n+trait CoolTypes {\n+    fn dummy(&self) {\n+    }\n+}\n+\n+trait CoolerTypes { fn dummy(&self) { \n+}\n+}\n+\n+fn Foo<T>() where T: Bar {\n+}"}, {"sha": "b59d81b29c8fb2f052b14a7feb3d8cc87a1e99f8", "filename": "tests/writemode/target/checkstyle.xml", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07cf62fc427635fef235dfad0272a0d936f31380/tests%2Fwritemode%2Ftarget%2Fcheckstyle.xml", "raw_url": "https://github.com/rust-lang/rust/raw/07cf62fc427635fef235dfad0272a0d936f31380/tests%2Fwritemode%2Ftarget%2Fcheckstyle.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Ftarget%2Fcheckstyle.xml?ref=07cf62fc427635fef235dfad0272a0d936f31380", "patch": "@@ -0,0 +1,2 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<checkstyle version=\"4.3\"><file name=\"tests/writemode/source/fn-single-line.rs\"><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_expr() { 1 }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_stmt() { foo(); }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_decl_local() { let z = 5; }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_decl_item(x: &amp;mut i32) { x = 3; }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn empty() {}`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_return() -&gt; String { &quot;yay&quot; }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_where() -&gt; T`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `    where T: Sync`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `{`\" /><error line=\"51\" severity=\"warning\" message=\"Should be `fn lots_of_space() { 1 }`\" /><error line=\"58\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"58\" severity=\"warning\" message=\"Should be `trait CoolerTypes {`\" /><error line=\"58\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"58\" severity=\"warning\" message=\"Should be `fn Foo&lt;T&gt;() where T: Bar {}`\" /></file></checkstyle>"}]}