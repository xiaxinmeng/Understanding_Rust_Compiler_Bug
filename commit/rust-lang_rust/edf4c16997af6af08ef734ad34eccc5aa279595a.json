{"sha": "edf4c16997af6af08ef734ad34eccc5aa279595a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZjRjMTY5OTdhZjZhZjA4ZWY3MzRhZDM0ZWNjYzVhYTI3OTU5NWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-06T20:21:42Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-09T18:21:47Z"}, "message": "Implement io::native::stdio", "tree": {"sha": "3fa74cd21a1cebb96e2bc94a9363f8fee74a66ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fa74cd21a1cebb96e2bc94a9363f8fee74a66ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edf4c16997af6af08ef734ad34eccc5aa279595a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edf4c16997af6af08ef734ad34eccc5aa279595a", "html_url": "https://github.com/rust-lang/rust/commit/edf4c16997af6af08ef734ad34eccc5aa279595a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edf4c16997af6af08ef734ad34eccc5aa279595a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b509f7905a578663d57121973b4a9a6b619341c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b509f7905a578663d57121973b4a9a6b619341c2", "html_url": "https://github.com/rust-lang/rust/commit/b509f7905a578663d57121973b4a9a6b619341c2"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "5661725d77baa40f6d8247a2c015a3d9c800d500", "filename": "src/libstd/rt/io/native/stdio.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/edf4c16997af6af08ef734ad34eccc5aa279595a/src%2Flibstd%2Frt%2Fio%2Fnative%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf4c16997af6af08ef734ad34eccc5aa279595a/src%2Flibstd%2Frt%2Fio%2Fnative%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnative%2Fstdio.rs?ref=edf4c16997af6af08ef734ad34eccc5aa279595a", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use libc;\n+use option::Option;\n+use rt::io::{Reader, Writer};\n+use super::file;\n+\n+/// Creates a new handle to the stdin of this process\n+pub fn stdin() -> StdIn { StdIn::new() }\n+/// Creates a new handle to the stdout of this process\n+pub fn stdout() -> StdOut { StdOut::new(libc::STDOUT_FILENO) }\n+/// Creates a new handle to the stderr of this process\n+pub fn stderr() -> StdOut { StdOut::new(libc::STDERR_FILENO) }\n+\n+pub fn print(s: &str) {\n+    stdout().write(s.as_bytes())\n+}\n+\n+pub fn println(s: &str) {\n+    let mut out = stdout();\n+    out.write(s.as_bytes());\n+    out.write(['\\n' as u8]);\n+}\n+\n+pub struct StdIn {\n+    priv fd: file::FileDesc\n+}\n+\n+impl StdIn {\n+    /// Duplicates the stdin file descriptor, returning an io::Reader\n+    #[fixed_stack_segment] #[inline(never)]\n+    pub fn new() -> StdIn {\n+        let fd = unsafe { libc::dup(libc::STDIN_FILENO) };\n+        StdIn { fd: file::FileDesc::new(fd) }\n+    }\n+}\n+\n+impl Reader for StdIn {\n+    fn read(&mut self, buf: &mut [u8]) -> Option<uint> { self.fd.read(buf) }\n+    fn eof(&mut self) -> bool { self.fd.eof() }\n+}\n+\n+pub struct StdOut {\n+    priv fd: file::FileDesc\n+}\n+\n+impl StdOut {\n+    /// Duplicates the specified file descriptor, returning an io::Writer\n+    #[fixed_stack_segment] #[inline(never)]\n+    pub fn new(fd: file::fd_t) -> StdOut {\n+        let fd = unsafe { libc::dup(fd) };\n+        StdOut { fd: file::FileDesc::new(fd) }\n+    }\n+}\n+\n+impl Writer for StdOut {\n+    fn write(&mut self, buf: &[u8]) { self.fd.write(buf) }\n+    fn flush(&mut self) { self.fd.flush() }\n+}"}]}