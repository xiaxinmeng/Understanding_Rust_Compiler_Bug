{"sha": "577dbc8519be61c1318b242c6c7fc15bbdf3b4b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3N2RiYzg1MTliZTYxYzEzMThiMjQyYzZjN2ZjMTViYmRmM2I0Yjc=", "commit": {"author": {"name": "iirelu", "email": "anna@bawk.space", "date": "2018-09-26T15:06:11Z"}, "committer": {"name": "iirelu", "email": "anna@bawk.space", "date": "2018-09-26T15:06:11Z"}, "message": "Incorporate criticisms into keyword docs\n\nThanks to @Centril for these.", "tree": {"sha": "e5b3aa06c92d00cc14ca47ab94674d9482e3c08b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5b3aa06c92d00cc14ca47ab94674d9482e3c08b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/577dbc8519be61c1318b242c6c7fc15bbdf3b4b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/577dbc8519be61c1318b242c6c7fc15bbdf3b4b7", "html_url": "https://github.com/rust-lang/rust/commit/577dbc8519be61c1318b242c6c7fc15bbdf3b4b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/577dbc8519be61c1318b242c6c7fc15bbdf3b4b7/comments", "author": {"login": "iirelu", "id": 3432543, "node_id": "MDQ6VXNlcjM0MzI1NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/3432543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iirelu", "html_url": "https://github.com/iirelu", "followers_url": "https://api.github.com/users/iirelu/followers", "following_url": "https://api.github.com/users/iirelu/following{/other_user}", "gists_url": "https://api.github.com/users/iirelu/gists{/gist_id}", "starred_url": "https://api.github.com/users/iirelu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iirelu/subscriptions", "organizations_url": "https://api.github.com/users/iirelu/orgs", "repos_url": "https://api.github.com/users/iirelu/repos", "events_url": "https://api.github.com/users/iirelu/events{/privacy}", "received_events_url": "https://api.github.com/users/iirelu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iirelu", "id": 3432543, "node_id": "MDQ6VXNlcjM0MzI1NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/3432543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iirelu", "html_url": "https://github.com/iirelu", "followers_url": "https://api.github.com/users/iirelu/followers", "following_url": "https://api.github.com/users/iirelu/following{/other_user}", "gists_url": "https://api.github.com/users/iirelu/gists{/gist_id}", "starred_url": "https://api.github.com/users/iirelu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iirelu/subscriptions", "organizations_url": "https://api.github.com/users/iirelu/orgs", "repos_url": "https://api.github.com/users/iirelu/repos", "events_url": "https://api.github.com/users/iirelu/events{/privacy}", "received_events_url": "https://api.github.com/users/iirelu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50f631ce80ac3d04d52e4d6b3b4c5126ac9c1009", "url": "https://api.github.com/repos/rust-lang/rust/commits/50f631ce80ac3d04d52e4d6b3b4c5126ac9c1009", "html_url": "https://github.com/rust-lang/rust/commit/50f631ce80ac3d04d52e4d6b3b4c5126ac9c1009"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "dc78accc69f8845d168f8642cb2025717d4a482a", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/577dbc8519be61c1318b242c6c7fc15bbdf3b4b7/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577dbc8519be61c1318b242c6c7fc15bbdf3b4b7/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=577dbc8519be61c1318b242c6c7fc15bbdf3b4b7", "patch": "@@ -10,7 +10,7 @@\n \n #[doc(keyword = \"as\")]\n //\n-/// The keyword for casting types.\n+/// The keyword for casting a value to a type.\n ///\n /// `as` is most commonly used to turn primitive types into other primitive types, but it has other\n /// uses that include turning pointers into addresses, addresses into pointers, and pointers into\n@@ -133,7 +133,7 @@ mod crate_keyword { }\n ///\n /// Enums in Rust are similar to those of other compiled languages like C, but have important\n /// differences that make them considerably more powerful. What Rust calls enums are more commonly\n-/// known as Algebraic Data Types if you're coming from a functional programming background. The\n+/// known as [Algebraic Data Types] if you're coming from a functional programming background. The\n /// important detail is that each enum variant can have data to go along with it.\n ///\n /// ```rust\n@@ -177,6 +177,7 @@ mod crate_keyword { }\n ///\n /// For more information, take a look at the [Rust Book] or the [Reference]\n ///\n+/// [Algebraic Data Types]: https://en.wikipedia.org/wiki/Algebraic_data_type\n /// [`Option`]: option/enum.Option.html\n /// [Rust Book]: https://doc.rust-lang.org/book/second-edition/ch06-01-defining-an-enum.html\n /// [Reference]: https://doc.rust-lang.org/reference/items/enumerations.html\n@@ -442,11 +443,14 @@ mod if_keyword { }\n //\n /// The implementation-defining keyword.\n ///\n-/// The `impl` keyword is primarily used for defining implementations on types. There are two kinds\n-/// of implementations: Inherent implementations and trait implementations. Inherent\n-/// implementations define functions that operate on a type, known in object-oriented languages as\n-/// methods. Trait implementations are used to give a type a trait, and implement any of the\n-/// required associated items or methods that it requires.\n+/// The `impl` keyword is primarily used to define implementations on types. Inherent\n+/// implementations are standalone, while trait implementations are used to implement traits for\n+/// types, or other traits.\n+///\n+/// Functions and consts can both be defined in an implementation. A function defined in an\n+/// `impl` block can be standalone, meaning it would be called like `Foo::bar()`. If the function\n+/// takes `self`, `&self`, or `&mut self` as its first argument, it can also be called using\n+/// method-call syntax, a familiar feature to any object oriented programmer, like `foo.bar()`.\n ///\n /// ```rust\n /// struct Example {\n@@ -551,7 +555,8 @@ mod impl_keyword { }\n ///\n /// Other places the `let` keyword is used include along with [`if`], in the form of `if let`\n /// expressions. They're useful if the pattern being matched isn't exhaustive, such as with\n-/// enumerations.\n+/// enumerations. `while let` also exists, which runs a loop with a pattern matched value until\n+/// that pattern can't be matched.\n ///\n /// For more information on the `let` keyword, see the [Rust book] or the [Reference]\n ///"}]}