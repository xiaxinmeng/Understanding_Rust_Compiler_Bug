{"sha": "2ed0f29168f5bc116e747152be600519b5d78bfd", "node_id": "C_kwDOAAsO6NoAKDJlZDBmMjkxNjhmNWJjMTE2ZTc0NzE1MmJlNjAwNTE5YjVkNzhiZmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-11T21:30:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-11T21:30:07Z"}, "message": "Auto merge of #100426 - matthiaskrgr:rollup-0ks4dou, r=matthiaskrgr\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #93896 (rustdoc: make item-infos dimmer on dark theme)\n - #99337 (rustdoc: simplify highlight.rs)\n - #99421 (add crt-static for android)\n - #99500 (Fix flags when using clang as linker for Fuchsia)\n - #99511 (make raw_eq precondition more restrictive)\n - #99992 (Add `x.sh` and `x.ps1` shell scripts)\n - #100112 (Fix test: chunks_mut_are_send_and_sync)\n - #100203 (provide correct size hint for unsupported platform `CommandArgs`)\n - #100307 (Fix #96847)\n - #100350 (Stringify non-shorthand visibility correctly)\n - #100374 (Improve crate selection on rustdoc search results page)\n - #100392 (Simplify visitors)\n - #100418 (Add stability attributes to BacktraceStatus variants)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c90db3ddda1c65dc26527c7d60fc06f6f94040d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c90db3ddda1c65dc26527c7d60fc06f6f94040d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ed0f29168f5bc116e747152be600519b5d78bfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed0f29168f5bc116e747152be600519b5d78bfd", "html_url": "https://github.com/rust-lang/rust/commit/2ed0f29168f5bc116e747152be600519b5d78bfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ed0f29168f5bc116e747152be600519b5d78bfd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20ffea6938b5839c390252e07940b99e3b6a889a", "url": "https://api.github.com/repos/rust-lang/rust/commits/20ffea6938b5839c390252e07940b99e3b6a889a", "html_url": "https://github.com/rust-lang/rust/commit/20ffea6938b5839c390252e07940b99e3b6a889a"}, {"sha": "c7578b4e65df9ede839fe94063e09961b82e6ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7578b4e65df9ede839fe94063e09961b82e6ade", "html_url": "https://github.com/rust-lang/rust/commit/c7578b4e65df9ede839fe94063e09961b82e6ade"}], "stats": {"total": 878, "additions": 456, "deletions": 422}, "files": [{"sha": "e81d6d68d41017dc6069b6eae94a292c7264869b", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -2142,9 +2142,9 @@ checksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.126\"\n+version = \"0.2.129\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"349d5a591cd28b49e1d1037471617a32ddcda5731b99419008085f72d5a53836\"\n+checksum = \"64de3cc433455c14174d42e554d4027ee631c4d046d43e3ecc6efc4636cdc7a7\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]"}, {"sha": "3f71fce0e3b318d92962a6f9e34797ba505b683c", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -2601,7 +2601,7 @@ pub struct Visibility {\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum VisibilityKind {\n     Public,\n-    Restricted { path: P<Path>, id: NodeId },\n+    Restricted { path: P<Path>, id: NodeId, shorthand: bool },\n     Inherited,\n }\n "}, {"sha": "40c05f43f686deb62c2cee456c72770d9f9c8cc2", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -1487,7 +1487,7 @@ pub fn noop_flat_map_stmt_kind<T: MutVisitor>(\n pub fn noop_visit_vis<T: MutVisitor>(visibility: &mut Visibility, vis: &mut T) {\n     match &mut visibility.kind {\n         VisibilityKind::Public | VisibilityKind::Inherited => {}\n-        VisibilityKind::Restricted { path, id } => {\n+        VisibilityKind::Restricted { path, id, shorthand: _ } => {\n             vis.visit_path(path);\n             vis.visit_id(id);\n         }"}, {"sha": "4b485b547f49518867d0361dd63ab30b99bc497e", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -168,23 +168,17 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_param_bound(&mut self, bounds: &'ast GenericBound, _ctxt: BoundKind) {\n         walk_param_bound(self, bounds)\n     }\n-    fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n-        walk_poly_trait_ref(self, t, m)\n+    fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef) {\n+        walk_poly_trait_ref(self, t)\n     }\n     fn visit_variant_data(&mut self, s: &'ast VariantData) {\n         walk_struct_def(self, s)\n     }\n     fn visit_field_def(&mut self, s: &'ast FieldDef) {\n         walk_field_def(self, s)\n     }\n-    fn visit_enum_def(\n-        &mut self,\n-        enum_definition: &'ast EnumDef,\n-        generics: &'ast Generics,\n-        item_id: NodeId,\n-        _: Span,\n-    ) {\n-        walk_enum_def(self, enum_definition, generics, item_id)\n+    fn visit_enum_def(&mut self, enum_definition: &'ast EnumDef) {\n+        walk_enum_def(self, enum_definition)\n     }\n     fn visit_variant(&mut self, v: &'ast Variant) {\n         walk_variant(self, v)\n@@ -287,11 +281,8 @@ pub fn walk_lifetime<'a, V: Visitor<'a>>(visitor: &mut V, lifetime: &'a Lifetime\n     visitor.visit_ident(lifetime.ident);\n }\n \n-pub fn walk_poly_trait_ref<'a, V>(\n-    visitor: &mut V,\n-    trait_ref: &'a PolyTraitRef,\n-    _: &TraitBoundModifier,\n-) where\n+pub fn walk_poly_trait_ref<'a, V>(visitor: &mut V, trait_ref: &'a PolyTraitRef)\n+where\n     V: Visitor<'a>,\n {\n     walk_list!(visitor, visit_generic_param, &trait_ref.bound_generic_params);\n@@ -334,7 +325,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n         }\n         ItemKind::Enum(ref enum_definition, ref generics) => {\n             visitor.visit_generics(generics);\n-            visitor.visit_enum_def(enum_definition, generics, item.id, item.span)\n+            visitor.visit_enum_def(enum_definition)\n         }\n         ItemKind::Impl(box Impl {\n             defaultness: _,\n@@ -377,12 +368,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n     walk_list!(visitor, visit_attribute, &item.attrs);\n }\n \n-pub fn walk_enum_def<'a, V: Visitor<'a>>(\n-    visitor: &mut V,\n-    enum_definition: &'a EnumDef,\n-    _: &'a Generics,\n-    _: NodeId,\n-) {\n+pub fn walk_enum_def<'a, V: Visitor<'a>>(visitor: &mut V, enum_definition: &'a EnumDef) {\n     walk_list!(visitor, visit_variant, &enum_definition.variants);\n }\n \n@@ -598,7 +584,7 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignI\n \n pub fn walk_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a GenericBound) {\n     match *bound {\n-        GenericBound::Trait(ref typ, ref modifier) => visitor.visit_poly_trait_ref(typ, modifier),\n+        GenericBound::Trait(ref typ, ref _modifier) => visitor.visit_poly_trait_ref(typ),\n         GenericBound::Outlives(ref lifetime) => {\n             visitor.visit_lifetime(lifetime, LifetimeCtxt::Bound)\n         }\n@@ -936,7 +922,7 @@ pub fn walk_arm<'a, V: Visitor<'a>>(visitor: &mut V, arm: &'a Arm) {\n }\n \n pub fn walk_vis<'a, V: Visitor<'a>>(visitor: &mut V, vis: &'a Visibility) {\n-    if let VisibilityKind::Restricted { ref path, id } = vis.kind {\n+    if let VisibilityKind::Restricted { ref path, id, shorthand: _ } = vis.kind {\n         visitor.visit_path(path, id);\n     }\n }"}, {"sha": "92e6bc6013dc2ab4ada6cbba7e0469d3b8b04308", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -1536,15 +1536,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             hir::MatchSource::ForLoopDesugar,\n         ));\n \n-        let attrs: Vec<_> = e.attrs.iter().map(|a| self.lower_attr(a)).collect();\n-\n         // This is effectively `{ let _result = ...; _result }`.\n         // The construct was introduced in #21984 and is necessary to make sure that\n         // temporaries in the `head` expression are dropped and do not leak to the\n         // surrounding scope of the `match` since the `match` is not a terminating scope.\n         //\n         // Also, add the attributes to the outer returned expr node.\n-        self.expr_drop_temps_mut(for_span, match_expr, attrs.into())\n+        self.expr_drop_temps_mut(for_span, match_expr, e.attrs.clone())\n     }\n \n     /// Desugar `ExprKind::Try` from: `<expr>?` into:"}, {"sha": "e08c1d063c10544aca6fd83785b103c4597c9d30", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -295,14 +295,14 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         self.insert(lifetime.span, lifetime.hir_id, Node::Lifetime(lifetime));\n     }\n \n-    fn visit_variant(&mut self, v: &'hir Variant<'hir>, g: &'hir Generics<'hir>, item_id: HirId) {\n+    fn visit_variant(&mut self, v: &'hir Variant<'hir>) {\n         self.insert(v.span, v.id, Node::Variant(v));\n         self.with_parent(v.id, |this| {\n             // Register the constructor of this variant.\n             if let Some(ctor_hir_id) = v.data.ctor_hir_id() {\n                 this.insert(v.span, ctor_hir_id, Node::Ctor(&v.data));\n             }\n-            intravisit::walk_variant(this, v, g, item_id);\n+            intravisit::walk_variant(this, v);\n         });\n     }\n "}, {"sha": "8c67cebae55aff7aa67b77100e544dc1e26ee545", "filename": "compiler/rustc_ast_lowering/src/lifetime_collector.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -1,9 +1,6 @@\n use super::ResolverAstLoweringExt;\n use rustc_ast::visit::{self, BoundKind, LifetimeCtxt, Visitor};\n-use rustc_ast::{\n-    FnRetTy, GenericBounds, Lifetime, NodeId, PathSegment, PolyTraitRef, TraitBoundModifier, Ty,\n-    TyKind,\n-};\n+use rustc_ast::{FnRetTy, GenericBounds, Lifetime, NodeId, PathSegment, PolyTraitRef, Ty, TyKind};\n use rustc_hir::def::LifetimeRes;\n use rustc_middle::span_bug;\n use rustc_middle::ty::ResolverAstLowering;\n@@ -71,10 +68,10 @@ impl<'ast> Visitor<'ast> for LifetimeCollectVisitor<'ast> {\n         visit::walk_path_segment(self, path_span, path_segment);\n     }\n \n-    fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n+    fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef) {\n         self.current_binders.push(t.trait_ref.ref_id);\n \n-        visit::walk_poly_trait_ref(self, t, m);\n+        visit::walk_poly_trait_ref(self, t);\n \n         self.current_binders.pop();\n     }"}, {"sha": "e61dfef7bd380394b28d3f0711c4a22cf8445a80", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -1536,25 +1536,17 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_param_bound(self, bound)\n     }\n \n-    fn visit_poly_trait_ref(&mut self, t: &'a PolyTraitRef, m: &'a TraitBoundModifier) {\n+    fn visit_poly_trait_ref(&mut self, t: &'a PolyTraitRef) {\n         self.check_late_bound_lifetime_defs(&t.bound_generic_params);\n-        visit::walk_poly_trait_ref(self, t, m);\n+        visit::walk_poly_trait_ref(self, t);\n     }\n \n     fn visit_variant_data(&mut self, s: &'a VariantData) {\n         self.with_banned_assoc_ty_bound(|this| visit::walk_struct_def(this, s))\n     }\n \n-    fn visit_enum_def(\n-        &mut self,\n-        enum_definition: &'a EnumDef,\n-        generics: &'a Generics,\n-        item_id: NodeId,\n-        _: Span,\n-    ) {\n-        self.with_banned_assoc_ty_bound(|this| {\n-            visit::walk_enum_def(this, enum_definition, generics, item_id)\n-        })\n+    fn visit_enum_def(&mut self, enum_definition: &'a EnumDef) {\n+        self.with_banned_assoc_ty_bound(|this| visit::walk_enum_def(this, enum_definition))\n     }\n \n     fn visit_fn(&mut self, fk: FnKind<'a>, span: Span, id: NodeId) {"}, {"sha": "be3e46661bf02398fa20f401b8c0d22262e8f949", "filename": "compiler/rustc_ast_passes/src/node_count.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -79,9 +79,9 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_param_bound(self, bounds)\n     }\n-    fn visit_poly_trait_ref(&mut self, t: &PolyTraitRef, m: &TraitBoundModifier) {\n+    fn visit_poly_trait_ref(&mut self, t: &PolyTraitRef) {\n         self.count += 1;\n-        walk_poly_trait_ref(self, t, m)\n+        walk_poly_trait_ref(self, t)\n     }\n     fn visit_variant_data(&mut self, s: &VariantData) {\n         self.count += 1;\n@@ -91,15 +91,9 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_field_def(self, s)\n     }\n-    fn visit_enum_def(\n-        &mut self,\n-        enum_definition: &EnumDef,\n-        generics: &Generics,\n-        item_id: NodeId,\n-        _: Span,\n-    ) {\n+    fn visit_enum_def(&mut self, enum_definition: &EnumDef) {\n         self.count += 1;\n-        walk_enum_def(self, enum_definition, generics, item_id)\n+        walk_enum_def(self, enum_definition)\n     }\n     fn visit_variant(&mut self, v: &Variant) {\n         self.count += 1;"}, {"sha": "bd87987010e8fd2a15ae17ef490ef2547a3c6077", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -412,9 +412,9 @@ impl<'a> State<'a> {\n     pub(crate) fn print_visibility(&mut self, vis: &ast::Visibility) {\n         match vis.kind {\n             ast::VisibilityKind::Public => self.word_nbsp(\"pub\"),\n-            ast::VisibilityKind::Restricted { ref path, .. } => {\n+            ast::VisibilityKind::Restricted { ref path, id: _, shorthand } => {\n                 let path = Self::to_string(|s| s.print_path(path, false, 0));\n-                if path == \"crate\" || path == \"self\" || path == \"super\" {\n+                if shorthand && (path == \"crate\" || path == \"self\" || path == \"super\") {\n                     self.word_nbsp(format!(\"pub({})\", path))\n                 } else {\n                     self.word_nbsp(format!(\"pub(in {})\", path))"}, {"sha": "ef64f52d40b761e723f50be49bd9aafc642b704f", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -383,16 +383,12 @@ fn find_type_parameters(\n         }\n \n         // Place bound generic params on a stack, to extract them when a type is encountered.\n-        fn visit_poly_trait_ref(\n-            &mut self,\n-            trait_ref: &'a ast::PolyTraitRef,\n-            modifier: &'a ast::TraitBoundModifier,\n-        ) {\n+        fn visit_poly_trait_ref(&mut self, trait_ref: &'a ast::PolyTraitRef) {\n             let stack_len = self.bound_generic_params_stack.len();\n             self.bound_generic_params_stack\n                 .extend(trait_ref.bound_generic_params.clone().into_iter());\n \n-            visit::walk_poly_trait_ref(self, trait_ref, modifier);\n+            visit::walk_poly_trait_ref(self, trait_ref);\n \n             self.bound_generic_params_stack.truncate(stack_len);\n         }"}, {"sha": "953761a782052f952e1e60722253a49489d6e1f1", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -1583,12 +1583,21 @@ fn crt_objects_fallback(sess: &Session, crate_type: CrateType) -> bool {\n fn add_pre_link_objects(\n     cmd: &mut dyn Linker,\n     sess: &Session,\n+    flavor: LinkerFlavor,\n     link_output_kind: LinkOutputKind,\n     self_contained: bool,\n ) {\n+    // FIXME: we are currently missing some infra here (per-linker-flavor CRT objects),\n+    // so Fuchsia has to be special-cased.\n     let opts = &sess.target;\n-    let objects =\n-        if self_contained { &opts.pre_link_objects_fallback } else { &opts.pre_link_objects };\n+    let empty = Default::default();\n+    let objects = if self_contained {\n+        &opts.pre_link_objects_fallback\n+    } else if !(sess.target.os == \"fuchsia\" && flavor == LinkerFlavor::Gcc) {\n+        &opts.pre_link_objects\n+    } else {\n+        &empty\n+    };\n     for obj in objects.get(&link_output_kind).iter().copied().flatten() {\n         cmd.add_object(&get_object_file_path(sess, obj, self_contained));\n     }\n@@ -1914,7 +1923,7 @@ fn linker_with_args<'a>(\n     // ------------ Object code and libraries, order-dependent ------------\n \n     // Pre-link CRT objects.\n-    add_pre_link_objects(cmd, sess, link_output_kind, crt_objects_fallback);\n+    add_pre_link_objects(cmd, sess, flavor, link_output_kind, crt_objects_fallback);\n \n     add_linked_symbol_object(\n         cmd,\n@@ -2070,7 +2079,10 @@ fn add_order_independent_options(\n \n     add_link_script(cmd, sess, tmpdir, crate_type);\n \n-    if sess.target.os == \"fuchsia\" && crate_type == CrateType::Executable {\n+    if sess.target.os == \"fuchsia\"\n+        && crate_type == CrateType::Executable\n+        && flavor != LinkerFlavor::Gcc\n+    {\n         let prefix = if sess.opts.unstable_opts.sanitizer.contains(SanitizerSet::ADDRESS) {\n             \"asan/\"\n         } else {"}, {"sha": "51b1bfad8a0d85a2cbdcc16d9178866dab6a57b5", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 10, "deletions": 41, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -385,30 +385,17 @@ pub trait Visitor<'v>: Sized {\n     fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef<'v>, m: TraitBoundModifier) {\n         walk_poly_trait_ref(self, t, m)\n     }\n-    fn visit_variant_data(\n-        &mut self,\n-        s: &'v VariantData<'v>,\n-        _: Symbol,\n-        _: &'v Generics<'v>,\n-        _parent_id: HirId,\n-        _: Span,\n-    ) {\n+    fn visit_variant_data(&mut self, s: &'v VariantData<'v>) {\n         walk_struct_def(self, s)\n     }\n     fn visit_field_def(&mut self, s: &'v FieldDef<'v>) {\n         walk_field_def(self, s)\n     }\n-    fn visit_enum_def(\n-        &mut self,\n-        enum_definition: &'v EnumDef<'v>,\n-        generics: &'v Generics<'v>,\n-        item_id: HirId,\n-        _: Span,\n-    ) {\n-        walk_enum_def(self, enum_definition, generics, item_id)\n+    fn visit_enum_def(&mut self, enum_definition: &'v EnumDef<'v>, item_id: HirId) {\n+        walk_enum_def(self, enum_definition, item_id)\n     }\n-    fn visit_variant(&mut self, v: &'v Variant<'v>, g: &'v Generics<'v>, item_id: HirId) {\n-        walk_variant(self, v, g, item_id)\n+    fn visit_variant(&mut self, v: &'v Variant<'v>) {\n+        walk_variant(self, v)\n     }\n     fn visit_label(&mut self, label: &'v Label) {\n         walk_label(self, label)\n@@ -572,7 +559,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n         ItemKind::Enum(ref enum_definition, ref generics) => {\n             visitor.visit_generics(generics);\n             // `visit_enum_def()` takes care of visiting the `Item`'s `HirId`.\n-            visitor.visit_enum_def(enum_definition, generics, item.hir_id(), item.span)\n+            visitor.visit_enum_def(enum_definition, item.hir_id())\n         }\n         ItemKind::Impl(Impl {\n             unsafety: _,\n@@ -595,13 +582,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n         | ItemKind::Union(ref struct_definition, ref generics) => {\n             visitor.visit_generics(generics);\n             visitor.visit_id(item.hir_id());\n-            visitor.visit_variant_data(\n-                struct_definition,\n-                item.ident.name,\n-                generics,\n-                item.hir_id(),\n-                item.span,\n-            );\n+            visitor.visit_variant_data(struct_definition);\n         }\n         ItemKind::Trait(.., ref generics, bounds, trait_item_refs) => {\n             visitor.visit_id(item.hir_id());\n@@ -649,28 +630,16 @@ pub fn walk_use<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path<'v>, hir_id:\n pub fn walk_enum_def<'v, V: Visitor<'v>>(\n     visitor: &mut V,\n     enum_definition: &'v EnumDef<'v>,\n-    generics: &'v Generics<'v>,\n     item_id: HirId,\n ) {\n     visitor.visit_id(item_id);\n-    walk_list!(visitor, visit_variant, enum_definition.variants, generics, item_id);\n+    walk_list!(visitor, visit_variant, enum_definition.variants);\n }\n \n-pub fn walk_variant<'v, V: Visitor<'v>>(\n-    visitor: &mut V,\n-    variant: &'v Variant<'v>,\n-    generics: &'v Generics<'v>,\n-    parent_item_id: HirId,\n-) {\n+pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V, variant: &'v Variant<'v>) {\n     visitor.visit_ident(variant.ident);\n     visitor.visit_id(variant.id);\n-    visitor.visit_variant_data(\n-        &variant.data,\n-        variant.ident.name,\n-        generics,\n-        parent_item_id,\n-        variant.span,\n-    );\n+    visitor.visit_variant_data(&variant.data);\n     walk_list!(visitor, visit_anon_const, &variant.disr_expr);\n }\n "}, {"sha": "cbf1a6775550106534f89da3f30f31dcadad279f", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -233,9 +233,9 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         ast_visit::walk_where_predicate(self, p);\n     }\n \n-    fn visit_poly_trait_ref(&mut self, t: &'a ast::PolyTraitRef, m: &'a ast::TraitBoundModifier) {\n-        run_early_pass!(self, check_poly_trait_ref, t, m);\n-        ast_visit::walk_poly_trait_ref(self, t, m);\n+    fn visit_poly_trait_ref(&mut self, t: &'a ast::PolyTraitRef) {\n+        run_early_pass!(self, check_poly_trait_ref, t);\n+        ast_visit::walk_poly_trait_ref(self, t);\n     }\n \n     fn visit_assoc_item(&mut self, item: &'a ast::AssocItem, ctxt: ast_visit::AssocCtxt) {"}, {"sha": "5188ac633d3928b9bcf56cc63bcab58bd76ab4da", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -24,7 +24,6 @@ use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::LintPass;\n-use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n use std::any::Any;\n@@ -194,14 +193,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         self.context.cached_typeck_results.set(old_cached_typeck_results);\n     }\n \n-    fn visit_variant_data(\n-        &mut self,\n-        s: &'tcx hir::VariantData<'tcx>,\n-        _: Symbol,\n-        _: &'tcx hir::Generics<'tcx>,\n-        _: hir::HirId,\n-        _: Span,\n-    ) {\n+    fn visit_variant_data(&mut self, s: &'tcx hir::VariantData<'tcx>) {\n         lint_callback!(self, check_struct_def, s);\n         hir_visit::walk_struct_def(self, s);\n     }\n@@ -213,15 +205,10 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         })\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        v: &'tcx hir::Variant<'tcx>,\n-        g: &'tcx hir::Generics<'tcx>,\n-        item_id: hir::HirId,\n-    ) {\n+    fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n         self.with_lint_attrs(v.id, |cx| {\n             lint_callback!(cx, check_variant, v);\n-            hir_visit::walk_variant(cx, v, g, item_id);\n+            hir_visit::walk_variant(cx, v);\n         })\n     }\n "}, {"sha": "7ab9302d835a2d57da295324c08020b11b2a2dda", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -772,14 +772,9 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {\n         })\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        v: &'tcx hir::Variant<'tcx>,\n-        g: &'tcx hir::Generics<'tcx>,\n-        item_id: hir::HirId,\n-    ) {\n+    fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n         self.with_lint_attrs(v.id, |builder| {\n-            intravisit::walk_variant(builder, v, g, item_id);\n+            intravisit::walk_variant(builder, v);\n         })\n     }\n "}, {"sha": "413f06a97a2455f8e76c7f5039ee87ea4c519c23", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -156,8 +156,7 @@ macro_rules! early_lint_methods {\n             fn check_generic_arg(a: &ast::GenericArg);\n             fn check_generic_param(a: &ast::GenericParam);\n             fn check_generics(a: &ast::Generics);\n-            fn check_poly_trait_ref(a: &ast::PolyTraitRef,\n-                                    b: &ast::TraitBoundModifier);\n+            fn check_poly_trait_ref(a: &ast::PolyTraitRef);\n             fn check_fn(a: rustc_ast::visit::FnKind<'_>, c: Span, d_: ast::NodeId);\n             fn check_trait_item(a: &ast::AssocItem);\n             fn check_impl_item(a: &ast::AssocItem);"}, {"sha": "2a51af582f5854c35d21a27e42f4b583166305f6", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -29,7 +29,6 @@ use rustc_middle::mir::visit::Visitor as _;\n use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPass, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n-use rustc_span::{Span, Symbol};\n \n #[macro_use]\n mod pass_manager;\n@@ -159,14 +158,7 @@ fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxIndexSet<LocalDefId> {\n         set: &'a mut FxIndexSet<LocalDefId>,\n     }\n     impl<'tcx> Visitor<'tcx> for GatherCtors<'_, 'tcx> {\n-        fn visit_variant_data(\n-            &mut self,\n-            v: &'tcx hir::VariantData<'tcx>,\n-            _: Symbol,\n-            _: &'tcx hir::Generics<'tcx>,\n-            _: hir::HirId,\n-            _: Span,\n-        ) {\n+        fn visit_variant_data(&mut self, v: &'tcx hir::VariantData<'tcx>) {\n             if let hir::VariantData::Tuple(_, hir_id) = *v {\n                 self.set.insert(self.tcx.hir().local_def_id(hir_id));\n             }"}, {"sha": "c088b6e1e0e2e36d688e34fde184e16a33963603", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -1295,7 +1295,11 @@ impl<'a> Parser<'a> {\n                 self.bump(); // `in`\n                 let path = self.parse_path(PathStyle::Mod)?; // `path`\n                 self.expect(&token::CloseDelim(Delimiter::Parenthesis))?; // `)`\n-                let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };\n+                let vis = VisibilityKind::Restricted {\n+                    path: P(path),\n+                    id: ast::DUMMY_NODE_ID,\n+                    shorthand: false,\n+                };\n                 return Ok(Visibility {\n                     span: lo.to(self.prev_token.span),\n                     kind: vis,\n@@ -1308,7 +1312,11 @@ impl<'a> Parser<'a> {\n                 self.bump(); // `(`\n                 let path = self.parse_path(PathStyle::Mod)?; // `crate`/`super`/`self`\n                 self.expect(&token::CloseDelim(Delimiter::Parenthesis))?; // `)`\n-                let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };\n+                let vis = VisibilityKind::Restricted {\n+                    path: P(path),\n+                    id: ast::DUMMY_NODE_ID,\n+                    shorthand: true,\n+                };\n                 return Ok(Visibility {\n                     span: lo.to(self.prev_token.span),\n                     kind: vis,"}, {"sha": "f75fffb6871f73aed9194c51de005b04c80da836", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -2066,14 +2066,9 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         intravisit::walk_expr(self, expr)\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        variant: &'tcx hir::Variant<'tcx>,\n-        generics: &'tcx hir::Generics<'tcx>,\n-        item_id: HirId,\n-    ) {\n+    fn visit_variant(&mut self, variant: &'tcx hir::Variant<'tcx>) {\n         self.check_attributes(variant.id, variant.span, Target::Variant, None);\n-        intravisit::walk_variant(self, variant, generics, item_id)\n+        intravisit::walk_variant(self, variant)\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {"}, {"sha": "625c854ea77a5dd7363aff05d995751edc5bf220", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -368,14 +368,7 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n         self.maybe_typeck_results = old_maybe_typeck_results;\n     }\n \n-    fn visit_variant_data(\n-        &mut self,\n-        def: &'tcx hir::VariantData<'tcx>,\n-        _: Symbol,\n-        _: &hir::Generics<'_>,\n-        _: hir::HirId,\n-        _: rustc_span::Span,\n-    ) {\n+    fn visit_variant_data(&mut self, def: &'tcx hir::VariantData<'tcx>) {\n         let tcx = self.tcx;\n         let has_repr_c = self.repr_has_repr_c;\n         let has_repr_simd = self.repr_has_repr_simd;"}, {"sha": "399d00b403a6ba784eb5a88791f8ccbf33c25aa1", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -276,14 +276,9 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_field_def(self, s)\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        v: &'v hir::Variant<'v>,\n-        g: &'v hir::Generics<'v>,\n-        item_id: hir::HirId,\n-    ) {\n+    fn visit_variant(&mut self, v: &'v hir::Variant<'v>) {\n         self.record(\"Variant\", Id::None, v);\n-        hir_visit::walk_variant(self, v, g, item_id)\n+        hir_visit::walk_variant(self, v)\n     }\n \n     fn visit_lifetime(&mut self, lifetime: &'v hir::Lifetime) {"}, {"sha": "574e8073d8efd508fdc72891a80805ee56ae0a5d", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::{FieldDef, Generics, HirId, Item, ItemKind, TraitRef, Ty, TyKind, Variant};\n+use rustc_hir::{FieldDef, Item, ItemKind, TraitRef, Ty, TyKind, Variant};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability::{AllowUnstable, DeprecationEntry, Index};\n@@ -442,7 +442,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         );\n     }\n \n-    fn visit_variant(&mut self, var: &'tcx Variant<'tcx>, g: &'tcx Generics<'tcx>, item_id: HirId) {\n+    fn visit_variant(&mut self, var: &'tcx Variant<'tcx>) {\n         self.annotate(\n             self.tcx.hir().local_def_id(var.id),\n             var.span,\n@@ -465,7 +465,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n                     );\n                 }\n \n-                intravisit::walk_variant(v, var, g, item_id)\n+                intravisit::walk_variant(v, var)\n             },\n         )\n     }\n@@ -598,9 +598,9 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n         intravisit::walk_impl_item(self, ii);\n     }\n \n-    fn visit_variant(&mut self, var: &'tcx Variant<'tcx>, g: &'tcx Generics<'tcx>, item_id: HirId) {\n+    fn visit_variant(&mut self, var: &'tcx Variant<'tcx>) {\n         self.check_missing_stability(self.tcx.hir().local_def_id(var.id), var.span);\n-        intravisit::walk_variant(self, var, g, item_id);\n+        intravisit::walk_variant(self, var);\n     }\n \n     fn visit_field_def(&mut self, s: &'tcx FieldDef<'tcx>) {"}, {"sha": "f7c28eff55b763c4cfc1c6b83fa64b0d7f36fab0", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -1625,15 +1625,10 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n         intravisit::walk_ty(self, t)\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        v: &'tcx hir::Variant<'tcx>,\n-        g: &'tcx hir::Generics<'tcx>,\n-        item_id: hir::HirId,\n-    ) {\n+    fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n         if self.access_levels.is_reachable(self.tcx.hir().local_def_id(v.id)) {\n             self.in_variant = true;\n-            intravisit::walk_variant(self, v, g, item_id);\n+            intravisit::walk_variant(self, v);\n             self.in_variant = false;\n         }\n     }"}, {"sha": "58a4cff55db7dc906b0522107a92cd9502793285", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -723,7 +723,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         self.diagnostic_metadata.current_trait_object = prev;\n         self.diagnostic_metadata.current_type_path = prev_ty;\n     }\n-    fn visit_poly_trait_ref(&mut self, tref: &'ast PolyTraitRef, _: &'ast TraitBoundModifier) {\n+    fn visit_poly_trait_ref(&mut self, tref: &'ast PolyTraitRef) {\n         let span = tref.span.shrink_to_lo().to(tref.trait_ref.path.span.shrink_to_lo());\n         self.with_generic_param_rib(\n             &tref.bound_generic_params,"}, {"sha": "2bf83a8782a1273a56eeeb04c4b52548bea9260f", "filename": "compiler/rustc_target/src/spec/android_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -10,6 +10,6 @@ pub fn opts() -> TargetOptions {\n     // for context. (At that time, there was no `-C force-unwind-tables`, so the only solution\n     // was to always emit `uwtable`).\n     base.default_uwtable = true;\n-    base.crt_static_respected = false;\n+    base.crt_static_respected = true;\n     base\n }"}, {"sha": "962ad0c66d914b502f92b6640703b2c08b637814", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -1,6 +1,11 @@\n use crate::spec::{crt_objects, cvs, LinkOutputKind, LinkerFlavor, LldFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n+    // This mirrors the linker options provided by clang. We presume lld for\n+    // now. When using clang as the linker it will supply these options for us,\n+    // so we only list them for ld/lld.\n+    //\n+    // https://github.com/llvm/llvm-project/blob/db9322b2066c55254e7691efeab863f43bfcc084/clang/lib/Driver/ToolChains/Fuchsia.cpp#L31\n     let pre_link_args = TargetOptions::link_args(\n         LinkerFlavor::Ld,\n         &["}, {"sha": "b2c895f882c6a6f3f5afabc82a265feb09253595", "filename": "library/core/src/array/equality.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Fcore%2Fsrc%2Farray%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Fcore%2Fsrc%2Farray%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fequality.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -173,13 +173,14 @@ macro_rules! is_raw_eq_comparable {\n     )+};\n }\n \n-// SAFETY: All the ordinary integer types allow all bit patterns as distinct values\n+// SAFETY: All the ordinary integer types have no padding, and are not pointers.\n is_raw_eq_comparable!(u8, u16, u32, u64, u128, usize, i8, i16, i32, i64, i128, isize);\n \n-// SAFETY: bool and char have *niches*, but no *padding*, so this is sound\n+// SAFETY: bool and char have *niches*, but no *padding* (and these are not pointer types), so this\n+// is sound\n is_raw_eq_comparable!(bool, char);\n \n-// SAFETY: Similarly, the non-zero types have a niche, but no undef,\n+// SAFETY: Similarly, the non-zero types have a niche, but no undef and no pointers,\n // and they compare like their underlying numeric type.\n is_raw_eq_comparable!(\n     NonZeroU8,"}, {"sha": "2d44feb15f873b7ae34c2a4be9e7655c9dbecce5", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -2282,7 +2282,8 @@ extern \"rust-intrinsic\" {\n     ///\n     /// # Safety\n     ///\n-    /// It's UB to call this if any of the *bytes* in `*a` or `*b` are uninitialized.\n+    /// It's UB to call this if any of the *bytes* in `*a` or `*b` are uninitialized or carry a\n+    /// pointer value.\n     /// Note that this is a stricter criterion than just the *values* being\n     /// fully-initialized: if `T` has padding, it's UB to call this intrinsic.\n     ///"}, {"sha": "b8f6fe6961a8edbac5fd821d1146e47a665bdde9", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -1197,7 +1197,6 @@ fn chunks_mut_are_send_and_sync() {\n     use std::slice::{ChunksExactMut, ChunksMut, RChunksExactMut, RChunksMut};\n     use std::sync::MutexGuard;\n \n-    #[allow(unused)]\n     fn assert_send_and_sync()\n     where\n         ChunksMut<'static, Cell<i32>>: Send,\n@@ -1210,6 +1209,8 @@ fn chunks_mut_are_send_and_sync() {\n         RChunksExactMut<'static, MutexGuard<'static, u32>>: Sync,\n     {\n     }\n+\n+    assert_send_and_sync();\n }\n \n #[test]"}, {"sha": "5cf6ec8178928f710ff11c022271b4cac3488a48", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -118,12 +118,15 @@ pub struct Backtrace {\n pub enum BacktraceStatus {\n     /// Capturing a backtrace is not supported, likely because it's not\n     /// implemented for the current platform.\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     Unsupported,\n     /// Capturing a backtrace has been disabled through either the\n     /// `RUST_LIB_BACKTRACE` or `RUST_BACKTRACE` environment variables.\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     Disabled,\n     /// A backtrace has been captured and the `Backtrace` should print\n     /// reasonable information when rendered.\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     Captured,\n }\n "}, {"sha": "ebe0ccbdc0b2d4211b047bef1ba739d640c8f067", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -246,6 +246,7 @@\n #![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(linkage)]\n+#![feature(link_cfg)]\n #![feature(min_specialization)]\n #![feature(must_not_suspend)]\n #![feature(needs_panic_runtime)]"}, {"sha": "3a3750930998509fca767f8decf488a8f30797d5", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -295,8 +295,10 @@ pub fn abort_internal() -> ! {\n \n cfg_if::cfg_if! {\n     if #[cfg(target_os = \"android\")] {\n-        #[link(name = \"dl\")]\n-        #[link(name = \"log\")]\n+        #[link(name = \"dl\", kind = \"static\", modifiers = \"-bundle\",\n+            cfg(target_feature = \"crt-static\"))]\n+        #[link(name = \"dl\", cfg(not(target_feature = \"crt-static\")))]\n+        #[link(name = \"log\", cfg(not(target_feature = \"crt-static\")))]\n         extern \"C\" {}\n     } else if #[cfg(target_os = \"freebsd\")] {\n         #[link(name = \"execinfo\")]"}, {"sha": "633f17c054bc670c59d6f17c4a51003ba2c92e3b", "filename": "library/std/src/sys/unsupported/process.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -200,6 +200,9 @@ impl<'a> Iterator for CommandArgs<'a> {\n     fn next(&mut self) -> Option<&'a OsStr> {\n         None\n     }\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (0, Some(0))\n+    }\n }\n \n impl<'a> ExactSizeIterator for CommandArgs<'a> {}"}, {"sha": "126e41d1e2015ecc5c930904222c1f45598dba06", "filename": "library/unwind/build.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Funwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Funwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fbuild.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -13,13 +13,8 @@ fn main() {\n         let has_unwind = build.is_flag_supported(\"-lunwind\").expect(\"Unable to invoke compiler\");\n \n         if has_unwind {\n-            println!(\"cargo:rustc-link-lib=unwind\");\n-        } else {\n-            println!(\"cargo:rustc-link-lib=gcc\");\n+            println!(\"cargo:rustc-cfg=feature=\\\"system-llvm-libunwind\\\"\");\n         }\n-\n-        // Android's unwinding library depends on dl_iterate_phdr in `libdl`.\n-        println!(\"cargo:rustc-link-lib=dl\");\n     } else if target.contains(\"freebsd\") {\n         println!(\"cargo:rustc-link-lib=gcc_s\");\n     } else if target.contains(\"netbsd\") {"}, {"sha": "46fe50cb9453d9b045d95688e178146ff7b608ed", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -55,6 +55,26 @@ cfg_if::cfg_if! {\n     }\n }\n \n+#[cfg(target_os = \"android\")]\n+cfg_if::cfg_if! {\n+    if #[cfg(feature = \"llvm-libunwind\")] {\n+        compile_error!(\"`llvm-libunwind` is not supported for Android targets\");\n+    } else if #[cfg(feature = \"system-llvm-libunwind\")] {\n+        #[link(name = \"unwind\", kind = \"static\", modifiers = \"-bundle\", cfg(target_feature = \"crt-static\"))]\n+        #[link(name = \"unwind\", cfg(not(target_feature = \"crt-static\")))]\n+        extern \"C\" {}\n+    } else {\n+        #[link(name = \"gcc\", kind = \"static\", modifiers = \"-bundle\", cfg(target_feature = \"crt-static\"))]\n+        #[link(name = \"gcc\", cfg(not(target_feature = \"crt-static\")))]\n+        extern \"C\" {}\n+    }\n+}\n+// Android's unwinding library depends on dl_iterate_phdr in `libdl`.\n+#[cfg(target_os = \"android\")]\n+#[link(name = \"dl\", kind = \"static\", modifiers = \"-bundle\", cfg(target_feature = \"crt-static\"))]\n+#[link(name = \"dl\", cfg(not(target_feature = \"crt-static\")))]\n+extern \"C\" {}\n+\n // When building with crt-static, we get `gcc_eh` from the `libc` crate, since\n // glibc needs it, and needs it listed later on the linker command line. We\n // don't want to duplicate it here."}, {"sha": "1e0f7e9acf4f2bcbc6eb6c16fe79a516115ad6c1", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -66,16 +66,21 @@ TESTS_IN_2 := \\\n \tsrc/test/ui \\\n \tsrc/tools/linkchecker\n \n+## MSVC native builders\n+\n+# these intentionally don't use `$(BOOTSTRAP)` so we can test the shebang on Windows\n ci-subset-1:\n-\t$(Q)$(BOOTSTRAP) test --stage 2 $(TESTS_IN_2:%=--exclude %)\n+\t$(Q)$(CFG_SRC_DIR)/x.py test --stage 2 $(TESTS_IN_2:%=--exclude %)\n ci-subset-2:\n-\t$(Q)$(BOOTSTRAP) test --stage 2 $(TESTS_IN_2)\n+\t$(Q)$(CFG_SRC_DIR)/x.ps1 test --stage 2 $(TESTS_IN_2)\n+\n+## MingW native builders\n \n TESTS_IN_MINGW_2 := \\\n \tsrc/test/ui\n \n ci-mingw-subset-1:\n-\t$(Q)$(BOOTSTRAP) test --stage 2 $(TESTS_IN_MINGW_2:%=--exclude %)\n+\t$(Q)$(CFG_SRC_DIR)/x.sh test --stage 2 $(TESTS_IN_MINGW_2:%=--exclude %)\n ci-mingw-subset-2:\n \t$(Q)$(BOOTSTRAP) test --stage 2 $(TESTS_IN_MINGW_2)\n "}, {"sha": "8de9045c3baa73e768223e97192fafc79b4eba30", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-12/Dockerfile", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-12%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-12%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-12%2FDockerfile?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -1,6 +1,8 @@\n FROM ubuntu:20.04\n \n ARG DEBIAN_FRONTEND=noninteractive\n+\n+# NOTE: intentionally installs both python2 and python3 so we can test support for both.\n RUN apt-get update && apt-get install -y --no-install-recommends \\\n   g++ \\\n   gcc-multilib \\\n@@ -10,6 +12,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   curl \\\n   ca-certificates \\\n   python2.7 \\\n+  python3.9 \\\n   git \\\n   cmake \\\n   sudo \\\n@@ -23,6 +26,14 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils \\\n   nodejs\n \n+# Install powershell so we can test x.ps1 on Linux\n+RUN apt-get update && \\\n+    apt-get install -y apt-transport-https software-properties-common && \\\n+    curl -s \"https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb\" > packages-microsoft-prod.deb && \\\n+    dpkg -i packages-microsoft-prod.deb && \\\n+    apt-get update && \\\n+    apt-get install -y powershell\n+\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n@@ -33,21 +44,22 @@ ENV RUST_CONFIGURE_ARGS \\\n       --enable-llvm-link-shared \\\n       --set rust.thin-lto-import-instr-limit=10\n \n-ENV SCRIPT python2.7 ../x.py --stage 2 test --exclude src/tools/tidy && \\\n+# NOTE: intentionally uses all of `x.py`, `x.sh`, and `x.ps1` to make sure they all work on Linux.\n+ENV SCRIPT ../x.py --stage 2 test --exclude src/tools/tidy && \\\n            # Run the `mir-opt` tests again but this time for a 32-bit target.\n            # This enforces that tests using `// EMIT_MIR_FOR_EACH_BIT_WIDTH` have\n            # both 32-bit and 64-bit outputs updated by the PR author, before\n            # the PR is approved and tested for merging.\n            # It will also detect tests lacking `// EMIT_MIR_FOR_EACH_BIT_WIDTH`,\n            # despite having different output on 32-bit vs 64-bit targets.\n-           python2.7 ../x.py --stage 2 test src/test/mir-opt \\\n+           ../x.sh --stage 2 test src/test/mir-opt \\\n                              --host='' --target=i686-unknown-linux-gnu && \\\n            # Run the UI test suite again, but in `--pass=check` mode\n            #\n            # This is intended to make sure that both `--pass=check` continues to\n            # work.\n            #\n-           python2.7 ../x.py --stage 2 test src/test/ui --pass=check \\\n+           ../x.ps1 --stage 2 test src/test/ui --pass=check \\\n                              --host='' --target=i686-unknown-linux-gnu && \\\n            # Run tidy at the very end, after all the other tests.\n            python2.7 ../x.py --stage 2 test src/tools/tidy"}, {"sha": "20ae102bc27d30ce7cee4a74eda73c4b145dad4d", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -1289,14 +1289,9 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n         });\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        v: &'hir hir::Variant<'_>,\n-        g: &'hir hir::Generics<'_>,\n-        item_id: hir::HirId,\n-    ) {\n+    fn visit_variant(&mut self, v: &'hir hir::Variant<'_>) {\n         self.visit_testable(v.ident.to_string(), v.id, v.span, |this| {\n-            intravisit::walk_variant(this, v, g, item_id);\n+            intravisit::walk_variant(this, v);\n         });\n     }\n "}, {"sha": "5a6720a8dd95643c07f6c02894daccbf1697e192", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 55, "deletions": 33, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -33,48 +33,80 @@ pub(crate) struct HrefContext<'a, 'b, 'c> {\n \n /// Decorations are represented as a map from CSS class to vector of character ranges.\n /// Each range will be wrapped in a span with that class.\n+#[derive(Default)]\n pub(crate) struct DecorationInfo(pub(crate) FxHashMap<&'static str, Vec<(u32, u32)>>);\n \n-/// Highlights `src`, returning the HTML output.\n-pub(crate) fn render_with_highlighting(\n+#[derive(Eq, PartialEq, Clone, Copy)]\n+pub(crate) enum Tooltip {\n+    Ignore,\n+    CompileFail,\n+    ShouldPanic,\n+    Edition(Edition),\n+    None,\n+}\n+\n+/// Highlights `src` as an inline example, returning the HTML output.\n+pub(crate) fn render_example_with_highlighting(\n     src: &str,\n     out: &mut Buffer,\n-    class: Option<&str>,\n+    tooltip: Tooltip,\n     playground_button: Option<&str>,\n-    tooltip: Option<(Option<Edition>, &str)>,\n-    edition: Edition,\n-    extra_content: Option<Buffer>,\n-    href_context: Option<HrefContext<'_, '_, '_>>,\n-    decoration_info: Option<DecorationInfo>,\n ) {\n-    debug!(\"highlighting: ================\\n{}\\n==============\", src);\n-    if let Some((edition_info, class)) = tooltip {\n+    let class = match tooltip {\n+        Tooltip::Ignore => \" ignore\",\n+        Tooltip::CompileFail => \" compile_fail\",\n+        Tooltip::ShouldPanic => \" should_panic\",\n+        Tooltip::Edition(_) => \" edition\",\n+        Tooltip::None => \"\",\n+    };\n+\n+    if tooltip != Tooltip::None {\n         write!(\n             out,\n-            \"<div class='information'><div class='tooltip {}'{}>\u24d8</div></div>\",\n+            \"<div class='information'><div class='tooltip{}'{}>\u24d8</div></div>\",\n             class,\n-            if let Some(edition_info) = edition_info {\n+            if let Tooltip::Edition(edition_info) = tooltip {\n                 format!(\" data-edition=\\\"{}\\\"\", edition_info)\n             } else {\n                 String::new()\n             },\n         );\n     }\n \n-    write_header(out, class, extra_content);\n-    write_code(out, src, edition, href_context, decoration_info);\n+    write_header(out, &format!(\"rust-example-rendered{}\", class), None);\n+    write_code(out, src, None, None);\n     write_footer(out, playground_button);\n }\n \n-fn write_header(out: &mut Buffer, class: Option<&str>, extra_content: Option<Buffer>) {\n+/// Highlights `src` as a macro, returning the HTML output.\n+pub(crate) fn render_macro_with_highlighting(src: &str, out: &mut Buffer) {\n+    write_header(out, \"macro\", None);\n+    write_code(out, src, None, None);\n+    write_footer(out, None);\n+}\n+\n+/// Highlights `src` as a source code page, returning the HTML output.\n+pub(crate) fn render_source_with_highlighting(\n+    src: &str,\n+    out: &mut Buffer,\n+    line_numbers: Buffer,\n+    href_context: HrefContext<'_, '_, '_>,\n+    decoration_info: DecorationInfo,\n+) {\n+    write_header(out, \"\", Some(line_numbers));\n+    write_code(out, src, Some(href_context), Some(decoration_info));\n+    write_footer(out, None);\n+}\n+\n+fn write_header(out: &mut Buffer, class: &str, extra_content: Option<Buffer>) {\n     write!(out, \"<div class=\\\"example-wrap\\\">\");\n     if let Some(extra) = extra_content {\n         out.push_buffer(extra);\n     }\n-    if let Some(class) = class {\n-        write!(out, \"<pre class=\\\"rust {}\\\">\", class);\n-    } else {\n+    if class.is_empty() {\n         write!(out, \"<pre class=\\\"rust\\\">\");\n+    } else {\n+        write!(out, \"<pre class=\\\"rust {}\\\">\", class);\n     }\n     write!(out, \"<code>\");\n }\n@@ -93,7 +125,6 @@ fn write_header(out: &mut Buffer, class: Option<&str>, extra_content: Option<Buf\n fn write_code(\n     out: &mut Buffer,\n     src: &str,\n-    edition: Edition,\n     href_context: Option<HrefContext<'_, '_, '_>>,\n     decoration_info: Option<DecorationInfo>,\n ) {\n@@ -102,7 +133,6 @@ fn write_code(\n     let mut closing_tags: Vec<&'static str> = Vec::new();\n     Classifier::new(\n         &src,\n-        edition,\n         href_context.as_ref().map(|c| c.file_span).unwrap_or(DUMMY_SP),\n         decoration_info,\n     )\n@@ -220,7 +250,7 @@ impl<'a> Iterator for TokenIter<'a> {\n }\n \n /// Classifies into identifier class; returns `None` if this is a non-keyword identifier.\n-fn get_real_ident_class(text: &str, edition: Edition, allow_path_keywords: bool) -> Option<Class> {\n+fn get_real_ident_class(text: &str, allow_path_keywords: bool) -> Option<Class> {\n     let ignore: &[&str] =\n         if allow_path_keywords { &[\"self\", \"Self\", \"super\", \"crate\"] } else { &[\"self\", \"Self\"] };\n     if ignore.iter().any(|k| *k == text) {\n@@ -229,7 +259,7 @@ fn get_real_ident_class(text: &str, edition: Edition, allow_path_keywords: bool)\n     Some(match text {\n         \"ref\" | \"mut\" => Class::RefKeyWord,\n         \"false\" | \"true\" => Class::Bool,\n-        _ if Symbol::intern(text).is_reserved(|| edition) => Class::KeyWord,\n+        _ if Symbol::intern(text).is_reserved(|| Edition::Edition2021) => Class::KeyWord,\n         _ => return None,\n     })\n }\n@@ -311,7 +341,6 @@ struct Classifier<'a> {\n     in_attribute: bool,\n     in_macro: bool,\n     in_macro_nonterminal: bool,\n-    edition: Edition,\n     byte_pos: u32,\n     file_span: Span,\n     src: &'a str,\n@@ -321,20 +350,14 @@ struct Classifier<'a> {\n impl<'a> Classifier<'a> {\n     /// Takes as argument the source code to HTML-ify, the rust edition to use and the source code\n     /// file span which will be used later on by the `span_correspondance_map`.\n-    fn new(\n-        src: &str,\n-        edition: Edition,\n-        file_span: Span,\n-        decoration_info: Option<DecorationInfo>,\n-    ) -> Classifier<'_> {\n+    fn new(src: &str, file_span: Span, decoration_info: Option<DecorationInfo>) -> Classifier<'_> {\n         let tokens = PeekIter::new(TokenIter { src });\n         let decorations = decoration_info.map(Decorations::new);\n         Classifier {\n             tokens,\n             in_attribute: false,\n             in_macro: false,\n             in_macro_nonterminal: false,\n-            edition,\n             byte_pos: 0,\n             file_span,\n             src,\n@@ -354,7 +377,6 @@ impl<'a> Classifier<'a> {\n         let start = self.byte_pos as usize;\n         let mut pos = start;\n         let mut has_ident = false;\n-        let edition = self.edition;\n \n         loop {\n             let mut nb = 0;\n@@ -376,7 +398,7 @@ impl<'a> Classifier<'a> {\n \n             if let Some((None, text)) = self.tokens.peek().map(|(token, text)| {\n                 if *token == TokenKind::Ident {\n-                    let class = get_real_ident_class(text, edition, true);\n+                    let class = get_real_ident_class(text, true);\n                     (class, text)\n                 } else {\n                     // Doesn't matter which Class we put in here...\n@@ -634,7 +656,7 @@ impl<'a> Classifier<'a> {\n                 sink(Highlight::Token { text, class: None });\n                 return;\n             }\n-            TokenKind::Ident => match get_real_ident_class(text, self.edition, false) {\n+            TokenKind::Ident => match get_real_ident_class(text, false) {\n                 None => match text {\n                     \"Option\" | \"Result\" => Class::PreludeTy,\n                     \"Some\" | \"None\" | \"Ok\" | \"Err\" => Class::PreludeVal,"}, {"sha": "4861a8ad32da6fa34b63478a637536c841fa792f", "filename": "src/librustdoc/html/highlight/tests.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -3,7 +3,6 @@ use crate::html::format::Buffer;\n use expect_test::expect_file;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_span::create_default_session_globals_then;\n-use rustc_span::edition::Edition;\n \n const STYLE: &str = r#\"\n <style>\n@@ -23,7 +22,7 @@ fn test_html_highlighting() {\n         let src = include_str!(\"fixtures/sample.rs\");\n         let html = {\n             let mut out = Buffer::new();\n-            write_code(&mut out, src, Edition::Edition2018, None, None);\n+            write_code(&mut out, src, None, None);\n             format!(\"{}<pre><code>{}</code></pre>\\n\", STYLE, out.into_inner())\n         };\n         expect_file![\"fixtures/sample.html\"].assert_eq(&html);\n@@ -37,7 +36,7 @@ fn test_dos_backline() {\n     println!(\\\"foo\\\");\\r\\n\\\n }\\r\\n\";\n         let mut html = Buffer::new();\n-        write_code(&mut html, src, Edition::Edition2018, None, None);\n+        write_code(&mut html, src, None, None);\n         expect_file![\"fixtures/dos_line.html\"].assert_eq(&html.into_inner());\n     });\n }\n@@ -51,7 +50,7 @@ let x = super::b::foo;\n let y = Self::whatever;\";\n \n         let mut html = Buffer::new();\n-        write_code(&mut html, src, Edition::Edition2018, None, None);\n+        write_code(&mut html, src, None, None);\n         expect_file![\"fixtures/highlight.html\"].assert_eq(&html.into_inner());\n     });\n }\n@@ -61,7 +60,7 @@ fn test_union_highlighting() {\n     create_default_session_globals_then(|| {\n         let src = include_str!(\"fixtures/union.rs\");\n         let mut html = Buffer::new();\n-        write_code(&mut html, src, Edition::Edition2018, None, None);\n+        write_code(&mut html, src, None, None);\n         expect_file![\"fixtures/union.html\"].assert_eq(&html.into_inner());\n     });\n }\n@@ -75,7 +74,7 @@ let y = 2;\";\n         decorations.insert(\"example\", vec![(0, 10)]);\n \n         let mut html = Buffer::new();\n-        write_code(&mut html, src, Edition::Edition2018, None, Some(DecorationInfo(decorations)));\n+        write_code(&mut html, src, None, Some(DecorationInfo(decorations)));\n         expect_file![\"fixtures/decorations.html\"].assert_eq(&html.into_inner());\n     });\n }"}, {"sha": "ec2e129c364e80e25a4885049e23c102eb2671ec", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -330,34 +330,27 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n         });\n \n         let tooltip = if ignore != Ignore::None {\n-            Some((None, \"ignore\"))\n+            highlight::Tooltip::Ignore\n         } else if compile_fail {\n-            Some((None, \"compile_fail\"))\n+            highlight::Tooltip::CompileFail\n         } else if should_panic {\n-            Some((None, \"should_panic\"))\n+            highlight::Tooltip::ShouldPanic\n         } else if explicit_edition {\n-            Some((Some(edition), \"edition\"))\n+            highlight::Tooltip::Edition(edition)\n         } else {\n-            None\n+            highlight::Tooltip::None\n         };\n \n         // insert newline to clearly separate it from the\n         // previous block so we can shorten the html output\n         let mut s = Buffer::new();\n         s.push_str(\"\\n\");\n-        highlight::render_with_highlighting(\n+\n+        highlight::render_example_with_highlighting(\n             &text,\n             &mut s,\n-            Some(&format!(\n-                \"rust-example-rendered{}\",\n-                if let Some((_, class)) = tooltip { format!(\" {}\", class) } else { String::new() }\n-            )),\n-            playground_button.as_deref(),\n             tooltip,\n-            edition,\n-            None,\n-            None,\n-            None,\n+            playground_button.as_deref(),\n         );\n         Some(Event::Html(s.into_inner().into()))\n     }\n@@ -1446,14 +1439,15 @@ fn init_id_map() -> FxHashMap<Cow<'static, str>, usize> {\n     map.insert(\"not-displayed\".into(), 1);\n     map.insert(\"alternative-display\".into(), 1);\n     map.insert(\"search\".into(), 1);\n+    map.insert(\"crate-search\".into(), 1);\n+    map.insert(\"crate-search-div\".into(), 1);\n     // This is the list of IDs used in HTML generated in Rust (including the ones\n     // used in tera template files).\n     map.insert(\"mainThemeStyle\".into(), 1);\n     map.insert(\"themeStyle\".into(), 1);\n     map.insert(\"settings-menu\".into(), 1);\n     map.insert(\"help-button\".into(), 1);\n     map.insert(\"main-content\".into(), 1);\n-    map.insert(\"crate-search\".into(), 1);\n     map.insert(\"toggle-all-docs\".into(), 1);\n     map.insert(\"all-types\".into(), 1);\n     map.insert(\"default-settings\".into(), 1);"}, {"sha": "09c54969ef1228e7281901ba6dc629af0563fed4", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -2773,11 +2773,10 @@ fn render_call_locations(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Ite\n         sources::print_src(\n             w,\n             contents_subset,\n-            call_data.edition,\n             file_span,\n             cx,\n             &root_path,\n-            Some(highlight::DecorationInfo(decoration_info)),\n+            highlight::DecorationInfo(decoration_info),\n             sources::SourceContext::Embedded { offset: line_min },\n         );\n         write!(w, \"</div></div>\");"}, {"sha": "6d0a825fec866aa47a7c04bd4bdb29d5dd1a056c", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -1322,17 +1322,7 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n \n fn item_macro(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::Macro) {\n     wrap_into_docblock(w, |w| {\n-        highlight::render_with_highlighting(\n-            &t.source,\n-            w,\n-            Some(\"macro\"),\n-            None,\n-            None,\n-            it.span(cx.tcx()).inner().edition(),\n-            None,\n-            None,\n-            None,\n-        );\n+        highlight::render_macro_with_highlighting(&t.source, w);\n     });\n     document(w, cx, it, None, HeadingOffset::H2)\n }"}, {"sha": "f508808a8b6f5c3fae86e527563c80522d11f516", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -11,7 +11,6 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n-use rustc_span::edition::Edition;\n use rustc_span::source_map::FileName;\n \n use std::ffi::OsStr;\n@@ -213,11 +212,10 @@ impl SourceCollector<'_, '_> {\n                 print_src(\n                     buf,\n                     contents,\n-                    cx.shared.edition(),\n                     file_span,\n                     cx,\n                     &root_path,\n-                    None,\n+                    highlight::DecorationInfo::default(),\n                     SourceContext::Standalone,\n                 )\n             },\n@@ -266,11 +264,10 @@ pub(crate) enum SourceContext {\n pub(crate) fn print_src(\n     buf: &mut Buffer,\n     s: &str,\n-    edition: Edition,\n     file_span: rustc_span::Span,\n     context: &Context<'_>,\n     root_path: &str,\n-    decoration_info: Option<highlight::DecorationInfo>,\n+    decoration_info: highlight::DecorationInfo,\n     source_context: SourceContext,\n ) {\n     let lines = s.lines().count();\n@@ -289,15 +286,11 @@ pub(crate) fn print_src(\n         }\n     }\n     line_numbers.write_str(\"</pre>\");\n-    highlight::render_with_highlighting(\n+    highlight::render_source_with_highlighting(\n         s,\n         buf,\n-        None,\n-        None,\n-        None,\n-        edition,\n-        Some(line_numbers),\n-        Some(highlight::HrefContext { context, file_span, root_path }),\n+        line_numbers,\n+        highlight::HrefContext { context, file_span, root_path },\n         decoration_info,\n     );\n }"}, {"sha": "710ca3ee7c7e7e082a4ef478912965a4d5aa179a", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 50, "deletions": 11, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -947,32 +947,71 @@ table,\n \theight: 100%;\n }\n .search-results-title {\n-\tdisplay: inline;\n+\tmargin-top: 0;\n+\twhite-space: nowrap;\n+\t/* flex layout allows shrinking the <select> appropriately if it becomes too large */\n+\tdisplay: inline-flex;\n+\tmax-width: 100%;\n+\t/* make things look like in a line, despite the fact that we're using a layout\n+\twith boxes (i.e. from the flex layout) */\n+\talign-items: baseline;\n }\n-#search-settings {\n-\tfont-size: 1.5rem;\n-\tfont-weight: 500;\n-\tmargin-bottom: 20px;\n+#crate-search-div {\n+\tdisplay: inline-block;\n+\t/* ensures that 100% in properties of #crate-search-div:after\n+\tare relative to the size of this div */\n+\tposition: relative;\n+\t/* allows this div (and with it the <select>-element \"#crate-search\") to be shrunk */\n+\tmin-width: 5em;\n }\n #crate-search {\n \tmin-width: 115px;\n-\tmargin-top: 5px;\n-\tpadding-left: 0.15em;\n+\tpadding: 0;\n+\t/* keep these two in sync with \"@-moz-document url-prefix()\" below */\n+\tpadding-left: 4px;\n \tpadding-right: 23px;\n+\t/* prevents the <select> from overflowing the containing div in case it's shrunk */\n+\tmax-width: 100%;\n+\t/* contents can overflow because of max-width limit, then show ellipsis */\n+\ttext-overflow: ellipsis;\n \tborder: 1px solid;\n \tborder-radius: 4px;\n \toutline: none;\n \tcursor: pointer;\n \t-moz-appearance: none;\n \t-webkit-appearance: none;\n \t/* Removes default arrow from firefox */\n+\ttext-indent: 0.01px;\n+\tbackground-color: var(--main-background-color);\n+}\n+/* cancel stylistic differences in padding in firefox\n+for \"appearance: none\"-style (or equivalent) <select>s */\n+@-moz-document url-prefix() {\n+\t#crate-search {\n+\t\tpadding-left: 0px; /* == 4px - 4px */\n+\t\tpadding-right: 19px; /* == 23px - 4px */\n+\t}\n+}\n+/* pseudo-element for holding the dropdown-arrow image; needs to be a separate thing\n+so that we can apply CSS-filters to change the arrow color in themes */\n+#crate-search-div::after {\n+\t/* lets clicks through! */\n+\tpointer-events: none;\n+\t/* completely covers the underlying div */\n+\twidth: 100%;\n+\theight: 100%;\n+\tposition: absolute;\n+\ttop: 0;\n+\tleft: 0;\n+\tcontent: \"\";\n \tbackground-repeat: no-repeat;\n-\tbackground-color: transparent;\n \tbackground-size: 20px;\n-\tbackground-position: calc(100% - 1px) 56%;\n+\tbackground-position: calc(100% - 2px) 56%;\n+\t/* image is black color, themes should apply a \"filter\" property to change the color */\n \tbackground-image: /* AUTOREPLACE: */url(\"down-arrow.svg\");\n-\tmax-width: 100%;\n-\ttext-overflow: ellipsis;\n+}\n+#crate-search > option {\n+\tfont-size: 1rem;\n }\n .search-container {\n \tmargin-top: 4px;"}, {"sha": "39a4dae3348c15032d1871d09fd9d0f5d349f6c3", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -182,7 +182,7 @@ details.rustdoc-toggle > summary::before {\n \tfilter: invert(100%);\n }\n \n-#crate-search, .search-input {\n+.search-input {\n \tbackground-color: #141920;\n \tborder-color: #424c57;\n }\n@@ -191,7 +191,17 @@ details.rustdoc-toggle > summary::before {\n \t/* Without the `!important`, the border-color is ignored for `<select>`...\n \t   It cannot be in the group above because `.search-input` has a different border color on\n \t   hover. */\n-\tborder-color: #424c57 !important;\n+\tborder-color: #5c6773 !important;\n+}\n+#crate-search-div::after {\n+\t/* match border-color; uses https://codepen.io/sosuke/pen/Pjoqqp */\n+\tfilter: invert(41%) sepia(12%) saturate(487%) hue-rotate(171deg) brightness(94%) contrast(94%);\n+}\n+#crate-search:hover, #crate-search:focus {\n+\tborder-color: #e0e0e0 !important;\n+}\n+#crate-search-div:hover::after, #crate-search-div:focus-within::after {\n+\tfilter: invert(98%) sepia(12%) saturate(81%) hue-rotate(343deg) brightness(113%) contrast(76%);\n }\n \n .search-input {\n@@ -203,20 +213,9 @@ details.rustdoc-toggle > summary::before {\n \tcolor: #000;\n }\n \n-/* Created this empty rule to satisfy the theme checks. */\n-.stab.empty-impl {}\n-.stab.must_implement {}\n-\n-.stab.unstable,\n-.stab.deprecated,\n-.stab.portability,\n-.stab.empty-impl,\n-.stab.must_implement {\n+.stab {\n \tcolor: #c5c5c5;\n \tbackground: #314559 !important;\n-\tborder-style: none !important;\n-\tborder-radius: 4px;\n-\tpadding: 3px 6px 3px 6px;\n }\n \n .stab.portability > code {"}, {"sha": "6188e0ac0a9d3c04cadc39a26d431850d11d2117", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -152,7 +152,7 @@ details.rustdoc-toggle > summary::before {\n \tfilter: invert(100%);\n }\n \n-#crate-search, .search-input {\n+.search-input {\n \tcolor: #111;\n \tbackground-color: #f0f0f0;\n \tborder-color: #f0f0f0;\n@@ -162,7 +162,17 @@ details.rustdoc-toggle > summary::before {\n \t/* Without the `!important`, the border-color is ignored for `<select>`...\n \t   It cannot be in the group above because `.search-input` has a different border color on\n \t   hover. */\n-\tborder-color: #f0f0f0 !important;\n+\tborder-color: #d2d2d2 !important;\n+}\n+#crate-search-div::after {\n+\t/* match border-color; uses https://codepen.io/sosuke/pen/Pjoqqp */\n+\tfilter: invert(94%) sepia(0%) saturate(721%) hue-rotate(255deg) brightness(90%) contrast(90%);\n+}\n+#crate-search:hover, #crate-search:focus {\n+\tborder-color: #2196f3 !important;\n+}\n+#crate-search-div:hover::after, #crate-search-div:focus-within::after {\n+\tfilter: invert(69%) sepia(60%) saturate(6613%) hue-rotate(184deg) brightness(100%) contrast(91%);\n }\n \n .search-input {\n@@ -173,12 +183,12 @@ details.rustdoc-toggle > summary::before {\n \tborder-color: #008dfd;\n }\n \n-.stab.empty-impl { background: #FFF5D6; border-color: #FFC600; color: #2f2f2f; }\n-.stab.unstable { background: #FFF5D6; border-color: #FFC600; color: #2f2f2f; }\n-.stab.deprecated { background: #ffc4c4; border-color: #db7b7b; color: #2f2f2f; }\n-.stab.must_implement { background: #F3DFFF; border-color: #b07bdb; color: #2f2f2f; }\n-.stab.portability { background: #F3DFFF; border-color: #b07bdb; color: #2f2f2f; }\n-.stab.portability > code { background: none; }\n+.stab { background: #314559; }\n+\n+.stab.portability > code {\n+\tcolor: #e6e1cf;\n+\tbackground: none;\n+}\n \n .rightside,\n .out-of-band {"}, {"sha": "fba790b619371e4b23fd7605a6d063b289501c21", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -144,27 +144,32 @@ details.rustdoc-toggle > summary::before {\n \tcolor: #999;\n }\n \n-#crate-search, .search-input {\n+.search-input {\n \tbackground-color: white;\n \tborder-color: #e0e0e0;\n }\n-\n #crate-search {\n \t/* Without the `!important`, the border-color is ignored for `<select>`...\n \t   It cannot be in the group above because `.search-input` has a different border color on\n \t   hover. */\n \tborder-color: #e0e0e0 !important;\n }\n+#crate-search-div::after {\n+\t/* match border-color; uses https://codepen.io/sosuke/pen/Pjoqqp */\n+\tfilter: invert(100%) sepia(0%) saturate(4223%) hue-rotate(289deg) brightness(114%) contrast(76%);\n+}\n+#crate-search:hover, #crate-search:focus {\n+\tborder-color: #717171 !important;\n+}\n+#crate-search-div:hover::after, #crate-search-div:focus-within::after {\n+\tfilter: invert(44%) sepia(18%) saturate(23%) hue-rotate(317deg) brightness(96%) contrast(93%);\n+}\n \n .search-input:focus {\n \tborder-color: #66afe9;\n }\n \n-.stab.empty-impl { background: #FFF5D6; border-color: #FFC600; }\n-.stab.unstable { background: #FFF5D6; border-color: #FFC600; }\n-.stab.deprecated { background: #ffc4c4; border-color: #db7b7b; }\n-.stab.must_implement { background: #F3DFFF; border-color: #b07bdb; }\n-.stab.portability { background: #F3DFFF; border-color: #b07bdb; }\n+.stab { background: #FFF5D6; border-color: #FFC600; }\n .stab.portability > code { background: none; }\n \n .rightside,\n@@ -321,7 +326,7 @@ kbd {\n \n .popover, .popover::before,\n #help-button span.top, #help-button span.bottom {\n-\tborder-color: #DDDDDD;\n+\tborder-color: #e0e0e0;\n }\n \n #copy-path {"}, {"sha": "5d76a64e92c70ea2bf86b5010406e641aa680e79", "filename": "src/librustdoc/html/static/images/down-arrow.svg", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fdown-arrow.svg", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fdown-arrow.svg", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fdown-arrow.svg?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -1 +1 @@\n-<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" id=\"Layer_1\" width=\"128\" height=\"128\" enable-background=\"new 0 0 128 128\" version=\"1.1\" viewBox=\"-30 -20 176 176\" xml:space=\"preserve\"><g><line x1=\"111\" x2=\"64\" y1=\"40.5\" y2=\"87.499\" fill=\"none\" stroke=\"#2F3435\" stroke-linecap=\"square\" stroke-miterlimit=\"10\" stroke-width=\"12\"/><line x1=\"64\" x2=\"17\" y1=\"87.499\" y2=\"40.5\" fill=\"none\" stroke=\"#2F3435\" stroke-linecap=\"square\" stroke-miterlimit=\"10\" stroke-width=\"12\"/></g></svg>\n\\ No newline at end of file\n+<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" id=\"Layer_1\" width=\"128\" height=\"128\" enable-background=\"new 0 0 128 128\" version=\"1.1\" viewBox=\"-30 -20 176 176\" xml:space=\"preserve\"><g><line x1=\"111\" x2=\"64\" y1=\"40.5\" y2=\"87.499\" fill=\"none\" stroke=\"#000000\" stroke-linecap=\"square\" stroke-miterlimit=\"10\" stroke-width=\"12\"/><line x1=\"64\" x2=\"17\" y1=\"87.499\" y2=\"40.5\" fill=\"none\" stroke=\"#000000\" stroke-linecap=\"square\" stroke-miterlimit=\"10\" stroke-width=\"12\"/></g></svg>\n\\ No newline at end of file"}, {"sha": "d04ec357c40acd5434de2ccd86217642c7c58c03", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -429,9 +429,9 @@ function initSearch(rawSearchIndex) {\n             }\n             const posBefore = parserState.pos;\n             getNextElem(query, parserState, elems, endChar === \">\");\n-            // This case can be encountered if `getNextElem` encounted a \"stop character\" right from\n-            // the start. For example if you have `,,` or `<>`. In this case, we simply move up the\n-            // current position to continue the parsing.\n+            // This case can be encountered if `getNextElem` encountered a \"stop character\" right\n+            // from the start. For example if you have `,,` or `<>`. In this case, we simply move up\n+            // the current position to continue the parsing.\n             if (posBefore === parserState.pos) {\n                 parserState.pos += 1;\n             }\n@@ -581,7 +581,7 @@ function initSearch(rawSearchIndex) {\n         const elem = document.getElementById(\"crate-search\");\n \n         if (elem &&\n-            elem.value !== \"All crates\" &&\n+            elem.value !== \"all crates\" &&\n             hasOwnPropertyRustdoc(rawSearchIndex, elem.value)\n         ) {\n             return elem.value;\n@@ -1551,12 +1551,6 @@ function initSearch(rawSearchIndex) {\n         return [displayPath, href];\n     }\n \n-    function escape(content) {\n-        const h1 = document.createElement(\"h1\");\n-        h1.textContent = content;\n-        return h1.innerHTML;\n-    }\n-\n     function pathSplitter(path) {\n         const tmp = \"<span>\" + path.replace(/::/g, \"::</span><span>\");\n         if (tmp.endsWith(\"<span>\")) {\n@@ -1710,22 +1704,15 @@ function initSearch(rawSearchIndex) {\n         let crates = \"\";\n         const crates_list = Object.keys(rawSearchIndex);\n         if (crates_list.length > 1) {\n-            crates = \" in <select id=\\\"crate-search\\\"><option value=\\\"All crates\\\">\" +\n-                \"All crates</option>\";\n+            crates = \" in&nbsp;<div id=\\\"crate-search-div\\\"><select id=\\\"crate-search\\\">\" +\n+                \"<option value=\\\"all crates\\\">all crates</option>\";\n             for (const c of crates_list) {\n                 crates += `<option value=\"${c}\" ${c === filterCrates && \"selected\"}>${c}</option>`;\n             }\n-            crates += \"</select>\";\n-        }\n-\n-        let typeFilter = \"\";\n-        if (results.query.typeFilter !== NO_TYPE_FILTER) {\n-            typeFilter = \" (type: \" + escape(itemTypes[results.query.typeFilter]) + \")\";\n+            crates += \"</select></div>\";\n         }\n \n-        let output = \"<div id=\\\"search-settings\\\">\" +\n-            `<h1 class=\"search-results-title\">Results for ${escape(results.query.userQuery)}` +\n-            `${typeFilter}</h1>${crates}</div>`;\n+        let output = `<h1 class=\"search-results-title\">Results${crates}</h1>`;\n         if (results.query.error !== null) {\n             output += `<h3>Query parser error: \"${results.query.error}\".</h3>`;\n             output += \"<div id=\\\"titles\\\">\" +\n@@ -2245,7 +2232,7 @@ function initSearch(rawSearchIndex) {\n     }\n \n     function updateCrate(ev) {\n-        if (ev.target.value === \"All crates\") {\n+        if (ev.target.value === \"all crates\") {\n             // If we don't remove it from the URL, it'll be picked up again by the search.\n             const params = searchState.getQueryStringParams();\n             const query = searchState.input.value.trim();"}, {"sha": "f9081189a86005182258302d7bab9481c92c2048", "filename": "src/test/rustdoc-gui/label-next-to-symbol.goml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Frustdoc-gui%2Flabel-next-to-symbol.goml", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Frustdoc-gui%2Flabel-next-to-symbol.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Flabel-next-to-symbol.goml?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -7,14 +7,14 @@ size: (1080, 600)\n assert: (\".stab.deprecated\")\n assert: (\".stab.portability\")\n \n-// make sure that deprecated and portability are different colours\n+// make sure that deprecated and portability have the right colors\n assert-css: (\n     \".item-table .item-left .stab.deprecated\",\n-    { \"background-color\": \"rgb(255, 196, 196)\" },\n+    { \"background-color\": \"rgb(255, 245, 214)\" },\n )\n assert-css: (\n     \".item-table .item-left .stab.portability\",\n-    { \"background-color\": \"rgb(243, 223, 255)\" },\n+    { \"background-color\": \"rgb(255, 245, 214)\" },\n )\n \n // table like view\n@@ -51,7 +51,7 @@ assert-css: (\".item-right.docblock-short\", { \"padding-left\": \"32px\" })\n compare-elements-position-near: (\n     \"//*[@class='item-left module-item']//a[text()='replaced_function']\",\n     \".item-left .stab.deprecated\",\n-    {\"y\": 1},\n+    {\"y\": 2},\n )\n compare-elements-position: (\n     \".item-left .stab.deprecated\","}, {"sha": "782526e29f45e5a7e1484addf630d69514796d47", "filename": "src/test/rustdoc-gui/pocket-menu.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -71,7 +71,7 @@ reload:\n click: \"#help-button\"\n assert-css: (\n     \"#help-button .popover\",\n-    {\"display\": \"block\", \"border-color\": \"rgb(221, 221, 221)\"},\n+    {\"display\": \"block\", \"border-color\": \"rgb(224, 224, 224)\"},\n )\n compare-elements-css: (\"#help-button .popover\", \"#help-button .top\", [\"border-color\"])\n compare-elements-css: (\"#help-button .popover\", \"#help-button .bottom\", [\"border-color\"])"}, {"sha": "b12eddfd12ad9d1fbf87eab3eba03a40acee9a4b", "filename": "src/test/rustdoc-gui/search-filter.goml", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -40,16 +40,16 @@ press-key: \"ArrowUp\"\n press-key: \"Enter\"\n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n-assert-property: (\"#crate-search\", {\"value\": \"All crates\"})\n+assert-property: (\"#crate-search\", {\"value\": \"all crates\"})\n \n // Checking that the URL parameter is taken into account for crate filtering.\n goto: file://|DOC_PATH|/test_docs/index.html?search=test&filter-crate=lib2\n wait-for: \"#crate-search\"\n assert-property: (\"#crate-search\", {\"value\": \"lib2\"})\n assert-false: \"#results .externcrate\"\n \n-// Checking that the text for the \"title\" is correct (the \"All\" comes from the \"<select>\").\n-assert-text: (\"#search-settings\", \"Results for test in All\", STARTS_WITH)\n+// Checking that the text for the \"title\" is correct (the \"all crates\" comes from the \"<select>\").\n+assert-text: (\".search-results-title\", \"Results in all crates\", STARTS_WITH)\n \n // Checking the display of the crate filter.\n // We start with the light theme.\n@@ -69,15 +69,15 @@ click: \"#settings-menu\"\n wait-for: \"#settings\"\n click: \"#theme-dark\"\n wait-for-css: (\"#crate-search\", {\n-    \"border\": \"1px solid rgb(240, 240, 240)\",\n-    \"color\": \"rgb(17, 17, 17)\",\n-    \"background-color\": \"rgb(240, 240, 240)\",\n+    \"border\": \"1px solid rgb(210, 210, 210)\",\n+    \"color\": \"rgb(221, 221, 221)\",\n+    \"background-color\": \"rgb(53, 53, 53)\",\n })\n \n // And finally we check the ayu theme.\n click: \"#theme-ayu\"\n wait-for-css: (\"#crate-search\", {\n-    \"border\": \"1px solid rgb(66, 76, 87)\",\n-    \"color\": \"rgb(197, 197, 197)\",\n-    \"background-color\": \"rgb(20, 25, 32)\",\n+    \"border\": \"1px solid rgb(92, 103, 115)\",\n+    \"color\": \"rgb(255, 255, 255)\",\n+    \"background-color\": \"rgb(15, 20, 25)\",\n })"}, {"sha": "db4907924faf351827c37824d805c92a93d20649", "filename": "src/test/rustdoc-gui/search-result-display.goml", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -4,7 +4,7 @@ size: (900, 1000)\n write: (\".search-input\", \"test\")\n // To be SURE that the search will be run.\n press-key: 'Enter'\n-wait-for: \"#search-settings\"\n+wait-for: \"#crate-search\"\n // The width is returned by \"getComputedStyle\" which returns the exact number instead of the\n // CSS rule which is \"50%\"...\n assert-css: (\".search-results div.desc\", {\"width\": \"295px\"})\n@@ -17,26 +17,18 @@ assert-css: (\".search-results div.desc\", {\"width\": \"570px\"})\n // To do so we need to update the length of one of its `<option>`.\n size: (900, 900)\n \n-// First we check the current width and position.\n-assert-css: (\"#crate-search\", {\"width\": \"218px\"})\n-compare-elements-position-near: (\n-    \"#crate-search\",\n-    \"#search-settings .search-results-title\",\n-    {\"y\": 5},\n-)\n+// First we check the current width, height and position.\n+assert-css: (\"#crate-search\", {\"width\": \"223px\"})\n+assert-css: (\".search-results-title\", {\"height\": \"44px\", \"width\": \"336px\"})\n \n // Then we update the text of one of the `<option>`.\n text: (\n     \"#crate-search option\",\n     \"sdjfaksdjfaksjdbfkadsbfkjsadbfkdsbkfbsadkjfbkdsabfkadsfkjdsafa\",\n )\n \n-// Then we compare again.\n-assert-css: (\"#crate-search\", {\"width\": \"640px\"})\n-compare-elements-position-near-false: (\n-    \"#crate-search\",\n-    \"#search-settings .search-results-title\",\n-    {\"y\": 5},\n-)\n-// And we check that the `<select>` isn't bigger than its container.\n+// Then we compare again to confirm the height didn't change.\n+assert-css: (\"#crate-search\", {\"width\": \"527px\"})\n+assert-css: (\".search-results-title\", {\"height\": \"44px\", \"width\": \"640px\"})\n+// And we check that the `<select>` isn't bigger than its container (\".search-results-title\").\n assert-css: (\"#search\", {\"width\": \"640px\"})"}, {"sha": "7ed345113cb47aadd3b4ab95a765172261d500cf", "filename": "src/test/ui/json-multiple.stderr", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20ffea6938b5839c390252e07940b99e3b6a889a/src%2Ftest%2Fui%2Fjson-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20ffea6938b5839c390252e07940b99e3b6a889a/src%2Ftest%2Fui%2Fjson-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-multiple.stderr?ref=20ffea6938b5839c390252e07940b99e3b6a889a", "patch": "@@ -1 +0,0 @@\n-{\"artifact\":\"$TEST_BUILD_DIR/json-multiple/libjson_multiple.rlib\",\"emit\":\"link\"}"}, {"sha": "24977731d17b7d037da01ae068fe3b5035a0ec23", "filename": "src/test/ui/json-options.stderr", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20ffea6938b5839c390252e07940b99e3b6a889a/src%2Ftest%2Fui%2Fjson-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20ffea6938b5839c390252e07940b99e3b6a889a/src%2Ftest%2Fui%2Fjson-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-options.stderr?ref=20ffea6938b5839c390252e07940b99e3b6a889a", "patch": "@@ -1 +0,0 @@\n-{\"artifact\":\"$TEST_BUILD_DIR/json-options/libjson_options.rlib\",\"emit\":\"link\"}"}, {"sha": "6f8326fe247ba974a69c5e4fa7b8a104103a58cf", "filename": "src/test/ui/json/json-and-color.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-and-color.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-and-color.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-and-color.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "previous_filename": "src/test/ui/json-and-color.rs"}, {"sha": "1cda6af090dfac9fb96c4ea9d4896f44904ac240", "filename": "src/test/ui/json/json-and-color.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-and-color.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-and-color.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-and-color.stderr?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "previous_filename": "src/test/ui/json-and-color.stderr"}, {"sha": "6e2d73c76b7cbfa46f5d2686a803e95e310035ef", "filename": "src/test/ui/json/json-and-error-format.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-and-error-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-and-error-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-and-error-format.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "previous_filename": "src/test/ui/json-and-error-format.rs"}, {"sha": "80e0221376e706679c11a164d619b0ac1a925b1a", "filename": "src/test/ui/json/json-and-error-format.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-and-error-format.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-and-error-format.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-and-error-format.stderr?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "previous_filename": "src/test/ui/json-and-error-format.stderr"}, {"sha": "991ea1d85d2ca3d8ae73449e5516524d4e092d6d", "filename": "src/test/ui/json/json-bom-plus-crlf-multifile-aux.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-bom-plus-crlf-multifile-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-bom-plus-crlf-multifile-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-bom-plus-crlf-multifile-aux.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "previous_filename": "src/test/ui/json-bom-plus-crlf-multifile-aux.rs"}, {"sha": "9290e010403a1772da9a0e38a847083f2d89b7bd", "filename": "src/test/ui/json/json-bom-plus-crlf-multifile.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-bom-plus-crlf-multifile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-bom-plus-crlf-multifile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-bom-plus-crlf-multifile.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "previous_filename": "src/test/ui/json-bom-plus-crlf-multifile.rs"}, {"sha": "02f3bc687cba9199d276f8c042589defee90b5f1", "filename": "src/test/ui/json/json-bom-plus-crlf-multifile.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-bom-plus-crlf-multifile.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-bom-plus-crlf-multifile.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-bom-plus-crlf-multifile.stderr?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "previous_filename": "src/test/ui/json-bom-plus-crlf-multifile.stderr"}, {"sha": "be5b7dd2a86a1487382e5cd347c9051a6a98c18d", "filename": "src/test/ui/json/json-bom-plus-crlf.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-bom-plus-crlf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-bom-plus-crlf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-bom-plus-crlf.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "previous_filename": "src/test/ui/json-bom-plus-crlf.rs"}, {"sha": "df6bd7286a6158492d3574f1acac4b0eca2495b7", "filename": "src/test/ui/json/json-bom-plus-crlf.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-bom-plus-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-bom-plus-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-bom-plus-crlf.stderr?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "previous_filename": "src/test/ui/json-bom-plus-crlf.stderr"}, {"sha": "54d0dd1849a3fe6c862261cef4b760ed189e69fe", "filename": "src/test/ui/json/json-invalid.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-invalid.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "previous_filename": "src/test/ui/json-invalid.rs"}, {"sha": "18bc76ab7eb049ccc0750b95c3e3b22edc48e4a9", "filename": "src/test/ui/json/json-invalid.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-invalid.stderr?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "previous_filename": "src/test/ui/json-invalid.stderr"}, {"sha": "0e4d442f299c3c418882653062ccb64fc857b44a", "filename": "src/test/ui/json/json-multiple.polonius.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-multiple.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-multiple.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-multiple.polonius.stderr?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "previous_filename": "src/test/ui/json-multiple.polonius.stderr"}, {"sha": "fb126339dc21665970c684a3075792ec7748881f", "filename": "src/test/ui/json/json-multiple.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-multiple.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "previous_filename": "src/test/ui/json-multiple.rs"}, {"sha": "55ccfd5fa70de5369d397e888cb3da850c0e46b2", "filename": "src/test/ui/json/json-multiple.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-multiple.stderr?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -0,0 +1 @@\n+{\"artifact\":\"$TEST_BUILD_DIR/json/json-multiple/libjson_multiple.rlib\",\"emit\":\"link\"}"}, {"sha": "e21f6f85d162d1a5d6c8ddf92ecc2597b815834b", "filename": "src/test/ui/json/json-options.polonius.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-options.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-options.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-options.polonius.stderr?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "previous_filename": "src/test/ui/json-options.polonius.stderr"}, {"sha": "8b6ba131eb0021c0a7ce4515548c8faf49fdc954", "filename": "src/test/ui/json/json-options.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-options.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "previous_filename": "src/test/ui/json-options.rs"}, {"sha": "645a26f5ad40785e869f49ab48ca89a566945979", "filename": "src/test/ui/json/json-options.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-options.stderr?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -0,0 +1 @@\n+{\"artifact\":\"$TEST_BUILD_DIR/json/json-options/libjson_options.rlib\",\"emit\":\"link\"}"}, {"sha": "7414a55869c608d7699d6793937a21786b006a74", "filename": "src/test/ui/json/json-short.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-short.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-short.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-short.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "previous_filename": "src/test/ui/json-short.rs"}, {"sha": "3bd85b083d002d4e8021e41faa9d9cfc8044e8ae", "filename": "src/test/ui/json/json-short.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-short.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fjson%2Fjson-short.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson%2Fjson-short.stderr?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "previous_filename": "src/test/ui/json-short.stderr"}, {"sha": "2aa34c8b33528c68a231bd77faae2f640e6a1405", "filename": "src/test/ui/lowering/issue-96847.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Flowering%2Fissue-96847.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Flowering%2Fissue-96847.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flowering%2Fissue-96847.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+\n+// Test that this doesn't abort during AST lowering. In #96847 it did abort\n+// because the attribute was being lowered twice.\n+\n+#![feature(stmt_expr_attributes)]\n+#![feature(lang_items)]\n+\n+fn main() {\n+    for _ in [1,2,3] {\n+        #![lang=\"foo\"]\n+        println!(\"foo\");\n+    }\n+}"}, {"sha": "8e71ed7c1120f0342ea6176da719cf0495f58c36", "filename": "src/test/ui/macros/stringify.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -865,8 +865,9 @@ fn test_vis() {\n     assert_eq!(stringify_vis!(pub(crate)), \"pub(crate) \");\n     assert_eq!(stringify_vis!(pub(self)), \"pub(self) \");\n     assert_eq!(stringify_vis!(pub(super)), \"pub(super) \");\n-    assert_eq!(stringify_vis!(pub(in self)), \"pub(self) \");\n-    assert_eq!(stringify_vis!(pub(in super)), \"pub(super) \");\n+    assert_eq!(stringify_vis!(pub(in crate)), \"pub(in crate) \");\n+    assert_eq!(stringify_vis!(pub(in self)), \"pub(in self) \");\n+    assert_eq!(stringify_vis!(pub(in super)), \"pub(in super) \");\n     assert_eq!(stringify_vis!(pub(in path::to)), \"pub(in path::to) \");\n     assert_eq!(stringify_vis!(pub(in ::path::to)), \"pub(in ::path::to) \");\n     assert_eq!(stringify_vis!(pub(in self::path::to)), \"pub(in self::path::to) \");"}, {"sha": "cd1d90e860b9fe865baef8a27bcbeb3078b7b0ec", "filename": "src/tools/clippy/clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -89,7 +89,7 @@ impl EarlyLintPass for UnusedUnit {\n         }\n     }\n \n-    fn check_poly_trait_ref(&mut self, cx: &EarlyContext<'_>, poly: &ast::PolyTraitRef, _: &ast::TraitBoundModifier) {\n+    fn check_poly_trait_ref(&mut self, cx: &EarlyContext<'_>, poly: &ast::PolyTraitRef) {\n         let segments = &poly.trait_ref.path.segments;\n \n         if_chain! {"}, {"sha": "025b8ab9f0af5f620809e1121c22c7ac224e96c1", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -96,6 +96,8 @@ mod os_impl {\n \n     #[cfg(unix)]\n     pub fn check(path: &Path, bad: &mut bool) {\n+        use std::ffi::OsStr;\n+\n         const ALLOWED: &[&str] = &[\"configure\"];\n \n         crate::walk_no_read(\n@@ -117,9 +119,9 @@ mod os_impl {\n             },\n             &mut |entry| {\n                 let file = entry.path();\n-                let filename = file.file_name().unwrap().to_string_lossy();\n-                let extensions = [\".py\", \".sh\"];\n-                if extensions.iter().any(|e| filename.ends_with(e)) {\n+                let extension = file.extension();\n+                let scripts = [\"py\", \"sh\", \"ps1\"];\n+                if scripts.into_iter().any(|e| extension == Some(OsStr::new(e))) {\n                     return;\n                 }\n "}, {"sha": "1225443735f7b14627e2887e9467d954ca5785f1", "filename": "x.ps1", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/x.ps1", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/x.ps1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x.ps1?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -0,0 +1,28 @@\n+#!/usr/bin/env pwsh\n+\n+# See x.sh for why these scripts exist.\n+\n+$xpy = Join-Path $PSScriptRoot x.py\n+# Start-Process for some reason splits arguments on spaces. (Isn't powershell supposed to be simpler than bash?)\n+# Double-quote all the arguments so it doesn't do that.\n+$xpy_args = @(\"\"\"$xpy\"\"\")\n+foreach ($arg in $args) {\n+    $xpy_args += \"\"\"$arg\"\"\"\n+}\n+\n+foreach ($python in \"py\", \"python3\", \"python\", \"python2\") {\n+    # NOTE: this only tests that the command exists in PATH, not that it's actually\n+    # executable. The latter is not possible in a portable way, see\n+    # https://github.com/PowerShell/PowerShell/issues/12625.\n+    if (Get-Command $python -ErrorAction SilentlyContinue) {\n+        if ($python -eq \"py\") {\n+            # Use python3, not python2\n+            $xpy_args = @(\"-3\") + $xpy_args\n+        }\n+        $process = Start-Process -NoNewWindow -Wait -PassThru $python $xpy_args\n+        Exit $process.ExitCode\n+    }\n+}\n+\n+Write-Error \"${PSCommandPath}: error: did not find python installed\"\n+Exit 1"}, {"sha": "6c68907c581457c200050e841768c5763e06d6b3", "filename": "x.py", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/x.py", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/x.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x.py?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -1,36 +1,16 @@\n-#!/usr/bin/env bash\n+#!/usr/bin/env python3\n+# Some systems don't have `python3` in their PATH. This isn't supported by x.py directly;\n+# they should use `x.sh` or `x.ps1` instead.\n \n-# Modern Linux and macOS systems commonly only have a thing called `python3` and\n-# not `python`, while Windows commonly does not have `python3`, so we cannot\n-# directly use python in the shebang and have it consistently work. Instead we\n-# embed some bash to look for a python to run the rest of the script.\n-#\n-# On Windows, `py -3` sometimes works. We need to try it first because `python3`\n-# sometimes tries to launch the app store on Windows.\n-'''':\n-for PYTHON in \"py -3\" python3 python python2; do\n-    if command -v $PYTHON >/dev/null; then\n-        exec $PYTHON \"$0\" \"$@\"\n-        break\n-    fi\n-done\n-echo \"$0: error: did not find python installed\" >&2\n-exit 1\n-'''\n-\n-# The rest of this file is Python.\n-#\n # This file is only a \"symlink\" to bootstrap.py, all logic should go there.\n \n import os\n import sys\n \n # If this is python2, check if python3 is available and re-execute with that\n-# interpreter.\n+# interpreter. Only python3 allows downloading CI LLVM.\n #\n-# `./x.py` would not normally benefit from this because the bash above tries\n-# python3 before 2, but this matters if someone ran `python x.py` and their\n-# system's `python` is python2.\n+# This matters if someone's system `python` is python2.\n if sys.version_info.major < 3:\n     try:\n         os.execvp(\"py\", [\"py\", \"-3\"] + sys.argv)"}, {"sha": "704d0f791f333d0ddca4c333a16fdf62643bb4c7", "filename": "x.sh", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2ed0f29168f5bc116e747152be600519b5d78bfd/x.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2ed0f29168f5bc116e747152be600519b5d78bfd/x.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x.sh?ref=2ed0f29168f5bc116e747152be600519b5d78bfd", "patch": "@@ -0,0 +1,33 @@\n+#!/bin/sh\n+\n+# Modern Linux and macOS systems commonly only have a thing called `python3` and\n+# not `python`, while Windows commonly does not have `python3`, so we cannot\n+# directly use python in the x.py shebang and have it consistently work. Instead we\n+# have a shell script to look for a python to run x.py.\n+\n+set -eu\n+\n+realpath() {\n+    if [ -d \"$1\" ]; then\n+        CDPATH='' command cd \"$1\" && pwd -P   \n+    else\n+        echo \"$(realpath \"$(dirname \"$1\")\")/$(basename \"$1\")\"\n+    fi\n+}\n+\n+xpy=$(dirname \"$(realpath \"$0\")\")/x.py\n+\n+# On Windows, `py -3` sometimes works. We need to try it first because `python3`\n+# sometimes tries to launch the app store on Windows.\n+for SEARCH_PYTHON in py python3 python python2; do\n+    if python=$(command -v $SEARCH_PYTHON) && [ -x \"$python\" ]; then\n+        if [ $SEARCH_PYTHON = py ]; then\n+            extra_arg=\"-3\"\n+        else\n+            extra_arg=\"\"\n+        fi\n+        exec \"$python\" $extra_arg \"$xpy\" \"$@\"\n+    fi\n+done\n+echo \"$0: error: did not find python installed\" >&2\n+exit 1"}]}