{"sha": "6aae0cf7fa042d51e97c7606cdf3a338f172f7d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYWUwY2Y3ZmEwNDJkNTFlOTdjNzYwNmNkZjNhMzM4ZjE3MmY3ZDI=", "commit": {"author": {"name": "Robin Freyler", "email": "robin.freyler@gmail.com", "date": "2019-04-13T14:43:49Z"}, "committer": {"name": "Robin Freyler", "email": "robin.freyler@gmail.com", "date": "2019-04-13T14:43:49Z"}, "message": "replace usages of `algo::generate` with `iter::successors` from std", "tree": {"sha": "632767346f695b6a2d547997c452070dc1f39dca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/632767346f695b6a2d547997c452070dc1f39dca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6aae0cf7fa042d51e97c7606cdf3a338f172f7d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEETmG5/4SdAMTnkRefGUmACsyM6JsFAlyx9aUACgkQGUmACsyM\n6JvWlQ/+JpvX9hdsNXehJNNwsfUw/h6We9cbIPfkgFHqhGrCc2K2oObKJz04BXJK\n6mTjhuB4AhEF8ZJ/oa44jCHOg18qQGK1w6UfloEQ9mL11ZCoRd4GLhtlzBJWoh9u\nIDbejQVFvS0XwrktEkShUB4tYdv7eQkiKvp0fhl1GJD2g6uOHgigxlJIj3UUP228\nYxh99MMlkbDWyINRkdrnq2FgV5+P6piIFVTB1PUyzSFMYf1xcdmR+8QiTkCGfkQE\nRcf4tg7csipbKUcuaUQL/AKz5BJBwTJ48XcYfkOlWqMbOO94GbUqT+qVn6t1FO08\nQZlwpdJEh3a49+K35kfHzWRDmUiwga7ttxt8DmRWevAdes9xaLG2dsCww8sHofuR\ng262g7r9lCOPeq5mDEyzp+LN7nFLE6st3i+hMhDNk4enYTEB05nHZlpAPeoBzqSR\nfpTZ8wqXEmcCDMc3EeNLVj6V1F+KIvVh6hJ/K/pk4R5pw56ULTRjF8sJ/8QhWHSP\n9++Y4wPq07QagOaMxjls28qLC7oXyy47Y4BAPfmyrP+A7w4CVnLH6t48O/pIH+S8\npJFFI8Qejr/ZUPf8XbrDTVTHbrEoZ9Mv3ApHNBih4IsekV6YSQo4oB3n1kvVu4Ac\nf6RzKzRyezszu0re5zMJFmBDRoCDaWQzO6DQmgbmRFWntU/JFhM=\n=TjIU\n-----END PGP SIGNATURE-----", "payload": "tree 632767346f695b6a2d547997c452070dc1f39dca\nparent 8887782c4ab97d22f3d5c10e142407e4371c5c61\nauthor Robin Freyler <robin.freyler@gmail.com> 1555166629 +0200\ncommitter Robin Freyler <robin.freyler@gmail.com> 1555166629 +0200\n\nreplace usages of `algo::generate` with `iter::successors` from std\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6aae0cf7fa042d51e97c7606cdf3a338f172f7d2", "html_url": "https://github.com/rust-lang/rust/commit/6aae0cf7fa042d51e97c7606cdf3a338f172f7d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6aae0cf7fa042d51e97c7606cdf3a338f172f7d2/comments", "author": {"login": "Robbepop", "id": 8193155, "node_id": "MDQ6VXNlcjgxOTMxNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8193155?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robbepop", "html_url": "https://github.com/Robbepop", "followers_url": "https://api.github.com/users/Robbepop/followers", "following_url": "https://api.github.com/users/Robbepop/following{/other_user}", "gists_url": "https://api.github.com/users/Robbepop/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robbepop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robbepop/subscriptions", "organizations_url": "https://api.github.com/users/Robbepop/orgs", "repos_url": "https://api.github.com/users/Robbepop/repos", "events_url": "https://api.github.com/users/Robbepop/events{/privacy}", "received_events_url": "https://api.github.com/users/Robbepop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Robbepop", "id": 8193155, "node_id": "MDQ6VXNlcjgxOTMxNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8193155?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robbepop", "html_url": "https://github.com/Robbepop", "followers_url": "https://api.github.com/users/Robbepop/followers", "following_url": "https://api.github.com/users/Robbepop/following{/other_user}", "gists_url": "https://api.github.com/users/Robbepop/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robbepop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robbepop/subscriptions", "organizations_url": "https://api.github.com/users/Robbepop/orgs", "repos_url": "https://api.github.com/users/Robbepop/repos", "events_url": "https://api.github.com/users/Robbepop/events{/privacy}", "received_events_url": "https://api.github.com/users/Robbepop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8887782c4ab97d22f3d5c10e142407e4371c5c61", "url": "https://api.github.com/repos/rust-lang/rust/commits/8887782c4ab97d22f3d5c10e142407e4371c5c61", "html_url": "https://github.com/rust-lang/rust/commit/8887782c4ab97d22f3d5c10e142407e4371c5c61"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "57e0efaf208f7a66d261615e0c356820a88c02fc", "filename": "crates/ra_assists/src/split_import.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6aae0cf7fa042d51e97c7606cdf3a338f172f7d2/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aae0cf7fa042d51e97c7606cdf3a338f172f7d2/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs?ref=6aae0cf7fa042d51e97c7606cdf3a338f172f7d2", "patch": "@@ -1,16 +1,17 @@\n+use std::iter::successors;\n+\n use hir::db::HirDatabase;\n use ra_syntax::{\n     TextUnit, AstNode, SyntaxKind::COLONCOLON,\n     ast,\n-    algo::generate,\n };\n \n use crate::{AssistCtx, Assist, AssistId};\n \n pub(crate) fn split_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let colon_colon = ctx.token_at_offset().find(|leaf| leaf.kind() == COLONCOLON)?;\n     let path = ast::Path::cast(colon_colon.parent())?;\n-    let top_path = generate(Some(path), |it| it.parent_path()).last()?;\n+    let top_path = successors(Some(path), |it| it.parent_path()).last()?;\n \n     let use_tree = top_path.syntax().ancestors().find_map(ast::UseTree::cast);\n     if use_tree.is_none() {"}, {"sha": "603be1854a91f9d72955ab7bddbd22f6dc86fcf4", "filename": "crates/ra_fmt/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6aae0cf7fa042d51e97c7606cdf3a338f172f7d2/crates%2Fra_fmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aae0cf7fa042d51e97c7606cdf3a338f172f7d2/crates%2Fra_fmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_fmt%2Fsrc%2Flib.rs?ref=6aae0cf7fa042d51e97c7606cdf3a338f172f7d2", "patch": "@@ -1,10 +1,10 @@\n //! This crate provides some utilities for indenting rust code.\n //!\n+use std::iter::successors;\n use itertools::Itertools;\n use ra_syntax::{\n     SyntaxNode, SyntaxKind::*, SyntaxToken, SyntaxKind,\n     ast::{self, AstNode, AstToken},\n-    algo::generate,\n };\n \n pub fn reindent(text: &str, indent: &str) -> String {\n@@ -29,7 +29,7 @@ pub fn leading_indent(node: &SyntaxNode) -> Option<&str> {\n }\n \n fn prev_tokens(token: SyntaxToken) -> impl Iterator<Item = SyntaxToken> {\n-    generate(token.prev_token(), |&token| token.prev_token())\n+    successors(token.prev_token(), |&token| token.prev_token())\n }\n \n pub fn extract_trivial_expression(block: &ast::Block) -> Option<&ast::Expr> {"}, {"sha": "a442a856c0244b7d45d16a76d4c21c009dc7c3f9", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6aae0cf7fa042d51e97c7606cdf3a338f172f7d2/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aae0cf7fa042d51e97c7606cdf3a338f172f7d2/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=6aae0cf7fa042d51e97c7606cdf3a338f172f7d2", "patch": "@@ -3,15 +3,15 @@\n //! reference to a type with the field `bar`. This is an approximation of the\n //! logic in rustc (which lives in librustc_typeck/check/autoderef.rs).\n \n-use ra_syntax::algo::generate;\n+use std::iter::successors;\n \n use crate::HirDatabase;\n use super::Ty;\n \n impl Ty {\n     /// Iterates over the possible derefs of `ty`.\n     pub fn autoderef<'a>(self, db: &'a impl HirDatabase) -> impl Iterator<Item = Ty> + 'a {\n-        generate(Some(self), move |ty| ty.autoderef_step(db))\n+        successors(Some(self), move |ty| ty.autoderef_step(db))\n     }\n \n     fn autoderef_step(&self, _db: &impl HirDatabase) -> Option<Ty> {"}, {"sha": "1f68fe467f55250da689c1c3ec3f4bd6e2aeae93", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6aae0cf7fa042d51e97c7606cdf3a338f172f7d2/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aae0cf7fa042d51e97c7606cdf3a338f172f7d2/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=6aae0cf7fa042d51e97c7606cdf3a338f172f7d2", "patch": "@@ -46,13 +46,3 @@ pub fn non_trivia_sibling(element: SyntaxElement, direction: Direction) -> Optio\n pub fn find_covering_element(root: &SyntaxNode, range: TextRange) -> SyntaxElement {\n     root.0.covering_node(range).into()\n }\n-\n-// Replace with `std::iter::successors` in `1.34.0`\n-pub fn generate<T>(seed: Option<T>, step: impl Fn(&T) -> Option<T>) -> impl Iterator<Item = T> {\n-    ::itertools::unfold(seed, move |slot| {\n-        slot.take().map(|curr| {\n-            *slot = step(&curr);\n-            curr\n-        })\n-    })\n-}"}, {"sha": "15a8b94cd6df645e3ad9cc6a303c6958b0c71f8b", "filename": "crates/ra_syntax/src/ptr.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6aae0cf7fa042d51e97c7606cdf3a338f172f7d2/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aae0cf7fa042d51e97c7606cdf3a338f172f7d2/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fptr.rs?ref=6aae0cf7fa042d51e97c7606cdf3a338f172f7d2", "patch": "@@ -1,8 +1,9 @@\n-use std::marker::PhantomData;\n-\n+use std::{\n+    marker::PhantomData,\n+    iter::successors,\n+};\n use crate::{\n     AstNode, SourceFile, SyntaxKind, SyntaxNode, TextRange,\n-    algo::generate,\n };\n \n /// A pointer to a syntax node inside a file. It can be used to remember a\n@@ -19,7 +20,7 @@ impl SyntaxNodePtr {\n     }\n \n     pub fn to_node(self, source_file: &SourceFile) -> &SyntaxNode {\n-        generate(Some(source_file.syntax()), |&node| {\n+        successors(Some(source_file.syntax()), |&node| {\n             node.children().find(|it| self.range.is_subrange(&it.range()))\n         })\n         .find(|it| it.range() == self.range && it.kind() == self.kind)"}, {"sha": "dc2352c76d455f45ce2f9764ad07e3c51bb278f2", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6aae0cf7fa042d51e97c7606cdf3a338f172f7d2/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aae0cf7fa042d51e97c7606cdf3a338f172f7d2/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=6aae0cf7fa042d51e97c7606cdf3a338f172f7d2", "patch": "@@ -10,6 +10,7 @@ use std::{\n     fmt::{self, Write},\n     any::Any,\n     borrow::Borrow,\n+    iter::successors,\n };\n \n use ra_parser::ParseError;\n@@ -195,7 +196,7 @@ impl SyntaxNode {\n     }\n \n     pub fn ancestors(&self) -> impl Iterator<Item = &SyntaxNode> {\n-        crate::algo::generate(Some(self), |&node| node.parent())\n+        successors(Some(self), |&node| node.parent())\n     }\n \n     pub fn descendants(&self) -> impl Iterator<Item = &SyntaxNode> {\n@@ -213,7 +214,7 @@ impl SyntaxNode {\n     }\n \n     pub fn siblings(&self, direction: Direction) -> impl Iterator<Item = &SyntaxNode> {\n-        crate::algo::generate(Some(self), move |&node| match direction {\n+        successors(Some(self), move |&node| match direction {\n             Direction::Next => node.next_sibling(),\n             Direction::Prev => node.prev_sibling(),\n         })\n@@ -224,7 +225,7 @@ impl SyntaxNode {\n         direction: Direction,\n     ) -> impl Iterator<Item = SyntaxElement> {\n         let me: SyntaxElement = self.into();\n-        crate::algo::generate(Some(me), move |el| match direction {\n+        successors(Some(me), move |el| match direction {\n             Direction::Next => el.next_sibling_or_token(),\n             Direction::Prev => el.prev_sibling_or_token(),\n         })\n@@ -373,7 +374,7 @@ impl<'a> SyntaxToken<'a> {\n         direction: Direction,\n     ) -> impl Iterator<Item = SyntaxElement<'a>> {\n         let me: SyntaxElement = (*self).into();\n-        crate::algo::generate(Some(me), move |el| match direction {\n+        successors(Some(me), move |el| match direction {\n             Direction::Next => el.next_sibling_or_token(),\n             Direction::Prev => el.prev_sibling_or_token(),\n         })"}]}