{"sha": "419902e413ddd62673f8e54c71e5164d862aee08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOTkwMmU0MTNkZGQ2MjY3M2Y4ZTU0YzcxZTUxNjRkODYyYWVlMDg=", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2021-08-08T13:23:08Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2021-08-08T15:03:39Z"}, "message": "Fix Windows Command::env(\"PATH\")", "tree": {"sha": "60623676a64528f2c1954e5fd18924f4216d9c77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60623676a64528f2c1954e5fd18924f4216d9c77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/419902e413ddd62673f8e54c71e5164d862aee08", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmEP8kwACgkQcTRy8vRW\nJ97ulhAAjVD2CPM6jYJqm7SNc3JXGYTuBtMQ/7/d1+1uQ8lHiWQPDvb3qCImHEiP\nfb62Amysf6DHmPcz//BjVipWcYvlEPHeQC4nTd41/peN8B8KBSJIpkA1N//OQnP4\nqvXaJaf0OwjOQZ5VFOFXQmOo3Xxsv6T3XqSUUNGjdY8t4r5jcMu9S2oeOTherD6a\nwl1I3xFIbOu1YsgCHZptvgYI9z+UoBvZq7BHyDU24XFRzx+rSowkI6btuBagIpzU\n+zkw39bWi4HQbP6I8V0ltQv1yHJM9QwgqNzTRH4wJj3yYW9xMkaJms+wwq2Yoibf\n7DvSdQxrnvasDGI/FHUS2kUc4RHI9214DMv5tcVFHC7LT70/hI+ukym8Wty5LR7N\nDoXzNahWNyUtwyUNkdr/N7ZK95nFeDTKMLG3zT9Tqtp+hB97345FSxYyKhTSesXe\n2quXSd4waHvcPyo51f1ZtTylxMhixGx/ha362ZlbT05mpWGhwbA9rQjTvXIwdLKO\niU7Nwc8A2bvC0QOrjJiJteChjcCufcRU5OXB0bz/lsy2w7Hf5ywrcypOKXiCyrg6\nwhfsxYDCSoDHdlMhzkRKstQyL6K/FbhS2lX1KD8OYW7A0LqNvfUGZ81k/vnqFyPO\nA6ZpUrmkyLZXr+p/7cBwB2MtjMAWL33TOFg5AqN4OSuQmQ9ysl0=\n=ZWFg\n-----END PGP SIGNATURE-----", "payload": "tree 60623676a64528f2c1954e5fd18924f4216d9c77\nparent e8c25f266349a68faa8c4fb68f5c1d5e4512790f\nauthor Chris Denton <christophersdenton@gmail.com> 1628428988 +0100\ncommitter Chris Denton <christophersdenton@gmail.com> 1628435019 +0100\n\nFix Windows Command::env(\"PATH\")\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/419902e413ddd62673f8e54c71e5164d862aee08", "html_url": "https://github.com/rust-lang/rust/commit/419902e413ddd62673f8e54c71e5164d862aee08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/419902e413ddd62673f8e54c71e5164d862aee08/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8c25f266349a68faa8c4fb68f5c1d5e4512790f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c25f266349a68faa8c4fb68f5c1d5e4512790f", "html_url": "https://github.com/rust-lang/rust/commit/e8c25f266349a68faa8c4fb68f5c1d5e4512790f"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "ae193b82e91bb4ce67631babc0ff1c67a6f2e583", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/419902e413ddd62673f8e54c71e5164d862aee08/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419902e413ddd62673f8e54c71e5164d862aee08/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=419902e413ddd62673f8e54c71e5164d862aee08", "patch": "@@ -3,7 +3,6 @@\n #[cfg(test)]\n mod tests;\n \n-use crate::borrow::Borrow;\n use crate::cmp;\n use crate::collections::BTreeMap;\n use crate::convert::{TryFrom, TryInto};\n@@ -46,6 +45,12 @@ pub struct EnvKey {\n     utf16: Vec<u16>,\n }\n \n+impl EnvKey {\n+    fn new<T: Into<OsString>>(key: T) -> Self {\n+        EnvKey::from(key.into())\n+    }\n+}\n+\n // Comparing Windows environment variable keys[1] are behaviourally the\n // composition of two operations[2]:\n //\n@@ -100,6 +105,20 @@ impl PartialEq for EnvKey {\n         }\n     }\n }\n+impl PartialOrd<str> for EnvKey {\n+    fn partial_cmp(&self, other: &str) -> Option<cmp::Ordering> {\n+        Some(self.cmp(&EnvKey::new(other)))\n+    }\n+}\n+impl PartialEq<str> for EnvKey {\n+    fn eq(&self, other: &str) -> bool {\n+        if self.os_string.len() != other.len() {\n+            false\n+        } else {\n+            self.cmp(&EnvKey::new(other)) == cmp::Ordering::Equal\n+        }\n+    }\n+}\n \n // Environment variable keys should preserve their original case even though\n // they are compared using a caseless string mapping.\n@@ -115,9 +134,9 @@ impl From<EnvKey> for OsString {\n     }\n }\n \n-impl Borrow<OsStr> for EnvKey {\n-    fn borrow(&self) -> &OsStr {\n-        &self.os_string\n+impl From<&OsStr> for EnvKey {\n+    fn from(k: &OsStr) -> Self {\n+        Self::from(k.to_os_string())\n     }\n }\n \n@@ -242,7 +261,7 @@ impl Command {\n         // to read the *child's* PATH if one is provided. See #15149 for more\n         // details.\n         let program = maybe_env.as_ref().and_then(|env| {\n-            if let Some(v) = env.get(OsStr::new(\"PATH\")) {\n+            if let Some(v) = env.get(&EnvKey::new(\"PATH\")) {\n                 // Split the value and test each path to see if the\n                 // program exists.\n                 for path in split_paths(&v) {"}, {"sha": "38007d5c414ecd42bd97456334005c4231756bd9", "filename": "library/std/src/sys_common/process.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/419902e413ddd62673f8e54c71e5164d862aee08/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419902e413ddd62673f8e54c71e5164d862aee08/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs?ref=419902e413ddd62673f8e54c71e5164d862aee08", "patch": "@@ -65,16 +65,18 @@ impl CommandEnv {\n \n     // The following functions build up changes\n     pub fn set(&mut self, key: &OsStr, value: &OsStr) {\n+        let key = EnvKey::from(key);\n         self.maybe_saw_path(&key);\n-        self.vars.insert(key.to_owned().into(), Some(value.to_owned()));\n+        self.vars.insert(key, Some(value.to_owned()));\n     }\n \n     pub fn remove(&mut self, key: &OsStr) {\n+        let key = EnvKey::from(key);\n         self.maybe_saw_path(&key);\n         if self.clear {\n-            self.vars.remove(key);\n+            self.vars.remove(&key);\n         } else {\n-            self.vars.insert(key.to_owned().into(), None);\n+            self.vars.insert(key, None);\n         }\n     }\n \n@@ -87,7 +89,7 @@ impl CommandEnv {\n         self.saw_path || self.clear\n     }\n \n-    fn maybe_saw_path(&mut self, key: &OsStr) {\n+    fn maybe_saw_path(&mut self, key: &EnvKey) {\n         if !self.saw_path && key == \"PATH\" {\n             self.saw_path = true;\n         }"}]}