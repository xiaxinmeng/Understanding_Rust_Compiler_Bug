{"sha": "2acd6b77413817d89a067603fe54fdc9baa66df0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhY2Q2Yjc3NDEzODE3ZDg5YTA2NzYwM2ZlNTRmZGM5YmFhNjZkZjA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-09-26T16:41:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-09-26T17:17:04Z"}, "message": "Remove windows TCB hack from rustdoc", "tree": {"sha": "5a1df597c018a8a6a2772bc083b6c87a1a21df31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a1df597c018a8a6a2772bc083b6c87a1a21df31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2acd6b77413817d89a067603fe54fdc9baa66df0", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2acd6b77413817d89a067603fe54fdc9baa66df0", "html_url": "https://github.com/rust-lang/rust/commit/2acd6b77413817d89a067603fe54fdc9baa66df0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2acd6b77413817d89a067603fe54fdc9baa66df0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b3d7021e4a2bccace8816bb24eec33eac09c9f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b3d7021e4a2bccace8816bb24eec33eac09c9f2", "html_url": "https://github.com/rust-lang/rust/commit/3b3d7021e4a2bccace8816bb24eec33eac09c9f2"}], "stats": {"total": 42, "additions": 1, "deletions": 41}, "files": [{"sha": "71d00e50af83d20ab900305b78741fb5955c8988", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2acd6b77413817d89a067603fe54fdc9baa66df0/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2acd6b77413817d89a067603fe54fdc9baa66df0/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=2acd6b77413817d89a067603fe54fdc9baa66df0", "patch": "@@ -89,47 +89,7 @@ local_data_key!(pub analysiskey: core::CrateAnalysis)\n type Output = (clean::Crate, Vec<plugins::PluginJson> );\n \n pub fn main() {\n-    // Why run rustdoc in a separate task? That's a good question!\n-    //\n-    // We first begin our adventure at the ancient commit of e7c4fb69. In this\n-    // commit it was discovered that the stack limit frobbing on windows ended\n-    // up causing some syscalls to fail. This was worked around manually in the\n-    // relevant location.\n-    //\n-    // Our journey now continues with #13259 where it was discovered that this\n-    // stack limit frobbing has the ability to affect nearly any syscall. Note\n-    // that the key idea here is that there is currently no knowledge as to why\n-    // this is happening or how to preserve it, fun times!\n-    //\n-    // Now we continue along to #16275 where it was discovered that --test on\n-    // windows didn't work at all! Yet curiously rustdoc worked without --test.\n-    // The exact reason that #16275 cropped up is that during the expansion\n-    // phase the compiler attempted to open libstd to read out its macros. This\n-    // invoked the LLVMRustOpenArchive shim which in turned went to LLVM to go\n-    // open a file and read it. Lo and behold this function returned an error!\n-    // It was then discovered that when the same fix mentioned in #13259 was\n-    // applied, the error went away. The plot thickens!\n-    //\n-    // Remember that rustdoc works without --test, which raises the question of\n-    // how because the --test and non --test paths are almost identical. The\n-    // first thing both paths do is parse and expand a crate! It turns out that\n-    // the difference is that --test runs on the *main task* while the normal\n-    // path runs in subtask. It turns out that running --test in a sub task also\n-    // fixes the problem!\n-    //\n-    // So, in summary, it is unknown why this is necessary, what it is\n-    // preventing, or what the actual bug is. In the meantime, this allows\n-    // --test to work on windows, which seems good, right? Fun times.\n-    let (tx, rx) = channel();\n-    spawn(proc() {\n-        std::os::set_exit_status(main_args(std::os::args().as_slice()));\n-        tx.send(());\n-    });\n-\n-    // If the task failed, set an error'd exit status\n-    if rx.recv_opt().is_err() {\n-        std::os::set_exit_status(std::rt::DEFAULT_ERROR_CODE);\n-    }\n+    std::os::set_exit_status(main_args(std::os::args().as_slice()));\n }\n \n pub fn opts() -> Vec<getopts::OptGroup> {"}]}