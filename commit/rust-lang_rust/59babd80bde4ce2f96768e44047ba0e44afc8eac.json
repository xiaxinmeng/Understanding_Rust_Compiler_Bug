{"sha": "59babd80bde4ce2f96768e44047ba0e44afc8eac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YmFiZDgwYmRlNGNlMmY5Njc2OGU0NDA0N2JhMGU0NGFmYzhlYWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-11T21:11:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-12T00:32:48Z"}, "message": "add some comments and `debug!` calls to \"obligation forest\"", "tree": {"sha": "1affa5668816f25554c9f59fee666b33fc19a571", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1affa5668816f25554c9f59fee666b33fc19a571"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59babd80bde4ce2f96768e44047ba0e44afc8eac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59babd80bde4ce2f96768e44047ba0e44afc8eac", "html_url": "https://github.com/rust-lang/rust/commit/59babd80bde4ce2f96768e44047ba0e44afc8eac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59babd80bde4ce2f96768e44047ba0e44afc8eac/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "761808ef40b1e2cc9b35f0891a66d2dcf3274834", "url": "https://api.github.com/repos/rust-lang/rust/commits/761808ef40b1e2cc9b35f0891a66d2dcf3274834", "html_url": "https://github.com/rust-lang/rust/commit/761808ef40b1e2cc9b35f0891a66d2dcf3274834"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "3515e5c5ede35a3f9c67fc4692aa33544527f787", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/59babd80bde4ce2f96768e44047ba0e44afc8eac/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59babd80bde4ce2f96768e44047ba0e44afc8eac/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=59babd80bde4ce2f96768e44047ba0e44afc8eac", "patch": "@@ -43,7 +43,16 @@ pub trait ObligationProcessor {\n                           obligation: &mut Self::Obligation)\n                           -> Result<Option<Vec<Self::Obligation>>, Self::Error>;\n \n-    fn process_backedge<'c, I>(&mut self, cycle: I,\n+    /// As we do the cycle check, we invoke this callback when we\n+    /// encounter an actual cycle. `cycle` is an iterator that starts\n+    /// at the start of the cycle in the stack and walks **toward the\n+    /// top**.\n+    ///\n+    /// In other words, if we had O1 which required O2 which required\n+    /// O3 which required O1, we would give an iterator yielding O1,\n+    /// O2, O3 (O1 is not yielded twice).\n+    fn process_backedge<'c, I>(&mut self,\n+                               cycle: I,\n                                _marker: PhantomData<&'c Self::Obligation>)\n         where I: Clone + Iterator<Item=&'c Self::Obligation>;\n }\n@@ -239,8 +248,8 @@ impl<O: ForestObligation> ObligationForest<O> {\n                 }\n             }\n             Entry::Vacant(v) => {\n-                debug!(\"register_obligation_at({:?}, {:?}) - ok\",\n-                       obligation, parent);\n+                debug!(\"register_obligation_at({:?}, {:?}) - ok, new index is {}\",\n+                       obligation, parent, self.nodes.len());\n                 v.insert(NodeIndex::new(self.nodes.len()));\n                 self.cache_list.push(obligation.as_predicate().clone());\n                 self.nodes.push(Node::new(parent, obligation));\n@@ -376,6 +385,9 @@ impl<O: ForestObligation> ObligationForest<O> {\n         where P: ObligationProcessor<Obligation=O>\n     {\n         let mut stack = self.scratch.take().unwrap();\n+        debug_assert!(stack.is_empty());\n+\n+        debug!(\"process_cycles()\");\n \n         for index in 0..self.nodes.len() {\n             // For rustc-benchmarks/inflate-0.1.0 this state test is extremely\n@@ -389,6 +401,9 @@ impl<O: ForestObligation> ObligationForest<O> {\n             }\n         }\n \n+        debug!(\"process_cycles: complete\");\n+\n+        debug_assert!(stack.is_empty());\n         self.scratch = Some(stack);\n     }\n \n@@ -402,21 +417,6 @@ impl<O: ForestObligation> ObligationForest<O> {\n             NodeState::OnDfsStack => {\n                 let index =\n                     stack.iter().rposition(|n| *n == index).unwrap();\n-                // I need a Clone closure\n-                #[derive(Clone)]\n-                struct GetObligation<'a, O: 'a>(&'a [Node<O>]);\n-                impl<'a, 'b, O> FnOnce<(&'b usize,)> for GetObligation<'a, O> {\n-                    type Output = &'a O;\n-                    extern \"rust-call\" fn call_once(self, args: (&'b usize,)) -> &'a O {\n-                        &self.0[*args.0].obligation\n-                    }\n-                }\n-                impl<'a, 'b, O> FnMut<(&'b usize,)> for GetObligation<'a, O> {\n-                    extern \"rust-call\" fn call_mut(&mut self, args: (&'b usize,)) -> &'a O {\n-                        &self.0[*args.0].obligation\n-                    }\n-                }\n-\n                 processor.process_backedge(stack[index..].iter().map(GetObligation(&self.nodes)),\n                                            PhantomData);\n             }\n@@ -645,3 +645,20 @@ impl<O> Node<O> {\n         }\n     }\n }\n+\n+// I need a Clone closure\n+#[derive(Clone)]\n+struct GetObligation<'a, O: 'a>(&'a [Node<O>]);\n+\n+impl<'a, 'b, O> FnOnce<(&'b usize,)> for GetObligation<'a, O> {\n+    type Output = &'a O;\n+    extern \"rust-call\" fn call_once(self, args: (&'b usize,)) -> &'a O {\n+        &self.0[*args.0].obligation\n+    }\n+}\n+\n+impl<'a, 'b, O> FnMut<(&'b usize,)> for GetObligation<'a, O> {\n+    extern \"rust-call\" fn call_mut(&mut self, args: (&'b usize,)) -> &'a O {\n+        &self.0[*args.0].obligation\n+    }\n+}"}]}