{"sha": "33e866339126df3806f9cae95f2b91d38abaab32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZTg2NjMzOTEyNmRmMzgwNmY5Y2FlOTVmMmI5MWQzOGFiYWFiMzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-10T19:51:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-10T19:51:21Z"}, "message": "auto merge of #11449 : rcatolino/rust/assign-binop-handling, r=alexcrichton\n\nSo far the following code\r\n```\r\nstruct Foo;\r\n\r\nfn main() {\r\n  let mut t = Foo;\r\n  let ref b = Foo;\r\n  a += *b;\r\n}\r\n```\r\nerrors with \r\n```\r\ntest.rs:15:3: 13:11 error: binary operation + cannot be applied to type `Foo`\r\ntest.rs:15   *a += *b;\r\n```\r\nSince assignment-operators are no longer expanded to ```left = left OP right``` but are independents operators it should be \r\n```\r\ntest.rs:15:3: 13:11 error: binary operation += cannot be applied to type `Foo`\r\ntest.rs:15   *a += *b;\r\n```\r\nto make it clear that implementing Add for Foo is not gonna work. (cf issues #11143, #11344)\r\n\r\nBesides that, we also need to typecheck the rhs expression even if the operator has no implementation, or we end up with unknown types for the nodes of the rhs and an ICE later on while resolving types. (once again cf #11143 and #11344).\r\n\r\nThis probably would get fixed with #5992, but in the meantime it's a confusing error to stumble upon.\r\n@pcwalton, you wrote the original code, what do you think?\r\n(closes #11143 and #11344)", "tree": {"sha": "2229f3818610023db9bda0cc5de134eede3cf555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2229f3818610023db9bda0cc5de134eede3cf555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33e866339126df3806f9cae95f2b91d38abaab32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33e866339126df3806f9cae95f2b91d38abaab32", "html_url": "https://github.com/rust-lang/rust/commit/33e866339126df3806f9cae95f2b91d38abaab32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33e866339126df3806f9cae95f2b91d38abaab32/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff7ecca20e116b8365d8095fa9618dc11e54cfbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff7ecca20e116b8365d8095fa9618dc11e54cfbe", "html_url": "https://github.com/rust-lang/rust/commit/ff7ecca20e116b8365d8095fa9618dc11e54cfbe"}, {"sha": "02d86216f39d78d614c684e72250cd37e5c6339a", "url": "https://api.github.com/repos/rust-lang/rust/commits/02d86216f39d78d614c684e72250cd37e5c6339a", "html_url": "https://github.com/rust-lang/rust/commit/02d86216f39d78d614c684e72250cd37e5c6339a"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "5acca083d7939b765625b2b8d63762d3f5225186", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/33e866339126df3806f9cae95f2b91d38abaab32/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33e866339126df3806f9cae95f2b91d38abaab32/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=33e866339126df3806f9cae95f2b91d38abaab32", "patch": "@@ -213,11 +213,13 @@ impl PurityState {\n     }\n }\n \n-/// Whether `check_binop` allows overloaded operators to be invoked.\n+/// Whether `check_binop` is part of an assignment or not.\n+/// Used to know wether we allow user overloads and to print\n+/// better messages on error.\n #[deriving(Eq)]\n-enum AllowOverloadedOperatorsFlag {\n-    AllowOverloadedOperators,\n-    DontAllowOverloadedOperators,\n+enum IsBinopAssignment{\n+    SimpleBinop,\n+    BinopAssignment,\n }\n \n #[deriving(Clone)]\n@@ -2086,7 +2088,7 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n                    rhs: @ast::Expr,\n                    // Used only in the error case\n                    expected_result: Option<ty::t>,\n-                   allow_overloaded_operators: AllowOverloadedOperatorsFlag\n+                   is_binop_assignment: IsBinopAssignment\n                   ) {\n         let tcx = fcx.ccx.tcx;\n \n@@ -2136,9 +2138,9 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n \n         }\n \n-        // Check for overloaded operators if allowed.\n+        // Check for overloaded operators if not an assignment.\n         let result_t;\n-        if allow_overloaded_operators == AllowOverloadedOperators {\n+        if is_binop_assignment == SimpleBinop {\n             result_t = check_user_binop(fcx,\n                                         callee_id,\n                                         expr,\n@@ -2150,13 +2152,14 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n         } else {\n             fcx.type_error_message(expr.span,\n                                    |actual| {\n-                                        format!(\"binary operation {} cannot be \\\n-                                              applied to type `{}`\",\n-                                             ast_util::binop_to_str(op),\n-                                             actual)\n+                                        format!(\"binary assignment operation \\\n+                                                {}= cannot be applied to type `{}`\",\n+                                                ast_util::binop_to_str(op),\n+                                                actual)\n                                    },\n                                    lhs_t,\n                                    None);\n+            check_expr(fcx, rhs);\n             result_t = ty::mk_err();\n         }\n \n@@ -2760,7 +2763,7 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n                     lhs,\n                     rhs,\n                     expected,\n-                    AllowOverloadedOperators);\n+                    SimpleBinop);\n \n         let lhs_ty = fcx.expr_ty(lhs);\n         let rhs_ty = fcx.expr_ty(rhs);\n@@ -2781,7 +2784,7 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n                     lhs,\n                     rhs,\n                     expected,\n-                    DontAllowOverloadedOperators);\n+                    BinopAssignment);\n \n         let lhs_t = fcx.expr_ty(lhs);\n         let result_t = fcx.expr_ty(expr);"}, {"sha": "96b05681f172470c76c0f9c468ad63678e161f42", "filename": "src/test/compile-fail/assignment-operator-unimplemented.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/33e866339126df3806f9cae95f2b91d38abaab32/src%2Ftest%2Fcompile-fail%2Fassignment-operator-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33e866339126df3806f9cae95f2b91d38abaab32/src%2Ftest%2Fcompile-fail%2Fassignment-operator-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassignment-operator-unimplemented.rs?ref=33e866339126df3806f9cae95f2b91d38abaab32", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo;\n+\n+fn main() {\n+  let mut a = Foo;\n+  let ref b = Foo;\n+  a += *b; //~ Error: binary assignment operation += cannot be applied to type `Foo`\n+}"}, {"sha": "f7ec0bf8ac10b1e8c8a61f45f53afce694b9064d", "filename": "src/test/compile-fail/issue-5239-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33e866339126df3806f9cae95f2b91d38abaab32/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33e866339126df3806f9cae95f2b91d38abaab32/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs?ref=33e866339126df3806f9cae95f2b91d38abaab32", "patch": "@@ -11,5 +11,5 @@\n // Regression test for issue #5239\n \n fn main() {\n-    let x: |int| -> int = |ref x| { x += 1; }; //~ ERROR binary operation + cannot be applied to type `&int`\n+    let x: |int| -> int = |ref x| { x += 1; }; //~ ERROR binary assignment operation += cannot be applied to type `&int`\n }"}]}