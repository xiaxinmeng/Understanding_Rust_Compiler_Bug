{"sha": "ae820924c4f39c5a83287ba1cb6f9af572cabf55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlODIwOTI0YzRmMzljNWE4MzI4N2JhMWNiNmY5YWY1NzJjYWJmNTU=", "commit": {"author": {"name": "Devin R", "email": "devin.ragotzy@gmail.com", "date": "2020-04-15T20:22:28Z"}, "committer": {"name": "Devin R", "email": "devin.ragotzy@gmail.com", "date": "2020-04-20T10:30:01Z"}, "message": "use if chain", "tree": {"sha": "ed01b038a47c922ca4947d249347a6236af48ea4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed01b038a47c922ca4947d249347a6236af48ea4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae820924c4f39c5a83287ba1cb6f9af572cabf55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae820924c4f39c5a83287ba1cb6f9af572cabf55", "html_url": "https://github.com/rust-lang/rust/commit/ae820924c4f39c5a83287ba1cb6f9af572cabf55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae820924c4f39c5a83287ba1cb6f9af572cabf55/comments", "author": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cebe2bf8464aa7751dac0effd4457954033cdac", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cebe2bf8464aa7751dac0effd4457954033cdac", "html_url": "https://github.com/rust-lang/rust/commit/4cebe2bf8464aa7751dac0effd4457954033cdac"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "b98f190eb36c508d38b407423392a08d3f3e5262", "filename": "clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ae820924c4f39c5a83287ba1cb6f9af572cabf55/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae820924c4f39c5a83287ba1cb6f9af572cabf55/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=ae820924c4f39c5a83287ba1cb6f9af572cabf55", "patch": "@@ -1,3 +1,4 @@\n+use if_chain::if_chain;\n use crate::utils::{match_type, paths, span_lint_and_help};\n use rustc_hir::intravisit::{self as visit, NestedVisitorMap, Visitor};\n use rustc_hir::{Arm, Expr, ExprKind, MatchSource, StmtKind};\n@@ -42,13 +43,11 @@ declare_lint_pass!(IfLetMutex => [IF_LET_MUTEX]);\n impl LateLintPass<'_, '_> for IfLetMutex {\n     fn check_expr(&mut self, cx: &LateContext<'_, '_>, ex: &'_ Expr<'_>) {\n         let mut arm_visit = ArmVisitor {\n-            arm_mutex: false,\n-            arm_lock: false,\n+            mutex_lock_called: false,\n             cx,\n         };\n         let mut op_visit = OppVisitor {\n-            op_mutex: false,\n-            op_lock: false,\n+            mutex_lock_called: false,\n             cx,\n         };\n         if let ExprKind::Match(\n@@ -60,12 +59,12 @@ impl LateLintPass<'_, '_> for IfLetMutex {\n         ) = ex.kind\n         {\n             op_visit.visit_expr(op);\n-            if op_visit.op_mutex && op_visit.op_lock {\n+            if op_visit.mutex_lock_called {\n                 for arm in *arms {\n                     arm_visit.visit_arm(arm);\n                 }\n \n-                if arm_visit.arm_mutex && arm_visit.arm_lock {\n+                if arm_visit.mutex_lock_called {\n                     span_lint_and_help(\n                         cx,\n                         IF_LET_MUTEX,\n@@ -81,22 +80,22 @@ impl LateLintPass<'_, '_> for IfLetMutex {\n \n /// Checks if `Mutex::lock` is called in the `if let _ = expr.\n pub struct OppVisitor<'tcx, 'l> {\n-    pub op_mutex: bool,\n-    pub op_lock: bool,\n+    pub mutex_lock_called: bool,\n     pub cx: &'tcx LateContext<'tcx, 'l>,\n }\n \n impl<'tcx, 'l> Visitor<'tcx> for OppVisitor<'tcx, 'l> {\n     type Map = Map<'tcx>;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if let ExprKind::MethodCall(path, _span, args) = &expr.kind {\n-            if path.ident.to_string() == \"lock\" {\n-                self.op_lock = true;\n-            }\n+        if_chain! {\n+            if let ExprKind::MethodCall(path, _span, args) = &expr.kind;\n+            if path.ident.to_string() == \"lock\";\n             let ty = self.cx.tables.expr_ty(&args[0]);\n-            if match_type(self.cx, ty, &paths::MUTEX) {\n-                self.op_mutex = true;\n+            if match_type(self.cx, ty, &paths::MUTEX);\n+            then {\n+                self.mutex_lock_called = true;\n+                return;\n             }\n         }\n         visit::walk_expr(self, expr);\n@@ -109,22 +108,22 @@ impl<'tcx, 'l> Visitor<'tcx> for OppVisitor<'tcx, 'l> {\n \n /// Checks if `Mutex::lock` is called in any of the branches.\n pub struct ArmVisitor<'tcx, 'l> {\n-    pub arm_mutex: bool,\n-    pub arm_lock: bool,\n+    pub mutex_lock_called: bool,\n     pub cx: &'tcx LateContext<'tcx, 'l>,\n }\n \n impl<'tcx, 'l> Visitor<'tcx> for ArmVisitor<'tcx, 'l> {\n     type Map = Map<'tcx>;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if let ExprKind::MethodCall(path, _span, args) = &expr.kind {\n-            if path.ident.to_string() == \"lock\" {\n-                self.arm_lock = true;\n-            }\n+        if_chain! {\n+            if let ExprKind::MethodCall(path, _span, args) = &expr.kind;\n+            if path.ident.to_string() == \"lock\";\n             let ty = self.cx.tables.expr_ty(&args[0]);\n-            if match_type(self.cx, ty, &paths::MUTEX) {\n-                self.arm_mutex = true;\n+            if match_type(self.cx, ty, &paths::MUTEX);\n+            then {\n+                self.mutex_lock_called = true;\n+                return;\n             }\n         }\n         visit::walk_expr(self, expr);"}, {"sha": "0013165d5337f1b28628958a511b996feb5fd4f0", "filename": "doc/adding_lints.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae820924c4f39c5a83287ba1cb6f9af572cabf55/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae820924c4f39c5a83287ba1cb6f9af572cabf55/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=ae820924c4f39c5a83287ba1cb6f9af572cabf55", "patch": "@@ -102,8 +102,8 @@ Please note that, we should run `TESTNAME=foo_functions cargo uitest`\n every time before running `tests/ui/update-all-references.sh`.\n Running `TESTNAME=foo_functions cargo uitest` should pass then. When we commit\n our lint, we need to commit the generated `.stderr` files, too. In general you\n-should only run `tests/ui/update-all-references.sh` for the specific lint you are\n-creating/editing.\n+should only commit changed files by `tests/ui/update-all-references.sh` for the\n+specific lint you are creating/editing.\n \n ## Rustfix tests\n "}]}