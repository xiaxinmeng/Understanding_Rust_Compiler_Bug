{"sha": "84ca0a1cb47f71a43ee16da2f6bc173577b35cb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0Y2EwYTFjYjQ3ZjcxYTQzZWUxNmRhMmY2YmMxNzM1NzdiMzVjYjk=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-07-03T10:35:02Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-10-11T08:43:54Z"}, "message": "Remove most uses of `allow(unions_with_drop_fields)` in tests", "tree": {"sha": "9c46bbf770f30e642b9beafd623ba5d6cd18a9a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c46bbf770f30e642b9beafd623ba5d6cd18a9a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9", "html_url": "https://github.com/rust-lang/rust/commit/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a08841bb075959874e2e29c538150c826a1401a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a08841bb075959874e2e29c538150c826a1401a", "html_url": "https://github.com/rust-lang/rust/commit/0a08841bb075959874e2e29c538150c826a1401a"}], "stats": {"total": 239, "additions": 118, "deletions": 121}, "files": [{"sha": "97c5acf1f72ca42129efce0205612dc331f7719d", "filename": "src/test/ui/associated-type-bounds/union-bounds.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs?ref=84ca0a1cb47f71a43ee16da2f6bc173577b35cb9", "patch": "@@ -3,13 +3,13 @@\n #![feature(associated_type_bounds)]\n #![feature(untagged_unions)]\n \n-#![allow(unions_with_drop_fields, unused_assignments)]\n+#![allow(unused_assignments)]\n \n-trait Tr1 { type As1; }\n-trait Tr2 { type As2; }\n-trait Tr3 { type As3; }\n-trait Tr4<'a> { type As4; }\n-trait Tr5 { type As5; }\n+trait Tr1: Copy { type As1: Copy; }\n+trait Tr2: Copy { type As2: Copy; }\n+trait Tr3: Copy { type As3: Copy; }\n+trait Tr4<'a>: Copy { type As4: Copy; }\n+trait Tr5: Copy { type As5: Copy; }\n \n impl Tr1 for &str { type As1 = bool; }\n impl Tr2 for bool { type As2 = u8; }\n@@ -71,7 +71,8 @@ where\n     let _: &'a T = &x.f0;\n }\n \n-union UnSelf<T> where Self: Tr1<As1: Tr2> {\n+#[derive(Copy, Clone)]\n+union UnSelf<T> where Self: Tr1<As1: Tr2>, T: Copy {\n     f0: T,\n     f1: <Self as Tr1>::As1,\n     f2: <<Self as Tr1>::As1 as Tr2>::As2,"}, {"sha": "29dcbfe9609a0bf59fe36bea428144cc9c9e8fbe", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=84ca0a1cb47f71a43ee16da2f6bc173577b35cb9", "patch": "@@ -8,6 +8,7 @@\n #![feature(slice_patterns)]\n \n use std::cell::{Cell, RefCell};\n+use std::mem::ManuallyDrop;\n use std::ops::Generator;\n use std::panic;\n use std::pin::Pin;\n@@ -152,17 +153,16 @@ fn assignment1(a: &Allocator, c0: bool) {\n     _v = _w;\n }\n \n-#[allow(unions_with_drop_fields)]\n union Boxy<T> {\n-    a: T,\n-    b: T,\n+    a: ManuallyDrop<T>,\n+    b: ManuallyDrop<T>,\n }\n \n fn union1(a: &Allocator) {\n     unsafe {\n-        let mut u = Boxy { a: a.alloc() };\n-        u.b = a.alloc();\n-        drop(u.a);\n+        let mut u = Boxy { a: ManuallyDrop::new(a.alloc()) };\n+        *u.b = a.alloc(); // drops first alloc\n+        drop(ManuallyDrop::into_inner(u.a));\n     }\n }\n "}, {"sha": "ea8a3c177e9d7f77dd202b8dced545200e861400", "filename": "src/test/ui/rfc-2093-infer-outlives/explicit-union.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-union.rs?ref=84ca0a1cb47f71a43ee16da2f6bc173577b35cb9", "patch": "@@ -1,13 +1,12 @@\n #![feature(rustc_attrs)]\n #![feature(untagged_unions)]\n-#![allow(unions_with_drop_fields)]\n \n #[rustc_outlives]\n-union Foo<'b, U> { //~ ERROR rustc_outlives\n+union Foo<'b, U: Copy> { //~ ERROR rustc_outlives\n     bar: Bar<'b, U>\n }\n \n-union Bar<'a, T> where T: 'a {\n+union Bar<'a, T: Copy> where T: 'a {\n     x: &'a (),\n     y: T,\n }"}, {"sha": "0da3cc2ba1b0434c363c2c8503066ef878e03840", "filename": "src/test/ui/rfc-2093-infer-outlives/nested-union.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-union.rs?ref=84ca0a1cb47f71a43ee16da2f6bc173577b35cb9", "patch": "@@ -1,14 +1,13 @@\n #![feature(rustc_attrs)]\n #![feature(untagged_unions)]\n-#![allow(unions_with_drop_fields)]\n \n #[rustc_outlives]\n-union Foo<'a, T> { //~ ERROR rustc_outlives\n+union Foo<'a, T: Copy> { //~ ERROR rustc_outlives\n     field1: Bar<'a, T>\n }\n \n // Type U needs to outlive lifetime 'b\n-union Bar<'b, U> {\n+union Bar<'b, U: Copy> {\n     field2: &'b U\n }\n "}, {"sha": "3b1eb9e1dfa16a86543aad7f17e3126941a65839", "filename": "src/test/ui/self/self-in-typedefs.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Fself%2Fself-in-typedefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Fself%2Fself-in-typedefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-in-typedefs.rs?ref=84ca0a1cb47f71a43ee16da2f6bc173577b35cb9", "patch": "@@ -3,7 +3,8 @@\n #![feature(untagged_unions)]\n \n #![allow(dead_code)]\n-#![allow(unions_with_drop_fields)]\n+\n+use std::mem::ManuallyDrop;\n \n enum A<'a, T: 'a>\n where\n@@ -24,6 +25,14 @@ where\n union C<'a, T: 'a>\n where\n     Self: Send, T: PartialEq<Self>\n+{\n+    foo: &'a Self,\n+    bar: ManuallyDrop<T>,\n+}\n+\n+union D<'a, T: 'a>\n+where\n+    Self: Send, T: PartialEq<Self> + Copy\n {\n     foo: &'a Self,\n     bar: T,"}, {"sha": "edf08e6ca678f13a4340aac6b5afd54052fc8bff", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.rs", "status": "modified", "additions": 50, "deletions": 11, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs?ref=84ca0a1cb47f71a43ee16da2f6bc173577b35cb9", "patch": "@@ -1,51 +1,90 @@\n #![feature(untagged_unions)]\n #![allow(unused)]\n \n-#[allow(unions_with_drop_fields)]\n+use std::ops::{Deref, DerefMut};\n+\n+#[derive(Default)]\n+struct MockBox<T> {\n+    value: [T; 1],\n+}\n+\n+impl<T> MockBox<T> {\n+    fn new(value: T) -> Self { MockBox { value: [value] } }\n+}\n+\n+impl<T> Deref for MockBox<T> {\n+    type Target = T;\n+    fn deref(&self) -> &T { &self.value[0] }\n+}\n+\n+impl<T> DerefMut for MockBox<T> {\n+    fn deref_mut(&mut self) -> &mut T { &mut self.value[0] }\n+}\n+\n+#[derive(Default)]\n+struct MockVec<T> {\n+    value: [T; 0],\n+}\n+\n+impl<T> MockVec<T> {\n+    fn new() -> Self { MockVec { value: [] } }\n+}\n+\n+impl<T> Deref for MockVec<T> {\n+    type Target = [T];\n+    fn deref(&self) -> &[T] { &self.value }\n+}\n+\n+impl<T> DerefMut for MockVec<T> {\n+    fn deref_mut(&mut self) -> &mut [T] { &mut self.value }\n+}\n+\n+\n union U {\n-    x: ((Vec<u8>, Vec<u8>), Vec<u8>),\n-    y: Box<Vec<u8>>,\n+    x: ((MockVec<u8>, MockVec<u8>), MockVec<u8>),\n+    y: MockBox<MockVec<u8>>,\n }\n \n fn use_borrow<T>(_: &T) {}\n \n unsafe fn parent_sibling_borrow() {\n-    let mut u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n+    let mut u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n     let a = &mut u.x.0;\n     let b = &u.y; //~ ERROR cannot borrow `u` (via `u.y`)\n     use_borrow(a);\n }\n \n unsafe fn parent_sibling_move() {\n-    let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n+    let u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n     let a = u.x.0;\n     let b = u.y; //~ ERROR use of moved value: `u`\n }\n \n unsafe fn grandparent_sibling_borrow() {\n-    let mut u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n+    let mut u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n     let a = &mut (u.x.0).0;\n     let b = &u.y; //~ ERROR cannot borrow `u` (via `u.y`)\n     use_borrow(a);\n }\n \n unsafe fn grandparent_sibling_move() {\n-    let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n+    let u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n     let a = (u.x.0).0;\n     let b = u.y; //~ ERROR use of moved value: `u`\n }\n \n unsafe fn deref_sibling_borrow() {\n-    let mut u = U { y: Box::default() };\n+    let mut u = U { y: MockBox::default() };\n     let a = &mut *u.y;\n     let b = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n     use_borrow(a);\n }\n \n unsafe fn deref_sibling_move() {\n-    let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n-    let a = *u.y;\n-    let b = u.x; //~ ERROR use of moved value: `u`\n+    let u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n+    // No way to test deref-move without Box in union\n+    // let a = *u.y;\n+    // let b = u.x; ERROR use of moved value: `u`\n }\n \n "}, {"sha": "1a7a02690d3ea870a265cbd7e04fa258b1bbb84b", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.stderr", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.stderr?ref=84ca0a1cb47f71a43ee16da2f6bc173577b35cb9", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x.0`)\n-  --> $DIR/union-borrow-move-parent-sibling.rs:15:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:54:13\n    |\n LL |     let a = &mut u.x.0;\n    |             ---------- mutable borrow occurs here (via `u.x.0`)\n@@ -11,17 +11,17 @@ LL |     use_borrow(a);\n    = note: `u.y` is a field of the union `U`, so it overlaps the field `u.x.0`\n \n error[E0382]: use of moved value: `u`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:22:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:61:13\n    |\n-LL |     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n+LL |     let u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n    |         - move occurs because `u` has type `U`, which does not implement the `Copy` trait\n LL |     let a = u.x.0;\n    |             ----- value moved here\n LL |     let b = u.y;\n    |             ^^^ value used here after move\n \n error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x.0.0`)\n-  --> $DIR/union-borrow-move-parent-sibling.rs:28:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:67:13\n    |\n LL |     let a = &mut (u.x.0).0;\n    |             -------------- mutable borrow occurs here (via `u.x.0.0`)\n@@ -33,38 +33,28 @@ LL |     use_borrow(a);\n    = note: `u.y` is a field of the union `U`, so it overlaps the field `u.x.0.0`\n \n error[E0382]: use of moved value: `u`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:35:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:74:13\n    |\n-LL |     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n+LL |     let u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n    |         - move occurs because `u` has type `U`, which does not implement the `Copy` trait\n LL |     let a = (u.x.0).0;\n    |             --------- value moved here\n LL |     let b = u.y;\n    |             ^^^ value used here after move\n \n-error[E0502]: cannot borrow `u` (via `u.x`) as immutable because it is also borrowed as mutable (via `*u.y`)\n-  --> $DIR/union-borrow-move-parent-sibling.rs:41:13\n+error[E0502]: cannot borrow `u` (via `u.x`) as immutable because it is also borrowed as mutable (via `u.y`)\n+  --> $DIR/union-borrow-move-parent-sibling.rs:80:13\n    |\n LL |     let a = &mut *u.y;\n-   |             --------- mutable borrow occurs here (via `*u.y`)\n+   |                   --- mutable borrow occurs here (via `u.y`)\n LL |     let b = &u.x;\n-   |             ^^^^ immutable borrow of `u.x` -- which overlaps with `*u.y` -- occurs here\n+   |             ^^^^ immutable borrow of `u.x` -- which overlaps with `u.y` -- occurs here\n LL |     use_borrow(a);\n    |                - mutable borrow later used here\n    |\n-   = note: `u.x` is a field of the union `U`, so it overlaps the field `*u.y`\n+   = note: `u.x` is a field of the union `U`, so it overlaps the field `u.y`\n \n-error[E0382]: use of moved value: `u`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:48:13\n-   |\n-LL |     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n-   |         - move occurs because `u` has type `U`, which does not implement the `Copy` trait\n-LL |     let a = *u.y;\n-   |             ---- value moved here\n-LL |     let b = u.x;\n-   |             ^^^ value used here after move\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0382, E0502.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "b2f7ae679fd6849ec8ee3dae2843bfec8d4ef4ea", "filename": "src/test/ui/union/union-derive-rpass.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Funion%2Funion-derive-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Funion%2Funion-derive-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-rpass.rs?ref=84ca0a1cb47f71a43ee16da2f6bc173577b35cb9", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n-#![allow(unions_with_drop_fields)]\n \n // Some traits can be derived for unions.\n \n@@ -24,11 +23,11 @@ impl PartialEq for U { fn eq(&self, rhs: &Self) -> bool { true } }\n     Copy,\n     Eq\n )]\n-union W<T> {\n+union W<T: Copy> {\n     a: T,\n }\n \n-impl<T> PartialEq for W<T> { fn eq(&self, rhs: &Self) -> bool { true } }\n+impl<T: Copy> PartialEq for W<T> { fn eq(&self, rhs: &Self) -> bool { true } }\n \n fn main() {\n     let u = U { b: 0 };"}, {"sha": "f1511b0a60180c63328642c3325542b916a89b55", "filename": "src/test/ui/union/union-drop-assign.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Funion%2Funion-drop-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Funion%2Funion-drop-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-drop-assign.rs?ref=84ca0a1cb47f71a43ee16da2f6bc173577b35cb9", "patch": "@@ -1,15 +1,16 @@\n // run-pass\n #![allow(unused_assignments)]\n-#![allow(unions_with_drop_fields)]\n \n // Drop works for union itself.\n \n #![feature(untagged_unions)]\n \n+use std::mem::ManuallyDrop;\n+\n struct S;\n \n union U {\n-    a: S\n+    a: ManuallyDrop<S>\n }\n \n impl Drop for S {\n@@ -28,11 +29,11 @@ static mut CHECK: u8 = 0;\n \n fn main() {\n     unsafe {\n-        let mut u = U { a: S };\n+        let mut u = U { a: ManuallyDrop::new(S) };\n         assert_eq!(CHECK, 0);\n-        u = U { a: S };\n+        u = U { a: ManuallyDrop::new(S) };\n         assert_eq!(CHECK, 1); // union itself is assigned, union is dropped, field is not dropped\n-        u.a = S;\n+        *u.a = S;\n         assert_eq!(CHECK, 11); // union field is assigned, field is dropped\n     }\n }"}, {"sha": "daa03ce6b6fd85d47473ca9942124e28cd949cbe", "filename": "src/test/ui/union/union-drop.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Funion%2Funion-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Funion%2Funion-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-drop.rs?ref=84ca0a1cb47f71a43ee16da2f6bc173577b35cb9", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n-#![allow(unions_with_drop_fields)]\n \n // Drop works for union itself.\n \n@@ -21,12 +20,6 @@ union Y {\n     a: S,\n }\n \n-impl Drop for S {\n-    fn drop(&mut self) {\n-        unsafe { CHECK += 10; }\n-    }\n-}\n-\n impl Drop for U {\n     fn drop(&mut self) {\n         unsafe { CHECK += 1; }\n@@ -51,10 +44,10 @@ fn main() {\n         {\n             let w = W { a: S };\n         }\n-        assert_eq!(CHECK, 2); // 2, not 11, dtor of S is not called\n+        assert_eq!(CHECK, 2); // 2, dtor of W is called\n         {\n             let y = Y { a: S };\n         }\n-        assert_eq!(CHECK, 2); // 2, not 12, dtor of S is not called\n+        assert_eq!(CHECK, 2); // 2, dtor of Y is called\n     }\n }"}, {"sha": "5ca3bc0f722c3fcfcdd47f60d9ea6769d1b1a013", "filename": "src/test/ui/union/union-generic-rpass.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Funion%2Funion-generic-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Funion%2Funion-generic-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-generic-rpass.rs?ref=84ca0a1cb47f71a43ee16da2f6bc173577b35cb9", "patch": "@@ -1,30 +1,24 @@\n // run-pass\n #![allow(dead_code)]\n-#![allow(unions_with_drop_fields)]\n \n #![feature(untagged_unions)]\n \n-union MaybeItem<T: Iterator> {\n+union MaybeItem<T: Iterator> where T::Item: Copy {\n     elem: T::Item,\n     none: (),\n }\n \n-union U<A, B> {\n+union U<A, B> where A: Copy, B: Copy {\n     a: A,\n     b: B,\n }\n \n-unsafe fn union_transmute<A, B>(a: A) -> B {\n+unsafe fn union_transmute<A, B>(a: A) -> B where A: Copy, B: Copy {\n     U { a: a }.b\n }\n \n fn main() {\n     unsafe {\n-        let u = U::<String, Vec<u8>> { a: String::from(\"abcd\") };\n-\n-        assert_eq!(u.b.len(), 4);\n-        assert_eq!(u.b[0], b'a');\n-\n         let b = union_transmute::<(u8, u8), u16>((1, 1));\n         assert_eq!(b, (1 << 8) + 1);\n "}, {"sha": "330f6f9593b130f2332b8dc3ff81f7a5b39dbccd", "filename": "src/test/ui/union/union-nodrop.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Funion%2Funion-nodrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Funion%2Funion-nodrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-nodrop.rs?ref=84ca0a1cb47f71a43ee16da2f6bc173577b35cb9", "patch": "@@ -1,12 +1,11 @@\n // run-pass\n \n-#![feature(core_intrinsics)]\n #![feature(untagged_unions)]\n \n-#![allow(unions_with_drop_fields)]\n #![allow(dead_code)]\n \n-use std::intrinsics::needs_drop;\n+use std::mem::needs_drop;\n+use std::mem::ManuallyDrop;\n \n struct NeedDrop;\n \n@@ -16,10 +15,10 @@ impl Drop for NeedDrop {\n \n // Constant expressios allow `NoDrop` to go out of scope,\n // unlike a value of the interior type implementing `Drop`.\n-static X: () = (NoDrop { inner: NeedDrop }, ()).1;\n+static X: () = (NoDrop { inner: ManuallyDrop::new(NeedDrop) }, ()).1;\n \n // A union that scrubs the drop glue from its inner type\n-union NoDrop<T> {inner: T}\n+union NoDrop<T> { inner: ManuallyDrop<T> }\n \n // Copy currently can't be implemented on drop-containing unions,\n // this may change later\n@@ -40,7 +39,7 @@ struct Baz {\n     y: Box<u8>,\n }\n \n-union ActuallyDrop<T> {inner: T}\n+union ActuallyDrop<T> { inner: ManuallyDrop<T> }\n \n impl<T> Drop for ActuallyDrop<T> {\n     fn drop(&mut self) {}"}, {"sha": "8234beb74a8269137568b0d8b63c6575fd61b9a9", "filename": "src/test/ui/union/union-overwrite.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Funion%2Funion-overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ca0a1cb47f71a43ee16da2f6bc173577b35cb9/src%2Ftest%2Fui%2Funion%2Funion-overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-overwrite.rs?ref=84ca0a1cb47f71a43ee16da2f6bc173577b35cb9", "patch": "@@ -1,21 +1,27 @@\n // run-pass\n-#![allow(unions_with_drop_fields)]\n-\n #![feature(untagged_unions)]\n \n #[repr(C)]\n+#[derive(Copy, Clone)]\n struct Pair<T, U>(T, U);\n #[repr(C)]\n+#[derive(Copy, Clone)]\n struct Triple<T>(T, T, T);\n \n #[repr(C)]\n-union U<A, B> {\n+union U<A, B>\n+where\n+    A: Copy, B: Copy\n+{\n     a: Pair<A, A>,\n     b: B,\n }\n \n #[repr(C)]\n-union W<A, B> {\n+union W<A, B>\n+where\n+    A: Copy, B: Copy\n+{\n     a: A,\n     b: B,\n }"}, {"sha": "4dbeb7c1e7e973d3a0b7b3afc99bcf8d01a4af9c", "filename": "src/test/ui/union/union-with-drop-fields-lint-rpass.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0a08841bb075959874e2e29c538150c826a1401a/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields-lint-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08841bb075959874e2e29c538150c826a1401a/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields-lint-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields-lint-rpass.rs?ref=0a08841bb075959874e2e29c538150c826a1401a", "patch": "@@ -1,32 +0,0 @@\n-// run-pass\n-\n-#![feature(untagged_unions)]\n-#![allow(dead_code)]\n-#![allow(unions_with_drop_fields)]\n-\n-union U {\n-    a: u8, // OK\n-}\n-\n-union W {\n-    a: String, // OK\n-    b: String, // OK\n-}\n-\n-struct S(String);\n-\n-// `S` doesn't implement `Drop` trait, but still has non-trivial destructor\n-union Y {\n-    a: S, // OK\n-}\n-\n-// We don't know if `T` is trivially-destructable or not until trans\n-union J<T> {\n-    a: T, // OK\n-}\n-\n-union H<T: Copy> {\n-    a: T, // OK\n-}\n-\n-fn main() {}"}]}