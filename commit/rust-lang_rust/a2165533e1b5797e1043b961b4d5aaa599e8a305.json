{"sha": "a2165533e1b5797e1043b961b4d5aaa599e8a305", "node_id": "C_kwDOAAsO6NoAKGEyMTY1NTMzZTFiNTc5N2UxMDQzYjk2MWI0ZDVhYWE1OTllOGEzMDU", "commit": {"author": {"name": "Elliot Bobrow", "email": "elliotgreybobrow@gmail.com", "date": "2023-03-30T01:19:29Z"}, "committer": {"name": "Elliot Bobrow", "email": "elliotgreybobrow@gmail.com", "date": "2023-03-30T01:19:29Z"}, "message": "fix `single_component_path_imports` FP", "tree": {"sha": "5ccd8905bb91a498f65ceead6f8a5eadb408827a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ccd8905bb91a498f65ceead6f8a5eadb408827a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2165533e1b5797e1043b961b4d5aaa599e8a305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2165533e1b5797e1043b961b4d5aaa599e8a305", "html_url": "https://github.com/rust-lang/rust/commit/a2165533e1b5797e1043b961b4d5aaa599e8a305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2165533e1b5797e1043b961b4d5aaa599e8a305/comments", "author": {"login": "ebobrow", "id": 77182873, "node_id": "MDQ6VXNlcjc3MTgyODcz", "avatar_url": "https://avatars.githubusercontent.com/u/77182873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebobrow", "html_url": "https://github.com/ebobrow", "followers_url": "https://api.github.com/users/ebobrow/followers", "following_url": "https://api.github.com/users/ebobrow/following{/other_user}", "gists_url": "https://api.github.com/users/ebobrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebobrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebobrow/subscriptions", "organizations_url": "https://api.github.com/users/ebobrow/orgs", "repos_url": "https://api.github.com/users/ebobrow/repos", "events_url": "https://api.github.com/users/ebobrow/events{/privacy}", "received_events_url": "https://api.github.com/users/ebobrow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebobrow", "id": 77182873, "node_id": "MDQ6VXNlcjc3MTgyODcz", "avatar_url": "https://avatars.githubusercontent.com/u/77182873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebobrow", "html_url": "https://github.com/ebobrow", "followers_url": "https://api.github.com/users/ebobrow/followers", "following_url": "https://api.github.com/users/ebobrow/following{/other_user}", "gists_url": "https://api.github.com/users/ebobrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebobrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebobrow/subscriptions", "organizations_url": "https://api.github.com/users/ebobrow/orgs", "repos_url": "https://api.github.com/users/ebobrow/repos", "events_url": "https://api.github.com/users/ebobrow/events{/privacy}", "received_events_url": "https://api.github.com/users/ebobrow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5011e9d42b9bcedf0753a108018618568700a83", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5011e9d42b9bcedf0753a108018618568700a83", "html_url": "https://github.com/rust-lang/rust/commit/c5011e9d42b9bcedf0753a108018618568700a83"}], "stats": {"total": 75, "additions": 60, "deletions": 15}, "files": [{"sha": "5743dd21c2835299e68ce6d397155da193de94e4", "filename": "clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 46, "deletions": 13, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a2165533e1b5797e1043b961b4d5aaa599e8a305/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2165533e1b5797e1043b961b4d5aaa599e8a305/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=a2165533e1b5797e1043b961b4d5aaa599e8a305", "patch": "@@ -1,6 +1,7 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n use rustc_ast::node_id::{NodeId, NodeMap};\n-use rustc_ast::{ptr::P, Crate, Item, ItemKind, MacroDef, ModKind, UseTreeKind};\n+use rustc_ast::visit::{walk_expr, Visitor};\n+use rustc_ast::{ptr::P, Crate, Expr, ExprKind, Item, ItemKind, MacroDef, ModKind, Ty, TyKind, UseTreeKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -55,7 +56,7 @@ impl EarlyLintPass for SingleComponentPathImports {\n             return;\n         }\n \n-        self.check_mod(cx, &krate.items);\n+        self.check_mod(&krate.items);\n     }\n \n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n@@ -84,8 +85,43 @@ impl EarlyLintPass for SingleComponentPathImports {\n     }\n }\n \n+#[derive(Default)]\n+struct ImportUsageVisitor {\n+    // keep track of imports reused with `self` keyword, such as `self::std` in the example below.\n+    // Removing the `use std;` would make this a compile error (#10549)\n+    // ```\n+    // use std;\n+    //\n+    // fn main() {\n+    //     let _ = self::std::io::stdout();\n+    // }\n+    // ```\n+    imports_referenced_with_self: Vec<Symbol>,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for ImportUsageVisitor {\n+    fn visit_expr(&mut self, expr: &Expr) {\n+        if let ExprKind::Path(_, path) = &expr.kind\n+            && path.segments.len() > 1\n+            && path.segments[0].ident.name == kw::SelfLower\n+        {\n+            self.imports_referenced_with_self.push(path.segments[1].ident.name);\n+        }\n+        walk_expr(self, expr);\n+    }\n+\n+    fn visit_ty(&mut self, ty: &Ty) {\n+        if let TyKind::Path(_, path) = &ty.kind\n+            && path.segments.len() > 1\n+            && path.segments[0].ident.name == kw::SelfLower\n+        {\n+            self.imports_referenced_with_self.push(path.segments[1].ident.name);\n+        }\n+    }\n+}\n+\n impl SingleComponentPathImports {\n-    fn check_mod(&mut self, cx: &EarlyContext<'_>, items: &[P<Item>]) {\n+    fn check_mod(&mut self, items: &[P<Item>]) {\n         // keep track of imports reused with `self` keyword, such as `self::crypto_hash` in the example\n         // below. Removing the `use crypto_hash;` would make this a compile error\n         // ```\n@@ -108,26 +144,23 @@ impl SingleComponentPathImports {\n         // ```\n         let mut macros = Vec::new();\n \n+        let mut import_usage_visitor = ImportUsageVisitor::default();\n         for item in items {\n-            self.track_uses(\n-                cx,\n-                item,\n-                &mut imports_reused_with_self,\n-                &mut single_use_usages,\n-                &mut macros,\n-            );\n+            self.track_uses(item, &mut imports_reused_with_self, &mut single_use_usages, &mut macros);\n+            import_usage_visitor.visit_item(item);\n         }\n \n         for usage in single_use_usages {\n-            if !imports_reused_with_self.contains(&usage.name) {\n+            if !imports_reused_with_self.contains(&usage.name)\n+                && !import_usage_visitor.imports_referenced_with_self.contains(&usage.name)\n+            {\n                 self.found.entry(usage.item_id).or_default().push(usage);\n             }\n         }\n     }\n \n     fn track_uses(\n         &mut self,\n-        cx: &EarlyContext<'_>,\n         item: &Item,\n         imports_reused_with_self: &mut Vec<Symbol>,\n         single_use_usages: &mut Vec<SingleUse>,\n@@ -139,7 +172,7 @@ impl SingleComponentPathImports {\n \n         match &item.kind {\n             ItemKind::Mod(_, ModKind::Loaded(ref items, ..)) => {\n-                self.check_mod(cx, items);\n+                self.check_mod(items);\n             },\n             ItemKind::MacroDef(MacroDef { macro_rules: true, .. }) => {\n                 macros.push(item.ident.name);"}, {"sha": "8c96c4715d308a08a00f0d2cfd39ce3f79b5f6ac", "filename": "tests/ui/single_component_path_imports.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2165533e1b5797e1043b961b4d5aaa599e8a305/tests%2Fui%2Fsingle_component_path_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a2165533e1b5797e1043b961b4d5aaa599e8a305/tests%2Fui%2Fsingle_component_path_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports.fixed?ref=a2165533e1b5797e1043b961b4d5aaa599e8a305", "patch": "@@ -2,9 +2,11 @@\n #![warn(clippy::single_component_path_imports)]\n #![allow(unused_imports)]\n \n+use core;\n \n use serde as edres;\n pub use serde;\n+use std;\n \n macro_rules! m {\n     () => {\n@@ -17,6 +19,10 @@ fn main() {\n \n     // False positive #5154, shouldn't trigger lint.\n     m!();\n+\n+    // False positive #10549\n+    let _ = self::std::io::stdout();\n+    let _ = 0 as self::core::ffi::c_uint;\n }\n \n mod hello_mod {"}, {"sha": "8434bf7eaf1f55596e56880202a20989e689fda4", "filename": "tests/ui/single_component_path_imports.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2165533e1b5797e1043b961b4d5aaa599e8a305/tests%2Fui%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2165533e1b5797e1043b961b4d5aaa599e8a305/tests%2Fui%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports.rs?ref=a2165533e1b5797e1043b961b4d5aaa599e8a305", "patch": "@@ -2,9 +2,11 @@\n #![warn(clippy::single_component_path_imports)]\n #![allow(unused_imports)]\n \n+use core;\n use regex;\n use serde as edres;\n pub use serde;\n+use std;\n \n macro_rules! m {\n     () => {\n@@ -17,6 +19,10 @@ fn main() {\n \n     // False positive #5154, shouldn't trigger lint.\n     m!();\n+\n+    // False positive #10549\n+    let _ = self::std::io::stdout();\n+    let _ = 0 as self::core::ffi::c_uint;\n }\n \n mod hello_mod {"}, {"sha": "d69a86470a5e5de43cc686ed8a0bf059e8e9dcb7", "filename": "tests/ui/single_component_path_imports.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2165533e1b5797e1043b961b4d5aaa599e8a305/tests%2Fui%2Fsingle_component_path_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2165533e1b5797e1043b961b4d5aaa599e8a305/tests%2Fui%2Fsingle_component_path_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports.stderr?ref=a2165533e1b5797e1043b961b4d5aaa599e8a305", "patch": "@@ -1,13 +1,13 @@\n error: this import is redundant\n-  --> $DIR/single_component_path_imports.rs:5:1\n+  --> $DIR/single_component_path_imports.rs:6:1\n    |\n LL | use regex;\n    | ^^^^^^^^^^ help: remove it entirely\n    |\n    = note: `-D clippy::single-component-path-imports` implied by `-D warnings`\n \n error: this import is redundant\n-  --> $DIR/single_component_path_imports.rs:23:5\n+  --> $DIR/single_component_path_imports.rs:29:5\n    |\n LL |     use regex;\n    |     ^^^^^^^^^^ help: remove it entirely"}]}