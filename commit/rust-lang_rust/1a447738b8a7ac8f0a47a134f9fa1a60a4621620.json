{"sha": "1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNDQ3NzM4YjhhN2FjOGYwYTQ3YTEzNGY5ZmExYTYwYTQ2MjE2MjA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-13T00:34:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-15T17:41:45Z"}, "message": "hygiene: Merge `ExpnInfo` and `InternalExpnData`", "tree": {"sha": "8191446f5bf325a273c0451a4ab8f531fbe50986", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8191446f5bf325a273c0451a4ab8f531fbe50986"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "html_url": "https://github.com/rust-lang/rust/commit/1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aca1353240e03eaba4b3540e1c7b3dea99d5c8ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/aca1353240e03eaba4b3540e1c7b3dea99d5c8ac", "html_url": "https://github.com/rust-lang/rust/commit/aca1353240e03eaba4b3540e1c7b3dea99d5c8ac"}], "stats": {"total": 134, "additions": 67, "deletions": 67}, "files": [{"sha": "0b7dacf8383e84c75512b04215a986f810cd903d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "patch": "@@ -704,7 +704,7 @@ impl<'a> LoweringContext<'a> {\n         span: Span,\n         allow_internal_unstable: Option<Lrc<[Symbol]>>,\n     ) -> Span {\n-        span.fresh_expansion(ExpnId::root(), ExpnInfo {\n+        span.fresh_expansion(ExpnInfo {\n             def_site: span,\n             allow_internal_unstable,\n             ..ExpnInfo::default(ExpnKind::Desugaring(reason), span, self.sess.edition())"}, {"sha": "22e2cff359520f8828fe3d47d993107c4c7a8b18", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "patch": "@@ -398,8 +398,9 @@ impl_stable_hash_for!(enum ::syntax_pos::hygiene::Transparency {\n });\n \n impl_stable_hash_for!(struct ::syntax_pos::hygiene::ExpnInfo {\n-    call_site,\n     kind,\n+    parent -> _,\n+    call_site,\n     def_site,\n     default_transparency,\n     allow_internal_unstable,"}, {"sha": "351b9988bb25c3603cda821213c921e0a9703eac", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "patch": "@@ -588,13 +588,13 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for CacheDecoder<'a, 'tcx> {\n \n         let expn_info_tag = u8::decode(self)?;\n \n-        // FIXME(mw): This method does not restore `InternalExpnData::parent` or\n+        // FIXME(mw): This method does not restore `ExpnInfo::parent` or\n         // `SyntaxContextData::prev_ctxt` or `SyntaxContextData::opaque`. These things\n         // don't seem to be used after HIR lowering, so everything should be fine\n         // as long as incremental compilation does not kick in before that.\n         let location = || Span::with_root_ctxt(lo, hi);\n         let recover_from_expn_info = |this: &Self, expn_info, pos| {\n-            let span = location().fresh_expansion(ExpnId::root(), expn_info);\n+            let span = location().fresh_expansion(expn_info);\n             this.synthetic_expansion_infos.borrow_mut().insert(pos, span.ctxt());\n             span\n         };"}, {"sha": "58e785ab8c25327d9522fae60ba7ccfa851e13b7", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "patch": "@@ -97,7 +97,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n     }\n \n     fn get_module_scope(&mut self, id: ast::NodeId) -> ExpnId {\n-        let expn_id = ExpnId::fresh(ExpnId::root(), Some(ExpnInfo::default(\n+        let expn_id = ExpnId::fresh(Some(ExpnInfo::default(\n             ExpnKind::Macro(MacroKind::Attr, sym::test_case), DUMMY_SP, self.session.edition()\n         )));\n         let module = self.module_map[&self.definitions.local_def_id(id)];\n@@ -120,7 +120,8 @@ impl<'a> base::Resolver for Resolver<'a> {\n         &mut self, expansion: ExpnId, fragment: &AstFragment, derives: &[ExpnId]\n     ) {\n         // Fill in some data for derives if the fragment is from a derive container.\n-        let parent_scope = self.invocation_parent_scopes[&expansion];\n+        // We are inside the `expansion` now, but other parent scope components are still the same.\n+        let parent_scope = ParentScope { expansion, ..self.invocation_parent_scopes[&expansion] };\n         let parent_def = self.definitions.invocation_parent(expansion);\n         self.invocation_parent_scopes.extend(derives.iter().map(|&derive| (derive, parent_scope)));\n         for &derive_invoc_id in derives {\n@@ -130,9 +131,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         parent_scope.module.unresolved_invocations.borrow_mut().extend(derives);\n \n         // Integrate the new AST fragment into all the definition and module structures.\n-        // We are inside the `expansion` new, but other parent scope components are still the same.\n         fragment.visit_with(&mut DefCollector::new(&mut self.definitions, expansion));\n-        let parent_scope = ParentScope { expansion, ..parent_scope };\n         let output_legacy_scope = self.build_reduced_graph(fragment, parent_scope);\n         self.output_legacy_scopes.insert(expansion, output_legacy_scope);\n     }\n@@ -186,7 +185,9 @@ impl<'a> base::Resolver for Resolver<'a> {\n         let (ext, res) = self.smart_resolve_macro_path(path, kind, parent_scope, force)?;\n \n         let span = invoc.span();\n-        invoc.expansion_data.id.set_expn_info(ext.expn_info(span, fast_print_path(path)));\n+        invoc.expansion_data.id.set_expn_info(\n+            ext.expn_info(parent_scope.expansion, span, fast_print_path(path))\n+        );\n \n         if let Res::Def(_, def_id) = res {\n             if after_derive {"}, {"sha": "734b566b3ad1d5bd820aacc6aabd5612800d8393", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "patch": "@@ -640,10 +640,11 @@ impl SyntaxExtension {\n         SyntaxExtension::default(SyntaxExtensionKind::NonMacroAttr { mark_used }, edition)\n     }\n \n-    pub fn expn_info(&self, call_site: Span, descr: Symbol) -> ExpnInfo {\n+    pub fn expn_info(&self, parent: ExpnId, call_site: Span, descr: Symbol) -> ExpnInfo {\n         ExpnInfo {\n-            call_site,\n             kind: ExpnKind::Macro(self.macro_kind(), descr),\n+            parent,\n+            call_site,\n             def_site: self.span,\n             default_transparency: self.default_transparency,\n             allow_internal_unstable: self.allow_internal_unstable.clone(),"}, {"sha": "4233d5c0a222efcafb6a5ee64bce52362832235e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "patch": "@@ -353,7 +353,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 derives.reserve(traits.len());\n                 invocations.reserve(traits.len());\n                 for path in traits {\n-                    let expn_id = ExpnId::fresh(self.cx.current_expansion.id, None);\n+                    let expn_id = ExpnId::fresh(None);\n                     derives.push(expn_id);\n                     invocations.push(Invocation {\n                         kind: InvocationKind::Derive { path, item: item.clone() },\n@@ -800,13 +800,16 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         // with exception of the derive container case which is not resolved and can get\n         // its expansion info immediately.\n         let expn_info = match &kind {\n-            InvocationKind::DeriveContainer { item, .. } => Some(ExpnInfo::default(\n-                ExpnKind::Macro(MacroKind::Attr, sym::derive),\n-                item.span(), self.cx.parse_sess.edition,\n-            )),\n+            InvocationKind::DeriveContainer { item, .. } => Some(ExpnInfo {\n+                parent: self.cx.current_expansion.id,\n+                ..ExpnInfo::default(\n+                    ExpnKind::Macro(MacroKind::Attr, sym::derive),\n+                    item.span(), self.cx.parse_sess.edition,\n+                )\n+            }),\n             _ => None,\n         };\n-        let expn_id = ExpnId::fresh(self.cx.current_expansion.id, expn_info);\n+        let expn_id = ExpnId::fresh(expn_info);\n         self.invocations.push(Invocation {\n             kind,\n             fragment_kind,"}, {"sha": "73df625d5ee60eb2f99ed220a203d2512be06558", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "patch": "@@ -35,7 +35,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt<'_>,\n             match annitem.node {\n                 ItemKind::Struct(_, Generics { ref params, .. }) |\n                 ItemKind::Enum(_, Generics { ref params, .. }) => {\n-                    let container_id = cx.current_expansion.id.parent();\n+                    let container_id = cx.current_expansion.id.expn_info().parent;\n                     if cx.resolver.has_derives(container_id, SpecialDerives::COPY) &&\n                         !params.iter().any(|param| match param.kind {\n                             ast::GenericParamKind::Type { .. } => true,"}, {"sha": "1ef34a680041415e101b17f1035968500c62cd2a", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "patch": "@@ -13,7 +13,7 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt<'_>,\n                           mitem: &MetaItem,\n                           item: &Annotatable,\n                           push: &mut dyn FnMut(Annotatable)) {\n-    cx.resolver.add_derives(cx.current_expansion.id.parent(), SpecialDerives::EQ);\n+    cx.resolver.add_derives(cx.current_expansion.id.expn_info().parent, SpecialDerives::EQ);\n \n     let inline = cx.meta_word(span, sym::inline);\n     let hidden = cx.meta_list_item_word(span, sym::hidden);"}, {"sha": "76befc98591ef4bea4f25b0eb73f7022f3db324e", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "patch": "@@ -13,7 +13,7 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt<'_>,\n                                   mitem: &MetaItem,\n                                   item: &Annotatable,\n                                   push: &mut dyn FnMut(Annotatable)) {\n-    cx.resolver.add_derives(cx.current_expansion.id.parent(), SpecialDerives::PARTIAL_EQ);\n+    cx.resolver.add_derives(cx.current_expansion.id.expn_info().parent, SpecialDerives::PARTIAL_EQ);\n \n     // structures are equal if all fields are equal, and non equal, if\n     // any fields are not equal or if the enum variants are different"}, {"sha": "6b739e27eee8992c93ce2d7048880bdf16bd3cc3", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "patch": "@@ -425,7 +425,7 @@ impl<'a> TraitDef<'a> {\n                         return;\n                     }\n                 };\n-                let container_id = cx.current_expansion.id.parent();\n+                let container_id = cx.current_expansion.id.expn_info().parent;\n                 let is_always_copy =\n                     cx.resolver.has_derives(container_id, SpecialDerives::COPY) &&\n                     has_no_type_params;"}, {"sha": "b34a250881a314938eed3ead5a394ed2b8dec304", "filename": "src/libsyntax_ext/plugin_macro_defs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_ext%2Fplugin_macro_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_ext%2Fplugin_macro_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fplugin_macro_defs.rs?ref=1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "patch": "@@ -11,7 +11,7 @@ use syntax::source_map::respan;\n use syntax::symbol::sym;\n use syntax::tokenstream::*;\n use syntax_pos::{Span, DUMMY_SP};\n-use syntax_pos::hygiene::{ExpnId, ExpnInfo, ExpnKind, MacroKind};\n+use syntax_pos::hygiene::{ExpnInfo, ExpnKind, MacroKind};\n \n use std::mem;\n \n@@ -43,7 +43,7 @@ pub fn inject(\n ) {\n     if !named_exts.is_empty() {\n         let mut extra_items = Vec::new();\n-        let span = DUMMY_SP.fresh_expansion(ExpnId::root(), ExpnInfo::allow_unstable(\n+        let span = DUMMY_SP.fresh_expansion(ExpnInfo::allow_unstable(\n             ExpnKind::Macro(MacroKind::Attr, sym::plugin), DUMMY_SP, edition,\n             [sym::rustc_attrs][..].into(),\n         ));"}, {"sha": "9d8a8c17ba2d8ccefd638d06a923b799d8cc1eec", "filename": "src/libsyntax_ext/proc_macro_harness.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_harness.rs?ref=1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "patch": "@@ -6,7 +6,6 @@ use syntax::attr;\n use syntax::source_map::{ExpnInfo, ExpnKind, respan};\n use syntax::ext::base::{ExtCtxt, MacroKind};\n use syntax::ext::expand::{AstFragment, ExpansionConfig};\n-use syntax::ext::hygiene::ExpnId;\n use syntax::ext::proc_macro::is_proc_macro_attr;\n use syntax::parse::ParseSess;\n use syntax::ptr::P;\n@@ -328,7 +327,7 @@ fn mk_decls(\n     custom_attrs: &[ProcMacroDef],\n     custom_macros: &[ProcMacroDef],\n ) -> P<ast::Item> {\n-    let span = DUMMY_SP.fresh_expansion(ExpnId::root(), ExpnInfo::allow_unstable(\n+    let span = DUMMY_SP.fresh_expansion(ExpnInfo::allow_unstable(\n         ExpnKind::Macro(MacroKind::Attr, sym::proc_macro), DUMMY_SP, cx.parse_sess.edition,\n         [sym::rustc_attrs, sym::proc_macro_internals][..].into(),\n     ));"}, {"sha": "c004124865223df761c3d78511e377fcd0122fa8", "filename": "src/libsyntax_ext/standard_library_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_ext%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_ext%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fstandard_library_imports.rs?ref=1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "patch": "@@ -1,6 +1,6 @@\n use syntax::{ast, attr};\n use syntax::edition::Edition;\n-use syntax::ext::hygiene::{ExpnId, MacroKind};\n+use syntax::ext::hygiene::MacroKind;\n use syntax::ptr::P;\n use syntax::source_map::{ExpnInfo, ExpnKind, dummy_spanned, respan};\n use syntax::symbol::{Ident, Symbol, kw, sym};\n@@ -55,7 +55,7 @@ pub fn inject(\n     // the prelude.\n     let name = names[0];\n \n-    let span = DUMMY_SP.fresh_expansion(ExpnId::root(), ExpnInfo::allow_unstable(\n+    let span = DUMMY_SP.fresh_expansion(ExpnInfo::allow_unstable(\n         ExpnKind::Macro(MacroKind::Attr, sym::std_inject), DUMMY_SP, edition,\n         [sym::prelude_import][..].into(),\n     ));"}, {"sha": "3fb1c1bd02240833f1f5b04ab1e673186da91229", "filename": "src/libsyntax_ext/test_harness.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_ext%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_ext%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_harness.rs?ref=1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "patch": "@@ -5,9 +5,8 @@ use smallvec::{smallvec, SmallVec};\n use syntax::ast::{self, Ident};\n use syntax::attr;\n use syntax::entry::{self, EntryPointType};\n-use syntax::ext::base::{ExtCtxt, Resolver};\n+use syntax::ext::base::{ExtCtxt, MacroKind, Resolver};\n use syntax::ext::expand::{AstFragment, ExpansionConfig};\n-use syntax::ext::hygiene::{ExpnId, MacroKind};\n use syntax::feature_gate::Features;\n use syntax::mut_visit::{*, ExpectOne};\n use syntax::parse::ParseSess;\n@@ -269,7 +268,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n     //            #![main]\n     //            test::test_main_static(&[..tests]);\n     //        }\n-    let sp = DUMMY_SP.fresh_expansion(ExpnId::root(), ExpnInfo::allow_unstable(\n+    let sp = DUMMY_SP.fresh_expansion(ExpnInfo::allow_unstable(\n         ExpnKind::Macro(MacroKind::Attr, sym::test_case), DUMMY_SP, cx.ext_cx.parse_sess.edition,\n         [sym::main, sym::test, sym::rustc_attrs][..].into(),\n     ));"}, {"sha": "1dba466625ae8ee7fc90b45729bf30304bd4f883", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 33, "deletions": 37, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a447738b8a7ac8f0a47a134f9fa1a60a4621620/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "patch": "@@ -56,16 +56,6 @@ struct SyntaxContextData {\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub struct ExpnId(u32);\n \n-// FIXME: Find a way to merge this with `ExpnInfo`.\n-#[derive(Debug)]\n-struct InternalExpnData {\n-    parent: ExpnId,\n-    /// Each expansion should have an associated expansion info, but sometimes there's a delay\n-    /// between creation of an expansion ID and obtaining its info (e.g. macros are collected\n-    /// first and then resolved later), so we use an `Option` here.\n-    expn_info: Option<ExpnInfo>,\n-}\n-\n /// A property of a macro expansion that determines how identifiers\n /// produced by that expansion are resolved.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Hash, Debug, RustcEncodable, RustcDecodable)]\n@@ -86,8 +76,8 @@ pub enum Transparency {\n }\n \n impl ExpnId {\n-    pub fn fresh(parent: ExpnId, expn_info: Option<ExpnInfo>) -> Self {\n-        HygieneData::with(|data| data.fresh_expn(parent, expn_info))\n+    pub fn fresh(expn_info: Option<ExpnInfo>) -> Self {\n+        HygieneData::with(|data| data.fresh_expn(expn_info))\n     }\n \n     /// The ID of the theoretical expansion that generates freshly parsed, unexpanded AST.\n@@ -106,11 +96,6 @@ impl ExpnId {\n         ExpnId(raw)\n     }\n \n-    #[inline]\n-    pub fn parent(self) -> ExpnId {\n-        HygieneData::with(|data| data.parent_expn(self))\n-    }\n-\n     #[inline]\n     pub fn expn_info(self) -> ExpnInfo {\n         HygieneData::with(|data| data.expn_info(self).clone())\n@@ -119,7 +104,7 @@ impl ExpnId {\n     #[inline]\n     pub fn set_expn_info(self, info: ExpnInfo) {\n         HygieneData::with(|data| {\n-            let old_info = &mut data.expn_data[self.0 as usize].expn_info;\n+            let old_info = &mut data.expn_data[self.0 as usize];\n             assert!(old_info.is_none(), \"expansion info is reset for an expansion ID\");\n             *old_info = Some(info);\n         })\n@@ -150,18 +135,18 @@ impl ExpnId {\n \n #[derive(Debug)]\n crate struct HygieneData {\n-    expn_data: Vec<InternalExpnData>,\n+    /// Each expansion should have an associated expansion info, but sometimes there's a delay\n+    /// between creation of an expansion ID and obtaining its info (e.g. macros are collected\n+    /// first and then resolved later), so we use an `Option` here.\n+    expn_data: Vec<Option<ExpnInfo>>,\n     syntax_context_data: Vec<SyntaxContextData>,\n     syntax_context_map: FxHashMap<(SyntaxContext, ExpnId, Transparency), SyntaxContext>,\n }\n \n impl HygieneData {\n     crate fn new(edition: Edition) -> Self {\n         HygieneData {\n-            expn_data: vec![InternalExpnData {\n-                parent: ExpnId::root(),\n-                expn_info: Some(ExpnInfo::default(ExpnKind::Root, DUMMY_SP, edition)),\n-            }],\n+            expn_data: vec![Some(ExpnInfo::default(ExpnKind::Root, DUMMY_SP, edition))],\n             syntax_context_data: vec![SyntaxContextData {\n                 outer_expn: ExpnId::root(),\n                 outer_transparency: Transparency::Opaque,\n@@ -178,17 +163,13 @@ impl HygieneData {\n         GLOBALS.with(|globals| f(&mut *globals.hygiene_data.borrow_mut()))\n     }\n \n-    fn fresh_expn(&mut self, parent: ExpnId, expn_info: Option<ExpnInfo>) -> ExpnId {\n-        self.expn_data.push(InternalExpnData { parent, expn_info });\n+    fn fresh_expn(&mut self, expn_info: Option<ExpnInfo>) -> ExpnId {\n+        self.expn_data.push(expn_info);\n         ExpnId(self.expn_data.len() as u32 - 1)\n     }\n \n-    fn parent_expn(&self, expn_id: ExpnId) -> ExpnId {\n-        self.expn_data[expn_id.0 as usize].parent\n-    }\n-\n     fn expn_info(&self, expn_id: ExpnId) -> &ExpnInfo {\n-        self.expn_data[expn_id.0 as usize].expn_info.as_ref()\n+        self.expn_data[expn_id.0 as usize].as_ref()\n             .expect(\"no expansion info for an expansion ID\")\n     }\n \n@@ -197,7 +178,7 @@ impl HygieneData {\n             if expn_id == ExpnId::root() {\n                 return false;\n             }\n-            expn_id = self.parent_expn(expn_id);\n+            expn_id = self.expn_info(expn_id).parent;\n         }\n         true\n     }\n@@ -593,9 +574,9 @@ impl Span {\n     /// other compiler-generated code to set per-span properties like allowed unstable features.\n     /// The returned span belongs to the created expansion and has the new properties,\n     /// but its location is inherited from the current span.\n-    pub fn fresh_expansion(self, parent: ExpnId, expn_info: ExpnInfo) -> Span {\n+    pub fn fresh_expansion(self, expn_info: ExpnInfo) -> Span {\n         HygieneData::with(|data| {\n-            let expn_id = data.fresh_expn(parent, Some(expn_info));\n+            let expn_id = data.fresh_expn(Some(expn_info));\n             self.with_ctxt(data.apply_mark(SyntaxContext::root(), expn_id))\n         })\n     }\n@@ -606,6 +587,10 @@ impl Span {\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct ExpnInfo {\n     // --- The part unique to each expansion.\n+    /// The kind of this expansion - macro or compiler desugaring.\n+    pub kind: ExpnKind,\n+    /// The expansion that produced this expansion.\n+    pub parent: ExpnId,\n     /// The location of the actual macro invocation or syntax sugar , e.g.\n     /// `let x = foo!();` or `if let Some(y) = x {}`\n     ///\n@@ -616,8 +601,6 @@ pub struct ExpnInfo {\n     /// call_site span would have its own ExpnInfo, with the call_site\n     /// pointing to the `foo!` invocation.\n     pub call_site: Span,\n-    /// The kind of this expansion - macro or compiler desugaring.\n-    pub kind: ExpnKind,\n \n     // --- The part specific to the macro/desugaring definition.\n     // --- FIXME: Share it between expansions with the same definition.\n@@ -644,8 +627,9 @@ impl ExpnInfo {\n     /// Constructs an expansion info with default properties.\n     pub fn default(kind: ExpnKind, call_site: Span, edition: Edition) -> ExpnInfo {\n         ExpnInfo {\n-            call_site,\n             kind,\n+            parent: ExpnId::root(),\n+            call_site,\n             def_site: DUMMY_SP,\n             default_transparency: Transparency::SemiTransparent,\n             allow_internal_unstable: None,\n@@ -753,14 +737,26 @@ impl DesugaringKind {\n     }\n }\n \n+impl Encodable for ExpnId {\n+    fn encode<E: Encoder>(&self, _: &mut E) -> Result<(), E::Error> {\n+        Ok(()) // FIXME(jseyfried) intercrate hygiene\n+    }\n+}\n+\n+impl Decodable for ExpnId {\n+    fn decode<D: Decoder>(_: &mut D) -> Result<Self, D::Error> {\n+        Ok(ExpnId::root()) // FIXME(jseyfried) intercrate hygiene\n+    }\n+}\n+\n impl Encodable for SyntaxContext {\n     fn encode<E: Encoder>(&self, _: &mut E) -> Result<(), E::Error> {\n         Ok(()) // FIXME(jseyfried) intercrate hygiene\n     }\n }\n \n impl Decodable for SyntaxContext {\n-    fn decode<D: Decoder>(_: &mut D) -> Result<SyntaxContext, D::Error> {\n+    fn decode<D: Decoder>(_: &mut D) -> Result<Self, D::Error> {\n         Ok(SyntaxContext::root()) // FIXME(jseyfried) intercrate hygiene\n     }\n }"}]}