{"sha": "570b9635354c8d41711f464bcaeb6a7128d1cc2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MGI5NjM1MzU0YzhkNDE3MTFmNDY0YmNhZWI2YTcxMjhkMWNjMmE=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-15T12:44:59Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-15T12:44:59Z"}, "message": "Replace potentially ICEgen ast_ty_to_ty_cache", "tree": {"sha": "741a8b054f7c4a1e9c394520ea4b7efef4ee290a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/741a8b054f7c4a1e9c394520ea4b7efef4ee290a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/570b9635354c8d41711f464bcaeb6a7128d1cc2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/570b9635354c8d41711f464bcaeb6a7128d1cc2a", "html_url": "https://github.com/rust-lang/rust/commit/570b9635354c8d41711f464bcaeb6a7128d1cc2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/570b9635354c8d41711f464bcaeb6a7128d1cc2a/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d755b1ebe2204b93c8ab82c6c04699a9e20921f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d755b1ebe2204b93c8ab82c6c04699a9e20921f5", "html_url": "https://github.com/rust-lang/rust/commit/d755b1ebe2204b93c8ab82c6c04699a9e20921f5"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "b71d2ffd7a22104d0aedc9c85b58785a55a17217", "filename": "src/methods.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/570b9635354c8d41711f464bcaeb6a7128d1cc2a/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/570b9635354c8d41711f464bcaeb6a7128d1cc2a/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=570b9635354c8d41711f464bcaeb6a7128d1cc2a", "patch": "@@ -366,7 +366,7 @@ impl LateLintPass for MethodsPass {\n             return;\n         }\n \n-        if let ItemImpl(_, _, _, None, ref ty, ref items) = item.node {\n+        if let ItemImpl(_, _, _, None, _, ref items) = item.node {\n             for implitem in items {\n                 let name = implitem.name;\n                 if let ImplItemKind::Method(ref sig, _) = implitem.node {\n@@ -387,6 +387,7 @@ impl LateLintPass for MethodsPass {\n                     }\n \n                     // check conventions w.r.t. conversion method names and predicates\n+                    let ty = cx.tcx.lookup_item_type(cx.tcx.map.local_def_id(item.id)).ty;\n                     let is_copy = is_copy(cx, &ty, &item);\n                     for &(ref conv, self_kinds) in &CONVENTIONS {\n                         if conv.check(&name.as_str()) &&\n@@ -412,12 +413,13 @@ impl LateLintPass for MethodsPass {\n                     if &name.as_str() == &\"new\" {\n                         let returns_self = if let FunctionRetTy::Return(ref ret_ty) = sig.decl.output {\n                             let ast_ty_to_ty_cache = cx.tcx.ast_ty_to_ty_cache.borrow();\n-                            let ty = ast_ty_to_ty_cache.get(&ty.id);\n                             let ret_ty = ast_ty_to_ty_cache.get(&ret_ty.id);\n \n-                            match (ty, ret_ty) {\n-                                (Some(&ty), Some(&ret_ty)) => ret_ty.walk().any(|t| t == ty),\n-                                _ => false,\n+                            if let Some(&ret_ty) = ret_ty {\n+                                ret_ty.walk().any(|t| t == ty)\n+                            }\n+                            else {\n+                                false\n                             }\n                         }\n                         else {\n@@ -983,12 +985,7 @@ fn is_bool(ty: &Ty) -> bool {\n     false\n }\n \n-fn is_copy(cx: &LateContext, ast_ty: &Ty, item: &Item) -> bool {\n-    match cx.tcx.ast_ty_to_ty_cache.borrow().get(&ast_ty.id) {\n-        None => false,\n-        Some(ty) => {\n-            let env = ty::ParameterEnvironment::for_item(cx.tcx, item.id);\n-            !ty.subst(cx.tcx, &env.free_substs).moves_by_default(&env, ast_ty.span)\n-        }\n-    }\n+fn is_copy<'a, 'ctx>(cx: &LateContext<'a, 'ctx>, ty: ty::Ty<'ctx>, item: &Item) -> bool {\n+    let env = ty::ParameterEnvironment::for_item(cx.tcx, item.id);\n+    !ty.subst(cx.tcx, &env.free_substs).moves_by_default(&env, item.span)\n }"}]}