{"sha": "dd0a766e06fc553a0321fb04eb51910bfd2c7097", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMGE3NjZlMDZmYzU1M2EwMzIxZmIwNGViNTE5MTBiZmQyYzcwOTc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-08-11T11:33:43Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-08-12T19:07:09Z"}, "message": "Prohibit using macro-expanded `macro_export` macros through module-relative paths", "tree": {"sha": "69f37e5c53387564610007609fb4dff082f52aaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69f37e5c53387564610007609fb4dff082f52aaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd0a766e06fc553a0321fb04eb51910bfd2c7097", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd0a766e06fc553a0321fb04eb51910bfd2c7097", "html_url": "https://github.com/rust-lang/rust/commit/dd0a766e06fc553a0321fb04eb51910bfd2c7097", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd0a766e06fc553a0321fb04eb51910bfd2c7097/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7ee6fb2a25c9e3dbb6c7db07f4e339111d265ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7ee6fb2a25c9e3dbb6c7db07f4e339111d265ec", "html_url": "https://github.com/rust-lang/rust/commit/e7ee6fb2a25c9e3dbb6c7db07f4e339111d265ec"}], "stats": {"total": 109, "additions": 98, "deletions": 11}, "files": [{"sha": "bf87b00c14969b667eb863136ed5ff4e9597bb53", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd0a766e06fc553a0321fb04eb51910bfd2c7097/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd0a766e06fc553a0321fb04eb51910bfd2c7097/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=dd0a766e06fc553a0321fb04eb51910bfd2c7097", "patch": "@@ -789,7 +789,6 @@ impl<'a, 'b, 'cl> BuildReducedGraphVisitor<'a, 'b, 'cl> {\n     fn visit_invoc(&mut self, id: ast::NodeId) -> &'b InvocationData<'b> {\n         let mark = id.placeholder_to_mark();\n         self.resolver.current_module.unresolved_invocations.borrow_mut().insert(mark);\n-        self.resolver.unresolved_invocations_macro_export.insert(mark);\n         let invocation = self.resolver.invocations[&mark];\n         invocation.module.set(self.resolver.current_module);\n         invocation.legacy_scope.set(self.legacy_scope);"}, {"sha": "e31e2cc1dff59ee919e992991f273bf2f650136e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dd0a766e06fc553a0321fb04eb51910bfd2c7097/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd0a766e06fc553a0321fb04eb51910bfd2c7097/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=dd0a766e06fc553a0321fb04eb51910bfd2c7097", "patch": "@@ -1385,6 +1385,8 @@ pub struct Resolver<'a, 'b: 'a> {\n     use_injections: Vec<UseError<'a>>,\n     /// `use` injections for proc macros wrongly imported with #[macro_use]\n     proc_mac_errors: Vec<macros::ProcMacError>,\n+    /// crate-local macro expanded `macro_export` referred to by a module-relative path\n+    macro_expanded_macro_export_errors: BTreeSet<(Span, Span)>,\n \n     gated_errors: FxHashSet<Span>,\n     disallowed_shadowing: Vec<&'a LegacyBinding<'a>>,\n@@ -1432,9 +1434,6 @@ pub struct Resolver<'a, 'b: 'a> {\n \n     /// Only supposed to be used by rustdoc, otherwise should be false.\n     pub ignore_extern_prelude_feature: bool,\n-\n-    /// Macro invocations in the whole crate that can expand into a `#[macro_export] macro_rules`.\n-    unresolved_invocations_macro_export: FxHashSet<Mark>,\n }\n \n /// Nothing really interesting here, it just provides memory for the rest of the crate.\n@@ -1706,6 +1705,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             proc_mac_errors: Vec::new(),\n             gated_errors: FxHashSet(),\n             disallowed_shadowing: Vec::new(),\n+            macro_expanded_macro_export_errors: BTreeSet::new(),\n \n             arenas,\n             dummy_binding: arenas.alloc_name_binding(NameBinding {\n@@ -1737,7 +1737,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             current_type_ascription: Vec::new(),\n             injected_crate: None,\n             ignore_extern_prelude_feature: false,\n-            unresolved_invocations_macro_export: FxHashSet(),\n         }\n     }\n \n@@ -4126,6 +4125,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                             ns: Namespace,\n                                             module: Module<'a>,\n                                             found_traits: &mut Vec<TraitCandidate>) {\n+        assert!(ns == TypeNS || ns == ValueNS);\n         let mut traits = module.traits.borrow_mut();\n         if traits.is_none() {\n             let mut collected_traits = Vec::new();\n@@ -4371,6 +4371,14 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         self.report_proc_macro_import(krate);\n         let mut reported_spans = FxHashSet();\n \n+        for &(span_use, span_def) in &self.macro_expanded_macro_export_errors {\n+            let msg = \"macro-expanded `macro_export` macros from the current crate \\\n+                       cannot be referred to by absolute paths\";\n+            self.session.struct_span_err(span_use, msg)\n+                        .span_note(span_def, \"the macro is defined here\")\n+                        .emit();\n+        }\n+\n         for &AmbiguityError { span, name, b1, b2, lexical } in &self.ambiguity_errors {\n             if !reported_spans.insert(span) { continue }\n             let participle = |binding: &NameBinding| {"}, {"sha": "fe9d3c7eb998268bcdf7ae683e7817acdb4f3ce0", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd0a766e06fc553a0321fb04eb51910bfd2c7097/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd0a766e06fc553a0321fb04eb51910bfd2c7097/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=dd0a766e06fc553a0321fb04eb51910bfd2c7097", "patch": "@@ -196,9 +196,7 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n \n         self.current_module = invocation.module.get();\n         self.current_module.unresolved_invocations.borrow_mut().remove(&mark);\n-        self.unresolved_invocations_macro_export.remove(&mark);\n         self.current_module.unresolved_invocations.borrow_mut().extend(derives);\n-        self.unresolved_invocations_macro_export.extend(derives);\n         for &derive in derives {\n             self.invocations.insert(derive, invocation);\n         }"}, {"sha": "715292bc11622891508a833f5d8636ad08e7177f", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dd0a766e06fc553a0321fb04eb51910bfd2c7097/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd0a766e06fc553a0321fb04eb51910bfd2c7097/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=dd0a766e06fc553a0321fb04eb51910bfd2c7097", "patch": "@@ -146,6 +146,14 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n             .try_borrow_mut()\n             .map_err(|_| Determined)?; // This happens when there is a cycle of imports\n \n+        if let Some(binding) = resolution.binding {\n+            if !restricted_shadowing && binding.expansion != Mark::root() {\n+                if let NameBindingKind::Def(_, true) = binding.kind {\n+                    self.macro_expanded_macro_export_errors.insert((path_span, binding.span));\n+                }\n+            }\n+        }\n+\n         if record_used {\n             if let Some(binding) = resolution.binding {\n                 if let Some(shadowed_glob) = resolution.shadowed_glob {\n@@ -211,9 +219,15 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n         // if it cannot be shadowed by some new item/import expanded from a macro.\n         // This happens either if there are no unexpanded macros, or expanded names cannot\n         // shadow globs (that happens in macro namespace or with restricted shadowing).\n-        let unexpanded_macros = !module.unresolved_invocations.borrow().is_empty() ||\n-                                (ns == MacroNS && ptr::eq(module, self.graph_root) &&\n-                                 !self.unresolved_invocations_macro_export.is_empty());\n+        //\n+        // Additionally, any macro in any module can plant names in the root module if it creates\n+        // `macro_export` macros, so the root module effectively has unresolved invocations if any\n+        // module has unresolved invocations.\n+        // However, it causes resolution/expansion to stuck too often (#53144), so, to make\n+        // progress, we have to ignore those potential unresolved invocations from other modules\n+        // and prohibit access to macro-expanded `macro_export` macros instead (unless restricted\n+        // shadowing is enabled, see `macro_expanded_macro_export_errors`).\n+        let unexpanded_macros = !module.unresolved_invocations.borrow().is_empty();\n         if let Some(binding) = resolution.binding {\n             if !unexpanded_macros || ns == MacroNS || restricted_shadowing {\n                 return check_usable(self, binding);"}, {"sha": "8d53699c0640e0bb2ce3088491c9329cc8d73ce2", "filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd0a766e06fc553a0321fb04eb51910bfd2c7097/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd0a766e06fc553a0321fb04eb51910bfd2c7097/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs?ref=dd0a766e06fc553a0321fb04eb51910bfd2c7097", "patch": "@@ -21,7 +21,7 @@ extern crate derive_b;\n #[C] //~ ERROR: The attribute `C` is currently unknown to the compiler\n #[B(D)]\n #[B(E = \"foo\")]\n-#[B arbitrary tokens] //~ expected one of `(` or `=`, found `arbitrary`\n+#[B arbitrary tokens] //~ ERROR arbitrary tokens in non-macro attributes are unstable\n struct B;\n \n fn main() {}"}, {"sha": "ab1f312e161e87ba42d288e17349d6b140071697", "filename": "src/test/ui/imports/local-modularized-tricky-fail-3.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dd0a766e06fc553a0321fb04eb51910bfd2c7097/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd0a766e06fc553a0321fb04eb51910bfd2c7097/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.rs?ref=dd0a766e06fc553a0321fb04eb51910bfd2c7097", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Crate-local macro expanded `macro_export` macros cannot be accessed with module-relative paths.\n+\n+#![feature(use_extern_macros)]\n+\n+macro_rules! define_exported { () => {\n+    #[macro_export]\n+    macro_rules! exported {\n+        () => ()\n+    }\n+}}\n+\n+define_exported!();\n+\n+mod m {\n+    use exported;\n+    //~^ ERROR macro-expanded `macro_export` macros from the current crate cannot\n+}\n+\n+fn main() {\n+    ::exported!();\n+    //~^ ERROR macro-expanded `macro_export` macros from the current crate cannot\n+}"}, {"sha": "6da52842d83d7d09631799c3e97936ca65a6ca10", "filename": "src/test/ui/imports/local-modularized-tricky-fail-3.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/dd0a766e06fc553a0321fb04eb51910bfd2c7097/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd0a766e06fc553a0321fb04eb51910bfd2c7097/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr?ref=dd0a766e06fc553a0321fb04eb51910bfd2c7097", "patch": "@@ -0,0 +1,36 @@\n+error: macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\n+  --> $DIR/local-modularized-tricky-fail-3.rs:25:9\n+   |\n+LL |     use exported;\n+   |         ^^^^^^^^\n+   |\n+note: the macro is defined here\n+  --> $DIR/local-modularized-tricky-fail-3.rs:17:5\n+   |\n+LL | /     macro_rules! exported {\n+LL | |         () => ()\n+LL | |     }\n+   | |_____^\n+...\n+LL |   define_exported!();\n+   |   ------------------- in this macro invocation\n+\n+error: macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\n+  --> $DIR/local-modularized-tricky-fail-3.rs:30:5\n+   |\n+LL |     ::exported!();\n+   |     ^^^^^^^^^^\n+   |\n+note: the macro is defined here\n+  --> $DIR/local-modularized-tricky-fail-3.rs:17:5\n+   |\n+LL | /     macro_rules! exported {\n+LL | |         () => ()\n+LL | |     }\n+   | |_____^\n+...\n+LL |   define_exported!();\n+   |   ------------------- in this macro invocation\n+\n+error: aborting due to 2 previous errors\n+"}]}