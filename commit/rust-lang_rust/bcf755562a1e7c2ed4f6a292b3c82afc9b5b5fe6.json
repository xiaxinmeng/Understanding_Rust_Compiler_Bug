{"sha": "bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZjc1NTU2MmExZTdjMmVkNGY2YTI5MmIzYzgyYWZjOWI1YjVmZTY=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-03-15T23:32:45Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-03-20T00:11:50Z"}, "message": "coverage bug fixes and optimization support\n\nAdjusted LLVM codegen for code compiled with `-Zinstrument-coverage` to\naddress multiple, somewhat related issues.\n\nFixed a significant flaw in prior coverage solution: Every counter\ngenerated a new counter variable, but there should have only been one\ncounter variable per function. This appears to have bloated .profraw\nfiles significantly. (For a small program, it increased the size by\nabout 40%. I have not tested large programs, but there is anecdotal\nevidence that profraw files were way too large. This is a good fix,\nregardless, but hopefully it also addresses related issues.\n\nFixes: #82144\n\nInvalid LLVM coverage data produced when compiled with -C opt-level=1\n\nExisting tests now work up to at least `opt-level=3`. This required a\ndetailed analysis of the LLVM IR, comparisons with Clang C++ LLVM IR\nwhen compiled with coverage, and a lot of trial and error with codegen\nadjustments.\n\nThe biggest hurdle was figuring out how to continue to support coverage\nresults for unused functions and generics. Rust's coverage results have\nthree advantages over Clang's coverage results:\n\n1. Rust's coverage map does not include any overlapping code regions,\n   making coverage counting unambiguous.\n2. Rust generates coverage results (showing zero counts) for all unused\n   functions, including generics. (Clang does not generate coverage for\n   uninstantiated template functions.)\n3. Rust's unused functions produce minimal stubbed functions in LLVM IR,\n   sufficient for including in the coverage results; while Clang must\n   generate the complete LLVM IR for each unused function, even though\n   it will never be called.\n\nThis PR removes the previous hack of attempting to inject coverage into\nsome other existing function instance, and generates dedicated instances\nfor each unused function. This change, and a few other adjustments\n(similar to what is required for `-C link-dead-code`, but with lower\nimpact), makes it possible to support LLVM optimizations.\n\nFixes: #79651\n\nCoverage report: \"Unexecuted instantiation:...\" for a generic function\nfrom multiple crates\n\nFixed by removing the aforementioned hack. Some \"Unexecuted\ninstantiation\" notices are unavoidable, as explained in the\n`used_crate.rs` test, but `-Zinstrument-coverage` has new options to\nback off support for either unused generics, or all unused functions,\nwhich avoids the notice, at the cost of less coverage of unused\nfunctions.\n\nFixes: #82875\n\nInvalid LLVM coverage data produced with crate brotli_decompressor\n\nFixed by disabling the LLVM function attribute that forces inlining, if\n`-Z instrument-coverage` is enabled. This attribute is applied to\nRust functions with `#[inline(always)], and in some cases, the forced\ninlining breaks coverage instrumentation and reports.", "tree": {"sha": "cf808d7ed75963822412132b469384ed3602fdcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf808d7ed75963822412132b469384ed3602fdcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "html_url": "https://github.com/rust-lang/rust/commit/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cebc8fef5f4391a9ed8e4c1dc566a6c5824e2901", "url": "https://api.github.com/repos/rust-lang/rust/commits/cebc8fef5f4391a9ed8e4c1dc566a6c5824e2901", "html_url": "https://github.com/rust-lang/rust/commit/cebc8fef5f4391a9ed8e4c1dc566a6c5824e2901"}], "stats": {"total": 3397, "additions": 3058, "deletions": 339}, "files": [{"sha": "db8abdd9b135350035f8976ef3f5a2bda09e1077", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -143,7 +143,7 @@ pub fn compile_codegen_unit(\n \n             // Finalize code coverage by injecting the coverage map. Note, the coverage map will\n             // also be added to the `llvm.used` variable, created next.\n-            if cx.sess().opts.debugging_opts.instrument_coverage {\n+            if cx.sess().instrument_coverage() {\n                 cx.coverageinfo_finalize();\n             }\n "}, {"sha": "4d0498ac78373563122edf2dcad4b664fc3f5c9e", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -79,7 +79,7 @@ pub struct CodegenCx<'ll, 'tcx> {\n     pub pointee_infos: RefCell<FxHashMap<(Ty<'tcx>, Size), Option<PointeeInfo>>>,\n     pub isize_ty: &'ll Type,\n \n-    pub coverage_cx: Option<coverageinfo::CrateCoverageContext<'tcx>>,\n+    pub coverage_cx: Option<coverageinfo::CrateCoverageContext<'ll, 'tcx>>,\n     pub dbg_cx: Option<debuginfo::CrateDebugContext<'ll, 'tcx>>,\n \n     eh_personality: Cell<Option<&'ll Value>>,\n@@ -280,7 +280,7 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n \n         let (llcx, llmod) = (&*llvm_module.llcx, llvm_module.llmod());\n \n-        let coverage_cx = if tcx.sess.opts.debugging_opts.instrument_coverage {\n+        let coverage_cx = if tcx.sess.instrument_coverage() {\n             let covctx = coverageinfo::CrateCoverageContext::new();\n             Some(covctx)\n         } else {\n@@ -331,7 +331,7 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn coverage_context(&'a self) -> Option<&'a coverageinfo::CrateCoverageContext<'tcx>> {\n+    pub fn coverage_context(&'a self) -> Option<&'a coverageinfo::CrateCoverageContext<'ll, 'tcx>> {\n         self.coverage_cx.as_ref()\n     }\n }\n@@ -712,7 +712,7 @@ impl CodegenCx<'b, 'tcx> {\n         ifn!(\"llvm.va_end\", fn(i8p) -> void);\n         ifn!(\"llvm.va_copy\", fn(i8p, i8p) -> void);\n \n-        if self.sess().opts.debugging_opts.instrument_coverage {\n+        if self.sess().instrument_coverage() {\n             ifn!(\"llvm.instrprof.increment\", fn(i8p, t_i64, t_i32, t_i32) -> void);\n         }\n "}, {"sha": "239f786a727bda4c4422f955a8c66b7411e6d2a8", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 97, "deletions": 131, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -3,13 +3,12 @@ use crate::coverageinfo;\n use crate::llvm;\n \n use llvm::coverageinfo::CounterMappingRegion;\n-use rustc_codegen_ssa::coverageinfo::map::{Counter, CounterExpression, FunctionCoverage};\n-use rustc_codegen_ssa::traits::ConstMethods;\n+use rustc_codegen_ssa::coverageinfo::map::{Counter, CounterExpression};\n+use rustc_codegen_ssa::traits::{ConstMethods, CoverageInfoMethods};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n use rustc_llvm::RustString;\n use rustc_middle::mir::coverage::CodeRegion;\n-use rustc_middle::ty::{Instance, TyCtxt};\n use rustc_span::Symbol;\n \n use std::ffi::CString;\n@@ -20,16 +19,17 @@ use tracing::debug;\n ///\n /// This Coverage Map complies with Coverage Mapping Format version 4 (zero-based encoded as 3),\n /// as defined at [LLVM Code Coverage Mapping Format](https://github.com/rust-lang/llvm-project/blob/rustc/11.0-2020-10-12/llvm/docs/CoverageMappingFormat.rst#llvm-code-coverage-mapping-format)\n-/// and published in Rust's current (November 2020) fork of LLVM. This version is supported by the\n-/// LLVM coverage tools (`llvm-profdata` and `llvm-cov`) bundled with Rust's fork of LLVM.\n+/// and published in Rust's November 2020 fork of LLVM. This version is supported by the LLVM\n+/// coverage tools (`llvm-profdata` and `llvm-cov`) bundled with Rust's fork of LLVM.\n ///\n /// Consequently, Rust's bundled version of Clang also generates Coverage Maps compliant with\n-/// version 3. Clang's implementation of Coverage Map generation was referenced when implementing\n-/// this Rust version, and though the format documentation is very explicit and detailed, some\n-/// undocumented details in Clang's implementation (that may or may not be important) were also\n-/// replicated for Rust's Coverage Map.\n+/// the same version. Clang's implementation of Coverage Map generation was referenced when\n+/// implementing this Rust version, and though the format documentation is very explicit and\n+/// detailed, some undocumented details in Clang's implementation (that may or may not be important)\n+/// were also replicated for Rust's Coverage Map.\n pub fn finalize<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n     let tcx = cx.tcx;\n+\n     // Ensure LLVM supports Coverage Map Version 4 (encoded as a zero-based value: 3).\n     // If not, the LLVM Version must be less than 11.\n     let version = coverageinfo::mapping_version();\n@@ -39,25 +39,33 @@ pub fn finalize<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n \n     debug!(\"Generating coverage map for CodegenUnit: `{}`\", cx.codegen_unit.name());\n \n-    let mut function_coverage_map = match cx.coverage_context() {\n+    // In order to show that unused functions have coverage counts of zero (0), LLVM requires the\n+    // functions exist. Generate synthetic functions with a (required) single counter, and add the\n+    // MIR `Coverage` code regions to the `function_coverage_map`, before calling\n+    // `ctx.take_function_coverage_map()`.\n+    if !tcx.sess.instrument_coverage_except_unused_functions() {\n+        add_unused_functions(cx);\n+    }\n+\n+    let function_coverage_map = match cx.coverage_context() {\n         Some(ctx) => ctx.take_function_coverage_map(),\n         None => return,\n     };\n+\n     if function_coverage_map.is_empty() {\n         // This module has no functions with coverage instrumentation\n         return;\n     }\n \n-    add_unreachable_coverage(tcx, &mut function_coverage_map);\n-\n     let mut mapgen = CoverageMapGenerator::new();\n \n     // Encode coverage mappings and generate function records\n     let mut function_data = Vec::new();\n     for (instance, function_coverage) in function_coverage_map {\n         debug!(\"Generate function coverage for {}, {:?}\", cx.codegen_unit.name(), instance);\n         let mangled_function_name = tcx.symbol_name(instance).to_string();\n-        let function_source_hash = function_coverage.source_hash();\n+        let source_hash = function_coverage.source_hash();\n+        let is_used = function_coverage.is_used();\n         let (expressions, counter_regions) =\n             function_coverage.get_expressions_and_counter_regions();\n \n@@ -69,7 +77,7 @@ pub fn finalize<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n             \"Every `FunctionCoverage` should have at least one counter\"\n         );\n \n-        function_data.push((mangled_function_name, function_source_hash, coverage_mapping_buffer));\n+        function_data.push((mangled_function_name, source_hash, is_used, coverage_mapping_buffer));\n     }\n \n     // Encode all filenames referenced by counters/expressions in this module\n@@ -84,13 +92,14 @@ pub fn finalize<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n     // Generate the LLVM IR representation of the coverage map and store it in a well-known global\n     let cov_data_val = mapgen.generate_coverage_map(cx, version, filenames_size, filenames_val);\n \n-    for (mangled_function_name, function_source_hash, coverage_mapping_buffer) in function_data {\n+    for (mangled_function_name, source_hash, is_used, coverage_mapping_buffer) in function_data {\n         save_function_record(\n             cx,\n             mangled_function_name,\n-            function_source_hash,\n+            source_hash,\n             filenames_ref,\n             coverage_mapping_buffer,\n+            is_used,\n         );\n     }\n \n@@ -201,9 +210,10 @@ impl CoverageMapGenerator {\n fn save_function_record(\n     cx: &CodegenCx<'ll, 'tcx>,\n     mangled_function_name: String,\n-    function_source_hash: u64,\n+    source_hash: u64,\n     filenames_ref: u64,\n     coverage_mapping_buffer: Vec<u8>,\n+    is_used: bool,\n ) {\n     // Concatenate the encoded coverage mappings\n     let coverage_mapping_size = coverage_mapping_buffer.len();\n@@ -212,128 +222,120 @@ fn save_function_record(\n     let func_name_hash = coverageinfo::hash_str(&mangled_function_name);\n     let func_name_hash_val = cx.const_u64(func_name_hash);\n     let coverage_mapping_size_val = cx.const_u32(coverage_mapping_size as u32);\n-    let func_hash_val = cx.const_u64(function_source_hash);\n+    let source_hash_val = cx.const_u64(source_hash);\n     let filenames_ref_val = cx.const_u64(filenames_ref);\n     let func_record_val = cx.const_struct(\n         &[\n             func_name_hash_val,\n             coverage_mapping_size_val,\n-            func_hash_val,\n+            source_hash_val,\n             filenames_ref_val,\n             coverage_mapping_val,\n         ],\n         /*packed=*/ true,\n     );\n \n-    // At the present time, the coverage map for Rust assumes every instrumented function `is_used`.\n-    // Note that Clang marks functions as \"unused\" in `CodeGenPGO::emitEmptyCounterMapping`. (See:\n-    // https://github.com/rust-lang/llvm-project/blob/de02a75e398415bad4df27b4547c25b896c8bf3b/clang%2Flib%2FCodeGen%2FCodeGenPGO.cpp#L877-L878\n-    // for example.)\n-    //\n-    // It's not yet clear if or how this may be applied to Rust in the future, but the `is_used`\n-    // argument is available and handled similarly.\n-    let is_used = true;\n     coverageinfo::save_func_record_to_mod(cx, func_name_hash, func_record_val, is_used);\n }\n \n /// When finalizing the coverage map, `FunctionCoverage` only has the `CodeRegion`s and counters for\n /// the functions that went through codegen; such as public functions and \"used\" functions\n /// (functions referenced by other \"used\" or public items). Any other functions considered unused,\n-/// or \"Unreachable\" were still parsed and processed through the MIR stage.\n+/// or \"Unreachable\", were still parsed and processed through the MIR stage, but were not\n+/// codegenned. (Note that `-Clink-dead-code` can force some unused code to be codegenned, but\n+/// that flag is known to cause other errors, when combined with `-Z instrument-coverage`; and\n+/// `-Clink-dead-code` will not generate code for unused generic functions.)\n ///\n-/// We can find the unreachable functions by the set difference of all MIR `DefId`s (`tcx` query\n-/// `mir_keys`) minus the codegenned `DefId`s (`tcx` query `collect_and_partition_mono_items`).\n+/// We can find the unused functions (including generic functions) by the set difference of all MIR\n+/// `DefId`s (`tcx` query `mir_keys`) minus the codegenned `DefId`s (`tcx` query\n+/// `collect_and_partition_mono_items`).\n ///\n /// *HOWEVER* the codegenned `DefId`s are partitioned across multiple `CodegenUnit`s (CGUs), and\n /// this function is processing a `function_coverage_map` for the functions (`Instance`/`DefId`)\n-/// allocated to only one of those CGUs. We must NOT inject any \"Unreachable\" functions's\n-/// `CodeRegion`s more than once, so we have to pick which CGU's `function_coverage_map` to add\n-/// each \"Unreachable\" function to.\n-///\n-/// Some constraints:\n-///\n-/// 1. The file name of an \"Unreachable\" function must match the file name of the existing\n-///    codegenned (covered) function to which the unreachable code regions will be added.\n-/// 2. The function to which the unreachable code regions will be added must not be a generic\n-///    function (must not have type parameters) because the coverage tools will get confused\n-///    if the codegenned function has more than one instantiation and additional `CodeRegion`s\n-///    attached to only one of those instantiations.\n-fn add_unreachable_coverage<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    function_coverage_map: &mut FxHashMap<Instance<'tcx>, FunctionCoverage<'tcx>>,\n-) {\n+/// allocated to only one of those CGUs. We must NOT inject any unused functions's `CodeRegion`s\n+/// more than once, so we have to pick a CGUs `function_coverage_map` into which the unused\n+/// function will be inserted.\n+fn add_unused_functions<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n+    let tcx = cx.tcx;\n+\n     // FIXME(#79622): Can this solution be simplified and/or improved? Are there other sources\n     // of compiler state data that might help (or better sources that could be exposed, but\n     // aren't yet)?\n \n-    // Note: If the crate *only* defines generic functions, there are no codegenerated non-generic\n-    // functions to add any unreachable code to. In this case, the unreachable code regions will\n-    // have no coverage, instead of having coverage with zero executions.\n-    //\n-    // This is probably still an improvement over Clang, which does not generate any coverage\n-    // for uninstantiated template functions.\n-\n-    let has_non_generic_def_ids =\n-        function_coverage_map.keys().any(|instance| instance.def.attrs(tcx).len() == 0);\n-\n-    if !has_non_generic_def_ids {\n-        // There are no non-generic functions to add unreachable `CodeRegion`s to\n-        return;\n-    }\n+    let ignore_unused_generics = tcx.sess.instrument_coverage_except_unused_generics();\n \n-    let all_def_ids: DefIdSet =\n-        tcx.mir_keys(LOCAL_CRATE).iter().map(|local_def_id| local_def_id.to_def_id()).collect();\n+    let all_def_ids: DefIdSet = tcx\n+        .mir_keys(LOCAL_CRATE)\n+        .iter()\n+        .filter_map(|local_def_id| {\n+            let def_id = local_def_id.to_def_id();\n+            if ignore_unused_generics && tcx.generics_of(def_id).count() > 0 {\n+                return None;\n+            }\n+            Some(local_def_id.to_def_id())\n+        })\n+        .collect();\n \n     let codegenned_def_ids = tcx.codegened_and_inlined_items(LOCAL_CRATE);\n \n-    let mut unreachable_def_ids_by_file: FxHashMap<Symbol, Vec<DefId>> = FxHashMap::default();\n+    let mut unused_def_ids_by_file: FxHashMap<Symbol, Vec<DefId>> = FxHashMap::default();\n     for &non_codegenned_def_id in all_def_ids.difference(codegenned_def_ids) {\n-        // Make sure the non-codegenned (unreachable) function has a file_name\n+        // Make sure the non-codegenned (unused) function has a file_name\n         if let Some(non_codegenned_file_name) = tcx.covered_file_name(non_codegenned_def_id) {\n-            let def_ids = unreachable_def_ids_by_file\n-                .entry(*non_codegenned_file_name)\n-                .or_insert_with(Vec::new);\n+            let def_ids =\n+                unused_def_ids_by_file.entry(*non_codegenned_file_name).or_insert_with(Vec::new);\n             def_ids.push(non_codegenned_def_id);\n         }\n     }\n \n-    if unreachable_def_ids_by_file.is_empty() {\n-        // There are no unreachable functions with file names to add (in any CGU)\n+    if unused_def_ids_by_file.is_empty() {\n+        // There are no unused functions with file names to add (in any CGU)\n         return;\n     }\n \n-    // Since there may be multiple `CodegenUnit`s, some codegenned_def_ids may be codegenned in a\n-    // different CGU, and will be added to the function_coverage_map for each CGU. Determine which\n-    // function_coverage_map has the responsibility for publishing unreachable coverage\n-    // based on file name:\n+    // Each `CodegenUnit` (CGU) has its own function_coverage_map, and generates a specific binary\n+    // with its own coverage map.\n+    //\n+    // Each covered function `Instance` can be included in only one coverage map, produced from a\n+    // specific function_coverage_map, from a specific CGU.\n     //\n-    // For each covered file name, sort ONLY the non-generic codegenned_def_ids, and if\n-    // covered_def_ids.contains(the first def_id) for a given file_name, add the unreachable code\n-    // region in this function_coverage_map. Otherwise, ignore it and assume another CGU's\n-    // function_coverage_map will be adding it (because it will be first for one, and only one,\n-    // of them).\n+    // Since unused functions did not generate code, they are not associated with any CGU yet.\n+    //\n+    // To avoid injecting the unused functions in multiple coverage maps (for multiple CGUs)\n+    // determine which function_coverage_map has the responsibility for publishing unreachable\n+    // coverage, based on file name: For each unused function, find the CGU that generates the\n+    // first function (based on sorted `DefId`) from the same file.\n+    //\n+    // Add a new `FunctionCoverage` to the `function_coverage_map`, with unreachable code regions\n+    // for each region in it's MIR.\n+\n+    // Convert the `HashSet` of `codegenned_def_ids` to a sortable vector, and sort them.\n     let mut sorted_codegenned_def_ids: Vec<DefId> =\n         codegenned_def_ids.iter().map(|def_id| *def_id).collect();\n     sorted_codegenned_def_ids.sort_unstable();\n \n     let mut first_covered_def_id_by_file: FxHashMap<Symbol, DefId> = FxHashMap::default();\n     for &def_id in sorted_codegenned_def_ids.iter() {\n-        // Only consider non-generic functions, to potentially add unreachable code regions\n-        if tcx.generics_of(def_id).count() == 0 {\n-            if let Some(covered_file_name) = tcx.covered_file_name(def_id) {\n-                // Only add files known to have unreachable functions\n-                if unreachable_def_ids_by_file.contains_key(covered_file_name) {\n-                    first_covered_def_id_by_file.entry(*covered_file_name).or_insert(def_id);\n-                }\n+        if let Some(covered_file_name) = tcx.covered_file_name(def_id) {\n+            // Only add files known to have unused functions\n+            if unused_def_ids_by_file.contains_key(covered_file_name) {\n+                first_covered_def_id_by_file.entry(*covered_file_name).or_insert(def_id);\n             }\n         }\n     }\n \n     // Get the set of def_ids with coverage regions, known by *this* CoverageContext.\n-    let cgu_covered_def_ids: DefIdSet =\n-        function_coverage_map.keys().map(|instance| instance.def.def_id()).collect();\n+    let cgu_covered_def_ids: DefIdSet = match cx.coverage_context() {\n+        Some(ctx) => ctx\n+            .function_coverage_map\n+            .borrow()\n+            .keys()\n+            .map(|&instance| instance.def.def_id())\n+            .collect(),\n+        None => return,\n+    };\n \n-    let mut cgu_covered_files: FxHashSet<Symbol> = first_covered_def_id_by_file\n+    let cgu_covered_files: FxHashSet<Symbol> = first_covered_def_id_by_file\n         .iter()\n         .filter_map(\n             |(&file_name, def_id)| {\n@@ -342,49 +344,13 @@ fn add_unreachable_coverage<'tcx>(\n         )\n         .collect();\n \n-    // Find the first covered, non-generic function (instance) for each cgu_covered_file. Take the\n-    // unreachable code regions for that file, and add them to the function.\n-    //\n-    // There are three `for` loops here, but (a) the lists have already been reduced to the minimum\n-    // required values, the lists are further reduced (by `remove()` calls) when elements are no\n-    // longer needed, and there are several opportunities to branch out of loops early.\n-    for (instance, function_coverage) in function_coverage_map.iter_mut() {\n-        if instance.def.attrs(tcx).len() > 0 {\n-            continue;\n-        }\n-        // The covered function is not generic...\n-        let covered_def_id = instance.def.def_id();\n-        if let Some(covered_file_name) = tcx.covered_file_name(covered_def_id) {\n-            if !cgu_covered_files.remove(&covered_file_name) {\n-                continue;\n-            }\n-            // The covered function's file is one of the files with unreachable code regions, so\n-            // all of the unreachable code regions for this file will be added to this function.\n-            for def_id in\n-                unreachable_def_ids_by_file.remove(&covered_file_name).into_iter().flatten()\n-            {\n-                // Note, this loop adds an unreachable code regions for each MIR-derived region.\n-                // Alternatively, we could add a single code region for the maximum span of all\n-                // code regions here.\n-                //\n-                // Observed downsides of this approach are:\n-                //\n-                // 1. The coverage results will appear inconsistent compared with the same (or\n-                //    similar) code in a function that is reached.\n-                // 2. If the function is unreachable from one crate but reachable when compiling\n-                //    another referencing crate (such as a cross-crate reference to a\n-                //    generic function or inlined function), actual coverage regions overlaid\n-                //    on a single larger code span of `Zero` coverage can appear confusing or\n-                //    wrong. Chaning the unreachable coverage from a `code_region` to a\n-                //    `gap_region` can help, but still can look odd with `0` line counts for\n-                //    lines between executed (> 0) lines (such as for blank lines or comments).\n-                for &region in tcx.covered_code_regions(def_id) {\n-                    function_coverage.add_unreachable_region(region.clone());\n-                }\n-            }\n-            if cgu_covered_files.is_empty() {\n-                break;\n-            }\n+    // For each file for which this CGU is responsible for adding unused function coverage,\n+    // get the `def_id`s for each unused function (if any), define a synthetic function with a\n+    // single LLVM coverage counter, and add the function's coverage `CodeRegion`s. to the\n+    // function_coverage_map.\n+    for covered_file_name in cgu_covered_files {\n+        for def_id in unused_def_ids_by_file.remove(&covered_file_name).into_iter().flatten() {\n+            cx.define_unused_fn(def_id);\n         }\n     }\n }"}, {"sha": "db61be407c954b3a298fef599def13f1c4d8b83b", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mod.rs", "status": "modified", "additions": 129, "deletions": 12, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -1,63 +1,99 @@\n use crate::llvm;\n \n+use crate::abi::{Abi, FnAbi};\n use crate::builder::Builder;\n use crate::common::CodegenCx;\n \n use libc::c_uint;\n use llvm::coverageinfo::CounterMappingRegion;\n use rustc_codegen_ssa::coverageinfo::map::{CounterExpression, FunctionCoverage};\n use rustc_codegen_ssa::traits::{\n-    BaseTypeMethods, CoverageInfoBuilderMethods, CoverageInfoMethods, MiscMethods, StaticMethods,\n+    BaseTypeMethods, BuilderMethods, ConstMethods, CoverageInfoBuilderMethods, CoverageInfoMethods,\n+    MiscMethods, StaticMethods,\n };\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_llvm::RustString;\n+use rustc_middle::bug;\n use rustc_middle::mir::coverage::{\n     CodeRegion, CounterValueReference, ExpressionOperandId, InjectedExpressionId, Op,\n };\n+use rustc_middle::ty;\n+use rustc_middle::ty::layout::FnAbiExt;\n+use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::Instance;\n \n use std::cell::RefCell;\n use std::ffi::CString;\n \n+use std::iter;\n use tracing::debug;\n \n pub mod mapgen;\n \n+const UNUSED_FUNCTION_COUNTER_ID: CounterValueReference = CounterValueReference::START;\n+\n const VAR_ALIGN_BYTES: usize = 8;\n \n /// A context object for maintaining all state needed by the coverageinfo module.\n-pub struct CrateCoverageContext<'tcx> {\n+pub struct CrateCoverageContext<'ll, 'tcx> {\n     // Coverage data for each instrumented function identified by DefId.\n     pub(crate) function_coverage_map: RefCell<FxHashMap<Instance<'tcx>, FunctionCoverage<'tcx>>>,\n+    pub(crate) pgo_func_name_var_map: RefCell<FxHashMap<Instance<'tcx>, &'ll llvm::Value>>,\n }\n \n-impl<'tcx> CrateCoverageContext<'tcx> {\n+impl<'ll, 'tcx> CrateCoverageContext<'ll, 'tcx> {\n     pub fn new() -> Self {\n-        Self { function_coverage_map: Default::default() }\n+        Self {\n+            function_coverage_map: Default::default(),\n+            pgo_func_name_var_map: Default::default(),\n+        }\n     }\n \n     pub fn take_function_coverage_map(&self) -> FxHashMap<Instance<'tcx>, FunctionCoverage<'tcx>> {\n         self.function_coverage_map.replace(FxHashMap::default())\n     }\n }\n \n-impl CoverageInfoMethods for CodegenCx<'ll, 'tcx> {\n+impl CoverageInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn coverageinfo_finalize(&self) {\n         mapgen::finalize(self)\n     }\n-}\n \n-impl CoverageInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n-    /// Calls llvm::createPGOFuncNameVar() with the given function instance's mangled function name.\n-    /// The LLVM API returns an llvm::GlobalVariable containing the function name, with the specific\n-    /// variable name and linkage required by LLVM InstrProf source-based coverage instrumentation.\n-    fn create_pgo_func_name_var(&self, instance: Instance<'tcx>) -> Self::Value {\n-        let llfn = self.cx.get_fn(instance);\n+    fn get_pgo_func_name_var(&self, instance: Instance<'tcx>) -> &'ll llvm::Value {\n+        if let Some(coverage_context) = self.coverage_context() {\n+            debug!(\"getting pgo_func_name_var for instance={:?}\", instance);\n+            let mut pgo_func_name_var_map = coverage_context.pgo_func_name_var_map.borrow_mut();\n+            pgo_func_name_var_map\n+                .entry(instance)\n+                .or_insert_with(|| self.create_pgo_func_name_var(instance))\n+        } else {\n+            bug!(\"Could not get the `coverage_context`\");\n+        }\n+    }\n+\n+    /// Calls llvm::createPGOFuncNameVar() with the given function instance's\n+    /// mangled function name. The LLVM API returns an llvm::GlobalVariable\n+    /// containing the function name, with the specific variable name and\n+    /// linkage required by LLVM InstrProf source-based coverage\n+    /// instrumentation. Use `bx.get_pgo_func_name_var()` to ensure the variable\n+    /// is only created once per `Instance`.\n+    fn create_pgo_func_name_var(&self, instance: Instance<'tcx>) -> &'ll llvm::Value {\n         let mangled_fn_name = CString::new(self.tcx.symbol_name(instance).name)\n             .expect(\"error converting function name to C string\");\n+        let llfn = self.get_fn(instance);\n         unsafe { llvm::LLVMRustCoverageCreatePGOFuncNameVar(llfn, mangled_fn_name.as_ptr()) }\n     }\n \n+    fn define_unused_fn(&self, def_id: DefId) {\n+        let instance = declare_unused_fn(self, &def_id);\n+        codegen_unused_fn_and_counter(self, instance);\n+        add_function_coverage(self, instance, def_id);\n+    }\n+}\n+\n+impl CoverageInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n     fn set_function_source_hash(\n         &mut self,\n         instance: Instance<'tcx>,\n@@ -145,6 +181,86 @@ impl CoverageInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n }\n \n+fn declare_unused_fn(cx: &CodegenCx<'ll, 'tcx>, def_id: &DefId) -> Instance<'tcx> {\n+    let tcx = cx.tcx;\n+\n+    let instance = Instance::new(\n+        *def_id,\n+        InternalSubsts::for_item(tcx, *def_id, |param, _| {\n+            if let ty::GenericParamDefKind::Lifetime = param.kind {\n+                tcx.lifetimes.re_erased.into()\n+            } else {\n+                tcx.mk_param_from_def(param)\n+            }\n+        }),\n+    );\n+\n+    let llfn = cx.declare_fn(\n+        &tcx.symbol_name(instance).name,\n+        &FnAbi::of_fn_ptr(\n+            cx,\n+            ty::Binder::dummy(tcx.mk_fn_sig(\n+                iter::once(tcx.mk_unit()),\n+                tcx.mk_unit(),\n+                false,\n+                hir::Unsafety::Unsafe,\n+                Abi::Rust,\n+            )),\n+            &[],\n+        ),\n+    );\n+\n+    unsafe {\n+        llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::ExternalLinkage);\n+        llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n+    }\n+\n+    cx.instances.borrow_mut().insert(instance, llfn);\n+\n+    instance\n+}\n+\n+fn codegen_unused_fn_and_counter(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) {\n+    let llfn = cx.get_fn(instance);\n+    let mut bx = Builder::new_block(cx, llfn, \"unused_function\");\n+    let fn_name = bx.get_pgo_func_name_var(instance);\n+    let hash = bx.const_u64(0);\n+    let num_counters = bx.const_u32(1);\n+    let index = bx.const_u32(u32::from(UNUSED_FUNCTION_COUNTER_ID));\n+    debug!(\n+        \"codegen intrinsic instrprof.increment(fn_name={:?}, hash={:?}, num_counters={:?},\n+            index={:?}) for unused function: {:?}\",\n+        fn_name, hash, num_counters, index, instance\n+    );\n+    bx.instrprof_increment(fn_name, hash, num_counters, index);\n+    bx.ret_void();\n+}\n+\n+fn add_function_coverage(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>, def_id: DefId) {\n+    let tcx = cx.tcx;\n+\n+    let mut function_coverage = FunctionCoverage::unused(tcx, instance);\n+    for (index, &code_region) in tcx.covered_code_regions(def_id).iter().enumerate() {\n+        if index == 0 {\n+            // Insert at least one real counter so the LLVM CoverageMappingReader will find expected\n+            // definitions.\n+            function_coverage.add_counter(UNUSED_FUNCTION_COUNTER_ID, code_region.clone());\n+        }\n+        // Add a Zero Counter for every code region.\n+        //\n+        // Even though the first coverage region already has an actual Counter, `llvm-cov` will not\n+        // always report it. Re-adding an unreachable region (zero counter) for the same region\n+        // seems to help produce the expected coverage.\n+        function_coverage.add_unreachable_region(code_region.clone());\n+    }\n+\n+    if let Some(coverage_context) = cx.coverage_context() {\n+        coverage_context.function_coverage_map.borrow_mut().insert(instance, function_coverage);\n+    } else {\n+        bug!(\"Could not get the `coverage_context`\");\n+    }\n+}\n+\n pub(crate) fn write_filenames_section_to_buffer<'a>(\n     filenames: impl IntoIterator<Item = &'a CString>,\n     buffer: &RustString,\n@@ -177,6 +293,7 @@ pub(crate) fn write_mapping_to_buffer(\n         );\n     }\n }\n+\n pub(crate) fn hash_str(strval: &str) -> u64 {\n     let strval = CString::new(strval).expect(\"null error converting hashable str to C string\");\n     unsafe { llvm::LLVMRustCoverageHashCString(strval.as_ptr()) }"}, {"sha": "4d6bc8381300abb100379893f4267da0d78701ca", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -1746,7 +1746,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     );\n \n     // OBJECT-FILES-NO, AUDIT-ORDER\n-    if sess.opts.cg.profile_generate.enabled() || sess.opts.debugging_opts.instrument_coverage {\n+    if sess.opts.cg.profile_generate.enabled() || sess.instrument_coverage() {\n         cmd.pgo_gen();\n     }\n "}, {"sha": "abad8281d3a699db4e907499003e5e455fc1d11f", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -188,9 +188,7 @@ fn exported_symbols_provider_local(\n         }\n     }\n \n-    if tcx.sess.opts.debugging_opts.instrument_coverage\n-        || tcx.sess.opts.cg.profile_generate.enabled()\n-    {\n+    if tcx.sess.instrument_coverage() || tcx.sess.opts.cg.profile_generate.enabled() {\n         // These are weak symbols that point to the profile version and the\n         // profile name, which need to be treated as exported so LTO doesn't nix\n         // them."}, {"sha": "7a8d8fb13043b4c8e0f1523af943440b2327cf66", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -176,7 +176,7 @@ impl ModuleConfig {\n \n                     // The rustc option `-Zinstrument_coverage` injects intrinsic calls to\n                     // `llvm.instrprof.increment()`, which requires the LLVM `instrprof` pass.\n-                    if sess.opts.debugging_opts.instrument_coverage {\n+                    if sess.instrument_coverage() {\n                         passes.push(\"instrprof\".to_owned());\n                     }\n                     passes"}, {"sha": "7a17bced1c0b0b63abf916231a14693842734ef4", "filename": "compiler/rustc_codegen_ssa/src/coverageinfo/map.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -31,27 +31,44 @@ pub struct Expression {\n pub struct FunctionCoverage<'tcx> {\n     instance: Instance<'tcx>,\n     source_hash: u64,\n+    is_used: bool,\n     counters: IndexVec<CounterValueReference, Option<CodeRegion>>,\n     expressions: IndexVec<InjectedExpressionIndex, Option<Expression>>,\n     unreachable_regions: Vec<CodeRegion>,\n }\n \n impl<'tcx> FunctionCoverage<'tcx> {\n+    /// Creates a new set of coverage data for a used (called) function.\n     pub fn new(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> Self {\n+        Self::create(tcx, instance, true)\n+    }\n+\n+    /// Creates a new set of coverage data for an unused (never called) function.\n+    pub fn unused(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> Self {\n+        Self::create(tcx, instance, false)\n+    }\n+\n+    fn create(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>, is_used: bool) -> Self {\n         let coverageinfo = tcx.coverageinfo(instance.def_id());\n         debug!(\n-            \"FunctionCoverage::new(instance={:?}) has coverageinfo={:?}\",\n-            instance, coverageinfo\n+            \"FunctionCoverage::new(instance={:?}) has coverageinfo={:?}. is_used={}\",\n+            instance, coverageinfo, is_used\n         );\n         Self {\n             instance,\n             source_hash: 0, // will be set with the first `add_counter()`\n+            is_used,\n             counters: IndexVec::from_elem_n(None, coverageinfo.num_counters as usize),\n             expressions: IndexVec::from_elem_n(None, coverageinfo.num_expressions as usize),\n             unreachable_regions: Vec::new(),\n         }\n     }\n \n+    /// Returns true for a used (called) function, and false for an unused function.\n+    pub fn is_used(&self) -> bool {\n+        self.is_used\n+    }\n+\n     /// Sets the function source hash value. If called multiple times for the same function, all\n     /// calls should have the same hash value.\n     pub fn set_function_source_hash(&mut self, source_hash: u64) {\n@@ -128,8 +145,8 @@ impl<'tcx> FunctionCoverage<'tcx> {\n         &'a self,\n     ) -> (Vec<CounterExpression>, impl Iterator<Item = (Counter, &'a CodeRegion)>) {\n         assert!(\n-            self.source_hash != 0,\n-            \"No counters provided the source_hash for function: {:?}\",\n+            self.source_hash != 0 || !self.is_used,\n+            \"No counters provided the source_hash for used function: {:?}\",\n             self.instance\n         );\n "}, {"sha": "e2f75b2e337cc9d6f77fea66cc4cdeca72a734ff", "filename": "compiler/rustc_codegen_ssa/src/mir/coverageinfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -33,7 +33,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n                     let coverageinfo = bx.tcx().coverageinfo(instance.def_id());\n \n-                    let fn_name = bx.create_pgo_func_name_var(instance);\n+                    let fn_name = bx.get_pgo_func_name_var(instance);\n                     let hash = bx.const_u64(function_source_hash);\n                     let num_counters = bx.const_u32(coverageinfo.num_counters);\n                     let index = bx.const_u32(u32::from(id));"}, {"sha": "c715752839687aaf32a0b8fcd065e702b2b58a5d", "filename": "compiler/rustc_codegen_ssa/src/traits/coverageinfo.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -1,14 +1,41 @@\n use super::BackendTypes;\n+use rustc_hir::def_id::DefId;\n use rustc_middle::mir::coverage::*;\n use rustc_middle::ty::Instance;\n \n-pub trait CoverageInfoMethods: BackendTypes {\n+pub trait CoverageInfoMethods<'tcx>: BackendTypes {\n     fn coverageinfo_finalize(&self);\n-}\n \n-pub trait CoverageInfoBuilderMethods<'tcx>: BackendTypes {\n+    /// Functions with MIR-based coverage are normally codegenned _only_ if\n+    /// called. LLVM coverage tools typically expect every function to be\n+    /// defined (even if unused), with at least one call to LLVM intrinsic\n+    /// `instrprof.increment`.\n+    ///\n+    /// Codegen a small function that will never be called, with one counter\n+    /// that will never be incremented.\n+    ///\n+    /// For used/called functions, the coverageinfo was already added to the\n+    /// `function_coverage_map` (keyed by function `Instance`) during codegen.\n+    /// But in this case, since the unused function was _not_ previously\n+    /// codegenned, collect the coverage `CodeRegion`s from the MIR and add\n+    /// them. The first `CodeRegion` is used to add a single counter, with the\n+    /// same counter ID used in the injected `instrprof.increment` intrinsic\n+    /// call. Since the function is never called, all other `CodeRegion`s can be\n+    /// added as `unreachable_region`s.\n+    fn define_unused_fn(&self, def_id: DefId);\n+\n+    /// For LLVM codegen, returns a function-specific `Value` for a global\n+    /// string, to hold the function name passed to LLVM intrinsic\n+    /// `instrprof.increment()`. The `Value` is only created once per instance.\n+    /// Multiple invocations with the same instance return the same `Value`.\n+    fn get_pgo_func_name_var(&self, instance: Instance<'tcx>) -> Self::Value;\n+\n+    /// Creates a new PGO function name variable. This should only be called\n+    /// to fill in the unused function names array.\n     fn create_pgo_func_name_var(&self, instance: Instance<'tcx>) -> Self::Value;\n+}\n \n+pub trait CoverageInfoBuilderMethods<'tcx>: BackendTypes {\n     /// Returns true if the function source hash was added to the coverage map (even if it had\n     /// already been added, for this instance). Returns false *only* if `-Z instrument-coverage` is\n     /// not enabled (a coverage map is not being generated)."}, {"sha": "be2e0ea230f303c2e04dd6fcae519e53a2423f3f", "filename": "compiler/rustc_codegen_ssa/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmod.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -58,7 +58,7 @@ pub trait CodegenMethods<'tcx>:\n     + MiscMethods<'tcx>\n     + ConstMethods<'tcx>\n     + StaticMethods\n-    + CoverageInfoMethods\n+    + CoverageInfoMethods<'tcx>\n     + DebugInfoMethods<'tcx>\n     + AsmMethods\n     + PreDefineMethods<'tcx>\n@@ -74,7 +74,7 @@ impl<'tcx, T> CodegenMethods<'tcx> for T where\n         + MiscMethods<'tcx>\n         + ConstMethods<'tcx>\n         + StaticMethods\n-        + CoverageInfoMethods\n+        + CoverageInfoMethods<'tcx>\n         + DebugInfoMethods<'tcx>\n         + AsmMethods\n         + PreDefineMethods<'tcx>"}, {"sha": "4c34bdddc07634f61afae41da81f3b4a2627dd77", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -2,6 +2,7 @@ use crate::interface::parse_cfgspecs;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n+use rustc_session::config::InstrumentCoverage;\n use rustc_session::config::Strip;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n use rustc_session::config::{rustc_optgroups, ErrorOutputType, ExternLocation, Options, Passes};\n@@ -560,7 +561,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(inline_mir, Some(true));\n     tracked!(inline_mir_threshold, Some(123));\n     tracked!(inline_mir_hint_threshold, Some(123));\n-    tracked!(instrument_coverage, true);\n+    tracked!(instrument_coverage, Some(InstrumentCoverage::All));\n     tracked!(instrument_mcount, true);\n     tracked!(link_only, true);\n     tracked!(merge_functions, Some(MergeFunctions::Disabled));"}, {"sha": "9335384aa6c20da423bf1f79f82edbb3d4d39f04", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -736,7 +736,7 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     fn inject_profiler_runtime(&mut self, krate: &ast::Crate) {\n-        if (self.sess.opts.debugging_opts.instrument_coverage\n+        if (self.sess.instrument_coverage()\n             || self.sess.opts.debugging_opts.profile\n             || self.sess.opts.cg.profile_generate.enabled())\n             && !self.sess.opts.debugging_opts.no_profiler_runtime"}, {"sha": "d05269913ebe4799a24877fb706be3455ebecd5a", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -1537,9 +1537,10 @@ pub enum StatementKind<'tcx> {\n     AscribeUserType(Box<(Place<'tcx>, UserTypeProjection)>, ty::Variance),\n \n     /// Marks the start of a \"coverage region\", injected with '-Zinstrument-coverage'. A\n-    /// `CoverageInfo` statement carries metadata about the coverage region, used to inject a coverage\n-    /// map into the binary. The `Counter` kind also generates executable code, to increment a\n-    /// counter varible at runtime, each time the code region is executed.\n+    /// `Coverage` statement carries metadata about the coverage region, used to inject a coverage\n+    /// map into the binary. If `Coverage::kind` is a `Counter`, the statement also generates\n+    /// executable code, to increment a counter varible at runtime, each time the code region is\n+    /// executed.\n     Coverage(Box<Coverage>),\n \n     /// Denotes a call to the intrinsic function copy_overlapping, where `src_dst` denotes the"}, {"sha": "0167655bee514a5e75d67c870b5ece83b522213b", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -84,7 +84,14 @@ impl<'tcx> MonoItem<'tcx> {\n             .debugging_opts\n             .inline_in_all_cgus\n             .unwrap_or_else(|| tcx.sess.opts.optimize != OptLevel::No)\n-            && !tcx.sess.link_dead_code();\n+            && !tcx.sess.link_dead_code()\n+            && !tcx.sess.instrument_coverage();\n+        // Disabled for `-Z instrument-coverage` because some LLVM optimizations can sometimes\n+        // break coverage results. A test that failed at certain optimization levels is now\n+        // validated at that optimization level (via `compile-flags` directive):\n+        //   * `src/test/run-make-fulldeps/coverage/closure.rs` broke with `-C opt-level=2`, and\n+        //     also required disabling `internalize_symbols` in\n+        //     `rustc_mir/monomorphize/partitioning/mod.rs`\n \n         match *self {\n             MonoItem::Fn(ref instance) => {"}, {"sha": "9be750264dd124790c295a3b3a99ac9e19aa49d8", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -328,15 +328,21 @@ rustc_queries! {\n \n     /// Returns the name of the file that contains the function body, if instrumented for coverage.\n     query covered_file_name(key: DefId) -> Option<Symbol> {\n-        desc { |tcx| \"retrieving the covered file name, if instrumented, for `{}`\", tcx.def_path_str(key) }\n+        desc {\n+            |tcx| \"retrieving the covered file name, if instrumented, for `{}`\",\n+            tcx.def_path_str(key)\n+        }\n         storage(ArenaCacheSelector<'tcx>)\n         cache_on_disk_if { key.is_local() }\n     }\n \n     /// Returns the `CodeRegions` for a function that has instrumented coverage, in case the\n     /// function was optimized out before codegen, and before being added to the Coverage Map.\n     query covered_code_regions(key: DefId) -> Vec<&'tcx mir::coverage::CodeRegion> {\n-        desc { |tcx| \"retrieving the covered `CodeRegion`s, if instrumented, for `{}`\", tcx.def_path_str(key) }\n+        desc {\n+            |tcx| \"retrieving the covered `CodeRegion`s, if instrumented, for `{}`\",\n+            tcx.def_path_str(key)\n+        }\n         storage(ArenaCacheSelector<'tcx>)\n         cache_on_disk_if { key.is_local() }\n     }"}, {"sha": "04f31ec3a33c755e0b54f07876710dbe495155f9", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -196,7 +196,13 @@ pub fn partition<'tcx>(\n \n     // Next we try to make as many symbols \"internal\" as possible, so LLVM has\n     // more freedom to optimize.\n-    if !tcx.sess.link_dead_code() {\n+    if !tcx.sess.link_dead_code() && !tcx.sess.instrument_coverage() {\n+        // Disabled for `-Z instrument-coverage` because some LLVM optimizations can sometimes\n+        // break coverage results. Tests that failed at certain optimization levels are now\n+        // validated at those optimization levels (via `compile-flags` directive); for example:\n+        //   * `src/test/run-make-fulldeps/coverage/async.rs` broke with `-C opt-level=1`\n+        //   * `src/test/run-make-fulldeps/coverage/closure.rs` broke with `-C opt-level=2`, and\n+        //     also required disabling `generate_gcu_internal_copies` in `rustc_middle/mir/mono.rs`\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_internalize_symbols\");\n         partitioner.internalize_symbols(cx, &mut post_inlining);\n     }"}, {"sha": "2ba9d1bdc0c003b89f1186ba5c2c86924a759ff0", "filename": "compiler/rustc_mir/src/transform/coverage/query.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -6,10 +6,9 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::def_id::DefId;\n \n-/// The `query` provider for `CoverageInfo`, requested by `codegen_coverage()` (to inject each\n-/// counter) and `FunctionCoverage::new()` (to extract the coverage map metadata from the MIR).\n+/// A `query` provider for retrieving coverage information injected into MIR.\n pub(crate) fn provide(providers: &mut Providers) {\n-    providers.coverageinfo = |tcx, def_id| coverageinfo_from_mir(tcx, def_id);\n+    providers.coverageinfo = |tcx, def_id| coverageinfo(tcx, def_id);\n     providers.covered_file_name = |tcx, def_id| covered_file_name(tcx, def_id);\n     providers.covered_code_regions = |tcx, def_id| covered_code_regions(tcx, def_id);\n }\n@@ -121,7 +120,7 @@ impl CoverageVisitor {\n     }\n }\n \n-fn coverageinfo_from_mir<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> CoverageInfo {\n+fn coverageinfo<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> CoverageInfo {\n     let mir_body = mir_body(tcx, def_id);\n \n     let mut coverage_visitor = CoverageVisitor {\n@@ -139,29 +138,22 @@ fn coverageinfo_from_mir<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> CoverageInfo\n }\n \n fn covered_file_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<Symbol> {\n-    let body = mir_body(tcx, def_id);\n-    for bb_data in body.basic_blocks().iter() {\n-        for statement in bb_data.statements.iter() {\n-            if let StatementKind::Coverage(box ref coverage) = statement.kind {\n-                if let Some(code_region) = coverage.code_region.as_ref() {\n-                    if is_inlined(body, statement) {\n-                        continue;\n+    if tcx.is_mir_available(def_id) {\n+        let body = mir_body(tcx, def_id);\n+        for bb_data in body.basic_blocks().iter() {\n+            for statement in bb_data.statements.iter() {\n+                if let StatementKind::Coverage(box ref coverage) = statement.kind {\n+                    if let Some(code_region) = coverage.code_region.as_ref() {\n+                        if is_inlined(body, statement) {\n+                            continue;\n+                        }\n+                        return Some(code_region.file_name);\n                     }\n-                    return Some(code_region.file_name);\n                 }\n             }\n         }\n     }\n-    None\n-}\n-\n-/// This function ensures we obtain the correct MIR for the given item irrespective of\n-/// whether that means const mir or runtime mir. For `const fn` this opts for runtime\n-/// mir.\n-fn mir_body<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx mir::Body<'tcx> {\n-    let id = ty::WithOptConstParam::unknown(def_id);\n-    let def = ty::InstanceDef::Item(id);\n-    tcx.instance_mir(def)\n+    return None;\n }\n \n fn covered_code_regions<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Vec<&'tcx CodeRegion> {\n@@ -188,3 +180,12 @@ fn is_inlined(body: &Body<'_>, statement: &Statement<'_>) -> bool {\n     let scope_data = &body.source_scopes[statement.source_info.scope];\n     scope_data.inlined.is_some() || scope_data.inlined_parent_scope.is_some()\n }\n+\n+/// This function ensures we obtain the correct MIR for the given item irrespective of\n+/// whether that means const mir or runtime mir. For `const fn` this opts for runtime\n+/// mir.\n+fn mir_body<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx mir::Body<'tcx> {\n+    let id = ty::WithOptConstParam::unknown(def_id);\n+    let def = ty::InstanceDef::Item(id);\n+    tcx.instance_mir(def)\n+}"}, {"sha": "e16981a050e497964691e793468999375f897094", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -313,11 +313,8 @@ fn mir_promoted(\n         &simplify::SimplifyCfg::new(\"promote-consts\"),\n     ];\n \n-    let opt_coverage: &[&dyn MirPass<'tcx>] = if tcx.sess.opts.debugging_opts.instrument_coverage {\n-        &[&coverage::InstrumentCoverage]\n-    } else {\n-        &[]\n-    };\n+    let opt_coverage: &[&dyn MirPass<'tcx>] =\n+        if tcx.sess.instrument_coverage() { &[&coverage::InstrumentCoverage] } else { &[] };\n \n     run_passes(tcx, &mut body, MirPhase::ConstPromotion, &[promote, opt_coverage]);\n "}, {"sha": "5027e882ff6d310dcbd96789e6e05360470842cb", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -184,6 +184,37 @@ pub enum MirSpanview {\n     Block,\n }\n \n+/// The different settings that the `-Z instrument-coverage` flag can have.\n+///\n+/// Coverage instrumentation now supports combining `-Z instrument-coverage`\n+/// with compiler and linker optimization (enabled with `-O` or `-C opt-level=1`\n+/// and higher). Nevertheless, there are many variables, depending on options\n+/// selected, code structure, and enabled attributes. If errors are encountered,\n+/// either while compiling or when generating `llvm-cov show` reports, consider\n+/// lowering the optimization level, including or excluding `-C link-dead-code`,\n+/// or using `-Z instrument-coverage=except-unused-functions` or `-Z\n+/// instrument-coverage=except-unused-generics`.\n+///\n+/// Note that `ExceptUnusedFunctions` means: When `mapgen.rs` generates the\n+/// coverage map, it will not attempt to generate synthetic functions for unused\n+/// (and not code-generated) functions (whether they are generic or not). As a\n+/// result, non-codegenned functions will not be included in the coverage map,\n+/// and will not appear, as covered or uncovered, in coverage reports.\n+///\n+/// `ExceptUnusedGenerics` will add synthetic functions to the coverage map,\n+/// unless the function has type parameters.\n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum InstrumentCoverage {\n+    /// Default `-Z instrument-coverage` or `-Z instrument-coverage=statement`\n+    All,\n+    /// `-Z instrument-coverage=except-unused-generics`\n+    ExceptUnusedGenerics,\n+    /// `-Z instrument-coverage=except-unused-functions`\n+    ExceptUnusedFunctions,\n+    /// `-Z instrument-coverage=off` (or `no`, etc.)\n+    Off,\n+}\n+\n #[derive(Clone, PartialEq, Hash)]\n pub enum LinkerPluginLto {\n     LinkerPlugin(PathBuf),\n@@ -1911,7 +1942,9 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         );\n     }\n \n-    if debugging_opts.instrument_coverage {\n+    if debugging_opts.instrument_coverage.is_some()\n+        && debugging_opts.instrument_coverage != Some(InstrumentCoverage::Off)\n+    {\n         if cg.profile_generate.enabled() || cg.profile_use.is_some() {\n             early_error(\n                 error_format,\n@@ -2298,9 +2331,9 @@ impl PpMode {\n /// how the hash should be calculated when adding a new command-line argument.\n crate mod dep_tracking {\n     use super::{\n-        CFGuard, CrateType, DebugInfo, ErrorOutputType, LinkerPluginLto, LtoCli, OptLevel,\n-        OutputTypes, Passes, SanitizerSet, SourceFileHashAlgorithm, SwitchWithOptPath,\n-        SymbolManglingVersion, TrimmedDefPaths,\n+        CFGuard, CrateType, DebugInfo, ErrorOutputType, InstrumentCoverage, LinkerPluginLto,\n+        LtoCli, OptLevel, OutputTypes, Passes, SanitizerSet, SourceFileHashAlgorithm,\n+        SwitchWithOptPath, SymbolManglingVersion, TrimmedDefPaths,\n     };\n     use crate::lint;\n     use crate::options::WasiExecModel;\n@@ -2364,6 +2397,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<WasiExecModel>);\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n     impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);\n+    impl_dep_tracking_hash_via_hash!(Option<InstrumentCoverage>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);\n     impl_dep_tracking_hash_via_hash!(Option<PathBuf>);\n     impl_dep_tracking_hash_via_hash!(CrateType);"}, {"sha": "dd2507c87f62e0de3e87d854b49573473a89a2ff", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -262,6 +262,7 @@ macro_rules! options {\n         pub const parse_linker_flavor: &str = ::rustc_target::spec::LinkerFlavor::one_of();\n         pub const parse_optimization_fuel: &str = \"crate=integer\";\n         pub const parse_mir_spanview: &str = \"`statement` (default), `terminator`, or `block`\";\n+        pub const parse_instrument_coverage: &str = \"`all` (default), `except-unused-generics`, `except-unused-functions`, or `off`\";\n         pub const parse_unpretty: &str = \"`string` or `string=string`\";\n         pub const parse_treat_err_as_bug: &str = \"either no value or a number bigger than 0\";\n         pub const parse_lto: &str =\n@@ -592,6 +593,41 @@ macro_rules! options {\n             true\n         }\n \n+        fn parse_instrument_coverage(slot: &mut Option<InstrumentCoverage>, v: Option<&str>) -> bool {\n+            if v.is_some() {\n+                let mut bool_arg = None;\n+                if parse_opt_bool(&mut bool_arg, v) {\n+                    *slot = if bool_arg.unwrap() {\n+                        Some(InstrumentCoverage::All)\n+                    } else {\n+                        None\n+                    };\n+                    return true\n+                }\n+            }\n+\n+            let v = match v {\n+                None => {\n+                    *slot = Some(InstrumentCoverage::All);\n+                    return true;\n+                }\n+                Some(v) => v,\n+            };\n+\n+            *slot = Some(match v {\n+                \"all\" => InstrumentCoverage::All,\n+                \"except-unused-generics\" | \"except_unused_generics\" => {\n+                    InstrumentCoverage::ExceptUnusedGenerics\n+                }\n+                \"except-unused-functions\" | \"except_unused_functions\" => {\n+                    InstrumentCoverage::ExceptUnusedFunctions\n+                }\n+                \"off\" | \"no\" | \"n\" | \"false\" | \"0\" => InstrumentCoverage::Off,\n+                _ => return false,\n+            });\n+            true\n+        }\n+\n         fn parse_treat_err_as_bug(slot: &mut Option<NonZeroUsize>, v: Option<&str>) -> bool {\n             match v {\n                 Some(s) => { *slot = s.parse().ok(); slot.is_some() }\n@@ -967,12 +1003,14 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"control whether `#[inline]` functions are in all CGUs\"),\n     input_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"gather statistics about the input (default: no)\"),\n-    instrument_coverage: bool = (false, parse_bool, [TRACKED],\n+    instrument_coverage: Option<InstrumentCoverage> = (None, parse_instrument_coverage, [TRACKED],\n         \"instrument the generated code to support LLVM source-based code coverage \\\n         reports (note, the compiler build config must include `profiler = true`, \\\n         and is mutually exclusive with `-C profile-generate`/`-C profile-use`); \\\n         implies `-Z symbol-mangling-version=v0`; disables/overrides some Rust \\\n-        optimizations (default: no)\"),\n+        optimizations. Optional values are: `=all` (default coverage), \\\n+        `=except-unused-generics`, `=except-unused-functions`, or `=off` \\\n+        (default: instrument-coverage=off)\"),\n     instrument_mcount: bool = (false, parse_bool, [TRACKED],\n         \"insert function instrument code for mcount-based tracing (default: no)\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "f8ec00eb8aa2de06593edc001e4ca20feb2bb085", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -1150,6 +1150,21 @@ impl Session {\n         self.opts.cg.link_dead_code.unwrap_or(false)\n     }\n \n+    pub fn instrument_coverage(&self) -> bool {\n+        self.opts.debugging_opts.instrument_coverage.unwrap_or(config::InstrumentCoverage::Off)\n+            != config::InstrumentCoverage::Off\n+    }\n+\n+    pub fn instrument_coverage_except_unused_generics(&self) -> bool {\n+        self.opts.debugging_opts.instrument_coverage.unwrap_or(config::InstrumentCoverage::Off)\n+            == config::InstrumentCoverage::ExceptUnusedGenerics\n+    }\n+\n+    pub fn instrument_coverage_except_unused_functions(&self) -> bool {\n+        self.opts.debugging_opts.instrument_coverage.unwrap_or(config::InstrumentCoverage::Off)\n+            == config::InstrumentCoverage::ExceptUnusedFunctions\n+    }\n+\n     pub fn mark_attr_known(&self, attr: &Attribute) {\n         self.known_attrs.lock().mark(attr)\n     }"}, {"sha": "f69674ea422b07066435e7ec2df0dc31430a726d", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -2875,7 +2875,19 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                     .emit();\n                     InlineAttr::None\n                 } else if list_contains_name(&items[..], sym::always) {\n-                    InlineAttr::Always\n+                    if tcx.sess.instrument_coverage() {\n+                        // Forced inlining will discard functions marked with `#[inline(always)]`.\n+                        // If `-Z instrument-coverage` is enabled, the generated coverage map may\n+                        // hold references to functions that no longer exist, causing errors in\n+                        // coverage reports. (Note, this fixes #82875. I added some tests that\n+                        // also include `#[inline(always)]` functions, used and unused, and within\n+                        // and across crates, but could not reproduce the reported error in the\n+                        // `rustc` test suite. I am able to reproduce the error, following the steps\n+                        // described in #82875, and this change does fix that issue.)\n+                        InlineAttr::Hint\n+                    } else {\n+                        InlineAttr::Always\n+                    }\n                 } else if list_contains_name(&items[..], sym::never) {\n                     InlineAttr::Never\n                 } else {"}, {"sha": "86af7e41ae15b40efc49cc1a86d55978e5628f5f", "filename": "src/test/run-make-fulldeps/coverage-llvmir/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -17,7 +17,7 @@ else\n \tCOMDAT_IF_SUPPORTED=, comdat\n endif\n \n-DEFINE_INTERNAL=define internal\n+DEFINE_INTERNAL=define hidden\n \n ifdef IS_WINDOWS\n \tLLVM_FILECHECK_OPTIONS=\\"}, {"sha": "dd5e28b449cd492a96d144f2e153ac48d7e531ca", "filename": "src/test/run-make-fulldeps/coverage-reports/Makefile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -59,7 +59,7 @@ endif\n # if and when we allow `llvm-cov` to produce results for multiple files. Note, the path separators\n # appear to be normalized to `/` in those files, thankfully.)\n LLVM_COV_IGNORE_FILES=\\\n-\t--ignore-filename-regex=uses_crate.rs\n+\t--ignore-filename-regex='(uses_crate.rs|uses_inline_crate.rs)'\n \n # When generating `expected_*` results (using `x.py test --bless`), the `--debug` flag is forced.\n # If assertions are disabled, the command will fail with an error, rather than attempt to generate\n@@ -82,13 +82,13 @@ endif\n %: $(SOURCEDIR)/lib/%.rs\n \t# Compile the test library with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/lib/$@.rs \\\n-\t\t\t$$( sed -nE 's#^// compile-flags:(.*)#\\1# p' $(SOURCEDIR)/lib/$@.rs) \\\n+\t\t\t$$( sed -n 's/^\\/\\/ compile-flags: \\([^#]*\\).*/\\1/p' $(SOURCEDIR)/lib/$@.rs ) \\\n \t\t\t--crate-type rlib -Zinstrument-coverage\n \n %: $(SOURCEDIR)/%.rs\n \t# Compile the test program with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/$@.rs \\\n-\t\t\t$$( sed -nE 's#^// compile-flags:(.*)#\\1# p' $(SOURCEDIR)/$@.rs) \\\n+\t\t\t$$( sed -n 's/^\\/\\/ compile-flags: \\([^#]*\\).*/\\1/p' $(SOURCEDIR)/$@.rs ) \\\n \t\t\t-L \"$(TMPDIR)\" -Zinstrument-coverage\n \n \t# Run it in order to generate some profiling data,\n@@ -107,7 +107,7 @@ endif\n \t# Run it through rustdoc as well to cover doctests\n \tLLVM_PROFILE_FILE=\"$(TMPDIR)\"/$@-%p.profraw \\\n \t\t\t$(RUSTDOC) --crate-name workaround_for_79771 --test $(SOURCEDIR)/$@.rs \\\n-\t\t\t$$( sed -nE 's#^// compile-flags:(.*)#\\1# p' $(SOURCEDIR)/$@.rs) \\\n+\t\t\t$$( sed -n 's/^\\/\\/ compile-flags: \\([^#]*\\).*/\\1/p' $(SOURCEDIR)/$@.rs ) \\\n \t\t\t-L \"$(TMPDIR)\" -Zinstrument-coverage \\\n \t\t\t-Z unstable-options --persist-doctests=$(TMPDIR)/rustdoc-$@\n "}, {"sha": "d9097bb50e5a01ff153329ec201c2b0bd6fd5bf5", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.async.txt", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -1,6 +1,6 @@\n     1|       |#![allow(unused_assignments, dead_code)]\n     2|       |\n-    3|       |// compile-flags: --edition=2018\n+    3|       |// compile-flags: --edition=2018 -C opt-level=1 # fix in rustc_mir/monomorphize/partitioning/mod.rs\n     4|       |\n     5|      1|async fn c(x: u8) -> u8 {\n     6|      1|    if x == 8 {\n@@ -10,7 +10,7 @@\n    10|       |    }\n    11|      1|}\n    12|       |\n-   13|      0|async fn d() -> u8 { 1 }\n+   13|       |async fn d() -> u8 { 1 } // should have a coverage count `0` (see below)\n    14|       |\n    15|      0|async fn e() -> u8 { 1 } // unused function; executor does not block on `g()`\n    16|       |\n@@ -132,4 +132,15 @@\n   126|       |        }\n   127|      1|    }\n   128|       |}\n+  129|       |\n+  130|       |// `llvm-cov show` shows no coverage results for the `d()`, even though the\n+  131|       |// crate's LLVM IR shows the function exists and has an InstrProf PGO counter,\n+  132|       |// and appears to be registered like all other counted functions.\n+  133|       |//\n+  134|       |// `llvm-cov show --debug` output shows there is at least one `Counter` for this\n+  135|       |// line, but counters do not appear in the `Combined regions` section (unlike\n+  136|       |// `f()`, which is similar, but does appear in `Combined regions`, and does show\n+  137|       |// coverage). The only difference is, `f()` is awaited, but the call to await\n+  138|       |// `d()` is not reached. (Note: `d()` will appear in coverage if the test is\n+  139|       |// modified to cause it to be awaited.)\n "}, {"sha": "a39e3a16fc64ba088e3c9795d834a18df7552530", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.closure.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.closure.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.closure.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.closure.txt?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -1,5 +1,5 @@\n     1|       |#![allow(unused_assignments, unused_variables)]\n-    2|       |\n+    2|       |// compile-flags: -C opt-level=2 # fix described in rustc_middle/mir/mono.rs\n     3|      1|fn main() {\n     4|      1|    // Initialize test constants in a way that cannot be determined at compile time, to ensure\n     5|      1|    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from"}, {"sha": "7d2abe05973e10a0869e7250d36f228f0f96f9ab", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.doctest.txt", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -23,6 +23,12 @@\n    22|      1|//! ```\n    23|      2|//! #[derive(Debug, PartialEq)]\n                        ^1\n+  ------------------\n+  | Unexecuted instantiation: <rust_out::main::_doctest_main____coverage_doctest_rs_22_0::SomeError as core::cmp::PartialEq>::ne\n+  ------------------\n+  | <rust_out::main::_doctest_main____coverage_doctest_rs_22_0::SomeError as core::cmp::PartialEq>::eq:\n+  |   23|      2|//! #[derive(Debug, PartialEq)]\n+  ------------------\n    24|      1|//! struct SomeError {\n    25|      1|//!     msg: String,\n    26|      1|//! }"}, {"sha": "6f28c08909387ba58c166cf03499bf5112c29404", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.generics.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generics.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generics.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generics.txt?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -29,12 +29,12 @@\n    18|      2|        println!(\"BOOM times {}!!!\", self.strength);\n    19|      2|    }\n   ------------------\n-  | <generics::Firework<i32> as core::ops::drop::Drop>::drop:\n+  | <generics::Firework<f64> as core::ops::drop::Drop>::drop:\n   |   17|      1|    fn drop(&mut self) {\n   |   18|      1|        println!(\"BOOM times {}!!!\", self.strength);\n   |   19|      1|    }\n   ------------------\n-  | <generics::Firework<f64> as core::ops::drop::Drop>::drop:\n+  | <generics::Firework<i32> as core::ops::drop::Drop>::drop:\n   |   17|      1|    fn drop(&mut self) {\n   |   18|      1|        println!(\"BOOM times {}!!!\", self.strength);\n   |   19|      1|    }"}, {"sha": "4e4dde46b344b8cef40a5b8d5b3bde2f594052b7", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.partial_eq.txt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.partial_eq.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.partial_eq.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.partial_eq.txt?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -3,6 +3,11 @@\n     3|       |\n     4|      2|#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n                        ^0            ^0      ^0 ^0  ^1       ^1 ^0^0\n+  ------------------\n+  | Unexecuted instantiation: <partial_eq::Version as core::cmp::PartialEq>::ne\n+  ------------------\n+  | Unexecuted instantiation: <partial_eq::Version as core::cmp::PartialEq>::eq\n+  ------------------\n     5|       |pub struct Version {\n     6|       |    major: usize,\n     7|       |    minor: usize,"}, {"sha": "15fcf21c0ef3c2a4cc793587832ca3cc776f4f93", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.unused.txt", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.unused.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.unused.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.unused.txt?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,62 @@\n+    1|      2|fn foo<T>(x: T) {\n+    2|      2|    let mut i = 0;\n+    3|     22|    while i < 10 {\n+    4|     20|        i != 0 || i != 0;\n+                                ^2\n+    5|     20|        i += 1;\n+    6|       |    }\n+    7|      2|}\n+  ------------------\n+  | unused::foo::<f32>:\n+  |    1|      1|fn foo<T>(x: T) {\n+  |    2|      1|    let mut i = 0;\n+  |    3|     11|    while i < 10 {\n+  |    4|     10|        i != 0 || i != 0;\n+  |                                ^1\n+  |    5|     10|        i += 1;\n+  |    6|       |    }\n+  |    7|      1|}\n+  ------------------\n+  | unused::foo::<u32>:\n+  |    1|      1|fn foo<T>(x: T) {\n+  |    2|      1|    let mut i = 0;\n+  |    3|     11|    while i < 10 {\n+  |    4|     10|        i != 0 || i != 0;\n+  |                                ^1\n+  |    5|     10|        i += 1;\n+  |    6|       |    }\n+  |    7|      1|}\n+  ------------------\n+    8|       |\n+    9|      0|fn unused_template_func<T>(x: T) {\n+   10|      0|    let mut i = 0;\n+   11|      0|    while i < 10 {\n+   12|      0|        i != 0 || i != 0;\n+   13|      0|        i += 1;\n+   14|       |    }\n+   15|      0|}\n+   16|       |\n+   17|      0|fn unused_func(mut a: u32) {\n+   18|      0|    if a != 0 {\n+   19|      0|        a += 1;\n+   20|      0|    }\n+   21|      0|}\n+   22|       |\n+   23|      0|fn unused_func2(mut a: u32) {\n+   24|      0|    if a != 0 {\n+   25|      0|        a += 1;\n+   26|      0|    }\n+   27|      0|}\n+   28|       |\n+   29|      0|fn unused_func3(mut a: u32) {\n+   30|      0|    if a != 0 {\n+   31|      0|        a += 1;\n+   32|      0|    }\n+   33|      0|}\n+   34|       |\n+   35|      1|fn main() -> Result<(), u8> {\n+   36|      1|    foo::<u32>(0);\n+   37|      1|    foo::<f32>(0.0);\n+   38|      1|    Ok(())\n+   39|      1|}\n+"}, {"sha": "380869d62a8b66d939b7a8afcb902bc84d383f7e", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_crate.txt", "status": "modified", "additions": 51, "deletions": 42, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -1,5 +1,5 @@\n     1|       |#![allow(unused_assignments, unused_variables)]\n-    2|       |\n+    2|       |// compile-flags: -C opt-level=3 # validates coverage now works with optimizations\n     3|       |use std::fmt::Debug;\n     4|       |\n     5|      1|pub fn used_function() {\n@@ -29,7 +29,9 @@\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}\n   ------------------\n-   20|       |\n+  | Unexecuted instantiation: used_crate::used_only_from_bin_crate_generic_function::<_>\n+  ------------------\n+   20|       |// Expect for above function: `Unexecuted instantiation` (see below)\n    21|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n    22|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n    23|      2|}\n@@ -63,6 +65,17 @@\n    29|      2|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n    30|      2|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n    31|      2|}\n+  ------------------\n+  | used_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::<&str>:\n+  |   29|      1|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   30|      1|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   31|      1|}\n+  ------------------\n+  | used_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::<&str>:\n+  |   29|      1|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   30|      1|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   31|      1|}\n+  ------------------\n    32|       |\n    33|      0|pub fn unused_generic_function<T: Debug>(arg: T) {\n    34|      0|    println!(\"unused_generic_function with {:?}\", arg);\n@@ -94,46 +107,42 @@\n    60|      1|    used_only_from_this_lib_crate_generic_function(\"used ONLY from library used_crate.rs\");\n    61|      1|}\n    62|       |\n-   63|       |// FIXME(#79651): `used_from_bin_crate_and_lib_crate_generic_function()` is covered and executed\n-   64|       |// `2` times, but the coverage output also shows (at the bottom of the coverage report):\n-   65|       |//  ------------------\n-   66|       |//  | Unexecuted instantiation: <some function name here>\n-   67|       |//  ------------------\n-   68|       |//\n-   69|       |// Note, the function name shown in the error seems to change depending on the structure of the\n-   70|       |// code, for some reason, including:\n-   71|       |//\n-   72|       |// * used_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>\n-   73|       |// * used_crate::use_this_lib_crate\n+   63|       |// FIXME(#79651): \"Unexecuted instantiation\" errors appear in coverage results,\n+   64|       |// for example:\n+   65|       |//\n+   66|       |// | Unexecuted instantiation: used_crate::used_only_from_bin_crate_generic_function::<_>\n+   67|       |//\n+   68|       |// These notices appear when `llvm-cov` shows instantiations. This may be a\n+   69|       |// default option, but it can be suppressed with:\n+   70|       |//\n+   71|       |// ```shell\n+   72|       |// $ `llvm-cov show --show-instantiations=0 ...`\n+   73|       |// ```\n    74|       |//\n-   75|       |// The `Unexecuted instantiation` error may be related to more than one generic function. Since the\n-   76|       |// reporting is not consistent, it may not be obvious if there are multiple problems here; however,\n-   77|       |// `used_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>` (which I have seen\n-   78|       |// with this error) is the only generic function missing instantiaion coverage counts.\n+   75|       |// The notice is triggered because the function is unused by the library itself,\n+   76|       |// and when the library is compiled, a synthetic function is generated, so\n+   77|       |// unused function coverage can be reported. Coverage can be skipped for unused\n+   78|       |// generic functions with:\n    79|       |//\n-   80|       |// The `&str` variant was called from within this `lib` crate, and the `bin` crate also calls this\n-   81|       |// function, but with `T` type `&Vec<i32>`.\n-   82|       |//\n-   83|       |// I believe the reason is that one or both crates are generating `Zero` counters for what it\n-   84|       |// believes are \"Unreachable\" instantiations, but those instantiations are counted from the\n-   85|       |// coverage map in the other crate.\n-   86|       |//\n-   87|       |// See `add_unreachable_coverage()` in `mapgen.rs` for more on how these `Zero` counters are added\n-   88|       |// for what the funciton believes are `DefId`s that did not get codegenned. I suspect the issue\n-   89|       |// may be related to this process, but this needs to be confirmed. It may not be possible to know\n-   90|       |// for sure if a function is truly unused and should be reported with `Zero` coverage if it may\n-   91|       |// still get used from an external crate. (Something to look at: If the `DefId` in MIR corresponds\n-   92|       |// _only_ to the generic function without type parameters, is the `DefId` in the codegenned set,\n-   93|       |// instantiated with one of the type parameters (in either or both crates) a *different* `DefId`?\n-   94|       |// If so, `add_unreachable_coverage()` would assume the MIR `DefId` was uncovered, and would add\n-   95|       |// unreachable coverage.\n-   96|       |//\n-   97|       |// I didn't think they could be different, but if they can, we would need to find the `DefId` for\n-   98|       |// the generic function MIR and include it in the set of \"codegenned\" DefIds if any instantiation\n-   99|       |// of that generic function does exist.\n-  100|       |//\n-  101|       |// Note, however, for `used_with_same_type_from_bin_crate_and_lib_crate_generic_function()` both\n-  102|       |// crates use this function with the same type variant. The function does not have multiple\n-  103|       |// instantiations, so the coverage analysis is not confused. No \"Unexecuted instantiations\" errors\n-  104|       |// are reported.\n+   80|       |// ```shell\n+   81|       |// $ `rustc -Z instrument-coverage=except-unused-generics ...`\n+   82|       |// ```\n+   83|       |//\n+   84|       |// Even though this function is used by `uses_crate.rs` (and\n+   85|       |// counted), with substitutions for `T`, those instantiations are only generated\n+   86|       |// when the generic function is actually used (from the binary, not from this\n+   87|       |// library crate). So the test result shows coverage for all instantiated\n+   88|       |// versions and their generic type substitutions, plus the `Unexecuted\n+   89|       |// instantiation` message for the non-substituted version. This is valid, but\n+   90|       |// unfortunately a little confusing.\n+   91|       |//\n+   92|       |// The library crate has its own coverage map, and the only way to show unused\n+   93|       |// coverage of a generic function is to include the generic function in the\n+   94|       |// coverage map, marked as an \"unused function\". If the library were used by\n+   95|       |// another binary that never used this generic function, then it would be valid\n+   96|       |// to show the unused generic, with unknown substitution (`_`).\n+   97|       |//\n+   98|       |// The alternative is to exclude all generics from being included in the \"unused\n+   99|       |// functions\" list, which would then omit coverage results for\n+  100|       |// `unused_generic_function<T>()`, below.\n "}, {"sha": "0853dc9c014e5f34739e896aadfe2b0f08026164", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_inline_crate.txt", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,156 @@\n+    1|       |#![allow(unused_assignments, unused_variables)]\n+    2|       |\n+    3|       |// compile-flags: -C opt-level=3 # validates coverage now works with optimizations\n+    4|       |\n+    5|       |use std::fmt::Debug;\n+    6|       |\n+    7|      1|pub fn used_function() {\n+    8|       |    // Initialize test constants in a way that cannot be determined at compile time, to ensure\n+    9|       |    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from\n+   10|       |    // dependent conditions.\n+   11|      1|    let is_true = std::env::args().len() == 1;\n+   12|      1|    let mut countdown = 0;\n+   13|      1|    if is_true {\n+   14|      1|        countdown = 10;\n+   15|      1|    }\n+                   ^0\n+   16|      1|    use_this_lib_crate();\n+   17|      1|}\n+   18|       |\n+   19|       |#[inline(always)]\n+   20|      1|pub fn used_inline_function() {\n+   21|       |    // Initialize test constants in a way that cannot be determined at compile time, to ensure\n+   22|       |    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from\n+   23|       |    // dependent conditions.\n+   24|      1|    let is_true = std::env::args().len() == 1;\n+   25|      1|    let mut countdown = 0;\n+   26|      1|    if is_true {\n+   27|      1|        countdown = 10;\n+   28|      1|    }\n+                   ^0\n+   29|      1|    use_this_lib_crate();\n+   30|      1|}\n+  ------------------\n+  | used_inline_crate::used_inline_function:\n+  |   20|      1|pub fn used_inline_function() {\n+  |   21|       |    // Initialize test constants in a way that cannot be determined at compile time, to ensure\n+  |   22|       |    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from\n+  |   23|       |    // dependent conditions.\n+  |   24|      1|    let is_true = std::env::args().len() == 1;\n+  |   25|      1|    let mut countdown = 0;\n+  |   26|      1|    if is_true {\n+  |   27|      1|        countdown = 10;\n+  |   28|      1|    }\n+  |                   ^0\n+  |   29|      1|    use_this_lib_crate();\n+  |   30|      1|}\n+  ------------------\n+  | Unexecuted instantiation: used_inline_crate::used_inline_function\n+  ------------------\n+   31|       |// Expect for above function:\n+   32|       |//\n+   33|       |// | Unexecuted instantiation: used_crate::used_only_from_bin_crate_generic_function::<_>\n+   34|       |//\n+   35|       |// With `#[inline(always)]` this function is instantiated twice, in both the library crate (which\n+   36|       |// does not use it) and the `uses_inline_crate` binary (which does use/call it).\n+   37|       |\n+   38|       |#[inline(always)]\n+   39|      2|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n+   40|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n+   41|      2|}\n+  ------------------\n+  | used_inline_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n+  |   39|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n+  |   40|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n+  |   41|      1|}\n+  ------------------\n+  | used_inline_crate::used_only_from_bin_crate_generic_function::<&str>:\n+  |   39|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n+  |   40|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n+  |   41|      1|}\n+  ------------------\n+  | Unexecuted instantiation: used_inline_crate::used_only_from_bin_crate_generic_function::<_>\n+  ------------------\n+   42|       |// Expect for above function: `Unexecuted instantiation` (see notes in `used_crate.rs`)\n+   43|       |\n+   44|       |#[inline(always)]\n+   45|      4|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n+   46|      4|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n+   47|      4|}\n+  ------------------\n+  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n+  |   45|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   46|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n+  |   47|      2|}\n+  ------------------\n+  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n+  |   45|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   46|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n+  |   47|      2|}\n+  ------------------\n+   48|       |\n+   49|       |#[inline(always)]\n+   50|      3|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+   51|      3|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+   52|      3|}\n+  ------------------\n+  | used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n+  |   50|      1|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   51|      1|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   52|      1|}\n+  ------------------\n+  | used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>:\n+  |   50|      2|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   51|      2|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   52|      2|}\n+  ------------------\n+   53|       |\n+   54|       |#[inline(always)]\n+   55|      3|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+   56|      3|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+   57|      3|}\n+  ------------------\n+  | used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::<&str>:\n+  |   55|      1|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   56|      1|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   57|      1|}\n+  ------------------\n+  | used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::<&str>:\n+  |   55|      2|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   56|      2|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   57|      2|}\n+  ------------------\n+   58|       |\n+   59|       |#[inline(always)]\n+   60|      0|pub fn unused_generic_function<T: Debug>(arg: T) {\n+   61|      0|    println!(\"unused_generic_function with {:?}\", arg);\n+   62|      0|}\n+   63|       |\n+   64|       |#[inline(always)]\n+   65|      0|pub fn unused_function() {\n+   66|      0|    let is_true = std::env::args().len() == 1;\n+   67|      0|    let mut countdown = 2;\n+   68|      0|    if !is_true {\n+   69|      0|        countdown = 20;\n+   70|      0|    }\n+   71|      0|}\n+   72|       |\n+   73|       |#[inline(always)]\n+   74|      0|fn unused_private_function() {\n+   75|      0|    let is_true = std::env::args().len() == 1;\n+   76|      0|    let mut countdown = 2;\n+   77|      0|    if !is_true {\n+   78|      0|        countdown = 20;\n+   79|      0|    }\n+   80|      0|}\n+   81|       |\n+   82|      2|fn use_this_lib_crate() {\n+   83|      2|    used_from_bin_crate_and_lib_crate_generic_function(\"used from library used_crate.rs\");\n+   84|      2|    used_with_same_type_from_bin_crate_and_lib_crate_generic_function(\n+   85|      2|        \"used from library used_crate.rs\",\n+   86|      2|    );\n+   87|      2|    let some_vec = vec![5, 6, 7, 8];\n+   88|      2|    used_only_from_this_lib_crate_generic_function(some_vec);\n+   89|      2|    used_only_from_this_lib_crate_generic_function(\"used ONLY from library used_crate.rs\");\n+   90|      2|}\n+"}, {"sha": "b3d1009dbd09260611bb6c4e7439e3af1ee60214", "filename": "src/test/run-make-fulldeps/coverage-spanview/Makefile", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2FMakefile?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -38,13 +38,11 @@ endif\n %: $(SOURCEDIR)/lib/%.rs\n \t# Compile the test library with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/lib/$@.rs \\\n-\t\t\t$$( sed -nE 's#^// compile-flags:(.*)#\\1# p' $(SOURCEDIR)/lib/$@.rs) \\\n+\t    $$( sed -n 's/^\\/\\/ compile-flags: \\([^#]*\\).*/\\1/p' $(SOURCEDIR)/lib/$@.rs ) \\\n \t\t\t--crate-type rlib \\\n \t\t\t-Ztrim-diagnostic-paths=no \\\n-\t\t\t-Zinstrument-coverage \\\n-\t\t\t-Zdump-mir=InstrumentCoverage \\\n-\t\t\t-Zdump-mir-spanview \\\n-\t\t\t-Zdump-mir-dir=\"$(TMPDIR)\"/mir_dump.$@\n+\t\t\t-Zdump-mir=InstrumentCoverage -Zdump-mir-spanview -Zdump-mir-dir=\"$(TMPDIR)\"/mir_dump.$@ \\\n+\t\t\t-Zinstrument-coverage\n \n \tfor path in \"$(TMPDIR)\"/mir_dump.$@/*; do \\\n \t\tfile=\"$$(basename \"$$path\")\"; \\\n@@ -68,13 +66,11 @@ endif\n %: $(SOURCEDIR)/%.rs\n \t# Compile the test program with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/$@.rs \\\n-\t\t\t$$( sed -nE 's#^// compile-flags:(.*)#\\1# p' $(SOURCEDIR)/$@.rs) \\\n+\t\t\t$$( sed -n 's/^\\/\\/ compile-flags: \\([^#]*\\).*/\\1/p' $(SOURCEDIR)/$@.rs ) \\\n \t\t\t-L \"$(TMPDIR)\" \\\n \t\t\t-Ztrim-diagnostic-paths=no \\\n-\t\t\t-Zinstrument-coverage \\\n-\t\t\t-Zdump-mir=InstrumentCoverage \\\n-\t\t\t-Zdump-mir-spanview \\\n-\t\t\t-Zdump-mir-dir=\"$(TMPDIR)\"/mir_dump.$@\n+\t\t\t-Zdump-mir=InstrumentCoverage -Zdump-mir-spanview -Zdump-mir-dir=\"$(TMPDIR)\"/mir_dump.$@ \\\n+\t\t\t-Zinstrument-coverage\n \n \tfor path in \"$(TMPDIR)\"/mir_dump.$@/*; do \\\n \t\tfile=\"$$(basename \"$$path\")\"; \\"}, {"sha": "1c63875a8be9bb7a94b609697ee325ac05ae0d13", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.async/async.i-{closure#0}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.i-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.i-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.i-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -74,18 +74,16 @@\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"42:11-42:12: @0[3]: FakeRead(ForMatchedPlace, _3)\">                    // (b) the open brace for the function body, counted once when the body is</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"42:11-42:12: @0[3]: FakeRead(ForMatchedPlace, _3)\">                    // executed asynchronously.</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"42:11-42:12: @0[3]: FakeRead(ForMatchedPlace, _3)\">    match x<span class=\"annotation\">\u2989@0,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:10: @18[3]: _4 = _3\"><span class=\"annotation\">@18,20\u298a</span>y<span class=\"annotation\">\u2989@18,20</span></span></span><span class=\"code\" style=\"--layer: 0\"> if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"43:16-43:17: @3[6]: _9 = _3\n-43:14-43:18: @3.Call: _8 = c(move _9) -&gt; [return: bb4, unwind: bb88]\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:10: @17[3]: _4 = _3\"><span class=\"annotation\">@17,19\u298a</span>y<span class=\"annotation\">\u2989@17,19</span></span></span><span class=\"code\" style=\"--layer: 0\"> if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"43:16-43:17: @3[6]: _9 = _3\n+43:14-43:18: @3.Call: _8 = c(move _9) -&gt; [return: bb4, unwind: bb82]\n 43:14-43:18: @4[1]: FakeRead(ForMatchedPlace, _8)\"><span class=\"annotation\">@0,3,4\u298a</span>c(x)<span class=\"annotation\">\u2989@0,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">.await == </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"43:28-43:29: @15[3]: _26 = (*_5)\n-43:28-43:33: @15[4]: _27 = CheckedAdd(_26, const 1_u8)\n-43:28-43:33: @16[0]: _25 = move (_27.0: u8)\"><span class=\"annotation\">@10,13,15,16,17\u298a</span>y + 1<span class=\"annotation\">\u2989@10,13,15,16,17</span></span></span><span class=\"code\" style=\"--layer: 0\"> =&gt; { </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"43:39-43:42: @18.Call: _29 = d() -&gt; [return: bb20, unwind: bb79]\n-43:39-43:42: @20[0]: FakeRead(ForMatchedPlace, _29)\"><span class=\"annotation\">@18,20\u298a</span>d()<span class=\"annotation\">\u2989@18,20</span></span></span><span class=\"code\" style=\"--layer: 0\">.await; }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"44:9-44:10: @48[3]: _44 = _3\"><span class=\"annotation\">@48\u298a</span>y<span class=\"annotation\">\u2989@48</span></span></span><span class=\"code\" style=\"--layer: 0\"> if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"44:14-44:17: @33.Call: _48 = f() -&gt; [return: bb34, unwind: bb72]\n-44:14-44:17: @34[0]: FakeRead(ForMatchedPlace, _48)\"><span class=\"annotation\">@1,33,34\u298a</span>f()<span class=\"annotation\">\u2989@1,33,34</span></span></span><span class=\"code\" style=\"--layer: 0\">.await == </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"44:27-44:28: @45[3]: _64 = (*_45)\n-44:27-44:32: @45[4]: _65 = CheckedAdd(_64, const 1_u8)\n-44:27-44:32: @46[0]: _63 = move (_65.0: u8)\"><span class=\"annotation\">@40,43,45,46,47\u298a</span>y + 1<span class=\"annotation\">\u2989@40,43,45,46,47</span></span></span><span class=\"code\" style=\"--layer: 0\"> =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"44:36-44:38: @48[4]: _0 = ()\"><span class=\"annotation\">@48\u298a</span>()<span class=\"annotation\">\u2989@48</span></span></span><span class=\"code\" style=\"--layer: 0\">,</span></span>\n+43:28-43:33: @15[4]: _25 = Add(move _26, const 1_u8)\"><span class=\"annotation\">@10,13,15,16\u298a</span>y + 1<span class=\"annotation\">\u2989@10,13,15,16</span></span></span><span class=\"code\" style=\"--layer: 0\"> =&gt; { </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"43:39-43:42: @17.Call: _28 = d() -&gt; [return: bb19, unwind: bb75]\n+43:39-43:42: @19[0]: FakeRead(ForMatchedPlace, _28)\"><span class=\"annotation\">@17,19\u298a</span>d()<span class=\"annotation\">\u2989@17,19</span></span></span><span class=\"code\" style=\"--layer: 0\">.await; }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"44:9-44:10: @46[3]: _43 = _3\"><span class=\"annotation\">@46\u298a</span>y<span class=\"annotation\">\u2989@46</span></span></span><span class=\"code\" style=\"--layer: 0\"> if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"44:14-44:17: @32.Call: _47 = f() -&gt; [return: bb33, unwind: bb68]\n+44:14-44:17: @33[0]: FakeRead(ForMatchedPlace, _47)\"><span class=\"annotation\">@1,32,33\u298a</span>f()<span class=\"annotation\">\u2989@1,32,33</span></span></span><span class=\"code\" style=\"--layer: 0\">.await == </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"44:27-44:28: @44[3]: _63 = (*_44)\n+44:27-44:32: @44[4]: _62 = Add(move _63, const 1_u8)\"><span class=\"annotation\">@39,42,44,45\u298a</span>y + 1<span class=\"annotation\">\u2989@39,42,44,45</span></span></span><span class=\"code\" style=\"--layer: 0\"> =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"44:36-44:38: @46[4]: _0 = ()\"><span class=\"annotation\">@46\u298a</span>()<span class=\"annotation\">\u2989@46</span></span></span><span class=\"code\" style=\"--layer: 0\">,</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"45:14-45:16: @2[0]: _0 = ()\"><span class=\"annotation\">@2\u298a</span>()<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\">,</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"47:2-47:2: @51.Return: return\"><span class=\"annotation\">@50,51\u298a</span>\u2038<span class=\"annotation\">\u2989@50,51</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"47:2-47:2: @49.Return: return\"><span class=\"annotation\">@48,49\u298a</span>\u2038<span class=\"annotation\">\u2989@48,49</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "2b43c7bd25d90bcbf8cf6bc533f69380c06216ab", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.async/async.j.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.j.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.j.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.j.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -69,7 +69,7 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 48\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"68:11-68:12: @0[0]: FakeRead(ForMatchedPlace, _1)\"><span class=\"annotation\">@0,3,4,5\u298a</span>fn j(x: u8) {</span></span>\n+<div class=\"code\" style=\"counter-reset: line 48\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"68:11-68:12: @0[0]: FakeRead(ForMatchedPlace, _1)\"><span class=\"annotation\">@0,3,4\u298a</span>fn j(x: u8) {</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"68:11-68:12: @0[0]: FakeRead(ForMatchedPlace, _1)\">    // non-async versions of `c()`, `d()`, and `f()` to make it similar to async `i()`.</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"68:11-68:12: @0[0]: FakeRead(ForMatchedPlace, _1)\">    fn c(x: u8) -&gt; u8 {</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"68:11-68:12: @0[0]: FakeRead(ForMatchedPlace, _1)\">        if x == 8 {</span></span>\n@@ -88,21 +88,19 @@\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"68:11-68:12: @0[0]: FakeRead(ForMatchedPlace, _1)\">    }</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"68:11-68:12: @0[0]: FakeRead(ForMatchedPlace, _1)\">    fn d() -&gt; u8 { 1 }</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"68:11-68:12: @0[0]: FakeRead(ForMatchedPlace, _1)\">    fn f() -&gt; u8 { 1 }</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"68:11-68:12: @0[0]: FakeRead(ForMatchedPlace, _1)\">    match x<span class=\"annotation\">\u2989@0,3,4,5</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"69:9-69:10: @6[3]: _2 = _1\"><span class=\"annotation\">@6,8\u298a</span>y<span class=\"annotation\">\u2989@6,8</span></span></span><span class=\"code\" style=\"--layer: 0\"> if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"69:16-69:17: @3[5]: _6 = _1\n-69:14-69:18: @3.Call: _5 = j::c(move _6) -&gt; [return: bb4, unwind: bb15]\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"68:11-68:12: @0[0]: FakeRead(ForMatchedPlace, _1)\">    match x<span class=\"annotation\">\u2989@0,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"69:9-69:10: @5[3]: _2 = _1\"><span class=\"annotation\">@5,7\u298a</span>y<span class=\"annotation\">\u2989@5,7</span></span></span><span class=\"code\" style=\"--layer: 0\"> if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"69:16-69:17: @3[5]: _6 = _1\n+69:14-69:18: @3.Call: _5 = j::c(move _6) -&gt; [return: bb4, unwind: bb13]\n 69:22-69:23: @4[3]: _8 = (*_3)\n-69:22-69:27: @4[4]: _9 = CheckedAdd(_8, const 1_u8)\n-69:22-69:27: @5[0]: _7 = move (_9.0: u8)\n-69:14-69:27: @5[2]: _4 = Eq(move _5, move _7)\"><span class=\"annotation\">@0,3,4,5\u298a</span>c(x) == y + 1<span class=\"annotation\">\u2989@0,3,4,5</span></span></span><span class=\"code\" style=\"--layer: 0\"> =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"69:33-69:36: @6.Call: _10 = j::d() -&gt; [return: bb8, unwind: bb15]\n-69:31-69:39: @8[1]: _0 = const ()\"><span class=\"annotation\">@6,8\u298a</span>{ d(); }<span class=\"annotation\">\u2989@6,8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"70:9-70:10: @12[3]: _11 = _1\"><span class=\"annotation\">@12\u298a</span>y<span class=\"annotation\">\u2989@12</span></span></span><span class=\"code\" style=\"--layer: 0\"> if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"70:14-70:17: @9.Call: _14 = j::f() -&gt; [return: bb10, unwind: bb15]\n-70:21-70:22: @10[2]: _16 = (*_12)\n-70:21-70:26: @10[3]: _17 = CheckedAdd(_16, const 1_u8)\n-70:21-70:26: @11[0]: _15 = move (_17.0: u8)\n-70:14-70:26: @11[2]: _13 = Eq(move _14, move _15)\"><span class=\"annotation\">@1,9,10,11\u298a</span>f() == y + 1<span class=\"annotation\">\u2989@1,9,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"> =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"70:30-70:32: @12[4]: _0 = ()\"><span class=\"annotation\">@12\u298a</span>()<span class=\"annotation\">\u2989@12</span></span></span><span class=\"code\" style=\"--layer: 0\">,</span></span>\n+69:22-69:27: @4[4]: _7 = Add(move _8, const 1_u8)\n+69:14-69:27: @4[6]: _4 = Eq(move _5, move _7)\"><span class=\"annotation\">@0,3,4\u298a</span>c(x) == y + 1<span class=\"annotation\">\u2989@0,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\"> =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"69:33-69:36: @5.Call: _9 = j::d() -&gt; [return: bb7, unwind: bb13]\n+69:31-69:39: @7[1]: _0 = const ()\"><span class=\"annotation\">@5,7\u298a</span>{ d(); }<span class=\"annotation\">\u2989@5,7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"70:9-70:10: @10[3]: _10 = _1\"><span class=\"annotation\">@10\u298a</span>y<span class=\"annotation\">\u2989@10</span></span></span><span class=\"code\" style=\"--layer: 0\"> if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"70:14-70:17: @8.Call: _13 = j::f() -&gt; [return: bb9, unwind: bb13]\n+70:21-70:22: @9[2]: _15 = (*_11)\n+70:21-70:26: @9[3]: _14 = Add(move _15, const 1_u8)\n+70:14-70:26: @9[5]: _12 = Eq(move _13, move _14)\"><span class=\"annotation\">@1,8,9\u298a</span>f() == y + 1<span class=\"annotation\">\u2989@1,8,9</span></span></span><span class=\"code\" style=\"--layer: 0\"> =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"70:30-70:32: @10[4]: _0 = ()\"><span class=\"annotation\">@10\u298a</span>()<span class=\"annotation\">\u2989@10</span></span></span><span class=\"code\" style=\"--layer: 0\">,</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"71:14-71:16: @2[0]: _0 = ()\"><span class=\"annotation\">@2\u298a</span>()<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\">,</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"73:2-73:2: @14.Return: return\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"73:2-73:2: @12.Return: return\"><span class=\"annotation\">@12\u298a</span>\u2038<span class=\"annotation\">\u2989@12</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "5cec484a964dae5a9469ef63d9dee2a19eeb3865", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.async/async.m-{closure#0}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.m-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.m-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.m-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -72,8 +72,7 @@\n <div class=\"code\" style=\"counter-reset: line 90\"><span class=\"line\">                        <span><span class=\"code even\" style=\"--layer: 1\" title=\"91:25-91:34: @0[1]: _3 = (_1.0: u8)\n 91:25-91:34: @0[2]: FakeRead(ForLet, _3)\n 91:27-91:28: @0[4]: _4 = _3\n-91:27-91:32: @0[5]: _5 = CheckedSub(_4, const 1_u8)\n-91:27-91:32: @1[0]: _0 = move (_5.0: u8)\n-91:34-91:34: @1.Return: return\"><span class=\"annotation\">@0,1\u298a</span>{ x - 1 }<span class=\"annotation\">\u2989@0,1</span></span></span></span></div>\n+91:27-91:32: @0[5]: _0 = Sub(move _4, const 1_u8)\n+91:34-91:34: @0.Return: return\"><span class=\"annotation\">@0\u298a</span>{ x - 1 }<span class=\"annotation\">\u2989@0</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "420135e143dbfcffb2c8c2f178fd8a28a8340eda", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.closure/closure.main-{closure#4}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%234%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%234%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%234%7D.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -69,9 +69,8 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 130\"><span class=\"line\">                                <span class=\"code\" style=\"--layer: 0\">| _unused_arg: u8 | </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"131:53-131:67: @0[0]: _3 = CheckedAdd((*((*_1).0: &amp;mut i32)), const 1_i32)\n-131:53-131:67: @1[0]: (*((*_1).0: &amp;mut i32)) = move (_3.0: i32)\n-131:53-131:67: @1[1]: _0 = const ()\n-131:67-131:67: @1.Return: return\"><span class=\"annotation\">@0,1\u298a</span>countdown += 1<span class=\"annotation\">\u2989@0,1</span></span></span></span></div>\n+<div class=\"code\" style=\"counter-reset: line 130\"><span class=\"line\">                                <span class=\"code\" style=\"--layer: 0\">| _unused_arg: u8 | </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"131:53-131:67: @0[0]: (*((*_1).0: &amp;mut i32)) = Add((*((*_1).0: &amp;mut i32)), const 1_i32)\n+131:53-131:67: @0[1]: _0 = const ()\n+131:67-131:67: @0.Return: return\"><span class=\"annotation\">@0\u298a</span>countdown += 1<span class=\"annotation\">\u2989@0</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "45fec46f55ca497ccb9baf7855dad92b382e4b98", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.unused/unused.foo.-------.InstrumentCoverage.0.html", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.foo.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.foo.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.foo.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,87 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.unused/unused.foo.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>unused.foo - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 0\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"2:17-2:18: @0[1]: _2 = const 0_i32\n+2:9-2:14: @0[2]: FakeRead(ForLet, _2)\"><span class=\"annotation\">@0\u298a</span>fn foo&lt;T&gt;(x: T) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"2:17-2:18: @0[1]: _2 = const 0_i32\n+2:9-2:14: @0[2]: FakeRead(ForLet, _2)\">    let mut i = 0<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    while </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"3:11-3:12: @2[2]: _5 = _2\n+3:11-3:17: @2[3]: _4 = Lt(move _5, const 10_i32)\n+3:11-3:17: @2[5]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@1,2\u298a</span>i &lt; 10<span class=\"annotation\">\u2989@1,2</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:9-4:10: @5[3]: _8 = _2\n+4:9-4:15: @5[4]: _7 = Ne(move _8, const 0_i32)\"><span class=\"annotation\">@3,5\u298a</span>i != 0<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:19-4:20: @8[2]: _10 = _2\n+4:19-4:25: @8[3]: _9 = Ne(move _10, const 0_i32)\"><span class=\"annotation\">@8\u298a</span>i != 0<span class=\"annotation\">\u2989@8</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:9-5:15: @9[3]: _11 = CheckedAdd(_2, const 1_i32)\n+5:9-5:15: @10[0]: _2 = move (_11.0: i32)\"><span class=\"annotation\">@9,10\u298a</span>i += 1<span class=\"annotation\">\u2989@9,10</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"7:2-7:2: @11.Return: return\"><span class=\"annotation\">@4,11\u298a</span>\u2038<span class=\"annotation\">\u2989@4,11</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "864f6c4feb152e1cc106dbbd3b1643c42b2c1a55", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.unused/unused.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.main.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,98 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.unused/unused.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>unused.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 34\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:5-36:18: @0.Call: _1 = foo::&lt;u32&gt;(const 0_u32) -&gt; [return: bb1, unwind: bb3]\n+37:5-37:20: @1.Call: _2 = foo::&lt;f32&gt;(const 0f32) -&gt; [return: bb2, unwind: bb3]\n+38:8-38:10: @2[2]: _3 = ()\n+38:5-38:11: @2[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _3)\n+39:2-39:2: @2.Return: return\"><span class=\"annotation\">@0,1,2\u298a</span>fn main() -&gt; Result&lt;(), u8&gt; {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:5-36:18: @0.Call: _1 = foo::&lt;u32&gt;(const 0_u32) -&gt; [return: bb1, unwind: bb3]\n+37:5-37:20: @1.Call: _2 = foo::&lt;f32&gt;(const 0f32) -&gt; [return: bb2, unwind: bb3]\n+38:8-38:10: @2[2]: _3 = ()\n+38:5-38:11: @2[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _3)\n+39:2-39:2: @2.Return: return\">    foo::&lt;u32&gt;(0);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:5-36:18: @0.Call: _1 = foo::&lt;u32&gt;(const 0_u32) -&gt; [return: bb1, unwind: bb3]\n+37:5-37:20: @1.Call: _2 = foo::&lt;f32&gt;(const 0f32) -&gt; [return: bb2, unwind: bb3]\n+38:8-38:10: @2[2]: _3 = ()\n+38:5-38:11: @2[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _3)\n+39:2-39:2: @2.Return: return\">    foo::&lt;f32&gt;(0.0);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:5-36:18: @0.Call: _1 = foo::&lt;u32&gt;(const 0_u32) -&gt; [return: bb1, unwind: bb3]\n+37:5-37:20: @1.Call: _2 = foo::&lt;f32&gt;(const 0f32) -&gt; [return: bb2, unwind: bb3]\n+38:8-38:10: @2[2]: _3 = ()\n+38:5-38:11: @2[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _3)\n+39:2-39:2: @2.Return: return\">    Ok(())</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:5-36:18: @0.Call: _1 = foo::&lt;u32&gt;(const 0_u32) -&gt; [return: bb1, unwind: bb3]\n+37:5-37:20: @1.Call: _2 = foo::&lt;f32&gt;(const 0f32) -&gt; [return: bb2, unwind: bb3]\n+38:8-38:10: @2[2]: _3 = ()\n+38:5-38:11: @2[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _3)\n+39:2-39:2: @2.Return: return\">}<span class=\"annotation\">\u2989@0,1,2</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "52beea080232e6f694151fb97c28e1a3faaf9136", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.unused/unused.unused_func.-------.InstrumentCoverage.0.html", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.unused_func.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.unused_func.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.unused_func.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,86 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.unused/unused.unused_func.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>unused.unused_func - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 16\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:8-18:9: @0[2]: _3 = _1\n+18:8-18:14: @0[3]: _2 = Ne(move _3, const 0_u32)\"><span class=\"annotation\">@0\u298a</span>fn unused_func(mut a: u32) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"18:8-18:9: @0[2]: _3 = _1\n+18:8-18:14: @0[3]: _2 = Ne(move _3, const 0_u32)\">    if a != 0<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:9-19:15: @1[0]: _4 = CheckedAdd(_1, const 1_u32)\n+19:9-19:15: @3[0]: _1 = move (_4.0: u32)\n+18:15-20:6: @3[1]: _0 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:9-19:15: @1[0]: _4 = CheckedAdd(_1, const 1_u32)\n+19:9-19:15: @3[0]: _1 = move (_4.0: u32)\n+18:15-20:6: @3[1]: _0 = const ()\">        a += 1;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:9-19:15: @1[0]: _4 = CheckedAdd(_1, const 1_u32)\n+19:9-19:15: @3[0]: _1 = move (_4.0: u32)\n+18:15-20:6: @3[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"20:6-20:6: @2[0]: _0 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:2-21:2: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "816ef73ea6b06e40755f8e4597f1cc2db2c65679", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.unused/unused.unused_func2.-------.InstrumentCoverage.0.html", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.unused_func2.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.unused_func2.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.unused_func2.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,86 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.unused/unused.unused_func2.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>unused.unused_func2 - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 22\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:8-24:9: @0[2]: _3 = _1\n+24:8-24:14: @0[3]: _2 = Ne(move _3, const 0_u32)\"><span class=\"annotation\">@0\u298a</span>fn unused_func2(mut a: u32) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"24:8-24:9: @0[2]: _3 = _1\n+24:8-24:14: @0[3]: _2 = Ne(move _3, const 0_u32)\">    if a != 0<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:9-25:15: @1[0]: _4 = CheckedAdd(_1, const 1_u32)\n+25:9-25:15: @3[0]: _1 = move (_4.0: u32)\n+24:15-26:6: @3[1]: _0 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"25:9-25:15: @1[0]: _4 = CheckedAdd(_1, const 1_u32)\n+25:9-25:15: @3[0]: _1 = move (_4.0: u32)\n+24:15-26:6: @3[1]: _0 = const ()\">        a += 1;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"25:9-25:15: @1[0]: _4 = CheckedAdd(_1, const 1_u32)\n+25:9-25:15: @3[0]: _1 = move (_4.0: u32)\n+24:15-26:6: @3[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"26:6-26:6: @2[0]: _0 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:2-27:2: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "739f9f42db359e8b9dc35a44629c1267532f7459", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.unused/unused.unused_func3.-------.InstrumentCoverage.0.html", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.unused_func3.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.unused_func3.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.unused_func3.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,86 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.unused/unused.unused_func3.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>unused.unused_func3 - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 28\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:8-30:9: @0[2]: _3 = _1\n+30:8-30:14: @0[3]: _2 = Ne(move _3, const 0_u32)\"><span class=\"annotation\">@0\u298a</span>fn unused_func3(mut a: u32) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:8-30:9: @0[2]: _3 = _1\n+30:8-30:14: @0[3]: _2 = Ne(move _3, const 0_u32)\">    if a != 0<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"31:9-31:15: @1[0]: _4 = CheckedAdd(_1, const 1_u32)\n+31:9-31:15: @3[0]: _1 = move (_4.0: u32)\n+30:15-32:6: @3[1]: _0 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"31:9-31:15: @1[0]: _4 = CheckedAdd(_1, const 1_u32)\n+31:9-31:15: @3[0]: _1 = move (_4.0: u32)\n+30:15-32:6: @3[1]: _0 = const ()\">        a += 1;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"31:9-31:15: @1[0]: _4 = CheckedAdd(_1, const 1_u32)\n+31:9-31:15: @3[0]: _1 = move (_4.0: u32)\n+30:15-32:6: @3[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"32:6-32:6: @2[0]: _0 = const ()\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"33:2-33:2: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "9b32bcb47f6e53293ec60710c06172a7e0ce3c78", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.unused/unused.unused_template_func.-------.InstrumentCoverage.0.html", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.unused_template_func.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.unused_template_func.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.unused%2Funused.unused_template_func.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,87 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.unused/unused.unused_template_func.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>unused.unused_template_func - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 8\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:17-10:18: @0[1]: _2 = const 0_i32\n+10:9-10:14: @0[2]: FakeRead(ForLet, _2)\"><span class=\"annotation\">@0\u298a</span>fn unused_template_func&lt;T&gt;(x: T) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"10:17-10:18: @0[1]: _2 = const 0_i32\n+10:9-10:14: @0[2]: FakeRead(ForLet, _2)\">    let mut i = 0<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    while </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:11-11:12: @2[2]: _5 = _2\n+11:11-11:17: @2[3]: _4 = Lt(move _5, const 10_i32)\n+11:11-11:17: @2[5]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@1,2\u298a</span>i &lt; 10<span class=\"annotation\">\u2989@1,2</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:9-12:10: @5[3]: _8 = _2\n+12:9-12:15: @5[4]: _7 = Ne(move _8, const 0_i32)\"><span class=\"annotation\">@3,5\u298a</span>i != 0<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"12:19-12:20: @8[2]: _10 = _2\n+12:19-12:25: @8[3]: _9 = Ne(move _10, const 0_i32)\"><span class=\"annotation\">@8\u298a</span>i != 0<span class=\"annotation\">\u2989@8</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"13:9-13:15: @9[3]: _11 = CheckedAdd(_2, const 1_i32)\n+13:9-13:15: @10[0]: _2 = move (_11.0: i32)\"><span class=\"annotation\">@9,10\u298a</span>i += 1<span class=\"annotation\">\u2989@9,10</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"15:2-15:2: @11.Return: return\"><span class=\"annotation\">@4,11\u298a</span>\u2038<span class=\"annotation\">\u2989@4,11</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "322eaf07677f4c9d28b993af139a0da586c69571", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.unused_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.unused_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.unused_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.unused_function.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,115 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.unused_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>used_inline_crate.unused_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 64\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"66:19-66:35: @0.Call: _4 = std::env::args() -&gt; [return: bb1, unwind: bb8]\n+66:19-66:35: @1[0]: _3 = &amp;_4\n+66:19-66:41: @1.Call: _2 = &lt;std::env::Args as std::iter::ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n+66:19-66:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+66:9-66:16: @2[3]: FakeRead(ForLet, _1)\n+67:25-67:26: @3[2]: _5 = const 2_i32\n+67:9-67:22: @3[3]: FakeRead(ForLet, _5)\n+68:9-68:16: @3[6]: _7 = _1\n+68:8-68:16: @3[7]: _6 = Not(move _7)\"><span class=\"annotation\">@0,1,2,3\u298a</span>pub fn unused_function() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"66:19-66:35: @0.Call: _4 = std::env::args() -&gt; [return: bb1, unwind: bb8]\n+66:19-66:35: @1[0]: _3 = &amp;_4\n+66:19-66:41: @1.Call: _2 = &lt;std::env::Args as std::iter::ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n+66:19-66:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+66:9-66:16: @2[3]: FakeRead(ForLet, _1)\n+67:25-67:26: @3[2]: _5 = const 2_i32\n+67:9-67:22: @3[3]: FakeRead(ForLet, _5)\n+68:9-68:16: @3[6]: _7 = _1\n+68:8-68:16: @3[7]: _6 = Not(move _7)\">    let is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"66:19-66:35: @0.Call: _4 = std::env::args() -&gt; [return: bb1, unwind: bb8]\n+66:19-66:35: @1[0]: _3 = &amp;_4\n+66:19-66:41: @1.Call: _2 = &lt;std::env::Args as std::iter::ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n+66:19-66:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+66:9-66:16: @2[3]: FakeRead(ForLet, _1)\n+67:25-67:26: @3[2]: _5 = const 2_i32\n+67:9-67:22: @3[3]: FakeRead(ForLet, _5)\n+68:9-68:16: @3[6]: _7 = _1\n+68:8-68:16: @3[7]: _6 = Not(move _7)\">    let mut countdown = 2;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"66:19-66:35: @0.Call: _4 = std::env::args() -&gt; [return: bb1, unwind: bb8]\n+66:19-66:35: @1[0]: _3 = &amp;_4\n+66:19-66:41: @1.Call: _2 = &lt;std::env::Args as std::iter::ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n+66:19-66:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+66:9-66:16: @2[3]: FakeRead(ForLet, _1)\n+67:25-67:26: @3[2]: _5 = const 2_i32\n+67:9-67:22: @3[3]: FakeRead(ForLet, _5)\n+68:9-68:16: @3[6]: _7 = _1\n+68:8-68:16: @3[7]: _6 = Not(move _7)\">    if !is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"69:9-69:23: @4[0]: _5 = const 20_i32\n+68:17-70:6: @4[1]: _0 = const ()\"><span class=\"annotation\">@4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"69:9-69:23: @4[0]: _5 = const 20_i32\n+68:17-70:6: @4[1]: _0 = const ()\">        countdown = 20;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"69:9-69:23: @4[0]: _5 = const 20_i32\n+68:17-70:6: @4[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"70:6-70:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"71:2-71:2: @6.Return: return\"><span class=\"annotation\">@6\u298a</span>\u2038<span class=\"annotation\">\u2989@6</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "9e3052ccac1553158a7fb7d7a05f4a1dc78368fc", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.unused_generic_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.unused_generic_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.unused_generic_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.unused_generic_function.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,133 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.unused_generic_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>used_inline_crate.unused_generic_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 59\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"61:14-61:49: @0[6]: _19 = const unused_generic_function::&lt;T&gt;::promoted[0]\n+61:14-61:49: @0[7]: _7 = &amp;(*_19)\n+61:14-61:49: @0[8]: _6 = &amp;(*_7)\n+61:14-61:49: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+61:51-61:54: @0[17]: _14 = &amp;_1\n+61:5-61:56: @0[18]: _13 = (move _14,)\n+61:5-61:56: @0[20]: FakeRead(ForMatchedPlace, _13)\n+61:5-61:56: @0[22]: _15 = (_13.0: &amp;T)\n+61:5-61:56: @0[25]: _17 = &amp;(*_15)\n+61:5-61:56: @0[27]: _18 = &lt;T as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+61:5-61:56: @0.Call: _16 = std::fmt::ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+61:5-61:56: @1[2]: _12 = [move _16]\n+61:5-61:56: @1[5]: _11 = &amp;_12\n+61:5-61:56: @1[6]: _10 = &amp;(*_11)\n+61:5-61:56: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+61:5-61:56: @1.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+61:5-61:56: @2.Call: _3 = std::io::_print(move _4) -&gt; [return: bb3, unwind: bb5]\n+61:5-61:56: @3[6]: _2 = const ()\n+60:50-62:2: @3[8]: _0 = const ()\n+62:2-62:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>pub fn unused_generic_function&lt;T: Debug&gt;(arg: T) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"61:14-61:49: @0[6]: _19 = const unused_generic_function::&lt;T&gt;::promoted[0]\n+61:14-61:49: @0[7]: _7 = &amp;(*_19)\n+61:14-61:49: @0[8]: _6 = &amp;(*_7)\n+61:14-61:49: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+61:51-61:54: @0[17]: _14 = &amp;_1\n+61:5-61:56: @0[18]: _13 = (move _14,)\n+61:5-61:56: @0[20]: FakeRead(ForMatchedPlace, _13)\n+61:5-61:56: @0[22]: _15 = (_13.0: &amp;T)\n+61:5-61:56: @0[25]: _17 = &amp;(*_15)\n+61:5-61:56: @0[27]: _18 = &lt;T as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+61:5-61:56: @0.Call: _16 = std::fmt::ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+61:5-61:56: @1[2]: _12 = [move _16]\n+61:5-61:56: @1[5]: _11 = &amp;_12\n+61:5-61:56: @1[6]: _10 = &amp;(*_11)\n+61:5-61:56: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+61:5-61:56: @1.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+61:5-61:56: @2.Call: _3 = std::io::_print(move _4) -&gt; [return: bb3, unwind: bb5]\n+61:5-61:56: @3[6]: _2 = const ()\n+60:50-62:2: @3[8]: _0 = const ()\n+62:2-62:2: @4.Return: return\">    println!(\"unused_generic_function with {:?}\", arg);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"61:14-61:49: @0[6]: _19 = const unused_generic_function::&lt;T&gt;::promoted[0]\n+61:14-61:49: @0[7]: _7 = &amp;(*_19)\n+61:14-61:49: @0[8]: _6 = &amp;(*_7)\n+61:14-61:49: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+61:51-61:54: @0[17]: _14 = &amp;_1\n+61:5-61:56: @0[18]: _13 = (move _14,)\n+61:5-61:56: @0[20]: FakeRead(ForMatchedPlace, _13)\n+61:5-61:56: @0[22]: _15 = (_13.0: &amp;T)\n+61:5-61:56: @0[25]: _17 = &amp;(*_15)\n+61:5-61:56: @0[27]: _18 = &lt;T as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+61:5-61:56: @0.Call: _16 = std::fmt::ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+61:5-61:56: @1[2]: _12 = [move _16]\n+61:5-61:56: @1[5]: _11 = &amp;_12\n+61:5-61:56: @1[6]: _10 = &amp;(*_11)\n+61:5-61:56: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+61:5-61:56: @1.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+61:5-61:56: @2.Call: _3 = std::io::_print(move _4) -&gt; [return: bb3, unwind: bb5]\n+61:5-61:56: @3[6]: _2 = const ()\n+60:50-62:2: @3[8]: _0 = const ()\n+62:2-62:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "e9c381db94025a98137adb234c00d54308d9c8f1", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.unused_private_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.unused_private_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.unused_private_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.unused_private_function.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,115 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.unused_private_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>used_inline_crate.unused_private_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 73\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"75:19-75:35: @0.Call: _4 = std::env::args() -&gt; [return: bb1, unwind: bb8]\n+75:19-75:35: @1[0]: _3 = &amp;_4\n+75:19-75:41: @1.Call: _2 = &lt;std::env::Args as std::iter::ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n+75:19-75:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+75:9-75:16: @2[3]: FakeRead(ForLet, _1)\n+76:25-76:26: @3[2]: _5 = const 2_i32\n+76:9-76:22: @3[3]: FakeRead(ForLet, _5)\n+77:9-77:16: @3[6]: _7 = _1\n+77:8-77:16: @3[7]: _6 = Not(move _7)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn unused_private_function() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"75:19-75:35: @0.Call: _4 = std::env::args() -&gt; [return: bb1, unwind: bb8]\n+75:19-75:35: @1[0]: _3 = &amp;_4\n+75:19-75:41: @1.Call: _2 = &lt;std::env::Args as std::iter::ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n+75:19-75:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+75:9-75:16: @2[3]: FakeRead(ForLet, _1)\n+76:25-76:26: @3[2]: _5 = const 2_i32\n+76:9-76:22: @3[3]: FakeRead(ForLet, _5)\n+77:9-77:16: @3[6]: _7 = _1\n+77:8-77:16: @3[7]: _6 = Not(move _7)\">    let is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"75:19-75:35: @0.Call: _4 = std::env::args() -&gt; [return: bb1, unwind: bb8]\n+75:19-75:35: @1[0]: _3 = &amp;_4\n+75:19-75:41: @1.Call: _2 = &lt;std::env::Args as std::iter::ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n+75:19-75:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+75:9-75:16: @2[3]: FakeRead(ForLet, _1)\n+76:25-76:26: @3[2]: _5 = const 2_i32\n+76:9-76:22: @3[3]: FakeRead(ForLet, _5)\n+77:9-77:16: @3[6]: _7 = _1\n+77:8-77:16: @3[7]: _6 = Not(move _7)\">    let mut countdown = 2;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"75:19-75:35: @0.Call: _4 = std::env::args() -&gt; [return: bb1, unwind: bb8]\n+75:19-75:35: @1[0]: _3 = &amp;_4\n+75:19-75:41: @1.Call: _2 = &lt;std::env::Args as std::iter::ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb7]\n+75:19-75:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+75:9-75:16: @2[3]: FakeRead(ForLet, _1)\n+76:25-76:26: @3[2]: _5 = const 2_i32\n+76:9-76:22: @3[3]: FakeRead(ForLet, _5)\n+77:9-77:16: @3[6]: _7 = _1\n+77:8-77:16: @3[7]: _6 = Not(move _7)\">    if !is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"78:9-78:23: @4[0]: _5 = const 20_i32\n+77:17-79:6: @4[1]: _0 = const ()\"><span class=\"annotation\">@4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"78:9-78:23: @4[0]: _5 = const 20_i32\n+77:17-79:6: @4[1]: _0 = const ()\">        countdown = 20;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"78:9-78:23: @4[0]: _5 = const 20_i32\n+77:17-79:6: @4[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"79:6-79:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"80:2-80:2: @6.Return: return\"><span class=\"annotation\">@6\u298a</span>\u2038<span class=\"annotation\">\u2989@6</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "056f618a403c96cbfed2a8846e5c14c1e076e47e", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.use_this_lib_crate.-------.InstrumentCoverage.0.html", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.use_this_lib_crate.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.use_this_lib_crate.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.use_this_lib_crate.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,190 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.use_this_lib_crate.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>used_inline_crate.use_this_lib_crate - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 81\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"83:5-83:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+84:5-86:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+87:20-87:36: @2[5]: _6 = Box([i32; 4])\n+87:20-87:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+87:20-87:36: @2[7]: _5 = move _6\n+87:20-87:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+87:20-87:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+87:9-87:17: @5[1]: FakeRead(ForLet, _3)\n+88:52-88:60: @5[4]: _8 = move _3\n+88:5-88:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+89:5-89:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+82:25-90:2: @7[1]: _0 = const ()\n+90:2-90:2: @8.Return: return\"><span class=\"annotation\">@0,1,2,3,4,5,6,7,8\u298a</span>fn use_this_lib_crate() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"83:5-83:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+84:5-86:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+87:20-87:36: @2[5]: _6 = Box([i32; 4])\n+87:20-87:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+87:20-87:36: @2[7]: _5 = move _6\n+87:20-87:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+87:20-87:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+87:9-87:17: @5[1]: FakeRead(ForLet, _3)\n+88:52-88:60: @5[4]: _8 = move _3\n+88:5-88:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+89:5-89:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+82:25-90:2: @7[1]: _0 = const ()\n+90:2-90:2: @8.Return: return\">    used_from_bin_crate_and_lib_crate_generic_function(\"used from library used_crate.rs\");</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"83:5-83:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+84:5-86:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+87:20-87:36: @2[5]: _6 = Box([i32; 4])\n+87:20-87:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+87:20-87:36: @2[7]: _5 = move _6\n+87:20-87:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+87:20-87:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+87:9-87:17: @5[1]: FakeRead(ForLet, _3)\n+88:52-88:60: @5[4]: _8 = move _3\n+88:5-88:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+89:5-89:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+82:25-90:2: @7[1]: _0 = const ()\n+90:2-90:2: @8.Return: return\">    used_with_same_type_from_bin_crate_and_lib_crate_generic_function(</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"83:5-83:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+84:5-86:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+87:20-87:36: @2[5]: _6 = Box([i32; 4])\n+87:20-87:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+87:20-87:36: @2[7]: _5 = move _6\n+87:20-87:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+87:20-87:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+87:9-87:17: @5[1]: FakeRead(ForLet, _3)\n+88:52-88:60: @5[4]: _8 = move _3\n+88:5-88:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+89:5-89:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+82:25-90:2: @7[1]: _0 = const ()\n+90:2-90:2: @8.Return: return\">        \"used from library used_crate.rs\",</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"83:5-83:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+84:5-86:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+87:20-87:36: @2[5]: _6 = Box([i32; 4])\n+87:20-87:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+87:20-87:36: @2[7]: _5 = move _6\n+87:20-87:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+87:20-87:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+87:9-87:17: @5[1]: FakeRead(ForLet, _3)\n+88:52-88:60: @5[4]: _8 = move _3\n+88:5-88:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+89:5-89:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+82:25-90:2: @7[1]: _0 = const ()\n+90:2-90:2: @8.Return: return\">    );</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"83:5-83:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+84:5-86:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+87:20-87:36: @2[5]: _6 = Box([i32; 4])\n+87:20-87:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+87:20-87:36: @2[7]: _5 = move _6\n+87:20-87:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+87:20-87:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+87:9-87:17: @5[1]: FakeRead(ForLet, _3)\n+88:52-88:60: @5[4]: _8 = move _3\n+88:5-88:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+89:5-89:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+82:25-90:2: @7[1]: _0 = const ()\n+90:2-90:2: @8.Return: return\">    let some_vec = vec![5, 6, 7, 8];</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"83:5-83:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+84:5-86:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+87:20-87:36: @2[5]: _6 = Box([i32; 4])\n+87:20-87:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+87:20-87:36: @2[7]: _5 = move _6\n+87:20-87:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+87:20-87:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+87:9-87:17: @5[1]: FakeRead(ForLet, _3)\n+88:52-88:60: @5[4]: _8 = move _3\n+88:5-88:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+89:5-89:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+82:25-90:2: @7[1]: _0 = const ()\n+90:2-90:2: @8.Return: return\">    used_only_from_this_lib_crate_generic_function(some_vec);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"83:5-83:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+84:5-86:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+87:20-87:36: @2[5]: _6 = Box([i32; 4])\n+87:20-87:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+87:20-87:36: @2[7]: _5 = move _6\n+87:20-87:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+87:20-87:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+87:9-87:17: @5[1]: FakeRead(ForLet, _3)\n+88:52-88:60: @5[4]: _8 = move _3\n+88:5-88:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+89:5-89:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+82:25-90:2: @7[1]: _0 = const ()\n+90:2-90:2: @8.Return: return\">    used_only_from_this_lib_crate_generic_function(\"used ONLY from library used_crate.rs\");</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"83:5-83:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+84:5-86:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+87:20-87:36: @2[5]: _6 = Box([i32; 4])\n+87:20-87:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+87:20-87:36: @2[7]: _5 = move _6\n+87:20-87:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+87:20-87:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+87:9-87:17: @5[1]: FakeRead(ForLet, _3)\n+88:52-88:60: @5[4]: _8 = move _3\n+88:5-88:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+89:5-89:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+82:25-90:2: @7[1]: _0 = const ()\n+90:2-90:2: @8.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4,5,6,7,8</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "0d88b0bc60e34deba6359102a3445cc05706f3cf", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.used_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,133 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.used_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>used_inline_crate.used_from_bin_crate_and_lib_crate_generic_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 49\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"51:14-51:76: @0[6]: _19 = const used_from_bin_crate_and_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+51:14-51:76: @0[7]: _7 = &amp;(*_19)\n+51:14-51:76: @0[8]: _6 = &amp;(*_7)\n+51:14-51:76: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+51:78-51:81: @0[17]: _14 = &amp;_1\n+51:5-51:83: @0[18]: _13 = (move _14,)\n+51:5-51:83: @0[20]: FakeRead(ForMatchedPlace, _13)\n+51:5-51:83: @0[22]: _15 = (_13.0: &amp;T)\n+51:5-51:83: @0[25]: _17 = &amp;(*_15)\n+51:5-51:83: @0[27]: _18 = &lt;T as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+51:5-51:83: @0.Call: _16 = std::fmt::ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+51:5-51:83: @1[2]: _12 = [move _16]\n+51:5-51:83: @1[5]: _11 = &amp;_12\n+51:5-51:83: @1[6]: _10 = &amp;(*_11)\n+51:5-51:83: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+51:5-51:83: @1.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+51:5-51:83: @2.Call: _3 = std::io::_print(move _4) -&gt; [return: bb3, unwind: bb5]\n+51:5-51:83: @3[6]: _2 = const ()\n+50:77-52:2: @3[8]: _0 = const ()\n+52:2-52:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>pub fn used_from_bin_crate_and_lib_crate_generic_function&lt;T: Debug&gt;(arg: T) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"51:14-51:76: @0[6]: _19 = const used_from_bin_crate_and_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+51:14-51:76: @0[7]: _7 = &amp;(*_19)\n+51:14-51:76: @0[8]: _6 = &amp;(*_7)\n+51:14-51:76: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+51:78-51:81: @0[17]: _14 = &amp;_1\n+51:5-51:83: @0[18]: _13 = (move _14,)\n+51:5-51:83: @0[20]: FakeRead(ForMatchedPlace, _13)\n+51:5-51:83: @0[22]: _15 = (_13.0: &amp;T)\n+51:5-51:83: @0[25]: _17 = &amp;(*_15)\n+51:5-51:83: @0[27]: _18 = &lt;T as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+51:5-51:83: @0.Call: _16 = std::fmt::ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+51:5-51:83: @1[2]: _12 = [move _16]\n+51:5-51:83: @1[5]: _11 = &amp;_12\n+51:5-51:83: @1[6]: _10 = &amp;(*_11)\n+51:5-51:83: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+51:5-51:83: @1.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+51:5-51:83: @2.Call: _3 = std::io::_print(move _4) -&gt; [return: bb3, unwind: bb5]\n+51:5-51:83: @3[6]: _2 = const ()\n+50:77-52:2: @3[8]: _0 = const ()\n+52:2-52:2: @4.Return: return\">    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"51:14-51:76: @0[6]: _19 = const used_from_bin_crate_and_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+51:14-51:76: @0[7]: _7 = &amp;(*_19)\n+51:14-51:76: @0[8]: _6 = &amp;(*_7)\n+51:14-51:76: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+51:78-51:81: @0[17]: _14 = &amp;_1\n+51:5-51:83: @0[18]: _13 = (move _14,)\n+51:5-51:83: @0[20]: FakeRead(ForMatchedPlace, _13)\n+51:5-51:83: @0[22]: _15 = (_13.0: &amp;T)\n+51:5-51:83: @0[25]: _17 = &amp;(*_15)\n+51:5-51:83: @0[27]: _18 = &lt;T as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+51:5-51:83: @0.Call: _16 = std::fmt::ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+51:5-51:83: @1[2]: _12 = [move _16]\n+51:5-51:83: @1[5]: _11 = &amp;_12\n+51:5-51:83: @1[6]: _10 = &amp;(*_11)\n+51:5-51:83: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+51:5-51:83: @1.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+51:5-51:83: @2.Call: _3 = std::io::_print(move _4) -&gt; [return: bb3, unwind: bb5]\n+51:5-51:83: @3[6]: _2 = const ()\n+50:77-52:2: @3[8]: _0 = const ()\n+52:2-52:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "d722d9f46ecff0daa9ee610a2535b9e7231799db", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.used_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_function.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,110 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.used_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>used_inline_crate.used_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 6\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0,1,2,3\u298a</span>pub fn used_function() <span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // dependent conditions.</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"11:19-11:35: @0.Call: _4 = std::env::args() -&gt; [return: bb1, unwind: bb9]\n+11:19-11:35: @1[0]: _3 = &amp;_4\n+11:19-11:41: @1.Call: _2 = &lt;std::env::Args as std::iter::ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+11:19-11:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+11:9-11:16: @2[3]: FakeRead(ForLet, _1)\n+12:25-12:26: @3[2]: _5 = const 0_i32\n+12:9-12:22: @3[3]: FakeRead(ForLet, _5)\n+13:8-13:15: @3[6]: _7 = _1\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"11:19-11:35: @0.Call: _4 = std::env::args() -&gt; [return: bb1, unwind: bb9]\n+11:19-11:35: @1[0]: _3 = &amp;_4\n+11:19-11:41: @1.Call: _2 = &lt;std::env::Args as std::iter::ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+11:19-11:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+11:9-11:16: @2[3]: FakeRead(ForLet, _1)\n+12:25-12:26: @3[2]: _5 = const 0_i32\n+12:9-12:22: @3[3]: FakeRead(ForLet, _5)\n+13:8-13:15: @3[6]: _7 = _1\">    let mut countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"11:19-11:35: @0.Call: _4 = std::env::args() -&gt; [return: bb1, unwind: bb9]\n+11:19-11:35: @1[0]: _3 = &amp;_4\n+11:19-11:41: @1.Call: _2 = &lt;std::env::Args as std::iter::ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+11:19-11:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+11:9-11:16: @2[3]: FakeRead(ForLet, _1)\n+12:25-12:26: @3[2]: _5 = const 0_i32\n+12:9-12:22: @3[3]: FakeRead(ForLet, _5)\n+13:8-13:15: @3[6]: _7 = _1\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-14:23: @4[0]: _5 = const 10_i32\n+13:16-15:6: @4[1]: _6 = const ()\"><span class=\"annotation\">@4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-14:23: @4[0]: _5 = const 10_i32\n+13:16-15:6: @4[1]: _6 = const ()\">        countdown = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-14:23: @4[0]: _5 = const 10_i32\n+13:16-15:6: @4[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"15:6-15:6: @5[0]: _6 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"16:5-16:25: @6.Call: _8 = use_this_lib_crate() -&gt; [return: bb7, unwind: bb9]\n+17:2-17:2: @7.Return: return\"><span class=\"annotation\">@6,7\u298a</span>use_this_lib_crate();</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"16:5-16:25: @6.Call: _8 = use_this_lib_crate() -&gt; [return: bb7, unwind: bb9]\n+17:2-17:2: @7.Return: return\">}<span class=\"annotation\">\u2989@6,7</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "a15c31bb13fd0ddea936b6c723c15bde61f74bd9", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.used_inline_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_inline_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_inline_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_inline_function.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,110 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.used_inline_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>used_inline_crate.used_inline_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 19\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0,1,2,3\u298a</span>pub fn used_inline_function() <span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // dependent conditions.</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:19-24:35: @0.Call: _4 = std::env::args() -&gt; [return: bb1, unwind: bb9]\n+24:19-24:35: @1[0]: _3 = &amp;_4\n+24:19-24:41: @1.Call: _2 = &lt;std::env::Args as std::iter::ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+24:19-24:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+24:9-24:16: @2[3]: FakeRead(ForLet, _1)\n+25:25-25:26: @3[2]: _5 = const 0_i32\n+25:9-25:22: @3[3]: FakeRead(ForLet, _5)\n+26:8-26:15: @3[6]: _7 = _1\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"24:19-24:35: @0.Call: _4 = std::env::args() -&gt; [return: bb1, unwind: bb9]\n+24:19-24:35: @1[0]: _3 = &amp;_4\n+24:19-24:41: @1.Call: _2 = &lt;std::env::Args as std::iter::ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+24:19-24:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+24:9-24:16: @2[3]: FakeRead(ForLet, _1)\n+25:25-25:26: @3[2]: _5 = const 0_i32\n+25:9-25:22: @3[3]: FakeRead(ForLet, _5)\n+26:8-26:15: @3[6]: _7 = _1\">    let mut countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"24:19-24:35: @0.Call: _4 = std::env::args() -&gt; [return: bb1, unwind: bb9]\n+24:19-24:35: @1[0]: _3 = &amp;_4\n+24:19-24:41: @1.Call: _2 = &lt;std::env::Args as std::iter::ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+24:19-24:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+24:9-24:16: @2[3]: FakeRead(ForLet, _1)\n+25:25-25:26: @3[2]: _5 = const 0_i32\n+25:9-25:22: @3[3]: FakeRead(ForLet, _5)\n+26:8-26:15: @3[6]: _7 = _1\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:9-27:23: @4[0]: _5 = const 10_i32\n+26:16-28:6: @4[1]: _6 = const ()\"><span class=\"annotation\">@4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"27:9-27:23: @4[0]: _5 = const 10_i32\n+26:16-28:6: @4[1]: _6 = const ()\">        countdown = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"27:9-27:23: @4[0]: _5 = const 10_i32\n+26:16-28:6: @4[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"28:6-28:6: @5[0]: _6 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"29:5-29:25: @6.Call: _8 = use_this_lib_crate() -&gt; [return: bb7, unwind: bb9]\n+30:2-30:2: @7.Return: return\"><span class=\"annotation\">@6,7\u298a</span>use_this_lib_crate();</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"29:5-29:25: @6.Call: _8 = use_this_lib_crate() -&gt; [return: bb7, unwind: bb9]\n+30:2-30:2: @7.Return: return\">}<span class=\"annotation\">\u2989@6,7</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "252ff76d416963e60e17c8f088c7b7bbfc66e43d", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.used_only_from_bin_crate_generic_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_only_from_bin_crate_generic_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_only_from_bin_crate_generic_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_only_from_bin_crate_generic_function.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,133 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.used_only_from_bin_crate_generic_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>used_inline_crate.used_only_from_bin_crate_generic_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 38\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"40:14-40:67: @0[6]: _19 = const used_only_from_bin_crate_generic_function::&lt;T&gt;::promoted[0]\n+40:14-40:67: @0[7]: _7 = &amp;(*_19)\n+40:14-40:67: @0[8]: _6 = &amp;(*_7)\n+40:14-40:67: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+40:69-40:72: @0[17]: _14 = &amp;_1\n+40:5-40:74: @0[18]: _13 = (move _14,)\n+40:5-40:74: @0[20]: FakeRead(ForMatchedPlace, _13)\n+40:5-40:74: @0[22]: _15 = (_13.0: &amp;T)\n+40:5-40:74: @0[25]: _17 = &amp;(*_15)\n+40:5-40:74: @0[27]: _18 = &lt;T as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+40:5-40:74: @0.Call: _16 = std::fmt::ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+40:5-40:74: @1[2]: _12 = [move _16]\n+40:5-40:74: @1[5]: _11 = &amp;_12\n+40:5-40:74: @1[6]: _10 = &amp;(*_11)\n+40:5-40:74: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+40:5-40:74: @1.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+40:5-40:74: @2.Call: _3 = std::io::_print(move _4) -&gt; [return: bb3, unwind: bb5]\n+40:5-40:74: @3[6]: _2 = const ()\n+39:68-41:2: @3[8]: _0 = const ()\n+41:2-41:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>pub fn used_only_from_bin_crate_generic_function&lt;T: Debug&gt;(arg: T) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"40:14-40:67: @0[6]: _19 = const used_only_from_bin_crate_generic_function::&lt;T&gt;::promoted[0]\n+40:14-40:67: @0[7]: _7 = &amp;(*_19)\n+40:14-40:67: @0[8]: _6 = &amp;(*_7)\n+40:14-40:67: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+40:69-40:72: @0[17]: _14 = &amp;_1\n+40:5-40:74: @0[18]: _13 = (move _14,)\n+40:5-40:74: @0[20]: FakeRead(ForMatchedPlace, _13)\n+40:5-40:74: @0[22]: _15 = (_13.0: &amp;T)\n+40:5-40:74: @0[25]: _17 = &amp;(*_15)\n+40:5-40:74: @0[27]: _18 = &lt;T as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+40:5-40:74: @0.Call: _16 = std::fmt::ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+40:5-40:74: @1[2]: _12 = [move _16]\n+40:5-40:74: @1[5]: _11 = &amp;_12\n+40:5-40:74: @1[6]: _10 = &amp;(*_11)\n+40:5-40:74: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+40:5-40:74: @1.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+40:5-40:74: @2.Call: _3 = std::io::_print(move _4) -&gt; [return: bb3, unwind: bb5]\n+40:5-40:74: @3[6]: _2 = const ()\n+39:68-41:2: @3[8]: _0 = const ()\n+41:2-41:2: @4.Return: return\">    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"40:14-40:67: @0[6]: _19 = const used_only_from_bin_crate_generic_function::&lt;T&gt;::promoted[0]\n+40:14-40:67: @0[7]: _7 = &amp;(*_19)\n+40:14-40:67: @0[8]: _6 = &amp;(*_7)\n+40:14-40:67: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+40:69-40:72: @0[17]: _14 = &amp;_1\n+40:5-40:74: @0[18]: _13 = (move _14,)\n+40:5-40:74: @0[20]: FakeRead(ForMatchedPlace, _13)\n+40:5-40:74: @0[22]: _15 = (_13.0: &amp;T)\n+40:5-40:74: @0[25]: _17 = &amp;(*_15)\n+40:5-40:74: @0[27]: _18 = &lt;T as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+40:5-40:74: @0.Call: _16 = std::fmt::ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+40:5-40:74: @1[2]: _12 = [move _16]\n+40:5-40:74: @1[5]: _11 = &amp;_12\n+40:5-40:74: @1[6]: _10 = &amp;(*_11)\n+40:5-40:74: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+40:5-40:74: @1.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+40:5-40:74: @2.Call: _3 = std::io::_print(move _4) -&gt; [return: bb3, unwind: bb5]\n+40:5-40:74: @3[6]: _2 = const ()\n+39:68-41:2: @3[8]: _0 = const ()\n+41:2-41:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "f8fb4990ad9a6526589c496c97b06282ab50dbcb", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.used_only_from_this_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_only_from_this_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_only_from_this_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_only_from_this_lib_crate_generic_function.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,133 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.used_only_from_this_lib_crate_generic_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>used_inline_crate.used_only_from_this_lib_crate_generic_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 44\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"46:14-46:72: @0[6]: _19 = const used_only_from_this_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+46:14-46:72: @0[7]: _7 = &amp;(*_19)\n+46:14-46:72: @0[8]: _6 = &amp;(*_7)\n+46:14-46:72: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+46:74-46:77: @0[17]: _14 = &amp;_1\n+46:5-46:79: @0[18]: _13 = (move _14,)\n+46:5-46:79: @0[20]: FakeRead(ForMatchedPlace, _13)\n+46:5-46:79: @0[22]: _15 = (_13.0: &amp;T)\n+46:5-46:79: @0[25]: _17 = &amp;(*_15)\n+46:5-46:79: @0[27]: _18 = &lt;T as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+46:5-46:79: @0.Call: _16 = std::fmt::ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+46:5-46:79: @1[2]: _12 = [move _16]\n+46:5-46:79: @1[5]: _11 = &amp;_12\n+46:5-46:79: @1[6]: _10 = &amp;(*_11)\n+46:5-46:79: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+46:5-46:79: @1.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+46:5-46:79: @2.Call: _3 = std::io::_print(move _4) -&gt; [return: bb3, unwind: bb5]\n+46:5-46:79: @3[6]: _2 = const ()\n+45:73-47:2: @3[8]: _0 = const ()\n+47:2-47:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>pub fn used_only_from_this_lib_crate_generic_function&lt;T: Debug&gt;(arg: T) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"46:14-46:72: @0[6]: _19 = const used_only_from_this_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+46:14-46:72: @0[7]: _7 = &amp;(*_19)\n+46:14-46:72: @0[8]: _6 = &amp;(*_7)\n+46:14-46:72: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+46:74-46:77: @0[17]: _14 = &amp;_1\n+46:5-46:79: @0[18]: _13 = (move _14,)\n+46:5-46:79: @0[20]: FakeRead(ForMatchedPlace, _13)\n+46:5-46:79: @0[22]: _15 = (_13.0: &amp;T)\n+46:5-46:79: @0[25]: _17 = &amp;(*_15)\n+46:5-46:79: @0[27]: _18 = &lt;T as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+46:5-46:79: @0.Call: _16 = std::fmt::ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+46:5-46:79: @1[2]: _12 = [move _16]\n+46:5-46:79: @1[5]: _11 = &amp;_12\n+46:5-46:79: @1[6]: _10 = &amp;(*_11)\n+46:5-46:79: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+46:5-46:79: @1.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+46:5-46:79: @2.Call: _3 = std::io::_print(move _4) -&gt; [return: bb3, unwind: bb5]\n+46:5-46:79: @3[6]: _2 = const ()\n+45:73-47:2: @3[8]: _0 = const ()\n+47:2-47:2: @4.Return: return\">    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"46:14-46:72: @0[6]: _19 = const used_only_from_this_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+46:14-46:72: @0[7]: _7 = &amp;(*_19)\n+46:14-46:72: @0[8]: _6 = &amp;(*_7)\n+46:14-46:72: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+46:74-46:77: @0[17]: _14 = &amp;_1\n+46:5-46:79: @0[18]: _13 = (move _14,)\n+46:5-46:79: @0[20]: FakeRead(ForMatchedPlace, _13)\n+46:5-46:79: @0[22]: _15 = (_13.0: &amp;T)\n+46:5-46:79: @0[25]: _17 = &amp;(*_15)\n+46:5-46:79: @0[27]: _18 = &lt;T as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+46:5-46:79: @0.Call: _16 = std::fmt::ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+46:5-46:79: @1[2]: _12 = [move _16]\n+46:5-46:79: @1[5]: _11 = &amp;_12\n+46:5-46:79: @1[6]: _10 = &amp;(*_11)\n+46:5-46:79: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+46:5-46:79: @1.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+46:5-46:79: @2.Call: _3 = std::io::_print(move _4) -&gt; [return: bb3, unwind: bb5]\n+46:5-46:79: @3[6]: _2 = const ()\n+45:73-47:2: @3[8]: _0 = const ()\n+47:2-47:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "db5e24d9b1dd6b81d4751af1a5d86c3bc2836063", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.used_with_same_type_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_with_same_type_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_with_same_type_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_inline_crate%2Fused_inline_crate.used_with_same_type_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,133 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_inline_crate/used_inline_crate.used_with_same_type_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>used_inline_crate.used_with_same_type_from_bin_crate_and_lib_crate_generic_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 54\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"56:14-56:91: @0[6]: _19 = const used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+56:14-56:91: @0[7]: _7 = &amp;(*_19)\n+56:14-56:91: @0[8]: _6 = &amp;(*_7)\n+56:14-56:91: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+56:93-56:96: @0[17]: _14 = &amp;_1\n+56:5-56:98: @0[18]: _13 = (move _14,)\n+56:5-56:98: @0[20]: FakeRead(ForMatchedPlace, _13)\n+56:5-56:98: @0[22]: _15 = (_13.0: &amp;T)\n+56:5-56:98: @0[25]: _17 = &amp;(*_15)\n+56:5-56:98: @0[27]: _18 = &lt;T as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+56:5-56:98: @0.Call: _16 = std::fmt::ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+56:5-56:98: @1[2]: _12 = [move _16]\n+56:5-56:98: @1[5]: _11 = &amp;_12\n+56:5-56:98: @1[6]: _10 = &amp;(*_11)\n+56:5-56:98: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+56:5-56:98: @1.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+56:5-56:98: @2.Call: _3 = std::io::_print(move _4) -&gt; [return: bb3, unwind: bb5]\n+56:5-56:98: @3[6]: _2 = const ()\n+55:92-57:2: @3[8]: _0 = const ()\n+57:2-57:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function&lt;T: Debug&gt;(arg: T) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"56:14-56:91: @0[6]: _19 = const used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+56:14-56:91: @0[7]: _7 = &amp;(*_19)\n+56:14-56:91: @0[8]: _6 = &amp;(*_7)\n+56:14-56:91: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+56:93-56:96: @0[17]: _14 = &amp;_1\n+56:5-56:98: @0[18]: _13 = (move _14,)\n+56:5-56:98: @0[20]: FakeRead(ForMatchedPlace, _13)\n+56:5-56:98: @0[22]: _15 = (_13.0: &amp;T)\n+56:5-56:98: @0[25]: _17 = &amp;(*_15)\n+56:5-56:98: @0[27]: _18 = &lt;T as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+56:5-56:98: @0.Call: _16 = std::fmt::ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+56:5-56:98: @1[2]: _12 = [move _16]\n+56:5-56:98: @1[5]: _11 = &amp;_12\n+56:5-56:98: @1[6]: _10 = &amp;(*_11)\n+56:5-56:98: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+56:5-56:98: @1.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+56:5-56:98: @2.Call: _3 = std::io::_print(move _4) -&gt; [return: bb3, unwind: bb5]\n+56:5-56:98: @3[6]: _2 = const ()\n+55:92-57:2: @3[8]: _0 = const ()\n+57:2-57:2: @4.Return: return\">    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"56:14-56:91: @0[6]: _19 = const used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+56:14-56:91: @0[7]: _7 = &amp;(*_19)\n+56:14-56:91: @0[8]: _6 = &amp;(*_7)\n+56:14-56:91: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+56:93-56:96: @0[17]: _14 = &amp;_1\n+56:5-56:98: @0[18]: _13 = (move _14,)\n+56:5-56:98: @0[20]: FakeRead(ForMatchedPlace, _13)\n+56:5-56:98: @0[22]: _15 = (_13.0: &amp;T)\n+56:5-56:98: @0[25]: _17 = &amp;(*_15)\n+56:5-56:98: @0[27]: _18 = &lt;T as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+56:5-56:98: @0.Call: _16 = std::fmt::ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+56:5-56:98: @1[2]: _12 = [move _16]\n+56:5-56:98: @1[5]: _11 = &amp;_12\n+56:5-56:98: @1[6]: _10 = &amp;(*_11)\n+56:5-56:98: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+56:5-56:98: @1.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+56:5-56:98: @2.Call: _3 = std::io::_print(move _4) -&gt; [return: bb3, unwind: bb5]\n+56:5-56:98: @3[6]: _2 = const ()\n+55:92-57:2: @3[8]: _0 = const ()\n+57:2-57:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "179940f6bd5b7e4b56b142b9bb4a49cd34f7d18e", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_inline_crate/uses_inline_crate.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 249, "deletions": 0, "changes": 249, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_inline_crate%2Fuses_inline_crate.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_inline_crate%2Fuses_inline_crate.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_inline_crate%2Fuses_inline_crate.main.-------.InstrumentCoverage.0.html?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,249 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_inline_crate/uses_inline_crate.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>uses_inline_crate.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 6\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:39: @0.Call: _1 = used_inline_crate::used_function() -&gt; [return: bb1, unwind: bb15]\n+9:5-9:46: @1.Call: _2 = used_inline_crate::used_inline_function() -&gt; [return: bb2, unwind: bb15]\n+10:20-10:36: @2[5]: _6 = Box([i32; 4])\n+10:20-10:36: @2[6]: (*_6) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+10:20-10:36: @2[7]: _5 = move _6\n+10:20-10:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+10:20-10:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb14]\n+10:9-10:17: @5[1]: FakeRead(ForLet, _3)\n+11:66-11:75: @5[4]: _8 = &amp;_3\n+11:5-11:76: @5.Call: _7 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb12]\n+12:5-12:96: @6.Call: _9 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb7, unwind: bb12]\n+13:75-13:83: @7[3]: _11 = move _3\n+13:5-13:84: @7.Call: _10 = used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _11) -&gt; [return: bb8, unwind: bb11]\n+14:5-16:6: @8.Call: _12 = used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb9, unwind: bb12]\n+7:11-17:2: @9[1]: _0 = const ()\n+17:2-17:2: @10.Return: return\"><span class=\"annotation\">@0,1,2,3,4,5,6,7,8,9,10\u298a</span>fn main() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:39: @0.Call: _1 = used_inline_crate::used_function() -&gt; [return: bb1, unwind: bb15]\n+9:5-9:46: @1.Call: _2 = used_inline_crate::used_inline_function() -&gt; [return: bb2, unwind: bb15]\n+10:20-10:36: @2[5]: _6 = Box([i32; 4])\n+10:20-10:36: @2[6]: (*_6) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+10:20-10:36: @2[7]: _5 = move _6\n+10:20-10:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+10:20-10:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb14]\n+10:9-10:17: @5[1]: FakeRead(ForLet, _3)\n+11:66-11:75: @5[4]: _8 = &amp;_3\n+11:5-11:76: @5.Call: _7 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb12]\n+12:5-12:96: @6.Call: _9 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb7, unwind: bb12]\n+13:75-13:83: @7[3]: _11 = move _3\n+13:5-13:84: @7.Call: _10 = used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _11) -&gt; [return: bb8, unwind: bb11]\n+14:5-16:6: @8.Call: _12 = used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb9, unwind: bb12]\n+7:11-17:2: @9[1]: _0 = const ()\n+17:2-17:2: @10.Return: return\">    used_inline_crate::used_function();</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:39: @0.Call: _1 = used_inline_crate::used_function() -&gt; [return: bb1, unwind: bb15]\n+9:5-9:46: @1.Call: _2 = used_inline_crate::used_inline_function() -&gt; [return: bb2, unwind: bb15]\n+10:20-10:36: @2[5]: _6 = Box([i32; 4])\n+10:20-10:36: @2[6]: (*_6) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+10:20-10:36: @2[7]: _5 = move _6\n+10:20-10:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+10:20-10:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb14]\n+10:9-10:17: @5[1]: FakeRead(ForLet, _3)\n+11:66-11:75: @5[4]: _8 = &amp;_3\n+11:5-11:76: @5.Call: _7 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb12]\n+12:5-12:96: @6.Call: _9 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb7, unwind: bb12]\n+13:75-13:83: @7[3]: _11 = move _3\n+13:5-13:84: @7.Call: _10 = used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _11) -&gt; [return: bb8, unwind: bb11]\n+14:5-16:6: @8.Call: _12 = used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb9, unwind: bb12]\n+7:11-17:2: @9[1]: _0 = const ()\n+17:2-17:2: @10.Return: return\">    used_inline_crate::used_inline_function();</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:39: @0.Call: _1 = used_inline_crate::used_function() -&gt; [return: bb1, unwind: bb15]\n+9:5-9:46: @1.Call: _2 = used_inline_crate::used_inline_function() -&gt; [return: bb2, unwind: bb15]\n+10:20-10:36: @2[5]: _6 = Box([i32; 4])\n+10:20-10:36: @2[6]: (*_6) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+10:20-10:36: @2[7]: _5 = move _6\n+10:20-10:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+10:20-10:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb14]\n+10:9-10:17: @5[1]: FakeRead(ForLet, _3)\n+11:66-11:75: @5[4]: _8 = &amp;_3\n+11:5-11:76: @5.Call: _7 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb12]\n+12:5-12:96: @6.Call: _9 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb7, unwind: bb12]\n+13:75-13:83: @7[3]: _11 = move _3\n+13:5-13:84: @7.Call: _10 = used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _11) -&gt; [return: bb8, unwind: bb11]\n+14:5-16:6: @8.Call: _12 = used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb9, unwind: bb12]\n+7:11-17:2: @9[1]: _0 = const ()\n+17:2-17:2: @10.Return: return\">    let some_vec = vec![1, 2, 3, 4];</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:39: @0.Call: _1 = used_inline_crate::used_function() -&gt; [return: bb1, unwind: bb15]\n+9:5-9:46: @1.Call: _2 = used_inline_crate::used_inline_function() -&gt; [return: bb2, unwind: bb15]\n+10:20-10:36: @2[5]: _6 = Box([i32; 4])\n+10:20-10:36: @2[6]: (*_6) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+10:20-10:36: @2[7]: _5 = move _6\n+10:20-10:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+10:20-10:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb14]\n+10:9-10:17: @5[1]: FakeRead(ForLet, _3)\n+11:66-11:75: @5[4]: _8 = &amp;_3\n+11:5-11:76: @5.Call: _7 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb12]\n+12:5-12:96: @6.Call: _9 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb7, unwind: bb12]\n+13:75-13:83: @7[3]: _11 = move _3\n+13:5-13:84: @7.Call: _10 = used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _11) -&gt; [return: bb8, unwind: bb11]\n+14:5-16:6: @8.Call: _12 = used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb9, unwind: bb12]\n+7:11-17:2: @9[1]: _0 = const ()\n+17:2-17:2: @10.Return: return\">    used_inline_crate::used_only_from_bin_crate_generic_function(&amp;some_vec);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:39: @0.Call: _1 = used_inline_crate::used_function() -&gt; [return: bb1, unwind: bb15]\n+9:5-9:46: @1.Call: _2 = used_inline_crate::used_inline_function() -&gt; [return: bb2, unwind: bb15]\n+10:20-10:36: @2[5]: _6 = Box([i32; 4])\n+10:20-10:36: @2[6]: (*_6) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+10:20-10:36: @2[7]: _5 = move _6\n+10:20-10:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+10:20-10:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb14]\n+10:9-10:17: @5[1]: FakeRead(ForLet, _3)\n+11:66-11:75: @5[4]: _8 = &amp;_3\n+11:5-11:76: @5.Call: _7 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb12]\n+12:5-12:96: @6.Call: _9 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb7, unwind: bb12]\n+13:75-13:83: @7[3]: _11 = move _3\n+13:5-13:84: @7.Call: _10 = used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _11) -&gt; [return: bb8, unwind: bb11]\n+14:5-16:6: @8.Call: _12 = used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb9, unwind: bb12]\n+7:11-17:2: @9[1]: _0 = const ()\n+17:2-17:2: @10.Return: return\">    used_inline_crate::used_only_from_bin_crate_generic_function(\"used from bin uses_crate.rs\");</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:39: @0.Call: _1 = used_inline_crate::used_function() -&gt; [return: bb1, unwind: bb15]\n+9:5-9:46: @1.Call: _2 = used_inline_crate::used_inline_function() -&gt; [return: bb2, unwind: bb15]\n+10:20-10:36: @2[5]: _6 = Box([i32; 4])\n+10:20-10:36: @2[6]: (*_6) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+10:20-10:36: @2[7]: _5 = move _6\n+10:20-10:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+10:20-10:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb14]\n+10:9-10:17: @5[1]: FakeRead(ForLet, _3)\n+11:66-11:75: @5[4]: _8 = &amp;_3\n+11:5-11:76: @5.Call: _7 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb12]\n+12:5-12:96: @6.Call: _9 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb7, unwind: bb12]\n+13:75-13:83: @7[3]: _11 = move _3\n+13:5-13:84: @7.Call: _10 = used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _11) -&gt; [return: bb8, unwind: bb11]\n+14:5-16:6: @8.Call: _12 = used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb9, unwind: bb12]\n+7:11-17:2: @9[1]: _0 = const ()\n+17:2-17:2: @10.Return: return\">    used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function(some_vec);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:39: @0.Call: _1 = used_inline_crate::used_function() -&gt; [return: bb1, unwind: bb15]\n+9:5-9:46: @1.Call: _2 = used_inline_crate::used_inline_function() -&gt; [return: bb2, unwind: bb15]\n+10:20-10:36: @2[5]: _6 = Box([i32; 4])\n+10:20-10:36: @2[6]: (*_6) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+10:20-10:36: @2[7]: _5 = move _6\n+10:20-10:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+10:20-10:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb14]\n+10:9-10:17: @5[1]: FakeRead(ForLet, _3)\n+11:66-11:75: @5[4]: _8 = &amp;_3\n+11:5-11:76: @5.Call: _7 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb12]\n+12:5-12:96: @6.Call: _9 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb7, unwind: bb12]\n+13:75-13:83: @7[3]: _11 = move _3\n+13:5-13:84: @7.Call: _10 = used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _11) -&gt; [return: bb8, unwind: bb11]\n+14:5-16:6: @8.Call: _12 = used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb9, unwind: bb12]\n+7:11-17:2: @9[1]: _0 = const ()\n+17:2-17:2: @10.Return: return\">    used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function(</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:39: @0.Call: _1 = used_inline_crate::used_function() -&gt; [return: bb1, unwind: bb15]\n+9:5-9:46: @1.Call: _2 = used_inline_crate::used_inline_function() -&gt; [return: bb2, unwind: bb15]\n+10:20-10:36: @2[5]: _6 = Box([i32; 4])\n+10:20-10:36: @2[6]: (*_6) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+10:20-10:36: @2[7]: _5 = move _6\n+10:20-10:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+10:20-10:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb14]\n+10:9-10:17: @5[1]: FakeRead(ForLet, _3)\n+11:66-11:75: @5[4]: _8 = &amp;_3\n+11:5-11:76: @5.Call: _7 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb12]\n+12:5-12:96: @6.Call: _9 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb7, unwind: bb12]\n+13:75-13:83: @7[3]: _11 = move _3\n+13:5-13:84: @7.Call: _10 = used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _11) -&gt; [return: bb8, unwind: bb11]\n+14:5-16:6: @8.Call: _12 = used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb9, unwind: bb12]\n+7:11-17:2: @9[1]: _0 = const ()\n+17:2-17:2: @10.Return: return\">        \"interesting?\",</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:39: @0.Call: _1 = used_inline_crate::used_function() -&gt; [return: bb1, unwind: bb15]\n+9:5-9:46: @1.Call: _2 = used_inline_crate::used_inline_function() -&gt; [return: bb2, unwind: bb15]\n+10:20-10:36: @2[5]: _6 = Box([i32; 4])\n+10:20-10:36: @2[6]: (*_6) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+10:20-10:36: @2[7]: _5 = move _6\n+10:20-10:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+10:20-10:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb14]\n+10:9-10:17: @5[1]: FakeRead(ForLet, _3)\n+11:66-11:75: @5[4]: _8 = &amp;_3\n+11:5-11:76: @5.Call: _7 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb12]\n+12:5-12:96: @6.Call: _9 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb7, unwind: bb12]\n+13:75-13:83: @7[3]: _11 = move _3\n+13:5-13:84: @7.Call: _10 = used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _11) -&gt; [return: bb8, unwind: bb11]\n+14:5-16:6: @8.Call: _12 = used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb9, unwind: bb12]\n+7:11-17:2: @9[1]: _0 = const ()\n+17:2-17:2: @10.Return: return\">    );</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:39: @0.Call: _1 = used_inline_crate::used_function() -&gt; [return: bb1, unwind: bb15]\n+9:5-9:46: @1.Call: _2 = used_inline_crate::used_inline_function() -&gt; [return: bb2, unwind: bb15]\n+10:20-10:36: @2[5]: _6 = Box([i32; 4])\n+10:20-10:36: @2[6]: (*_6) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+10:20-10:36: @2[7]: _5 = move _6\n+10:20-10:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+10:20-10:36: @4.Call: _3 = std::slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb14]\n+10:9-10:17: @5[1]: FakeRead(ForLet, _3)\n+11:66-11:75: @5[4]: _8 = &amp;_3\n+11:5-11:76: @5.Call: _7 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;std::vec::Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb12]\n+12:5-12:96: @6.Call: _9 = used_inline_crate::used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb7, unwind: bb12]\n+13:75-13:83: @7[3]: _11 = move _3\n+13:5-13:84: @7.Call: _10 = used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::&lt;std::vec::Vec&lt;i32&gt;&gt;(move _11) -&gt; [return: bb8, unwind: bb11]\n+14:5-16:6: @8.Call: _12 = used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb9, unwind: bb12]\n+7:11-17:2: @9[1]: _0 = const ()\n+17:2-17:2: @10.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4,5,6,7,8,9,10</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "f08a7b44fbd1ae5d840a63f3e3090ba716b0331d", "filename": "src/test/run-make-fulldeps/coverage/async.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fasync.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -1,6 +1,6 @@\n #![allow(unused_assignments, dead_code)]\n \n-// compile-flags: --edition=2018\n+// compile-flags: --edition=2018 -C opt-level=1 # fix in rustc_mir/monomorphize/partitioning/mod.rs\n \n async fn c(x: u8) -> u8 {\n     if x == 8 {\n@@ -10,7 +10,7 @@ async fn c(x: u8) -> u8 {\n     }\n }\n \n-async fn d() -> u8 { 1 }\n+async fn d() -> u8 { 1 } // should have a coverage count `0` (see below)\n \n async fn e() -> u8 { 1 } // unused function; executor does not block on `g()`\n \n@@ -126,3 +126,14 @@ mod executor {\n         }\n     }\n }\n+\n+// `llvm-cov show` shows no coverage results for the `d()`, even though the\n+// crate's LLVM IR shows the function exists and has an InstrProf PGO counter,\n+// and appears to be registered like all other counted functions.\n+//\n+// `llvm-cov show --debug` output shows there is at least one `Counter` for this\n+// line, but counters do not appear in the `Combined regions` section (unlike\n+// `f()`, which is similar, but does appear in `Combined regions`, and does show\n+// coverage). The only difference is, `f()` is awaited, but the call to await\n+// `d()` is not reached. (Note: `d()` will appear in coverage if the test is\n+// modified to cause it to be awaited.)"}, {"sha": "796512f0c71ed2d1f5667a8ac5b2fb386165a2ef", "filename": "src/test/run-make-fulldeps/coverage/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fclosure.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -1,5 +1,5 @@\n #![allow(unused_assignments, unused_variables)]\n-\n+// compile-flags: -C opt-level=2 # fix described in rustc_middle/mir/mono.rs\n fn main() {\n     // Initialize test constants in a way that cannot be determined at compile time, to ensure\n     // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from"}, {"sha": "eaa93115ae8d2a9959e1cd6954afe099e8793662", "filename": "src/test/run-make-fulldeps/coverage/lib/used_crate.rs", "status": "modified", "additions": 32, "deletions": 36, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_crate.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -1,5 +1,5 @@\n #![allow(unused_assignments, unused_variables)]\n-\n+// compile-flags: -C opt-level=3 # validates coverage now works with optimizations\n use std::fmt::Debug;\n \n pub fn used_function() {\n@@ -17,7 +17,7 @@ pub fn used_function() {\n pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n     println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n }\n-\n+// Expect for above function: `Unexecuted instantiation` (see below)\n pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n     println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n }\n@@ -60,45 +60,41 @@ fn use_this_lib_crate() {\n     used_only_from_this_lib_crate_generic_function(\"used ONLY from library used_crate.rs\");\n }\n \n-// FIXME(#79651): `used_from_bin_crate_and_lib_crate_generic_function()` is covered and executed\n-// `2` times, but the coverage output also shows (at the bottom of the coverage report):\n-//  ------------------\n-//  | Unexecuted instantiation: <some function name here>\n-//  ------------------\n+// FIXME(#79651): \"Unexecuted instantiation\" errors appear in coverage results,\n+// for example:\n //\n-// Note, the function name shown in the error seems to change depending on the structure of the\n-// code, for some reason, including:\n+// | Unexecuted instantiation: used_crate::used_only_from_bin_crate_generic_function::<_>\n //\n-// * used_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>\n-// * used_crate::use_this_lib_crate\n+// These notices appear when `llvm-cov` shows instantiations. This may be a\n+// default option, but it can be suppressed with:\n //\n-// The `Unexecuted instantiation` error may be related to more than one generic function. Since the\n-// reporting is not consistent, it may not be obvious if there are multiple problems here; however,\n-// `used_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>` (which I have seen\n-// with this error) is the only generic function missing instantiaion coverage counts.\n+// ```shell\n+// $ `llvm-cov show --show-instantiations=0 ...`\n+// ```\n //\n-// The `&str` variant was called from within this `lib` crate, and the `bin` crate also calls this\n-// function, but with `T` type `&Vec<i32>`.\n+// The notice is triggered because the function is unused by the library itself,\n+// and when the library is compiled, a synthetic function is generated, so\n+// unused function coverage can be reported. Coverage can be skipped for unused\n+// generic functions with:\n //\n-// I believe the reason is that one or both crates are generating `Zero` counters for what it\n-// believes are \"Unreachable\" instantiations, but those instantiations are counted from the\n-// coverage map in the other crate.\n+// ```shell\n+// $ `rustc -Z instrument-coverage=except-unused-generics ...`\n+// ```\n //\n-// See `add_unreachable_coverage()` in `mapgen.rs` for more on how these `Zero` counters are added\n-// for what the funciton believes are `DefId`s that did not get codegenned. I suspect the issue\n-// may be related to this process, but this needs to be confirmed. It may not be possible to know\n-// for sure if a function is truly unused and should be reported with `Zero` coverage if it may\n-// still get used from an external crate. (Something to look at: If the `DefId` in MIR corresponds\n-// _only_ to the generic function without type parameters, is the `DefId` in the codegenned set,\n-// instantiated with one of the type parameters (in either or both crates) a *different* `DefId`?\n-// If so, `add_unreachable_coverage()` would assume the MIR `DefId` was uncovered, and would add\n-// unreachable coverage.\n+// Even though this function is used by `uses_crate.rs` (and\n+// counted), with substitutions for `T`, those instantiations are only generated\n+// when the generic function is actually used (from the binary, not from this\n+// library crate). So the test result shows coverage for all instantiated\n+// versions and their generic type substitutions, plus the `Unexecuted\n+// instantiation` message for the non-substituted version. This is valid, but\n+// unfortunately a little confusing.\n //\n-// I didn't think they could be different, but if they can, we would need to find the `DefId` for\n-// the generic function MIR and include it in the set of \"codegenned\" DefIds if any instantiation\n-// of that generic function does exist.\n+// The library crate has its own coverage map, and the only way to show unused\n+// coverage of a generic function is to include the generic function in the\n+// coverage map, marked as an \"unused function\". If the library were used by\n+// another binary that never used this generic function, then it would be valid\n+// to show the unused generic, with unknown substitution (`_`).\n //\n-// Note, however, for `used_with_same_type_from_bin_crate_and_lib_crate_generic_function()` both\n-// crates use this function with the same type variant. The function does not have multiple\n-// instantiations, so the coverage analysis is not confused. No \"Unexecuted instantiations\" errors\n-// are reported.\n+// The alternative is to exclude all generics from being included in the \"unused\n+// functions\" list, which would then omit coverage results for\n+// `unused_generic_function<T>()`, below."}, {"sha": "f4c3dd46f76869df9dfe97a98f546aba5141d8ff", "filename": "src/test/run-make-fulldeps/coverage/lib/used_inline_crate.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_inline_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_inline_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_inline_crate.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,90 @@\n+#![allow(unused_assignments, unused_variables)]\n+\n+// compile-flags: -C opt-level=3 # validates coverage now works with optimizations\n+\n+use std::fmt::Debug;\n+\n+pub fn used_function() {\n+    // Initialize test constants in a way that cannot be determined at compile time, to ensure\n+    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from\n+    // dependent conditions.\n+    let is_true = std::env::args().len() == 1;\n+    let mut countdown = 0;\n+    if is_true {\n+        countdown = 10;\n+    }\n+    use_this_lib_crate();\n+}\n+\n+#[inline(always)]\n+pub fn used_inline_function() {\n+    // Initialize test constants in a way that cannot be determined at compile time, to ensure\n+    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from\n+    // dependent conditions.\n+    let is_true = std::env::args().len() == 1;\n+    let mut countdown = 0;\n+    if is_true {\n+        countdown = 10;\n+    }\n+    use_this_lib_crate();\n+}\n+// Expect for above function:\n+//\n+// | Unexecuted instantiation: used_crate::used_only_from_bin_crate_generic_function::<_>\n+//\n+// With `#[inline(always)]` this function is instantiated twice, in both the library crate (which\n+// does not use it) and the `uses_inline_crate` binary (which does use/call it).\n+\n+#[inline(always)]\n+pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n+    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n+}\n+// Expect for above function: `Unexecuted instantiation` (see notes in `used_crate.rs`)\n+\n+#[inline(always)]\n+pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n+    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n+}\n+\n+#[inline(always)]\n+pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+}\n+\n+#[inline(always)]\n+pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+}\n+\n+#[inline(always)]\n+pub fn unused_generic_function<T: Debug>(arg: T) {\n+    println!(\"unused_generic_function with {:?}\", arg);\n+}\n+\n+#[inline(always)]\n+pub fn unused_function() {\n+    let is_true = std::env::args().len() == 1;\n+    let mut countdown = 2;\n+    if !is_true {\n+        countdown = 20;\n+    }\n+}\n+\n+#[inline(always)]\n+fn unused_private_function() {\n+    let is_true = std::env::args().len() == 1;\n+    let mut countdown = 2;\n+    if !is_true {\n+        countdown = 20;\n+    }\n+}\n+\n+fn use_this_lib_crate() {\n+    used_from_bin_crate_and_lib_crate_generic_function(\"used from library used_crate.rs\");\n+    used_with_same_type_from_bin_crate_and_lib_crate_generic_function(\n+        \"used from library used_crate.rs\",\n+    );\n+    let some_vec = vec![5, 6, 7, 8];\n+    used_only_from_this_lib_crate_generic_function(some_vec);\n+    used_only_from_this_lib_crate_generic_function(\"used ONLY from library used_crate.rs\");\n+}"}, {"sha": "fb6113eb01c2de16aaeb8a7085d68bacab71d084", "filename": "src/test/run-make-fulldeps/coverage/unused.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Funused.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,39 @@\n+fn foo<T>(x: T) {\n+    let mut i = 0;\n+    while i < 10 {\n+        i != 0 || i != 0;\n+        i += 1;\n+    }\n+}\n+\n+fn unused_template_func<T>(x: T) {\n+    let mut i = 0;\n+    while i < 10 {\n+        i != 0 || i != 0;\n+        i += 1;\n+    }\n+}\n+\n+fn unused_func(mut a: u32) {\n+    if a != 0 {\n+        a += 1;\n+    }\n+}\n+\n+fn unused_func2(mut a: u32) {\n+    if a != 0 {\n+        a += 1;\n+    }\n+}\n+\n+fn unused_func3(mut a: u32) {\n+    if a != 0 {\n+        a += 1;\n+    }\n+}\n+\n+fn main() -> Result<(), u8> {\n+    foo::<u32>(0);\n+    foo::<f32>(0.0);\n+    Ok(())\n+}"}, {"sha": "20cb05fe5b0ad33e7ea5ff614b79e51b69164654", "filename": "src/test/run-make-fulldeps/coverage/uses_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fuses_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fuses_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fuses_crate.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -1,5 +1,5 @@\n #![allow(unused_assignments, unused_variables)]\n-\n+// compile-flags: -C opt-level=3 # validates coverage now works with optimizations\n extern crate used_crate;\n \n fn main() {"}, {"sha": "a7fe8532be31be8283fc66cf30d59f75fae1a2a3", "filename": "src/test/run-make-fulldeps/coverage/uses_inline_crate.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fuses_inline_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fuses_inline_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fuses_inline_crate.rs?ref=bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "patch": "@@ -0,0 +1,17 @@\n+#![allow(unused_assignments, unused_variables)]\n+\n+// compile-flags: -C opt-level=3 # validates coverage now works with optimizations\n+\n+extern crate used_inline_crate;\n+\n+fn main() {\n+    used_inline_crate::used_function();\n+    used_inline_crate::used_inline_function();\n+    let some_vec = vec![1, 2, 3, 4];\n+    used_inline_crate::used_only_from_bin_crate_generic_function(&some_vec);\n+    used_inline_crate::used_only_from_bin_crate_generic_function(\"used from bin uses_crate.rs\");\n+    used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function(some_vec);\n+    used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function(\n+        \"interesting?\",\n+    );\n+}"}]}