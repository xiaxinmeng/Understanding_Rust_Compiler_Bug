{"sha": "020ca6695f4d58f651984c4fbe2227d891896bb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMGNhNjY5NWY0ZDU4ZjY1MTk4NGM0ZmJlMjIyN2Q4OTE4OTZiYjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-06T14:39:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-06T14:39:11Z"}, "message": "Simplify", "tree": {"sha": "5189803adf9b8d89cb4823362e568748de039396", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5189803adf9b8d89cb4823362e568748de039396"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/020ca6695f4d58f651984c4fbe2227d891896bb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/020ca6695f4d58f651984c4fbe2227d891896bb3", "html_url": "https://github.com/rust-lang/rust/commit/020ca6695f4d58f651984c4fbe2227d891896bb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/020ca6695f4d58f651984c4fbe2227d891896bb3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d50709a96f92f3927b3ac59110d593b49c53008", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d50709a96f92f3927b3ac59110d593b49c53008", "html_url": "https://github.com/rust-lang/rust/commit/4d50709a96f92f3927b3ac59110d593b49c53008"}], "stats": {"total": 50, "additions": 17, "deletions": 33}, "files": [{"sha": "871671de2bf87953534c7c918a61b86eb7ae7b24", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/020ca6695f4d58f651984c4fbe2227d891896bb3/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020ca6695f4d58f651984c4fbe2227d891896bb3/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=020ca6695f4d58f651984c4fbe2227d891896bb3", "patch": "@@ -13,7 +13,7 @@ use ra_syntax::{\n };\n use ra_text_edit::TextEditBuilder;\n \n-use crate::{AssistFile, AssistId, AssistLabel, GroupLabel, ResolvedAssist};\n+use crate::{AssistId, AssistLabel, GroupLabel, ResolvedAssist};\n \n #[derive(Clone, Debug)]\n pub(crate) struct Assist(pub(crate) Vec<AssistInfo>);\n@@ -107,7 +107,7 @@ impl<'a> AssistCtx<'a> {\n             let source_change = {\n                 let mut edit = ActionBuilder::new(&self);\n                 f(&mut edit);\n-                edit.build(change_label, self.frange.file_id)\n+                edit.build(change_label)\n             };\n             info = info.resolved(source_change)\n         };\n@@ -166,7 +166,7 @@ impl<'a> AssistGroup<'a> {\n             let source_change = {\n                 let mut edit = ActionBuilder::new(&self.ctx);\n                 f(&mut edit);\n-                edit.build(change_label, self.ctx.frange.file_id)\n+                edit.build(change_label)\n             };\n             info = info.resolved(source_change)\n         };\n@@ -186,7 +186,7 @@ impl<'a> AssistGroup<'a> {\n pub(crate) struct ActionBuilder<'a, 'b> {\n     edit: TextEditBuilder,\n     cursor_position: Option<TextSize>,\n-    file: AssistFile,\n+    file: FileId,\n     ctx: &'a AssistCtx<'b>,\n }\n \n@@ -195,7 +195,7 @@ impl<'a, 'b> ActionBuilder<'a, 'b> {\n         Self {\n             edit: TextEditBuilder::default(),\n             cursor_position: None,\n-            file: AssistFile::default(),\n+            file: ctx.frange.file_id,\n             ctx,\n         }\n     }\n@@ -254,20 +254,16 @@ impl<'a, 'b> ActionBuilder<'a, 'b> {\n         algo::diff(&node, &new).into_text_edit(&mut self.edit)\n     }\n \n-    pub(crate) fn set_file(&mut self, assist_file: AssistFile) {\n-        self.file = assist_file\n+    pub(crate) fn set_file(&mut self, assist_file: FileId) {\n+        self.file = assist_file;\n     }\n \n-    fn build(self, change_label: String, current_file: FileId) -> SourceChange {\n+    fn build(self, change_label: String) -> SourceChange {\n         let edit = self.edit.finish();\n         if edit.is_empty() && self.cursor_position.is_none() {\n             panic!(\"Only call `add_assist` if the assist can be applied\")\n         }\n-        let file = match self.file {\n-            AssistFile::CurrentFile => current_file,\n-            AssistFile::TargetFile(it) => it,\n-        };\n         SingleFileChange { label: change_label, edit, cursor_position: self.cursor_position }\n-            .into_source_change(file)\n+            .into_source_change(self.file)\n     }\n }"}, {"sha": "278079665062d287b4a6e79f7ce76cebd4fca060", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/020ca6695f4d58f651984c4fbe2227d891896bb3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020ca6695f4d58f651984c4fbe2227d891896bb3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=020ca6695f4d58f651984c4fbe2227d891896bb3", "patch": "@@ -3,9 +3,10 @@ use ra_syntax::{\n     SyntaxKind, SyntaxNode, TextSize,\n };\n \n-use crate::{Assist, AssistCtx, AssistFile, AssistId};\n+use crate::{Assist, AssistCtx, AssistId};\n use ast::{edit::IndentLevel, ArgListOwner, ModuleItemOwner};\n use hir::HirDisplay;\n+use ra_db::FileId;\n use rustc_hash::{FxHashMap, FxHashSet};\n \n // Assist: add_function\n@@ -70,15 +71,15 @@ struct FunctionTemplate {\n     insert_offset: TextSize,\n     cursor_offset: TextSize,\n     fn_def: ast::SourceFile,\n-    file: AssistFile,\n+    file: FileId,\n }\n \n struct FunctionBuilder {\n     target: GeneratedFunctionTarget,\n     fn_name: ast::Name,\n     type_params: Option<ast::TypeParamList>,\n     params: ast::ParamList,\n-    file: AssistFile,\n+    file: FileId,\n     needs_pub: bool,\n }\n \n@@ -92,7 +93,7 @@ impl FunctionBuilder {\n         target_module: Option<hir::InFile<hir::ModuleSource>>,\n     ) -> Option<Self> {\n         let needs_pub = target_module.is_some();\n-        let mut file = AssistFile::default();\n+        let mut file = ctx.frange.file_id;\n         let target = if let Some(target_module) = target_module {\n             let (in_file, target) = next_space_for_fn_in_module(ctx.sema.db, target_module)?;\n             file = in_file;\n@@ -253,9 +254,8 @@ fn next_space_for_fn_after_call_site(expr: &ast::CallExpr) -> Option<GeneratedFu\n fn next_space_for_fn_in_module(\n     db: &dyn hir::db::AstDatabase,\n     module: hir::InFile<hir::ModuleSource>,\n-) -> Option<(AssistFile, GeneratedFunctionTarget)> {\n+) -> Option<(FileId, GeneratedFunctionTarget)> {\n     let file = module.file_id.original_file(db);\n-    let assist_file = AssistFile::TargetFile(file);\n     let assist_item = match module.value {\n         hir::ModuleSource::SourceFile(it) => {\n             if let Some(last_item) = it.items().last() {\n@@ -272,7 +272,7 @@ fn next_space_for_fn_in_module(\n             }\n         }\n     };\n-    Some((assist_file, assist_item))\n+    Some((file, assist_item))\n }\n \n #[cfg(test)]"}, {"sha": "13ea45ec7cc99d2f552b1b0e71091a108441c916", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/020ca6695f4d58f651984c4fbe2227d891896bb3/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020ca6695f4d58f651984c4fbe2227d891896bb3/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=020ca6695f4d58f651984c4fbe2227d891896bb3", "patch": "@@ -18,7 +18,7 @@ pub mod utils;\n pub mod ast_transform;\n \n use hir::Semantics;\n-use ra_db::{FileId, FileRange};\n+use ra_db::FileRange;\n use ra_ide_db::{source_change::SourceChange, RootDatabase};\n use ra_syntax::TextRange;\n \n@@ -62,18 +62,6 @@ pub struct ResolvedAssist {\n     pub source_change: SourceChange,\n }\n \n-#[derive(Debug, Clone, Copy)]\n-enum AssistFile {\n-    CurrentFile,\n-    TargetFile(FileId),\n-}\n-\n-impl Default for AssistFile {\n-    fn default() -> Self {\n-        Self::CurrentFile\n-    }\n-}\n-\n /// Return all the assists applicable at the given position.\n ///\n /// Assists are returned in the \"unresolved\" state, that is only labels are"}]}