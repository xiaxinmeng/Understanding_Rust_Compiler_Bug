{"sha": "332cc97986e37ec33ef8f21c75be9feb8470b70d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMmNjOTc5ODZlMzdlYzMzZWY4ZjIxYzc1YmU5ZmViODQ3MGI3MGQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-23T16:12:58Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-05T09:00:36Z"}, "message": "Use block indent style for struct tuple", "tree": {"sha": "0e8d7cc15ed6382460c470ca8d2fb14f8eae0c33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e8d7cc15ed6382460c470ca8d2fb14f8eae0c33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/332cc97986e37ec33ef8f21c75be9feb8470b70d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/332cc97986e37ec33ef8f21c75be9feb8470b70d", "html_url": "https://github.com/rust-lang/rust/commit/332cc97986e37ec33ef8f21c75be9feb8470b70d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/332cc97986e37ec33ef8f21c75be9feb8470b70d/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "818ff7a60241c6cbc808eb7c12a5742df03583c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/818ff7a60241c6cbc808eb7c12a5742df03583c9", "html_url": "https://github.com/rust-lang/rust/commit/818ff7a60241c6cbc808eb7c12a5742df03583c9"}], "stats": {"total": 78, "additions": 45, "deletions": 33}, "files": [{"sha": "f113dee2c0ce92ba7801944e71769f120d713dcb", "filename": "src/items.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/332cc97986e37ec33ef8f21c75be9feb8470b70d/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332cc97986e37ec33ef8f21c75be9feb8470b70d/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=332cc97986e37ec33ef8f21c75be9feb8470b70d", "patch": "@@ -15,8 +15,8 @@ use codemap::SpanUtils;\n use utils::{format_mutability, format_visibility, contains_skip, end_typaram, wrap_str,\n             last_line_width, format_unsafety, trim_newlines, stmt_expr, semicolon_for_expr,\n             trimmed_last_line_width, colon_spaces, mk_sp};\n-use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, list_helper,\n-            DefinitiveListTactic, ListTactic, definitive_tactic};\n+use lists::{write_list, itemize_list, definitive_tactic, ListItem, ListFormatting,\n+            SeparatorTactic, DefinitiveListTactic, ListTactic};\n use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, ExprType};\n use comment::{FindUncommented, contains_comment, rewrite_comment, recover_comment_removed};\n use visitor::FmtVisitor;\n@@ -1152,12 +1152,11 @@ fn format_tuple_struct(\n             let generics_str = try_opt!(rewrite_generics(context, generics, shape, g_span));\n             result.push_str(&generics_str);\n \n-            let where_budget = try_opt!(\n-                context\n-                    .config\n-                    .max_width()\n-                    .checked_sub(last_line_width(&result))\n-            );\n+            let where_budget = context\n+                .config\n+                .max_width()\n+                .checked_sub(last_line_width(&result))\n+                .unwrap_or(0);\n             try_opt!(rewrite_where_clause(\n                 context,\n                 &generics.where_clause,\n@@ -1197,7 +1196,11 @@ fn format_tuple_struct(\n             }\n             IndentStyle::Block => {\n                 (\n-                    ListTactic::HorizontalVertical,\n+                    if result.contains('\\n') {\n+                        ListTactic::Vertical\n+                    } else {\n+                        ListTactic::HorizontalVertical\n+                    },\n                     offset.block_only().block_indent(&context.config),\n                 )\n             }\n@@ -1233,15 +1236,20 @@ fn format_tuple_struct(\n             context\n                 .config\n                 .max_width()\n-                .checked_sub(offset.block_only().width() + result.len() + 3)\n+                .checked_sub(offset.block_only().width() + last_line_width(&result) + 3)\n         );\n-        let body = try_opt!(list_helper(\n-            items,\n-            // TODO budget is wrong in block case\n-            Shape::legacy(body_budget, item_indent),\n-            context.config,\n-            tactic,\n-        ));\n+\n+        let item_vec: Vec<_> = items.collect();\n+        let tactic = definitive_tactic(&item_vec, tactic, body_budget);\n+        let fmt = ListFormatting {\n+            tactic: tactic,\n+            separator: \",\",\n+            trailing_separator: context.config.trailing_comma(),\n+            shape: Shape::indented(item_indent, context.config),\n+            ends_with_newline: false,\n+            config: context.config,\n+        };\n+        let body = try_opt!(write_list(&item_vec, &fmt));\n \n         if context.config.fn_args_layout() == IndentStyle::Visual || !body.contains('\\n') {\n             result.push('(');"}, {"sha": "14b9910687d00c670a8a383540f6f5a94f5081ac", "filename": "tests/target/enum.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/332cc97986e37ec33ef8f21c75be9feb8470b70d/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332cc97986e37ec33ef8f21c75be9feb8470b70d/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=332cc97986e37ec33ef8f21c75be9feb8470b70d", "patch": "@@ -32,7 +32,7 @@ enum Bar {\n enum LongVariants {\n     First(\n         LOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONG, // comment\n-        VARIANT\n+        VARIANT,\n     ),\n     // This is the second variant\n     Second,\n@@ -53,7 +53,7 @@ enum X {\n     CreateWebGLPaintTask(\n         Size2D<i32>,\n         GLContextAttributes,\n-        IpcSender<Result<(IpcSender<CanvasMsg>, usize), String>>\n+        IpcSender<Result<(IpcSender<CanvasMsg>, usize), String>>,\n     ), // This is a post comment\n }\n \n@@ -120,7 +120,7 @@ fn nested_enum_test() {\n                 usize,\n                 usize,\n                 usize,\n-                usize\n+                usize,\n             ), /* AAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAA\n                 * AAAAAAAAAAAAAAAAAAAAAA */\n             Two, /* AAAAAAAAAAAAAAAAAA  AAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n@@ -155,6 +155,6 @@ pub enum CoreResourceMsg {\n         #[serde(deserialize_with = \"::hyper_serde::deserialize\",\n                 serialize_with = \"::hyper_serde::serialize\")]\n         Cookie,\n-        CookieSource\n+        CookieSource,\n     ),\n }"}, {"sha": "c525c5878454f2486924b139d57d63be76189e05", "filename": "tests/target/structs.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/332cc97986e37ec33ef8f21c75be9feb8470b70d/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332cc97986e37ec33ef8f21c75be9feb8470b70d/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=332cc97986e37ec33ef8f21c75be9feb8470b70d", "patch": "@@ -43,12 +43,13 @@ struct NewType(Type, OtherType);\n \n struct NewInt<T: Copy>(pub i32, SomeType /* inline comment */, T /* sup */);\n \n-struct Qux<'a,\n-           N: Clone + 'a,\n-           E: Clone + 'a,\n-           G: Labeller<'a, N, E> + GraphWalk<'a, N, E>,\n-           W: Write + Copy>\n-(\n+struct Qux<\n+    'a,\n+    N: Clone + 'a,\n+    E: Clone + 'a,\n+    G: Labeller<'a, N, E> + GraphWalk<'a, N, E>,\n+    W: Write + Copy,\n+>(\n     AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, // Comment\n     BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,\n     #[AnAttr]\n@@ -62,7 +63,7 @@ struct Tuple(\n     // Comment 1\n     AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n     // Comment 2\n-    BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\n+    BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,\n );\n \n // With a where clause and generics.\n@@ -154,7 +155,7 @@ struct Foo<T>(\n     TTTTTTTTTTTTTTTTT,\n     UUUUUUUUUUUUUUUUUUUUUUUU,\n     TTTTTTTTTTTTTTTTTTT,\n-    UUUUUUUUUUUUUUUUUUU\n+    UUUUUUUUUUUUUUUUUUU,\n );\n struct Foo<T>(TTTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUUUU, TTTTTTTTTTTTTTTTTTT)\n where\n@@ -166,7 +167,7 @@ struct Foo<T>(\n     TTTTTTTTTTTTTTTTT,\n     UUUUUUUUUUUUUUUUUUUUUUUU,\n     TTTTTTTTTTTTTTTTTTT,\n-    UUUUUUUUUUUUUUUUUUU\n+    UUUUUUUUUUUUUUUUUUU,\n )\n where\n     T: PartialEq;\n@@ -176,7 +177,7 @@ struct Foo<T>(\n     // Baz\n     TTTTTTTTTTTTTTTTTTT,\n     // Qux (FIXME #572 - doc comment)\n-    UUUUUUUUUUUUUUUUUUU\n+    UUUUUUUUUUUUUUUUUUU,\n );\n \n mod m {\n@@ -191,7 +192,7 @@ mod m {\n struct Foo<T>(\n     TTTTTTTTTTTTTTTTTTT,\n     /// Qux\n-    UUUUUUUUUUUUUUUUUUU\n+    UUUUUUUUUUUUUUUUUUU,\n );\n \n struct Issue677 {"}, {"sha": "4c4dedd59a04d1bd79da88a0ec65cb70e54d6a60", "filename": "tests/target/trailing_commas.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/332cc97986e37ec33ef8f21c75be9feb8470b70d/tests%2Ftarget%2Ftrailing_commas.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332cc97986e37ec33ef8f21c75be9feb8470b70d/tests%2Ftarget%2Ftrailing_commas.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftrailing_commas.rs?ref=332cc97986e37ec33ef8f21c75be9feb8470b70d", "patch": "@@ -48,7 +48,10 @@ struct Pair<\n \n struct TupPair<\n     S, T,\n->(S, T)\n+>(\n+    S,\n+    T,\n+)\n where\n     T: P,\n     S: P + Q;"}]}