{"sha": "faeeef3b9cd841b54ece2ff887d608d5bb54f41c", "node_id": "C_kwDOAAsO6NoAKGZhZWVlZjNiOWNkODQxYjU0ZWNlMmZmODg3ZDYwOGQ1YmI1NGY0MWM", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-01-03T20:25:00Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-17T04:52:23Z"}, "message": "Improve `redundant_slicing` lint\n\n* Lint when slicing triggers auto-deref\n* Lint when slicing returns the same type as dereferencing", "tree": {"sha": "6ab22a57f10d5bb0daf44800b474bccd40f72166", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ab22a57f10d5bb0daf44800b474bccd40f72166"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faeeef3b9cd841b54ece2ff887d608d5bb54f41c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faeeef3b9cd841b54ece2ff887d608d5bb54f41c", "html_url": "https://github.com/rust-lang/rust/commit/faeeef3b9cd841b54ece2ff887d608d5bb54f41c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faeeef3b9cd841b54ece2ff887d608d5bb54f41c/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2dc8ca08029b317771fcdac8979d77505068670", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2dc8ca08029b317771fcdac8979d77505068670", "html_url": "https://github.com/rust-lang/rust/commit/e2dc8ca08029b317771fcdac8979d77505068670"}], "stats": {"total": 165, "additions": 134, "deletions": 31}, "files": [{"sha": "b492f944dc324385a9a99ea41a4e39640936d609", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 49, "deletions": 18, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/faeeef3b9cd841b54ece2ff887d608d5bb54f41c/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faeeef3b9cd841b54ece2ff887d608d5bb54f41c/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=faeeef3b9cd841b54ece2ff887d608d5bb54f41c", "patch": "@@ -1,11 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::get_parent_expr;\n use clippy_utils::source::snippet_with_context;\n-use clippy_utils::ty::is_type_lang_item;\n+use clippy_utils::ty::{is_type_lang_item, peel_mid_ty_refs};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind, LangItem, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::subst::GenericArg;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -53,34 +54,64 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n             if addressee.span.ctxt() == ctxt;\n             if let ExprKind::Index(indexed, range) = addressee.kind;\n             if is_type_lang_item(cx, cx.typeck_results().expr_ty_adjusted(range), LangItem::RangeFull);\n-            if cx.typeck_results().expr_ty(expr) == cx.typeck_results().expr_ty(indexed);\n             then {\n+                let (expr_ty, expr_ref_count) = peel_mid_ty_refs(cx.typeck_results().expr_ty(expr));\n+                let (indexed_ty, indexed_ref_count) = peel_mid_ty_refs(cx.typeck_results().expr_ty(indexed));\n                 let mut app = Applicability::MachineApplicable;\n-                let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;\n \n-                let (reborrow_str, help_str) = if mutability == Mutability::Mut {\n-                    // The slice was used to reborrow the mutable reference.\n-                    (\"&mut *\", \"reborrow the original value instead\")\n-                } else if matches!(\n-                    get_parent_expr(cx, expr),\n-                    Some(Expr {\n-                        kind: ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mut, _),\n-                        ..\n-                    })\n-                ) {\n-                    // The slice was used to make a temporary reference.\n-                    (\"&*\", \"reborrow the original value instead\")\n+                let (help, sugg) = if expr_ty == indexed_ty {\n+                    if expr_ref_count > indexed_ref_count {\n+                        return;\n+                    }\n+\n+                    let (reborrow_str, help_str) = if mutability == Mutability::Mut {\n+                        // The slice was used to reborrow the mutable reference.\n+                        (\"&mut *\", \"reborrow the original value instead\")\n+                    } else if matches!(\n+                        get_parent_expr(cx, expr),\n+                        Some(Expr {\n+                            kind: ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mut, _),\n+                            ..\n+                        })\n+                    ) {\n+                        // The slice was used to make a temporary reference.\n+                        (\"&*\", \"reborrow the original value instead\")\n+                    } else if expr_ref_count != indexed_ref_count {\n+                        (\"\", \"dereference the original value instead\")\n+                    } else {\n+                        (\"\", \"use the original value instead\")\n+                    };\n+\n+                    let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;\n+                    (help_str, format!(\"{}{}{}\", reborrow_str, \"*\".repeat(indexed_ref_count - expr_ref_count), snip))\n+                } else if let Some(target_id) = cx.tcx.lang_items().deref_target() {\n+                    if let Ok(deref_ty) = cx.tcx.try_normalize_erasing_regions(\n+                        cx.param_env,\n+                        cx.tcx.mk_projection(target_id, cx.tcx.mk_substs([GenericArg::from(indexed_ty)].into_iter())),\n+                    ) {\n+                        if deref_ty == expr_ty {\n+                            let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;\n+                            (\n+                                \"dereference the original value instead\",\n+                                format!(\"&{}{}*{}\", mutability.prefix_str(), \"*\".repeat(indexed_ref_count), snip),\n+                            )\n+                        } else {\n+                            return;\n+                        }\n+                    } else {\n+                        return;\n+                    }\n                 } else {\n-                    (\"\", \"use the original value instead\")\n+                    return;\n                 };\n \n                 span_lint_and_sugg(\n                     cx,\n                     REDUNDANT_SLICING,\n                     expr.span,\n                     \"redundant slicing of the whole range\",\n-                    help_str,\n-                    format!(\"{}{}\", reborrow_str, snip),\n+                    help,\n+                    sugg,\n                     app,\n                 );\n             }"}, {"sha": "9716a48be94ba31844b612cb96232b845c492389", "filename": "tests/ui/redundant_slicing.fixed", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/faeeef3b9cd841b54ece2ff887d608d5bb54f41c/tests%2Fui%2Fredundant_slicing.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/faeeef3b9cd841b54ece2ff887d608d5bb54f41c/tests%2Fui%2Fredundant_slicing.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_slicing.fixed?ref=faeeef3b9cd841b54ece2ff887d608d5bb54f41c", "patch": "@@ -0,0 +1,40 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::redundant_slicing)]\n+\n+fn main() {\n+    let slice: &[u32] = &[0];\n+    let _ = slice; // Redundant slice\n+\n+    let v = vec![0];\n+    let _ = &*v; // Deref instead of slice\n+    let _ = (&*v); // Outer borrow is redundant\n+\n+    static S: &[u8] = &[0, 1, 2];\n+    let err = &mut &*S; // Should reborrow instead of slice\n+\n+    let mut vec = vec![0];\n+    let mut_slice = &mut *vec; // Deref instead of slice\n+    let _ = &mut *mut_slice; // Should reborrow instead of slice\n+\n+    let ref_vec = &vec;\n+    let _ = &**ref_vec; // Deref instead of slice\n+\n+    macro_rules! m {\n+        ($e:expr) => {\n+            $e\n+        };\n+    }\n+    let _ = slice;\n+\n+    macro_rules! m2 {\n+        ($e:expr) => {\n+            &$e[..]\n+        };\n+    }\n+    let _ = m2!(slice); // Don't lint in a macro\n+\n+    let slice_ref = &slice;\n+    let _ = *slice_ref; // Deref instead of slice\n+}"}, {"sha": "a6902f7619bde031f3ac8c0fe3e8bf23a9728f0c", "filename": "tests/ui/redundant_slicing.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/faeeef3b9cd841b54ece2ff887d608d5bb54f41c/tests%2Fui%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faeeef3b9cd841b54ece2ff887d608d5bb54f41c/tests%2Fui%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_slicing.rs?ref=faeeef3b9cd841b54ece2ff887d608d5bb54f41c", "patch": "@@ -1,21 +1,26 @@\n+// run-rustfix\n+\n #![allow(unused)]\n #![warn(clippy::redundant_slicing)]\n \n fn main() {\n     let slice: &[u32] = &[0];\n-    let _ = &slice[..];\n+    let _ = &slice[..]; // Redundant slice\n \n     let v = vec![0];\n-    let _ = &v[..]; // Changes the type\n-    let _ = &(&v[..])[..]; // Outer borrow is redundant\n+    let _ = &v[..]; // Deref instead of slice\n+    let _ = &(&*v)[..]; // Outer borrow is redundant\n \n     static S: &[u8] = &[0, 1, 2];\n     let err = &mut &S[..]; // Should reborrow instead of slice\n \n     let mut vec = vec![0];\n-    let mut_slice = &mut *vec;\n+    let mut_slice = &mut vec[..]; // Deref instead of slice\n     let _ = &mut mut_slice[..]; // Should reborrow instead of slice\n \n+    let ref_vec = &vec;\n+    let _ = &ref_vec[..]; // Deref instead of slice\n+\n     macro_rules! m {\n         ($e:expr) => {\n             $e\n@@ -29,4 +34,7 @@ fn main() {\n         };\n     }\n     let _ = m2!(slice); // Don't lint in a macro\n+\n+    let slice_ref = &slice;\n+    let _ = &slice_ref[..]; // Deref instead of slice\n }"}, {"sha": "c2a5e9e1914013494de104c9c8e4523921bafab4", "filename": "tests/ui/redundant_slicing.stderr", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/faeeef3b9cd841b54ece2ff887d608d5bb54f41c/tests%2Fui%2Fredundant_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faeeef3b9cd841b54ece2ff887d608d5bb54f41c/tests%2Fui%2Fredundant_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_slicing.stderr?ref=faeeef3b9cd841b54ece2ff887d608d5bb54f41c", "patch": "@@ -1,34 +1,58 @@\n error: redundant slicing of the whole range\n-  --> $DIR/redundant_slicing.rs:6:13\n+  --> $DIR/redundant_slicing.rs:8:13\n    |\n-LL |     let _ = &slice[..];\n+LL |     let _ = &slice[..]; // Redundant slice\n    |             ^^^^^^^^^^ help: use the original value instead: `slice`\n    |\n    = note: `-D clippy::redundant-slicing` implied by `-D warnings`\n \n error: redundant slicing of the whole range\n-  --> $DIR/redundant_slicing.rs:10:13\n+  --> $DIR/redundant_slicing.rs:11:13\n    |\n-LL |     let _ = &(&v[..])[..]; // Outer borrow is redundant\n-   |             ^^^^^^^^^^^^^ help: use the original value instead: `(&v[..])`\n+LL |     let _ = &v[..]; // Deref instead of slice\n+   |             ^^^^^^ help: dereference the original value instead: `&*v`\n \n error: redundant slicing of the whole range\n-  --> $DIR/redundant_slicing.rs:13:20\n+  --> $DIR/redundant_slicing.rs:12:13\n+   |\n+LL |     let _ = &(&*v)[..]; // Outer borrow is redundant\n+   |             ^^^^^^^^^^ help: use the original value instead: `(&*v)`\n+\n+error: redundant slicing of the whole range\n+  --> $DIR/redundant_slicing.rs:15:20\n    |\n LL |     let err = &mut &S[..]; // Should reborrow instead of slice\n    |                    ^^^^^^ help: reborrow the original value instead: `&*S`\n \n error: redundant slicing of the whole range\n-  --> $DIR/redundant_slicing.rs:17:13\n+  --> $DIR/redundant_slicing.rs:18:21\n+   |\n+LL |     let mut_slice = &mut vec[..]; // Deref instead of slice\n+   |                     ^^^^^^^^^^^^ help: dereference the original value instead: `&mut *vec`\n+\n+error: redundant slicing of the whole range\n+  --> $DIR/redundant_slicing.rs:19:13\n    |\n LL |     let _ = &mut mut_slice[..]; // Should reborrow instead of slice\n    |             ^^^^^^^^^^^^^^^^^^ help: reborrow the original value instead: `&mut *mut_slice`\n \n error: redundant slicing of the whole range\n-  --> $DIR/redundant_slicing.rs:24:13\n+  --> $DIR/redundant_slicing.rs:22:13\n+   |\n+LL |     let _ = &ref_vec[..]; // Deref instead of slice\n+   |             ^^^^^^^^^^^^ help: dereference the original value instead: `&**ref_vec`\n+\n+error: redundant slicing of the whole range\n+  --> $DIR/redundant_slicing.rs:29:13\n    |\n LL |     let _ = &m!(slice)[..];\n    |             ^^^^^^^^^^^^^^ help: use the original value instead: `slice`\n \n-error: aborting due to 5 previous errors\n+error: redundant slicing of the whole range\n+  --> $DIR/redundant_slicing.rs:39:13\n+   |\n+LL |     let _ = &slice_ref[..]; // Deref instead of slice\n+   |             ^^^^^^^^^^^^^^ help: dereference the original value instead: `*slice_ref`\n+\n+error: aborting due to 9 previous errors\n "}]}