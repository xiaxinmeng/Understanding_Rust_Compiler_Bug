{"sha": "b75f384d0b0227000eff393e5d4e11bda56b293f", "node_id": "C_kwDOAAsO6NoAKGI3NWYzODRkMGIwMjI3MDAwZWZmMzkzZTVkNGUxMWJkYTU2YjI5M2Y", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-30T22:26:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-30T22:26:28Z"}, "message": "Rollup merge of #93901 - petrochenkov:linkmod, r=wesleywiser\n\nStabilize native library modifier syntax and the `whole-archive` modifier specifically\n\nStabilization report: https://github.com/rust-lang/rust/pull/93901#issuecomment-1041325522\n\ncc https://github.com/rust-lang/rust/issues/81490", "tree": {"sha": "91e382173c58ebddd4542cece3d430ada9b8818e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91e382173c58ebddd4542cece3d430ada9b8818e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b75f384d0b0227000eff393e5d4e11bda56b293f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiRNkUCRBK7hj4Ov3rIwAAbygIAA5YKPm04VZD7YPOgUocAQnV\nj/w7sFAanC3HITt0IdpzlyAStdV9qjwFjdyAme3taH9V5BN+M+Zl7nt1yu4LnrKE\nMf3PTWjFkaLAvEXjVn5ChySveQoi5wxYoPBlHrzMETyz2BEMFba2v3IS50yM2k/C\nJnsAWnc4sjMIyB+c1B5YbGs06K4XDbBIpMjz4oFqcGfcvxgXOwuVmAKdf3Afn93g\niktyaahw3SwWvb4qkQnx+aQ03tkhtEDeZ2+0iLt9FVTyZXhMHCQjA3fYU4PLoacS\nJktYDVnfGzF+ABUucMtg1YiipUefAqs0//IkAsbbXyNR67J4TIIg/Y07rlQONTI=\n=vlVX\n-----END PGP SIGNATURE-----\n", "payload": "tree 91e382173c58ebddd4542cece3d430ada9b8818e\nparent c5cf08d37b85f953b132951e868df5b924250fdc\nparent 1004783ef9bdcf006f0ed33badacf83a5934feb2\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648679188 +0200\ncommitter GitHub <noreply@github.com> 1648679188 +0200\n\nRollup merge of #93901 - petrochenkov:linkmod, r=wesleywiser\n\nStabilize native library modifier syntax and the `whole-archive` modifier specifically\n\nStabilization report: https://github.com/rust-lang/rust/pull/93901#issuecomment-1041325522\n\ncc https://github.com/rust-lang/rust/issues/81490\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b75f384d0b0227000eff393e5d4e11bda56b293f", "html_url": "https://github.com/rust-lang/rust/commit/b75f384d0b0227000eff393e5d4e11bda56b293f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b75f384d0b0227000eff393e5d4e11bda56b293f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5cf08d37b85f953b132951e868df5b924250fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5cf08d37b85f953b132951e868df5b924250fdc", "html_url": "https://github.com/rust-lang/rust/commit/c5cf08d37b85f953b132951e868df5b924250fdc"}, {"sha": "1004783ef9bdcf006f0ed33badacf83a5934feb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1004783ef9bdcf006f0ed33badacf83a5934feb2", "html_url": "https://github.com/rust-lang/rust/commit/1004783ef9bdcf006f0ed33badacf83a5934feb2"}], "stats": {"total": 435, "additions": 270, "deletions": 165}, "files": [{"sha": "a778d8c54708459ab2325b922aba0973ce64773f", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -387,13 +387,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         if attr.has_name(sym::link) {\n             for nested_meta in attr.meta_item_list().unwrap_or_default() {\n                 if nested_meta.has_name(sym::modifiers) {\n-                    gate_feature_post!(\n-                        self,\n-                        native_link_modifiers,\n-                        nested_meta.span(),\n-                        \"native link modifiers are experimental\"\n-                    );\n-\n                     if let Some(modifiers) = nested_meta.value_str() {\n                         for modifier in modifiers.as_str().split(',') {\n                             if let Some(modifier) = modifier.strip_prefix(&['+', '-']) {\n@@ -412,7 +405,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                 gate_modifier!(\n                                     \"bundle\" => native_link_modifiers_bundle\n                                     \"verbatim\" => native_link_modifiers_verbatim\n-                                    \"whole-archive\" => native_link_modifiers_whole_archive\n                                     \"as-needed\" => native_link_modifiers_as_needed\n                                 );\n                             }"}, {"sha": "548ae0e411da7d12e5f2f348c0ab208876985cbf", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 62, "deletions": 41, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -1844,7 +1844,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // This change is somewhat breaking in practice due to local static libraries being linked\n     // as whole-archive (#85144), so removing whole-archive may be a pre-requisite.\n     if sess.opts.debugging_opts.link_native_libraries {\n-        add_local_native_libraries(cmd, sess, codegen_results);\n+        add_local_native_libraries(cmd, sess, codegen_results, crate_type);\n     }\n \n     // Upstream rust libraries and their nobundle static libraries\n@@ -2016,6 +2016,16 @@ fn add_order_independent_options(\n     add_rpath_args(cmd, sess, codegen_results, out_filename);\n }\n \n+// A dylib may reexport symbols from the linked rlib or native static library.\n+// Even if some symbol is reexported it's still not necessarily counted as used and may be\n+// dropped, at least with `ld`-like ELF linkers. So we have to link some rlibs and static\n+// libraries as whole-archive to avoid losing reexported symbols.\n+// FIXME: Find a way to mark reexported symbols as used and avoid this use of whole-archive.\n+fn default_to_whole_archive(sess: &Session, crate_type: CrateType, cmd: &dyn Linker) -> bool {\n+    crate_type == CrateType::Dylib\n+        && !(sess.target.limit_rdylib_exports && cmd.exported_symbol_means_used_symbol())\n+}\n+\n /// # Native library linking\n ///\n /// User-supplied library search paths (-L on the command line). These are the same paths used to\n@@ -2029,6 +2039,7 @@ fn add_local_native_libraries(\n     cmd: &mut dyn Linker,\n     sess: &Session,\n     codegen_results: &CodegenResults,\n+    crate_type: CrateType,\n ) {\n     let filesearch = sess.target_filesearch(PathKind::All);\n     for search_path in filesearch.search_paths() {\n@@ -2046,14 +2057,18 @@ fn add_local_native_libraries(\n         codegen_results.crate_info.used_libraries.iter().filter(|l| relevant_lib(sess, l));\n \n     let search_path = OnceCell::new();\n-    let mut last = (NativeLibKind::Unspecified, None);\n+    let mut last = (None, NativeLibKind::Unspecified, None);\n     for lib in relevant_libs {\n         let Some(name) = lib.name else {\n             continue;\n         };\n \n         // Skip if this library is the same as the last.\n-        last = if (lib.kind, lib.name) == last { continue } else { (lib.kind, lib.name) };\n+        last = if (lib.name, lib.kind, lib.verbatim) == last {\n+            continue;\n+        } else {\n+            (lib.name, lib.kind, lib.verbatim)\n+        };\n \n         let verbatim = lib.verbatim.unwrap_or(false);\n         match lib.kind {\n@@ -2064,15 +2079,19 @@ fn add_local_native_libraries(\n             NativeLibKind::Framework { as_needed } => {\n                 cmd.link_framework(name, as_needed.unwrap_or(true))\n             }\n-            NativeLibKind::Static { bundle: None | Some(true), .. }\n-            | NativeLibKind::Static { whole_archive: Some(true), .. } => {\n-                cmd.link_whole_staticlib(\n-                    name,\n-                    verbatim,\n-                    &search_path.get_or_init(|| archive_search_paths(sess)),\n-                );\n+            NativeLibKind::Static { whole_archive, .. } => {\n+                if whole_archive == Some(true)\n+                    || (whole_archive == None && default_to_whole_archive(sess, crate_type, cmd))\n+                {\n+                    cmd.link_whole_staticlib(\n+                        name,\n+                        verbatim,\n+                        &search_path.get_or_init(|| archive_search_paths(sess)),\n+                    );\n+                } else {\n+                    cmd.link_staticlib(name, verbatim)\n+                }\n             }\n-            NativeLibKind::Static { .. } => cmd.link_staticlib(name, verbatim),\n             NativeLibKind::RawDylib => {\n                 // FIXME(#58713): Proper handling for raw dylibs.\n                 bug!(\"raw_dylib feature not yet implemented\");\n@@ -2197,34 +2216,37 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n                 // external build system already has the native dependencies defined, and it\n                 // will provide them to the linker itself.\n                 if sess.opts.debugging_opts.link_native_libraries {\n-                    let mut last = None;\n+                    let mut last = (None, NativeLibKind::Unspecified, None);\n                     for lib in &codegen_results.crate_info.native_libraries[&cnum] {\n+                        let Some(name) = lib.name else {\n+                            continue;\n+                        };\n                         if !relevant_lib(sess, lib) {\n-                            // Skip libraries if they are disabled by `#[link(cfg=...)]`\n                             continue;\n                         }\n \n                         // Skip if this library is the same as the last.\n-                        if last == lib.name {\n+                        last = if (lib.name, lib.kind, lib.verbatim) == last {\n                             continue;\n-                        }\n-\n-                        if let Some(static_lib_name) = lib.name {\n-                            if let NativeLibKind::Static { bundle: Some(false), whole_archive } =\n-                                lib.kind\n+                        } else {\n+                            (lib.name, lib.kind, lib.verbatim)\n+                        };\n+\n+                        if let NativeLibKind::Static { bundle: Some(false), whole_archive } =\n+                            lib.kind\n+                        {\n+                            let verbatim = lib.verbatim.unwrap_or(false);\n+                            if whole_archive == Some(true)\n+                                || (whole_archive == None\n+                                    && default_to_whole_archive(sess, crate_type, cmd))\n                             {\n-                                let verbatim = lib.verbatim.unwrap_or(false);\n-                                if whole_archive == Some(true) {\n-                                    cmd.link_whole_staticlib(\n-                                        static_lib_name,\n-                                        verbatim,\n-                                        search_path.get_or_init(|| archive_search_paths(sess)),\n-                                    );\n-                                } else {\n-                                    cmd.link_staticlib(static_lib_name, verbatim);\n-                                }\n-\n-                                last = lib.name;\n+                                cmd.link_whole_staticlib(\n+                                    name,\n+                                    verbatim,\n+                                    search_path.get_or_init(|| archive_search_paths(sess)),\n+                                );\n+                            } else {\n+                                cmd.link_staticlib(name, verbatim);\n                             }\n                         }\n                     }\n@@ -2282,15 +2304,10 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n         let cratepath = &src.rlib.as_ref().unwrap().0;\n \n         let mut link_upstream = |path: &Path| {\n-            // If we're creating a dylib, then we need to include the\n-            // whole of each object in our archive into that artifact. This is\n-            // because a `dylib` can be reused as an intermediate artifact.\n-            //\n-            // Note, though, that we don't want to include the whole of a\n-            // compiler-builtins crate (e.g., compiler-rt) because it'll get\n-            // repeatedly linked anyway.\n+            // We don't want to include the whole compiler-builtins crate (e.g., compiler-rt)\n+            // regardless of the default because it'll get repeatedly linked anyway.\n             let path = fix_windows_verbatim_for_gcc(path);\n-            if crate_type == CrateType::Dylib\n+            if default_to_whole_archive(sess, crate_type, cmd)\n                 && codegen_results.crate_info.compiler_builtins != Some(cnum)\n             {\n                 cmd.link_whole_rlib(&path);\n@@ -2401,7 +2418,7 @@ fn add_upstream_native_libraries(\n     sess: &Session,\n     codegen_results: &CodegenResults,\n ) {\n-    let mut last = (NativeLibKind::Unspecified, None);\n+    let mut last = (None, NativeLibKind::Unspecified, None);\n     for &cnum in &codegen_results.crate_info.used_crates {\n         for lib in codegen_results.crate_info.native_libraries[&cnum].iter() {\n             let Some(name) = lib.name else {\n@@ -2412,7 +2429,11 @@ fn add_upstream_native_libraries(\n             }\n \n             // Skip if this library is the same as the last.\n-            last = if (lib.kind, lib.name) == last { continue } else { (lib.kind, lib.name) };\n+            last = if (lib.name, lib.kind, lib.verbatim) == last {\n+                continue;\n+            } else {\n+                (lib.name, lib.kind, lib.verbatim)\n+            };\n \n             let verbatim = lib.verbatim.unwrap_or(false);\n             match lib.kind {"}, {"sha": "3a66bfafaf3f47b22aa87476f074a8e08058f46b", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -186,6 +186,9 @@ pub trait Linker {\n     fn no_crt_objects(&mut self);\n     fn no_default_libraries(&mut self);\n     fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType, symbols: &[String]);\n+    fn exported_symbol_means_used_symbol(&self) -> bool {\n+        true\n+    }\n     fn subsystem(&mut self, subsystem: &str);\n     fn group_start(&mut self);\n     fn group_end(&mut self);\n@@ -724,6 +727,10 @@ impl<'a> Linker for GccLinker<'a> {\n         }\n     }\n \n+    fn exported_symbol_means_used_symbol(&self) -> bool {\n+        self.sess.target.is_like_windows || self.sess.target.is_like_osx\n+    }\n+\n     fn subsystem(&mut self, subsystem: &str) {\n         self.linker_arg(\"--subsystem\");\n         self.linker_arg(&subsystem);\n@@ -1471,6 +1478,10 @@ impl<'a> Linker for L4Bender<'a> {\n         return;\n     }\n \n+    fn exported_symbol_means_used_symbol(&self) -> bool {\n+        false\n+    }\n+\n     fn subsystem(&mut self, subsystem: &str) {\n         self.cmd.arg(&format!(\"--subsystem {}\", subsystem));\n     }"}, {"sha": "e37251c9c2439aebd242162f578bd6ad566b62f8", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -215,6 +215,10 @@ declare_features! (\n     /// Allows patterns with concurrent by-move and by-ref bindings.\n     /// For example, you can write `Foo(a, ref b)` where `a` is by-move and `b` is by-ref.\n     (accepted, move_ref_pattern, \"1.49.0\", Some(68354), None),\n+    /// Allows specifying modifiers in the link attribute: `#[link(modifiers = \"...\")]`\n+    (accepted, native_link_modifiers, \"1.61.0\", Some(81490), None),\n+    /// Allows specifying the whole-archive link modifier\n+    (accepted, native_link_modifiers_whole_archive, \"1.61.0\", Some(81490), None),\n     /// Allows using `#![no_std]`.\n     (accepted, no_std, \"1.6.0\", None, None),\n     /// Allows defining identifiers beyond ASCII."}, {"sha": "90b35b5a83fb573945120756db0d90d16bc4814b", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -446,16 +446,12 @@ declare_features! (\n     (active, must_not_suspend, \"1.57.0\", Some(83310), None),\n     /// Allows using `#[naked]` on functions.\n     (active, naked_functions, \"1.9.0\", Some(32408), None),\n-    /// Allows specifying modifiers in the link attribute: `#[link(modifiers = \"...\")]`\n-    (active, native_link_modifiers, \"1.53.0\", Some(81490), None),\n     /// Allows specifying the as-needed link modifier\n     (active, native_link_modifiers_as_needed, \"1.53.0\", Some(81490), None),\n     /// Allows specifying the bundle link modifier\n     (active, native_link_modifiers_bundle, \"1.53.0\", Some(81490), None),\n     /// Allows specifying the verbatim link modifier\n     (active, native_link_modifiers_verbatim, \"1.53.0\", Some(81490), None),\n-    /// Allows specifying the whole-archive link modifier\n-    (active, native_link_modifiers_whole_archive, \"1.53.0\", Some(81490), None),\n     /// Allow negative trait implementations.\n     (active, negative_impls, \"1.44.0\", Some(68318), None),\n     /// Allows the `!` type. Does not imply 'exhaustive_patterns' (below) any more."}, {"sha": "0324ac3641e11be3c65f855a408e99b9cc756f11", "filename": "compiler/rustc_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fsrc%2Flib.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -1,5 +1,5 @@\n #![feature(nll)]\n-#![feature(native_link_modifiers)]\n+#![cfg_attr(bootstrap, feature(native_link_modifiers))]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n \n // NOTE: This crate only exists to allow linking on mingw targets."}, {"sha": "1cbfb0bd5546b4e7416dd5ce2dee05b00fbfa7b1", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -125,13 +125,18 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n \n             // Do this outside the above loop so we don't depend on modifiers coming\n             // after kinds\n-            if let Some(item) = items.iter().find(|item| item.has_name(sym::modifiers)) {\n+            let mut modifiers_count = 0;\n+            for item in items.iter().filter(|item| item.has_name(sym::modifiers)) {\n                 if let Some(modifiers) = item.value_str() {\n+                    modifiers_count += 1;\n                     let span = item.name_value_literal_span().unwrap();\n+                    let mut has_duplicate_modifiers = false;\n                     for modifier in modifiers.as_str().split(',') {\n                         let (modifier, value) = match modifier.strip_prefix(&['+', '-']) {\n                             Some(m) => (m, modifier.starts_with('+')),\n                             None => {\n+                                // Note: this error also excludes the case with empty modifier\n+                                // string, like `modifiers = \"\"`.\n                                 sess.span_err(\n                                     span,\n                                     \"invalid linking modifier syntax, expected '+' or '-' prefix \\\n@@ -143,6 +148,9 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n \n                         match (modifier, &mut lib.kind) {\n                             (\"bundle\", NativeLibKind::Static { bundle, .. }) => {\n+                                if bundle.is_some() {\n+                                    has_duplicate_modifiers = true;\n+                                }\n                                 *bundle = Some(value);\n                             }\n                             (\"bundle\", _) => {\n@@ -153,9 +161,17 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                                 );\n                             }\n \n-                            (\"verbatim\", _) => lib.verbatim = Some(value),\n+                            (\"verbatim\", _) => {\n+                                if lib.verbatim.is_some() {\n+                                    has_duplicate_modifiers = true;\n+                                }\n+                                lib.verbatim = Some(value);\n+                            }\n \n                             (\"whole-archive\", NativeLibKind::Static { whole_archive, .. }) => {\n+                                if whole_archive.is_some() {\n+                                    has_duplicate_modifiers = true;\n+                                }\n                                 *whole_archive = Some(value);\n                             }\n                             (\"whole-archive\", _) => {\n@@ -168,6 +184,9 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n \n                             (\"as-needed\", NativeLibKind::Dylib { as_needed })\n                             | (\"as-needed\", NativeLibKind::Framework { as_needed }) => {\n+                                if as_needed.is_some() {\n+                                    has_duplicate_modifiers = true;\n+                                }\n                                 *as_needed = Some(value);\n                             }\n                             (\"as-needed\", _) => {\n@@ -190,12 +209,22 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                             }\n                         }\n                     }\n+                    if has_duplicate_modifiers {\n+                        let msg =\n+                            \"same modifier is used multiple times in a single `modifiers` argument\";\n+                        sess.span_err(item.span(), msg);\n+                    }\n                 } else {\n                     let msg = \"must be of the form `#[link(modifiers = \\\"...\\\")]`\";\n                     sess.span_err(item.span(), msg);\n                 }\n             }\n \n+            if modifiers_count > 1 {\n+                let msg = \"multiple `modifiers` arguments in a single `#[link]` attribute\";\n+                sess.span_err(m.span, msg);\n+            }\n+\n             // In general we require #[link(name = \"...\")] but we allow\n             // #[link(wasm_import_module = \"...\")] without the `name`.\n             let requires_name = kind_specified || lib.wasm_import_module.is_none();\n@@ -349,6 +378,15 @@ impl Collector<'_> {\n                 .drain_filter(|lib| {\n                     if let Some(lib_name) = lib.name {\n                         if lib_name.as_str() == passed_lib.name {\n+                            // FIXME: This whole logic is questionable, whether modifiers are\n+                            // involved or not, library reordering and kind overriding without\n+                            // explicit `:rename` in particular.\n+                            if lib.has_modifiers() || passed_lib.has_modifiers() {\n+                                self.tcx.sess.span_err(\n+                                    self.tcx.def_span(lib.foreign_module.unwrap()),\n+                                    \"overriding linking modifiers from command line is not supported\"\n+                                );\n+                            }\n                             if passed_lib.kind != NativeLibKind::Unspecified {\n                                 lib.kind = passed_lib.kind;\n                             }"}, {"sha": "856436e44dbc803bf8474420287c959ca434c34c", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 41, "deletions": 22, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -1948,9 +1948,6 @@ fn parse_native_lib_kind(\n     kind: &str,\n     error_format: ErrorOutputType,\n ) -> (NativeLibKind, Option<bool>) {\n-    let is_nightly = nightly_options::match_is_nightly_build(matches);\n-    let enable_unstable = nightly_options::is_unstable_enabled(matches);\n-\n     let (kind, modifiers) = match kind.split_once(':') {\n         None => (kind, None),\n         Some((kind, modifiers)) => (kind, Some(modifiers)),\n@@ -1972,7 +1969,7 @@ fn parse_native_lib_kind(\n                     \"linking modifier can't be used with library kind `static-nobundle`\",\n                 )\n             }\n-            if !is_nightly {\n+            if !nightly_options::match_is_nightly_build(matches) {\n                 early_error(\n                     error_format,\n                     \"library kind `static-nobundle` are currently unstable and only accepted on \\\n@@ -1988,31 +1985,31 @@ fn parse_native_lib_kind(\n     };\n     match modifiers {\n         None => (kind, None),\n-        Some(modifiers) => {\n-            if !is_nightly {\n-                early_error(\n-                    error_format,\n-                    \"linking modifiers are currently unstable and only accepted on \\\n-                the nightly compiler\",\n-                );\n-            }\n-            if !enable_unstable {\n-                early_error(\n-                    error_format,\n-                    \"linking modifiers are currently unstable, \\\n-                the `-Z unstable-options` flag must also be passed to use it\",\n-                )\n-            }\n-            parse_native_lib_modifiers(kind, modifiers, error_format)\n-        }\n+        Some(modifiers) => parse_native_lib_modifiers(kind, modifiers, error_format, matches),\n     }\n }\n \n fn parse_native_lib_modifiers(\n     mut kind: NativeLibKind,\n     modifiers: &str,\n     error_format: ErrorOutputType,\n+    matches: &getopts::Matches,\n ) -> (NativeLibKind, Option<bool>) {\n+    let report_unstable_modifier = |modifier| {\n+        if !nightly_options::is_unstable_enabled(matches) {\n+            let why = if nightly_options::match_is_nightly_build(matches) {\n+                \" and only accepted on the nightly compiler\"\n+            } else {\n+                \", the `-Z unstable-options` flag must also be passed to use it\"\n+            };\n+            early_error(\n+                error_format,\n+                &format!(\"{modifier} linking modifier is currently unstable{why}\"),\n+            )\n+        }\n+    };\n+\n+    let mut has_duplicate_modifiers = false;\n     let mut verbatim = None;\n     for modifier in modifiers.split(',') {\n         let (modifier, value) = match modifier.strip_prefix(&['+', '-']) {\n@@ -2026,6 +2023,10 @@ fn parse_native_lib_modifiers(\n \n         match (modifier, &mut kind) {\n             (\"bundle\", NativeLibKind::Static { bundle, .. }) => {\n+                report_unstable_modifier(modifier);\n+                if bundle.is_some() {\n+                    has_duplicate_modifiers = true;\n+                }\n                 *bundle = Some(value);\n             }\n             (\"bundle\", _) => early_error(\n@@ -2034,9 +2035,18 @@ fn parse_native_lib_modifiers(\n                     `static` linking kind\",\n             ),\n \n-            (\"verbatim\", _) => verbatim = Some(value),\n+            (\"verbatim\", _) => {\n+                report_unstable_modifier(modifier);\n+                if verbatim.is_some() {\n+                    has_duplicate_modifiers = true;\n+                }\n+                verbatim = Some(value);\n+            }\n \n             (\"whole-archive\", NativeLibKind::Static { whole_archive, .. }) => {\n+                if whole_archive.is_some() {\n+                    has_duplicate_modifiers = true;\n+                }\n                 *whole_archive = Some(value);\n             }\n             (\"whole-archive\", _) => early_error(\n@@ -2047,6 +2057,10 @@ fn parse_native_lib_modifiers(\n \n             (\"as-needed\", NativeLibKind::Dylib { as_needed })\n             | (\"as-needed\", NativeLibKind::Framework { as_needed }) => {\n+                report_unstable_modifier(modifier);\n+                if as_needed.is_some() {\n+                    has_duplicate_modifiers = true;\n+                }\n                 *as_needed = Some(value);\n             }\n             (\"as-needed\", _) => early_error(\n@@ -2055,6 +2069,8 @@ fn parse_native_lib_modifiers(\n                     `dylib` and `framework` linking kinds\",\n             ),\n \n+            // Note: this error also excludes the case with empty modifier\n+            // string, like `modifiers = \"\"`.\n             _ => early_error(\n                 error_format,\n                 &format!(\n@@ -2064,6 +2080,9 @@ fn parse_native_lib_modifiers(\n             ),\n         }\n     }\n+    if has_duplicate_modifiers {\n+        report_unstable_modifier(\"duplicating\")\n+    }\n \n     (kind, verbatim)\n }"}, {"sha": "c1fd3c7c61b9ec8a5edc9cab28be0b59f5630a0e", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -75,6 +75,12 @@ pub struct NativeLib {\n     pub dll_imports: Vec<DllImport>,\n }\n \n+impl NativeLib {\n+    pub fn has_modifiers(&self) -> bool {\n+        self.verbatim.is_some() || self.kind.has_modifiers()\n+    }\n+}\n+\n #[derive(Clone, Debug, Encodable, Decodable, HashStable_Generic)]\n pub struct DllImport {\n     pub name: Symbol,"}, {"sha": "6a8775bd10b7e99b32fd2d3f5c3a194e223a9da3", "filename": "compiler/rustc_session/src/utils.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_session%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/compiler%2Frustc_session%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Futils.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -43,6 +43,20 @@ pub enum NativeLibKind {\n     Unspecified,\n }\n \n+impl NativeLibKind {\n+    pub fn has_modifiers(&self) -> bool {\n+        match self {\n+            NativeLibKind::Static { bundle, whole_archive } => {\n+                bundle.is_some() || whole_archive.is_some()\n+            }\n+            NativeLibKind::Dylib { as_needed } | NativeLibKind::Framework { as_needed } => {\n+                as_needed.is_some()\n+            }\n+            NativeLibKind::RawDylib | NativeLibKind::Unspecified => false,\n+        }\n+    }\n+}\n+\n rustc_data_structures::impl_stable_hash_via_hash!(NativeLibKind);\n \n #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n@@ -53,6 +67,12 @@ pub struct NativeLib {\n     pub verbatim: Option<bool>,\n }\n \n+impl NativeLib {\n+    pub fn has_modifiers(&self) -> bool {\n+        self.verbatim.is_some() || self.kind.has_modifiers()\n+    }\n+}\n+\n rustc_data_structures::impl_stable_hash_via_hash!(NativeLib);\n \n /// A path that has been canonicalized along with its original, non-canonicalized form"}, {"sha": "82f1e63f4b54f929c88b313ecce03d489a09f489", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -1,7 +1,7 @@\n #![no_std]\n #![unstable(feature = \"panic_unwind\", issue = \"32837\")]\n #![feature(link_cfg)]\n-#![feature(native_link_modifiers)]\n+#![cfg_attr(bootstrap, feature(native_link_modifiers))]\n #![feature(native_link_modifiers_bundle)]\n #![feature(nll)]\n #![feature(staged_api)]"}, {"sha": "7838696cc128b72c44bccc3fedb0506877468034", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -37,6 +37,8 @@ KIND=PATH` where `KIND` may be one of:\n <a id=\"option-l-link-lib\"></a>\n ## `-l`: link the generated crate to a native library\n \n+Syntax: `-l [KIND[:MODIFIERS]=]NAME[:RENAME]`.\n+\n This flag allows you to specify linking to a specific native library when building\n a crate.\n \n@@ -47,7 +49,13 @@ where `KIND` may be one of:\n - `static` \u2014\u00a0A native static library (such as a `.a` archive).\n - `framework` \u2014\u00a0A macOS framework.\n \n-The kind of library can be specified in a [`#[link]`\n+If the kind is specified, then linking modifiers can be attached to it.\n+Modifiers are specified as a comma-delimited string with each modifier prefixed with\n+either a `+` or `-` to indicate that the modifier is enabled or disabled, respectively.\n+The last boolean value specified for a given modifier wins. \\\n+Example: `-l static:+whole-archive=mylib`.\n+\n+The kind of library and the modifiers can also be specified in a [`#[link]`\n attribute][link-attribute]. If the kind is not specified in the `link`\n attribute or on the command-line, it will link a dynamic library if available,\n otherwise it will use a static library. If the kind is specified on the\n@@ -59,6 +67,22 @@ and `LINK_NAME` is the name of the actual library that will be linked.\n \n [link-attribute]: ../reference/items/external-blocks.html#the-link-attribute\n \n+### Linking modifiers: `whole-archive`\n+\n+This modifier is only compatible with the `static` linking kind.\n+Using any other kind will result in a compiler error.\n+\n+`+whole-archive` means that the static library is linked as a whole archive\n+without throwing any object files away.\n+\n+This modifier translates to `--whole-archive` for `ld`-like linkers,\n+to `/WHOLEARCHIVE` for `link.exe`, and to `-force_load` for `ld64`.\n+The modifier does nothing for linkers that don't support it.\n+\n+The default for this modifier is `-whole-archive`. \\\n+NOTE: The default may currently be different when building dylibs for some targets,\n+but it is not guaranteed.\n+\n <a id=\"option-crate-type\"></a>\n ## `--crate-type`: a list of types of crates for the compiler to emit\n "}, {"sha": "4961e88cad1e0ba1a519f7995ef3db43b0019445", "filename": "src/doc/unstable-book/src/language-features/native-link-modifiers-whole-archive.md", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c5cf08d37b85f953b132951e868df5b924250fdc/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-whole-archive.md", "raw_url": "https://github.com/rust-lang/rust/raw/c5cf08d37b85f953b132951e868df5b924250fdc/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-whole-archive.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-whole-archive.md?ref=c5cf08d37b85f953b132951e868df5b924250fdc", "patch": "@@ -1,18 +0,0 @@\n-# `native_link_modifiers_whole_archive`\n-\n-The tracking issue for this feature is: [#81490]\n-\n-[#81490]: https://github.com/rust-lang/rust/issues/81490\n-\n-------------------------\n-\n-The `native_link_modifiers_whole_archive` feature allows you to use the `whole-archive` modifier.\n-\n-Only compatible with the `static` linking kind. Using any other kind will result in a compiler error.\n-\n-`+whole-archive` means that the static library is linked as a whole archive without throwing any object files away.\n-\n-This modifier translates to `--whole-archive` for `ld`-like linkers, to `/WHOLEARCHIVE` for `link.exe`, and to `-force_load` for `ld64`.\n-The modifier does nothing for linkers that don't support it.\n-\n-The default for this modifier is `-whole-archive`."}, {"sha": "fc8b575462175ee0c2c721c3d27f1eb8afae0838", "filename": "src/doc/unstable-book/src/language-features/native-link-modifiers.md", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5cf08d37b85f953b132951e868df5b924250fdc/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers.md", "raw_url": "https://github.com/rust-lang/rust/raw/c5cf08d37b85f953b132951e868df5b924250fdc/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers.md?ref=c5cf08d37b85f953b132951e868df5b924250fdc", "patch": "@@ -1,11 +0,0 @@\n-# `native_link_modifiers`\n-\n-The tracking issue for this feature is: [#81490]\n-\n-[#81490]: https://github.com/rust-lang/rust/issues/81490\n-\n-------------------------\n-\n-The `native_link_modifiers` feature allows you to use the `modifiers` syntax with the `#[link(..)]` attribute.\n-\n-Modifiers are specified as a comma-delimited string with each modifier prefixed with either a `+` or `-` to indicate that the modifier is enabled or disabled, respectively. The last boolean value specified for a given modifier wins."}, {"sha": "2436c36e6ebfb61788beff8109a64f39ba4e8e4f", "filename": "src/test/run-make/native-link-modifier-whole-archive/native_lib_in_src.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Fnative_lib_in_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Fnative_lib_in_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Fnative_lib_in_src.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -1,6 +1,4 @@\n #![feature(native_link_modifiers_bundle)]\n-#![feature(native_link_modifiers_whole_archive)]\n-#![feature(native_link_modifiers)]\n \n use std::io::Write;\n "}, {"sha": "e185c4aec12b0603acd1035f05b9989ae99bd63a", "filename": "src/test/run-make/raw-dylib-c/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Flib.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -1,4 +1,4 @@\n-#![feature(raw_dylib, native_link_modifiers, native_link_modifiers_verbatim)]\n+#![feature(raw_dylib, native_link_modifiers_verbatim)]\n \n #[link(name = \"extern_1.dll\", kind = \"raw-dylib\", modifiers = \"+verbatim\")]\n extern {"}, {"sha": "2d00aa2a3cfcbb8fc48f30d3a16248480a53e9c6", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5cf08d37b85f953b132951e868df5b924250fdc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cf08d37b85f953b132951e868df5b924250fdc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.rs?ref=c5cf08d37b85f953b132951e868df5b924250fdc", "patch": "@@ -1,5 +0,0 @@\n-#[link(name = \"foo\", modifiers = \"\")]\n-//~^ ERROR: native link modifiers are experimental\n-extern \"C\" {}\n-\n-fn main() {}"}, {"sha": "20a2d6a26fa5787dc62f83a2539e7fcd2d65cd64", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5cf08d37b85f953b132951e868df5b924250fdc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5cf08d37b85f953b132951e868df5b924250fdc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.stderr?ref=c5cf08d37b85f953b132951e868df5b924250fdc", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: native link modifiers are experimental\n-  --> $DIR/feature-gate-native_link_modifiers.rs:1:22\n-   |\n-LL | #[link(name = \"foo\", modifiers = \"\")]\n-   |                      ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #81490 <https://github.com/rust-lang/rust/issues/81490> for more information\n-   = help: add `#![feature(native_link_modifiers)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "fedee8123980e362d5d436ed56563ea2c943437d", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_as_needed.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -1,6 +1,3 @@\n-#![allow(incomplete_features)]\n-#![feature(native_link_modifiers)]\n-\n #[link(name = \"foo\", modifiers = \"+as-needed\")]\n //~^ ERROR: `#[link(modifiers=\"as-needed\")]` is unstable\n extern \"C\" {}"}, {"sha": "96750aa6e808aa1b8e01de227dd4286840ea753a", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_as_needed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.stderr?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `#[link(modifiers=\"as-needed\")]` is unstable\n-  --> $DIR/feature-gate-native_link_modifiers_as_needed.rs:4:34\n+  --> $DIR/feature-gate-native_link_modifiers_as_needed.rs:1:34\n    |\n LL | #[link(name = \"foo\", modifiers = \"+as-needed\")]\n    |                                  ^^^^^^^^^^^^"}, {"sha": "e229564950fcfaee2a6cbf7d04c46cebb622179a", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_bundle-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle-2.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -1,7 +1,6 @@\n // Test native_link_modifiers_bundle don't need static-nobundle\n // check-pass\n \n-#![feature(native_link_modifiers)]\n #![feature(native_link_modifiers_bundle)]\n \n #[link(name = \"foo\", kind = \"static\", modifiers = \"-bundle\")]"}, {"sha": "900605c3b375b6858e6ffbcc2010956935537089", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_bundle-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle-3.stderr?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -1,2 +1,2 @@\n-error: linking modifiers are currently unstable, the `-Z unstable-options` flag must also be passed to use it\n+error: bundle linking modifier is currently unstable and only accepted on the nightly compiler\n "}, {"sha": "c3c3cff17c403494578d4604c71844185ab22291", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_bundle.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -1,6 +1,3 @@\n-#![allow(incomplete_features)]\n-#![feature(native_link_modifiers)]\n-\n #[link(name = \"foo\", modifiers = \"+bundle\")]\n //~^ ERROR: `#[link(modifiers=\"bundle\")]` is unstable\n extern \"C\" {}"}, {"sha": "984b90d9b6c2e38c2b07395776ec0625cead2b92", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_bundle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.stderr?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `#[link(modifiers=\"bundle\")]` is unstable\n-  --> $DIR/feature-gate-native_link_modifiers_bundle.rs:4:34\n+  --> $DIR/feature-gate-native_link_modifiers_bundle.rs:1:34\n    |\n LL | #[link(name = \"foo\", modifiers = \"+bundle\")]\n    |                                  ^^^^^^^^^"}, {"sha": "57527be1112cb55115750e194e89bea8534882bf", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_verbatim.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -1,6 +1,3 @@\n-#![allow(incomplete_features)]\n-#![feature(native_link_modifiers)]\n-\n #[link(name = \"foo\", modifiers = \"+verbatim\")]\n //~^ ERROR: `#[link(modifiers=\"verbatim\")]` is unstable\n extern \"C\" {}"}, {"sha": "5c64c0d21bdb418d7acf95a016c35b6ace8046a8", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_verbatim.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.stderr?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `#[link(modifiers=\"verbatim\")]` is unstable\n-  --> $DIR/feature-gate-native_link_modifiers_verbatim.rs:4:34\n+  --> $DIR/feature-gate-native_link_modifiers_verbatim.rs:1:34\n    |\n LL | #[link(name = \"foo\", modifiers = \"+verbatim\")]\n    |                                  ^^^^^^^^^^^"}, {"sha": "ca801e59114328e2f2b4af24d314dec95384fca4", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_whole_archive.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5cf08d37b85f953b132951e868df5b924250fdc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cf08d37b85f953b132951e868df5b924250fdc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.rs?ref=c5cf08d37b85f953b132951e868df5b924250fdc", "patch": "@@ -1,8 +0,0 @@\n-#![allow(incomplete_features)]\n-#![feature(native_link_modifiers)]\n-\n-#[link(name = \"foo\", modifiers = \"+whole-archive\")]\n-//~^ ERROR: `#[link(modifiers=\"whole-archive\")]` is unstable\n-extern \"C\" {}\n-\n-fn main() {}"}, {"sha": "cacaa789ecb799205be0b72c6f3fc41d85333293", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_whole_archive.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5cf08d37b85f953b132951e868df5b924250fdc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5cf08d37b85f953b132951e868df5b924250fdc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.stderr?ref=c5cf08d37b85f953b132951e868df5b924250fdc", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: `#[link(modifiers=\"whole-archive\")]` is unstable\n-  --> $DIR/feature-gate-native_link_modifiers_whole_archive.rs:4:34\n-   |\n-LL | #[link(name = \"foo\", modifiers = \"+whole-archive\")]\n-   |                                  ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #81490 <https://github.com/rust-lang/rust/issues/81490> for more information\n-   = help: add `#![feature(native_link_modifiers_whole_archive)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "b153ef94626a39e13469cc72b8fa184c724aa5b4", "filename": "src/test/ui/native-library-link-flags/mix-bundle-and-whole-archive-link-attr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -2,9 +2,7 @@\n // build-fail\n // error-pattern: the linking modifiers `+bundle` and `+whole-archive` are not compatible with each other when generating rlibs\n \n-#![feature(native_link_modifiers)]\n #![feature(native_link_modifiers_bundle)]\n-#![feature(native_link_modifiers_whole_archive)]\n \n #[link(name = \"mylib\", kind = \"static\", modifiers = \"+bundle,+whole-archive\")]\n extern \"C\" { }"}, {"sha": "333f6786b0fba41e705175683615bfd8f0dbb0f0", "filename": "src/test/ui/native-library-link-flags/modifiers-override-2.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-2.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags:-lstatic:+whole-archive,-whole-archive=foo\n+\n+fn main() {}"}, {"sha": "9200d7bfb0ce3427dc4f6c5f68d42989dc7935d5", "filename": "src/test/ui/native-library-link-flags/modifiers-override-2.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-2.stderr?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -0,0 +1,2 @@\n+error: duplicating linking modifier is currently unstable and only accepted on the nightly compiler\n+"}, {"sha": "f6d770559e6e03e8c6b9636c5aad66bfd908dd06", "filename": "src/test/ui/native-library-link-flags/modifiers-override.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.rs?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags:-ldylib:+as-needed=foo -lstatic=bar -Zunstable-options\n+\n+#![feature(native_link_modifiers_bundle)]\n+\n+#[link(name = \"foo\")]\n+#[link( //~ ERROR multiple `modifiers` arguments in a single `#[link]` attribute\n+    name = \"bar\",\n+    kind = \"static\",\n+    modifiers = \"+whole-archive,-whole-archive\",\n+    //~^ ERROR same modifier is used multiple times in a single `modifiers` argument\n+    modifiers = \"+bundle\"\n+)]\n+extern \"C\" {}\n+//~^ ERROR overriding linking modifiers from command line is not supported\n+//~| ERROR overriding linking modifiers from command line is not supported\n+\n+fn main() {}"}, {"sha": "8644d2382d2ba915aca051b0265a69f4adccd24a", "filename": "src/test/ui/native-library-link-flags/modifiers-override.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b75f384d0b0227000eff393e5d4e11bda56b293f/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.stderr?ref=b75f384d0b0227000eff393e5d4e11bda56b293f", "patch": "@@ -0,0 +1,32 @@\n+error: same modifier is used multiple times in a single `modifiers` argument\n+  --> $DIR/modifiers-override.rs:9:5\n+   |\n+LL |     modifiers = \"+whole-archive,-whole-archive\",\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: multiple `modifiers` arguments in a single `#[link]` attribute\n+  --> $DIR/modifiers-override.rs:6:1\n+   |\n+LL | / #[link(\n+LL | |     name = \"bar\",\n+LL | |     kind = \"static\",\n+LL | |     modifiers = \"+whole-archive,-whole-archive\",\n+LL | |\n+LL | |     modifiers = \"+bundle\"\n+LL | | )]\n+   | |__^\n+\n+error: overriding linking modifiers from command line is not supported\n+  --> $DIR/modifiers-override.rs:13:1\n+   |\n+LL | extern \"C\" {}\n+   | ^^^^^^^^^^^^^\n+\n+error: overriding linking modifiers from command line is not supported\n+  --> $DIR/modifiers-override.rs:13:1\n+   |\n+LL | extern \"C\" {}\n+   | ^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}