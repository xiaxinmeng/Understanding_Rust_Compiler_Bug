{"sha": "cb404dd4fbe30907ed53e9f9915e37d644382a12", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNDA0ZGQ0ZmJlMzA5MDdlZDUzZTlmOTkxNWUzN2Q2NDQzODJhMTI=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-07-10T06:42:08Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-07-18T18:46:03Z"}, "message": "librustc: Emit enum variant constructor at callsite instead of via a call to a function.", "tree": {"sha": "a3e0e8c28596cfd3af4b73607b454320c506250b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3e0e8c28596cfd3af4b73607b454320c506250b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb404dd4fbe30907ed53e9f9915e37d644382a12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb404dd4fbe30907ed53e9f9915e37d644382a12", "html_url": "https://github.com/rust-lang/rust/commit/cb404dd4fbe30907ed53e9f9915e37d644382a12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb404dd4fbe30907ed53e9f9915e37d644382a12/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c9bdfd1c5e34f6f04266f695664ef82c672c143", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c9bdfd1c5e34f6f04266f695664ef82c672c143", "html_url": "https://github.com/rust-lang/rust/commit/9c9bdfd1c5e34f6f04266f695664ef82c672c143"}], "stats": {"total": 82, "additions": 77, "deletions": 5}, "files": [{"sha": "84db9e5335a1504509e40cc420c87b50d87b25ef", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/cb404dd4fbe30907ed53e9f9915e37d644382a12/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb404dd4fbe30907ed53e9f9915e37d644382a12/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=cb404dd4fbe30907ed53e9f9915e37d644382a12", "patch": "@@ -1704,6 +1704,61 @@ pub fn trans_enum_variant(ccx: &CrateContext,\n         llfndecl);\n }\n \n+pub fn trans_enum_variant_constructor<'a>(mut bcx: &'a Block<'a>,\n+                                          ctor_ty: ty::t,\n+                                          disr: ty::Disr,\n+                                          args: callee::CallArgs,\n+                                          dest: expr::Dest) -> Result<'a> {\n+\n+    let ccx = bcx.fcx.ccx;\n+    let tcx = &ccx.tcx;\n+\n+    let result_ty = match ty::get(ctor_ty).sty {\n+        ty::ty_bare_fn(ref bft) => bft.sig.output,\n+        _ => ccx.sess().bug(\n+            format!(\"trans_enum_variant_constructor: \\\n+                     unexpected ctor return type {}\",\n+                     ctor_ty.repr(tcx)).as_slice())\n+    };\n+\n+    // Get location to store the result. If the user does not care about\n+    // the result, just make a stack slot\n+    let llresult = match dest {\n+        expr::SaveIn(d) => d,\n+        expr::Ignore => {\n+            if !type_is_zero_size(ccx, result_ty) {\n+                alloc_ty(bcx, result_ty, \"constructor_result\")\n+            } else {\n+                C_undef(type_of::type_of(ccx, result_ty))\n+            }\n+        }\n+    };\n+\n+    if !type_is_zero_size(ccx, result_ty) {\n+        let repr = adt::represent_type(ccx, result_ty);\n+        adt::trans_start_init(bcx, &*repr, llresult, disr);\n+\n+        match args {\n+            callee::ArgExprs(exprs) => {\n+                for (i, expr) in exprs.iter().enumerate() {\n+                    let lldestptr = adt::trans_field_ptr(bcx, &*repr, llresult, disr, i);\n+                    bcx = expr::trans_into(bcx, *expr, expr::SaveIn(lldestptr));\n+                }\n+            }\n+            _ => ccx.sess().bug(\"expected expr as arguments for variant/struct tuple constructor\")\n+        }\n+    }\n+\n+    // If the caller doesn't care about the result\n+    // drop the temporary we made\n+    let bcx = match dest {\n+        expr::SaveIn(_) => bcx,\n+        expr::Ignore => glue::drop_ty(bcx, llresult, result_ty)\n+    };\n+\n+    Result::new(bcx, llresult)\n+}\n+\n pub fn trans_tuple_struct(ccx: &CrateContext,\n                           _fields: &[ast::StructField],\n                           ctor_id: ast::NodeId,"}, {"sha": "608710a250825a8335106c09677e653775378988", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cb404dd4fbe30907ed53e9f9915e37d644382a12/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb404dd4fbe30907ed53e9f9915e37d644382a12/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=cb404dd4fbe30907ed53e9f9915e37d644382a12", "patch": "@@ -64,6 +64,10 @@ pub struct MethodData {\n pub enum CalleeData {\n     Closure(Datum<Lvalue>),\n \n+    // Constructor for enum variant/tuple-like-struct\n+    // i.e. Some, Ok\n+    TupleVariantConstructor(subst::Substs, ty::Disr),\n+\n     // Represents a (possibly monomorphized) top-level fn item or method\n     // item. Note that this is just the fn-ptr and is not a Rust closure\n     // value (which is a pair).\n@@ -158,11 +162,16 @@ fn trans<'a>(bcx: &'a Block<'a>, expr: &ast::Expr) -> Callee<'a> {\n                                                                 ref_expr.id))\n             }\n             def::DefVariant(tid, vid, _) => {\n-                // nullary variants are not callable\n-                assert!(ty::enum_variant_with_id(bcx.tcx(),\n-                                                      tid,\n-                                                      vid).args.len() > 0u);\n-                fn_callee(bcx, trans_fn_ref(bcx, vid, ExprId(ref_expr.id)))\n+                let vinfo = ty::enum_variant_with_id(bcx.tcx(), tid, vid);\n+                let substs = node_id_substs(bcx, ExprId(ref_expr.id));\n+\n+                // Nullary variants are not callable\n+                assert!(vinfo.args.len() > 0u);\n+\n+                Callee {\n+                    bcx: bcx,\n+                    data: TupleVariantConstructor(substs, vinfo.disr_val)\n+                }\n             }\n             def::DefStruct(def_id) => {\n                 fn_callee(bcx, trans_fn_ref(bcx, def_id, ExprId(ref_expr.id)))\n@@ -710,6 +719,14 @@ pub fn trans_call_inner<'a>(\n                                                    arg_cleanup_scope, args,\n                                                    dest.unwrap(), substs);\n         }\n+        TupleVariantConstructor(substs, disr) => {\n+            assert!(dest.is_some());\n+            fcx.pop_custom_cleanup_scope(arg_cleanup_scope);\n+\n+            let ctor_ty = callee_ty.subst(bcx.tcx(), &substs);\n+            return base::trans_enum_variant_constructor(bcx, ctor_ty, disr,\n+                                                        args, dest.unwrap());\n+        }\n     };\n \n     // Intrinsics should not become actual functions."}]}