{"sha": "8483fb0f269c819cf0970c25cf81660622f1d763", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ODNmYjBmMjY5YzgxOWNmMDk3MGMyNWNmODE2NjA2MjJmMWQ3NjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-25T23:28:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-25T23:28:02Z"}, "message": "Merge #8996\n\n8996: Fix bug where library functions were not highlighted as such r=arzg a=arzg\n\nSorry about forgetting to test this in my last PR.\n\nCo-authored-by: Aramis Razzaghipour <aramisnoah@gmail.com>", "tree": {"sha": "67cf42ced1ace4919f051204f14f2f09cc2e8c4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67cf42ced1ace4919f051204f14f2f09cc2e8c4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8483fb0f269c819cf0970c25cf81660622f1d763", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrYgCCRBK7hj4Ov3rIwAAQZcIAASozce1cDmdPpvnhr2+YHfs\nTb135S5+7apaGsvHHpAeBg1NYCfqHRXQjqjOM3Zh5ai+PkXNsfJjSCbhyST7Byxi\n+kPHpigoHdedyfsHqUbYE+CU1ImCUSrICPGM3KSkwO3BTqSGK+YzGj35qa1V6bsu\neCYXrfOLDOE+dhogjvlfIs4LvKBppx0+oQMRRMxM2Nbqv7QTFbNXE4IXLDXWRfdT\n/6xiHKeSKxlAeUgIxn5FB00wpt3GWZcoYUEQI3hU5p5FWr9pQFDr9UAB6d3fcgap\nPseDF18xLm2F4zqd8qTXd8kNqokB3shbOYOijnZxsRnPo30rLdibl4PUAbxcE2k=\n=lvA8\n-----END PGP SIGNATURE-----\n", "payload": "tree 67cf42ced1ace4919f051204f14f2f09cc2e8c4c\nparent 5587d0a3e3599063a8993e9a44a7628abbabae8b\nparent 8960a0895126d1e964cb7488233b2c665a5bd0db\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621985282 +0000\ncommitter GitHub <noreply@github.com> 1621985282 +0000\n\nMerge #8996\n\n8996: Fix bug where library functions were not highlighted as such r=arzg a=arzg\n\nSorry about forgetting to test this in my last PR.\n\nCo-authored-by: Aramis Razzaghipour <aramisnoah@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8483fb0f269c819cf0970c25cf81660622f1d763", "html_url": "https://github.com/rust-lang/rust/commit/8483fb0f269c819cf0970c25cf81660622f1d763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8483fb0f269c819cf0970c25cf81660622f1d763/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5587d0a3e3599063a8993e9a44a7628abbabae8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5587d0a3e3599063a8993e9a44a7628abbabae8b", "html_url": "https://github.com/rust-lang/rust/commit/5587d0a3e3599063a8993e9a44a7628abbabae8b"}, {"sha": "8960a0895126d1e964cb7488233b2c665a5bd0db", "url": "https://api.github.com/repos/rust-lang/rust/commits/8960a0895126d1e964cb7488233b2c665a5bd0db", "html_url": "https://github.com/rust-lang/rust/commit/8960a0895126d1e964cb7488233b2c665a5bd0db"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "9503c936d1cbb4dd7f5331dccb59e3907a64b9ca", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8483fb0f269c819cf0970c25cf81660622f1d763/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8483fb0f269c819cf0970c25cf81660622f1d763/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=8483fb0f269c819cf0970c25cf81660622f1d763", "patch": "@@ -71,7 +71,7 @@ pub(super) fn element(\n         }\n         NAME_REF => {\n             let name_ref = element.into_node().and_then(ast::NameRef::cast).unwrap();\n-            highlight_func_by_name_ref(sema, &name_ref).unwrap_or_else(|| {\n+            highlight_func_by_name_ref(sema, krate, &name_ref).unwrap_or_else(|| {\n                 let is_self = name_ref.self_token().is_some();\n                 let h = match NameRefClass::classify(sema, &name_ref) {\n                     Some(name_kind) => match name_kind {\n@@ -108,7 +108,7 @@ pub(super) fn element(\n                         NameRefClass::FieldShorthand { .. } => SymbolKind::Field.into(),\n                     },\n                     None if syntactic_name_ref_highlighting => {\n-                        highlight_name_ref_by_syntax(name_ref, sema)\n+                        highlight_name_ref_by_syntax(name_ref, sema, krate)\n                     }\n                     None => HlTag::UnresolvedReference.into(),\n                 };\n@@ -434,27 +434,34 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n \n fn highlight_func_by_name_ref(\n     sema: &Semantics<RootDatabase>,\n+    krate: Option<hir::Crate>,\n     name_ref: &ast::NameRef,\n ) -> Option<Highlight> {\n     let mc = name_ref.syntax().parent().and_then(ast::MethodCallExpr::cast)?;\n-    highlight_method_call(sema, &mc)\n+    highlight_method_call(sema, krate, &mc)\n }\n \n fn highlight_method_call(\n     sema: &Semantics<RootDatabase>,\n+    krate: Option<hir::Crate>,\n     method_call: &ast::MethodCallExpr,\n ) -> Option<Highlight> {\n     let func = sema.resolve_method_call(&method_call)?;\n+\n     let mut h = SymbolKind::Function.into();\n     h |= HlMod::Associated;\n+\n     if func.is_unsafe(sema.db) || sema.is_unsafe_method_call(&method_call) {\n         h |= HlMod::Unsafe;\n     }\n     if func.is_async(sema.db) {\n         h |= HlMod::Async;\n     }\n     if func.as_assoc_item(sema.db).and_then(|it| it.containing_trait(sema.db)).is_some() {\n-        h |= HlMod::Trait\n+        h |= HlMod::Trait;\n+    }\n+    if Some(func.module(sema.db).krate()) != krate {\n+        h |= HlMod::Library;\n     }\n \n     if let Some(self_param) = func.self_param(sema.db) {\n@@ -503,7 +510,11 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n     tag.into()\n }\n \n-fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabase>) -> Highlight {\n+fn highlight_name_ref_by_syntax(\n+    name: ast::NameRef,\n+    sema: &Semantics<RootDatabase>,\n+    krate: Option<hir::Crate>,\n+) -> Highlight {\n     let default = HlTag::UnresolvedReference;\n \n     let parent = match name.syntax().parent() {\n@@ -514,7 +525,7 @@ fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabas\n     match parent.kind() {\n         METHOD_CALL_EXPR => {\n             return ast::MethodCallExpr::cast(parent)\n-                .and_then(|it| highlight_method_call(sema, &it))\n+                .and_then(|it| highlight_method_call(sema, krate, &it))\n                 .unwrap_or_else(|| SymbolKind::Function.into());\n         }\n         FIELD_EXPR => {"}, {"sha": "0264e39a3301d3757984b40f68cc107694a2695e", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8483fb0f269c819cf0970c25cf81660622f1d763/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/8483fb0f269c819cf0970c25cf81660622f1d763/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=8483fb0f269c819cf0970c25cf81660622f1d763", "patch": "@@ -258,7 +258,7 @@\n \n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">control_flow</span> <span class=\"operator\">=</span> <span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"function library\">identity</span><span class=\"parenthesis\">(</span><span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"enum library\">ControlFlow</span><span class=\"operator\">::</span><span class=\"enum_variant library\">Continue</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword control\">if</span> <span class=\"keyword\">let</span> <span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"enum library\">ControlFlow</span><span class=\"operator\">::</span><span class=\"enum_variant library\">Die</span> <span class=\"operator\">=</span> <span class=\"variable\">control_flow</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword control\">if</span> <span class=\"variable\">control_flow</span><span class=\"operator\">.</span><span class=\"function associated consuming library\">should_die</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n         foo::<span class=\"macro\">die!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>"}, {"sha": "662b534813d1a9bfe33e1e8f591be893016e2402", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8483fb0f269c819cf0970c25cf81660622f1d763/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8483fb0f269c819cf0970c25cf81660622f1d763/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=8483fb0f269c819cf0970c25cf81660622f1d763", "patch": "@@ -232,7 +232,7 @@ fn use_foo_items() {\n \n     let control_flow = foo::identity(foo::ControlFlow::Continue);\n \n-    if let foo::ControlFlow::Die = control_flow {\n+    if control_flow.should_die() {\n         foo::die!();\n     }\n }\n@@ -249,6 +249,12 @@ pub enum ControlFlow {\n     Die,\n }\n \n+impl ControlFlow {\n+    pub fn should_die(self) -> bool {\n+        matches!(self, ControlFlow::Die)\n+    }\n+}\n+\n pub fn identity<T>(x: T) -> T { x }\n \n pub mod consts {"}]}