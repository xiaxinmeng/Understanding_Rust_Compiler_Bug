{"sha": "e3aefaaa4d6b973fc5dd00baeb98e086abb7f51e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYWVmYWFhNGQ2Yjk3M2ZjNWRkMDBiYWViOThlMDg2YWJiN2Y1MWU=", "commit": {"author": {"name": "Mikhail Zabaluev", "email": "mikhail.zabaluev@gmail.com", "date": "2015-03-17T04:17:52Z"}, "committer": {"name": "Mikhail Zabaluev", "email": "mikhail.zabaluev@gmail.com", "date": "2015-03-17T04:33:47Z"}, "message": "std::io::buffered: Don't use 'flush' in documentation of into_inner\n\nThe word 'flush' may be misinterpreted as if `flush` is called on the\nunderlying writer, which is not the case.", "tree": {"sha": "a280f60338d7224b505079096f9733203e334e76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a280f60338d7224b505079096f9733203e334e76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3aefaaa4d6b973fc5dd00baeb98e086abb7f51e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3aefaaa4d6b973fc5dd00baeb98e086abb7f51e", "html_url": "https://github.com/rust-lang/rust/commit/e3aefaaa4d6b973fc5dd00baeb98e086abb7f51e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3aefaaa4d6b973fc5dd00baeb98e086abb7f51e/comments", "author": {"login": "mzabaluev", "id": 1198919, "node_id": "MDQ6VXNlcjExOTg5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1198919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzabaluev", "html_url": "https://github.com/mzabaluev", "followers_url": "https://api.github.com/users/mzabaluev/followers", "following_url": "https://api.github.com/users/mzabaluev/following{/other_user}", "gists_url": "https://api.github.com/users/mzabaluev/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzabaluev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzabaluev/subscriptions", "organizations_url": "https://api.github.com/users/mzabaluev/orgs", "repos_url": "https://api.github.com/users/mzabaluev/repos", "events_url": "https://api.github.com/users/mzabaluev/events{/privacy}", "received_events_url": "https://api.github.com/users/mzabaluev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mzabaluev", "id": 1198919, "node_id": "MDQ6VXNlcjExOTg5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1198919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzabaluev", "html_url": "https://github.com/mzabaluev", "followers_url": "https://api.github.com/users/mzabaluev/followers", "following_url": "https://api.github.com/users/mzabaluev/following{/other_user}", "gists_url": "https://api.github.com/users/mzabaluev/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzabaluev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzabaluev/subscriptions", "organizations_url": "https://api.github.com/users/mzabaluev/orgs", "repos_url": "https://api.github.com/users/mzabaluev/repos", "events_url": "https://api.github.com/users/mzabaluev/events{/privacy}", "received_events_url": "https://api.github.com/users/mzabaluev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2572885ab62512a2508868a27c22d615382174a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2572885ab62512a2508868a27c22d615382174a", "html_url": "https://github.com/rust-lang/rust/commit/a2572885ab62512a2508868a27c22d615382174a"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "73dcf058e4512b0695caea1f419abf2f289a9fc7", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e3aefaaa4d6b973fc5dd00baeb98e086abb7f51e/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3aefaaa4d6b973fc5dd00baeb98e086abb7f51e/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=e3aefaaa4d6b973fc5dd00baeb98e086abb7f51e", "patch": "@@ -118,15 +118,16 @@ impl<R> fmt::Debug for BufReader<R> where R: fmt::Debug {\n /// `BufWriter` keeps an in memory buffer of data and writes it to the\n /// underlying `Write` in large, infrequent batches.\n ///\n-/// This writer will be flushed when it is dropped.\n+/// The buffer will be written out when the writer is dropped.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BufWriter<W> {\n     inner: Option<W>,\n     buf: Vec<u8>,\n }\n \n-/// An error returned by `into_inner` which indicates whether a flush error\n-/// happened or not.\n+/// An error returned by `into_inner` which combines an error that\n+/// happened while writing out the buffer, and the buffered writer object\n+/// which may be used to recover from the condition.\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoInnerError<W>(W, Error);\n@@ -155,7 +156,7 @@ impl<W: Write> BufWriter<W> {\n             match self.inner.as_mut().unwrap().write(&self.buf[written..]) {\n                 Ok(0) => {\n                     ret = Err(Error::new(ErrorKind::WriteZero,\n-                                         \"failed to flush\", None));\n+                                         \"failed to write the buffered data\", None));\n                     break;\n                 }\n                 Ok(n) => written += n,\n@@ -190,7 +191,7 @@ impl<W: Write> BufWriter<W> {\n \n     /// Unwraps this `BufWriter`, returning the underlying writer.\n     ///\n-    /// The buffer is flushed before returning the writer.\n+    /// The buffer is written out before returning the writer.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_inner(mut self) -> Result<W, IntoInnerError<BufWriter<W>>> {\n         match self.flush_buf() {\n@@ -239,14 +240,14 @@ impl<W: Write> Drop for BufWriter<W> {\n impl<W> IntoInnerError<W> {\n     /// Returns the error which caused the call to `into_inner` to fail.\n     ///\n-    /// This error was returned when attempting to flush the internal buffer.\n+    /// This error was returned when attempting to write the internal buffer.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn error(&self) -> &Error { &self.1 }\n \n-    /// Returns the underlying `BufWriter` instance which generated the error.\n+    /// Returns the buffered writer instance which generated the error.\n     ///\n-    /// The returned object can be used to retry a flush or re-inspect the\n-    /// buffer.\n+    /// The returned object can be used for error recovery, such as\n+    /// re-inspecting the buffer.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_inner(self) -> W { self.0 }\n }\n@@ -273,7 +274,7 @@ impl<W> fmt::Display for IntoInnerError<W> {\n /// Wraps a Writer and buffers output to it, flushing whenever a newline\n /// (`0x0a`, `'\\n'`) is detected.\n ///\n-/// This writer will be flushed when it is dropped.\n+/// The buffer will be written out when the writer is dropped.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct LineWriter<W> {\n     inner: BufWriter<W>,\n@@ -307,7 +308,7 @@ impl<W: Write> LineWriter<W> {\n \n     /// Unwraps this `LineWriter`, returning the underlying writer.\n     ///\n-    /// The internal buffer is flushed before returning the writer.\n+    /// The internal buffer is written out before returning the writer.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_inner(self) -> Result<W, IntoInnerError<LineWriter<W>>> {\n         self.inner.into_inner().map_err(|IntoInnerError(buf, e)| {\n@@ -364,7 +365,7 @@ impl<W: Read> Read for InternalBufWriter<W> {\n /// call. A `BufStream` keeps in memory buffers of data, making large,\n /// infrequent calls to `read` and `write` on the underlying `Read+Write`.\n ///\n-/// The output half will be flushed when this stream is dropped.\n+/// The output buffer will be written out when this stream is dropped.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BufStream<S> {\n     inner: BufReader<InternalBufWriter<S>>\n@@ -410,8 +411,8 @@ impl<S: Read + Write> BufStream<S> {\n \n     /// Unwraps this `BufStream`, returning the underlying stream.\n     ///\n-    /// The internal buffer is flushed before returning the stream. Any leftover\n-    /// data in the read buffer is lost.\n+    /// The internal write buffer is written out before returning the stream.\n+    /// Any leftover data in the read buffer is lost.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_inner(self) -> Result<S, IntoInnerError<BufStream<S>>> {\n         let BufReader { inner: InternalBufWriter(w), buf } = self.inner;"}]}