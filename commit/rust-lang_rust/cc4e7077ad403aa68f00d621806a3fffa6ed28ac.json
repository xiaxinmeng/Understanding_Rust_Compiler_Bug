{"sha": "cc4e7077ad403aa68f00d621806a3fffa6ed28ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNGU3MDc3YWQ0MDNhYTY4ZjAwZDYyMTgwNmEzZmZmYTZlZDI4YWM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-23T11:57:16Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-24T21:29:32Z"}, "message": "std::vec: correct .sort()'s doc-string and add some\nexamples/clarification to others.", "tree": {"sha": "c954641c3512d3c45ffe269c1b3c41457b12ad20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c954641c3512d3c45ffe269c1b3c41457b12ad20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc4e7077ad403aa68f00d621806a3fffa6ed28ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4e7077ad403aa68f00d621806a3fffa6ed28ac", "html_url": "https://github.com/rust-lang/rust/commit/cc4e7077ad403aa68f00d621806a3fffa6ed28ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc4e7077ad403aa68f00d621806a3fffa6ed28ac/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57724012ff4bc48e362102b30113359c2f45c28d", "url": "https://api.github.com/repos/rust-lang/rust/commits/57724012ff4bc48e362102b30113359c2f45c28d", "html_url": "https://github.com/rust-lang/rust/commit/57724012ff4bc48e362102b30113359c2f45c28d"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "87ba6722bb326ba7819b732457eb01ab84dc5b33", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/cc4e7077ad403aa68f00d621806a3fffa6ed28ac/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4e7077ad403aa68f00d621806a3fffa6ed28ac/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=cc4e7077ad403aa68f00d621806a3fffa6ed28ac", "patch": "@@ -2215,17 +2215,25 @@ pub trait MutableVector<'a, T> {\n     /// Unsafely sets the element in index to the value\n     unsafe fn unsafe_set(self, index: uint, val: T);\n \n-    /**\n-     * Unchecked vector index assignment.  Does not drop the\n-     * old value and hence is only suitable when the vector\n-     * is newly allocated.\n-     */\n+    /// Unchecked vector index assignment.  Does not drop the\n+    /// old value and hence is only suitable when the vector\n+    /// is newly allocated.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut v = [~\"foo\", ~\"bar\"];\n+    ///\n+    /// // memory leak! `~\"bar\"` is not deallocated.\n+    /// unsafe { v.init_elem(1, ~\"baz\"); }\n+    /// ```\n     unsafe fn init_elem(self, i: uint, val: T);\n \n-    /// Copies data from `src` to `self`.\n+    /// Copies raw bytes from `src` to `self`.\n     ///\n-    /// `self` and `src` must not overlap. Fails if `self` is\n-    /// shorter than `src`.\n+    /// This does not run destructors on the overwritten elements, and\n+    /// ignores move semantics. `self` and `src` must not\n+    /// overlap. Fails if `self` is shorter than `src`.\n     unsafe fn copy_memory(self, src: &[T]);\n }\n \n@@ -2370,8 +2378,25 @@ impl<'a,T> MutableVector<'a, T> for &'a mut [T] {\n \n /// Trait for &[T] where T is Cloneable\n pub trait MutableCloneableVector<T> {\n-    /// Copies as many elements from `src` as it can into `self`\n-    /// (the shorter of self.len() and src.len()). Returns the number of elements copied.\n+    /// Copies as many elements from `src` as it can into `self` (the\n+    /// shorter of `self.len()` and `src.len()`). Returns the number\n+    /// of elements copied.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::vec::MutableCloneableVector;\n+    ///\n+    /// let mut dst = [0, 0, 0];\n+    /// let src = [1, 2];\n+    ///\n+    /// assert_eq!(dst.copy_from(src), 2);\n+    /// assert_eq!(dst, [1, 2, 0]);\n+    ///\n+    /// let src2 = [3, 4, 5, 6];\n+    /// assert_eq!(dst.copy_from(src2), 3);\n+    /// assert_eq!(dst, [3, 4, 5]);\n+    /// ```\n     fn copy_from(self, &[T]) -> uint;\n }\n \n@@ -2390,7 +2415,7 @@ impl<'a, T:Clone> MutableCloneableVector<T> for &'a mut [T] {\n pub trait MutableTotalOrdVector<T> {\n     /// Sort the vector, in place.\n     ///\n-    /// This is equivalent to `self.sort_by(std::vec::SortForward)`.\n+    /// This is equivalent to `self.sort_by(|a, b| a.cmp(b))`.\n     ///\n     /// # Example\n     ///"}]}