{"sha": "86730e43c0dd83f946deb88ccbdaaa49817b1136", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NzMwZTQzYzBkZDgzZjk0NmRlYjg4Y2NiZGFhYTQ5ODE3YjExMzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-07T19:06:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-07T19:06:28Z"}, "message": "auto merge of #16904 : inrustwetrust/rust/link-path-order, r=alexcrichton\n\nIssue can be reproduced by the following:\r\n```\r\n$ cat main.rs\r\nfn main() {}\r\n$ rustc -Z print-link-args -Lfoo -Lbar main.rs\r\n```\r\nRun the rustc command a few times and observe that the order of the '-L' 'foo' '-L' 'bar' options randomly changes.\r\n\r\nActually hit this issue in practice on Windows when specifying two -L directories to rustc, one with rust-sdl2 in it and one with the C SDL2.dll. Since Windows file systems aren't case-sensitive, gcc randomly attempted to link against the rust sdl2.dll instead of SDL2.dll if that -L directory happened to come first.\r\n\r\nThe randomness was due to addl_lib_search_paths being a HashSet. Changed it to a Vec instead which maintains the ordering.\r\nUnsure how to test this though since it is random by nature; suggestions very welcome.", "tree": {"sha": "942ef73a79eb106b2d65ef5dcf4eaa233a06abd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/942ef73a79eb106b2d65ef5dcf4eaa233a06abd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86730e43c0dd83f946deb88ccbdaaa49817b1136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86730e43c0dd83f946deb88ccbdaaa49817b1136", "html_url": "https://github.com/rust-lang/rust/commit/86730e43c0dd83f946deb88ccbdaaa49817b1136", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86730e43c0dd83f946deb88ccbdaaa49817b1136/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7502ac2d6c64958be672991c33a1404ea5f040e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7502ac2d6c64958be672991c33a1404ea5f040e", "html_url": "https://github.com/rust-lang/rust/commit/d7502ac2d6c64958be672991c33a1404ea5f040e"}, {"sha": "e7a000e717b06d7010c872efb1ed395fe8d8857d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a000e717b06d7010c872efb1ed395fe8d8857d", "html_url": "https://github.com/rust-lang/rust/commit/e7a000e717b06d7010c872efb1ed395fe8d8857d"}], "stats": {"total": 84, "additions": 60, "deletions": 24}, "files": [{"sha": "25bffe4289b48522560917cb1c1499106a9ebb8d", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=86730e43c0dd83f946deb88ccbdaaa49817b1136", "patch": "@@ -28,7 +28,6 @@ use util::ppaux;\n use util::sha2::{Digest, Sha256};\n \n use std::char;\n-use std::collections::HashSet;\n use std::io::{fs, TempDir, Command};\n use std::io;\n use std::mem;\n@@ -570,10 +569,7 @@ fn link_binary_output(sess: &Session,\n fn archive_search_paths(sess: &Session) -> Vec<Path> {\n     let mut rustpath = filesearch::rust_path();\n     rustpath.push(sess.target_filesearch().get_lib_path());\n-    // FIXME: Addl lib search paths are an unordered HashSet?\n-    // Shouldn't this search be done in some order?\n-    let addl_lib_paths: HashSet<Path> = sess.opts.addl_lib_search_paths.borrow().clone();\n-    let mut search: Vec<Path> = addl_lib_paths.move_iter().collect();\n+    let mut search: Vec<Path> = sess.opts.addl_lib_search_paths.borrow().clone();\n     search.push_all(rustpath.as_slice());\n     return search;\n }"}, {"sha": "8f4f54ce967355d8895e8c4eff64aca5abd3da8d", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=86730e43c0dd83f946deb88ccbdaaa49817b1136", "patch": "@@ -30,7 +30,7 @@ use syntax::diagnostic::{ColorConfig, Auto, Always, Never};\n use syntax::parse;\n use syntax::parse::token::InternedString;\n \n-use std::collections::{HashSet, HashMap};\n+use std::collections::HashMap;\n use getopts::{optopt, optmulti, optflag, optflagopt};\n use getopts;\n use std::cell::{RefCell};\n@@ -76,7 +76,7 @@ pub struct Options {\n     // This was mutable for rustpkg, which updates search paths based on the\n     // parsed code. It remains mutable in case its replacements wants to use\n     // this.\n-    pub addl_lib_search_paths: RefCell<HashSet<Path>>,\n+    pub addl_lib_search_paths: RefCell<Vec<Path>>,\n     pub maybe_sysroot: Option<Path>,\n     pub target_triple: String,\n     // User-specified cfg meta items. The compiler itself will add additional\n@@ -113,7 +113,7 @@ pub fn basic_options() -> Options {\n         lint_opts: Vec::new(),\n         describe_lints: false,\n         output_types: Vec::new(),\n-        addl_lib_search_paths: RefCell::new(HashSet::new()),\n+        addl_lib_search_paths: RefCell::new(Vec::new()),\n         maybe_sysroot: None,\n         target_triple: driver::host_triple().to_string(),\n         cfg: Vec::new(),"}, {"sha": "49c24b190b22b98003b6786de8b3fac27a214b21", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=86730e43c0dd83f946deb88ccbdaaa49817b1136", "patch": "@@ -30,7 +30,7 @@ pub type pick<'a> = |path: &Path|: 'a -> FileMatch;\n \n pub struct FileSearch<'a> {\n     pub sysroot: &'a Path,\n-    pub addl_lib_search_paths: &'a RefCell<HashSet<Path>>,\n+    pub addl_lib_search_paths: &'a RefCell<Vec<Path>>,\n     pub triple: &'a str,\n }\n \n@@ -125,7 +125,7 @@ impl<'a> FileSearch<'a> {\n \n     pub fn new(sysroot: &'a Path,\n                triple: &'a str,\n-               addl_lib_search_paths: &'a RefCell<HashSet<Path>>) -> FileSearch<'a> {\n+               addl_lib_search_paths: &'a RefCell<Vec<Path>>) -> FileSearch<'a> {\n         debug!(\"using sysroot = {}, triple = {}\", sysroot.display(), triple);\n         FileSearch {\n             sysroot: sysroot,"}, {"sha": "908a8ed11e7e819cac7229d15c9cc7eb4b1c6c7e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=86730e43c0dd83f946deb88ccbdaaa49817b1136", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -80,7 +80,7 @@ pub struct CrateAnalysis {\n pub type Externs = HashMap<String, Vec<String>>;\n \n /// Parses, resolves, and typechecks the given crate\n-fn get_ast_and_resolve(cpath: &Path, libs: HashSet<Path>, cfgs: Vec<String>,\n+fn get_ast_and_resolve(cpath: &Path, libs: Vec<Path>, cfgs: Vec<String>,\n                        externs: Externs, triple: Option<String>)\n                        -> (DocContext, CrateAnalysis) {\n     use syntax::codemap::dummy_spanned;\n@@ -153,7 +153,7 @@ fn get_ast_and_resolve(cpath: &Path, libs: HashSet<Path>, cfgs: Vec<String>,\n     })\n }\n \n-pub fn run_core(libs: HashSet<Path>, cfgs: Vec<String>, externs: Externs,\n+pub fn run_core(libs: Vec<Path>, cfgs: Vec<String>, externs: Externs,\n                 path: &Path, triple: Option<String>)\n                 -> (clean::Crate, CrateAnalysis) {\n     let (ctxt, analysis) = get_ast_and_resolve(path, libs, cfgs, externs, triple);"}, {"sha": "4adb7f1617ac3a740f7852ded45cc8f64c2b7bcc", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=86730e43c0dd83f946deb88ccbdaaa49817b1136", "patch": "@@ -369,11 +369,7 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n     info!(\"starting to run rustc\");\n     let (mut krate, analysis) = std::task::try(proc() {\n         let cr = cr;\n-        core::run_core(libs.move_iter().collect(),\n-                       cfgs,\n-                       externs,\n-                       &cr,\n-                       triple)\n+        core::run_core(libs, cfgs, externs, &cr, triple)\n     }).map_err(|boxed_any|format!(\"{:?}\", boxed_any)).unwrap();\n     info!(\"finished with rustc\");\n     analysiskey.replace(Some(analysis));"}, {"sha": "7ee58d99c27efd087cb357972e80f7f142717e10", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=86730e43c0dd83f946deb88ccbdaaa49817b1136", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::HashSet;\n use std::io;\n use std::string::String;\n \n@@ -136,7 +135,7 @@ pub fn render(input: &str, mut output: Path, matches: &getopts::Matches,\n }\n \n /// Run any tests/code examples in the markdown file `input`.\n-pub fn test(input: &str, libs: HashSet<Path>, externs: core::Externs,\n+pub fn test(input: &str, libs: Vec<Path>, externs: core::Externs,\n             mut test_args: Vec<String>) -> int {\n     let input_str = load_or_return!(input, 1, 2);\n "}, {"sha": "adf8cfa45b5122d91eeac7b8269e3a0265025f9a", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=86730e43c0dd83f946deb88ccbdaaa49817b1136", "patch": "@@ -39,7 +39,7 @@ use visit_ast::RustdocVisitor;\n \n pub fn run(input: &str,\n            cfgs: Vec<String>,\n-           libs: HashSet<Path>,\n+           libs: Vec<Path>,\n            externs: core::Externs,\n            mut test_args: Vec<String>,\n            crate_name: Option<String>)\n@@ -109,7 +109,7 @@ pub fn run(input: &str,\n     0\n }\n \n-fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, externs: core::Externs,\n+fn runtest(test: &str, cratename: &str, libs: Vec<Path>, externs: core::Externs,\n            should_fail: bool, no_run: bool, as_test_harness: bool) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n@@ -244,7 +244,7 @@ pub fn maketest(s: &str, cratename: Option<&str>, lints: bool, dont_insert_main:\n pub struct Collector {\n     pub tests: Vec<testing::TestDescAndFn>,\n     names: Vec<String>,\n-    libs: HashSet<Path>,\n+    libs: Vec<Path>,\n     externs: core::Externs,\n     cnt: uint,\n     use_headers: bool,\n@@ -253,7 +253,7 @@ pub struct Collector {\n }\n \n impl Collector {\n-    pub fn new(cratename: String, libs: HashSet<Path>, externs: core::Externs,\n+    pub fn new(cratename: String, libs: Vec<Path>, externs: core::Externs,\n                use_headers: bool) -> Collector {\n         Collector {\n             tests: Vec::new(),"}, {"sha": "b8ebe6db6fd8f4d06a69fa29862460ec8365ea59", "filename": "src/test/run-make/link-path-order/Makefile", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Ftest%2Frun-make%2Flink-path-order%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Ftest%2Frun-make%2Flink-path-order%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-path-order%2FMakefile?ref=86730e43c0dd83f946deb88ccbdaaa49817b1136", "patch": "@@ -0,0 +1,17 @@\n+-include ../tools.mk\n+\n+# Verifies that the -L arguments given to the linker is in the same order\n+# as the -L arguments on the rustc command line.\n+\n+CORRECT_DIR=$(TMPDIR)/correct\n+WRONG_DIR=$(TMPDIR)/wrong\n+\n+all: $(TMPDIR)/libcorrect.a $(TMPDIR)/libwrong.a\n+\tmkdir -p $(CORRECT_DIR) $(WRONG_DIR)\n+\tmv $(TMPDIR)/libcorrect.a $(CORRECT_DIR)/libfoo.a\n+\tmv $(TMPDIR)/libwrong.a $(WRONG_DIR)/libfoo.a\n+\t$(RUSTC) main.rs -o $(TMPDIR)/should_succeed -L $(CORRECT_DIR) -L $(WRONG_DIR)\n+\t$(call RUN,should_succeed)\n+\t$(RUSTC) main.rs -o $(TMPDIR)/should_fail -L $(WRONG_DIR) -L $(CORRECT_DIR)\n+\t$(call FAIL,should_fail)\n+"}, {"sha": "3064af952f898dd0af82955b866136b66867c114", "filename": "src/test/run-make/link-path-order/correct.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Ftest%2Frun-make%2Flink-path-order%2Fcorrect.c", "raw_url": "https://github.com/rust-lang/rust/raw/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Ftest%2Frun-make%2Flink-path-order%2Fcorrect.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-path-order%2Fcorrect.c?ref=86730e43c0dd83f946deb88ccbdaaa49817b1136", "patch": "@@ -0,0 +1 @@\n+int should_return_one() { return 1; }"}, {"sha": "cd286af602a70c36856faf30947b3ec046c0372d", "filename": "src/test/run-make/link-path-order/main.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Ftest%2Frun-make%2Flink-path-order%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Ftest%2Frun-make%2Flink-path-order%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-path-order%2Fmain.rs?ref=86730e43c0dd83f946deb88ccbdaaa49817b1136", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate libc;\n+\n+#[link(name=\"foo\")]\n+extern {\n+    fn should_return_one() -> libc::c_int;\n+}\n+\n+fn main() {\n+    let result = unsafe {\n+        should_return_one()\n+    };\n+\n+    if result != 1 {\n+        std::os::set_exit_status(255);\n+    }\n+}"}, {"sha": "64275b3ad6bb0f78f4edd2abee386e200c445bff", "filename": "src/test/run-make/link-path-order/wrong.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Ftest%2Frun-make%2Flink-path-order%2Fwrong.c", "raw_url": "https://github.com/rust-lang/rust/raw/86730e43c0dd83f946deb88ccbdaaa49817b1136/src%2Ftest%2Frun-make%2Flink-path-order%2Fwrong.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-path-order%2Fwrong.c?ref=86730e43c0dd83f946deb88ccbdaaa49817b1136", "patch": "@@ -0,0 +1 @@\n+int should_return_one() { return 0; }"}]}