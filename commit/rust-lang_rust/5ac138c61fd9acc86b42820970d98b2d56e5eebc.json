{"sha": "5ac138c61fd9acc86b42820970d98b2d56e5eebc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYzEzOGM2MWZkOWFjYzg2YjQyODIwOTcwZDk4YjJkNTZlNWVlYmM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-09-11T02:59:23Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-09-11T02:59:23Z"}, "message": "Update for changes in rustc.", "tree": {"sha": "a922a1b17d70fe74391fb9273924f2dbf9ff1dc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a922a1b17d70fe74391fb9273924f2dbf9ff1dc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ac138c61fd9acc86b42820970d98b2d56e5eebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac138c61fd9acc86b42820970d98b2d56e5eebc", "html_url": "https://github.com/rust-lang/rust/commit/5ac138c61fd9acc86b42820970d98b2d56e5eebc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ac138c61fd9acc86b42820970d98b2d56e5eebc/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d06227d91c1fbd60254b24041a08497d9d201f4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d06227d91c1fbd60254b24041a08497d9d201f4b", "html_url": "https://github.com/rust-lang/rust/commit/d06227d91c1fbd60254b24041a08497d9d201f4b"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "b638ea564dcd0fbe8c64459a085212955afbfc4a", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ac138c61fd9acc86b42820970d98b2d56e5eebc/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac138c61fd9acc86b42820970d98b2d56e5eebc/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=5ac138c61fd9acc86b42820970d98b2d56e5eebc", "patch": "@@ -688,7 +688,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n         // Handle the field index for the outer non-null variant.\n         let inner_ty = match ty.sty {\n-            ty::TyEnum(adt_def, substs) => {\n+            ty::TyAdt(adt_def, substs) => {\n                 let variant = &adt_def.variants[nndiscr as usize];\n                 let index = path.next().unwrap();\n                 let field = &variant.fields[index];\n@@ -715,7 +715,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n     fn get_field_ty(&self, ty: Ty<'tcx>, field_index: usize) -> EvalResult<'tcx, Ty<'tcx>> {\n         match ty.sty {\n-            ty::TyStruct(adt_def, substs) => {\n+            ty::TyAdt(adt_def, substs) => {\n                 Ok(adt_def.struct_variant().fields[field_index].ty(self.tcx, substs))\n             }\n \n@@ -953,7 +953,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n             }\n \n-            (_, &ty::TyEnum(..)) => {\n+            (_, &ty::TyAdt(..)) => {\n                 use rustc::ty::layout::Layout::*;\n                 if let CEnum { discr, signed, .. } = *self.type_layout(ty) {\n                     match (discr.size().bytes(), signed) {"}, {"sha": "154a9ee8c5a657c3a355c0ab007d94bcab7ef5f8", "filename": "src/interpreter/vtable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ac138c61fd9acc86b42820970d98b2d56e5eebc/src%2Finterpreter%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac138c61fd9acc86b42820970d98b2d56e5eebc/src%2Finterpreter%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fvtable.rs?ref=5ac138c61fd9acc86b42820970d98b2d56e5eebc", "patch": "@@ -51,15 +51,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         abi: closure_type.abi,\n                         sig: closure_type.sig,\n                     };\n-                    let fn_ty = self.tcx.mk_bare_fn(fn_ty);\n+                    let _fn_ty = self.tcx.mk_bare_fn(fn_ty);\n                     unimplemented!()\n                     //vec![Some(self.memory.create_fn_ptr(closure_def_id, substs.func_substs, fn_ty))].into_iter()\n                 }\n                 traits::VtableFnPointer(\n                     traits::VtableFnPointerData {\n-                        fn_ty: bare_fn_ty,\n+                        fn_ty: _bare_fn_ty,\n                         nested: _ }) => {\n-                    let trait_closure_kind = tcx.lang_items.fn_trait_kind(trait_ref.def_id()).unwrap();\n+                    let _trait_closure_kind = tcx.lang_items.fn_trait_kind(trait_ref.def_id()).unwrap();\n                     //vec![trans_fn_pointer_shim(ccx, trait_closure_kind, bare_fn_ty)].into_iter()\n                     unimplemented!()\n                 }"}]}