{"sha": "8667f93040cf539c469e3a64b9ed82c5f13bf938", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NjdmOTMwNDBjZjUzOWM0NjllM2E2NGI5ZWQ4MmM1ZjEzYmY5Mzg=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-10T06:52:02Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-10T06:52:02Z"}, "message": "implement `const_evaluatable_checked` feature MVP", "tree": {"sha": "ad6e009f32c656dac8a12bbcf53a0d3fa77890ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad6e009f32c656dac8a12bbcf53a0d3fa77890ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8667f93040cf539c469e3a64b9ed82c5f13bf938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8667f93040cf539c469e3a64b9ed82c5f13bf938", "html_url": "https://github.com/rust-lang/rust/commit/8667f93040cf539c469e3a64b9ed82c5f13bf938", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8667f93040cf539c469e3a64b9ed82c5f13bf938/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1894e4afe1a39f718cc27232a5a2f0d02b501f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1894e4afe1a39f718cc27232a5a2f0d02b501f6", "html_url": "https://github.com/rust-lang/rust/commit/a1894e4afe1a39f718cc27232a5a2f0d02b501f6"}], "stats": {"total": 139, "additions": 122, "deletions": 17}, "files": [{"sha": "d7adf1cdb6d240db0b4239247ba591d7453a10ca", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8667f93040cf539c469e3a64b9ed82c5f13bf938/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8667f93040cf539c469e3a64b9ed82c5f13bf938/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=8667f93040cf539c469e3a64b9ed82c5f13bf938", "patch": "@@ -585,6 +585,9 @@ declare_features! (\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n \n+    /// Allows non trivial generic constants which have to be manually propageted upwards.\n+    (active, const_evaluatable_checked, \"1.48.0\", Some(0), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -600,13 +603,14 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::const_generics,\n     sym::let_chains,\n     sym::raw_dylib,\n+    sym::const_evaluatable_checked,\n     sym::const_trait_impl,\n     sym::const_trait_bound_opt_out,\n     sym::lazy_normalization_consts,\n     sym::specialization,\n ];\n \n /// Some features are not allowed to be used together at the same time, if\n-/// the two are present, produce an error\n+/// the two are present, produce an error.\n pub const INCOMPATIBLE_FEATURES: &[(Symbol, Symbol)] =\n     &[(sym::const_generics, sym::min_const_generics)];"}, {"sha": "407663e57577affefe9243c00389a46861ee339d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8667f93040cf539c469e3a64b9ed82c5f13bf938/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8667f93040cf539c469e3a64b9ed82c5f13bf938/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=8667f93040cf539c469e3a64b9ed82c5f13bf938", "patch": "@@ -348,6 +348,7 @@ symbols! {\n         const_compare_raw_pointers,\n         const_constructor,\n         const_eval_limit,\n+        const_evaluatable_checked,\n         const_extern_fn,\n         const_fn,\n         const_fn_transmute,"}, {"sha": "74f7b1b352caf50fb23d109cd37b0aaf7a8547bb", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8667f93040cf539c469e3a64b9ed82c5f13bf938/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8667f93040cf539c469e3a64b9ed82c5f13bf938/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=8667f93040cf539c469e3a64b9ed82c5f13bf938", "patch": "@@ -14,6 +14,24 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     span: Span,\n ) -> Result<(), ErrorHandled> {\n+    debug!(\"is_const_evaluatable({:?}, {:?})\", def, substs);\n+    if infcx.tcx.features().const_evaluatable_checked {\n+        // FIXME(const_evaluatable_checked): Actually look into generic constants to\n+        // implement const equality.\n+        for pred in param_env.caller_bounds() {\n+            match pred.skip_binders() {\n+                ty::PredicateAtom::ConstEvaluatable(b_def, b_substs) => {\n+                    debug!(\"is_const_evaluatable: caller_bound={:?}, {:?}\", b_def, b_substs);\n+                    if b_def == def && b_substs == substs {\n+                        debug!(\"is_const_evaluatable: caller_bound ~~> ok\");\n+                        return Ok(());\n+                    }\n+                }\n+                _ => {} // don't care\n+            }\n+        }\n+    }\n+\n     let future_compat_lint = || {\n         if let Some(local_def_id) = def.did.as_local() {\n             infcx.tcx.struct_span_lint_hir(\n@@ -38,24 +56,27 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     // See #74595 for more details about this.\n     let concrete = infcx.const_eval_resolve(param_env, def, substs, None, Some(span));\n \n-    let def_kind = infcx.tcx.def_kind(def.did);\n-    match def_kind {\n-        DefKind::AnonConst => {\n-            let mir_body = if let Some(def) = def.as_const_arg() {\n-                infcx.tcx.optimized_mir_of_const_arg(def)\n-            } else {\n-                infcx.tcx.optimized_mir(def.did)\n-            };\n-            if mir_body.is_polymorphic && concrete.is_ok() {\n-                future_compat_lint();\n-            }\n-        }\n-        _ => {\n-            if substs.has_param_types_or_consts() && concrete.is_ok() {\n-                future_compat_lint();\n+    if concrete.is_ok() && substs.has_param_types_or_consts() {\n+        match infcx.tcx.def_kind(def.did) {\n+            DefKind::AnonConst => {\n+                let mir_body = if let Some(def) = def.as_const_arg() {\n+                    infcx.tcx.optimized_mir_of_const_arg(def)\n+                } else {\n+                    infcx.tcx.optimized_mir(def.did)\n+                };\n+\n+                if mir_body.is_polymorphic {\n+                    future_compat_lint();\n+                }\n             }\n+            _ => future_compat_lint(),\n         }\n     }\n \n+    if concrete.is_ok() {\n+        debug!(\"is_const_evaluatable: concrete ~~> ok\");\n+    } else {\n+        debug!(\"is_const_evaluatable: concrete ~~> err\");\n+    }\n     concrete.map(drop)\n }"}, {"sha": "0bba8b821a70ce8363d009e14e2d7052039100d7", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8667f93040cf539c469e3a64b9ed82c5f13bf938/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8667f93040cf539c469e3a64b9ed82c5f13bf938/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=8667f93040cf539c469e3a64b9ed82c5f13bf938", "patch": "@@ -37,11 +37,12 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::mono::Linkage;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::subst::InternalSubsts;\n+use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, AdtKind, Const, ToPolyTraitRef, Ty, TyCtxt};\n use rustc_middle::ty::{ReprOptions, ToPredicate, WithConstness};\n+use rustc_middle::ty::{TypeFoldable, TypeVisitor};\n use rustc_session::config::SanitizerSet;\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n@@ -50,6 +51,8 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use rustc_trait_selection::traits::error_reporting::suggestions::NextTypeParamName;\n \n+use smallvec::SmallVec;\n+\n mod type_of;\n \n struct OnlySelfBounds(bool);\n@@ -1672,10 +1675,51 @@ fn predicates_defined_on(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicate\n                 .alloc_from_iter(result.predicates.iter().chain(inferred_outlives).copied());\n         }\n     }\n+\n+    if tcx.features().const_evaluatable_checked {\n+        let const_evaluatable = const_evaluatable_predicates_of(tcx, def_id, &result);\n+        if result.predicates.is_empty() {\n+            result.predicates = tcx.arena.alloc_from_iter(const_evaluatable);\n+        } else {\n+            result.predicates = tcx\n+                .arena\n+                .alloc_from_iter(result.predicates.iter().copied().chain(const_evaluatable));\n+        }\n+    }\n+\n     debug!(\"predicates_defined_on({:?}) = {:?}\", def_id, result);\n     result\n }\n \n+pub fn const_evaluatable_predicates_of<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    predicates: &ty::GenericPredicates<'tcx>,\n+) -> impl Iterator<Item = (ty::Predicate<'tcx>, Span)> {\n+    #[derive(Default)]\n+    struct ConstCollector<'tcx> {\n+        ct: SmallVec<[(ty::WithOptConstParam<DefId>, SubstsRef<'tcx>); 4]>,\n+    }\n+\n+    impl<'tcx> TypeVisitor<'tcx> for ConstCollector<'tcx> {\n+        fn visit_const(&mut self, ct: &'tcx Const<'tcx>) -> bool {\n+            if let ty::ConstKind::Unevaluated(def, substs, None) = ct.val {\n+                self.ct.push((def, substs));\n+            }\n+            false\n+        }\n+    }\n+\n+    let mut collector = ConstCollector::default();\n+    for (pred, _span) in predicates.predicates.iter() {\n+        pred.visit_with(&mut collector);\n+    }\n+    warn!(\"const_evaluatable_predicates_of({:?}) = {:?}\", def_id, collector.ct);\n+    collector.ct.into_iter().map(move |(def_id, subst)| {\n+        (ty::PredicateAtom::ConstEvaluatable(def_id, subst).to_predicate(tcx), DUMMY_SP)\n+    })\n+}\n+\n /// Returns a list of all type predicates (explicit and implicit) for the definition with\n /// ID `def_id`. This includes all predicates returned by `predicates_defined_on`, plus\n /// `Self: Trait` predicates for traits."}, {"sha": "a7ead78b97bae186d96452d1cc41fd03c665559d", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8667f93040cf539c469e3a64b9ed82c5f13bf938/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8667f93040cf539c469e3a64b9ed82c5f13bf938/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs?ref=8667f93040cf539c469e3a64b9ed82c5f13bf938", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+type Arr<const N: usize> = [u8; N - 1];\n+\n+fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n+    Default::default()\n+}\n+\n+fn main() {\n+    let x = test::<33>();\n+    assert_eq!(x, [0; 32]);\n+}"}, {"sha": "1edf1885dd28186325c928847f77a4a812067799", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8667f93040cf539c469e3a64b9ed82c5f13bf938/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8667f93040cf539c469e3a64b9ed82c5f13bf938/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs?ref=8667f93040cf539c469e3a64b9ed82c5f13bf938", "patch": "@@ -0,0 +1,12 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+type Arr<const N: usize> = [u8; N - 1]; //~ ERROR evaluation of constant\n+\n+fn test<const N: usize>() -> Arr<N> where Arr<N>: Sized {\n+    todo!()\n+}\n+\n+fn main() {\n+    test::<0>();\n+}"}, {"sha": "1ac5e1d95537a42bb55598a669f002e02f691499", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8667f93040cf539c469e3a64b9ed82c5f13bf938/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8667f93040cf539c469e3a64b9ed82c5f13bf938/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.stderr?ref=8667f93040cf539c469e3a64b9ed82c5f13bf938", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/simple_fail.rs:4:33\n+   |\n+LL | type Arr<const N: usize> = [u8; N - 1];\n+   |                                 ^^^^^ attempt to compute `0_usize - 1_usize` which would overflow\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}]}