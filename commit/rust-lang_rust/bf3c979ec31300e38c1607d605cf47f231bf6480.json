{"sha": "bf3c979ec31300e38c1607d605cf47f231bf6480", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmM2M5NzllYzMxMzAwZTM4YzE2MDdkNjA1Y2Y0N2YyMzFiZjY0ODA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-30T23:46:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-30T23:46:57Z"}, "message": "Auto merge of #26696 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #26373, #26506, #26580, #26622, #26627, #26651, #26678, #26692\n- Failed merges:", "tree": {"sha": "7f6589cb3d62ea6313d1e43c22ba0f55fabe37d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f6589cb3d62ea6313d1e43c22ba0f55fabe37d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf3c979ec31300e38c1607d605cf47f231bf6480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf3c979ec31300e38c1607d605cf47f231bf6480", "html_url": "https://github.com/rust-lang/rust/commit/bf3c979ec31300e38c1607d605cf47f231bf6480", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf3c979ec31300e38c1607d605cf47f231bf6480/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc309d79e9cbe473d68ad1292f5df73000a22891", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc309d79e9cbe473d68ad1292f5df73000a22891", "html_url": "https://github.com/rust-lang/rust/commit/dc309d79e9cbe473d68ad1292f5df73000a22891"}, {"sha": "08f9b98e57f2332da522ebf98c74a315211b98ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/08f9b98e57f2332da522ebf98c74a315211b98ac", "html_url": "https://github.com/rust-lang/rust/commit/08f9b98e57f2332da522ebf98c74a315211b98ac"}], "stats": {"total": 401, "additions": 361, "deletions": 40}, "files": [{"sha": "0a08767dc743df74b9e1ada90055f2bb36a0e48f", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf3c979ec31300e38c1607d605cf47f231bf6480/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/bf3c979ec31300e38c1607d605cf47f231bf6480/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=bf3c979ec31300e38c1607d605cf47f231bf6480", "patch": "@@ -4,7 +4,7 @@ Rust is a fast systems programming language that guarantees\n memory safety and offers painless concurrency ([no data races]).\n It does not employ a garbage collector and has minimal runtime overhead.\n \n-This repo contains the code for `rustc`, the Rust compiler, as well\n+This repo contains the code for the compiler (`rustc`), as well\n as standard libraries, tools and documentation for Rust.\n \n [no data races]: http://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html"}, {"sha": "01b53a6c49d8be37bca372caaddd3f5e366b1024", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=bf3c979ec31300e38c1607d605cf47f231bf6480", "patch": "@@ -33,8 +33,10 @@ pub fn new(value: T) -> Rc<T> {\n ```\n \n This code generates documentation that looks [like this][rc-new]. I've left the\n-implementation out, with a regular comment in its place. That's the first thing\n-to notice about this annotation: it uses `///`, instead of `//`. The triple slash\n+implementation out, with a regular comment in its place.\n+\n+The first thing to notice about this annotation is that it uses\n+`///` instead of `//`. The triple slash\n indicates a documentation comment.\n \n Documentation comments are written in Markdown.\n@@ -375,7 +377,7 @@ $ rustdoc --test path/to/my/crate/root.rs\n $ cargo test\n ```\n \n-That's right, `cargo test` tests embedded documentation too. However, \n+That's right, `cargo test` tests embedded documentation too. However,\n `cargo test` will not test binary crates, only library ones. This is\n due to the way `rustdoc` works: it links against the library to be tested,\n but with a binary, there\u2019s nothing to link to."}, {"sha": "cdaef6cd9b5109c9e5a825df9ed55279a4aef3e5", "filename": "src/doc/trpl/link-args.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Fdoc%2Ftrpl%2Flink-args.md", "raw_url": "https://github.com/rust-lang/rust/raw/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Fdoc%2Ftrpl%2Flink-args.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Flink-args.md?ref=bf3c979ec31300e38c1607d605cf47f231bf6480", "patch": "@@ -17,7 +17,7 @@ Note that this feature is currently hidden behind the `feature(link_args)` gate\n because this is not a sanctioned way of performing linking. Right now rustc\n shells out to the system linker, so it makes sense to provide extra command line\n arguments, but this will not always be the case. In the future rustc may use\n-LLVM directly to link native libraries in which case `link_args` will have no\n+LLVM directly to link native libraries, in which case `link_args` will have no\n meaning.\n \n It is highly recommended to *not* use this attribute, and rather use the more"}, {"sha": "7df259e9b36a89036b758b6bb979323f8a8c314a", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=bf3c979ec31300e38c1607d605cf47f231bf6480", "patch": "@@ -128,15 +128,15 @@\n //! This allows multiple actual types to be formatted via `{:x}` (like `i8` as\n //! well as `isize`).  The current mapping of types to traits is:\n //!\n-//! * *nothing* \u21d2 `Display`\n-//! * `?` \u21d2 `Debug`\n-//! * `o` \u21d2 `Octal`\n-//! * `x` \u21d2 `LowerHex`\n-//! * `X` \u21d2 `UpperHex`\n-//! * `p` \u21d2 `Pointer`\n-//! * `b` \u21d2 `Binary`\n-//! * `e` \u21d2 `LowerExp`\n-//! * `E` \u21d2 `UpperExp`\n+//! * *nothing* \u21d2 [`Display`](trait.Display.html)\n+//! * `?` \u21d2 [`Debug`](trait.Debug.html)\n+//! * `o` \u21d2 [`Octal`](trait.Octal.html)\n+//! * `x` \u21d2 [`LowerHex`](trait.LowerHex.html)\n+//! * `X` \u21d2 [`UpperHex`](trait.UpperHex.html)\n+//! * `p` \u21d2 [`Pointer`](trait.Pointer.html)\n+//! * `b` \u21d2 [`Binary`](trait.Binary.html)\n+//! * `e` \u21d2 [`LowerExp`](trait.LowerExp.html)\n+//! * `E` \u21d2 [`UpperExp`](trait.UpperExp.html)\n //!\n //! What this means is that any type of argument which implements the\n //! `fmt::Binary` trait can then be formatted with `{:b}`. Implementations\n@@ -367,11 +367,11 @@\n //!         should always be printed.\n //! * '-' - Currently not used\n //! * '#' - This flag is indicates that the \"alternate\" form of printing should\n-//!         be used.  For array slices, the alternate form omits the brackets.\n-//!         For the integer formatting traits, the alternate forms are:\n+//!         be used. The alternate forms are:\n+//!     * `#?` - pretty-print the `Debug` formatting\n //!     * `#x` - precedes the argument with a \"0x\"\n //!     * `#X` - precedes the argument with a \"0x\"\n-//!     * `#t` - precedes the argument with a \"0b\"\n+//!     * `#b` - precedes the argument with a \"0b\"\n //!     * `#o` - precedes the argument with a \"0o\"\n //! * '0' - This is used to indicate for integer formats that the padding should\n //!         both be done with a `0` character as well as be sign-aware. A format\n@@ -408,19 +408,20 @@\n //!\n //! There are three possible ways to specify the desired `precision`:\n //!\n-//! There are three possible ways to specify the desired `precision`:\n-//! 1. An integer `.N`,\n-//! 2. an integer followed by dollar sign `.N$`, or\n-//! 3. an asterisk `.*`.\n+//! 1. An integer `.N`:\n+//!\n+//!    the integer `N` itself is the precision.\n+//!\n+//! 2. An integer followed by dollar sign `.N$`:\n //!\n-//! The first specification, `.N`, means the integer `N` itself is the precision.\n+//!    use format *argument* `N` (which must be a `usize`) as the precision.\n //!\n-//! The second, `.N$`, means use format *argument* `N` (which must be a `usize`) as the precision.\n+//! 3. An asterisk `.*`:\n //!\n-//! Finally,  `.*` means that this `{...}` is associated with *two* format inputs rather than one:\n-//! the first input holds the `usize` precision, and the second holds the value to print.  Note\n-//! that in this case, if one uses the format string `{<arg>:<spec>.*}`, then the `<arg>` part\n-//! refers to the *value* to print, and the `precision` must come in the input preceding `<arg>`.\n+//!    `.*` means that this `{...}` is associated with *two* format inputs rather than one: the\n+//!    first input holds the `usize` precision, and the second holds the value to print.  Note that\n+//!    in this case, if one uses the format string `{<arg>:<spec>.*}`, then the `<arg>` part refers\n+//!    to the *value* to print, and the `precision` must come in the input preceding `<arg>`.\n //!\n //! For example, these:\n //!"}, {"sha": "52ed29c1b61f49a72e09406ab30f44880ed7caf8", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=bf3c979ec31300e38c1607d605cf47f231bf6480", "patch": "@@ -166,6 +166,8 @@ impl Ordering {\n ///\n /// - total and antisymmetric: exactly one of `a < b`, `a == b` or `a > b` is true; and\n /// - transitive, `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.\n+///\n+/// When this trait is `derive`d, it produces a lexicographic ordering.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Ord: Eq + PartialOrd<Self> {\n     /// This method returns an `Ordering` between `self` and `other`."}, {"sha": "35dea6d15f0e9cef79a5df1324e16d345064ab82", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=bf3c979ec31300e38c1607d605cf47f231bf6480", "patch": "@@ -267,7 +267,7 @@ impl<'a> Display for Arguments<'a> {\n     }\n }\n \n-/// Format trait for the `:?` format. Useful for debugging, all types\n+/// Format trait for the `?` character. Useful for debugging, all types\n /// should implement this.\n ///\n /// Generally speaking, you should just `derive` a `Debug` implementation.\n@@ -312,6 +312,9 @@ impl<'a> Display for Arguments<'a> {\n /// There are a number of `debug_*` methods on `Formatter` to help you with manual\n /// implementations, such as [`debug_struct`][debug_struct].\n ///\n+/// `Debug` implementations using either `derive` or the debug builder API\n+/// on `Formatter` support pretty printing using the alternate flag: `{:#?}`.\n+///\n /// [debug_struct]: ../std/fmt/struct.Formatter.html#method.debug_struct\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented = \"`{Self}` cannot be formatted using `:?`; if it is \\"}, {"sha": "05ddfe89bcf5c7786e44e9537ccdf856ba88afec", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 300, "deletions": 9, "changes": 309, "blob_url": "https://github.com/rust-lang/rust/blob/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=bf3c979ec31300e38c1607d605cf47f231bf6480", "patch": "@@ -1022,6 +1022,120 @@ type Foo<A> = Box<A>; // ok!\n ```\n \"##,\n \n+E0092: r##\"\n+You tried to declare an undefined atomic operation function.\n+Erroneous code example:\n+\n+```\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn atomic_foo(); // error: unrecognized atomic operation\n+                     //        function\n+}\n+```\n+\n+Please check you didn't make a mistake in the function's name. All intrinsic\n+functions are defined in librustc_trans/trans/intrinsic.rs and in\n+libcore/intrinsics.rs in the Rust source code. Example:\n+\n+```\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn atomic_fence(); // ok!\n+}\n+```\n+\"##,\n+\n+E0093: r##\"\n+You declared an unknown intrinsic function. Erroneous code example:\n+\n+```\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn foo(); // error: unrecognized intrinsic function: `foo`\n+}\n+\n+fn main() {\n+    unsafe {\n+        foo();\n+    }\n+}\n+```\n+\n+Please check you didn't make a mistake in the function's name. All intrinsic\n+functions are defined in librustc_trans/trans/intrinsic.rs and in\n+libcore/intrinsics.rs in the Rust source code. Example:\n+\n+```\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn atomic_fence(); // ok!\n+}\n+\n+fn main() {\n+    unsafe {\n+        atomic_fence();\n+    }\n+}\n+```\n+\"##,\n+\n+E0094: r##\"\n+You gave an invalid number of type parameters to an intrinsic function.\n+Erroneous code example:\n+\n+```\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn size_of<T, U>() -> usize; // error: intrinsic has wrong number\n+                                 //        of type parameters\n+}\n+```\n+\n+Please check that you provided the right number of lifetime parameters\n+and verify with the function declaration in the Rust source code.\n+Example:\n+\n+```\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn size_of<T>() -> usize; // ok!\n+}\n+```\n+\"##,\n+\n+E0101: r##\"\n+You hit this error because the compiler the compiler lacks information\n+to determine a type for this expression. Erroneous code example:\n+\n+```\n+fn main() {\n+    let x = |_| {}; // error: cannot determine a type for this expression\n+}\n+```\n+\n+You have two possibilities to solve this situation:\n+ * Give an explicit definition of the expression\n+ * Infer the expression\n+\n+Examples:\n+\n+```\n+fn main() {\n+    let x = |_ : u32| {}; // ok!\n+    // or:\n+    let x = |_| {};\n+    x(0u32);\n+}\n+```\n+\"##,\n+\n E0106: r##\"\n This error indicates that a lifetime is missing from a type. If it is an error\n inside a function signature, the problem may be with failing to adhere to the\n@@ -1130,6 +1244,96 @@ impl Bytes { ... } // error, same as above\n ```\n \"##,\n \n+E0117: r##\"\n+You got this error because because you tried to implement a foreign\n+trait for a foreign type (with maybe a foreign type parameter). Erroneous\n+code example:\n+\n+```\n+impl Drop for u32 {}\n+```\n+\n+The type, trait or the type parameter (or all of them) has to be defined\n+in your crate. Example:\n+\n+```\n+pub struct Foo; // you define your type in your crate\n+\n+impl Drop for Foo { // and you can implement the trait on it!\n+    // code of trait implementation here\n+}\n+\n+trait Bar { // or define your trait in your crate\n+    fn get(&self) -> usize;\n+}\n+\n+impl Bar for u32 { // and then you implement it on a foreign type\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+impl From<Foo> for i32 { // or you use a type from your crate as\n+                         // a type parameter\n+    fn from(i: Foo) -> i32 {\n+        0\n+    }\n+}\n+```\n+\"##,\n+\n+E0119: r##\"\n+There are conflicting trait implementations for the same type.\n+Erroneous code example:\n+\n+```\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+impl<T> MyTrait for T {\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+struct Foo {\n+    value: usize\n+}\n+\n+impl MyTrait for Foo { // error: conflicting implementations for trait\n+                       //        `MyTrait`\n+    fn get(&self) -> usize { self.value }\n+}\n+```\n+\n+When you write:\n+\n+```\n+impl<T> MyTrait for T {\n+    fn get(&self) -> usize { 0 }\n+}\n+```\n+\n+This makes the trait implemented on all types in the scope. So if you\n+try to implement it on another one after that, the implementations will\n+conflict. Example:\n+\n+```\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+impl<T> MyTrait for T {\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+struct Foo;\n+\n+fn main() {\n+    let f = Foo;\n+\n+    f.get(); // the trait is implemented so we can use it\n+}\n+```\n+\"##,\n+\n E0121: r##\"\n In order to be consistent with Rust's lack of global type inference, type\n placeholders are disallowed by design in item signatures.\n@@ -1250,6 +1454,43 @@ information see the [opt-in builtin traits RFC](https://github.com/rust-lang/\n rfcs/blob/master/text/0019-opt-in-builtin-traits.md).\n \"##,\n \n+E0195: r##\"\n+Your method's lifetime parameters do not match the trait declaration.\n+Erroneous code example:\n+\n+```\n+trait Trait {\n+    fn bar<'a,'b:'a>(x: &'a str, y: &'b str);\n+}\n+\n+struct Foo;\n+\n+impl Trait for Foo {\n+    fn bar<'a,'b>(x: &'a str, y: &'b str) {\n+    // error: lifetime parameters or bounds on method `bar`\n+    // do not match the trait declaration\n+    }\n+}\n+```\n+\n+The lifetime constraint `'b` for bar() implementation does not match the\n+trait declaration. Ensure lifetime declarations match exactly in both trait\n+declaration and implementation. Example:\n+\n+```\n+trait Trait {\n+    fn t<'a,'b:'a>(x: &'a str, y: &'b str);\n+}\n+\n+struct Foo;\n+\n+impl Trait for Foo {\n+    fn t<'a,'b:'a>(x: &'a str, y: &'b str) { // ok!\n+    }\n+}\n+```\n+\"##,\n+\n E0197: r##\"\n Inherent implementations (one that do not implement a trait but provide\n methods associated with a type) are always safe because they are not\n@@ -1429,6 +1670,65 @@ impl Copy for &'static Bar { } // error\n ```\n \"##,\n \n+E0207: r##\"\n+You declared an unused type parameter when implementing a trait on an object.\n+Erroneous code example:\n+\n+```\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+struct Foo;\n+\n+impl<T> MyTrait for Foo {\n+    fn get(&self) -> usize {\n+        0\n+    }\n+}\n+```\n+\n+Please check your object definition and remove unused type\n+parameter(s). Example:\n+\n+```\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+struct Foo;\n+\n+impl MyTrait for Foo {\n+    fn get(&self) -> usize {\n+        0\n+    }\n+}\n+```\n+\"##,\n+\n+E0211: r##\"\n+You used an intrinsic function which doesn't correspond to its\n+definition. Erroneous code example:\n+\n+```\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn size_of<T>(); // error: intrinsic has wrong type\n+}\n+```\n+\n+Please check the function definition. Example:\n+\n+```\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn size_of<T>() -> usize;\n+}\n+```\n+\"##,\n+\n E0243: r##\"\n This error indicates that not enough type parameters were found in a type or\n trait.\n@@ -1649,16 +1949,10 @@ register_diagnostics! {\n     E0085,\n     E0086,\n     E0090,\n-    E0092,\n-    E0093,\n-    E0094,\n-    E0101,\n     E0102,\n     E0103,\n     E0104,\n-    E0117,\n     E0118,\n-    E0119,\n     E0120,\n     E0122,\n     E0123,\n@@ -1686,15 +1980,12 @@ register_diagnostics! {\n     E0193, // cannot bound type where clause bounds may only be attached to types\n            // involving type parameters\n     E0194,\n-    E0195, // lifetime parameters or bounds on method do not match the trait declaration\n     E0196, // cannot determine a type for this closure\n     E0203, // type parameter has more than one relaxed default bound,\n            // and only one is supported\n-    E0207, // type parameter is not constrained by the impl trait, self type, or predicate\n     E0208,\n     E0209, // builtin traits can only be implemented on structs or enums\n     E0210, // type parameter is not constrained by any local type\n-    E0211,\n     E0212, // cannot extract an associated type from a higher-ranked trait bound\n     E0213, // associated types are not accepted in this context\n     E0214, // parenthesized parameters may only be used with a trait"}, {"sha": "2a64d0f6e8c19ea8d96faf3f482ff7ada0a9d19f", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=bf3c979ec31300e38c1607d605cf47f231bf6480", "patch": "@@ -204,6 +204,28 @@ impl Stdin {\n     ///\n     /// For detailed semantics of this method, see the documentation on\n     /// `BufRead::read_line`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    ///\n+    /// let mut input = String::new();\n+    /// match io::stdin().read_line(&mut input) {\n+    ///     Ok(n) => {\n+    ///         println!(\"{} bytes read\", n);\n+    ///         println!(\"{}\", input);\n+    ///     }\n+    ///     Err(error) => println!(\"error: {}\", error),\n+    /// }\n+    /// ```\n+    ///\n+    /// You can run the example one of two ways:\n+    ///\n+    /// - Pipe some text to it, e.g. `printf foo | path/to/executable`\n+    /// - Give it text interactively by running the executable directly,\n+    //    in which case it will wait for the Enter key to be pressed before\n+    ///   continuing\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn read_line(&mut self, buf: &mut String) -> io::Result<usize> {\n         self.lock().read_line(buf)"}, {"sha": "60b2d22079e2c418ed803387045527eed5f809b4", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=bf3c979ec31300e38c1607d605cf47f231bf6480", "patch": "@@ -20,7 +20,7 @@ fn main() {\n       _x: Port<()>,\n     }\n \n-        impl Drop for foo {\n+    impl Drop for foo {\n         fn drop(&mut self) {}\n     }\n "}, {"sha": "2da2f1e82a693310fed1887fe42eeed042ea4fa3", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3c979ec31300e38c1607d605cf47f231bf6480/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=bf3c979ec31300e38c1607d605cf47f231bf6480", "patch": "@@ -165,7 +165,7 @@ pub mod pipes {\n         p: Option<*const packet<T>>,\n     }\n \n-        impl<T:Send> Drop for send_packet<T> {\n+    impl<T:Send> Drop for send_packet<T> {\n         fn drop(&mut self) {\n             unsafe {\n                 if self.p != None {\n@@ -194,7 +194,7 @@ pub mod pipes {\n         p: Option<*const packet<T>>,\n     }\n \n-        impl<T:Send> Drop for recv_packet<T> {\n+    impl<T:Send> Drop for recv_packet<T> {\n         fn drop(&mut self) {\n             unsafe {\n                 if self.p != None {"}]}