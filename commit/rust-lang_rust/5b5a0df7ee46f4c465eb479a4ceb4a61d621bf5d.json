{"sha": "5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNWEwZGY3ZWU0NmY0YzQ2NWViNDc5YTRjZWI0YTYxZDYyMWJmNWQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-30T21:25:43Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-01T05:09:14Z"}, "message": "librustc: Implement C-like enum constants. r=tjc", "tree": {"sha": "50835d3191ab21f440f06d5375367e4a57badc82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50835d3191ab21f440f06d5375367e4a57badc82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d", "html_url": "https://github.com/rust-lang/rust/commit/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f34833abfce74cf178c0589a4b7cf5fba9d2a2db", "url": "https://api.github.com/repos/rust-lang/rust/commits/f34833abfce74cf178c0589a4b7cf5fba9d2a2db", "html_url": "https://github.com/rust-lang/rust/commit/f34833abfce74cf178c0589a4b7cf5fba9d2a2db"}], "stats": {"total": 112, "additions": 88, "deletions": 24}, "files": [{"sha": "ea86db77c3f45d754ec9ab266cf90655cba0eb80", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d", "patch": "@@ -312,7 +312,7 @@ extern mod llvm {\n     fn LLVMStructType(ElementTypes: *TypeRef, ElementCount: c_uint,\n                       Packed: Bool) -> TypeRef;\n     fn LLVMCountStructElementTypes(StructTy: TypeRef) -> c_uint;\n-    fn LLVMGetStructElementTypes(StructTy: TypeRef, Dest: *TypeRef);\n+    fn LLVMGetStructElementTypes(StructTy: TypeRef, Dest: *mut TypeRef);\n     fn LLVMIsPackedStruct(StructTy: TypeRef) -> Bool;\n \n     /* Operations on array, pointer, and vector types (sequence types) */\n@@ -1123,10 +1123,9 @@ fn type_to_str_inner(names: type_names, outer0: ~[TypeRef], ty: TypeRef) ->\n       Struct => {\n         let mut s: ~str = ~\"{\";\n         let n_elts = llvm::LLVMCountStructElementTypes(ty) as uint;\n-        let elts = vec::from_elem(n_elts, 0 as TypeRef);\n-        unsafe {\n-            llvm::LLVMGetStructElementTypes(ty, vec::raw::to_ptr(elts));\n-        }\n+        let mut elts = vec::from_elem(n_elts, 0 as TypeRef);\n+        llvm::LLVMGetStructElementTypes(ty,\n+                                        ptr::to_mut_unsafe_ptr(&mut elts[0]));\n         s += tys_str(names, outer, elts);\n         s += ~\"}\";\n         return s;\n@@ -1179,6 +1178,18 @@ fn fn_ty_param_tys(fn_ty: TypeRef) -> ~[TypeRef] unsafe {\n     return args;\n }\n \n+fn struct_element_types(struct_ty: TypeRef) -> ~[TypeRef] {\n+    unsafe {\n+        let count = llvm::LLVMCountStructElementTypes(struct_ty);\n+        let mut buf: ~[TypeRef] =\n+            vec::from_elem(count as uint,\n+                           cast::transmute::<uint,TypeRef>(0));\n+        llvm::LLVMGetStructElementTypes(struct_ty,\n+                                        ptr::to_mut_unsafe_ptr(&mut buf[0]));\n+        return move buf;\n+    }\n+}\n+\n \n /* Memory-managed interface to target data. */\n "}, {"sha": "2348c79ce66b582f7914214b0dd09903ca9b8a55", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d", "patch": "@@ -94,7 +94,8 @@ fn check_expr(sess: Session, def_map: resolve::DefMap,\n             }\n             match def_map.find(e.id) {\n               Some(def_const(def_id)) |\n-                Some(def_fn(def_id, _)) => {\n+                Some(def_fn(def_id, _)) |\n+                Some(def_variant(_, def_id)) => {\n                 if !ast_util::is_local(def_id) {\n                     sess.span_err(\n                         e.span, ~\"paths in constants may only refer to \\"}, {"sha": "450ab0495c69c234a1f15380cf5396be8ee7a352", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d", "patch": "@@ -581,8 +581,9 @@ fn val_str(tn: type_names, v: ValueRef) -> ~str {\n fn struct_elt(llstructty: TypeRef, n: uint) -> TypeRef unsafe {\n     let elt_count = llvm::LLVMCountStructElementTypes(llstructty) as uint;\n     assert (n < elt_count);\n-    let elt_tys = vec::from_elem(elt_count, T_nil());\n-    llvm::LLVMGetStructElementTypes(llstructty, to_ptr(elt_tys));\n+    let mut elt_tys = vec::from_elem(elt_count, T_nil());\n+    llvm::LLVMGetStructElementTypes(llstructty,\n+                                    ptr::to_mut_unsafe_ptr(&mut elt_tys[0]));\n     return llvm::LLVMGetElementType(elt_tys[n]);\n }\n \n@@ -822,11 +823,12 @@ fn T_task(targ_cfg: @session::config) -> TypeRef {\n fn T_tydesc_field(cx: @crate_ctxt, field: uint) -> TypeRef unsafe {\n     // Bit of a kludge: pick the fn typeref out of the tydesc..\n \n-    let tydesc_elts: ~[TypeRef] =\n+    let mut tydesc_elts: ~[TypeRef] =\n         vec::from_elem::<TypeRef>(abi::n_tydesc_fields,\n                                  T_nil());\n-    llvm::LLVMGetStructElementTypes(cx.tydesc_type,\n-                                    to_ptr::<TypeRef>(tydesc_elts));\n+    llvm::LLVMGetStructElementTypes(\n+        cx.tydesc_type,\n+        ptr::to_mut_unsafe_ptr(&mut tydesc_elts[0]));\n     let t = llvm::LLVMGetElementType(tydesc_elts[field]);\n     return t;\n }"}, {"sha": "17282e91d160f536e2ea6445c1c62193019c030f", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d", "patch": "@@ -369,15 +369,51 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n       ast::expr_path(pth) => {\n         assert pth.types.len() == 0;\n         match cx.tcx.def_map.find(e.id) {\n-          Some(ast::def_fn(def_id, _)) => {\n-              assert ast_util::is_local(def_id);\n-              let f = base::get_item_val(cx, def_id.node);\n-              C_struct(~[f, C_null(T_opaque_box_ptr(cx))])\n-          }\n-          Some(ast::def_const(def_id)) => {\n-            get_const_val(cx, def_id)\n-          }\n-          _ => cx.sess.span_bug(e.span, ~\"expected a const or fn def\")\n+            Some(ast::def_fn(def_id, _)) => {\n+                assert ast_util::is_local(def_id);\n+                let f = base::get_item_val(cx, def_id.node);\n+                C_struct(~[f, C_null(T_opaque_box_ptr(cx))])\n+            }\n+            Some(ast::def_const(def_id)) => {\n+                get_const_val(cx, def_id)\n+            }\n+            Some(ast::def_variant(enum_did, variant_did)) => {\n+                // Note that we know this is a C-like (nullary) enum variant,\n+                // or we wouldn't have gotten here -- the constant checker\n+                // forbids paths that don't map to C-like enum variants.\n+                let ety = ty::expr_ty(cx.tcx, e);\n+                let llty = type_of::type_of(cx, ety);\n+                let llstructtys = lib::llvm::struct_element_types(llty);\n+\n+                // Can't use `discrims` from the crate context here because\n+                // those discriminants have an extra level of indirection,\n+                // and there's no LLVM constant load instruction.\n+                let mut lldiscrim_opt = None;\n+                for ty::enum_variants(cx.tcx, enum_did).each |variant_info| {\n+                    if variant_info.id == variant_did {\n+                        lldiscrim_opt = Some(C_int(cx,\n+                                                   variant_info.disr_val));\n+                        break;\n+                    }\n+                }\n+\n+                let lldiscrim;\n+                match lldiscrim_opt {\n+                    None => {\n+                        cx.tcx.sess.span_bug(e.span,\n+                                             ~\"didn't find discriminant?!\");\n+                    }\n+                    Some(found_lldiscrim) => {\n+                        lldiscrim = found_lldiscrim;\n+                    }\n+                }\n+\n+                C_named_struct(llty, ~[ lldiscrim, C_null(llstructtys[1]) ])\n+            }\n+            _ => {\n+                cx.sess.span_bug(e.span,\n+                                 ~\"expected a const, fn, or variant def\")\n+            }\n         }\n       }\n         ast::expr_paren(e) => { return const_expr(cx, e); }"}, {"sha": "6ff11b09146308378660d3236a9d7496dc1c6b14", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d", "patch": "@@ -75,10 +75,9 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n \n     fn struct_tys(ty: TypeRef) -> ~[TypeRef] {\n         let n = llvm::LLVMCountStructElementTypes(ty);\n-        let elts = vec::from_elem(n as uint, ptr::null());\n-        do vec::as_imm_buf(elts) |buf, _len| {\n-            llvm::LLVMGetStructElementTypes(ty, buf);\n-        }\n+        let mut elts = vec::from_elem(n as uint, ptr::null());\n+        llvm::LLVMGetStructElementTypes(ty,\n+                                        ptr::to_mut_unsafe_ptr(&mut elts[0]));\n         return elts;\n     }\n "}, {"sha": "644517deca88a7cb678d9360f973fb757052b4a3", "filename": "src/test/run-pass/const-nullary-enum.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs?ref=5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d", "patch": "@@ -0,0 +1,15 @@\n+enum Foo {\n+    Bar,\n+    Baz,\n+    Boo,\n+}\n+\n+const X: Foo = Bar;\n+\n+fn main() {\n+    match X {\n+        Bar => {}\n+        Baz | Boo => fail\n+    }\n+}\n+"}]}