{"sha": "fedd7785fe61754bd3a2678cf2277e0d0b217454", "node_id": "C_kwDOAAsO6NoAKGZlZGQ3Nzg1ZmU2MTc1NGJkM2EyNjc4Y2YyMjc3ZTBkMGIyMTc0NTQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-25T23:40:17Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-03T14:08:55Z"}, "message": "Access StableHashingContext in rustc_query_system.", "tree": {"sha": "b631241c771973ac6a9893f173a4cdf6e37dcf31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b631241c771973ac6a9893f173a4cdf6e37dcf31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fedd7785fe61754bd3a2678cf2277e0d0b217454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fedd7785fe61754bd3a2678cf2277e0d0b217454", "html_url": "https://github.com/rust-lang/rust/commit/fedd7785fe61754bd3a2678cf2277e0d0b217454", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fedd7785fe61754bd3a2678cf2277e0d0b217454/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "471cb5c149b8f843278a148c03a370e791d45cb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/471cb5c149b8f843278a148c03a370e791d45cb9", "html_url": "https://github.com/rust-lang/rust/commit/471cb5c149b8f843278a148c03a370e791d45cb9"}], "stats": {"total": 42, "additions": 17, "deletions": 25}, "files": [{"sha": "70895f7b98e84e231404989be4e6a8a434c49bd4", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fedd7785fe61754bd3a2678cf2277e0d0b217454/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedd7785fe61754bd3a2678cf2277e0d0b217454/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=fedd7785fe61754bd3a2678cf2277e0d0b217454", "patch": "@@ -90,10 +90,9 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n \n impl<'tcx> DepContext for TyCtxt<'tcx> {\n     type DepKind = DepKind;\n-    type StableHashingContext = StableHashingContext<'tcx>;\n \n     #[inline]\n-    fn create_stable_hashing_context(&self) -> Self::StableHashingContext {\n+    fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {\n         TyCtxt::create_stable_hashing_context(*self)\n     }\n "}, {"sha": "f02fe91dfb14d379b6ab5fcf03b45dc7e3ef1109", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fedd7785fe61754bd3a2678cf2277e0d0b217454/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedd7785fe61754bd3a2678cf2277e0d0b217454/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=fedd7785fe61754bd3a2678cf2277e0d0b217454", "patch": "@@ -36,7 +36,6 @@ impl<'tcx> std::ops::Deref for QueryCtxt<'tcx> {\n \n impl HasDepContext for QueryCtxt<'tcx> {\n     type DepKind = rustc_middle::dep_graph::DepKind;\n-    type StableHashingContext = rustc_query_system::ich::StableHashingContext<'tcx>;\n     type DepContext = TyCtxt<'tcx>;\n \n     #[inline]"}, {"sha": "dd5000153745aa3e822bb77e38de9b388cc765a7", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fedd7785fe61754bd3a2678cf2277e0d0b217454/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedd7785fe61754bd3a2678cf2277e0d0b217454/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=fedd7785fe61754bd3a2678cf2277e0d0b217454", "patch": "@@ -43,10 +43,10 @@\n //!   lost during fingerprint computation.\n \n use super::{DepContext, DepKind};\n+use crate::ich::StableHashingContext;\n \n use rustc_data_structures::fingerprint::{Fingerprint, PackedFingerprint};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-\n use std::fmt;\n use std::hash::Hash;\n \n@@ -119,7 +119,7 @@ pub trait DepNodeParams<Ctxt: DepContext>: fmt::Debug + Sized {\n \n impl<Ctxt: DepContext, T> DepNodeParams<Ctxt> for T\n where\n-    T: HashStable<Ctxt::StableHashingContext> + fmt::Debug,\n+    T: for<'a> HashStable<StableHashingContext<'a>> + fmt::Debug,\n {\n     #[inline]\n     default fn can_reconstruct_query_key() -> bool {"}, {"sha": "114d12fb90b0a875bf6e6d014597f654889dd4a3", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fedd7785fe61754bd3a2678cf2277e0d0b217454/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedd7785fe61754bd3a2678cf2277e0d0b217454/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=fedd7785fe61754bd3a2678cf2277e0d0b217454", "patch": "@@ -1,3 +1,4 @@\n+use parking_lot::Mutex;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::{EventId, QueryInvocationId, SelfProfilerRef};\n@@ -7,8 +8,6 @@ use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{AtomicU32, AtomicU64, Lock, Lrc, Ordering};\n use rustc_index::vec::IndexVec;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n-\n-use parking_lot::Mutex;\n use smallvec::{smallvec, SmallVec};\n use std::collections::hash_map::Entry;\n use std::fmt::Debug;\n@@ -19,6 +18,7 @@ use std::sync::atomic::Ordering::Relaxed;\n use super::query::DepGraphQuery;\n use super::serialized::{GraphEncoder, SerializedDepGraph, SerializedDepNodeIndex};\n use super::{DepContext, DepKind, DepNode, HasDepContext, WorkProductId};\n+use crate::ich::StableHashingContext;\n use crate::query::{QueryContext, QuerySideEffects};\n \n #[cfg(debug_assertions)]\n@@ -96,9 +96,9 @@ struct DepGraphData<K: DepKind> {\n     dep_node_debug: Lock<FxHashMap<DepNode<K>, String>>,\n }\n \n-pub fn hash_result<HashCtxt, R>(hcx: &mut HashCtxt, result: &R) -> Option<Fingerprint>\n+pub fn hash_result<R>(hcx: &mut StableHashingContext<'_>, result: &R) -> Option<Fingerprint>\n where\n-    R: HashStable<HashCtxt>,\n+    R: for<'a> HashStable<StableHashingContext<'a>>,\n {\n     let mut stable_hasher = StableHasher::new();\n     result.hash_stable(hcx, &mut stable_hasher);\n@@ -215,7 +215,7 @@ impl<K: DepKind> DepGraph<K> {\n         cx: Ctxt,\n         arg: A,\n         task: fn(Ctxt, A) -> R,\n-        hash_result: fn(&mut Ctxt::StableHashingContext, &R) -> Option<Fingerprint>,\n+        hash_result: fn(&mut StableHashingContext<'_>, &R) -> Option<Fingerprint>,\n     ) -> (R, DepNodeIndex) {\n         if self.is_fully_enabled() {\n             self.with_task_impl(key, cx, arg, task, hash_result)\n@@ -234,7 +234,7 @@ impl<K: DepKind> DepGraph<K> {\n         cx: Ctxt,\n         arg: A,\n         task: fn(Ctxt, A) -> R,\n-        hash_result: fn(&mut Ctxt::StableHashingContext, &R) -> Option<Fingerprint>,\n+        hash_result: fn(&mut StableHashingContext<'_>, &R) -> Option<Fingerprint>,\n     ) -> (R, DepNodeIndex) {\n         // This function is only called when the graph is enabled.\n         let data = self.data.as_ref().unwrap();"}, {"sha": "2afef21025419888d62ffe1acbc08ad54fd534c9", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fedd7785fe61754bd3a2678cf2277e0d0b217454/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedd7785fe61754bd3a2678cf2277e0d0b217454/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=fedd7785fe61754bd3a2678cf2277e0d0b217454", "patch": "@@ -9,6 +9,7 @@ pub use graph::{hash_result, DepGraph, DepNodeColor, DepNodeIndex, TaskDeps, Wor\n pub use query::DepGraphQuery;\n pub use serialized::{SerializedDepGraph, SerializedDepNodeIndex};\n \n+use crate::ich::StableHashingContext;\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sync::Lock;\n use rustc_serialize::{opaque::FileEncoder, Encodable};\n@@ -19,10 +20,9 @@ use std::hash::Hash;\n \n pub trait DepContext: Copy {\n     type DepKind: self::DepKind;\n-    type StableHashingContext;\n \n     /// Create a hashing context for hashing new results.\n-    fn create_stable_hashing_context(&self) -> Self::StableHashingContext;\n+    fn create_stable_hashing_context(&self) -> StableHashingContext<'_>;\n \n     /// Access the DepGraph.\n     fn dep_graph(&self) -> &DepGraph<Self::DepKind>;\n@@ -36,18 +36,13 @@ pub trait DepContext: Copy {\n \n pub trait HasDepContext: Copy {\n     type DepKind: self::DepKind;\n-    type StableHashingContext;\n-    type DepContext: self::DepContext<\n-        DepKind = Self::DepKind,\n-        StableHashingContext = Self::StableHashingContext,\n-    >;\n+    type DepContext: self::DepContext<DepKind = Self::DepKind>;\n \n     fn dep_context(&self) -> &Self::DepContext;\n }\n \n impl<T: DepContext> HasDepContext for T {\n     type DepKind = T::DepKind;\n-    type StableHashingContext = T::StableHashingContext;\n     type DepContext = Self;\n \n     fn dep_context(&self) -> &Self::DepContext {"}, {"sha": "76a165ed8e6bcc482b6b5c52e040e976cb040411", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fedd7785fe61754bd3a2678cf2277e0d0b217454/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedd7785fe61754bd3a2678cf2277e0d0b217454/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=fedd7785fe61754bd3a2678cf2277e0d0b217454", "patch": "@@ -2,6 +2,7 @@\n \n use crate::dep_graph::DepNode;\n use crate::dep_graph::SerializedDepNodeIndex;\n+use crate::ich::StableHashingContext;\n use crate::query::caches::QueryCache;\n use crate::query::{QueryCacheStore, QueryContext, QueryState};\n \n@@ -23,7 +24,7 @@ pub(crate) struct QueryVtable<CTX: QueryContext, K, V> {\n     pub dep_kind: CTX::DepKind,\n     pub eval_always: bool,\n \n-    pub hash_result: fn(&mut CTX::StableHashingContext, &V) -> Option<Fingerprint>,\n+    pub hash_result: fn(&mut StableHashingContext<'_>, &V) -> Option<Fingerprint>,\n     pub handle_cycle_error: fn(CTX, DiagnosticBuilder<'_>) -> V,\n     pub cache_on_disk: fn(CTX, &K, Option<&V>) -> bool,\n     pub try_load_from_disk: fn(CTX, SerializedDepNodeIndex) -> Option<V>,\n@@ -39,7 +40,7 @@ impl<CTX: QueryContext, K, V> QueryVtable<CTX, K, V> {\n \n     pub(crate) fn hash_result(\n         &self,\n-        hcx: &mut CTX::StableHashingContext,\n+        hcx: &mut StableHashingContext<'_>,\n         value: &V,\n     ) -> Option<Fingerprint> {\n         (self.hash_result)(hcx, value)\n@@ -74,10 +75,8 @@ pub trait QueryAccessors<CTX: QueryContext>: QueryConfig {\n     // Don't use this method to compute query results, instead use the methods on TyCtxt\n     fn compute_fn(tcx: CTX, key: &Self::Key) -> fn(CTX::DepContext, Self::Key) -> Self::Value;\n \n-    fn hash_result(\n-        hcx: &mut CTX::StableHashingContext,\n-        result: &Self::Value,\n-    ) -> Option<Fingerprint>;\n+    fn hash_result(hcx: &mut StableHashingContext<'_>, result: &Self::Value)\n+    -> Option<Fingerprint>;\n \n     fn handle_cycle_error(tcx: CTX, diag: DiagnosticBuilder<'_>) -> Self::Value;\n }"}]}