{"sha": "2d71be5780f2c7548956625d2261d39798f3ce83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNzFiZTU3ODBmMmM3NTQ4OTU2NjI1ZDIyNjFkMzk3OThmM2NlODM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-10-12T17:15:28Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-10-12T21:07:56Z"}, "message": "Rollup merge of #37067 - jseyfried:expand_derives_last, r=alexcrichton\n\nmacros: expand `#[derive]`s after other attribute macros and improve intra-`#[derive]` ordering\n\nFixes https://github.com/serde-rs/serde/issues/577.\ncc #35900\nr? @alexcrichton", "tree": {"sha": "dcfb0eddf7b9afb278dfb50db2dcecb213fcf58f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcfb0eddf7b9afb278dfb50db2dcecb213fcf58f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d71be5780f2c7548956625d2261d39798f3ce83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d71be5780f2c7548956625d2261d39798f3ce83", "html_url": "https://github.com/rust-lang/rust/commit/2d71be5780f2c7548956625d2261d39798f3ce83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d71be5780f2c7548956625d2261d39798f3ce83/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "920f10950ab30dd85da5136a25cf3a9794410e9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/920f10950ab30dd85da5136a25cf3a9794410e9b", "html_url": "https://github.com/rust-lang/rust/commit/920f10950ab30dd85da5136a25cf3a9794410e9b"}, {"sha": "448d6ad72e1f68dfe1ede8caa492fd79af9d9303", "url": "https://api.github.com/repos/rust-lang/rust/commits/448d6ad72e1f68dfe1ede8caa492fd79af9d9303", "html_url": "https://github.com/rust-lang/rust/commit/448d6ad72e1f68dfe1ede8caa492fd79af9d9303"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "9f99919c895058ee3ccc955d7f5e4c025cbdbbdb", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2d71be5780f2c7548956625d2261d39798f3ce83/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71be5780f2c7548956625d2261d39798f3ce83/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=2d71be5780f2c7548956625d2261d39798f3ce83", "patch": "@@ -11,6 +11,7 @@\n //! The compiler code necessary to implement the `#[derive]` extensions.\n \n use syntax::ast::{self, MetaItem};\n+use syntax::attr::HasAttrs;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::feature_gate;\n@@ -104,13 +105,37 @@ pub fn expand_derive(cx: &mut ExtCtxt,\n         }\n     };\n \n-    if mitem.value_str().is_some() {\n-        cx.span_err(mitem.span, \"unexpected value in `derive`\");\n+    let mut derive_attrs = Vec::new();\n+    item = item.map_attrs(|attrs| {\n+        let partition = attrs.into_iter().partition(|attr| &attr.name() == \"derive\");\n+        derive_attrs = partition.0;\n+        partition.1\n+    });\n+\n+    // Expand `#[derive]`s after other attribute macro invocations.\n+    if cx.resolver.find_attr_invoc(&mut item.attrs.clone()).is_some() {\n+        return vec![Annotatable::Item(item.map_attrs(|mut attrs| {\n+            attrs.push(cx.attribute(span, P(mitem.clone())));\n+            attrs.extend(derive_attrs);\n+            attrs\n+        }))];\n     }\n \n-    let mut traits = mitem.meta_item_list().unwrap_or(&[]).to_owned();\n-    if traits.is_empty() {\n-        cx.span_warn(mitem.span, \"empty trait list in `derive`\");\n+    let get_traits = |mitem: &MetaItem, cx: &ExtCtxt| {\n+        if mitem.value_str().is_some() {\n+            cx.span_err(mitem.span, \"unexpected value in `derive`\");\n+        }\n+\n+        let traits = mitem.meta_item_list().unwrap_or(&[]).to_owned();\n+        if traits.is_empty() {\n+            cx.span_warn(mitem.span, \"empty trait list in `derive`\");\n+        }\n+        traits\n+    };\n+\n+    let mut traits = get_traits(mitem, cx);\n+    for derive_attr in derive_attrs {\n+        traits.extend(get_traits(&derive_attr.node.value, cx));\n     }\n \n     // First, weed out malformed #[derive]"}, {"sha": "9b2e36c8cea15c7c463fd290b355f2639019ca4e", "filename": "src/test/run-pass-fulldeps/macro-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d71be5780f2c7548956625d2261d39798f3ce83/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71be5780f2c7548956625d2261d39798f3ce83/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs?ref=2d71be5780f2c7548956625d2261d39798f3ce83", "patch": "@@ -17,8 +17,8 @@\n #[macro_use] #[no_link]\n extern crate macro_crate_test;\n \n-#[into_multi_foo]\n #[derive(PartialEq, Clone, Debug)]\n+#[into_multi_foo]\n fn foo() -> AnotherFakeTypeThatHadBetterGoAway {}\n \n // Check that the `#[into_multi_foo]`-generated `foo2` is configured away"}, {"sha": "a942adc4c80203d163136ec6f477e6bf8336b8e1", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-atob.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d71be5780f2c7548956625d2261d39798f3ce83/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-atob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71be5780f2c7548956625d2261d39798f3ce83/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-atob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-atob.rs?ref=2d71be5780f2c7548956625d2261d39798f3ce83", "patch": "@@ -21,6 +21,6 @@ use proc_macro::TokenStream;\n #[proc_macro_derive(AToB)]\n pub fn derive(input: TokenStream) -> TokenStream {\n     let input = input.to_string();\n-    assert_eq!(input, \"struct A;\\n\");\n+    assert_eq!(input, \"#[derive(Copy, Clone)]\\nstruct A;\\n\");\n     \"struct B;\".parse().unwrap()\n }"}, {"sha": "431c8c5902749f69476e340c74b3f7b1b2db0689", "filename": "src/test/run-pass-fulldeps/proc-macro/load-two.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d71be5780f2c7548956625d2261d39798f3ce83/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fload-two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71be5780f2c7548956625d2261d39798f3ce83/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fload-two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fload-two.rs?ref=2d71be5780f2c7548956625d2261d39798f3ce83", "patch": "@@ -18,6 +18,7 @@ extern crate derive_atob;\n #[macro_use]\n extern crate derive_ctod;\n \n+#[derive(Copy, Clone)]\n #[derive(AToB)]\n struct A;\n "}]}