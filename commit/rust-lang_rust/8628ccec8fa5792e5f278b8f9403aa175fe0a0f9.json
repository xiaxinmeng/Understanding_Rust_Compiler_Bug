{"sha": "8628ccec8fa5792e5f278b8f9403aa175fe0a0f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MjhjY2VjOGZhNTc5MmU1ZjI3OGI4Zjk0MDNhYTE3NWZlMGEwZjk=", "commit": {"author": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-05-11T21:40:24Z"}, "committer": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-05-11T21:40:24Z"}, "message": "Add inferred obligation storage to all Vtable variants and SelectionContext", "tree": {"sha": "1de72e248a2752904605507a36707f4d77fe53a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1de72e248a2752904605507a36707f4d77fe53a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9", "html_url": "https://github.com/rust-lang/rust/commit/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9/comments", "author": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "committer": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e37f8593e42335829e98fed27b8ececbad61a05d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e37f8593e42335829e98fed27b8ececbad61a05d", "html_url": "https://github.com/rust-lang/rust/commit/e37f8593e42335829e98fed27b8ececbad61a05d"}], "stats": {"total": 152, "additions": 111, "deletions": 41}, "files": [{"sha": "8ea6ad8475e6a54dd0852d10bdcce39fe9c157cf", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=8628ccec8fa5792e5f278b8f9403aa175fe0a0f9", "patch": "@@ -239,7 +239,7 @@ pub enum Vtable<'tcx, N> {\n     VtableParam(Vec<N>),\n \n     /// Virtual calls through an object\n-    VtableObject(VtableObjectData<'tcx>),\n+    VtableObject(VtableObjectData<'tcx, N>),\n \n     /// Successful resolution for a builtin trait.\n     VtableBuiltin(VtableBuiltinData<N>),\n@@ -250,7 +250,7 @@ pub enum Vtable<'tcx, N> {\n     VtableClosure(VtableClosureData<'tcx, N>),\n \n     /// Same as above, but for a fn pointer type with the given signature.\n-    VtableFnPointer(ty::Ty<'tcx>),\n+    VtableFnPointer(VtableFnPointerData<'tcx, N>),\n }\n \n /// Identifies a particular impl in the source, along with a set of\n@@ -293,14 +293,22 @@ pub struct VtableBuiltinData<N> {\n /// A vtable for some object-safe trait `Foo` automatically derived\n /// for the object type `Foo`.\n #[derive(PartialEq,Eq,Clone)]\n-pub struct VtableObjectData<'tcx> {\n+pub struct VtableObjectData<'tcx, N> {\n     /// `Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.\n     pub upcast_trait_ref: ty::PolyTraitRef<'tcx>,\n \n     /// The vtable is formed by concatenating together the method lists of\n     /// the base object trait and all supertraits; this is the start of\n     /// `upcast_trait_ref`'s methods in that vtable.\n-    pub vtable_base: usize\n+    pub vtable_base: usize,\n+\n+    pub nested: Vec<N>,\n+}\n+\n+#[derive(Clone, PartialEq, Eq)]\n+pub struct VtableFnPointerData<'tcx, N> {\n+    pub fn_ty: ty::Ty<'tcx>,\n+    pub nested: Vec<N>\n }\n \n /// Creates predicate obligations from the generic bounds.\n@@ -569,7 +577,8 @@ impl<'tcx, N> Vtable<'tcx, N> {\n             VtableBuiltin(i) => i.nested,\n             VtableDefaultImpl(d) => d.nested,\n             VtableClosure(c) => c.nested,\n-            VtableObject(_) | VtableFnPointer(..) => vec![]\n+            VtableObject(d) => d.nested,\n+            VtableFnPointer(d) => d.nested,\n         }\n     }\n \n@@ -578,18 +587,25 @@ impl<'tcx, N> Vtable<'tcx, N> {\n             VtableImpl(i) => VtableImpl(VtableImplData {\n                 impl_def_id: i.impl_def_id,\n                 substs: i.substs,\n-                nested: i.nested.into_iter().map(f).collect()\n+                nested: i.nested.into_iter().map(f).collect(),\n             }),\n             VtableParam(n) => VtableParam(n.into_iter().map(f).collect()),\n             VtableBuiltin(i) => VtableBuiltin(VtableBuiltinData {\n-                nested: i.nested.into_iter().map(f).collect()\n+                nested: i.nested.into_iter().map(f).collect(),\n+            }),\n+            VtableObject(o) => VtableObject(VtableObjectData {\n+                upcast_trait_ref: o.upcast_trait_ref,\n+                vtable_base: o.vtable_base,\n+                nested: o.nested.into_iter().map(f).collect(),\n             }),\n-            VtableObject(o) => VtableObject(o),\n             VtableDefaultImpl(d) => VtableDefaultImpl(VtableDefaultImplData {\n                 trait_def_id: d.trait_def_id,\n-                nested: d.nested.into_iter().map(f).collect()\n+                nested: d.nested.into_iter().map(f).collect(),\n+            }),\n+            VtableFnPointer(p) => VtableFnPointer(VtableFnPointerData {\n+                fn_ty: p.fn_ty,\n+                nested: p.nested.into_iter().map(f).collect(),\n             }),\n-            VtableFnPointer(f) => VtableFnPointer(f),\n             VtableClosure(c) => VtableClosure(VtableClosureData {\n                 closure_def_id: c.closure_def_id,\n                 substs: c.substs,"}, {"sha": "efb2edc62bf4f2d79817b8f2bc24316cf3212a88", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=8628ccec8fa5792e5f278b8f9403aa175fe0a0f9", "patch": "@@ -19,6 +19,7 @@ use super::PredicateObligation;\n use super::SelectionContext;\n use super::SelectionError;\n use super::VtableClosureData;\n+use super::VtableFnPointerData;\n use super::VtableImplData;\n use super::util;\n \n@@ -158,7 +159,7 @@ enum ProjectionTyCandidate<'tcx> {\n     Closure(VtableClosureData<'tcx, PredicateObligation<'tcx>>),\n \n     // fn pointer return type\n-    FnPointer(Ty<'tcx>),\n+    FnPointer(VtableFnPointerData<'tcx, PredicateObligation<'tcx>>),\n }\n \n struct ProjectionTyCandidateSet<'tcx> {\n@@ -929,9 +930,9 @@ fn assemble_candidates_from_impls<'cx, 'gcx, 'tcx>(\n             candidate_set.vec.push(\n                 ProjectionTyCandidate::Closure(data));\n         }\n-        super::VtableFnPointer(fn_type) => {\n+        super::VtableFnPointer(data) => {\n             candidate_set.vec.push(\n-                ProjectionTyCandidate::FnPointer(fn_type));\n+                ProjectionTyCandidate::FnPointer(data));\n         }\n         super::VtableParam(..) => {\n             // This case tell us nothing about the value of an\n@@ -997,19 +998,22 @@ fn confirm_candidate<'cx, 'gcx, 'tcx>(\n             confirm_closure_candidate(selcx, obligation, closure_vtable)\n         }\n \n-        ProjectionTyCandidate::FnPointer(fn_type) => {\n-            confirm_fn_pointer_candidate(selcx, obligation, fn_type)\n+        ProjectionTyCandidate::FnPointer(fn_pointer_vtable) => {\n+            confirm_fn_pointer_candidate(selcx, obligation, fn_pointer_vtable)\n         }\n     }\n }\n \n fn confirm_fn_pointer_candidate<'cx, 'gcx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,\n-    fn_type: Ty<'tcx>)\n+    fn_pointer_vtable: VtableFnPointerData<'tcx, PredicateObligation<'tcx>>)\n     -> (Ty<'tcx>, Vec<PredicateObligation<'tcx>>)\n {\n-    let fn_type = selcx.infcx().shallow_resolve(fn_type);\n+    // FIXME(#32730) propagate obligations (fn pointer vtable nested obligations ONLY come from\n+    // unification in inference)\n+    assert!(fn_pointer_vtable.nested.is_empty());\n+    let fn_type = selcx.infcx().shallow_resolve(fn_pointer_vtable.fn_ty);\n     let sig = fn_type.fn_sig();\n     confirm_callable_candidate(selcx, obligation, sig, util::TupleArgumentsFlag::Yes)\n }"}, {"sha": "1c79e8c13ce3c26add049cab36b007f5795149b5", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=8628ccec8fa5792e5f278b8f9403aa175fe0a0f9", "patch": "@@ -30,7 +30,7 @@ use super::SelectionResult;\n use super::{VtableBuiltin, VtableImpl, VtableParam, VtableClosure,\n             VtableFnPointer, VtableObject, VtableDefaultImpl};\n use super::{VtableImplData, VtableObjectData, VtableBuiltinData,\n-            VtableClosureData, VtableDefaultImplData};\n+            VtableClosureData, VtableDefaultImplData, VtableFnPointerData};\n use super::util;\n \n use hir::def_id::DefId;\n@@ -42,13 +42,24 @@ use traits;\n use ty::fast_reject;\n use ty::relate::TypeRelation;\n \n+use rustc_data_structures::snapshot_vec::{SnapshotVecDelegate, SnapshotVec};\n use std::cell::RefCell;\n use std::fmt;\n+use std::marker::PhantomData;\n use std::rc::Rc;\n use syntax::abi::Abi;\n use hir;\n use util::nodemap::FnvHashMap;\n \n+struct InferredObligationsSnapshotVecDelegate<'tcx> {\n+    phantom: PhantomData<&'tcx i32>,\n+}\n+impl<'tcx> SnapshotVecDelegate for InferredObligationsSnapshotVecDelegate<'tcx> {\n+    type Value = PredicateObligation<'tcx>;\n+    type Undo = ();\n+    fn reverse(_: &mut Vec<Self::Value>, _: Self::Undo) {}\n+}\n+\n pub struct SelectionContext<'cx, 'gcx: 'cx+'tcx, 'tcx: 'cx> {\n     infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n \n@@ -74,6 +85,8 @@ pub struct SelectionContext<'cx, 'gcx: 'cx+'tcx, 'tcx: 'cx> {\n     /// there is no type that the user could *actually name* that\n     /// would satisfy it. This avoids crippling inference, basically.\n     intercrate: bool,\n+\n+    inferred_obligations: SnapshotVec<InferredObligationsSnapshotVecDelegate<'tcx>>,\n }\n \n // A stack that walks back up the stack frame.\n@@ -300,6 +313,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             infcx: infcx,\n             freshener: infcx.freshener(),\n             intercrate: false,\n+            inferred_obligations: SnapshotVec::new(),\n         }\n     }\n \n@@ -308,6 +322,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             infcx: infcx,\n             freshener: infcx.freshener(),\n             intercrate: true,\n+            inferred_obligations: SnapshotVec::new(),\n         }\n     }\n \n@@ -1977,9 +1992,9 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             FnPointerCandidate => {\n-                let fn_type =\n+                let data =\n                     self.confirm_fn_pointer_candidate(obligation)?;\n-                Ok(VtableFnPointer(fn_type))\n+                Ok(VtableFnPointer(data))\n             }\n \n             ProjectionCandidate => {\n@@ -2227,7 +2242,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n     fn confirm_object_candidate(&mut self,\n                                 obligation: &TraitObligation<'tcx>)\n-                                -> VtableObjectData<'tcx>\n+                                -> VtableObjectData<'tcx, PredicateObligation<'tcx>>\n     {\n         debug!(\"confirm_object_candidate({:?})\",\n                obligation);\n@@ -2279,15 +2294,16 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         }\n \n+        // FIXME(#32730) propagate obligations\n         VtableObjectData {\n             upcast_trait_ref: upcast_trait_ref.unwrap(),\n             vtable_base: vtable_base,\n+            nested: vec![]\n         }\n     }\n \n-    fn confirm_fn_pointer_candidate(&mut self,\n-                                    obligation: &TraitObligation<'tcx>)\n-                                    -> Result<ty::Ty<'tcx>,SelectionError<'tcx>>\n+    fn confirm_fn_pointer_candidate(&mut self, obligation: &TraitObligation<'tcx>)\n+        -> Result<VtableFnPointerData<'tcx, PredicateObligation<'tcx>>, SelectionError<'tcx>>\n     {\n         debug!(\"confirm_fn_pointer_candidate({:?})\",\n                obligation);\n@@ -2305,7 +2321,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         self.confirm_poly_trait_refs(obligation.cause.clone(),\n                                      obligation.predicate.to_poly_trait_ref(),\n                                      trait_ref)?;\n-        Ok(self_ty)\n+        // FIXME(#32730) propagate obligations\n+        Ok(VtableFnPointerData { fn_ty: self_ty, nested: vec![] })\n     }\n \n     fn confirm_closure_candidate(&mut self,"}, {"sha": "e210d2da94cfd4db09435da2ae56025172f31c4b", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=8628ccec8fa5792e5f278b8f9403aa175fe0a0f9", "patch": "@@ -99,11 +99,20 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableDefaultImplData<N> {\n     }\n }\n \n-impl<'tcx> fmt::Debug for traits::VtableObjectData<'tcx> {\n+impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableObjectData<'tcx, N> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"VtableObject(upcast={:?}, vtable_base={})\",\n+        write!(f, \"VtableObject(upcast={:?}, vtable_base={}, nested={:?})\",\n                self.upcast_trait_ref,\n-               self.vtable_base)\n+               self.vtable_base,\n+               self.nested)\n+    }\n+}\n+\n+impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableFnPointerData<'tcx, N> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"VtableFnPointer(fn_ty={:?}, nested={:?})\",\n+               self.fn_ty,\n+               self.nested)\n     }\n }\n \n@@ -185,19 +194,26 @@ impl<'a, 'tcx> Lift<'tcx> for traits::Vtable<'a, ()> {\n                     })\n                 })\n             }\n-            traits::VtableFnPointer(ty) => {\n-                tcx.lift(&ty).map(traits::VtableFnPointer)\n+            traits::VtableFnPointer(traits::VtableFnPointerData { fn_ty, nested }) => {\n+                tcx.lift(&fn_ty).map(|fn_ty| {\n+                    traits::VtableFnPointer(traits::VtableFnPointerData {\n+                        fn_ty: fn_ty,\n+                        nested: nested,\n+                    })\n+                })\n             }\n             traits::VtableParam(n) => Some(traits::VtableParam(n)),\n             traits::VtableBuiltin(d) => Some(traits::VtableBuiltin(d)),\n             traits::VtableObject(traits::VtableObjectData {\n                 upcast_trait_ref,\n-                vtable_base\n+                vtable_base,\n+                nested\n             }) => {\n                 tcx.lift(&upcast_trait_ref).map(|trait_ref| {\n                     traits::VtableObject(traits::VtableObjectData {\n                         upcast_trait_ref: trait_ref,\n-                        vtable_base: vtable_base\n+                        vtable_base: vtable_base,\n+                        nested: nested\n                     })\n                 })\n             }\n@@ -276,16 +292,30 @@ impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableBuiltinDa\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for traits::VtableObjectData<'tcx> {\n+impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableObjectData<'tcx, N> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         traits::VtableObjectData {\n             upcast_trait_ref: self.upcast_trait_ref.fold_with(folder),\n-            vtable_base: self.vtable_base\n+            vtable_base: self.vtable_base,\n+            nested: self.nested.fold_with(folder),\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.upcast_trait_ref.visit_with(visitor) || self.nested.visit_with(visitor)\n+    }\n+}\n+\n+impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableFnPointerData<'tcx, N> {\n+    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n+        traits::VtableFnPointerData {\n+            fn_ty: self.fn_ty.fold_with(folder),\n+            nested: self.nested.fold_with(folder),\n         }\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.upcast_trait_ref.visit_with(visitor)\n+        self.fn_ty.visit_with(visitor) || self.nested.visit_with(visitor)\n     }\n }\n "}, {"sha": "f8149565aa66b64e50263236845c8bf53d53497f", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=8628ccec8fa5792e5f278b8f9403aa175fe0a0f9", "patch": "@@ -473,9 +473,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Given an upcast trait object described by `object`, returns the\n     /// index of the method `method_def_id` (which should be part of\n     /// `object.upcast_trait_ref`) within the vtable for `object`.\n-    pub fn get_vtable_index_of_object_method(self,\n-                                             object: &super::VtableObjectData<'tcx>,\n-                                             method_def_id: DefId) -> usize {\n+    pub fn get_vtable_index_of_object_method<N>(self,\n+                                                object: &super::VtableObjectData<'tcx, N>,\n+                                                method_def_id: DefId) -> usize {\n         // Count number of methods preceding the one we are selecting and\n         // add them to the total offset.\n         // Skip over associated types and constants."}, {"sha": "179fbe84eec0679d3ee07b0bbb8377cbf0402572", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=8628ccec8fa5792e5f278b8f9403aa175fe0a0f9", "patch": "@@ -188,9 +188,9 @@ impl<'tcx> Callee<'tcx> {\n                 };\n                 Callee::ptr(immediate_rvalue(llfn, fn_ptr_ty))\n             }\n-            traits::VtableFnPointer(fn_ty) => {\n+            traits::VtableFnPointer(vtable_fn_pointer) => {\n                 let trait_closure_kind = tcx.lang_items.fn_trait_kind(trait_id).unwrap();\n-                let llfn = trans_fn_pointer_shim(ccx, trait_closure_kind, fn_ty);\n+                let llfn = trans_fn_pointer_shim(ccx, trait_closure_kind, vtable_fn_pointer.fn_ty);\n \n                 let method_ty = def_ty(tcx, def_id, substs);\n                 let fn_ptr_ty = match method_ty.sty {"}, {"sha": "64ee18fccef37f32a1b63be1a47d4b945624fea2", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8628ccec8fa5792e5f278b8f9403aa175fe0a0f9/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=8628ccec8fa5792e5f278b8f9403aa175fe0a0f9", "patch": "@@ -176,7 +176,10 @@ pub fn get_vtable<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                                          trait_closure_kind);\n                 vec![llfn].into_iter()\n             }\n-            traits::VtableFnPointer(bare_fn_ty) => {\n+            traits::VtableFnPointer(\n+                traits::VtableFnPointerData {\n+                    fn_ty: bare_fn_ty,\n+                    nested: _ }) => {\n                 let trait_closure_kind = tcx.lang_items.fn_trait_kind(trait_ref.def_id()).unwrap();\n                 vec![trans_fn_pointer_shim(ccx, trait_closure_kind, bare_fn_ty)].into_iter()\n             }"}]}