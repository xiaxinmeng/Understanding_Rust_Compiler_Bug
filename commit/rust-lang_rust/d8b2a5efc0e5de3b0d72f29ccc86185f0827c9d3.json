{"sha": "d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YjJhNWVmYzBlNWRlM2IwZDcyZjI5Y2NjODYxODVmMDgyN2M5ZDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-09T14:43:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-09T14:43:39Z"}, "message": "Generate AST", "tree": {"sha": "46f8e8feb046ece8511ac1981f53bfa1762d3af3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46f8e8feb046ece8511ac1981f53bfa1762d3af3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3", "html_url": "https://github.com/rust-lang/rust/commit/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36bd28633baf6015b767e9e70d2d53185271db50", "url": "https://api.github.com/repos/rust-lang/rust/commits/36bd28633baf6015b767e9e70d2d53185271db50", "html_url": "https://github.com/rust-lang/rust/commit/36bd28633baf6015b767e9e70d2d53185271db50"}], "stats": {"total": 186, "additions": 134, "deletions": 52}, "files": [{"sha": "e7cc6a696e36c7815084da7ea30460b222557302", "filename": "libeditor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3/libeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3/libeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/libeditor%2Fsrc%2Flib.rs?ref=d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3", "patch": "@@ -3,7 +3,7 @@ extern crate libsyntax2;\n mod extend_selection;\n \n use libsyntax2::{\n-    SyntaxNodeRef,\n+    SyntaxNodeRef, AstNode,\n     algo::walk,\n     SyntaxKind::*,\n };"}, {"sha": "612b04f8678060260a02d6883961f5b3612b7398", "filename": "src/ast/generated.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3/src%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3/src%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fast%2Fgenerated.rs?ref=d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3", "patch": "@@ -0,0 +1,54 @@\n+use std::sync::Arc;\n+use {\n+    SyntaxNode, SyntaxRoot, TreeRoot, AstNode,\n+    SyntaxKind::*,\n+};\n+\n+\n+#[derive(Debug)]\n+pub struct File<R: TreeRoot = Arc<SyntaxRoot>> {\n+    syntax: SyntaxNode<R>,\n+}\n+\n+impl<R: TreeRoot> AstNode<R> for File<R> {\n+    fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n+        match syntax.kind() {\n+            FILE => Some(File { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n+}\n+\n+\n+#[derive(Debug)]\n+pub struct FnItem<R: TreeRoot = Arc<SyntaxRoot>> {\n+    syntax: SyntaxNode<R>,\n+}\n+\n+impl<R: TreeRoot> AstNode<R> for FnItem<R> {\n+    fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n+        match syntax.kind() {\n+            FN_ITEM => Some(FnItem { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n+}\n+\n+\n+#[derive(Debug)]\n+pub struct Name<R: TreeRoot = Arc<SyntaxRoot>> {\n+    syntax: SyntaxNode<R>,\n+}\n+\n+impl<R: TreeRoot> AstNode<R> for Name<R> {\n+    fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n+        match syntax.kind() {\n+            NAME => Some(Name { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n+}\n+"}, {"sha": "f2559383a2d4d8b2ac3a221178e9965b52ca4dd5", "filename": "src/ast/generated.rs.tera", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3/src%2Fast%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3/src%2Fast%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fast%2Fgenerated.rs.tera?ref=d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3", "patch": "@@ -0,0 +1,22 @@\n+use std::sync::Arc;\n+use {\n+    SyntaxNode, SyntaxRoot, TreeRoot, AstNode,\n+    SyntaxKind::*,\n+};\n+{% for node in ast %}\n+{% set Name = node.kind | camel  %}\n+#[derive(Debug)]\n+pub struct {{ Name }}<R: TreeRoot = Arc<SyntaxRoot>> {\n+    syntax: SyntaxNode<R>,\n+}\n+\n+impl<R: TreeRoot> AstNode<R> for {{ Name }}<R> {\n+    fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n+        match syntax.kind() {\n+            {{ node.kind }} => Some({{ Name }} { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n+}\n+{% endfor %}"}, {"sha": "dc7e006c94df6faa2e55f870b70b01a638ca5bfd", "filename": "src/ast/mod.rs", "status": "renamed", "additions": 15, "deletions": 39, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3/src%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3/src%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fast%2Fmod.rs?ref=d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3", "patch": "@@ -1,57 +1,41 @@\n+mod generated;\n+\n use std::sync::Arc;\n use {\n     SyntaxNode, SyntaxRoot, TreeRoot,\n     SyntaxKind::*,\n };\n+pub use self::generated::*;\n \n-#[derive(Debug)]\n-pub struct File<R: TreeRoot = Arc<SyntaxRoot>> {\n-    syntax: SyntaxNode<R>,\n-}\n-\n-#[derive(Debug)]\n-pub struct Function<R: TreeRoot = Arc<SyntaxRoot>> {\n-    syntax: SyntaxNode<R>,\n+pub trait AstNode<R: TreeRoot>: Sized {\n+    fn cast(syntax: SyntaxNode<R>) -> Option<Self>;\n+    fn syntax(&self) -> &SyntaxNode<R>;\n }\n \n-#[derive(Debug)]\n-pub struct Name<R: TreeRoot = Arc<SyntaxRoot>> {\n-    syntax: SyntaxNode<R>,\n-}\n-\n-\n impl File<Arc<SyntaxRoot>> {\n     pub fn parse(text: &str) -> Self {\n-        File {\n-            syntax: ::parse(text),\n-        }\n+        File::cast(::parse(text)).unwrap()\n     }\n }\n \n impl<R: TreeRoot> File<R> {\n-    pub fn functions<'a>(&'a self) -> impl Iterator<Item = Function<R>> + 'a {\n-        self.syntax\n+    pub fn functions<'a>(&'a self) -> impl Iterator<Item = FnItem<R>> + 'a {\n+        self.syntax()\n             .children()\n-            .filter(|node| node.kind() == FN_ITEM)\n-            .map(|node| Function { syntax: node })\n+            .filter_map(FnItem::cast)\n     }\n }\n \n-impl<R: TreeRoot> Function<R> {\n-    pub fn syntax(&self) -> SyntaxNode<R> {\n-        self.syntax.clone()\n-    }\n-\n+impl<R: TreeRoot> FnItem<R> {\n     pub fn name(&self) -> Option<Name<R>> {\n-        self.syntax\n+        self.syntax()\n             .children()\n-            .filter(|node| node.kind() == NAME)\n-            .map(|node| Name { syntax: node })\n+            .filter_map(Name::cast)\n             .next()\n     }\n \n     pub fn has_atom_attr(&self, atom: &str) -> bool {\n-        self.syntax\n+        self.syntax()\n             .children()\n             .filter(|node| node.kind() == ATTR)\n             .any(|attr| {\n@@ -81,14 +65,6 @@ impl<R: TreeRoot> Function<R> {\n \n impl<R: TreeRoot> Name<R> {\n     pub fn text(&self) -> String {\n-        self.syntax.text()\n-    }\n-}\n-\n-\n-\n-impl<R: TreeRoot> File<R> {\n-    pub fn syntax(&self) -> SyntaxNode<R> {\n-        self.syntax.clone()\n+        self.syntax().text()\n     }\n }", "previous_filename": "src/ast.rs"}, {"sha": "b6a870d84e41133f087bc656b41f196c98f815d6", "filename": "src/grammar.ron", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3/src%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3/src%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar.ron?ref=d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3", "patch": "@@ -212,5 +212,16 @@ Grammar(\n         \"PARAM\",\n         \"SELF_PARAM\",\n         \"ARG_LIST\",\n+    ],\n+    ast: [\n+        (\n+            kind: \"FILE\"\n+        ),\n+        (\n+            kind: \"FN_ITEM\"\n+        ),\n+        (\n+            kind: \"NAME\"\n+        ),\n     ]\n )"}, {"sha": "d1e690bb28ad4fbc40ecd10105b7cf827c9bd5c7", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3", "patch": "@@ -41,7 +41,7 @@ mod yellow;\n pub mod utils;\n \n pub use {\n-    ast::File,\n+    ast::{AstNode, File},\n     lexer::{tokenize, Token},\n     syntax_kinds::SyntaxKind,\n     text_unit::{TextRange, TextUnit},"}, {"sha": "b5c966f74c45415052eb241302f43e30d60d444d", "filename": "tools/src/main.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3/tools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3/tools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tools%2Fsrc%2Fmain.rs?ref=d8b2a5efc0e5de3b0d72f29ccc86185f0827c9d3", "patch": "@@ -23,6 +23,8 @@ const INLINE_TESTS_DIR: &str = \"tests/data/parser/inline\";\n const GRAMMAR: &str = \"./src/grammar.ron\";\n const SYNTAX_KINDS: &str = \"./src/syntax_kinds/generated.rs\";\n const SYNTAX_KINDS_TEMPLATE: &str = \"./src/syntax_kinds/generated.rs.tera\";\n+const AST: &str = \"./src/ast/generated.rs\";\n+const AST_TEMPLATE: &str = \"./src/ast/generated.rs.tera\";\n \n fn main() -> Result<()> {\n     let matches = App::new(\"tasks\")\n@@ -47,10 +49,16 @@ fn main() -> Result<()> {\n \n fn run_gen_command(name: &str, verify: bool) -> Result<()> {\n     match name {\n-        \"gen-kinds\" => update(Path::new(SYNTAX_KINDS), &get_kinds()?, verify),\n-        \"gen-tests\" => gen_tests(verify),\n+        \"gen-kinds\" => {\n+            update(Path::new(SYNTAX_KINDS), &render_template(SYNTAX_KINDS_TEMPLATE)?, verify)?;\n+            update(Path::new(AST), &render_template(AST_TEMPLATE)?, verify)?;\n+        },\n+        \"gen-tests\" => {\n+            gen_tests(verify)?\n+        },\n         _ => unreachable!(),\n     }\n+    Ok(())\n }\n \n fn update(path: &Path, contents: &str, verify: bool) -> Result<()> {\n@@ -68,13 +76,30 @@ fn update(path: &Path, contents: &str, verify: bool) -> Result<()> {\n     Ok(())\n }\n \n-fn get_kinds() -> Result<String> {\n-    let grammar = grammar()?;\n-    let template = fs::read_to_string(SYNTAX_KINDS_TEMPLATE)?;\n+fn render_template(template: &str) -> Result<String> {\n+    let grammar: ron::value::Value = {\n+        let text = fs::read_to_string(GRAMMAR)?;\n+        ron::de::from_str(&text)?\n+    };\n+    let template = fs::read_to_string(template)?;\n     let mut tera = tera::Tera::default();\n     tera.add_raw_template(\"grammar\", &template)\n         .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n     tera.register_global_function(\"concat\", Box::new(concat));\n+    tera.register_filter(\"camel\", |arg, _| {\n+        Ok(arg.as_str().unwrap()\n+            .split(\"_\")\n+            .flat_map(|word| {\n+                word.chars()\n+                    .next().unwrap()\n+                    .to_uppercase()\n+                    .chain(\n+                        word.chars().skip(1).flat_map(|c| c.to_lowercase())\n+                    )\n+            })\n+            .collect::<String>()\n+            .into())\n+    });\n     let ret = tera\n         .render(\"grammar\", &grammar)\n         .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n@@ -94,12 +119,6 @@ fn get_kinds() -> Result<String> {\n     }\n }\n \n-fn grammar() -> Result<ron::value::Value> {\n-    let text = fs::read_to_string(GRAMMAR)?;\n-    let ret = ron::de::from_str(&text)?;\n-    Ok(ret)\n-}\n-\n fn gen_tests(verify: bool) -> Result<()> {\n     let tests = tests_from_dir(Path::new(GRAMMAR_DIR))?;\n "}]}