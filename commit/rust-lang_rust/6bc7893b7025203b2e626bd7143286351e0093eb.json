{"sha": "6bc7893b7025203b2e626bd7143286351e0093eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYzc4OTNiNzAyNTIwM2IyZTYyNmJkNzE0MzI4NjM1MWUwMDkzZWI=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-29T06:50:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-29T06:50:36Z"}, "message": "Merge pull request #1956 from sunfishcode/master\n\nAdd a lint for lossless casts.", "tree": {"sha": "244d8d8de86990b7ed07f3ebb09cab45cc576c88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/244d8d8de86990b7ed07f3ebb09cab45cc576c88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bc7893b7025203b2e626bd7143286351e0093eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc7893b7025203b2e626bd7143286351e0093eb", "html_url": "https://github.com/rust-lang/rust/commit/6bc7893b7025203b2e626bd7143286351e0093eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bc7893b7025203b2e626bd7143286351e0093eb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f1f12f555f3d144f434cb7a75a9a8f1b96dc138", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1f12f555f3d144f434cb7a75a9a8f1b96dc138", "html_url": "https://github.com/rust-lang/rust/commit/5f1f12f555f3d144f434cb7a75a9a8f1b96dc138"}, {"sha": "7714203c72ad84f45f756137c25bf6be8681c516", "url": "https://api.github.com/repos/rust-lang/rust/commits/7714203c72ad84f45f756137c25bf6be8681c516", "html_url": "https://github.com/rust-lang/rust/commit/7714203c72ad84f45f756137c25bf6be8681c516"}], "stats": {"total": 460, "additions": 360, "deletions": 100}, "files": [{"sha": "01c0766fe21b1a32a3051abaaf9e14fae87b38be", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bc7893b7025203b2e626bd7143286351e0093eb/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/6bc7893b7025203b2e626bd7143286351e0093eb/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=6bc7893b7025203b2e626bd7143286351e0093eb", "patch": "@@ -426,6 +426,7 @@ All notable changes to this project will be documented in this file.\n [`box_vec`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#box_vec\n [`boxed_local`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#boxed_local\n [`builtin_type_shadow`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#builtin_type_shadow\n+[`cast_lossless`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#cast_lossless\n [`cast_possible_truncation`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#cast_possible_truncation\n [`cast_possible_wrap`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#cast_possible_wrap\n [`cast_precision_loss`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#cast_precision_loss"}, {"sha": "01c4a89e1494e84898d4c287cd1dcc92c8155038", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6bc7893b7025203b2e626bd7143286351e0093eb/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/6bc7893b7025203b2e626bd7143286351e0093eb/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=6bc7893b7025203b2e626bd7143286351e0093eb", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 208 lints included in this crate:\n+There are 209 lints included in this crate:\n \n name                                                                                                                         | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -198,6 +198,7 @@ name\n [box_vec](https://github.com/rust-lang-nursery/rust-clippy/wiki#box_vec)                                                     | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n [boxed_local](https://github.com/rust-lang-nursery/rust-clippy/wiki#boxed_local)                                             | warn    | using `Box<T>` where unnecessary\n [builtin_type_shadow](https://github.com/rust-lang-nursery/rust-clippy/wiki#builtin_type_shadow)                             | warn    | shadowing a builtin type\n+[cast_lossless](https://github.com/rust-lang-nursery/rust-clippy/wiki#cast_lossless)                                         | allow   | casts using `as` that are known to be lossless, e.g. `x as u64` where `x: u8`\n [cast_possible_truncation](https://github.com/rust-lang-nursery/rust-clippy/wiki#cast_possible_truncation)                   | allow   | casts that may cause truncation of the value, e.g. `x as u8` where `x: u32`, or `x as i32` where `x: f32`\n [cast_possible_wrap](https://github.com/rust-lang-nursery/rust-clippy/wiki#cast_possible_wrap)                               | allow   | casts that may cause wrapping around the value, e.g. `x as i32` where `x: u32` and `x > i32::MAX`\n [cast_precision_loss](https://github.com/rust-lang-nursery/rust-clippy/wiki#cast_precision_loss)                             | allow   | casts that cause loss of precision, e.g. `x as f32` where `x: u64`"}, {"sha": "e95c37b0aeef2e64d4ee2441c5cd32b3d5f0c20e", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bc7893b7025203b2e626bd7143286351e0093eb/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc7893b7025203b2e626bd7143286351e0093eb/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=6bc7893b7025203b2e626bd7143286351e0093eb", "patch": "@@ -54,8 +54,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n                     let bad = match cx.tcx.at(expr.span).const_eval(\n                         param_env.and((did, substs)),\n                     ) {\n-                        Ok(ConstVal::Integral(Usize(Us64(i)))) => i as u32 as u64 != i,\n-                        Ok(ConstVal::Integral(Isize(Is64(i)))) => i as i32 as i64 != i,\n+                        Ok(ConstVal::Integral(Usize(Us64(i)))) => u64::from(i as u32) != i,\n+                        Ok(ConstVal::Integral(Isize(Is64(i)))) => i64::from(i as i32) != i,\n                         _ => false,\n                     };\n                     if bad {"}, {"sha": "ef8bff92c075b3578281957d2fd9c848d6dde097", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bc7893b7025203b2e626bd7143286351e0093eb/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc7893b7025203b2e626bd7143286351e0093eb/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6bc7893b7025203b2e626bd7143286351e0093eb", "patch": "@@ -358,6 +358,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         shadow::SHADOW_UNRELATED,\n         strings::STRING_ADD,\n         strings::STRING_ADD_ASSIGN,\n+        types::CAST_LOSSLESS,\n         types::CAST_POSSIBLE_TRUNCATION,\n         types::CAST_POSSIBLE_WRAP,\n         types::CAST_PRECISION_LOSS,"}, {"sha": "4e3cb6671221ca8ecb36f145f3e0faf0da7870d6", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6bc7893b7025203b2e626bd7143286351e0093eb/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc7893b7025203b2e626bd7143286351e0093eb/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=6bc7893b7025203b2e626bd7143286351e0093eb", "patch": "@@ -430,17 +430,17 @@ fn is_allowed(cx: &LateContext, expr: &Expr) -> bool {\n             FloatTy::F32 => {\n                 let zero = ConstFloat {\n                     ty: FloatTy::F32,\n-                    bits: 0.0_f32.to_bits() as u128,\n+                    bits: u128::from(0.0_f32.to_bits()),\n                 };\n \n                 let infinity = ConstFloat {\n                     ty: FloatTy::F32,\n-                    bits: ::std::f32::INFINITY.to_bits() as u128,\n+                    bits: u128::from(::std::f32::INFINITY.to_bits()),\n                 };\n \n                 let neg_infinity = ConstFloat {\n                     ty: FloatTy::F32,\n-                    bits: ::std::f32::NEG_INFINITY.to_bits() as u128,\n+                    bits: u128::from(::std::f32::NEG_INFINITY.to_bits()),\n                 };\n \n                 val.try_cmp(zero) == Ok(Ordering::Equal) || val.try_cmp(infinity) == Ok(Ordering::Equal) ||\n@@ -449,17 +449,17 @@ fn is_allowed(cx: &LateContext, expr: &Expr) -> bool {\n             FloatTy::F64 => {\n                 let zero = ConstFloat {\n                     ty: FloatTy::F64,\n-                    bits: 0.0_f64.to_bits() as u128,\n+                    bits: u128::from(0.0_f64.to_bits()),\n                 };\n \n                 let infinity = ConstFloat {\n                     ty: FloatTy::F64,\n-                    bits: ::std::f64::INFINITY.to_bits() as u128,\n+                    bits: u128::from(::std::f64::INFINITY.to_bits()),\n                 };\n \n                 let neg_infinity = ConstFloat {\n                     ty: FloatTy::F64,\n-                    bits: ::std::f64::NEG_INFINITY.to_bits() as u128,\n+                    bits: u128::from(::std::f64::NEG_INFINITY.to_bits()),\n                 };\n \n                 val.try_cmp(zero) == Ok(Ordering::Equal) || val.try_cmp(infinity) == Ok(Ordering::Equal) ||"}, {"sha": "9612c670ff03d582e6bc0c67384f6057b4d57255", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 60, "deletions": 8, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6bc7893b7025203b2e626bd7143286351e0093eb/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc7893b7025203b2e626bd7143286351e0093eb/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=6bc7893b7025203b2e626bd7143286351e0093eb", "patch": "@@ -481,6 +481,28 @@ declare_lint! {\n      and `x > i32::MAX`\"\n }\n \n+/// **What it does:** Checks for on casts between numerical types that may\n+/// be replaced by safe conversion functions.\n+///\n+/// **Why is this bad?** Rust's `as` keyword will perform many kinds of\n+/// conversions, including silently lossy conversions. Conversion functions such\n+/// as `i32::from` will only perform lossless conversions. Using the conversion\n+/// functions prevents conversions from turning into silent lossy conversions if\n+/// the types of the input expressions ever change, and make it easier for\n+/// people reading the code to know that the conversion is lossless.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn as_u64(x: u8) -> u64 { x as u64 }\n+/// ```\n+declare_lint! {\n+    pub CAST_LOSSLESS,\n+    Allow,\n+    \"casts using `as` that are known to be lossless, e.g. `x as u64` where `x: u8`\"\n+}\n+\n /// **What it does:** Checks for casts to the same type.\n ///\n /// **Why is this bad?** It's just unnecessary.\n@@ -560,6 +582,17 @@ fn span_precision_loss_lint(cx: &LateContext, expr: &Expr, cast_from: Ty, cast_t\n     );\n }\n \n+fn span_lossless_lint(cx: &LateContext, expr: &Expr, op: &Expr, cast_from: Ty, cast_to: Ty) {\n+    span_lint_and_sugg(cx,\n+                       CAST_LOSSLESS,\n+                       expr.span,\n+                       &format!(\"casting {} to {} may become silently lossy if types change\",\n+                               cast_from,\n+                               cast_to),\n+                       \"try\",\n+                       format!(\"{}::from({})\", cast_to, &snippet(cx, op.span, \"..\")));\n+}\n+\n enum ArchSuffix {\n     _32,\n     _64,\n@@ -643,13 +676,24 @@ fn check_truncation_and_wrapping(cx: &LateContext, expr: &Expr, cast_from: Ty, c\n     }\n }\n \n+fn check_lossless(cx: &LateContext, expr: &Expr, op: &Expr, cast_from: Ty, cast_to: Ty) {\n+    let cast_signed_to_unsigned = cast_from.is_signed() && !cast_to.is_signed();\n+    let from_nbits = int_ty_to_nbits(cast_from, cx.tcx);\n+    let to_nbits = int_ty_to_nbits(cast_to, cx.tcx);\n+    if !is_isize_or_usize(cast_from) && !is_isize_or_usize(cast_to) &&\n+       from_nbits < to_nbits && !cast_signed_to_unsigned {\n+        span_lossless_lint(cx, expr, op, cast_from, cast_to);\n+    }\n+}\n+\n impl LintPass for CastPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(\n             CAST_PRECISION_LOSS,\n             CAST_SIGN_LOSS,\n             CAST_POSSIBLE_TRUNCATION,\n             CAST_POSSIBLE_WRAP,\n+            CAST_LOSSLESS,\n             UNNECESSARY_CAST\n         )\n     }\n@@ -688,6 +732,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n                         if is_isize_or_usize(cast_from) || from_nbits >= to_nbits {\n                             span_precision_loss_lint(cx, expr, cast_from, to_nbits == 64);\n                         }\n+                        if from_nbits < to_nbits {\n+                            span_lossless_lint(cx, expr, ex, cast_from, cast_to);\n+                        }\n                     },\n                     (false, true) => {\n                         span_lint(\n@@ -715,6 +762,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n                             );\n                         }\n                         check_truncation_and_wrapping(cx, expr, cast_from, cast_to);\n+                        check_lossless(cx, expr, ex, cast_from, cast_to);\n                     },\n                     (false, false) => {\n                         if let (&ty::TyFloat(FloatTy::F64), &ty::TyFloat(FloatTy::F32)) =\n@@ -727,6 +775,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n                                 \"casting f64 to f32 may truncate the value\",\n                             );\n                         }\n+                        if let (&ty::TyFloat(FloatTy::F32), &ty::TyFloat(FloatTy::F64)) =\n+                            (&cast_from.sty, &cast_to.sty) {\n+                            span_lossless_lint(cx, expr, ex, cast_from, cast_to);\n+                        }\n                     },\n                 }\n             }\n@@ -1233,20 +1285,20 @@ fn numeric_cast_precast_bounds<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(\n         match pre_cast_ty.sty {\n             ty::TyInt(int_ty) => {\n                 Some(match int_ty {\n-                    IntTy::I8 => (FullInt::S(i8::min_value() as i128), FullInt::S(i8::max_value() as i128)),\n-                    IntTy::I16 => (FullInt::S(i16::min_value() as i128), FullInt::S(i16::max_value() as i128)),\n-                    IntTy::I32 => (FullInt::S(i32::min_value() as i128), FullInt::S(i32::max_value() as i128)),\n-                    IntTy::I64 => (FullInt::S(i64::min_value() as i128), FullInt::S(i64::max_value() as i128)),\n+                    IntTy::I8 => (FullInt::S(i128::from(i8::min_value())), FullInt::S(i128::from(i8::max_value()))),\n+                    IntTy::I16 => (FullInt::S(i128::from(i16::min_value())), FullInt::S(i128::from(i16::max_value()))),\n+                    IntTy::I32 => (FullInt::S(i128::from(i32::min_value())), FullInt::S(i128::from(i32::max_value()))),\n+                    IntTy::I64 => (FullInt::S(i128::from(i64::min_value())), FullInt::S(i128::from(i64::max_value()))),\n                     IntTy::I128 => (FullInt::S(i128::min_value() as i128), FullInt::S(i128::max_value() as i128)),\n                     IntTy::Is => (FullInt::S(isize::min_value() as i128), FullInt::S(isize::max_value() as i128)),\n                 })\n             },\n             ty::TyUint(uint_ty) => {\n                 Some(match uint_ty {\n-                    UintTy::U8 => (FullInt::U(u8::min_value() as u128), FullInt::U(u8::max_value() as u128)),\n-                    UintTy::U16 => (FullInt::U(u16::min_value() as u128), FullInt::U(u16::max_value() as u128)),\n-                    UintTy::U32 => (FullInt::U(u32::min_value() as u128), FullInt::U(u32::max_value() as u128)),\n-                    UintTy::U64 => (FullInt::U(u64::min_value() as u128), FullInt::U(u64::max_value() as u128)),\n+                    UintTy::U8 => (FullInt::U(u128::from(u8::min_value())), FullInt::U(u128::from(u8::max_value()))),\n+                    UintTy::U16 => (FullInt::U(u128::from(u16::min_value())), FullInt::U(u128::from(u16::max_value()))),\n+                    UintTy::U32 => (FullInt::U(u128::from(u32::min_value())), FullInt::U(u128::from(u32::max_value()))),\n+                    UintTy::U64 => (FullInt::U(u128::from(u64::min_value())), FullInt::U(u128::from(u64::max_value()))),\n                     UintTy::U128 => (FullInt::U(u128::min_value() as u128), FullInt::U(u128::max_value() as u128)),\n                     UintTy::Us => (FullInt::U(usize::min_value() as u128), FullInt::U(usize::max_value() as u128)),\n                 })"}, {"sha": "fd4c4e91c5dd9188c7e2a53a6bbac2622bdc4b4e", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6bc7893b7025203b2e626bd7143286351e0093eb/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc7893b7025203b2e626bd7143286351e0093eb/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=6bc7893b7025203b2e626bd7143286351e0093eb", "patch": "@@ -1,7 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#[warn(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap)]\n+#[warn(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap, cast_lossless)]\n #[allow(no_effect, unnecessary_operation)]\n fn main() {\n     // Test cast_precision_loss\n@@ -11,8 +11,6 @@ fn main() {\n     1u32 as f32;\n     1u64 as f32;\n     1u64 as f64;\n-    1i32 as f64; // Should not trigger the lint\n-    1u32 as f64; // Should not trigger the lint\n     // Test cast_possible_truncation\n     1f32 as i32;\n     1f32 as u32;\n@@ -27,6 +25,38 @@ fn main() {\n     1u32 as i32;\n     1u64 as i64;\n     1usize as isize;\n+    // Test cast_lossless with casts to integer types\n+    1i8 as i16;\n+    1i8 as i32;\n+    1i8 as i64;\n+    1u8 as i16;\n+    1u8 as i32;\n+    1u8 as i64;\n+    1u8 as u16;\n+    1u8 as u32;\n+    1u8 as u64;\n+    1i16 as i32;\n+    1i16 as i64;\n+    1u16 as i32;\n+    1u16 as i64;\n+    1u16 as u32;\n+    1u16 as u64;\n+    1i32 as i64;\n+    1u32 as i64;\n+    1u32 as u64;\n+    // Test cast_lossless with casts to floating-point types\n+    1i8 as f32;\n+    1i8 as f64;\n+    1u8 as f32;\n+    1u8 as f64;\n+    1i16 as f32;\n+    1i16 as f64;\n+    1u16 as f32;\n+    1u16 as f64;\n+    1i32 as f64;\n+    1u32 as f64;\n+    // Test cast_lossless with casts from floating-point types\n+    1.0f32 as f64;\n     // Test cast_sign_loss\n     1i32 as u32;\n     1isize as usize;\n@@ -56,7 +86,6 @@ fn main() {\n     false as bool;\n     &1i32 as &i32;\n     // Should not trigger\n-    1i32 as i64;\n     let v = vec!(1);\n     &v as &[i32];\n     1.0 as f64;"}, {"sha": "de37be206d0affe9014337825c87d8bc6baeb3b5", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 255, "deletions": 79, "changes": 334, "blob_url": "https://github.com/rust-lang/rust/blob/6bc7893b7025203b2e626bd7143286351e0093eb/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bc7893b7025203b2e626bd7143286351e0093eb/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=6bc7893b7025203b2e626bd7143286351e0093eb", "patch": "@@ -37,246 +37,422 @@ error: casting u64 to f64 causes a loss of precision (u64 is 64 bits wide, but f\n    |     ^^^^^^^^^^^\n \n error: casting f32 to i32 may truncate the value\n-  --> $DIR/cast.rs:17:5\n+  --> $DIR/cast.rs:15:5\n    |\n-17 |     1f32 as i32;\n+15 |     1f32 as i32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D cast-possible-truncation` implied by `-D warnings`\n \n error: casting f32 to u32 may truncate the value\n-  --> $DIR/cast.rs:18:5\n+  --> $DIR/cast.rs:16:5\n    |\n-18 |     1f32 as u32;\n+16 |     1f32 as u32;\n    |     ^^^^^^^^^^^\n \n error: casting f32 to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:18:5\n+  --> $DIR/cast.rs:16:5\n    |\n-18 |     1f32 as u32;\n+16 |     1f32 as u32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D cast-sign-loss` implied by `-D warnings`\n \n error: casting f64 to f32 may truncate the value\n-  --> $DIR/cast.rs:19:5\n+  --> $DIR/cast.rs:17:5\n    |\n-19 |     1f64 as f32;\n+17 |     1f64 as f32;\n    |     ^^^^^^^^^^^\n \n error: casting i32 to i8 may truncate the value\n-  --> $DIR/cast.rs:20:5\n+  --> $DIR/cast.rs:18:5\n    |\n-20 |     1i32 as i8;\n+18 |     1i32 as i8;\n    |     ^^^^^^^^^^\n \n error: casting i32 to u8 may lose the sign of the value\n-  --> $DIR/cast.rs:21:5\n+  --> $DIR/cast.rs:19:5\n    |\n-21 |     1i32 as u8;\n+19 |     1i32 as u8;\n    |     ^^^^^^^^^^\n \n error: casting i32 to u8 may truncate the value\n-  --> $DIR/cast.rs:21:5\n+  --> $DIR/cast.rs:19:5\n    |\n-21 |     1i32 as u8;\n+19 |     1i32 as u8;\n    |     ^^^^^^^^^^\n \n error: casting f64 to isize may truncate the value\n-  --> $DIR/cast.rs:22:5\n+  --> $DIR/cast.rs:20:5\n    |\n-22 |     1f64 as isize;\n+20 |     1f64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting f64 to usize may truncate the value\n-  --> $DIR/cast.rs:23:5\n+  --> $DIR/cast.rs:21:5\n    |\n-23 |     1f64 as usize;\n+21 |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting f64 to usize may lose the sign of the value\n-  --> $DIR/cast.rs:23:5\n+  --> $DIR/cast.rs:21:5\n    |\n-23 |     1f64 as usize;\n+21 |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u8 to i8 may wrap around the value\n-  --> $DIR/cast.rs:25:5\n+  --> $DIR/cast.rs:23:5\n    |\n-25 |     1u8 as i8;\n+23 |     1u8 as i8;\n    |     ^^^^^^^^^\n    |\n    = note: `-D cast-possible-wrap` implied by `-D warnings`\n \n error: casting u16 to i16 may wrap around the value\n-  --> $DIR/cast.rs:26:5\n+  --> $DIR/cast.rs:24:5\n    |\n-26 |     1u16 as i16;\n+24 |     1u16 as i16;\n    |     ^^^^^^^^^^^\n \n error: casting u32 to i32 may wrap around the value\n-  --> $DIR/cast.rs:27:5\n+  --> $DIR/cast.rs:25:5\n    |\n-27 |     1u32 as i32;\n+25 |     1u32 as i32;\n    |     ^^^^^^^^^^^\n \n error: casting u64 to i64 may wrap around the value\n-  --> $DIR/cast.rs:28:5\n+  --> $DIR/cast.rs:26:5\n    |\n-28 |     1u64 as i64;\n+26 |     1u64 as i64;\n    |     ^^^^^^^^^^^\n \n error: casting usize to isize may wrap around the value\n-  --> $DIR/cast.rs:29:5\n+  --> $DIR/cast.rs:27:5\n    |\n-29 |     1usize as isize;\n+27 |     1usize as isize;\n    |     ^^^^^^^^^^^^^^^\n \n-error: casting i32 to u32 may lose the sign of the value\n+error: casting i8 to i16 may become silently lossy if types change\n+  --> $DIR/cast.rs:29:5\n+   |\n+29 |     1i8 as i16;\n+   |     ^^^^^^^^^^ help: try: `i16::from(1i8)`\n+   |\n+   = note: `-D cast-lossless` implied by `-D warnings`\n+\n+error: casting i8 to i32 may become silently lossy if types change\n+  --> $DIR/cast.rs:30:5\n+   |\n+30 |     1i8 as i32;\n+   |     ^^^^^^^^^^ help: try: `i32::from(1i8)`\n+\n+error: casting i8 to i64 may become silently lossy if types change\n   --> $DIR/cast.rs:31:5\n    |\n-31 |     1i32 as u32;\n+31 |     1i8 as i64;\n+   |     ^^^^^^^^^^ help: try: `i64::from(1i8)`\n+\n+error: casting u8 to i16 may become silently lossy if types change\n+  --> $DIR/cast.rs:32:5\n+   |\n+32 |     1u8 as i16;\n+   |     ^^^^^^^^^^ help: try: `i16::from(1u8)`\n+\n+error: casting u8 to i32 may become silently lossy if types change\n+  --> $DIR/cast.rs:33:5\n+   |\n+33 |     1u8 as i32;\n+   |     ^^^^^^^^^^ help: try: `i32::from(1u8)`\n+\n+error: casting u8 to i64 may become silently lossy if types change\n+  --> $DIR/cast.rs:34:5\n+   |\n+34 |     1u8 as i64;\n+   |     ^^^^^^^^^^ help: try: `i64::from(1u8)`\n+\n+error: casting u8 to u16 may become silently lossy if types change\n+  --> $DIR/cast.rs:35:5\n+   |\n+35 |     1u8 as u16;\n+   |     ^^^^^^^^^^ help: try: `u16::from(1u8)`\n+\n+error: casting u8 to u32 may become silently lossy if types change\n+  --> $DIR/cast.rs:36:5\n+   |\n+36 |     1u8 as u32;\n+   |     ^^^^^^^^^^ help: try: `u32::from(1u8)`\n+\n+error: casting u8 to u64 may become silently lossy if types change\n+  --> $DIR/cast.rs:37:5\n+   |\n+37 |     1u8 as u64;\n+   |     ^^^^^^^^^^ help: try: `u64::from(1u8)`\n+\n+error: casting i16 to i32 may become silently lossy if types change\n+  --> $DIR/cast.rs:38:5\n+   |\n+38 |     1i16 as i32;\n+   |     ^^^^^^^^^^^ help: try: `i32::from(1i16)`\n+\n+error: casting i16 to i64 may become silently lossy if types change\n+  --> $DIR/cast.rs:39:5\n+   |\n+39 |     1i16 as i64;\n+   |     ^^^^^^^^^^^ help: try: `i64::from(1i16)`\n+\n+error: casting u16 to i32 may become silently lossy if types change\n+  --> $DIR/cast.rs:40:5\n+   |\n+40 |     1u16 as i32;\n+   |     ^^^^^^^^^^^ help: try: `i32::from(1u16)`\n+\n+error: casting u16 to i64 may become silently lossy if types change\n+  --> $DIR/cast.rs:41:5\n+   |\n+41 |     1u16 as i64;\n+   |     ^^^^^^^^^^^ help: try: `i64::from(1u16)`\n+\n+error: casting u16 to u32 may become silently lossy if types change\n+  --> $DIR/cast.rs:42:5\n+   |\n+42 |     1u16 as u32;\n+   |     ^^^^^^^^^^^ help: try: `u32::from(1u16)`\n+\n+error: casting u16 to u64 may become silently lossy if types change\n+  --> $DIR/cast.rs:43:5\n+   |\n+43 |     1u16 as u64;\n+   |     ^^^^^^^^^^^ help: try: `u64::from(1u16)`\n+\n+error: casting i32 to i64 may become silently lossy if types change\n+  --> $DIR/cast.rs:44:5\n+   |\n+44 |     1i32 as i64;\n+   |     ^^^^^^^^^^^ help: try: `i64::from(1i32)`\n+\n+error: casting u32 to i64 may become silently lossy if types change\n+  --> $DIR/cast.rs:45:5\n+   |\n+45 |     1u32 as i64;\n+   |     ^^^^^^^^^^^ help: try: `i64::from(1u32)`\n+\n+error: casting u32 to u64 may become silently lossy if types change\n+  --> $DIR/cast.rs:46:5\n+   |\n+46 |     1u32 as u64;\n+   |     ^^^^^^^^^^^ help: try: `u64::from(1u32)`\n+\n+error: casting i8 to f32 may become silently lossy if types change\n+  --> $DIR/cast.rs:48:5\n+   |\n+48 |     1i8 as f32;\n+   |     ^^^^^^^^^^ help: try: `f32::from(1i8)`\n+\n+error: casting i8 to f64 may become silently lossy if types change\n+  --> $DIR/cast.rs:49:5\n+   |\n+49 |     1i8 as f64;\n+   |     ^^^^^^^^^^ help: try: `f64::from(1i8)`\n+\n+error: casting u8 to f32 may become silently lossy if types change\n+  --> $DIR/cast.rs:50:5\n+   |\n+50 |     1u8 as f32;\n+   |     ^^^^^^^^^^ help: try: `f32::from(1u8)`\n+\n+error: casting u8 to f64 may become silently lossy if types change\n+  --> $DIR/cast.rs:51:5\n+   |\n+51 |     1u8 as f64;\n+   |     ^^^^^^^^^^ help: try: `f64::from(1u8)`\n+\n+error: casting i16 to f32 may become silently lossy if types change\n+  --> $DIR/cast.rs:52:5\n+   |\n+52 |     1i16 as f32;\n+   |     ^^^^^^^^^^^ help: try: `f32::from(1i16)`\n+\n+error: casting i16 to f64 may become silently lossy if types change\n+  --> $DIR/cast.rs:53:5\n+   |\n+53 |     1i16 as f64;\n+   |     ^^^^^^^^^^^ help: try: `f64::from(1i16)`\n+\n+error: casting u16 to f32 may become silently lossy if types change\n+  --> $DIR/cast.rs:54:5\n+   |\n+54 |     1u16 as f32;\n+   |     ^^^^^^^^^^^ help: try: `f32::from(1u16)`\n+\n+error: casting u16 to f64 may become silently lossy if types change\n+  --> $DIR/cast.rs:55:5\n+   |\n+55 |     1u16 as f64;\n+   |     ^^^^^^^^^^^ help: try: `f64::from(1u16)`\n+\n+error: casting i32 to f64 may become silently lossy if types change\n+  --> $DIR/cast.rs:56:5\n+   |\n+56 |     1i32 as f64;\n+   |     ^^^^^^^^^^^ help: try: `f64::from(1i32)`\n+\n+error: casting u32 to f64 may become silently lossy if types change\n+  --> $DIR/cast.rs:57:5\n+   |\n+57 |     1u32 as f64;\n+   |     ^^^^^^^^^^^ help: try: `f64::from(1u32)`\n+\n+error: casting f32 to f64 may become silently lossy if types change\n+  --> $DIR/cast.rs:59:5\n+   |\n+59 |     1.0f32 as f64;\n+   |     ^^^^^^^^^^^^^ help: try: `f64::from(1.0f32)`\n+\n+error: casting i32 to u32 may lose the sign of the value\n+  --> $DIR/cast.rs:61:5\n+   |\n+61 |     1i32 as u32;\n    |     ^^^^^^^^^^^\n \n error: casting isize to usize may lose the sign of the value\n-  --> $DIR/cast.rs:32:5\n+  --> $DIR/cast.rs:62:5\n    |\n-32 |     1isize as usize;\n+62 |     1isize as usize;\n    |     ^^^^^^^^^^^^^^^\n \n error: casting isize to i8 may truncate the value\n-  --> $DIR/cast.rs:35:5\n+  --> $DIR/cast.rs:65:5\n    |\n-35 |     1isize as i8;\n+65 |     1isize as i8;\n    |     ^^^^^^^^^^^^\n \n error: casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:36:5\n+  --> $DIR/cast.rs:66:5\n    |\n-36 |     1isize as f64;\n+66 |     1isize as f64;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:37:5\n+  --> $DIR/cast.rs:67:5\n    |\n-37 |     1usize as f64;\n+67 |     1usize as f64;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:38:5\n+  --> $DIR/cast.rs:68:5\n    |\n-38 |     1isize as f32;\n+68 |     1isize as f32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:39:5\n+  --> $DIR/cast.rs:69:5\n    |\n-39 |     1usize as f32;\n+69 |     1usize as f32;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:40:5\n+  --> $DIR/cast.rs:70:5\n    |\n-40 |     1isize as i32;\n+70 |     1isize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:41:5\n+  --> $DIR/cast.rs:71:5\n    |\n-41 |     1isize as u32;\n+71 |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:41:5\n+  --> $DIR/cast.rs:71:5\n    |\n-41 |     1isize as u32;\n+71 |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:42:5\n+  --> $DIR/cast.rs:72:5\n    |\n-42 |     1usize as u32;\n+72 |     1usize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:43:5\n+  --> $DIR/cast.rs:73:5\n    |\n-43 |     1usize as i32;\n+73 |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:43:5\n+  --> $DIR/cast.rs:73:5\n    |\n-43 |     1usize as i32;\n+73 |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:45:5\n+  --> $DIR/cast.rs:75:5\n    |\n-45 |     1i64 as isize;\n+75 |     1i64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i64 to usize may lose the sign of the value\n-  --> $DIR/cast.rs:46:5\n+  --> $DIR/cast.rs:76:5\n    |\n-46 |     1i64 as usize;\n+76 |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:46:5\n+  --> $DIR/cast.rs:76:5\n    |\n-46 |     1i64 as usize;\n+76 |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:47:5\n+  --> $DIR/cast.rs:77:5\n    |\n-47 |     1u64 as isize;\n+77 |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:47:5\n+  --> $DIR/cast.rs:77:5\n    |\n-47 |     1u64 as isize;\n+77 |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:48:5\n+  --> $DIR/cast.rs:78:5\n    |\n-48 |     1u64 as usize;\n+78 |     1u64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:49:5\n+  --> $DIR/cast.rs:79:5\n    |\n-49 |     1u32 as isize;\n+79 |     1u32 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i32 to usize may lose the sign of the value\n-  --> $DIR/cast.rs:52:5\n+  --> $DIR/cast.rs:82:5\n    |\n-52 |     1i32 as usize;\n+82 |     1i32 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting to the same type is unnecessary (`i32` -> `i32`)\n-  --> $DIR/cast.rs:54:5\n+  --> $DIR/cast.rs:84:5\n    |\n-54 |     1i32 as i32;\n+84 |     1i32 as i32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D unnecessary-cast` implied by `-D warnings`\n \n error: casting to the same type is unnecessary (`f32` -> `f32`)\n-  --> $DIR/cast.rs:55:5\n+  --> $DIR/cast.rs:85:5\n    |\n-55 |     1f32 as f32;\n+85 |     1f32 as f32;\n    |     ^^^^^^^^^^^\n \n error: casting to the same type is unnecessary (`bool` -> `bool`)\n-  --> $DIR/cast.rs:56:5\n+  --> $DIR/cast.rs:86:5\n    |\n-56 |     false as bool;\n+86 |     false as bool;\n    |     ^^^^^^^^^^^^^\n \n-error: aborting due to 45 previous errors\n+error: aborting due to 74 previous errors\n "}]}