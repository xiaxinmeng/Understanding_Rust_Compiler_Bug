{"sha": "4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjODQ3YzBkYmQ5ZGI5YWUzZmI4Y2E0Njk4OTM4YjJkNmM3MTNlODM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-23T18:45:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-23T18:45:49Z"}, "message": "Rollup merge of #88230 - steffahn:a_an, r=oli-obk\n\nFix typos \u201ca\u201d\u2192\u201can\u201d\n\nFix typos in comments; found using a regex to find some easy instance of incorrect usage of a vs. an.\n\nWhile automation was used to find these, every change was checked manually.\n\nChanges in submodules get separate PRs:\n* https://github.com/rust-lang/stdarch/pull/1201\n* https://github.com/rust-lang/cargo/pull/9821\n* https://github.com/rust-lang/miri/pull/1874\n* https://github.com/rust-lang/rls/pull/1746\n* https://github.com/rust-analyzer/rust-analyzer/pull/9984\n  _folks @ rust-analyzer are fast at merging\u2026_\n  * https://github.com/rust-analyzer/rust-analyzer/pull/9985\n  * https://github.com/rust-analyzer/rust-analyzer/pull/9987\n  * https://github.com/rust-analyzer/rust-analyzer/pull/9989\n\n_For `clippy`, I don\u2019t know if the changes should better better be moved to a PR to the original repo._\n\n<hr>\n\nThis has some overlap with #88226, but neither is a strict superset of the other.\n\nIf you want multiple commits, I can split it up; in that case, make sure to suggest a criterion for splitting.", "tree": {"sha": "991d62cc91de8251451ac8823fc9c236e7cdb505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/991d62cc91de8251451ac8823fc9c236e7cdb505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83", "html_url": "https://github.com/rust-lang/rust/commit/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5868e2853704b00d6b0256c1503a91a6417b9db9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5868e2853704b00d6b0256c1503a91a6417b9db9", "html_url": "https://github.com/rust-lang/rust/commit/5868e2853704b00d6b0256c1503a91a6417b9db9"}, {"sha": "8b6529e0486dbd0c49217d5f39018d520d64aff1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b6529e0486dbd0c49217d5f39018d520d64aff1", "html_url": "https://github.com/rust-lang/rust/commit/8b6529e0486dbd0c49217d5f39018d520d64aff1"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "4dd0ffe77ea49fbff542b3c20a48ad053aa94650", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83", "patch": "@@ -164,7 +164,7 @@ fn check_unop(cx: &EarlyContext<'_>, expr: &Expr) {\n         if !differing_macro_contexts(lhs.span, rhs.span) && !lhs.span.from_expansion();\n         // span between BinOp LHS and RHS\n         let binop_span = lhs.span.between(rhs.span);\n-        // if RHS is a UnOp\n+        // if RHS is an UnOp\n         if let ExprKind::Unary(op, ref un_rhs) = rhs.kind;\n         // from UnOp operator to UnOp operand\n         let unop_operand_span = rhs.span.until(un_rhs.span);"}, {"sha": "2296842e86f556ae6dc64572f0e440146ba6d7f7", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83", "patch": "@@ -268,7 +268,7 @@ impl std::ops::Sub<&MinifyingSugg<'static>> for MinifyingSugg<'static> {\n     }\n }\n \n-/// a wrapper around `MinifyingSugg`, which carries a operator like currying\n+/// a wrapper around `MinifyingSugg`, which carries an operator like currying\n /// so that the suggested code become more efficient (e.g. `foo + -bar` `foo - bar`).\n struct Offset {\n     value: MinifyingSugg<'static>,"}, {"sha": "3f9110295fc6bcb4abe594e0fd6ec6dea2f17ee1", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83", "patch": "@@ -122,7 +122,7 @@ fn is_unfrozen<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     // Ignore types whose layout is unknown since `is_freeze` reports every generic types as `!Freeze`,\n     // making it indistinguishable from `UnsafeCell`. i.e. it isn't a tool to prove a type is\n     // 'unfrozen'. However, this code causes a false negative in which\n-    // a type contains a layout-unknown type, but also a unsafe cell like `const CELL: Cell<T>`.\n+    // a type contains a layout-unknown type, but also an unsafe cell like `const CELL: Cell<T>`.\n     // Yet, it's better than `ty.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_PROJECTION)`\n     // since it works when a pointer indirection involves (`Cell<*const T>`).\n     // Making up a `ParamEnv` where every generic params and assoc types are `Freeze`is another option;\n@@ -266,7 +266,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                 // in other words, lint consts whose value *could* be unfrozen, not definitely is.\n                 // This feels inconsistent with how the lint treats generic types,\n                 // which avoids linting types which potentially become unfrozen.\n-                // One could check whether a unfrozen type have a *frozen variant*\n+                // One could check whether an unfrozen type have a *frozen variant*\n                 // (like `body_id_opt.map_or_else(|| !has_frozen_variant(...), ...)`),\n                 // and do the same as the case of generic types at impl items.\n                 // Note that it isn't sufficient to check if it has an enum\n@@ -293,7 +293,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                 }) => {\n                     if_chain! {\n                         // Lint a trait impl item only when the definition is a generic type,\n-                        // assuming a assoc const is not meant to be a interior mutable type.\n+                        // assuming an assoc const is not meant to be an interior mutable type.\n                         if let Some(of_trait_def_id) = of_trait_ref.trait_def_id();\n                         if let Some(of_assoc_item) = specialization_graph::Node::Trait(of_trait_def_id)\n                             .item(cx.tcx, impl_item.ident, AssocKind::Const, of_trait_def_id);"}, {"sha": "3258c9fb3fed0ef244813e52bf47f6d3a65f9722", "filename": "clippy_lints/src/ptr_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_lints%2Fsrc%2Fptr_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_lints%2Fsrc%2Fptr_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_eq.rs?ref=4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83", "patch": "@@ -74,7 +74,7 @@ impl LateLintPass<'_> for PtrEq {\n     }\n }\n \n-// If the given expression is a cast to an usize, return the lhs of the cast\n+// If the given expression is a cast to a usize, return the lhs of the cast\n // E.g., `foo as *const _ as usize` returns `foo as *const _`.\n fn expr_as_cast_to_usize<'tcx>(cx: &LateContext<'tcx>, cast_expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n     if cx.typeck_results().expr_ty(cast_expr) == cx.tcx.types.usize {"}, {"sha": "4fa361fedafac434dbd26510c421506bed51e0b8", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83", "patch": "@@ -51,7 +51,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Known problems\n     /// Will add unnecessary pair of parentheses when the\n-    /// expression is not wrapped in a pair but starts with a opening parenthesis\n+    /// expression is not wrapped in a pair but starts with an opening parenthesis\n     /// and ends with a closing one.\n     /// I.e., `let _ = (f()+1)..(f()+1)` results in `let _ = ((f()+1)..=f())`.\n     ///"}, {"sha": "b9e317a3cfd03af73f46ea09bc2f6997936fb107", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83", "patch": "@@ -74,7 +74,7 @@ declare_clippy_lint! {\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for bindings that shadow other bindings already in\n-    /// scope, either without a initialization or with one that does not even use\n+    /// scope, either without an initialization or with one that does not even use\n     /// the original value.\n     ///\n     /// ### Why is this bad?"}, {"sha": "c192f9094a8a97bdfd840c3edfd27e09948d61e4", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83", "patch": "@@ -198,7 +198,7 @@ define_Conf! {\n     (enum_variant_name_threshold: u64 = 3),\n     /// Lint: LARGE_ENUM_VARIANT.\n     ///\n-    /// The maximum size of a enum's variant to avoid box suggestion\n+    /// The maximum size of an enum's variant to avoid box suggestion\n     (enum_variant_size_threshold: u64 = 200),\n     /// Lint: VERBOSE_BIT_MASK.\n     ///"}, {"sha": "9ba1381da659397d6d500ba7cc1e9fbe6de28198", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83", "patch": "@@ -329,7 +329,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n         vec.iter().map(|elem| self.expr(elem)).collect::<Option<_>>()\n     }\n \n-    /// Lookup a possibly constant expression from a `ExprKind::Path`.\n+    /// Lookup a possibly constant expression from an `ExprKind::Path`.\n     fn fetch_path(&mut self, qpath: &QPath<'_>, id: HirId, ty: Ty<'tcx>) -> Option<Constant> {\n         let res = self.typeck_results.qpath_res(qpath, id);\n         match res {"}, {"sha": "32a73984674adac82d7a0c2da4b4797d2e734530", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83", "patch": "@@ -587,7 +587,7 @@ pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Optio\n /// For example, if `e` represents the `v[0].a.b[x]`\n /// this method will return a tuple, composed of a `Vec`\n /// containing the `Expr`s for `v[0], v[0].a, v[0].a.b, v[0].a.b[x]`\n-/// and a `Expr` for root of them, `v`\n+/// and an `Expr` for root of them, `v`\n fn projection_stack<'a, 'hir>(mut e: &'a Expr<'hir>) -> (Vec<&'a Expr<'hir>>, &'a Expr<'hir>) {\n     let mut result = vec![];\n     let root = loop {"}, {"sha": "65d93e8f86e43f1c7953d83f45721bb9add27c43", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83", "patch": "@@ -434,7 +434,7 @@ pub fn make_assoc(op: AssocOp, lhs: &Sugg<'_>, rhs: &Sugg<'_>) -> Sugg<'static>\n         matches!(op, AssocOp::ShiftLeft | AssocOp::ShiftRight)\n     }\n \n-    /// Returns `true` if the operator is a arithmetic operator\n+    /// Returns `true` if the operator is an arithmetic operator\n     /// (i.e., `+`, `-`, `*`, `/`, `%`).\n     fn is_arith(op: AssocOp) -> bool {\n         matches!("}, {"sha": "256a336db821d8711c6c3f958e2b814784b2f701", "filename": "tests/ui/declare_interior_mutable_const/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.rs?ref=4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83", "patch": "@@ -117,7 +117,7 @@ impl SelfType for AtomicUsize {\n     const WRAPPED_SELF: Option<Self> = Some(AtomicUsize::new(21)); //~ ERROR interior mutable\n }\n \n-// Even though a constant contains a generic type, if it also have a interior mutable type,\n+// Even though a constant contains a generic type, if it also have an interior mutable type,\n // it should be linted at the definition site.\n trait BothOfCellAndGeneric<T> {\n     // this is a false negative in the current implementation."}]}