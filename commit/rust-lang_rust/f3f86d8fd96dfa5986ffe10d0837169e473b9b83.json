{"sha": "f3f86d8fd96dfa5986ffe10d0837169e473b9b83", "node_id": "C_kwDOAAsO6NoAKGYzZjg2ZDhmZDk2ZGZhNTk4NmZmZTEwZDA4MzcxNjllNDczYjliODM", "commit": {"author": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-07-16T21:07:06Z"}, "committer": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-08-08T19:04:44Z"}, "message": "Move iter_once and iter_empty to methods as a late pass\n\nThis enables more thorough checking of types to avoid triggering on\ncustom Some and None enum variants", "tree": {"sha": "359230f1c9704a2ff36b6bfc58fe719036674637", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/359230f1c9704a2ff36b6bfc58fe719036674637"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3f86d8fd96dfa5986ffe10d0837169e473b9b83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3f86d8fd96dfa5986ffe10d0837169e473b9b83", "html_url": "https://github.com/rust-lang/rust/commit/f3f86d8fd96dfa5986ffe10d0837169e473b9b83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/comments", "author": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "332e03146e456ccedc1ab960fcdd739dd45080b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/332e03146e456ccedc1ab960fcdd739dd45080b5", "html_url": "https://github.com/rust-lang/rust/commit/332e03146e456ccedc1ab960fcdd739dd45080b5"}], "stats": {"total": 415, "additions": 245, "deletions": 170}, "files": [{"sha": "098960011123364c93ac41eef1b86b284eed17f7", "filename": "clippy_lints/src/iter_once_empty.rs", "status": "removed", "additions": 0, "deletions": 164, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/332e03146e456ccedc1ab960fcdd739dd45080b5/clippy_lints%2Fsrc%2Fiter_once_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332e03146e456ccedc1ab960fcdd739dd45080b5/clippy_lints%2Fsrc%2Fiter_once_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fiter_once_empty.rs?ref=332e03146e456ccedc1ab960fcdd739dd45080b5", "patch": "@@ -1,164 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet;\n-use rustc_ast::ast::{Expr, ExprKind};\n-use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    ///\n-    /// Checks for usage of:\n-    ///\n-    /// - `[foo].iter()`\n-    /// - `[foo].iter_mut()`\n-    /// - `[foo].into_iter()`\n-    /// - `Some(foo).iter()`\n-    /// - `Some(foo).iter_mut()`\n-    /// - `Some(foo).into_iter()`\n-    ///\n-    /// ### Why is this bad?\n-    ///\n-    /// It is simpler to use the once function from the standard library:\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust\n-    /// let a = [123].iter();\n-    /// let b = Some(123).into_iter();\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// use std::iter;\n-    /// let a = iter::once(&123);\n-    /// let b = iter::once(123);\n-    /// ```\n-    ///\n-    /// ### Known problems\n-    ///\n-    /// The type of the resulting iterator might become incompatible with its usage\n-    #[clippy::version = \"1.64.0\"]\n-    pub ITER_ONCE,\n-    nursery,\n-    \"Iterator for array of length 1\"\n-}\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    ///\n-    /// Checks for usage of:\n-    ///\n-    /// - `[].iter()`\n-    /// - `[].iter_mut()`\n-    /// - `[].into_iter()`\n-    /// - `None.iter()`\n-    /// - `None.iter_mut()`\n-    /// - `None.into_iter()`\n-    ///\n-    /// ### Why is this bad?\n-    ///\n-    /// It is simpler to use the empty function from the standard library:\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust\n-    /// use std::{slice, option};\n-    /// let a: slice::Iter<i32> = [].iter();\n-    /// let f: option::IntoIter<i32> = None.into_iter();\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// use std::iter;\n-    /// let a: iter::Empty<i32> = iter::empty();\n-    /// let b: iter::Empty<i32> = iter::empty();\n-    /// ```\n-    ///\n-    /// ### Known problems\n-    ///\n-    /// The type of the resulting iterator might become incompatible with its usage\n-    #[clippy::version = \"1.64.0\"]\n-    pub ITER_EMPTY,\n-    nursery,\n-    \"Iterator for empty array\"\n-}\n-\n-declare_lint_pass!(IterOnceEmpty => [ITER_ONCE, ITER_EMPTY]);\n-\n-impl EarlyLintPass for IterOnceEmpty {\n-    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if expr.span.from_expansion() {\n-            // Don't lint match expressions present in\n-            // macro_rules! block\n-            return;\n-        }\n-\n-        let (method_name, args) = if let ExprKind::MethodCall(seg, args, _) = &expr.kind {\n-            (seg.ident.as_str(), args)\n-        } else {\n-            return;\n-        };\n-        let arg = if args.len() == 1 {\n-            &args[0]\n-        } else {\n-            return;\n-        };\n-\n-        let item = match &arg.kind {\n-            ExprKind::Array(v) if v.len() <= 1 => v.first(),\n-            ExprKind::Path(None, p) => {\n-                if p.segments.len() == 1 && p.segments[0].ident.name == rustc_span::sym::None {\n-                    None\n-                } else {\n-                    return;\n-                }\n-            },\n-            ExprKind::Call(f, some_args) if some_args.len() == 1 => {\n-                if let ExprKind::Path(None, p) = &f.kind {\n-                    if p.segments.len() == 1 && p.segments[0].ident.name == rustc_span::sym::Some {\n-                        Some(&some_args[0])\n-                    } else {\n-                        return;\n-                    }\n-                } else {\n-                    return;\n-                }\n-            },\n-            _ => return,\n-        };\n-\n-        if let Some(i) = item {\n-            let (sugg, msg) = match method_name {\n-                \"iter\" => (\n-                    format!(\"std::iter::once(&{})\", snippet(cx, i.span, \"...\")),\n-                    \"this `iter` call can be replaced with std::iter::once\",\n-                ),\n-                \"iter_mut\" => (\n-                    format!(\"std::iter::once(&mut {})\", snippet(cx, i.span, \"...\")),\n-                    \"this `iter_mut` call can be replaced with std::iter::once\",\n-                ),\n-                \"into_iter\" => (\n-                    format!(\"std::iter::once({})\", snippet(cx, i.span, \"...\")),\n-                    \"this `into_iter` call can be replaced with std::iter::once\",\n-                ),\n-                _ => return,\n-            };\n-            span_lint_and_sugg(cx, ITER_ONCE, expr.span, msg, \"try\", sugg, Applicability::Unspecified);\n-        } else {\n-            let msg = match method_name {\n-                \"iter\" => \"this `iter call` can be replaced with std::iter::empty\",\n-                \"iter_mut\" => \"this `iter_mut` call can be replaced with std::iter::empty\",\n-                \"into_iter\" => \"this `into_iter` call can be replaced with std::iter::empty\",\n-                _ => return,\n-            };\n-            span_lint_and_sugg(\n-                cx,\n-                ITER_EMPTY,\n-                expr.span,\n-                msg,\n-                \"try\",\n-                \"std::iter::empty()\".to_string(),\n-                Applicability::Unspecified,\n-            );\n-        }\n-    }\n-}"}, {"sha": "e49321d83fa570cca76e06197bdd2eadf4e84d76", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=f3f86d8fd96dfa5986ffe10d0837169e473b9b83", "patch": "@@ -200,8 +200,6 @@ store.register_lints(&[\n     invalid_utf8_in_unchecked::INVALID_UTF8_IN_UNCHECKED,\n     items_after_statements::ITEMS_AFTER_STATEMENTS,\n     iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR,\n-    iter_once_empty::ITER_EMPTY,\n-    iter_once_empty::ITER_ONCE,\n     large_const_arrays::LARGE_CONST_ARRAYS,\n     large_enum_variant::LARGE_ENUM_VARIANT,\n     large_include_file::LARGE_INCLUDE_FILE,\n@@ -314,9 +312,11 @@ store.register_lints(&[\n     methods::ITERATOR_STEP_BY_ZERO,\n     methods::ITER_CLONED_COLLECT,\n     methods::ITER_COUNT,\n+    methods::ITER_EMPTY,\n     methods::ITER_NEXT_SLICE,\n     methods::ITER_NTH,\n     methods::ITER_NTH_ZERO,\n+    methods::ITER_ONCE,\n     methods::ITER_OVEREAGER_CLONED,\n     methods::ITER_SKIP_NEXT,\n     methods::ITER_WITH_DRAIN,"}, {"sha": "4250ee055e6c911fab465c440a5f44a67c113aec", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=f3f86d8fd96dfa5986ffe10d0837169e473b9b83", "patch": "@@ -41,8 +41,6 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS),\n     LintId::of(items_after_statements::ITEMS_AFTER_STATEMENTS),\n     LintId::of(iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR),\n-    LintId::of(iter_once_empty::ITER_EMPTY),\n-    LintId::of(iter_once_empty::ITER_ONCE),\n     LintId::of(large_stack_arrays::LARGE_STACK_ARRAYS),\n     LintId::of(let_underscore::LET_UNDERSCORE_DROP),\n     LintId::of(literal_representation::LARGE_DIGIT_GROUPS),"}, {"sha": "88c1a727f8dc387369519ca919fe76a062c20c81", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f3f86d8fd96dfa5986ffe10d0837169e473b9b83", "patch": "@@ -258,7 +258,6 @@ mod invalid_upcast_comparisons;\n mod invalid_utf8_in_unchecked;\n mod items_after_statements;\n mod iter_not_returning_iterator;\n-mod iter_once_empty;\n mod large_const_arrays;\n mod large_enum_variant;\n mod large_include_file;\n@@ -932,7 +931,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n     store.register_late_pass(|| Box::new(std_instead_of_core::StdReexports::default()));\n     store.register_late_pass(|| Box::new(manual_instant_elapsed::ManualInstantElapsed));\n-    store.register_early_pass(|| Box::new(iter_once_empty::IterOnceEmpty));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "d45dfc67880eceb05b649798610b4c43f592526d", "filename": "clippy_lints/src/methods/iter_once_empty.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/clippy_lints%2Fsrc%2Fmethods%2Fiter_once_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/clippy_lints%2Fsrc%2Fmethods%2Fiter_once_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_once_empty.rs?ref=f3f86d8fd96dfa5986ffe10d0837169e473b9b83", "patch": "@@ -0,0 +1,70 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_lang_ctor;\n+use clippy_utils::source::snippet;\n+\n+use rustc_errors::Applicability;\n+use rustc_hir::LangItem::{OptionNone, OptionSome};\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::LateContext;\n+\n+use super::{ITER_EMPTY, ITER_ONCE};\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, method_name: &str, recv: &Expr<'_>) {\n+    let item = match &recv.kind {\n+        ExprKind::Array(v) if v.len() <= 1 => v.first(),\n+        ExprKind::Path(p) => {\n+            if is_lang_ctor(cx, p, OptionNone) {\n+                None\n+            } else {\n+                return;\n+            }\n+        },\n+        ExprKind::Call(f, some_args) if some_args.len() == 1 => {\n+            if let ExprKind::Path(p) = &f.kind {\n+                if is_lang_ctor(cx, p, OptionSome) {\n+                    Some(&some_args[0])\n+                } else {\n+                    return;\n+                }\n+            } else {\n+                return;\n+            }\n+        },\n+        _ => return,\n+    };\n+\n+    if let Some(i) = item {\n+        let (sugg, msg) = match method_name {\n+            \"iter\" => (\n+                format!(\"std::iter::once(&{})\", snippet(cx, i.span, \"...\")),\n+                \"this `iter` call can be replaced with std::iter::once\",\n+            ),\n+            \"iter_mut\" => (\n+                format!(\"std::iter::once(&mut {})\", snippet(cx, i.span, \"...\")),\n+                \"this `iter_mut` call can be replaced with std::iter::once\",\n+            ),\n+            \"into_iter\" => (\n+                format!(\"std::iter::once({})\", snippet(cx, i.span, \"...\")),\n+                \"this `into_iter` call can be replaced with std::iter::once\",\n+            ),\n+            _ => return,\n+        };\n+        span_lint_and_sugg(cx, ITER_ONCE, expr.span, msg, \"try\", sugg, Applicability::Unspecified);\n+    } else {\n+        let msg = match method_name {\n+            \"iter\" => \"this `iter call` can be replaced with std::iter::empty\",\n+            \"iter_mut\" => \"this `iter_mut` call can be replaced with std::iter::empty\",\n+            \"into_iter\" => \"this `into_iter` call can be replaced with std::iter::empty\",\n+            _ => return,\n+        };\n+        span_lint_and_sugg(\n+            cx,\n+            ITER_EMPTY,\n+            expr.span,\n+            msg,\n+            \"try\",\n+            \"std::iter::empty()\".to_string(),\n+            Applicability::Unspecified,\n+        );\n+    }\n+}"}, {"sha": "e449ae0e4247a3681842ab5c2bd24a91f9a9adde", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f3f86d8fd96dfa5986ffe10d0837169e473b9b83", "patch": "@@ -33,6 +33,7 @@ mod iter_count;\n mod iter_next_slice;\n mod iter_nth;\n mod iter_nth_zero;\n+mod iter_once_empty;\n mod iter_overeager_cloned;\n mod iter_skip_next;\n mod iter_with_drain;\n@@ -2304,6 +2305,83 @@ declare_clippy_lint! {\n     more clearly with `if .. else ..`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Checks for usage of:\n+    ///\n+    /// - `[foo].iter()`\n+    /// - `[foo].iter_mut()`\n+    /// - `[foo].into_iter()`\n+    /// - `Some(foo).iter()`\n+    /// - `Some(foo).iter_mut()`\n+    /// - `Some(foo).into_iter()`\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// It is simpler to use the once function from the standard library:\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// let a = [123].iter();\n+    /// let b = Some(123).into_iter();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::iter;\n+    /// let a = iter::once(&123);\n+    /// let b = iter::once(123);\n+    /// ```\n+    ///\n+    /// ### Known problems\n+    ///\n+    /// The type of the resulting iterator might become incompatible with its usage\n+    #[clippy::version = \"1.64.0\"]\n+    pub ITER_ONCE,\n+    nursery,\n+    \"Iterator for array of length 1\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Checks for usage of:\n+    ///\n+    /// - `[].iter()`\n+    /// - `[].iter_mut()`\n+    /// - `[].into_iter()`\n+    /// - `None.iter()`\n+    /// - `None.iter_mut()`\n+    /// - `None.into_iter()`\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// It is simpler to use the empty function from the standard library:\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// use std::{slice, option};\n+    /// let a: slice::Iter<i32> = [].iter();\n+    /// let f: option::IntoIter<i32> = None.into_iter();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::iter;\n+    /// let a: iter::Empty<i32> = iter::empty();\n+    /// let b: iter::Empty<i32> = iter::empty();\n+    /// ```\n+    ///\n+    /// ### Known problems\n+    ///\n+    /// The type of the resulting iterator might become incompatible with its usage\n+    #[clippy::version = \"1.64.0\"]\n+    pub ITER_EMPTY,\n+    nursery,\n+    \"Iterator for empty array\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -2406,6 +2484,8 @@ impl_lint_pass!(Methods => [\n     NEEDLESS_OPTION_TAKE,\n     NO_EFFECT_REPLACE,\n     OBFUSCATED_IF_ELSE,\n+    ITER_ONCE,\n+    ITER_EMPTY\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -2708,6 +2788,7 @@ impl Methods {\n                 (\"is_digit\", [radix]) => is_digit_ascii_radix::check(cx, expr, recv, radix, self.msrv),\n                 (\"is_none\", []) => check_is_some_is_none(cx, expr, recv, false),\n                 (\"is_some\", []) => check_is_some_is_none(cx, expr, recv, true),\n+                (\"iter\" | \"iter_mut\" | \"into_iter\", []) => iter_once_empty::check(cx, expr, name, recv),\n                 (\"join\", [join_arg]) => {\n                     if let Some((\"collect\", _, span)) = method_call(recv) {\n                         unnecessary_join::check(cx, expr, recv, join_arg, span);"}, {"sha": "690da5a87615165d5ff84e31256a2f89e9a3d7cf", "filename": "tests/ui/iter_empty.fixed", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/tests%2Fui%2Fiter_empty.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/tests%2Fui%2Fiter_empty.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_empty.fixed?ref=f3f86d8fd96dfa5986ffe10d0837169e473b9b83", "patch": "@@ -26,7 +26,30 @@ macro_rules! in_macros {\n     };\n }\n \n+// Don't trigger on a `None` that isn't std's option\n+mod custom_option {\n+    #[allow(unused)]\n+    enum CustomOption {\n+        Some(i32),\n+        None,\n+    }\n+\n+    impl CustomOption {\n+        fn iter(&self) {}\n+        fn iter_mut(&mut self) {}\n+        fn into_iter(self) {}\n+    }\n+    use CustomOption::*;\n+\n+    pub fn custom_option() {\n+        None.iter();\n+        None.iter_mut();\n+        None.into_iter();\n+    }\n+}\n+\n fn main() {\n     array();\n+    custom_option::custom_option();\n     in_macros!();\n }"}, {"sha": "f8b56898f2d52d5879758d67357bc091f21419fc", "filename": "tests/ui/iter_empty.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/tests%2Fui%2Fiter_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/tests%2Fui%2Fiter_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_empty.rs?ref=f3f86d8fd96dfa5986ffe10d0837169e473b9b83", "patch": "@@ -26,7 +26,30 @@ macro_rules! in_macros {\n     };\n }\n \n+// Don't trigger on a `None` that isn't std's option\n+mod custom_option {\n+    #[allow(unused)]\n+    enum CustomOption {\n+        Some(i32),\n+        None,\n+    }\n+\n+    impl CustomOption {\n+        fn iter(&self) {}\n+        fn iter_mut(&mut self) {}\n+        fn into_iter(self) {}\n+    }\n+    use CustomOption::*;\n+\n+    pub fn custom_option() {\n+        None.iter();\n+        None.iter_mut();\n+        None.into_iter();\n+    }\n+}\n+\n fn main() {\n     array();\n+    custom_option::custom_option();\n     in_macros!();\n }"}, {"sha": "0c82ab20be1c67e512b77a64a66f41485eff7d45", "filename": "tests/ui/iter_once.fixed", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/tests%2Fui%2Fiter_once.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/tests%2Fui%2Fiter_once.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_once.fixed?ref=f3f86d8fd96dfa5986ffe10d0837169e473b9b83", "patch": "@@ -26,7 +26,30 @@ macro_rules! in_macros {\n     };\n }\n \n+// Don't trigger on a `Some` that isn't std's option\n+mod custom_option {\n+    #[allow(unused)]\n+    enum CustomOption {\n+        Some(i32),\n+        None,\n+    }\n+\n+    impl CustomOption {\n+        fn iter(&self) {}\n+        fn iter_mut(&mut self) {}\n+        fn into_iter(self) {}\n+    }\n+    use CustomOption::*;\n+\n+    pub fn custom_option() {\n+        Some(3).iter();\n+        Some(3).iter_mut();\n+        Some(3).into_iter();\n+    }\n+}\n+\n fn main() {\n     array();\n+    custom_option::custom_option();\n     in_macros!();\n }"}, {"sha": "d561bf27c1df67c66c8914dc9b42f6c5d39127fc", "filename": "tests/ui/iter_once.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/tests%2Fui%2Fiter_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3f86d8fd96dfa5986ffe10d0837169e473b9b83/tests%2Fui%2Fiter_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_once.rs?ref=f3f86d8fd96dfa5986ffe10d0837169e473b9b83", "patch": "@@ -26,7 +26,30 @@ macro_rules! in_macros {\n     };\n }\n \n+// Don't trigger on a `Some` that isn't std's option\n+mod custom_option {\n+    #[allow(unused)]\n+    enum CustomOption {\n+        Some(i32),\n+        None,\n+    }\n+\n+    impl CustomOption {\n+        fn iter(&self) {}\n+        fn iter_mut(&mut self) {}\n+        fn into_iter(self) {}\n+    }\n+    use CustomOption::*;\n+\n+    pub fn custom_option() {\n+        Some(3).iter();\n+        Some(3).iter_mut();\n+        Some(3).into_iter();\n+    }\n+}\n+\n fn main() {\n     array();\n+    custom_option::custom_option();\n     in_macros!();\n }"}]}