{"sha": "120d46e25507bae6ba1a621205388f8b7be106a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMGQ0NmUyNTUwN2JhZTZiYTFhNjIxMjA1Mzg4ZjhiN2JlMTA2YTI=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-04T17:47:58Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-31T01:17:45Z"}, "message": "Refactor lower_stmts", "tree": {"sha": "5285087118894123cb1b7919eed537ac4b54cd28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5285087118894123cb1b7919eed537ac4b54cd28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/120d46e25507bae6ba1a621205388f8b7be106a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/120d46e25507bae6ba1a621205388f8b7be106a2", "html_url": "https://github.com/rust-lang/rust/commit/120d46e25507bae6ba1a621205388f8b7be106a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/120d46e25507bae6ba1a621205388f8b7be106a2/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "581abbfc6ddf7a6fcf090fc98fa7e659a6f15622", "url": "https://api.github.com/repos/rust-lang/rust/commits/581abbfc6ddf7a6fcf090fc98fa7e659a6f15622", "html_url": "https://github.com/rust-lang/rust/commit/581abbfc6ddf7a6fcf090fc98fa7e659a6f15622"}], "stats": {"total": 111, "additions": 56, "deletions": 55}, "files": [{"sha": "4c650ad3dcbd1bceaf1c4a90cd8553337d062ccc", "filename": "compiler/rustc_ast_lowering/src/block.rs", "status": "modified", "additions": 56, "deletions": 55, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/120d46e25507bae6ba1a621205388f8b7be106a2/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120d46e25507bae6ba1a621205388f8b7be106a2/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs?ref=120d46e25507bae6ba1a621205388f8b7be106a2", "patch": "@@ -2,7 +2,7 @@ use crate::{ImplTraitContext, ImplTraitPosition, LoweringContext};\n use rustc_ast::{Block, BlockCheckMode, Local, Stmt, StmtKind};\n use rustc_hir as hir;\n \n-use smallvec::{smallvec, SmallVec};\n+use smallvec::SmallVec;\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     pub(super) fn lower_block(\n@@ -18,66 +18,67 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         b: &Block,\n         targeted_by_break: bool,\n     ) -> hir::Block<'hir> {\n-        let (stmts, expr) = match &*b.stmts {\n-            [stmts @ .., Stmt { kind: StmtKind::Expr(e), .. }] => (stmts, Some(&*e)),\n-            stmts => (stmts, None),\n-        };\n-        let stmts = self.arena.alloc_from_iter(stmts.iter().flat_map(|stmt| self.lower_stmt(stmt)));\n-        let expr = expr.map(|e| self.lower_expr(e));\n+        let (stmts, expr) = self.lower_stmts(&b.stmts);\n         let rules = self.lower_block_check_mode(&b.rules);\n         let hir_id = self.lower_node_id(b.id);\n-\n         hir::Block { hir_id, stmts, expr, rules, span: self.lower_span(b.span), targeted_by_break }\n     }\n \n-    fn lower_stmt(&mut self, s: &Stmt) -> SmallVec<[hir::Stmt<'hir>; 1]> {\n-        let (hir_id, kind) = match s.kind {\n-            StmtKind::Local(ref l) => {\n-                let l = self.lower_local(l);\n-                let hir_id = self.lower_node_id(s.id);\n-                self.alias_attrs(hir_id, l.hir_id);\n-                return smallvec![hir::Stmt {\n-                    hir_id,\n-                    kind: hir::StmtKind::Local(self.arena.alloc(l)),\n-                    span: self.lower_span(s.span),\n-                }];\n-            }\n-            StmtKind::Item(ref it) => {\n-                // Can only use the ID once.\n-                let mut id = Some(s.id);\n-                return self\n-                    .lower_item_id(it)\n-                    .into_iter()\n-                    .map(|item_id| {\n-                        let hir_id = id\n-                            .take()\n-                            .map(|id| self.lower_node_id(id))\n-                            .unwrap_or_else(|| self.next_id());\n-\n-                        hir::Stmt {\n-                            hir_id,\n-                            kind: hir::StmtKind::Item(item_id),\n-                            span: self.lower_span(s.span),\n-                        }\n-                    })\n-                    .collect();\n-            }\n-            StmtKind::Expr(ref e) => {\n-                let e = self.lower_expr(e);\n-                let hir_id = self.lower_node_id(s.id);\n-                self.alias_attrs(hir_id, e.hir_id);\n-                (hir_id, hir::StmtKind::Expr(e))\n-            }\n-            StmtKind::Semi(ref e) => {\n-                let e = self.lower_expr(e);\n-                let hir_id = self.lower_node_id(s.id);\n-                self.alias_attrs(hir_id, e.hir_id);\n-                (hir_id, hir::StmtKind::Semi(e))\n+    fn lower_stmts(\n+        &mut self,\n+        mut ast_stmts: &[Stmt],\n+    ) -> (&'hir [hir::Stmt<'hir>], Option<&'hir hir::Expr<'hir>>) {\n+        let mut stmts = SmallVec::<[hir::Stmt<'hir>; 8]>::new();\n+        let mut expr = None;\n+        while let [s, tail @ ..] = ast_stmts {\n+            match s.kind {\n+                StmtKind::Local(ref l) => {\n+                    let l = self.lower_local(l);\n+                    let hir_id = self.lower_node_id(s.id);\n+                    self.alias_attrs(hir_id, l.hir_id);\n+                    let kind = hir::StmtKind::Local(self.arena.alloc(l));\n+                    let span = self.lower_span(s.span);\n+                    stmts.push(hir::Stmt { hir_id, kind, span });\n+                }\n+                StmtKind::Item(ref it) => {\n+                    stmts.extend(self.lower_item_id(it).into_iter().enumerate().map(\n+                        |(i, item_id)| {\n+                            let hir_id = match i {\n+                                0 => self.lower_node_id(s.id),\n+                                _ => self.next_id(),\n+                            };\n+                            let kind = hir::StmtKind::Item(item_id);\n+                            let span = self.lower_span(s.span);\n+                            hir::Stmt { hir_id, kind, span }\n+                        },\n+                    ));\n+                }\n+                StmtKind::Expr(ref e) => {\n+                    let e = self.lower_expr(e);\n+                    if tail.is_empty() {\n+                        expr = Some(e);\n+                    } else {\n+                        let hir_id = self.lower_node_id(s.id);\n+                        self.alias_attrs(hir_id, e.hir_id);\n+                        let kind = hir::StmtKind::Expr(e);\n+                        let span = self.lower_span(s.span);\n+                        stmts.push(hir::Stmt { hir_id, kind, span });\n+                    }\n+                }\n+                StmtKind::Semi(ref e) => {\n+                    let e = self.lower_expr(e);\n+                    let hir_id = self.lower_node_id(s.id);\n+                    self.alias_attrs(hir_id, e.hir_id);\n+                    let kind = hir::StmtKind::Semi(e);\n+                    let span = self.lower_span(s.span);\n+                    stmts.push(hir::Stmt { hir_id, kind, span });\n+                }\n+                StmtKind::Empty => {}\n+                StmtKind::MacCall(..) => panic!(\"shouldn't exist here\"),\n             }\n-            StmtKind::Empty => return smallvec![],\n-            StmtKind::MacCall(..) => panic!(\"shouldn't exist here\"),\n-        };\n-        smallvec![hir::Stmt { hir_id, kind, span: self.lower_span(s.span) }]\n+            ast_stmts = &ast_stmts[1..];\n+        }\n+        (self.arena.alloc_from_iter(stmts), expr)\n     }\n \n     fn lower_local(&mut self, l: &Local) -> hir::Local<'hir> {"}]}