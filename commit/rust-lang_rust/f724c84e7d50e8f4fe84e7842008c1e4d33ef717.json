{"sha": "f724c84e7d50e8f4fe84e7842008c1e4d33ef717", "node_id": "C_kwDOAAsO6NoAKGY3MjRjODRlN2Q1MGU4ZjRmZTg0ZTc4NDIwMDhjMWU0ZDMzZWY3MTc", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-10T15:12:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-10T15:12:05Z"}, "message": "Merge #10738\n\n10738: internal: Do not search through all three namespaces in `ItemScope::name_of` r=Veykril a=Veykril\n\nBrings down `5ms - find_path_prefixed (46 calls)` to `1ms - find_path_prefixed (46 calls)` for me on the `integrated_completion_benchmark`.\r\nStill `O(n)` but this should considerably cut down lookups nevertheless(as shown by the timings already).\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "4aeb382ec7bda89a173908596e2f01576fdb7cbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aeb382ec7bda89a173908596e2f01576fdb7cbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f724c84e7d50e8f4fe84e7842008c1e4d33ef717", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhi+FFCRBK7hj4Ov3rIwAAiioIAB8rgqX5Td2aaj/4qy/pkqPf\nQoVL84dyU6IqKckgSEYYZxjQ+lRufBnDX6XT29efc+x3GOUm7D3JbVLJVsAe66fF\nfCy7Da863qD3PoGgHjamThiXtdPS6f4FiVDLUFM0A9ymYNqYchDdu6dMpkNdM2dD\nxR0WEorHlJjdFolXSCOo5VMUqr1WYBa49KhGc9IprBG4HweI6JPOJZMd76crA+eK\nAoaL4/8pBFe8+cFmLbl5cIvv8ky5tbFTjmtW/9DGGzOdxry3KOp0qo3mB7hZ8zm+\nUliT2WD7x/t81ABS4sFqAf2SLiUcFWRkBD+MnGofevrtN91ZHG6ywkyHTRilr5Y=\n=sR0f\n-----END PGP SIGNATURE-----\n", "payload": "tree 4aeb382ec7bda89a173908596e2f01576fdb7cbc\nparent 899610778bbd7e3c7b6a3e52085b19f3721b483e\nparent 3c8898b1b170ff94450521755579a1971266e70e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1636557125 +0000\ncommitter GitHub <noreply@github.com> 1636557125 +0000\n\nMerge #10738\n\n10738: internal: Do not search through all three namespaces in `ItemScope::name_of` r=Veykril a=Veykril\n\nBrings down `5ms - find_path_prefixed (46 calls)` to `1ms - find_path_prefixed (46 calls)` for me on the `integrated_completion_benchmark`.\r\nStill `O(n)` but this should considerably cut down lookups nevertheless(as shown by the timings already).\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f724c84e7d50e8f4fe84e7842008c1e4d33ef717", "html_url": "https://github.com/rust-lang/rust/commit/f724c84e7d50e8f4fe84e7842008c1e4d33ef717", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f724c84e7d50e8f4fe84e7842008c1e4d33ef717/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "899610778bbd7e3c7b6a3e52085b19f3721b483e", "url": "https://api.github.com/repos/rust-lang/rust/commits/899610778bbd7e3c7b6a3e52085b19f3721b483e", "html_url": "https://github.com/rust-lang/rust/commit/899610778bbd7e3c7b6a3e52085b19f3721b483e"}, {"sha": "3c8898b1b170ff94450521755579a1971266e70e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c8898b1b170ff94450521755579a1971266e70e", "html_url": "https://github.com/rust-lang/rust/commit/3c8898b1b170ff94450521755579a1971266e70e"}], "stats": {"total": 29, "additions": 10, "deletions": 19}, "files": [{"sha": "0a2a6719edc1951f96aa037e62be965687633275", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f724c84e7d50e8f4fe84e7842008c1e4d33ef717/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f724c84e7d50e8f4fe84e7842008c1e4d33ef717/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=f724c84e7d50e8f4fe84e7842008c1e4d33ef717", "patch": "@@ -136,12 +136,17 @@ impl ItemScope {\n \n     /// XXX: this is O(N) rather than O(1), try to not introduce new usages.\n     pub(crate) fn name_of(&self, item: ItemInNs) -> Option<(&Name, Visibility)> {\n-        for (name, per_ns) in self.entries() {\n-            if let Some(vis) = item.match_with(per_ns) {\n-                return Some((name, vis));\n+        let (def, mut iter) = match item {\n+            ItemInNs::Macros(def) => {\n+                return self\n+                    .macros\n+                    .iter()\n+                    .find_map(|(name, &(other_def, vis))| (other_def == def).then(|| (name, vis)));\n             }\n-        }\n-        None\n+            ItemInNs::Types(def) => (def, self.types.iter()),\n+            ItemInNs::Values(def) => (def, self.values.iter()),\n+        };\n+        iter.find_map(|(name, &(other_def, vis))| (other_def == def).then(|| (name, vis)))\n     }\n \n     pub(crate) fn traits<'a>(&'a self) -> impl Iterator<Item = TraitId> + 'a {\n@@ -386,20 +391,6 @@ pub enum ItemInNs {\n }\n \n impl ItemInNs {\n-    fn match_with(self, per_ns: PerNs) -> Option<Visibility> {\n-        match self {\n-            ItemInNs::Types(def) => {\n-                per_ns.types.filter(|(other_def, _)| *other_def == def).map(|(_, vis)| vis)\n-            }\n-            ItemInNs::Values(def) => {\n-                per_ns.values.filter(|(other_def, _)| *other_def == def).map(|(_, vis)| vis)\n-            }\n-            ItemInNs::Macros(def) => {\n-                per_ns.macros.filter(|(other_def, _)| *other_def == def).map(|(_, vis)| vis)\n-            }\n-        }\n-    }\n-\n     pub fn as_module_def_id(self) -> Option<ModuleDefId> {\n         match self {\n             ItemInNs::Types(id) | ItemInNs::Values(id) => Some(id),"}]}