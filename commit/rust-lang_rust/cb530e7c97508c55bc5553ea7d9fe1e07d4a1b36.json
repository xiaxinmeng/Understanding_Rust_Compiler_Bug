{"sha": "cb530e7c97508c55bc5553ea7d9fe1e07d4a1b36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNTMwZTdjOTc1MDhjNTViYzU1NTNlYTdkOWZlMWUwN2Q0YTFiMzY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-17T14:08:46Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-17T14:10:46Z"}, "message": "Handle `#[cfg]` on call arguments", "tree": {"sha": "7d68e1721571b164e3ea702ee2fe031d119f0168", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d68e1721571b164e3ea702ee2fe031d119f0168"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb530e7c97508c55bc5553ea7d9fe1e07d4a1b36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb530e7c97508c55bc5553ea7d9fe1e07d4a1b36", "html_url": "https://github.com/rust-lang/rust/commit/cb530e7c97508c55bc5553ea7d9fe1e07d4a1b36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb530e7c97508c55bc5553ea7d9fe1e07d4a1b36/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "html_url": "https://github.com/rust-lang/rust/commit/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "19f5065d1381776ae01670b67b85c919f39af8b4", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cb530e7c97508c55bc5553ea7d9fe1e07d4a1b36/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb530e7c97508c55bc5553ea7d9fe1e07d4a1b36/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=cb530e7c97508c55bc5553ea7d9fe1e07d4a1b36", "patch": "@@ -177,12 +177,15 @@ impl ExprCollector<'_> {\n     }\n \n     fn collect_expr(&mut self, expr: ast::Expr) -> ExprId {\n+        self.maybe_collect_expr(expr).unwrap_or_else(|| self.missing_expr())\n+    }\n+\n+    /// Returns `None` if the expression is `#[cfg]`d out.\n+    fn maybe_collect_expr(&mut self, expr: ast::Expr) -> Option<ExprId> {\n         let syntax_ptr = AstPtr::new(&expr);\n-        if self.check_cfg(&expr).is_none() {\n-            return self.missing_expr();\n-        }\n+        self.check_cfg(&expr)?;\n \n-        match expr {\n+        Some(match expr {\n             ast::Expr::IfExpr(e) => {\n                 let then_branch = self.collect_block_opt(e.then_branch());\n \n@@ -211,8 +214,9 @@ impl ExprCollector<'_> {\n                                     guard: None,\n                                 },\n                             ];\n-                            return self\n-                                .alloc_expr(Expr::Match { expr: match_expr, arms }, syntax_ptr);\n+                            return Some(\n+                                self.alloc_expr(Expr::Match { expr: match_expr, arms }, syntax_ptr),\n+                            );\n                         }\n                     },\n                 };\n@@ -283,8 +287,9 @@ impl ExprCollector<'_> {\n                             ];\n                             let match_expr =\n                                 self.alloc_expr_desugared(Expr::Match { expr: match_expr, arms });\n-                            return self\n-                                .alloc_expr(Expr::Loop { body: match_expr, label }, syntax_ptr);\n+                            return Some(\n+                                self.alloc_expr(Expr::Loop { body: match_expr, label }, syntax_ptr),\n+                            );\n                         }\n                     },\n                 };\n@@ -301,7 +306,7 @@ impl ExprCollector<'_> {\n             ast::Expr::CallExpr(e) => {\n                 let callee = self.collect_expr_opt(e.expr());\n                 let args = if let Some(arg_list) = e.arg_list() {\n-                    arg_list.args().map(|e| self.collect_expr(e)).collect()\n+                    arg_list.args().filter_map(|e| self.maybe_collect_expr(e)).collect()\n                 } else {\n                     Vec::new()\n                 };\n@@ -310,7 +315,7 @@ impl ExprCollector<'_> {\n             ast::Expr::MethodCallExpr(e) => {\n                 let receiver = self.collect_expr_opt(e.receiver());\n                 let args = if let Some(arg_list) = e.arg_list() {\n-                    arg_list.args().map(|e| self.collect_expr(e)).collect()\n+                    arg_list.args().filter_map(|e| self.maybe_collect_expr(e)).collect()\n                 } else {\n                     Vec::new()\n                 };\n@@ -538,7 +543,7 @@ impl ExprCollector<'_> {\n                     self.alloc_expr(Expr::Missing, syntax_ptr)\n                 }\n             }\n-        }\n+        })\n     }\n \n     fn collect_macro_call<F: FnMut(&mut Self, Option<T>), T: ast::AstNode>("}, {"sha": "50dc40335a63e9b43a4a08aed58a2dcbfda7424b", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cb530e7c97508c55bc5553ea7d9fe1e07d4a1b36/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb530e7c97508c55bc5553ea7d9fe1e07d4a1b36/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=cb530e7c97508c55bc5553ea7d9fe1e07d4a1b36", "patch": "@@ -690,4 +690,27 @@ fn main() {\n \"#,\n         )\n     }\n+\n+    #[test]\n+    fn cfgd_out_call_arguments() {\n+        check_diagnostics(\n+            r#\"\n+struct C(#[cfg(FALSE)] ());\n+impl C {\n+    fn new() -> Self {\n+        Self(\n+            #[cfg(FALSE)]\n+            (),\n+        )\n+    }\n+\n+    fn method(&self) {}\n+}\n+\n+fn main() {\n+    C::new().method(#[cfg(FALSE)] 0);\n+}\n+            \"#,\n+        );\n+    }\n }"}]}