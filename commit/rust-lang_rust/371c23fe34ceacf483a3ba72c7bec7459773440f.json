{"sha": "371c23fe34ceacf483a3ba72c7bec7459773440f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MWMyM2ZlMzRjZWFjZjQ4M2EzYmE3MmM3YmVjNzQ1OTc3MzQ0MGY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-08-07T20:48:50Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-08-14T19:35:47Z"}, "message": "Update tests", "tree": {"sha": "ea89d04fa3dd33738fff31f7f04b08e255aff230", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea89d04fa3dd33738fff31f7f04b08e255aff230"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/371c23fe34ceacf483a3ba72c7bec7459773440f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/371c23fe34ceacf483a3ba72c7bec7459773440f", "html_url": "https://github.com/rust-lang/rust/commit/371c23fe34ceacf483a3ba72c7bec7459773440f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/371c23fe34ceacf483a3ba72c7bec7459773440f/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "372e4aee1de04517bb6f4b187d00f076499d7b15", "url": "https://api.github.com/repos/rust-lang/rust/commits/372e4aee1de04517bb6f4b187d00f076499d7b15", "html_url": "https://github.com/rust-lang/rust/commit/372e4aee1de04517bb6f4b187d00f076499d7b15"}], "stats": {"total": 128, "additions": 63, "deletions": 65}, "files": [{"sha": "caedc79d80732999637095b617c6e7833bed7e28", "filename": "src/test/ui/error-codes/E0621-does-not-trigger-for-closures.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -5,10 +5,10 @@ LL |     invoke(&x, |a, b| if a > b { a } else { b }); //~ ERROR E0495\n    |     ^^^^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/E0621-does-not-trigger-for-closures.rs:25:26\n+  --> $DIR/E0621-does-not-trigger-for-closures.rs:25:45\n    |\n LL |     invoke(&x, |a, b| if a > b { a } else { b }); //~ ERROR E0495\n-   |                    --    ^^^^^ requires that `'1` must outlive `'2`\n+   |                    --                       ^ returning this value requires that `'1` must outlive `'2`\n    |                    ||\n    |                    |return type of closure is &'2 i32\n    |                    has type `&'1 i32`"}, {"sha": "c07921bce2d72cb2eefd72e94c8bb518160fa606", "filename": "src/test/ui/in-band-lifetimes/mismatched.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -22,7 +22,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/mismatched.rs:16:46\n    |\n LL | fn foo2(x: &'a u32, y: &'b u32) -> &'a u32 { y } //~ ERROR lifetime mismatch\n-   |             --          --                   ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |             --          --                   ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |             |           |\n    |             |           lifetime `'b` defined here\n    |             lifetime `'a` defined here"}, {"sha": "cf3e44f7874aa8007ca2e6945bbc121471aa91ea", "filename": "src/test/ui/issues/issue-14285.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-14285.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-14285.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14285.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -5,12 +5,12 @@ LL |     B(a)    //~ ERROR 22:5: 22:9: explicit lifetime required in the type of\n    |       ^\n \n error[E0621]: explicit lifetime required in the type of `a`\n-  --> $DIR/issue-14285.rs:22:7\n+  --> $DIR/issue-14285.rs:22:5\n    |\n LL | fn foo<'a>(a: &Foo) -> B<'a> {\n    |               ---- help: add explicit lifetime `'a` to the type of `a`: `&'a (dyn Foo + 'a)`\n LL |     B(a)    //~ ERROR 22:5: 22:9: explicit lifetime required in the type of `a` [E0621]\n-   |       ^ lifetime `'a` required\n+   |     ^^^^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "8dd18fa0cab89c66c6be8d9a85a8d76e2d92bf5f", "filename": "src/test/ui/issues/issue-15034.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -5,12 +5,12 @@ LL |         Parser { lexer: lexer }\n    |         ^^^^^^\n \n error[E0621]: explicit lifetime required in the type of `lexer`\n-  --> $DIR/issue-15034.rs:27:25\n+  --> $DIR/issue-15034.rs:27:9\n    |\n LL |     pub fn new(lexer: &'a mut Lexer) -> Parser<'a> {\n    |                       ------------- help: add explicit lifetime `'a` to the type of `lexer`: `&'a mut Lexer<'a>`\n LL |         Parser { lexer: lexer }\n-   |                         ^^^^^ lifetime `'a` required\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "3cd7ce8cd54092d3f0cf328efd9ac53a375c79a0", "filename": "src/test/ui/issues/issue-3154.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-3154.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-3154.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3154.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -11,12 +11,12 @@ LL |     thing{ x: x } //~ ERROR 16:5: 16:18: explicit lifetime required in the\n    |     ^^^^^\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/issue-3154.rs:16:15\n+  --> $DIR/issue-3154.rs:16:5\n    |\n LL | fn thing<'a,Q>(x: &Q) -> thing<'a,Q> {\n    |                   -- help: add explicit lifetime `'a` to the type of `x`: `&'a Q`\n LL |     thing{ x: x } //~ ERROR 16:5: 16:18: explicit lifetime required in the type of `x` [E0621]\n-   |               ^ lifetime `'a` required\n+   |     ^^^^^^^^^^^^^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "3a579c04de176c3d47d406e82855a067f8b09260", "filename": "src/test/ui/issues/issue-40510-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -7,7 +7,7 @@ LL |     || {\n    |     |return type of closure is &'2 mut std::boxed::Box<()>\n    |     lifetime `'1` represents this closure's body\n LL |         &mut x\n-   |         ^^^^^^ return requires that `'1` must outlive `'2`\n+   |         ^^^^^^ returning this value requires that `'1` must outlive `'2`\n    |\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n "}, {"sha": "84ab2a8216deb48aac547bd11c20e01983b92eef", "filename": "src/test/ui/issues/issue-40510-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -9,7 +9,7 @@ LL |       || {\n LL | /         || {\n LL | |             x.push(())\n LL | |         }\n-   | |_________^ requires that `'1` must outlive `'2`\n+   | |_________^ returning this value requires that `'1` must outlive `'2`\n    |\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n "}, {"sha": "df43158ec9c7cdd47cfa1f28f1370622d0d8a46f", "filename": "src/test/ui/issues/issue-49824.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -9,7 +9,7 @@ LL |       || {\n LL | /         || {\n LL | |             let _y = &mut x;\n LL | |         }\n-   | |_________^ requires that `'1` must outlive `'2`\n+   | |_________^ returning this value requires that `'1` must outlive `'2`\n    |\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n "}, {"sha": "7a04aeb963547a0ff07317866c62ddea5b7d610f", "filename": "src/test/ui/issues/issue-52213.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -5,15 +5,15 @@ LL |     match (&t,) { //~ ERROR cannot infer an appropriate lifetime\n    |           ^^^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/issue-52213.rs:13:11\n+  --> $DIR/issue-52213.rs:13:20\n    |\n LL | fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n    |                       --  -- lifetime `'b` defined here\n    |                       |\n    |                       lifetime `'a` defined here\n LL |     match (&t,) { //~ ERROR cannot infer an appropriate lifetime\n LL |         ((u,),) => u,\n-   |           ^ requires that `'a` must outlive `'b`\n+   |                    ^ returning this value requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "2dfa46dc2288e7aeefd3bd465457d2b5ba51a38f", "filename": "src/test/ui/issues/issue-52533-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -8,7 +8,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/issue-52533-1.rs:19:18\n    |\n LL |     gimme(|x, y| y)\n-   |            -  -  ^ closure was supposed to return data with lifetime `'1` but it is returning data with lifetime `'2`\n+   |            -  -  ^ closure was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |            |  |\n    |            |  has type `&Foo<'_, '1, u32>`\n    |            has type `&Foo<'_, '2, u32>`"}, {"sha": "17218429822e85832be15163b47f7492cd823199", "filename": "src/test/ui/issues/issue-52533.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -8,7 +8,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/issue-52533.rs:15:16\n    |\n LL |     foo(|a, b| b)\n-   |          -  -  ^ closure was supposed to return data with lifetime `'1` but it is returning data with lifetime `'2`\n+   |          -  -  ^ closure was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |          |  |\n    |          |  has type `&'1 u32`\n    |          has type `&'2 u32`"}, {"sha": "3fb0252315cbfe4cc6c0a66eaf9883a02a0bc866", "filename": "src/test/ui/lifetimes/lifetime-errors/42701_one_named_and_one_anonymous.nll.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2F42701_one_named_and_one_anonymous.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2F42701_one_named_and_one_anonymous.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2F42701_one_named_and_one_anonymous.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -5,17 +5,13 @@ LL |         &*x //~ ERROR explicit lifetime\n    |         ^^^\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/42701_one_named_and_one_anonymous.rs:16:5\n+  --> $DIR/42701_one_named_and_one_anonymous.rs:20:9\n    |\n-LL |   fn foo2<'a>(a: &'a Foo, x: &i32) -> &'a i32 {\n-   |                              ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n-LL | /     if true {\n-LL | |         let p: &i32 = &a.field;\n-LL | |         &*p\n-LL | |     } else {\n-LL | |         &*x //~ ERROR explicit lifetime\n-LL | |     }\n-   | |_____^ lifetime `'a` required\n+LL | fn foo2<'a>(a: &'a Foo, x: &i32) -> &'a i32 {\n+   |                            ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n+...\n+LL |         &*x //~ ERROR explicit lifetime\n+   |         ^^^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "817d7c8736375e063aa73ff406131d7fd47e5a14", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -5,12 +5,13 @@ LL |                     other //~ ERROR explicit lifetime\n    |                     ^^^^^\n \n error[E0621]: explicit lifetime required in the type of `other`\n-  --> $DIR/ex1-return-one-existing-name-early-bound-in-struct.rs:18:15\n+  --> $DIR/ex1-return-one-existing-name-early-bound-in-struct.rs:21:21\n    |\n LL |     fn bar(&self, other: Foo) -> Foo<'a> {\n    |                          --- help: add explicit lifetime `'a` to the type of `other`: `Foo<'a>`\n-LL |         match *self {\n-   |               ^^^^^ lifetime `'a` required\n+...\n+LL |                     other //~ ERROR explicit lifetime\n+   |                     ^^^^^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "a10c38a88d4c4f8f4d527cacd8bf08ceebbd9ba4", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -5,12 +5,12 @@ LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n    |                ^\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/ex1-return-one-existing-name-if-else-2.rs:12:8\n+  --> $DIR/ex1-return-one-existing-name-if-else-2.rs:12:16\n    |\n LL | fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n    |               ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n-   |        ^^^^^ lifetime `'a` required\n+   |                ^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "e33b89c56d5d803cba229847747e24b85c1ed2d0", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-3.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -5,12 +5,12 @@ LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n    |                           ^\n \n error[E0621]: explicit lifetime required in parameter type\n-  --> $DIR/ex1-return-one-existing-name-if-else-3.rs:11:16\n+  --> $DIR/ex1-return-one-existing-name-if-else-3.rs:12:27\n    |\n LL | fn foo<'a>((x, y): (&'a i32, &i32)) -> &'a i32 {\n-   |                ^   --------------- help: add explicit lifetime `'a` to type: `(&'a i32, &'a i32)`\n-   |                |\n-   |                lifetime `'a` required\n+   |                    --------------- help: add explicit lifetime `'a` to type: `(&'a i32, &'a i32)`\n+LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n+   |                           ^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "a3b2c3f6f19c322add0f1144a0aff6f5c27d2320", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -5,12 +5,12 @@ LL |    if x > y { x } else { y } //~ ERROR explicit lifetime\n    |               ^\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/ex1-return-one-existing-name-if-else-using-impl-2.rs:14:7\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl-2.rs:14:15\n    |\n LL | fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n    |               ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n LL |    if x > y { x } else { y } //~ ERROR explicit lifetime\n-   |       ^^^^^ lifetime `'a` required\n+   |               ^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "e13a710508d05757d6b92d3c2fdbe1f90088f42a", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-3.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -5,13 +5,13 @@ LL |     if true { &self.field } else { x } //~ ERROR explicit lifetime\n    |                                    ^\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/ex1-return-one-existing-name-if-else-using-impl-3.rs:18:5\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl-3.rs:18:36\n    |\n LL |   fn foo<'a>(&'a self, x: &i32) -> &i32 {\n    |                           ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n LL | \n LL |     if true { &self.field } else { x } //~ ERROR explicit lifetime\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required\n+   |                                    ^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "4ce3a613c315e84ad10bb79584c26957d3c1d870", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -5,15 +5,15 @@ LL |         if x > y { x } else { y } //~ ERROR lifetime mismatch\n    |                    ^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:21:12\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:21:20\n    |\n LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n    |            --     - let's call the lifetime of this reference `'1`\n    |            |\n    |            lifetime `'a` defined here\n LL | \n LL |         if x > y { x } else { y } //~ ERROR lifetime mismatch\n-   |            ^^^^^ requires that `'1` must outlive `'a`\n+   |                    ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "5b4b28acee7c8c6698fcfe1dbd47767f731569e9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -5,12 +5,12 @@ LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n    |                           ^\n \n error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/ex1-return-one-existing-name-if-else.rs:12:8\n+  --> $DIR/ex1-return-one-existing-name-if-else.rs:12:27\n    |\n LL | fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n    |                           ---- help: add explicit lifetime `'a` to the type of `y`: `&'a i32`\n LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n-   |        ^^^^^ lifetime `'a` required\n+   |                           ^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "272ae0b12519af7756bb36f662a0807a0defe2fa", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -13,7 +13,7 @@ LL |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n    |          lifetime `'a` defined here\n LL | \n LL |     x //~ ERROR lifetime mismatch\n-   |     ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+   |     ^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n \n error: aborting due to previous error\n "}, {"sha": "2106546325b2de30cca7df15b051fafa43416345", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -5,15 +5,15 @@ LL |         if true { x } else { self } //~ ERROR lifetime mismatch\n    |                              ^^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:18:9\n+  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:18:30\n    |\n LL |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n    |            --  - let's call the lifetime of this reference `'1`\n    |            |\n    |            lifetime `'a` defined here\n LL | \n LL |         if true { x } else { self } //~ ERROR lifetime mismatch\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'1` must outlive `'a`\n+   |                              ^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "9680e8c2f69359a80339b47aac93aa3e8acbe5cb", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -12,7 +12,7 @@ LL |   fn foo<'a>(&self, x: &i32) -> &i32 {\n    |              |\n    |              let's call the lifetime of this reference `'2`\n LL |     x //~ ERROR lifetime mismatch\n-   |     ^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'2`\n+   |     ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "6fbe8e982093e851aaae1b3e25e7d9218fd0e6cd", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -5,14 +5,14 @@ LL |         if true { x } else { self } //~ ERROR lifetime mismatch\n    |                   ^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:17:9\n+  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:17:19\n    |\n LL |     fn foo<'a>(&self, x: &Foo) -> &Foo {\n    |                -         - let's call the lifetime of this reference `'1`\n    |                |\n    |                let's call the lifetime of this reference `'2`\n LL |         if true { x } else { self } //~ ERROR lifetime mismatch\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'1` must outlive `'2`\n+   |                   ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "00d79a9ed7e844b0ddf755b0f1d3eeeff221ea0a", "filename": "src/test/ui/nll/closure-requirements/region-lbr-named-does-not-outlive-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -10,7 +10,7 @@ error: unsatisfied lifetime constraints\n LL | fn foo<'a>(x: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n LL |     &*x\n-   |     ^^^ requires that `'a` must outlive `'static`\n+   |     ^^^ returning this value requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "bcdae17c47ce079baf8281dad4123b527e1ed254", "filename": "src/test/ui/nll/closure-requirements/region-lbr1-does-not-outlive-ebr2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -12,7 +12,7 @@ LL | fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> &'b u32 {\n    |        |\n    |        lifetime `'a` defined here\n LL |     &*x\n-   |     ^^^ requires that `'a` must outlive `'b`\n+   |     ^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n \n error: aborting due to previous error\n "}, {"sha": "8dc10de702f7aadf52d15bc339e45cda1991db16", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -19,7 +19,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/return-wrong-bound-region.rs:21:23\n    |\n LL |     expect_sig(|a, b| b); // ought to return `a`\n-   |                 -  -  ^ closure was supposed to return data with lifetime `'1` but it is returning data with lifetime `'2`\n+   |                 -  -  ^ closure was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |                 |  |\n    |                 |  has type `&'1 i32`\n    |                 has type `&'2 i32`"}, {"sha": "a48516efdc21b9cd02591d62983e2e8abfa06eac", "filename": "src/test/ui/nll/issue-48238.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -2,7 +2,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/issue-48238.rs:21:13\n    |\n LL |     move || use_val(&orig); //~ ERROR\n-   |     ------- ^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |     ------- ^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n    |     |     |\n    |     |     return type of closure is &'2 u8\n    |     lifetime `'1` represents this closure's body"}, {"sha": "a111699c3f70de36cc4a01faacf2bda4bfb4e833", "filename": "src/test/ui/nll/mir_check_cast_closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.rs?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -14,9 +14,9 @@\n \n fn bar<'a, 'b>() -> fn(&'a u32, &'b u32) -> &'a u32 {\n     let g: fn(_, _) -> _ = |_x, y| y;\n-    //~^ ERROR unsatisfied lifetime constraints\n     g\n     //~^ WARNING not reporting region error due to nll\n+    //~^^ ERROR unsatisfied lifetime constraints\n }\n \n fn main() {}"}, {"sha": "6805dbf6f30550c4dcfc28240967ad129eeeb079", "filename": "src/test/ui/nll/mir_check_cast_closure.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -1,18 +1,19 @@\n warning: not reporting region error due to nll\n-  --> $DIR/mir_check_cast_closure.rs:18:5\n+  --> $DIR/mir_check_cast_closure.rs:17:5\n    |\n LL |     g\n    |     ^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/mir_check_cast_closure.rs:16:28\n+  --> $DIR/mir_check_cast_closure.rs:17:5\n    |\n LL | fn bar<'a, 'b>() -> fn(&'a u32, &'b u32) -> &'a u32 {\n    |        --  -- lifetime `'b` defined here\n    |        |\n    |        lifetime `'a` defined here\n LL |     let g: fn(_, _) -> _ = |_x, y| y;\n-   |                            ^^^^^^^^^ cast requires that `'b` must outlive `'a`\n+LL |     g\n+   |     ^ returning this value requires that `'b` must outlive `'a`\n \n error: aborting due to previous error\n "}, {"sha": "c6e5fb397b9e6d09460b922eccf3de90240dd385", "filename": "src/test/ui/nll/mir_check_cast_reify.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -4,14 +4,14 @@ warning: not reporting region error due to nll\n LL |     let f: fn(_) -> _ = foo;\n    |                         ^^^\n \n-error: borrowed data escapes outside of function\n+error: unsatisfied lifetime constraints\n   --> $DIR/mir_check_cast_reify.rs:48:5\n    |\n LL | fn bar<'a>(x: &'a u32) -> &'static u32 {\n-   |            - `x` is a reference that is only valid in the function body\n+   |        -- lifetime `'a` defined here\n ...\n LL |     f(x)\n-   |     ^^^^ `x` escapes the function body here\n+   |     ^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "e8315d341a7f3cce9a4cb2ff89d22c86fb60621d", "filename": "src/test/ui/nll/mir_check_cast_unsafe_fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -4,14 +4,14 @@ warning: not reporting region error due to nll\n LL |     let g: unsafe fn(_) -> _ = f;\n    |                                ^\n \n-error: borrowed data escapes outside of function\n+error: unsatisfied lifetime constraints\n   --> $DIR/mir_check_cast_unsafe_fn.rs:20:14\n    |\n LL | fn bar<'a>(input: &'a u32, f: fn(&'a u32) -> &'a u32) -> &'static u32 {\n-   |            ----- `input` is a reference that is only valid in the function body\n+   |        -- lifetime `'a` defined here\n ...\n LL |     unsafe { g(input) }\n-   |              ^^^^^^^^ `input` escapes the function body here\n+   |              ^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "4219c07673a45879330567bd163ea786f22732e8", "filename": "src/test/ui/nll/mir_check_cast_unsize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -15,7 +15,7 @@ LL | |     //~^ ERROR unsatisfied lifetime constraints\n LL | |     x\n LL | |     //~^ WARNING not reporting region error due to nll\n LL | | }\n-   | |_^ return requires that `'a` must outlive `'static`\n+   | |_^ returning this value requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "799b0982b940f68747934c249a55bf27161b5d1d", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371c23fe34ceacf483a3ba72c7bec7459773440f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr?ref=371c23fe34ceacf483a3ba72c7bec7459773440f", "patch": "@@ -32,7 +32,7 @@ LL |   fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n LL | |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL | |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n LL | | }\n-   | |_^ return requires that `'1` must outlive `'static`\n+   | |_^ returning this value requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n "}]}