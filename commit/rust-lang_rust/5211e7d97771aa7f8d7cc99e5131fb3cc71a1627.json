{"sha": "5211e7d97771aa7f8d7cc99e5131fb3cc71a1627", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMTFlN2Q5Nzc3MWFhN2Y4ZDdjYzk5ZTUxMzFmYjNjYzcxYTE2Mjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-25T11:30:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-25T11:30:54Z"}, "message": "move", "tree": {"sha": "c4539fbe335db8ac133386f16645cbc4c86d6bda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4539fbe335db8ac133386f16645cbc4c86d6bda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5211e7d97771aa7f8d7cc99e5131fb3cc71a1627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5211e7d97771aa7f8d7cc99e5131fb3cc71a1627", "html_url": "https://github.com/rust-lang/rust/commit/5211e7d97771aa7f8d7cc99e5131fb3cc71a1627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5211e7d97771aa7f8d7cc99e5131fb3cc71a1627/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d41bc3e6c1adb8abce5c796cfd24f77fee6f420", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d41bc3e6c1adb8abce5c796cfd24f77fee6f420", "html_url": "https://github.com/rust-lang/rust/commit/2d41bc3e6c1adb8abce5c796cfd24f77fee6f420"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "c8882c94d292d094792720fc7abe908942f28857", "filename": "crates/libeditor/tests/test.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5211e7d97771aa7f8d7cc99e5131fb3cc71a1627/crates%2Flibeditor%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5211e7d97771aa7f8d7cc99e5131fb3cc71a1627/crates%2Flibeditor%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Ftests%2Ftest.rs?ref=5211e7d97771aa7f8d7cc99e5131fb3cc71a1627", "patch": "@@ -3,7 +3,7 @@ extern crate libsyntax2;\n #[macro_use]\n extern crate test_utils;\n \n-use test_utils::{assert_eq_dbg};\n+use test_utils::{assert_eq_dbg, add_cursor, extract_offset, extract_range};\n use libsyntax2::{File, TextUnit, TextRange};\n use libeditor::{\n     ActionResult,\n@@ -15,7 +15,7 @@ use libeditor::{\n #[test]\n fn test_extend_selection() {\n     fn do_check(before: &str, afters: &[&str]) {\n-        let (cursor, before) = extract_cursor(before);\n+        let (cursor, before) = extract_offset(before);\n         let file = file(&before);\n         let mut range = TextRange::offset_len(cursor, 0.into());\n         for &after in afters {\n@@ -163,7 +163,7 @@ fn test_add_impl() {\n #[test]\n fn test_matching_brace() {\n     fn do_check(before: &str, after: &str) {\n-        let (pos, before) = extract_cursor(before);\n+        let (pos, before) = extract_offset(before);\n         let file = file(&before);\n         let new_pos = match matching_brace(&file, pos) {\n             None => pos,\n@@ -215,9 +215,7 @@ pub fn reparse(&self, edit: &AtomEdit) -> File {\n #[test]\n fn test_join_lines_selection() {\n     fn do_check(before: &str, after: &str) {\n-        let (sel_start, before) = extract_cursor(before);\n-        let (sel_end, before) = extract_cursor(&before);\n-        let sel = TextRange::from_to(sel_start, sel_end);\n+        let (sel, before) = extract_range(&before);\n         let file = file(&before);\n         let result = join_lines(&file, sel);\n         let actual = result.edit.apply(&before);\n@@ -255,7 +253,7 @@ fn check_action<F: Fn(&File, TextUnit) -> Option<ActionResult>>(\n     after: &str,\n     f: F,\n ) {\n-    let (before_cursor_pos, before) = extract_cursor(before);\n+    let (before_cursor_pos, before) = extract_offset(before);\n     let file = file(&before);\n     let result = f(&file, before_cursor_pos).expect(\"code action is not applicable\");\n     let actual = result.edit.apply(&before);\n@@ -266,26 +264,3 @@ fn check_action<F: Fn(&File, TextUnit) -> Option<ActionResult>>(\n     let actual = add_cursor(&actual, actual_cursor_pos);\n     assert_eq_text!(after, &actual);\n }\n-\n-fn extract_cursor(text: &str) -> (TextUnit, String) {\n-    let cursor = \"<|>\";\n-    let cursor_pos = match text.find(cursor) {\n-        None => panic!(\"text should contain cursor marker\"),\n-        Some(pos) => pos,\n-    };\n-    let mut new_text = String::with_capacity(text.len() - cursor.len());\n-    new_text.push_str(&text[..cursor_pos]);\n-    new_text.push_str(&text[cursor_pos + cursor.len()..]);\n-    let cursor_pos = TextUnit::from(cursor_pos as u32);\n-    (cursor_pos, new_text)\n-}\n-\n-fn add_cursor(text: &str, offset: TextUnit) -> String {\n-    let offset: u32 = offset.into();\n-    let offset: usize = offset as usize;\n-    let mut res = String::new();\n-    res.push_str(&text[..offset]);\n-    res.push_str(\"<|>\");\n-    res.push_str(&text[offset..]);\n-    res\n-}"}, {"sha": "41316581ed027949904e205de6eaf322f8484053", "filename": "crates/test_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5211e7d97771aa7f8d7cc99e5131fb3cc71a1627/crates%2Ftest_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5211e7d97771aa7f8d7cc99e5131fb3cc71a1627/crates%2Ftest_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2FCargo.toml?ref=5211e7d97771aa7f8d7cc99e5131fb3cc71a1627", "patch": "@@ -6,3 +6,4 @@ authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n [dependencies]\n difference = \"2.0.0\"\n itertools = \"0.7.8\"\n+text_unit = \"0.1.2\""}, {"sha": "068eb80ce4ae9af51caf35bc7bf6754cffd59d6e", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5211e7d97771aa7f8d7cc99e5131fb3cc71a1627/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5211e7d97771aa7f8d7cc99e5131fb3cc71a1627/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=5211e7d97771aa7f8d7cc99e5131fb3cc71a1627", "patch": "@@ -1,8 +1,10 @@\n extern crate difference;\n extern crate itertools;\n+extern crate text_unit;\n \n use std::fmt;\n use itertools::Itertools;\n+use text_unit::{TextUnit, TextRange};\n \n pub use self::difference::Changeset as __Changeset;\n \n@@ -34,3 +36,32 @@ pub fn assert_eq_dbg(expected: &str, actual: &impl fmt::Debug) {\n     let expected = expected.lines().map(|l| l.trim()).join(\" \");\n     assert_eq!(expected, actual);\n }\n+\n+pub fn extract_offset(text: &str) -> (TextUnit, String) {\n+    let cursor = \"<|>\";\n+    let cursor_pos = match text.find(cursor) {\n+        None => panic!(\"text should contain cursor marker\"),\n+        Some(pos) => pos,\n+    };\n+    let mut new_text = String::with_capacity(text.len() - cursor.len());\n+    new_text.push_str(&text[..cursor_pos]);\n+    new_text.push_str(&text[cursor_pos + cursor.len()..]);\n+    let cursor_pos = TextUnit::from(cursor_pos as u32);\n+    (cursor_pos, new_text)\n+}\n+\n+pub fn extract_range(text: &str) -> (TextRange, String) {\n+    let (start, text) = extract_offset(text);\n+    let (end, text) = extract_offset(&text);\n+    (TextRange::from_to(start, end), text)\n+}\n+\n+pub fn add_cursor(text: &str, offset: TextUnit) -> String {\n+    let offset: u32 = offset.into();\n+    let offset: usize = offset as usize;\n+    let mut res = String::new();\n+    res.push_str(&text[..offset]);\n+    res.push_str(\"<|>\");\n+    res.push_str(&text[offset..]);\n+    res\n+}"}]}