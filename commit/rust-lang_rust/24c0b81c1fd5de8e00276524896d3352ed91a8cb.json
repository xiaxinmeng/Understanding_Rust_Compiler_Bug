{"sha": "24c0b81c1fd5de8e00276524896d3352ed91a8cb", "node_id": "C_kwDOAAsO6NoAKDI0YzBiODFjMWZkNWRlOGUwMDI3NjUyNDg5NmQzMzUyZWQ5MWE4Y2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-12T09:44:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-12T09:44:17Z"}, "message": "Auto merge of #109043 - matthiaskrgr:rollup-genkz0e, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #108726 (tidy: enforce comment blocks to have an even number of backticks)\n - #108797 (Allow binary files to go through the `FileLoader`)\n - #108841 (Add suggestion to diagnostic when user has array but trait wants slice. (rebased))\n - #108984 (bootstrap: document tidy)\n - #109013 (Give proper error message when tcx wasn't passed to decoder)\n - #109017 (remove duplicated calls to sort_string)\n - #109018 (Expand on the allocator comment in `rustc-main`)\n - #109028 (Add eslint checks for rustdoc-js tester)\n - #109034 (Commit some tests for the new solver + lazy norm)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "884da1d0a42415c5c2aac83cac2d7f7f2b8d8df9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/884da1d0a42415c5c2aac83cac2d7f7f2b8d8df9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24c0b81c1fd5de8e00276524896d3352ed91a8cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24c0b81c1fd5de8e00276524896d3352ed91a8cb", "html_url": "https://github.com/rust-lang/rust/commit/24c0b81c1fd5de8e00276524896d3352ed91a8cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24c0b81c1fd5de8e00276524896d3352ed91a8cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "150cb381471533050751111e5faf1d9f05c02f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/150cb381471533050751111e5faf1d9f05c02f77", "html_url": "https://github.com/rust-lang/rust/commit/150cb381471533050751111e5faf1d9f05c02f77"}, {"sha": "3166b4a24599aa4237fae54ac7d8054fb7048b75", "url": "https://api.github.com/repos/rust-lang/rust/commits/3166b4a24599aa4237fae54ac7d8054fb7048b75", "html_url": "https://github.com/rust-lang/rust/commit/3166b4a24599aa4237fae54ac7d8054fb7048b75"}], "stats": {"total": 1001, "additions": 914, "deletions": 87}, "files": [{"sha": "434b978ae3151caa16781f2cddca9c9f5b8e5b46", "filename": "compiler/rustc/src/main.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc%2Fsrc%2Fmain.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -24,6 +24,15 @@\n // The two crates we link to here, `std` and `rustc_driver`, are both dynamic\n // libraries. So we must reference jemalloc symbols one way or another, because\n // this file is the only object code in the rustc executable.\n+//\n+// NOTE: if you are reading this comment because you want to set a custom `global_allocator` for\n+// benchmarking, consider using the benchmarks in the `rustc-perf` collector suite instead:\n+// https://github.com/rust-lang/rustc-perf/blob/master/collector/README.md#profiling\n+//\n+// NOTE: if you are reading this comment because you want to replace jemalloc with another allocator\n+// to compare their performance, see\n+// https://github.com/rust-lang/rust/commit/b90cfc887c31c3e7a9e6d462e2464db1fe506175#diff-43914724af6e464c1da2171e4a9b6c7e607d5bc1203fa95c0ab85be4122605ef\n+// for an example of how to do so.\n \n #[unix_sigpipe = \"sig_dfl\"]\n fn main() {"}, {"sha": "6b3053fdfac7e81ca8f5efc57cf9b9f61b5aef7a", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -1052,6 +1052,7 @@ impl<'a> MethodDef<'a> {\n     ///         ::core::hash::Hash::hash(&{ self.y }, state)\n     ///     }\n     /// }\n+    /// ```\n     fn expand_struct_method_body<'b>(\n         &self,\n         cx: &mut ExtCtxt<'_>,"}, {"sha": "978141917c6b0cac9882ab22b0d0445084de4fd8", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/native.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -438,6 +438,7 @@ fn build_enum_variant_member_di_node<'ll, 'tcx>(\n ///         DW_TAG_structure_type            (type of variant 1)\n ///         DW_TAG_structure_type            (type of variant 2)\n ///         DW_TAG_structure_type            (type of variant 3)\n+/// ```\n struct VariantMemberInfo<'a, 'll> {\n     variant_index: VariantIdx,\n     variant_name: Cow<'a, str>,"}, {"sha": "b18e8758d712e60ef96f2279efd66ec9cce2c26e", "filename": "compiler/rustc_error_codes/src/error_codes/E0368.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0368.md", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0368.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0368.md?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -41,7 +41,7 @@ impl Add for Foo {\n \n fn main() {\n     let mut x: Foo = Foo(5);\n-    x += Foo(7); // error, `+= cannot be applied to the type `Foo`\n+    x += Foo(7); // error, `+=` cannot be applied to the type `Foo`\n }\n ```\n "}, {"sha": "84d55d524267ebbdf9130a356dd6cd8fde8c763b", "filename": "compiler/rustc_error_codes/src/error_codes/E0710.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0710.md", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0710.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0710.md?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -3,14 +3,14 @@ An unknown tool name was found in a scoped lint.\n Erroneous code examples:\n \n ```compile_fail,E0710\n-#[allow(clipp::filter_map)] // error!`\n+#[allow(clipp::filter_map)] // error!\n fn main() {\n     // business logic\n }\n ```\n \n ```compile_fail,E0710\n-#[warn(clipp::filter_map)] // error!`\n+#[warn(clipp::filter_map)] // error!\n fn main() {\n     // business logic\n }"}, {"sha": "773ac0e40c571c433d9c4fbb32c05593735c48c6", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -398,7 +398,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///\n     /// Here:\n     /// - E would be `fn(&u32) -> &u32`.\n-    /// - S would be `fn(&u32) ->\n+    /// - S would be `fn(&u32) -> ?T`\n     /// - E' is `&'!0 u32 -> &'!0 u32`\n     /// - S' is `&'?0 u32 -> ?T`\n     ///"}, {"sha": "22c1e3871175e8782a946e7c102c7f7dedf275dc", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let (mention_influencer, influencer_point) =\n             if sup_origin.span().overlaps(param.param_ty_span) {\n                 // Account for `async fn` like in `async-await/issues/issue-62097.rs`.\n-                // The desugaring of `async `fn`s causes `sup_origin` and `param` to point at the same\n+                // The desugaring of `async fn`s causes `sup_origin` and `param` to point at the same\n                 // place (but with different `ctxt`, hence `overlaps` instead of `==` above).\n                 //\n                 // This avoids the following:"}, {"sha": "771fb0911343715276c3eba48b9c32e65e379253", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -311,8 +311,11 @@ impl<T: ParameterizedOverTcx> LazyArray<T> {\n impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n     #[inline]\n     fn tcx(&self) -> TyCtxt<'tcx> {\n-        debug_assert!(self.tcx.is_some(), \"missing TyCtxt in DecodeContext\");\n-        self.tcx.unwrap()\n+        let Some(tcx) = self.tcx else {\n+            bug!(\"No TyCtxt found for decoding. \\\n+                You need to explicitly pass `(crate_metadata_ref, tcx)` to `decode` instead of just `crate_metadata_ref`.\");\n+        };\n+        tcx\n     }\n \n     #[inline]\n@@ -454,7 +457,12 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ast::AttrId {\n impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {\n     fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {\n         let cdata = decoder.cdata();\n-        let sess = decoder.sess.unwrap();\n+\n+        let Some(sess) = decoder.sess else {\n+            bug!(\"Cannot decode SyntaxContext without Session.\\\n+                You need to explicitly pass `(crate_metadata_ref, tcx)` to `decode` instead of just `crate_metadata_ref`.\");\n+        };\n+\n         let cname = cdata.root.name;\n         rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {\n             debug!(\"SpecializedDecoder<SyntaxContext>: decoding {}\", id);\n@@ -471,7 +479,11 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {\n impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {\n     fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {\n         let local_cdata = decoder.cdata();\n-        let sess = decoder.sess.unwrap();\n+\n+        let Some(sess) = decoder.sess else {\n+            bug!(\"Cannot decode ExpnId without Session. \\\n+                You need to explicitly pass `(crate_metadata_ref, tcx)` to `decode` instead of just `crate_metadata_ref`.\");\n+        };\n \n         let cnum = CrateNum::decode(decoder);\n         let index = u32::decode(decoder);\n@@ -520,7 +532,8 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {\n         let hi = lo + len;\n \n         let Some(sess) = decoder.sess else {\n-            bug!(\"Cannot decode Span without Session.\")\n+            bug!(\"Cannot decode Span without Session. \\\n+                You need to explicitly pass `(crate_metadata_ref, tcx)` to `decode` instead of just `crate_metadata_ref`.\")\n         };\n \n         // Index of the file in the corresponding crate's list of encoded files."}, {"sha": "7e51953599d5a17fdf7b8a27669bd3086a5029f3", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -123,6 +123,7 @@ fn dump_matched_mir_node<'tcx, F>(\n         // see notes on #41697 above\n         let def_path =\n             ty::print::with_forced_impl_filename_line!(tcx.def_path_str(body.source.def_id()));\n+        // ignore-tidy-odd-backticks the literal below is fine\n         write!(file, \"// MIR for `{}\", def_path)?;\n         match body.source.promoted {\n             None => write!(file, \"`\")?,"}, {"sha": "aff6c77e039af5e8b3d5e41426c1012a9d30fd13", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -151,12 +151,8 @@ impl<'tcx> TypeError<'tcx> {\n             .into(),\n             RegionsPlaceholderMismatch => \"one type is more general than the other\".into(),\n             ArgumentSorts(values, _) | Sorts(values) => {\n-                let mut expected = values.expected.sort_string(tcx);\n-                let mut found = values.found.sort_string(tcx);\n-                if expected == found {\n-                    expected = values.expected.sort_string(tcx);\n-                    found = values.found.sort_string(tcx);\n-                }\n+                let expected = values.expected.sort_string(tcx);\n+                let found = values.found.sort_string(tcx);\n                 report_maybe_different(&expected, &found).into()\n             }\n             Traits(values) => {"}, {"sha": "3fb8a6db2d27a61029ec7ba4255334a2a6751986", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -1886,6 +1886,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // let place = Foo::new();\n         // match place { Foo { .. } if { let tmp1 = &place; inspect(*tmp1) }\n         //     => { let tmp2 = place; feed(tmp2) }, ... }\n+        // ```\n         //\n         // And an input like:\n         //"}, {"sha": "a1cb810a4293bbc7e0e6d2fd9701d0ebe6f00688", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -100,6 +100,9 @@ pub trait FileLoader {\n \n     /// Read the contents of a UTF-8 file into memory.\n     fn read_file(&self, path: &Path) -> io::Result<String>;\n+\n+    /// Read the contents of a potentially non-UTF-8 file into memory.\n+    fn read_binary_file(&self, path: &Path) -> io::Result<Vec<u8>>;\n }\n \n /// A FileLoader that uses std::fs to load real files.\n@@ -113,6 +116,10 @@ impl FileLoader for RealFileLoader {\n     fn read_file(&self, path: &Path) -> io::Result<String> {\n         fs::read_to_string(path)\n     }\n+\n+    fn read_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {\n+        fs::read(path)\n+    }\n }\n \n /// This is a [SourceFile] identifier that is used to correlate source files between\n@@ -220,9 +227,7 @@ impl SourceMap {\n     /// Unlike `load_file`, guarantees that no normalization like BOM-removal\n     /// takes place.\n     pub fn load_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {\n-        // Ideally, this should use `self.file_loader`, but it can't\n-        // deal with binary files yet.\n-        let bytes = fs::read(path)?;\n+        let bytes = self.file_loader.read_binary_file(path)?;\n \n         // We need to add file to the `SourceMap`, so that it is present\n         // in dep-info. There's also an edge case that file might be both"}, {"sha": "72b1b35e79b155597c7b3ef0b17034d9c8d82107", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -248,7 +248,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n     ///\n     /// To deal with this, we first try to normalize the self type and add the candidates for the normalized\n     /// self type to the list of candidates in case that succeeds. Note that we can't just eagerly return in\n-    /// this case as projections as self types add `\n+    /// this case as projections as self types add\n+    // FIXME complete the unfinished sentence above\n     fn assemble_candidates_after_normalizing_self_ty<G: GoalKind<'tcx>>(\n         &mut self,\n         goal: Goal<'tcx, G>,"}, {"sha": "704b0d0bd1cec99e1e1ab6ead50ddd4c02c15442", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -1024,7 +1024,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             // Can't show anything else useful, try to find similar impls.\n                             let impl_candidates = self.find_similar_impl_candidates(trait_predicate);\n                             if !self.report_similar_impl_candidates(\n-                                impl_candidates,\n+                                &impl_candidates,\n                                 trait_ref,\n                                 body_def_id,\n                                 &mut err,\n@@ -1060,14 +1060,21 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                     let impl_candidates =\n                                         self.find_similar_impl_candidates(trait_pred);\n                                     self.report_similar_impl_candidates(\n-                                        impl_candidates,\n+                                        &impl_candidates,\n                                         trait_ref,\n                                         body_def_id,\n                                         &mut err,\n                                         true,\n                                     );\n                                 }\n                             }\n+\n+                            self.maybe_suggest_convert_to_slice(\n+                                &mut err,\n+                                trait_ref,\n+                                impl_candidates.as_slice(),\n+                                span,\n+                            );\n                         }\n \n                         // Changing mutability doesn't make a difference to whether we have\n@@ -1514,7 +1521,7 @@ trait InferCtxtPrivExt<'tcx> {\n \n     fn report_similar_impl_candidates(\n         &self,\n-        impl_candidates: Vec<ImplCandidate<'tcx>>,\n+        impl_candidates: &[ImplCandidate<'tcx>],\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         body_def_id: LocalDefId,\n         err: &mut Diagnostic,\n@@ -2004,7 +2011,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n     fn report_similar_impl_candidates(\n         &self,\n-        impl_candidates: Vec<ImplCandidate<'tcx>>,\n+        impl_candidates: &[ImplCandidate<'tcx>],\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         body_def_id: LocalDefId,\n         err: &mut Diagnostic,\n@@ -2113,7 +2120,8 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         // Prefer more similar candidates first, then sort lexicographically\n         // by their normalized string representation.\n         let mut normalized_impl_candidates_and_similarities = impl_candidates\n-            .into_iter()\n+            .iter()\n+            .copied()\n             .map(|ImplCandidate { trait_ref, similarity }| {\n                 // FIXME(compiler-errors): This should be using `NormalizeExt::normalize`\n                 let normalized = self\n@@ -2326,7 +2334,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             );\n                             if impl_candidates.len() < 10 {\n                                 self.report_similar_impl_candidates(\n-                                    impl_candidates,\n+                                    impl_candidates.as_slice(),\n                                     trait_ref,\n                                     obligation.cause.body_id,\n                                     &mut err,"}, {"sha": "11567ff39ddcb5883b82b0cd319f7fe4aaad561f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 77, "deletions": 2, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -1,7 +1,7 @@\n // ignore-tidy-filelength\n \n use super::{\n-    DefIdOrName, FindExprBySpan, Obligation, ObligationCause, ObligationCauseCode,\n+    DefIdOrName, FindExprBySpan, ImplCandidate, Obligation, ObligationCause, ObligationCauseCode,\n     PredicateObligation,\n };\n \n@@ -382,6 +382,14 @@ pub trait TypeErrCtxtExt<'tcx> {\n         body_id: hir::HirId,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Vec<Option<(Span, (DefId, Ty<'tcx>))>>;\n+\n+    fn maybe_suggest_convert_to_slice(\n+        &self,\n+        err: &mut Diagnostic,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n+        candidate_impls: &[ImplCandidate<'tcx>],\n+        span: Span,\n+    );\n }\n \n fn predicate_constraint(generics: &hir::Generics<'_>, pred: ty::Predicate<'_>) -> (Span, String) {\n@@ -2220,7 +2228,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         // - `BuiltinDerivedObligation` with a generator witness (A)\n         // - `BuiltinDerivedObligation` with a generator (A)\n         // - `BuiltinDerivedObligation` with `impl std::future::Future` (A)\n-        // - `BindingObligation` with `impl_send (Send requirement)\n+        // - `BindingObligation` with `impl_send` (Send requirement)\n         //\n         // The first obligation in the chain is the most useful and has the generator that captured\n         // the type. The last generator (`outer_generator` below) has information about where the\n@@ -3826,6 +3834,73 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n         assocs_in_this_method\n     }\n+\n+    /// If the type that failed selection is an array or a reference to an array,\n+    /// but the trait is implemented for slices, suggest that the user converts\n+    /// the array into a slice.\n+    fn maybe_suggest_convert_to_slice(\n+        &self,\n+        err: &mut Diagnostic,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n+        candidate_impls: &[ImplCandidate<'tcx>],\n+        span: Span,\n+    ) {\n+        // Three cases where we can make a suggestion:\n+        // 1. `[T; _]` (array of T)\n+        // 2. `&[T; _]` (reference to array of T)\n+        // 3. `&mut [T; _]` (mutable reference to array of T)\n+        let (element_ty, mut mutability) = match *trait_ref.skip_binder().self_ty().kind() {\n+            ty::Array(element_ty, _) => (element_ty, None),\n+\n+            ty::Ref(_, pointee_ty, mutability) => match *pointee_ty.kind() {\n+                ty::Array(element_ty, _) => (element_ty, Some(mutability)),\n+                _ => return,\n+            },\n+\n+            _ => return,\n+        };\n+\n+        // Go through all the candidate impls to see if any of them is for\n+        // slices of `element_ty` with `mutability`.\n+        let mut is_slice = |candidate: Ty<'tcx>| match *candidate.kind() {\n+            ty::RawPtr(ty::TypeAndMut { ty: t, mutbl: m }) | ty::Ref(_, t, m) => {\n+                if matches!(*t.kind(), ty::Slice(e) if e == element_ty)\n+                    && m == mutability.unwrap_or(m)\n+                {\n+                    // Use the candidate's mutability going forward.\n+                    mutability = Some(m);\n+                    true\n+                } else {\n+                    false\n+                }\n+            }\n+            _ => false,\n+        };\n+\n+        // Grab the first candidate that matches, if any, and make a suggestion.\n+        if let Some(slice_ty) = candidate_impls\n+            .iter()\n+            .map(|trait_ref| trait_ref.trait_ref.self_ty())\n+            .filter(|t| is_slice(*t))\n+            .next()\n+        {\n+            let msg = &format!(\"convert the array to a `{}` slice instead\", slice_ty);\n+\n+            if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                let mut suggestions = vec![];\n+                if snippet.starts_with('&') {\n+                } else if let Some(hir::Mutability::Mut) = mutability {\n+                    suggestions.push((span.shrink_to_lo(), \"&mut \".into()));\n+                } else {\n+                    suggestions.push((span.shrink_to_lo(), \"&\".into()));\n+                }\n+                suggestions.push((span.shrink_to_hi(), \"[..]\".into()));\n+                err.multipart_suggestion_verbose(msg, suggestions, Applicability::MaybeIncorrect);\n+            } else {\n+                err.span_help(span, msg);\n+            }\n+        }\n+    }\n }\n \n /// Add a hint to add a missing borrow or remove an unnecessary one."}, {"sha": "3a053d4c6a997da7434fb893353cafac17831cfb", "filename": "compiler/rustc_type_ir/src/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -18,7 +18,7 @@\n //!     It defines a \"skeleton\" of how they should be folded.\n //! - `TypeSuperFoldable`. This is implemented only for each type of interest,\n //!   and defines the folding \"skeleton\" for these types.\n-//! - `TypeFolder`/`FallibleTypeFolder. One of these is implemented for each\n+//! - `TypeFolder`/`FallibleTypeFolder`. One of these is implemented for each\n //!   folder. This defines how types of interest are folded.\n //!\n //! This means each fold is a mixture of (a) generic folding operations, and (b)"}, {"sha": "bb07ca1908e1c28927e8bee568734df6f47eb985", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -741,6 +741,7 @@ impl<'a> Builder<'a> {\n                 doc::EmbeddedBook,\n                 doc::EditionGuide,\n                 doc::StyleGuide,\n+                doc::Tidy,\n             ),\n             Kind::Dist => describe!(\n                 dist::Docs,"}, {"sha": "36fdd4abf4ffce6c02e61c9c31d1072a7a080923", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -882,6 +882,7 @@ tool_doc!(\n         // \"cargo-credential-wincred\",\n     ]\n );\n+tool_doc!(Tidy, \"tidy\", \"src/tools/tidy\", [\"tidy\"]);\n \n #[derive(Ord, PartialOrd, Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct ErrorIndex {"}, {"sha": "9141d3e8a48c259315b1be3977c52c7cb9c137b5", "filename": "src/ci/docker/host-x86_64/mingw-check/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -52,4 +52,5 @@ ENV SCRIPT python3 ../x.py --stage 2 test src/tools/expand-yaml-anchors && \\\n            reuse lint && \\\n            # Runs checks to ensure that there are no ES5 issues in our JS code.\n            es-check es6 ../src/librustdoc/html/static/js/*.js && \\\n-           eslint -c ../src/librustdoc/html/static/.eslintrc.js ../src/librustdoc/html/static/js/*.js\n+           eslint -c ../src/librustdoc/html/static/.eslintrc.js ../src/librustdoc/html/static/js/*.js && \\\n+           eslint -c ../src/tools/rustdoc-js/.eslintrc.js ../src/tools/rustdoc-js/tester.js"}, {"sha": "4ab3a315733098588a6313c50b2f97155de3ff0e", "filename": "src/tools/rustdoc-js/.eslintrc.js", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/src%2Ftools%2Frustdoc-js%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/src%2Ftools%2Frustdoc-js%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2F.eslintrc.js?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -0,0 +1,96 @@\n+module.exports = {\n+    \"env\": {\n+        \"browser\": true,\n+        \"node\": true,\n+        \"es6\": true\n+    },\n+    \"extends\": \"eslint:recommended\",\n+    \"parserOptions\": {\n+        \"ecmaVersion\": 2015,\n+        \"sourceType\": \"module\"\n+    },\n+    \"rules\": {\n+        \"linebreak-style\": [\n+            \"error\",\n+            \"unix\"\n+        ],\n+        \"semi\": [\n+            \"error\",\n+            \"always\"\n+        ],\n+        \"quotes\": [\n+            \"error\",\n+            \"double\"\n+        ],\n+        \"linebreak-style\": [\n+            \"error\",\n+            \"unix\"\n+        ],\n+        \"no-trailing-spaces\": \"error\",\n+        \"no-var\": [\"error\"],\n+        \"prefer-const\": [\"error\"],\n+        \"prefer-arrow-callback\": [\"error\"],\n+        \"brace-style\": [\n+            \"error\",\n+            \"1tbs\",\n+            { \"allowSingleLine\": false }\n+        ],\n+        \"keyword-spacing\": [\n+            \"error\",\n+            { \"before\": true, \"after\": true }\n+        ],\n+        \"arrow-spacing\": [\n+            \"error\",\n+            { \"before\": true, \"after\": true }\n+        ],\n+        \"key-spacing\": [\n+            \"error\",\n+            { \"beforeColon\": false, \"afterColon\": true, \"mode\": \"strict\" }\n+        ],\n+        \"func-call-spacing\": [\"error\", \"never\"],\n+        \"space-infix-ops\": \"error\",\n+        \"space-before-function-paren\": [\"error\", \"never\"],\n+        \"space-before-blocks\": \"error\",\n+        \"comma-dangle\": [\"error\", \"always-multiline\"],\n+        \"comma-style\": [\"error\", \"last\"],\n+        \"max-len\": [\"error\", { \"code\": 100, \"tabWidth\": 4 }],\n+        \"eol-last\": [\"error\", \"always\"],\n+        \"arrow-parens\": [\"error\", \"as-needed\"],\n+        \"no-unused-vars\": [\n+            \"error\",\n+            {\n+                \"argsIgnorePattern\": \"^_\",\n+                \"varsIgnorePattern\": \"^_\"\n+            }\n+        ],\n+        \"eqeqeq\": \"error\",\n+        \"no-const-assign\": \"error\",\n+        \"no-debugger\": \"error\",\n+        \"no-dupe-args\": \"error\",\n+        \"no-dupe-else-if\": \"error\",\n+        \"no-dupe-keys\": \"error\",\n+        \"no-duplicate-case\": \"error\",\n+        \"no-ex-assign\": \"error\",\n+        \"no-fallthrough\": \"error\",\n+        \"no-invalid-regexp\": \"error\",\n+        \"no-import-assign\": \"error\",\n+        \"no-self-compare\": \"error\",\n+        \"no-template-curly-in-string\": \"error\",\n+        \"block-scoped-var\": \"error\",\n+        \"guard-for-in\": \"error\",\n+        \"no-alert\": \"error\",\n+        \"no-confusing-arrow\": \"error\",\n+        \"no-div-regex\": \"error\",\n+        \"no-floating-decimal\": \"error\",\n+        \"no-implicit-globals\": \"error\",\n+        \"no-implied-eval\": \"error\",\n+        \"no-label-var\": \"error\",\n+        \"no-lonely-if\": \"error\",\n+        \"no-mixed-operators\": \"error\",\n+        \"no-multi-assign\": \"error\",\n+        \"no-return-assign\": \"error\",\n+        \"no-script-url\": \"error\",\n+        \"no-sequences\": \"error\",\n+        \"no-div-regex\": \"error\",\n+    }\n+};"}, {"sha": "8d46a8ce7f1b279db5367f9e668f5157fac61e9b", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 46, "deletions": 44, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -1,5 +1,5 @@\n-const fs = require('fs');\n-const path = require('path');\n+const fs = require(\"fs\");\n+const path = require(\"path\");\n \n function loadContent(content) {\n     const Module = module.constructor;\n@@ -15,7 +15,7 @@ function loadContent(content) {\n }\n \n function readFile(filePath) {\n-    return fs.readFileSync(filePath, 'utf8');\n+    return fs.readFileSync(filePath, \"utf8\");\n }\n \n function contentToDiffLine(key, value) {\n@@ -25,41 +25,41 @@ function contentToDiffLine(key, value) {\n // This function is only called when no matching result was found and therefore will only display\n // the diff between the two items.\n function betterLookingDiff(entry, data) {\n-    let output = ' {\\n';\n-    const spaces = '     ';\n+    let output = \" {\\n\";\n+    const spaces = \"     \";\n     for (const key in entry) {\n-        if (!entry.hasOwnProperty(key)) {\n+        if (!Object.prototype.hasOwnProperty.call(entry, key)) {\n             continue;\n         }\n-        if (!data || !data.hasOwnProperty(key)) {\n-            output += '-' + spaces + contentToDiffLine(key, entry[key]) + '\\n';\n+        if (!data || !Object.prototype.hasOwnProperty.call(data, key)) {\n+            output += \"-\" + spaces + contentToDiffLine(key, entry[key]) + \"\\n\";\n             continue;\n         }\n         const value = data[key];\n         if (value !== entry[key]) {\n-            output += '-' + spaces + contentToDiffLine(key, entry[key]) + '\\n';\n-            output += '+' + spaces + contentToDiffLine(key, value) + '\\n';\n+            output += \"-\" + spaces + contentToDiffLine(key, entry[key]) + \"\\n\";\n+            output += \"+\" + spaces + contentToDiffLine(key, value) + \"\\n\";\n         } else {\n-            output += spaces + contentToDiffLine(key, value) + '\\n';\n+            output += spaces + contentToDiffLine(key, value) + \"\\n\";\n         }\n     }\n-    return output + ' }';\n+    return output + \" }\";\n }\n \n function lookForEntry(entry, data) {\n     return data.findIndex(data_entry => {\n         let allGood = true;\n         for (const key in entry) {\n-            if (!entry.hasOwnProperty(key)) {\n+            if (!Object.prototype.hasOwnProperty.call(entry, key)) {\n                 continue;\n             }\n             let value = data_entry[key];\n             // To make our life easier, if there is a \"parent\" type, we add it to the path.\n-            if (key === 'path' && data_entry['parent'] !== undefined) {\n+            if (key === \"path\" && data_entry[\"parent\"] !== undefined) {\n                 if (value.length > 0) {\n-                    value += '::' + data_entry['parent']['name'];\n+                    value += \"::\" + data_entry[\"parent\"][\"name\"];\n                 } else {\n-                    value = data_entry['parent']['name'];\n+                    value = data_entry[\"parent\"][\"name\"];\n                 }\n             }\n             if (value !== entry[key]) {\n@@ -95,7 +95,7 @@ function checkNeededFields(fullPath, expected, error_text, queryName, position)\n         fieldsToCheck = [];\n     }\n     for (const field of fieldsToCheck) {\n-        if (!expected.hasOwnProperty(field)) {\n+        if (!Object.prototype.hasOwnProperty.call(expected, field)) {\n             let text = `${queryName}==> Mandatory key \\`${field}\\` is not present`;\n             if (fullPath.length > 0) {\n                 text += ` in field \\`${fullPath}\\``;\n@@ -117,22 +117,22 @@ function valueCheck(fullPath, expected, result, error_text, queryName) {\n                 error_text.push(`${queryName}==> EXPECTED has extra value in array from field ` +\n                     `\\`${fullPath}\\` (position ${i}): \\`${JSON.stringify(expected[i])}\\``);\n             } else {\n-                valueCheck(fullPath + '[' + i + ']', expected[i], result[i], error_text, queryName);\n+                valueCheck(fullPath + \"[\" + i + \"]\", expected[i], result[i], error_text, queryName);\n             }\n         }\n         for (; i < result.length; ++i) {\n             error_text.push(`${queryName}==> RESULT has extra value in array from field ` +\n                 `\\`${fullPath}\\` (position ${i}): \\`${JSON.stringify(result[i])}\\` ` +\n-                'compared to EXPECTED');\n+                \"compared to EXPECTED\");\n         }\n     } else if (expected !== null && typeof expected !== \"undefined\" &&\n-               expected.constructor == Object) {\n+               expected.constructor == Object) { // eslint-disable-line eqeqeq\n         for (const key in expected) {\n-            if (!expected.hasOwnProperty(key)) {\n+            if (!Object.prototype.hasOwnProperty.call(expected, key)) {\n                 continue;\n             }\n-            if (!result.hasOwnProperty(key)) {\n-                error_text.push('==> Unknown key \"' + key + '\"');\n+            if (!Object.prototype.hasOwnProperty.call(result, key)) {\n+                error_text.push(\"==> Unknown key \\\"\" + key + \"\\\"\");\n                 break;\n             }\n             let result_v = result[key];\n@@ -147,13 +147,13 @@ function valueCheck(fullPath, expected, result, error_text, queryName) {\n                 });\n                 result_v = result_v.join(\"\");\n             }\n-            const obj_path = fullPath + (fullPath.length > 0 ? '.' : '') + key;\n+            const obj_path = fullPath + (fullPath.length > 0 ? \".\" : \"\") + key;\n             valueCheck(obj_path, expected[key], result_v, error_text, queryName);\n         }\n     } else {\n         const expectedValue = JSON.stringify(expected);\n         const resultValue = JSON.stringify(result);\n-        if (expectedValue != resultValue) {\n+        if (expectedValue !== resultValue) {\n             error_text.push(`${queryName}==> Different values for field \\`${fullPath}\\`:\\n` +\n                 `EXPECTED: \\`${expectedValue}\\`\\nRESULT:   \\`${resultValue}\\``);\n         }\n@@ -164,7 +164,7 @@ function runParser(query, expected, parseQuery, queryName) {\n     const error_text = [];\n     checkNeededFields(\"\", expected, error_text, queryName, null);\n     if (error_text.length === 0) {\n-        valueCheck('', expected, parseQuery(query), error_text, queryName);\n+        valueCheck(\"\", expected, parseQuery(query), error_text, queryName);\n     }\n     return error_text;\n }\n@@ -177,16 +177,16 @@ function runSearch(query, expected, doSearch, loadedFile, queryName) {\n     const error_text = [];\n \n     for (const key in expected) {\n-        if (!expected.hasOwnProperty(key)) {\n+        if (!Object.prototype.hasOwnProperty.call(expected, key)) {\n             continue;\n         }\n-        if (!results.hasOwnProperty(key)) {\n-            error_text.push('==> Unknown key \"' + key + '\"');\n+        if (!Object.prototype.hasOwnProperty.call(results, key)) {\n+            error_text.push(\"==> Unknown key \\\"\" + key + \"\\\"\");\n             break;\n         }\n         const entry = expected[key];\n \n-        if (exact_check == true && entry.length !== results[key].length) {\n+        if (exact_check && entry.length !== results[key].length) {\n             error_text.push(queryName + \"==> Expected exactly \" + entry.length +\n                             \" results but found \" + results[key].length + \" in '\" + key + \"'\");\n         }\n@@ -268,7 +268,7 @@ function runCheck(loadedFile, key, callback) {\n function runChecks(testFile, doSearch, parseQuery) {\n     let checkExpected = false;\n     let checkParsed = false;\n-    let testFileContent = readFile(testFile) + 'exports.QUERY = QUERY;';\n+    let testFileContent = readFile(testFile) + \"exports.QUERY = QUERY;\";\n \n     if (testFileContent.indexOf(\"FILTER_CRATE\") !== -1) {\n         testFileContent += \"exports.FILTER_CRATE = FILTER_CRATE;\";\n@@ -277,11 +277,11 @@ function runChecks(testFile, doSearch, parseQuery) {\n     }\n \n     if (testFileContent.indexOf(\"\\nconst EXPECTED\") !== -1) {\n-        testFileContent += 'exports.EXPECTED = EXPECTED;';\n+        testFileContent += \"exports.EXPECTED = EXPECTED;\";\n         checkExpected = true;\n     }\n     if (testFileContent.indexOf(\"\\nconst PARSED\") !== -1) {\n-        testFileContent += 'exports.PARSED = PARSED;';\n+        testFileContent += \"exports.PARSED = PARSED;\";\n         checkParsed = true;\n     }\n     if (!checkParsed && !checkExpected) {\n@@ -325,7 +325,7 @@ function loadSearchJS(doc_folder, resource_suffix) {\n     const searchWords = searchModule.initSearch(searchIndex.searchIndex);\n \n     return {\n-        doSearch: function (queryStr, filterCrate, currentCrate) {\n+        doSearch: function(queryStr, filterCrate, currentCrate) {\n             return searchModule.execQuery(searchModule.parseQuery(queryStr), searchWords,\n                 filterCrate, currentCrate);\n         },\n@@ -361,22 +361,24 @@ function parseOptions(args) {\n     };\n \n     for (let i = 0; i < args.length; ++i) {\n-        if (correspondences.hasOwnProperty(args[i])) {\n+        const arg = args[i];\n+        if (Object.prototype.hasOwnProperty.call(correspondences, arg)) {\n             i += 1;\n             if (i >= args.length) {\n-                console.log(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n+                console.log(\"Missing argument after `\" + arg + \"` option.\");\n                 return null;\n             }\n-            if (args[i - 1] !== \"--test-file\") {\n-                opts[correspondences[args[i - 1]]] = args[i];\n+            const arg_value = args[i];\n+            if (arg !== \"--test-file\") {\n+                opts[correspondences[arg]] = arg_value;\n             } else {\n-                opts[correspondences[args[i - 1]]].push(args[i]);\n+                opts[correspondences[arg]].push(arg_value);\n             }\n-        } else if (args[i] === \"--help\") {\n+        } else if (arg === \"--help\") {\n             showHelp();\n             process.exit(0);\n         } else {\n-            console.log(\"Unknown option `\" + args[i] + \"`.\");\n+            console.log(\"Unknown option `\" + arg + \"`.\");\n             console.log(\"Use `--help` to see the list of options\");\n             return null;\n         }\n@@ -405,17 +407,17 @@ function main(argv) {\n     );\n     let errors = 0;\n \n-    const doSearch = function (queryStr, filterCrate) {\n+    const doSearch = function(queryStr, filterCrate) {\n         return parseAndSearch.doSearch(queryStr, filterCrate, opts[\"crate_name\"]);\n     };\n \n     if (opts[\"test_file\"].length !== 0) {\n-        opts[\"test_file\"].forEach(function (file) {\n+        opts[\"test_file\"].forEach(file => {\n             process.stdout.write(`Testing ${file} ... `);\n             errors += runChecks(file, doSearch, parseAndSearch.parseQuery);\n         });\n     } else if (opts[\"test_folder\"].length !== 0) {\n-        fs.readdirSync(opts[\"test_folder\"]).forEach(function (file) {\n+        fs.readdirSync(opts[\"test_folder\"]).forEach(file => {\n             if (!file.endsWith(\".js\")) {\n                 return;\n             }"}, {"sha": "75a4586cb7f1ce5f85b79d80e6a8e4999d3c7217", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 56, "deletions": 13, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -171,9 +171,9 @@ fn contains_ignore_directive(can_contain: bool, contents: &str, check: &str) ->\n }\n \n macro_rules! suppressible_tidy_err {\n-    ($err:ident, $skip:ident, $msg:expr) => {\n+    ($err:ident, $skip:ident, $msg:literal) => {\n         if let Directive::Deny = $skip {\n-            $err($msg);\n+            $err(&format!($msg));\n         } else {\n             $skip = Directive::Ignore(true);\n         }\n@@ -300,10 +300,13 @@ pub fn check(path: &Path, bad: &mut bool) {\n             contains_ignore_directive(can_contain, &contents, \"leading-newlines\");\n         let mut skip_copyright = contains_ignore_directive(can_contain, &contents, \"copyright\");\n         let mut skip_dbg = contains_ignore_directive(can_contain, &contents, \"dbg\");\n+        let mut skip_odd_backticks =\n+            contains_ignore_directive(can_contain, &contents, \"odd-backticks\");\n         let mut leading_new_lines = false;\n         let mut trailing_new_lines = 0;\n         let mut lines = 0;\n         let mut last_safety_comment = false;\n+        let mut comment_block: Option<(usize, usize)> = None;\n         let is_test = file.components().any(|c| c.as_os_str() == \"tests\");\n         // scanning the whole file for multiple needles at once is more efficient than\n         // executing lines times needles separate searches.\n@@ -351,7 +354,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 suppressible_tidy_err!(\n                     err,\n                     skip_line_length,\n-                    &format!(\"line longer than {max_columns} chars\")\n+                    \"line longer than {max_columns} chars\"\n                 );\n             }\n             if !is_style_file && line.contains('\\t') {\n@@ -415,15 +418,55 @@ pub fn check(path: &Path, bad: &mut bool) {\n \n             // For now only enforce in compiler\n             let is_compiler = || file.components().any(|c| c.as_os_str() == \"compiler\");\n-            if is_compiler()\n-                && line.contains(\"//\")\n-                && line\n-                    .chars()\n-                    .collect::<Vec<_>>()\n-                    .windows(4)\n-                    .any(|cs| matches!(cs, ['.', ' ', ' ', last] if last.is_alphabetic()))\n-            {\n-                err(DOUBLE_SPACE_AFTER_DOT)\n+\n+            if is_compiler() {\n+                if line.contains(\"//\")\n+                    && line\n+                        .chars()\n+                        .collect::<Vec<_>>()\n+                        .windows(4)\n+                        .any(|cs| matches!(cs, ['.', ' ', ' ', last] if last.is_alphabetic()))\n+                {\n+                    err(DOUBLE_SPACE_AFTER_DOT)\n+                }\n+\n+                if filename.ends_with(\".ftl\") {\n+                    let line_backticks = trimmed.chars().filter(|ch| *ch == '`').count();\n+                    if line_backticks % 2 == 1 {\n+                        suppressible_tidy_err!(err, skip_odd_backticks, \"odd number of backticks\");\n+                    }\n+                } else if trimmed.contains(\"//\") {\n+                    let (start_line, mut backtick_count) = comment_block.unwrap_or((i + 1, 0));\n+                    let line_backticks = trimmed.chars().filter(|ch| *ch == '`').count();\n+                    let comment_text = trimmed.split(\"//\").nth(1).unwrap();\n+                    // This check ensures that we don't lint for code that has `//` in a string literal\n+                    if line_backticks % 2 == 1 {\n+                        backtick_count += comment_text.chars().filter(|ch| *ch == '`').count();\n+                    }\n+                    comment_block = Some((start_line, backtick_count));\n+                } else {\n+                    if let Some((start_line, backtick_count)) = comment_block.take() {\n+                        if backtick_count % 2 == 1 {\n+                            let mut err = |msg: &str| {\n+                                tidy_error!(bad, \"{}:{start_line}: {msg}\", file.display());\n+                            };\n+                            let block_len = (i + 1) - start_line;\n+                            if block_len == 1 {\n+                                suppressible_tidy_err!(\n+                                    err,\n+                                    skip_odd_backticks,\n+                                    \"comment with odd number of backticks\"\n+                                );\n+                            } else {\n+                                suppressible_tidy_err!(\n+                                    err,\n+                                    skip_odd_backticks,\n+                                    \"{block_len}-line comment block with odd number of backticks\"\n+                                );\n+                            }\n+                        }\n+                    }\n+                }\n             }\n         }\n         if leading_new_lines {\n@@ -441,7 +484,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n             n => suppressible_tidy_err!(\n                 err,\n                 skip_trailing_newlines,\n-                &format!(\"too many trailing newlines ({n})\")\n+                \"too many trailing newlines ({n})\"\n             ),\n         };\n         if lines > LINES {"}, {"sha": "52863e22bb6fa2454d5a6b0b2a6469f2e029f993", "filename": "tests/ui/dst/issue-90528-unsizing-suggestion-1.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-1.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -0,0 +1,20 @@\n+// Issue #90528: provide helpful suggestions when a trait bound is unsatisfied\n+// due to a missed unsizing coercion.\n+//\n+// This test exercises array literals and a trait implemented on immutable slices.\n+\n+trait Read {}\n+\n+impl Read for &[u8] {}\n+\n+fn wants_read(_: impl Read) {}\n+\n+fn main() {\n+    wants_read([0u8]);\n+    //~^ ERROR the trait bound `[u8; 1]: Read` is not satisfied\n+    wants_read(&[0u8]);\n+    //~^ ERROR the trait bound `&[u8; 1]: Read` is not satisfied\n+    wants_read(&[0u8][..]);\n+    wants_read(&mut [0u8]);\n+    //~^ ERROR the trait bound `&mut [u8; 1]: Read` is not satisfied\n+}"}, {"sha": "27ef3fe97a5b0c3e9a5030d43073d61ff269aeb2", "filename": "tests/ui/dst/issue-90528-unsizing-suggestion-1.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-1.stderr?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -0,0 +1,56 @@\n+error[E0277]: the trait bound `[u8; 1]: Read` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-1.rs:13:16\n+   |\n+LL |     wants_read([0u8]);\n+   |     ---------- ^^^^^ the trait `Read` is not implemented for `[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Read` is implemented for `&[u8]`\n+note: required by a bound in `wants_read`\n+  --> $DIR/issue-90528-unsizing-suggestion-1.rs:10:23\n+   |\n+LL | fn wants_read(_: impl Read) {}\n+   |                       ^^^^ required by this bound in `wants_read`\n+help: convert the array to a `&[u8]` slice instead\n+   |\n+LL |     wants_read(&[0u8][..]);\n+   |                +     ++++\n+\n+error[E0277]: the trait bound `&[u8; 1]: Read` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-1.rs:15:16\n+   |\n+LL |     wants_read(&[0u8]);\n+   |     ---------- ^^^^^^ the trait `Read` is not implemented for `&[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Read` is implemented for `&[u8]`\n+note: required by a bound in `wants_read`\n+  --> $DIR/issue-90528-unsizing-suggestion-1.rs:10:23\n+   |\n+LL | fn wants_read(_: impl Read) {}\n+   |                       ^^^^ required by this bound in `wants_read`\n+help: convert the array to a `&[u8]` slice instead\n+   |\n+LL |     wants_read(&[0u8][..]);\n+   |                      ++++\n+\n+error[E0277]: the trait bound `&mut [u8; 1]: Read` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-1.rs:18:16\n+   |\n+LL |     wants_read(&mut [0u8]);\n+   |     ---------- ^^^^^^^^^^ the trait `Read` is not implemented for `&mut [u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Read` is implemented for `&[u8]`\n+note: required by a bound in `wants_read`\n+  --> $DIR/issue-90528-unsizing-suggestion-1.rs:10:23\n+   |\n+LL | fn wants_read(_: impl Read) {}\n+   |                       ^^^^ required by this bound in `wants_read`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f2762ad421ba5fdac64a95a54e1ade7303cda4b6", "filename": "tests/ui/dst/issue-90528-unsizing-suggestion-2.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-2.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -0,0 +1,28 @@\n+// Issue #90528: provide helpful suggestions when a trait bound is unsatisfied\n+// due to a missed unsizing coercion.\n+//\n+// This test exercises array variables and a trait implemented on immmutable slices.\n+\n+trait Read {}\n+\n+impl Read for &[u8] {}\n+\n+fn wants_read(_: impl Read) {}\n+\n+fn main() {\n+    let x = [0u8];\n+    wants_read(x);\n+    //~^ ERROR the trait bound `[u8; 1]: Read` is not satisfied\n+    wants_read(&x);\n+    //~^ ERROR the trait bound `&[u8; 1]: Read` is not satisfied\n+    wants_read(&x[..]);\n+\n+    let x = &[0u8];\n+    wants_read(x);\n+    //~^ ERROR the trait bound `&[u8; 1]: Read` is not satisfied\n+    wants_read(&x);\n+    //~^ ERROR the trait bound `&&[u8; 1]: Read` is not satisfied\n+    wants_read(*x);\n+    //~^ ERROR the trait bound `[u8; 1]: Read` is not satisfied\n+    wants_read(&x[..]);\n+}"}, {"sha": "ae0c4ca506ab252b3dd6aacab5674734753843c8", "filename": "tests/ui/dst/issue-90528-unsizing-suggestion-2.stderr", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-2.stderr?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -0,0 +1,94 @@\n+error[E0277]: the trait bound `[u8; 1]: Read` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:14:16\n+   |\n+LL |     wants_read(x);\n+   |     ---------- ^ the trait `Read` is not implemented for `[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Read` is implemented for `&[u8]`\n+note: required by a bound in `wants_read`\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:10:23\n+   |\n+LL | fn wants_read(_: impl Read) {}\n+   |                       ^^^^ required by this bound in `wants_read`\n+help: convert the array to a `&[u8]` slice instead\n+   |\n+LL |     wants_read(&x[..]);\n+   |                + ++++\n+\n+error[E0277]: the trait bound `&[u8; 1]: Read` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:16:16\n+   |\n+LL |     wants_read(&x);\n+   |     ---------- ^^ the trait `Read` is not implemented for `&[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Read` is implemented for `&[u8]`\n+note: required by a bound in `wants_read`\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:10:23\n+   |\n+LL | fn wants_read(_: impl Read) {}\n+   |                       ^^^^ required by this bound in `wants_read`\n+help: convert the array to a `&[u8]` slice instead\n+   |\n+LL |     wants_read(&x[..]);\n+   |                  ++++\n+\n+error[E0277]: the trait bound `&[u8; 1]: Read` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:21:16\n+   |\n+LL |     wants_read(x);\n+   |     ---------- ^ the trait `Read` is not implemented for `&[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Read` is implemented for `&[u8]`\n+note: required by a bound in `wants_read`\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:10:23\n+   |\n+LL | fn wants_read(_: impl Read) {}\n+   |                       ^^^^ required by this bound in `wants_read`\n+help: convert the array to a `&[u8]` slice instead\n+   |\n+LL |     wants_read(&x[..]);\n+   |                + ++++\n+\n+error[E0277]: the trait bound `&&[u8; 1]: Read` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:23:16\n+   |\n+LL |     wants_read(&x);\n+   |     ---------- ^^ the trait `Read` is not implemented for `&&[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Read` is implemented for `&[u8]`\n+note: required by a bound in `wants_read`\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:10:23\n+   |\n+LL | fn wants_read(_: impl Read) {}\n+   |                       ^^^^ required by this bound in `wants_read`\n+\n+error[E0277]: the trait bound `[u8; 1]: Read` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:25:16\n+   |\n+LL |     wants_read(*x);\n+   |     ---------- ^^ the trait `Read` is not implemented for `[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Read` is implemented for `&[u8]`\n+note: required by a bound in `wants_read`\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:10:23\n+   |\n+LL | fn wants_read(_: impl Read) {}\n+   |                       ^^^^ required by this bound in `wants_read`\n+help: convert the array to a `&[u8]` slice instead\n+   |\n+LL |     wants_read(&*x[..]);\n+   |                +  ++++\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "218843d0500283acae775e01bbab52ea0cf4db99", "filename": "tests/ui/dst/issue-90528-unsizing-suggestion-3.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-3.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -0,0 +1,22 @@\n+// Issue #90528: provide helpful suggestions when a trait bound is unsatisfied\n+// due to a missed unsizing coercion.\n+//\n+// This test exercises array literals and a trait implemented on mutable slices.\n+\n+trait Write {}\n+\n+impl Write for &mut [u8] {}\n+\n+fn wants_write(_: impl Write) {}\n+\n+fn main() {\n+    wants_write([0u8]);\n+    //~^ ERROR the trait bound `[u8; 1]: Write` is not satisfied\n+    wants_write(&mut [0u8]);\n+    //~^ ERROR the trait bound `&mut [u8; 1]: Write` is not satisfied\n+    wants_write(&mut [0u8][..]);\n+    wants_write(&[0u8]);\n+    //~^ ERROR the trait bound `&[u8; 1]: Write` is not satisfied\n+    wants_write(&[0u8][..]);\n+    //~^ ERROR the trait bound `&[u8]: Write` is not satisfied\n+}"}, {"sha": "774d5ba3c892c378722377e61fe8b894879dbe26", "filename": "tests/ui/dst/issue-90528-unsizing-suggestion-3.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-3.stderr?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -0,0 +1,75 @@\n+error[E0277]: the trait bound `[u8; 1]: Write` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-3.rs:13:17\n+   |\n+LL |     wants_write([0u8]);\n+   |     ----------- ^^^^^ the trait `Write` is not implemented for `[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Write` is implemented for `&mut [u8]`\n+note: required by a bound in `wants_write`\n+  --> $DIR/issue-90528-unsizing-suggestion-3.rs:10:24\n+   |\n+LL | fn wants_write(_: impl Write) {}\n+   |                        ^^^^^ required by this bound in `wants_write`\n+help: convert the array to a `&mut [u8]` slice instead\n+   |\n+LL |     wants_write(&mut [0u8][..]);\n+   |                 ++++      ++++\n+\n+error[E0277]: the trait bound `&mut [u8; 1]: Write` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-3.rs:15:17\n+   |\n+LL |     wants_write(&mut [0u8]);\n+   |     ----------- ^^^^^^^^^^ the trait `Write` is not implemented for `&mut [u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Write` is implemented for `&mut [u8]`\n+note: required by a bound in `wants_write`\n+  --> $DIR/issue-90528-unsizing-suggestion-3.rs:10:24\n+   |\n+LL | fn wants_write(_: impl Write) {}\n+   |                        ^^^^^ required by this bound in `wants_write`\n+help: convert the array to a `&mut [u8]` slice instead\n+   |\n+LL |     wants_write(&mut [0u8][..]);\n+   |                           ++++\n+\n+error[E0277]: the trait bound `&[u8; 1]: Write` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-3.rs:18:17\n+   |\n+LL |     wants_write(&[0u8]);\n+   |     ----------- ^^^^^^ the trait `Write` is not implemented for `&[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Write` is implemented for `&mut [u8]`\n+note: required by a bound in `wants_write`\n+  --> $DIR/issue-90528-unsizing-suggestion-3.rs:10:24\n+   |\n+LL | fn wants_write(_: impl Write) {}\n+   |                        ^^^^^ required by this bound in `wants_write`\n+\n+error[E0277]: the trait bound `&[u8]: Write` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-3.rs:20:17\n+   |\n+LL |     wants_write(&[0u8][..]);\n+   |     ----------- ^^^^^^^^^^ the trait `Write` is not implemented for `&[u8]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Write` is implemented for `&mut [u8]`\n+note: required by a bound in `wants_write`\n+  --> $DIR/issue-90528-unsizing-suggestion-3.rs:10:24\n+   |\n+LL | fn wants_write(_: impl Write) {}\n+   |                        ^^^^^ required by this bound in `wants_write`\n+help: consider changing this borrow's mutability\n+   |\n+LL |     wants_write(&mut [0u8][..]);\n+   |                 ~~~~\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "eae953c61ff09aaafefb374410be203cfdfbe5c4", "filename": "tests/ui/dst/issue-90528-unsizing-suggestion-4.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-4.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -0,0 +1,26 @@\n+// Issue #90528: provide helpful suggestions when a trait bound is unsatisfied\n+// due to a missed unsizing coercion.\n+//\n+// This test exercises array variables and a trait implemented on mutable slices.\n+\n+trait Write {}\n+\n+impl Write for &mut [u8] {}\n+\n+fn wants_write(_: impl Write) {}\n+\n+fn main() {\n+    let mut x = [0u8];\n+    wants_write(x);\n+    //~^ ERROR the trait bound `[u8; 1]: Write` is not satisfied\n+    wants_write(&mut x);\n+    //~^ ERROR the trait bound `&mut [u8; 1]: Write` is not satisfied\n+    wants_write(&mut x[..]);\n+\n+    let x = &mut [0u8];\n+    wants_write(x);\n+    //~^ ERROR the trait bound `&mut [u8; 1]: Write` is not satisfied\n+    wants_write(*x);\n+    //~^ ERROR the trait bound `[u8; 1]: Write` is not satisfied\n+    wants_write(&mut x[..]);\n+}"}, {"sha": "a4020ee07080886439d524694fae889625a9d6a1", "filename": "tests/ui/dst/issue-90528-unsizing-suggestion-4.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-4.stderr?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -0,0 +1,79 @@\n+error[E0277]: the trait bound `[u8; 1]: Write` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-4.rs:14:17\n+   |\n+LL |     wants_write(x);\n+   |     ----------- ^ the trait `Write` is not implemented for `[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Write` is implemented for `&mut [u8]`\n+note: required by a bound in `wants_write`\n+  --> $DIR/issue-90528-unsizing-suggestion-4.rs:10:24\n+   |\n+LL | fn wants_write(_: impl Write) {}\n+   |                        ^^^^^ required by this bound in `wants_write`\n+help: convert the array to a `&mut [u8]` slice instead\n+   |\n+LL |     wants_write(&mut x[..]);\n+   |                 ++++  ++++\n+\n+error[E0277]: the trait bound `&mut [u8; 1]: Write` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-4.rs:16:17\n+   |\n+LL |     wants_write(&mut x);\n+   |     ----------- ^^^^^^ the trait `Write` is not implemented for `&mut [u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Write` is implemented for `&mut [u8]`\n+note: required by a bound in `wants_write`\n+  --> $DIR/issue-90528-unsizing-suggestion-4.rs:10:24\n+   |\n+LL | fn wants_write(_: impl Write) {}\n+   |                        ^^^^^ required by this bound in `wants_write`\n+help: convert the array to a `&mut [u8]` slice instead\n+   |\n+LL |     wants_write(&mut x[..]);\n+   |                       ++++\n+\n+error[E0277]: the trait bound `&mut [u8; 1]: Write` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-4.rs:21:17\n+   |\n+LL |     wants_write(x);\n+   |     ----------- ^ the trait `Write` is not implemented for `&mut [u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Write` is implemented for `&mut [u8]`\n+note: required by a bound in `wants_write`\n+  --> $DIR/issue-90528-unsizing-suggestion-4.rs:10:24\n+   |\n+LL | fn wants_write(_: impl Write) {}\n+   |                        ^^^^^ required by this bound in `wants_write`\n+help: convert the array to a `&mut [u8]` slice instead\n+   |\n+LL |     wants_write(&mut x[..]);\n+   |                 ++++  ++++\n+\n+error[E0277]: the trait bound `[u8; 1]: Write` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-4.rs:23:17\n+   |\n+LL |     wants_write(*x);\n+   |     ----------- ^^ the trait `Write` is not implemented for `[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Write` is implemented for `&mut [u8]`\n+note: required by a bound in `wants_write`\n+  --> $DIR/issue-90528-unsizing-suggestion-4.rs:10:24\n+   |\n+LL | fn wants_write(_: impl Write) {}\n+   |                        ^^^^^ required by this bound in `wants_write`\n+help: convert the array to a `&mut [u8]` slice instead\n+   |\n+LL |     wants_write(&mut *x[..]);\n+   |                 ++++   ++++\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "3b261062f782e6c1d227379a4fbb14d6a566d0b4", "filename": "tests/ui/traits/new-solver/cast-checks-handling-projections.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Fcast-checks-handling-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Fcast-checks-handling-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fcast-checks-handling-projections.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "previous_filename": "tests/ui/typeck/lazy-norm/cast-checks-handling-projections.rs"}, {"sha": "019c6e81c50e9affd64e64cc22d04a71a0660172", "filename": "tests/ui/traits/new-solver/equating-projection-cyclically.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Fequating-projection-cyclically.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Fequating-projection-cyclically.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fequating-projection-cyclically.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "previous_filename": "tests/ui/typeck/lazy-norm/equating-projection-cyclically.rs"}, {"sha": "57cbc65a17a925957d70dd881ed4c59badd55f8d", "filename": "tests/ui/traits/new-solver/equating-projection-cyclically.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Fequating-projection-cyclically.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Fequating-projection-cyclically.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fequating-projection-cyclically.stderr?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "previous_filename": "tests/ui/typeck/lazy-norm/equating-projection-cyclically.stderr"}, {"sha": "af00cbb3ba82749f529a25f1482ea4a8076fda65", "filename": "tests/ui/traits/new-solver/lazy-nested-obligations-1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Flazy-nested-obligations-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Flazy-nested-obligations-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Flazy-nested-obligations-1.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+// compile-flags: -Ztrait-solver=next\n+// Issue 94358\n+\n+fn foo<C>(_: C)\n+where\n+    for <'a> &'a C: IntoIterator,\n+    for <'a> <&'a C as IntoIterator>::IntoIter: ExactSizeIterator,\n+{}\n+\n+fn main() {\n+    foo::<_>(vec![true, false]);\n+}"}, {"sha": "32addd829dcfdf5f42c2a579efe6f67eb75346ab", "filename": "tests/ui/traits/new-solver/lazy-nested-obligations-2.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Flazy-nested-obligations-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Flazy-nested-obligations-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Flazy-nested-obligations-2.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+// compile-flags: -Ztrait-solver=next\n+// Issue 95863\n+\n+pub trait With {\n+    type F;\n+}\n+\n+impl With for i32 {\n+    type F = fn(&str);\n+}\n+\n+fn f(_: &str) {}\n+\n+fn main() {\n+    let _: V<i32> = V(f);\n+    pub struct V<T: With>(<T as With>::F);\n+\n+    pub enum E3<T: With> {\n+        Var(<T as With>::F),\n+    }\n+    let _: E3<i32> = E3::Var(f);\n+}"}, {"sha": "baf399572402311f00f01ca751a8769c931a6e61", "filename": "tests/ui/traits/new-solver/lazy-nested-obligations-3.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Flazy-nested-obligations-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Flazy-nested-obligations-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Flazy-nested-obligations-3.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -0,0 +1,38 @@\n+// check-pass\n+// compile-flags: -Ztrait-solver=next\n+// Issue 96750\n+\n+use std::marker::PhantomData;\n+\n+trait AsyncFn<Arg> {\n+    type Output;\n+}\n+trait RequestFamily {\n+    type Type<'a>;\n+}\n+trait Service {}\n+\n+struct MyFn;\n+impl AsyncFn<String> for MyFn {\n+    type Output = ();\n+}\n+\n+impl RequestFamily for String {\n+    type Type<'a> = String;\n+}\n+\n+struct ServiceFromAsyncFn<F, Req>(F, PhantomData<Req>);\n+\n+impl<F, Req, O> Service for ServiceFromAsyncFn<F, Req>\n+where\n+    Req: RequestFamily,\n+    F: AsyncFn<Req>,\n+    F: for<'a> AsyncFn<Req::Type<'a>, Output = O>,\n+{\n+}\n+\n+fn assert_service() -> impl Service {\n+    ServiceFromAsyncFn(MyFn, PhantomData)\n+}\n+\n+fn main() {}"}, {"sha": "b02a5d623307a23c818bf255acf17062310cfb2d", "filename": "tests/ui/traits/new-solver/normalize-param-env-1.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalize-param-env-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalize-param-env-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalize-param-env-1.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -0,0 +1,40 @@\n+// check-pass\n+// compile-flags: -Ztrait-solver=next\n+// Issue 108933\n+\n+trait Add<Rhs> {\n+    type Sum;\n+}\n+\n+impl Add<()> for () {\n+    type Sum = ();\n+}\n+\n+type Unit = <() as Add<()>>::Sum;\n+\n+trait Trait<C> {\n+    type Output;\n+}\n+\n+fn f<T>()\n+where\n+    T: Trait<()>,\n+    <T as Trait<()>>::Output: Sized,\n+{\n+}\n+\n+fn g<T>()\n+where\n+    T: Trait<Unit>,\n+    <T as Trait<()>>::Output: Sized,\n+{\n+}\n+\n+fn h<T>()\n+where\n+    T: Trait<()>,\n+    <T as Trait<Unit>>::Output: Sized,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "7c2cebdd2002f942afbe5ef7d35408c94702ebdd", "filename": "tests/ui/traits/new-solver/normalize-param-env-2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalize-param-env-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalize-param-env-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalize-param-env-2.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+// compile-flags: -Ztrait-solver=next\n+// Issue 92505\n+\n+trait A<T> {\n+    type I;\n+\n+    fn f()\n+    where\n+        Self::I: A<T>,\n+    {\n+    }\n+}\n+\n+impl<T> A<T> for () {\n+    type I = ();\n+\n+    fn f()\n+    where\n+        Self::I: A<T>,\n+    {\n+        <() as A<T>>::f();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ce2974b2a16f4ef06ef2a95969e3c015849170f4", "filename": "tests/ui/traits/new-solver/normalize-param-env-3.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalize-param-env-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c0b81c1fd5de8e00276524896d3352ed91a8cb/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalize-param-env-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalize-param-env-3.rs?ref=24c0b81c1fd5de8e00276524896d3352ed91a8cb", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+// compile-flags: -Ztrait-solver=next\n+// Issue 100177\n+\n+trait GenericTrait<T> {}\n+\n+trait Channel<I>: GenericTrait<Self::T> {\n+    type T;\n+}\n+\n+trait Sender {\n+    type Msg;\n+\n+    fn send<C>()\n+    where\n+        C: Channel<Self::Msg>;\n+}\n+\n+impl<T> Sender for T {\n+    type Msg = ();\n+\n+    fn send<C>()\n+    where\n+        C: Channel<Self::Msg>,\n+    {\n+    }\n+}\n+\n+// This works\n+fn foo<I, C>(ch: C) where C: Channel<I> {}\n+\n+fn main() {}"}]}