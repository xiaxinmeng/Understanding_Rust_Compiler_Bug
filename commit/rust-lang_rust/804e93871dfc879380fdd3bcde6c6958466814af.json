{"sha": "804e93871dfc879380fdd3bcde6c6958466814af", "node_id": "C_kwDOAAsO6NoAKDgwNGU5Mzg3MWRmYzg3OTM4MGZkZDNiY2RlNmM2OTU4NDY2ODE0YWY", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2023-04-08T19:01:14Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2023-04-08T19:28:32Z"}, "message": "Move SIMD layout errors to `SessionDiagnostic`", "tree": {"sha": "eb4b680b7e7829393c9047b441d77b23ef4b6cfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb4b680b7e7829393c9047b441d77b23ef4b6cfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/804e93871dfc879380fdd3bcde6c6958466814af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/804e93871dfc879380fdd3bcde6c6958466814af", "html_url": "https://github.com/rust-lang/rust/commit/804e93871dfc879380fdd3bcde6c6958466814af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/804e93871dfc879380fdd3bcde6c6958466814af/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7f2eb3e4171e4b87dbcab3a9a6709d5d084c54f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f2eb3e4171e4b87dbcab3a9a6709d5d084c54f", "html_url": "https://github.com/rust-lang/rust/commit/f7f2eb3e4171e4b87dbcab3a9a6709d5d084c54f"}], "stats": {"total": 75, "additions": 55, "deletions": 20}, "files": [{"sha": "a1e97bb95bc690bb8346b80d0f5aa7f7b606a285", "filename": "compiler/rustc_ty_utils/messages.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/804e93871dfc879380fdd3bcde6c6958466814af/compiler%2Frustc_ty_utils%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/804e93871dfc879380fdd3bcde6c6958466814af/compiler%2Frustc_ty_utils%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fmessages.ftl?ref=804e93871dfc879380fdd3bcde6c6958466814af", "patch": "@@ -47,3 +47,11 @@ ty_utils_inline_asm_not_supported = assembly is not supported in generic constan\n ty_utils_operation_not_supported = unsupported operation in generic constants\n \n ty_utils_unexpected_fnptr_associated_item = `FnPtr` trait with unexpected associated item\n+\n+ty_utils_zero_length_simd_type = monomorphising SIMD type `{$ty}` of zero length\n+\n+ty_utils_multiple_array_fields_simd_type = monomorphising SIMD type `{$ty}` with more than one array field\n+\n+ty_utils_oversized_simd_type = monomorphising SIMD type `{$ty}` of length greater than {$max_lanes}\n+\n+ty_utils_non_primative_simd_type = monomorphising SIMD type `{$ty}` with a non-primitive-scalar (integer/float/pointer) element type `{$e_ty}`"}, {"sha": "3db3c98e9e28ed5b483a4fd5a6b562b37d152787", "filename": "compiler/rustc_ty_utils/src/errors.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/804e93871dfc879380fdd3bcde6c6958466814af/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804e93871dfc879380fdd3bcde6c6958466814af/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs?ref=804e93871dfc879380fdd3bcde6c6958466814af", "patch": "@@ -74,3 +74,29 @@ pub struct UnexpectedFnPtrAssociatedItem {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(ty_utils_zero_length_simd_type)]\n+pub struct ZeroLengthSimdType<'tcx> {\n+    pub ty: Ty<'tcx>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(ty_utils_multiple_array_fields_simd_type)]\n+pub struct MultipleArrayFieldsSimdType<'tcx> {\n+    pub ty: Ty<'tcx>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(ty_utils_oversized_simd_type)]\n+pub struct OversizedSimdType<'tcx> {\n+    pub ty: Ty<'tcx>,\n+    pub max_lanes: u64,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(ty_utils_non_primative_simd_type)]\n+pub struct NonPrimitiveSimdType<'tcx> {\n+    pub ty: Ty<'tcx>,\n+    pub e_ty: Ty<'tcx>,\n+}"}, {"sha": "d08877233b3f983e2f14d2b171ca15886b5e0330", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/804e93871dfc879380fdd3bcde6c6958466814af/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804e93871dfc879380fdd3bcde6c6958466814af/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=804e93871dfc879380fdd3bcde6c6958466814af", "patch": "@@ -17,6 +17,9 @@ use rustc_target::abi::*;\n use std::fmt::Debug;\n use std::iter;\n \n+use crate::errors::{\n+    MultipleArrayFieldsSimdType, NonPrimitiveSimdType, OversizedSimdType, ZeroLengthSimdType,\n+};\n use crate::layout_sanity_check::sanity_check_layout;\n \n pub fn provide(providers: &mut ty::query::Providers) {\n@@ -294,6 +297,8 @@ fn layout_of_uncached<'tcx>(\n                 return Err(LayoutError::Unknown(ty));\n             }\n \n+            let fields = &def.non_enum_variant().fields;\n+\n             // Supported SIMD vectors are homogeneous ADTs with at least one field:\n             //\n             // * #[repr(simd)] struct S(T, T, T, T);\n@@ -304,18 +309,22 @@ fn layout_of_uncached<'tcx>(\n \n             // SIMD vectors with zero fields are not supported.\n             // (should be caught by typeck)\n-            if def.non_enum_variant().fields.is_empty() {\n-                tcx.sess.fatal(&format!(\"monomorphising SIMD type `{}` of zero length\", ty));\n+            if fields.is_empty() {\n+                tcx.sess.emit_fatal(ZeroLengthSimdType { ty })\n             }\n \n             // Type of the first ADT field:\n-            let f0_ty = def.non_enum_variant().fields[FieldIdx::from_u32(0)].ty(tcx, substs);\n+            let f0_ty = fields[FieldIdx::from_u32(0)].ty(tcx, substs);\n \n             // Heterogeneous SIMD vectors are not supported:\n             // (should be caught by typeck)\n-            for fi in &def.non_enum_variant().fields {\n+            for fi in fields {\n                 if fi.ty(tcx, substs) != f0_ty {\n-                    tcx.sess.fatal(&format!(\"monomorphising heterogeneous SIMD type `{}`\", ty));\n+                    tcx.sess.delay_span_bug(\n+                        DUMMY_SP,\n+                        \"#[repr(simd)] was applied to an ADT with hetrogeneous field type\",\n+                    );\n+                    return Err(LayoutError::Unknown(ty));\n                 }\n             }\n \n@@ -330,12 +339,9 @@ fn layout_of_uncached<'tcx>(\n                 // First ADT field is an array:\n \n                 // SIMD vectors with multiple array fields are not supported:\n-                // (should be caught by typeck)\n+                // Can't be caught by typeck with a generic simd type.\n                 if def.non_enum_variant().fields.len() != 1 {\n-                    tcx.sess.fatal(&format!(\n-                        \"monomorphising SIMD type `{}` with more than one array field\",\n-                        ty\n-                    ));\n+                    tcx.sess.emit_fatal(MultipleArrayFieldsSimdType { ty });\n                 }\n \n                 // Extract the number of elements from the layout of the array field:\n@@ -355,24 +361,17 @@ fn layout_of_uncached<'tcx>(\n             //\n             // Can't be caught in typeck if the array length is generic.\n             if e_len == 0 {\n-                tcx.sess.fatal(&format!(\"monomorphising SIMD type `{}` of zero length\", ty));\n+                tcx.sess.emit_fatal(ZeroLengthSimdType { ty });\n             } else if e_len > MAX_SIMD_LANES {\n-                tcx.sess.fatal(&format!(\n-                    \"monomorphising SIMD type `{}` of length greater than {}\",\n-                    ty, MAX_SIMD_LANES,\n-                ));\n+                tcx.sess.emit_fatal(OversizedSimdType { ty, max_lanes: MAX_SIMD_LANES });\n             }\n \n             // Compute the ABI of the element type:\n             let e_ly = cx.layout_of(e_ty)?;\n             let Abi::Scalar(e_abi) = e_ly.abi else {\n                 // This error isn't caught in typeck, e.g., if\n                 // the element type of the vector is generic.\n-                tcx.sess.fatal(&format!(\n-                    \"monomorphising SIMD type `{}` with a non-primitive-scalar \\\n-                    (integer/float/pointer) element type `{}`\",\n-                    ty, e_ty\n-                ))\n+                tcx.sess.emit_fatal(NonPrimitiveSimdType {ty, e_ty });\n             };\n \n             // Compute the size and alignment of the vector:"}, {"sha": "2613445f39bec0a28040e6609bd50a00afb1342b", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/804e93871dfc879380fdd3bcde6c6958466814af/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804e93871dfc879380fdd3bcde6c6958466814af/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=804e93871dfc879380fdd3bcde6c6958466814af", "patch": "@@ -10,6 +10,8 @@\n #![feature(never_type)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate rustc_middle;"}]}