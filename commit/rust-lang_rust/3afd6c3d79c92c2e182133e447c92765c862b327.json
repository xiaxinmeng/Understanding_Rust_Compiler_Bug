{"sha": "3afd6c3d79c92c2e182133e447c92765c862b327", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZmQ2YzNkNzljOTJjMmUxODIxMzNlNDQ3YzkyNzY1Yzg2MmIzMjc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-29T01:33:30Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-01T02:55:12Z"}, "message": "librustc: Implement simple explicit self for objects. r=nmatsakis", "tree": {"sha": "40b23dae9b65f4fe4c0af35824cf31528db47437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40b23dae9b65f4fe4c0af35824cf31528db47437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3afd6c3d79c92c2e182133e447c92765c862b327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3afd6c3d79c92c2e182133e447c92765c862b327", "html_url": "https://github.com/rust-lang/rust/commit/3afd6c3d79c92c2e182133e447c92765c862b327", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3afd6c3d79c92c2e182133e447c92765c862b327/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9b39d9cbd81b5189c4d81a8b5480804c340638f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b39d9cbd81b5189c4d81a8b5480804c340638f", "html_url": "https://github.com/rust-lang/rust/commit/e9b39d9cbd81b5189c4d81a8b5480804c340638f"}], "stats": {"total": 140, "additions": 122, "deletions": 18}, "files": [{"sha": "34d20e5482814f2950fde427a19e19364f483c28", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3afd6c3d79c92c2e182133e447c92765c862b327/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afd6c3d79c92c2e182133e447c92765c862b327/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=3afd6c3d79c92c2e182133e447c92765c862b327", "patch": "@@ -451,6 +451,9 @@ fn serialize_method_map_entry(ecx: @e::encode_ctxt,\n         do ebml_w.emit_field(~\"self_arg\", 0u) {\n             ebml_w.emit_arg(ecx, mme.self_arg);\n         }\n+        do ebml_w.emit_field(~\"explicit_self\", 2u) {\n+            mme.explicit_self.serialize(&ebml_w);\n+        }\n         do ebml_w.emit_field(~\"origin\", 1u) {\n             mme.origin.serialize(&ebml_w);\n         }\n@@ -464,6 +467,11 @@ impl Reader::Deserializer: read_method_map_entry_helper {\n                  self.read_field(~\"self_arg\", 0u, || {\n                      self.read_arg(xcx)\n                  }),\n+             explicit_self:\n+                 self.read_field(~\"explicit_self\", 2u, || {\n+                    let self_type: ast::self_ty_ = deserialize(&self);\n+                    self_type\n+                 }),\n              origin:\n                  self.read_field(~\"origin\", 1u, || {\n                      let method_origin: method_origin = deserialize(&self);"}, {"sha": "226c076fd0a3d9f60f1eab0d71e03029041be4fd", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 57, "deletions": 8, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/3afd6c3d79c92c2e182133e447c92765c862b327/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afd6c3d79c92c2e182133e447c92765c862b327/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=3afd6c3d79c92c2e182133e447c92765c862b327", "patch": "@@ -202,7 +202,12 @@ fn trans_method_callee(bcx: block, callee_id: ast::node_id,\n             }\n         }\n         typeck::method_trait(_, off, vstore) => {\n-            trans_trait_callee(bcx, callee_id, off, self, vstore)\n+            trans_trait_callee(bcx,\n+                               callee_id,\n+                               off,\n+                               self,\n+                               vstore,\n+                               mentry.explicit_self)\n         }\n         typeck::method_self(*) => {\n             fail ~\"method_self should have been handled above\"\n@@ -378,7 +383,12 @@ fn trans_monomorphized_callee(bcx: block,\n           }\n       }\n       typeck::vtable_trait(_, _) => {\n-          trans_trait_callee(bcx, callee_id, n_method, base, ty::vstore_box)\n+          trans_trait_callee(bcx,\n+                             callee_id,\n+                             n_method,\n+                             base,\n+                             ty::vstore_box,\n+                             mentry.explicit_self)\n       }\n       typeck::vtable_param(*) => {\n           fail ~\"vtable_param left in monomorphized function's vtable substs\";\n@@ -480,8 +490,9 @@ fn trans_trait_callee(bcx: block,\n                       callee_id: ast::node_id,\n                       n_method: uint,\n                       self_expr: @ast::expr,\n-                      vstore: ty::vstore)\n-    -> Callee\n+                      vstore: ty::vstore,\n+                      explicit_self: ast::self_ty_)\n+                   -> Callee\n {\n     //!\n     //\n@@ -497,15 +508,21 @@ fn trans_trait_callee(bcx: block,\n     let self_datum = unpack_datum!(bcx, expr::trans_to_datum(bcx, self_expr));\n     let llpair = self_datum.to_ref_llval(bcx);\n     let callee_ty = node_id_type(bcx, callee_id);\n-    trans_trait_callee_from_llval(bcx, callee_ty, n_method, llpair, vstore)\n+    trans_trait_callee_from_llval(bcx,\n+                                  callee_ty,\n+                                  n_method,\n+                                  llpair,\n+                                  vstore,\n+                                  explicit_self)\n }\n \n fn trans_trait_callee_from_llval(bcx: block,\n                                  callee_ty: ty::t,\n                                  n_method: uint,\n                                  llpair: ValueRef,\n-                                 vstore: ty::vstore)\n-    -> Callee\n+                                 vstore: ty::vstore,\n+                                 explicit_self: ast::self_ty_)\n+                              -> Callee\n {\n     //!\n     //\n@@ -517,14 +534,17 @@ fn trans_trait_callee_from_llval(bcx: block,\n     let mut bcx = bcx;\n \n     // Load the vtable from the @Trait pair\n+    debug!(\"(translating trait callee) loading vtable from pair %s\",\n+           val_str(bcx.ccx().tn, llpair));\n     let llvtable = Load(bcx,\n                       PointerCast(bcx,\n                                   GEPi(bcx, llpair, [0u, 0u]),\n                                   T_ptr(T_ptr(T_vtable()))));\n \n     // Load the box from the @Trait pair and GEP over the box header if\n     // necessary:\n-    let llself;\n+    let mut llself;\n+    debug!(\"(translating trait callee) loading second index from pair\");\n     let llbox = Load(bcx, GEPi(bcx, llpair, [0u, 1u]));\n     match vstore {\n         ty::vstore_box | ty::vstore_uniq => {\n@@ -538,7 +558,32 @@ fn trans_trait_callee_from_llval(bcx: block,\n         }\n     }\n \n+    // Munge `llself` appropriately for the type of `self` in the method.\n+    match explicit_self {\n+        ast::sty_static => {\n+            bcx.tcx().sess.bug(~\"shouldn't see static method here\");\n+        }\n+        ast::sty_by_ref => {}   // Nothing to do.\n+        ast::sty_value => {\n+            bcx.tcx().sess.bug(~\"methods with by-value self should not be \\\n+                               called on objects\");\n+        }\n+        ast::sty_region(_) => {\n+            let llscratch = alloca(bcx, val_ty(llself));\n+            Store(bcx, llself, llscratch);\n+            llself = llscratch;\n+        }\n+        ast::sty_box(_) => {\n+            // Bump the reference count on the box.\n+            debug!(\"(translating trait callee) callee type is `%s`\",\n+                   bcx.ty_to_str(callee_ty));\n+            bcx = glue::take_ty(bcx, llself, callee_ty);\n+        }\n+        ast::sty_uniq(_) => {}  // Nothing to do here.\n+    }\n+\n     // Load the function from the vtable and cast it to the expected type.\n+    debug!(\"(translating trait callee) loading method\");\n     let llcallee_ty = type_of::type_of_fn_from_ty(ccx, callee_ty);\n     let mptr = Load(bcx, GEPi(bcx, llvtable, [0u, n_method]));\n     let mptr = PointerCast(bcx, mptr, T_ptr(llcallee_ty));\n@@ -622,8 +667,12 @@ fn make_impl_vtable(ccx: @crate_ctxt, impl_id: ast::def_id, substs: ~[ty::t],\n     make_vtable(ccx, vec::map(*ty::trait_methods(tcx, trt_id), |im| {\n         let fty = ty::subst_tps(tcx, substs, None, ty::mk_fn(tcx, im.fty));\n         if (*im.tps).len() > 0u || ty::type_has_self(fty) {\n+            debug!(\"(making impl vtable) method has self or type params: %s\",\n+                   tcx.sess.str_of(im.ident));\n             C_null(T_ptr(T_nil()))\n         } else {\n+            debug!(\"(making impl vtable) adding method to vtable: %s\",\n+                   tcx.sess.str_of(im.ident));\n             let mut m_id = method_with_name(ccx, impl_id, im.ident);\n             if has_tps {\n                 // If the method is in another crate, need to make an inlined"}, {"sha": "02423d27ac18365908e7f2b879449aed3fa67549", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3afd6c3d79c92c2e182133e447c92765c862b327/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afd6c3d79c92c2e182133e447c92765c862b327/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=3afd6c3d79c92c2e182133e447c92765c862b327", "patch": "@@ -72,9 +72,12 @@ impl reflector {\n         // XXX: Should not be vstore_box!\n         let bcx = callee::trans_call_inner(\n             self.bcx, None, mth_ty, bool_ty,\n-            |bcx| meth::trans_trait_callee_from_llval(bcx, mth_ty,\n-                                                      mth_idx, v,\n-                                                      ty::vstore_box),\n+            |bcx| meth::trans_trait_callee_from_llval(bcx,\n+                                                      mth_ty,\n+                                                      mth_idx,\n+                                                      v,\n+                                                      ty::vstore_box,\n+                                                      ast::sty_by_ref),\n             ArgVals(args), SaveIn(scratch.val), DontAutorefArg);\n         let result = scratch.to_value_llval(bcx);\n         let next_bcx = sub_block(bcx, ~\"next\");\n@@ -307,4 +310,4 @@ fn ast_proto_constant(proto: ast::Proto) -> uint {\n         ast::ProtoBox => 3u,\n         ast::ProtoBorrowed => 4u,\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "0ffc321977f946493d139e83aa1e695f406958d0", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3afd6c3d79c92c2e182133e447c92765c862b327/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afd6c3d79c92c2e182133e447c92765c862b327/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=3afd6c3d79c92c2e182133e447c92765c862b327", "patch": "@@ -130,6 +130,7 @@ struct LookupContext {\n struct Candidate {\n     rcvr_ty: ty::t,\n     rcvr_substs: ty::substs,\n+    explicit_self: ast::self_ty_,\n \n     // FIXME #3446---these two fields should be easily derived from\n     // origin, yet are not\n@@ -406,6 +407,7 @@ impl LookupContext {\n                 let cand = Candidate {\n                     rcvr_ty: rcvr_ty,\n                     rcvr_substs: rcvr_substs,\n+                    explicit_self: method.self_ty,\n                     num_method_tps: method.tps.len(),\n                     self_mode: get_mode_from_self_type(method.self_ty),\n                     origin: method_param({trait_id:init_trait_id,\n@@ -465,6 +467,7 @@ impl LookupContext {\n         self.inherent_candidates.push(Candidate {\n             rcvr_ty: rcvr_ty,\n             rcvr_substs: move rcvr_substs,\n+            explicit_self: method.self_ty,\n             num_method_tps: method.tps.len(),\n             self_mode: get_mode_from_self_type(method.self_ty),\n             origin: method_trait(did, index, vstore)\n@@ -492,6 +495,7 @@ impl LookupContext {\n         self.inherent_candidates.push(Candidate {\n             rcvr_ty: rcvr_ty,\n             rcvr_substs: move rcvr_substs,\n+            explicit_self: method.self_ty,\n             num_method_tps: method.tps.len(),\n             self_mode: get_mode_from_self_type(method.self_ty),\n             origin: method_self(did, index)\n@@ -543,6 +547,7 @@ impl LookupContext {\n         candidates.push(Candidate {\n             rcvr_ty: impl_ty,\n             rcvr_substs: move impl_substs,\n+            explicit_self: method.self_type,\n             num_method_tps: method.n_tps,\n             self_mode: get_mode_from_self_type(method.self_type),\n             origin: method_static(method.did)\n@@ -577,6 +582,7 @@ impl LookupContext {\n             candidates.push(Candidate {\n                 rcvr_ty: impl_ty,\n                 rcvr_substs: move impl_substs,\n+                explicit_self: provided_method_info.method_info.self_type,\n                 num_method_tps: provided_method_info.method_info.n_tps,\n                 self_mode: get_mode_from_self_type(\n                     provided_method_info.method_info.self_type),\n@@ -739,12 +745,25 @@ impl LookupContext {\n             match self.search_for_method(autoref_ty) {\n                 None => {}\n                 Some(move mme) => {\n-                    self.fcx.write_adjustment(\n-                        self.self_expr.id,\n-                        @{autoderefs: autoderefs,\n-                          autoref: Some({kind: kind,\n-                                         region: region,\n-                                         mutbl: *mutbl})});\n+                    match mme.origin {\n+                        method_trait(*) => {\n+                            // Do not write adjustments; they make no sense\n+                            // here since the adjustments are to be performed\n+                            // on the self element of the object pair/triple,\n+                            // not the object itself.\n+                            //\n+                            // FIXME (#4088): This is wrong in the presence\n+                            // of autoderef.\n+                        }\n+                        _ => {\n+                            self.fcx.write_adjustment(\n+                                self.self_expr.id,\n+                                @{autoderefs: autoderefs,\n+                                  autoref: Some({kind: kind,\n+                                                 region: region,\n+                                                 mutbl: *mutbl})});\n+                        }\n+                    }\n                     return Some(mme);\n                 }\n             }\n@@ -911,6 +930,7 @@ impl LookupContext {\n         self.fcx.write_ty_substs(self.callee_id, fty, all_substs);\n         return {self_arg: {mode: ast::expl(candidate.self_mode),\n                            ty: candidate.rcvr_ty},\n+                explicit_self: candidate.explicit_self,\n                 origin: candidate.origin};\n     }\n "}, {"sha": "93a8288fa239aa0cd28d7ab9a65c2bc890eeb55d", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3afd6c3d79c92c2e182133e447c92765c862b327/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afd6c3d79c92c2e182133e447c92765c862b327/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=3afd6c3d79c92c2e182133e447c92765c862b327", "patch": "@@ -134,6 +134,9 @@ type method_map_entry = {\n     // in the fn type (FIXME #3446)\n     self_arg: ty::arg,\n \n+    // the type of explicit self on the method\n+    explicit_self: ast::self_ty_,\n+\n     // method details being invoked\n     origin: method_origin\n };"}, {"sha": "49e48279dc64379a795fd09cc2a62842851d7f87", "filename": "src/test/run-pass/explicit-self-objects-simple.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3afd6c3d79c92c2e182133e447c92765c862b327/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afd6c3d79c92c2e182133e447c92765c862b327/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-simple.rs?ref=3afd6c3d79c92c2e182133e447c92765c862b327", "patch": "@@ -0,0 +1,21 @@\n+trait Foo {\n+    fn f(&self);\n+}\n+\n+struct S {\n+    x: int\n+}\n+\n+impl S : Foo {\n+    fn f(&self) {\n+        assert self.x == 3;\n+    }\n+}\n+\n+fn main() {\n+    let x = @S { x: 3 };\n+    let y = x as @Foo;\n+    y.f();\n+}\n+\n+"}]}