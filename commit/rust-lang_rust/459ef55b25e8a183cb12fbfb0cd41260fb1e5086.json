{"sha": "459ef55b25e8a183cb12fbfb0cd41260fb1e5086", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OWVmNTViMjVlOGExODNjYjEyZmJmYjBjZDQxMjYwZmIxZTUwODY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-06T14:34:43Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-06T14:34:43Z"}, "message": "Merge pull request #304 from Manishearth/bit_mask\n\nfixed bad_bit_mask false positive", "tree": {"sha": "a23c2ae5e81ea4896c13e67ca421df8c10b0f319", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a23c2ae5e81ea4896c13e67ca421df8c10b0f319"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/459ef55b25e8a183cb12fbfb0cd41260fb1e5086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/459ef55b25e8a183cb12fbfb0cd41260fb1e5086", "html_url": "https://github.com/rust-lang/rust/commit/459ef55b25e8a183cb12fbfb0cd41260fb1e5086", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/459ef55b25e8a183cb12fbfb0cd41260fb1e5086/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc32092ee4f37e0b6e807e1248e656e0fe0074cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc32092ee4f37e0b6e807e1248e656e0fe0074cf", "html_url": "https://github.com/rust-lang/rust/commit/dc32092ee4f37e0b6e807e1248e656e0fe0074cf"}, {"sha": "b76ad366abbd8085ed1f59ed09e95886de8c1ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b76ad366abbd8085ed1f59ed09e95886de8c1ae1", "html_url": "https://github.com/rust-lang/rust/commit/b76ad366abbd8085ed1f59ed09e95886de8c1ae1"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "0da19cbd62059cf2a89d56884032016c2572610e", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/459ef55b25e8a183cb12fbfb0cd41260fb1e5086/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/459ef55b25e8a183cb12fbfb0cd41260fb1e5086/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=459ef55b25e8a183cb12fbfb0cd41260fb1e5086", "patch": "@@ -9,7 +9,7 @@ There are 55 lints included in this crate:\n name                                                                                                 | default | meaning\n -----------------------------------------------------------------------------------------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n [approx_constant](https://github.com/Manishearth/rust-clippy/wiki#approx_constant)                   | warn    | the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found; suggests to use the constant\n-[bad_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#bad_bit_mask)                         | deny    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n+[bad_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#bad_bit_mask)                         | warn    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n [box_vec](https://github.com/Manishearth/rust-clippy/wiki#box_vec)                                   | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n [cast_possible_truncation](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_truncation) | allow   | casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\n [cast_possible_wrap](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_wrap)             | allow   | casts that may cause wrapping around the value, e.g `x as i32` where `x: u32` and `x > i32::MAX`"}, {"sha": "97d33b5e6998c3b9db181d848b4ccbc38474df95", "filename": "src/bit_mask.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/459ef55b25e8a183cb12fbfb0cd41260fb1e5086/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459ef55b25e8a183cb12fbfb0cd41260fb1e5086/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=459ef55b25e8a183cb12fbfb0cd41260fb1e5086", "patch": "@@ -9,7 +9,7 @@ use utils::span_lint;\n \n declare_lint! {\n     pub BAD_BIT_MASK,\n-    Deny,\n+    Warn,\n     \"expressions of the form `_ & mask == select` that will only ever return `true` or `false` \\\n      (because in the example `select` containing bits that `mask` doesn't have)\"\n }\n@@ -98,7 +98,7 @@ fn check_bit_mask(cx: &Context, bit_op: BinOp_, cmp_op: BinOp_,\n                   mask_value: u64, cmp_value: u64, span: &Span) {\n     match cmp_op {\n         BiEq | BiNe => match bit_op {\n-            BiBitAnd => if mask_value & cmp_value != mask_value {\n+            BiBitAnd => if mask_value & cmp_value != cmp_value {\n                 if cmp_value != 0 {\n                     span_lint(cx, BAD_BIT_MASK, *span, &format!(\n                         \"incompatible bit mask: `_ & {}` can never be equal to `{}`\","}, {"sha": "0b7b31b64a52f92ad39188ee00174e46a1b5e27a", "filename": "tests/compile-fail/bit_masks.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/459ef55b25e8a183cb12fbfb0cd41260fb1e5086/tests%2Fcompile-fail%2Fbit_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459ef55b25e8a183cb12fbfb0cd41260fb1e5086/tests%2Fcompile-fail%2Fbit_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbit_masks.rs?ref=459ef55b25e8a183cb12fbfb0cd41260fb1e5086", "patch": "@@ -25,6 +25,9 @@ fn main() {\n     x | 2 > 1; //~ERROR incompatible bit mask\n     x | 2 <= 2; // ok (if a bit silly), equals x <= 2\n \n+    x & 192 == 128; // ok, tests for bit 7 and not bit 6\n+    x & 0xffc0 == 0xfe80; // ok\n+    \n     // this also now works with constants\n     x & THREE_BITS == 8; //~ERROR incompatible bit mask\n     x | EVEN_MORE_REDIRECTION < 7; //~ERROR incompatible bit mask"}]}