{"sha": "1c0235e3fff040b23c812c0e78efb4bd5460702a", "node_id": "C_kwDOAAsO6NoAKDFjMDIzNWUzZmZmMDQwYjIzYzgxMmMwZTc4ZWZiNGJkNTQ2MDcwMmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T08:04:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T08:04:06Z"}, "message": "Auto merge of #14802 - HKalbasi:layout, r=HKalbasi\n\nFix layout for `hir_ty::Ty` and friends", "tree": {"sha": "a69a9724e0efa09a62c3463bf8272a8873a7ba4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a69a9724e0efa09a62c3463bf8272a8873a7ba4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c0235e3fff040b23c812c0e78efb4bd5460702a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0235e3fff040b23c812c0e78efb4bd5460702a", "html_url": "https://github.com/rust-lang/rust/commit/1c0235e3fff040b23c812c0e78efb4bd5460702a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c0235e3fff040b23c812c0e78efb4bd5460702a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a806fe7ad28efa2de22ed3c9d3233cd1ed08dd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a806fe7ad28efa2de22ed3c9d3233cd1ed08dd1", "html_url": "https://github.com/rust-lang/rust/commit/0a806fe7ad28efa2de22ed3c9d3233cd1ed08dd1"}, {"sha": "261047d01932aac1b40e36076f88fc19f9fea218", "url": "https://api.github.com/repos/rust-lang/rust/commits/261047d01932aac1b40e36076f88fc19f9fea218", "html_url": "https://github.com/rust-lang/rust/commit/261047d01932aac1b40e36076f88fc19f9fea218"}], "stats": {"total": 119, "additions": 89, "deletions": 30}, "files": [{"sha": "c7f358d4a4b12eeaf8dc6d431e5430191b643109", "filename": "crates/hir-ty/src/consteval/tests.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs?ref=1c0235e3fff040b23c812c0e78efb4bd5460702a", "patch": "@@ -1962,6 +1962,36 @@ fn const_generic_subst_fn() {\n     );\n }\n \n+#[test]\n+fn layout_of_type_with_associated_type_field_defined_inside_body() {\n+    check_number(\n+        r#\"\n+trait Tr {\n+    type Ty;\n+}\n+\n+struct St<T: Tr>(T::Ty);\n+\n+const GOAL: i64 = {\n+    // if we move `St2` out of body, the test will fail, as we don't see the impl anymore. That\n+    // case will probably be rejected by rustc in some later edition, but we should support this\n+    // case.\n+    struct St2;\n+\n+    impl Tr for St2 {\n+        type Ty = i64;\n+    }\n+\n+    struct Goal(St<St2>);\n+\n+    let x = Goal(St(5));\n+    x.0.0\n+};\n+\"#,\n+        5,\n+    );\n+}\n+\n #[test]\n fn const_generic_subst_assoc_const_impl() {\n     check_number("}, {"sha": "0196d7b9e0c77a2194ccf4e767eaf3e6478cd131", "filename": "crates/hir-ty/src/db.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdb.rs?ref=1c0235e3fff040b23c812c0e78efb4bd5460702a", "patch": "@@ -74,7 +74,12 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n \n     #[salsa::invoke(crate::layout::layout_of_adt_query)]\n     #[salsa::cycle(crate::layout::layout_of_adt_recover)]\n-    fn layout_of_adt(&self, def: AdtId, subst: Substitution) -> Result<Layout, LayoutError>;\n+    fn layout_of_adt(\n+        &self,\n+        def: AdtId,\n+        subst: Substitution,\n+        krate: CrateId,\n+    ) -> Result<Layout, LayoutError>;\n \n     #[salsa::invoke(crate::layout::target_data_layout_query)]\n     fn target_data_layout(&self, krate: CrateId) -> Option<Arc<TargetDataLayout>>;"}, {"sha": "1d7f6cc0c15b1a35fe7b291e38762d3ab96aeeda", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=1c0235e3fff040b23c812c0e78efb4bd5460702a", "patch": "@@ -463,6 +463,9 @@ fn render_const_scalar(\n     memory_map: &MemoryMap,\n     ty: &Ty,\n ) -> Result<(), HirDisplayError> {\n+    // FIXME: We need to get krate from the final callers of the hir display\n+    // infrastructure and have it here as a field on `f`.\n+    let krate = *f.db.crate_graph().crates_in_topological_order().last().unwrap();\n     match ty.kind(Interner) {\n         chalk_ir::TyKind::Scalar(s) => match s {\n             Scalar::Bool => write!(f, \"{}\", if b[0] == 0 { false } else { true }),\n@@ -502,11 +505,6 @@ fn render_const_scalar(\n             _ => f.write_str(\"<ref-not-supported>\"),\n         },\n         chalk_ir::TyKind::Tuple(_, subst) => {\n-            // FIXME: Remove this line. If the target data layout is independent\n-            // of the krate, the `db.target_data_layout` and its callers like `layout_of_ty` don't need\n-            // to get krate. Otherwise, we need to get krate from the final callers of the hir display\n-            // infrastructure and have it here as a field on `f`.\n-            let krate = *f.db.crate_graph().crates_in_topological_order().last().unwrap();\n             let Ok(layout) = layout_of_ty(f.db, ty, krate) else {\n                 return f.write_str(\"<layout-error>\");\n             };\n@@ -532,7 +530,7 @@ fn render_const_scalar(\n         chalk_ir::TyKind::Adt(adt, subst) => match adt.0 {\n             hir_def::AdtId::StructId(s) => {\n                 let data = f.db.struct_data(s);\n-                let Ok(layout) = f.db.layout_of_adt(adt.0, subst.clone()) else {\n+                let Ok(layout) = f.db.layout_of_adt(adt.0, subst.clone(), krate) else {\n                     return f.write_str(\"<layout-error>\");\n                 };\n                 match data.variant_data.as_ref() {"}, {"sha": "f67b49907cec261706fc58dc59143646927655ce", "filename": "crates/hir-ty/src/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout.rs?ref=1c0235e3fff040b23c812c0e78efb4bd5460702a", "patch": "@@ -84,7 +84,7 @@ pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty, krate: CrateId) -> Result<Lay\n     let trait_env = Arc::new(TraitEnvironment::empty(krate));\n     let ty = normalize(db, trait_env, ty.clone());\n     Ok(match ty.kind(Interner) {\n-        TyKind::Adt(AdtId(def), subst) => db.layout_of_adt(*def, subst.clone())?,\n+        TyKind::Adt(AdtId(def), subst) => db.layout_of_adt(*def, subst.clone(), krate)?,\n         TyKind::Scalar(s) => match s {\n             chalk_ir::Scalar::Bool => Layout::scalar(\n                 dl,"}, {"sha": "da609a0957348b14d6d501dbcc33494229ac91ea", "filename": "crates/hir-ty/src/layout/adt.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs?ref=1c0235e3fff040b23c812c0e78efb4bd5460702a", "patch": "@@ -2,10 +2,11 @@\n \n use std::{cmp, ops::Bound};\n \n+use base_db::CrateId;\n use hir_def::{\n     data::adt::VariantData,\n     layout::{Integer, LayoutCalculator, ReprOptions, TargetDataLayout},\n-    AdtId, EnumVariantId, HasModule, LocalEnumVariantId, VariantId,\n+    AdtId, EnumVariantId, LocalEnumVariantId, VariantId,\n };\n use la_arena::RawIdx;\n use smallvec::SmallVec;\n@@ -27,8 +28,8 @@ pub fn layout_of_adt_query(\n     db: &dyn HirDatabase,\n     def: AdtId,\n     subst: Substitution,\n+    krate: CrateId,\n ) -> Result<Layout, LayoutError> {\n-    let krate = def.module(db.upcast()).krate();\n     let Some(target) = db.target_data_layout(krate) else { return Err(LayoutError::TargetLayoutNotAvailable) };\n     let cx = LayoutCx { krate, target: &target };\n     let dl = cx.current_data_layout();\n@@ -127,6 +128,7 @@ pub fn layout_of_adt_recover(\n     _: &[String],\n     _: &AdtId,\n     _: &Substitution,\n+    _: &CrateId,\n ) -> Result<Layout, LayoutError> {\n     user_error!(\"infinite sized recursive type\");\n }"}, {"sha": "0b5d9df0c1d1b0e412a9dbbe169eff3d618fb5cc", "filename": "crates/hir-ty/src/layout/tests.rs", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs?ref=1c0235e3fff040b23c812c0e78efb4bd5460702a", "patch": "@@ -25,22 +25,25 @@ fn eval_goal(ra_fixture: &str, minicore: &str) -> Result<Layout, LayoutError> {\n         \"{minicore}//- /main.rs crate:test target_data_layout:{target_data_layout}\\n{ra_fixture}\",\n     );\n \n-    let (db, file_id) = TestDB::with_single_file(&ra_fixture);\n-    let module_id = db.module_for_file(file_id);\n-    let def_map = module_id.def_map(&db);\n-    let scope = &def_map[module_id.local_id].scope;\n-    let adt_id = scope\n-        .declarations()\n-        .find_map(|x| match x {\n-            hir_def::ModuleDefId::AdtId(x) => {\n-                let name = match x {\n-                    hir_def::AdtId::StructId(x) => db.struct_data(x).name.to_smol_str(),\n-                    hir_def::AdtId::UnionId(x) => db.union_data(x).name.to_smol_str(),\n-                    hir_def::AdtId::EnumId(x) => db.enum_data(x).name.to_smol_str(),\n-                };\n-                (name == \"Goal\").then_some(x)\n-            }\n-            _ => None,\n+    let (db, file_ids) = TestDB::with_many_files(&ra_fixture);\n+    let (adt_id, module_id) = file_ids\n+        .into_iter()\n+        .find_map(|file_id| {\n+            let module_id = db.module_for_file(file_id);\n+            let def_map = module_id.def_map(&db);\n+            let scope = &def_map[module_id.local_id].scope;\n+            let adt_id = scope.declarations().find_map(|x| match x {\n+                hir_def::ModuleDefId::AdtId(x) => {\n+                    let name = match x {\n+                        hir_def::AdtId::StructId(x) => db.struct_data(x).name.to_smol_str(),\n+                        hir_def::AdtId::UnionId(x) => db.union_data(x).name.to_smol_str(),\n+                        hir_def::AdtId::EnumId(x) => db.enum_data(x).name.to_smol_str(),\n+                    };\n+                    (name == \"Goal\").then_some(x)\n+                }\n+                _ => None,\n+            })?;\n+            Some((adt_id, module_id))\n         })\n         .unwrap();\n     let goal_ty = TyKind::Adt(AdtId(adt_id), Substitution::empty(Interner)).intern(Interner);\n@@ -232,6 +235,27 @@ fn associated_types() {\n         struct Foo<A: Tr>(<A as Tr>::Ty);\n         struct Goal(Foo<i32>);\n     }\n+    check_size_and_align(\n+        r#\"\n+//- /b/mod.rs crate:b\n+pub trait Tr {\n+    type Ty;\n+}\n+pub struct Foo<A: Tr>(<A as Tr>::Ty);\n+\n+//- /a/mod.rs crate:a deps:b\n+use b::{Tr, Foo};\n+\n+struct S;\n+impl Tr for S {\n+    type Ty = i64;\n+}\n+struct Goal(Foo<S>);\n+        \"#,\n+        \"\",\n+        8,\n+        8,\n+    );\n }\n \n #[test]"}, {"sha": "f3dfab0dd1375599d65657144f56b7cb5e1e765c", "filename": "crates/hir-ty/src/mir/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs?ref=1c0235e3fff040b23c812c0e78efb4bd5460702a", "patch": "@@ -574,7 +574,7 @@ impl Evaluator<'_> {\n     }\n \n     fn layout_adt(&self, adt: AdtId, subst: Substitution) -> Result<Layout> {\n-        self.db.layout_of_adt(adt, subst.clone()).map_err(|e| {\n+        self.db.layout_of_adt(adt, subst.clone(), self.crate_id).map_err(|e| {\n             MirEvalError::LayoutError(e, TyKind::Adt(chalk_ir::AdtId(adt), subst).intern(Interner))\n         })\n     }"}, {"sha": "6b21a5f9c4ab6afa425516bd368d4c8a0bd87112", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=1c0235e3fff040b23c812c0e78efb4bd5460702a", "patch": "@@ -1207,7 +1207,7 @@ impl Adt {\n         if db.generic_params(self.into()).iter().count() != 0 {\n             return Err(LayoutError::HasPlaceholder);\n         }\n-        db.layout_of_adt(self.into(), Substitution::empty(Interner))\n+        db.layout_of_adt(self.into(), Substitution::empty(Interner), self.krate(db).id)\n     }\n \n     /// Turns this ADT into a type. Any type parameters of the ADT will be"}, {"sha": "673192f57163caaca00d574232b8db06b10db32c", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0235e3fff040b23c812c0e78efb4bd5460702a/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=1c0235e3fff040b23c812c0e78efb4bd5460702a", "patch": "@@ -8,7 +8,7 @@ use std::{\n \n use hir::{\n     db::{DefDatabase, ExpandDatabase, HirDatabase},\n-    AssocItem, Crate, Function, HasSource, HirDisplay, ModuleDef,\n+    AssocItem, Crate, Function, HasCrate, HasSource, HirDisplay, ModuleDef,\n };\n use hir_def::{\n     body::{BodySourceMap, SyntheticSyntax},\n@@ -210,7 +210,7 @@ impl flags::AnalysisStats {\n                 continue;\n             }\n             all += 1;\n-            let Err(e) = db.layout_of_adt(hir_def::AdtId::from(a).into(), Substitution::empty(Interner)) else {\n+            let Err(e) = db.layout_of_adt(hir_def::AdtId::from(a).into(), Substitution::empty(Interner), a.krate(db).into()) else {\n                 continue;\n             };\n             if verbosity.is_spammy() {"}]}