{"sha": "cc6f394d6f1ea4f452a944685d422125a5f71ac3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNmYzOTRkNmYxZWE0ZjQ1MmE5NDQ2ODVkNDIyMTI1YTVmNzFhYzM=", "commit": {"author": {"name": "Simon Heath", "email": "icefox@dreamquest.io", "date": "2019-02-13T17:52:35Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-02-27T15:03:11Z"}, "message": "Fix some links in TryFrom docs.", "tree": {"sha": "6d1d4410e4d434d1c712e78c3cf6c30d89c51e97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d1d4410e4d434d1c712e78c3cf6c30d89c51e97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc6f394d6f1ea4f452a944685d422125a5f71ac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc6f394d6f1ea4f452a944685d422125a5f71ac3", "html_url": "https://github.com/rust-lang/rust/commit/cc6f394d6f1ea4f452a944685d422125a5f71ac3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc6f394d6f1ea4f452a944685d422125a5f71ac3/comments", "author": {"login": "icefoxen", "id": 1335133, "node_id": "MDQ6VXNlcjEzMzUxMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1335133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/icefoxen", "html_url": "https://github.com/icefoxen", "followers_url": "https://api.github.com/users/icefoxen/followers", "following_url": "https://api.github.com/users/icefoxen/following{/other_user}", "gists_url": "https://api.github.com/users/icefoxen/gists{/gist_id}", "starred_url": "https://api.github.com/users/icefoxen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/icefoxen/subscriptions", "organizations_url": "https://api.github.com/users/icefoxen/orgs", "repos_url": "https://api.github.com/users/icefoxen/repos", "events_url": "https://api.github.com/users/icefoxen/events{/privacy}", "received_events_url": "https://api.github.com/users/icefoxen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1d1c6731c22a2840eecd72b9bfb4ffc6f05647b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d1c6731c22a2840eecd72b9bfb4ffc6f05647b", "html_url": "https://github.com/rust-lang/rust/commit/c1d1c6731c22a2840eecd72b9bfb4ffc6f05647b"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "4716aea1cdd5091158c4f53d50372bda0db2a63e", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cc6f394d6f1ea4f452a944685d422125a5f71ac3/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6f394d6f1ea4f452a944685d422125a5f71ac3/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=cc6f394d6f1ea4f452a944685d422125a5f71ac3", "patch": "@@ -361,11 +361,12 @@ pub trait From<T>: Sized {\n /// An attempted conversion that consumes `self`, which may or may not be\n /// expensive.\n ///\n-/// Library authors should not directly implement this trait, but should prefer\n-/// implementing the [`TryFrom`] trait, which offers greater flexibility and\n-/// provides an equivalent `TryInto` implementation for free, thanks to a\n-/// blanket implementation in the standard library. For more information on this,\n-/// see the documentation for [`Into`].\n+/// Library authors should usually not directly implement this trait,\n+/// but should prefer implementing the [`TryFrom`] trait, which offers\n+/// greater flexibility and provides an equivalent `TryInto`\n+/// implementation for free, thanks to a blanket implementation in the\n+/// standard library. For more information on this, see the\n+/// documentation for [`Into`].\n ///\n /// # Implementing `TryInto`\n ///\n@@ -396,15 +397,16 @@ pub trait TryInto<T>: Sized {\n /// This might be handled by truncating the `i64` to an `i32` (essentially\n /// giving the `i64`'s value modulo `i32::MAX`) or by simply returning\n /// `i32::MAX`, or by some other method.  The `From` trait is intended\n-/// for lossless conversions, so the `TryFrom` trait informs the\n+/// for perfect conversions, so the `TryFrom` trait informs the\n /// programmer when a type conversion could go bad and lets them\n /// decide how to handle it.\n ///\n /// # Generic Implementations\n ///\n /// - `TryFrom<T> for U` implies [`TryInto<U>`]` for T`\n /// - [`try_from`] is reflexive, which means that `TryFrom<T> for T`\n-/// is implemented\n+/// is implemented and cannot fail -- the associated `Error` type for\n+/// calling `T::try_from()` on a value of type `T` is `!`.\n ///\n /// # Examples\n ///\n@@ -417,12 +419,18 @@ pub trait TryInto<T>: Sized {\n /// let smaller_number = big_number as i32;\n /// assert_eq!(smaller_number, -727379968);\n ///\n+/// // Returns an error because `big_number` is too big to\n+/// // fit in an `i32`.\n /// let try_smaller_number = i32::try_from(big_number);\n /// assert!(try_smaller_number.is_err());\n ///\n+/// // Returns `Ok(3)`.\n /// let try_successful_smaller_number = i32::try_from(3);\n /// assert!(try_successful_smaller_number.is_ok());\n /// ```\n+///\n+/// [`try_from`]: trait.TryFrom.html#tymethod.try_from\n+/// [`TryInto`]: trait.TryInto.html\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error."}]}