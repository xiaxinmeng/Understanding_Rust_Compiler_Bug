{"sha": "705e0874de4787dd65eb8484fd67ad635e136c37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNWUwODc0ZGU0Nzg3ZGQ2NWViODQ4NGZkNjdhZDYzNWUxMzZjMzc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-08T17:26:47Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-08T17:30:27Z"}, "message": "reduce code duplication", "tree": {"sha": "8f40d87b05c9e11668153bf1dce65f55b492a5d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f40d87b05c9e11668153bf1dce65f55b492a5d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/705e0874de4787dd65eb8484fd67ad635e136c37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/705e0874de4787dd65eb8484fd67ad635e136c37", "html_url": "https://github.com/rust-lang/rust/commit/705e0874de4787dd65eb8484fd67ad635e136c37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/705e0874de4787dd65eb8484fd67ad635e136c37/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffcdbad263fc2522696b3376627aca503fe0fe8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffcdbad263fc2522696b3376627aca503fe0fe8f", "html_url": "https://github.com/rust-lang/rust/commit/ffcdbad263fc2522696b3376627aca503fe0fe8f"}], "stats": {"total": 83, "additions": 38, "deletions": 45}, "files": [{"sha": "27523b1e689e241706a1c8cb726084cb03bf98af", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/705e0874de4787dd65eb8484fd67ad635e136c37/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705e0874de4787dd65eb8484fd67ad635e136c37/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=705e0874de4787dd65eb8484fd67ad635e136c37", "patch": "@@ -1303,39 +1303,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             _ => {}\n         }\n \n-        /// This is a bare signal of what kind of type we're dealing with. `ty::TyKind` tracks\n-        /// extra information about each type, but we only care about the category.\n-        #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-        enum TyCategory {\n-            Closure,\n-            Opaque,\n-            Generator,\n-            Foreign,\n-        }\n-\n-        impl TyCategory {\n-            fn descr(&self) -> &'static str {\n-                match self {\n-                    Self::Closure => \"closure\",\n-                    Self::Opaque => \"opaque type\",\n-                    Self::Generator => \"generator\",\n-                    Self::Foreign => \"foreign type\",\n-                }\n-            }\n-\n-            fn from_ty(ty: Ty<'_>) -> Option<(Self, DefId)> {\n-                match ty.kind {\n-                    ty::Closure(def_id, _) => Some((Self::Closure, def_id)),\n-                    ty::Opaque(def_id, _) => Some((Self::Opaque, def_id)),\n-                    ty::Generator(def_id, ..) => Some((Self::Generator, def_id)),\n-                    ty::Foreign(def_id) => Some((Self::Foreign, def_id)),\n-                    _ => None,\n-                }\n-            }\n-        }\n-\n         struct OpaqueTypesVisitor<'tcx> {\n-            types: FxHashMap<TyKind, FxHashSet<Span>>,\n+            types: FxHashMap<TyCategory, FxHashSet<Span>>,\n             expected: FxHashMap<TyCategory, FxHashSet<Span>>,\n             found: FxHashMap<TyCategory, FxHashSet<Span>>,\n             ignore_span: Span,\n@@ -1375,7 +1344,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 &self,\n                 err: &mut DiagnosticBuilder<'_>,\n                 target: &str,\n-                types: &FxHashMap<TyKind, FxHashSet<Span>>,\n+                types: &FxHashMap<TyCategory, FxHashSet<Span>>,\n             ) {\n                 for (key, values) in types.iter() {\n                     let count = values.len();\n@@ -1394,7 +1363,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                 },\n                                 if count > 1 { \"one of the \" } else { \"\" },\n                                 target,\n-                                key,\n+                                kind,\n                                 pluralize!(count),\n                             ),\n                         );\n@@ -1405,7 +1374,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n-                if let Some((kind, def_id)) = TyKind::from_ty(t) {\n+                if let Some((kind, def_id)) = TyCategory::from_ty(t) {\n                     let span = self.tcx.def_span(def_id);\n                     // Avoid cluttering the output when the \"found\" and error span overlap:\n                     //\n@@ -2067,3 +2036,34 @@ impl<'tcx> ObligationCause<'tcx> {\n         }\n     }\n }\n+\n+/// This is a bare signal of what kind of type we're dealing with. `ty::TyKind` tracks\n+/// extra information about each type, but we only care about the category.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+crate enum TyCategory {\n+    Closure,\n+    Opaque,\n+    Generator,\n+    Foreign,\n+}\n+\n+impl TyCategory {\n+    fn descr(&self) -> &'static str {\n+        match self {\n+            Self::Closure => \"closure\",\n+            Self::Opaque => \"opaque type\",\n+            Self::Generator => \"generator\",\n+            Self::Foreign => \"foreign type\",\n+        }\n+    }\n+\n+    pub fn from_ty(ty: Ty<'_>) -> Option<(Self, DefId)> {\n+        match ty.kind {\n+            ty::Closure(def_id, _) => Some((Self::Closure, def_id)),\n+            ty::Opaque(def_id, _) => Some((Self::Opaque, def_id)),\n+            ty::Generator(def_id, ..) => Some((Self::Generator, def_id)),\n+            ty::Foreign(def_id) => Some((Self::Foreign, def_id)),\n+            _ => None,\n+        }\n+    }\n+}"}, {"sha": "a42ddbbbcc6a30c8fa629e82745fdca1e7decb78", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/705e0874de4787dd65eb8484fd67ad635e136c37/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705e0874de4787dd65eb8484fd67ad635e136c37/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=705e0874de4787dd65eb8484fd67ad635e136c37", "patch": "@@ -6,7 +6,7 @@ use super::{\n     TraitNotObjectSafe,\n };\n \n-use crate::infer::error_reporting::TypeAnnotationNeeded as ErrorCode;\n+use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCode};\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{self, InferCtxt};\n use crate::mir::interpret::ErrorHandled;\n@@ -676,15 +676,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     Some(t) => Some(t),\n                     None => {\n                         let ty = parent_trait_ref.skip_binder().self_ty();\n-                        let span = if let ty::Closure(def_id, _)\n-                        | ty::Opaque(def_id, _)\n-                        | ty::Generator(def_id, ..)\n-                        | ty::Foreign(def_id) = ty.kind\n-                        {\n-                            Some(self.tcx.def_span(def_id))\n-                        } else {\n-                            None\n-                        };\n+                        let span =\n+                            TyCategory::from_ty(ty).map(|(_, def_id)| self.tcx.def_span(def_id));\n                         Some((ty.to_string(), span))\n                     }\n                 }"}]}