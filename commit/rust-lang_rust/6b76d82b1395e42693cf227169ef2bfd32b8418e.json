{"sha": "6b76d82b1395e42693cf227169ef2bfd32b8418e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNzZkODJiMTM5NWU0MjY5M2NmMjI3MTY5ZWYyYmZkMzJiODQxOGU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-10T18:30:08Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-10T20:02:18Z"}, "message": "Move suggestion code to its own method", "tree": {"sha": "36bab4df3039a674803a7045fc7b745ef361a572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36bab4df3039a674803a7045fc7b745ef361a572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b76d82b1395e42693cf227169ef2bfd32b8418e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b76d82b1395e42693cf227169ef2bfd32b8418e", "html_url": "https://github.com/rust-lang/rust/commit/6b76d82b1395e42693cf227169ef2bfd32b8418e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b76d82b1395e42693cf227169ef2bfd32b8418e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b06362fa9207ec1beae209a39d974f6c471206", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b06362fa9207ec1beae209a39d974f6c471206", "html_url": "https://github.com/rust-lang/rust/commit/33b06362fa9207ec1beae209a39d974f6c471206"}], "stats": {"total": 96, "additions": 54, "deletions": 42}, "files": [{"sha": "55a95d0569848ff74eae96580193f05ef022ec32", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 54, "deletions": 42, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/6b76d82b1395e42693cf227169ef2bfd32b8418e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b76d82b1395e42693cf227169ef2bfd32b8418e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=6b76d82b1395e42693cf227169ef2bfd32b8418e", "patch": "@@ -376,48 +376,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             };\n             err.span_label(pattern.span, msg);\n         } else if let Some(e) = local_visitor.found_method_call {\n-            if let ExprKind::MethodCall(segment, _call_sp, _args) = &e.kind {\n-                if let (Ok(snippet), Some(tables), None) = (\n-                    self.tcx.sess.source_map().span_to_snippet(segment.ident.span),\n-                    self.in_progress_tables,\n-                    &segment.args,\n-                 ) {\n-                    let borrow = tables.borrow();\n-                    let sigs = borrow.node_method_sig();\n-                    if let Some(sig) = sigs.get(e.hir_id) {\n-                        let mut params = vec![];\n-                        for arg in sig.inputs_and_output().skip_binder().iter() {\n-                            if let ty::Param(param) = arg.kind {\n-                                if param.name != kw::SelfUpper {\n-                                    let name = param.name.to_string();\n-                                    if !params.contains(&name) {\n-                                        params.push(name);\n-                                    }\n-                                }\n-                            }\n-                        }\n-                        if !params.is_empty() {\n-                            err.span_suggestion(\n-                                segment.ident.span,\n-                                &format!(\n-                                    \"consider specifying the type argument{} in the method call\",\n-                                    if params.len() > 1 {\n-                                        \"s\"\n-                                    } else {\n-                                        \"\"\n-                                    },\n-                                ),\n-                                format!(\"{}::<{}>\", snippet, params.join(\", \")),\n-                                Applicability::HasPlaceholders,\n-                            );\n-                        } else {\n-                            err.span_label(e.span, &format!(\n-                                \"this method call resolves to `{:?}`\",\n-                                sig.output().skip_binder(),\n-                            ));\n-                        }\n-                    }\n-                }\n+            if let ExprKind::MethodCall(segment, ..) = &e.kind {\n+                // Suggest specifiying type params or point out the return type of the call.\n+                self.annotate_method_call(segment, e, &mut err);\n             }\n         }\n         // Instead of the following:\n@@ -447,6 +408,57 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err\n     }\n \n+    /// If the `FnSig` for the method call can be found and type arguments are identified as\n+    /// needed, suggest annotating the call, otherwise point out the resulting type of the call.\n+    fn annotate_method_call(\n+        &self,\n+        segment: &hir::ptr::P<hir::PathSegment>,\n+        e: &Expr,\n+        err: &mut DiagnosticBuilder<'_>,\n+    ) {\n+        if let (Ok(snippet), Some(tables), None) = (\n+            self.tcx.sess.source_map().span_to_snippet(segment.ident.span),\n+            self.in_progress_tables,\n+            &segment.args,\n+        ) {\n+            let borrow = tables.borrow();\n+            let sigs = borrow.node_method_sig();\n+            if let Some(sig) = sigs.get(e.hir_id) {\n+                let mut params = vec![];\n+                for arg in sig.inputs_and_output().skip_binder().iter() {\n+                    if let ty::Param(param) = arg.kind {\n+                        if param.name != kw::SelfUpper {\n+                            let name = param.name.to_string();\n+                            if !params.contains(&name) {\n+                                params.push(name);\n+                            }\n+                        }\n+                    }\n+                }\n+                if !params.is_empty() {\n+                    err.span_suggestion(\n+                        segment.ident.span,\n+                        &format!(\n+                            \"consider specifying the type argument{} in the method call\",\n+                            if params.len() > 1 {\n+                                \"s\"\n+                            } else {\n+                                \"\"\n+                            },\n+                        ),\n+                        format!(\"{}::<{}>\", snippet, params.join(\", \")),\n+                        Applicability::HasPlaceholders,\n+                    );\n+                } else {\n+                    err.span_label(e.span, &format!(\n+                        \"this method call resolves to `{:?}`\",\n+                        sig.output().skip_binder(),\n+                    ));\n+                }\n+            }\n+        }\n+    }\n+\n     pub fn need_type_info_err_in_generator(\n         &self,\n         kind: hir::GeneratorKind,"}]}