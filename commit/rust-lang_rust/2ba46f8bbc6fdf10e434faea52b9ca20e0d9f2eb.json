{"sha": "2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYTQ2ZjhiYmM2ZmRmMTBlNDM0ZmFlYTUyYjljYTIwZTBkOWYyZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-27T14:53:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-27T14:53:15Z"}, "message": "Auto merge of #26616 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #26565, #26584, #26596, #26603\n- Failed merges:", "tree": {"sha": "c64523a6c190e5bc6399baf2dbef3f6048af1c07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c64523a6c190e5bc6399baf2dbef3f6048af1c07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb", "html_url": "https://github.com/rust-lang/rust/commit/2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b36ae019468c36c995523d797446a372ab9d14e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b36ae019468c36c995523d797446a372ab9d14e1", "html_url": "https://github.com/rust-lang/rust/commit/b36ae019468c36c995523d797446a372ab9d14e1"}, {"sha": "6dd33b459b30b65a75f644a75169cb6a07e4df53", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dd33b459b30b65a75f644a75169cb6a07e4df53", "html_url": "https://github.com/rust-lang/rust/commit/6dd33b459b30b65a75f644a75169cb6a07e4df53"}], "stats": {"total": 33, "additions": 3, "deletions": 30}, "files": [{"sha": "572111bf96158cd3a8ec49e2efb7cbab862637ea", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb", "patch": "@@ -19,6 +19,7 @@\n *.exe\n *.fn\n *.html\n+*.kdev4\n *.ky\n *.ll\n *.llvm"}, {"sha": "7e28651c6aafb1246283932cdb92e9ce83132595", "filename": "src/doc/reference.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb", "patch": "@@ -1047,11 +1047,8 @@ This is a list of behavior not considered *unsafe* in Rust terms, but that may\n be undesired.\n \n * Deadlocks\n-* Reading data from private fields (`std::repr`)\n * Leaks of memory and other resources\n * Exiting without calling destructors\n-* Sending signals\n-* Accessing/modifying the file system\n * Integer overflow\n   - Overflow is considered \"unexpected\" behavior and is always user-error,\n     unless the `wrapping` primitives are used. In non-optimized builds, the compiler"}, {"sha": "e8f1b829061c295b76927cd7b33a21791cd6998e", "filename": "src/doc/trpl/unsafe.md", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb/src%2Fdoc%2Ftrpl%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb/src%2Fdoc%2Ftrpl%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsafe.md?ref=2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb", "patch": "@@ -12,7 +12,7 @@ two contexts. The first one is to mark a function as unsafe:\n \n ```rust\n unsafe fn danger_will_robinson() {\n-    // scary stuff \n+    // scary stuff\n }\n ```\n \n@@ -68,11 +68,8 @@ Whew! That\u2019s a bunch of stuff. It\u2019s also important to notice all kinds of\n behaviors that are certainly bad, but are expressly _not_ unsafe:\n \n * Deadlocks\n-* Reading data from private fields\n-* Leaks due to reference count cycles\n+* Leaks of memory or other resources\n * Exiting without calling destructors\n-* Sending signals\n-* Accessing/modifying the file system\n * Integer overflow\n \n Rust cannot prevent all kinds of software problems. Buggy code can and will be"}, {"sha": "697b934c6760d5f1019b44606767a9cacc989e51", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=2ba46f8bbc6fdf10e434faea52b9ca20e0d9f2eb", "patch": "@@ -14,28 +14,6 @@\n //! library. Each macro is available for use when linking against the standard\n //! library.\n \n-/// The entry point for panic of Rust threads.\n-///\n-/// This macro is used to inject panic into a Rust thread, causing the thread to\n-/// unwind and panic entirely. Each thread's panic can be reaped as the\n-/// `Box<Any>` type, and the single-argument form of the `panic!` macro will be\n-/// the value which is transmitted.\n-///\n-/// The multi-argument form of this macro panics with a string and has the\n-/// `format!` syntax for building a string.\n-///\n-/// # Examples\n-///\n-/// ```should_panic\n-/// # #![allow(unreachable_code)]\n-/// panic!();\n-/// panic!(\"this is a terrible mistake!\");\n-/// panic!(4); // panic with the value of 4 to be collected elsewhere\n-/// panic!(\"this is a {} {message}\", \"fancy\", message = \"message\");\n-/// ```\n-#[macro_export]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow_internal_unstable]\n /// The entry point for panic of Rust threads.\n ///\n /// This macro is used to inject panic into a Rust thread, causing the thread to"}]}