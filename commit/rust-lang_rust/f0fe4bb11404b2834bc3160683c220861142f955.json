{"sha": "f0fe4bb11404b2834bc3160683c220861142f955", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZmU0YmIxMTQwNGIyODM0YmMzMTYwNjgzYzIyMDg2MTE0MmY5NTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-13T23:44:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-13T23:44:33Z"}, "message": "Address feedback", "tree": {"sha": "07aecfe7b4d3eade0a6d3678874f1ddc2563bfb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07aecfe7b4d3eade0a6d3678874f1ddc2563bfb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0fe4bb11404b2834bc3160683c220861142f955", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0fe4bb11404b2834bc3160683c220861142f955", "html_url": "https://github.com/rust-lang/rust/commit/f0fe4bb11404b2834bc3160683c220861142f955", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0fe4bb11404b2834bc3160683c220861142f955/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e46620af45ecf1f6388dc29f5a4b5f0954cf6dd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e46620af45ecf1f6388dc29f5a4b5f0954cf6dd8", "html_url": "https://github.com/rust-lang/rust/commit/e46620af45ecf1f6388dc29f5a4b5f0954cf6dd8"}], "stats": {"total": 55, "additions": 14, "deletions": 41}, "files": [{"sha": "4c2a2ff1086039c2c3f4c39a28aef8b9c2a53024", "filename": "src/libcore/finally.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0fe4bb11404b2834bc3160683c220861142f955/src%2Flibcore%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fe4bb11404b2834bc3160683c220861142f955/src%2Flibcore%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffinally.rs?ref=f0fe4bb11404b2834bc3160683c220861142f955", "patch": "@@ -32,7 +32,11 @@\n //! # }\n //! ```\n \n-#![deprecated = \"this was an unsightly interface. just implement Drop\"]\n+#![deprecated = \"It is unclear if this module is more robust than implementing \\\n+                 Drop on a custom type, and this module is being removed with no \\\n+                 replacement. Use a custom Drop implementation to regain existing \\\n+                 functionality.\"]\n+#![allow(deprecated)]\n \n use ops::{Drop, FnMut, FnOnce};\n "}, {"sha": "320ad0bf4d1da67238892518a7b8c75dc830542f", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 9, "deletions": 40, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f0fe4bb11404b2834bc3160683c220861142f955/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fe4bb11404b2834bc3160683c220861142f955/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=f0fe4bb11404b2834bc3160683c220861142f955", "patch": "@@ -19,41 +19,6 @@ use std::io::process::Command;\n use std::str;\n use std::ops::{Drop, FnMut, FnOnce};\n \n-pub trait Finally<T> {\n-    fn finally<F>(&mut self, dtor: F) -> T where F: FnMut();\n-}\n-\n-impl<T, F> Finally<T> for F where F: FnMut() -> T {\n-    fn finally<G>(&mut self, mut dtor: G) -> T where G: FnMut() {\n-        try_finally(&mut (), self, |_, f| (*f)(), |_| dtor())\n-    }\n-}\n-\n-pub fn try_finally<T, U, R, F, G>(mutate: &mut T, drop: U, try_fn: F, finally_fn: G) -> R where\n-    F: FnOnce(&mut T, U) -> R,\n-    G: FnMut(&mut T),\n-{\n-    let f = Finallyalizer {\n-        mutate: mutate,\n-        dtor: finally_fn,\n-    };\n-    try_fn(&mut *f.mutate, drop)\n-}\n-\n-struct Finallyalizer<'a, A:'a, F> where F: FnMut(&mut A) {\n-    mutate: &'a mut A,\n-    dtor: F,\n-}\n-\n-#[unsafe_destructor]\n-impl<'a, A, F> Drop for Finallyalizer<'a, A, F> where F: FnMut(&mut A) {\n-    #[inline]\n-    fn drop(&mut self) {\n-        (self.dtor)(self.mutate);\n-    }\n-}\n-\n-\n #[inline(never)]\n fn foo() {\n     let _v = vec![1i, 2, 3];\n@@ -64,11 +29,15 @@ fn foo() {\n \n #[inline(never)]\n fn double() {\n-    (|&mut:| {\n-        panic!(\"once\");\n-    }).finally(|| {\n-        panic!(\"twice\");\n-    })\n+    struct Double;\n+\n+    impl Drop for Double {\n+        fn drop(&mut self) { panic!(\"twice\") }\n+    }\n+\n+    let _d = Double;\n+\n+    panic!(\"once\");\n }\n \n fn runtest(me: &str) {"}]}