{"sha": "b652bbc6700e36c9ad80105c89d7fc2e3afec111", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NTJiYmM2NzAwZTM2YzlhZDgwMTA1Yzg5ZDdmYzJlM2FmZWMxMTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-07T23:24:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-10T09:37:11Z"}, "message": "Fall back from uv tty instances more aggressively\n\nIt appears that uv's support for interacting with a stdio stream as a tty when\nit's actually a pipe is pretty problematic. To get around this, promote a check\nto see if the stream is a tty to the top of the tty constructor, and bail out\nquickly if it's not identified as a tty.\n\nCloses #10237", "tree": {"sha": "d204a6217cfb8dbc41fdc44346a779ee60665924", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d204a6217cfb8dbc41fdc44346a779ee60665924"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b652bbc6700e36c9ad80105c89d7fc2e3afec111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b652bbc6700e36c9ad80105c89d7fc2e3afec111", "html_url": "https://github.com/rust-lang/rust/commit/b652bbc6700e36c9ad80105c89d7fc2e3afec111", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b652bbc6700e36c9ad80105c89d7fc2e3afec111/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df4c0b8e4349d50f317553de5a47d0cd56cdc227", "url": "https://api.github.com/repos/rust-lang/rust/commits/df4c0b8e4349d50f317553de5a47d0cd56cdc227", "html_url": "https://github.com/rust-lang/rust/commit/df4c0b8e4349d50f317553de5a47d0cd56cdc227"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "4853973f1a30721cae7a12be49f0ccfda19b9a2b", "filename": "src/librustuv/tty.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b652bbc6700e36c9ad80105c89d7fc2e3afec111/src%2Flibrustuv%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b652bbc6700e36c9ad80105c89d7fc2e3afec111/src%2Flibrustuv%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftty.rs?ref=b652bbc6700e36c9ad80105c89d7fc2e3afec111", "patch": "@@ -30,8 +30,22 @@ impl TtyWatcher {\n     pub fn new(loop_: &Loop, fd: libc::c_int, readable: bool)\n         -> Result<TtyWatcher, UvError>\n     {\n-        let handle = UvHandle::alloc(None::<TtyWatcher>, uvll::UV_TTY);\n+        // libuv may succeed in giving us a handle (via uv_tty_init), but if the\n+        // handle isn't actually connected to a terminal there are frequently\n+        // many problems in using it with libuv. To get around this, always\n+        // return a failure if the specified file descriptor isn't actually a\n+        // TTY.\n+        //\n+        // Related:\n+        // - https://github.com/joyent/libuv/issues/982\n+        // - https://github.com/joyent/libuv/issues/988\n+        if unsafe { uvll::guess_handle(fd) != uvll::UV_TTY as libc::c_int } {\n+            return Err(UvError(uvll::EBADF));\n+        }\n \n+        // If this file descriptor is indeed guessed to be a tty, then go ahead\n+        // with attempting to open it as a tty.\n+        let handle = UvHandle::alloc(None::<TtyWatcher>, uvll::UV_TTY);\n         match unsafe {\n             uvll::uv_tty_init(loop_.handle, handle, fd as libc::c_int,\n                               readable as libc::c_int)\n@@ -86,10 +100,6 @@ impl RtioTTY for TtyWatcher {\n             n => Err(uv_error_to_io_error(UvError(n)))\n         }\n     }\n-\n-    fn isatty(&self) -> bool {\n-        unsafe { uvll::guess_handle(self.fd) == uvll::UV_TTY as libc::c_int }\n-    }\n }\n \n impl UvHandle<uvll::uv_tty_t> for TtyWatcher {"}, {"sha": "58d182a22c30e0ab7210b9fc90cb4cca0199d6d3", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b652bbc6700e36c9ad80105c89d7fc2e3afec111/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b652bbc6700e36c9ad80105c89d7fc2e3afec111/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=b652bbc6700e36c9ad80105c89d7fc2e3afec111", "patch": "@@ -54,6 +54,7 @@ pub mod errors {\n     pub static EPIPE: c_int = -4048;\n     pub static ECONNABORTED: c_int = -4080;\n     pub static ECANCELED: c_int = -4082;\n+    pub static EBADF: c_int = -4084;\n }\n #[cfg(not(windows))]\n pub mod errors {\n@@ -67,6 +68,7 @@ pub mod errors {\n     pub static EPIPE: c_int = -libc::EPIPE;\n     pub static ECONNABORTED: c_int = -libc::ECONNABORTED;\n     pub static ECANCELED : c_int = -libc::ECANCELED;\n+    pub static EBADF : c_int = -libc::EBADF;\n }\n \n pub static PROCESS_SETUID: c_int = 1 << 0;"}, {"sha": "674b34639bc9023f37b0f3972f4880b3b301f78a", "filename": "src/libstd/rt/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b652bbc6700e36c9ad80105c89d7fc2e3afec111/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b652bbc6700e36c9ad80105c89d7fc2e3afec111/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fstdio.rs?ref=b652bbc6700e36c9ad80105c89d7fc2e3afec111", "patch": "@@ -277,12 +277,10 @@ impl StdWriter {\n         }\n     }\n \n-    /// Returns whether this tream is attached to a TTY instance or not.\n-    ///\n-    /// This is similar to libc's isatty() function\n+    /// Returns whether this stream is attached to a TTY instance or not.\n     pub fn isatty(&self) -> bool {\n         match self.inner {\n-            TTY(ref tty) => tty.isatty(),\n+            TTY(*) => true,\n             File(*) => false,\n         }\n     }"}, {"sha": "d623914cdadc93e95d6569b876e8c9f5594722e5", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b652bbc6700e36c9ad80105c89d7fc2e3afec111/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b652bbc6700e36c9ad80105c89d7fc2e3afec111/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=b652bbc6700e36c9ad80105c89d7fc2e3afec111", "patch": "@@ -222,7 +222,6 @@ pub trait RtioTTY {\n     fn write(&mut self, buf: &[u8]) -> Result<(), IoError>;\n     fn set_raw(&mut self, raw: bool) -> Result<(), IoError>;\n     fn get_winsize(&mut self) -> Result<(int, int), IoError>;\n-    fn isatty(&self) -> bool;\n }\n \n pub trait PausibleIdleCallback {"}]}