{"sha": "5a4066ebb788a81eaee6057bcd9c6487d210d8ca", "node_id": "C_kwDOAAsO6NoAKDVhNDA2NmViYjc4OGE4MWVhZWU2MDU3YmNkOWM2NDg3ZDIxMGQ4Y2E", "commit": {"author": {"name": "ozkanonur", "email": "work@onurozkan.dev", "date": "2023-04-05T11:02:28Z"}, "committer": {"name": "ozkanonur", "email": "work@onurozkan.dev", "date": "2023-04-05T11:02:28Z"}, "message": "submodule detection for proper fix on #96188\n\nThis commit resolves an internal FIXME note within the bootstrap by implementing submodule detection.\nThis is accomplished through an iterative process over the `.gitmodules` file.\n\nSigned-off-by: ozkanonur <work@onurozkan.dev>", "tree": {"sha": "c745a5c89679a3a93671b46f708d094a9610a722", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c745a5c89679a3a93671b46f708d094a9610a722"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a4066ebb788a81eaee6057bcd9c6487d210d8ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4066ebb788a81eaee6057bcd9c6487d210d8ca", "html_url": "https://github.com/rust-lang/rust/commit/5a4066ebb788a81eaee6057bcd9c6487d210d8ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a4066ebb788a81eaee6057bcd9c6487d210d8ca/comments", "author": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "540a50df0fb23127edf0b35b0e497748e24bba1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/540a50df0fb23127edf0b35b0e497748e24bba1a", "html_url": "https://github.com/rust-lang/rust/commit/540a50df0fb23127edf0b35b0e497748e24bba1a"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "ade8fa4c74dcb5fd35539dc79cc0d9b289e43d77", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5a4066ebb788a81eaee6057bcd9c6487d210d8ca/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4066ebb788a81eaee6057bcd9c6487d210d8ca/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=5a4066ebb788a81eaee6057bcd9c6487d210d8ca", "patch": "@@ -4,8 +4,9 @@ use std::collections::BTreeSet;\n use std::env;\n use std::ffi::OsStr;\n use std::fmt::{Debug, Write};\n-use std::fs::{self};\n+use std::fs::{self, File};\n use std::hash::Hash;\n+use std::io::{BufRead, BufReader};\n use std::ops::Deref;\n use std::path::{Component, Path, PathBuf};\n use std::process::Command;\n@@ -28,8 +29,11 @@ use crate::{clean, dist};\n use crate::{Build, CLang, DocTests, GitRepo, Mode};\n \n pub use crate::Compiler;\n-// FIXME: replace with std::lazy after it gets stabilized and reaches beta\n-use once_cell::sync::Lazy;\n+// FIXME:\n+// - use std::lazy for `Lazy`\n+// - use std::cell for `OnceCell`\n+// Once they get stabilized and reach beta.\n+use once_cell::sync::{Lazy, OnceCell};\n \n pub struct Builder<'a> {\n     pub build: &'a Build,\n@@ -484,17 +488,43 @@ impl<'a> ShouldRun<'a> {\n \n     // multiple aliases for the same job\n     pub fn paths(mut self, paths: &[&str]) -> Self {\n+        static SUBMODULES_PATHS: OnceCell<Vec<String>> = OnceCell::new();\n+\n+        let init_submodules_paths = |src: &PathBuf| {\n+            let file = File::open(src.join(\".gitmodules\")).unwrap();\n+\n+            let mut submodules_paths = vec![];\n+            for line in BufReader::new(file).lines() {\n+                if let Ok(line) = line {\n+                    let line = line.trim();\n+\n+                    if line.starts_with(\"path\") {\n+                        let actual_path =\n+                            line.split(' ').last().expect(\"Couldn't get value of path\");\n+                        submodules_paths.push(actual_path.to_owned());\n+                    }\n+                }\n+            }\n+\n+            submodules_paths\n+        };\n+\n+        let submodules_paths =\n+            SUBMODULES_PATHS.get_or_init(|| init_submodules_paths(&self.builder.src));\n+\n         self.paths.insert(PathSet::Set(\n             paths\n                 .iter()\n                 .map(|p| {\n-                    // FIXME(#96188): make sure this is actually a path.\n-                    // This currently breaks for paths within submodules.\n-                    //assert!(\n-                    //    self.builder.src.join(p).exists(),\n-                    //    \"`should_run.paths` should correspond to real on-disk paths - use `alias` if there is no relevant path: {}\",\n-                    //    p\n-                    //);\n+                    // assert only if `p` isn't submodule\n+                    if !submodules_paths.iter().find(|sm_p| p.contains(*sm_p)).is_some() {\n+                        assert!(\n+                            self.builder.src.join(p).exists(),\n+                            \"`should_run.paths` should correspond to real on-disk paths - use `alias` if there is no relevant path: {}\",\n+                            p\n+                        );\n+                    }\n+\n                     TaskPath { path: p.into(), kind: Some(self.kind) }\n                 })\n                 .collect(),"}]}