{"sha": "6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "node_id": "C_kwDOAAsO6NoAKDZhZTg5MTJhM2U3ZDJjNGM3NzUwMjRmNThhN2JhNGIxYWVkYzQwNzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-11T11:14:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-11T11:14:47Z"}, "message": "Auto merge of #89709 - clemenswasser:apply_clippy_suggestions_2, r=petrochenkov\n\nApply clippy suggestions for rustc and core", "tree": {"sha": "b1a74ad359f85c8805121858b0a93e86ff638875", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1a74ad359f85c8805121858b0a93e86ff638875"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "html_url": "https://github.com/rust-lang/rust/commit/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86d6d2b7389fe1b339402c1798edae8b695fc9ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/86d6d2b7389fe1b339402c1798edae8b695fc9ef", "html_url": "https://github.com/rust-lang/rust/commit/86d6d2b7389fe1b339402c1798edae8b695fc9ef"}, {"sha": "14b6cf6fd72f17f52f71b5fb79833489fb259bb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/14b6cf6fd72f17f52f71b5fb79833489fb259bb3", "html_url": "https://github.com/rust-lang/rust/commit/14b6cf6fd72f17f52f71b5fb79833489fb259bb3"}], "stats": {"total": 128, "additions": 56, "deletions": 72}, "files": [{"sha": "739c6fd0a435f3eea5a58e2339885ea0d32cd719", "filename": "compiler/rustc_apfloat/src/ieee.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -389,6 +389,7 @@ impl<S: Semantics> fmt::Display for IeeeFloat<S> {\n         let _: Loss = sig::shift_right(&mut sig, &mut exp, trailing_zeros as usize);\n \n         // Change the exponent from 2^e to 10^e.\n+        #[allow(clippy::comparison_chain)]\n         if exp == 0 {\n             // Nothing to do.\n         } else if exp > 0 {\n@@ -2526,6 +2527,7 @@ mod sig {\n         if *a_sign ^ b_sign {\n             let (reverse, loss);\n \n+            #[allow(clippy::comparison_chain)]\n             if bits == 0 {\n                 reverse = cmp(a_sig, b_sig) == Ordering::Less;\n                 loss = Loss::ExactlyZero;"}, {"sha": "81e2501ecbeadeb8732d808e9940f10f8b336636", "filename": "compiler/rustc_data_structures/src/base_n.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fbase_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fbase_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fbase_n.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -14,7 +14,7 @@ const BASE_64: &[u8; MAX_BASE as usize] =\n \n #[inline]\n pub fn push_str(mut n: u128, base: usize, output: &mut String) {\n-    debug_assert!(base >= 2 && base <= MAX_BASE);\n+    debug_assert!((2..=MAX_BASE).contains(&base));\n     let mut s = [0u8; 128];\n     let mut index = 0;\n "}, {"sha": "9ff401c3c7aad19d78a73c057b4001bce31d123e", "filename": "compiler/rustc_data_structures/src/graph/implementation/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fimplementation%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fimplementation%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fimplementation%2Fmod.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -206,17 +206,11 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         AdjacentEdges { graph: self, direction, next: first_edge }\n     }\n \n-    pub fn successor_nodes<'a>(\n-        &'a self,\n-        source: NodeIndex,\n-    ) -> impl Iterator<Item = NodeIndex> + 'a {\n+    pub fn successor_nodes(&self, source: NodeIndex) -> impl Iterator<Item = NodeIndex> + '_ {\n         self.outgoing_edges(source).targets()\n     }\n \n-    pub fn predecessor_nodes<'a>(\n-        &'a self,\n-        target: NodeIndex,\n-    ) -> impl Iterator<Item = NodeIndex> + 'a {\n+    pub fn predecessor_nodes(&self, target: NodeIndex) -> impl Iterator<Item = NodeIndex> + '_ {\n         self.incoming_edges(target).sources()\n     }\n "}, {"sha": "1c6979dc489a6ad979d5deb9fca0bc4342ea6326", "filename": "compiler/rustc_data_structures/src/graph/iterate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -48,7 +48,7 @@ fn post_order_walk<G: DirectedGraph + WithSuccessors + WithNumNodes>(\n         let node = frame.node;\n         visited[node] = true;\n \n-        while let Some(successor) = frame.iter.next() {\n+        for successor in frame.iter.by_ref() {\n             if !visited[successor] {\n                 stack.push(PostOrderFrame { node: successor, iter: graph.successors(successor) });\n                 continue 'recurse;\n@@ -112,7 +112,7 @@ where\n     /// This is equivalent to just invoke `next` repeatedly until\n     /// you get a `None` result.\n     pub fn complete_search(&mut self) {\n-        while let Some(_) = self.next() {}\n+        for _ in self {}\n     }\n \n     /// Returns true if node has been visited thus far."}, {"sha": "caf515b0d192a5331ed9067da1a366049a29c335", "filename": "compiler/rustc_data_structures/src/obligation_forest/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -390,7 +390,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })\n             .collect();\n \n-        self.compress(|_| assert!(false));\n+        self.compress(|_| unreachable!());\n         errors\n     }\n \n@@ -612,7 +612,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n     fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {\n         let orig_nodes_len = self.nodes.len();\n         let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);\n-        debug_assert!(node_rewrites.is_empty());\n+        assert!(node_rewrites.is_empty());\n         node_rewrites.extend(0..orig_nodes_len);\n         let mut dead_nodes = 0;\n \n@@ -623,13 +623,13 @@ impl<O: ForestObligation> ObligationForest<O> {\n         //     self.nodes[0..index - dead_nodes] are the first remaining nodes\n         //     self.nodes[index - dead_nodes..index] are all dead\n         //     self.nodes[index..] are unchanged\n-        for index in 0..orig_nodes_len {\n+        for (index, node_rewrite) in node_rewrites.iter_mut().enumerate() {\n             let node = &self.nodes[index];\n             match node.state.get() {\n                 NodeState::Pending | NodeState::Waiting => {\n                     if dead_nodes > 0 {\n                         self.nodes.swap(index, index - dead_nodes);\n-                        node_rewrites[index] -= dead_nodes;\n+                        *node_rewrite -= dead_nodes;\n                     }\n                 }\n                 NodeState::Done => {\n@@ -646,7 +646,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n                     }\n                     // Extract the success stories.\n                     outcome_cb(&node.obligation);\n-                    node_rewrites[index] = orig_nodes_len;\n+                    *node_rewrite = orig_nodes_len;\n                     dead_nodes += 1;\n                 }\n                 NodeState::Error => {\n@@ -655,7 +655,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n                     // check against.\n                     self.active_cache.remove(&node.obligation.as_cache_key());\n                     self.insert_into_error_cache(index);\n-                    node_rewrites[index] = orig_nodes_len;\n+                    *node_rewrite = orig_nodes_len;\n                     dead_nodes += 1;\n                 }\n                 NodeState::Success => unreachable!(),"}, {"sha": "e80db0845a7be405a04b5c3c1ca4d543b8a731d0", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -205,22 +205,22 @@ impl<K: Ord, V> SortedMap<K, V> {\n         R: RangeBounds<K>,\n     {\n         let start = match range.start_bound() {\n-            Bound::Included(ref k) => match self.lookup_index_for(k) {\n+            Bound::Included(k) => match self.lookup_index_for(k) {\n                 Ok(index) | Err(index) => index,\n             },\n-            Bound::Excluded(ref k) => match self.lookup_index_for(k) {\n+            Bound::Excluded(k) => match self.lookup_index_for(k) {\n                 Ok(index) => index + 1,\n                 Err(index) => index,\n             },\n             Bound::Unbounded => 0,\n         };\n \n         let end = match range.end_bound() {\n-            Bound::Included(ref k) => match self.lookup_index_for(k) {\n+            Bound::Included(k) => match self.lookup_index_for(k) {\n                 Ok(index) => index + 1,\n                 Err(index) => index,\n             },\n-            Bound::Excluded(ref k) => match self.lookup_index_for(k) {\n+            Bound::Excluded(k) => match self.lookup_index_for(k) {\n                 Ok(index) | Err(index) => index,\n             },\n             Bound::Unbounded => self.data.len(),"}, {"sha": "1395bb16e875c62ef81f909792ed5e3745322ee2", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -75,7 +75,7 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n     ///\n     /// If there are multiple items that are equivalent to `key`, they will be yielded in\n     /// insertion order.\n-    pub fn get_by_key(&'a self, key: K) -> impl 'a + Iterator<Item = &'a V> {\n+    pub fn get_by_key(&self, key: K) -> impl Iterator<Item = &V> {\n         self.get_by_key_enumerated(key).map(|(_, v)| v)\n     }\n \n@@ -84,7 +84,7 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n     ///\n     /// If there are multiple items that are equivalent to `key`, they will be yielded in\n     /// insertion order.\n-    pub fn get_by_key_enumerated(&'a self, key: K) -> impl '_ + Iterator<Item = (I, &V)> {\n+    pub fn get_by_key_enumerated(&self, key: K) -> impl Iterator<Item = (I, &V)> {\n         let lower_bound = self.idx_sorted_by_item_key.partition_point(|&i| self.items[i].0 < key);\n         self.idx_sorted_by_item_key[lower_bound..].iter().map_while(move |&i| {\n             let (k, v) = &self.items[i];"}, {"sha": "d4274e99f1cffc071184bd34a12054dc7815d494", "filename": "compiler/rustc_data_structures/src/sso/map.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -257,11 +257,7 @@ impl<K: Eq + Hash, V> SsoHashMap<K, V> {\n     pub fn remove(&mut self, key: &K) -> Option<V> {\n         match self {\n             SsoHashMap::Array(array) => {\n-                if let Some(index) = array.iter().position(|(k, _v)| k == key) {\n-                    Some(array.swap_remove(index).1)\n-                } else {\n-                    None\n-                }\n+                array.iter().position(|(k, _v)| k == key).map(|index| array.swap_remove(index).1)\n             }\n             SsoHashMap::Map(map) => map.remove(key),\n         }\n@@ -272,11 +268,7 @@ impl<K: Eq + Hash, V> SsoHashMap<K, V> {\n     pub fn remove_entry(&mut self, key: &K) -> Option<(K, V)> {\n         match self {\n             SsoHashMap::Array(array) => {\n-                if let Some(index) = array.iter().position(|(k, _v)| k == key) {\n-                    Some(array.swap_remove(index))\n-                } else {\n-                    None\n-                }\n+                array.iter().position(|(k, _v)| k == key).map(|index| array.swap_remove(index))\n             }\n             SsoHashMap::Map(map) => map.remove_entry(key),\n         }\n@@ -423,14 +415,14 @@ impl<K, V> IntoIterator for SsoHashMap<K, V> {\n \n /// adapts Item of array reference iterator to Item of hashmap reference iterator.\n #[inline(always)]\n-fn adapt_array_ref_it<K, V>(pair: &'a (K, V)) -> (&'a K, &'a V) {\n+fn adapt_array_ref_it<K, V>(pair: &(K, V)) -> (&K, &V) {\n     let (a, b) = pair;\n     (a, b)\n }\n \n /// adapts Item of array mut reference iterator to Item of hashmap mut reference iterator.\n #[inline(always)]\n-fn adapt_array_mut_it<K, V>(pair: &'a mut (K, V)) -> (&'a K, &'a mut V) {\n+fn adapt_array_mut_it<K, V>(pair: &mut (K, V)) -> (&K, &mut V) {\n     let (a, b) = pair;\n     (a, b)\n }"}, {"sha": "f71522d37148ad8b86217000570356f4b0540a2b", "filename": "compiler/rustc_data_structures/src/sso/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -75,7 +75,7 @@ impl<T> SsoHashSet<T> {\n     /// An iterator visiting all elements in arbitrary order.\n     /// The iterator element type is `&'a T`.\n     #[inline]\n-    pub fn iter(&'a self) -> impl Iterator<Item = &'a T> {\n+    pub fn iter(&self) -> impl Iterator<Item = &T> {\n         self.into_iter()\n     }\n "}, {"sha": "2e992e762273c1c3b1fab6dd6a2ab2df273e7ee9", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -229,14 +229,14 @@ impl<CTX> HashStable<CTX> for ::std::num::NonZeroUsize {\n \n impl<CTX> HashStable<CTX> for f32 {\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        let val: u32 = unsafe { ::std::mem::transmute(*self) };\n+        let val: u32 = self.to_bits();\n         val.hash_stable(ctx, hasher);\n     }\n }\n \n impl<CTX> HashStable<CTX> for f64 {\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        let val: u64 = unsafe { ::std::mem::transmute(*self) };\n+        let val: u64 = self.to_bits();\n         val.hash_stable(ctx, hasher);\n     }\n }"}, {"sha": "ba22c7f9b979966627712c6cab0b2475e613f90f", "filename": "compiler/rustc_data_structures/src/stack.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstack.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -5,6 +5,7 @@ const RED_ZONE: usize = 100 * 1024; // 100k\n \n // Only the first stack that is pushed, grows exponentially (2^n * STACK_PER_RECURSION) from then\n // on. This flag has performance relevant characteristics. Don't set it too high.\n+#[allow(clippy::identity_op)]\n const STACK_PER_RECURSION: usize = 1 * 1024 * 1024; // 1MB\n \n /// Grows the stack on demand to prevent stack overflow. Call this in strategic locations"}, {"sha": "a3ece6550473cce4ce080bbdc5e28f15b69e1cc2", "filename": "compiler/rustc_data_structures/src/steal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fsteal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fsteal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsteal.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -34,7 +34,7 @@ impl<T> Steal<T> {\n     #[track_caller]\n     pub fn borrow(&self) -> MappedReadGuard<'_, T> {\n         let borrow = self.value.borrow();\n-        if let None = &*borrow {\n+        if borrow.is_none() {\n             panic!(\"attempted to read from stolen value: {}\", std::any::type_name::<T>());\n         }\n         ReadGuard::map(borrow, |opt| opt.as_ref().unwrap())"}, {"sha": "9e605ea2d982c950b22d044a07d768718bc8b7b3", "filename": "compiler/rustc_data_structures/src/tiny_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Ftiny_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Ftiny_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftiny_list.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -48,7 +48,7 @@ impl<T: PartialEq> TinyList<T> {\n     #[inline]\n     pub fn contains(&self, data: &T) -> bool {\n         let mut elem = self.head.as_ref();\n-        while let Some(ref e) = elem {\n+        while let Some(e) = elem {\n             if &e.data == data {\n                 return true;\n             }"}, {"sha": "ce60d40b24b44e1087a5428c02d214c0379f8e89", "filename": "compiler/rustc_data_structures/src/vec_linked_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fvec_linked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_data_structures%2Fsrc%2Fvec_linked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_linked_list.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -2,8 +2,8 @@ use rustc_index::vec::{Idx, IndexVec};\n \n pub fn iter<Ls>(\n     first: Option<Ls::LinkIndex>,\n-    links: &'a Ls,\n-) -> impl Iterator<Item = Ls::LinkIndex> + 'a\n+    links: &Ls,\n+) -> impl Iterator<Item = Ls::LinkIndex> + '_\n where\n     Ls: Links,\n {"}, {"sha": "e69289b71f97f9feee16f51ad18f61fe67a01477", "filename": "compiler/rustc_graphviz/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -512,7 +512,7 @@ impl<'a> LabelText<'a> {\n     pub fn to_dot_string(&self) -> String {\n         match *self {\n             LabelStr(ref s) => format!(\"\\\"{}\\\"\", s.escape_default()),\n-            EscStr(ref s) => format!(\"\\\"{}\\\"\", LabelText::escape_str(&s)),\n+            EscStr(ref s) => format!(\"\\\"{}\\\"\", LabelText::escape_str(s)),\n             HtmlStr(ref s) => format!(\"<{}>\", s),\n         }\n     }"}, {"sha": "1995fd64e6f2cf7c779563557ba655a8f72ae736", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -990,9 +990,8 @@ impl<R: Idx, C: Idx> BitMatrix<R, C> {\n     pub fn insert_all_into_row(&mut self, row: R) {\n         assert!(row.index() < self.num_rows);\n         let (start, end) = self.range(row);\n-        let words = &mut self.words[..];\n-        for index in start..end {\n-            words[index] = !0;\n+        for word in self.words[start..end].iter_mut() {\n+            *word = !0;\n         }\n         self.clear_excess_bits(row);\n     }\n@@ -1144,7 +1143,7 @@ impl<R: Idx, C: Idx> SparseBitMatrix<R, C> {\n \n     /// Iterates through all the columns set to true in a given row of\n     /// the matrix.\n-    pub fn iter<'a>(&'a self, row: R) -> impl Iterator<Item = C> + 'a {\n+    pub fn iter(&self, row: R) -> impl Iterator<Item = C> + '_ {\n         self.row(row).into_iter().flat_map(|r| r.iter())\n     }\n "}, {"sha": "e9efa2f255d1413dbde14cc5bf29ab2db87a9b12", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -634,18 +634,15 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn drain<'a, R: RangeBounds<usize>>(\n-        &'a mut self,\n-        range: R,\n-    ) -> impl Iterator<Item = T> + 'a {\n+    pub fn drain<R: RangeBounds<usize>>(&mut self, range: R) -> impl Iterator<Item = T> + '_ {\n         self.raw.drain(range)\n     }\n \n     #[inline]\n-    pub fn drain_enumerated<'a, R: RangeBounds<usize>>(\n-        &'a mut self,\n+    pub fn drain_enumerated<R: RangeBounds<usize>>(\n+        &mut self,\n         range: R,\n-    ) -> impl Iterator<Item = (I, T)> + 'a {\n+    ) -> impl Iterator<Item = (I, T)> + '_ {\n         self.raw.drain(range).enumerate().map(|(n, t)| (I::new(n), t))\n     }\n "}, {"sha": "804dc657f2d473b624610de24a648fe9c556e186", "filename": "compiler/rustc_lexer/src/unescape.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -68,11 +68,10 @@ pub enum EscapeError {\n impl EscapeError {\n     /// Returns true for actual errors, as opposed to warnings.\n     pub fn is_fatal(&self) -> bool {\n-        match self {\n-            EscapeError::UnskippedWhitespaceWarning => false,\n-            EscapeError::MultipleSkippedLinesWarning => false,\n-            _ => true,\n-        }\n+        !matches!(\n+            self,\n+            EscapeError::UnskippedWhitespaceWarning | EscapeError::MultipleSkippedLinesWarning\n+        )\n     }\n }\n \n@@ -330,7 +329,7 @@ where\n             callback(start..end, Err(EscapeError::MultipleSkippedLinesWarning));\n         }\n         let tail = &tail[first_non_space..];\n-        if let Some(c) = tail.chars().nth(0) {\n+        if let Some(c) = tail.chars().next() {\n             // For error reporting, we would like the span to contain the character that was not\n             // skipped.  The +1 is necessary to account for the leading \\ that started the escape.\n             let end = start + first_non_space + c.len_utf8() + 1;"}, {"sha": "63bdcea87f8170a97df6b45df4f8bc8d8032e910", "filename": "compiler/rustc_macros/src/hash_stable.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -24,11 +24,9 @@ fn parse_attributes(field: &syn::Field) -> Attributes {\n                         }\n                         if meta.path().is_ident(\"project\") {\n                             if let Meta::List(list) = meta {\n-                                if let Some(nested) = list.nested.iter().next() {\n-                                    if let NestedMeta::Meta(meta) = nested {\n-                                        attrs.project = meta.path().get_ident().cloned();\n-                                        any_attr = true;\n-                                    }\n+                                if let Some(NestedMeta::Meta(meta)) = list.nested.iter().next() {\n+                                    attrs.project = meta.path().get_ident().cloned();\n+                                    any_attr = true;\n                                 }\n                             }\n                         }"}, {"sha": "c8959dc86ad2d87b3fd0c67a81389d211cf758de", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -349,14 +349,14 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n     ) -> Result<proc_macro2::TokenStream, SessionDiagnosticDeriveError> {\n         let field_binding = &info.binding.binding;\n \n-        let option_ty = option_inner_ty(&info.ty);\n+        let option_ty = option_inner_ty(info.ty);\n \n         let generated_code = self.generate_non_option_field_code(\n             attr,\n             FieldInfo {\n                 vis: info.vis,\n                 binding: info.binding,\n-                ty: option_ty.unwrap_or(&info.ty),\n+                ty: option_ty.unwrap_or(info.ty),\n                 span: info.span,\n             },\n         )?;\n@@ -388,7 +388,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                 let formatted_str = self.build_format(&s.value(), attr.span());\n                 match name {\n                     \"message\" => {\n-                        if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n+                        if type_matches_path(info.ty, &[\"rustc_span\", \"Span\"]) {\n                             quote! {\n                                 #diag.set_span(*#field_binding);\n                                 #diag.set_primary_message(#formatted_str);\n@@ -401,7 +401,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                         }\n                     }\n                     \"label\" => {\n-                        if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n+                        if type_matches_path(info.ty, &[\"rustc_span\", \"Span\"]) {\n                             quote! {\n                                 #diag.span_label(*#field_binding, #formatted_str);\n                             }"}, {"sha": "6671c7c0fa60ca18d15472ef72157f6b54a86a9f", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -500,8 +500,8 @@ impl<D: Decoder, const N: usize> Decodable<D> for [u8; N] {\n         d.read_seq(|d, len| {\n             assert!(len == N);\n             let mut v = [0u8; N];\n-            for i in 0..len {\n-                v[i] = d.read_seq_elt(|d| Decodable::decode(d))?;\n+            for x in &mut v {\n+                *x = d.read_seq_elt(|d| Decodable::decode(d))?;\n             }\n             Ok(v)\n         })"}, {"sha": "8cff266642fef674f715e6f8f6cafd99df4dac92", "filename": "library/core/src/num/fmt.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/library%2Fcore%2Fsrc%2Fnum%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073/library%2Fcore%2Fsrc%2Fnum%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ffmt.rs?ref=6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "patch": "@@ -31,8 +31,10 @@ impl<'a> Part<'a> {\n                     } else {\n                         3\n                     }\n+                } else if v < 10_000 {\n+                    4\n                 } else {\n-                    if v < 10_000 { 4 } else { 5 }\n+                    5\n                 }\n             }\n             Part::Copy(buf) => buf.len(),"}]}