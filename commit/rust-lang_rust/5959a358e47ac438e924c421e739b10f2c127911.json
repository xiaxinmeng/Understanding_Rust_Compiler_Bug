{"sha": "5959a358e47ac438e924c421e739b10f2c127911", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NTlhMzU4ZTQ3YWM0MzhlOTI0YzQyMWU3MzliMTBmMmMxMjc5MTE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-12T19:39:53Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-16T19:09:05Z"}, "message": "Move logic from push_wild_constructor to apply_constructor", "tree": {"sha": "d374ceb1bf87970dc0a1c4b7aa039d10b80406e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d374ceb1bf87970dc0a1c4b7aa039d10b80406e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5959a358e47ac438e924c421e739b10f2c127911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5959a358e47ac438e924c421e739b10f2c127911", "html_url": "https://github.com/rust-lang/rust/commit/5959a358e47ac438e924c421e739b10f2c127911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5959a358e47ac438e924c421e739b10f2c127911/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4aa929cf8b47840671bf2c9a84f70abaead70a85", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa929cf8b47840671bf2c9a84f70abaead70a85", "html_url": "https://github.com/rust-lang/rust/commit/4aa929cf8b47840671bf2c9a84f70abaead70a85"}], "stats": {"total": 42, "additions": 10, "deletions": 32}, "files": [{"sha": "26df06663401580d029486d793f8c1be5e300210", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5959a358e47ac438e924c421e739b10f2c127911/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5959a358e47ac438e924c421e739b10f2c127911/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=5959a358e47ac438e924c421e739b10f2c127911", "patch": "@@ -351,38 +351,15 @@ impl<'tcx> Witness<'tcx> {\n         ty: Ty<'tcx>)\n         -> Self\n     {\n-        // If we've been trying to exhaustively match over the domain of values for a type,\n-        // then we can construct witnesses directly corresponding to the missing ranges of values,\n-        // giving far more precise diagnostics.\n-        // `ConstantValue` and `ConstantRange` only occur in practice when doing exhaustive value\n-        // matching (exhaustive_integer_patterns).\n-        match ctor {\n-            ConstantValue(value) => {\n-                Witness(vec![Pattern {\n-                    ty,\n-                    span: DUMMY_SP,\n-                    kind: box PatternKind::Constant { value },\n-                }])\n-            }\n-            ConstantRange(lo, hi, end) => {\n-                Witness(vec![Pattern {\n-                    ty,\n-                    span: DUMMY_SP,\n-                    kind: box PatternKind::Range { lo, hi, end: *end },\n-                }])\n+        let sub_pattern_tys = constructor_sub_pattern_tys(cx, ctor, ty);\n+        self.0.extend(sub_pattern_tys.into_iter().map(|ty| {\n+            Pattern {\n+                ty,\n+                span: DUMMY_SP,\n+                kind: box PatternKind::Wild,\n             }\n-            _ => {\n-                let sub_pattern_tys = constructor_sub_pattern_tys(cx, ctor, ty);\n-                self.0.extend(sub_pattern_tys.into_iter().map(|ty| {\n-                    Pattern {\n-                        ty,\n-                        span: DUMMY_SP,\n-                        kind: box PatternKind::Wild,\n-                    }\n-                }));\n-                self.apply_constructor(cx, ctor, ty)\n-            }\n-        }\n+        }));\n+        self.apply_constructor(cx, ctor, ty)\n     }\n \n \n@@ -409,7 +386,7 @@ impl<'tcx> Witness<'tcx> {\n         let arity = constructor_arity(cx, ctor, ty);\n         let pat = {\n             let len = self.0.len() as u64;\n-            let mut pats = self.0.drain((len-arity) as usize..).rev();\n+            let mut pats = self.0.drain((len - arity) as usize..).rev();\n \n             match ty.sty {\n                 ty::TyAdt(..) |\n@@ -452,6 +429,7 @@ impl<'tcx> Witness<'tcx> {\n                 _ => {\n                     match *ctor {\n                         ConstantValue(value) => PatternKind::Constant { value },\n+                        ConstantRange(lo, hi, end) => PatternKind::Range { lo, hi, end },\n                         _ => PatternKind::Wild,\n                     }\n                 }"}]}