{"sha": "7ca2b9461fdcd94ae1ac40bae02397d5a2daddd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYTJiOTQ2MWZkY2Q5NGFlMWFjNDBiYWUwMjM5N2Q1YTJkYWRkZDA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-26T20:51:00Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-27T17:24:54Z"}, "message": "Review changes and satisfy make tidy", "tree": {"sha": "3b53a6695f9fa6dc73414421914772f5d1b995ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b53a6695f9fa6dc73414421914772f5d1b995ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ca2b9461fdcd94ae1ac40bae02397d5a2daddd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ca2b9461fdcd94ae1ac40bae02397d5a2daddd0", "html_url": "https://github.com/rust-lang/rust/commit/7ca2b9461fdcd94ae1ac40bae02397d5a2daddd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ca2b9461fdcd94ae1ac40bae02397d5a2daddd0/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7652bf8098f143274255219d07baefa38eb9a29", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7652bf8098f143274255219d07baefa38eb9a29", "html_url": "https://github.com/rust-lang/rust/commit/f7652bf8098f143274255219d07baefa38eb9a29"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "c786b4d711c39157329ad96d61b7b6f1fb021414", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ca2b9461fdcd94ae1ac40bae02397d5a2daddd0/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7ca2b9461fdcd94ae1ac40bae02397d5a2daddd0/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=7ca2b9461fdcd94ae1ac40bae02397d5a2daddd0", "patch": "@@ -12,4 +12,4 @@ crate-type = [\"dylib\"]\n log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }\n syntax = { path = \"../libsyntax\" }\n-serialize = { path = \"../librustc_serialize\" }\n+serialize = { path = \"../libserialize\" }"}, {"sha": "6d15acff1f1cc83c543b76d969e25c10feca3586", "filename": "src/librustc_save_analysis/dump.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7ca2b9461fdcd94ae1ac40bae02397d5a2daddd0/src%2Flibrustc_save_analysis%2Fdump.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca2b9461fdcd94ae1ac40bae02397d5a2daddd0/src%2Flibrustc_save_analysis%2Fdump.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump.rs?ref=7ca2b9461fdcd94ae1ac40bae02397d5a2daddd0", "patch": "@@ -11,28 +11,28 @@\n use super::data::*;\n \n pub trait Dump {\n-    fn crate_prelude(&mut self, CratePreludeData);\n-    fn enum_data(&mut self, EnumData);\n-    fn extern_crate(&mut self, ExternCrateData);\n-    fn impl_data(&mut self, ImplData);\n-    fn inheritance(&mut self, InheritanceData);\n-    fn function(&mut self, FunctionData);\n-    fn function_ref(&mut self, FunctionRefData);\n-    fn function_call(&mut self, FunctionCallData);\n-    fn method(&mut self, MethodData);\n-    fn method_call(&mut self, MethodCallData);\n-    fn macro_data(&mut self, MacroData);\n-    fn macro_use(&mut self, MacroUseData);\n-    fn mod_data(&mut self, ModData);\n-    fn mod_ref(&mut self, ModRefData);\n-    fn struct_data(&mut self, StructData);\n-    fn struct_variant(&mut self, StructVariantData);\n-    fn trait_data(&mut self, TraitData);\n-    fn tuple_variant(&mut self, TupleVariantData);\n-    fn type_ref(&mut self, TypeRefData);\n-    fn typedef(&mut self, TypedefData);\n-    fn use_data(&mut self, UseData);\n-    fn use_glob(&mut self, UseGlobData);\n-    fn variable(&mut self, VariableData);\n-    fn variable_ref(&mut self, VariableRefData);\n+    fn crate_prelude(&mut self, CratePreludeData) {}\n+    fn enum_data(&mut self, EnumData) {}\n+    fn extern_crate(&mut self, ExternCrateData) {}\n+    fn impl_data(&mut self, ImplData) {}\n+    fn inheritance(&mut self, InheritanceData) {}\n+    fn function(&mut self, FunctionData) {}\n+    fn function_ref(&mut self, FunctionRefData) {}\n+    fn function_call(&mut self, FunctionCallData) {}\n+    fn method(&mut self, MethodData) {}\n+    fn method_call(&mut self, MethodCallData) {}\n+    fn macro_data(&mut self, MacroData) {}\n+    fn macro_use(&mut self, MacroUseData) {}\n+    fn mod_data(&mut self, ModData) {}\n+    fn mod_ref(&mut self, ModRefData) {}\n+    fn struct_data(&mut self, StructData) {}\n+    fn struct_variant(&mut self, StructVariantData) {}\n+    fn trait_data(&mut self, TraitData) {}\n+    fn tuple_variant(&mut self, TupleVariantData) {}\n+    fn type_ref(&mut self, TypeRefData) {}\n+    fn typedef(&mut self, TypedefData) {}\n+    fn use_data(&mut self, UseData) {}\n+    fn use_glob(&mut self, UseGlobData) {}\n+    fn variable(&mut self, VariableData) {}\n+    fn variable_ref(&mut self, VariableRefData) {}\n }"}, {"sha": "7c379774f2b2ab16883fa5b7bbded808f864c0d1", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7ca2b9461fdcd94ae1ac40bae02397d5a2daddd0/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca2b9461fdcd94ae1ac40bae02397d5a2daddd0/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=7ca2b9461fdcd94ae1ac40bae02397d5a2daddd0", "patch": "@@ -28,7 +28,7 @@ impl<'a, 'b, W: Write> JsonDumper<'a, 'b, W> {\n     pub fn new(writer: &'b mut W, codemap: &'a CodeMap) -> JsonDumper<'a, 'b, W> {\n         if let Err(_) = write!(writer, \"[\") {\n             error!(\"Error writing output\");\n-        }        \n+        }\n         JsonDumper { output: writer, codemap:codemap, first: true }\n     }\n }\n@@ -109,7 +109,7 @@ impl Lower for data::CratePreludeData {\n             crate_name: self.crate_name,\n             crate_root: self.crate_root,\n             external_crates: self.external_crates,\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n         }\n     }\n }\n@@ -132,7 +132,7 @@ impl Lower for data::EnumData {\n             id: self.id,\n             value: self.value,\n             qualname: self.qualname,\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             scope: self.scope,\n         }\n     }\n@@ -158,7 +158,7 @@ impl Lower for data::ExternCrateData {\n             name: self.name,\n             crate_num: self.crate_num,\n             location: self.location,\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             scope: self.scope,\n         }\n     }\n@@ -177,7 +177,7 @@ impl Lower for data::FunctionCallData {\n \n     fn lower(self, cm: &CodeMap) -> FunctionCallData {\n         FunctionCallData {\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             scope: self.scope,\n             ref_id: self.ref_id.index.as_u32(),\n         }\n@@ -204,7 +204,7 @@ impl Lower for data::FunctionData {\n             name: self.name,\n             qualname: self.qualname,\n             declaration: self.declaration.map(|id| id.index.as_u32()),\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             scope: self.scope,\n         }\n     }\n@@ -223,7 +223,7 @@ impl Lower for data::FunctionRefData {\n \n     fn lower(self, cm: &CodeMap) -> FunctionRefData {\n         FunctionRefData {\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             scope: self.scope,\n             ref_id: self.ref_id.index.as_u32(),\n         }\n@@ -244,7 +244,7 @@ impl Lower for data::ImplData {\n     fn lower(self, cm: &CodeMap) -> ImplData {\n         ImplData {\n             id: self.id,\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             scope: self.scope,\n             trait_ref: self.trait_ref.map(|id| id.index.as_u32()),\n             self_ref: self.self_ref.map(|id| id.index.as_u32()),\n@@ -264,7 +264,7 @@ impl Lower for data::InheritanceData {\n \n     fn lower(self, cm: &CodeMap) -> InheritanceData {\n         InheritanceData {\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             base_id: self.base_id.index.as_u32(),\n             deriv_id: self.deriv_id\n         }\n@@ -284,7 +284,7 @@ impl Lower for data::MacroData {\n \n     fn lower(self, cm: &CodeMap) -> MacroData {\n         MacroData {\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             name: self.name,\n             qualname: self.qualname,\n         }\n@@ -309,7 +309,7 @@ impl Lower for data::MacroUseData {\n \n     fn lower(self, cm: &CodeMap) -> MacroUseData {\n         MacroUseData {\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             name: self.name,\n             qualname: self.qualname,\n             callee_span: SpanData::from_span(self.callee_span, cm),\n@@ -333,7 +333,7 @@ impl Lower for data::MethodCallData {\n \n     fn lower(self, cm: &CodeMap) -> MethodCallData {\n         MethodCallData {\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             scope: self.scope,\n             ref_id: self.ref_id.map(|id| id.index.as_u32()),\n             decl_id: self.decl_id.map(|id| id.index.as_u32()),\n@@ -355,7 +355,7 @@ impl Lower for data::MethodData {\n \n     fn lower(self, cm: &CodeMap) -> MethodData {\n         MethodData {\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             scope: self.scope,\n             id: self.id,\n             qualname: self.qualname,\n@@ -382,7 +382,7 @@ impl Lower for data::ModData {\n             id: self.id,\n             name: self.name,\n             qualname: self.qualname,\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             scope: self.scope,\n             filename: self.filename,\n         }\n@@ -403,7 +403,7 @@ impl Lower for data::ModRefData {\n \n     fn lower(self, cm: &CodeMap) -> ModRefData {\n         ModRefData {\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             scope: self.scope,\n             ref_id: self.ref_id.map(|id| id.index.as_u32()),\n             qualname: self.qualname,\n@@ -426,7 +426,7 @@ impl Lower for data::StructData {\n \n     fn lower(self, cm: &CodeMap) -> StructData {\n         StructData {\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             id: self.id,\n             ctor_id: self.ctor_id,\n             qualname: self.qualname,\n@@ -451,7 +451,7 @@ impl Lower for data::StructVariantData {\n \n     fn lower(self, cm: &CodeMap) -> StructVariantData {\n         StructVariantData {\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             id: self.id,\n             qualname: self.qualname,\n             type_value: self.type_value,\n@@ -475,7 +475,7 @@ impl Lower for data::TraitData {\n \n     fn lower(self, cm: &CodeMap) -> TraitData {\n         TraitData {\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             id: self.id,\n             qualname: self.qualname,\n             scope: self.scope,\n@@ -500,7 +500,7 @@ impl Lower for data::TupleVariantData {\n \n     fn lower(self, cm: &CodeMap) -> TupleVariantData {\n         TupleVariantData {\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             id: self.id,\n             name: self.name,\n             qualname: self.qualname,\n@@ -526,7 +526,7 @@ impl Lower for data::TypedefData {\n     fn lower(self, cm: &CodeMap) -> TypedefData {\n         TypedefData {\n             id: self.id,\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             qualname: self.qualname,\n             value: self.value,\n         }\n@@ -547,7 +547,7 @@ impl Lower for data::TypeRefData {\n \n     fn lower(self, cm: &CodeMap) -> TypeRefData {\n         TypeRefData {\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             scope: self.scope,\n             ref_id: self.ref_id.map(|id| id.index.as_u32()),\n             qualname: self.qualname,\n@@ -570,7 +570,7 @@ impl Lower for data::UseData {\n     fn lower(self, cm: &CodeMap) -> UseData {\n         UseData {\n             id: self.id,\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             name: self.name,\n             mod_id: self.mod_id.map(|id| id.index.as_u32()),\n             scope: self.scope,\n@@ -592,7 +592,7 @@ impl Lower for data::UseGlobData {\n     fn lower(self, cm: &CodeMap) -> UseGlobData {\n         UseGlobData {\n             id: self.id,\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             names: self.names,\n             scope: self.scope,\n         }\n@@ -619,7 +619,7 @@ impl Lower for data::VariableData {\n             id: self.id,\n             name: self.name,\n             qualname: self.qualname,\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             scope: self.scope,\n             value: self.value,\n             type_value: self.type_value,\n@@ -643,7 +643,7 @@ impl Lower for data::VariableRefData {\n     fn lower(self, cm: &CodeMap) -> VariableRefData {\n         VariableRefData {\n             name: self.name,\n-            span: SpanData::from_span(self.span, cm),    \n+            span: SpanData::from_span(self.span, cm),\n             scope: self.scope,\n             ref_id: self.ref_id.index.as_u32(),\n         }"}, {"sha": "6830735b0bab4411979bb631680c8f11273227a4", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ca2b9461fdcd94ae1ac40bae02397d5a2daddd0/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca2b9461fdcd94ae1ac40bae02397d5a2daddd0/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=7ca2b9461fdcd94ae1ac40bae02397d5a2daddd0", "patch": "@@ -763,7 +763,7 @@ pub fn process_crate<'l, 'tcx>(tcx: &'l TyCtxt<'tcx>,\n             let mut visitor = DumpVisitor::new(tcx, save_ctxt, analysis, &mut dumper);\n \n             visitor.dump_crate_info(cratename, krate);\n-            visit::walk_crate(&mut visitor, krate);            \n+            visit::walk_crate(&mut visitor, krate);\n         }}\n     }\n "}]}