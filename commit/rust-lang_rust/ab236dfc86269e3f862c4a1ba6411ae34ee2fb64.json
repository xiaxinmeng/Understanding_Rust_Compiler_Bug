{"sha": "ab236dfc86269e3f862c4a1ba6411ae34ee2fb64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMjM2ZGZjODYyNjllM2Y4NjJjNGExYmE2NDExYWUzNGVlMmZiNjQ=", "commit": {"author": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2018-09-13T15:07:34Z"}, "committer": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2018-09-18T12:36:37Z"}, "message": "Update NLL 3-point error message for fake reads in optimized let patterns", "tree": {"sha": "664df774c323b342656a49d98e361d7fd1cc2264", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/664df774c323b342656a49d98e361d7fd1cc2264"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64", "html_url": "https://github.com/rust-lang/rust/commit/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5e310530a96ee1dc443e08c62e5a60e14234306", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e310530a96ee1dc443e08c62e5a60e14234306", "html_url": "https://github.com/rust-lang/rust/commit/f5e310530a96ee1dc443e08c62e5a60e14234306"}], "stats": {"total": 85, "additions": 56, "deletions": 29}, "files": [{"sha": "a62e608a8758f607f3ba4f78bd874bd3778337b1", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=ab236dfc86269e3f862c4a1ba6411ae34ee2fb64", "patch": "@@ -11,7 +11,7 @@\n use borrow_check::borrow_set::BorrowData;\n use borrow_check::nll::region_infer::Cause;\n use borrow_check::{Context, MirBorrowckCtxt, WriteKind};\n-use rustc::mir::{Local, Location, Place, TerminatorKind};\n+use rustc::mir::{FakeReadCause, Local, Location, Place, StatementKind, TerminatorKind};\n use rustc_errors::DiagnosticBuilder;\n use rustc::ty::Region;\n \n@@ -142,7 +142,31 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     if spans.for_closure() {\n                         \"borrow later captured here by closure\"\n                     } else {\n-                        \"borrow later used here\"\n+                        // Check if the location represents a `FakeRead`, and adapt the error\n+                        // message to the `FakeReadCause` it is from: in particular,\n+                        // the ones inserted in optimized `let var = <expr>` patterns.\n+                        let is_fake_read_for_let = match self.mir.basic_blocks()[location.block]\n+                            .statements\n+                            .get(location.statement_index)\n+                        {\n+                            None => false,\n+                            Some(stmt) => {\n+                                if let StatementKind::FakeRead(ref cause, _) = stmt.kind {\n+                                    match cause {\n+                                        FakeReadCause::ForLet => true,\n+                                        _ => false,\n+                                    }\n+                                } else {\n+                                    false\n+                                }\n+                            }\n+                        };\n+\n+                        if is_fake_read_for_let {\n+                            \"borrow later stored here\"\n+                        } else {\n+                            \"borrow later used here\"\n+                        }\n                     }\n                 };\n                 err.span_label(spans.var_or_use(), message);"}, {"sha": "2488df7772b3f08383a50f1fb21b7751069b9fc6", "filename": "src/test/ui/generator/borrowing.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr?ref=ab236dfc86269e3f862c4a1ba6411ae34ee2fb64", "patch": "@@ -10,15 +10,16 @@ LL |     };\n error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:24:9\n    |\n+LL |       let _b = {\n+   |           -- borrow later stored here\n+LL |           let a = 3;\n LL | /         || {\n LL | |             yield &a\n LL | |             //~^ ERROR: `a` does not live long enough\n LL | |         }\n    | |_________^ borrowed value does not live long enough\n LL |       };\n    |       - `a` dropped here while still borrowed\n-LL |   }\n-   |   - borrow later used here, when `_b` is dropped\n \n error: aborting due to 2 previous errors\n "}, {"sha": "538903c591868420f9cf9e1c79aa92f765f4b988", "filename": "src/test/ui/regions/regions-steal-closure.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64/src%2Ftest%2Fui%2Fregions%2Fregions-steal-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64/src%2Ftest%2Fui%2Fregions%2Fregions-steal-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-steal-closure.nll.stderr?ref=ab236dfc86269e3f862c4a1ba6411ae34ee2fb64", "patch": "@@ -1,14 +1,15 @@\n error[E0597]: `i` does not live long enough\n   --> $DIR/regions-steal-closure.rs:24:28\n    |\n+LL |     let mut cl_box = {\n+   |         ---------- borrow later stored here\n+LL |         let mut i = 3;\n LL |         box_it(Box::new(|| i += 1)) //~ ERROR `i` does not live long enough\n    |                         -- ^ borrowed value does not live long enough\n    |                         |\n    |                         value captured here\n LL |     };\n    |     - `i` dropped here while still borrowed\n-LL |     cl_box.cl.call_mut(());\n-   |     --------- borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "fe2fa2887ed4813f87ee5b110fbf17eb4fbdbb90", "filename": "src/test/ui/span/range-2.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr?ref=ab236dfc86269e3f862c4a1ba6411ae34ee2fb64", "patch": "@@ -1,24 +1,24 @@\n error[E0597]: `a` does not live long enough\n   --> $DIR/range-2.rs:17:9\n    |\n+LL |     let r = {\n+   |         - borrow later stored here\n+...\n LL |         &a..&b\n    |         ^^ borrowed value does not live long enough\n LL |     };\n    |     - `a` dropped here while still borrowed\n-...\n-LL |     r.use_ref();\n-   |     - borrow later used here\n \n error[E0597]: `b` does not live long enough\n   --> $DIR/range-2.rs:17:13\n    |\n+LL |     let r = {\n+   |         - borrow later stored here\n+...\n LL |         &a..&b\n    |             ^^ borrowed value does not live long enough\n LL |     };\n    |     - `b` dropped here while still borrowed\n-...\n-LL |     r.use_ref();\n-   |     - borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "80e2266896fabb56f1b2fed1f7c6c1c17648eb27", "filename": "src/test/ui/span/send-is-not-static-ensures-scoping.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.nll.stderr?ref=ab236dfc86269e3f862c4a1ba6411ae34ee2fb64", "patch": "@@ -1,28 +1,28 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/send-is-not-static-ensures-scoping.rs:26:17\n    |\n+LL |     let bad = {\n+   |         --- borrow later stored here\n+LL |         let x = 1;\n LL |         let y = &x;\n    |                 ^^ borrowed value does not live long enough\n ...\n LL |     };\n    |     - `x` dropped here while still borrowed\n-LL | \n-LL |     bad.join();\n-   |     --- borrow later used here\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/send-is-not-static-ensures-scoping.rs:30:22\n    |\n+LL |     let bad = {\n+   |         --- borrow later stored here\n+...\n LL |         scoped(|| {\n    |                -- value captured here\n LL |             let _z = y;\n    |                      ^ borrowed value does not live long enough\n ...\n LL |     };\n    |     - `y` dropped here while still borrowed\n-LL | \n-LL |     bad.join();\n-   |     --- borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5b79b71dda0d63d34d72754e4ac6f3541960b556", "filename": "src/test/ui/span/send-is-not-static-std-sync-2.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.nll.stderr?ref=ab236dfc86269e3f862c4a1ba6411ae34ee2fb64", "patch": "@@ -1,24 +1,24 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/send-is-not-static-std-sync-2.rs:21:20\n    |\n+LL |     let lock = {\n+   |         ---- borrow later stored here\n+LL |         let x = 1;\n LL |         Mutex::new(&x)\n    |                    ^^ borrowed value does not live long enough\n LL |     };\n    |     - `x` dropped here while still borrowed\n-...\n-LL |     let _dangling = *lock.lock().unwrap();\n-   |                      ---- borrow later used here\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/send-is-not-static-std-sync-2.rs:31:21\n    |\n+LL |     let lock = {\n+   |         ---- borrow later stored here\n+LL |         let x = 1;\n LL |         RwLock::new(&x)\n    |                     ^^ borrowed value does not live long enough\n LL |     };\n    |     - `x` dropped here while still borrowed\n-LL |     //~^^ ERROR `x` does not live long enough\n-LL |     let _dangling = *lock.read().unwrap();\n-   |                      ---- borrow later used here\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/send-is-not-static-std-sync-2.rs:41:25"}, {"sha": "85eb348257bbf302b14b75b89ede7014d4e1ccab", "filename": "src/test/ui/span/wf-method-late-bound-regions.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr?ref=ab236dfc86269e3f862c4a1ba6411ae34ee2fb64", "patch": "@@ -1,13 +1,13 @@\n error[E0597]: `pointer` does not live long enough\n   --> $DIR/wf-method-late-bound-regions.rs:30:18\n    |\n+LL |     let dangling = {\n+   |         -------- borrow later stored here\n+LL |         let pointer = Box::new(42);\n LL |         f2.xmute(&pointer)\n    |                  ^^^^^^^^ borrowed value does not live long enough\n LL |     };\n    |     - `pointer` dropped here while still borrowed\n-LL |     //~^^ ERROR `pointer` does not live long enough\n-LL |     println!(\"{}\", dangling);\n-   |                    -------- borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "7ba06b6ffb2d7c57e63697d1957f3d1bad120aaa", "filename": "src/test/ui/unboxed-closures/unboxed-closure-region.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab236dfc86269e3f862c4a1ba6411ae34ee2fb64/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.nll.stderr?ref=ab236dfc86269e3f862c4a1ba6411ae34ee2fb64", "patch": "@@ -1,14 +1,15 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/unboxed-closure-region.rs:18:12\n    |\n+LL |     let _f = {\n+   |         -- borrow later stored here\n+LL |         let x = 0;\n LL |         || x //~ ERROR `x` does not live long enough\n    |         -- ^ borrowed value does not live long enough\n    |         |\n    |         value captured here\n LL |     };\n    |     - `x` dropped here while still borrowed\n-LL |     _f;\n-   |     -- borrow later used here\n \n error: aborting due to previous error\n "}]}