{"sha": "1a2d443f55ce05fa96f309b94ceabf4813f06045", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMmQ0NDNmNTVjZTA1ZmE5NmYzMDliOTRjZWFiZjQ4MTNmMDYwNDU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-11-16T18:12:23Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-11-26T14:12:42Z"}, "message": "make accessing packed fields a future-compat warning", "tree": {"sha": "9eeb6b1c2311a92e731ae1e701c74f154b36b416", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9eeb6b1c2311a92e731ae1e701c74f154b36b416"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a2d443f55ce05fa96f309b94ceabf4813f06045", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a2d443f55ce05fa96f309b94ceabf4813f06045", "html_url": "https://github.com/rust-lang/rust/commit/1a2d443f55ce05fa96f309b94ceabf4813f06045", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a2d443f55ce05fa96f309b94ceabf4813f06045/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "06eb5a6645ff9faf8fbe553e73efaae00c70090a", "url": "https://api.github.com/repos/rust-lang/rust/commits/06eb5a6645ff9faf8fbe553e73efaae00c70090a", "html_url": "https://github.com/rust-lang/rust/commit/06eb5a6645ff9faf8fbe553e73efaae00c70090a"}], "stats": {"total": 138, "additions": 119, "deletions": 19}, "files": [{"sha": "d9244c32dc429b6ca847b23d01330e69e0b0d867", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a2d443f55ce05fa96f309b94ceabf4813f06045/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2d443f55ce05fa96f309b94ceabf4813f06045/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=1a2d443f55ce05fa96f309b94ceabf4813f06045", "patch": "@@ -33,9 +33,28 @@ impl_stable_hash_for!(struct mir::LocalDecl<'tcx> {\n });\n impl_stable_hash_for!(struct mir::UpvarDecl { debug_name, by_ref });\n impl_stable_hash_for!(struct mir::BasicBlockData<'tcx> { statements, terminator, is_cleanup });\n-impl_stable_hash_for!(struct mir::UnsafetyViolation { source_info, description, lint_node_id });\n+impl_stable_hash_for!(struct mir::UnsafetyViolation { source_info, description, kind });\n impl_stable_hash_for!(struct mir::UnsafetyCheckResult { violations, unsafe_blocks });\n \n+impl<'gcx> HashStable<StableHashingContext<'gcx>>\n+for mir::UnsafetyViolationKind {\n+    #[inline]\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'gcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+\n+        mem::discriminant(self).hash_stable(hcx, hasher);\n+\n+        match *self {\n+            mir::UnsafetyViolationKind::General => {}\n+            mir::UnsafetyViolationKind::ExternStatic(lint_node_id) |\n+            mir::UnsafetyViolationKind::BorrowPacked(lint_node_id) => {\n+                lint_node_id.hash_stable(hcx, hasher);\n+            }\n+\n+        }\n+    }\n+}\n impl<'gcx> HashStable<StableHashingContext<'gcx>>\n for mir::Terminator<'gcx> {\n     #[inline]"}, {"sha": "ef4a1c8c3994913b249f5eb57e4247a11d0e0436", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a2d443f55ce05fa96f309b94ceabf4813f06045/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2d443f55ce05fa96f309b94ceabf4813f06045/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=1a2d443f55ce05fa96f309b94ceabf4813f06045", "patch": "@@ -155,6 +155,12 @@ declare_lint! {\n     \"safe access to extern statics was erroneously allowed\"\n }\n \n+declare_lint! {\n+    pub SAFE_PACKED_BORROWS,\n+    Warn,\n+    \"safe borrows of fields of packed structs were was erroneously allowed\"\n+}\n+\n declare_lint! {\n     pub PATTERNS_IN_FNS_WITHOUT_BODY,\n     Warn,\n@@ -247,6 +253,7 @@ impl LintPass for HardwiredLints {\n             RENAMED_AND_REMOVED_LINTS,\n             RESOLVE_TRAIT_ON_DEFAULTED_UNIT,\n             SAFE_EXTERN_STATICS,\n+            SAFE_PACKED_BORROWS,\n             PATTERNS_IN_FNS_WITHOUT_BODY,\n             LEGACY_DIRECTORY_OWNERSHIP,\n             LEGACY_IMPORTS,"}, {"sha": "266f60094c30952ef0666a90a0e57f85216a7486", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a2d443f55ce05fa96f309b94ceabf4813f06045/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2d443f55ce05fa96f309b94ceabf4813f06045/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=1a2d443f55ce05fa96f309b94ceabf4813f06045", "patch": "@@ -1722,11 +1722,18 @@ impl Location {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum UnsafetyViolationKind {\n+    General,\n+    ExternStatic(ast::NodeId),\n+    BorrowPacked(ast::NodeId),\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct UnsafetyViolation {\n     pub source_info: SourceInfo,\n     pub description: &'static str,\n-    pub lint_node_id: Option<ast::NodeId>,\n+    pub kind: UnsafetyViolationKind,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash)]"}, {"sha": "b4d439f0ba80986baaece998791f6cf216a1e5df", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a2d443f55ce05fa96f309b94ceabf4813f06045/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2d443f55ce05fa96f309b94ceabf4813f06045/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=1a2d443f55ce05fa96f309b94ceabf4813f06045", "patch": "@@ -243,6 +243,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(LATE_BOUND_LIFETIME_ARGUMENTS),\n             reference: \"issue #42868 <https://github.com/rust-lang/rust/issues/42868>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(SAFE_PACKED_BORROWS),\n+            reference: \"issue #46043 <https://github.com/rust-lang/rust/issues/46043>\",\n+        },\n+\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "5fe3ad86d4f3ea237a9c83bb51c2c77844beae07", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1a2d443f55ce05fa96f309b94ceabf4813f06045/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2d443f55ce05fa96f309b94ceabf4813f06045/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=1a2d443f55ce05fa96f309b94ceabf4813f06045", "patch": "@@ -15,7 +15,7 @@ use rustc::ty::maps::Providers;\n use rustc::ty::{self, TyCtxt};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::lint::builtin::{SAFE_EXTERN_STATICS, UNUSED_UNSAFE};\n+use rustc::lint::builtin::{SAFE_EXTERN_STATICS, SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n use rustc::mir::*;\n use rustc::mir::visit::{LvalueContext, Visitor};\n \n@@ -140,7 +140,14 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     location: Location) {\n         if let LvalueContext::Borrow { .. } = context {\n             if util::is_disaligned(self.tcx, self.mir, self.param_env, lvalue) {\n-                self.require_unsafe(\"borrow of packed field\")\n+                let source_info = self.source_info;\n+                let lint_root =\n+                    self.visibility_scope_info[source_info.scope].lint_root;\n+                self.register_violations(&[UnsafetyViolation {\n+                    source_info,\n+                    description: \"borrow of packed field\",\n+                    kind: UnsafetyViolationKind::BorrowPacked(lint_root)\n+                }], &[]);\n             }\n         }\n \n@@ -203,7 +210,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info,\n                         description: \"use of extern static\",\n-                        lint_node_id: Some(lint_root)\n+                        kind: UnsafetyViolationKind::ExternStatic(lint_root)\n                     }], &[]);\n                 }\n             }\n@@ -218,7 +225,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     {\n         let source_info = self.source_info;\n         self.register_violations(&[UnsafetyViolation {\n-            source_info, description, lint_node_id: None\n+            source_info, description, kind: UnsafetyViolationKind::General\n         }], &[]);\n     }\n \n@@ -380,21 +387,31 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     } = tcx.unsafety_check_result(def_id);\n \n     for &UnsafetyViolation {\n-        source_info, description, lint_node_id\n+        source_info, description, kind\n     } in violations.iter() {\n         // Report an error.\n-        if let Some(lint_node_id) = lint_node_id {\n-            tcx.lint_node(SAFE_EXTERN_STATICS,\n-                          lint_node_id,\n-                          source_info.span,\n-                          &format!(\"{} requires unsafe function or \\\n-                                    block (error E0133)\", description));\n-        } else {\n-            struct_span_err!(\n-                tcx.sess, source_info.span, E0133,\n-                \"{} requires unsafe function or block\", description)\n-                .span_label(source_info.span, description)\n-                .emit();\n+        match kind {\n+            UnsafetyViolationKind::General => {\n+                struct_span_err!(\n+                    tcx.sess, source_info.span, E0133,\n+                    \"{} requires unsafe function or block\", description)\n+                    .span_label(source_info.span, description)\n+                    .emit();\n+            }\n+            UnsafetyViolationKind::ExternStatic(lint_node_id) => {\n+                tcx.lint_node(SAFE_EXTERN_STATICS,\n+                              lint_node_id,\n+                              source_info.span,\n+                              &format!(\"{} requires unsafe function or \\\n+                                        block (error E0133)\", description));\n+            }\n+            UnsafetyViolationKind::BorrowPacked(lint_node_id) => {\n+                tcx.lint_node(SAFE_PACKED_BORROWS,\n+                              lint_node_id,\n+                              source_info.span,\n+                              &format!(\"{} requires unsafe function or \\\n+                                        block (error E0133)\", description));\n+            }\n         }\n     }\n "}, {"sha": "37369d551fc7702270b03d505eeefb53dc047b2d", "filename": "src/test/compile-fail/issue-27060.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a2d443f55ce05fa96f309b94ceabf4813f06045/src%2Ftest%2Fcompile-fail%2Fissue-27060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2d443f55ce05fa96f309b94ceabf4813f06045/src%2Ftest%2Fcompile-fail%2Fissue-27060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27060.rs?ref=1a2d443f55ce05fa96f309b94ceabf4813f06045", "patch": "@@ -20,6 +20,7 @@ pub struct JustArray {\n     array: [u32]\n }\n \n+#[deny(safe_packed_borrows)]\n fn main() {\n     let good = Good {\n         data: &0,\n@@ -33,7 +34,9 @@ fn main() {\n     }\n \n     let _ = &good.data; //~ ERROR borrow of packed field requires unsafe\n+                        //~| hard error\n     let _ = &good.data2[0]; //~ ERROR borrow of packed field requires unsafe\n+                            //~| hard error\n     let _ = &*good.data; // ok, behind a pointer\n     let _ = &good.aligned; // ok, has align 1\n     let _ = &good.aligned[2]; // ok, has align 1"}, {"sha": "809c45466f088dc3135a2cf49c25d5a2957dce8e", "filename": "src/test/run-pass/issue-27060.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1a2d443f55ce05fa96f309b94ceabf4813f06045/src%2Ftest%2Frun-pass%2Fissue-27060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2d443f55ce05fa96f309b94ceabf4813f06045/src%2Ftest%2Frun-pass%2Fissue-27060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-27060.rs?ref=1a2d443f55ce05fa96f309b94ceabf4813f06045", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[repr(packed)]\n+pub struct Good {\n+    data: &'static u32,\n+    data2: [&'static u32; 2],\n+    aligned: [u8; 32],\n+}\n+\n+#[repr(packed)]\n+pub struct JustArray {\n+    array: [u32]\n+}\n+\n+// kill this test when that turns to a hard error\n+#[allow(safe_packed_borrows)]\n+fn main() {\n+    let good = Good {\n+        data: &0,\n+        data2: [&0, &0],\n+        aligned: [0; 32]\n+    };\n+\n+    unsafe {\n+        let _ = &good.data; // ok\n+        let _ = &good.data2[0]; // ok\n+    }\n+\n+    let _ = &good.data;\n+    let _ = &good.data2[0];\n+    let _ = &*good.data; // ok, behind a pointer\n+    let _ = &good.aligned; // ok, has align 1\n+    let _ = &good.aligned[2]; // ok, has align 1\n+}"}]}