{"sha": "f9e7489f87f910c2ee87b7cf1052e368c1f191b6", "node_id": "C_kwDOAAsO6NoAKGY5ZTc0ODlmODdmOTEwYzJlZTg3YjdjZjEwNTJlMzY4YzFmMTkxYjY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-25T03:41:37Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-27T01:55:55Z"}, "message": "TAITs are suggestable", "tree": {"sha": "dec3e28926162930ffa9bafe64e1558cf3564dd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dec3e28926162930ffa9bafe64e1558cf3564dd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9e7489f87f910c2ee87b7cf1052e368c1f191b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e7489f87f910c2ee87b7cf1052e368c1f191b6", "html_url": "https://github.com/rust-lang/rust/commit/f9e7489f87f910c2ee87b7cf1052e368c1f191b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9e7489f87f910c2ee87b7cf1052e368c1f191b6/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae42f22ba055337f802b02b8c07e999bd52ec01d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae42f22ba055337f802b02b8c07e999bd52ec01d", "html_url": "https://github.com/rust-lang/rust/commit/ae42f22ba055337f802b02b8c07e999bd52ec01d"}], "stats": {"total": 53, "additions": 33, "deletions": 20}, "files": [{"sha": "8c8a2650fd65790cd91a3d34d3b23d4db2e8fd43", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f9e7489f87f910c2ee87b7cf1052e368c1f191b6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e7489f87f910c2ee87b7cf1052e368c1f191b6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=f9e7489f87f910c2ee87b7cf1052e368c1f191b6", "patch": "@@ -3,8 +3,8 @@\n use crate::ty::subst::{GenericArg, GenericArgKind};\n use crate::ty::TyKind::*;\n use crate::ty::{\n-    ConstKind, ExistentialPredicate, ExistentialProjection, ExistentialTraitRef, InferTy,\n-    ProjectionTy, Term, Ty, TyCtxt, TypeAndMut,\n+    ConstKind, DefIdTree, ExistentialPredicate, ExistentialProjection, ExistentialTraitRef,\n+    InferTy, ProjectionTy, Term, Ty, TyCtxt, TypeAndMut,\n };\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -74,10 +74,10 @@ impl<'tcx> Ty<'tcx> {\n     }\n \n     /// Whether the type can be safely suggested during error recovery.\n-    pub fn is_suggestable(self) -> bool {\n-        fn generic_arg_is_suggestible(arg: GenericArg<'_>) -> bool {\n+    pub fn is_suggestable(self, tcx: TyCtxt<'tcx>) -> bool {\n+        fn generic_arg_is_suggestible<'tcx>(arg: GenericArg<'tcx>, tcx: TyCtxt<'tcx>) -> bool {\n             match arg.unpack() {\n-                GenericArgKind::Type(ty) => ty.is_suggestable(),\n+                GenericArgKind::Type(ty) => ty.is_suggestable(tcx),\n                 GenericArgKind::Const(c) => const_is_suggestable(c.val()),\n                 _ => true,\n             }\n@@ -99,36 +99,46 @@ impl<'tcx> Ty<'tcx> {\n         // temporary, so I'll leave this as a fixme.\n \n         match self.kind() {\n-            Opaque(..)\n-            | FnDef(..)\n+            FnDef(..)\n             | Closure(..)\n             | Infer(..)\n             | Generator(..)\n             | GeneratorWitness(..)\n             | Bound(_, _)\n             | Placeholder(_)\n             | Error(_) => false,\n+            Opaque(did, substs) => {\n+                let parent = tcx.parent(*did).expect(\"opaque types always have a parent\");\n+                if let hir::def::DefKind::TyAlias | hir::def::DefKind::AssocTy = tcx.def_kind(parent)\n+                    && let Opaque(parent_did, _) = tcx.type_of(parent).kind()\n+                    && parent_did == did\n+                {\n+                    substs.iter().all(|a| generic_arg_is_suggestible(a, tcx))\n+                } else {\n+                    false\n+                }\n+            }\n             Dynamic(dty, _) => dty.iter().all(|pred| match pred.skip_binder() {\n                 ExistentialPredicate::Trait(ExistentialTraitRef { substs, .. }) => {\n-                    substs.iter().all(generic_arg_is_suggestible)\n+                    substs.iter().all(|a| generic_arg_is_suggestible(a, tcx))\n                 }\n                 ExistentialPredicate::Projection(ExistentialProjection {\n                     substs, term, ..\n                 }) => {\n                     let term_is_suggestable = match term {\n-                        Term::Ty(ty) => ty.is_suggestable(),\n+                        Term::Ty(ty) => ty.is_suggestable(tcx),\n                         Term::Const(c) => const_is_suggestable(c.val()),\n                     };\n-                    term_is_suggestable && substs.iter().all(generic_arg_is_suggestible)\n+                    term_is_suggestable && substs.iter().all(|a| generic_arg_is_suggestible(a, tcx))\n                 }\n                 _ => true,\n             }),\n             Projection(ProjectionTy { substs: args, .. }) | Adt(_, args) => {\n-                args.iter().all(generic_arg_is_suggestible)\n+                args.iter().all(|a| generic_arg_is_suggestible(a, tcx))\n             }\n-            Tuple(args) => args.iter().all(|ty| ty.is_suggestable()),\n-            Slice(ty) | RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => ty.is_suggestable(),\n-            Array(ty, c) => ty.is_suggestable() && const_is_suggestable(c.val()),\n+            Tuple(args) => args.iter().all(|ty| ty.is_suggestable(tcx)),\n+            Slice(ty) | RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => ty.is_suggestable(tcx),\n+            Array(ty, c) => ty.is_suggestable(tcx) && const_is_suggestable(c.val()),\n             _ => true,\n         }\n     }"}, {"sha": "794e711b6c83106940755fd831f3d6aed117eb2a", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9e7489f87f910c2ee87b7cf1052e368c1f191b6/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e7489f87f910c2ee87b7cf1052e368c1f191b6/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=f9e7489f87f910c2ee87b7cf1052e368c1f191b6", "patch": "@@ -86,7 +86,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         let param_type = tcx.infer_ctxt().enter(|infcx| {\n                             infcx.resolve_numeric_literals_with_default(tcx.type_of(param.def_id))\n                         });\n-                        if param_type.is_suggestable() {\n+                        if param_type.is_suggestable(tcx) {\n                             err.span_suggestion(\n                                 tcx.def_span(src_def_id),\n                                 \"consider changing this type parameter to be a `const` generic\","}, {"sha": "4bf9e04480f4af86f4b39b70784d3ade30ff72c2", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9e7489f87f910c2ee87b7cf1052e368c1f191b6/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e7489f87f910c2ee87b7cf1052e368c1f191b6/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=f9e7489f87f910c2ee87b7cf1052e368c1f191b6", "patch": "@@ -2466,7 +2466,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     span,\n                     ty,\n                     opt_sugg: Some((span, Applicability::MachineApplicable))\n-                        .filter(|_| ty.is_suggestable()),\n+                        .filter(|_| ty.is_suggestable(tcx)),\n                 });\n \n                 ty"}, {"sha": "8db9da7fcb23a67d0f47cc9b625563783699bd1b", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9e7489f87f910c2ee87b7cf1052e368c1f191b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e7489f87f910c2ee87b7cf1052e368c1f191b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=f9e7489f87f910c2ee87b7cf1052e368c1f191b6", "patch": "@@ -525,7 +525,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.resolve_numeric_literals_with_default(self.resolve_vars_if_possible(found));\n         // Only suggest changing the return type for methods that\n         // haven't set a return type at all (and aren't `fn main()` or an impl).\n-        match (&fn_decl.output, found.is_suggestable(), can_suggest, expected.is_unit()) {\n+        match (&fn_decl.output, found.is_suggestable(self.tcx), can_suggest, expected.is_unit()) {\n             (&hir::FnRetTy::DefaultReturn(span), true, true, true) => {\n                 err.span_suggestion(\n                     span,"}, {"sha": "0ccc2b6b182c4c6ecb66b7919f38507fce125ca7", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9e7489f87f910c2ee87b7cf1052e368c1f191b6/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e7489f87f910c2ee87b7cf1052e368c1f191b6/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=f9e7489f87f910c2ee87b7cf1052e368c1f191b6", "patch": "@@ -2004,7 +2004,7 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n             visitor.visit_ty(ty);\n             let mut diag = bad_placeholder(tcx, visitor.0, \"return type\");\n             let ret_ty = fn_sig.skip_binder().output();\n-            if ret_ty.is_suggestable() {\n+            if ret_ty.is_suggestable(tcx) {\n                 diag.span_suggestion(\n                     ty.span,\n                     \"replace with the correct return type\",\n@@ -2013,7 +2013,7 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n                 );\n             } else if matches!(ret_ty.kind(), ty::FnDef(..)) {\n                 let fn_sig = ret_ty.fn_sig(tcx);\n-                if fn_sig.skip_binder().inputs_and_output.iter().all(|t| t.is_suggestable()) {\n+                if fn_sig.skip_binder().inputs_and_output.iter().all(|t| t.is_suggestable(tcx)) {\n                     diag.span_suggestion(\n                         ty.span,\n                         \"replace with the correct return type\","}, {"sha": "053546e4b9285e29d0175fc6dde04fd1a43f1427", "filename": "src/test/ui/type-alias-impl-trait/issue-77179.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9e7489f87f910c2ee87b7cf1052e368c1f191b6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9e7489f87f910c2ee87b7cf1052e368c1f191b6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.stderr?ref=f9e7489f87f910c2ee87b7cf1052e368c1f191b6", "patch": "@@ -2,7 +2,10 @@ error[E0121]: the placeholder `_` is not allowed within types on item signatures\n   --> $DIR/issue-77179.rs:7:22\n    |\n LL | fn test() -> Pointer<_> {\n-   |                      ^ not allowed in type signatures\n+   |              --------^-\n+   |              |       |\n+   |              |       not allowed in type signatures\n+   |              help: replace with the correct return type: `Pointer<i32>`\n \n error: aborting due to previous error\n "}]}