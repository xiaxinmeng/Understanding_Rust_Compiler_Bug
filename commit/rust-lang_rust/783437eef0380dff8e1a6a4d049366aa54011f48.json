{"sha": "783437eef0380dff8e1a6a4d049366aa54011f48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MzQzN2VlZjAzODBkZmY4ZTFhNmE0ZDA0OTM2NmFhNTQwMTFmNDg=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-24T19:54:35Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-24T19:54:35Z"}, "message": "Use `span_suggestion` in loops lints", "tree": {"sha": "7839f1dc5c1ccfd1fa47a6a412dfbe63cdba8a43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7839f1dc5c1ccfd1fa47a6a412dfbe63cdba8a43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/783437eef0380dff8e1a6a4d049366aa54011f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/783437eef0380dff8e1a6a4d049366aa54011f48", "html_url": "https://github.com/rust-lang/rust/commit/783437eef0380dff8e1a6a4d049366aa54011f48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/783437eef0380dff8e1a6a4d049366aa54011f48/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b1a0a94348bd429b863ac16dfa0cc9c79e73c90", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b1a0a94348bd429b863ac16dfa0cc9c79e73c90", "html_url": "https://github.com/rust-lang/rust/commit/7b1a0a94348bd429b863ac16dfa0cc9c79e73c90"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "602de0eebcb554760414f98016142a23e91c29c0", "filename": "src/loops.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/783437eef0380dff8e1a6a4d049366aa54011f48/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783437eef0380dff8e1a6a4d049366aa54011f48/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=783437eef0380dff8e1a6a4d049366aa54011f48", "patch": "@@ -271,14 +271,17 @@ impl LateLintPass for LoopsPass {\n                                 } else {\n                                     expr_block(cx, &arms[0].body, Some(other_stuff.join(\"\\n    \")), \"..\")\n                                 };\n-                                span_help_and_lint(cx,\n+                                span_lint_and_then(cx,\n                                                    WHILE_LET_LOOP,\n                                                    expr.span,\n                                                    \"this loop could be written as a `while let` loop\",\n-                                                   &format!(\"try\\nwhile let {} = {} {}\",\n-                                                            snippet(cx, arms[0].pats[0].span, \"..\"),\n-                                                            snippet(cx, matchexpr.span, \"..\"),\n-                                                            loop_body));\n+                                                   |db| {\n+                                                       let sug = format!(\"while let {} = {} {}\",\n+                                                                         snippet(cx, arms[0].pats[0].span, \"..\"),\n+                                                                         snippet(cx, matchexpr.span, \"..\"),\n+                                                                         loop_body);\n+                                                       db.span_suggestion(expr.span, \"try\", sug);\n+                                                   });\n                             }\n                         }\n                         _ => (),"}, {"sha": "bbb76cfbfafbfd2b35741041c1cb48c144dd548d", "filename": "tests/compile-fail/while_loop.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/783437eef0380dff8e1a6a4d049366aa54011f48/tests%2Fcompile-fail%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783437eef0380dff8e1a6a4d049366aa54011f48/tests%2Fcompile-fail%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwhile_loop.rs?ref=783437eef0380dff8e1a6a4d049366aa54011f48", "patch": "@@ -6,7 +6,10 @@\n \n fn main() {\n     let y = Some(true);\n-    loop { //~ERROR\n+    loop {\n+    //~^ERROR this loop could be written as a `while let` loop\n+    //~|HELP try\n+    //~|SUGGESTION while let Some(_x) = y {\n         if let Some(_x) = y {\n             let _v = 1;\n         } else {\n@@ -19,21 +22,30 @@ fn main() {\n         }\n         break;\n     }\n-    loop { //~ERROR\n+    loop {\n+    //~^ERROR this loop could be written as a `while let` loop\n+    //~|HELP try\n+    //~|SUGGESTION while let Some(_x) = y {\n         match y {\n             Some(_x) => true,\n             None => break\n         };\n     }\n-    loop { //~ERROR\n+    loop {\n+    //~^ERROR this loop could be written as a `while let` loop\n+    //~|HELP try\n+    //~|SUGGESTION while let Some(x) = y {\n         let x = match y {\n             Some(x) => x,\n             None => break\n         };\n         let _x = x;\n         let _str = \"foo\";\n     }\n-    loop { //~ERROR\n+    loop {\n+    //~^ERROR this loop could be written as a `while let` loop\n+    //~|HELP try\n+    //~|SUGGESTION while let Some(x) = y {\n         let x = match y {\n             Some(x) => x,\n             None => break,"}]}