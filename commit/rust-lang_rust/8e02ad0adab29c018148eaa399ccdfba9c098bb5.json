{"sha": "8e02ad0adab29c018148eaa399ccdfba9c098bb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMDJhZDBhZGFiMjljMDE4MTQ4ZWFhMzk5Y2NkZmJhOWMwOThiYjU=", "commit": {"author": {"name": "Sebastian Hahn", "email": "sebastian@torproject.org", "date": "2017-01-25T06:13:26Z"}, "committer": {"name": "Sebastian Hahn", "email": "sebastian@torproject.org", "date": "2017-02-04T23:48:44Z"}, "message": "Provide Entry-like API for Option\n\nThis implements #39288.\n\nThanks to @steveklabnik and @oli-obk for their review comments :)", "tree": {"sha": "374ea74cddf7ef6838b48a27be6e6c7689dd234d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/374ea74cddf7ef6838b48a27be6e6c7689dd234d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e02ad0adab29c018148eaa399ccdfba9c098bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e02ad0adab29c018148eaa399ccdfba9c098bb5", "html_url": "https://github.com/rust-lang/rust/commit/8e02ad0adab29c018148eaa399ccdfba9c098bb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e02ad0adab29c018148eaa399ccdfba9c098bb5/comments", "author": {"login": "shahn", "id": 128636, "node_id": "MDQ6VXNlcjEyODYzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/128636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shahn", "html_url": "https://github.com/shahn", "followers_url": "https://api.github.com/users/shahn/followers", "following_url": "https://api.github.com/users/shahn/following{/other_user}", "gists_url": "https://api.github.com/users/shahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/shahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shahn/subscriptions", "organizations_url": "https://api.github.com/users/shahn/orgs", "repos_url": "https://api.github.com/users/shahn/repos", "events_url": "https://api.github.com/users/shahn/events{/privacy}", "received_events_url": "https://api.github.com/users/shahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shahn", "id": 128636, "node_id": "MDQ6VXNlcjEyODYzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/128636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shahn", "html_url": "https://github.com/shahn", "followers_url": "https://api.github.com/users/shahn/followers", "following_url": "https://api.github.com/users/shahn/following{/other_user}", "gists_url": "https://api.github.com/users/shahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/shahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shahn/subscriptions", "organizations_url": "https://api.github.com/users/shahn/orgs", "repos_url": "https://api.github.com/users/shahn/repos", "events_url": "https://api.github.com/users/shahn/events{/privacy}", "received_events_url": "https://api.github.com/users/shahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83c2d95238e3545e7ae9af4873c48b1e3651c164", "url": "https://api.github.com/repos/rust-lang/rust/commits/83c2d95238e3545e7ae9af4873c48b1e3651c164", "html_url": "https://github.com/rust-lang/rust/commit/83c2d95238e3545e7ae9af4873c48b1e3651c164"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "f4f582495afe80e637c505ec2c87a1e2d4be2f67", "filename": "src/libcore/option.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/8e02ad0adab29c018148eaa399ccdfba9c098bb5/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e02ad0adab29c018148eaa399ccdfba9c098bb5/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=8e02ad0adab29c018148eaa399ccdfba9c098bb5", "patch": "@@ -632,6 +632,76 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /////////////////////////////////////////////////////////////////////////\n+    // Entry-like operations to insert if None and return a reference\n+    /////////////////////////////////////////////////////////////////////////\n+\n+    /// Inserts `v` into the option if it is `None`, then\n+    /// returns a mutable reference to the contained value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_entry)]\n+    ///\n+    /// let mut x = None;\n+    ///\n+    /// {\n+    ///     let y: &mut u32 = x.get_or_insert(5);\n+    ///     assert_eq!(y, &5);\n+    ///\n+    ///     *y = 7;\n+    /// }\n+    ///\n+    /// assert_eq!(x, Some(7));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_entry\", issue = \"39288\")]\n+    pub fn get_or_insert(&mut self, v: T) -> &mut T {\n+        match *self {\n+            None => *self = Some(v),\n+            _ => (),\n+        }\n+\n+        match *self {\n+            Some(ref mut v) => v,\n+            _ => unreachable!(),\n+        }\n+    }\n+\n+    /// Inserts a value computed from `f` into the option if it is `None`, then\n+    /// returns a mutable reference to the contained value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_entry)]\n+    ///\n+    /// let mut x = None;\n+    ///\n+    /// {\n+    ///     let y: &mut u32 = x.get_or_insert_with(|| 5);\n+    ///     assert_eq!(y, &5);\n+    ///\n+    ///     *y = 7;\n+    /// }\n+    ///\n+    /// assert_eq!(x, Some(7));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_entry\", issue = \"39288\")]\n+    pub fn get_or_insert_with<F: FnOnce() -> T>(&mut self, f: F) -> &mut T {\n+        match *self {\n+            None => *self = Some(f()),\n+            _ => (),\n+        }\n+\n+        match *self {\n+            Some(ref mut v) => v,\n+            _ => unreachable!(),\n+        }\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Misc\n     /////////////////////////////////////////////////////////////////////////"}]}