{"sha": "b8762321a2978c8fd6d3e451132afbd4703df7f0", "node_id": "C_kwDOAAsO6NoAKGI4NzYyMzIxYTI5NzhjOGZkNmQzZTQ1MTEzMmFmYmQ0NzAzZGY3ZjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-05T19:57:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-05T19:57:20Z"}, "message": "Rollup merge of #108746 - compiler-errors:rpitit-dont-project-default-w-no-valu, r=cjgillot\n\nDon't project to RPITIT that has no default value\n\nReplicates this behavior, but for RPITIT projection logic (which currently is separate)\n\nhttps://github.com/rust-lang/rust/blob/b1719530f44e3c8ec903f76020a52bd8764d5d10/compiler/rustc_trait_selection/src/traits/project.rs#L2105-L2115\n\nFixes #108738", "tree": {"sha": "c9c5c892d00c9a3adc349ca21df8e1160ceb9512", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9c5c892d00c9a3adc349ca21df8e1160ceb9512"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8762321a2978c8fd6d3e451132afbd4703df7f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkBPQgCRBK7hj4Ov3rIwAAPscIAKhFN/WZz66FsptHmRN415f/\n2GEWJUlmHkCQ+YL6RdfjW3K1+xxQu+OyaGkVYbpjLusVJuuo8L44+V4wxbAhNUOF\nsCC7oxVs4IpApMUEWYN/oRTzacTR47N0NaNPlExyV3V60dfiL6/kgo34LG0CgrsH\nnTAoQa0GX9ffTVRHGfE2cyhJQNehYrRh5ZgLYksshIFYtZITKDIZpPbP4fXCkpM0\nLtroqnHhvUjltD8nRmraanpCspFSn3pbn0nuLPlvuCdp4XBvWQm9gmmEJ0tvl6n7\n9RnHSBErmt1WvheKmGGqwSY857mbaYNPwsDNxq6OJvxTvqLzGMdvR0KZUZZngpw=\n=iXLW\n-----END PGP SIGNATURE-----\n", "payload": "tree c9c5c892d00c9a3adc349ca21df8e1160ceb9512\nparent ced9cd19c82e5a4333fa57c3215b75df902c5276\nparent 7634c5916a056c8a448101a309d9d9d61a6b3c26\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678046240 +0100\ncommitter GitHub <noreply@github.com> 1678046240 +0100\n\nRollup merge of #108746 - compiler-errors:rpitit-dont-project-default-w-no-valu, r=cjgillot\n\nDon't project to RPITIT that has no default value\n\nReplicates this behavior, but for RPITIT projection logic (which currently is separate)\n\nhttps://github.com/rust-lang/rust/blob/b1719530f44e3c8ec903f76020a52bd8764d5d10/compiler/rustc_trait_selection/src/traits/project.rs#L2105-L2115\n\nFixes #108738\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8762321a2978c8fd6d3e451132afbd4703df7f0", "html_url": "https://github.com/rust-lang/rust/commit/b8762321a2978c8fd6d3e451132afbd4703df7f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8762321a2978c8fd6d3e451132afbd4703df7f0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ced9cd19c82e5a4333fa57c3215b75df902c5276", "url": "https://api.github.com/repos/rust-lang/rust/commits/ced9cd19c82e5a4333fa57c3215b75df902c5276", "html_url": "https://github.com/rust-lang/rust/commit/ced9cd19c82e5a4333fa57c3215b75df902c5276"}, {"sha": "7634c5916a056c8a448101a309d9d9d61a6b3c26", "url": "https://api.github.com/repos/rust-lang/rust/commits/7634c5916a056c8a448101a309d9d9d61a6b3c26", "html_url": "https://github.com/rust-lang/rust/commit/7634c5916a056c8a448101a309d9d9d61a6b3c26"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "7fc0711a155c1f795fbd585295179e94894348b7", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8762321a2978c8fd6d3e451132afbd4703df7f0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8762321a2978c8fd6d3e451132afbd4703df7f0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=b8762321a2978c8fd6d3e451132afbd4703df7f0", "patch": "@@ -344,8 +344,8 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n                     in_trait,\n                     ..\n                 }) => {\n-                    if in_trait {\n-                        assert!(tcx.impl_defaultness(owner).has_value());\n+                    if in_trait && !tcx.impl_defaultness(owner).has_value() {\n+                        span_bug!(tcx.def_span(def_id), \"tried to get type of this RPITIT with no definition\");\n                     }\n                     find_opaque_ty_constraints_for_rpit(tcx, def_id, owner)\n                 }"}, {"sha": "f7559a3f10ad1f23a88b74ef46f72e65e7bef977", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8762321a2978c8fd6d3e451132afbd4703df7f0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8762321a2978c8fd6d3e451132afbd4703df7f0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=b8762321a2978c8fd6d3e451132afbd4703df7f0", "patch": "@@ -2199,7 +2199,8 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n         Err(guar) => return Progress::error(tcx, guar),\n     };\n     // We don't support specialization for RPITITs anyways... yet.\n-    if !leaf_def.is_final() {\n+    // Also don't try to project to an RPITIT that has no value\n+    if !leaf_def.is_final() || !leaf_def.item.defaultness(tcx).has_value() {\n         return Progress { term: tcx.ty_error_misc().into(), obligations };\n     }\n "}, {"sha": "746a4a929aeb13160151d3540bee1f7ce56c1fd2", "filename": "tests/ui/impl-trait/in-trait/dont-project-to-rpitit-with-no-value.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8762321a2978c8fd6d3e451132afbd4703df7f0/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8762321a2978c8fd6d3e451132afbd4703df7f0/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.rs?ref=b8762321a2978c8fd6d3e451132afbd4703df7f0", "patch": "@@ -0,0 +1,16 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+//~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete\n+\n+trait MyTrait {\n+    fn foo(&self) -> impl Sized;\n+    fn bar(&self) -> impl Sized;\n+}\n+\n+impl MyTrait for i32 {\n+//~^ ERROR not all trait items implemented, missing: `foo`\n+    fn bar(&self) -> impl Sized {\n+        self.foo()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d7f2e460fb0b99b142847d44b8f9120368d2ca52", "filename": "tests/ui/impl-trait/in-trait/dont-project-to-rpitit-with-no-value.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b8762321a2978c8fd6d3e451132afbd4703df7f0/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8762321a2978c8fd6d3e451132afbd4703df7f0/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.stderr?ref=b8762321a2978c8fd6d3e451132afbd4703df7f0", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/dont-project-to-rpitit-with-no-value.rs:1:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0046]: not all trait items implemented, missing: `foo`\n+  --> $DIR/dont-project-to-rpitit-with-no-value.rs:9:1\n+   |\n+LL |     fn foo(&self) -> impl Sized;\n+   |     ---------------------------- `foo` from trait\n+...\n+LL | impl MyTrait for i32 {\n+   | ^^^^^^^^^^^^^^^^^^^^ missing `foo` in implementation\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0046`."}]}