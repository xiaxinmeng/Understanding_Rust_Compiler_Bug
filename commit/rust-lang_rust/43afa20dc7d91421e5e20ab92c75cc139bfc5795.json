{"sha": "43afa20dc7d91421e5e20ab92c75cc139bfc5795", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYWZhMjBkYzdkOTE0MjFlNWUyMGFiOTJjNzVjYzEzOWJmYzU3OTU=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-06-19T20:25:21Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-20T12:28:18Z"}, "message": "Add pthread docs", "tree": {"sha": "71fb3c10be60a62a3e801d6e7eba08512a7f46a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71fb3c10be60a62a3e801d6e7eba08512a7f46a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43afa20dc7d91421e5e20ab92c75cc139bfc5795", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAllJFOIACgkQpp+NIls6\n19mCrhAAgmPcaIJ+Fv72VsqDVqm2tB7ZbKSA84YKpj773IO1vXtaIh/H6R/SDYs8\nRhug3YALLAABV8KNpfNuPBuBRE9bbiaEuXsjcLRttmXLcH+vUcUftP9Ts4vHC5vv\nVy9NJFkKsp0kFFhm7OEX1J0V+3XaVvKDh31/o8uJ47f4ArsoTkorUs4Gt58C2L1A\nNWIcNiutwcbhs+BVMAKg9uAyT5mYmIL2TU/tygZGB97Dw9GucZzOVD2pJggojpA8\nUYRuxNKG2WpeGVeelX7x0wKms3nPEV2XO0Tx4++yx51Wj8MYORO13mQrXfqo/psw\ndeCtQsw732HOoZPgFUDDZIOGcbADzCYsgZFjkkyTbzAMsUP57hjmQinQMPVPEySQ\n0y78QKsLCs/k36tfN+Hg8TyLsd1GrINQxTeycUoDVSzhpnOdIfFuDZfwlbGxxJWc\niN25dFQMVwWzqNuNqQ2ljjCxG1PsQep2whvnPGHo79wb532kITrd3gV681WYjqjG\nKyAaFjSbVGClRTAD4jKVTAEbtibP8+jR2/i6k2GTdZJ9UskqQ08IKzI/X4I2p+GS\nSYOHrjJWxEEq4sm8/p/szy4etAF/KlE3pAA0BDVPRgVlohbL6f0XNWODoVl3TO8a\nZLZ3L+Sl0KtQYrJZa6afya7fC/uIhAALN3c1q0G43YwrZTObnnQ=\n=liwy\n-----END PGP SIGNATURE-----", "payload": "tree 71fb3c10be60a62a3e801d6e7eba08512a7f46a4\nparent fcf495821e3f26f9b14472d3c05bb6847106108d\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1497903921 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1497961698 +0200\n\nAdd pthread docs"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43afa20dc7d91421e5e20ab92c75cc139bfc5795", "html_url": "https://github.com/rust-lang/rust/commit/43afa20dc7d91421e5e20ab92c75cc139bfc5795", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43afa20dc7d91421e5e20ab92c75cc139bfc5795/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcf495821e3f26f9b14472d3c05bb6847106108d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf495821e3f26f9b14472d3c05bb6847106108d", "html_url": "https://github.com/rust-lang/rust/commit/fcf495821e3f26f9b14472d3c05bb6847106108d"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "4fcdb07fa423b4669e1ad393cb8e306041ce4468", "filename": "src/memory.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/43afa20dc7d91421e5e20ab92c75cc139bfc5795/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43afa20dc7d91421e5e20ab92c75cc139bfc5795/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=43afa20dc7d91421e5e20ab92c75cc139bfc5795", "patch": "@@ -392,6 +392,24 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n     \n     /// Returns a dtor and its argument, if one is supposed to run\n+    ///\n+    /// An optional destructor function may be associated with each key value.\n+    /// At thread exit, if a key value has a non-NULL destructor pointer,\n+    /// and the thread has a non-NULL value associated with that key,\n+    /// the value of the key is set to NULL, and then the function pointed\n+    /// to is called with the previously associated value as its sole argument.\n+    /// The order of destructor calls is unspecified if more than one destructor\n+    /// exists for a thread when it exits.\n+    ///\n+    /// If, after all the destructors have been called for all non-NULL values\n+    /// with associated destructors, there are still some non-NULL values with\n+    /// associated destructors, then the process is repeated.\n+    /// If, after at least {PTHREAD_DESTRUCTOR_ITERATIONS} iterations of destructor\n+    /// calls for outstanding non-NULL values, there are still some non-NULL values\n+    /// with associated destructors, implementations may stop calling destructors,\n+    /// or they may continue calling destructors until no non-NULL values with\n+    /// associated destructors exist, even though this might result in an infinite loop.\n+\n     pub(crate) fn fetch_tls_dtor(&mut self) -> Option<(ty::Instance<'tcx>, PrimVal)> {\n         for (_, &mut TlsEntry { ref mut data, dtor }) in self.thread_local.iter_mut() {\n             if *data != PrimVal::Bytes(0) {"}]}