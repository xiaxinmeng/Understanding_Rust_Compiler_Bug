{"sha": "aabe70f90e30c45f13dbdaaed1ea05776e541b8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYmU3MGY5MGUzMGM0NWYxM2RiZGFhZWQxZWEwNTc3NmU1NDFiOGQ=", "commit": {"author": {"name": "oli", "email": "oli@uhura.edef.eu", "date": "2020-10-06T10:03:52Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-11-28T17:13:47Z"}, "message": "Directly use raw pointers in `AtomicPtr` store/load", "tree": {"sha": "553b6cf37362a6629bf5d76a255d4a999b1edf0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/553b6cf37362a6629bf5d76a255d4a999b1edf0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aabe70f90e30c45f13dbdaaed1ea05776e541b8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aabe70f90e30c45f13dbdaaed1ea05776e541b8d", "html_url": "https://github.com/rust-lang/rust/commit/aabe70f90e30c45f13dbdaaed1ea05776e541b8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aabe70f90e30c45f13dbdaaed1ea05776e541b8d/comments", "author": null, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ae328bef47dffcbf363e5ae873f419c06a5511d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae328bef47dffcbf363e5ae873f419c06a5511d", "html_url": "https://github.com/rust-lang/rust/commit/4ae328bef47dffcbf363e5ae873f419c06a5511d"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "3026eadefe3dc3552755467bcca6c7e79c93cb72", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aabe70f90e30c45f13dbdaaed1ea05776e541b8d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aabe70f90e30c45f13dbdaaed1ea05776e541b8d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=aabe70f90e30c45f13dbdaaed1ea05776e541b8d", "patch": "@@ -437,7 +437,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 match split[1] {\n                     \"cxchg\" | \"cxchgweak\" => {\n                         let ty = substs.type_at(0);\n-                        if int_type_width_signed(ty, bx.tcx()).is_some() {\n+                        if int_type_width_signed(ty, bx.tcx()).is_some() || ty.is_unsafe_ptr() {\n                             let weak = split[1] == \"cxchgweak\";\n                             let pair = bx.atomic_cmpxchg(\n                                 args[0].immediate(),\n@@ -464,7 +464,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n                     \"load\" => {\n                         let ty = substs.type_at(0);\n-                        if int_type_width_signed(ty, bx.tcx()).is_some() {\n+                        if int_type_width_signed(ty, bx.tcx()).is_some() || ty.is_unsafe_ptr() {\n                             let size = bx.layout_of(ty).size;\n                             bx.atomic_load(args[0].immediate(), order, size)\n                         } else {\n@@ -474,7 +474,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n                     \"store\" => {\n                         let ty = substs.type_at(0);\n-                        if int_type_width_signed(ty, bx.tcx()).is_some() {\n+                        if int_type_width_signed(ty, bx.tcx()).is_some() || ty.is_unsafe_ptr() {\n                             let size = bx.layout_of(ty).size;\n                             bx.atomic_store(args[1].immediate(), args[0].immediate(), order, size);\n                             return;"}, {"sha": "c167a9d8e5b41ab06716c9bb3b4ac10da0158bcd", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aabe70f90e30c45f13dbdaaed1ea05776e541b8d/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aabe70f90e30c45f13dbdaaed1ea05776e541b8d/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=aabe70f90e30c45f13dbdaaed1ea05776e541b8d", "patch": "@@ -966,8 +966,16 @@ impl<T> AtomicPtr<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn load(&self, order: Ordering) -> *mut T {\n+        #[cfg(not(bootstrap))]\n         // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe { atomic_load(self.p.get() as *mut usize, order) as *mut T }\n+        unsafe {\n+            atomic_load(self.p.get(), order)\n+        }\n+        #[cfg(bootstrap)]\n+        // SAFETY: data races are prevented by atomic intrinsics.\n+        unsafe {\n+            atomic_load(self.p.get() as *mut usize, order) as *mut T\n+        }\n     }\n \n     /// Stores a value into the pointer.\n@@ -994,6 +1002,12 @@ impl<T> AtomicPtr<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn store(&self, ptr: *mut T, order: Ordering) {\n+        #[cfg(not(bootstrap))]\n+        // SAFETY: data races are prevented by atomic intrinsics.\n+        unsafe {\n+            atomic_store(self.p.get(), ptr, order);\n+        }\n+        #[cfg(bootstrap)]\n         // SAFETY: data races are prevented by atomic intrinsics.\n         unsafe {\n             atomic_store(self.p.get() as *mut usize, ptr as usize, order);\n@@ -1105,6 +1119,7 @@ impl<T> AtomicPtr<T> {\n         success: Ordering,\n         failure: Ordering,\n     ) -> Result<*mut T, *mut T> {\n+        #[cfg(bootstrap)]\n         // SAFETY: data races are prevented by atomic intrinsics.\n         unsafe {\n             let res = atomic_compare_exchange(\n@@ -1119,6 +1134,11 @@ impl<T> AtomicPtr<T> {\n                 Err(x) => Err(x as *mut T),\n             }\n         }\n+        #[cfg(not(bootstrap))]\n+        // SAFETY: data races are prevented by atomic intrinsics.\n+        unsafe {\n+            atomic_compare_exchange(self.p.get(), current, new, success, failure)\n+        }\n     }\n \n     /// Stores a value into the pointer if the current value is the same as the `current` value.\n@@ -1165,6 +1185,7 @@ impl<T> AtomicPtr<T> {\n         success: Ordering,\n         failure: Ordering,\n     ) -> Result<*mut T, *mut T> {\n+        #[cfg(bootstrap)]\n         // SAFETY: data races are prevented by atomic intrinsics.\n         unsafe {\n             let res = atomic_compare_exchange_weak(\n@@ -1179,6 +1200,11 @@ impl<T> AtomicPtr<T> {\n                 Err(x) => Err(x as *mut T),\n             }\n         }\n+        #[cfg(not(bootstrap))]\n+        // SAFETY: data races are prevented by atomic intrinsics.\n+        unsafe {\n+            atomic_compare_exchange_weak(self.p.get(), current, new, success, failure)\n+        }\n     }\n \n     /// Fetches the value, and applies a function to it that returns an optional"}]}