{"sha": "769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2OWFhMGE3YjM3OGE3YjcxZjViY2JlYzM0ODVmZTE3MWZmNGYzYjk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-12T00:23:21Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-16T04:05:33Z"}, "message": "Remove the double auto-ref on arrays/strings as receivers\n\nPart of #18469\n\n[breaking-change]\n\nA receiver will only ever get a single auto-reference. Previously arrays and strings would get two, e.g., [T] would be auto-ref'ed to &&[T]. This is usually apparent when a trait is implemented for `&[T]` and has a method takes self by reference. The usual solution is to implement the trait for `[T]` (the DST form).", "tree": {"sha": "6c0039840b240cb1f9386ef687b9a63c6926d404", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c0039840b240cb1f9386ef687b9a63c6926d404"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9", "html_url": "https://github.com/rust-lang/rust/commit/769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0669a432a2e09ad08886cb2138dbe9f5d681fb7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0669a432a2e09ad08886cb2138dbe9f5d681fb7f", "html_url": "https://github.com/rust-lang/rust/commit/0669a432a2e09ad08886cb2138dbe9f5d681fb7f"}], "stats": {"total": 98, "additions": 22, "deletions": 76}, "files": [{"sha": "e1c44e658f1c8665eefc2063e215e4c536be9346", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9", "patch": "@@ -440,7 +440,7 @@ impl<'a> LabelText<'a> {\n     /// Renders text as string suitable for a label in a .dot file.\n     pub fn escape(&self) -> String {\n         match self {\n-            &LabelStr(ref s) => s.escape_default(),\n+            &LabelStr(ref s) => (&**s).escape_default(),\n             &EscStr(ref s) => LabelText::escape_str(s.as_slice()),\n         }\n     }\n@@ -453,7 +453,7 @@ impl<'a> LabelText<'a> {\n         match self {\n             EscStr(s) => s,\n             LabelStr(s) => if s.contains_char('\\\\') {\n-                s.escape_default().into_cow()\n+                (&*s).escape_default().into_cow()\n             } else {\n                 s\n             },"}, {"sha": "41bb338e9e66b6d66759e7c3c07a4b6e1506be47", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9", "patch": "@@ -628,17 +628,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             None => {}\n         }\n \n-        match self.pick_autorefd_method(step) {\n-            Some(result) => return Some(result),\n-            None => {}\n-        }\n-\n-        // FIXME -- Super hack. For DST types, we will convert to\n-        // &&[T] or &&str, as part of a kind of legacy lookup scheme.\n-        match step.self_ty.sty {\n-            ty::ty_str | ty::ty_vec(_, None) => self.pick_autorefrefd_method(step),\n-            _ => None\n-        }\n+        self.pick_autorefd_method(step)\n     }\n \n     fn pick_by_value_method(&mut self,\n@@ -681,18 +671,6 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             |m,r| ty::mk_rptr(tcx, r, ty::mt {ty:step.self_ty, mutbl:m}))\n     }\n \n-    fn pick_autorefrefd_method(&mut self,\n-                               step: &CandidateStep<'tcx>)\n-                               -> Option<PickResult<'tcx>>\n-    {\n-        let tcx = self.tcx();\n-        self.search_mutabilities(\n-            |m| AutoRef(m, box AutoRef(m, box step.adjustment.clone())),\n-            |m,r| ty::mk_rptr(tcx, r, ty::mt { ty: ty::mk_rptr(tcx, r, ty::mt { ty:step.self_ty,\n-                                                                                mutbl:m}),\n-                                               mutbl: m }))\n-    }\n-\n     fn search_mutabilities<F, G>(&mut self,\n                                  mut mk_adjustment: F,\n                                  mut mk_autoref_ty: G)"}, {"sha": "81e8e4e4d7c6c85e652c9957fff7cc0814f792e9", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9", "patch": "@@ -170,7 +170,7 @@ impl<'a> fmt::Show for Ascii {\n \n /// Trait for converting into an ascii type.\n #[experimental = \"may be replaced by generic conversion traits\"]\n-pub trait AsciiCast<T> {\n+pub trait AsciiCast<T> for Sized? {\n     /// Convert to an ascii type, panic on non-ASCII input.\n     #[inline]\n     fn to_ascii(&self) -> T {\n@@ -196,10 +196,10 @@ pub trait AsciiCast<T> {\n }\n \n #[experimental = \"may be replaced by generic conversion traits\"]\n-impl<'a> AsciiCast<&'a[Ascii]> for &'a [u8] {\n+impl<'a> AsciiCast<&'a[Ascii]> for [u8] {\n     #[inline]\n     unsafe fn to_ascii_nocheck(&self) -> &'a[Ascii] {\n-        mem::transmute(*self)\n+        mem::transmute(self)\n     }\n \n     #[inline]\n@@ -212,10 +212,10 @@ impl<'a> AsciiCast<&'a[Ascii]> for &'a [u8] {\n }\n \n #[experimental = \"may be replaced by generic conversion traits\"]\n-impl<'a> AsciiCast<&'a [Ascii]> for &'a str {\n+impl<'a> AsciiCast<&'a [Ascii]> for str {\n     #[inline]\n     unsafe fn to_ascii_nocheck(&self) -> &'a [Ascii] {\n-        mem::transmute(*self)\n+        mem::transmute(self)\n     }\n \n     #[inline]"}, {"sha": "fb935cf10309629e1017e06673de2bbf03b49e72", "filename": "src/test/compile-fail/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs?ref=769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-14 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -12,18 +12,27 @@\n fn main() {\n \n     // Testing that method lookup does not automatically borrow\n-    // vectors to slices then automatically create a &mut self\n-    // reference.  That would allow creating a mutable pointer to a\n-    // temporary, which would be a source of confusion\n+    // vectors to slices then automatically create a self reference.\n \n     let mut a = vec!(0);\n     a.test_mut(); //~ ERROR does not implement any method in scope named `test_mut`\n+    a.test(); //~ ERROR does not implement any method in scope named `test`\n+\n+    ([1]).test(); //~ ERROR does not implement any method in scope named `test`\n+    (&[1]).test(); //~ ERROR does not implement any method in scope named `test`\n }\n \n trait MyIter {\n     fn test_mut(&mut self);\n+    fn test(&self);\n }\n \n impl<'a> MyIter for &'a [int] {\n     fn test_mut(&mut self) { }\n+    fn test(&self) { }\n+}\n+\n+impl<'a> MyIter for &'a str {\n+    fn test_mut(&mut self) { }\n+    fn test(&self) { }\n }"}, {"sha": "b7e3480c076262aeeac3ef82e38d4dfc49f7ff68", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=769aa0a7b378a7b71f5bcbec3485fe171ff4f3b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-4 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -51,8 +51,6 @@ pub fn main() {\n \n     // Now try it with a type that *needs* to be borrowed\n     let z = [0,1,2,3];\n-    // Call a method\n-    z.iterate(|y| { assert!(z[*y as uint] == *y); true });\n     // Call a parameterized function\n     assert_eq!(length::<int, &[int]>(&z), z.len());\n }"}, {"sha": "13dd55c7d1d5d8fd5ed9d96965061f42ae75fb94", "filename": "src/test/run-pass/auto-ref-slice-plus-ref.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0669a432a2e09ad08886cb2138dbe9f5d681fb7f/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0669a432a2e09ad08886cb2138dbe9f5d681fb7f/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs?ref=0669a432a2e09ad08886cb2138dbe9f5d681fb7f", "patch": "@@ -1,39 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Testing that method lookup automatically both borrows vectors to slices\n-// and also references them to create the &self pointer\n-\n-\n-trait MyIter {\n-    fn test_imm(&self);\n-}\n-\n-impl<'a> MyIter for &'a [int] {\n-    fn test_imm(&self) { assert_eq!(self[0], 1) }\n-}\n-\n-impl<'a> MyIter for &'a str {\n-    fn test_imm(&self) { assert_eq!(*self, \"test\") }\n-}\n-\n-pub fn main() {\n-    ([1]).test_imm();\n-    (vec!(1)).as_slice().test_imm();\n-    (&[1]).test_imm();\n-    (\"test\").test_imm();\n-    (\"test\").test_imm();\n-\n-    // FIXME: Other types of mutable vecs don't currently exist\n-\n-    // NB: We don't do this double autoreffing for &mut self because that would\n-    // allow creating a mutable pointer to a temporary, which would be a source\n-    // of confusion\n-}"}]}