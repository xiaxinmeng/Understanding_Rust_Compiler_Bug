{"sha": "eb158f93505dbc265787ac671cbc728c80f8a39d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMTU4ZjkzNTA1ZGJjMjY1Nzg3YWM2NzFjYmM3MjhjODBmOGEzOWQ=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-02-02T10:25:46Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-02-12T08:55:30Z"}, "message": "Add doctests for str::escape_*", "tree": {"sha": "daa35feab13379cc566f27baf9f01c3736b78ddf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daa35feab13379cc566f27baf9f01c3736b78ddf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb158f93505dbc265787ac671cbc728c80f8a39d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb158f93505dbc265787ac671cbc728c80f8a39d", "html_url": "https://github.com/rust-lang/rust/commit/eb158f93505dbc265787ac671cbc728c80f8a39d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb158f93505dbc265787ac671cbc728c80f8a39d/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "114593d638c55f1754d675a6f2ff38a973a0d8ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/114593d638c55f1754d675a6f2ff38a973a0d8ae", "html_url": "https://github.com/rust-lang/rust/commit/114593d638c55f1754d675a6f2ff38a973a0d8ae"}], "stats": {"total": 96, "additions": 93, "deletions": 3}, "files": [{"sha": "8a88fca131609c8d2e37429297a89b3f2ea72b43", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 93, "deletions": 3, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/eb158f93505dbc265787ac671cbc728c80f8a39d/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb158f93505dbc265787ac671cbc728c80f8a39d/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=eb158f93505dbc265787ac671cbc728c80f8a39d", "patch": "@@ -3949,12 +3949,42 @@ impl str {\n         me.make_ascii_lowercase()\n     }\n \n-    /// Escapes each char in `s` with [`char::escape_debug`].\n+    /// Return an iterator that escapes each char in `s` with [`char::escape_debug`].\n     ///\n     /// Note: only extended grapheme codepoints that begin the string will be\n     /// escaped.\n     ///\n     /// [`char::escape_debug`]: ../std/primitive.char.html#method.escape_debug\n+    ///\n+    /// # Examples\n+    ///\n+    /// As an iterator:\n+    ///\n+    /// ```\n+    /// for c in \"\u2764\\n!\".escape_debug() {\n+    ///     print!(\"{}\", c);\n+    /// }\n+    /// println!();\n+    /// ```\n+    ///\n+    /// Using `println!` directly:\n+    ///\n+    /// ```\n+    /// println!(\"{}\", \"\u2764\\n!\".escape_debug());\n+    /// ```\n+    ///\n+    ///\n+    /// Both are equivalent to:\n+    ///\n+    /// ```\n+    /// println!(\"\u2764\\\\n!\");\n+    /// ```\n+    ///\n+    /// Using `to_string`:\n+    ///\n+    /// ```\n+    /// assert_eq!(\"\u2764\\n!\".escape_debug().to_string(), \"\u2764\\\\n!\");\n+    /// ```\n     #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n     pub fn escape_debug(&self) -> EscapeDebug {\n         let mut chars = self.chars();\n@@ -3967,17 +3997,77 @@ impl str {\n         }\n     }\n \n-    /// Escapes each char in `s` with [`char::escape_default`].\n+    /// Return an iterator that escapes each char in `s` with [`char::escape_default`].\n     ///\n     /// [`char::escape_default`]: ../std/primitive.char.html#method.escape_default\n+    ///\n+    /// # Examples\n+    ///\n+    /// As an iterator:\n+    ///\n+    /// ```\n+    /// for c in \"\u2764\\n!\".escape_default() {\n+    ///     print!(\"{}\", c);\n+    /// }\n+    /// println!();\n+    /// ```\n+    ///\n+    /// Using `println!` directly:\n+    ///\n+    /// ```\n+    /// println!(\"{}\", \"\u2764\\n!\".escape_default());\n+    /// ```\n+    ///\n+    ///\n+    /// Both are equivalent to:\n+    ///\n+    /// ```\n+    /// println!(\"\\\\u{{2764}}\\n!\");\n+    /// ```\n+    ///\n+    /// Using `to_string`:\n+    ///\n+    /// ```\n+    /// assert_eq!(\"\u2764\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n+    /// ```\n     #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n     pub fn escape_default(&self) -> EscapeDefault {\n         EscapeDefault { inner: self.chars().flat_map(CharEscapeDefault) }\n     }\n \n-    /// Escapes each char in `s` with [`char::escape_unicode`].\n+    /// Return an iterator that escapes each char in `s` with [`char::escape_unicode`].\n     ///\n     /// [`char::escape_unicode`]: ../std/primitive.char.html#method.escape_unicode\n+    ///\n+    /// # Examples\n+    ///\n+    /// As an iterator:\n+    ///\n+    /// ```\n+    /// for c in \"\u2764\\n!\".escape_unicode() {\n+    ///     print!(\"{}\", c);\n+    /// }\n+    /// println!();\n+    /// ```\n+    ///\n+    /// Using `println!` directly:\n+    ///\n+    /// ```\n+    /// println!(\"{}\", \"\u2764\\n!\".escape_unicode());\n+    /// ```\n+    ///\n+    ///\n+    /// Both are equivalent to:\n+    ///\n+    /// ```\n+    /// println!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n+    /// ```\n+    ///\n+    /// Using `to_string`:\n+    ///\n+    /// ```\n+    /// assert_eq!(\"\u2764\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n+    /// ```\n     #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n     pub fn escape_unicode(&self) -> EscapeUnicode {\n         EscapeUnicode { inner: self.chars().flat_map(CharEscapeUnicode) }"}]}