{"sha": "a116c7272bb2fb81ad9ae54fb229eb9809b152b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMTZjNzI3MmJiMmZiODFhZDlhZTU0ZmIyMjllYjk4MDliMTUyYjM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-19T17:00:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-19T17:00:35Z"}, "message": "rollup merge of #17355 : gamazeps/issue17210", "tree": {"sha": "7bbcd76ccfec1a110d422a0a1f12c9415f9b8204", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bbcd76ccfec1a110d422a0a1f12c9415f9b8204"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a116c7272bb2fb81ad9ae54fb229eb9809b152b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a116c7272bb2fb81ad9ae54fb229eb9809b152b3", "html_url": "https://github.com/rust-lang/rust/commit/a116c7272bb2fb81ad9ae54fb229eb9809b152b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a116c7272bb2fb81ad9ae54fb229eb9809b152b3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbaa9300acb9a43a70f1aeca17b074a34e6275b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbaa9300acb9a43a70f1aeca17b074a34e6275b8", "html_url": "https://github.com/rust-lang/rust/commit/dbaa9300acb9a43a70f1aeca17b074a34e6275b8"}, {"sha": "50d179d0016ea5f3a3c820a45cdaa6921f9fb14c", "url": "https://api.github.com/repos/rust-lang/rust/commits/50d179d0016ea5f3a3c820a45cdaa6921f9fb14c", "html_url": "https://github.com/rust-lang/rust/commit/50d179d0016ea5f3a3c820a45cdaa6921f9fb14c"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "04a4e96ecc40ee07d7c45763220474596499ea8a", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a116c7272bb2fb81ad9ae54fb229eb9809b152b3/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a116c7272bb2fb81ad9ae54fb229eb9809b152b3/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=a116c7272bb2fb81ad9ae54fb229eb9809b152b3", "patch": "@@ -36,6 +36,12 @@ not tied to the lifetime of the original string/data buffer). If C strings are\n heavily used in applications, then caching may be advisable to prevent\n unnecessary amounts of allocations.\n \n+Be carefull to remember that the memory is managed by C allocator API and not\n+by Rust allocator API.\n+That means that the CString pointers should be freed with C allocator API\n+if you intend to do that on your own, as the behaviour if you free them with\n+Rust's allocator API is not well defined\n+\n An example of creating and using a C string would be:\n \n ```rust\n@@ -91,8 +97,8 @@ pub struct CString {\n \n impl Clone for CString {\n     /// Clone this CString into a new, uniquely owned CString. For safety\n-    /// reasons, this is always a deep clone, rather than the usual shallow\n-    /// clone.\n+    /// reasons, this is always a deep clone with the memory allocated\n+    /// with C's allocator API, rather than the usual shallow clone.\n     fn clone(&self) -> CString {\n         let len = self.len() + 1;\n         let buf = unsafe { malloc_raw(len) } as *mut libc::c_char;\n@@ -131,7 +137,9 @@ impl<S: hash::Writer> hash::Hash<S> for CString {\n }\n \n impl CString {\n-    /// Create a C String from a pointer.\n+    /// Create a C String from a pointer, with memory managed by C's allocator\n+    /// API, so avoid calling it with a pointer to memory managed by Rust's\n+    /// allocator API, as the behaviour would not be well defined.\n     ///\n     ///# Failure\n     ///\n@@ -265,7 +273,8 @@ impl CString {\n     /// forgotten, meaning that the backing allocation of this\n     /// `CString` is not automatically freed if it owns the\n     /// allocation. In this case, a user of `.unwrap()` should ensure\n-    /// the allocation is freed, to avoid leaking memory.\n+    /// the allocation is freed, to avoid leaking memory. You should\n+    /// use libc's memory allocator in this case.\n     ///\n     /// Prefer `.as_ptr()` when just retrieving a pointer to the\n     /// string data, as that does not relinquish ownership."}]}