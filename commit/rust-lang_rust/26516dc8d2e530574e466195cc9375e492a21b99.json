{"sha": "26516dc8d2e530574e466195cc9375e492a21b99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NTE2ZGM4ZDJlNTMwNTc0ZTQ2NjE5NWNjOTM3NWU0OTJhMjFiOTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T07:19:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T22:54:45Z"}, "message": "Convert rustc::syntax::token to istrs. Issue #855", "tree": {"sha": "5739418bd578386e1d9ca6d87b0f6ea42ca00f6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5739418bd578386e1d9ca6d87b0f6ea42ca00f6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26516dc8d2e530574e466195cc9375e492a21b99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26516dc8d2e530574e466195cc9375e492a21b99", "html_url": "https://github.com/rust-lang/rust/commit/26516dc8d2e530574e466195cc9375e492a21b99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26516dc8d2e530574e466195cc9375e492a21b99/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58dedcd090f4dba25430e0a02060e6658634299e", "url": "https://api.github.com/repos/rust-lang/rust/commits/58dedcd090f4dba25430e0a02060e6658634299e", "html_url": "https://github.com/rust-lang/rust/commit/58dedcd090f4dba25430e0a02060e6658634299e"}], "stats": {"total": 154, "additions": 79, "deletions": 75}, "files": [{"sha": "8f0aeeeb4ec838ffb2596910acbf28b640583869", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26516dc8d2e530574e466195cc9375e492a21b99/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26516dc8d2e530574e466195cc9375e492a21b99/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=26516dc8d2e530574e466195cc9375e492a21b99", "patch": "@@ -750,7 +750,7 @@ fn gather_comments_and_literals(cm: &codemap::codemap, path: &istr,\n         if is_lit(tok.tok) {\n             literals += [{lit: rdr.get_str_from(tok.bpos), pos: tok.chpos}];\n         }\n-        log \"tok: \" + token::to_str(rdr, tok.tok);\n+        log ~\"tok: \" + token::to_str(rdr, tok.tok);\n         first_read = false;\n     }\n     ret {cmnts: comments, lits: literals};"}, {"sha": "8549cb0aa48dc090ec06f40ef6d8ab5b5cd43c40", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/26516dc8d2e530574e466195cc9375e492a21b99/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26516dc8d2e530574e466195cc9375e492a21b99/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=26516dc8d2e530574e466195cc9375e492a21b99", "patch": "@@ -191,7 +191,7 @@ fn bad_expr_word_table() -> hashmap<istr, ()> {\n \n fn unexpected(p: &parser, t: token::token) -> ! {\n     let s: str = \"unexpected token: \";\n-    s += token::to_str(p.get_reader(), t);\n+    s += istr::to_estr(token::to_str(p.get_reader(), t));\n     p.fatal(s);\n }\n \n@@ -200,9 +200,9 @@ fn expect(p: &parser, t: token::token) {\n         p.bump();\n     } else {\n         let s: str = \"expecting \";\n-        s += token::to_str(p.get_reader(), t);\n+        s += istr::to_estr(token::to_str(p.get_reader(), t));\n         s += \", found \";\n-        s += token::to_str(p.get_reader(), p.peek());\n+        s += istr::to_estr(token::to_str(p.get_reader(), p.peek()));\n         p.fatal(s);\n     }\n }\n@@ -216,9 +216,9 @@ fn expect_gt(p: &parser) {\n         p.swap(token::BINOP(token::LSR), p.get_lo_pos() + 1u, p.get_hi_pos());\n     } else {\n         let s: str = \"expecting \";\n-        s += token::to_str(p.get_reader(), token::GT);\n+        s += istr::to_estr(token::to_str(p.get_reader(), token::GT));\n         s += \", found \";\n-        s += token::to_str(p.get_reader(), p.peek());\n+        s += istr::to_estr(token::to_str(p.get_reader(), p.peek()));\n         p.fatal(s);\n     }\n }\n@@ -268,7 +268,7 @@ fn eat_word(p: &parser, word: &str) -> bool {\n fn expect_word(p: &parser, word: &str) {\n     if !eat_word(p, word) {\n         p.fatal(\"expecting \" + word + \", found \" +\n-                    token::to_str(p.get_reader(), p.peek()));\n+                istr::to_estr(token::to_str(p.get_reader(), p.peek())));\n     }\n }\n \n@@ -1450,7 +1450,8 @@ fn parse_pat(p: &parser) -> @ast::pat {\n                 p.bump();\n                 if p.peek() != token::RBRACE {\n                     p.fatal(\"expecting }, found \" +\n-                                token::to_str(p.get_reader(), p.peek()));\n+                            istr::to_estr(\n+                                token::to_str(p.get_reader(), p.peek())));\n                 }\n                 etc = true;\n                 break;\n@@ -1705,7 +1706,8 @@ fn parse_block_tail(p: &parser, lo: uint, s: ast::check_mode) -> ast::blk {\n                     if stmt_ends_with_semi(*stmt) {\n                         p.fatal(\"expected ';' or '}' after \" +\n                                     \"expression but found \" +\n-                                    token::to_str(p.get_reader(), t));\n+                                istr::to_estr(\n+                                    token::to_str(p.get_reader(), t)));\n                     }\n                     stmts += [stmt];\n                   }\n@@ -1923,7 +1925,8 @@ fn parse_mod_items(p: &parser, term: token::token,\n           some(i) { items += [i]; }\n           _ {\n             p.fatal(\"expected item but found \" +\n-                        token::to_str(p.get_reader(), p.peek()));\n+                    istr::to_estr(\n+                        token::to_str(p.get_reader(), p.peek())));\n           }\n         }\n     }\n@@ -2119,7 +2122,8 @@ fn parse_item_tag(p: &parser, attrs: &[ast::attribute]) -> @ast::item {\n           token::RBRACE. {/* empty */ }\n           _ {\n             p.fatal(\"expected name of variant or '}' but found \" +\n-                        token::to_str(p.get_reader(), tok));\n+                    istr::to_estr(\n+                        token::to_str(p.get_reader(), tok)));\n           }\n         }\n     }"}, {"sha": "bb678d26c7efa3288e08f6e607fc87700048667d", "filename": "src/comp/syntax/parse/token.rs", "status": "modified", "additions": 64, "deletions": 64, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/26516dc8d2e530574e466195cc9375e492a21b99/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26516dc8d2e530574e466195cc9375e492a21b99/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs?ref=26516dc8d2e530574e466195cc9375e492a21b99", "patch": "@@ -85,103 +85,103 @@ tag token {\n     EOF;\n }\n \n-fn binop_to_str(o: binop) -> str {\n+fn binop_to_str(o: binop) -> istr {\n     alt o {\n-      PLUS. { ret \"+\"; }\n-      MINUS. { ret \"-\"; }\n-      STAR. { ret \"*\"; }\n-      SLASH. { ret \"/\"; }\n-      PERCENT. { ret \"%\"; }\n-      CARET. { ret \"^\"; }\n-      AND. { ret \"&\"; }\n-      OR. { ret \"|\"; }\n-      LSL. { ret \"<<\"; }\n-      LSR. { ret \">>\"; }\n-      ASR. { ret \">>>\"; }\n+      PLUS. { ret ~\"+\"; }\n+      MINUS. { ret ~\"-\"; }\n+      STAR. { ret ~\"*\"; }\n+      SLASH. { ret ~\"/\"; }\n+      PERCENT. { ret ~\"%\"; }\n+      CARET. { ret ~\"^\"; }\n+      AND. { ret ~\"&\"; }\n+      OR. { ret ~\"|\"; }\n+      LSL. { ret ~\"<<\"; }\n+      LSR. { ret ~\">>\"; }\n+      ASR. { ret ~\">>>\"; }\n     }\n }\n \n-fn to_str(r: lexer::reader, t: token) -> str {\n+fn to_str(r: lexer::reader, t: token) -> istr {\n     alt t {\n-      EQ. { ret \"=\"; }\n-      LT. { ret \"<\"; }\n-      LE. { ret \"<=\"; }\n-      EQEQ. { ret \"==\"; }\n-      NE. { ret \"!=\"; }\n-      GE. { ret \">=\"; }\n-      GT. { ret \">\"; }\n-      NOT. { ret \"!\"; }\n-      TILDE. { ret \"~\"; }\n-      OROR. { ret \"||\"; }\n-      ANDAND. { ret \"&&\"; }\n+      EQ. { ret ~\"=\"; }\n+      LT. { ret ~\"<\"; }\n+      LE. { ret ~\"<=\"; }\n+      EQEQ. { ret ~\"==\"; }\n+      NE. { ret ~\"!=\"; }\n+      GE. { ret ~\">=\"; }\n+      GT. { ret ~\">\"; }\n+      NOT. { ret ~\"!\"; }\n+      TILDE. { ret ~\"~\"; }\n+      OROR. { ret ~\"||\"; }\n+      ANDAND. { ret ~\"&&\"; }\n       BINOP(op) { ret binop_to_str(op); }\n-      BINOPEQ(op) { ret binop_to_str(op) + \"=\"; }\n+      BINOPEQ(op) { ret binop_to_str(op) + ~\"=\"; }\n \n \n       /* Structural symbols */\n       AT. {\n-        ret \"@\";\n+        ret ~\"@\";\n       }\n-      DOT. { ret \".\"; }\n-      ELLIPSIS. { ret \"...\"; }\n-      COMMA. { ret \",\"; }\n-      SEMI. { ret \";\"; }\n-      COLON. { ret \":\"; }\n-      MOD_SEP. { ret \"::\"; }\n-      QUES. { ret \"?\"; }\n-      RARROW. { ret \"->\"; }\n-      LARROW. { ret \"<-\"; }\n-      DARROW. { ret \"<->\"; }\n-      LPAREN. { ret \"(\"; }\n-      RPAREN. { ret \")\"; }\n-      LBRACKET. { ret \"[\"; }\n-      RBRACKET. { ret \"]\"; }\n-      LBRACE. { ret \"{\"; }\n-      RBRACE. { ret \"}\"; }\n-      POUND. { ret \"#\"; }\n-      POUND_LBRACE. { ret \"#{\"; }\n-      POUND_LT. { ret \"#<\"; }\n+      DOT. { ret ~\".\"; }\n+      ELLIPSIS. { ret ~\"...\"; }\n+      COMMA. { ret ~\",\"; }\n+      SEMI. { ret ~\";\"; }\n+      COLON. { ret ~\":\"; }\n+      MOD_SEP. { ret ~\"::\"; }\n+      QUES. { ret ~\"?\"; }\n+      RARROW. { ret ~\"->\"; }\n+      LARROW. { ret ~\"<-\"; }\n+      DARROW. { ret ~\"<->\"; }\n+      LPAREN. { ret ~\"(\"; }\n+      RPAREN. { ret ~\")\"; }\n+      LBRACKET. { ret ~\"[\"; }\n+      RBRACKET. { ret ~\"]\"; }\n+      LBRACE. { ret ~\"{\"; }\n+      RBRACE. { ret ~\"}\"; }\n+      POUND. { ret ~\"#\"; }\n+      POUND_LBRACE. { ret ~\"#{\"; }\n+      POUND_LT. { ret ~\"#<\"; }\n \n \n       /* Literals */\n       LIT_INT(i) {\n-        ret istr::to_estr(int::to_str(i, 10u));\n+        ret int::to_str(i, 10u);\n       }\n-      LIT_UINT(u) { ret istr::to_estr(uint::to_str(u, 10u)); }\n+      LIT_UINT(u) { ret uint::to_str(u, 10u); }\n       LIT_MACH_INT(tm, i) {\n-        ret istr::to_estr(int::to_str(i, 10u)) + \"_\" + ty_mach_to_str(tm);\n+        ret int::to_str(i, 10u) + ~\"_\" + istr::from_estr(ty_mach_to_str(tm));\n       }\n       LIT_MACH_FLOAT(tm, s) {\n-        ret istr::to_estr(interner::get::<istr>(\n-            *r.get_interner(), s) + ~\"_\") +\n-            ty_mach_to_str(tm);\n+        ret interner::get::<istr>(\n+            *r.get_interner(), s) + ~\"_\" +\n+            istr::from_estr(ty_mach_to_str(tm));\n       }\n       LIT_FLOAT(s) {\n-        ret istr::to_estr(interner::get::<istr>(*r.get_interner(), s));\n+        ret interner::get::<istr>(*r.get_interner(), s);\n       }\n       LIT_STR(s) { // FIXME: escape.\n-        ret \"\\\"\" +\n-            istr::to_estr(interner::get::<istr>(*r.get_interner(), s))\n-            + \"\\\"\";\n+        ret ~\"\\\"\" +\n+            interner::get::<istr>(*r.get_interner(), s)\n+            + ~\"\\\"\";\n       }\n       LIT_CHAR(c) {\n         // FIXME: escape.\n-        let tmp = \"'\";\n-        str::push_char(tmp, c);\n-        str::push_byte(tmp, '\\'' as u8);\n+        let tmp = ~\"'\";\n+        istr::push_char(tmp, c);\n+        istr::push_byte(tmp, '\\'' as u8);\n         ret tmp;\n       }\n-      LIT_BOOL(b) { if b { ret \"true\"; } else { ret \"false\"; } }\n+      LIT_BOOL(b) { if b { ret ~\"true\"; } else { ret ~\"false\"; } }\n \n \n       /* Name components */\n       IDENT(s, _) {\n-        ret istr::to_estr(interner::get::<istr>(*r.get_interner(), s));\n+        ret interner::get::<istr>(*r.get_interner(), s);\n       }\n-      IDX(i) { ret istr::to_estr(~\"_\" + int::to_str(i, 10u)); }\n-      UNDERSCORE. { ret \"_\"; }\n-      BRACEQUOTE(_) { ret \"<bracequote>\"; }\n-      EOF. { ret \"<eof>\"; }\n+      IDX(i) { ret ~\"_\" + int::to_str(i, 10u); }\n+      UNDERSCORE. { ret ~\"_\"; }\n+      BRACEQUOTE(_) { ret ~\"<bracequote>\"; }\n+      EOF. { ret ~\"<eof>\"; }\n     }\n }\n "}]}