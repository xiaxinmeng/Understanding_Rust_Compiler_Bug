{"sha": "60fb11e5ddc3d50efd2eda16ed8f85d46978bf8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZmIxMWU1ZGRjM2Q1MGVmZDJlZGExNmVkOGY4NWQ0Njk3OGJmOGI=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-05T06:21:46Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-05T06:21:46Z"}, "message": "Do not take inner attributes into account for span", "tree": {"sha": "555c17e6d3b8b203c96087691a16226eed1f7567", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/555c17e6d3b8b203c96087691a16226eed1f7567"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60fb11e5ddc3d50efd2eda16ed8f85d46978bf8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60fb11e5ddc3d50efd2eda16ed8f85d46978bf8b", "html_url": "https://github.com/rust-lang/rust/commit/60fb11e5ddc3d50efd2eda16ed8f85d46978bf8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60fb11e5ddc3d50efd2eda16ed8f85d46978bf8b/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41df87ec4420479460c68de15256e321bbe082b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/41df87ec4420479460c68de15256e321bbe082b5", "html_url": "https://github.com/rust-lang/rust/commit/41df87ec4420479460c68de15256e321bbe082b5"}], "stats": {"total": 95, "additions": 53, "deletions": 42}, "files": [{"sha": "e1017fab9596ea51e4e8afd6758dcac840d44e91", "filename": "src/lib.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/60fb11e5ddc3d50efd2eda16ed8f85d46978bf8b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fb11e5ddc3d50efd2eda16ed8f85d46978bf8b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=60fb11e5ddc3d50efd2eda16ed8f85d46978bf8b", "patch": "@@ -46,7 +46,7 @@ use checkstyle::{output_footer, output_header};\n use config::Config;\n use filemap::FileMap;\n use issues::{BadIssueSeeker, Issue};\n-use utils::mk_sp;\n+use utils::{mk_sp, outer_attributes};\n use visitor::FmtVisitor;\n \n pub use self::summary::Summary;\n@@ -81,13 +81,33 @@ pub trait Spanned {\n     fn span(&self) -> Span;\n }\n \n+macro_rules! span_with_attrs_lo_hi {\n+    ($this:ident, $lo:expr, $hi:expr) => {\n+        {\n+            let attrs = outer_attributes(&$this.attrs);\n+            if attrs.is_empty() {\n+                mk_sp($lo, $hi)\n+            } else {\n+                mk_sp(attrs[0].span.lo, $hi)\n+            }\n+        }\n+    }\n+}\n+macro_rules! span_with_attrs {\n+    ($this:ident) => {\n+        span_with_attrs_lo_hi!($this, $this.span.lo, $this.span.hi)\n+    }\n+}\n+\n impl Spanned for ast::Expr {\n     fn span(&self) -> Span {\n-        if self.attrs.is_empty() {\n-            self.span\n-        } else {\n-            mk_sp(self.attrs[0].span.lo, self.span.hi)\n-        }\n+        span_with_attrs!(self)\n+    }\n+}\n+\n+impl Spanned for ast::Item {\n+    fn span(&self) -> Span {\n+        span_with_attrs!(self)\n     }\n }\n \n@@ -117,12 +137,7 @@ impl Spanned for ast::Ty {\n \n impl Spanned for ast::Arm {\n     fn span(&self) -> Span {\n-        let hi = self.body.span.hi;\n-        if self.attrs.is_empty() {\n-            mk_sp(self.pats[0].span.lo, hi)\n-        } else {\n-            mk_sp(self.attrs[0].span.lo, hi)\n-        }\n+        span_with_attrs_lo_hi!(self, self.pats[0].span.lo, self.body.span.hi)\n     }\n }\n \n@@ -138,23 +153,13 @@ impl Spanned for ast::Arg {\n \n impl Spanned for ast::StructField {\n     fn span(&self) -> Span {\n-        if self.attrs.is_empty() {\n-            mk_sp(self.span.lo, self.ty.span.hi)\n-        } else {\n-            // Include attributes and doc comments, if present\n-            mk_sp(self.attrs[0].span.lo, self.ty.span.hi)\n-        }\n+        span_with_attrs_lo_hi!(self, self.span.lo, self.ty.span.hi)\n     }\n }\n \n impl Spanned for ast::Field {\n     fn span(&self) -> Span {\n-        let lo = if self.attrs.is_empty() {\n-            self.span.lo\n-        } else {\n-            self.attrs[0].span.lo\n-        };\n-        mk_sp(lo, self.span.hi)\n+        span_with_attrs!(self)\n     }\n }\n "}, {"sha": "c0861b8da20ab9eccd7e4589c5dfa5df3f9ba9ad", "filename": "src/utils.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/60fb11e5ddc3d50efd2eda16ed8f85d46978bf8b/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fb11e5ddc3d50efd2eda16ed8f85d46978bf8b/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=60fb11e5ddc3d50efd2eda16ed8f85d46978bf8b", "patch": "@@ -97,6 +97,25 @@ pub fn format_abi(abi: abi::Abi, explicit_abi: bool) -> String {\n     }\n }\n \n+#[inline]\n+pub fn filter_attributes(attrs: &[ast::Attribute], style: ast::AttrStyle) -> Vec<ast::Attribute> {\n+    attrs\n+        .iter()\n+        .filter(|a| a.style == style)\n+        .cloned()\n+        .collect::<Vec<_>>()\n+}\n+\n+#[inline]\n+pub fn inner_attributes(attrs: &[ast::Attribute]) -> Vec<ast::Attribute> {\n+    filter_attributes(attrs, ast::AttrStyle::Inner)\n+}\n+\n+#[inline]\n+pub fn outer_attributes(attrs: &[ast::Attribute]) -> Vec<ast::Attribute> {\n+    filter_attributes(attrs, ast::AttrStyle::Outer)\n+}\n+\n // The width of the first line in s.\n #[inline]\n pub fn first_line_width(s: &str) -> usize {"}, {"sha": "ef0ff1d52db846f97c4f0b2e4dfe78f9211eaa46", "filename": "src/visitor.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/60fb11e5ddc3d50efd2eda16ed8f85d46978bf8b/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fb11e5ddc3d50efd2eda16ed8f85d46978bf8b/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=60fb11e5ddc3d50efd2eda16ed8f85d46978bf8b", "patch": "@@ -15,7 +15,7 @@ use syntax::{ast, ptr, visit};\n use syntax::codemap::{self, BytePos, CodeMap, Span};\n use syntax::parse::ParseSess;\n \n-use {Indent, Shape};\n+use {Indent, Shape, Spanned};\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{contains_comment, FindUncommented};\n use comment::rewrite_comment;\n@@ -36,19 +36,6 @@ fn is_use_item(item: &ast::Item) -> bool {\n     }\n }\n \n-fn item_bound(item: &ast::Item) -> Span {\n-    item.attrs.iter().map(|attr| attr.span).fold(\n-        item.span,\n-        |bound, span| {\n-            Span {\n-                lo: cmp::min(bound.lo, span.lo),\n-                hi: cmp::max(bound.hi, span.hi),\n-                ctxt: span.ctxt,\n-            }\n-        },\n-    )\n-}\n-\n pub struct FmtVisitor<'a> {\n     pub parse_session: &'a ParseSess,\n     pub codemap: &'a CodeMap,\n@@ -93,7 +80,7 @@ impl<'a> FmtVisitor<'a> {\n                 let span = if expr.attrs.is_empty() {\n                     stmt.span\n                 } else {\n-                    mk_sp(expr.attrs[0].span.lo, stmt.span.hi)\n+                    mk_sp(expr.span().lo, stmt.span.hi)\n                 };\n                 self.push_rewrite(span, rewrite)\n             }\n@@ -105,7 +92,7 @@ impl<'a> FmtVisitor<'a> {\n                 let span = if expr.attrs.is_empty() {\n                     stmt.span\n                 } else {\n-                    mk_sp(expr.attrs[0].span.lo, stmt.span.hi)\n+                    mk_sp(expr.span().lo, stmt.span.hi)\n                 };\n                 self.push_rewrite(span, rewrite)\n             }\n@@ -648,12 +635,12 @@ impl<'a> FmtVisitor<'a> {\n             // next item for output.\n             if self.config.reorder_imports() && is_use_item(&*items_left[0]) {\n                 let reorder_imports_in_group = self.config.reorder_imports_in_group();\n-                let mut last = self.codemap.lookup_line_range(item_bound(&items_left[0]));\n+                let mut last = self.codemap.lookup_line_range(items_left[0].span());\n                 let use_item_length = items_left\n                     .iter()\n                     .take_while(|ppi| {\n                         is_use_item(&***ppi) && (!reorder_imports_in_group || {\n-                            let current = self.codemap.lookup_line_range(item_bound(&ppi));\n+                            let current = self.codemap.lookup_line_range(ppi.span());\n                             let in_same_group = current.lo < last.hi + 2;\n                             last = current;\n                             in_same_group"}]}