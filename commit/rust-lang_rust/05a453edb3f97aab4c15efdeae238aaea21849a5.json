{"sha": "05a453edb3f97aab4c15efdeae238aaea21849a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YTQ1M2VkYjNmOTdhYWI0YzE1ZWZkZWFlMjM4YWFlYTIxODQ5YTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-20T01:08:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-20T01:12:18Z"}, "message": "green: Remove usage of UnsafeArc", "tree": {"sha": "e2e926df4bb12766ddb6b81f629b57a89464fa6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2e926df4bb12766ddb6b81f629b57a89464fa6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05a453edb3f97aab4c15efdeae238aaea21849a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05a453edb3f97aab4c15efdeae238aaea21849a5", "html_url": "https://github.com/rust-lang/rust/commit/05a453edb3f97aab4c15efdeae238aaea21849a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05a453edb3f97aab4c15efdeae238aaea21849a5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e10d373b597192f101b52060c95adaa83c48663", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e10d373b597192f101b52060c95adaa83c48663", "html_url": "https://github.com/rust-lang/rust/commit/5e10d373b597192f101b52060c95adaa83c48663"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "53e2574df5993d6ba4786af33d86604e8634c330", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/05a453edb3f97aab4c15efdeae238aaea21849a5/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a453edb3f97aab4c15efdeae238aaea21849a5/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=05a453edb3f97aab4c15efdeae238aaea21849a5", "patch": "@@ -214,7 +214,9 @@\n #[cfg(test)] extern crate rustuv;\n extern crate rand;\n extern crate libc;\n+extern crate alloc;\n \n+use alloc::arc::Arc;\n use std::mem::replace;\n use std::os;\n use std::rt::rtio;\n@@ -223,7 +225,6 @@ use std::rt;\n use std::sync::atomics::{SeqCst, AtomicUint, INIT_ATOMIC_UINT};\n use std::sync::deque;\n use std::task::TaskOpts;\n-use std::sync::arc::UnsafeArc;\n \n use sched::{Shutdown, Scheduler, SchedHandle, TaskFromFriend, NewNeighbor};\n use sleeper_list::SleeperList;\n@@ -375,7 +376,7 @@ pub struct SchedPool {\n /// sending on a channel once the entire pool has been drained of all tasks.\n #[deriving(Clone)]\n struct TaskState {\n-    cnt: UnsafeArc<AtomicUint>,\n+    cnt: Arc<AtomicUint>,\n     done: Sender<()>,\n }\n \n@@ -537,21 +538,21 @@ impl TaskState {\n     fn new() -> (Receiver<()>, TaskState) {\n         let (tx, rx) = channel();\n         (rx, TaskState {\n-            cnt: UnsafeArc::new(AtomicUint::new(0)),\n+            cnt: Arc::new(AtomicUint::new(0)),\n             done: tx,\n         })\n     }\n \n     fn increment(&mut self) {\n-        unsafe { (*self.cnt.get()).fetch_add(1, SeqCst); }\n+        self.cnt.fetch_add(1, SeqCst);\n     }\n \n     fn active(&self) -> bool {\n-        unsafe { (*self.cnt.get()).load(SeqCst) != 0 }\n+        self.cnt.load(SeqCst) != 0\n     }\n \n     fn decrement(&mut self) {\n-        let prev = unsafe { (*self.cnt.get()).fetch_sub(1, SeqCst) };\n+        let prev = self.cnt.fetch_sub(1, SeqCst);\n         if prev == 1 {\n             self.done.send(());\n         }"}, {"sha": "99dbf9c8919e62a0668f4c74db47dd34dc737449", "filename": "src/libgreen/message_queue.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05a453edb3f97aab4c15efdeae238aaea21849a5/src%2Flibgreen%2Fmessage_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a453edb3f97aab4c15efdeae238aaea21849a5/src%2Flibgreen%2Fmessage_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fmessage_queue.rs?ref=05a453edb3f97aab4c15efdeae238aaea21849a5", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use alloc::arc::Arc;\n use mpsc = std::sync::mpsc_queue;\n-use std::sync::arc::UnsafeArc;\n \n pub enum PopResult<T> {\n     Inconsistent,\n@@ -18,29 +18,29 @@ pub enum PopResult<T> {\n }\n \n pub fn queue<T: Send>() -> (Consumer<T>, Producer<T>) {\n-    let (a, b) = UnsafeArc::new2(mpsc::Queue::new());\n-    (Consumer { inner: a }, Producer { inner: b })\n+    let a = Arc::new(mpsc::Queue::new());\n+    (Consumer { inner: a.clone() }, Producer { inner: a })\n }\n \n pub struct Producer<T> {\n-    inner: UnsafeArc<mpsc::Queue<T>>,\n+    inner: Arc<mpsc::Queue<T>>,\n }\n \n pub struct Consumer<T> {\n-    inner: UnsafeArc<mpsc::Queue<T>>,\n+    inner: Arc<mpsc::Queue<T>>,\n }\n \n impl<T: Send> Consumer<T> {\n-    pub fn pop(&mut self) -> PopResult<T> {\n-        match unsafe { (*self.inner.get()).pop() } {\n+    pub fn pop(&self) -> PopResult<T> {\n+        match self.inner.pop() {\n             mpsc::Inconsistent => Inconsistent,\n             mpsc::Empty => Empty,\n             mpsc::Data(t) => Data(t),\n         }\n     }\n \n-    pub fn casual_pop(&mut self) -> Option<T> {\n-        match unsafe { (*self.inner.get()).pop() } {\n+    pub fn casual_pop(&self) -> Option<T> {\n+        match self.inner.pop() {\n             mpsc::Inconsistent => None,\n             mpsc::Empty => None,\n             mpsc::Data(t) => Some(t),\n@@ -49,8 +49,8 @@ impl<T: Send> Consumer<T> {\n }\n \n impl<T: Send> Producer<T> {\n-    pub fn push(&mut self, t: T) {\n-        unsafe { (*self.inner.get()).push(t); }\n+    pub fn push(&self, t: T) {\n+        self.inner.push(t);\n     }\n }\n "}]}