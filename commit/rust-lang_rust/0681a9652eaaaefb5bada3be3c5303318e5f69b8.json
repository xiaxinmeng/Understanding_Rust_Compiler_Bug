{"sha": "0681a9652eaaaefb5bada3be3c5303318e5f69b8", "node_id": "C_kwDOAAsO6NoAKDA2ODFhOTY1MmVhYWFlZmI1YmFkYTNiZTNjNTMwMzMxOGU1ZjY5Yjg", "commit": {"author": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-11T16:30:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-11T16:30:53Z"}, "message": "Rollup merge of #106321 - compiler-errors:delayed-bug-backtrace, r=Nilstrieb\n\nCollect and emit proper backtraces for `delay_span_bug`s\n\nThis is a follow-up to #106317, which addresses this comment (https://github.com/rust-lang/rust/issues/106267#issuecomment-1367507507) which notes that `delay_span_bug`s' backtraces are nonsense.\n\nCaptures and emits the backtrace of the delayed span bug when it's *created*, rather than using the backtrace of the place where delayed bugs are flushed.\n\n---\n\nTo test, I delayed a span bug during HIR typeck, specifically in `typeck_with_fallback`...\n\nBefore, note `flush_delayed` on frame 18. This is at the end of the compilation session, far from where the bug is being delayed.\n\n```\nerror: internal compiler error: test\n --> /home/ubuntu/test.rs:1:1\n  |\n1 | fn main() {}\n  | ^^^^^^^^^\n  |\n  = note: delayed at compiler/rustc_hir_typeck/src/lib.rs:196:14\n\nthread 'rustc' panicked at 'Box<dyn Any>', compiler/rustc_errors/src/lib.rs:1634:13\nstack backtrace:\n   0:     0x7f9c3ec69dd1 - std::backtrace_rs::backtrace::libunwind::trace::h26056f81198c6594\n                               at /home/ubuntu/rust2/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5\n   1:     0x7f9c3ec69dd1 - std::backtrace_rs::backtrace::trace_unsynchronized::hacfb345a0c6d5bb1\n                               at /home/ubuntu/rust2/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x7f9c3ec69dd1 - std::sys_common::backtrace::_print_fmt::h18ea6016ac8030f3\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:65:5\n   3:     0x7f9c3ec69dd1 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::he35dde201d0c2d09\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x7f9c3ecee308 - core::fmt::write::h094ad263467a053c\n                               at /home/ubuntu/rust2/library/core/src/fmt/mod.rs:1208:17\n   5:     0x7f9c3ec8aaf1 - std::io::Write::write_fmt::hd47b4e2324b4d9b7\n                               at /home/ubuntu/rust2/library/std/src/io/mod.rs:1682:15\n   6:     0x7f9c3ec69bfa - std::sys_common::backtrace::_print::h43044162653a17fc\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:47:5\n   7:     0x7f9c3ec69bfa - std::sys_common::backtrace::print::hc8605da258fa5aeb\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:34:9\n   8:     0x7f9c3ec4db87 - std::panicking::default_hook::{{closure}}::h9e37f23f75122a15\n   9:     0x7f9c3ec4d97b - std::panicking::default_hook::h602873a063f84da2\n                               at /home/ubuntu/rust2/library/std/src/panicking.rs:286:9\n  10:     0x7f9c3f6672b2 - <alloc[48d7b30605060536]::boxed::Box<dyn for<'a, 'b> core[672e3947e150d6c6]::ops::function::Fn<(&'a core[672e3947e150d6c6]::panic::panic_info::PanicInfo<'b>,), Output = ()> + core[672e3947e150d6c6]::marker::Send + core[672e3947e150d6c6]::marker::Sync> as core[672e3947e150d6c6]::ops::function::Fn<(&core[672e3947e150d6c6]::panic::panic_info::PanicInfo,)>>::call\n                               at /home/ubuntu/rust2/library/alloc/src/boxed.rs:2002:9\n  11:     0x7f9c3f6672b2 - rustc_driver[f5b6d32d8905ecdd]::DEFAULT_HOOK::{closure#0}::{closure#0}\n                               at /home/ubuntu/rust2/compiler/rustc_driver/src/lib.rs:1204:17\n  12:     0x7f9c3ec4e0d3 - <alloc::boxed::Box<F,A> as core::ops::function::Fn<Args>>::call::hfd13333ca953ae8e\n                               at /home/ubuntu/rust2/library/alloc/src/boxed.rs:2002:9\n  13:     0x7f9c3ec4e0d3 - std::panicking::rust_panic_with_hook::h45753e10264ebe7e\n                               at /home/ubuntu/rust2/library/std/src/panicking.rs:692:13\n  14:     0x7f9c422a1aa3 - std[3330b4673efabfce]::panicking::begin_panic::<rustc_errors[1b15f4e7e49d1fd5]::ExplicitBug>::{closure#0}\n                               at /home/ubuntu/rust2/library/std/src/panicking.rs:608:9\n  15:     0x7f9c422a1a46 - std[3330b4673efabfce]::sys_common::backtrace::__rust_end_short_backtrace::<std[3330b4673efabfce]::panicking::begin_panic<rustc_errors[1b15f4e7e49d1fd5]::ExplicitBug>::{closure#0}, !>\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:137:18\n  16:     0x7f9c3f63a996 - std[3330b4673efabfce]::panicking::begin_panic::<rustc_errors[1b15f4e7e49d1fd5]::ExplicitBug>\n                               at /home/ubuntu/rust2/library/std/src/panicking.rs:607:12\n  17:     0x7f9c4227a496 - std[3330b4673efabfce]::panic::panic_any::<rustc_errors[1b15f4e7e49d1fd5]::ExplicitBug>\n                               at /home/ubuntu/rust2/library/std/src/panic.rs:61:5\n  18:     0x7f9c4227cdf7 - <rustc_errors[1b15f4e7e49d1fd5]::HandlerInner>::flush_delayed::<alloc[48d7b30605060536]::vec::Vec<rustc_errors[1b15f4e7e49d1fd5]::diagnostic::Diagnostic>, &str, rustc_errors[1b15f4e7e49d1fd5]::ExplicitBug>\n                               at /home/ubuntu/rust2/compiler/rustc_errors/src/lib.rs:1634:13\n  19:     0x7f9c422498cf - <rustc_errors[1b15f4e7e49d1fd5]::Handler>::flush_delayed\n                               at /home/ubuntu/rust2/compiler/rustc_errors/src/lib.rs:1225:9\n\n[ FRAMES INTENTIONALLY OMITTED ]\n\n  44:     0x7f9c3f6f3584 - <std[3330b4673efabfce]::thread::Builder>::spawn_unchecked_::<rustc_interface[947706ead88047d0]::util::run_in_thread_pool_with_globals<rustc_interface[947706ead88047d0]::interface::run_compiler<core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>, rustc_driver[f5b6d32d8905ecdd]::run_compiler::{closure#1}>::{closure#0}, core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>>::{closure#0}::{closure#0}, core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>>::{closure#1}\n                               at /home/ubuntu/rust2/library/std/src/thread/mod.rs:549:30\n  45:     0x7f9c3f6f3584 - <<std[3330b4673efabfce]::thread::Builder>::spawn_unchecked_<rustc_interface[947706ead88047d0]::util::run_in_thread_pool_with_globals<rustc_interface[947706ead88047d0]::interface::run_compiler<core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>, rustc_driver[f5b6d32d8905ecdd]::run_compiler::{closure#1}>::{closure#0}, core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>>::{closure#0}::{closure#0}, core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>>::{closure#1} as core[672e3947e150d6c6]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\n                               at /home/ubuntu/rust2/library/core/src/ops/function.rs:250:5\n  46:     0x7f9c3ec81968 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::he8b26fc22c6f51ec\n                               at /home/ubuntu/rust2/library/alloc/src/boxed.rs:1988:9\n  47:     0x7f9c3ec81968 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h5cf9cbe75a8c3ddc\n                               at /home/ubuntu/rust2/library/alloc/src/boxed.rs:1988:9\n  48:     0x7f9c3ec5f99c - std::sys::unix::thread::Thread::new::thread_start::h2d6dd4455e97d031\n                               at /home/ubuntu/rust2/library/std/src/sys/unix/thread.rs:108:17\n  49:     0x7f9c37c69609 - start_thread\n  50:     0x7f9c3ead0133 - clone\n  51:                0x0 - <unknown>\n```\n\nAfter, note `typeck_with_fallback` on the 5th frame, that's where we *actually* need to be pointed to:\n\n```\nerror: internal compiler error: no errors encountered even though `delay_span_bug` issued\n\nerror: internal compiler error: test\n --> /home/ubuntu/test.rs:1:1\n  |\n1 | fn main() {}\n  | ^^^^^^^^^\n  |\n  = note: delayed at    0: <rustc_errors::HandlerInner>::emit_diagnostic\n                       at ./compiler/rustc_errors/src/lib.rs:1279:29\n             1: <rustc_errors::HandlerInner>::delay_span_bug::<rustc_span::span_encoding::Span, &str>\n                       at ./compiler/rustc_errors/src/lib.rs:1553:9\n             2: <rustc_errors::Handler>::delay_span_bug::<rustc_span::span_encoding::Span, &str>\n                       at ./compiler/rustc_errors/src/lib.rs:995:9\n             3: <rustc_session::session::Session>::delay_span_bug::<rustc_span::span_encoding::Span, &str>\n                       at ./compiler/rustc_session/src/session.rs:600:9\n             4: rustc_hir_typeck::typeck_with_fallback::<rustc_hir_typeck::typeck::{closure#0}>::{closure#0}\n                       at ./compiler/rustc_hir_typeck/src/lib.rs:196:5\n             5: rustc_hir_typeck::typeck_with_fallback::<rustc_hir_typeck::typeck::{closure#0}>\n                       at ./compiler/rustc_hir_typeck/src/lib.rs:185:36\n             6: rustc_hir_typeck::typeck\n                       at ./compiler/rustc_hir_typeck/src/lib.rs:166:9\n\n[ FRAMES INTENTIONALLY OMITTED ]\n\n           108: std::panicking::try::<core::result::Result<(), rustc_errors::ErrorGuaranteed>, core::panic::unwind_safe::AssertUnwindSafe<<std::thread::Builder>::spawn_unchecked_<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>::{closure#1}::{closure#0}>>\n                       at ./library/std/src/panicking.rs:447:19\n           109: std::panic::catch_unwind::<core::panic::unwind_safe::AssertUnwindSafe<<std::thread::Builder>::spawn_unchecked_<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>::{closure#1}::{closure#0}>, core::result::Result<(), rustc_errors::ErrorGuaranteed>>\n                       at ./library/std/src/panic.rs:140:14\n           110: <std::thread::Builder>::spawn_unchecked_::<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>::{closure#1}\n                       at ./library/std/src/thread/mod.rs:549:30\n           111: <<std::thread::Builder>::spawn_unchecked_<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>::{closure#1} as core::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\n                       at ./library/core/src/ops/function.rs:250:5\n           112: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\n                       at ./library/alloc/src/boxed.rs:1988:9\n           113: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\n                       at ./library/alloc/src/boxed.rs:1988:9\n           114: std::sys::unix::thread::Thread::new::thread_start\n                       at ./library/std/src/sys/unix/thread.rs:108:17\n           115: start_thread\n           116: clone\n```", "tree": {"sha": "de0448eb3d27b4fed271945f4902150d75f5bedd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de0448eb3d27b4fed271945f4902150d75f5bedd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0681a9652eaaaefb5bada3be3c5303318e5f69b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjvuQ9CRBK7hj4Ov3rIwAAHHkIAIgU0pn/ZDPX67dM9J+MHZlA\nIjX9MndmZ704ibY+6+EHUqcWO8t7HJR8jSB+R1iNsvgA7kZtk6CvjhBRTVbYqpTu\nMlBEb2yVN/Q+MmxaDC84TMhfYUApgkhh+gCRbS5CjCX+4dJdVzqPgbPCZ4f38fkD\nJbvVcoJ9dsSTgasvUwELamqMtBm8T5fBpf1/giT69H8CF9LaE9OQ9UIIezj2xvn8\ncOxgSBo7M7Su9Qwp+rs/zKWYy25mT3XHgBhXSOh+XWzHTAhOCqvbKMFWm11R1cDX\na1+BAD3YCRm5fDDqDShYLrRudaDzxJHWkPp3EYIvcvLrCuNR9Kwcp9U5W/Ang6Y=\n=ADyF\n-----END PGP SIGNATURE-----\n", "payload": "tree de0448eb3d27b4fed271945f4902150d75f5bedd\nparent b22c152958eade17a71d899b29a2d39bcc77aa48\nparent 05c1ac0215ef282c9ed6df6a5f758d824ee1ace9\nauthor nils <48135649+Nilstrieb@users.noreply.github.com> 1673454653 +0100\ncommitter GitHub <noreply@github.com> 1673454653 +0100\n\nRollup merge of #106321 - compiler-errors:delayed-bug-backtrace, r=Nilstrieb\n\nCollect and emit proper backtraces for `delay_span_bug`s\n\nThis is a follow-up to #106317, which addresses this comment (https://github.com/rust-lang/rust/issues/106267#issuecomment-1367507507) which notes that `delay_span_bug`s' backtraces are nonsense.\n\nCaptures and emits the backtrace of the delayed span bug when it's *created*, rather than using the backtrace of the place where delayed bugs are flushed.\n\n---\n\nTo test, I delayed a span bug during HIR typeck, specifically in `typeck_with_fallback`...\n\nBefore, note `flush_delayed` on frame 18. This is at the end of the compilation session, far from where the bug is being delayed.\n\n```\nerror: internal compiler error: test\n --> /home/ubuntu/test.rs:1:1\n  |\n1 | fn main() {}\n  | ^^^^^^^^^\n  |\n  = note: delayed at compiler/rustc_hir_typeck/src/lib.rs:196:14\n\nthread 'rustc' panicked at 'Box<dyn Any>', compiler/rustc_errors/src/lib.rs:1634:13\nstack backtrace:\n   0:     0x7f9c3ec69dd1 - std::backtrace_rs::backtrace::libunwind::trace::h26056f81198c6594\n                               at /home/ubuntu/rust2/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5\n   1:     0x7f9c3ec69dd1 - std::backtrace_rs::backtrace::trace_unsynchronized::hacfb345a0c6d5bb1\n                               at /home/ubuntu/rust2/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x7f9c3ec69dd1 - std::sys_common::backtrace::_print_fmt::h18ea6016ac8030f3\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:65:5\n   3:     0x7f9c3ec69dd1 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::he35dde201d0c2d09\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x7f9c3ecee308 - core::fmt::write::h094ad263467a053c\n                               at /home/ubuntu/rust2/library/core/src/fmt/mod.rs:1208:17\n   5:     0x7f9c3ec8aaf1 - std::io::Write::write_fmt::hd47b4e2324b4d9b7\n                               at /home/ubuntu/rust2/library/std/src/io/mod.rs:1682:15\n   6:     0x7f9c3ec69bfa - std::sys_common::backtrace::_print::h43044162653a17fc\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:47:5\n   7:     0x7f9c3ec69bfa - std::sys_common::backtrace::print::hc8605da258fa5aeb\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:34:9\n   8:     0x7f9c3ec4db87 - std::panicking::default_hook::{{closure}}::h9e37f23f75122a15\n   9:     0x7f9c3ec4d97b - std::panicking::default_hook::h602873a063f84da2\n                               at /home/ubuntu/rust2/library/std/src/panicking.rs:286:9\n  10:     0x7f9c3f6672b2 - <alloc[48d7b30605060536]::boxed::Box<dyn for<'a, 'b> core[672e3947e150d6c6]::ops::function::Fn<(&'a core[672e3947e150d6c6]::panic::panic_info::PanicInfo<'b>,), Output = ()> + core[672e3947e150d6c6]::marker::Send + core[672e3947e150d6c6]::marker::Sync> as core[672e3947e150d6c6]::ops::function::Fn<(&core[672e3947e150d6c6]::panic::panic_info::PanicInfo,)>>::call\n                               at /home/ubuntu/rust2/library/alloc/src/boxed.rs:2002:9\n  11:     0x7f9c3f6672b2 - rustc_driver[f5b6d32d8905ecdd]::DEFAULT_HOOK::{closure#0}::{closure#0}\n                               at /home/ubuntu/rust2/compiler/rustc_driver/src/lib.rs:1204:17\n  12:     0x7f9c3ec4e0d3 - <alloc::boxed::Box<F,A> as core::ops::function::Fn<Args>>::call::hfd13333ca953ae8e\n                               at /home/ubuntu/rust2/library/alloc/src/boxed.rs:2002:9\n  13:     0x7f9c3ec4e0d3 - std::panicking::rust_panic_with_hook::h45753e10264ebe7e\n                               at /home/ubuntu/rust2/library/std/src/panicking.rs:692:13\n  14:     0x7f9c422a1aa3 - std[3330b4673efabfce]::panicking::begin_panic::<rustc_errors[1b15f4e7e49d1fd5]::ExplicitBug>::{closure#0}\n                               at /home/ubuntu/rust2/library/std/src/panicking.rs:608:9\n  15:     0x7f9c422a1a46 - std[3330b4673efabfce]::sys_common::backtrace::__rust_end_short_backtrace::<std[3330b4673efabfce]::panicking::begin_panic<rustc_errors[1b15f4e7e49d1fd5]::ExplicitBug>::{closure#0}, !>\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:137:18\n  16:     0x7f9c3f63a996 - std[3330b4673efabfce]::panicking::begin_panic::<rustc_errors[1b15f4e7e49d1fd5]::ExplicitBug>\n                               at /home/ubuntu/rust2/library/std/src/panicking.rs:607:12\n  17:     0x7f9c4227a496 - std[3330b4673efabfce]::panic::panic_any::<rustc_errors[1b15f4e7e49d1fd5]::ExplicitBug>\n                               at /home/ubuntu/rust2/library/std/src/panic.rs:61:5\n  18:     0x7f9c4227cdf7 - <rustc_errors[1b15f4e7e49d1fd5]::HandlerInner>::flush_delayed::<alloc[48d7b30605060536]::vec::Vec<rustc_errors[1b15f4e7e49d1fd5]::diagnostic::Diagnostic>, &str, rustc_errors[1b15f4e7e49d1fd5]::ExplicitBug>\n                               at /home/ubuntu/rust2/compiler/rustc_errors/src/lib.rs:1634:13\n  19:     0x7f9c422498cf - <rustc_errors[1b15f4e7e49d1fd5]::Handler>::flush_delayed\n                               at /home/ubuntu/rust2/compiler/rustc_errors/src/lib.rs:1225:9\n\n[ FRAMES INTENTIONALLY OMITTED ]\n\n  44:     0x7f9c3f6f3584 - <std[3330b4673efabfce]::thread::Builder>::spawn_unchecked_::<rustc_interface[947706ead88047d0]::util::run_in_thread_pool_with_globals<rustc_interface[947706ead88047d0]::interface::run_compiler<core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>, rustc_driver[f5b6d32d8905ecdd]::run_compiler::{closure#1}>::{closure#0}, core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>>::{closure#0}::{closure#0}, core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>>::{closure#1}\n                               at /home/ubuntu/rust2/library/std/src/thread/mod.rs:549:30\n  45:     0x7f9c3f6f3584 - <<std[3330b4673efabfce]::thread::Builder>::spawn_unchecked_<rustc_interface[947706ead88047d0]::util::run_in_thread_pool_with_globals<rustc_interface[947706ead88047d0]::interface::run_compiler<core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>, rustc_driver[f5b6d32d8905ecdd]::run_compiler::{closure#1}>::{closure#0}, core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>>::{closure#0}::{closure#0}, core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>>::{closure#1} as core[672e3947e150d6c6]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\n                               at /home/ubuntu/rust2/library/core/src/ops/function.rs:250:5\n  46:     0x7f9c3ec81968 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::he8b26fc22c6f51ec\n                               at /home/ubuntu/rust2/library/alloc/src/boxed.rs:1988:9\n  47:     0x7f9c3ec81968 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h5cf9cbe75a8c3ddc\n                               at /home/ubuntu/rust2/library/alloc/src/boxed.rs:1988:9\n  48:     0x7f9c3ec5f99c - std::sys::unix::thread::Thread::new::thread_start::h2d6dd4455e97d031\n                               at /home/ubuntu/rust2/library/std/src/sys/unix/thread.rs:108:17\n  49:     0x7f9c37c69609 - start_thread\n  50:     0x7f9c3ead0133 - clone\n  51:                0x0 - <unknown>\n```\n\nAfter, note `typeck_with_fallback` on the 5th frame, that's where we *actually* need to be pointed to:\n\n```\nerror: internal compiler error: no errors encountered even though `delay_span_bug` issued\n\nerror: internal compiler error: test\n --> /home/ubuntu/test.rs:1:1\n  |\n1 | fn main() {}\n  | ^^^^^^^^^\n  |\n  = note: delayed at    0: <rustc_errors::HandlerInner>::emit_diagnostic\n                       at ./compiler/rustc_errors/src/lib.rs:1279:29\n             1: <rustc_errors::HandlerInner>::delay_span_bug::<rustc_span::span_encoding::Span, &str>\n                       at ./compiler/rustc_errors/src/lib.rs:1553:9\n             2: <rustc_errors::Handler>::delay_span_bug::<rustc_span::span_encoding::Span, &str>\n                       at ./compiler/rustc_errors/src/lib.rs:995:9\n             3: <rustc_session::session::Session>::delay_span_bug::<rustc_span::span_encoding::Span, &str>\n                       at ./compiler/rustc_session/src/session.rs:600:9\n             4: rustc_hir_typeck::typeck_with_fallback::<rustc_hir_typeck::typeck::{closure#0}>::{closure#0}\n                       at ./compiler/rustc_hir_typeck/src/lib.rs:196:5\n             5: rustc_hir_typeck::typeck_with_fallback::<rustc_hir_typeck::typeck::{closure#0}>\n                       at ./compiler/rustc_hir_typeck/src/lib.rs:185:36\n             6: rustc_hir_typeck::typeck\n                       at ./compiler/rustc_hir_typeck/src/lib.rs:166:9\n\n[ FRAMES INTENTIONALLY OMITTED ]\n\n           108: std::panicking::try::<core::result::Result<(), rustc_errors::ErrorGuaranteed>, core::panic::unwind_safe::AssertUnwindSafe<<std::thread::Builder>::spawn_unchecked_<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>::{closure#1}::{closure#0}>>\n                       at ./library/std/src/panicking.rs:447:19\n           109: std::panic::catch_unwind::<core::panic::unwind_safe::AssertUnwindSafe<<std::thread::Builder>::spawn_unchecked_<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>::{closure#1}::{closure#0}>, core::result::Result<(), rustc_errors::ErrorGuaranteed>>\n                       at ./library/std/src/panic.rs:140:14\n           110: <std::thread::Builder>::spawn_unchecked_::<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>::{closure#1}\n                       at ./library/std/src/thread/mod.rs:549:30\n           111: <<std::thread::Builder>::spawn_unchecked_<rustc_interface::util::run_in_thread_pool_with_globals<rustc_interface::interface::run_compiler<core::result::Result<(), rustc_errors::ErrorGuaranteed>, rustc_driver::run_compiler::{closure#1}>::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>::{closure#0}::{closure#0}, core::result::Result<(), rustc_errors::ErrorGuaranteed>>::{closure#1} as core::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\n                       at ./library/core/src/ops/function.rs:250:5\n           112: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\n                       at ./library/alloc/src/boxed.rs:1988:9\n           113: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\n                       at ./library/alloc/src/boxed.rs:1988:9\n           114: std::sys::unix::thread::Thread::new::thread_start\n                       at ./library/std/src/sys/unix/thread.rs:108:17\n           115: start_thread\n           116: clone\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0681a9652eaaaefb5bada3be3c5303318e5f69b8", "html_url": "https://github.com/rust-lang/rust/commit/0681a9652eaaaefb5bada3be3c5303318e5f69b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0681a9652eaaaefb5bada3be3c5303318e5f69b8/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b22c152958eade17a71d899b29a2d39bcc77aa48", "url": "https://api.github.com/repos/rust-lang/rust/commits/b22c152958eade17a71d899b29a2d39bcc77aa48", "html_url": "https://github.com/rust-lang/rust/commit/b22c152958eade17a71d899b29a2d39bcc77aa48"}, {"sha": "05c1ac0215ef282c9ed6df6a5f758d824ee1ace9", "url": "https://api.github.com/repos/rust-lang/rust/commits/05c1ac0215ef282c9ed6df6a5f758d824ee1ace9", "html_url": "https://github.com/rust-lang/rust/commit/05c1ac0215ef282c9ed6df6a5f758d824ee1ace9"}], "stats": {"total": 44, "additions": 18, "deletions": 26}, "files": [{"sha": "fcb73c64356fdeca925ed83b1b763031eca32e0a", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0681a9652eaaaefb5bada3be3c5303318e5f69b8/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0681a9652eaaaefb5bada3be3c5303318e5f69b8/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=0681a9652eaaaefb5bada3be3c5303318e5f69b8", "patch": "@@ -1196,8 +1196,8 @@ static DEFAULT_HOOK: LazyLock<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send +\n             };\n \n             // Invoke the default handler, which prints the actual panic message and optionally a backtrace\n-            // Don't do this for `GoodPathBug`, which already emits its own more useful backtrace.\n-            if !info.payload().is::<rustc_errors::GoodPathBug>() {\n+            // Don't do this for delayed bugs, which already emit their own more useful backtrace.\n+            if !info.payload().is::<rustc_errors::DelayedBugPanic>() {\n                 (*DEFAULT_HOOK)(info);\n \n                 // Separate the output with an empty line\n@@ -1235,7 +1235,7 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // a .span_bug or .bug call has already printed what\n     // it wants to print.\n     if !info.payload().is::<rustc_errors::ExplicitBug>()\n-        && !info.payload().is::<rustc_errors::GoodPathBug>()\n+        && !info.payload().is::<rustc_errors::DelayedBugPanic>()\n     {\n         let mut d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n         handler.emit_diagnostic(&mut d);"}, {"sha": "66e5c41f56c28b9555783c1af7ca21124eccf380", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0681a9652eaaaefb5bada3be3c5303318e5f69b8/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0681a9652eaaaefb5bada3be3c5303318e5f69b8/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=0681a9652eaaaefb5bada3be3c5303318e5f69b8", "patch": "@@ -40,7 +40,6 @@ use rustc_span::source_map::SourceMap;\n use rustc_span::HashStableContext;\n use rustc_span::{Loc, Span};\n \n-use std::any::Any;\n use std::borrow::Cow;\n use std::fmt;\n use std::hash::Hash;\n@@ -364,9 +363,9 @@ pub use rustc_span::fatal_error::{FatalError, FatalErrorMarker};\n /// or `.span_bug` rather than a failed assertion, etc.\n pub struct ExplicitBug;\n \n-/// Signifies that the compiler died with an explicit call to `.delay_good_path_bug`\n+/// Signifies that the compiler died with an explicit call to `.delay_*_bug`\n /// rather than a failed assertion, etc.\n-pub struct GoodPathBug;\n+pub struct DelayedBugPanic;\n \n pub use diagnostic::{\n     AddToDiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgValue, DiagnosticId,\n@@ -399,7 +398,7 @@ struct HandlerInner {\n     warn_count: usize,\n     deduplicated_err_count: usize,\n     emitter: Box<dyn Emitter + sync::Send>,\n-    delayed_span_bugs: Vec<Diagnostic>,\n+    delayed_span_bugs: Vec<DelayedDiagnostic>,\n     delayed_good_path_bugs: Vec<DelayedDiagnostic>,\n     /// This flag indicates that an expected diagnostic was emitted and suppressed.\n     /// This is used for the `delayed_good_path_bugs` check.\n@@ -505,11 +504,7 @@ impl Drop for HandlerInner {\n \n         if !self.has_errors() {\n             let bugs = std::mem::replace(&mut self.delayed_span_bugs, Vec::new());\n-            self.flush_delayed(\n-                bugs,\n-                \"no errors encountered even though `delay_span_bug` issued\",\n-                ExplicitBug,\n-            );\n+            self.flush_delayed(bugs, \"no errors encountered even though `delay_span_bug` issued\");\n         }\n \n         // FIXME(eddyb) this explains what `delayed_good_path_bugs` are!\n@@ -520,9 +515,8 @@ impl Drop for HandlerInner {\n         if !self.has_any_message() && !self.suppressed_expected_diag {\n             let bugs = std::mem::replace(&mut self.delayed_good_path_bugs, Vec::new());\n             self.flush_delayed(\n-                bugs.into_iter().map(DelayedDiagnostic::decorate),\n+                bugs,\n                 \"no warnings or errors encountered even though `delayed_good_path_bugs` issued\",\n-                GoodPathBug,\n             );\n         }\n \n@@ -1223,11 +1217,7 @@ impl Handler {\n     pub fn flush_delayed(&self) {\n         let mut inner = self.inner.lock();\n         let bugs = std::mem::replace(&mut inner.delayed_span_bugs, Vec::new());\n-        inner.flush_delayed(\n-            bugs,\n-            \"no errors encountered even though `delay_span_bug` issued\",\n-            ExplicitBug,\n-        );\n+        inner.flush_delayed(bugs, \"no errors encountered even though `delay_span_bug` issued\");\n     }\n }\n \n@@ -1287,7 +1277,9 @@ impl HandlerInner {\n             // once *any* errors were emitted (and truncate `delayed_span_bugs`\n             // when an error is first emitted, also), but maybe there's a case\n             // in which that's not sound? otherwise this is really inefficient.\n-            self.delayed_span_bugs.push(diagnostic.clone());\n+            let backtrace = std::backtrace::Backtrace::force_capture();\n+            self.delayed_span_bugs\n+                .push(DelayedDiagnostic::with_backtrace(diagnostic.clone(), backtrace));\n \n             if !self.flags.report_delayed_bugs {\n                 return Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n@@ -1562,7 +1554,6 @@ impl HandlerInner {\n         }\n         let mut diagnostic = Diagnostic::new(Level::DelayedBug, msg);\n         diagnostic.set_span(sp.into());\n-        diagnostic.note(&format!(\"delayed at {}\", std::panic::Location::caller()));\n         self.emit_diagnostic(&mut diagnostic).unwrap()\n     }\n \n@@ -1605,12 +1596,13 @@ impl HandlerInner {\n \n     fn flush_delayed(\n         &mut self,\n-        bugs: impl IntoIterator<Item = Diagnostic>,\n+        bugs: impl IntoIterator<Item = DelayedDiagnostic>,\n         explanation: impl Into<DiagnosticMessage> + Copy,\n-        panic_with: impl Any + Send + 'static,\n     ) {\n         let mut no_bugs = true;\n-        for mut bug in bugs {\n+        for bug in bugs {\n+            let mut bug = bug.decorate();\n+\n             if no_bugs {\n                 // Put the overall explanation before the `DelayedBug`s, to\n                 // frame them better (e.g. separate warnings from them).\n@@ -1633,9 +1625,9 @@ impl HandlerInner {\n             self.emit_diagnostic(&mut bug);\n         }\n \n-        // Panic with `ExplicitBug` to avoid \"unexpected panic\" messages.\n+        // Panic with `DelayedBugPanic` to avoid \"unexpected panic\" messages.\n         if !no_bugs {\n-            panic::panic_any(panic_with);\n+            panic::panic_any(DelayedBugPanic);\n         }\n     }\n "}]}