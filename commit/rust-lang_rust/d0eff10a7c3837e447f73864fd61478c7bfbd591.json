{"sha": "d0eff10a7c3837e447f73864fd61478c7bfbd591", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZWZmMTBhN2MzODM3ZTQ0N2Y3Mzg2NGZkNjE0NzhjN2JmYmQ1OTE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-08-30T17:07:25Z"}, "committer": {"name": "Laura Peskin", "email": "laura.peskin@gmail.com", "date": "2017-09-24T19:40:16Z"}, "message": "Update test, fix lint", "tree": {"sha": "42e6d8f8db1ef5e0ab0f17bbaaa10f3a7d6b941c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42e6d8f8db1ef5e0ab0f17bbaaa10f3a7d6b941c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0eff10a7c3837e447f73864fd61478c7bfbd591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0eff10a7c3837e447f73864fd61478c7bfbd591", "html_url": "https://github.com/rust-lang/rust/commit/d0eff10a7c3837e447f73864fd61478c7bfbd591", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0eff10a7c3837e447f73864fd61478c7bfbd591/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lpesk", "id": 7589231, "node_id": "MDQ6VXNlcjc1ODkyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/7589231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lpesk", "html_url": "https://github.com/lpesk", "followers_url": "https://api.github.com/users/lpesk/followers", "following_url": "https://api.github.com/users/lpesk/following{/other_user}", "gists_url": "https://api.github.com/users/lpesk/gists{/gist_id}", "starred_url": "https://api.github.com/users/lpesk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lpesk/subscriptions", "organizations_url": "https://api.github.com/users/lpesk/orgs", "repos_url": "https://api.github.com/users/lpesk/repos", "events_url": "https://api.github.com/users/lpesk/events{/privacy}", "received_events_url": "https://api.github.com/users/lpesk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27d5ff6c9cafe87411b067b9ef21c50e7590171a", "url": "https://api.github.com/repos/rust-lang/rust/commits/27d5ff6c9cafe87411b067b9ef21c50e7590171a", "html_url": "https://github.com/rust-lang/rust/commit/27d5ff6c9cafe87411b067b9ef21c50e7590171a"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "e1db9447d394b07ee34ac6f51df32c2825349bab", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d0eff10a7c3837e447f73864fd61478c7bfbd591/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0eff10a7c3837e447f73864fd61478c7bfbd591/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=d0eff10a7c3837e447f73864fd61478c7bfbd591", "patch": "@@ -1329,8 +1329,8 @@ impl<'a, 'tcx> Delegate<'tcx> for MutateDelegate<'a, 'tcx> {\n     fn borrow(&mut self, _: NodeId, _: Span, _: cmt<'tcx>, _: ty::Region, _: ty::BorrowKind, _: LoanCause) {        \n     }\n \n-    fn mutate(&mut self, assignment_id: NodeId, _: Span, _: cmt<'tcx>, _: MutateMode) {\n-        println!(\"something was mutated\"); // tmp: see if this function is ever called at all (no)\n+    fn mutate(&mut self, assignment_id: NodeId, sp: Span, _: cmt<'tcx>, _: MutateMode) {\n+        self.cx.sess().span_note_without_error(sp, \"mutates!\");\n         if assignment_id == self.node_id {\n             self.was_mutated = true;\n         }\n@@ -1364,18 +1364,19 @@ fn check_for_mutation(cx: &LateContext, body: &Expr, bound: &Expr) -> bool {\n         let QPath::Resolved(None, ref path) = *qpath,\n     ], {\n         let def = cx.tables.qpath_def(qpath, bound.hir_id);\n+\n+                    cx.sess().span_note_without_error(body.span, \"loop\");\n         match def {\n             Def::Local(..) | Def::Upvar(..) => {\n                 let def_id = def.def_id();\n                 let node_id = cx.tcx.hir.as_local_node_id(def_id).expect(\"local/upvar are local nodes\");\n                 let node_str = cx.tcx.hir.get(node_id);\n-                if_let_chain! {[ // prob redundant now, remove\n-                    let map::Node::NodeLocal(local) = node_str,\n-                    let PatKind::Binding(bind_ann, _, _, _) = local.pat.node,\n+                if_let_chain! {[\n+                    let map::Node::NodeBinding(pat) = node_str,\n+                    let PatKind::Binding(bind_ann, _, _, _) = pat.node,\n                     let BindingAnnotation::Mutable = bind_ann,\n                     \n                 ], {\n-                    println!(\"bound was mutable\"); // tmp: make sure the full if-let chain executes when it should (yes)\n                     let mut delegate = MutateDelegate { cx: cx, node_id: node_id, was_mutated: false };\n                     let region_maps = &cx.tcx.region_maps(def_id); // is this the correct argument?\n                     ExprUseVisitor::new(&mut delegate, cx.tcx, cx.param_env, region_maps, cx.tables).walk_expr(body);"}, {"sha": "ff164438f3fa0fac81919a71a36188178abc0945", "filename": "tests/run-pass/mut_range_bound_tmp.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0eff10a7c3837e447f73864fd61478c7bfbd591/tests%2Frun-pass%2Fmut_range_bound_tmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0eff10a7c3837e447f73864fd61478c7bfbd591/tests%2Frun-pass%2Fmut_range_bound_tmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmut_range_bound_tmp.rs?ref=d0eff10a7c3837e447f73864fd61478c7bfbd591", "patch": "@@ -1,6 +1,8 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n+#![allow(unused)]\n+\n fn main() {\n     mut_range_bound_upper();\n     mut_range_bound_lower();\n@@ -10,7 +12,10 @@ fn main() {\n \n fn mut_range_bound_upper() {\n     let mut m = 4;\n-    for i in 0..m { continue; } // WARNING the range upper bound is mutable\n+    for i in 0..m { \n+\n+        m = 5;\n+        continue; } // WARNING the range upper bound is mutable\n }\n \n fn mut_range_bound_lower() {"}]}