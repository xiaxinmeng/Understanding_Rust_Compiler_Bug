{"sha": "f164d7779aea578dfadf22146e294e0fcd142796", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNjRkNzc3OWFlYTU3OGRmYWRmMjIxNDZlMjk0ZTBmY2QxNDI3OTY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-06T23:12:39Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-06T23:12:39Z"}, "message": "rustc: Move AST constraints to interior vectors", "tree": {"sha": "07962e5822f41dae5db9687a44f80d0d29e64a57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07962e5822f41dae5db9687a44f80d0d29e64a57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f164d7779aea578dfadf22146e294e0fcd142796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f164d7779aea578dfadf22146e294e0fcd142796", "html_url": "https://github.com/rust-lang/rust/commit/f164d7779aea578dfadf22146e294e0fcd142796", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f164d7779aea578dfadf22146e294e0fcd142796/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c83782f5008b366191ddf8f6f820b49a23eaadcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c83782f5008b366191ddf8f6f820b49a23eaadcd", "html_url": "https://github.com/rust-lang/rust/commit/c83782f5008b366191ddf8f6f820b49a23eaadcd"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "cd20f7032911b35fe6ac7a04eed9ac581e721f69", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f164d7779aea578dfadf22146e294e0fcd142796/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f164d7779aea578dfadf22146e294e0fcd142796/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=f164d7779aea578dfadf22146e294e0fcd142796", "patch": "@@ -337,7 +337,7 @@ type ty_method_ =\n         ty_arg[] inputs,\n         @ty output,\n         controlflow cf,\n-        vec[@constr] constrs);\n+        (@constr)[] constrs);\n \n type ty_field = spanned[ty_field_];\n \n@@ -403,11 +403,11 @@ tag ty_ {\n     ty_chan(@ty);\n     ty_tup(mt[]);\n     ty_rec(ty_field[]);\n-    ty_fn(proto, ty_arg[], @ty, controlflow, vec[@constr]);\n+    ty_fn(proto, ty_arg[], @ty, controlflow, (@constr)[]);\n     ty_obj(ty_method[]);\n     ty_path(path, node_id);\n     ty_type;\n-    ty_constr(@ty, vec[@constr]);\n+    ty_constr(@ty, (@constr)[]);\n }\n \n \n@@ -442,7 +442,7 @@ type fn_decl =\n         @ty output,\n         purity purity,\n         controlflow cf,\n-        vec[@constr] constraints);\n+        (@constr)[] constraints);\n \n tag purity {\n     pure_fn; // declared with \"pred\""}, {"sha": "3a8fd4260fe0b73a94499d40ce791445d2cd8703", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f164d7779aea578dfadf22146e294e0fcd142796/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f164d7779aea578dfadf22146e294e0fcd142796/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=f164d7779aea578dfadf22146e294e0fcd142796", "patch": "@@ -175,8 +175,8 @@ fn noop_fold_native_item(&@native_item ni, ast_fold fld) -> @native_item {\n                                     rec(inputs=map(fold_arg, fdec.inputs),\n                                         output=fld.fold_ty(fdec.output),\n                                         purity=fdec.purity, cf=fdec.cf,\n-                                        constraints=map(fld.fold_constr,\n-                                                        fdec.constraints)),\n+                                        constraints=ivec::map(fld.fold_constr,\n+                                            fdec.constraints)),\n                                     typms)\n                  }\n              },\n@@ -450,11 +450,12 @@ fn noop_fold_constr(&constr_ c, ast_fold fld) -> constr_ {\n fn noop_fold_fn(&_fn f, ast_fold fld) -> _fn {\n     auto fold_arg = bind fold_arg_(_, fld);\n \n-    ret rec(decl= rec(inputs=map(fold_arg, f.decl.inputs),\n+    ret rec(decl= rec(inputs=vec::map(fold_arg, f.decl.inputs),\n                       output=fld.fold_ty(f.decl.output),\n                       purity=f.decl.purity,\n                       cf=f.decl.cf,\n-                      constraints=map(fld.fold_constr, f.decl.constraints)),\n+                      constraints=ivec::map(fld.fold_constr,\n+                                            f.decl.constraints)),\n             proto = f.proto,\n             body = fld.fold_block(f.body));\n }"}, {"sha": "c0b102d5c5e437cd169a348562a51f24ad3805b0", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f164d7779aea578dfadf22146e294e0fcd142796/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f164d7779aea578dfadf22146e294e0fcd142796/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=f164d7779aea578dfadf22146e294e0fcd142796", "patch": "@@ -363,17 +363,17 @@ fn parse_ty_constr(&vec[ast::arg] fn_args, &parser p) -> @ast::constr {\n // Use the args list to translate each bound variable \n // mentioned in a constraint to an arg index.\n // Seems weird to do this in the parser, but I'm not sure how else to.\n-fn parse_constrs(&vec[ast::arg] args, &parser p) ->\n-    ast::spanned[vec[@ast::constr]] {\n+fn parse_constrs(&vec[ast::arg] args, &parser p)\n+        -> ast::spanned[(@ast::constr)[]] {\n     auto lo = p.get_lo_pos();\n     auto hi = p.get_hi_pos();\n-    let vec[@ast::constr] constrs = [];\n+    let (@ast::constr)[] constrs = ~[];\n     if (p.peek() == token::COLON) {\n         p.bump();\n         while (true) {\n             auto constr = parse_ty_constr(args, p);\n             hi = constr.span.hi;\n-            vec::push(constrs, constr);\n+            constrs += ~[constr];\n             if (p.peek() == token::COMMA) { p.bump(); } else { break; }\n         }\n     }\n@@ -1799,7 +1799,7 @@ fn parse_dtor(&parser p) -> @ast::method {\n             cf=ast::return,\n \n             // I guess dtors can't have constraints? \n-            constraints=[]);\n+            constraints=~[]);\n     let ast::_fn f = rec(decl=d, proto=ast::proto_fn, body=b);\n     let ast::method_ m =\n         rec(ident=\"drop\", meth=f, id=p.get_id());\n@@ -1844,7 +1844,7 @@ fn parse_item_res(&parser p, ast::layer lyr, &ast::attribute[] attrs) ->\n                     output=@spanned(lo, lo, ast::ty_nil),\n                     purity=ast::impure_fn,\n                     cf=ast::return,\n-                    constraints=[]);\n+                    constraints=~[]);\n     auto f = rec(decl=decl, proto=ast::proto_fn, body=dtor);\n     ret mk_item(p, lo, dtor.span.hi, ident,\n                 ast::item_res(f, p.get_id(), ty_params, p.get_id()), attrs);"}, {"sha": "6f63a600925ff7480ab9192bbac4f11786a2e363", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f164d7779aea578dfadf22146e294e0fcd142796/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f164d7779aea578dfadf22146e294e0fcd142796/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=f164d7779aea578dfadf22146e294e0fcd142796", "patch": "@@ -1235,7 +1235,7 @@ fn print_mt(&ps s, &ast::mt mt) {\n \n fn print_ty_fn(&ps s, &ast::proto proto, &option::t[str] id,\n                &ast::ty_arg[] inputs, &@ast::ty output,\n-               &ast::controlflow cf, &vec[@ast::constr] constrs) {\n+               &ast::controlflow cf, &(@ast::constr)[] constrs) {\n     ibox(s, indent_unit);\n     if (proto == ast::proto_fn) {\n         word(s.s, \"fn\");\n@@ -1488,7 +1488,7 @@ fn ast_constr_to_str(&@ast::constr c) -> str {\n             constr_args_to_str(uint_to_str, cag_ivec);\n }\n \n-fn ast_constrs_str(&vec[@ast::constr] constrs) -> str {\n+fn ast_constrs_str(&(@ast::constr)[] constrs) -> str {\n     auto s = \"\";\n     auto colon = true;\n     for (@ast::constr c in constrs) {"}]}