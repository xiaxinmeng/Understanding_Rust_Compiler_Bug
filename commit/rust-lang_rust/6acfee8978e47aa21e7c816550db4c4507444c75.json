{"sha": "6acfee8978e47aa21e7c816550db4c4507444c75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhY2ZlZTg5NzhlNDdhYTIxZTdjODE2NTUwZGI0YzQ1MDc0NDRjNzU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-16T11:37:33Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-16T11:37:33Z"}, "message": "Remove unnecessary stuff from patch 0002-Disable-u128-and-i128-in-libcore", "tree": {"sha": "864f483e06de4f7fe362f0afb9452f419589606f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/864f483e06de4f7fe362f0afb9452f419589606f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6acfee8978e47aa21e7c816550db4c4507444c75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6acfee8978e47aa21e7c816550db4c4507444c75", "html_url": "https://github.com/rust-lang/rust/commit/6acfee8978e47aa21e7c816550db4c4507444c75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6acfee8978e47aa21e7c816550db4c4507444c75/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06dd020446f690b21683f93edd3124d7ef0c07c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/06dd020446f690b21683f93edd3124d7ef0c07c1", "html_url": "https://github.com/rust-lang/rust/commit/06dd020446f690b21683f93edd3124d7ef0c07c1"}], "stats": {"total": 104, "additions": 0, "deletions": 104}, "files": [{"sha": "468f9f9d00cd8a0f1312e8bc0f21b287baf83e2e", "filename": "patches/0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 0, "deletions": 104, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/6acfee8978e47aa21e7c816550db4c4507444c75/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/6acfee8978e47aa21e7c816550db4c4507444c75/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0002-Disable-u128-and-i128-in-libcore.patch?ref=6acfee8978e47aa21e7c816550db4c4507444c75", "patch": "@@ -19,8 +19,6 @@ Subject: [PATCH] Disable u128 and i128 in libcore\n  src/libcore/ops/arith.rs         |  22 +++---\n  src/libcore/ops/bit.rs           |  30 +++-----\n  src/libcore/sync/atomic.rs       |  30 --------\n- src/libcore/tests/iter.rs        |  15 ----\n- src/libcore/tests/num/mod.rs     |  18 -----\n  src/libcore/time.rs              | 123 -------------------------------\n  src/libstd/lib.rs                |   4 -\n  src/libstd/net/ip.rs             |  20 -----\n@@ -884,108 +882,6 @@ index 8c5dde7..8122120 100644\n  #[cfg(target_pointer_width = \"16\")]\n  macro_rules! ptr_width {\n      () => { 2 }\n-diff --git a/src/libcore/tests/iter.rs b/src/libcore/tests/iter.rs\n-index 51a6017..e6631db 100644\n---- a/src/libcore/tests/iter.rs\n-+++ b/src/libcore/tests/iter.rs\n-@@ -217,8 +217,6 @@ fn test_iterator_step_by_nth_overflow() {\n-     type Bigger = u32;\n-     #[cfg(target_pointer_width = \"32\")]\n-     type Bigger = u64;\n--    #[cfg(target_pointer_width = \"64\")]\n--    type Bigger = u128;\n- \n-     #[derive(Clone)]\n-     struct Test(Bigger);\n-@@ -1976,19 +1974,6 @@ fn test_step_replace_signed() {\n-     assert_eq!(y, 5);\n- }\n- \n--#[test]\n--fn test_step_replace_no_between() {\n--    let mut x = 4u128;\n--    let y = x.replace_zero();\n--    assert_eq!(x, 0);\n--    assert_eq!(y, 4);\n--\n--    x = 5;\n--    let y = x.replace_one();\n--    assert_eq!(x, 1);\n--    assert_eq!(y, 5);\n--}\n--\n- #[test]\n- fn test_rev_try_folds() {\n-     let f = &|acc, x| i32::checked_add(2*acc, x);\n-diff --git a/src/libcore/tests/num/mod.rs b/src/libcore/tests/num/mod.rs\n-index ab638e0..4a2aa4c 100644\n---- a/src/libcore/tests/num/mod.rs\n-+++ b/src/libcore/tests/num/mod.rs\n-@@ -180,12 +180,10 @@ test_impl_from! { test_boolu8, bool, u8 }\n- test_impl_from! { test_boolu16, bool, u16 }\n- test_impl_from! { test_boolu32, bool, u32 }\n- test_impl_from! { test_boolu64, bool, u64 }\n--test_impl_from! { test_boolu128, bool, u128 }\n- test_impl_from! { test_booli8, bool, i8 }\n- test_impl_from! { test_booli16, bool, i16 }\n- test_impl_from! { test_booli32, bool, i32 }\n- test_impl_from! { test_booli64, bool, i64 }\n--test_impl_from! { test_booli128, bool, i128 }\n- \n- // Signed -> Float\n- test_impl_from! { test_i8f32, i8, f32 }\n-@@ -267,51 +265,35 @@ test_impl_try_from_always_ok! { test_try_u8u8, u8, u8 }\n- test_impl_try_from_always_ok! { test_try_u8u16, u8, u16 }\n- test_impl_try_from_always_ok! { test_try_u8u32, u8, u32 }\n- test_impl_try_from_always_ok! { test_try_u8u64, u8, u64 }\n--test_impl_try_from_always_ok! { test_try_u8u128, u8, u128 }\n- test_impl_try_from_always_ok! { test_try_u8i16, u8, i16 }\n- test_impl_try_from_always_ok! { test_try_u8i32, u8, i32 }\n- test_impl_try_from_always_ok! { test_try_u8i64, u8, i64 }\n--test_impl_try_from_always_ok! { test_try_u8i128, u8, i128 }\n- \n- test_impl_try_from_always_ok! { test_try_u16u16, u16, u16 }\n- test_impl_try_from_always_ok! { test_try_u16u32, u16, u32 }\n- test_impl_try_from_always_ok! { test_try_u16u64, u16, u64 }\n--test_impl_try_from_always_ok! { test_try_u16u128, u16, u128 }\n- test_impl_try_from_always_ok! { test_try_u16i32, u16, i32 }\n- test_impl_try_from_always_ok! { test_try_u16i64, u16, i64 }\n--test_impl_try_from_always_ok! { test_try_u16i128, u16, i128 }\n- \n- test_impl_try_from_always_ok! { test_try_u32u32, u32, u32 }\n- test_impl_try_from_always_ok! { test_try_u32u64, u32, u64 }\n--test_impl_try_from_always_ok! { test_try_u32u128, u32, u128 }\n- test_impl_try_from_always_ok! { test_try_u32i64, u32, i64 }\n--test_impl_try_from_always_ok! { test_try_u32i128, u32, i128 }\n- \n- test_impl_try_from_always_ok! { test_try_u64u64, u64, u64 }\n--test_impl_try_from_always_ok! { test_try_u64u128, u64, u128 }\n--test_impl_try_from_always_ok! { test_try_u64i128, u64, i128 }\n--\n--test_impl_try_from_always_ok! { test_try_u128u128, u128, u128 }\n- \n- test_impl_try_from_always_ok! { test_try_i8i8, i8, i8 }\n- test_impl_try_from_always_ok! { test_try_i8i16, i8, i16 }\n- test_impl_try_from_always_ok! { test_try_i8i32, i8, i32 }\n- test_impl_try_from_always_ok! { test_try_i8i64, i8, i64 }\n--test_impl_try_from_always_ok! { test_try_i8i128, i8, i128 }\n- \n- test_impl_try_from_always_ok! { test_try_i16i16, i16, i16 }\n- test_impl_try_from_always_ok! { test_try_i16i32, i16, i32 }\n- test_impl_try_from_always_ok! { test_try_i16i64, i16, i64 }\n--test_impl_try_from_always_ok! { test_try_i16i128, i16, i128 }\n- \n- test_impl_try_from_always_ok! { test_try_i32i32, i32, i32 }\n- test_impl_try_from_always_ok! { test_try_i32i64, i32, i64 }\n--test_impl_try_from_always_ok! { test_try_i32i128, i32, i128 }\n- \n- test_impl_try_from_always_ok! { test_try_i64i64, i64, i64 }\n--test_impl_try_from_always_ok! { test_try_i64i128, i64, i128 }\n--\n--test_impl_try_from_always_ok! { test_try_i128i128, i128, i128 }\n- \n- test_impl_try_from_always_ok! { test_try_usizeusize, usize, usize }\n- test_impl_try_from_always_ok! { test_try_isizeisize, isize, isize }\n diff --git a/src/libcore/time.rs b/src/libcore/time.rs\n index ac7e117..0dfd856 100644\n --- a/src/libcore/time.rs"}]}