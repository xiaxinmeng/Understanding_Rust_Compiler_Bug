{"sha": "969a6c2481c41cea793708f7fdd2f96a3397143f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2OWE2YzI0ODFjNDFjZWE3OTM3MDhmN2ZkZDJmOTZhMzM5NzE0M2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-05T16:30:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-05T16:30:53Z"}, "message": "Auto merge of #86674 - Aaron1011:new-querify-limits, r=michaelwoerister\n\nQuery-ify global limit attribute handling\n\nCurrently, we read various 'global limits' from inner attributes the crate root (`recursion_limit`, `move_size_limit`, `type_length_limit`, `const_eval_limit`). These limits are then stored in `Sessions`, allowing them to be access from a `TyCtxt` without registering a dependency on the crate root attributes.\n\nThis PR moves the calculation of these global limits behind queries, so that we properly track dependencies on crate root attributes. During the setup of macro expansion (before we've created a `TyCtxt`), we need to access the recursion limit, which is now done by directly calling into the code shared by the normal query implementations.", "tree": {"sha": "06dc7335d5ed67249de1ad8285e59e2fb8ca2317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06dc7335d5ed67249de1ad8285e59e2fb8ca2317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/969a6c2481c41cea793708f7fdd2f96a3397143f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/969a6c2481c41cea793708f7fdd2f96a3397143f", "html_url": "https://github.com/rust-lang/rust/commit/969a6c2481c41cea793708f7fdd2f96a3397143f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/969a6c2481c41cea793708f7fdd2f96a3397143f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e9b3696d494a32d493585f96f0671123066cd58", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e9b3696d494a32d493585f96f0671123066cd58", "html_url": "https://github.com/rust-lang/rust/commit/6e9b3696d494a32d493585f96f0671123066cd58"}, {"sha": "7e5a88a56cf14bf691c25cad04837e82c4c601f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e5a88a56cf14bf691c25cad04837e82c4c601f1", "html_url": "https://github.com/rust-lang/rust/commit/7e5a88a56cf14bf691c25cad04837e82c4c601f1"}], "stats": {"total": 264, "additions": 173, "deletions": 91}, "files": [{"sha": "a7bfffbc38ae9c570496fe335a21190e0368fb5d", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -211,10 +211,6 @@ pub fn register_plugins<'a>(\n         });\n     }\n \n-    sess.time(\"recursion_limit\", || {\n-        middle::limits::update_limits(sess, &krate);\n-    });\n-\n     let mut lint_store = rustc_lint::new_lint_store(\n         sess.opts.debugging_opts.no_interleave_lints,\n         sess.unstable_options(),\n@@ -311,9 +307,11 @@ pub fn configure_and_expand(\n \n         // Create the config for macro expansion\n         let features = sess.features_untracked();\n+        let recursion_limit =\n+            rustc_middle::middle::limits::get_recursion_limit(&krate.attrs, &sess);\n         let cfg = rustc_expand::expand::ExpansionConfig {\n             features: Some(&features),\n-            recursion_limit: sess.recursion_limit(),\n+            recursion_limit,\n             trace_mac: sess.opts.debugging_opts.trace_macros,\n             should_test: sess.opts.test,\n             span_debug: sess.opts.debugging_opts.span_debug,\n@@ -872,6 +870,13 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n                     tcx.ensure().check_mod_unstable_api_usage(module);\n                     tcx.ensure().check_mod_const_bodies(module);\n                 });\n+            },\n+            {\n+                // We force these querie to run,\n+                // since they might not otherwise get called.\n+                // This marks the corresponding crate-level attributes\n+                // as used, and ensures that their values are valid.\n+                tcx.ensure().limits(());\n             }\n         );\n     });"}, {"sha": "f1c4529b8552b0da73a86b2c49d3a31cb6e69c24", "filename": "compiler/rustc_middle/src/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -245,6 +245,8 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n     }\n }\n \n+impl rustc_session::HashStableContext for StableHashingContext<'a> {}\n+\n pub fn hash_stable_trait_impls<'a>(\n     hcx: &mut StableHashingContext<'a>,\n     hasher: &mut StableHasher,"}, {"sha": "c4bfd0ebb2fde61996d0e3f365ed89e0f027cf16", "filename": "compiler/rustc_middle/src/middle/limits.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -10,38 +10,46 @@\n //! just peeks and looks for that attribute.\n \n use crate::bug;\n-use rustc_ast as ast;\n-use rustc_data_structures::sync::OnceCell;\n+use crate::ty;\n+use rustc_ast::Attribute;\n use rustc_session::Session;\n+use rustc_session::{Limit, Limits};\n use rustc_span::symbol::{sym, Symbol};\n \n use std::num::IntErrorKind;\n \n-pub fn update_limits(sess: &Session, krate: &ast::Crate) {\n-    update_limit(sess, krate, &sess.recursion_limit, sym::recursion_limit, 128);\n-    update_limit(sess, krate, &sess.move_size_limit, sym::move_size_limit, 0);\n-    update_limit(sess, krate, &sess.type_length_limit, sym::type_length_limit, 1048576);\n-    update_limit(sess, krate, &sess.const_eval_limit, sym::const_eval_limit, 1_000_000);\n+pub fn provide(providers: &mut ty::query::Providers) {\n+    providers.limits = |tcx, ()| Limits {\n+        recursion_limit: get_recursion_limit(tcx.hir().krate_attrs(), tcx.sess),\n+        move_size_limit: get_limit(tcx.hir().krate_attrs(), tcx.sess, sym::move_size_limit, 0),\n+        type_length_limit: get_limit(\n+            tcx.hir().krate_attrs(),\n+            tcx.sess,\n+            sym::type_length_limit,\n+            1048576,\n+        ),\n+        const_eval_limit: get_limit(\n+            tcx.hir().krate_attrs(),\n+            tcx.sess,\n+            sym::const_eval_limit,\n+            1_000_000,\n+        ),\n+    }\n+}\n+\n+pub fn get_recursion_limit(krate_attrs: &[Attribute], sess: &Session) -> Limit {\n+    get_limit(krate_attrs, sess, sym::recursion_limit, 128)\n }\n \n-fn update_limit(\n-    sess: &Session,\n-    krate: &ast::Crate,\n-    limit: &OnceCell<impl From<usize> + std::fmt::Debug>,\n-    name: Symbol,\n-    default: usize,\n-) {\n-    for attr in &krate.attrs {\n+fn get_limit(krate_attrs: &[Attribute], sess: &Session, name: Symbol, default: usize) -> Limit {\n+    for attr in krate_attrs {\n         if !sess.check_name(attr, name) {\n             continue;\n         }\n \n         if let Some(s) = attr.value_str() {\n             match s.as_str().parse() {\n-                Ok(n) => {\n-                    limit.set(From::from(n)).unwrap();\n-                    return;\n-                }\n+                Ok(n) => return Limit::new(n),\n                 Err(e) => {\n                     let mut err =\n                         sess.struct_span_err(attr.span, \"`limit` must be a non-negative integer\");\n@@ -68,5 +76,5 @@ fn update_limit(\n             }\n         }\n     }\n-    limit.set(From::from(default)).unwrap();\n+    return Limit::new(default);\n }"}, {"sha": "b370ec152e8ecf685c7f874efb6f94975c4b68a5", "filename": "compiler/rustc_middle/src/middle/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -32,3 +32,7 @@ pub mod privacy;\n pub mod region;\n pub mod resolve_lifetime;\n pub mod stability;\n+\n+pub fn provide(providers: &mut crate::ty::query::Providers) {\n+    limits::provide(providers);\n+}"}, {"sha": "6f0f180b4274bc858d720d6f03d7857fd0a9fff3", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -1725,4 +1725,8 @@ rustc_queries! {\n     query conservative_is_privately_uninhabited(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"conservatively checking if {:?} is privately uninhabited\", key }\n     }\n+\n+    query limits(key: ()) -> Limits {\n+        desc { \"looking up limits\" }\n+    }\n }"}, {"sha": "932187e15f4ab681382e2236f4b94a8147a7c965", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -53,6 +53,7 @@ use rustc_middle::ty::OpaqueTypeKey;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_session::config::{BorrowckMode, CrateType, OutputFilenames};\n use rustc_session::lint::{Level, Lint};\n+use rustc_session::Limit;\n use rustc_session::Session;\n use rustc_span::def_id::StableCrateId;\n use rustc_span::source_map::MultiSpan;\n@@ -1569,6 +1570,22 @@ impl<'tcx> TyCtxt<'tcx> {\n             def_kind => (def_kind.article(), def_kind.descr(def_id)),\n         }\n     }\n+\n+    pub fn type_length_limit(self) -> Limit {\n+        self.limits(()).type_length_limit\n+    }\n+\n+    pub fn recursion_limit(self) -> Limit {\n+        self.limits(()).recursion_limit\n+    }\n+\n+    pub fn move_size_limit(self) -> Limit {\n+        self.limits(()).move_size_limit\n+    }\n+\n+    pub fn const_eval_limit(self) -> Limit {\n+        self.limits(()).const_eval_limit\n+    }\n }\n \n /// A trait implemented for all `X<'a>` types that can be safely and"}, {"sha": "dbb5064c4f546f9a0a0dea613934bca8f873fd1c", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -221,7 +221,7 @@ fn layout_raw<'tcx>(\n     ty::tls::with_related_context(tcx, move |icx| {\n         let (param_env, ty) = query.into_parts();\n \n-        if !tcx.sess.recursion_limit().value_within_limit(icx.layout_depth) {\n+        if !tcx.recursion_limit().value_within_limit(icx.layout_depth) {\n             tcx.sess.fatal(&format!(\"overflow representing the type `{}`\", ty));\n         }\n "}, {"sha": "f9dad42a4b7c5056cea6e78b2608561867ce8901", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -1987,6 +1987,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     util::provide(providers);\n     print::provide(providers);\n     super::util::bug::provide(providers);\n+    super::middle::provide(providers);\n     *providers = ty::query::Providers {\n         trait_impls_of: trait_def::trait_impls_of_provider,\n         type_uninhabited_from: inhabitedness::type_uninhabited_from,"}, {"sha": "cb326996111b7b42ecc5a8c2f1c6711af82377d6", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -1437,7 +1437,7 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n     }\n \n     fn print_type(mut self, ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n-        let type_length_limit = self.tcx.sess.type_length_limit();\n+        let type_length_limit = self.tcx.type_length_limit();\n         if type_length_limit.value_within_limit(self.printed_type_count) {\n             self.printed_type_count += 1;\n             self.pretty_print_type(ty)"}, {"sha": "875453bb80bb2f86bc3e3ae6e0bcdff4935bd775", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -49,6 +49,7 @@ use rustc_serialize::opaque;\n use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::CrateDisambiguator;\n+use rustc_session::Limits;\n use rustc_target::spec::PanicStrategy;\n \n use rustc_ast as ast;"}, {"sha": "485be4c9987bd073a965567ae955e6e116ed8782", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -206,8 +206,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         mut ty: Ty<'tcx>,\n         normalize: impl Fn(Ty<'tcx>) -> Ty<'tcx>,\n     ) -> Ty<'tcx> {\n+        let recursion_limit = self.recursion_limit();\n         for iteration in 0.. {\n-            if !self.sess.recursion_limit().value_within_limit(iteration) {\n+            if !recursion_limit.value_within_limit(iteration) {\n                 return self.ty_error_with_message(\n                     DUMMY_SP,\n                     &format!(\"reached the recursion limit finding the struct tail for {}\", ty),"}, {"sha": "c1c26d4e810d0727b08e2e48f48001d522a34ade", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -98,7 +98,7 @@ pub(super) fn mk_eval_cx<'mir, 'tcx>(\n         tcx,\n         root_span,\n         param_env,\n-        CompileTimeInterpreter::new(tcx.sess.const_eval_limit()),\n+        CompileTimeInterpreter::new(tcx.const_eval_limit()),\n         MemoryExtra { can_access_statics },\n     )\n }\n@@ -300,7 +300,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n         tcx,\n         tcx.def_span(def.did),\n         key.param_env,\n-        CompileTimeInterpreter::new(tcx.sess.const_eval_limit()),\n+        CompileTimeInterpreter::new(tcx.const_eval_limit()),\n         // Statics (and promoteds inside statics) may access other statics, because unlike consts\n         // they do not have to behave \"as if\" they were evaluated at runtime.\n         MemoryExtra { can_access_statics: is_static },"}, {"sha": "279f414e7fef14667bfb4d6e08061ccb70cf2731", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -393,7 +393,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         frame: Frame<'mir, 'tcx>,\n     ) -> InterpResult<'tcx, Frame<'mir, 'tcx>> {\n         // Enforce stack size limit. Add 1 because this is run before the new frame is pushed.\n-        if !ecx.tcx.sess.recursion_limit().value_within_limit(ecx.stack().len() + 1) {\n+        if !ecx.recursion_limit.value_within_limit(ecx.stack().len() + 1) {\n             throw_exhaust!(StackFrameLimitReached)\n         } else {\n             Ok(frame)"}, {"sha": "227abeb7e7cc7c417746e48428625ddeb367549f", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -13,6 +13,7 @@ use rustc_middle::ty::layout::{self, TyAndLayout};\n use rustc_middle::ty::{\n     self, query::TyCtxtAt, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable,\n };\n+use rustc_session::Limit;\n use rustc_span::{Pos, Span};\n use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Size, TargetDataLayout};\n \n@@ -39,6 +40,9 @@ pub struct InterpCx<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n \n     /// The virtual memory system.\n     pub memory: Memory<'mir, 'tcx, M>,\n+\n+    /// The recursion limit (cached from `tcx.recursion_limit(())`)\n+    pub recursion_limit: Limit,\n }\n \n // The Phantomdata exists to prevent this type from being `Send`. If it were sent across a thread\n@@ -388,6 +392,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             tcx: tcx.at(root_span),\n             param_env,\n             memory: Memory::new(tcx, memory_extra),\n+            recursion_limit: tcx.recursion_limit(),\n         }\n     }\n "}, {"sha": "ced35d47b1102a1cb8489356bcfd1d8d39650caa", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -200,6 +200,7 @@ use rustc_middle::ty::{self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFold\n use rustc_middle::{middle::codegen_fn_attrs::CodegenFnAttrFlags, mir::visit::TyContext};\n use rustc_session::config::EntryFnType;\n use rustc_session::lint::builtin::LARGE_ASSIGNMENTS;\n+use rustc_session::Limit;\n use rustc_span::source_map::{dummy_spanned, respan, Span, Spanned, DUMMY_SP};\n use rustc_target::abi::Size;\n use smallvec::SmallVec;\n@@ -294,6 +295,7 @@ pub fn collect_crate_mono_items(\n \n     let mut visited = MTLock::new(FxHashSet::default());\n     let mut inlining_map = MTLock::new(InliningMap::new());\n+    let recursion_limit = tcx.recursion_limit();\n \n     {\n         let visited: MTRef<'_, _> = &mut visited;\n@@ -307,6 +309,7 @@ pub fn collect_crate_mono_items(\n                     dummy_spanned(root),\n                     visited,\n                     &mut recursion_depths,\n+                    recursion_limit,\n                     inlining_map,\n                 );\n             });\n@@ -350,6 +353,7 @@ fn collect_items_rec<'tcx>(\n     starting_point: Spanned<MonoItem<'tcx>>,\n     visited: MTRef<'_, MTLock<FxHashSet<MonoItem<'tcx>>>>,\n     recursion_depths: &mut DefIdMap<usize>,\n+    recursion_limit: Limit,\n     inlining_map: MTRef<'_, MTLock<InliningMap<'tcx>>>,\n ) {\n     if !visited.lock_mut().insert(starting_point.node) {\n@@ -409,8 +413,13 @@ fn collect_items_rec<'tcx>(\n             debug_assert!(should_codegen_locally(tcx, &instance));\n \n             // Keep track of the monomorphization recursion depth\n-            recursion_depth_reset =\n-                Some(check_recursion_limit(tcx, instance, starting_point.span, recursion_depths));\n+            recursion_depth_reset = Some(check_recursion_limit(\n+                tcx,\n+                instance,\n+                starting_point.span,\n+                recursion_depths,\n+                recursion_limit,\n+            ));\n             check_type_length_limit(tcx, instance);\n \n             rustc_data_structures::stack::ensure_sufficient_stack(|| {\n@@ -455,7 +464,7 @@ fn collect_items_rec<'tcx>(\n     record_accesses(tcx, starting_point.node, neighbors.iter().map(|i| &i.node), inlining_map);\n \n     for neighbour in neighbors {\n-        collect_items_rec(tcx, neighbour, visited, recursion_depths, inlining_map);\n+        collect_items_rec(tcx, neighbour, visited, recursion_depths, recursion_limit, inlining_map);\n     }\n \n     if let Some((def_id, depth)) = recursion_depth_reset {\n@@ -523,6 +532,7 @@ fn check_recursion_limit<'tcx>(\n     instance: Instance<'tcx>,\n     span: Span,\n     recursion_depths: &mut DefIdMap<usize>,\n+    recursion_limit: Limit,\n ) -> (DefId, usize) {\n     let def_id = instance.def_id();\n     let recursion_depth = recursion_depths.get(&def_id).cloned().unwrap_or(0);\n@@ -539,7 +549,7 @@ fn check_recursion_limit<'tcx>(\n     // Code that needs to instantiate the same function recursively\n     // more than the recursion limit is assumed to be causing an\n     // infinite expansion.\n-    if !tcx.sess.recursion_limit().value_within_limit(adjusted_recursion_depth) {\n+    if !recursion_limit.value_within_limit(adjusted_recursion_depth) {\n         let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance, 32, 32);\n         let error = format!(\"reached the recursion limit while instantiating `{}`\", shrunk);\n         let mut err = tcx.sess.struct_span_fatal(span, &error);\n@@ -577,7 +587,7 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) {\n     // which means that rustc basically hangs.\n     //\n     // Bail out in these cases to avoid that bad user experience.\n-    if !tcx.sess.type_length_limit().value_within_limit(type_length) {\n+    if !tcx.type_length_limit().value_within_limit(type_length) {\n         let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance, 32, 32);\n         let msg = format!(\"reached the type-length limit while instantiating `{}`\", shrunk);\n         let mut diag = tcx.sess.struct_span_fatal(tcx.def_span(instance.def_id()), &msg);\n@@ -814,7 +824,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n \n     fn visit_operand(&mut self, operand: &mir::Operand<'tcx>, location: Location) {\n         self.super_operand(operand, location);\n-        let limit = self.tcx.sess.move_size_limit();\n+        let limit = self.tcx.move_size_limit().0;\n         if limit == 0 {\n             return;\n         }"}, {"sha": "c9eafafff57cd2f6f76f758dfa2d34faa483acf3", "filename": "compiler/rustc_mir/src/transform/inline/cycle.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline%2Fcycle.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -5,6 +5,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::mir::TerminatorKind;\n use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{self, subst::SubstsRef, InstanceDef, TyCtxt};\n+use rustc_session::Limit;\n \n // FIXME: check whether it is cheaper to precompute the entire call graph instead of invoking\n // this query riddiculously often.\n@@ -30,7 +31,7 @@ crate fn mir_callgraph_reachable(\n     );\n     #[instrument(\n         level = \"debug\",\n-        skip(tcx, param_env, target, stack, seen, recursion_limiter, caller)\n+        skip(tcx, param_env, target, stack, seen, recursion_limiter, caller, recursion_limit)\n     )]\n     fn process(\n         tcx: TyCtxt<'tcx>,\n@@ -40,6 +41,7 @@ crate fn mir_callgraph_reachable(\n         stack: &mut Vec<ty::Instance<'tcx>>,\n         seen: &mut FxHashSet<ty::Instance<'tcx>>,\n         recursion_limiter: &mut FxHashMap<DefId, usize>,\n+        recursion_limit: Limit,\n     ) -> bool {\n         trace!(%caller);\n         for &(callee, substs) in tcx.mir_inliner_callees(caller.def) {\n@@ -96,11 +98,20 @@ crate fn mir_callgraph_reachable(\n             if seen.insert(callee) {\n                 let recursion = recursion_limiter.entry(callee.def_id()).or_default();\n                 trace!(?callee, recursion = *recursion);\n-                if tcx.sess.recursion_limit().value_within_limit(*recursion) {\n+                if recursion_limit.value_within_limit(*recursion) {\n                     *recursion += 1;\n                     stack.push(callee);\n                     let found_recursion = ensure_sufficient_stack(|| {\n-                        process(tcx, param_env, callee, target, stack, seen, recursion_limiter)\n+                        process(\n+                            tcx,\n+                            param_env,\n+                            callee,\n+                            target,\n+                            stack,\n+                            seen,\n+                            recursion_limiter,\n+                            recursion_limit,\n+                        )\n                     });\n                     if found_recursion {\n                         return true;\n@@ -122,6 +133,7 @@ crate fn mir_callgraph_reachable(\n         &mut Vec::new(),\n         &mut FxHashSet::default(),\n         &mut FxHashMap::default(),\n+        tcx.recursion_limit(),\n     )\n }\n "}, {"sha": "9a82ae3fc109080d4ae4c652fdd353c81ae7ce49", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -24,3 +24,8 @@ pub use session::*;\n pub mod output;\n \n pub use getopts;\n+\n+/// Requirements for a `StableHashingContext` to be used in this crate.\n+/// This is a hack to allow using the `HashStable_Generic` derive macro\n+/// instead of implementing everything in `rustc_middle`.\n+pub trait HashStableContext {}"}, {"sha": "70dddfb67046ada69f84d444ca016166e1f0f08c", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 16, "deletions": 38, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -22,6 +22,7 @@ use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_lint_defs::FutureBreakage;\n+use rustc_macros::HashStable_Generic;\n pub use rustc_span::crate_disambiguator::CrateDisambiguator;\n use rustc_span::source_map::{FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n use rustc_span::{edition::Edition, RealFileName};\n@@ -66,7 +67,7 @@ pub enum CtfeBacktrace {\n \n /// New-type wrapper around `usize` for representing limits. Ensures that comparisons against\n /// limits are consistent throughout the compiler.\n-#[derive(Clone, Copy, Debug)]\n+#[derive(Clone, Copy, Debug, HashStable_Generic)]\n pub struct Limit(pub usize);\n \n impl Limit {\n@@ -111,6 +112,20 @@ impl Mul<usize> for Limit {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, HashStable_Generic)]\n+pub struct Limits {\n+    /// The maximum recursion limit for potentially infinitely recursive\n+    /// operations such as auto-dereference and monomorphization.\n+    pub recursion_limit: Limit,\n+    /// The size at which the `large_assignments` lint starts\n+    /// being emitted.\n+    pub move_size_limit: Limit,\n+    /// The maximum length of types during monomorphization.\n+    pub type_length_limit: Limit,\n+    /// The maximum blocks a const expression can evaluate.\n+    pub const_eval_limit: Limit,\n+}\n+\n /// Represents the data associated with a compilation\n /// session for a single crate.\n pub struct Session {\n@@ -144,20 +159,6 @@ pub struct Session {\n \n     lint_store: OnceCell<Lrc<dyn SessionLintStore>>,\n \n-    /// The maximum recursion limit for potentially infinitely recursive\n-    /// operations such as auto-dereference and monomorphization.\n-    pub recursion_limit: OnceCell<Limit>,\n-\n-    /// The size at which the `large_assignments` lint starts\n-    /// being emitted.\n-    pub move_size_limit: OnceCell<usize>,\n-\n-    /// The maximum length of types during monomorphization.\n-    pub type_length_limit: OnceCell<Limit>,\n-\n-    /// The maximum blocks a const expression can evaluate.\n-    pub const_eval_limit: OnceCell<Limit>,\n-\n     incr_comp_session: OneThread<RefCell<IncrCompSession>>,\n     /// Used for incremental compilation tests. Will only be populated if\n     /// `-Zquery-dep-graph` is specified.\n@@ -347,25 +348,6 @@ impl Session {\n         self.crate_types.set(crate_types).expect(\"`crate_types` was initialized twice\")\n     }\n \n-    #[inline]\n-    pub fn recursion_limit(&self) -> Limit {\n-        self.recursion_limit.get().copied().unwrap()\n-    }\n-\n-    #[inline]\n-    pub fn move_size_limit(&self) -> usize {\n-        self.move_size_limit.get().copied().unwrap()\n-    }\n-\n-    #[inline]\n-    pub fn type_length_limit(&self) -> Limit {\n-        self.type_length_limit.get().copied().unwrap()\n-    }\n-\n-    pub fn const_eval_limit(&self) -> Limit {\n-        self.const_eval_limit.get().copied().unwrap()\n-    }\n-\n     pub fn struct_span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n@@ -1391,10 +1373,6 @@ pub fn build_session(\n         crate_disambiguator: OnceCell::new(),\n         features: OnceCell::new(),\n         lint_store: OnceCell::new(),\n-        recursion_limit: OnceCell::new(),\n-        move_size_limit: OnceCell::new(),\n-        type_length_limit: OnceCell::new(),\n-        const_eval_limit: OnceCell::new(),\n         incr_comp_session: OneThread::new(RefCell::new(IncrCompSession::NotInitialized)),\n         cgu_reuse_tracker,\n         prof,"}, {"sha": "969962e55b0df3e4fb963572e1e3e8b06b321da2", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'tcx> Iterator for Autoderef<'a, 'tcx> {\n         }\n \n         // If we have reached the recursion limit, error gracefully.\n-        if !tcx.sess.recursion_limit().value_within_limit(self.state.steps.len()) {\n+        if !tcx.recursion_limit().value_within_limit(self.state.steps.len()) {\n             if !self.silence_errors {\n                 report_autoderef_recursion_limit_error(tcx, self.span, self.state.cur_ty);\n             }\n@@ -217,7 +217,7 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n \n pub fn report_autoderef_recursion_limit_error<'tcx>(tcx: TyCtxt<'tcx>, span: Span, ty: Ty<'tcx>) {\n     // We've reached the recursion limit, error gracefully.\n-    let suggested_limit = tcx.sess.recursion_limit() * 2;\n+    let suggested_limit = tcx.recursion_limit() * 2;\n     let msg = format!(\"reached the recursion limit while auto-dereferencing `{:?}`\", ty);\n     let error_id = (DiagnosticMessageId::ErrorId(55), Some(span), msg);\n     let fresh = tcx.sess.one_time_diagnostics.borrow_mut().insert(error_id);"}, {"sha": "9bc3d398f72906482aef6dac3af4d4976517da06", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -2310,7 +2310,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     }\n \n     fn suggest_new_overflow_limit(&self, err: &mut DiagnosticBuilder<'_>) {\n-        let current_limit = self.tcx.sess.recursion_limit();\n+        let current_limit = self.tcx.recursion_limit();\n         let suggested_limit = current_limit * 2;\n         err.help(&format!(\n             \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate (`{}`)\","}, {"sha": "0e685205069cb7cd7cd722706378973a67e3e3a8", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -344,7 +344,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                     Reveal::UserFacing => ty,\n \n                     Reveal::All => {\n-                        let recursion_limit = self.tcx().sess.recursion_limit();\n+                        let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.depth) {\n                             let obligation = Obligation::with_depth(\n                                 self.cause.clone(),\n@@ -726,7 +726,7 @@ fn project_type<'cx, 'tcx>(\n ) -> Result<ProjectedTy<'tcx>, ProjectionTyError<'tcx>> {\n     debug!(?obligation, \"project_type\");\n \n-    if !selcx.tcx().sess.recursion_limit().value_within_limit(obligation.recursion_depth) {\n+    if !selcx.tcx().recursion_limit().value_within_limit(obligation.recursion_depth) {\n         debug!(\"project: overflow!\");\n         // This should really be an immediate error, but some existing code\n         // relies on being able to recover from this."}, {"sha": "6673e021bf30897326cb1ab8586ca87ca7f3120c", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -116,7 +116,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                     Reveal::UserFacing => ty,\n \n                     Reveal::All => {\n-                        let recursion_limit = self.tcx().sess.recursion_limit();\n+                        let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.anon_depth) {\n                             let obligation = Obligation::with_depth(\n                                 self.cause.clone(),"}, {"sha": "708688fa8a69d8a203052dece1fad8ee10c38209", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -993,7 +993,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &Obligation<'tcx, T>,\n         error_obligation: &Obligation<'tcx, V>,\n     ) -> Result<(), OverflowError> {\n-        if !self.infcx.tcx.sess.recursion_limit().value_within_limit(obligation.recursion_depth) {\n+        if !self.infcx.tcx.recursion_limit().value_within_limit(obligation.recursion_depth) {\n             match self.query_mode {\n                 TraitQueryMode::Standard => {\n                     self.infcx().report_overflow_error(error_obligation, true);"}, {"sha": "4a41dfe01431eb6f1d3dd4307a4ebe0d043730ff", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -163,7 +163,7 @@ fn dtorck_constraint_for_ty<'tcx>(\n ) -> Result<(), NoSolution> {\n     debug!(\"dtorck_constraint_for_ty({:?}, {:?}, {:?}, {:?})\", span, for_ty, depth, ty);\n \n-    if !tcx.sess.recursion_limit().value_within_limit(depth) {\n+    if !tcx.recursion_limit().value_within_limit(depth) {\n         constraints.overflows.push(ty);\n         return Ok(());\n     }"}, {"sha": "d837af85d58ae912933b202a95a927b043026b97", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -63,7 +63,7 @@ impl<'tcx, F> NeedsDropTypes<'tcx, F> {\n             seen_tys,\n             query_ty: ty,\n             unchecked_tys: vec![(ty, 0)],\n-            recursion_limit: tcx.sess.recursion_limit(),\n+            recursion_limit: tcx.recursion_limit(),\n             adt_components,\n         }\n     }"}, {"sha": "59dae106c0001daad8f03b55468e04e5f3d58e3d", "filename": "src/test/ui/recursion_limit/empty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -2,5 +2,7 @@\n \n #![recursion_limit = \"\"] //~ ERROR `limit` must be a non-negative integer\n                          //~| `limit` must be a non-negative integer\n+                         //~| ERROR `limit` must be a non-negative integer\n+                         //~| `limit` must be a non-negative integer\n \n fn main() {}"}, {"sha": "cb5c0c35a5ebf624be1592514d3dbd35c80afa2d", "filename": "src/test/ui/recursion_limit/empty.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.stderr?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -6,5 +6,13 @@ LL | #![recursion_limit = \"\"]\n    |                      |\n    |                      `limit` must be a non-negative integer\n \n-error: aborting due to previous error\n+error: `limit` must be a non-negative integer\n+  --> $DIR/empty.rs:3:1\n+   |\n+LL | #![recursion_limit = \"\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^--^\n+   |                      |\n+   |                      `limit` must be a non-negative integer\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "03df3e7a92713502cbad66fcce24333ef1ff1677", "filename": "src/test/ui/recursion_limit/invalid_digit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -2,5 +2,6 @@\n \n #![recursion_limit = \"-100\"] //~ ERROR `limit` must be a non-negative integer\n                              //~| not a valid integer\n-\n+                             //~| ERROR `limit` must be a non-negative integer\n+                             //~| not a valid integer\n fn main() {}"}, {"sha": "4dc93ad5f67b38a089c27b2f2063448e1a667636", "filename": "src/test/ui/recursion_limit/invalid_digit.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.stderr?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -6,5 +6,13 @@ LL | #![recursion_limit = \"-100\"]\n    |                      |\n    |                      not a valid integer\n \n-error: aborting due to previous error\n+error: `limit` must be a non-negative integer\n+  --> $DIR/invalid_digit.rs:3:1\n+   |\n+LL | #![recursion_limit = \"-100\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^------^\n+   |                      |\n+   |                      not a valid integer\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "c733ba6b93ce55f943c9237a9426c5772271b49c", "filename": "src/test/ui/recursion_limit/overflow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.rs?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -3,5 +3,7 @@\n #![recursion_limit = \"999999999999999999999999\"]\n //~^ ERROR `limit` must be a non-negative integer\n //~| `limit` is too large\n+//~| ERROR `limit` must be a non-negative integer\n+//~| `limit` is too large\n \n fn main() {}"}, {"sha": "2f622d28b45a151f9ddeaa3ef2948d3e31e4d8dc", "filename": "src/test/ui/recursion_limit/overflow.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/969a6c2481c41cea793708f7fdd2f96a3397143f/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/969a6c2481c41cea793708f7fdd2f96a3397143f/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.stderr?ref=969a6c2481c41cea793708f7fdd2f96a3397143f", "patch": "@@ -6,5 +6,13 @@ LL | #![recursion_limit = \"999999999999999999999999\"]\n    |                      |\n    |                      `limit` is too large\n \n-error: aborting due to previous error\n+error: `limit` must be a non-negative integer\n+  --> $DIR/overflow.rs:3:1\n+   |\n+LL | #![recursion_limit = \"999999999999999999999999\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^--------------------------^\n+   |                      |\n+   |                      `limit` is too large\n+\n+error: aborting due to 2 previous errors\n "}]}