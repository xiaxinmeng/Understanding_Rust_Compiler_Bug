{"sha": "03d8be08967e3fbc358bc9fe9fad9a06ddabb17f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZDhiZTA4OTY3ZTNmYmMzNThiYzlmZTlmYWQ5YTA2ZGRhYmIxN2Y=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-27T01:27:55Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-27T13:58:29Z"}, "message": "Separate `private_intra_doc_links` and `broken_intra_doc_links` into separate lints\n\nThis is not ideal because it means `deny(broken_intra_doc_links)` will\nno longer `deny(private_intra_doc_links)`. However, it can't be fixed\nwith a new lint group, because `broken` is already in the `rustdoc` lint\ngroup; there would need to be a way to nest groups somehow.\n\nThis also removes the early `return` so that the link will be generated\neven though it gives a warning.", "tree": {"sha": "e3c5a9521880e41e7aed5455b4af8c1347919168", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3c5a9521880e41e7aed5455b4af8c1347919168"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f", "html_url": "https://github.com/rust-lang/rust/commit/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8363295d555494bbaa119eba8b16a3057e6728c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8363295d555494bbaa119eba8b16a3057e6728c", "html_url": "https://github.com/rust-lang/rust/commit/b8363295d555494bbaa119eba8b16a3057e6728c"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "33caedfc198260f846c51c3f6fbabe54d69ee932", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=03d8be08967e3fbc358bc9fe9fad9a06ddabb17f", "patch": "@@ -305,6 +305,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n     add_lint_group!(\n         \"rustdoc\",\n         BROKEN_INTRA_DOC_LINKS,\n+        PRIVATE_INTRA_DOC_LINKS,\n         INVALID_CODEBLOCK_ATTRIBUTES,\n         MISSING_DOC_CODE_EXAMPLES,\n         PRIVATE_DOC_TESTS"}, {"sha": "8c3218b8e806a38fa0039b626c381df8e273b4a6", "filename": "compiler/rustc_session/src/lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs?ref=03d8be08967e3fbc358bc9fe9fad9a06ddabb17f", "patch": "@@ -1826,6 +1826,17 @@ declare_lint! {\n     \"failures in resolving intra-doc link targets\"\n }\n \n+declare_lint! {\n+    /// This is a subset of `broken_intra_doc_links` that warns when linking from\n+    /// a public item to a private one. This is a `rustdoc` only lint, see the\n+    /// documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#broken_intra_doc_links\n+    pub PRIVATE_INTRA_DOC_LINKS,\n+    Warn,\n+    \"linking from a public item to a private one\"\n+}\n+\n declare_lint! {\n     /// The `invalid_codeblock_attributes` lint detects code block attributes\n     /// in documentation examples that have potentially mis-typed values. This"}, {"sha": "cd6a7feb18029a1ae6b4c9148138a9f0fc86a849", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=03d8be08967e3fbc358bc9fe9fad9a06ddabb17f", "patch": "@@ -11,7 +11,10 @@ use rustc_hir::def::{\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n use rustc_resolve::ParentScope;\n-use rustc_session::lint;\n+use rustc_session::lint::{\n+    builtin::{BROKEN_INTRA_DOC_LINKS, PRIVATE_INTRA_DOC_LINKS},\n+    Lint,\n+};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::Ident;\n use rustc_span::symbol::Symbol;\n@@ -988,7 +991,7 @@ impl LinkCollector<'_, '_> {\n         let report_mismatch = |specified: Disambiguator, resolved: Disambiguator| {\n             // The resolved item did not match the disambiguator; give a better error than 'not found'\n             let msg = format!(\"incompatible link kind for `{}`\", path_str);\n-            report_diagnostic(cx, &msg, &item, dox, &link_range, |diag, sp| {\n+            let callback = |diag: &mut DiagnosticBuilder<'_>, sp| {\n                 let note = format!(\n                     \"this link resolved to {} {}, which is not {} {}\",\n                     resolved.article(),\n@@ -998,7 +1001,8 @@ impl LinkCollector<'_, '_> {\n                 );\n                 diag.note(&note);\n                 suggest_disambiguator(resolved, diag, path_str, dox, sp, &link_range);\n-            });\n+            };\n+            report_diagnostic(cx, BROKEN_INTRA_DOC_LINKS, &msg, &item, dox, &link_range, callback);\n         };\n         if let Res::PrimTy(..) = res {\n             match disambiguator {\n@@ -1055,7 +1059,6 @@ impl LinkCollector<'_, '_> {\n                     && !self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_dst)\n                 {\n                     privacy_error(cx, &item, &path_str, dox, link_range);\n-                    return;\n                 }\n             }\n             let id = register_res(cx, res);\n@@ -1417,6 +1420,7 @@ impl Suggestion {\n /// to it.\n fn report_diagnostic(\n     cx: &DocContext<'_>,\n+    lint: &'static Lint,\n     msg: &str,\n     item: &Item,\n     dox: &str,\n@@ -1435,7 +1439,7 @@ fn report_diagnostic(\n     let attrs = &item.attrs;\n     let sp = span_of_attrs(attrs).unwrap_or(item.source.span());\n \n-    cx.tcx.struct_span_lint_hir(lint::builtin::BROKEN_INTRA_DOC_LINKS, hir_id, sp, |lint| {\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |lint| {\n         let mut diag = lint.build(msg);\n \n         let span = link_range\n@@ -1482,6 +1486,7 @@ fn resolution_failure(\n ) {\n     report_diagnostic(\n         collector.cx,\n+        BROKEN_INTRA_DOC_LINKS,\n         &format!(\"unresolved link to `{}`\", path_str),\n         item,\n         dox,\n@@ -1695,7 +1700,7 @@ fn anchor_failure(\n         ),\n     };\n \n-    report_diagnostic(cx, &msg, item, dox, &link_range, |diag, sp| {\n+    report_diagnostic(cx, BROKEN_INTRA_DOC_LINKS, &msg, item, dox, &link_range, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"contains invalid anchor\");\n         }\n@@ -1734,7 +1739,7 @@ fn ambiguity_error(\n         }\n     }\n \n-    report_diagnostic(cx, &msg, item, dox, &link_range, |diag, sp| {\n+    report_diagnostic(cx, BROKEN_INTRA_DOC_LINKS, &msg, item, dox, &link_range, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"ambiguous link\");\n         } else {\n@@ -1784,7 +1789,7 @@ fn privacy_error(\n     let msg =\n         format!(\"public documentation for `{}` links to private item `{}`\", item_name, path_str);\n \n-    report_diagnostic(cx, &msg, item, dox, &link_range, |diag, sp| {\n+    report_diagnostic(cx, PRIVATE_INTRA_DOC_LINKS, &msg, item, dox, &link_range, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"this item is private\");\n         }"}, {"sha": "eeef24b479747422b5a3cf037faff9643faf70d8", "filename": "src/test/rustdoc-ui/intra-links-private.private.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.private.stderr?ref=03d8be08967e3fbc358bc9fe9fad9a06ddabb17f", "patch": "@@ -4,7 +4,7 @@ warning: public documentation for `DocMe` links to private item `DontDocMe`\n LL | /// docs [DontDocMe]\n    |           ^^^^^^^^^ this item is private\n    |\n-   = note: `#[warn(broken_intra_doc_links)]` on by default\n+   = note: `#[warn(private_intra_doc_links)]` on by default\n    = note: this link resolves only because you passed `--document-private-items`, but will break without\n \n warning: 1 warning emitted"}, {"sha": "3f7b17586f19e72338619ce608617c7f985c61b3", "filename": "src/test/rustdoc-ui/intra-links-private.public.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr?ref=03d8be08967e3fbc358bc9fe9fad9a06ddabb17f", "patch": "@@ -4,7 +4,7 @@ warning: public documentation for `DocMe` links to private item `DontDocMe`\n LL | /// docs [DontDocMe]\n    |           ^^^^^^^^^ this item is private\n    |\n-   = note: `#[warn(broken_intra_doc_links)]` on by default\n+   = note: `#[warn(private_intra_doc_links)]` on by default\n    = note: this link will resolve properly if you pass `--document-private-items`\n \n warning: 1 warning emitted"}, {"sha": "b802d7e12523a1e1c0b0a505aedaa1327af793a9", "filename": "src/test/rustdoc-ui/issue-74134.private.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f/src%2Ftest%2Frustdoc-ui%2Fissue-74134.private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f/src%2Ftest%2Frustdoc-ui%2Fissue-74134.private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-74134.private.stderr?ref=03d8be08967e3fbc358bc9fe9fad9a06ddabb17f", "patch": "@@ -4,7 +4,7 @@ warning: public documentation for `public_item` links to private item `PrivateTy\n LL |     /// [`PrivateType`]\n    |          ^^^^^^^^^^^^^ this item is private\n    |\n-   = note: `#[warn(broken_intra_doc_links)]` on by default\n+   = note: `#[warn(private_intra_doc_links)]` on by default\n    = note: this link resolves only because you passed `--document-private-items`, but will break without\n \n warning: 1 warning emitted"}, {"sha": "40aa2ece1a373e330a41d05f45b97ee86b7d4ac5", "filename": "src/test/rustdoc-ui/issue-74134.public.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr?ref=03d8be08967e3fbc358bc9fe9fad9a06ddabb17f", "patch": "@@ -4,7 +4,7 @@ warning: public documentation for `public_item` links to private item `PrivateTy\n LL |     /// [`PrivateType`]\n    |          ^^^^^^^^^^^^^ this item is private\n    |\n-   = note: `#[warn(broken_intra_doc_links)]` on by default\n+   = note: `#[warn(private_intra_doc_links)]` on by default\n    = note: this link will resolve properly if you pass `--document-private-items`\n \n warning: 1 warning emitted"}, {"sha": "f86ca44403d93e42ae9b752d7bb3fdc588263ded", "filename": "src/test/rustdoc/intra-doc-link-private.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f/src%2Ftest%2Frustdoc%2Fintra-doc-link-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03d8be08967e3fbc358bc9fe9fad9a06ddabb17f/src%2Ftest%2Frustdoc%2Fintra-doc-link-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-link-private.rs?ref=03d8be08967e3fbc358bc9fe9fad9a06ddabb17f", "patch": "@@ -0,0 +1,6 @@\n+#![crate_name = \"private\"]\n+// compile-flags: --document-private-items\n+/// docs [DontDocMe]\n+// @has private/struct.DocMe.html '//*a[@href=\"../private/struct.DontDocMe.html\"]' 'DontDocMe'\n+pub struct DocMe;\n+struct DontDocMe;"}]}