{"sha": "cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmN2Q0YTJhMjQzY2FjMTk3NWI5YjI4ZDQ3ZWQ5MWE2YmQwMWIzNGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-23T21:48:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-23T21:48:10Z"}, "message": "Simplify", "tree": {"sha": "0a1730599ff089623b3bb1946fc061f124f2e410", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a1730599ff089623b3bb1946fc061f124f2e410"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f", "html_url": "https://github.com/rust-lang/rust/commit/cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd64a155e9dd24fd2a81f8c634fdb396632de472", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd64a155e9dd24fd2a81f8c634fdb396632de472", "html_url": "https://github.com/rust-lang/rust/commit/dd64a155e9dd24fd2a81f8c634fdb396632de472"}], "stats": {"total": 102, "additions": 63, "deletions": 39}, "files": [{"sha": "2cec5b3e336dd2d741f64ec4b9572486a98f0a1e", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f", "patch": "@@ -41,6 +41,11 @@ Grammar(\n         [\">=\", \"GTEQ\"],\n         [\"+=\", \"PLUSEQ\"],\n         [\"-=\", \"MINUSEQ\"],\n+        [\"|=\", \"PIPEEQ\"],\n+        [\"&=\", \"AMPEQ\"],\n+        [\"^=\", \"CARETEQ\"],\n+        [\"/=\", \"SLASHEQ\"],\n+        [\"*=\", \"STAREQ\"],\n         [\"&&\", \"AMPAMP\"],\n         [\"||\", \"PIPEPIPE\"],\n         [\"<<\", \"SHL\"],"}, {"sha": "3da53969945b7f5c300a73afbe3914a2d1593083", "filename": "crates/libsyntax2/src/grammar/expressions/mod.rs", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fmod.rs?ref=cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f", "patch": "@@ -45,35 +45,33 @@ enum Op {\n }\n \n fn current_op(p: &Parser) -> (u8, Op) {\n-    if p.at_compound2(PLUS, EQ) {\n-        return (1, Op::Composite(PLUSEQ, 2));\n-    }\n-    if p.at_compound2(MINUS, EQ) {\n-        return (1, Op::Composite(MINUSEQ, 2));\n-    }\n-    if p.at_compound3(L_ANGLE, L_ANGLE, EQ) {\n-        return (1, Op::Composite(SHLEQ, 3));\n-    }\n-    if p.at_compound3(R_ANGLE, R_ANGLE, EQ) {\n-        return (1, Op::Composite(SHREQ, 3));\n-    }\n-    if p.at_compound2(PIPE, PIPE) {\n-        return (3, Op::Composite(PIPEPIPE, 2));\n-    }\n-    if p.at_compound2(AMP, AMP) {\n-        return (4, Op::Composite(AMPAMP, 2));\n-    }\n-    if p.at_compound2(L_ANGLE, EQ) {\n-        return (5, Op::Composite(LTEQ, 2));\n-    }\n-    if p.at_compound2(R_ANGLE, EQ) {\n-        return (5, Op::Composite(GTEQ, 2));\n-    }\n-    if p.at_compound2(L_ANGLE, L_ANGLE) {\n-        return (9, Op::Composite(SHL, 2));\n+    if let Some(t) = p.next3() {\n+        match t {\n+            (L_ANGLE, L_ANGLE, EQ) =>\n+                return (1, Op::Composite(SHLEQ, 3)),\n+            (R_ANGLE, R_ANGLE, EQ) =>\n+                return (1, Op::Composite(SHREQ, 3)),\n+            _ => (),\n+        }\n     }\n-    if p.at_compound2(R_ANGLE, R_ANGLE) {\n-        return (9, Op::Composite(SHR, 2));\n+\n+    if let Some(t) = p.next2() {\n+        match t {\n+            (PLUS, EQ) => return (1, Op::Composite(PLUSEQ, 2)),\n+            (MINUS, EQ) => return (1, Op::Composite(MINUSEQ, 2)),\n+            (STAR, EQ) => return (1, Op::Composite(STAREQ, 2)),\n+            (SLASH, EQ) => return (1, Op::Composite(SLASHEQ, 2)),\n+            (PIPE, EQ) => return (1, Op::Composite(PIPEEQ, 2)),\n+            (AMP, EQ) => return (1, Op::Composite(AMPEQ, 2)),\n+            (CARET, EQ) => return (1, Op::Composite(CARETEQ, 2)),\n+            (PIPE, PIPE) => return (3, Op::Composite(PIPEPIPE, 2)),\n+            (AMP, AMP) => return (4, Op::Composite(AMPAMP, 2)),\n+            (L_ANGLE, EQ) => return (5, Op::Composite(LTEQ, 2)),\n+            (R_ANGLE, EQ) => return (5, Op::Composite(GTEQ, 2)),\n+            (L_ANGLE, L_ANGLE) => return (9, Op::Composite(SHL, 2)),\n+            (R_ANGLE, R_ANGLE) => return (9, Op::Composite(SHR, 2)),\n+            _ => (),\n+        }\n     }\n \n     let bp = match p.current() {"}, {"sha": "bb34fe97328fca143803162c68cd62d99b2602e0", "filename": "crates/libsyntax2/src/parser_api.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f/crates%2Flibsyntax2%2Fsrc%2Fparser_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f/crates%2Flibsyntax2%2Fsrc%2Fparser_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fparser_api.rs?ref=cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f", "patch": "@@ -68,12 +68,12 @@ impl<'t> Parser<'t> {\n         self.current() == kind\n     }\n \n-    pub(crate) fn at_compound2(&self, c1: SyntaxKind, c2: SyntaxKind) -> bool {\n-        self.0.at_compound2(c1, c2)\n+    pub(crate) fn next2(&self) -> Option<(SyntaxKind, SyntaxKind)> {\n+        self.0.next2()\n     }\n \n-    pub(crate) fn at_compound3(&self, c1: SyntaxKind, c2: SyntaxKind, c3: SyntaxKind) -> bool {\n-        self.0.at_compound3(c1, c2, c3)\n+    pub(crate) fn next3(&self) -> Option<(SyntaxKind, SyntaxKind, SyntaxKind)> {\n+        self.0.next3()\n     }\n \n     /// Checks if the current token is contextual keyword with text `t`."}, {"sha": "14cceced5c7cd7f46225765d8b60c815aaca6bdc", "filename": "crates/libsyntax2/src/parser_impl/mod.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f/crates%2Flibsyntax2%2Fsrc%2Fparser_impl%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f/crates%2Flibsyntax2%2Fsrc%2Fparser_impl%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fparser_impl%2Fmod.rs?ref=cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f", "patch": "@@ -65,15 +65,26 @@ impl<'t> ParserImpl<'t> {\n         self.events\n     }\n \n-    pub(super) fn at_compound2(&self, c1: SyntaxKind, c2: SyntaxKind) -> bool {\n-        self.inp.kind(self.pos) == c1 && self.inp.kind(self.pos + 1) == c2\n-            && self.inp.start(self.pos + 1) == self.inp.start(self.pos) + self.inp.len(self.pos)\n+    pub(super) fn next2(&self) -> Option<(SyntaxKind, SyntaxKind)> {\n+        let c1 = self.inp.kind(self.pos);\n+        let c2 = self.inp.kind(self.pos + 1);\n+        if self.inp.start(self.pos + 1) == self.inp.start(self.pos) + self.inp.len(self.pos) {\n+            Some((c1, c2))\n+        } else {\n+            None\n+        }\n     }\n \n-    pub(super) fn at_compound3(&self, c1: SyntaxKind, c2: SyntaxKind, c3: SyntaxKind) -> bool {\n-        self.inp.kind(self.pos) == c1 && self.inp.kind(self.pos + 1) == c2 && self.inp.kind(self.pos + 2) == c3\n-            && self.inp.start(self.pos + 1) == self.inp.start(self.pos) + self.inp.len(self.pos)\n-            && self.inp.start(self.pos + 2) == self.inp.start(self.pos + 1) + self.inp.len(self.pos + 1)\n+    pub(super) fn next3(&self) -> Option<(SyntaxKind, SyntaxKind, SyntaxKind)> {\n+        let c1 = self.inp.kind(self.pos);\n+        let c2 = self.inp.kind(self.pos + 1);\n+        let c3 = self.inp.kind(self.pos + 2);\n+        if self.inp.start(self.pos + 1) == self.inp.start(self.pos) + self.inp.len(self.pos)\n+           && self.inp.start(self.pos + 2) == self.inp.start(self.pos + 1) + self.inp.len(self.pos + 1){\n+            Some((c1, c2, c3))\n+        } else {\n+            None\n+        }\n     }\n \n     pub(super) fn nth(&self, n: u32) -> SyntaxKind {"}, {"sha": "fc387c93d4e6bba30f72644bfa8a2607e9a9a305", "filename": "crates/libsyntax2/src/syntax_kinds/generated.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs?ref=cf7d4a2a243cac1975b9b28d47ed91a6bd01b34f", "patch": "@@ -50,6 +50,11 @@ pub enum SyntaxKind {\n     GTEQ,\n     PLUSEQ,\n     MINUSEQ,\n+    PIPEEQ,\n+    AMPEQ,\n+    CARETEQ,\n+    SLASHEQ,\n+    STAREQ,\n     AMPAMP,\n     PIPEPIPE,\n     SHL,\n@@ -288,6 +293,11 @@ impl SyntaxKind {\n             GTEQ => &SyntaxInfo { name: \"GTEQ\" },\n             PLUSEQ => &SyntaxInfo { name: \"PLUSEQ\" },\n             MINUSEQ => &SyntaxInfo { name: \"MINUSEQ\" },\n+            PIPEEQ => &SyntaxInfo { name: \"PIPEEQ\" },\n+            AMPEQ => &SyntaxInfo { name: \"AMPEQ\" },\n+            CARETEQ => &SyntaxInfo { name: \"CARETEQ\" },\n+            SLASHEQ => &SyntaxInfo { name: \"SLASHEQ\" },\n+            STAREQ => &SyntaxInfo { name: \"STAREQ\" },\n             AMPAMP => &SyntaxInfo { name: \"AMPAMP\" },\n             PIPEPIPE => &SyntaxInfo { name: \"PIPEPIPE\" },\n             SHL => &SyntaxInfo { name: \"SHL\" },"}]}