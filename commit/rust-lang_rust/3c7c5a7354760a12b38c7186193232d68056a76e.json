{"sha": "3c7c5a7354760a12b38c7186193232d68056a76e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjN2M1YTczNTQ3NjBhMTJiMzhjNzE4NjE5MzIzMmQ2ODA1NmE3NmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T16:37:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T16:37:22Z"}, "message": "move presentaion completion to presentation", "tree": {"sha": "304b7e193c12a3d33ef8347608912ea3c767b637", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/304b7e193c12a3d33ef8347608912ea3c767b637"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c7c5a7354760a12b38c7186193232d68056a76e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7c5a7354760a12b38c7186193232d68056a76e", "html_url": "https://github.com/rust-lang/rust/commit/3c7c5a7354760a12b38c7186193232d68056a76e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c7c5a7354760a12b38c7186193232d68056a76e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b04cadc02c72055ed97eb5b3c1318f1c3b5602dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b04cadc02c72055ed97eb5b3c1318f1c3b5602dc", "html_url": "https://github.com/rust-lang/rust/commit/b04cadc02c72055ed97eb5b3c1318f1c3b5602dc"}], "stats": {"total": 160, "additions": 80, "deletions": 80}, "files": [{"sha": "91e32b3c82e09cdc4c336450ace044919f8f979f", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/3c7c5a7354760a12b38c7186193232d68056a76e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7c5a7354760a12b38c7186193232d68056a76e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=3c7c5a7354760a12b38c7186193232d68056a76e", "patch": "@@ -411,83 +411,3 @@ pub(crate) fn check_completion(test_name: &str, code: &str, kind: CompletionKind\n     let kind_completions = do_completion(code, kind);\n     assert_debug_snapshot_matches!(test_name, kind_completions);\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use test_utils::covers;\n-\n-    use super::*;\n-\n-    fn check_reference_completion(code: &str, expected_completions: &str) {\n-        check_completion(code, expected_completions, CompletionKind::Reference);\n-    }\n-\n-    #[test]\n-    fn inserts_parens_for_function_calls() {\n-        covers!(inserts_parens_for_function_calls);\n-        check_reference_completion(\n-            \"inserts_parens_for_function_calls1\",\n-            r\"\n-            fn no_args() {}\n-            fn main() { no_<|> }\n-            \",\n-        );\n-        check_reference_completion(\n-            \"inserts_parens_for_function_calls2\",\n-            r\"\n-            fn with_args(x: i32, y: String) {}\n-            fn main() { with_<|> }\n-            \",\n-        );\n-        check_reference_completion(\n-            \"inserts_parens_for_function_calls3\",\n-            r\"\n-            struct S {}\n-            impl S {\n-                fn foo(&self) {}\n-            }\n-            fn bar(s: &S) {\n-                s.f<|>\n-            }\n-            \",\n-        )\n-    }\n-\n-    #[test]\n-    fn dont_render_function_parens_in_use_item() {\n-        check_reference_completion(\n-            \"dont_render_function_parens_in_use_item\",\n-            \"\n-            //- /lib.rs\n-            mod m { pub fn foo() {} }\n-            use crate::m::f<|>;\n-            \",\n-        )\n-    }\n-\n-    #[test]\n-    fn dont_render_function_parens_if_already_call() {\n-        check_reference_completion(\n-            \"dont_render_function_parens_if_already_call\",\n-            \"\n-            //- /lib.rs\n-            fn frobnicate() {}\n-            fn main() {\n-                frob<|>();\n-            }\n-            \",\n-        );\n-        check_reference_completion(\n-            \"dont_render_function_parens_if_already_call_assoc_fn\",\n-            \"\n-            //- /lib.rs\n-            struct Foo {}\n-            impl Foo { fn new() -> Foo {} }\n-            fn main() {\n-                Foo::ne<|>();\n-            }\n-            \",\n-        )\n-    }\n-\n-}"}, {"sha": "057dbc21a45978cc2ddf373a8e7a8629eabc1aa7", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/3c7c5a7354760a12b38c7186193232d68056a76e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7c5a7354760a12b38c7186193232d68056a76e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=3c7c5a7354760a12b38c7186193232d68056a76e", "patch": "@@ -70,3 +70,83 @@ fn function_item_label(ctx: &CompletionContext, function: hir::Function) -> Opti\n     let node = function.source(ctx.db).1;\n     function_label(&node)\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use test_utils::covers;\n+\n+    use crate::completion::{CompletionKind, completion_item::check_completion};\n+\n+    fn check_reference_completion(code: &str, expected_completions: &str) {\n+        check_completion(code, expected_completions, CompletionKind::Reference);\n+    }\n+\n+    #[test]\n+    fn inserts_parens_for_function_calls() {\n+        covers!(inserts_parens_for_function_calls);\n+        check_reference_completion(\n+            \"inserts_parens_for_function_calls1\",\n+            r\"\n+            fn no_args() {}\n+            fn main() { no_<|> }\n+            \",\n+        );\n+        check_reference_completion(\n+            \"inserts_parens_for_function_calls2\",\n+            r\"\n+            fn with_args(x: i32, y: String) {}\n+            fn main() { with_<|> }\n+            \",\n+        );\n+        check_reference_completion(\n+            \"inserts_parens_for_function_calls3\",\n+            r\"\n+            struct S {}\n+            impl S {\n+                fn foo(&self) {}\n+            }\n+            fn bar(s: &S) {\n+                s.f<|>\n+            }\n+            \",\n+        )\n+    }\n+\n+    #[test]\n+    fn dont_render_function_parens_in_use_item() {\n+        check_reference_completion(\n+            \"dont_render_function_parens_in_use_item\",\n+            \"\n+            //- /lib.rs\n+            mod m { pub fn foo() {} }\n+            use crate::m::f<|>;\n+            \",\n+        )\n+    }\n+\n+    #[test]\n+    fn dont_render_function_parens_if_already_call() {\n+        check_reference_completion(\n+            \"dont_render_function_parens_if_already_call\",\n+            \"\n+            //- /lib.rs\n+            fn frobnicate() {}\n+            fn main() {\n+                frob<|>();\n+            }\n+            \",\n+        );\n+        check_reference_completion(\n+            \"dont_render_function_parens_if_already_call_assoc_fn\",\n+            \"\n+            //- /lib.rs\n+            struct Foo {}\n+            impl Foo { fn new() -> Foo {} }\n+            fn main() {\n+                Foo::ne<|>();\n+            }\n+            \",\n+        )\n+    }\n+\n+}"}]}