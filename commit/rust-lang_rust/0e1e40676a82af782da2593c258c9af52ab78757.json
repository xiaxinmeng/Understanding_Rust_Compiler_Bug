{"sha": "0e1e40676a82af782da2593c258c9af52ab78757", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMWU0MDY3NmE4MmFmNzgyZGEyNTkzYzI1OGM5YWY1MmFiNzg3NTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-02T09:48:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-02T09:53:44Z"}, "message": "rename flavor to kind", "tree": {"sha": "335e06b2099a405ee11303e60e4922135762a357", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/335e06b2099a405ee11303e60e4922135762a357"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e1e40676a82af782da2593c258c9af52ab78757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e1e40676a82af782da2593c258c9af52ab78757", "html_url": "https://github.com/rust-lang/rust/commit/0e1e40676a82af782da2593c258c9af52ab78757", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e1e40676a82af782da2593c258c9af52ab78757/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb5001c0a5ddadccd18fe787d89de3d6c3c8147f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb5001c0a5ddadccd18fe787d89de3d6c3c8147f", "html_url": "https://github.com/rust-lang/rust/commit/cb5001c0a5ddadccd18fe787d89de3d6c3c8147f"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "e027eedd9c937cfeb2cbaec7769e565f348f7ab2", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0e1e40676a82af782da2593c258c9af52ab78757/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1e40676a82af782da2593c258c9af52ab78757/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=0e1e40676a82af782da2593c258c9af52ab78757", "patch": "@@ -6,7 +6,7 @@ use std::sync::Arc;\n use ra_arena::{RawId, Arena, impl_arena_id};\n use ra_syntax::{\n     TreeArc,\n-    ast::{self, NameOwner, StructFlavor, TypeAscriptionOwner}\n+    ast::{self, NameOwner, StructKind, TypeAscriptionOwner}\n };\n \n use crate::{\n@@ -47,7 +47,7 @@ pub struct StructData {\n impl StructData {\n     fn new(struct_def: &ast::StructDef) -> StructData {\n         let name = struct_def.name().map(|n| n.as_name());\n-        let variant_data = VariantData::new(struct_def.flavor());\n+        let variant_data = VariantData::new(struct_def.kind());\n         let variant_data = Arc::new(variant_data);\n         StructData { name, variant_data }\n     }\n@@ -94,7 +94,7 @@ impl EnumData {\n         let variants = variants(&*enum_def)\n             .map(|var| EnumVariantData {\n                 name: var.name().map(|it| it.as_name()),\n-                variant_data: Arc::new(VariantData::new(var.flavor())),\n+                variant_data: Arc::new(VariantData::new(var.kind())),\n             })\n             .collect();\n         Arc::new(EnumData { name, variants })\n@@ -143,9 +143,9 @@ impl VariantData {\n }\n \n impl VariantData {\n-    fn new(flavor: StructFlavor) -> Self {\n+    fn new(flavor: StructKind) -> Self {\n         let inner = match flavor {\n-            ast::StructFlavor::Tuple(fl) => {\n+            ast::StructKind::Tuple(fl) => {\n                 let fields = fl\n                     .fields()\n                     .enumerate()\n@@ -156,7 +156,7 @@ impl VariantData {\n                     .collect();\n                 VariantDataInner::Tuple(fields)\n             }\n-            ast::StructFlavor::Named(fl) => {\n+            ast::StructKind::Named(fl) => {\n                 let fields = fl\n                     .fields()\n                     .map(|fd| StructFieldData {\n@@ -166,7 +166,7 @@ impl VariantData {\n                     .collect();\n                 VariantDataInner::Struct(fields)\n             }\n-            ast::StructFlavor::Unit => VariantDataInner::Unit,\n+            ast::StructKind::Unit => VariantDataInner::Unit,\n         };\n         VariantData(inner)\n     }\n@@ -200,27 +200,27 @@ impl StructField {\n         let fields = var_data.fields().unwrap();\n         let ss;\n         let es;\n-        let (file_id, struct_flavor) = match self.parent {\n+        let (file_id, struct_kind) = match self.parent {\n             VariantDef::Struct(s) => {\n                 let (file_id, source) = s.source(db);\n                 ss = source;\n-                (file_id, ss.flavor())\n+                (file_id, ss.kind())\n             }\n             VariantDef::EnumVariant(e) => {\n                 let (file_id, source) = e.source(db);\n                 es = source;\n-                (file_id, es.flavor())\n+                (file_id, es.kind())\n             }\n         };\n \n-        let field_sources = match struct_flavor {\n-            ast::StructFlavor::Tuple(fl) => {\n+        let field_sources = match struct_kind {\n+            ast::StructKind::Tuple(fl) => {\n                 fl.fields().map(|it| FieldSource::Pos(it.to_owned())).collect()\n             }\n-            ast::StructFlavor::Named(fl) => {\n+            ast::StructKind::Named(fl) => {\n                 fl.fields().map(|it| FieldSource::Named(it.to_owned())).collect()\n             }\n-            ast::StructFlavor::Unit => Vec::new(),\n+            ast::StructKind::Unit => Vec::new(),\n         };\n         let field = field_sources\n             .into_iter()"}, {"sha": "f8bd0f7847728258ace86b6987292bed4e4a8e70", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e1e40676a82af782da2593c258c9af52ab78757/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1e40676a82af782da2593c258c9af52ab78757/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=0e1e40676a82af782da2593c258c9af52ab78757", "patch": "@@ -20,12 +20,12 @@ impl FnSignature {\n                     TypeRef::from_ast(type_ref)\n                 } else {\n                     let self_type = TypeRef::Path(Name::self_type().into());\n-                    match self_param.flavor() {\n-                        ast::SelfParamFlavor::Owned => self_type,\n-                        ast::SelfParamFlavor::Ref => {\n+                    match self_param.kind() {\n+                        ast::SelfParamKind::Owned => self_type,\n+                        ast::SelfParamKind::Ref => {\n                             TypeRef::Reference(Box::new(self_type), Mutability::Shared)\n                         }\n-                        ast::SelfParamFlavor::MutRef => {\n+                        ast::SelfParamKind::MutRef => {\n                             TypeRef::Reference(Box::new(self_type), Mutability::Mut)\n                         }\n                     }"}, {"sha": "45012827f45f66a93cc26081dd7bf6790bd2cf4f", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0e1e40676a82af782da2593c258c9af52ab78757/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1e40676a82af782da2593c258c9af52ab78757/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=0e1e40676a82af782da2593c258c9af52ab78757", "patch": "@@ -6,7 +6,7 @@ use rustc_hash::FxHashMap;\n use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n use ra_syntax::{\n     SyntaxNodePtr, AstPtr, AstNode,\n-    ast::{self, LoopBodyOwner, ArgListOwner, NameOwner, LiteralFlavor, TypeAscriptionOwner}\n+    ast::{self, LoopBodyOwner, ArgListOwner, NameOwner, LiteralKind, TypeAscriptionOwner}\n };\n \n use crate::{\n@@ -726,8 +726,8 @@ impl ExprCollector {\n                 self.alloc_expr(Expr::Array { exprs }, syntax_ptr)\n             }\n             ast::ExprKind::Literal(e) => {\n-                let lit = match e.flavor() {\n-                    LiteralFlavor::IntNumber { suffix } => {\n+                let lit = match e.kind() {\n+                    LiteralKind::IntNumber { suffix } => {\n                         let known_name = suffix\n                             .and_then(|it| IntTy::from_suffix(&it).map(UncertainIntTy::Known));\n \n@@ -736,7 +736,7 @@ impl ExprCollector {\n                             known_name.unwrap_or(UncertainIntTy::Unknown),\n                         )\n                     }\n-                    LiteralFlavor::FloatNumber { suffix } => {\n+                    LiteralKind::FloatNumber { suffix } => {\n                         let known_name = suffix\n                             .and_then(|it| FloatTy::from_suffix(&it).map(UncertainFloatTy::Known));\n \n@@ -745,13 +745,13 @@ impl ExprCollector {\n                             known_name.unwrap_or(UncertainFloatTy::Unknown),\n                         )\n                     }\n-                    LiteralFlavor::ByteString => Literal::ByteString(Default::default()),\n-                    LiteralFlavor::String => Literal::String(Default::default()),\n-                    LiteralFlavor::Byte => {\n+                    LiteralKind::ByteString => Literal::ByteString(Default::default()),\n+                    LiteralKind::String => Literal::String(Default::default()),\n+                    LiteralKind::Byte => {\n                         Literal::Int(Default::default(), UncertainIntTy::Known(IntTy::u8()))\n                     }\n-                    LiteralFlavor::Bool => Literal::Bool(Default::default()),\n-                    LiteralFlavor::Char => Literal::Char(Default::default()),\n+                    LiteralKind::Bool => Literal::Bool(Default::default()),\n+                    LiteralKind::Char => Literal::Char(Default::default()),\n                 };\n                 self.alloc_expr(Expr::Literal(lit), syntax_ptr)\n             }"}, {"sha": "dcc71eabed76ed7fdc22f29811cdce10d91482ed", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e1e40676a82af782da2593c258c9af52ab78757/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1e40676a82af782da2593c258c9af52ab78757/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=0e1e40676a82af782da2593c258c9af52ab78757", "patch": "@@ -16,8 +16,8 @@ pub use self::{\n     generated::*,\n     traits::*,\n     tokens::*,\n-    extensions::{PathSegmentKind, StructFlavor, SelfParamFlavor},\n-    expr_extensions::{ElseBranch, PrefixOp, BinOp, LiteralFlavor},\n+    extensions::{PathSegmentKind, StructKind, SelfParamKind},\n+    expr_extensions::{ElseBranch, PrefixOp, BinOp, LiteralKind},\n };\n \n /// The main trait to go from untyped `SyntaxNode`  to a typed ast. The"}, {"sha": "b24f86cecf46f4c3e2b881ad3813ec0a5f6f461c", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0e1e40676a82af782da2593c258c9af52ab78757/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1e40676a82af782da2593c258c9af52ab78757/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=0e1e40676a82af782da2593c258c9af52ab78757", "patch": "@@ -192,7 +192,7 @@ impl ast::BinExpr {\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum LiteralFlavor {\n+pub enum LiteralKind {\n     String,\n     ByteString,\n     Char,\n@@ -210,7 +210,7 @@ impl ast::Literal {\n         }\n     }\n \n-    pub fn flavor(&self) -> LiteralFlavor {\n+    pub fn kind(&self) -> LiteralKind {\n         match self.token().kind() {\n             INT_NUMBER => {\n                 let allowed_suffix_list = [\n@@ -222,7 +222,7 @@ impl ast::Literal {\n                     .iter()\n                     .find(|&s| text.ends_with(s))\n                     .map(|&suf| SmolStr::new(suf));\n-                LiteralFlavor::IntNumber { suffix }\n+                LiteralKind::IntNumber { suffix }\n             }\n             FLOAT_NUMBER => {\n                 let allowed_suffix_list = [\"f64\", \"f32\"];\n@@ -231,13 +231,13 @@ impl ast::Literal {\n                     .iter()\n                     .find(|&s| text.ends_with(s))\n                     .map(|&suf| SmolStr::new(suf));\n-                LiteralFlavor::FloatNumber { suffix: suffix }\n+                LiteralKind::FloatNumber { suffix: suffix }\n             }\n-            STRING | RAW_STRING => LiteralFlavor::String,\n-            TRUE_KW | FALSE_KW => LiteralFlavor::Bool,\n-            BYTE_STRING | RAW_BYTE_STRING => LiteralFlavor::ByteString,\n-            CHAR => LiteralFlavor::Char,\n-            BYTE => LiteralFlavor::Byte,\n+            STRING | RAW_STRING => LiteralKind::String,\n+            TRUE_KW | FALSE_KW => LiteralKind::Bool,\n+            BYTE_STRING | RAW_BYTE_STRING => LiteralKind::ByteString,\n+            CHAR => LiteralKind::Char,\n+            BYTE => LiteralKind::Byte,\n             _ => unreachable!(),\n         }\n     }"}, {"sha": "342581faf7d78a796ecd2ddf75be7c1b476dae1f", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0e1e40676a82af782da2593c258c9af52ab78757/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1e40676a82af782da2593c258c9af52ab78757/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=0e1e40676a82af782da2593c258c9af52ab78757", "patch": "@@ -159,27 +159,27 @@ impl ast::ImplBlock {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n-pub enum StructFlavor<'a> {\n+pub enum StructKind<'a> {\n     Tuple(&'a ast::PosFieldDefList),\n     Named(&'a ast::NamedFieldDefList),\n     Unit,\n }\n \n-impl StructFlavor<'_> {\n-    fn from_node<N: AstNode>(node: &N) -> StructFlavor {\n+impl StructKind<'_> {\n+    fn from_node<N: AstNode>(node: &N) -> StructKind {\n         if let Some(nfdl) = child_opt::<_, ast::NamedFieldDefList>(node) {\n-            StructFlavor::Named(nfdl)\n+            StructKind::Named(nfdl)\n         } else if let Some(pfl) = child_opt::<_, ast::PosFieldDefList>(node) {\n-            StructFlavor::Tuple(pfl)\n+            StructKind::Tuple(pfl)\n         } else {\n-            StructFlavor::Unit\n+            StructKind::Unit\n         }\n     }\n }\n \n impl ast::StructDef {\n-    pub fn flavor(&self) -> StructFlavor {\n-        StructFlavor::from_node(self)\n+    pub fn kind(&self) -> StructKind {\n+        StructKind::from_node(self)\n     }\n }\n \n@@ -191,8 +191,8 @@ impl ast::EnumVariant {\n             .and_then(ast::EnumDef::cast)\n             .expect(\"EnumVariants are always nested in Enums\")\n     }\n-    pub fn flavor(&self) -> StructFlavor {\n-        StructFlavor::from_node(self)\n+    pub fn kind(&self) -> StructKind {\n+        StructKind::from_node(self)\n     }\n }\n \n@@ -243,7 +243,7 @@ impl ast::ReferenceType {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum SelfParamFlavor {\n+pub enum SelfParamKind {\n     /// self\n     Owned,\n     /// &self\n@@ -261,7 +261,7 @@ impl ast::SelfParam {\n             .expect(\"invalid tree: self param must have self\")\n     }\n \n-    pub fn flavor(&self) -> SelfParamFlavor {\n+    pub fn kind(&self) -> SelfParamKind {\n         let borrowed = self.syntax().children_with_tokens().any(|n| n.kind() == AMP);\n         if borrowed {\n             // check for a `mut` coming after the & -- `mut &self` != `&mut self`\n@@ -271,12 +271,12 @@ impl ast::SelfParam {\n                 .skip_while(|n| n.kind() != AMP)\n                 .any(|n| n.kind() == MUT_KW)\n             {\n-                SelfParamFlavor::MutRef\n+                SelfParamKind::MutRef\n             } else {\n-                SelfParamFlavor::Ref\n+                SelfParamKind::Ref\n             }\n         } else {\n-            SelfParamFlavor::Owned\n+            SelfParamKind::Owned\n         }\n     }\n }"}]}