{"sha": "3da66f035310b15e0d5ae32443e04ee5f4220edc", "node_id": "C_kwDOAAsO6NoAKDNkYTY2ZjAzNTMxMGIxNWUwZDVhZTMyNDQzZTA0ZWU1ZjQyMjBlZGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-31T19:30:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-31T19:30:17Z"}, "message": "Rollup merge of #101236 - thomcc:winfs-nozero, r=ChrisDenton\n\nAvoid needless buffer zeroing in `std::sys::windows::fs`\n\nFollowup to https://github.com/rust-lang/rust/pull/101171 and https://github.com/rust-lang/rust/pull/101193. This finishes up avoiding buffer zeroing pointed out in https://github.com/rust-lang/rust/pull/100729#issuecomment-1220055311 (thanks!)\n\nr? `@ChrisDenton`", "tree": {"sha": "65bf8614930374413639365605678841cb3ba15e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65bf8614930374413639365605678841cb3ba15e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3da66f035310b15e0d5ae32443e04ee5f4220edc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjD7bJCRBK7hj4Ov3rIwAAu84IADSf4mwzf83pT1OLl+6MlLaW\nnMH9hpEkEJnKAw+HOMC7TQ8MMspGx5yMwjnKfdO4zrOKCbCK4hjYgAoWQxU8B0Cc\nsLb5O5VHfSyJUbSoAt5+RlgkdZjGvMV4oSzGj9sF/AI4YQA7uDVSWlMzZueM1Jkm\niWksbMOkDbiBjKfj8eAvhPjEq8rWbp6Tt+7KWRWrIN6yDeNq2CWYHrjEsBL5tA5M\nXqcN/6qDrG/8HIvfH8BsQYrRj5jb6rU0u3//3CjRxvPTcPXThx2eW0YT6PWd/ea9\ntJVyaiWhZd7faLLA9nIvi04tFRVC6AVBD9ttF6z4DZ+JUCpYSFwuNi/hifaRYf4=\n=d/nO\n-----END PGP SIGNATURE-----\n", "payload": "tree 65bf8614930374413639365605678841cb3ba15e\nparent 0620f6e90af34d4ceb282f62d16fd2ed7242a3fe\nparent 14dd33b8c7b380459bd032d1bb4f907efca7dac7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661974217 +0200\ncommitter GitHub <noreply@github.com> 1661974217 +0200\n\nRollup merge of #101236 - thomcc:winfs-nozero, r=ChrisDenton\n\nAvoid needless buffer zeroing in `std::sys::windows::fs`\n\nFollowup to https://github.com/rust-lang/rust/pull/101171 and https://github.com/rust-lang/rust/pull/101193. This finishes up avoiding buffer zeroing pointed out in https://github.com/rust-lang/rust/pull/100729#issuecomment-1220055311 (thanks!)\n\nr? `@ChrisDenton`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3da66f035310b15e0d5ae32443e04ee5f4220edc", "html_url": "https://github.com/rust-lang/rust/commit/3da66f035310b15e0d5ae32443e04ee5f4220edc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3da66f035310b15e0d5ae32443e04ee5f4220edc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0620f6e90af34d4ceb282f62d16fd2ed7242a3fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/0620f6e90af34d4ceb282f62d16fd2ed7242a3fe", "html_url": "https://github.com/rust-lang/rust/commit/0620f6e90af34d4ceb282f62d16fd2ed7242a3fe"}, {"sha": "14dd33b8c7b380459bd032d1bb4f907efca7dac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/14dd33b8c7b380459bd032d1bb4f907efca7dac7", "html_url": "https://github.com/rust-lang/rust/commit/14dd33b8c7b380459bd032d1bb4f907efca7dac7"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "98c8834d38403a9ce4dba30cc3c73b666c439c30", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3da66f035310b15e0d5ae32443e04ee5f4220edc/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da66f035310b15e0d5ae32443e04ee5f4220edc/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=3da66f035310b15e0d5ae32443e04ee5f4220edc", "patch": "@@ -3,7 +3,7 @@ use crate::os::windows::prelude::*;\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::io::{self, BorrowedCursor, Error, IoSlice, IoSliceMut, SeekFrom};\n-use crate::mem;\n+use crate::mem::{self, MaybeUninit};\n use crate::os::windows::io::{AsHandle, BorrowedHandle};\n use crate::path::{Path, PathBuf};\n use crate::ptr;\n@@ -326,7 +326,8 @@ impl File {\n             cvt(c::GetFileInformationByHandle(self.handle.as_raw_handle(), &mut info))?;\n             let mut reparse_tag = 0;\n             if info.dwFileAttributes & c::FILE_ATTRIBUTE_REPARSE_POINT != 0 {\n-                let mut b = Align8([0u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n+                let mut b =\n+                    Align8([MaybeUninit::<u8>::uninit(); c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n                 if let Ok((_, buf)) = self.reparse_point(&mut b) {\n                     reparse_tag = (*buf).ReparseTag;\n                 }\n@@ -389,7 +390,8 @@ impl File {\n             attr.file_size = info.AllocationSize as u64;\n             attr.number_of_links = Some(info.NumberOfLinks);\n             if attr.file_type().is_reparse_point() {\n-                let mut b = Align8([0; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n+                let mut b =\n+                    Align8([MaybeUninit::<u8>::uninit(); c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n                 if let Ok((_, buf)) = self.reparse_point(&mut b) {\n                     attr.reparse_tag = (*buf).ReparseTag;\n                 }\n@@ -463,7 +465,7 @@ impl File {\n     // avoid narrowing provenance to the actual `REPARSE_DATA_BUFFER`.\n     fn reparse_point(\n         &self,\n-        space: &mut Align8<[u8]>,\n+        space: &mut Align8<[MaybeUninit<u8>]>,\n     ) -> io::Result<(c::DWORD, *const c::REPARSE_DATA_BUFFER)> {\n         unsafe {\n             let mut bytes = 0;\n@@ -488,7 +490,7 @@ impl File {\n     }\n \n     fn readlink(&self) -> io::Result<PathBuf> {\n-        let mut space = Align8([0u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n+        let mut space = Align8([MaybeUninit::<u8>::uninit(); c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n         let (_bytes, buf) = self.reparse_point(&mut space)?;\n         unsafe {\n             let (path_buffer, subst_off, subst_len, relative) = match (*buf).ReparseTag {\n@@ -658,12 +660,16 @@ impl File {\n \n /// A buffer for holding directory entries.\n struct DirBuff {\n-    buffer: Box<Align8<[u8; Self::BUFFER_SIZE]>>,\n+    buffer: Box<Align8<[MaybeUninit<u8>; Self::BUFFER_SIZE]>>,\n }\n impl DirBuff {\n     const BUFFER_SIZE: usize = 1024;\n     fn new() -> Self {\n-        Self { buffer: Box::new(Align8([0u8; Self::BUFFER_SIZE])) }\n+        Self {\n+            // Safety: `Align8<[MaybeUninit<u8>; N]>` does not need\n+            // initialization.\n+            buffer: unsafe { Box::new_uninit().assume_init() },\n+        }\n     }\n     fn capacity(&self) -> usize {\n         self.buffer.0.len()\n@@ -676,8 +682,8 @@ impl DirBuff {\n         DirBuffIter::new(self)\n     }\n }\n-impl AsRef<[u8]> for DirBuff {\n-    fn as_ref(&self) -> &[u8] {\n+impl AsRef<[MaybeUninit<u8>]> for DirBuff {\n+    fn as_ref(&self) -> &[MaybeUninit<u8>] {\n         &self.buffer.0\n     }\n }\n@@ -686,7 +692,7 @@ impl AsRef<[u8]> for DirBuff {\n ///\n /// Currently only returns file names (UTF-16 encoded).\n struct DirBuffIter<'a> {\n-    buffer: Option<&'a [u8]>,\n+    buffer: Option<&'a [MaybeUninit<u8>]>,\n     cursor: usize,\n }\n impl<'a> DirBuffIter<'a> {\n@@ -701,9 +707,13 @@ impl<'a> Iterator for DirBuffIter<'a> {\n         let buffer = &self.buffer?[self.cursor..];\n \n         // Get the name and next entry from the buffer.\n-        // SAFETY: The buffer contains a `FILE_ID_BOTH_DIR_INFO` struct but the\n-        // last field (the file name) is unsized. So an offset has to be\n-        // used to get the file name slice.\n+        // SAFETY:\n+        // - The buffer contains a `FILE_ID_BOTH_DIR_INFO` struct but the last\n+        //   field (the file name) is unsized. So an offset has to be used to\n+        //   get the file name slice.\n+        // - The OS has guaranteed initialization of the fields of\n+        //   `FILE_ID_BOTH_DIR_INFO` and the trailing filename (for at least\n+        //   `FileNameLength` bytes)\n         let (name, is_directory, next_entry) = unsafe {\n             let info = buffer.as_ptr().cast::<c::FILE_ID_BOTH_DIR_INFO>();\n             // Guaranteed to be aligned in documentation for\n@@ -1349,7 +1359,7 @@ fn symlink_junction_inner(original: &Path, junction: &Path) -> io::Result<()> {\n     let h = f.as_inner().as_raw_handle();\n \n     unsafe {\n-        let mut data = Align8([0u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n+        let mut data = Align8([MaybeUninit::<u8>::uninit(); c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n         let data_ptr = data.0.as_mut_ptr();\n         let db = data_ptr.cast::<c::REPARSE_MOUNTPOINT_DATA_BUFFER>();\n         let buf = ptr::addr_of_mut!((*db).ReparseTarget).cast::<c::WCHAR>();"}]}