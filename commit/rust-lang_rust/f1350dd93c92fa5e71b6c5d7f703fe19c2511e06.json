{"sha": "f1350dd93c92fa5e71b6c5d7f703fe19c2511e06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMzUwZGQ5M2M5MmZhNWU3MWI2YzVkN2Y3MDNmZTE5YzI1MTFlMDY=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-03-13T12:14:21Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-03-13T12:14:21Z"}, "message": "add expand log", "tree": {"sha": "02e42adb3ab3856008452834f7c70777ddbd93d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02e42adb3ab3856008452834f7c70777ddbd93d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1350dd93c92fa5e71b6c5d7f703fe19c2511e06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1350dd93c92fa5e71b6c5d7f703fe19c2511e06", "html_url": "https://github.com/rust-lang/rust/commit/f1350dd93c92fa5e71b6c5d7f703fe19c2511e06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1350dd93c92fa5e71b6c5d7f703fe19c2511e06/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0b7c02f16f717744e7edc79a405db14110393cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0b7c02f16f717744e7edc79a405db14110393cf", "html_url": "https://github.com/rust-lang/rust/commit/f0b7c02f16f717744e7edc79a405db14110393cf"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "9086e6c1769f6bd838fe686fdbc9e1f9528705da", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1350dd93c92fa5e71b6c5d7f703fe19c2511e06/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1350dd93c92fa5e71b6c5d7f703fe19c2511e06/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=f1350dd93c92fa5e71b6c5d7f703fe19c2511e06", "patch": "@@ -340,6 +340,8 @@ fn parse_macro_with_arg(\n         None => return ExpandResult { value: None, err: result.err },\n     };\n \n+    log::debug!(\"expanded = {}\", tt.as_debug_string());\n+\n     let fragment_kind = to_fragment_kind(db, macro_call_id);\n \n     let (parse, rev_token_map) = match mbe::token_tree_to_syntax_node(&tt, fragment_kind) {"}, {"sha": "9d9a01e30a9a2d821a0f1294cfc47a345d7ef80c", "filename": "crates/tt/src/lib.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f1350dd93c92fa5e71b6c5d7f703fe19c2511e06/crates%2Ftt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1350dd93c92fa5e71b6c5d7f703fe19c2511e06/crates%2Ftt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Flib.rs?ref=f1350dd93c92fa5e71b6c5d7f703fe19c2511e06", "patch": "@@ -227,6 +227,53 @@ impl Subtree {\n     }\n }\n \n+impl Subtree {\n+    /// A simple line string used for debugging\n+    pub fn as_debug_string(&self) -> String {\n+        let delim = match self.delimiter_kind() {\n+            Some(DelimiterKind::Brace) => (\"{\", \"}\"),\n+            Some(DelimiterKind::Bracket) => (\"[\", \"]\"),\n+            Some(DelimiterKind::Parenthesis) => (\"(\", \")\"),\n+            None => (\" \", \" \"),\n+        };\n+\n+        let mut res = String::new();\n+        res.push_str(delim.0);\n+        let mut iter = self.token_trees.iter();\n+        let mut last = None;\n+        while let Some(child) = iter.next() {\n+            let s = match child {\n+                TokenTree::Leaf(it) => {\n+                    let s = match it {\n+                        Leaf::Literal(it) => it.text.to_string(),\n+                        Leaf::Punct(it) => it.char.to_string(),\n+                        Leaf::Ident(it) => it.text.to_string(),\n+                    };\n+                    match (it, last) {\n+                        (Leaf::Ident(_), Some(&TokenTree::Leaf(Leaf::Ident(_)))) => {\n+                            \" \".to_string() + &s\n+                        }\n+                        (Leaf::Punct(_), Some(&TokenTree::Leaf(Leaf::Punct(punct)))) => {\n+                            if punct.spacing == Spacing::Alone {\n+                                \" \".to_string() + &s\n+                            } else {\n+                                s\n+                            }\n+                        }\n+                        _ => s,\n+                    }\n+                }\n+                TokenTree::Subtree(it) => it.as_debug_string(),\n+            };\n+            res.push_str(&s);\n+            last = Some(child);\n+        }\n+\n+        res.push_str(delim.1);\n+        res\n+    }\n+}\n+\n pub mod buffer;\n \n #[derive(Debug, PartialEq, Eq, Clone)]"}]}