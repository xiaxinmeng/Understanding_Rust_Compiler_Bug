{"sha": "230668765d5a1c435cfd6d6a101aaee0f67de2dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMDY2ODc2NWQ1YTFjNDM1Y2ZkNmQ2YTEwMWFhZWUwZjY3ZGUyZGM=", "commit": {"author": {"name": "Johannes L\u00f6thberg", "email": "johannes@kyriasis.com", "date": "2017-07-10T18:57:45Z"}, "committer": {"name": "Johannes L\u00f6thberg", "email": "johannes@kyriasis.com", "date": "2017-07-11T12:22:12Z"}, "message": "Add support for full RELRO\n\nThis commit adds support for full RELRO, and enables it for the\nplatforms I know have support for it.\n\nFull RELRO makes the PLT+GOT data read-only on startup, preventing it\nfrom being overwritten.\n\nhttp://tk-blog.blogspot.com/2009/02/relro-not-so-well-known-memory.html\n\nFixes rust-lang/rust#29877.\n\nSigned-off-by: Johannes L\u00f6thberg <johannes@kyriasis.com>", "tree": {"sha": "ed21b7da9185eb53b6f31af0d61f9382b19998c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed21b7da9185eb53b6f31af0d61f9382b19998c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/230668765d5a1c435cfd6d6a101aaee0f67de2dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/230668765d5a1c435cfd6d6a101aaee0f67de2dc", "html_url": "https://github.com/rust-lang/rust/commit/230668765d5a1c435cfd6d6a101aaee0f67de2dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/230668765d5a1c435cfd6d6a101aaee0f67de2dc/comments", "author": {"login": "kyrias", "id": 2285387, "node_id": "MDQ6VXNlcjIyODUzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/2285387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyrias", "html_url": "https://github.com/kyrias", "followers_url": "https://api.github.com/users/kyrias/followers", "following_url": "https://api.github.com/users/kyrias/following{/other_user}", "gists_url": "https://api.github.com/users/kyrias/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyrias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyrias/subscriptions", "organizations_url": "https://api.github.com/users/kyrias/orgs", "repos_url": "https://api.github.com/users/kyrias/repos", "events_url": "https://api.github.com/users/kyrias/events{/privacy}", "received_events_url": "https://api.github.com/users/kyrias/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyrias", "id": 2285387, "node_id": "MDQ6VXNlcjIyODUzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/2285387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyrias", "html_url": "https://github.com/kyrias", "followers_url": "https://api.github.com/users/kyrias/followers", "following_url": "https://api.github.com/users/kyrias/following{/other_user}", "gists_url": "https://api.github.com/users/kyrias/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyrias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyrias/subscriptions", "organizations_url": "https://api.github.com/users/kyrias/orgs", "repos_url": "https://api.github.com/users/kyrias/repos", "events_url": "https://api.github.com/users/kyrias/events{/privacy}", "received_events_url": "https://api.github.com/users/kyrias/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1999bfaa9f961ce2e0c82e97f9bc152d5ce5ed72", "url": "https://api.github.com/repos/rust-lang/rust/commits/1999bfaa9f961ce2e0c82e97f9bc152d5ce5ed72", "html_url": "https://github.com/rust-lang/rust/commit/1999bfaa9f961ce2e0c82e97f9bc152d5ce5ed72"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "5a0ab83cd7231b8599fe6d4ca191d070a5198a2c", "filename": "src/librustc_back/target/bitrig_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs?ref=230668765d5a1c435cfd6d6a101aaee0f67de2dc", "patch": "@@ -19,6 +19,7 @@ pub fn opts() -> TargetOptions {\n         linker_is_gnu: true,\n         has_rpath: true,\n         position_independent_executables: true,\n+        full_relro: true,\n \n         .. Default::default()\n     }"}, {"sha": "ca116e82379b59a0be664ed53a63b07af0e0b6d7", "filename": "src/librustc_back/target/dragonfly_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs?ref=230668765d5a1c435cfd6d6a101aaee0f67de2dc", "patch": "@@ -33,6 +33,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         pre_link_args: args,\n         position_independent_executables: true,\n+        full_relro: true,\n         exe_allocation_crate: super::maybe_jemalloc(),\n         .. Default::default()\n     }"}, {"sha": "ca116e82379b59a0be664ed53a63b07af0e0b6d7", "filename": "src/librustc_back/target/freebsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs?ref=230668765d5a1c435cfd6d6a101aaee0f67de2dc", "patch": "@@ -33,6 +33,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         pre_link_args: args,\n         position_independent_executables: true,\n+        full_relro: true,\n         exe_allocation_crate: super::maybe_jemalloc(),\n         .. Default::default()\n     }"}, {"sha": "c52b28708c36d8dd19a405632101c40da5041245", "filename": "src/librustc_back/target/haiku_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs?ref=230668765d5a1c435cfd6d6a101aaee0f67de2dc", "patch": "@@ -18,6 +18,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         has_rpath: false,\n         target_family: Some(\"unix\".to_string()),\n+        full_relro: true,\n         linker_is_gnu: true,\n         no_integrated_as: true,\n         .. Default::default()"}, {"sha": "e4e7f062f88f6fc4850882b167b81cb8be8bdd70", "filename": "src/librustc_back/target/linux_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs?ref=230668765d5a1c435cfd6d6a101aaee0f67de2dc", "patch": "@@ -36,6 +36,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         pre_link_args: args,\n         position_independent_executables: true,\n+        full_relro: true,\n         exe_allocation_crate: super::maybe_jemalloc(),\n         has_elf_tls: true,\n         .. Default::default()"}, {"sha": "673c01f4b7e7d838dcecdcbd71dfb94c7846fc2e", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=230668765d5a1c435cfd6d6a101aaee0f67de2dc", "patch": "@@ -367,6 +367,9 @@ pub struct TargetOptions {\n     /// the functions in the executable are not randomized and can be used\n     /// during an exploit of a vulnerability in any code.\n     pub position_independent_executables: bool,\n+    /// Full RELRO makes the dynamic linker resolve all symbols at startup and marks the GOT\n+    /// read-only before starting the program, preventing overwriting the GOT.\n+    pub full_relro: bool,\n     /// Format that archives should be emitted in. This affects whether we use\n     /// LLVM to assemble an archive or fall back to the system linker, and\n     /// currently only \"gnu\" is used to fall into LLVM. Unknown strings cause\n@@ -454,6 +457,7 @@ impl Default for TargetOptions {\n             has_rpath: false,\n             no_default_libraries: true,\n             position_independent_executables: false,\n+            full_relro: false,\n             pre_link_objects_exe: Vec::new(),\n             pre_link_objects_dll: Vec::new(),\n             post_link_objects: Vec::new(),\n@@ -683,6 +687,7 @@ impl Target {\n         key!(has_rpath, bool);\n         key!(no_default_libraries, bool);\n         key!(position_independent_executables, bool);\n+        key!(full_relro, bool);\n         key!(archive_format);\n         key!(allow_asm, bool);\n         key!(custom_unwind_resume, bool);\n@@ -870,6 +875,7 @@ impl ToJson for Target {\n         target_option_val!(has_rpath);\n         target_option_val!(no_default_libraries);\n         target_option_val!(position_independent_executables);\n+        target_option_val!(full_relro);\n         target_option_val!(archive_format);\n         target_option_val!(allow_asm);\n         target_option_val!(custom_unwind_resume);"}, {"sha": "1d7d1b36008aa78893e89b62d0b87280a2a350a0", "filename": "src/librustc_back/target/netbsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs?ref=230668765d5a1c435cfd6d6a101aaee0f67de2dc", "patch": "@@ -33,6 +33,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         pre_link_args: args,\n         position_independent_executables: true,\n+        full_relro: true,\n         .. Default::default()\n     }\n }"}, {"sha": "df17f853b3b359d5f327528741abac7febcc2c83", "filename": "src/librustc_back/target/openbsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs?ref=230668765d5a1c435cfd6d6a101aaee0f67de2dc", "patch": "@@ -34,6 +34,7 @@ pub fn opts() -> TargetOptions {\n         is_like_openbsd: true,\n         pre_link_args: args,\n         position_independent_executables: true,\n+        full_relro: true,\n         .. Default::default()\n     }\n }"}, {"sha": "238b7fd2e19bc1be27829f1cac1c3cd6f09f8760", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=230668765d5a1c435cfd6d6a101aaee0f67de2dc", "patch": "@@ -1029,6 +1029,10 @@ fn link_args(cmd: &mut Linker,\n         }\n     }\n \n+    if t.options.full_relro {\n+        cmd.full_relro();\n+    }\n+\n     // Pass optimization flags down to the linker.\n     cmd.optimize();\n "}, {"sha": "025b57956594a5291b068f7fb9d4e188d99f2a7b", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230668765d5a1c435cfd6d6a101aaee0f67de2dc/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=230668765d5a1c435cfd6d6a101aaee0f67de2dc", "patch": "@@ -104,6 +104,7 @@ pub trait Linker {\n     fn add_object(&mut self, path: &Path);\n     fn gc_sections(&mut self, keep_metadata: bool);\n     fn position_independent_executable(&mut self);\n+    fn full_relro(&mut self);\n     fn optimize(&mut self);\n     fn debuginfo(&mut self);\n     fn no_default_libraries(&mut self);\n@@ -175,6 +176,7 @@ impl<'a> Linker for GccLinker<'a> {\n     fn output_filename(&mut self, path: &Path) { self.cmd.arg(\"-o\").arg(path); }\n     fn add_object(&mut self, path: &Path) { self.cmd.arg(path); }\n     fn position_independent_executable(&mut self) { self.cmd.arg(\"-pie\"); }\n+    fn full_relro(&mut self) { self.linker_arg(\"-z,relro,-z,now\"); }\n     fn args(&mut self, args: &[String]) { self.cmd.args(args); }\n \n     fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n@@ -428,6 +430,10 @@ impl<'a> Linker for MsvcLinker<'a> {\n         // noop\n     }\n \n+    fn full_relro(&mut self) {\n+        // noop\n+    }\n+\n     fn no_default_libraries(&mut self) {\n         // Currently we don't pass the /NODEFAULTLIB flag to the linker on MSVC\n         // as there's been trouble in the past of linking the C++ standard\n@@ -595,6 +601,10 @@ impl<'a> Linker for EmLinker<'a> {\n         // noop\n     }\n \n+    fn full_relro(&mut self) {\n+        // noop\n+    }\n+\n     fn args(&mut self, args: &[String]) {\n         self.cmd.args(args);\n     }"}]}