{"sha": "43fc1b3e24087df507babc439db8d2c2508c698c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZmMxYjNlMjQwODdkZjUwN2JhYmM0MzlkYjhkMmMyNTA4YzY5OGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-01T00:07:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-01T00:07:29Z"}, "message": "Auto merge of #82601 - terhechte:catalyst-support-m1-fix, r=petrochenkov\n\nFixed support for macOS Catalyst on ARM64\n\nWhen I initially added Arm64 Catalyst support in https://github.com/rust-lang/rust/pull/77484 I had access to a DTK. However, while waiting to merge the PR some other changes were merged which caused conflicts in the branch. When fixing those conflicts I had no access to the DTK anymore and didn't try out if the resulting binaries did indeed work on Apple Silicon. I finally have a M1 and I realized that some small changes were necessary to support Apple Silicon. This PR adds the required changes. I've been running binaries generated with this branch for some time now and they work without issues.", "tree": {"sha": "04befdeb7597cf2413dbf66303c53d6cf2f159ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04befdeb7597cf2413dbf66303c53d6cf2f159ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43fc1b3e24087df507babc439db8d2c2508c698c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43fc1b3e24087df507babc439db8d2c2508c698c", "html_url": "https://github.com/rust-lang/rust/commit/43fc1b3e24087df507babc439db8d2c2508c698c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43fc1b3e24087df507babc439db8d2c2508c698c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e37a13cc3594004663738bd18d8100e6db9666cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e37a13cc3594004663738bd18d8100e6db9666cf", "html_url": "https://github.com/rust-lang/rust/commit/e37a13cc3594004663738bd18d8100e6db9666cf"}, {"sha": "a1670aa9f51f16325f0c821b8ba0cea5d4246bd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1670aa9f51f16325f0c821b8ba0cea5d4246bd0", "html_url": "https://github.com/rust-lang/rust/commit/a1670aa9f51f16325f0c821b8ba0cea5d4246bd0"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "758950bd3442597a73d4c7bb8486efbabde8f01f", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_macabi.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43fc1b3e24087df507babc439db8d2c2508c698c/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fc1b3e24087df507babc439db8d2c2508c698c/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs?ref=43fc1b3e24087df507babc439db8d2c2508c698c", "patch": "@@ -4,12 +4,12 @@ use crate::spec::{Target, TargetOptions};\n pub fn target() -> Target {\n     let base = opts(\"ios\", Arch::Arm64_macabi);\n     Target {\n-        llvm_target: \"arm64-apple-ios-macabi\".to_string(),\n+        llvm_target: \"arm64-apple-ios14.0-macabi\".to_string(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n-            features: \"+neon,+fp-armv8,+apple-a7\".to_string(),\n+            features: \"+neon,+fp-armv8,+apple-a12\".to_string(),\n             eliminate_frame_pointer: false,\n             max_atomic_width: Some(128),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n@@ -18,11 +18,9 @@ pub fn target() -> Target {\n             // These arguments are not actually invoked - they just have\n             // to look right to pass App Store validation.\n             bitcode_llvm_cmdline: \"-triple\\0\\\n-                arm64-apple-ios-macabi\\0\\\n+                arm64-apple-ios14.0-macabi\\0\\\n                 -emit-obj\\0\\\n                 -disable-llvm-passes\\0\\\n-                -target-abi\\0\\\n-                darwinpcs\\0\\\n                 -Os\\0\"\n                 .to_string(),\n             ..base"}]}