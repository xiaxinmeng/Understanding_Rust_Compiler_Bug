{"sha": "49275d42690318e410f65e3a38d04f2c4ccfbd0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5Mjc1ZDQyNjkwMzE4ZTQxMGY2NWUzYTM4ZDA0ZjJjNGNjZmJkMGM=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-20T07:13:48Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-20T07:13:48Z"}, "message": "Avoid writing more bytes than necessary", "tree": {"sha": "696a6b39268e82f77ec6963e31918966b7ceaf64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/696a6b39268e82f77ec6963e31918966b7ceaf64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49275d42690318e410f65e3a38d04f2c4ccfbd0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49275d42690318e410f65e3a38d04f2c4ccfbd0c", "html_url": "https://github.com/rust-lang/rust/commit/49275d42690318e410f65e3a38d04f2c4ccfbd0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49275d42690318e410f65e3a38d04f2c4ccfbd0c/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "133c2b39db73843e6a5ee0bce325cca034012579", "url": "https://api.github.com/repos/rust-lang/rust/commits/133c2b39db73843e6a5ee0bce325cca034012579", "html_url": "https://github.com/rust-lang/rust/commit/133c2b39db73843e6a5ee0bce325cca034012579"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "5e81b94e699774c9b1a04c7215af29cc184e71c3", "filename": "src/shims/env.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/49275d42690318e410f65e3a38d04f2c4ccfbd0c/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49275d42690318e410f65e3a38d04f2c4ccfbd0c/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=49275d42690318e410f65e3a38d04f2c4ccfbd0c", "patch": "@@ -120,25 +120,29 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n \n-        if this.machine.communicate {\n-            let tcx = &{this.tcx.tcx};\n+        if !this.machine.communicate {\n+            throw_unsup_format!(\"Function not available when isolation is enabled\")\n+        }\n \n-            let buf = this.force_ptr(this.read_scalar(buf_op)?.not_undef()?)?;\n-            let size = this.read_scalar(size_op)?.to_usize(&*this.tcx)?;\n-            // If we cannot get the current directory, we return null\n-            if let Ok(cwd) = env::current_dir() {\n-                // It is not clear what happens with non-utf8 paths here\n-                let mut bytes = cwd.display().to_string().into_bytes();\n-                // If the buffer is smaller than the path, we return null\n-                if bytes.len() as u64 <= size {\n-                    // We need `size` bytes exactly\n-                    bytes.resize(size as usize, 0);\n-                    this.memory_mut().get_mut(buf.alloc_id)?.write_bytes(tcx, buf, &bytes)?;\n-                    return Ok(Scalar::Ptr(buf))\n-                }\n+        let tcx = &{this.tcx.tcx};\n+\n+        let buf = this.force_ptr(this.read_scalar(buf_op)?.not_undef()?)?;\n+        let size = this.read_scalar(size_op)?.to_usize(&*this.tcx)?;\n+        // If we cannot get the current directory, we return null\n+        // FIXME: Technically we have to set the `errno` global too\n+        if let Ok(cwd) = env::current_dir() {\n+            // It is not clear what happens with non-utf8 paths here\n+            let mut bytes = cwd.display().to_string().into_bytes();\n+            // If the buffer is smaller or equal than the path, we return null.\n+            // FIXME: Technically we have to set the `errno` global too\n+            if (bytes.len() as u64) < size {\n+                // We add a `/0` terminator\n+                bytes.push(0);\n+                // This is ok because the buffer is larger than the path with the null terminator.\n+                this.memory_mut().get_mut(buf.alloc_id)?.write_bytes(tcx, buf, &bytes)?;\n+                return Ok(Scalar::Ptr(buf))\n             }\n-            return Ok(Scalar::ptr_null(&*this.tcx));\n         }\n-        throw_unsup_format!(\"Function not available when isolation is enabled\")\n+        Ok(Scalar::ptr_null(&*this.tcx))\n     }\n }"}]}