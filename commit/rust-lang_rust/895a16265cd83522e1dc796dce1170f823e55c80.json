{"sha": "895a16265cd83522e1dc796dce1170f823e55c80", "node_id": "C_kwDOAAsO6NoAKDg5NWExNjI2NWNkODM1MjJlMWRjNzk2ZGNlMTE3MGY4MjNlNTVjODA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-17T11:46:00Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-17T11:46:00Z"}, "message": "Fix macro patterns not getting formatted properly", "tree": {"sha": "42d46d14e0d9cf0bd1930a582fb699842c683ae8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42d46d14e0d9cf0bd1930a582fb699842c683ae8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/895a16265cd83522e1dc796dce1170f823e55c80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/895a16265cd83522e1dc796dce1170f823e55c80", "html_url": "https://github.com/rust-lang/rust/commit/895a16265cd83522e1dc796dce1170f823e55c80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/895a16265cd83522e1dc796dce1170f823e55c80/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2f1a9a55868abd2150ae4f05c79d4970774d59d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f1a9a55868abd2150ae4f05c79d4970774d59d", "html_url": "https://github.com/rust-lang/rust/commit/e2f1a9a55868abd2150ae4f05c79d4970774d59d"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "c93d0561a87d69f376db2637ede42d16ea989804", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/895a16265cd83522e1dc796dce1170f823e55c80/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895a16265cd83522e1dc796dce1170f823e55c80/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=895a16265cd83522e1dc796dce1170f823e55c80", "patch": "@@ -69,32 +69,34 @@ pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<\n \n     // FIXME: Intermix attribute and bang! expansions\n     // currently we only recursively expand one of the two types\n-    let mut expanded = None;\n-    let mut name = None;\n-    let mut kind = SyntaxKind::ERROR;\n-    for node in tok.ancestors() {\n+    let mut anc = tok.ancestors();\n+    let (name, expanded, kind) = loop {\n+        let node = anc.next()?;\n+\n         if let Some(item) = ast::Item::cast(node.clone()) {\n             if let Some(def) = sema.resolve_attr_macro_call(&item) {\n-                name = Some(def.name(db).to_string());\n-                expanded = expand_attr_macro_recur(&sema, &item);\n-                kind = SyntaxKind::MACRO_ITEMS;\n-                break;\n+                break (\n+                    def.name(db).to_string(),\n+                    expand_attr_macro_recur(&sema, &item)?,\n+                    SyntaxKind::MACRO_ITEMS,\n+                );\n             }\n         }\n         if let Some(mac) = ast::MacroCall::cast(node) {\n-            name = Some(mac.path()?.segment()?.name_ref()?.to_string());\n-            expanded = expand_macro_recur(&sema, &mac);\n-            kind = mac.syntax().parent().map(|it| it.kind()).unwrap_or(SyntaxKind::MACRO_ITEMS);\n-            break;\n+            break (\n+                mac.path()?.segment()?.name_ref()?.to_string(),\n+                expand_macro_recur(&sema, &mac)?,\n+                mac.syntax().parent().map(|it| it.kind()).unwrap_or(SyntaxKind::MACRO_ITEMS),\n+            );\n         }\n-    }\n+    };\n \n     // FIXME:\n     // macro expansion may lose all white space information\n     // But we hope someday we can use ra_fmt for that\n-    let expansion = format(db, kind, position.file_id, expanded?);\n+    let expansion = format(db, kind, position.file_id, expanded);\n \n-    Some(ExpandedMacro { name: name.unwrap_or_else(|| \"???\".to_owned()), expansion })\n+    Some(ExpandedMacro { name, expansion })\n }\n \n fn expand_macro_recur(\n@@ -188,8 +190,15 @@ fn _format(\n     let captured_stdout = String::from_utf8(output.stdout).ok()?;\n \n     if output.status.success() && !captured_stdout.trim().is_empty() {\n-        let foo = captured_stdout.replace(DOLLAR_CRATE_REPLACE, \"$crate\");\n-        let trim_indent = stdx::trim_indent(foo.trim().strip_prefix(prefix)?.strip_suffix(suffix)?);\n+        let output = captured_stdout.replace(DOLLAR_CRATE_REPLACE, \"$crate\");\n+        let output = output.trim().strip_prefix(prefix)?;\n+        let output = match kind {\n+            SyntaxKind::MACRO_PAT => {\n+                output.strip_suffix(suffix).or_else(|| output.strip_suffix(\": u32,\\n);\"))?\n+            }\n+            _ => output.strip_suffix(suffix)?,\n+        };\n+        let trim_indent = stdx::trim_indent(output);\n         tracing::debug!(\"expand_macro: formatting succeeded\");\n         Some(trim_indent)\n     } else {"}]}