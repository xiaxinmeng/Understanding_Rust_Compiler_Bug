{"sha": "b126c742e5cb1573da51a257735951996375e23e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMjZjNzQyZTVjYjE1NzNkYTUxYTI1NzczNTk1MTk5NjM3NWUyM2U=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-12T00:13:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-12T00:13:50Z"}, "message": "Merge remote-tracking branch 'thestinger/treemap'", "tree": {"sha": "765a746711df5401f250084cc1709bd559aed343", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/765a746711df5401f250084cc1709bd559aed343"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b126c742e5cb1573da51a257735951996375e23e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b126c742e5cb1573da51a257735951996375e23e", "html_url": "https://github.com/rust-lang/rust/commit/b126c742e5cb1573da51a257735951996375e23e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b126c742e5cb1573da51a257735951996375e23e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "822813dd23e9df149733ea537d8e64558e917888", "url": "https://api.github.com/repos/rust-lang/rust/commits/822813dd23e9df149733ea537d8e64558e917888", "html_url": "https://github.com/rust-lang/rust/commit/822813dd23e9df149733ea537d8e64558e917888"}, {"sha": "f9c7ba009b51f39629d74ac67781c034643e74e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c7ba009b51f39629d74ac67781c034643e74e8", "html_url": "https://github.com/rust-lang/rust/commit/f9c7ba009b51f39629d74ac67781c034643e74e8"}], "stats": {"total": 92, "additions": 53, "deletions": 39}, "files": [{"sha": "d3583828f9aedeb74eb1bc6f74ca7184c947095c", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 53, "deletions": 39, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/b126c742e5cb1573da51a257735951996375e23e/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b126c742e5cb1573da51a257735951996375e23e/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=b126c742e5cb1573da51a257735951996375e23e", "patch": "@@ -576,63 +576,62 @@ pure fn each_reverse<K: Ord, V>(node: &r/Option<~TreeNode<K, V>>,\n }\n \n // Remove left horizontal link by rotating right\n-fn skew<K: Ord, V>(mut node: ~TreeNode<K, V>) -> ~TreeNode<K, V> {\n+fn skew<K: Ord, V>(node: &mut ~TreeNode<K, V>) {\n     if node.left.map_default(false, |x| x.level == node.level) {\n         let mut save = node.left.swap_unwrap();\n         node.left <-> save.right; // save.right now None\n-        save.right = Some(node);\n-        save\n-    } else {\n-        node // nothing to do\n+        *node <-> save;\n+        node.right = Some(save);\n     }\n }\n \n // Remove dual horizontal link by rotating left and increasing level of\n // the parent\n-fn split<K: Ord, V>(mut node: ~TreeNode<K, V>) -> ~TreeNode<K, V> {\n+fn split<K: Ord, V>(node: &mut ~TreeNode<K, V>) {\n     if node.right.map_default(false,\n       |x| x.right.map_default(false, |y| y.level == node.level)) {\n         let mut save = node.right.swap_unwrap();\n         node.right <-> save.left; // save.left now None\n-        save.left = Some(node);\n         save.level += 1;\n-        save\n-    } else {\n-        node // nothing to do\n+        *node <-> save;\n+        node.left = Some(save);\n     }\n }\n \n fn insert<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: K,\n                      value: V) -> bool {\n-    if node.is_none() {\n-        *node = Some(~TreeNode::new(key, value));\n-        true\n-    } else {\n-        let mut save = node.swap_unwrap();\n+    match *node {\n+      Some(ref mut save) => {\n         if key < save.key {\n             let inserted = insert(&mut save.left, key, value);\n-            *node = Some(split(skew(save))); // re-balance, if necessary\n+            skew(save);\n+            split(save);\n             inserted\n         } else if save.key < key {\n             let inserted = insert(&mut save.right, key, value);\n-            *node = Some(split(skew(save))); // re-balance, if necessary\n+            skew(save);\n+            split(save);\n             inserted\n         } else {\n             save.key = key;\n             save.value = value;\n-            *node = Some(save);\n             false\n         }\n+      }\n+      None => {\n+       *node = Some(~TreeNode::new(key, value));\n+        true\n+      }\n     }\n }\n \n fn remove<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: &K) -> bool {\n-    fn heir_swap<K: Ord, V>(node: &mut TreeNode<K, V>,\n+    fn heir_swap<K: Ord, V>(node: &mut ~TreeNode<K, V>,\n                             child: &mut Option<~TreeNode<K, V>>) {\n         // *could* be done without recursion, but it won't borrow check\n         do child.mutate |mut child| {\n             if child.right.is_some() {\n-                heir_swap(&mut *node, &mut child.right);\n+                heir_swap(node, &mut child.right);\n             } else {\n                 node.key <-> child.key;\n                 node.value <-> child.value;\n@@ -641,15 +640,15 @@ fn remove<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: &K) -> bool {\n         }\n     }\n \n-    if node.is_none() {\n+    match *node {\n+      None => {\n         return false // bottom of tree\n-    } else {\n-        let mut save = node.swap_unwrap();\n-\n-        let removed = if save.key < *key {\n-            remove(&mut save.right, key)\n+      }\n+      Some(ref mut save) => {\n+        let (removed, this) = if save.key < *key {\n+            (remove(&mut save.right, key), false)\n         } else if *key < save.key {\n-            remove(&mut save.left, key)\n+            (remove(&mut save.left, key), false)\n         } else {\n             if save.left.is_some() {\n                 if save.right.is_some() {\n@@ -663,16 +662,22 @@ fn remove<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: &K) -> bool {\n                     save.left = Some(left);\n                     remove(&mut save.left, key);\n                 } else {\n-                    save = save.left.swap_unwrap();\n+                    *save = save.left.swap_unwrap();\n                 }\n+                (true, false)\n             } else if save.right.is_some() {\n-                save = save.right.swap_unwrap();\n+                *save = save.right.swap_unwrap();\n+                (true, false)\n             } else {\n-                return true // leaf\n+                (true, true)\n             }\n-            true\n         };\n \n+        if this {\n+            *node = None;\n+            return true;\n+        }\n+\n         let left_level = save.left.map_default(0, |x| x.level);\n         let right_level = save.right.map_default(0, |x| x.level);\n \n@@ -684,19 +689,28 @@ fn remove<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: &K) -> bool {\n                 do save.right.mutate |mut x| { x.level = save.level; x }\n             }\n \n-            save = skew(save);\n+            skew(save);\n+\n+            match save.right {\n+              Some(ref mut right) => {\n+                skew(right);\n+                match right.right {\n+                  Some(ref mut x) => { skew(x) },\n+                  None => ()\n+                }\n+              }\n+              None => ()\n+            }\n \n-            do save.right.mutate |mut right| {\n-                right = skew(right);\n-                right.right.mutate(skew);\n-                right\n+            split(save);\n+            match save.right {\n+              Some(ref mut x) => { split(x) },\n+              None => ()\n             }\n-            save = split(save);\n-            save.right.mutate(split);\n         }\n \n-        *node = Some(save);\n         removed\n+      }\n     }\n }\n "}]}