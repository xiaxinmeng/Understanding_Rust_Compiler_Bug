{"sha": "84abfcd22d84431519c029e87c5914389ef008cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YWJmY2QyMmQ4NDQzMTUxOWMwMjllODdjNTkxNDM4OWVmMDA4Y2I=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-17T09:43:36Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-17T09:43:36Z"}, "message": "fix 189, fixed a few warnings, ==/!= for consts, refactored consts test", "tree": {"sha": "f4aa291f6ce962deafbbf14222f6dda1f025d1a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4aa291f6ce962deafbbf14222f6dda1f025d1a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84abfcd22d84431519c029e87c5914389ef008cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84abfcd22d84431519c029e87c5914389ef008cb", "html_url": "https://github.com/rust-lang/rust/commit/84abfcd22d84431519c029e87c5914389ef008cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84abfcd22d84431519c029e87c5914389ef008cb/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f1fcd4d5bd40c16d109eaccee560d72fa5b2b21", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f1fcd4d5bd40c16d109eaccee560d72fa5b2b21", "html_url": "https://github.com/rust-lang/rust/commit/4f1fcd4d5bd40c16d109eaccee560d72fa5b2b21"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "c931fb15bb8c8b05994b326e5946bb4d9966d95e", "filename": "src/consts.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84abfcd22d84431519c029e87c5914389ef008cb/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84abfcd22d84431519c029e87c5914389ef008cb/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=84abfcd22d84431519c029e87c5914389ef008cb", "patch": "@@ -53,7 +53,7 @@ impl Constant {\n }\n \n /// a Lit_-like enum to fold constant `Expr`s into\n-#[derive(PartialEq, Eq, Debug, Clone)]\n+#[derive(PartialEq, Eq, Debug, Clone)] //TODO: A better PartialEq, remove Eq\n pub enum ConstantVariant {\n     /// a String \"abc\"\n     ConstantStr(String, StrStyle),\n@@ -332,10 +332,12 @@ fn constant_binop(cx: &Context, op: BinOp, left: &Expr, right: &Expr)\n         //BiBitOr,\n         //BiShl,\n         //BiShr,\n-        //BiEq,\n+        BiEq => constant_binop_apply(cx, left, right,\n+            |l, r| Some(ConstantBool(l == r))),\n         //BiLt,\n         //BiLe,\n-        //BiNe,\n+        BiNe => constant_binop_apply(cx, left, right,\n+            |l, r| Some(ConstantBool(l != r))),\n         //BiGe,\n         //BiGt,\n         _ => None,"}, {"sha": "9f415e5decb37ab3a3dc1f5de24b23e5851b2394", "filename": "src/identity_op.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84abfcd22d84431519c029e87c5914389ef008cb/src%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84abfcd22d84431519c029e87c5914389ef008cb/src%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fidentity_op.rs?ref=84abfcd22d84431519c029e87c5914389ef008cb", "patch": "@@ -1,10 +1,8 @@\n use rustc::lint::*;\n-use rustc::middle::const_eval::lookup_const_by_id;\n-use rustc::middle::def::*;\n use syntax::ast::*;\n use syntax::codemap::Span;\n \n-use consts::{constant, Constant, is_negative};\n+use consts::{constant, is_negative};\n use consts::ConstantVariant::ConstantInt;\n use utils::{span_lint, snippet};\n \n@@ -51,8 +49,8 @@ fn check(cx: &Context, e: &Expr, m: i8, span: Span, arg: Span) {\n         if let ConstantInt(v, ty) = c.constant {\n             if match m {\n                 0 => v == 0,\n-                -1 => is_negative(ty),\n-                1 => !is_negative(ty),\n+                -1 => is_negative(ty) && v == 1,\n+                1 => !is_negative(ty) && v == 1,\n                 _ => unreachable!(),\n             } {\n                 span_lint(cx, IDENTITY_OP, span, &format!("}, {"sha": "bbe65285d5870b9ea8e31140eca987e86af792f9", "filename": "src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84abfcd22d84431519c029e87c5914389ef008cb/src%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84abfcd22d84431519c029e87c5914389ef008cb/src%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Franges.rs?ref=84abfcd22d84431519c029e87c5914389ef008cb", "patch": "@@ -2,7 +2,7 @@ use rustc::lint::{Context, LintArray, LintPass};\n use rustc::middle::ty::TypeVariants::TyStruct;\n use syntax::ast::*;\n use syntax::codemap::Spanned;\n-use utils::{match_def_path, walk_ptrs_ty};\n+use utils::{match_def_path};\n \n declare_lint! {\n     pub RANGE_STEP_BY_ZERO, Warn,"}, {"sha": "4f7b87d5e02aac305ad79dad7e1d416c737125d8", "filename": "tests/consts.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/84abfcd22d84431519c029e87c5914389ef008cb/tests%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84abfcd22d84431519c029e87c5914389ef008cb/tests%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconsts.rs?ref=84abfcd22d84431519c029e87c5914389ef008cb", "patch": "@@ -5,7 +5,7 @@ extern crate clippy;\n extern crate syntax;\n extern crate rustc;\n \n-use clippy::consts::constant;\n+use clippy::consts::{constant, ConstantVariant};\n use clippy::consts::ConstantVariant::*;\n use syntax::ast::*;\n use syntax::ptr::P;\n@@ -14,21 +14,30 @@ use std::mem;\n use rustc::lint::Context;\n \n fn ctx() -> &'static Context<'static, 'static> {\n-\tunsafe { \n-\t\tlet x : *const Context<'static, 'static> = std::ptr::null();\n-\t\tmem::transmute(x)\n-\t}\n+    unsafe {\n+        let x : *const Context<'static, 'static> = std::ptr::null();\n+        mem::transmute(x)\n+    }\n+}\n+\n+fn lit(l: Lit_) -> Expr {\n+    Expr{\n+        id: 1,\n+        node: ExprLit(P(Spanned{\n+            node: l,\n+            span: COMMAND_LINE_SP,\n+        })),\n+        span: COMMAND_LINE_SP,\n+    }\n+}\n+\n+fn check(expect: ConstantVariant, expr: &Expr) {\n+    assert_eq!(Some(expect), constant(ctx(), expr).map(|x| x.constant))\n }\n \n #[test]\n fn test_lit() {\n-    assert_eq!(Some(ConstantBool(true)), constant(ctx(),\n-        &Expr{ \n-\t\t\tid: 1, \n-\t\t\tnode: ExprLit(P(Spanned{ \n-\t\t\t\tnode: LitBool(true), \n-\t\t\t\tspan: COMMAND_LINE_SP,\n-\t\t\t})), \n-\t\t\tspan: COMMAND_LINE_SP,\n-\t\t}).map(|x| x.constant));\n+    check(ConstantBool(true), &lit(LitBool(true)));\n+    check(ConstantBool(false), &lit(LitBool(false)));\n+\n }"}]}