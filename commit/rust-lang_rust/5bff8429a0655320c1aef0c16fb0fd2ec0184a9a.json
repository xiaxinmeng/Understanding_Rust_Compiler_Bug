{"sha": "5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZmY4NDI5YTA2NTUzMjBjMWFlZjBjMTZmYjBmZDJlYzAxODRhOWE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-27T12:14:21Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-27T15:27:08Z"}, "message": "Use type_alias_impl_trait instead of min in compiler and lib", "tree": {"sha": "9dc6eeb1f8e3fab7c60ae668a2e4f2e1d85e0f40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dc6eeb1f8e3fab7c60ae668a2e4f2e1d85e0f40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmEAJc0ACgkQgTGiTgx5\n768GvRAApvtkUYPOc0b89RrUbPOIfoy7sIDCnOlPVfl01zISU7HsiqVtWkpaCmnf\nDkySCyUMzd8pHyv05o+tRitAKBzA5iU+k95mKLe9kLWKM9QGusVi6aX6f+eTv7Fv\nzhqtlZDqRtdwOAis1gLf34R6AsbOEeeUz6TdaqCWHfAgV1X7SKHBpaNize807BZM\niLM/tiz8ZAN05dHe37eSRT27gELY9I2M5Wz9Pw9uqSpmMledP3GIdrNf87Me6jA8\njf2y9Pn+g4RWDojv9AUqsHdwzwvYFpBx9QtlcRcBTwS5JXhxKkEySdnsi2xpij4U\nmweskMMslRAJjhiP/w1XjRiiOcadxDmmIjgufkcH49OsI+MnF/XkUo40GgJStDh2\n1I+i/NOjISZ8KlcwEv/AfXWZyz+y4kdIfbTOAfBDX06sSyuQsHOaai+YpXEQc4EN\n3Y7NMaUj176LiH7nHJcRQRmuaAK9XVZfasPRH4ZpMeU+YArw+361UHnd8Byb8PmA\nBELyVjL/fPjBEaXKPBSNsmTsyFI9SD3c7t54z+Q5DDKjojPzTjXD3kGwdz+UoBJA\naUCnJNHEJv1vjwqd5MmKSjIAFyXDh6TnqRAWIoYwLGOx9/JWe5jMz3hVjpO/kQgA\nJO2MyKyFCsVYd4JKeSVbscCGOOtnfWFagghqVHSD4OLLg483PQU=\n=XW5Y\n-----END PGP SIGNATURE-----", "payload": "tree 9dc6eeb1f8e3fab7c60ae668a2e4f2e1d85e0f40\nparent cfc856acf3112d241bd4de55ec91df5aef66c352\nauthor Santiago Pastorino <spastorino@gmail.com> 1627388061 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1627399628 -0300\n\nUse type_alias_impl_trait instead of min in compiler and lib\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "html_url": "https://github.com/rust-lang/rust/commit/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfc856acf3112d241bd4de55ec91df5aef66c352", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc856acf3112d241bd4de55ec91df5aef66c352", "html_url": "https://github.com/rust-lang/rust/commit/cfc856acf3112d241bd4de55ec91df5aef66c352"}], "stats": {"total": 3447, "additions": 1192, "deletions": 2255}, "files": [{"sha": "18bc2f896f2f2b53f9d5b393979a85a8454d27db", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -21,7 +21,8 @@\n #![feature(iter_map_while)]\n #![feature(maybe_uninit_uninit_array)]\n #![feature(min_specialization)]\n-#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(bootstrap, feature(min_type_alias_impl_trait))]\n+#![cfg_attr(not(bootstrap), feature(type_alias_impl_trait))]\n #![feature(new_uninit)]\n #![feature(nll)]\n #![feature(once_cell)]"}, {"sha": "27c08586f4fc87dd522159117d7503791bdf8b91", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -489,7 +489,7 @@ declare_features! (\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n \n     /// Allows `impl Trait` to be used inside type aliases (RFC 2515).\n-    (incomplete, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n+    (active, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n \n     /// Allows the definition of `const extern fn` and `const unsafe extern fn`.\n     (active, const_extern_fn, \"1.40.0\", Some(64926), None),"}, {"sha": "999ca9b0ad095f09f562616504090507f3333a28", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -141,7 +141,8 @@\n #![feature(alloc_layout_extra)]\n #![feature(trusted_random_access)]\n #![feature(try_trait_v2)]\n-#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(bootstrap, feature(min_type_alias_impl_trait))]\n+#![cfg_attr(not(bootstrap), feature(type_alias_impl_trait))]\n #![feature(associated_type_bounds)]\n #![feature(slice_group_by)]\n #![feature(decl_macro)]"}, {"sha": "81cd882e5d802cb9d5a74ce0d52c367602efca43", "filename": "src/test/ui/associated-type-bounds/duplicate.full_tait.stderr", "status": "modified", "additions": 178, "deletions": 187, "changes": 365, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,492 +1,483 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/duplicate.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:10:36\n+  --> $DIR/duplicate.rs:9:36\n    |\n-LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n+LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> {\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:12:36\n+  --> $DIR/duplicate.rs:13:36\n    |\n-LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n+LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> {\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:14:39\n+  --> $DIR/duplicate.rs:17:39\n    |\n-LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n+LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> {\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:16:45\n+  --> $DIR/duplicate.rs:23:29\n    |\n-LL | struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-   |                                 ----------  ^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:18:45\n+  --> $DIR/duplicate.rs:30:29\n    |\n-LL | struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-   |                                 ----------  ^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:20:48\n+  --> $DIR/duplicate.rs:37:32\n    |\n-LL | struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-   |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:23:34\n+  --> $DIR/duplicate.rs:43:34\n    |\n-LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n+LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> {\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:25:34\n+  --> $DIR/duplicate.rs:47:34\n    |\n-LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n+LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> {\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:27:37\n+  --> $DIR/duplicate.rs:51:37\n    |\n-LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n+LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> {\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:29:43\n+  --> $DIR/duplicate.rs:57:29\n    |\n-LL | enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:31:43\n+  --> $DIR/duplicate.rs:64:29\n    |\n-LL | enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:33:46\n+  --> $DIR/duplicate.rs:71:32\n    |\n-LL | enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n-   |                               -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:36:35\n+  --> $DIR/duplicate.rs:77:35\n    |\n-LL | union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n+LL | union UI1<T: Iterator<Item: Copy, Item: Send>> {\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:38:35\n+  --> $DIR/duplicate.rs:81:35\n    |\n-LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n+LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> {\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:40:38\n+  --> $DIR/duplicate.rs:85:38\n    |\n-LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n+LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> {\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:42:44\n+  --> $DIR/duplicate.rs:91:29\n    |\n-LL | union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:44:44\n+  --> $DIR/duplicate.rs:98:29\n    |\n-LL | union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:46:47\n+  --> $DIR/duplicate.rs:105:32\n    |\n-LL | union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-   |                                -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:49:32\n+  --> $DIR/duplicate.rs:111:32\n    |\n LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:51:32\n+  --> $DIR/duplicate.rs:113:32\n    |\n LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:53:35\n+  --> $DIR/duplicate.rs:115:35\n    |\n LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:55:43\n+  --> $DIR/duplicate.rs:119:29\n    |\n-LL | fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:57:43\n+  --> $DIR/duplicate.rs:125:29\n    |\n-LL | fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:59:46\n+  --> $DIR/duplicate.rs:131:32\n    |\n-LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n-   |                               -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:65:40\n+  --> $DIR/duplicate.rs:145:40\n    |\n LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:67:40\n+  --> $DIR/duplicate.rs:147:40\n    |\n LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:69:43\n+  --> $DIR/duplicate.rs:149:43\n    |\n LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:72:35\n+  --> $DIR/duplicate.rs:152:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:74:35\n+  --> $DIR/duplicate.rs:154:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:76:38\n+  --> $DIR/duplicate.rs:156:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:78:44\n+  --> $DIR/duplicate.rs:160:29\n    |\n-LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:80:44\n+  --> $DIR/duplicate.rs:165:29\n    |\n-LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:82:47\n+  --> $DIR/duplicate.rs:170:32\n    |\n-LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n-   |                                -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:85:36\n+  --> $DIR/duplicate.rs:174:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:87:36\n+  --> $DIR/duplicate.rs:176:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:89:39\n+  --> $DIR/duplicate.rs:178:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:91:40\n+  --> $DIR/duplicate.rs:180:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:93:40\n+  --> $DIR/duplicate.rs:182:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:95:43\n+  --> $DIR/duplicate.rs:184:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:98:36\n+  --> $DIR/duplicate.rs:187:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:100:36\n+  --> $DIR/duplicate.rs:189:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:102:39\n+  --> $DIR/duplicate.rs:191:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:104:34\n+  --> $DIR/duplicate.rs:193:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:106:34\n+  --> $DIR/duplicate.rs:195:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:108:37\n+  --> $DIR/duplicate.rs:197:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:110:45\n+  --> $DIR/duplicate.rs:201:29\n    |\n-LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n-   |                                 ----------  ^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:112:45\n+  --> $DIR/duplicate.rs:207:29\n    |\n-LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n-   |                                 ----------  ^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:114:48\n+  --> $DIR/duplicate.rs:213:32\n    |\n-LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n-   |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:116:46\n+  --> $DIR/duplicate.rs:219:32\n    |\n-LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: Copy, Item: Send>,\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:116:46\n+  --> $DIR/duplicate.rs:219:32\n    |\n-LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: Copy, Item: Send>,\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:119:46\n+  --> $DIR/duplicate.rs:226:32\n    |\n-LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: Copy, Item: Copy>,\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:119:46\n+  --> $DIR/duplicate.rs:226:32\n    |\n-LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: Copy, Item: Copy>,\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:122:49\n+  --> $DIR/duplicate.rs:233:35\n    |\n-LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n-   |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: 'static, Item: 'static>,\n+   |                    -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:122:49\n+  --> $DIR/duplicate.rs:233:35\n    |\n-LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n-   |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: 'static, Item: 'static>,\n+   |                    -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:132:40\n+  --> $DIR/duplicate.rs:251:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:134:44\n+  --> $DIR/duplicate.rs:253:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:136:43\n+  --> $DIR/duplicate.rs:255:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:125:43\n+  --> $DIR/duplicate.rs:239:34\n    |\n-LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     type A: Iterator<Item: Copy, Item: Send>;\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:127:43\n+  --> $DIR/duplicate.rs:243:34\n    |\n-LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     type A: Iterator<Item: Copy, Item: Copy>;\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:129:46\n+  --> $DIR/duplicate.rs:247:37\n    |\n-LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n-   |                               -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     type A: Iterator<Item: 'static, Item: 'static>;\n+   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n \n-error: aborting due to 60 previous errors; 1 warning emitted\n+error: aborting due to 60 previous errors\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "81cd882e5d802cb9d5a74ce0d52c367602efca43", "filename": "src/test/ui/associated-type-bounds/duplicate.min_tait.stderr", "status": "modified", "additions": 177, "deletions": 177, "changes": 354, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,482 +1,482 @@\n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:10:36\n+  --> $DIR/duplicate.rs:9:36\n    |\n-LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n+LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> {\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:12:36\n+  --> $DIR/duplicate.rs:13:36\n    |\n-LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n+LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> {\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:14:39\n+  --> $DIR/duplicate.rs:17:39\n    |\n-LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n+LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> {\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:16:45\n+  --> $DIR/duplicate.rs:23:29\n    |\n-LL | struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-   |                                 ----------  ^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:18:45\n+  --> $DIR/duplicate.rs:30:29\n    |\n-LL | struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-   |                                 ----------  ^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:20:48\n+  --> $DIR/duplicate.rs:37:32\n    |\n-LL | struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-   |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:23:34\n+  --> $DIR/duplicate.rs:43:34\n    |\n-LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n+LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> {\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:25:34\n+  --> $DIR/duplicate.rs:47:34\n    |\n-LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n+LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> {\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:27:37\n+  --> $DIR/duplicate.rs:51:37\n    |\n-LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n+LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> {\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:29:43\n+  --> $DIR/duplicate.rs:57:29\n    |\n-LL | enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:31:43\n+  --> $DIR/duplicate.rs:64:29\n    |\n-LL | enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:33:46\n+  --> $DIR/duplicate.rs:71:32\n    |\n-LL | enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n-   |                               -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:36:35\n+  --> $DIR/duplicate.rs:77:35\n    |\n-LL | union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n+LL | union UI1<T: Iterator<Item: Copy, Item: Send>> {\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:38:35\n+  --> $DIR/duplicate.rs:81:35\n    |\n-LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n+LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> {\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:40:38\n+  --> $DIR/duplicate.rs:85:38\n    |\n-LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n+LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> {\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:42:44\n+  --> $DIR/duplicate.rs:91:29\n    |\n-LL | union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:44:44\n+  --> $DIR/duplicate.rs:98:29\n    |\n-LL | union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:46:47\n+  --> $DIR/duplicate.rs:105:32\n    |\n-LL | union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-   |                                -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:49:32\n+  --> $DIR/duplicate.rs:111:32\n    |\n LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:51:32\n+  --> $DIR/duplicate.rs:113:32\n    |\n LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:53:35\n+  --> $DIR/duplicate.rs:115:35\n    |\n LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:55:43\n+  --> $DIR/duplicate.rs:119:29\n    |\n-LL | fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:57:43\n+  --> $DIR/duplicate.rs:125:29\n    |\n-LL | fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:59:46\n+  --> $DIR/duplicate.rs:131:32\n    |\n-LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n-   |                               -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:65:40\n+  --> $DIR/duplicate.rs:145:40\n    |\n LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:67:40\n+  --> $DIR/duplicate.rs:147:40\n    |\n LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:69:43\n+  --> $DIR/duplicate.rs:149:43\n    |\n LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:72:35\n+  --> $DIR/duplicate.rs:152:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:74:35\n+  --> $DIR/duplicate.rs:154:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:76:38\n+  --> $DIR/duplicate.rs:156:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:78:44\n+  --> $DIR/duplicate.rs:160:29\n    |\n-LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:80:44\n+  --> $DIR/duplicate.rs:165:29\n    |\n-LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:82:47\n+  --> $DIR/duplicate.rs:170:32\n    |\n-LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n-   |                                -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:85:36\n+  --> $DIR/duplicate.rs:174:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:87:36\n+  --> $DIR/duplicate.rs:176:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:89:39\n+  --> $DIR/duplicate.rs:178:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:91:40\n+  --> $DIR/duplicate.rs:180:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:93:40\n+  --> $DIR/duplicate.rs:182:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:95:43\n+  --> $DIR/duplicate.rs:184:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:98:36\n+  --> $DIR/duplicate.rs:187:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:100:36\n+  --> $DIR/duplicate.rs:189:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:102:39\n+  --> $DIR/duplicate.rs:191:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:104:34\n+  --> $DIR/duplicate.rs:193:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:106:34\n+  --> $DIR/duplicate.rs:195:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:108:37\n+  --> $DIR/duplicate.rs:197:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:110:45\n+  --> $DIR/duplicate.rs:201:29\n    |\n-LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n-   |                                 ----------  ^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:112:45\n+  --> $DIR/duplicate.rs:207:29\n    |\n-LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n-   |                                 ----------  ^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:114:48\n+  --> $DIR/duplicate.rs:213:32\n    |\n-LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n-   |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:116:46\n+  --> $DIR/duplicate.rs:219:32\n    |\n-LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: Copy, Item: Send>,\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:116:46\n+  --> $DIR/duplicate.rs:219:32\n    |\n-LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: Copy, Item: Send>,\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:119:46\n+  --> $DIR/duplicate.rs:226:32\n    |\n-LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: Copy, Item: Copy>,\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:119:46\n+  --> $DIR/duplicate.rs:226:32\n    |\n-LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: Copy, Item: Copy>,\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:122:49\n+  --> $DIR/duplicate.rs:233:35\n    |\n-LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n-   |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: 'static, Item: 'static>,\n+   |                    -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:122:49\n+  --> $DIR/duplicate.rs:233:35\n    |\n-LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n-   |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: 'static, Item: 'static>,\n+   |                    -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:132:40\n+  --> $DIR/duplicate.rs:251:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:134:44\n+  --> $DIR/duplicate.rs:253:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:136:43\n+  --> $DIR/duplicate.rs:255:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:125:43\n+  --> $DIR/duplicate.rs:239:34\n    |\n-LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     type A: Iterator<Item: Copy, Item: Send>;\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:127:43\n+  --> $DIR/duplicate.rs:243:34\n    |\n-LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     type A: Iterator<Item: Copy, Item: Copy>;\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:129:46\n+  --> $DIR/duplicate.rs:247:37\n    |\n-LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n-   |                               -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     type A: Iterator<Item: 'static, Item: 'static>;\n+   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n \n error: aborting due to 60 previous errors\n "}, {"sha": "e1a2ab37a3a31d7f2c311639f7bc61d52a643e19", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 189, "deletions": 70, "changes": 259, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -2,66 +2,146 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n #![feature(untagged_unions)]\n \n use std::iter;\n \n-struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+struct SI1<T: Iterator<Item: Copy, Item: Send>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    f: T,\n+}\n+struct SI2<T: Iterator<Item: Copy, Item: Copy>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    f: T,\n+}\n+struct SI3<T: Iterator<Item: 'static, Item: 'static>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    f: T,\n+}\n+struct SW1<T>\n+where\n+    T: Iterator<Item: Copy, Item: Send>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    f: T,\n+}\n+struct SW2<T>\n+where\n+    T: Iterator<Item: Copy, Item: Copy>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    f: T,\n+}\n+struct SW3<T>\n+where\n+    T: Iterator<Item: 'static, Item: 'static>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    f: T,\n+}\n \n-enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+enum EI1<T: Iterator<Item: Copy, Item: Send>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    V(T),\n+}\n+enum EI2<T: Iterator<Item: Copy, Item: Copy>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    V(T),\n+}\n+enum EI3<T: Iterator<Item: 'static, Item: 'static>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    V(T),\n+}\n+enum EW1<T>\n+where\n+    T: Iterator<Item: Copy, Item: Send>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    V(T),\n+}\n+enum EW2<T>\n+where\n+    T: Iterator<Item: Copy, Item: Copy>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    V(T),\n+}\n+enum EW3<T>\n+where\n+    T: Iterator<Item: 'static, Item: 'static>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    V(T),\n+}\n \n-union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+union UI1<T: Iterator<Item: Copy, Item: Send>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    f: T,\n+}\n+union UI2<T: Iterator<Item: Copy, Item: Copy>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    f: T,\n+}\n+union UI3<T: Iterator<Item: 'static, Item: 'static>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    f: T,\n+}\n+union UW1<T>\n+where\n+    T: Iterator<Item: Copy, Item: Send>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    f: T,\n+}\n+union UW2<T>\n+where\n+    T: Iterator<Item: Copy, Item: Copy>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    f: T,\n+}\n+union UW3<T>\n+where\n+    T: Iterator<Item: 'static, Item: 'static>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    f: T,\n+}\n \n fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+fn FW1<T>()\n+where\n+    T: Iterator<Item: Copy, Item: Send>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n+fn FW2<T>()\n+where\n+    T: Iterator<Item: Copy, Item: Copy>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n+fn FW3<T>()\n+where\n+    T: Iterator<Item: 'static, Item: 'static>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n \n-fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> { iter::empty() }\n-fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> { iter::empty() }\n-fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> { iter::empty() }\n+fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> {\n+    iter::empty()\n+}\n+fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> {\n+    iter::empty()\n+}\n+fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> {\n+    iter::empty()\n+}\n fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n@@ -75,12 +155,21 @@ type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n+type TAW1<T>\n+where\n+    T: Iterator<Item: Copy, Item: Send>,\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n+= T;\n+type TAW2<T>\n+where\n+    T: Iterator<Item: Copy, Item: Copy>,\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n+= T;\n+type TAW3<T>\n+where\n+    T: Iterator<Item: 'static, Item: 'static>,\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+= T;\n \n type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n@@ -107,27 +196,57 @@ trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+trait TRW1<T>\n+where\n+    T: Iterator<Item: Copy, Item: Send>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n+trait TRW2<T>\n+where\n+    T: Iterator<Item: Copy, Item: Copy>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n+trait TRW3<T>\n+where\n+    T: Iterator<Item: 'static, Item: 'static>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n+trait TRSW1\n+where\n+    Self: Iterator<Item: Copy, Item: Send>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    //~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n+trait TRSW2\n+where\n+    Self: Iterator<Item: Copy, Item: Copy>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    //~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n+trait TRSW3\n+where\n+    Self: Iterator<Item: 'static, Item: 'static>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    //~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n+trait TRA1 {\n+    type A: Iterator<Item: Copy, Item: Send>;\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+}\n+trait TRA2 {\n+    type A: Iterator<Item: Copy, Item: Copy>;\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+}\n+trait TRA3 {\n+    type A: Iterator<Item: 'static, Item: 'static>;\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+}\n \n type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]"}, {"sha": "d4da4babf4e113a6cc80138b4168038511feb254", "filename": "src/test/ui/associated-type-bounds/trait-alias-impl-trait.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/trait-alias-impl-trait.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "9a9031043b652ce2044260380f8c5b73be4d38ee", "filename": "src/test/ui/associated-type-bounds/trait-alias-impl-trait.rs", "status": "modified", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -4,36 +4,58 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::ops::Add;\n \n-trait Tr1 { type As1; fn mk(self) -> Self::As1; }\n-trait Tr2<'a> { fn tr2(self) -> &'a Self; }\n+trait Tr1 {\n+    type As1;\n+    fn mk(self) -> Self::As1;\n+}\n+trait Tr2<'a> {\n+    fn tr2(self) -> &'a Self;\n+}\n \n-fn assert_copy<T: Copy>(x: T) { let _x = x; let _x = x; }\n+fn assert_copy<T: Copy>(x: T) {\n+    let _x = x;\n+    let _x = x;\n+}\n fn assert_static<T: 'static>(_: T) {}\n fn assert_forall_tr2<T: for<'a> Tr2<'a>>(_: T) {}\n \n struct S1;\n #[derive(Copy, Clone)]\n struct S2;\n-impl Tr1 for S1 { type As1 = S2; fn mk(self) -> Self::As1 { S2 } }\n+impl Tr1 for S1 {\n+    type As1 = S2;\n+    fn mk(self) -> Self::As1 {\n+        S2\n+    }\n+}\n \n type Et1 = impl Tr1<As1: Copy>;\n-fn def_et1() -> Et1 { S1 }\n-pub fn use_et1() { assert_copy(def_et1().mk()); }\n+fn def_et1() -> Et1 {\n+    S1\n+}\n+pub fn use_et1() {\n+    assert_copy(def_et1().mk());\n+}\n \n type Et2 = impl Tr1<As1: 'static>;\n-fn def_et2() -> Et2 { S1 }\n-pub fn use_et2() { assert_static(def_et2().mk()); }\n+fn def_et2() -> Et2 {\n+    S1\n+}\n+pub fn use_et2() {\n+    assert_static(def_et2().mk());\n+}\n \n type Et3 = impl Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>>;\n fn def_et3() -> Et3 {\n     struct A;\n     impl Tr1 for A {\n         type As1 = core::ops::Range<u8>;\n-        fn mk(self) -> Self::As1 { 0..10 }\n+        fn mk(self) -> Self::As1 {\n+            0..10\n+        }\n     }\n     A\n }\n@@ -53,14 +75,20 @@ fn def_et4() -> Et4 {\n     struct A;\n     impl Tr1 for A {\n         type As1 = A;\n-        fn mk(self) -> A { A }\n+        fn mk(self) -> A {\n+            A\n+        }\n     }\n     impl<'a> Tr2<'a> for A {\n-        fn tr2(self) -> &'a Self { &A }\n+        fn tr2(self) -> &'a Self {\n+            &A\n+        }\n     }\n     A\n }\n-pub fn use_et4() { assert_forall_tr2(def_et4().mk()); }\n+pub fn use_et4() {\n+    assert_forall_tr2(def_et4().mk());\n+}\n \n fn main() {\n     let _ = use_et1();"}, {"sha": "9857f7e2677a8daaf560fdfc0fc03081975651f3", "filename": "src/test/ui/associated-types/issue-63591.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-63591.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "04b688674960dfcb95e985d87bb390cb190b0821", "filename": "src/test/ui/associated-types/issue-63591.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -4,7 +4,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "cc61becd71b1f7c6b7f4838afa99a82a06ed9966", "filename": "src/test/ui/async-await/issues/issue-60655-latebound-regions.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-60655-latebound-regions.rs:8:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "c132d9b9d7dede5c75bb74339f4bc371e0da03d9", "filename": "src/test/ui/async-await/issues/issue-60655-latebound-regions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -6,7 +6,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::future::Future;\n "}, {"sha": "76314611fa217431e15600fe09734804be9d0886", "filename": "src/test/ui/generator/layout-error.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,18 +1,9 @@\n error[E0425]: cannot find value `Foo` in this scope\n-  --> $DIR/layout-error.rs:24:17\n+  --> $DIR/layout-error.rs:23:17\n    |\n LL |         let a = Foo;\n    |                 ^^^ not found in this scope\n \n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/layout-error.rs:8:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "09ff1abb8325f09ecfdef572ba3f094ab05094c8", "filename": "src/test/ui/generator/layout-error.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error[E0425]: cannot find value `Foo` in this scope\n-  --> $DIR/layout-error.rs:24:17\n+  --> $DIR/layout-error.rs:23:17\n    |\n LL |         let a = Foo;\n    |                 ^^^ not found in this scope\n \n error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/layout-error.rs:30:27\n+  --> $DIR/layout-error.rs:29:27\n    |\n LL |     Task::spawn(&POOL, || cb());\n    |                           ^"}, {"sha": "e8fd4f807e012370a80a296b26458b05cee81e29", "filename": "src/test/ui/generator/layout-error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -6,7 +6,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n use std::future::Future;\n \n pub struct Task<F: Future>(F);"}, {"sha": "4c70dc5e9581676f82069d95ffed3ea1350db20a", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,8 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/metadata-sufficient-for-layout.rs:10:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/metadata-sufficient-for-layout.rs:28:1\n+  --> $DIR/metadata-sufficient-for-layout.rs:27:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "4c70dc5e9581676f82069d95ffed3ea1350db20a", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/metadata-sufficient-for-layout.rs:28:1\n+  --> $DIR/metadata-sufficient-for-layout.rs:27:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^"}, {"sha": "50093987e4b5fec4e8fa64aae5ca89cb2470f4b8", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -8,7 +8,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait, rustc_attrs)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n #![feature(generator_trait)]\n \n extern crate metadata_sufficient_for_layout;"}, {"sha": "174c4c62da92ed94d5d485221a165bb2bfd851f7", "filename": "src/test/ui/impl-trait/associated-impl-trait-type-generic-trait.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/associated-impl-trait-type-generic-trait.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "fb816fb39e685de84093e9e8647c4a245d6e823d", "filename": "src/test/ui/impl-trait/associated-impl-trait-type-generic-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "e3dd4a60b4df7e9dd5e7f5cb50f9130539ea8583", "filename": "src/test/ui/impl-trait/associated-impl-trait-type-trivial.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/associated-impl-trait-type-trivial.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "57747b286bf914a7c098f012fa18f28002fceb63", "filename": "src/test/ui/impl-trait/associated-impl-trait-type-trivial.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "39147b00a346e800895019f38f01f7fda9b7b81b", "filename": "src/test/ui/impl-trait/associated-impl-trait-type.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/associated-impl-trait-type.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "39e98ebe665baa598f884df54b02e608d7efc43f", "filename": "src/test/ui/impl-trait/associated-impl-trait-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "3f25ca4b327f04dee887d4812fd3547e7a7dac3c", "filename": "src/test/ui/impl-trait/auto-trait.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,21 +1,12 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/auto-trait.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n-  --> $DIR/auto-trait.rs:24:1\n+  --> $DIR/auto-trait.rs:23:1\n    |\n LL | impl<T: Send> AnotherTrait for T {}\n    | -------------------------------- first implementation here\n ...\n LL | impl AnotherTrait for D<OpaqueType> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<impl OpaqueTrait>`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "3f25ca4b327f04dee887d4812fd3547e7a7dac3c", "filename": "src/test/ui/impl-trait/auto-trait.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n-  --> $DIR/auto-trait.rs:24:1\n+  --> $DIR/auto-trait.rs:23:1\n    |\n LL | impl<T: Send> AnotherTrait for T {}\n    | -------------------------------- first implementation here"}, {"sha": "59bd09e348a9f35f8475f2bcd87d771928c6f427", "filename": "src/test/ui/impl-trait/auto-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n trait OpaqueTrait {}\n impl<T> OpaqueTrait for T {}"}, {"sha": "94d73be195cf8e9aca329ebbce576b514c2cc408", "filename": "src/test/ui/impl-trait/issue-55872-1.full_tait.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-55872-1.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-55872-1.rs:17:5\n+  --> $DIR/issue-55872-1.rs:16:5\n    |\n LL |     fn foo<T>() -> Self::E;\n    |     ----------------------- definition of `foo` from trait\n@@ -17,7 +8,7 @@ LL |     fn foo<T: Default>() -> Self::E {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Default`\n \n error[E0277]: the trait bound `S: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:13:14\n+  --> $DIR/issue-55872-1.rs:12:14\n    |\n LL |     type E = impl Copy;\n    |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `S`\n@@ -29,7 +20,7 @@ LL | impl<S: Default + std::marker::Copy> Bar for S {\n    |                 ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:13:14\n+  --> $DIR/issue-55872-1.rs:12:14\n    |\n LL |     type E = impl Copy;\n    |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `T`\n@@ -41,7 +32,7 @@ LL |     fn foo<T: Default + std::marker::Copy>() -> Self::E {\n    |                       ^^^^^^^^^^^^^^^^^^^\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-1.rs:17:37\n+  --> $DIR/issue-55872-1.rs:16:37\n    |\n LL |       fn foo<T: Default>() -> Self::E {\n    |  _____________________________________^\n@@ -51,7 +42,7 @@ LL | |         (S::default(), T::default())\n LL | |     }\n    | |_____^\n \n-error: aborting due to 4 previous errors; 1 warning emitted\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0276, E0277.\n For more information about an error, try `rustc --explain E0276`."}, {"sha": "94d73be195cf8e9aca329ebbce576b514c2cc408", "filename": "src/test/ui/impl-trait/issue-55872-1.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-55872-1.rs:17:5\n+  --> $DIR/issue-55872-1.rs:16:5\n    |\n LL |     fn foo<T>() -> Self::E;\n    |     ----------------------- definition of `foo` from trait\n@@ -8,7 +8,7 @@ LL |     fn foo<T: Default>() -> Self::E {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Default`\n \n error[E0277]: the trait bound `S: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:13:14\n+  --> $DIR/issue-55872-1.rs:12:14\n    |\n LL |     type E = impl Copy;\n    |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `S`\n@@ -20,7 +20,7 @@ LL | impl<S: Default + std::marker::Copy> Bar for S {\n    |                 ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:13:14\n+  --> $DIR/issue-55872-1.rs:12:14\n    |\n LL |     type E = impl Copy;\n    |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `T`\n@@ -32,7 +32,7 @@ LL |     fn foo<T: Default + std::marker::Copy>() -> Self::E {\n    |                       ^^^^^^^^^^^^^^^^^^^\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-1.rs:17:37\n+  --> $DIR/issue-55872-1.rs:16:37\n    |\n LL |       fn foo<T: Default>() -> Self::E {\n    |  _____________________________________^"}, {"sha": "c6a331e58fee426e9498932bf60af579eee43dbc", "filename": "src/test/ui/impl-trait/issue-55872-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n pub trait Bar {\n     type E: Copy;"}, {"sha": "305e916c9a98bbc00b4e8cd4c0f6c3a82b803e36", "filename": "src/test/ui/impl-trait/issue-55872-2.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,20 +1,11 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-55872-2.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n-  --> $DIR/issue-55872-2.rs:16:14\n+  --> $DIR/issue-55872-2.rs:15:14\n    |\n LL |     type E = impl std::marker::Copy;\n    |              ^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:18:28\n+  --> $DIR/issue-55872-2.rs:17:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^\n@@ -23,6 +14,6 @@ LL | |         async {}\n LL | |     }\n    | |_____^\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "305e916c9a98bbc00b4e8cd4c0f6c3a82b803e36", "filename": "src/test/ui/impl-trait/issue-55872-2.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n-  --> $DIR/issue-55872-2.rs:16:14\n+  --> $DIR/issue-55872-2.rs:15:14\n    |\n LL |     type E = impl std::marker::Copy;\n    |              ^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:18:28\n+  --> $DIR/issue-55872-2.rs:17:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^"}, {"sha": "44839e5e845ae9ac80c85e78311a551410101e60", "filename": "src/test/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -4,7 +4,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n pub trait Bar {\n     type E: Copy;"}, {"sha": "3fffd09836b20e0b05e111d011c756fd42d72596", "filename": "src/test/ui/impl-trait/issue-55872.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-55872.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872.rs:16:28\n+  --> $DIR/issue-55872.rs:15:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^\n@@ -17,5 +8,5 @@ LL | |         || ()\n LL | |     }\n    | |_____^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "3fffd09836b20e0b05e111d011c756fd42d72596", "filename": "src/test/ui/impl-trait/issue-55872.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872.rs:16:28\n+  --> $DIR/issue-55872.rs:15:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^"}, {"sha": "049d61a425e392a24781d06d3edfbb1c31f2d3b7", "filename": "src/test/ui/impl-trait/issue-55872.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -2,7 +2,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n pub trait Bar {\n     type E: Copy;\n@@ -14,7 +13,7 @@ impl<S> Bar for S {\n     type E = impl Copy;\n \n     fn foo<T>() -> Self::E {\n-    //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+        //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n         || ()\n     }\n }"}, {"sha": "906578c291f16f60ddb7d51cbc955a4e8a9cd02b", "filename": "src/test/ui/impl-trait/issues/issue-53457.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-53457.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "c6d7be47dfe65e4f8c66944a20cb8a9000d27b03", "filename": "src/test/ui/impl-trait/issues/issue-53457.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n type X = impl Clone;\n "}, {"sha": "b446eae9c3f1e35f9684f1a379794c51ef70ab76", "filename": "src/test/ui/impl-trait/issues/issue-78722.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-78722.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0308]: mismatched types\n-  --> $DIR/issue-78722.rs:15:20\n+  --> $DIR/issue-78722.rs:14:20\n    |\n LL | type F = impl core::future::Future<Output = u8>;\n    |          -------------------------------------- the expected opaque type\n@@ -23,10 +14,10 @@ LL |         let f: F = async { 1 };\n LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           ------------------------------- the found opaque type\n    |\n-   = note: expected opaque type `impl Future` (opaque type at <$DIR/issue-78722.rs:8:10>)\n+   = note: expected opaque type `impl Future` (opaque type at <$DIR/issue-78722.rs:7:10>)\n               found opaque type `impl Future` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "b446eae9c3f1e35f9684f1a379794c51ef70ab76", "filename": "src/test/ui/impl-trait/issues/issue-78722.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-78722.rs:15:20\n+  --> $DIR/issue-78722.rs:14:20\n    |\n LL | type F = impl core::future::Future<Output = u8>;\n    |          -------------------------------------- the expected opaque type\n@@ -14,7 +14,7 @@ LL |         let f: F = async { 1 };\n LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           ------------------------------- the found opaque type\n    |\n-   = note: expected opaque type `impl Future` (opaque type at <$DIR/issue-78722.rs:8:10>)\n+   = note: expected opaque type `impl Future` (opaque type at <$DIR/issue-78722.rs:7:10>)\n               found opaque type `impl Future` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n "}, {"sha": "0b8569b6e5fa0c7179398a03d82df17f2fb196a7", "filename": "src/test/ui/impl-trait/issues/issue-78722.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n type F = impl core::future::Future<Output = u8>;\n "}, {"sha": "52ab9baff8b841f8811d7083ea11f11021e11b5a", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.full_tait.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,24 +1,15 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/error-handling-2.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/error-handling-2.rs:16:60\n+  --> $DIR/error-handling-2.rs:15:60\n    |\n LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |                                                            ^^^^^^^^^\n    |\n-note: hidden type `*mut &'a i32` captures the lifetime `'a` as defined on the function body at 16:8\n-  --> $DIR/error-handling-2.rs:16:8\n+note: hidden type `*mut &'a i32` captures the lifetime `'a` as defined on the function body at 15:8\n+  --> $DIR/error-handling-2.rs:15:8\n    |\n LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        ^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0700`."}, {"sha": "52ab9baff8b841f8811d7083ea11f11021e11b5a", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.min_tait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/error-handling-2.rs:16:60\n+  --> $DIR/error-handling-2.rs:15:60\n    |\n LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |                                                            ^^^^^^^^^\n    |\n-note: hidden type `*mut &'a i32` captures the lifetime `'a` as defined on the function body at 16:8\n-  --> $DIR/error-handling-2.rs:16:8\n+note: hidden type `*mut &'a i32` captures the lifetime `'a` as defined on the function body at 15:8\n+  --> $DIR/error-handling-2.rs:15:8\n    |\n LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        ^^"}, {"sha": "cfc493928c0796914a8423208a59401f2cfa3599", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -4,7 +4,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n #[derive(Clone)]\n struct CopyIfEq<T, U>(T, U);"}, {"sha": "cdcb7d7c38eec46f72b5be2f4bf550a871081dbe", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/error-handling.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: lifetime may not live long enough\n-  --> $DIR/error-handling.rs:25:16\n+  --> $DIR/error-handling.rs:24:16\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        --  -- lifetime `'b` defined here\n@@ -20,5 +11,5 @@ LL |         let _: &'b i32 = *u.0;\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "cdcb7d7c38eec46f72b5be2f4bf550a871081dbe", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/error-handling.rs:25:16\n+  --> $DIR/error-handling.rs:24:16\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        --  -- lifetime `'b` defined here"}, {"sha": "23d5c9da31138545db82802455d4ab66d2283d18", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n #[derive(Clone)]\n struct CopyIfEq<T, U>(T, U);"}, {"sha": "edecdd061e1a4915a4c09b5b4536074df28fd4be", "filename": "src/test/ui/impl-trait/negative-reasoning.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/negative-reasoning.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n-  --> $DIR/negative-reasoning.rs:22:1\n+  --> $DIR/negative-reasoning.rs:21:1\n    |\n LL | impl<T: std::fmt::Debug> AnotherTrait for T {}\n    | ------------------------------------------- first implementation here\n@@ -18,6 +9,6 @@ LL | impl AnotherTrait for D<OpaqueType> {\n    |\n    = note: upstream crates may add a new impl of trait `std::fmt::Debug` for type `impl OpaqueTrait` in future versions\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "edecdd061e1a4915a4c09b5b4536074df28fd4be", "filename": "src/test/ui/impl-trait/negative-reasoning.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n-  --> $DIR/negative-reasoning.rs:22:1\n+  --> $DIR/negative-reasoning.rs:21:1\n    |\n LL | impl<T: std::fmt::Debug> AnotherTrait for T {}\n    | ------------------------------------------- first implementation here"}, {"sha": "0838f32b932bf56d653ee5fde76fbc835bd3263f", "filename": "src/test/ui/impl-trait/negative-reasoning.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n trait OpaqueTrait {}\n impl<T> OpaqueTrait for T {}"}, {"sha": "965e3e4887bb25a15e92122a37a69b3b9ac0b0dd", "filename": "src/test/ui/impl-trait/type-alias-generic-param.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-alias-generic-param.rs:8:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "9cb9a6de2d6fc9db7bf88c6ba4e2db9f9d81171c", "filename": "src/test/ui/impl-trait/type-alias-generic-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -6,15 +6,15 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n trait Meow {\n     type MeowType;\n     fn meow(self) -> Self::MeowType;\n }\n \n impl<T, I> Meow for I\n-    where I: Iterator<Item = T>\n+where\n+    I: Iterator<Item = T>,\n {\n     type MeowType = impl Iterator<Item = T>;\n     fn meow(self) -> Self::MeowType {"}, {"sha": "ec939e5718a949ea693b52aa8c389f2f928f1ad1", "filename": "src/test/ui/impl-trait/type-alias-impl-trait-in-fn-body.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-alias-impl-trait-in-fn-body.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "996840dc1960a41ad8ef413b1281b04683449257", "filename": "src/test/ui/impl-trait/type-alias-impl-trait-in-fn-body.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "a448f85b7625dcdeb3eebe1424ae62620ccf2155", "filename": "src/test/ui/issues/issue-60662.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-60662.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "5079e33650f73262621288ba040a19ef759ea964", "filename": "src/test/ui/issues/issue-60662.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fissues%2Fissue-60662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fissues%2Fissue-60662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -4,10 +4,8 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n-trait Animal {\n-}\n+trait Animal {}\n \n fn main() {\n     pub type ServeFut = impl Animal;"}, {"sha": "d17c05ef298377c5311abeede9a26efde873efbf", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.full_tait.stderr", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,36 +1,27 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/inline-trait-and-foreign-items.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n warning: `#[inline]` is ignored on constants\n-  --> $DIR/inline-trait-and-foreign-items.rs:10:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:9:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/inline-trait-and-foreign-items.rs:7:9\n+  --> $DIR/inline-trait-and-foreign-items.rs:6:9\n    |\n LL | #![warn(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:14:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:13:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     type T;\n    |     ------- not a function or closure\n \n warning: `#[inline]` is ignored on constants\n-  --> $DIR/inline-trait-and-foreign-items.rs:21:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:20:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n@@ -39,43 +30,43 @@ LL |     #[inline]\n    = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:25:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:24:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     type T = Self;\n    |     -------------- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:28:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:27:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     type U = impl Trait;\n    |     -------------------- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:33:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:32:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     static X: u32;\n    |     -------------- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:36:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:35:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     type T;\n    |     ------- not a function or closure\n \n error: could not find defining uses\n-  --> $DIR/inline-trait-and-foreign-items.rs:29:14\n+  --> $DIR/inline-trait-and-foreign-items.rs:28:14\n    |\n LL |     type U = impl Trait;\n    |              ^^^^^^^^^^\n \n-error: aborting due to 6 previous errors; 3 warnings emitted\n+error: aborting due to 6 previous errors; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0518`."}, {"sha": "d17c05ef298377c5311abeede9a26efde873efbf", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.min_tait.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,27 +1,27 @@\n warning: `#[inline]` is ignored on constants\n-  --> $DIR/inline-trait-and-foreign-items.rs:10:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:9:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/inline-trait-and-foreign-items.rs:7:9\n+  --> $DIR/inline-trait-and-foreign-items.rs:6:9\n    |\n LL | #![warn(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:14:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:13:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     type T;\n    |     ------- not a function or closure\n \n warning: `#[inline]` is ignored on constants\n-  --> $DIR/inline-trait-and-foreign-items.rs:21:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:20:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n@@ -30,39 +30,39 @@ LL |     #[inline]\n    = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:25:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:24:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     type T = Self;\n    |     -------------- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:28:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:27:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     type U = impl Trait;\n    |     -------------------- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:33:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:32:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     static X: u32;\n    |     -------------- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:36:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:35:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     type T;\n    |     ------- not a function or closure\n \n error: could not find defining uses\n-  --> $DIR/inline-trait-and-foreign-items.rs:29:14\n+  --> $DIR/inline-trait-and-foreign-items.rs:28:14\n    |\n LL |     type U = impl Trait;\n    |              ^^^^^^^^^^"}, {"sha": "9d9579ec26c26409d2f006a196c9ab5f9f1e266a", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -2,7 +2,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n #![warn(unused_attributes)]\n "}, {"sha": "0e02b7bf4d9ae0e2318231f1644b4f411da94595", "filename": "src/test/ui/lint/lint-ctypes-73249-2.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,24 +1,15 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lint-ctypes-73249-2.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-2.rs:29:25\n+  --> $DIR/lint-ctypes-73249-2.rs:28:25\n    |\n LL |     pub fn lint_me() -> A<()>;\n    |                         ^^^^^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-2.rs:5:9\n+  --> $DIR/lint-ctypes-73249-2.rs:4:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n    = note: opaque types have no C equivalent\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "0e02b7bf4d9ae0e2318231f1644b4f411da94595", "filename": "src/test/ui/lint/lint-ctypes-73249-2.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-2.rs:29:25\n+  --> $DIR/lint-ctypes-73249-2.rs:28:25\n    |\n LL |     pub fn lint_me() -> A<()>;\n    |                         ^^^^^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-2.rs:5:9\n+  --> $DIR/lint-ctypes-73249-2.rs:4:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^"}, {"sha": "8535307756ba3351f34954118c4e655eace0f9c6", "filename": "src/test/ui/lint/lint-ctypes-73249-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,12 +1,11 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n #![deny(improper_ctypes)]\n \n-pub trait Baz { }\n+pub trait Baz {}\n \n-impl Baz for () { }\n+impl Baz for () {}\n \n type Qux = impl Baz;\n "}, {"sha": "60661e96ddf36206c11f9591f0837ec807fece53", "filename": "src/test/ui/lint/lint-ctypes-73249-3.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,24 +1,15 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lint-ctypes-73249-3.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-3.rs:21:25\n+  --> $DIR/lint-ctypes-73249-3.rs:22:25\n    |\n LL |     pub fn lint_me() -> A;\n    |                         ^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-3.rs:5:9\n+  --> $DIR/lint-ctypes-73249-3.rs:4:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n    = note: opaque types have no C equivalent\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "60661e96ddf36206c11f9591f0837ec807fece53", "filename": "src/test/ui/lint/lint-ctypes-73249-3.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-3.rs:21:25\n+  --> $DIR/lint-ctypes-73249-3.rs:22:25\n    |\n LL |     pub fn lint_me() -> A;\n    |                         ^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-3.rs:5:9\n+  --> $DIR/lint-ctypes-73249-3.rs:4:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^"}, {"sha": "287287d449cf5807c54a8cd2dfa996867005f0b8", "filename": "src/test/ui/lint/lint-ctypes-73249-3.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,16 +1,17 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n #![deny(improper_ctypes)]\n \n-pub trait Baz { }\n+pub trait Baz {}\n \n-impl Baz for u32 { }\n+impl Baz for u32 {}\n \n type Qux = impl Baz;\n \n-fn assign() -> Qux { 3 }\n+fn assign() -> Qux {\n+    3\n+}\n \n #[repr(C)]\n pub struct A {"}, {"sha": "aa1238a751212370ff679ab1a49bbb6a5690b68f", "filename": "src/test/ui/lint/lint-ctypes-73249-5.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,24 +1,15 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lint-ctypes-73249-5.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-5.rs:21:25\n+  --> $DIR/lint-ctypes-73249-5.rs:22:25\n    |\n LL |     pub fn lint_me() -> A;\n    |                         ^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-5.rs:5:9\n+  --> $DIR/lint-ctypes-73249-5.rs:4:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n    = note: opaque types have no C equivalent\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "aa1238a751212370ff679ab1a49bbb6a5690b68f", "filename": "src/test/ui/lint/lint-ctypes-73249-5.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-5.rs:21:25\n+  --> $DIR/lint-ctypes-73249-5.rs:22:25\n    |\n LL |     pub fn lint_me() -> A;\n    |                         ^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-5.rs:5:9\n+  --> $DIR/lint-ctypes-73249-5.rs:4:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^"}, {"sha": "b877364d9b6fd3b6eec349c2fc7ffe5fd1bd2d2d", "filename": "src/test/ui/lint/lint-ctypes-73249-5.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,16 +1,17 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n #![deny(improper_ctypes)]\n \n-pub trait Baz { }\n+pub trait Baz {}\n \n-impl Baz for u32 { }\n+impl Baz for u32 {}\n \n type Qux = impl Baz;\n \n-fn assign() -> Qux { 3 }\n+fn assign() -> Qux {\n+    3\n+}\n \n #[repr(transparent)]\n pub struct A {"}, {"sha": "33f2ee59577d37a70f586b98eb7d769350d70174", "filename": "src/test/ui/lint/lint-ctypes-73251-1.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,24 +1,15 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lint-ctypes-73251-1.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73251-1.rs:24:25\n+  --> $DIR/lint-ctypes-73251-1.rs:25:25\n    |\n LL |     pub fn lint_me() -> <u32 as Foo>::Assoc;\n    |                         ^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73251-1.rs:5:9\n+  --> $DIR/lint-ctypes-73251-1.rs:4:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n    = note: opaque types have no C equivalent\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "33f2ee59577d37a70f586b98eb7d769350d70174", "filename": "src/test/ui/lint/lint-ctypes-73251-1.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73251-1.rs:24:25\n+  --> $DIR/lint-ctypes-73251-1.rs:25:25\n    |\n LL |     pub fn lint_me() -> <u32 as Foo>::Assoc;\n    |                         ^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73251-1.rs:5:9\n+  --> $DIR/lint-ctypes-73251-1.rs:4:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^"}, {"sha": "042878c97780839e83a362129f472f50bdb7095d", "filename": "src/test/ui/lint/lint-ctypes-73251-1.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,12 +1,11 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n #![deny(improper_ctypes)]\n \n-pub trait Baz { }\n+pub trait Baz {}\n \n-impl Baz for u32 { }\n+impl Baz for u32 {}\n \n type Qux = impl Baz;\n \n@@ -18,7 +17,9 @@ impl Foo for u32 {\n     type Assoc = Qux;\n }\n \n-fn assign() -> Qux { 1 }\n+fn assign() -> Qux {\n+    1\n+}\n \n extern \"C\" {\n     pub fn lint_me() -> <u32 as Foo>::Assoc; //~ ERROR: uses type `impl Baz`"}, {"sha": "152aaa183e35ae75362ee1808e393f4c850e3f19", "filename": "src/test/ui/lint/lint-ctypes-73251-2.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,24 +1,15 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lint-ctypes-73251-2.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: `extern` block uses type `impl TraitA`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73251-2.rs:32:25\n+  --> $DIR/lint-ctypes-73251-2.rs:38:25\n    |\n LL |     pub fn lint_me() -> <AliasB as TraitB>::Assoc;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73251-2.rs:5:9\n+  --> $DIR/lint-ctypes-73251-2.rs:4:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n    = note: opaque types have no C equivalent\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "152aaa183e35ae75362ee1808e393f4c850e3f19", "filename": "src/test/ui/lint/lint-ctypes-73251-2.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl TraitA`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73251-2.rs:32:25\n+  --> $DIR/lint-ctypes-73251-2.rs:38:25\n    |\n LL |     pub fn lint_me() -> <AliasB as TraitB>::Assoc;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73251-2.rs:5:9\n+  --> $DIR/lint-ctypes-73251-2.rs:4:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^"}, {"sha": "5a124b2fea50e9ef875f3cc1f4a1b9d86be32303", "filename": "src/test/ui/lint/lint-ctypes-73251-2.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n #![deny(improper_ctypes)]\n \n pub trait TraitA {\n@@ -16,17 +15,24 @@ pub trait TraitB {\n     type Assoc;\n }\n \n-impl<T> TraitB for T where T: TraitA {\n+impl<T> TraitB for T\n+where\n+    T: TraitA,\n+{\n     type Assoc = <T as TraitA>::Assoc;\n }\n \n type AliasA = impl TraitA<Assoc = u32>;\n \n type AliasB = impl TraitB<Assoc = AliasA>;\n \n-fn use_of_a() -> AliasA { 3 }\n+fn use_of_a() -> AliasA {\n+    3\n+}\n \n-fn use_of_b() -> AliasB { 3 }\n+fn use_of_b() -> AliasB {\n+    3\n+}\n \n extern \"C\" {\n     pub fn lint_me() -> <AliasB as TraitB>::Assoc; //~ ERROR: uses type `impl TraitA`"}, {"sha": "577cf6cf5453c5d798b6bca2f18e5eda54cb89b9", "filename": "src/test/ui/lint/lint-ctypes-73251.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lint-ctypes-73251.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "24742b64f8e989981aee72ce3b13c7fd039f2dbe", "filename": "src/test/ui/lint/lint-ctypes-73251.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n #![deny(improper_ctypes)]\n \n pub trait Foo {"}, {"sha": "d7b916f8ad58a6bad3f07414f3914efd8831bba0", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,24 +1,15 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: `extern` block uses type `impl Fn<()>`, which is not FFI-safe\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:14:17\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:13:17\n    |\n LL |     pub fn a(_: A);\n    |                 ^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:5:9\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:4:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n    = note: opaque types have no C equivalent\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "d7b916f8ad58a6bad3f07414f3914efd8831bba0", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl Fn<()>`, which is not FFI-safe\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:14:17\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:13:17\n    |\n LL |     pub fn a(_: A);\n    |                 ^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:5:9\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:4:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^"}, {"sha": "0c9fed8b98c293aaf548f87f4bb034aa912e66aa", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n #![deny(improper_ctypes)]\n \n type A = impl Fn();\n@@ -12,7 +11,7 @@ pub fn ret_closure() -> A {\n \n extern \"C\" {\n     pub fn a(_: A);\n-//~^ ERROR `extern` block uses type `impl Fn<()>`, which is not FFI-safe\n+    //~^ ERROR `extern` block uses type `impl Fn<()>`, which is not FFI-safe\n }\n \n fn main() {}"}, {"sha": "e2a5b8876e3ec5a8eae79e7adbd2c8bc1ec7c5af", "filename": "src/test/ui/mir/issue-75053.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,8 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-75053.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-75053.rs:49:1\n+  --> $DIR/issue-75053.rs:48:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "e2a5b8876e3ec5a8eae79e7adbd2c8bc1ec7c5af", "filename": "src/test/ui/mir/issue-75053.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fmir%2Fissue-75053.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fmir%2Fissue-75053.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-75053.rs:49:1\n+  --> $DIR/issue-75053.rs:48:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^"}, {"sha": "bcd689775a092bb64af00487a006d1d7501dfd96", "filename": "src/test/ui/mir/issue-75053.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait, rustc_attrs)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::marker::PhantomData;\n "}, {"sha": "f1f95c72150f58af708708ca12ddf437ab9cfadb", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.full_tait.stderr", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/private-in-public-assoc-ty.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:20:9\n+  --> $DIR/private-in-public-assoc-ty.rs:19:9\n    |\n LL |     struct Priv;\n    |     ------------ `Priv` declared as private\n@@ -17,7 +8,7 @@ LL |         type A = Priv;\n    |         ^^^^^^^^^^^^^^ can't leak private type\n \n warning: private trait `PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-assoc-ty.rs:27:9\n+  --> $DIR/private-in-public-assoc-ty.rs:26:9\n    |\n LL |         type Alias1: PrivTr;\n    |         ^^^^^^^^^^^^^^^^^^^^\n@@ -27,7 +18,7 @@ LL |         type Alias1: PrivTr;\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:30:9\n+  --> $DIR/private-in-public-assoc-ty.rs:29:9\n    |\n LL |         type Alias2: PubTrAux1<Priv> = u8;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -36,7 +27,7 @@ LL |         type Alias2: PubTrAux1<Priv> = u8;\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:33:9\n+  --> $DIR/private-in-public-assoc-ty.rs:32:9\n    |\n LL |         type Alias3: PubTrAux2<A = Priv> = u8;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -45,7 +36,7 @@ LL |         type Alias3: PubTrAux2<A = Priv> = u8;\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:37:9\n+  --> $DIR/private-in-public-assoc-ty.rs:36:9\n    |\n LL |     struct Priv;\n    |     ------------ `Priv` declared as private\n@@ -54,7 +45,7 @@ LL |         type Alias4 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:44:9\n+  --> $DIR/private-in-public-assoc-ty.rs:43:9\n    |\n LL |     struct Priv;\n    |     ------------ `Priv` declared as private\n@@ -63,15 +54,15 @@ LL |         type Alias1 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0445]: private trait `PrivTr` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:47:9\n+  --> $DIR/private-in-public-assoc-ty.rs:46:9\n    |\n LL |     trait PrivTr {}\n    |     ------------ `PrivTr` declared as private\n ...\n LL |         type Exist = impl PrivTr;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n-error: aborting due to 4 previous errors; 4 warnings emitted\n+error: aborting due to 4 previous errors; 3 warnings emitted\n \n Some errors have detailed explanations: E0445, E0446.\n For more information about an error, try `rustc --explain E0445`."}, {"sha": "f1f95c72150f58af708708ca12ddf437ab9cfadb", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.min_tait.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:20:9\n+  --> $DIR/private-in-public-assoc-ty.rs:19:9\n    |\n LL |     struct Priv;\n    |     ------------ `Priv` declared as private\n@@ -8,7 +8,7 @@ LL |         type A = Priv;\n    |         ^^^^^^^^^^^^^^ can't leak private type\n \n warning: private trait `PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-assoc-ty.rs:27:9\n+  --> $DIR/private-in-public-assoc-ty.rs:26:9\n    |\n LL |         type Alias1: PrivTr;\n    |         ^^^^^^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL |         type Alias1: PrivTr;\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:30:9\n+  --> $DIR/private-in-public-assoc-ty.rs:29:9\n    |\n LL |         type Alias2: PubTrAux1<Priv> = u8;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -27,7 +27,7 @@ LL |         type Alias2: PubTrAux1<Priv> = u8;\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:33:9\n+  --> $DIR/private-in-public-assoc-ty.rs:32:9\n    |\n LL |         type Alias3: PubTrAux2<A = Priv> = u8;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -36,7 +36,7 @@ LL |         type Alias3: PubTrAux2<A = Priv> = u8;\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:37:9\n+  --> $DIR/private-in-public-assoc-ty.rs:36:9\n    |\n LL |     struct Priv;\n    |     ------------ `Priv` declared as private\n@@ -45,7 +45,7 @@ LL |         type Alias4 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:44:9\n+  --> $DIR/private-in-public-assoc-ty.rs:43:9\n    |\n LL |     struct Priv;\n    |     ------------ `Priv` declared as private\n@@ -54,7 +54,7 @@ LL |         type Alias1 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0445]: private trait `PrivTr` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:47:9\n+  --> $DIR/private-in-public-assoc-ty.rs:46:9\n    |\n LL |     trait PrivTr {}\n    |     ------------ `PrivTr` declared as private"}, {"sha": "dd2dcc6a2ea9508e9e58d61fd69b2b59800b8007", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -5,7 +5,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n mod m {\n     struct Priv;"}, {"sha": "c419c7ee4d44abdcc8c6a725588eb3643039e458", "filename": "src/test/ui/privacy/private-in-public-type-alias-impl-trait.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/private-in-public-type-alias-impl-trait.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "91dade4a2c1475284a3902b06272ee73c51e0d32", "filename": "src/test/ui/privacy/private-in-public-type-alias-impl-trait.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n #![deny(private_in_public)]\n \n pub type Pub = impl Default;\n@@ -22,7 +21,9 @@ pub trait Trait {\n \n impl Trait for u8 {\n     type Pub = impl Default;\n-    fn method() -> Self::Pub { Priv }\n+    fn method() -> Self::Pub {\n+        Priv\n+    }\n }\n \n fn main() {}"}, {"sha": "9206f68345017c79fbf26734528ae63147acff52", "filename": "src/test/ui/save-analysis/issue-68621.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,8 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-68621.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: could not find defining uses\n-  --> $DIR/issue-68621.rs:17:19\n+  --> $DIR/issue-68621.rs:16:19\n    |\n LL |     type Future = impl Trait;\n    |                   ^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "9206f68345017c79fbf26734528ae63147acff52", "filename": "src/test/ui/save-analysis/issue-68621.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error: could not find defining uses\n-  --> $DIR/issue-68621.rs:17:19\n+  --> $DIR/issue-68621.rs:16:19\n    |\n LL |     type Future = impl Trait;\n    |                   ^^^^^^^^^^"}, {"sha": "33bb55e50e0f9593e1fa5c056d79317439b86a94", "filename": "src/test/ui/save-analysis/issue-68621.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n trait Trait {}\n "}, {"sha": "ea214e70fc8b3756f645550d316bbc6a8696780f", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,19 +1,11 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/assoc-type-const.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/assoc-type-const.rs:9:12\n+  --> $DIR/assoc-type-const.rs:8:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n+   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-warning: 2 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "ea214e70fc8b3756f645550d316bbc6a8696780f", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/assoc-type-const.rs:9:12\n+  --> $DIR/assoc-type-const.rs:8:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^"}, {"sha": "4db32a3113c773096df4e56a406aff810a8e76ca", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -5,7 +5,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n "}, {"sha": "aaaeb9bd695e8cf2622f135bbf72d793eb150dfb", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,18 +1,9 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/assoc-type-lifetime-unconstrained.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/assoc-type-lifetime-unconstrained.rs:20:6\n+  --> $DIR/assoc-type-lifetime-unconstrained.rs:19:6\n    |\n LL | impl<'a, I> UnwrapItemsExt for I {\n    |      ^^ unconstrained lifetime parameter\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0207`."}, {"sha": "aaaeb9bd695e8cf2622f135bbf72d793eb150dfb", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/assoc-type-lifetime-unconstrained.rs:20:6\n+  --> $DIR/assoc-type-lifetime-unconstrained.rs:19:6\n    |\n LL | impl<'a, I> UnwrapItemsExt for I {\n    |      ^^ unconstrained lifetime parameter"}, {"sha": "cb849e129422feb5094fcc69349a9178d5e1a6c1", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -4,7 +4,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n trait UnwrapItemsExt {\n     type Iter;"}, {"sha": "31afbf14e658c65ec5b43cb66b6aa056ea0514d9", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/assoc-type-lifetime.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "28535fe55674aac7bce8d9457af875e6dc2b7fd2", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -5,7 +5,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n trait UnwrapItemsExt<'a> {\n     type Iter;"}, {"sha": "2c48d815e0de4118c38c4d3b2360f13fe278dc5e", "filename": "src/test/ui/type-alias-impl-trait/associated-type-alias-impl-trait.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/associated-type-alias-impl-trait.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "b9324991a5f0f557e3f45f264e75e1deb00a20d7", "filename": "src/test/ui/type-alias-impl-trait/associated-type-alias-impl-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "64bf96259f01eb07fbfe1ccbaf64f90938877ba4", "filename": "src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -4,7 +4,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n pub type Foo = impl std::fmt::Debug;\n "}, {"sha": "09aa2691804d6ce5f5cc35a426d02d5f6eaa0d8b", "filename": "src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -4,7 +4,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n pub trait View {\n     type Tmp: Iterator<Item = u32>;\n@@ -18,6 +17,6 @@ impl View for X {\n     type Tmp = impl Iterator<Item = u32>;\n \n     fn test(&self) -> Self::Tmp {\n-        vec![1,2,3].into_iter()\n+        vec![1, 2, 3].into_iter()\n     }\n }"}, {"sha": "b16d98ab72b77f429c2cf29fd4747740872985fe", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,23 +1,14 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bound_reduction2.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: non-defining opaque type use in defining scope\n-  --> $DIR/bound_reduction2.rs:18:46\n+  --> $DIR/bound_reduction2.rs:17:46\n    |\n LL | fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n    |                                              ^^^^^^^^^^^^^\n    |\n note: used non-generic type `<T as TraitWithAssoc>::Assoc` for generic parameter\n-  --> $DIR/bound_reduction2.rs:12:10\n+  --> $DIR/bound_reduction2.rs:11:10\n    |\n LL | type Foo<V> = impl Trait<V>;\n    |          ^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "b16d98ab72b77f429c2cf29fd4747740872985fe", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/bound_reduction2.rs:18:46\n+  --> $DIR/bound_reduction2.rs:17:46\n    |\n LL | fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n    |                                              ^^^^^^^^^^^^^\n    |\n note: used non-generic type `<T as TraitWithAssoc>::Assoc` for generic parameter\n-  --> $DIR/bound_reduction2.rs:12:10\n+  --> $DIR/bound_reduction2.rs:11:10\n    |\n LL | type Foo<V> = impl Trait<V>;\n    |          ^"}, {"sha": "3e56d115b474aacf9c7f2307b24e59e550beaa59", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "a0099e343b8558867258e91cbbe7ba1193ee1b31", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bounds-are-checked-2.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0277]: the trait bound `T: Clone` is not satisfied\n-  --> $DIR/bounds-are-checked-2.rs:9:13\n+  --> $DIR/bounds-are-checked-2.rs:8:13\n    |\n LL | type X<T> = impl Clone;\n    |             ^^^^^^^^^^ the trait `Clone` is not implemented for `T`\n@@ -18,6 +9,6 @@ help: consider restricting type parameter `T`\n LL | type X<T: std::clone::Clone> = impl Clone;\n    |         ^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "a0099e343b8558867258e91cbbe7ba1193ee1b31", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `T: Clone` is not satisfied\n-  --> $DIR/bounds-are-checked-2.rs:9:13\n+  --> $DIR/bounds-are-checked-2.rs:8:13\n    |\n LL | type X<T> = impl Clone;\n    |             ^^^^^^^^^^ the trait `Clone` is not implemented for `T`"}, {"sha": "5ffcd7ae546014ce55cc70c3dd24a8e2654e981b", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -4,7 +4,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n type X<T> = impl Clone;\n //~^ ERROR the trait bound `T: Clone` is not satisfied"}, {"sha": "ec15474bf8498b2baf0a81476401594bc1053ec0", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.full_tait.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,35 +1,26 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bounds-are-checked.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/bounds-are-checked.rs:12:6\n+  --> $DIR/bounds-are-checked.rs:11:6\n    |\n LL | fn f<'a: 'static>(t: &'a str) -> X<'a> {\n    |      ^^^^^^^^^^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n \n error[E0308]: mismatched types\n-  --> $DIR/bounds-are-checked.rs:9:14\n+  --> $DIR/bounds-are-checked.rs:8:14\n    |\n LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected trait `From<&'a str>`\n               found trait `From<&'static str>`\n-note: the lifetime `'a` as defined on the item at 9:8...\n-  --> $DIR/bounds-are-checked.rs:9:8\n+note: the lifetime `'a` as defined on the item at 8:8...\n+  --> $DIR/bounds-are-checked.rs:8:8\n    |\n LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n    |        ^^\n    = note: ...does not necessarily outlive the static lifetime\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "ec15474bf8498b2baf0a81476401594bc1053ec0", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,21 +1,21 @@\n warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/bounds-are-checked.rs:12:6\n+  --> $DIR/bounds-are-checked.rs:11:6\n    |\n LL | fn f<'a: 'static>(t: &'a str) -> X<'a> {\n    |      ^^^^^^^^^^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n \n error[E0308]: mismatched types\n-  --> $DIR/bounds-are-checked.rs:9:14\n+  --> $DIR/bounds-are-checked.rs:8:14\n    |\n LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected trait `From<&'a str>`\n               found trait `From<&'static str>`\n-note: the lifetime `'a` as defined on the item at 9:8...\n-  --> $DIR/bounds-are-checked.rs:9:8\n+note: the lifetime `'a` as defined on the item at 8:8...\n+  --> $DIR/bounds-are-checked.rs:8:8\n    |\n LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n    |        ^^"}, {"sha": "74c49a9c6c7ff275002ce934fba2c23df0a514df", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -4,7 +4,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n type X<'a> = impl Into<&'static str> + From<&'a str>;\n //~^ ERROR mismatched types\n@@ -19,8 +18,7 @@ fn extend_lt<'a>(o: &'a str) -> &'static str {\n }\n \n fn main() {\n-    let r =\n-    {\n+    let r = {\n         let s = \"abcdef\".to_string();\n         extend_lt(&s)\n     };"}, {"sha": "4d7335cd865248b8af56060fb5a3183ca541f8c7", "filename": "src/test/ui/type-alias-impl-trait/coherence.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,18 +1,9 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/coherence.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/coherence.rs:17:6\n+  --> $DIR/coherence.rs:16:6\n    |\n LL | impl<T> foreign_crate::ForeignTrait for AliasOfForeignType<T> {}\n    |      ^ unconstrained type parameter\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0207`."}, {"sha": "4d7335cd865248b8af56060fb5a3183ca541f8c7", "filename": "src/test/ui/type-alias-impl-trait/coherence.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/coherence.rs:17:6\n+  --> $DIR/coherence.rs:16:6\n    |\n LL | impl<T> foreign_crate::ForeignTrait for AliasOfForeignType<T> {}\n    |      ^ unconstrained type parameter"}, {"sha": "998eadeb2717c95f1727ab3cc26380b4cf327ad9", "filename": "src/test/ui/type-alias-impl-trait/coherence.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -2,7 +2,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n extern crate foreign_crate;\n "}, {"sha": "83019772afcb95dd8bbc5b5fc3c3d93c2081999d", "filename": "src/test/ui/type-alias-impl-trait/declared_but_never_defined.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,8 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/declared_but_never_defined.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: could not find defining uses\n-  --> $DIR/declared_but_never_defined.rs:9:12\n+  --> $DIR/declared_but_never_defined.rs:8:12\n    |\n LL | type Bar = impl std::fmt::Debug;\n    |            ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "83019772afcb95dd8bbc5b5fc3c3d93c2081999d", "filename": "src/test/ui/type-alias-impl-trait/declared_but_never_defined.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error: could not find defining uses\n-  --> $DIR/declared_but_never_defined.rs:9:12\n+  --> $DIR/declared_but_never_defined.rs:8:12\n    |\n LL | type Bar = impl std::fmt::Debug;\n    |            ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a62ae2aff70b4c4fc61b0a7dd9bd64f56912cea7", "filename": "src/test/ui/type-alias-impl-trait/declared_but_never_defined.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "b3301a0ee4c4bc81c5254b07139e51e81aa4a5e2", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,20 +1,11 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/declared_but_not_defined_in_scope.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: could not find defining uses\n-  --> $DIR/declared_but_not_defined_in_scope.rs:10:20\n+  --> $DIR/declared_but_not_defined_in_scope.rs:9:20\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/declared_but_not_defined_in_scope.rs:14:5\n+  --> $DIR/declared_but_not_defined_in_scope.rs:13:5\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ---------------------- the expected opaque type\n@@ -27,6 +18,6 @@ LL |     \"\"\n    = note: expected opaque type `impl Debug`\n                 found reference `&'static str`\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "b3301a0ee4c4bc81c5254b07139e51e81aa4a5e2", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: could not find defining uses\n-  --> $DIR/declared_but_not_defined_in_scope.rs:10:20\n+  --> $DIR/declared_but_not_defined_in_scope.rs:9:20\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/declared_but_not_defined_in_scope.rs:14:5\n+  --> $DIR/declared_but_not_defined_in_scope.rs:13:5\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ---------------------- the expected opaque type"}, {"sha": "0ada4a38da3fbf3cdd250c9a886c52366b3701dc", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "23c5f9587cc0785a4ab7c40ba6a0564aa788202b", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,23 +1,14 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/different_defining_uses.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses.rs:15:1\n+  --> $DIR/different_defining_uses.rs:14:1\n    |\n LL | fn bar() -> Foo {\n    | ^^^^^^^^^^^^^^^ expected `&'static str`, got `i32`\n    |\n note: previous use here\n-  --> $DIR/different_defining_uses.rs:11:1\n+  --> $DIR/different_defining_uses.rs:10:1\n    |\n LL | fn foo() -> Foo {\n    | ^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "23c5f9587cc0785a4ab7c40ba6a0564aa788202b", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses.rs:15:1\n+  --> $DIR/different_defining_uses.rs:14:1\n    |\n LL | fn bar() -> Foo {\n    | ^^^^^^^^^^^^^^^ expected `&'static str`, got `i32`\n    |\n note: previous use here\n-  --> $DIR/different_defining_uses.rs:11:1\n+  --> $DIR/different_defining_uses.rs:10:1\n    |\n LL | fn foo() -> Foo {\n    | ^^^^^^^^^^^^^^^"}, {"sha": "bb981959b2200821a729f5cc72e359cbbabca87a", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n fn main() {}\n \n@@ -12,6 +11,7 @@ fn foo() -> Foo {\n     \"\"\n }\n \n-fn bar() -> Foo { //~ ERROR concrete type differs from previous\n+fn bar() -> Foo {\n+    //~^ ERROR concrete type differs from previous\n     42i32\n }"}, {"sha": "7b7906f58acaff83a35fbe2647f9bfd905c2ad1b", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.full_tait.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,20 +1,11 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/different_defining_uses_never_type.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses_never_type.rs:15:1\n+  --> $DIR/different_defining_uses_never_type.rs:14:1\n    |\n LL | fn bar() -> Foo {\n    | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n    |\n note: previous use here\n-  --> $DIR/different_defining_uses_never_type.rs:11:1\n+  --> $DIR/different_defining_uses_never_type.rs:10:1\n    |\n LL | fn foo() -> Foo {\n    | ^^^^^^^^^^^^^^^\n@@ -26,10 +17,10 @@ LL | fn boo() -> Foo {\n    | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n    |\n note: previous use here\n-  --> $DIR/different_defining_uses_never_type.rs:11:1\n+  --> $DIR/different_defining_uses_never_type.rs:10:1\n    |\n LL | fn foo() -> Foo {\n    | ^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n "}, {"sha": "7b7906f58acaff83a35fbe2647f9bfd905c2ad1b", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.min_tait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses_never_type.rs:15:1\n+  --> $DIR/different_defining_uses_never_type.rs:14:1\n    |\n LL | fn bar() -> Foo {\n    | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n    |\n note: previous use here\n-  --> $DIR/different_defining_uses_never_type.rs:11:1\n+  --> $DIR/different_defining_uses_never_type.rs:10:1\n    |\n LL | fn foo() -> Foo {\n    | ^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL | fn boo() -> Foo {\n    | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n    |\n note: previous use here\n-  --> $DIR/different_defining_uses_never_type.rs:11:1\n+  --> $DIR/different_defining_uses_never_type.rs:10:1\n    |\n LL | fn foo() -> Foo {\n    | ^^^^^^^^^^^^^^^"}, {"sha": "716c7383c6115a03a952df98728734179aa1241f", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n fn main() {}\n \n@@ -12,10 +11,12 @@ fn foo() -> Foo {\n     \"\"\n }\n \n-fn bar() -> Foo { //~ ERROR concrete type differs from previous\n+fn bar() -> Foo {\n+    //~^ ERROR concrete type differs from previous\n     panic!()\n }\n \n-fn boo() -> Foo { //~ ERROR concrete type differs from previous\n+fn boo() -> Foo {\n+    //~^ ERROR concrete type differs from previous\n     loop {}\n }"}, {"sha": "b69622b77bfc49ea3d4070acf1bdcf17bce382c3", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/different_defining_uses_never_type2.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "8383f38ddbec0949f3ffc34c4c806a78454a3116", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "9641d756cb03e746fbed5ee342dfae3f2ebd3ff5", "filename": "src/test/ui/type-alias-impl-trait/fallback.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/fallback.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "204dc0496ede915b7f9d0a6ddbba6a63cfdde621", "filename": "src/test/ui/type-alias-impl-trait/fallback.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -5,7 +5,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n type Foo = impl Copy;\n "}, {"sha": "749530d8f327dec123c9ae3ec6ad644d31533b2b", "filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,23 +1,14 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_different_defining_uses.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_different_defining_uses.rs:14:1\n+  --> $DIR/generic_different_defining_uses.rs:13:1\n    |\n LL | fn my_iter2<T>(t: T) -> MyIter<T> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `std::iter::Once<T>`, got `std::option::IntoIter<T>`\n    |\n note: previous use here\n-  --> $DIR/generic_different_defining_uses.rs:10:1\n+  --> $DIR/generic_different_defining_uses.rs:9:1\n    |\n LL | fn my_iter<T>(t: T) -> MyIter<T> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "749530d8f327dec123c9ae3ec6ad644d31533b2b", "filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_different_defining_uses.rs:14:1\n+  --> $DIR/generic_different_defining_uses.rs:13:1\n    |\n LL | fn my_iter2<T>(t: T) -> MyIter<T> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `std::iter::Once<T>`, got `std::option::IntoIter<T>`\n    |\n note: previous use here\n-  --> $DIR/generic_different_defining_uses.rs:10:1\n+  --> $DIR/generic_different_defining_uses.rs:9:1\n    |\n LL | fn my_iter<T>(t: T) -> MyIter<T> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "adf4c1f86563b51be12a7427a5527160bbb31a41", "filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n fn main() {}\n \n@@ -11,6 +10,7 @@ fn my_iter<T>(t: T) -> MyIter<T> {\n     std::iter::once(t)\n }\n \n-fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR concrete type differs from previous\n+fn my_iter2<T>(t: T) -> MyIter<T> {\n+    //~^ ERROR concrete type differs from previous\n     Some(t).into_iter()\n }"}, {"sha": "3dedb223309459319a8d09caa8331e4cb78346c2", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,23 +1,14 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_lifetime_param.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_lifetime_param.rs:10:26\n+  --> $DIR/generic_duplicate_lifetime_param.rs:9:26\n    |\n LL | fn one<'a>(t: &'a ()) -> Two<'a, 'a> {\n    |                          ^^^^^^^^^^^\n    |\n note: lifetime used multiple times\n-  --> $DIR/generic_duplicate_lifetime_param.rs:8:10\n+  --> $DIR/generic_duplicate_lifetime_param.rs:7:10\n    |\n LL | type Two<'a, 'b> = impl std::fmt::Debug;\n    |          ^^  ^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "3dedb223309459319a8d09caa8331e4cb78346c2", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_lifetime_param.rs:10:26\n+  --> $DIR/generic_duplicate_lifetime_param.rs:9:26\n    |\n LL | fn one<'a>(t: &'a ()) -> Two<'a, 'a> {\n    |                          ^^^^^^^^^^^\n    |\n note: lifetime used multiple times\n-  --> $DIR/generic_duplicate_lifetime_param.rs:8:10\n+  --> $DIR/generic_duplicate_lifetime_param.rs:7:10\n    |\n LL | type Two<'a, 'b> = impl std::fmt::Debug;\n    |          ^^  ^^"}, {"sha": "f0b80db2a8312c3e7595b107dcfcd1b1f1c04fe8", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,12 +1,12 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n fn main() {}\n \n type Two<'a, 'b> = impl std::fmt::Debug;\n \n-fn one<'a>(t: &'a ()) -> Two<'a, 'a> { //~ ERROR non-defining opaque type use\n+fn one<'a>(t: &'a ()) -> Two<'a, 'a> {\n+    //~^ ERROR non-defining opaque type use\n     t\n }"}, {"sha": "ef7d4f1be4eea98e6a104b95b568d251bddff994", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use10.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use10.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "afd2be2674588a3f3248dd065b18cb21338496bc", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use10.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -2,7 +2,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "44bcdb7bf830c8a9f237cd1dd00ba62063ec4daa", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,23 +1,14 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use2.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use2.rs:13:27\n+  --> $DIR/generic_duplicate_param_use2.rs:12:27\n    |\n LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n    |                           ^^^^^^^^^\n    |\n note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use2.rs:11:10\n+  --> $DIR/generic_duplicate_param_use2.rs:10:10\n    |\n LL | type Two<T, U> = impl Debug;\n    |          ^  ^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "44bcdb7bf830c8a9f237cd1dd00ba62063ec4daa", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use2.rs:13:27\n+  --> $DIR/generic_duplicate_param_use2.rs:12:27\n    |\n LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n    |                           ^^^^^^^^^\n    |\n note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use2.rs:11:10\n+  --> $DIR/generic_duplicate_param_use2.rs:10:10\n    |\n LL | type Two<T, U> = impl Debug;\n    |          ^  ^"}, {"sha": "9627689b15c3cea6da900aa3f57bef152bd32e65", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "0185afc76bcc4c232821797559327627512b50ec", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,23 +1,14 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use3.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use3.rs:13:27\n+  --> $DIR/generic_duplicate_param_use3.rs:12:27\n    |\n LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n    |                           ^^^^^^^^^\n    |\n note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use3.rs:11:10\n+  --> $DIR/generic_duplicate_param_use3.rs:10:10\n    |\n LL | type Two<T, U> = impl Debug;\n    |          ^  ^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "0185afc76bcc4c232821797559327627512b50ec", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use3.rs:13:27\n+  --> $DIR/generic_duplicate_param_use3.rs:12:27\n    |\n LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n    |                           ^^^^^^^^^\n    |\n note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use3.rs:11:10\n+  --> $DIR/generic_duplicate_param_use3.rs:10:10\n    |\n LL | type Two<T, U> = impl Debug;\n    |          ^  ^"}, {"sha": "04d00600c93975c6b5b95aaa6c03cbf663b35b7b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "504116e87d297d67412c3236c66ee78c9bdfbccc", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,23 +1,14 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use4.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use4.rs:13:27\n+  --> $DIR/generic_duplicate_param_use4.rs:12:27\n    |\n LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n    |                           ^^^^^^^^^\n    |\n note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use4.rs:11:10\n+  --> $DIR/generic_duplicate_param_use4.rs:10:10\n    |\n LL | type Two<T, U> = impl Debug;\n    |          ^  ^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "504116e87d297d67412c3236c66ee78c9bdfbccc", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use4.rs:13:27\n+  --> $DIR/generic_duplicate_param_use4.rs:12:27\n    |\n LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n    |                           ^^^^^^^^^\n    |\n note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use4.rs:11:10\n+  --> $DIR/generic_duplicate_param_use4.rs:10:10\n    |\n LL | type Two<T, U> = impl Debug;\n    |          ^  ^"}, {"sha": "0d2979626ac4639d97095fa0a92b5caf4539840c", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n \n@@ -11,7 +10,7 @@ fn main() {}\n type Two<T, U> = impl Debug;\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n-//~^ ERROR non-defining opaque type use in defining scope\n+    //~^ ERROR non-defining opaque type use in defining scope\n     t\n }\n "}, {"sha": "7417112ca8aab6725e5efdf67d38dda259896780", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.full_tait.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,26 +1,17 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use5.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use5.rs:19:1\n+  --> $DIR/generic_duplicate_param_use5.rs:18:1\n    |\n LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, U)`, got `(U, T)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use5.rs:15:1\n+  --> $DIR/generic_duplicate_param_use5.rs:14:1\n    |\n LL | fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use5.rs:11:18\n+  --> $DIR/generic_duplicate_param_use5.rs:10:18\n    |\n LL | type Two<T, U> = impl Debug;\n    |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n@@ -32,7 +23,7 @@ LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n    |           ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use5.rs:11:18\n+  --> $DIR/generic_duplicate_param_use5.rs:10:18\n    |\n LL | type Two<T, U> = impl Debug;\n    |                  ^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n@@ -43,6 +34,6 @@ help: consider restricting type parameter `U`\n LL | type Two<T, U: std::fmt::Debug> = impl Debug;\n    |              ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "7417112ca8aab6725e5efdf67d38dda259896780", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,17 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use5.rs:19:1\n+  --> $DIR/generic_duplicate_param_use5.rs:18:1\n    |\n LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, U)`, got `(U, T)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use5.rs:15:1\n+  --> $DIR/generic_duplicate_param_use5.rs:14:1\n    |\n LL | fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use5.rs:11:18\n+  --> $DIR/generic_duplicate_param_use5.rs:10:18\n    |\n LL | type Two<T, U> = impl Debug;\n    |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n@@ -23,7 +23,7 @@ LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n    |           ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use5.rs:11:18\n+  --> $DIR/generic_duplicate_param_use5.rs:10:18\n    |\n LL | type Two<T, U> = impl Debug;\n    |                  ^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`"}, {"sha": "30ed7557c9768841ecf3c26f45f8dbe27235e47e", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "abadba0522c4cf79038463aa3eaa121ea218ef17", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.full_tait.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,26 +1,17 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use6.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use6.rs:18:1\n+  --> $DIR/generic_duplicate_param_use6.rs:17:1\n    |\n LL | fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, T)`, got `(U, T)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use6.rs:14:1\n+  --> $DIR/generic_duplicate_param_use6.rs:13:1\n    |\n LL | fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use6.rs:11:18\n+  --> $DIR/generic_duplicate_param_use6.rs:10:18\n    |\n LL | type Two<T, U> = impl Debug;\n    |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n@@ -31,6 +22,6 @@ help: consider restricting type parameter `T`\n LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n    |           ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "abadba0522c4cf79038463aa3eaa121ea218ef17", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.min_tait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,17 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use6.rs:18:1\n+  --> $DIR/generic_duplicate_param_use6.rs:17:1\n    |\n LL | fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, T)`, got `(U, T)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use6.rs:14:1\n+  --> $DIR/generic_duplicate_param_use6.rs:13:1\n    |\n LL | fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use6.rs:11:18\n+  --> $DIR/generic_duplicate_param_use6.rs:10:18\n    |\n LL | type Two<T, U> = impl Debug;\n    |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`"}, {"sha": "04644f1e18b9992ed183f7031883fbfbd5ce21e8", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "d80c8326ad6c6de3299ef082c026e54e52df1a7e", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use7.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use7.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "df12882abada704c1058a7c69542d2ab501fcd0d", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use7.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -2,7 +2,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "509ee95db30c684f2112abbda1c9bad7da447b4f", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.full_tait.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,26 +1,17 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use8.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use8.rs:17:1\n+  --> $DIR/generic_duplicate_param_use8.rs:16:1\n    |\n LL | fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, u32)`, got `(U, u32)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use8.rs:13:1\n+  --> $DIR/generic_duplicate_param_use8.rs:12:1\n    |\n LL | fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use8.rs:10:18\n+  --> $DIR/generic_duplicate_param_use8.rs:9:18\n    |\n LL | type Two<T, U> = impl Debug;\n    |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n@@ -31,6 +22,6 @@ help: consider restricting type parameter `T`\n LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n    |           ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "509ee95db30c684f2112abbda1c9bad7da447b4f", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.min_tait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,17 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use8.rs:17:1\n+  --> $DIR/generic_duplicate_param_use8.rs:16:1\n    |\n LL | fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, u32)`, got `(U, u32)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use8.rs:13:1\n+  --> $DIR/generic_duplicate_param_use8.rs:12:1\n    |\n LL | fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use8.rs:10:18\n+  --> $DIR/generic_duplicate_param_use8.rs:9:18\n    |\n LL | type Two<T, U> = impl Debug;\n    |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`"}, {"sha": "283e0c1d660eb0ec6b1e4965428d1e3adc55028f", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "3454dc44e0184f6d49248dd336aac1ee9a4b7260", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.full_tait.stderr", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,26 +1,17 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use9.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use9.rs:24:1\n+  --> $DIR/generic_duplicate_param_use9.rs:23:1\n    |\n LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(A, B, <A as Foo>::Bar)`, got `(A, B, i32)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use9.rs:20:1\n+  --> $DIR/generic_duplicate_param_use9.rs:19:1\n    |\n LL | fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n-  --> $DIR/generic_duplicate_param_use9.rs:10:18\n+  --> $DIR/generic_duplicate_param_use9.rs:9:18\n    |\n LL | type Two<A, B> = impl Debug;\n    |                  ^^^^^^^^^^ within `(A, B, <A as Foo>::Bar)`, the trait `Foo` is not implemented for `A`\n@@ -32,7 +23,7 @@ LL | type Two<A: Foo, B> = impl Debug;\n    |           ^^^^^\n \n error[E0277]: `A` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use9.rs:10:18\n+  --> $DIR/generic_duplicate_param_use9.rs:9:18\n    |\n LL | type Two<A, B> = impl Debug;\n    |                  ^^^^^^^^^^ `A` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n@@ -44,7 +35,7 @@ LL | type Two<A: std::fmt::Debug, B> = impl Debug;\n    |           ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `B` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use9.rs:10:18\n+  --> $DIR/generic_duplicate_param_use9.rs:9:18\n    |\n LL | type Two<A, B> = impl Debug;\n    |                  ^^^^^^^^^^ `B` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n@@ -55,6 +46,6 @@ help: consider restricting type parameter `B`\n LL | type Two<A, B: std::fmt::Debug> = impl Debug;\n    |              ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors; 1 warning emitted\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "3454dc44e0184f6d49248dd336aac1ee9a4b7260", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.min_tait.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,17 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use9.rs:24:1\n+  --> $DIR/generic_duplicate_param_use9.rs:23:1\n    |\n LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(A, B, <A as Foo>::Bar)`, got `(A, B, i32)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use9.rs:20:1\n+  --> $DIR/generic_duplicate_param_use9.rs:19:1\n    |\n LL | fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n-  --> $DIR/generic_duplicate_param_use9.rs:10:18\n+  --> $DIR/generic_duplicate_param_use9.rs:9:18\n    |\n LL | type Two<A, B> = impl Debug;\n    |                  ^^^^^^^^^^ within `(A, B, <A as Foo>::Bar)`, the trait `Foo` is not implemented for `A`\n@@ -23,7 +23,7 @@ LL | type Two<A: Foo, B> = impl Debug;\n    |           ^^^^^\n \n error[E0277]: `A` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use9.rs:10:18\n+  --> $DIR/generic_duplicate_param_use9.rs:9:18\n    |\n LL | type Two<A, B> = impl Debug;\n    |                  ^^^^^^^^^^ `A` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n@@ -35,7 +35,7 @@ LL | type Two<A: std::fmt::Debug, B> = impl Debug;\n    |           ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `B` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use9.rs:10:18\n+  --> $DIR/generic_duplicate_param_use9.rs:9:18\n    |\n LL | type Two<A, B> = impl Debug;\n    |                  ^^^^^^^^^^ `B` cannot be formatted using `{:?}` because it doesn't implement `Debug`"}, {"sha": "4c3b0877d239357498cd92132e312e5abf638523", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "39817757f18b4ea47ee5a2ab3298a06c809e0d0b", "filename": "src/test/ui/type-alias-impl-trait/generic_lifetime_param.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_lifetime_param.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "7274f4f76f8cbdb8510faf4f0c37c8effafd6be2", "filename": "src/test/ui/type-alias-impl-trait/generic_lifetime_param.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "aa8457cf158e8c1f22c4aba4a02e0dcbbb636231", "filename": "src/test/ui/type-alias-impl-trait/generic_not_used.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,20 +1,11 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_not_used.rs:8:33\n+  --> $DIR/generic_not_used.rs:7:33\n    |\n LL | type WrongGeneric<T: 'static> = impl 'static;\n    |                                 ^^^^^^^^^^^^\n \n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_not_used.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: type parameter `V` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/generic_not_used.rs:11:73\n+  --> $DIR/generic_not_used.rs:10:73\n    |\n LL |   fn wrong_generic<U: 'static, V: 'static>(_: U, v: V) -> WrongGeneric<U> {\n    |  _________________________________________________________________________^\n@@ -23,5 +14,5 @@ LL | |     v\n LL | | }\n    | |_^\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n "}, {"sha": "aa8457cf158e8c1f22c4aba4a02e0dcbbb636231", "filename": "src/test/ui/type-alias-impl-trait/generic_not_used.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_not_used.rs:8:33\n+  --> $DIR/generic_not_used.rs:7:33\n    |\n LL | type WrongGeneric<T: 'static> = impl 'static;\n    |                                 ^^^^^^^^^^^^\n \n error: type parameter `V` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/generic_not_used.rs:11:73\n+  --> $DIR/generic_not_used.rs:10:73\n    |\n LL |   fn wrong_generic<U: 'static, V: 'static>(_: U, v: V) -> WrongGeneric<U> {\n    |  _________________________________________________________________________^"}, {"sha": "36fae028d4ec6baa85c187bbafb6fedc1272c001", "filename": "src/test/ui/type-alias-impl-trait/generic_not_used.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,14 +1,13 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n fn main() {}\n \n type WrongGeneric<T: 'static> = impl 'static;\n //~^ ERROR: at least one trait must be specified\n \n fn wrong_generic<U: 'static, V: 'static>(_: U, v: V) -> WrongGeneric<U> {\n-//~^ ERROR type parameter `V` is part of concrete type but not used in parameter list\n+    //~^ ERROR type parameter `V` is part of concrete type but not used in parameter list\n     v\n }"}, {"sha": "f191797c09e1d121a91aa74e9b84f48573470825", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.full_tait.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,20 +1,11 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:11:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^\n \n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0308]: mismatched types\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:18\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:8:18\n    |\n LL |     let z: i32 = x;\n    |            ---   ^ expected `i32`, found opaque type\n@@ -28,15 +19,15 @@ LL | type WrongGeneric<T> = impl 'static;\n            found opaque type `impl Sized`\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:11:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n ...\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0308, E0310.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "f191797c09e1d121a91aa74e9b84f48573470825", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.min_tait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:11:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:18\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:8:18\n    |\n LL |     let z: i32 = x;\n    |            ---   ^ expected `i32`, found opaque type\n@@ -19,7 +19,7 @@ LL | type WrongGeneric<T> = impl 'static;\n            found opaque type `impl Sized`\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:11:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds"}, {"sha": "bd0fc8cbace46f98084df776c44f49517b6ed893", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n fn main() {\n     let y = 42;"}, {"sha": "be701b0ca908988b1e0db8b05efbf2eda9ce5cbf", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,20 +1,11 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained.rs:9:35\n+  --> $DIR/generic_underconstrained.rs:8:35\n    |\n LL | type Underconstrained<T: Trait> = impl 'static;\n    |                                   ^^^^^^^^^^^^\n \n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_underconstrained.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0277]: the trait bound `T: Trait` is not satisfied\n-  --> $DIR/generic_underconstrained.rs:13:31\n+  --> $DIR/generic_underconstrained.rs:12:31\n    |\n LL | type Underconstrained<T: Trait> = impl 'static;\n    |                          ----- required by this bound in `Underconstrained`\n@@ -27,6 +18,6 @@ help: consider restricting type parameter `T`\n LL | fn underconstrain<T: Trait>(_: T) -> Underconstrained<T> {\n    |                    ^^^^^^^\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "be701b0ca908988b1e0db8b05efbf2eda9ce5cbf", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained.rs:9:35\n+  --> $DIR/generic_underconstrained.rs:8:35\n    |\n LL | type Underconstrained<T: Trait> = impl 'static;\n    |                                   ^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Trait` is not satisfied\n-  --> $DIR/generic_underconstrained.rs:13:31\n+  --> $DIR/generic_underconstrained.rs:12:31\n    |\n LL | type Underconstrained<T: Trait> = impl 'static;\n    |                          ----- required by this bound in `Underconstrained`"}, {"sha": "5d723e5bc6213522361decf272ce8c52a7b786bc", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "ab2d9482364dbb08641cc51d16250754ec5926c0", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.full_tait.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,26 +1,17 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:8:45\n+  --> $DIR/generic_underconstrained2.rs:7:45\n    |\n LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n    |                                             ^^^^^^^^^^^^\n \n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:17:46\n+  --> $DIR/generic_underconstrained2.rs:16:46\n    |\n LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n    |                                              ^^^^^^^^^^^^\n \n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_underconstrained2.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:12:33\n+  --> $DIR/generic_underconstrained2.rs:11:33\n    |\n LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n    |                          --------------- required by this bound in `Underconstrained`\n@@ -34,7 +25,7 @@ LL | fn underconstrained<U: std::fmt::Debug>(_: U) -> Underconstrained<U> {\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `V` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:21:43\n+  --> $DIR/generic_underconstrained2.rs:20:43\n    |\n LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n    |                           --------------- required by this bound in `Underconstrained2`\n@@ -47,6 +38,6 @@ help: consider restricting type parameter `V`\n LL | fn underconstrained2<U, V: std::fmt::Debug>(_: U, _: V) -> Underconstrained2<V> {\n    |                          ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors; 1 warning emitted\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "ab2d9482364dbb08641cc51d16250754ec5926c0", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,17 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:8:45\n+  --> $DIR/generic_underconstrained2.rs:7:45\n    |\n LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n    |                                             ^^^^^^^^^^^^\n \n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:17:46\n+  --> $DIR/generic_underconstrained2.rs:16:46\n    |\n LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n    |                                              ^^^^^^^^^^^^\n \n error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:12:33\n+  --> $DIR/generic_underconstrained2.rs:11:33\n    |\n LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n    |                          --------------- required by this bound in `Underconstrained`\n@@ -25,7 +25,7 @@ LL | fn underconstrained<U: std::fmt::Debug>(_: U) -> Underconstrained<U> {\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `V` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:21:43\n+  --> $DIR/generic_underconstrained2.rs:20:43\n    |\n LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n    |                           --------------- required by this bound in `Underconstrained2`"}, {"sha": "01cd1b9b972fb5db5509c5c32a74fc95d88da7cd", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "679f2f73919cf6940ddd14e37f9d85d1a363b034", "filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,18 +1,9 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/impl-with-unconstrained-param.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/impl-with-unconstrained-param.rs:14:6\n+  --> $DIR/impl-with-unconstrained-param.rs:13:6\n    |\n LL | impl<T> X for () {\n    |      ^ unconstrained type parameter\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0207`."}, {"sha": "679f2f73919cf6940ddd14e37f9d85d1a363b034", "filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/impl-with-unconstrained-param.rs:14:6\n+  --> $DIR/impl-with-unconstrained-param.rs:13:6\n    |\n LL | impl<T> X for () {\n    |      ^ unconstrained type parameter"}, {"sha": "6759799b37d857a60212df8b650fbf8b8f8c5aed", "filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -4,7 +4,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n trait X {\n     type I;"}, {"sha": "9435eaace37174152843216f665032f098b8f11b", "filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/incoherent-assoc-imp-trait.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0119]: conflicting implementations of trait `std::ops::FnOnce<()>` for type `&_`\n-  --> $DIR/incoherent-assoc-imp-trait.rs:13:1\n+  --> $DIR/incoherent-assoc-imp-trait.rs:12:1\n    |\n LL | impl<F> FnOnce<()> for &F {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -18,15 +9,15 @@ LL | impl<F> FnOnce<()> for &F {\n              where F: Fn<A>, F: ?Sized;\n \n error[E0210]: type parameter `F` must be used as the type parameter for some local type (e.g., `MyStruct<F>`)\n-  --> $DIR/incoherent-assoc-imp-trait.rs:13:6\n+  --> $DIR/incoherent-assoc-imp-trait.rs:12:6\n    |\n LL | impl<F> FnOnce<()> for &F {\n    |      ^ type parameter `F` must be used as the type parameter for some local type\n    |\n    = note: implementing a foreign trait is only possible if at least one of the types for which it is implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0119, E0210.\n For more information about an error, try `rustc --explain E0119`."}, {"sha": "9435eaace37174152843216f665032f098b8f11b", "filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `std::ops::FnOnce<()>` for type `&_`\n-  --> $DIR/incoherent-assoc-imp-trait.rs:13:1\n+  --> $DIR/incoherent-assoc-imp-trait.rs:12:1\n    |\n LL | impl<F> FnOnce<()> for &F {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL | impl<F> FnOnce<()> for &F {\n              where F: Fn<A>, F: ?Sized;\n \n error[E0210]: type parameter `F` must be used as the type parameter for some local type (e.g., `MyStruct<F>`)\n-  --> $DIR/incoherent-assoc-imp-trait.rs:13:6\n+  --> $DIR/incoherent-assoc-imp-trait.rs:12:6\n    |\n LL | impl<F> FnOnce<()> for &F {\n    |      ^ type parameter `F` must be used as the type parameter for some local type"}, {"sha": "f73169d7d08a939f9231c754358b43b4d909b102", "filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -4,7 +4,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n #![feature(fn_traits)]\n \n trait MyTrait {}"}, {"sha": "696f887a4d89ad403c69bdb514125c13f1bf06dc", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,23 +1,14 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-52843-closure-constrain.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/issue-52843-closure-constrain.rs:13:16\n+  --> $DIR/issue-52843-closure-constrain.rs:12:16\n    |\n LL |     let null = || -> Opaque { 0 };\n    |                ^^^^^^^^^^^^^^^^^^ expected `String`, got `i32`\n    |\n note: previous use here\n-  --> $DIR/issue-52843-closure-constrain.rs:12:5\n+  --> $DIR/issue-52843-closure-constrain.rs:11:5\n    |\n LL |     fn _unused() -> Opaque { String::new() }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "68231d43f629e396d203161185bb5c6a231c7ab7", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.min_tait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-52843-closure-constrain.rs:13:22\n+  --> $DIR/issue-52843-closure-constrain.rs:12:22\n    |\n LL |     let null = || -> Opaque { 0 };\n    |                      ^^^^^^\n@@ -8,13 +8,13 @@ LL |     let null = || -> Opaque { 0 };\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/issue-52843-closure-constrain.rs:13:16\n+  --> $DIR/issue-52843-closure-constrain.rs:12:16\n    |\n LL |     let null = || -> Opaque { 0 };\n    |                ^^^^^^^^^^^^^^^^^^ expected `String`, got `[type error]`\n    |\n note: previous use here\n-  --> $DIR/issue-52843-closure-constrain.rs:12:5\n+  --> $DIR/issue-52843-closure-constrain.rs:11:5\n    |\n LL |     fn _unused() -> Opaque { String::new() }\n    |     ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c7deb2e4eac9ce2d00ca3976917be716a4f253ab", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "abd18392636ce28b680ce6b0796c715a585d37bd", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-52843.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0277]: the trait bound `T: Default` is not satisfied\n-  --> $DIR/issue-52843.rs:6:15\n+  --> $DIR/issue-52843.rs:5:15\n    |\n LL | type Foo<T> = impl Default;\n    |               ^^^^^^^^^^^^ the trait `Default` is not implemented for `T`\n@@ -18,6 +9,6 @@ help: consider restricting type parameter `T`\n LL | type Foo<T: std::default::Default> = impl Default;\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "abd18392636ce28b680ce6b0796c715a585d37bd", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `T: Default` is not satisfied\n-  --> $DIR/issue-52843.rs:6:15\n+  --> $DIR/issue-52843.rs:5:15\n    |\n LL | type Foo<T> = impl Default;\n    |               ^^^^^^^^^^^^ the trait `Default` is not implemented for `T`"}, {"sha": "844bfa3b8461b70106683165f2e08c43825a8114", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n type Foo<T> = impl Default;\n //~^ ERROR: the trait bound `T: Default` is not satisfied"}, {"sha": "fb70582c31a2d2187ebe0479ba3c9cf0c8cbbd37", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,8 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-53096.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-53096.rs:14:1\n+  --> $DIR/issue-53096.rs:13:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "fb70582c31a2d2187ebe0479ba3c9cf0c8cbbd37", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-53096.rs:14:1\n+  --> $DIR/issue-53096.rs:13:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^"}, {"sha": "249055bf26c345e4c88927d588ab6ea54e69946b", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -2,7 +2,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n type Foo = impl Fn() -> usize;\n const fn bar() -> Foo {"}, {"sha": "7087aef67681d4e8917eefa556534a19178f3053", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-53598.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-53598.rs:23:42\n+  --> $DIR/issue-53598.rs:22:42\n    |\n LL |       fn foo<T: Debug>(_: T) -> Self::Item {\n    |  __________________________________________^\n@@ -17,5 +8,5 @@ LL | |         S::<T>(Default::default())\n LL | |     }\n    | |_____^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "7087aef67681d4e8917eefa556534a19178f3053", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-53598.rs:23:42\n+  --> $DIR/issue-53598.rs:22:42\n    |\n LL |       fn foo<T: Debug>(_: T) -> Self::Item {\n    |  __________________________________________^"}, {"sha": "1680d6e583950818f18f1afa2b6849b34f607490", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -2,7 +2,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n \n@@ -21,7 +20,7 @@ impl Foo for S2 {\n     type Item = impl Debug;\n \n     fn foo<T: Debug>(_: T) -> Self::Item {\n-    //~^ Error type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+        //~^ Error type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n         S::<T>(Default::default())\n     }\n }"}, {"sha": "05b7173b80b5966e43def6a1d77aead9b9fa291a", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,8 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-53678-generator-and-const-fn.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-53678-generator-and-const-fn.rs:22:1\n+  --> $DIR/issue-53678-generator-and-const-fn.rs:21:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "05b7173b80b5966e43def6a1d77aead9b9fa291a", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-53678-generator-and-const-fn.rs:22:1\n+  --> $DIR/issue-53678-generator-and-const-fn.rs:21:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^"}, {"sha": "9c50a3da95cb7cb4bf8b039fab4316ffb6270ec1", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -2,7 +2,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::ops::Generator;\n "}, {"sha": "98778210bfb370c53e7eafc6b5e58d3065d464d5", "filename": "src/test/ui/type-alias-impl-trait/issue-55099-lifetime-inference.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-55099-lifetime-inference.rs:8:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "fc32d455aaa80114d829371efdbd7bed2495c83f", "filename": "src/test/ui/type-alias-impl-trait/issue-55099-lifetime-inference.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -6,15 +6,12 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n-trait Future {\n-}\n+trait Future {}\n \n struct AndThen<F>(F);\n \n-impl<F> Future for AndThen<F> {\n-}\n+impl<F> Future for AndThen<F> {}\n \n struct Foo<'a> {\n     x: &'a mut (),"}, {"sha": "d31c232fc2391b5e91db715bcb535c28a70cf2ed", "filename": "src/test/ui/type-alias-impl-trait/issue-57188-associate-impl-capture.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-57188-associate-impl-capture.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "7207dda90dc4fd3a01a1215348150d55c7c51639", "filename": "src/test/ui/type-alias-impl-trait/issue-57188-associate-impl-capture.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -5,7 +5,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n struct Baz<'a> {\n     source: &'a str,"}, {"sha": "70b6f264860e7d8f49ded80eeada86b211a73cbd", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,20 +1,11 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-57611-trait-alias.rs:8:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n+  --> $DIR/issue-57611-trait-alias.rs:19:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n    |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n    = note: closure with signature `fn(&'2 X) -> &X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "70b6f264860e7d8f49ded80eeada86b211a73cbd", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n+  --> $DIR/issue-57611-trait-alias.rs:19:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n    |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough"}, {"sha": "fcc3555b23127b2bd49dfa900fe7dd5a8329ffdc", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -6,7 +6,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n trait Foo {\n     type Bar: Baz<Self, Self>;"}, {"sha": "2d8586267193334ab1d8f79df3adddc34e516394", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-57700.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: type parameter `impl Deref<Target = Self>` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-57700.rs:19:58\n+  --> $DIR/issue-57700.rs:18:58\n    |\n LL |       fn foo(self: impl Deref<Target = Self>) -> Self::Bar {\n    |  __________________________________________________________^\n@@ -17,5 +8,5 @@ LL | |         self\n LL | |     }\n    | |_____^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "2d8586267193334ab1d8f79df3adddc34e516394", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `impl Deref<Target = Self>` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-57700.rs:19:58\n+  --> $DIR/issue-57700.rs:18:58\n    |\n LL |       fn foo(self: impl Deref<Target = Self>) -> Self::Bar {\n    |  __________________________________________________________^"}, {"sha": "19b3d1ce2c768cf12f84addc1fb3a2aa9a718554", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::ops::Deref;\n \n@@ -17,7 +16,7 @@ impl<C> Foo for C {\n     type Bar = impl Foo;\n \n     fn foo(self: impl Deref<Target = Self>) -> Self::Bar {\n-    //~^ Error type parameter `impl Deref<Target = Self>` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+        //~^ Error type parameter `impl Deref<Target = Self>` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n         self\n     }\n }"}, {"sha": "b35361c89a485e442ee310dac4a641eff2bfcb48", "filename": "src/test/ui/type-alias-impl-trait/issue-57807-associated-type.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-57807-associated-type.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "9118648fe426ff466c58308d2c69bb2cc207e7e1", "filename": "src/test/ui/type-alias-impl-trait/issue-57807-associated-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -5,7 +5,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n trait Bar {\n     type A;"}, {"sha": "f0fd5f2f056ab8f76e6876681d9863c68ca3e794", "filename": "src/test/ui/type-alias-impl-trait/issue-58887.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-58887.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "0a09bd50a6eaf76b569aedf229d283e6986e85f5", "filename": "src/test/ui/type-alias-impl-trait/issue-58887.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n trait UnwrapItemsExt {\n     type Iter;"}, {"sha": "164b8881714e7e0a96dd1507edc9e73b713e90f4", "filename": "src/test/ui/type-alias-impl-trait/issue-58951.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-58951.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "932684ec089b94047600ad7e54b4769a0fe5d9b9", "filename": "src/test/ui/type-alias-impl-trait/issue-58951.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,11 +3,12 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n type A = impl Iterator;\n \n-fn def_a() -> A { 0..1 }\n+fn def_a() -> A {\n+    0..1\n+}\n \n pub fn use_a() {\n     def_a().map(|x| x);"}, {"sha": "adb07f5227b40f159d823b9de53d7aeb93bdae5b", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,8 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-60407.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-60407.rs:11:1\n+  --> $DIR/issue-60407.rs:10:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "adb07f5227b40f159d823b9de53d7aeb93bdae5b", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-60407.rs:11:1\n+  --> $DIR/issue-60407.rs:10:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^"}, {"sha": "7319bcf4cd9116c3ef30bb5ae3828e3d1164bbe4", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait, rustc_attrs)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n type Debuggable = impl core::fmt::Debug;\n "}, {"sha": "738718e770ac334385aaddf2ff9da2a7c6a78498", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,23 +1,14 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-60564.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-60564.rs:22:34\n+  --> $DIR/issue-60564.rs:21:34\n    |\n LL |     fn iter_bits(self, n: u8) -> Self::BitsIter {\n    |                                  ^^^^^^^^^^^^^^\n    |\n note: used non-generic type `u8` for generic parameter\n-  --> $DIR/issue-60564.rs:11:25\n+  --> $DIR/issue-60564.rs:10:25\n    |\n LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n    |                         ^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "738718e770ac334385aaddf2ff9da2a7c6a78498", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-60564.rs:22:34\n+  --> $DIR/issue-60564.rs:21:34\n    |\n LL |     fn iter_bits(self, n: u8) -> Self::BitsIter {\n    |                                  ^^^^^^^^^^^^^^\n    |\n note: used non-generic type `u8` for generic parameter\n-  --> $DIR/issue-60564.rs:11:25\n+  --> $DIR/issue-60564.rs:10:25\n    |\n LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n    |                         ^"}, {"sha": "7f780a253c95f3564429f0f8a146a5458785bd95", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n trait IterBits {\n     type BitsIter: Iterator<Item = u8>;"}, {"sha": "1fc38d2f549a13b29573c7faf0b5b3ce01d05781", "filename": "src/test/ui/type-alias-impl-trait/issue-62000-associate-impl-trait-lifetimes.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-62000-associate-impl-trait-lifetimes.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "38370cd008f730002d3de7eb42c435d4db755bb7", "filename": "src/test/ui/type-alias-impl-trait/issue-62000-associate-impl-trait-lifetimes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -5,7 +5,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n trait MyTrait {\n     type AssocType: Send;"}, {"sha": "634ec0f515f3104480e8200b3edcd0e4af9a2b24", "filename": "src/test/ui/type-alias-impl-trait/issue-63263-closure-return.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -5,7 +5,6 @@\n // check-pass\n \n #![feature(min_type_alias_impl_trait, type_alias_impl_trait)]\n-//~^ WARN incomplete\n \n pub type Closure = impl FnOnce();\n "}, {"sha": "e1f4ecd3b98144ea540dd188a92958cff061a6f4", "filename": "src/test/ui/type-alias-impl-trait/issue-63263-closure-return.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-63263-closure-return.rs:7:39\n-   |\n-LL | #![feature(min_type_alias_impl_trait, type_alias_impl_trait)]\n-   |                                       ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "409cca865d1e6e2dc4424caea96fa7717a9c5890", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,21 +1,12 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-63279.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:11:5: 11:28] as FnOnce<()>>::Output == ()`\n-  --> $DIR/issue-63279.rs:8:16\n+error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:10:5: 10:28] as FnOnce<()>>::Output == ()`\n+  --> $DIR/issue-63279.rs:7:16\n    |\n LL | type Closure = impl FnOnce();\n    |                ^^^^^^^^^^^^^ expected `()`, found opaque type\n    |\n    = note: expected unit type `()`\n             found opaque type `impl FnOnce<()>`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0271`."}, {"sha": "a93d2dfcee5088eb95b4aa364ec8a0f082f5fd84", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.min_tait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,14 +1,14 @@\n error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-63279.rs:11:11\n+  --> $DIR/issue-63279.rs:10:11\n    |\n LL |     || -> Closure { || () }\n    |           ^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n-error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:11:5: 11:28] as FnOnce<()>>::Output == ()`\n-  --> $DIR/issue-63279.rs:8:16\n+error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:10:5: 10:28] as FnOnce<()>>::Output == ()`\n+  --> $DIR/issue-63279.rs:7:16\n    |\n LL | type Closure = impl FnOnce();\n    |                ^^^^^^^^^^^^^ expected `()`, found opaque type"}, {"sha": "4c9c26a343c510d6d88389835472ce0667723450", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n type Closure = impl FnOnce(); //~ ERROR: type mismatch resolving\n "}, {"sha": "fc8d8147167b37a6942b175cd1b78c6c1d9cd8fa", "filename": "src/test/ui/type-alias-impl-trait/issue-63677-type-alias-coherence.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-63677-type-alias-coherence.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "b477fea41b72d6de140e90297ec6e006615138cf", "filename": "src/test/ui/type-alias-impl-trait/issue-63677-type-alias-coherence.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -5,7 +5,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n pub trait Trait {}\n pub struct S1<T>(T);"}, {"sha": "6b4ea787ea8db22ed251f3a830aa98368f234914", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,8 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:18:1\n+  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:17:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "6798ecb9489f864017e6efb89e5340c66ec20189", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:20:13\n+  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:19:13\n    |\n LL |     take(|| {});\n    |             ^\n@@ -8,7 +8,7 @@ LL |     take(|| {});\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:22:13\n+  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:21:13\n    |\n LL |     take(|| {});\n    |             ^"}, {"sha": "f181b3d06a6708fa74f05fd51efd86dde5d4f6f5", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait, rustc_attrs)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n type T = impl Sized;\n // The concrete type referred by impl-trait-type-alias(`T`) is guaranteed"}, {"sha": "b15bff57a0d2d145b582ad203a1c08fe1853ff77", "filename": "src/test/ui/type-alias-impl-trait/issue-65918.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65918.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65918.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65918.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -5,7 +5,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::marker::PhantomData;\n "}, {"sha": "2fc46574512cce4742bd1c51f9ad751ad0793b7e", "filename": "src/test/ui/type-alias-impl-trait/issue-66580-closure-coherence.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-66580-closure-coherence.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-66580-closure-coherence.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-66580-closure-coherence.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-66580-closure-coherence.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "7fdaa7fb99bc25c4c49dfcedfd8966b4d04af149", "filename": "src/test/ui/type-alias-impl-trait/issue-66580-closure-coherence.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-66580-closure-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-66580-closure-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-66580-closure-coherence.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -5,15 +5,16 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n type Closure = impl FnOnce();\n \n fn closure() -> Closure {\n     || {}\n }\n \n-struct Wrap<T> { f: T }\n+struct Wrap<T> {\n+    f: T,\n+}\n \n impl Wrap<Closure> {}\n "}, {"sha": "81e27da0949af562a13a54e0f9313c1625aec416", "filename": "src/test/ui/type-alias-impl-trait/issue-67844-nested-opaque.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-67844-nested-opaque.rs:8:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "f47f0cdba88bb230c0e7876118afd7cc132736e0", "filename": "src/test/ui/type-alias-impl-trait/issue-67844-nested-opaque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -6,9 +6,10 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n-trait WithAssoc { type AssocType; }\n+trait WithAssoc {\n+    type AssocType;\n+}\n \n trait WithParam<A> {}\n \n@@ -23,7 +24,6 @@ impl WithAssoc for MyStruct {\n     type AssocType = MyParam;\n }\n \n-\n fn my_fun<A>() -> Return<A> {\n     MyStruct\n }"}, {"sha": "db3b89bc699c1ed0d709e418277446adc3aeeaa3", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,23 +1,14 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-68368-non-defining-use.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-68368-non-defining-use.rs:11:15\n+  --> $DIR/issue-68368-non-defining-use.rs:10:15\n    |\n LL | fn f<'a>() -> Alias<'a, ()> {}\n    |               ^^^^^^^^^^^^^\n    |\n note: used non-generic type `()` for generic parameter\n-  --> $DIR/issue-68368-non-defining-use.rs:10:16\n+  --> $DIR/issue-68368-non-defining-use.rs:9:16\n    |\n LL | type Alias<'a, U> = impl Trait<U>;\n    |                ^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "db3b89bc699c1ed0d709e418277446adc3aeeaa3", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-68368-non-defining-use.rs:11:15\n+  --> $DIR/issue-68368-non-defining-use.rs:10:15\n    |\n LL | fn f<'a>() -> Alias<'a, ()> {}\n    |               ^^^^^^^^^^^^^\n    |\n note: used non-generic type `()` for generic parameter\n-  --> $DIR/issue-68368-non-defining-use.rs:10:16\n+  --> $DIR/issue-68368-non-defining-use.rs:9:16\n    |\n LL | type Alias<'a, U> = impl Trait<U>;\n    |                ^"}, {"sha": "b31c79b8b2bb7b3d3a9cf5176fcae90adb403830", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -5,7 +5,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n trait Trait<T> {}\n type Alias<'a, U> = impl Trait<U>;\n fn f<'a>() -> Alias<'a, ()> {}"}, {"sha": "150bfbaef59105ca3b77c26fa373ace82557f0c4", "filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-error.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,20 +1,11 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:20:65\n+  --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:19:65\n    |\n LL | type Return<A> = impl WithAssoc<A, AssocType = impl SomeTrait + 'a>;\n    |             -                                                   ^^ undeclared lifetime\n    |             |\n    |             help: consider introducing lifetime `'a` here: `'a,`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0261`."}, {"sha": "150bfbaef59105ca3b77c26fa373ace82557f0c4", "filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-error.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:20:65\n+  --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:19:65\n    |\n LL | type Return<A> = impl WithAssoc<A, AssocType = impl SomeTrait + 'a>;\n    |             -                                                   ^^ undeclared lifetime"}, {"sha": "ae89cdd1c08791fec3df445a7bfcc9060ceed32b", "filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n trait SomeTrait {}\n "}, {"sha": "61e2e20dfd043fc769acb7d56cadb21847c282eb", "filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-ok.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-ok.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-ok.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-ok.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-69136-inner-lifetime-resolve-ok.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "05d50f0f1bf5489e837817660594c04158e56947", "filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-ok.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-ok.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -5,7 +5,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n trait SomeTrait {}\n "}, {"sha": "71cc6f61c37861e0e882782826ea72afa9d1e7e7", "filename": "src/test/ui/type-alias-impl-trait/issue-69323.full.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69323.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69323.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69323.full.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-69323.rs:5:27\n-   |\n-LL | #![cfg_attr(full, feature(type_alias_impl_trait))]\n-   |                           ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "9c4b4433f9fada9e40432e9991757fa0b70e33ac", "filename": "src/test/ui/type-alias-impl-trait/issue-69323.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69323.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69323.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69323.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min full\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full, feature(type_alias_impl_trait))]\n-//[full]~^ WARN incomplete\n \n use std::iter::{once, Chain};\n "}, {"sha": "9fe2e2cf88ee937dd41c7f496a74ec151d9591d1", "filename": "src/test/ui/type-alias-impl-trait/issue-70121.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-70121.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-70121.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-70121.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-70121.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "1eb33c805bb153144bdc781845771c3befcc093d", "filename": "src/test/ui/type-alias-impl-trait/issue-70121.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-70121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-70121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-70121.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n pub type Successors<'a> = impl Iterator<Item = &'a ()>;\n "}, {"sha": "83c37001a45c9e2c3fefb7c37eeeb0d9e83c7e34", "filename": "src/test/ui/type-alias-impl-trait/issue-74244.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,18 +1,9 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-74244.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74244.rs:12:6\n+  --> $DIR/issue-74244.rs:11:6\n    |\n LL | impl<T> Allocator for DefaultAllocator {\n    |      ^ unconstrained type parameter\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0207`."}, {"sha": "83c37001a45c9e2c3fefb7c37eeeb0d9e83c7e34", "filename": "src/test/ui/type-alias-impl-trait/issue-74244.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74244.rs:12:6\n+  --> $DIR/issue-74244.rs:11:6\n    |\n LL | impl<T> Allocator for DefaultAllocator {\n    |      ^ unconstrained type parameter"}, {"sha": "d9845a9b62ce873723d4909a615624858ec09b6d", "filename": "src/test/ui/type-alias-impl-trait/issue-74244.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n trait Allocator {\n     type Buffer;"}, {"sha": "8e7ff45a72dff00e3d419da6c0caef53e8eb739b", "filename": "src/test/ui/type-alias-impl-trait/issue-74761-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,6 +1,5 @@\n #![feature(member_constraints)]\n #![feature(type_alias_impl_trait)]\n-//~^ WARN incomplete\n \n pub trait A {\n     type B;"}, {"sha": "505e6436f5bdf788fb8bc8ad711b3530892973c4", "filename": "src/test/ui/type-alias-impl-trait/issue-74761-2.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,34 +1,25 @@\n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/issue-74761-2.rs:12:14\n+  --> $DIR/issue-74761-2.rs:11:14\n    |\n LL |     type B = impl core::fmt::Debug;\n    |              ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n \n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-74761-2.rs:2:12\n-   |\n-LL | #![feature(type_alias_impl_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761-2.rs:9:6\n+  --> $DIR/issue-74761-2.rs:8:6\n    |\n LL | impl<'a, 'b> A for () {\n    |      ^^ unconstrained lifetime parameter\n \n error[E0207]: the lifetime parameter `'b` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761-2.rs:9:10\n+  --> $DIR/issue-74761-2.rs:8:10\n    |\n LL | impl<'a, 'b> A for () {\n    |          ^^ unconstrained lifetime parameter\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0207, E0658.\n For more information about an error, try `rustc --explain E0207`."}, {"sha": "112fc2ec7196c8c35164fc943956e51808783d52", "filename": "src/test/ui/type-alias-impl-trait/issue-74761.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,24 +1,15 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-74761.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:10:6\n+  --> $DIR/issue-74761.rs:9:6\n    |\n LL | impl<'a, 'b> A for () {\n    |      ^^ unconstrained lifetime parameter\n \n error[E0207]: the lifetime parameter `'b` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:10:10\n+  --> $DIR/issue-74761.rs:9:10\n    |\n LL | impl<'a, 'b> A for () {\n    |          ^^ unconstrained lifetime parameter\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0207`."}, {"sha": "112fc2ec7196c8c35164fc943956e51808783d52", "filename": "src/test/ui/type-alias-impl-trait/issue-74761.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:10:6\n+  --> $DIR/issue-74761.rs:9:6\n    |\n LL | impl<'a, 'b> A for () {\n    |      ^^ unconstrained lifetime parameter\n \n error[E0207]: the lifetime parameter `'b` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:10:10\n+  --> $DIR/issue-74761.rs:9:10\n    |\n LL | impl<'a, 'b> A for () {\n    |          ^^ unconstrained lifetime parameter"}, {"sha": "4f0db7aedc7857c7d1378fbfa825afddfe9db046", "filename": "src/test/ui/type-alias-impl-trait/issue-74761.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n pub trait A {\n     type B;"}, {"sha": "fb063800bdbc6c375271410dab866049585b35c4", "filename": "src/test/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,23 +1,14 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-76202-trait-impl-for-tait.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-76202-trait-impl-for-tait.rs:19:1\n+  --> $DIR/issue-76202-trait-impl-for-tait.rs:18:1\n    |\n LL | impl Test for F {\n    | ^^^^^^^^^^^^^^^\n    |\n note: type alias impl trait defined here\n-  --> $DIR/issue-76202-trait-impl-for-tait.rs:12:10\n+  --> $DIR/issue-76202-trait-impl-for-tait.rs:11:10\n    |\n LL | type F = impl Dummy;\n    |          ^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "fb063800bdbc6c375271410dab866049585b35c4", "filename": "src/test/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-76202-trait-impl-for-tait.rs:19:1\n+  --> $DIR/issue-76202-trait-impl-for-tait.rs:18:1\n    |\n LL | impl Test for F {\n    | ^^^^^^^^^^^^^^^\n    |\n note: type alias impl trait defined here\n-  --> $DIR/issue-76202-trait-impl-for-tait.rs:12:10\n+  --> $DIR/issue-76202-trait-impl-for-tait.rs:11:10\n    |\n LL | type F = impl Dummy;\n    |          ^^^^^^^^^^"}, {"sha": "527fbd4bb2f4eddbccda5d8698547a7a3fefacae", "filename": "src/test/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -4,7 +4,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n trait Dummy {}\n impl Dummy for () {}\n@@ -16,7 +15,8 @@ trait Test {\n     fn test(self);\n }\n \n-impl Test for F { //~ ERROR cannot implement trait\n+impl Test for F {\n+    //~^ ERROR cannot implement trait\n     fn test(self) {}\n }\n "}, {"sha": "bcc16a5b2aba8dedd66023930a231c8a0bece5cd", "filename": "src/test/ui/type-alias-impl-trait/issue-78450.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(min_type_alias_impl_trait)]\n #![feature(type_alias_impl_trait)]\n-//~^ WARNING: the feature `type_alias_impl_trait` is incomplete\n \n pub trait AssociatedImpl {\n     type ImplTrait;"}, {"sha": "efccf6241fb7894f45ff706950bba6d0436bf8e1", "filename": "src/test/ui/type-alias-impl-trait/issue-78450.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-78450.rs:4:12\n-   |\n-LL | #![feature(type_alias_impl_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "5e4307be17a0426a22c8049f66b8e73a05bdf8f4", "filename": "src/test/ui/type-alias-impl-trait/nested_type_alias_impl_trait.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/nested_type_alias_impl_trait.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "3c059fcf7d428828130350a19ba3a08484e1d511", "filename": "src/test/ui/type-alias-impl-trait/nested_type_alias_impl_trait.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,21 +1,20 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n // build-pass (FIXME(62277): could be check-pass?)\n mod my_mod {\n-  use std::fmt::Debug;\n+    use std::fmt::Debug;\n \n-  pub type Foo = impl Debug;\n-  pub type Foot = impl Debug;\n+    pub type Foo = impl Debug;\n+    pub type Foot = impl Debug;\n \n-  pub fn get_foo() -> Foo {\n-      5i32\n-  }\n+    pub fn get_foo() -> Foo {\n+        5i32\n+    }\n \n-  pub fn get_foot() -> Foot {\n-      get_foo()\n-  }\n+    pub fn get_foot() -> Foot {\n+        get_foo()\n+    }\n }\n \n fn main() {"}, {"sha": "725958358a11e9cd1c61eecd56279d646dfb38e7", "filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/never_reveal_concrete_type.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0308]: mismatched types\n-  --> $DIR/never_reveal_concrete_type.rs:16:27\n+  --> $DIR/never_reveal_concrete_type.rs:15:27\n    |\n LL | type NoReveal = impl std::fmt::Debug;\n    |                 -------------------- the found opaque type\n@@ -22,12 +13,12 @@ LL |     let _: &'static str = x;\n             found opaque type `impl Debug`\n \n error[E0605]: non-primitive cast: `impl Debug` as `&'static str`\n-  --> $DIR/never_reveal_concrete_type.rs:17:13\n+  --> $DIR/never_reveal_concrete_type.rs:16:13\n    |\n LL |     let _ = x as &'static str;\n    |             ^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0308, E0605.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "725958358a11e9cd1c61eecd56279d646dfb38e7", "filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/never_reveal_concrete_type.rs:16:27\n+  --> $DIR/never_reveal_concrete_type.rs:15:27\n    |\n LL | type NoReveal = impl std::fmt::Debug;\n    |                 -------------------- the found opaque type\n@@ -13,7 +13,7 @@ LL |     let _: &'static str = x;\n             found opaque type `impl Debug`\n \n error[E0605]: non-primitive cast: `impl Debug` as `&'static str`\n-  --> $DIR/never_reveal_concrete_type.rs:17:13\n+  --> $DIR/never_reveal_concrete_type.rs:16:13\n    |\n LL |     let _ = x as &'static str;\n    |             ^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object"}, {"sha": "1672c49c604af875394ab9a068142e1710b4e377", "filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "917830c6a0984bb837febbebaf475b26464b06e5", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,8 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/no_inferrable_concrete_type.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: could not find defining uses\n-  --> $DIR/no_inferrable_concrete_type.rs:9:12\n+  --> $DIR/no_inferrable_concrete_type.rs:8:12\n    |\n LL | type Foo = impl Copy;\n    |            ^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "917830c6a0984bb837febbebaf475b26464b06e5", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error: could not find defining uses\n-  --> $DIR/no_inferrable_concrete_type.rs:9:12\n+  --> $DIR/no_inferrable_concrete_type.rs:8:12\n    |\n LL | type Foo = impl Copy;\n    |            ^^^^^^^^^"}, {"sha": "520954b50ab55323cfbba3b3daa79747160a0516", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -4,7 +4,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n type Foo = impl Copy; //~ could not find defining uses\n "}, {"sha": "0f0141dcb99feefaf9e9d6ffc10b6f753cb7a15e", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/no_revealing_outside_defining_module.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0308]: mismatched types\n-  --> $DIR/no_revealing_outside_defining_module.rs:18:19\n+  --> $DIR/no_revealing_outside_defining_module.rs:17:19\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ---------------------- the found opaque type\n@@ -22,7 +13,7 @@ LL |     let _: &str = bomp();\n             found opaque type `impl Debug`\n \n error[E0308]: mismatched types\n-  --> $DIR/no_revealing_outside_defining_module.rs:22:5\n+  --> $DIR/no_revealing_outside_defining_module.rs:21:5\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ---------------------- the expected opaque type\n@@ -35,6 +26,6 @@ LL |     \"\"\n    = note: expected opaque type `impl Debug`\n                 found reference `&'static str`\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "0f0141dcb99feefaf9e9d6ffc10b6f753cb7a15e", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/no_revealing_outside_defining_module.rs:18:19\n+  --> $DIR/no_revealing_outside_defining_module.rs:17:19\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ---------------------- the found opaque type\n@@ -13,7 +13,7 @@ LL |     let _: &str = bomp();\n             found opaque type `impl Debug`\n \n error[E0308]: mismatched types\n-  --> $DIR/no_revealing_outside_defining_module.rs:22:5\n+  --> $DIR/no_revealing_outside_defining_module.rs:21:5\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ---------------------- the expected opaque type"}, {"sha": "5ab793c0119f5677260d87e4bc16582a9bc4ca57", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "d7f8d04ff808e7a763e49cbef9767938933f9ab3", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,23 +1,14 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/not_a_defining_use.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: non-defining opaque type use in defining scope\n-  --> $DIR/not_a_defining_use.rs:12:27\n+  --> $DIR/not_a_defining_use.rs:11:27\n    |\n LL | fn two<T: Debug>(t: T) -> Two<T, u32> {\n    |                           ^^^^^^^^^^^\n    |\n note: used non-generic type `u32` for generic parameter\n-  --> $DIR/not_a_defining_use.rs:10:13\n+  --> $DIR/not_a_defining_use.rs:9:13\n    |\n LL | type Two<T, U> = impl Debug;\n    |             ^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "d7f8d04ff808e7a763e49cbef9767938933f9ab3", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/not_a_defining_use.rs:12:27\n+  --> $DIR/not_a_defining_use.rs:11:27\n    |\n LL | fn two<T: Debug>(t: T) -> Two<T, u32> {\n    |                           ^^^^^^^^^^^\n    |\n note: used non-generic type `u32` for generic parameter\n-  --> $DIR/not_a_defining_use.rs:10:13\n+  --> $DIR/not_a_defining_use.rs:9:13\n    |\n LL | type Two<T, U> = impl Debug;\n    |             ^"}, {"sha": "57ccb58acc939bbd07bac2b16f633f27b7f027c1", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "59f07482ddbc1a564a1e392ee0ed645c0d517617", "filename": "src/test/ui/type-alias-impl-trait/not_well_formed.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,18 +1,9 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/not_well_formed.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0220]: associated type `Assoc` not found for `V`\n-  --> $DIR/not_well_formed.rs:13:29\n+  --> $DIR/not_well_formed.rs:11:29\n    |\n LL | type Foo<V> = impl Trait<V::Assoc>;\n    |                             ^^^^^ associated type `Assoc` not found\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0220`."}, {"sha": "59f07482ddbc1a564a1e392ee0ed645c0d517617", "filename": "src/test/ui/type-alias-impl-trait/not_well_formed.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0220]: associated type `Assoc` not found for `V`\n-  --> $DIR/not_well_formed.rs:13:29\n+  --> $DIR/not_well_formed.rs:11:29\n    |\n LL | type Foo<V> = impl Trait<V::Assoc>;\n    |                             ^^^^^ associated type `Assoc` not found"}, {"sha": "c3e9895524e171db14dd8329096c75764d7949f6", "filename": "src/test/ui/type-alias-impl-trait/not_well_formed.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,10 +1,8 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n-fn main() {\n-}\n+fn main() {}\n \n trait TraitWithAssoc {\n     type Assoc;"}, {"sha": "ce0827d94f94f648a8d86d0891d31203770ceab4", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,8 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/structural-match-no-leak.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match-no-leak.rs:18:9\n+  --> $DIR/structural-match-no-leak.rs:17:9\n    |\n LL |         LEAK_FREE => (),\n    |         ^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "ce0827d94f94f648a8d86d0891d31203770ceab4", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match-no-leak.rs:18:9\n+  --> $DIR/structural-match-no-leak.rs:17:9\n    |\n LL |         LEAK_FREE => (),\n    |         ^^^^^^^^^"}, {"sha": "7a067c6f2d75d15e816b25055541deaa733775f6", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -2,7 +2,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n type Bar = impl Send;\n "}, {"sha": "cb2cf59774ba0c7b9491ccc6f641529d03ec118d", "filename": "src/test/ui/type-alias-impl-trait/structural-match.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,8 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/structural-match.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match.rs:19:9\n+  --> $DIR/structural-match.rs:18:9\n    |\n LL |         VALUE => (),\n    |         ^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "cb2cf59774ba0c7b9491ccc6f641529d03ec118d", "filename": "src/test/ui/type-alias-impl-trait/structural-match.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match.rs:19:9\n+  --> $DIR/structural-match.rs:18:9\n    |\n LL |         VALUE => (),\n    |         ^^^^^"}, {"sha": "c30cd5f5958e68e8b10dfd013ffbd1142b487efc", "filename": "src/test/ui/type-alias-impl-trait/structural-match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -2,7 +2,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n type Foo = impl Send;\n "}, {"sha": "2a40ccc074b9314f51c87d00a0b2368591163339", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-const.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-alias-impl-trait-const.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0308]: mismatched types\n-  --> $DIR/type-alias-impl-trait-const.rs:13:19\n+  --> $DIR/type-alias-impl-trait-const.rs:12:19\n    |\n LL | pub type Foo = impl Debug;\n    |                ---------- the expected opaque type\n@@ -20,11 +11,11 @@ LL | const _FOO: Foo = 5;\n                      found type `{integer}`\n \n error: could not find defining uses\n-  --> $DIR/type-alias-impl-trait-const.rs:10:16\n+  --> $DIR/type-alias-impl-trait-const.rs:9:16\n    |\n LL | pub type Foo = impl Debug;\n    |                ^^^^^^^^^^\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "2a40ccc074b9314f51c87d00a0b2368591163339", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-const.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/type-alias-impl-trait-const.rs:13:19\n+  --> $DIR/type-alias-impl-trait-const.rs:12:19\n    |\n LL | pub type Foo = impl Debug;\n    |                ---------- the expected opaque type\n@@ -11,7 +11,7 @@ LL | const _FOO: Foo = 5;\n                      found type `{integer}`\n \n error: could not find defining uses\n-  --> $DIR/type-alias-impl-trait-const.rs:10:16\n+  --> $DIR/type-alias-impl-trait-const.rs:9:16\n    |\n LL | pub type Foo = impl Debug;\n    |                ^^^^^^^^^^"}, {"sha": "4432807916eba045e377163779b53a818f637d9f", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n // Ensures that `const` items can constrain an opaque `impl Trait`.\n "}, {"sha": "fb88c2043bd3f350334949e7ed90000168c2d95a", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-fns.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fns.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fns.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fns.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-alias-impl-trait-fns.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "e3debedbde3072a7aa93c651ae069e002855681e", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-fns.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fns.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,28 +3,26 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n // Regression test for issue #61863\n \n pub trait MyTrait {}\n \n #[derive(Debug)]\n pub struct MyStruct {\n-  v: u64\n+    v: u64,\n }\n \n impl MyTrait for MyStruct {}\n \n pub fn bla() -> TE {\n-    return MyStruct {v:1}\n+    return MyStruct { v: 1 };\n }\n \n pub fn bla2() -> TE {\n     bla()\n }\n \n-\n type TE = impl MyTrait;\n \n fn main() {}"}, {"sha": "cbecd0bb3d486bfccd19a6af4399ffb4fa2a82e3", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-sized.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-sized.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-sized.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-sized.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-alias-impl-trait-sized.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "b0f6a5a2db3e7c167d72c0f3dcf272910093a15e", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-sized.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-sized.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,18 +3,25 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n type A = impl Sized;\n-fn f1() -> A { 0 }\n+fn f1() -> A {\n+    0\n+}\n \n type B = impl ?Sized;\n-fn f2() -> &'static B { &[0] }\n+fn f2() -> &'static B {\n+    &[0]\n+}\n \n type C = impl ?Sized + 'static;\n-fn f3() -> &'static C { &[0] }\n+fn f3() -> &'static C {\n+    &[0]\n+}\n \n type D = impl ?Sized;\n-fn f4() -> &'static D { &1 }\n+fn f4() -> &'static D {\n+    &1\n+}\n \n fn main() {}"}, {"sha": "1a351867bff2dadd4faa15eed6e3afeab62e6d22", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-tuple.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-tuple.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfc856acf3112d241bd4de55ec91df5aef66c352/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-tuple.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-tuple.full_tait.stderr?ref=cfc856acf3112d241bd4de55ec91df5aef66c352", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-alias-impl-trait-tuple.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "5f228ec03f739fe80fc17a749bce6a84a77e1d47", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-tuple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-tuple.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n #![allow(dead_code)]\n \n pub trait MyTrait {}"}, {"sha": "c4bd4deaa061763f5f8213cf657b5afb7fff98b3", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-unconstrained-lifetime.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,18 +1,9 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-alias-impl-trait-unconstrained-lifetime.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/type-alias-impl-trait-unconstrained-lifetime.rs:13:6\n+  --> $DIR/type-alias-impl-trait-unconstrained-lifetime.rs:12:6\n    |\n LL | impl<'a, I: Iterator<Item = i32>> Trait for (i32, I) {\n    |      ^^ unconstrained lifetime parameter\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0207`."}, {"sha": "c4bd4deaa061763f5f8213cf657b5afb7fff98b3", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-unconstrained-lifetime.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/type-alias-impl-trait-unconstrained-lifetime.rs:13:6\n+  --> $DIR/type-alias-impl-trait-unconstrained-lifetime.rs:12:6\n    |\n LL | impl<'a, I: Iterator<Item = i32>> Trait for (i32, I) {\n    |      ^^ unconstrained lifetime parameter"}, {"sha": "63bbbaa707c98cefcf767eaeae82662dbf815758", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-unconstrained-lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -3,7 +3,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n trait Trait {\n     type Associated;"}, {"sha": "f1b9f23f06640cda35030e53e77a11b5f8ff123a", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-cycle-error.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,8 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-alias-impl-trait-with-cycle-error.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: could not find defining uses\n-  --> $DIR/type-alias-impl-trait-with-cycle-error.rs:6:12\n+  --> $DIR/type-alias-impl-trait-with-cycle-error.rs:5:12\n    |\n LL | type Foo = impl Fn() -> Foo;\n    |            ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "f1b9f23f06640cda35030e53e77a11b5f8ff123a", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-cycle-error.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error: could not find defining uses\n-  --> $DIR/type-alias-impl-trait-with-cycle-error.rs:6:12\n+  --> $DIR/type-alias-impl-trait-with-cycle-error.rs:5:12\n    |\n LL | type Foo = impl Fn() -> Foo;\n    |            ^^^^^^^^^^^^^^^^"}, {"sha": "2b3694d50100c946e212662a765221a54adb0b8d", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-cycle-error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.rs?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n \n type Foo = impl Fn() -> Foo;\n //~^ ERROR: could not find defining uses"}, {"sha": "2df29d72c1e3bbfdc4f502364abcbe4775adb2f4", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-cycle-error2.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.full_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,17 +1,8 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-alias-impl-trait-with-cycle-error2.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n error: could not find defining uses\n-  --> $DIR/type-alias-impl-trait-with-cycle-error2.rs:10:12\n+  --> $DIR/type-alias-impl-trait-with-cycle-error2.rs:9:12\n    |\n LL | type Foo = impl Bar<Foo, Item = Foo>;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "2df29d72c1e3bbfdc4f502364abcbe4775adb2f4", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-cycle-error2.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,5 +1,5 @@\n error: could not find defining uses\n-  --> $DIR/type-alias-impl-trait-with-cycle-error2.rs:10:12\n+  --> $DIR/type-alias-impl-trait-with-cycle-error2.rs:9:12\n    |\n LL | type Foo = impl Bar<Foo, Item = Foo>;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^"}]}