{"sha": "9e80c8571da68cf8b6f032294e767afc657d8fe8", "node_id": "C_kwDOAAsO6NoAKDllODBjODU3MWRhNjhjZjhiNmYwMzIyOTRlNzY3YWZjNjU3ZDhmZTg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-15T09:59:03Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-15T09:59:09Z"}, "message": "internal: Inline handlers module", "tree": {"sha": "8b9ae35cbe1492c9a2955a653a8d2facc2ecc019", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b9ae35cbe1492c9a2955a653a8d2facc2ecc019"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e80c8571da68cf8b6f032294e767afc657d8fe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e80c8571da68cf8b6f032294e767afc657d8fe8", "html_url": "https://github.com/rust-lang/rust/commit/9e80c8571da68cf8b6f032294e767afc657d8fe8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e80c8571da68cf8b6f032294e767afc657d8fe8/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cace5bb35d6c1d949acbfd57b196cd723f0cbf78", "url": "https://api.github.com/repos/rust-lang/rust/commits/cace5bb35d6c1d949acbfd57b196cd723f0cbf78", "html_url": "https://github.com/rust-lang/rust/commit/cace5bb35d6c1d949acbfd57b196cd723f0cbf78"}], "stats": {"total": 117, "additions": 58, "deletions": 59}, "files": [{"sha": "81793e3795a6443207a1f595c680b373efc8b163", "filename": "crates/hir-ty/src/layout/adt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e80c8571da68cf8b6f032294e767afc657d8fe8/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e80c8571da68cf8b6f032294e767afc657d8fe8/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs?ref=9e80c8571da68cf8b6f032294e767afc657d8fe8", "patch": "@@ -38,18 +38,18 @@ pub fn layout_of_adt_query(\n             .map(|(fd, _)| layout_of_ty(db, &field_ty(db, def, fd, &subst), cx.krate))\n             .collect::<Result<Vec<_>, _>>()\n     };\n-    let (variants, is_enum, is_union, repr) = match def {\n+    let (variants, repr) = match def {\n         AdtId::StructId(s) => {\n             let data = db.struct_data(s);\n             let mut r = SmallVec::<[_; 1]>::new();\n             r.push(handle_variant(s.into(), &data.variant_data)?);\n-            (r, false, false, data.repr.unwrap_or_default())\n+            (r, data.repr.unwrap_or_default())\n         }\n         AdtId::UnionId(id) => {\n             let data = db.union_data(id);\n             let mut r = SmallVec::new();\n             r.push(handle_variant(id.into(), &data.variant_data)?);\n-            (r, false, true, data.repr.unwrap_or_default())\n+            (r, data.repr.unwrap_or_default())\n         }\n         AdtId::EnumId(e) => {\n             let data = db.enum_data(e);\n@@ -63,19 +63,19 @@ pub fn layout_of_adt_query(\n                     )\n                 })\n                 .collect::<Result<SmallVec<_>, _>>()?;\n-            (r, true, false, data.repr.unwrap_or_default())\n+            (r, data.repr.unwrap_or_default())\n         }\n     };\n     let variants =\n         variants.iter().map(|x| x.iter().collect::<Vec<_>>()).collect::<SmallVec<[_; 1]>>();\n     let variants = variants.iter().map(|x| x.iter().collect()).collect();\n-    if is_union {\n+    if matches!(def, AdtId::UnionId(..)) {\n         cx.layout_of_union(&repr, &variants).ok_or(LayoutError::Unknown)\n     } else {\n         cx.layout_of_struct_or_enum(\n             &repr,\n             &variants,\n-            is_enum,\n+            matches!(def, AdtId::EnumId(..)),\n             is_unsafe_cell(db, def),\n             layout_scalar_valid_range(db, def),\n             |min, max| repr_discr(&dl, &repr, min, max).unwrap_or((Integer::I8, false)),\n@@ -95,7 +95,7 @@ pub fn layout_of_adt_query(\n             //     .iter_enumerated()\n             //     .any(|(i, v)| v.discr != ty::VariantDiscr::Relative(i.as_u32()))\n             repr.inhibit_enum_layout_opt(),\n-            !is_enum\n+            !matches!(def, AdtId::EnumId(..))\n                 && variants\n                     .iter()\n                     .next()"}, {"sha": "c19be1965444a0a858d5b99b5b6c4ba13be05ab8", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cace5bb35d6c1d949acbfd57b196cd723f0cbf78/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cace5bb35d6c1d949acbfd57b196cd723f0cbf78/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=cace5bb35d6c1d949acbfd57b196cd723f0cbf78", "patch": "@@ -1,45 +0,0 @@\n-//! This module is responsible for implementing handlers for Language Server\n-//! Protocol. The majority of requests are fulfilled by calling into the\n-//! `ide` crate.\n-\n-use ide::AssistResolveStrategy;\n-use lsp_types::{Diagnostic, DiagnosticTag, NumberOrString, Url};\n-\n-use vfs::FileId;\n-\n-use crate::{global_state::GlobalStateSnapshot, to_proto, Result};\n-\n-pub(crate) mod request;\n-pub(crate) mod notification;\n-\n-pub(crate) fn publish_diagnostics(\n-    snap: &GlobalStateSnapshot,\n-    file_id: FileId,\n-) -> Result<Vec<Diagnostic>> {\n-    let _p = profile::span(\"publish_diagnostics\");\n-    let line_index = snap.file_line_index(file_id)?;\n-\n-    let diagnostics: Vec<Diagnostic> = snap\n-        .analysis\n-        .diagnostics(&snap.config.diagnostics(), AssistResolveStrategy::None, file_id)?\n-        .into_iter()\n-        .map(|d| Diagnostic {\n-            range: to_proto::range(&line_index, d.range),\n-            severity: Some(to_proto::diagnostic_severity(d.severity)),\n-            code: Some(NumberOrString::String(d.code.as_str().to_string())),\n-            code_description: Some(lsp_types::CodeDescription {\n-                href: Url::parse(&format!(\n-                    \"https://rust-analyzer.github.io/manual.html#{}\",\n-                    d.code.as_str()\n-                ))\n-                .unwrap(),\n-            }),\n-            source: Some(\"rust-analyzer\".to_string()),\n-            message: d.message,\n-            related_information: None,\n-            tags: if d.unused { Some(vec![DiagnosticTag::UNNECESSARY]) } else { None },\n-            data: None,\n-        })\n-        .collect();\n-    Ok(diagnostics)\n-}"}, {"sha": "65de4366e9f616f61c45c8c55205778e68a266e6", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e80c8571da68cf8b6f032294e767afc657d8fe8/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e80c8571da68cf8b6f032294e767afc657d8fe8/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=9e80c8571da68cf8b6f032294e767afc657d8fe8", "patch": "@@ -25,7 +25,6 @@ mod diff;\n mod dispatch;\n mod from_proto;\n mod global_state;\n-mod handlers;\n mod line_index;\n mod lsp_utils;\n mod main_loop;\n@@ -38,6 +37,11 @@ mod task_pool;\n mod to_proto;\n mod version;\n \n+mod handlers {\n+    pub(crate) mod notification;\n+    pub(crate) mod request;\n+}\n+\n pub mod config;\n pub mod lsp_ext;\n "}, {"sha": "f06abe0763e367e2a6590c00be63708103b22b7a", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9e80c8571da68cf8b6f032294e767afc657d8fe8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e80c8571da68cf8b6f032294e767afc657d8fe8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=9e80c8571da68cf8b6f032294e767afc657d8fe8", "patch": "@@ -764,15 +764,55 @@ impl GlobalState {\n \n         let snapshot = self.snapshot();\n         self.task_pool.handle.spawn(move || {\n+            let _p = profile::span(\"publish_diagnostics\");\n             let diagnostics = subscriptions\n                 .into_iter()\n                 .filter_map(|file_id| {\n-                    crate::handlers::publish_diagnostics(&snapshot, file_id)\n-                        .ok()\n-                        .map(|diags| (file_id, diags))\n+                    let line_index = snapshot.file_line_index(file_id).ok()?;\n+                    Some((\n+                        file_id,\n+                        line_index,\n+                        snapshot\n+                            .analysis\n+                            .diagnostics(\n+                                &snapshot.config.diagnostics(),\n+                                ide::AssistResolveStrategy::None,\n+                                file_id,\n+                            )\n+                            .ok()?,\n+                    ))\n                 })\n-                .collect::<Vec<_>>();\n-            Task::Diagnostics(diagnostics)\n-        })\n+                .map(|(file_id, line_index, it)| {\n+                    (\n+                        file_id,\n+                        it.into_iter()\n+                            .map(move |d| lsp_types::Diagnostic {\n+                                range: crate::to_proto::range(&line_index, d.range),\n+                                severity: Some(crate::to_proto::diagnostic_severity(d.severity)),\n+                                code: Some(lsp_types::NumberOrString::String(\n+                                    d.code.as_str().to_string(),\n+                                )),\n+                                code_description: Some(lsp_types::CodeDescription {\n+                                    href: lsp_types::Url::parse(&format!(\n+                                        \"https://rust-analyzer.github.io/manual.html#{}\",\n+                                        d.code.as_str()\n+                                    ))\n+                                    .unwrap(),\n+                                }),\n+                                source: Some(\"rust-analyzer\".to_string()),\n+                                message: d.message,\n+                                related_information: None,\n+                                tags: if d.unused {\n+                                    Some(vec![lsp_types::DiagnosticTag::UNNECESSARY])\n+                                } else {\n+                                    None\n+                                },\n+                                data: None,\n+                            })\n+                            .collect::<Vec<_>>(),\n+                    )\n+                });\n+            Task::Diagnostics(diagnostics.collect())\n+        });\n     }\n }"}]}