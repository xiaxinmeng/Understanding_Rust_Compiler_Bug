{"sha": "9b03b72d7fb82f07d35e7dcda02754c6da90ae58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMDNiNzJkN2ZiODJmMDdkMzVlN2RjZGEwMjc1NGM2ZGE5MGFlNTg=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-25T01:33:37Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-12-19T07:31:35Z"}, "message": "Remove rt::bookkeeping\n\nThis commit removes the runtime bookkeeping previously used to ensure\nthat all Rust tasks were joined before the runtime was shut down.\n\nThis functionality will be replaced by an RAII style `Thread` API, that\nwill also offer a detached mode.\n\nSince this changes the semantics of shutdown, it is a:\n\n[breaking-change]", "tree": {"sha": "d64cf416856d211a50083a62fd26b444859ba5eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d64cf416856d211a50083a62fd26b444859ba5eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b03b72d7fb82f07d35e7dcda02754c6da90ae58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b03b72d7fb82f07d35e7dcda02754c6da90ae58", "html_url": "https://github.com/rust-lang/rust/commit/9b03b72d7fb82f07d35e7dcda02754c6da90ae58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b03b72d7fb82f07d35e7dcda02754c6da90ae58/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c009bfdf94a48434e1f6bf3bfe59cf539f464ee2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c009bfdf94a48434e1f6bf3bfe59cf539f464ee2", "html_url": "https://github.com/rust-lang/rust/commit/c009bfdf94a48434e1f6bf3bfe59cf539f464ee2"}], "stats": {"total": 73, "additions": 1, "deletions": 72}, "files": [{"sha": "aca520fc088f551c65b77de78eb7cad0a6b4187b", "filename": "src/libstd/rt/bookkeeping.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c009bfdf94a48434e1f6bf3bfe59cf539f464ee2/src%2Flibstd%2Frt%2Fbookkeeping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c009bfdf94a48434e1f6bf3bfe59cf539f464ee2/src%2Flibstd%2Frt%2Fbookkeeping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbookkeeping.rs?ref=c009bfdf94a48434e1f6bf3bfe59cf539f464ee2", "patch": "@@ -1,61 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Task bookkeeping\n-//!\n-//! This module keeps track of the number of running tasks so that entry points\n-//! with libnative know when it's possible to exit the program (once all tasks\n-//! have exited).\n-//!\n-//! The green counterpart for this is bookkeeping on sched pools, and it's up to\n-//! each respective runtime to make sure that they call increment() and\n-//! decrement() manually.\n-\n-use sync::atomic;\n-use ops::Drop;\n-\n-use rt::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n-\n-static TASK_COUNT: atomic::AtomicUint = atomic::INIT_ATOMIC_UINT;\n-static TASK_LOCK: StaticNativeMutex = NATIVE_MUTEX_INIT;\n-\n-#[allow(missing_copy_implementations)]\n-pub struct Token { _private: () }\n-\n-impl Drop for Token {\n-    fn drop(&mut self) { decrement() }\n-}\n-\n-/// Increment the number of live tasks, returning a token which will decrement\n-/// the count when dropped.\n-pub fn increment() -> Token {\n-    let _ = TASK_COUNT.fetch_add(1, atomic::SeqCst);\n-    Token { _private: () }\n-}\n-\n-pub fn decrement() {\n-    unsafe {\n-        if TASK_COUNT.fetch_sub(1, atomic::SeqCst) == 1 {\n-            let guard = TASK_LOCK.lock();\n-            guard.signal();\n-        }\n-    }\n-}\n-\n-/// Waits for all other native tasks in the system to exit. This is only used by\n-/// the entry points of native programs\n-pub fn wait_for_other_tasks() {\n-    unsafe {\n-        let guard = TASK_LOCK.lock();\n-        while TASK_COUNT.load(atomic::SeqCst) > 0 {\n-            guard.wait();\n-        }\n-    }\n-}"}, {"sha": "676dbb0b498a678bcba7d3c85e17da5cf21b60c2", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b03b72d7fb82f07d35e7dcda02754c6da90ae58/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b03b72d7fb82f07d35e7dcda02754c6da90ae58/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=9b03b72d7fb82f07d35e7dcda02754c6da90ae58", "patch": "@@ -73,7 +73,6 @@ pub mod mutex;\n pub mod thread;\n pub mod exclusive;\n pub mod util;\n-pub mod bookkeeping;\n pub mod local;\n pub mod task;\n pub mod unwind;\n@@ -207,7 +206,6 @@ pub fn at_exit(f: proc():Send) {\n /// Invoking cleanup while portions of the runtime are still in use may cause\n /// undefined behavior.\n pub unsafe fn cleanup() {\n-    bookkeeping::wait_for_other_tasks();\n     args::cleanup();\n     thread::cleanup();\n     local_ptr::cleanup();"}, {"sha": "98940a2b381c7b40600920d4ab9391be0e30e9d9", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b03b72d7fb82f07d35e7dcda02754c6da90ae58/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b03b72d7fb82f07d35e7dcda02754c6da90ae58/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=9b03b72d7fb82f07d35e7dcda02754c6da90ae58", "patch": "@@ -29,7 +29,6 @@ use str::SendStr;\n use thunk::Thunk;\n \n use rt;\n-use rt::bookkeeping;\n use rt::mutex::NativeMutex;\n use rt::local::Local;\n use rt::thread::{mod, Thread};\n@@ -132,11 +131,6 @@ impl Task {\n \n         let stack = stack_size.unwrap_or(rt::min_stack());\n \n-        // Note that this increment must happen *before* the spawn in order to\n-        // guarantee that if this task exits it will always end up waiting for\n-        // the spawned task to exit.\n-        let token = bookkeeping::increment();\n-\n         // Spawning a new OS thread guarantees that __morestack will never get\n         // triggered, but we must manually set up the actual stack bounds once\n         // this function starts executing. This raises the lower limit by a bit\n@@ -156,7 +150,6 @@ impl Task {\n \n             let mut f = Some(f);\n             drop(task.run(|| { f.take().unwrap().invoke(()) }).destroy());\n-            drop(token);\n         })\n     }\n "}, {"sha": "ef0181b72b0b7d88300c71f8e1173ee6b0a09f3a", "filename": "src/libstd/sys/common/helper_thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b03b72d7fb82f07d35e7dcda02754c6da90ae58/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b03b72d7fb82f07d35e7dcda02754c6da90ae58/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs?ref=9b03b72d7fb82f07d35e7dcda02754c6da90ae58", "patch": "@@ -25,7 +25,7 @@ use prelude::*;\n use cell::UnsafeCell;\n use mem;\n use sync::{StaticMutex, StaticCondvar};\n-use rt::{mod, bookkeeping};\n+use rt;\n use sys::helper_signal;\n \n use task;\n@@ -83,7 +83,6 @@ impl<M: Send> Helper<M> {\n \n                 let t = f();\n                 task::spawn(move |:| {\n-                    bookkeeping::decrement();\n                     helper(receive, rx, t);\n                     let _g = self.lock.lock();\n                     *self.shutdown.get() = true;"}]}