{"sha": "8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZGIxMWM0ZDk0YTA1YzNkNjE0OGU1MmI1M2E2Yjk1ZWM5ZjBhMTM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-03T15:30:05Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:17:36Z"}, "message": "Forbid the creation of mutable borrows to fields of layout constrained types", "tree": {"sha": "62ce5d05ee0a55aa9493ba2637a099e16f8a4379", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62ce5d05ee0a55aa9493ba2637a099e16f8a4379"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13", "html_url": "https://github.com/rust-lang/rust/commit/8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "693c55372e950bcf19a95d713a82250a5f4d1bba", "url": "https://api.github.com/repos/rust-lang/rust/commits/693c55372e950bcf19a95d713a82250a5f4d1bba", "html_url": "https://github.com/rust-lang/rust/commit/693c55372e950bcf19a95d713a82250a5f4d1bba"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "05052c8a8c8c901e4d47a0ddaef63f68c9a0b16a", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13", "patch": "@@ -187,6 +187,9 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                             kind: UnsafetyViolationKind::BorrowPacked(lint_root)\n                         }], &[]);\n                     }\n+                    if context.is_mutating_use() {\n+                        self.check_mut_borrowing_layout_constrained_field(place);\n+                    }\n                 }\n                 let old_source_info = self.source_info;\n                 if let &Place::Local(local) = base {\n@@ -350,6 +353,43 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             (node_id, is_used && !within_unsafe)\n         }));\n     }\n+    fn check_mut_borrowing_layout_constrained_field(\n+        &mut self,\n+        mut place: &Place<'tcx>,\n+    ) {\n+        while let &Place::Projection(box Projection {\n+            ref base, ref elem\n+        }) = place {\n+            match *elem {\n+                ProjectionElem::Field(..) => {\n+                    let ty = base.ty(&self.mir.local_decls, self.tcx).to_ty(self.tcx);\n+                    match ty.sty {\n+                        ty::Adt(def, _) => match self.tcx.layout_scalar_valid_range(def.did) {\n+                            (Bound::Unbounded, Bound::Unbounded) => {},\n+                            _ => {\n+                                let source_info = self.source_info;\n+                                self.register_violations(&[UnsafetyViolation {\n+                                    source_info,\n+                                    description: Symbol::intern(\n+                                        \"borrow of layout constrained field\",\n+                                    ).as_interned_str(),\n+                                    details:\n+                                        Symbol::intern(\n+                                            \"references to fields of layout constrained fields \\\n+                                            lose the constraints\",\n+                                        ).as_interned_str(),\n+                                    kind: UnsafetyViolationKind::MinConstFn,\n+                                }], &[]);\n+                            }\n+                        },\n+                        _ => {}\n+                    }\n+                }\n+                _ => {}\n+            }\n+            place = base;\n+        }\n+    }\n }\n \n pub(crate) fn provide(providers: &mut Providers) {"}, {"sha": "c9fdadeaf05fdfef93f314f6e6b5aba4839da803", "filename": "src/test/ui/unsafe/ranged_ints.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13/src%2Ftest%2Fui%2Funsafe%2Franged_ints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13/src%2Ftest%2Fui%2Funsafe%2Franged_ints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints.rs?ref=8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13", "patch": "@@ -0,0 +1,8 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_layout_scalar_valid_range_start(1)]\n+#[repr(transparent)]\n+pub(crate) struct NonZero<T>(pub(crate) T);\n+fn main() {\n+    let _x = NonZero(0); //~ ERROR initializing type with `rustc_layout_scalar_valid_range` attr\n+}\n\\ No newline at end of file"}, {"sha": "c28adba9ee5360ca1ba8760759a848115ad5a15e", "filename": "src/test/ui/unsafe/ranged_ints.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13/src%2Ftest%2Fui%2Funsafe%2Franged_ints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13/src%2Ftest%2Fui%2Funsafe%2Franged_ints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints.stderr?ref=8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: initializing type with `rustc_layout_scalar_valid_range` attr is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints.rs:7:14\n+   |\n+LL |     let _x = NonZero(0); //~ ERROR initializing type with `rustc_layout_scalar_valid_range` attr\n+   |              ^^^^^^^^^^ initializing type with `rustc_layout_scalar_valid_range` attr\n+   |\n+   = note: initializing `NonZero` with a `0` violates layout constraints and is undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "9e1acb1a7b1a3e2ec08ec5603d591ef18254aa35", "filename": "src/test/ui/unsafe/ranged_ints2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.rs?ref=8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13", "patch": "@@ -0,0 +1,9 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_layout_scalar_valid_range_start(1)]\n+#[repr(transparent)]\n+pub(crate) struct NonZero<T>(pub(crate) T);\n+fn main() {\n+    let mut x = unsafe { NonZero(1) };\n+    let y = &mut x.0; //~ ERROR borrow of layout constrained field is unsafe\n+}\n\\ No newline at end of file"}, {"sha": "77313f27a420babea4b6d199ac36a262a61ff0d6", "filename": "src/test/ui/unsafe/ranged_ints2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.stderr?ref=8bdb11c4d94a05c3d6148e52b53a6b95ec9f0a13", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: borrow of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints2.rs:8:13\n+   |\n+LL |     let y = &mut x.0; //~ ERROR borrow of layout constrained field is unsafe\n+   |             ^^^^^^^^ borrow of layout constrained field\n+   |\n+   = note: references to fields of layout constrained fields lose the constraints\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}]}