{"sha": "cdb52c02015805beac9dc7931880a482409e7162", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYjUyYzAyMDE1ODA1YmVhYzlkYzc5MzE4ODBhNDgyNDA5ZTcxNjI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-05-12T00:51:00Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-05-12T00:51:00Z"}, "message": "rustc: Don't call type_error_message() with ty_err as the expected type\n\nIn #6319, several people mentioned they ran into a \"computing\nfictitious type\" ICE in trans. This turns out to be because some\nof my recent changes to typeck::check::_match resulted in type errors\ngetting reported with ty_err as the expected type, which meant the errors\nwere suppressed, and typechecking incorrectly succeeded (since the errors\nweren't recorded).\n\nChanged the error messages in these cases not to use an expected type at all,\nrather, printing out a string describing the type that was expected (which is\nwhat the code originally did). The result is a bit repetitive and the\nproliferation of error-reporting functions in typeck::infer is a bit annoying,\nbut I thought it was important to fix this now; more cleanup can happen later.", "tree": {"sha": "89dcc5727ea2cca9095be3b7aebb82adb0f6da83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89dcc5727ea2cca9095be3b7aebb82adb0f6da83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdb52c02015805beac9dc7931880a482409e7162", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb52c02015805beac9dc7931880a482409e7162", "html_url": "https://github.com/rust-lang/rust/commit/cdb52c02015805beac9dc7931880a482409e7162", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdb52c02015805beac9dc7931880a482409e7162/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d546493096f35e68cbcd9b5d3d7654e7a9345744", "url": "https://api.github.com/repos/rust-lang/rust/commits/d546493096f35e68cbcd9b5d3d7654e7a9345744", "html_url": "https://github.com/rust-lang/rust/commit/d546493096f35e68cbcd9b5d3d7654e7a9345744"}], "stats": {"total": 133, "additions": 84, "deletions": 49}, "files": [{"sha": "e27c2ff97dbd2a2716b1427f7126fcf0f449686f", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 36, "deletions": 38, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/cdb52c02015805beac9dc7931880a482409e7162/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb52c02015805beac9dc7931880a482409e7162/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=cdb52c02015805beac9dc7931880a482409e7162", "patch": "@@ -146,13 +146,12 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: @ast::pat, path: @ast::Path,\n                     kind_name = \"variant\";\n                 }\n                 None => {\n-                    let resolved_expected =\n-                        fcx.infcx().ty_to_str(fcx.infcx().resolve_type_vars_if_possible(expected));\n-                    fcx.infcx().type_error_message_str(pat.span,\n-                                                       |actual| {\n+                    fcx.infcx().type_error_message_str_with_expected(pat.span,\n+                                                       |expected, actual| {\n+                                                       expected.map_default(~\"\", |&e| {\n                         fmt!(\"mismatched types: expected `%s` but found %s\",\n-                             resolved_expected, actual)},\n-                             ~\"a structure pattern\",\n+                             e, actual)})},\n+                             Some(expected), ~\"a structure pattern\",\n                              None);\n                     fcx.write_error(pat.id);\n                     kind_name = \"[error]\";\n@@ -189,13 +188,12 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: @ast::pat, path: @ast::Path,\n             kind_name = \"structure\";\n         }\n         _ => {\n-            let resolved_expected =\n-                fcx.infcx().ty_to_str(fcx.infcx().resolve_type_vars_if_possible(expected));\n-            fcx.infcx().type_error_message_str(pat.span,\n-                                               |actual| {\n+            fcx.infcx().type_error_message_str_with_expected(pat.span,\n+                                               |expected, actual| {\n+                                               expected.map_default(~\"\", |&e| {\n                     fmt!(\"mismatched types: expected `%s` but found %s\",\n-                         resolved_expected, actual)},\n-                    ~\"an enum or structure pattern\",\n+                         e, actual)})},\n+                    Some(expected), ~\"an enum or structure pattern\",\n                     None);\n             fcx.write_error(pat.id);\n             kind_name = \"[error]\";\n@@ -514,20 +512,17 @@ pub fn check_pat(pcx: &pat_ctxt, pat: @ast::pat, expected: ty::t) {\n                 for elts.each |elt| {\n                     check_pat(pcx, *elt, ty::mk_err());\n                 }\n-                let actual = ty::mk_tup(tcx, elts.map(|pat_var| {\n-                    fcx.node_ty(pat_var.id)\n-                }));\n                 // use terr_tuple_size if both types are tuples\n                 let type_error = match s {\n                     ty::ty_tup(ref ex_elts) =>\n                         ty::terr_tuple_size(ty::expected_found{expected: ex_elts.len(),\n                                                            found: e_count}),\n                     _ => ty::terr_mismatch\n                 };\n-                fcx.infcx().report_mismatched_types(pat.span,\n-                                                    expected,\n-                                                    actual,\n-                                                    &type_error);\n+                fcx.infcx().type_error_message_str_with_expected(pat.span, |expected, actual| {\n+                expected.map_default(~\"\", |&e| {\n+                    fmt!(\"mismatched types: expected `%s` but found %s\",\n+                                     e, actual)})}, Some(expected), ~\"tuple\", Some(&type_error));\n                 fcx.write_error(pat.id);\n             }\n         }\n@@ -572,14 +567,15 @@ pub fn check_pat(pcx: &pat_ctxt, pat: @ast::pat, expected: ty::t) {\n               for after.each |&elt| {\n                   check_pat(pcx, elt, ty::mk_err());\n               }\n-              let resolved_expected =\n-                  fcx.infcx().ty_to_str(fcx.infcx().resolve_type_vars_if_possible(expected));\n-              fcx.infcx().type_error_message_str(pat.span,\n-                  |actual| {\n-                      fmt!(\"mismatched types: expected `%s` but found %s\",\n-                           resolved_expected, actual)},\n-                                                 ~\"a vector pattern\",\n-                                                 None);\n+              fcx.infcx().type_error_message_str_with_expected(\n+                  pat.span,\n+                  |expected, actual| {\n+                      expected.map_default(~\"\", |&e| {\n+                          fmt!(\"mismatched types: expected `%s` but found %s\",\n+                               e, actual)})},\n+                  Some(expected),\n+                  ~\"a vector pattern\",\n+                  None);\n               fcx.write_error(pat.id);\n               return;\n           }\n@@ -629,17 +625,19 @@ pub fn check_pointer_pat(pcx: &pat_ctxt,\n         }\n         _ => {\n             check_pat(pcx, inner, ty::mk_err());\n-            let resolved_expected =\n-                fcx.infcx().ty_to_str(fcx.infcx().resolve_type_vars_if_possible(expected));\n-            fcx.infcx().type_error_message_str(span, |actual| {\n-                    fmt!(\"mismatched types: expected `%s` but found %s\",\n-                         resolved_expected, actual)},\n-                                               fmt!(\"%s pattern\", match pointer_kind {\n-                                                   Managed => \"an @-box\",\n-                                                   Owned => \"a ~-box\",\n-                                                   Borrowed => \"an &-pointer\"\n-                                               }),\n-                    None);\n+            fcx.infcx().type_error_message_str_with_expected(\n+                span,\n+                |expected, actual| {\n+                    expected.map_default(~\"\", |&e| {\n+                        fmt!(\"mismatched types: expected `%s` but found %s\",\n+                             e, actual)})},\n+                Some(expected),\n+                fmt!(\"%s pattern\", match pointer_kind {\n+                    Managed => \"an @-box\",\n+                    Owned => \"a ~-box\",\n+                    Borrowed => \"an &-pointer\"\n+                }),\n+                None);\n             fcx.write_error(pat_id);\n           }\n     }"}, {"sha": "2c42914f4b551fd3f71d85a17be38794cb527225", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/cdb52c02015805beac9dc7931880a482409e7162/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb52c02015805beac9dc7931880a482409e7162/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=cdb52c02015805beac9dc7931880a482409e7162", "patch": "@@ -728,30 +728,53 @@ pub impl InferCtxt {\n         }\n     }\n \n+    fn type_error_message_str(@mut self,\n+                              sp: span,\n+                              mk_msg: &fn(Option<~str>, ~str) -> ~str,\n+                              actual_ty: ~str, err: Option<&ty::type_err>) {\n+        self.type_error_message_str_with_expected(sp, mk_msg, None, actual_ty, err)\n+    }\n+\n+    fn type_error_message_str_with_expected(@mut self,\n+                                            sp: span,\n+                                            mk_msg: &fn(Option<~str>, ~str) -> ~str,\n+                                            expected_ty: Option<ty::t>, actual_ty: ~str,\n+                                            err: Option<&ty::type_err>) {\n+        debug!(\"hi! expected_ty = %?, actual_ty = %s\", expected_ty, actual_ty);\n \n-    fn type_error_message_str(@mut self, sp: span, mk_msg: &fn(~str) -> ~str,\n-                          actual_ty: ~str, err: Option<&ty::type_err>) {\n         let error_str = err.map_default(~\"\", |t_err|\n                          fmt!(\" (%s)\",\n                               ty::type_err_to_str(self.tcx, *t_err)));\n-        self.tcx.sess.span_err(sp,\n-           fmt!(\"%s%s\", mk_msg(actual_ty), error_str));\n-        for err.each |err| {\n-            ty::note_and_explain_type_err(self.tcx, *err)\n+        let resolved_expected = expected_ty.map(|&e_ty|\n+                                                { self.resolve_type_vars_if_possible(e_ty) });\n+        if !resolved_expected.map_default(false, |&e| { ty::type_is_error(e) }) {\n+            match resolved_expected {\n+                None => self.tcx.sess.span_err(sp,\n+                            fmt!(\"%s%s\", mk_msg(None, actual_ty), error_str)),\n+                Some(e) => {\n+                    self.tcx.sess.span_err(sp,\n+                        fmt!(\"%s%s\", mk_msg(Some(self.ty_to_str(e)), actual_ty), error_str));\n+                }\n+            }\n+            for err.each |err| {\n+                ty::note_and_explain_type_err(self.tcx, *err)\n+            }\n         }\n     }\n \n-    fn type_error_message(@mut self, sp: span, mk_msg: &fn(~str) -> ~str,\n-                          actual_ty: ty::t, err: Option<&ty::type_err>) {\n+    fn type_error_message(@mut self,\n+                          sp: span,\n+                          mk_msg: &fn(~str) -> ~str,\n+                          actual_ty: ty::t,\n+                          err: Option<&ty::type_err>) {\n         let actual_ty = self.resolve_type_vars_if_possible(actual_ty);\n \n         // Don't report an error if actual type is ty_err.\n         if ty::type_is_error(actual_ty) {\n             return;\n         }\n \n-        self.type_error_message_str(sp, mk_msg, self.ty_to_str(actual_ty),\n-                                    err);\n+        self.type_error_message_str(sp, |_e, a| { mk_msg(a) }, self.ty_to_str(actual_ty), err);\n     }\n \n     fn report_mismatched_types(@mut self, sp: span, e: ty::t, a: ty::t,"}, {"sha": "8cc047230dc97f55487cd55ca46bc9ee017456ea", "filename": "src/test/compile-fail/issue-5100.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb52c02015805beac9dc7931880a482409e7162/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb52c02015805beac9dc7931880a482409e7162/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs?ref=cdb52c02015805beac9dc7931880a482409e7162", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     }\n \n     match (true, false) {\n-        (true, false, false) => () //~ ERROR mismatched types: expected `(bool,bool)` but found `(bool,bool,bool)` (expected a tuple with 2 elements but found one with 3 elements)\n+        (true, false, false) => () //~ ERROR mismatched types: expected `(bool,bool)` but found tuple (expected a tuple with 2 elements but found one with 3 elements)\n     }\n \n     match (true, false) {"}, {"sha": "b4a72548cfc0ddea9176d4a0267afdc7c525af70", "filename": "src/test/compile-fail/suppressed-error.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cdb52c02015805beac9dc7931880a482409e7162/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb52c02015805beac9dc7931880a482409e7162/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs?ref=cdb52c02015805beac9dc7931880a482409e7162", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let (x, y) = (); //~ ERROR expected `()` but found tuple (types differ)\n+    return x;\n+}\n\\ No newline at end of file"}]}