{"sha": "ed96926df715a856604a53e177e34ce445e89b7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkOTY5MjZkZjcxNWE4NTY2MDRhNTNlMTc3ZTM0Y2U0NDVlODliN2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-05T13:15:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-05T13:15:40Z"}, "message": "methods with type params", "tree": {"sha": "d8e9d5cb24d012cdae1501d475e5f73a2e9befa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8e9d5cb24d012cdae1501d475e5f73a2e9befa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed96926df715a856604a53e177e34ce445e89b7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed96926df715a856604a53e177e34ce445e89b7d", "html_url": "https://github.com/rust-lang/rust/commit/ed96926df715a856604a53e177e34ce445e89b7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed96926df715a856604a53e177e34ce445e89b7d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e1e2e83c462b7efacaa0e33812beed72a88ab5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1e2e83c462b7efacaa0e33812beed72a88ab5f", "html_url": "https://github.com/rust-lang/rust/commit/1e1e2e83c462b7efacaa0e33812beed72a88ab5f"}], "stats": {"total": 82, "additions": 48, "deletions": 34}, "files": [{"sha": "4421a444ccb2469eeb44ccdf875d7b0427747d47", "filename": "src/grammar/expressions/mod.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ed96926df715a856604a53e177e34ce445e89b7d/src%2Fgrammar%2Fexpressions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed96926df715a856604a53e177e34ce445e89b7d/src%2Fgrammar%2Fexpressions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fexpressions%2Fmod.rs?ref=ed96926df715a856604a53e177e34ce445e89b7d", "patch": "@@ -35,7 +35,7 @@ struct Restrictions {\n \n enum Op {\n     Simple,\n-    Composite(SyntaxKind, u8)\n+    Composite(SyntaxKind, u8),\n }\n \n // test expr_binding_power\n@@ -52,16 +52,16 @@ enum Op {\n // }\n fn current_op(p: &Parser) -> (u8, Op) {\n     if p.at_compound2(L_ANGLE, EQ) {\n-        return (2, Op::Composite(LTEQ, 2))\n+        return (2, Op::Composite(LTEQ, 2));\n     }\n     if p.at_compound2(R_ANGLE, EQ) {\n-        return (2, Op::Composite(GTEQ, 2))\n+        return (2, Op::Composite(GTEQ, 2));\n     }\n     if p.at_compound2(PLUS, EQ) {\n-        return (1, Op::Composite(PLUSEQ, 2))\n+        return (1, Op::Composite(PLUSEQ, 2));\n     }\n     if p.at_compound2(MINUS, EQ) {\n-        return (1, Op::Composite(MINUSEQ, 2))\n+        return (1, Op::Composite(MINUSEQ, 2));\n     }\n \n     let bp = match p.current() {\n@@ -90,7 +90,7 @@ fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) {\n             Op::Simple => p.bump(),\n             Op::Composite(kind, n) => {\n                 p.bump_compound(kind, n);\n-            },\n+            }\n         }\n         lhs = bin_expr(p, r, lhs, op_bp);\n     }\n@@ -115,8 +115,7 @@ fn unary_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMarker> {\n             p.bump();\n             p.eat(MUT_KW);\n             REF_EXPR\n-\n-        },\n+        }\n         // test deref_expr\n         // fn foo() {\n         //     **&1;\n@@ -125,7 +124,7 @@ fn unary_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMarker> {\n             m = p.start();\n             p.bump();\n             DEREF_EXPR\n-        },\n+        }\n         // test not_expr\n         // fn foo() {\n         //     !!true;\n@@ -134,10 +133,10 @@ fn unary_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMarker> {\n             m = p.start();\n             p.bump();\n             NOT_EXPR\n-        },\n+        }\n         _ => {\n             let lhs = atom::atom_expr(p, r)?;\n-            return Some(postfix_expr(p, lhs))\n+            return Some(postfix_expr(p, lhs));\n         }\n     };\n     unary_expr(p, r);\n@@ -148,7 +147,7 @@ fn postfix_expr(p: &mut Parser, mut lhs: CompletedMarker) -> CompletedMarker {\n     loop {\n         lhs = match p.current() {\n             L_PAREN => call_expr(p, lhs),\n-            DOT if p.nth(1) == IDENT => if p.nth(2) == L_PAREN {\n+            DOT if p.nth(1) == IDENT => if p.nth(2) == L_PAREN || p.nth(2) == COLONCOLON {\n                 method_call_expr(p, lhs)\n             } else {\n                 field_expr(p, lhs)\n@@ -176,13 +175,17 @@ fn call_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n // test method_call_expr\n // fn foo() {\n //     x.foo();\n-//     y.bar(1, 2,);\n+//     y.bar::<T>(1, 2,);\n // }\n fn method_call_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n-    assert!(p.at(DOT) && p.nth(1) == IDENT && p.nth(2) == L_PAREN);\n+    assert!(\n+        p.at(DOT) && p.nth(1) == IDENT\n+            && (p.nth(2) == L_PAREN || p.nth(2) == COLONCOLON)\n+    );\n     let m = lhs.precede(p);\n     p.bump();\n     name_ref(p);\n+    type_args::type_arg_list(p, true);\n     arg_list(p);\n     m.complete(p, METHOD_CALL_EXPR)\n }"}, {"sha": "91c4cd77fb6c53728ffa272b707cf47e5b516f26", "filename": "src/yellow/red.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed96926df715a856604a53e177e34ce445e89b7d/src%2Fyellow%2Fred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed96926df715a856604a53e177e34ce445e89b7d/src%2Fyellow%2Fred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fred.rs?ref=ed96926df715a856604a53e177e34ce445e89b7d", "patch": "@@ -1,4 +1,5 @@\n use std::ptr;\n+\n use parking_lot::RwLock;\n use {yellow::GreenNode, TextUnit};\n "}, {"sha": "1a3aa35ae8e73cb890aadbfbd72ceda99b278dc6", "filename": "tests/data/parser/inline/0051_method_call_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed96926df715a856604a53e177e34ce445e89b7d/tests%2Fdata%2Fparser%2Finline%2F0051_method_call_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed96926df715a856604a53e177e34ce445e89b7d/tests%2Fdata%2Fparser%2Finline%2F0051_method_call_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0051_method_call_expr.rs?ref=ed96926df715a856604a53e177e34ce445e89b7d", "patch": "@@ -1,4 +1,4 @@\n fn foo() {\n     x.foo();\n-    y.bar(1, 2,);\n+    y.bar::<T>(1, 2,);\n }"}, {"sha": "598056c880f3e507b59671787fbb738c48e16d75", "filename": "tests/data/parser/inline/0051_method_call_expr.txt", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ed96926df715a856604a53e177e34ce445e89b7d/tests%2Fdata%2Fparser%2Finline%2F0051_method_call_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ed96926df715a856604a53e177e34ce445e89b7d/tests%2Fdata%2Fparser%2Finline%2F0051_method_call_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0051_method_call_expr.txt?ref=ed96926df715a856604a53e177e34ce445e89b7d", "patch": "@@ -1,5 +1,5 @@\n-FILE@[0; 44)\n-  FN_ITEM@[0; 44)\n+FILE@[0; 49)\n+  FN_ITEM@[0; 49)\n     FN_KW@[0; 2)\n     NAME@[2; 6)\n       WHITESPACE@[2; 3)\n@@ -8,7 +8,7 @@ FILE@[0; 44)\n       L_PAREN@[6; 7)\n       R_PAREN@[7; 8)\n       WHITESPACE@[8; 9)\n-    BLOCK_EXPR@[9; 44)\n+    BLOCK_EXPR@[9; 49)\n       L_CURLY@[9; 10)\n       EXPR_STMT@[10; 28)\n         METHOD_CALL_EXPR@[10; 22)\n@@ -26,8 +26,8 @@ FILE@[0; 44)\n             R_PAREN@[21; 22)\n         SEMI@[22; 23)\n         WHITESPACE@[23; 28)\n-      EXPR_STMT@[28; 42)\n-        METHOD_CALL_EXPR@[28; 40)\n+      EXPR_STMT@[28; 47)\n+        METHOD_CALL_EXPR@[28; 45)\n           PATH_EXPR@[28; 29)\n             PATH@[28; 29)\n               PATH_SEGMENT@[28; 29)\n@@ -36,17 +36,27 @@ FILE@[0; 44)\n           DOT@[29; 30)\n           NAME_REF@[30; 33)\n             IDENT@[30; 33) \"bar\"\n-          ARG_LIST@[33; 40)\n-            L_PAREN@[33; 34)\n-            LITERAL@[34; 35)\n-              INT_NUMBER@[34; 35) \"1\"\n-            COMMA@[35; 36)\n-            LITERAL@[36; 38)\n-              WHITESPACE@[36; 37)\n-              INT_NUMBER@[37; 38) \"2\"\n-            COMMA@[38; 39)\n-            R_PAREN@[39; 40)\n-        SEMI@[40; 41)\n-        WHITESPACE@[41; 42)\n-      R_CURLY@[42; 43)\n-      WHITESPACE@[43; 44)\n+          TYPE_ARG_LIST@[33; 38)\n+            COLONCOLON@[33; 35)\n+            L_ANGLE@[35; 36)\n+            TYPE_ARG@[36; 37)\n+              PATH_TYPE@[36; 37)\n+                PATH@[36; 37)\n+                  PATH_SEGMENT@[36; 37)\n+                    NAME_REF@[36; 37)\n+                      IDENT@[36; 37) \"T\"\n+            R_ANGLE@[37; 38)\n+          ARG_LIST@[38; 45)\n+            L_PAREN@[38; 39)\n+            LITERAL@[39; 40)\n+              INT_NUMBER@[39; 40) \"1\"\n+            COMMA@[40; 41)\n+            LITERAL@[41; 43)\n+              WHITESPACE@[41; 42)\n+              INT_NUMBER@[42; 43) \"2\"\n+            COMMA@[43; 44)\n+            R_PAREN@[44; 45)\n+        SEMI@[45; 46)\n+        WHITESPACE@[46; 47)\n+      R_CURLY@[47; 48)\n+      WHITESPACE@[48; 49)"}]}