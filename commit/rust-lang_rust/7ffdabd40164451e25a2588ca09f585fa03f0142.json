{"sha": "7ffdabd40164451e25a2588ca09f585fa03f0142", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZmRhYmQ0MDE2NDQ1MWUyNWEyNTg4Y2EwOWY1ODVmYTAzZjAxNDI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-12T18:26:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-12T18:26:35Z"}, "message": "Rollup merge of #47328 - mbrubeck:fs_read, r=sfackler\n\nUse the new fs_read_write functions in rustc internals\n\nUses `fs::read` and `fs::write` (added by #45837) where appropriate, to simplify code and dog-food these new APIs.  This also improves performance, when combined with #47324.", "tree": {"sha": "5c0c8254fd97d05c810dc4f31506dbcff71962dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c0c8254fd97d05c810dc4f31506dbcff71962dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ffdabd40164451e25a2588ca09f585fa03f0142", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ffdabd40164451e25a2588ca09f585fa03f0142", "html_url": "https://github.com/rust-lang/rust/commit/7ffdabd40164451e25a2588ca09f585fa03f0142", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ffdabd40164451e25a2588ca09f585fa03f0142/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52770e69ac9521081f950ef553cd6e48b3b87079", "url": "https://api.github.com/repos/rust-lang/rust/commits/52770e69ac9521081f950ef553cd6e48b3b87079", "html_url": "https://github.com/rust-lang/rust/commit/52770e69ac9521081f950ef553cd6e48b3b87079"}, {"sha": "3f9c057ea60db153b7f3d24fee4b892b130cb874", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f9c057ea60db153b7f3d24fee4b892b130cb874", "html_url": "https://github.com/rust-lang/rust/commit/3f9c057ea60db153b7f3d24fee4b892b130cb874"}], "stats": {"total": 106, "additions": 42, "deletions": 64}, "files": [{"sha": "075ee0b8c7c2874ce62ab77cd44d91eb6f97c906", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -48,6 +48,7 @@\n #![feature(drain_filter)]\n #![feature(dyn_trait)]\n #![feature(from_ref)]\n+#![feature(fs_read_write)]\n #![feature(i128)]\n #![feature(i128_type)]\n #![feature(inclusive_range)]"}, {"sha": "2971f3e853a99d06f38e21e3b13b60ada46ebe20", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -218,13 +218,10 @@ pub fn record_time<T, F>(accu: &Cell<Duration>, f: F) -> T where\n // Memory reporting\n #[cfg(unix)]\n fn get_resident() -> Option<usize> {\n-    use std::fs::File;\n-    use std::io::Read;\n+    use std::fs;\n \n     let field = 1;\n-    let mut f = File::open(\"/proc/self/statm\").ok()?;\n-    let mut contents = String::new();\n-    f.read_to_string(&mut contents).ok()?;\n+    let contents = fs::read_string(\"/proc/self/statm\").ok()?;\n     let s = contents.split_whitespace().nth(field)?;\n     let npages = s.parse::<usize>().ok()?;\n     Some(npages * 4096)"}, {"sha": "8bf60b091a7ad88f141a97296f0cd1e131c87a30", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -28,6 +28,7 @@\n \n #![feature(box_syntax)]\n #![feature(const_fn)]\n+#![feature(fs_read_write)]\n \n extern crate syntax;\n extern crate rand;"}, {"sha": "b65b18d0caa8c0d1f7fdcec38e882490d2311353", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -47,7 +47,6 @@\n use serialize::json::{Json, ToJson};\n use std::collections::BTreeMap;\n use std::default::Default;\n-use std::io::prelude::*;\n use syntax::abi::{Abi, lookup as lookup_abi};\n \n use {LinkerFlavor, PanicStrategy, RelroLevel};\n@@ -811,14 +810,12 @@ impl Target {\n     pub fn search(target: &str) -> Result<Target, String> {\n         use std::env;\n         use std::ffi::OsString;\n-        use std::fs::File;\n+        use std::fs;\n         use std::path::{Path, PathBuf};\n         use serialize::json;\n \n         fn load_file(path: &Path) -> Result<Target, String> {\n-            let mut f = File::open(path).map_err(|e| e.to_string())?;\n-            let mut contents = Vec::new();\n-            f.read_to_end(&mut contents).map_err(|e| e.to_string())?;\n+            let contents = fs::read(path).map_err(|e| e.to_string())?;\n             let obj = json::from_reader(&mut &contents[..])\n                            .map_err(|e| e.to_string())?;\n             Target::from_json(obj)"}, {"sha": "5976b80d90f871f0f8e164b249848e855bf0a5be", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -55,7 +55,7 @@ use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::ich::{ATTR_IF_THIS_CHANGED, ATTR_THEN_THIS_WOULD_NEED};\n use graphviz::IntoCow;\n use std::env;\n-use std::fs::File;\n+use std::fs::{self, File};\n use std::io::Write;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -260,7 +260,7 @@ fn dump_graph(tcx: TyCtxt) {\n         let dot_path = format!(\"{}.dot\", path);\n         let mut v = Vec::new();\n         dot::render(&GraphvizDepGraph(nodes, edges), &mut v).unwrap();\n-        File::create(&dot_path).and_then(|mut f| f.write_all(&v)).unwrap();\n+        fs::write(dot_path, v).unwrap();\n     }\n }\n "}, {"sha": "0b827a0ee9873e58cb7be015eaefe98aca199c61", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -16,6 +16,7 @@\n #![deny(warnings)]\n \n #![feature(conservative_impl_trait)]\n+#![feature(fs_read_write)]\n #![feature(i128_type)]\n #![feature(inclusive_range_syntax)]\n #![feature(specialization)]"}, {"sha": "d45994adeb67bcf2da10fcbfed2c587ff9632c90", "filename": "src/librustc_incremental/persist/file_format.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -21,7 +21,7 @@\n \n use std::io::{self, Read};\n use std::path::Path;\n-use std::fs::File;\n+use std::fs;\n use std::env;\n \n use rustc::session::config::nightly_options;\n@@ -66,11 +66,7 @@ pub fn read_file(report_incremental_info: bool, path: &Path)\n         return Ok(None);\n     }\n \n-    let mut file = File::open(path)?;\n-    let file_size = file.metadata()?.len() as usize;\n-\n-    let mut data = Vec::with_capacity(file_size);\n-    file.read_to_end(&mut data)?;\n+    let data = fs::read(path)?;\n \n     let mut file = io::Cursor::new(data);\n "}, {"sha": "d44d1d6f260249175b64f9866d8f696b5c5ced36", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -15,8 +15,8 @@ use rustc::util::common::time;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_serialize::Encodable as RustcEncodable;\n use rustc_serialize::opaque::Encoder;\n-use std::io::{self, Cursor, Write};\n-use std::fs::{self, File};\n+use std::io::{self, Cursor};\n+use std::fs;\n use std::path::PathBuf;\n \n use super::data::*;\n@@ -125,7 +125,7 @@ fn save_in<F>(sess: &Session, path_buf: PathBuf, encode: F)\n \n     // write the data out\n     let data = wr.into_inner();\n-    match File::create(&path_buf).and_then(|mut file| file.write_all(&data)) {\n+    match fs::write(&path_buf, data) {\n         Ok(_) => {\n             debug!(\"save: data written to disk successfully\");\n         }"}, {"sha": "33075e404321c57fcc86a037706665873519b82b", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -15,6 +15,7 @@\n \n #![feature(box_patterns)]\n #![feature(conservative_impl_trait)]\n+#![feature(fs_read_write)]\n #![feature(i128_type)]\n #![feature(libc)]\n #![feature(proc_macro_internals)]"}, {"sha": "e0fb924f1aa3e41a38a122e691449c9e19c74386", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -237,7 +237,7 @@ use rustc_back::target::Target;\n \n use std::cmp;\n use std::fmt;\n-use std::fs::{self, File};\n+use std::fs;\n use std::io::{self, Read};\n use std::path::{Path, PathBuf};\n use std::time::Instant;\n@@ -870,10 +870,7 @@ fn get_metadata_section_imp(target: &Target,\n             }\n         }\n         CrateFlavor::Rmeta => {\n-            let mut file = File::open(filename).map_err(|_|\n-                format!(\"could not open file: '{}'\", filename.display()))?;\n-            let mut buf = vec![];\n-            file.read_to_end(&mut buf).map_err(|_|\n+            let buf = fs::read(filename).map_err(|_|\n                 format!(\"failed to read rmeta metadata: '{}'\", filename.display()))?;\n             OwningRef::new(buf).map_owner_box().erase_owner()\n         }"}, {"sha": "fb3cb1518cbb87169031be6cc2cff169f7f0edfc", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -18,7 +18,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use dot;\n use dot::IntoCow;\n \n-use std::fs::File;\n+use std::fs;\n use std::io;\n use std::io::prelude::*;\n use std::marker::PhantomData;\n@@ -67,7 +67,7 @@ pub(crate) fn print_borrowck_graph_to<'a, 'tcx, BD, P>(\n     dot::render(&g, &mut v)?;\n     debug!(\"print_borrowck_graph_to path: {} node_id: {}\",\n            path.display(), mbcx.node_id);\n-    File::create(path).and_then(|mut f| f.write_all(&v))\n+    fs::write(path, v)\n }\n \n pub type Node = BasicBlock;"}, {"sha": "5379bf3f5a7aeed0db424d3ab5617e611b170eef", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -24,6 +24,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(core_intrinsics)]\n #![feature(decl_macro)]\n #![feature(dyn_trait)]\n+#![feature(fs_read_write)]\n #![feature(i128_type)]\n #![feature(inclusive_range_syntax)]\n #![feature(inclusive_range)]"}, {"sha": "13a319d31bf0663832e7a31140062168b409ede6", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -342,9 +342,7 @@ fn archive_config<'a>(sess: &'a Session,\n fn emit_metadata<'a>(sess: &'a Session, trans: &CrateTranslation, tmpdir: &TempDir)\n                      -> PathBuf {\n     let out_filename = tmpdir.path().join(METADATA_FILENAME);\n-    let result = fs::File::create(&out_filename).and_then(|mut f| {\n-        f.write_all(&trans.metadata.raw_data)\n-    });\n+    let result = fs::write(&out_filename, &trans.metadata.raw_data);\n \n     if let Err(e) = result {\n         sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));"}, {"sha": "1ee04a46243a264f1e73aa7e2149e47ddf58e5fa", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -46,9 +46,8 @@ use rustc_demangle;\n \n use std::any::Any;\n use std::ffi::{CString, CStr};\n-use std::fs::{self, File};\n-use std::io;\n-use std::io::{Read, Write};\n+use std::fs;\n+use std::io::{self, Write};\n use std::mem;\n use std::path::{Path, PathBuf};\n use std::str;\n@@ -666,7 +665,7 @@ unsafe fn codegen(cgcx: &CodegenContext,\n         timeline.record(\"make-bc\");\n \n         if write_bc {\n-            if let Err(e) = File::create(&bc_out).and_then(|mut f| f.write_all(data)) {\n+            if let Err(e) = fs::write(&bc_out, data) {\n                 diag_handler.err(&format!(\"failed to write bytecode: {}\", e));\n             }\n             timeline.record(\"write-bc\");\n@@ -675,7 +674,7 @@ unsafe fn codegen(cgcx: &CodegenContext,\n         if config.emit_bc_compressed {\n             let dst = bc_out.with_extension(RLIB_BYTECODE_EXTENSION);\n             let data = bytecode::encode(&mtrans.llmod_id, data);\n-            if let Err(e) = File::create(&dst).and_then(|mut f| f.write_all(&data)) {\n+            if let Err(e) = fs::write(&dst, data) {\n                 diag_handler.err(&format!(\"failed to write bytecode: {}\", e));\n             }\n             timeline.record(\"compress-bc\");\n@@ -799,9 +798,7 @@ fn binaryen_assemble(cgcx: &CodegenContext,\n                      object: &Path) {\n     use rustc_binaryen::{Module, ModuleOptions};\n \n-    let input = File::open(&assembly).and_then(|mut f| {\n-        let mut contents = Vec::new();\n-        f.read_to_end(&mut contents)?;\n+    let input = fs::read(&assembly).and_then(|contents| {\n         Ok(CString::new(contents)?)\n     });\n     let mut options = ModuleOptions::new();\n@@ -818,7 +815,7 @@ fn binaryen_assemble(cgcx: &CodegenContext,\n             .map_err(|e| io::Error::new(io::ErrorKind::Other, e))\n     });\n     let err = assembled.and_then(|binary| {\n-        File::create(&object).and_then(|mut f| f.write_all(binary.data()))\n+        fs::write(&object, binary.data())\n     });\n     if let Err(e) = err {\n         handler.err(&format!(\"failed to run binaryen assembler: {}\", e));"}, {"sha": "ee08a7f1ec471c53bceaef2b6033e3e2cf8abdb5", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -22,6 +22,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(custom_attribute)]\n+#![feature(fs_read_write)]\n #![allow(unused_attributes)]\n #![feature(i128_type)]\n #![feature(i128)]"}, {"sha": "f8320330ad2652bd37518a8473f910beae480be8", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::fs::File;\n-use std::io::prelude::*;\n+use std::fs;\n use std::path::Path;\n use std::str;\n use html::markdown::{Markdown, RenderType};\n@@ -65,13 +64,13 @@ pub enum LoadStringError {\n \n pub fn load_string<P: AsRef<Path>>(file_path: P) -> Result<String, LoadStringError> {\n     let file_path = file_path.as_ref();\n-    let mut contents = vec![];\n-    let result = File::open(file_path)\n-                      .and_then(|mut f| f.read_to_end(&mut contents));\n-    if let Err(e) = result {\n-        eprintln!(\"error reading `{}`: {}\", file_path.display(), e);\n-        return Err(LoadStringError::ReadFail);\n-    }\n+    let contents = match fs::read(file_path) {\n+        Ok(bytes) => bytes,\n+        Err(e) => {\n+            eprintln!(\"error reading `{}`: {}\", file_path.display(), e);\n+            return Err(LoadStringError::ReadFail);\n+        }\n+    };\n     match str::from_utf8(&contents) {\n         Ok(s) => Ok(s.to_string()),\n         Err(_) => {"}, {"sha": "93a3035e06ace30ad2e616f06d90d96690d91cda", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -866,15 +866,8 @@ fn write_shared(cx: &Context,\n     write(cx.dst.join(\"main.css\"),\n           include_bytes!(\"static/styles/main.css\"))?;\n     if let Some(ref css) = cx.shared.css_file_extension {\n-        let mut content = String::new();\n-        let css = css.as_path();\n-        let mut f = try_err!(File::open(css), css);\n-\n-        try_err!(f.read_to_string(&mut content), css);\n-        let css = cx.dst.join(\"theme.css\");\n-        let css = css.as_path();\n-        let mut f = try_err!(File::create(css), css);\n-        try_err!(write!(f, \"{}\", &content), css);\n+        let out = cx.dst.join(\"theme.css\");\n+        try_err!(fs::copy(css, out), css);\n     }\n     write(cx.dst.join(\"normalize.css\"),\n           include_bytes!(\"static/normalize.css\"))?;\n@@ -1027,7 +1020,7 @@ fn render_sources(dst: &Path, scx: &mut SharedContext,\n /// Writes the entire contents of a string to a destination, not attempting to\n /// catch any errors.\n fn write(dst: PathBuf, contents: &[u8]) -> Result<(), Error> {\n-    Ok(try_err!(try_err!(File::create(&dst), &dst).write_all(contents), &dst))\n+    Ok(try_err!(fs::write(&dst, contents), &dst))\n }\n \n /// Takes a path to a source file and cleans the path to it. This canonicalizes\n@@ -1124,16 +1117,13 @@ impl<'a> SourceCollector<'a> {\n             return Ok(());\n         }\n \n-        let mut contents = Vec::new();\n-        File::open(&p).and_then(|mut f| f.read_to_end(&mut contents))?;\n-\n-        let contents = str::from_utf8(&contents).unwrap();\n+        let contents = fs::read_string(&p)?;\n \n         // Remove the utf-8 BOM if any\n         let contents = if contents.starts_with(\"\\u{feff}\") {\n             &contents[3..]\n         } else {\n-            contents\n+            &contents[..]\n         };\n \n         // Create the intermediate directories"}, {"sha": "3b43eafb849bdc10f3f69bbc27c2277fb1098ccd", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffdabd40164451e25a2588ca09f585fa03f0142/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=7ffdabd40164451e25a2588ca09f585fa03f0142", "patch": "@@ -18,6 +18,7 @@\n #![feature(rustc_private)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(fs_read_write)]\n #![feature(libc)]\n #![feature(set_stdio)]\n #![feature(slice_patterns)]"}]}