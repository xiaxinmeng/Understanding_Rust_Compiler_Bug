{"sha": "1e63f08c85d7bc2fb9cf2fad21d6d17359b0be15", "node_id": "C_kwDOAAsO6NoAKDFlNjNmMDhjODVkN2JjMmZiOWNmMmZhZDIxZDZkMTczNTliMGJlMTU", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2023-03-02T10:50:27Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2023-03-02T10:50:27Z"}, "message": "Take shared references as parameter", "tree": {"sha": "06b61ab9feae78e2d2778473d20913a226b6461d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06b61ab9feae78e2d2778473d20913a226b6461d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e63f08c85d7bc2fb9cf2fad21d6d17359b0be15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e63f08c85d7bc2fb9cf2fad21d6d17359b0be15", "html_url": "https://github.com/rust-lang/rust/commit/1e63f08c85d7bc2fb9cf2fad21d6d17359b0be15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e63f08c85d7bc2fb9cf2fad21d6d17359b0be15/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fc23c2dfe664850231f1691ef56cde6e467aa6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc23c2dfe664850231f1691ef56cde6e467aa6a", "html_url": "https://github.com/rust-lang/rust/commit/2fc23c2dfe664850231f1691ef56cde6e467aa6a"}], "stats": {"total": 16, "additions": 4, "deletions": 12}, "files": [{"sha": "2915dc56bfc5df8785d052e50233075e8204c512", "filename": "library/std/src/os/unix/fs.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1e63f08c85d7bc2fb9cf2fad21d6d17359b0be15/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e63f08c85d7bc2fb9cf2fad21d6d17359b0be15/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs?ref=1e63f08c85d7bc2fb9cf2fad21d6d17359b0be15", "patch": "@@ -60,11 +60,7 @@ pub trait FileExt {\n     /// written to possibly being only partially filled. This method must behave\n     /// equivalently to a single call to read with concatenated buffers.\n     #[unstable(feature = \"unix_file_vectored_at\", issue = \"89517\")]\n-    fn read_vectored_at(\n-        &mut self,\n-        bufs: &mut [io::IoSliceMut<'_>],\n-        offset: u64,\n-    ) -> io::Result<usize> {\n+    fn read_vectored_at(&self, bufs: &mut [io::IoSliceMut<'_>], offset: u64) -> io::Result<usize> {\n         io::default_read_vectored(|b| self.read_at(b, offset), bufs)\n     }\n \n@@ -175,7 +171,7 @@ pub trait FileExt {\n     /// from possibly being only partially consumed. This method must behave as\n     /// a call to `write_at` with the buffers concatenated would.\n     #[unstable(feature = \"unix_file_vectored_at\", issue = \"89517\")]\n-    fn write_vectored_at(&mut self, bufs: &[io::IoSlice<'_>], offset: u64) -> io::Result<usize> {\n+    fn write_vectored_at(&self, bufs: &[io::IoSlice<'_>], offset: u64) -> io::Result<usize> {\n         io::default_write_vectored(|b| self.write_at(b, offset), bufs)\n     }\n \n@@ -242,17 +238,13 @@ impl FileExt for fs::File {\n     fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         self.as_inner().read_at(buf, offset)\n     }\n-    fn read_vectored_at(\n-        &mut self,\n-        bufs: &mut [io::IoSliceMut<'_>],\n-        offset: u64,\n-    ) -> io::Result<usize> {\n+    fn read_vectored_at(&self, bufs: &mut [io::IoSliceMut<'_>], offset: u64) -> io::Result<usize> {\n         self.as_inner().read_vectored_at(bufs, offset)\n     }\n     fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         self.as_inner().write_at(buf, offset)\n     }\n-    fn write_vectored_at(&mut self, bufs: &[io::IoSlice<'_>], offset: u64) -> io::Result<usize> {\n+    fn write_vectored_at(&self, bufs: &[io::IoSlice<'_>], offset: u64) -> io::Result<usize> {\n         self.as_inner().write_vectored_at(bufs, offset)\n     }\n }"}]}