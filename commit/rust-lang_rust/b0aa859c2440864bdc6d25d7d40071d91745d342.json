{"sha": "b0aa859c2440864bdc6d25d7d40071d91745d342", "node_id": "C_kwDOAAsO6NoAKGIwYWE4NTljMjQ0MDg2NGJkYzZkMjVkN2Q0MDA3MWQ5MTc0NWQzNDI", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-12-22T18:15:15Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-01-12T02:28:38Z"}, "message": "fix fmt and bless", "tree": {"sha": "1e5834c4e20dd5cca9e43a9c78c8fa63de1c36ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e5834c4e20dd5cca9e43a9c78c8fa63de1c36ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0aa859c2440864bdc6d25d7d40071d91745d342", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0aa859c2440864bdc6d25d7d40071d91745d342", "html_url": "https://github.com/rust-lang/rust/commit/b0aa859c2440864bdc6d25d7d40071d91745d342", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0aa859c2440864bdc6d25d7d40071d91745d342/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6725c0a9833b48d3d8bc463385872b3a5227dad", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6725c0a9833b48d3d8bc463385872b3a5227dad", "html_url": "https://github.com/rust-lang/rust/commit/f6725c0a9833b48d3d8bc463385872b3a5227dad"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "54868e418c4b3f5bb5ff91c1851778598450a135", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -8,7 +8,7 @@ use rustc_attr as attr;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::mir;\n-use rustc_middle::ty::{self, TyCtxt, PolyFnSig};\n+use rustc_middle::ty::{self, PolyFnSig, TyCtxt};\n use rustc_span::Symbol;\n \n pub use self::qualifs::Qualif;"}, {"sha": "48bae7a2d4e1ff2a6a5ebdb36f082657fbe44718", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -485,7 +485,9 @@ impl<'hir> Map<'hir> {\n             BodyOwnerKind::Static(mt) => ConstContext::Static(mt),\n \n             BodyOwnerKind::Fn if self.tcx.is_constructor(def_id.to_def_id()) => return None,\n-            BodyOwnerKind::Fn | BodyOwnerKind::Closure if self.tcx.is_const_fn_raw(def_id.to_def_id()) => {\n+            BodyOwnerKind::Fn | BodyOwnerKind::Closure\n+                if self.tcx.is_const_fn_raw(def_id.to_def_id()) =>\n+            {\n                 ConstContext::ConstFn\n             }\n             BodyOwnerKind::Fn if self.tcx.is_const_default_method(def_id.to_def_id()) => {"}, {"sha": "9a094acfb71e3fa3bc67fdda003d3f0c8fb45b40", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -261,16 +261,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     Some(closure_kind) => {\n                         debug!(?closure_kind, \"assemble_unboxed_candidates\");\n                         if closure_kind.extends(kind) {\n-                            candidates.vec.push(ClosureCandidate {\n-                                is_const,\n-                            });\n+                            candidates.vec.push(ClosureCandidate { is_const });\n                         }\n                     }\n                     None => {\n                         debug!(\"assemble_unboxed_candidates: closure_kind not yet known\");\n-                        candidates.vec.push(ClosureCandidate {\n-                            is_const,\n-                        });\n+                        candidates.vec.push(ClosureCandidate { is_const });\n                     }\n                 }\n             }"}, {"sha": "979d7febbcaf816a14949dc4ab52327427023fa3", "filename": "src/test/ui/rfc-2632-const-trait-impl/const_closures/non-const-op-const-closure-non-const-outer.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_closures%2Fnon-const-op-const-closure-non-const-outer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_closures%2Fnon-const-op-const-closure-non-const-outer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_closures%2Fnon-const-op-const-closure-non-const-outer.stderr?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -0,0 +1,11 @@\n+error[E0015]: cannot call non-const fn `<() as Foo>::foo` in constant functions\n+  --> $DIR/non-const-op-const-closure-non-const-outer.rs:13:22\n+   |\n+LL |     (const || { (()).foo() })();\n+   |                      ^^^^^\n+   |\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "49056678448e70dd939e0993f2adee73fb4a048c", "filename": "tests/ui/check-static-values-constraints.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fcheck-static-values-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fcheck-static-values-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-static-values-constraints.stderr?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -22,6 +22,7 @@ LL |     field2: SafeEnum::Variant4(\"str\".to_string())\n    |                                      ^^^^^^^^^^^\n    |\n    = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n    = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n \n error[E0010]: allocations are not allowed in statics"}, {"sha": "18370eea57149d6672b2d3e36d98e51b485d1766", "filename": "tests/ui/const-generics/issue-93647.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconst-generics%2Fissue-93647.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconst-generics%2Fissue-93647.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissue-93647.stderr?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -6,6 +6,7 @@ LL |     (||1usize)()\n    |\n    = note: closures need an RFC before allowed to be called in constants\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "f735b3d53ce43202b6b00c0a48b0769287e7d511", "filename": "tests/ui/consts/const-fn-error.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-fn-error.stderr?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -22,6 +22,7 @@ LL |     for i in 0..x {\n note: impl defined here, but it is not `const`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/const-fn-error.rs:5:14\n@@ -39,6 +40,7 @@ LL |     for i in 0..x {\n    |              ^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors\n "}, {"sha": "3fb9787c0d868455fe8d88840560ee407d8cec19", "filename": "tests/ui/consts/const-for.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Fconst-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Fconst-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-for.stderr?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -7,6 +7,7 @@ LL |     for _ in 0..5 {}\n note: impl defined here, but it is not `const`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error[E0015]: cannot call non-const fn `<std::ops::Range<i32> as Iterator>::next` in constants\n   --> $DIR/const-for.rs:5:14\n@@ -15,6 +16,7 @@ LL |     for _ in 0..5 {}\n    |              ^^^^\n    |\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "257ecd7f3cf7f49521934094a22897b26bbff0fb", "filename": "tests/ui/consts/invalid-inline-const-in-match-arm.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.stderr?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -6,6 +6,7 @@ LL |         const { (|| {})() } => {}\n    |\n    = note: closures need an RFC before allowed to be called in constants\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "1294cc99bf736eb441eeb930cbdf6d964ad5bdee", "filename": "tests/ui/consts/issue-28113.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Fissue-28113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Fissue-28113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-28113.stderr?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -6,6 +6,7 @@ LL |     || -> u8 { 5 }()\n    |\n    = note: closures need an RFC before allowed to be called in constants\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "845b23d5d873d42fc08a68433b8f054b93dd3dae", "filename": "tests/ui/consts/issue-56164.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-56164.stderr?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -6,6 +6,7 @@ LL | const fn foo() { (||{})() }\n    |\n    = note: closures need an RFC before allowed to be called in constant functions\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: function pointer calls are not allowed in constant functions\n   --> $DIR/issue-56164.rs:5:5"}, {"sha": "d23513ed7ffb9139fd147a827fd559756c6b241a", "filename": "tests/ui/consts/issue-68542-closure-in-array-len.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -6,6 +6,7 @@ LL |     a: [(); (|| { 0 })()]\n    |\n    = note: closures need an RFC before allowed to be called in constants\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "df44689efed775d161412b5b8ada9c0c4437c5dd", "filename": "tests/ui/consts/issue-90870.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Fissue-90870.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Fissue-90870.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-90870.fixed?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -8,19 +8,22 @@ const fn f(a: &u8, b: &u8) -> bool {\n     *a == *b\n     //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n     //~| HELP: consider dereferencing here\n+    //~| HELP: add `#![feature(const_trait_impl)]`\n }\n \n const fn g(a: &&&&i64, b: &&&&i64) -> bool {\n     ****a == ****b\n     //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n     //~| HELP: consider dereferencing here\n+    //~| HELP: add `#![feature(const_trait_impl)]`\n }\n \n const fn h(mut a: &[u8], mut b: &[u8]) -> bool {\n     while let ([l, at @ ..], [r, bt @ ..]) = (a, b) {\n         if *l == *r {\n         //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n         //~| HELP: consider dereferencing here\n+        //~| HELP: add `#![feature(const_trait_impl)]`\n             a = at;\n             b = bt;\n         } else {"}, {"sha": "676ac73c64d93b3f2929e0acfe703b0f68b896da", "filename": "tests/ui/consts/issue-90870.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Fissue-90870.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Fissue-90870.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-90870.rs?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -8,19 +8,22 @@ const fn f(a: &u8, b: &u8) -> bool {\n     a == b\n     //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n     //~| HELP: consider dereferencing here\n+    //~| HELP: add `#![feature(const_trait_impl)]`\n }\n \n const fn g(a: &&&&i64, b: &&&&i64) -> bool {\n     a == b\n     //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n     //~| HELP: consider dereferencing here\n+    //~| HELP: add `#![feature(const_trait_impl)]`\n }\n \n const fn h(mut a: &[u8], mut b: &[u8]) -> bool {\n     while let ([l, at @ ..], [r, bt @ ..]) = (a, b) {\n         if l == r {\n         //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n         //~| HELP: consider dereferencing here\n+        //~| HELP: add `#![feature(const_trait_impl)]`\n             a = at;\n             b = bt;\n         } else {"}, {"sha": "8825efd1449d8559ad8708fdf43e45535f7c4b1c", "filename": "tests/ui/consts/issue-90870.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Fissue-90870.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fconsts%2Fissue-90870.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-90870.stderr?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -5,30 +5,33 @@ LL |     a == b\n    |     ^^^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n help: consider dereferencing here\n    |\n LL |     *a == *b\n    |     +     +\n \n error[E0015]: cannot call non-const operator in constant functions\n-  --> $DIR/issue-90870.rs:14:5\n+  --> $DIR/issue-90870.rs:15:5\n    |\n LL |     a == b\n    |     ^^^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n help: consider dereferencing here\n    |\n LL |     ****a == ****b\n    |     ++++     ++++\n \n error[E0015]: cannot call non-const operator in constant functions\n-  --> $DIR/issue-90870.rs:21:12\n+  --> $DIR/issue-90870.rs:23:12\n    |\n LL |         if l == r {\n    |            ^^^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n help: consider dereferencing here\n    |\n LL |         if *l == *r {"}, {"sha": "33b7a9185d0ebc662d414856ae590c3154f40fb7", "filename": "tests/ui/never_type/issue-52443.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fnever_type%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fnever_type%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fissue-52443.stderr?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -47,6 +47,7 @@ LL |     [(); { for _ in 0usize.. {}; 0}];\n note: impl defined here, but it is not `const`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error[E0658]: mutable references are not allowed in constants\n   --> $DIR/issue-52443.rs:9:21\n@@ -64,6 +65,7 @@ LL |     [(); { for _ in 0usize.. {}; 0}];\n    |                     ^^^^^^^^\n    |\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to 6 previous errors; 1 warning emitted\n "}, {"sha": "e9d8eb0835bdb580191c77a9bdb81d1a985c41ca", "filename": "tests/ui/resolve/issue-39559-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fresolve%2Fissue-39559-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Fresolve%2Fissue-39559-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-39559-2.stderr?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -5,6 +5,7 @@ LL |     let array: [usize; Dim3::dim()]\n    |                        ^^^^^^^^^^^\n    |\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error[E0015]: cannot call non-const fn `<Dim3 as Dim>::dim` in constants\n   --> $DIR/issue-39559-2.rs:16:15\n@@ -13,6 +14,7 @@ LL |         = [0; Dim3::dim()];\n    |               ^^^^^^^^^^^\n    |\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "96e0c78b9c7da1afe88156c033dfb8ed9436559b", "filename": "tests/ui/rfc-2632-const-trait-impl/const_derives/derive-const-non-const-type.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -7,6 +7,7 @@ LL | pub struct S(A);\n    |              ^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "22f13a7416e92ec55080052bafb8228c8b366823", "filename": "tests/ui/rfc-2632-const-trait-impl/cross-crate.stock.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -5,6 +5,7 @@ LL |     Const.func();\n    |           ^^^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "d7aa0d95cfc77a4b04b2e47043aef769317add73", "filename": "tests/ui/rfc-2632-const-trait-impl/staged-api-user-crate.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api-user-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api-user-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api-user-crate.stderr?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -5,6 +5,7 @@ LL |     Unstable::func();\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "6a3396401d2b90b1692341a5b802f2500c8e4b16", "filename": "tests/ui/rfc-2632-const-trait-impl/std-impl-gate.stock.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0aa859c2440864bdc6d25d7d40071d91745d342/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.stock.stderr?ref=b0aa859c2440864bdc6d25d7d40071d91745d342", "patch": "@@ -5,6 +5,7 @@ LL |     Default::default()\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}]}