{"sha": "89af15322dbca73b098e55bbd283a2d8a254571b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YWYxNTMyMmRiY2E3M2IwOThlNTViYmQyODNhMmQ4YTI1NDU3MWI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-08T16:51:20Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-08T18:12:51Z"}, "message": "Handle trait objects", "tree": {"sha": "6ef43f440da86bdf176c628173c5fb6090fd7665", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ef43f440da86bdf176c628173c5fb6090fd7665"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89af15322dbca73b098e55bbd283a2d8a254571b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89af15322dbca73b098e55bbd283a2d8a254571b", "html_url": "https://github.com/rust-lang/rust/commit/89af15322dbca73b098e55bbd283a2d8a254571b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89af15322dbca73b098e55bbd283a2d8a254571b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b16eb832596d305f7da3f88c64aa35762fcba1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b16eb832596d305f7da3f88c64aa35762fcba1e", "html_url": "https://github.com/rust-lang/rust/commit/8b16eb832596d305f7da3f88c64aa35762fcba1e"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "8f929d9b19c2e285460d60f0703cd9dfe2c3c4e2", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/89af15322dbca73b098e55bbd283a2d8a254571b/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89af15322dbca73b098e55bbd283a2d8a254571b/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=89af15322dbca73b098e55bbd283a2d8a254571b", "patch": "@@ -78,6 +78,7 @@ use rustc_front::hir;\n use rustc_front::print::pprust;\n \n use middle::def;\n+use middle::def_id::DefId;\n use middle::infer;\n use middle::region;\n use middle::subst;\n@@ -497,6 +498,25 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n \n     /// Adds a note if the types come from similarly named crates\n     fn check_and_note_conflicting_crates(&self, terr: &ty::TypeError<'tcx>, sp: Span) {\n+        let report_path_match = |did1: DefId, did2: DefId| {\n+            // Only external crates, if either is from a local\n+            // module we could have false positives\n+            if !(did1.is_local() || did2.is_local()) {\n+                let exp_path = self.tcx.with_path(did1,\n+                                                  |p| p.map(|x| x.to_string())\n+                                                       .collect::<Vec<_>>());\n+                let found_path = self.tcx.with_path(did2,\n+                                                    |p| p.map(|x| x.to_string())\n+                                                         .collect::<Vec<_>>());\n+                // We compare strings because PathMod and PathName can be different\n+                // for imported and non-imported crates\n+                if exp_path == found_path {\n+                    self.tcx.sess.span_note(sp, &format!(\"Perhaps two different versions \\\n+                                                          of crate `{}` are being used?\",\n+                                                          exp_path[0]));\n+                }\n+            }\n+        };\n         match *terr {\n             ty::TypeError::Sorts(ref exp_found) => {\n                 // if they are both \"path types\", there's a chance of ambiguity\n@@ -506,24 +526,15 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                     (&ty::TyStruct(ref exp_adt, _), &ty::TyStruct(ref found_adt, _)) |\n                     (&ty::TyEnum(ref exp_adt, _), &ty::TyStruct(ref found_adt, _)) |\n                     (&ty::TyStruct(ref exp_adt, _), &ty::TyEnum(ref found_adt, _)) => {\n-                        // Only external crates, if either is from a local\n-                        // module we could have false positives\n-                        if exp_adt.did.is_local() || found_adt.did.is_local() {\n-                            return\n-                        }\n-                        let exp_path = self.tcx.with_path(exp_adt.did, \n-                                                          |p| p.collect::<Vec<_>>());\n-                        let found_path = self.tcx.with_path(exp_adt.did, \n-                                                            |p| p.collect::<Vec<_>>());\n-                        if exp_path == found_path {\n-                            self.tcx.sess.span_note(sp, &format!(\"Perhaps two different versions \\\n-                                                                  of crate `{}` are being used?\",\n-                                                                  exp_path[0]));\n-                        }\n+                        report_path_match(exp_adt.did, found_adt.did);\n                     },\n                     _ => ()\n                 }\n-            }\n+            },\n+            ty::TypeError::Traits(ref exp_found) => {\n+                self.tcx.sess.note(\"errrr0\");\n+                report_path_match(exp_found.expected, exp_found.found);\n+            },\n             _ => () // FIXME(Manishearth) handle traits and stuff\n         }\n     }"}]}