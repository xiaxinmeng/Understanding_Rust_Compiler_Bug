{"sha": "a8ce669b42471863862e84148286f86040f1f4d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4Y2U2NjliNDI0NzE4NjM4NjJlODQxNDgyODZmODYwNDBmMWY0ZDU=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-10-10T18:47:20Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-11-05T22:06:01Z"}, "message": "Workaround to have doc comments desugared only in macros", "tree": {"sha": "4d9135ab4765c23ac3d8ec4d0185289befd414c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d9135ab4765c23ac3d8ec4d0185289befd414c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8ce669b42471863862e84148286f86040f1f4d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8ce669b42471863862e84148286f86040f1f4d5", "html_url": "https://github.com/rust-lang/rust/commit/a8ce669b42471863862e84148286f86040f1f4d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8ce669b42471863862e84148286f86040f1f4d5/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f30a4ee6c35342cc2775d77882ad26fc31ba61e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f30a4ee6c35342cc2775d77882ad26fc31ba61e", "html_url": "https://github.com/rust-lang/rust/commit/6f30a4ee6c35342cc2775d77882ad26fc31ba61e"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "15792b7f7716ac7102cb69128269d5b11ccbb0ed", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a8ce669b42471863862e84148286f86040f1f4d5/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ce669b42471863862e84148286f86040f1f4d5/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=a8ce669b42471863862e84148286f86040f1f4d5", "patch": "@@ -164,11 +164,12 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                 _ => cx.span_fatal(sp, \"malformed macro lhs\")\n             };\n             // `None` is because we're not interpolating\n-            let arg_rdr = new_tt_reader(&cx.parse_sess().span_diagnostic,\n-                                        None,\n-                                        arg.iter()\n-                                           .map(|x| (*x).clone())\n-                                           .collect());\n+            let mut arg_rdr = new_tt_reader(&cx.parse_sess().span_diagnostic,\n+                                            None,\n+                                            arg.iter()\n+                                               .map(|x| (*x).clone())\n+                                               .collect());\n+            arg_rdr.desugar_doc_comments = true;\n             match parse(cx.parse_sess(), cx.cfg(), arg_rdr, lhs_tt) {\n               Success(named_matches) => {\n                 let rhs = match *rhses[i] {"}, {"sha": "88253c0d24c6190c4d8f397e69ed0d21c943675f", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a8ce669b42471863862e84148286f86040f1f4d5/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ce669b42471863862e84148286f86040f1f4d5/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=a8ce669b42471863862e84148286f86040f1f4d5", "patch": "@@ -43,6 +43,8 @@ pub struct TtReader<'a> {\n     /* cached: */\n     pub cur_tok: Token,\n     pub cur_span: Span,\n+    /// Transform doc comments. Only useful in macro invocations\n+    pub desugar_doc_comments: bool,\n }\n \n /// This can do Macro-By-Example transcription. On the other hand, if\n@@ -66,6 +68,7 @@ pub fn new_tt_reader<'a>(sp_diag: &'a SpanHandler,\n         },\n         repeat_idx: Vec::new(),\n         repeat_len: Vec::new(),\n+        desugar_doc_comments: false,\n         /* dummy values, never read: */\n         cur_tok: token::Eof,\n         cur_span: DUMMY_SP,\n@@ -279,8 +282,7 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                 }\n             }\n             // TtDelimited or any token that can be unzipped\n-            seq @ TtDelimited(..) | seq @ TtToken(_, DocComment(..))\n-            | seq @ TtToken(_, MatchNt(..)) => {\n+            seq @ TtDelimited(..) | seq @ TtToken(_, MatchNt(..)) => {\n                 // do not advance the idx yet\n                 r.stack.push(TtFrame {\n                    forest: seq.expand_into_tts(),\n@@ -290,6 +292,14 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                 });\n                 // if this could be 0-length, we'd need to potentially recur here\n             }\n+            TtToken(sp, DocComment(name)) if r.desugar_doc_comments => {\n+                r.stack.push(TtFrame {\n+                   forest: TtToken(sp, DocComment(name)).expand_into_tts(),\n+                   idx: 0,\n+                   dotdotdoted: false,\n+                   sep: None\n+                });\n+            }\n             TtToken(sp, tok) => {\n                 r.cur_span = sp;\n                 r.cur_tok = tok;"}]}