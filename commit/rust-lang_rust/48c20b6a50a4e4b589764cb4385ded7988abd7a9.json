{"sha": "48c20b6a50a4e4b589764cb4385ded7988abd7a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YzIwYjZhNTBhNGU0YjU4OTc2NGNiNDM4NWRlZDc5ODhhYmQ3YTk=", "commit": {"author": {"name": "Nikolai Vazquez", "email": "nvazquez1297@gmail.com", "date": "2017-09-28T14:29:58Z"}, "committer": {"name": "Nikolai Vazquez", "email": "nvazquez1297@gmail.com", "date": "2017-09-28T14:29:58Z"}, "message": "Remove mem::transmute used in Path conversions", "tree": {"sha": "28e15a60713923bf83c055ea2be55a6f665d3b8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28e15a60713923bf83c055ea2be55a6f665d3b8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48c20b6a50a4e4b589764cb4385ded7988abd7a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48c20b6a50a4e4b589764cb4385ded7988abd7a9", "html_url": "https://github.com/rust-lang/rust/commit/48c20b6a50a4e4b589764cb4385ded7988abd7a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48c20b6a50a4e4b589764cb4385ded7988abd7a9/comments", "author": {"login": "nvzqz", "id": 10367662, "node_id": "MDQ6VXNlcjEwMzY3NjYy", "avatar_url": "https://avatars.githubusercontent.com/u/10367662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nvzqz", "html_url": "https://github.com/nvzqz", "followers_url": "https://api.github.com/users/nvzqz/followers", "following_url": "https://api.github.com/users/nvzqz/following{/other_user}", "gists_url": "https://api.github.com/users/nvzqz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nvzqz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nvzqz/subscriptions", "organizations_url": "https://api.github.com/users/nvzqz/orgs", "repos_url": "https://api.github.com/users/nvzqz/repos", "events_url": "https://api.github.com/users/nvzqz/events{/privacy}", "received_events_url": "https://api.github.com/users/nvzqz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nvzqz", "id": 10367662, "node_id": "MDQ6VXNlcjEwMzY3NjYy", "avatar_url": "https://avatars.githubusercontent.com/u/10367662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nvzqz", "html_url": "https://github.com/nvzqz", "followers_url": "https://api.github.com/users/nvzqz/followers", "following_url": "https://api.github.com/users/nvzqz/following{/other_user}", "gists_url": "https://api.github.com/users/nvzqz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nvzqz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nvzqz/subscriptions", "organizations_url": "https://api.github.com/users/nvzqz/orgs", "repos_url": "https://api.github.com/users/nvzqz/repos", "events_url": "https://api.github.com/users/nvzqz/events{/privacy}", "received_events_url": "https://api.github.com/users/nvzqz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "627998e86fa7198e235e2aa1963dc59f6b3a017a", "url": "https://api.github.com/repos/rust-lang/rust/commits/627998e86fa7198e235e2aa1963dc59f6b3a017a", "html_url": "https://github.com/rust-lang/rust/commit/627998e86fa7198e235e2aa1963dc59f6b3a017a"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "765cdc29a9f8de19f5da6c8ae52a05c6299e07ac", "filename": "src/libstd/path.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/48c20b6a50a4e4b589764cb4385ded7988abd7a9/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c20b6a50a4e4b589764cb4385ded7988abd7a9/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=48c20b6a50a4e4b589764cb4385ded7988abd7a9", "patch": "@@ -317,10 +317,10 @@ fn iter_after<A, I, J>(mut iter: I, mut prefix: J) -> Option<I>\n \n // See note at the top of this module to understand why these are used:\n fn os_str_as_u8_slice(s: &OsStr) -> &[u8] {\n-    unsafe { mem::transmute(s) }\n+    unsafe { &*(s as *const OsStr as *const [u8]) }\n }\n unsafe fn u8_slice_as_os_str(s: &[u8]) -> &OsStr {\n-    mem::transmute(s)\n+    &*(s as *const [u8] as *const OsStr)\n }\n \n // Detect scheme on Redox\n@@ -1334,15 +1334,16 @@ impl PathBuf {\n     /// [`Path`]: struct.Path.html\n     #[stable(feature = \"into_boxed_path\", since = \"1.20.0\")]\n     pub fn into_boxed_path(self) -> Box<Path> {\n-        unsafe { mem::transmute(self.inner.into_boxed_os_str()) }\n+        let rw = Box::into_raw(self.inner.into_boxed_os_str()) as *mut Path;\n+        unsafe { Box::from_raw(rw) }\n     }\n }\n \n #[stable(feature = \"box_from_path\", since = \"1.17.0\")]\n impl<'a> From<&'a Path> for Box<Path> {\n     fn from(path: &'a Path) -> Box<Path> {\n-        let boxed: Box<OsStr> = path.inner.into();\n-        unsafe { mem::transmute(boxed) }\n+        let rw = Box::into_raw(Box::from(&path.inner)) as *mut Path;\n+        unsafe { Box::from_raw(rw) }\n     }\n }\n \n@@ -1589,7 +1590,7 @@ impl Path {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new<S: AsRef<OsStr> + ?Sized>(s: &S) -> &Path {\n-        unsafe { mem::transmute(s.as_ref()) }\n+        unsafe { &*(s.as_ref() as *const OsStr as *const Path) }\n     }\n \n     /// Yields the underlying [`OsStr`] slice.\n@@ -2312,8 +2313,8 @@ impl Path {\n     /// [`PathBuf`]: struct.PathBuf.html\n     #[stable(feature = \"into_boxed_path\", since = \"1.20.0\")]\n     pub fn into_path_buf(self: Box<Path>) -> PathBuf {\n-        let inner: Box<OsStr> = unsafe { mem::transmute(self) };\n-        PathBuf { inner: OsString::from(inner) }\n+        let rw = Box::into_raw(self) as *mut OsStr;\n+        unsafe { Box::from_raw(rw) }\n     }\n }\n "}]}