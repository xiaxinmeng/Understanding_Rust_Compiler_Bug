{"sha": "de87ae79610925502f45ec07cf24bac51e037ed1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlODdhZTc5NjEwOTI1NTAyZjQ1ZWMwN2NmMjRiYWM1MWUwMzdlZDE=", "commit": {"author": {"name": "chansuke", "email": "chansuke@georepublic.de", "date": "2020-10-24T08:59:58Z"}, "committer": {"name": "chansuke", "email": "chansuke@georepublic.de", "date": "2020-10-24T08:59:58Z"}, "message": "Add documents for DLMALLOC", "tree": {"sha": "dcbc84590575a520c566602c4f3b8c3d2f44ad8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcbc84590575a520c566602c4f3b8c3d2f44ad8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de87ae79610925502f45ec07cf24bac51e037ed1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de87ae79610925502f45ec07cf24bac51e037ed1", "html_url": "https://github.com/rust-lang/rust/commit/de87ae79610925502f45ec07cf24bac51e037ed1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de87ae79610925502f45ec07cf24bac51e037ed1/comments", "author": null, "committer": null, "parents": [{"sha": "eed45107da8da6293d9cecc302ad3b9870848b51", "url": "https://api.github.com/repos/rust-lang/rust/commits/eed45107da8da6293d9cecc302ad3b9870848b51", "html_url": "https://github.com/rust-lang/rust/commit/eed45107da8da6293d9cecc302ad3b9870848b51"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "b61a7872265f350a8b82a3779bc2b8cc64dd2281", "filename": "library/std/src/sys/wasm/alloc.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de87ae79610925502f45ec07cf24bac51e037ed1/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de87ae79610925502f45ec07cf24bac51e037ed1/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs?ref=de87ae79610925502f45ec07cf24bac51e037ed1", "patch": "@@ -24,28 +24,32 @@ static mut DLMALLOC: dlmalloc::Dlmalloc = dlmalloc::DLMALLOC_INIT;\n unsafe impl GlobalAlloc for System {\n     #[inline]\n     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n-        // SAFETY:  DLMALLOC.malloc() is guranteed to be safe since lock::lock() aqcuire a globl lock\n+        // SAFETY: DLMALLOC access is guranteed to be safe because the lock gives us unique and non-reentrant access.\n+        // Calling malloc() is safe because preconditions on this function match the trait method preconditions.\n         let _lock = lock::lock();\n         unsafe { DLMALLOC.malloc(layout.size(), layout.align()) }\n     }\n \n     #[inline]\n     unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n-        // SAFETY:  DLMALLOC.calloc() is guranteed to be safe since lock::lock() aqcuire a globl lock\n+        // SAFETY: DLMALLOC access is guranteed to be safe because the lock gives us unique and non-reentrant access.\n+        // Calling calloc() is safe because preconditions on this function match the trait method preconditions.\n         let _lock = lock::lock();\n         unsafe { DLMALLOC.calloc(layout.size(), layout.align()) }\n     }\n \n     #[inline]\n     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n-        // SAFETY:  DLMALLOC.free() is guranteed to be safe since lock::lock() aqcuire a globl lock\n+        // SAFETY: DLMALLOC access is guranteed to be safe because the lock gives us unique and non-reentrant access.\n+        // Calling free() is safe because preconditions on this function match the trait method preconditions.\n         let _lock = lock::lock();\n         unsafe { DLMALLOC.free(ptr, layout.size(), layout.align()) }\n     }\n \n     #[inline]\n     unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n-        // SAFETY:  DLMALLOC.realloc() is guranteed to be safe since lock::lock() aqcuire a globl lock\n+        // SAFETY: DLMALLOC access is guranteed to be safe because the lock gives us unique and non-reentrant access.\n+        // Calling realloc() is safe because preconditions on this function match the trait method preconditions.\n         let _lock = lock::lock();\n         unsafe { DLMALLOC.realloc(ptr, layout.size(), layout.align(), new_size) }\n     }"}]}