{"sha": "43babed7e2ecebc401a6dd792e52700afbe0ec5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYmFiZWQ3ZTJlY2ViYzQwMWE2ZGQ3OTJlNTI3MDBhZmJlMGVjNWM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-12T03:07:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-12T03:07:08Z"}, "message": "Rollup merge of #74960 - nbdd0121:typeck, r=nikomatsakis\n\nFix regionck failure when converting Index to IndexMut\n\nFixes #74933\n\nConsider an overloaded index expression `base[index]`. Without knowing whether it will be mutated, this will initially be desugared into `<U as Index<T>>::index(&base, index)` for some `U` and `T`. Let `V` be the `expr_ty_adjusted` of `index`.\n\nIf this expression ends up being used in any mutable context (or used in a function call with `&mut self` receiver before #72280), we will need to fix it up. The current code will rewrite it to `<U as IndexMut<V>>::index_mut(&mut base, index)`. In most cases this is fine as `V` will be equal to `T`, however this is not always true when `V/T` are references, as they may have different region.\n\nThis issue is quite subtle before #72280 as this code path is only used to fixup function receivers, but after #72280 we've made this a common path.\n\nThe solution is basically just rewrite it to `<U as IndexMut<T>>::index_mut(&mut base, index)`. `T` can retrieved in the fixup path using `node_substs`.", "tree": {"sha": "5035d3df3212b43b8cb210e871dab8f1b819a4e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5035d3df3212b43b8cb210e871dab8f1b819a4e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43babed7e2ecebc401a6dd792e52700afbe0ec5c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfM1zcCRBK7hj4Ov3rIwAAdHIIAAmXRhsmyStcl0SEK0LGfUBz\n0Gq/B/1JFLuhrtQ9YeraqAUqCv+BnVkzZmXuYThumPli837KaEG0gZjKygvVnypt\nCfaBS4wpymmgakKyjgdALfLbHRNAFDPw9j3kcK5ac7YkEN9K6EpDhsqdhhF6eHqk\nKVs3ZMObPeSkk0E2/RUZJcfecSKluIUDxvc72Yc0ZH9km8h+ytdUSx/5m1B5mQwn\nMwAdrzZbN7anCzo/23AHSx2JXCcy6NdwasNyXQP4i34i4gQqJVN9B1etP/UYY3Sg\nkXbWCYQONQD3hXr/d09BtOyBBxE/vlGcSmDVFnjolgP5l3qEQ6JlUzZdOcBR83E=\n=jzew\n-----END PGP SIGNATURE-----\n", "payload": "tree 5035d3df3212b43b8cb210e871dab8f1b819a4e9\nparent 7e503a09b512e400fd2f2dd27f11d515e41dc784\nparent 000f5cdd24be7067c3294e1fba2da4a3e88dd849\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1597201628 +0900\ncommitter GitHub <noreply@github.com> 1597201628 +0900\n\nRollup merge of #74960 - nbdd0121:typeck, r=nikomatsakis\n\nFix regionck failure when converting Index to IndexMut\n\nFixes #74933\n\nConsider an overloaded index expression `base[index]`. Without knowing whether it will be mutated, this will initially be desugared into `<U as Index<T>>::index(&base, index)` for some `U` and `T`. Let `V` be the `expr_ty_adjusted` of `index`.\n\nIf this expression ends up being used in any mutable context (or used in a function call with `&mut self` receiver before #72280), we will need to fix it up. The current code will rewrite it to `<U as IndexMut<V>>::index_mut(&mut base, index)`. In most cases this is fine as `V` will be equal to `T`, however this is not always true when `V/T` are references, as they may have different region.\n\nThis issue is quite subtle before #72280 as this code path is only used to fixup function receivers, but after #72280 we've made this a common path.\n\nThe solution is basically just rewrite it to `<U as IndexMut<T>>::index_mut(&mut base, index)`. `T` can retrieved in the fixup path using `node_substs`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43babed7e2ecebc401a6dd792e52700afbe0ec5c", "html_url": "https://github.com/rust-lang/rust/commit/43babed7e2ecebc401a6dd792e52700afbe0ec5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43babed7e2ecebc401a6dd792e52700afbe0ec5c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e503a09b512e400fd2f2dd27f11d515e41dc784", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e503a09b512e400fd2f2dd27f11d515e41dc784", "html_url": "https://github.com/rust-lang/rust/commit/7e503a09b512e400fd2f2dd27f11d515e41dc784"}, {"sha": "000f5cdd24be7067c3294e1fba2da4a3e88dd849", "url": "https://api.github.com/repos/rust-lang/rust/commits/000f5cdd24be7067c3294e1fba2da4a3e88dd849", "html_url": "https://github.com/rust-lang/rust/commit/000f5cdd24be7067c3294e1fba2da4a3e88dd849"}], "stats": {"total": 75, "additions": 62, "deletions": 13}, "files": [{"sha": "4bef9aecd2ecb2236e88a44b82dcddedf99a0376", "filename": "src/librustc_typeck/check/place_op.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/43babed7e2ecebc401a6dd792e52700afbe0ec5c/src%2Flibrustc_typeck%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43babed7e2ecebc401a6dd792e52700afbe0ec5c/src%2Flibrustc_typeck%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fplace_op.rs?ref=43babed7e2ecebc401a6dd792e52700afbe0ec5c", "patch": "@@ -9,6 +9,7 @@ use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use rustc_trait_selection::autoderef::Autoderef;\n+use std::slice;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Type-check `*oprnd_expr` with `oprnd_expr` type-checked already.\n@@ -243,19 +244,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             match expr.kind {\n-                hir::ExprKind::Index(ref base_expr, ref index_expr) => {\n-                    // We need to get the final type in case dereferences were needed for the trait\n-                    // to apply (#72002).\n-                    let index_expr_ty = self.typeck_results.borrow().expr_ty_adjusted(index_expr);\n-                    self.convert_place_op_to_mutable(\n-                        PlaceOp::Index,\n-                        expr,\n-                        base_expr,\n-                        &[index_expr_ty],\n-                    );\n+                hir::ExprKind::Index(ref base_expr, ..) => {\n+                    self.convert_place_op_to_mutable(PlaceOp::Index, expr, base_expr);\n                 }\n                 hir::ExprKind::Unary(hir::UnOp::UnDeref, ref base_expr) => {\n-                    self.convert_place_op_to_mutable(PlaceOp::Deref, expr, base_expr, &[]);\n+                    self.convert_place_op_to_mutable(PlaceOp::Deref, expr, base_expr);\n                 }\n                 _ => {}\n             }\n@@ -267,9 +260,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         op: PlaceOp,\n         expr: &hir::Expr<'_>,\n         base_expr: &hir::Expr<'_>,\n-        arg_tys: &[Ty<'tcx>],\n     ) {\n-        debug!(\"convert_place_op_to_mutable({:?}, {:?}, {:?}, {:?})\", op, expr, base_expr, arg_tys);\n+        debug!(\"convert_place_op_to_mutable({:?}, {:?}, {:?})\", op, expr, base_expr);\n         if !self.typeck_results.borrow().is_method_call(expr) {\n             debug!(\"convert_place_op_to_mutable - builtin, nothing to do\");\n             return;\n@@ -284,6 +276,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .expect(\"place op takes something that is not a ref\")\n             .ty;\n \n+        let arg_ty = match op {\n+            PlaceOp::Deref => None,\n+            PlaceOp::Index => {\n+                // We would need to recover the `T` used when we resolve `<_ as Index<T>>::index`\n+                // in try_index_step. This is the subst at index 1.\n+                //\n+                // Note: we should *not* use `expr_ty` of index_expr here because autoderef\n+                // during coercions can cause type of index_expr to differ from `T` (#72002).\n+                // We also could not use `expr_ty_adjusted` of index_expr because reborrowing\n+                // during coercions can also cause type of index_expr to differ from `T`,\n+                // which can potentially cause regionck failure (#74933).\n+                Some(self.typeck_results.borrow().node_substs(expr.hir_id).type_at(1))\n+            }\n+        };\n+        let arg_tys = match arg_ty {\n+            None => &[],\n+            Some(ref ty) => slice::from_ref(ty),\n+        };\n+\n         let method = self.try_mutable_overloaded_place_op(expr.span, base_ty, arg_tys, op);\n         let method = match method {\n             Some(ok) => self.register_infer_ok_obligations(ok),"}, {"sha": "4b6c173b8ce58af987014425f1fe6805b7d83fe1", "filename": "src/test/ui/typeck/issue-74933.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/43babed7e2ecebc401a6dd792e52700afbe0ec5c/src%2Ftest%2Fui%2Ftypeck%2Fissue-74933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43babed7e2ecebc401a6dd792e52700afbe0ec5c/src%2Ftest%2Fui%2Ftypeck%2Fissue-74933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-74933.rs?ref=43babed7e2ecebc401a6dd792e52700afbe0ec5c", "patch": "@@ -0,0 +1,38 @@\n+// check-pass\n+//\n+// rust-lang/rust#74933: Lifetime error when indexing with borrowed index\n+\n+use std::ops::{Index, IndexMut};\n+\n+struct S(V);\n+struct K<'a>(&'a ());\n+struct V;\n+\n+impl<'a> Index<&'a K<'a>> for S {\n+    type Output = V;\n+\n+    fn index(&self, _: &'a K<'a>) -> &V {\n+        &self.0\n+    }\n+}\n+\n+impl<'a> IndexMut<&'a K<'a>> for S {\n+    fn index_mut(&mut self, _: &'a K<'a>) -> &mut V {\n+        &mut self.0\n+    }\n+}\n+\n+impl V {\n+    fn foo(&mut self) {}\n+}\n+\n+fn test(s: &mut S, k: &K<'_>) {\n+    s[k] = V;\n+    s[k].foo();\n+}\n+\n+fn main() {\n+    let mut s = S(V);\n+    let k = K(&());\n+    test(&mut s, &k);\n+}"}]}