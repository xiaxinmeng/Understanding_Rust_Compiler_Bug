{"sha": "376d100e7473d094acb202dab08022be8cf65a83", "node_id": "C_kwDOAAsO6NoAKDM3NmQxMDBlNzQ3M2QwOTRhY2IyMDJkYWIwODAyMmJlOGNmNjVhODM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-24T04:52:17Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-24T04:52:17Z"}, "message": "make rustc work again", "tree": {"sha": "636d3d47e510b4573ed82757cdd49d5c17ec5610", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/636d3d47e510b4573ed82757cdd49d5c17ec5610"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/376d100e7473d094acb202dab08022be8cf65a83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/376d100e7473d094acb202dab08022be8cf65a83", "html_url": "https://github.com/rust-lang/rust/commit/376d100e7473d094acb202dab08022be8cf65a83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/376d100e7473d094acb202dab08022be8cf65a83/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc5885552edc6fb8d59007dadb7b7d1d8dd8b173", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc5885552edc6fb8d59007dadb7b7d1d8dd8b173", "html_url": "https://github.com/rust-lang/rust/commit/cc5885552edc6fb8d59007dadb7b7d1d8dd8b173"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "6424b907478764ce6698c23112d3234732a1485d", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/376d100e7473d094acb202dab08022be8cf65a83/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/376d100e7473d094acb202dab08022be8cf65a83/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=376d100e7473d094acb202dab08022be8cf65a83", "patch": "@@ -100,6 +100,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         &self,\n         trait_id: chalk_ir::TraitId<RustInterner<'tcx>>,\n     ) -> Arc<chalk_solve::rust_ir::TraitDatum<RustInterner<'tcx>>> {\n+        use chalk_solve::rust_ir::WellKnownTrait::*;\n+\n         let def_id = trait_id.0;\n         let trait_def = self.interner.tcx.trait_def(def_id);\n \n@@ -119,25 +121,27 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let lang_items = self.interner.tcx.lang_items();\n         let well_known = if lang_items.sized_trait() == Some(def_id) {\n-            Some(chalk_solve::rust_ir::WellKnownTrait::Sized)\n+            Some(Sized)\n         } else if lang_items.copy_trait() == Some(def_id) {\n-            Some(chalk_solve::rust_ir::WellKnownTrait::Copy)\n+            Some(Copy)\n         } else if lang_items.clone_trait() == Some(def_id) {\n-            Some(chalk_solve::rust_ir::WellKnownTrait::Clone)\n+            Some(Clone)\n         } else if lang_items.drop_trait() == Some(def_id) {\n-            Some(chalk_solve::rust_ir::WellKnownTrait::Drop)\n+            Some(Drop)\n         } else if lang_items.fn_trait() == Some(def_id) {\n-            Some(chalk_solve::rust_ir::WellKnownTrait::Fn)\n+            Some(Fn)\n         } else if lang_items.fn_once_trait() == Some(def_id) {\n-            Some(chalk_solve::rust_ir::WellKnownTrait::FnOnce)\n+            Some(FnOnce)\n         } else if lang_items.fn_mut_trait() == Some(def_id) {\n-            Some(chalk_solve::rust_ir::WellKnownTrait::FnMut)\n+            Some(FnMut)\n         } else if lang_items.unsize_trait() == Some(def_id) {\n-            Some(chalk_solve::rust_ir::WellKnownTrait::Unsize)\n+            Some(Unsize)\n         } else if lang_items.unpin_trait() == Some(def_id) {\n-            Some(chalk_solve::rust_ir::WellKnownTrait::Unpin)\n+            Some(Unpin)\n         } else if lang_items.coerce_unsized_trait() == Some(def_id) {\n-            Some(chalk_solve::rust_ir::WellKnownTrait::CoerceUnsized)\n+            Some(CoerceUnsized)\n+        } else if lang_items.dispatch_from_dyn_trait() == Some(def_id) {\n+            Some(DispatchFromDyn)\n         } else {\n             None\n         };\n@@ -232,6 +236,28 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         })\n     }\n \n+    fn adt_size_align(\n+        &self,\n+        adt_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n+    ) -> Arc<chalk_solve::rust_ir::AdtSizeAlign> {\n+        let tcx = self.interner.tcx;\n+        let did = adt_id.0.did();\n+\n+        // Grab the ADT and the param we might need to calculate its layout\n+        let param_env = tcx.param_env(did);\n+        let adt_ty = tcx.type_of(did);\n+\n+        // The ADT is a 1-zst if it's a ZST and its alignment is 1.\n+        // Mark the ADT as _not_ a 1-zst if there was a layout error.\n+        let one_zst = if let Ok(layout) = tcx.layout_of(param_env.and(adt_ty)) {\n+            layout.is_zst() && layout.align.abi.bytes() == 1\n+        } else {\n+            false\n+        };\n+\n+        Arc::new(chalk_solve::rust_ir::AdtSizeAlign::from_one_zst(one_zst))\n+    }\n+\n     fn fn_def_datum(\n         &self,\n         fn_def_id: chalk_ir::FnDefId<RustInterner<'tcx>>,\n@@ -540,6 +566,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             Unpin => lang_items.unpin_trait(),\n             CoerceUnsized => lang_items.coerce_unsized_trait(),\n             DiscriminantKind => lang_items.discriminant_kind_trait(),\n+            DispatchFromDyn => lang_items.dispatch_from_dyn_trait(),\n         };\n         def_id.map(chalk_ir::TraitId)\n     }"}]}