{"sha": "ae73628f6bf0ee3ac6f571b447972f4f37a39103", "node_id": "C_kwDOAAsO6NoAKGFlNzM2MjhmNmJmMGVlM2FjNmY1NzFiNDQ3OTcyZjRmMzdhMzkxMDM", "commit": {"author": {"name": "bvanjoi", "email": "bohan-zhang@foxmail.com", "date": "2023-01-04T14:10:17Z"}, "committer": {"name": "bvanjoi", "email": "bohan-zhang@foxmail.com", "date": "2023-01-04T14:10:17Z"}, "message": "fix: keep whitespace in extract function handler", "tree": {"sha": "acaab66cc4f4ac1ea28ba9bcafc48c3725f772eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acaab66cc4f4ac1ea28ba9bcafc48c3725f772eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae73628f6bf0ee3ac6f571b447972f4f37a39103", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae73628f6bf0ee3ac6f571b447972f4f37a39103", "html_url": "https://github.com/rust-lang/rust/commit/ae73628f6bf0ee3ac6f571b447972f4f37a39103", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae73628f6bf0ee3ac6f571b447972f4f37a39103/comments", "author": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a97c71f92d574cb5104e3e1246eb9038d1a214a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a97c71f92d574cb5104e3e1246eb9038d1a214a2", "html_url": "https://github.com/rust-lang/rust/commit/a97c71f92d574cb5104e3e1246eb9038d1a214a2"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "94614360c7292408aec20589cf340b612aac14b2", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ae73628f6bf0ee3ac6f571b447972f4f37a39103/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae73628f6bf0ee3ac6f571b447972f4f37a39103/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=ae73628f6bf0ee3ac6f571b447972f4f37a39103", "patch": "@@ -1799,7 +1799,8 @@ fn make_body(\n                 })\n                 .collect::<Vec<SyntaxElement>>();\n             let tail_expr = tail_expr.map(|expr| expr.dedent(old_indent).indent(body_indent));\n-            make::hacky_block_expr_with_comments(elements, tail_expr)\n+\n+            make::hacky_block_expr(elements, tail_expr)\n         }\n     };\n \n@@ -1881,7 +1882,7 @@ fn with_tail_expr(block: ast::BlockExpr, tail_expr: ast::Expr) -> ast::BlockExpr\n         elements.push(syntax::NodeOrToken::Node(stmt_tail.syntax().clone()));\n     }\n \n-    make::hacky_block_expr_with_comments(elements, Some(tail_expr))\n+    make::hacky_block_expr(elements, Some(tail_expr))\n }\n \n fn format_type(ty: &hir::Type, ctx: &AssistContext<'_>, module: hir::Module) -> String {\n@@ -4978,9 +4979,8 @@ fn $0fun_name() {\n         );\n     }\n \n-    // FIXME: we do want to preserve whitespace\n     #[test]\n-    fn extract_function_does_not_preserve_whitespace() {\n+    fn extract_function_does_preserve_whitespace() {\n         check_assist(\n             extract_function,\n             r#\"\n@@ -4999,6 +4999,7 @@ fn func() {\n \n fn $0fun_name() {\n     let a = 0;\n+\n     let x = 0;\n }\n \"#,"}, {"sha": "f17b7d8557df3510c90a6fec2c5a685355d52963", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ae73628f6bf0ee3ac6f571b447972f4f37a39103/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae73628f6bf0ee3ac6f571b447972f4f37a39103/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=ae73628f6bf0ee3ac6f571b447972f4f37a39103", "patch": "@@ -339,21 +339,28 @@ pub fn tail_only_block_expr(tail_expr: ast::Expr) -> ast::BlockExpr {\n }\n \n /// Ideally this function wouldn't exist since it involves manual indenting.\n-/// It differs from `make::block_expr` by also supporting comments.\n+/// It differs from `make::block_expr` by also supporting comments and whitespace.\n ///\n /// FIXME: replace usages of this with the mutable syntax tree API\n-pub fn hacky_block_expr_with_comments(\n+pub fn hacky_block_expr(\n     elements: impl IntoIterator<Item = crate::SyntaxElement>,\n     tail_expr: Option<ast::Expr>,\n ) -> ast::BlockExpr {\n     let mut buf = \"{\\n\".to_string();\n     for node_or_token in elements.into_iter() {\n         match node_or_token {\n             rowan::NodeOrToken::Node(n) => format_to!(buf, \"    {n}\\n\"),\n-            rowan::NodeOrToken::Token(t) if t.kind() == SyntaxKind::COMMENT => {\n-                format_to!(buf, \"    {t}\\n\")\n+            rowan::NodeOrToken::Token(t) => {\n+                let kind = t.kind();\n+                if kind == SyntaxKind::COMMENT {\n+                    format_to!(buf, \"    {t}\\n\")\n+                } else if kind == SyntaxKind::WHITESPACE {\n+                    let content = t.text().trim_matches(|c| c != '\\n');\n+                    if content.len() >= 1 {\n+                        format_to!(buf, \"{}\", &content[1..])\n+                    }\n+                }\n             }\n-            _ => (),\n         }\n     }\n     if let Some(tail_expr) = tail_expr {"}]}