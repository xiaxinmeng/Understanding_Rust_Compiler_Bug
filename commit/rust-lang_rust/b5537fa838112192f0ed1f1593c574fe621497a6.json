{"sha": "b5537fa838112192f0ed1f1593c574fe621497a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NTM3ZmE4MzgxMTIxOTJmMGVkMWYxNTkzYzU3NGZlNjIxNDk3YTY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-01T19:54:31Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-14T01:15:39Z"}, "message": "libtime: convert `Timespec` binops to by value", "tree": {"sha": "4ee026179d8ae7bf251da1e269ddf8323c150ce8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ee026179d8ae7bf251da1e269ddf8323c150ce8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5537fa838112192f0ed1f1593c574fe621497a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5537fa838112192f0ed1f1593c574fe621497a6", "html_url": "https://github.com/rust-lang/rust/commit/b5537fa838112192f0ed1f1593c574fe621497a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5537fa838112192f0ed1f1593c574fe621497a6/comments", "author": null, "committer": null, "parents": [{"sha": "9126a24e423a8339230f1dde7e36f79faaeaa9d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9126a24e423a8339230f1dde7e36f79faaeaa9d3", "html_url": "https://github.com/rust-lang/rust/commit/9126a24e423a8339230f1dde7e36f79faaeaa9d3"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "4129086e9ec975ae92ea370e3d169562b4a06bba", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b5537fa838112192f0ed1f1593c574fe621497a6/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5537fa838112192f0ed1f1593c574fe621497a6/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=b5537fa838112192f0ed1f1593c574fe621497a6", "patch": "@@ -99,6 +99,8 @@ impl Timespec {\n     }\n }\n \n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n impl Add<Duration, Timespec> for Timespec {\n     fn add(&self, other: &Duration) -> Timespec {\n         let d_sec = other.num_seconds();\n@@ -119,6 +121,29 @@ impl Add<Duration, Timespec> for Timespec {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+impl Add<Duration, Timespec> for Timespec {\n+    fn add(self, other: Duration) -> Timespec {\n+        let d_sec = other.num_seconds();\n+        // It is safe to unwrap the nanoseconds, because there cannot be\n+        // more than one second left, which fits in i64 and in i32.\n+        let d_nsec = (other - Duration::seconds(d_sec))\n+                     .num_nanoseconds().unwrap() as i32;\n+        let mut sec = self.sec + d_sec;\n+        let mut nsec = self.nsec + d_nsec;\n+        if nsec >= NSEC_PER_SEC {\n+            nsec -= NSEC_PER_SEC;\n+            sec += 1;\n+        } else if nsec < 0 {\n+            nsec += NSEC_PER_SEC;\n+            sec -= 1;\n+        }\n+        Timespec::new(sec, nsec)\n+    }\n+}\n+\n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n impl Sub<Timespec, Duration> for Timespec {\n     fn sub(&self, other: &Timespec) -> Duration {\n         let sec = self.sec - other.sec;\n@@ -127,6 +152,15 @@ impl Sub<Timespec, Duration> for Timespec {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+impl Sub<Timespec, Duration> for Timespec {\n+    fn sub(self, other: Timespec) -> Duration {\n+        let sec = self.sec - other.sec;\n+        let nsec = self.nsec - other.nsec;\n+        Duration::seconds(sec) + Duration::nanoseconds(nsec as i64)\n+    }\n+}\n+\n /// Returns the current time as a `timespec` containing the seconds and\n /// nanoseconds since 1970-01-01T00:00:00Z.\n pub fn get_time() -> Timespec {"}]}