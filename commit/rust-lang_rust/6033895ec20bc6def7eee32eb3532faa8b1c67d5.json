{"sha": "6033895ec20bc6def7eee32eb3532faa8b1c67d5", "node_id": "C_kwDOAAsO6NoAKDYwMzM4OTVlYzIwYmM2ZGVmN2VlZTMyZWIzNTMyZmFhOGIxYzY3ZDU", "commit": {"author": {"name": "Nicky Lim", "email": "nickylim.p@gmail.com", "date": "2023-05-04T17:29:11Z"}, "committer": {"name": "Nicky Lim", "email": "nickylim.p@gmail.com", "date": "2023-06-11T10:27:26Z"}, "message": "Add subdiagnostic and suggestion for overflowing bin hex with sign bits", "tree": {"sha": "b94492ca44c1976d8811e39efb207b39c456a2f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b94492ca44c1976d8811e39efb207b39c456a2f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6033895ec20bc6def7eee32eb3532faa8b1c67d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6033895ec20bc6def7eee32eb3532faa8b1c67d5", "html_url": "https://github.com/rust-lang/rust/commit/6033895ec20bc6def7eee32eb3532faa8b1c67d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6033895ec20bc6def7eee32eb3532faa8b1c67d5/comments", "author": {"login": "nicklimmm", "id": 65026286, "node_id": "MDQ6VXNlcjY1MDI2Mjg2", "avatar_url": "https://avatars.githubusercontent.com/u/65026286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicklimmm", "html_url": "https://github.com/nicklimmm", "followers_url": "https://api.github.com/users/nicklimmm/followers", "following_url": "https://api.github.com/users/nicklimmm/following{/other_user}", "gists_url": "https://api.github.com/users/nicklimmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicklimmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicklimmm/subscriptions", "organizations_url": "https://api.github.com/users/nicklimmm/orgs", "repos_url": "https://api.github.com/users/nicklimmm/repos", "events_url": "https://api.github.com/users/nicklimmm/events{/privacy}", "received_events_url": "https://api.github.com/users/nicklimmm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nicklimmm", "id": 65026286, "node_id": "MDQ6VXNlcjY1MDI2Mjg2", "avatar_url": "https://avatars.githubusercontent.com/u/65026286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicklimmm", "html_url": "https://github.com/nicklimmm", "followers_url": "https://api.github.com/users/nicklimmm/followers", "following_url": "https://api.github.com/users/nicklimmm/following{/other_user}", "gists_url": "https://api.github.com/users/nicklimmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicklimmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicklimmm/subscriptions", "organizations_url": "https://api.github.com/users/nicklimmm/orgs", "repos_url": "https://api.github.com/users/nicklimmm/repos", "events_url": "https://api.github.com/users/nicklimmm/events{/privacy}", "received_events_url": "https://api.github.com/users/nicklimmm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34d64ab7a21f704adb496ee2749242fc3511f0f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/34d64ab7a21f704adb496ee2749242fc3511f0f8", "html_url": "https://github.com/rust-lang/rust/commit/34d64ab7a21f704adb496ee2749242fc3511f0f8"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "c66fcdec7164c83839db0c7c166ff0ed838365ee", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6033895ec20bc6def7eee32eb3532faa8b1c67d5/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/6033895ec20bc6def7eee32eb3532faa8b1c67d5/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=6033895ec20bc6def7eee32eb3532faa8b1c67d5", "patch": "@@ -425,6 +425,7 @@ lint_overflowing_bin_hex = literal out of range for `{$ty}`\n     .negative_becomes_note = and the value `-{$lit}` will become `{$actually}{$ty}`\n     .positive_note = the literal `{$lit}` (decimal `{$dec}`) does not fit into the type `{$ty}` and will become `{$actually}{$ty}`\n     .suggestion = consider using the type `{$suggestion_ty}` instead\n+    .sign_bit_suggestion = to use as a negative number (decimal `{$negative_val}`), consider using the type `{$uint_ty}` for the literal and cast it to `{$int_ty}`\n     .help = consider using the type `{$suggestion_ty}` instead\n \n lint_overflowing_int = literal out of range for `{$ty}`"}, {"sha": "89fa5713b73ef23c4f53aa1e5e4e3eeacbb9c460", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6033895ec20bc6def7eee32eb3532faa8b1c67d5/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6033895ec20bc6def7eee32eb3532faa8b1c67d5/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=6033895ec20bc6def7eee32eb3532faa8b1c67d5", "patch": "@@ -1342,6 +1342,8 @@ pub struct OverflowingBinHex<'a> {\n     pub sign: OverflowingBinHexSign,\n     #[subdiagnostic]\n     pub sub: Option<OverflowingBinHexSub<'a>>,\n+    #[subdiagnostic]\n+    pub sign_bit_sub: Option<OverflowingBinHexSignBitSub<'a>>,\n }\n \n pub enum OverflowingBinHexSign {\n@@ -1386,6 +1388,21 @@ pub enum OverflowingBinHexSub<'a> {\n     Help { suggestion_ty: &'a str },\n }\n \n+#[derive(Subdiagnostic)]\n+#[suggestion(\n+    lint_sign_bit_suggestion,\n+    code = \"{lit_no_suffix}{uint_ty} as {int_ty}\",\n+    applicability = \"maybe-incorrect\"\n+)]\n+pub struct OverflowingBinHexSignBitSub<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub lit_no_suffix: &'a str,\n+    pub negative_val: String,\n+    pub uint_ty: &'a str,\n+    pub int_ty: &'a str,\n+}\n+\n #[derive(LintDiagnostic)]\n #[diag(lint_overflowing_int)]\n #[note]"}, {"sha": "ec9e7c7fdae83a1297cdc2e764fbd4c43d553491", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6033895ec20bc6def7eee32eb3532faa8b1c67d5/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6033895ec20bc6def7eee32eb3532faa8b1c67d5/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=6033895ec20bc6def7eee32eb3532faa8b1c67d5", "patch": "@@ -3,9 +3,10 @@ use crate::{\n     lints::{\n         AtomicOrderingFence, AtomicOrderingLoad, AtomicOrderingStore, ImproperCTypes,\n         InvalidAtomicOrderingDiag, InvalidNanComparisons, InvalidNanComparisonsSuggestion,\n-        OnlyCastu8ToChar, OverflowingBinHex, OverflowingBinHexSign, OverflowingBinHexSub,\n-        OverflowingInt, OverflowingIntHelp, OverflowingLiteral, OverflowingUInt,\n-        RangeEndpointOutOfRange, UnusedComparisons, UseInclusiveRange, VariantSizeDifferencesDiag,\n+        OnlyCastu8ToChar, OverflowingBinHex, OverflowingBinHexSign, OverflowingBinHexSignBitSub,\n+        OverflowingBinHexSub, OverflowingInt, OverflowingIntHelp, OverflowingLiteral,\n+        OverflowingUInt, RangeEndpointOutOfRange, UnusedComparisons, UseInclusiveRange,\n+        VariantSizeDifferencesDiag,\n     },\n };\n use crate::{LateContext, LateLintPass, LintContext};\n@@ -297,10 +298,50 @@ fn report_bin_hex_error(\n             }\n         },\n     );\n+    let sign_bit_sub = (!negative)\n+        .then(|| {\n+            let ty::Int(int_ty) = cx.typeck_results().node_type(expr.hir_id).kind() else {\n+                return None;\n+            };\n+\n+            let Some(bit_width) = int_ty.bit_width() else {\n+                return None; // isize case\n+            };\n+\n+            // Skip if sign bit is not set\n+            if (val & (1 << (bit_width - 1))) == 0 {\n+                return None;\n+            }\n+\n+            let lit_no_suffix =\n+                if let Some(pos) = repr_str.chars().position(|c| c == 'i' || c == 'u') {\n+                    repr_str.split_at(pos).0\n+                } else {\n+                    &repr_str\n+                };\n+\n+            Some(OverflowingBinHexSignBitSub {\n+                span: expr.span,\n+                lit_no_suffix,\n+                negative_val: actually.clone(),\n+                int_ty: int_ty.name_str(),\n+                uint_ty: int_ty.to_unsigned().name_str(),\n+            })\n+        })\n+        .flatten();\n+\n     cx.emit_spanned_lint(\n         OVERFLOWING_LITERALS,\n         expr.span,\n-        OverflowingBinHex { ty: t, lit: repr_str.clone(), dec: val, actually, sign, sub },\n+        OverflowingBinHex {\n+            ty: t,\n+            lit: repr_str.clone(),\n+            dec: val,\n+            actually,\n+            sign,\n+            sub,\n+            sign_bit_sub,\n+        },\n     )\n }\n "}]}