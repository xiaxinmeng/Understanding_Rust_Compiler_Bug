{"sha": "41b0315f318f208f92a2d4932b41937e06c1fdef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYjAzMTVmMzE4ZjIwOGY5MmEyZDQ5MzJiNDE5MzdlMDZjMWZkZWY=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-17T09:20:50Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-18T08:53:09Z"}, "message": "More documentation", "tree": {"sha": "99e4f38e5e2339ac14c6feddd83ccba0da6501f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99e4f38e5e2339ac14c6feddd83ccba0da6501f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41b0315f318f208f92a2d4932b41937e06c1fdef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41b0315f318f208f92a2d4932b41937e06c1fdef", "html_url": "https://github.com/rust-lang/rust/commit/41b0315f318f208f92a2d4932b41937e06c1fdef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41b0315f318f208f92a2d4932b41937e06c1fdef/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "html_url": "https://github.com/rust-lang/rust/commit/0f05b4be82ae9e48b2c604b97f5436b1d43a194d"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "8cc8abda70800ae54b48a71147ee1ffb1e318937", "filename": "src/librustc/infer/anon_types/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/41b0315f318f208f92a2d4932b41937e06c1fdef/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b0315f318f208f92a2d4932b41937e06c1fdef/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs?ref=41b0315f318f208f92a2d4932b41937e06c1fdef", "patch": "@@ -808,6 +808,23 @@ impl<'a, 'gcx, 'tcx> Instantiator<'a, 'gcx, 'tcx> {\n }\n \n /// Whether `anon_node_id` is a sibling or a child of a sibling of `def_id`\n+///\n+/// ```rust\n+/// pub mod foo {\n+///     pub mod bar {\n+///         pub existential type Baz;\n+///\n+///         fn f1() -> Baz { .. }\n+///     }\n+///\n+///     fn f2() -> bar::Baz { .. }\n+/// }\n+/// ```\n+///\n+/// Here, `def_id` will be the `DefId` of the existential type `Baz`.\n+/// `anon_node_id` is the `NodeId` of the reference to Baz -- so either the return type of f1 or f2.\n+/// We will return true if the reference is within the same module as the existential type\n+/// So true for f1, false for f2.\n pub fn may_define_existential_type(\n     tcx: TyCtxt,\n     def_id: DefId,"}, {"sha": "7ae6f81264981654fb25494531de5a3c3c3b2fa5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41b0315f318f208f92a2d4932b41937e06c1fdef/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b0315f318f208f92a2d4932b41937e06c1fdef/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=41b0315f318f208f92a2d4932b41937e06c1fdef", "patch": "@@ -2861,7 +2861,7 @@ fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                        def_id: DefId)\n                        -> ParamEnv<'tcx> {\n \n-    // The param_env of an existential type is its parent's param_env\n+    // The param_env of an impl Trait type is its defining function's param_env\n     if let Some(Def::Existential(_)) = tcx.describe_def(def_id) {\n         if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n             if let hir::map::NodeItem(item) = tcx.hir.get(node_id) {"}, {"sha": "cd6a1e3fdba22f7df7616a1020db974698cac4b3", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/41b0315f318f208f92a2d4932b41937e06c1fdef/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b0315f318f208f92a2d4932b41937e06c1fdef/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=41b0315f318f208f92a2d4932b41937e06c1fdef", "patch": "@@ -535,6 +535,26 @@ fn check_fn_or_method<'a, 'fcx, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n     check_where_clauses(tcx, fcx, span, def_id, Some(sig.output()));\n }\n \n+/// Checks \"defining uses\" of existential types to ensure that they meet the restrictions laid for\n+/// \"higher-order pattern unification\".\n+/// This ensures that inference is tractable.\n+/// In particular, definitions of existential types can only use other generics as arguments,\n+/// and they cannot repeat an argument. Example:\n+///\n+/// ```rust\n+/// existential type Foo<A, B>;\n+///\n+/// // ok -- `Foo` is applied to two distinct, generic types.\n+/// fn a<T, U>() -> Foo<T, U> { .. }\n+///\n+/// // not ok -- `Foo` is applied to `T` twice.\n+/// fn b<T>() -> Foo<T, T> { .. }\n+///\n+///\n+/// // not ok -- `Foo` is applied to a non-generic type.\n+/// fn b<T>() -> Foo<T, u32> { .. }\n+/// ```\n+///\n fn check_existential_types<'a, 'fcx, 'gcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'gcx>,\n     fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,"}]}