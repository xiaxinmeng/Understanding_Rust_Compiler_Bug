{"sha": "f14f4db6e88f4d1788033c220d9b6b6f41420789", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNGY0ZGI2ZTg4ZjRkMTc4ODAzM2MyMjBkOWI2YjZmNDE0MjA3ODk=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-09-26T16:17:38Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-09-26T16:17:38Z"}, "message": "Move Vec::dedup tests from slice.rs to vec.rs", "tree": {"sha": "251ff64a3640037a6a8f9ec0060954c194c0a685", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/251ff64a3640037a6a8f9ec0060954c194c0a685"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f14f4db6e88f4d1788033c220d9b6b6f41420789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f14f4db6e88f4d1788033c220d9b6b6f41420789", "html_url": "https://github.com/rust-lang/rust/commit/f14f4db6e88f4d1788033c220d9b6b6f41420789", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f14f4db6e88f4d1788033c220d9b6b6f41420789/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc973417a8ae30b0e1e52c341fa666090a4b045f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc973417a8ae30b0e1e52c341fa666090a4b045f", "html_url": "https://github.com/rust-lang/rust/commit/dc973417a8ae30b0e1e52c341fa666090a4b045f"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "6d11ca1fbcfc390d6637e4f222a757e76a353145", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f14f4db6e88f4d1788033c220d9b6b6f41420789/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14f4db6e88f4d1788033c220d9b6b6f41420789/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=f14f4db6e88f4d1788033c220d9b6b6f41420789", "patch": "@@ -315,35 +315,6 @@ fn test_clear() {\n     // If the unsafe block didn't drop things properly, we blow up here.\n }\n \n-#[test]\n-fn test_dedup() {\n-    fn case(a: Vec<i32>, b: Vec<i32>) {\n-        let mut v = a;\n-        v.dedup();\n-        assert_eq!(v, b);\n-    }\n-    case(vec![], vec![]);\n-    case(vec![1], vec![1]);\n-    case(vec![1, 1], vec![1]);\n-    case(vec![1, 2, 3], vec![1, 2, 3]);\n-    case(vec![1, 1, 2, 3], vec![1, 2, 3]);\n-    case(vec![1, 2, 2, 3], vec![1, 2, 3]);\n-    case(vec![1, 2, 3, 3], vec![1, 2, 3]);\n-    case(vec![1, 1, 2, 2, 2, 3, 3], vec![1, 2, 3]);\n-}\n-\n-#[test]\n-fn test_dedup_unique() {\n-    let mut v0: Vec<Box<_>> = vec![box 1, box 1, box 2, box 3];\n-    v0.dedup();\n-    let mut v1: Vec<Box<_>> = vec![box 1, box 2, box 2, box 3];\n-    v1.dedup();\n-    let mut v2: Vec<Box<_>> = vec![box 1, box 2, box 3, box 3];\n-    v2.dedup();\n-    // If the boxed pointers were leaked or otherwise misused, valgrind\n-    // and/or rt should raise errors.\n-}\n-\n #[test]\n fn test_retain() {\n     let mut v = vec![1, 2, 3, 4, 5];"}, {"sha": "1f4ab7f51a2c7330f5b8604fea91b4af7cd21a66", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f14f4db6e88f4d1788033c220d9b6b6f41420789/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14f4db6e88f4d1788033c220d9b6b6f41420789/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=f14f4db6e88f4d1788033c220d9b6b6f41420789", "patch": "@@ -213,6 +213,35 @@ fn test_retain() {\n     assert_eq!(vec, [2, 4]);\n }\n \n+#[test]\n+fn test_dedup() {\n+    fn case(a: Vec<i32>, b: Vec<i32>) {\n+        let mut v = a;\n+        v.dedup();\n+        assert_eq!(v, b);\n+    }\n+    case(vec![], vec![]);\n+    case(vec![1], vec![1]);\n+    case(vec![1, 1], vec![1]);\n+    case(vec![1, 2, 3], vec![1, 2, 3]);\n+    case(vec![1, 1, 2, 3], vec![1, 2, 3]);\n+    case(vec![1, 2, 2, 3], vec![1, 2, 3]);\n+    case(vec![1, 2, 3, 3], vec![1, 2, 3]);\n+    case(vec![1, 1, 2, 2, 2, 3, 3], vec![1, 2, 3]);\n+}\n+\n+#[test]\n+fn test_dedup_unique() {\n+    let mut v0: Vec<Box<_>> = vec![box 1, box 1, box 2, box 3];\n+    v0.dedup();\n+    let mut v1: Vec<Box<_>> = vec![box 1, box 2, box 2, box 3];\n+    v1.dedup();\n+    let mut v2: Vec<Box<_>> = vec![box 1, box 2, box 3, box 3];\n+    v2.dedup();\n+    // If the boxed pointers were leaked or otherwise misused, valgrind\n+    // and/or rt should raise errors.\n+}\n+\n #[test]\n fn zero_sized_values() {\n     let mut v = Vec::new();"}]}