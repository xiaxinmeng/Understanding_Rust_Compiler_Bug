{"sha": "def2232595a68897cbaa1d3dc0820da5fe56f429", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZjIyMzI1OTVhNjg4OTdjYmFhMWQzZGMwODIwZGE1ZmU1NmY0Mjk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2014-05-28T10:47:30Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2014-05-28T16:25:51Z"}, "message": "Issue #13933: Remove transmute_mut from IO\n\nThe IO libraries casted self to mut so they can pass it to seek(SEEK_CUR, 0).\nFix this by introducing a private seek function that takes &self\n  - of course one should be careful with it if he lacks an\n    exclusive reference to self.", "tree": {"sha": "cbd57e41699dce733ae311dd1c0ea18fef143f25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbd57e41699dce733ae311dd1c0ea18fef143f25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/def2232595a68897cbaa1d3dc0820da5fe56f429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/def2232595a68897cbaa1d3dc0820da5fe56f429", "html_url": "https://github.com/rust-lang/rust/commit/def2232595a68897cbaa1d3dc0820da5fe56f429", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/def2232595a68897cbaa1d3dc0820da5fe56f429/comments", "author": null, "committer": null, "parents": [{"sha": "0a092a815861cbbf3585c7edfb12f4234cfbaeb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a092a815861cbbf3585c7edfb12f4234cfbaeb9", "html_url": "https://github.com/rust-lang/rust/commit/0a092a815861cbbf3585c7edfb12f4234cfbaeb9"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "4f1f3b3ca26f726374cbc7e3fcaaf57085da0389", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/def2232595a68897cbaa1d3dc0820da5fe56f429/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def2232595a68897cbaa1d3dc0820da5fe56f429/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=def2232595a68897cbaa1d3dc0820da5fe56f429", "patch": "@@ -90,6 +90,25 @@ impl FileDesc {\n     pub fn handle(&self) -> libc::HANDLE {\n         unsafe { libc::get_osfhandle(self.fd()) as libc::HANDLE }\n     }\n+\n+    // A version of seek that takes &self so that tell can call it\n+    //   - the private seek should of course take &mut self.\n+    fn seek_common(&self, pos: i64, style: io::SeekStyle) -> Result<u64, IoError> {\n+        let whence = match style {\n+            io::SeekSet => libc::FILE_BEGIN,\n+            io::SeekEnd => libc::FILE_END,\n+            io::SeekCur => libc::FILE_CURRENT,\n+        };\n+        unsafe {\n+            let mut newpos = 0;\n+            match libc::SetFilePointerEx(self.handle(), pos, &mut newpos,\n+                                         whence) {\n+                0 => Err(super::last_error()),\n+                _ => Ok(newpos as u64),\n+            }\n+        }\n+    }\n+\n }\n \n impl io::Reader for FileDesc {\n@@ -151,26 +170,13 @@ impl rtio::RtioFileStream for FileDesc {\n         }\n         Ok(())\n     }\n+\n     fn seek(&mut self, pos: i64, style: io::SeekStyle) -> Result<u64, IoError> {\n-        let whence = match style {\n-            io::SeekSet => libc::FILE_BEGIN,\n-            io::SeekEnd => libc::FILE_END,\n-            io::SeekCur => libc::FILE_CURRENT,\n-        };\n-        unsafe {\n-            let mut newpos = 0;\n-            match libc::SetFilePointerEx(self.handle(), pos, &mut newpos,\n-                                         whence) {\n-                0 => Err(super::last_error()),\n-                _ => Ok(newpos as u64),\n-            }\n-        }\n+        self.seek_common(pos, style)\n     }\n+\n     fn tell(&self) -> Result<u64, IoError> {\n-        // This transmute is fine because our seek implementation doesn't\n-        // actually use the mutable self at all.\n-        // FIXME #13933: Remove/justify all `&T` to `&mut T` transmutes\n-        unsafe { mem::transmute::<&_, &mut FileDesc>(self).seek(0, io::SeekCur) }\n+        self.seek_common(0, io::SeekCur)\n     }\n \n     fn fsync(&mut self) -> Result<(), IoError> {"}, {"sha": "7143f420b08a1b8c5bce0d685f0b1598da356f1c", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/def2232595a68897cbaa1d3dc0820da5fe56f429/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def2232595a68897cbaa1d3dc0820da5fe56f429/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=def2232595a68897cbaa1d3dc0820da5fe56f429", "patch": "@@ -377,7 +377,7 @@ impl FileWatcher {\n         let r = FsRequest::write(&self.loop_, self.fd, buf, offset);\n         r.map_err(uv_error_to_io_error)\n     }\n-    fn seek_common(&mut self, pos: i64, whence: c_int) ->\n+    fn seek_common(&self, pos: i64, whence: c_int) ->\n         Result<u64, IoError>{\n         unsafe {\n             match libc::lseek(self.fd, pos as libc::off_t, whence) {\n@@ -446,10 +446,8 @@ impl rtio::RtioFileStream for FileWatcher {\n     }\n     fn tell(&self) -> Result<u64, IoError> {\n         use libc::SEEK_CUR;\n-        // this is temporary\n-        // FIXME #13933: Remove/justify all `&T` to `&mut T` transmutes\n-        let self_ = unsafe { mem::transmute::<&_, &mut FileWatcher>(self) };\n-        self_.seek_common(0, SEEK_CUR)\n+\n+        self.seek_common(0, SEEK_CUR)\n     }\n     fn fsync(&mut self) -> Result<(), IoError> {\n         let _m = self.fire_homing_missile();"}]}