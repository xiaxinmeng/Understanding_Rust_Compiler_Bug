{"sha": "d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc", "node_id": "C_kwDOAAsO6NoAKGQwZTRjNjc5ZmYxNzcyZTdlYzBmOWNhOTgzYWMyMjlmZmQzZGIyZGM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-30T01:33:51Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-07T23:31:03Z"}, "message": "Built-in implementation of Tuple trait", "tree": {"sha": "9386ba6b45f14827b54181b27493fe28b3b083bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9386ba6b45f14827b54181b27493fe28b3b083bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc", "html_url": "https://github.com/rust-lang/rust/commit/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b2eab231056da3734e90bd35f11e257dc0bc138", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b2eab231056da3734e90bd35f11e257dc0bc138", "html_url": "https://github.com/rust-lang/rust/commit/6b2eab231056da3734e90bd35f11e257dc0bc138"}], "stats": {"total": 80, "additions": 72, "deletions": 8}, "files": [{"sha": "53d22eb00706d93c05030654dc9ffcdb7b32a4c2", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc", "patch": "@@ -634,6 +634,10 @@ pub enum ImplSource<'tcx, N> {\n \n     /// ImplSource for a `const Drop` implementation.\n     ConstDestruct(ImplSourceConstDestructData<N>),\n+\n+    /// ImplSource for a `std::marker::Tuple` implementation.\n+    /// This has no nested predicates ever, so no data.\n+    Tuple,\n }\n \n impl<'tcx, N> ImplSource<'tcx, N> {\n@@ -648,7 +652,8 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             ImplSource::Object(d) => d.nested,\n             ImplSource::FnPointer(d) => d.nested,\n             ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n-            | ImplSource::Pointee(ImplSourcePointeeData) => Vec::new(),\n+            | ImplSource::Pointee(ImplSourcePointeeData)\n+            | ImplSource::Tuple => Vec::new(),\n             ImplSource::TraitAlias(d) => d.nested,\n             ImplSource::TraitUpcasting(d) => d.nested,\n             ImplSource::ConstDestruct(i) => i.nested,\n@@ -666,7 +671,8 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             ImplSource::Object(d) => &d.nested,\n             ImplSource::FnPointer(d) => &d.nested,\n             ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n-            | ImplSource::Pointee(ImplSourcePointeeData) => &[],\n+            | ImplSource::Pointee(ImplSourcePointeeData)\n+            | ImplSource::Tuple => &[],\n             ImplSource::TraitAlias(d) => &d.nested,\n             ImplSource::TraitUpcasting(d) => &d.nested,\n             ImplSource::ConstDestruct(i) => &i.nested,\n@@ -733,6 +739,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n                     nested: i.nested.into_iter().map(f).collect(),\n                 })\n             }\n+            ImplSource::Tuple => ImplSource::Tuple,\n         }\n     }\n }"}, {"sha": "53af3e905341960e528da3528de1c91336cee72c", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc", "patch": "@@ -160,6 +160,9 @@ pub enum SelectionCandidate<'tcx> {\n \n     /// Implementation of `const Destruct`, optionally from a custom `impl const Drop`.\n     ConstDestructCandidate(Option<DefId>),\n+\n+    /// Witnesses the fact that a type is a tuple.\n+    TupleCandidate,\n }\n \n /// The result of trait evaluation. The order is important"}, {"sha": "c526344e1f263cfa92e280eb114d5e07b8a9b822", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc", "patch": "@@ -34,6 +34,8 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSource<'tcx, N> {\n             super::ImplSource::TraitUpcasting(ref d) => write!(f, \"{:?}\", d),\n \n             super::ImplSource::ConstDestruct(ref d) => write!(f, \"{:?}\", d),\n+\n+            super::ImplSource::Tuple => write!(f, \"ImplSource::Tuple\"),\n         }\n     }\n }"}, {"sha": "f73dce39764651efca170c4c5e7a5dd2e72e5847", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc", "patch": "@@ -1625,7 +1625,8 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n             super::ImplSource::AutoImpl(..)\n             | super::ImplSource::Builtin(..)\n             | super::ImplSource::TraitUpcasting(_)\n-            | super::ImplSource::ConstDestruct(_) => {\n+            | super::ImplSource::ConstDestruct(_)\n+            | super::ImplSource::Tuple => {\n                 // These traits have no associated types.\n                 selcx.tcx().sess.delay_span_bug(\n                     obligation.cause.span,\n@@ -1700,7 +1701,8 @@ fn confirm_select_candidate<'cx, 'tcx>(\n         | super::ImplSource::Builtin(..)\n         | super::ImplSource::TraitUpcasting(_)\n         | super::ImplSource::TraitAlias(..)\n-        | super::ImplSource::ConstDestruct(_) => {\n+        | super::ImplSource::ConstDestruct(_)\n+        | super::ImplSource::Tuple => {\n             // we don't create Select candidates with this kind of resolution\n             span_bug!(\n                 obligation.cause.span,"}, {"sha": "4d738a49468df6f90df473212a751a2e234cdd63", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc", "patch": "@@ -309,6 +309,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // User-defined transmutability impls are permitted.\n                 self.assemble_candidates_from_impls(obligation, &mut candidates);\n                 self.assemble_candidates_for_transmutability(obligation, &mut candidates);\n+            } else if lang_items.tuple_trait() == Some(def_id) {\n+                self.assemble_candidate_for_tuple(obligation, &mut candidates);\n             } else {\n                 if lang_items.clone_trait() == Some(def_id) {\n                     // Same builtin conditions as `Copy`, i.e., every type which has builtin support\n@@ -1009,4 +1011,46 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n         }\n     }\n+\n+    fn assemble_candidate_for_tuple(\n+        &mut self,\n+        obligation: &TraitObligation<'tcx>,\n+        candidates: &mut SelectionCandidateSet<'tcx>,\n+    ) {\n+        let self_ty = self.infcx().shallow_resolve(obligation.self_ty().skip_binder());\n+        match self_ty.kind() {\n+            ty::Tuple(_) => {\n+                candidates.vec.push(TupleCandidate);\n+            }\n+            ty::Infer(ty::TyVar(_)) => {\n+                candidates.ambiguous = true;\n+            }\n+            ty::Bool\n+            | ty::Char\n+            | ty::Int(_)\n+            | ty::Uint(_)\n+            | ty::Float(_)\n+            | ty::Adt(_, _)\n+            | ty::Foreign(_)\n+            | ty::Str\n+            | ty::Array(_, _)\n+            | ty::Slice(_)\n+            | ty::RawPtr(_)\n+            | ty::Ref(_, _, _)\n+            | ty::FnDef(_, _)\n+            | ty::FnPtr(_)\n+            | ty::Dynamic(_, _)\n+            | ty::Closure(_, _)\n+            | ty::Generator(_, _, _)\n+            | ty::GeneratorWitness(_)\n+            | ty::Never\n+            | ty::Projection(_)\n+            | ty::Opaque(_, _)\n+            | ty::Param(_)\n+            | ty::Bound(_, _)\n+            | ty::Error(_)\n+            | ty::Infer(_)\n+            | ty::Placeholder(_) => {}\n+        }\n+    }\n }"}, {"sha": "ef6311674782b9ad9638d1bafe8093c20343f7b0", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc", "patch": "@@ -126,6 +126,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let data = self.confirm_const_destruct_candidate(obligation, def_id)?;\n                 ImplSource::ConstDestruct(data)\n             }\n+\n+            TupleCandidate => ImplSource::Tuple,\n         };\n \n         if !obligation.predicate.is_const_if_const() {"}, {"sha": "561a3e1c0383054c76b55694e83adeae0d4960a0", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc", "patch": "@@ -1618,7 +1618,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         };\n \n         // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,\n-        // `DiscriminantKindCandidate`, and `ConstDestructCandidate` to anything else.\n+        // `DiscriminantKindCandidate`, `ConstDestructCandidate`, and `TupleCandidate`\n+        // to anything else.\n         //\n         // This is a fix for #53123 and prevents winnowing from accidentally extending the\n         // lifetime of a variable.\n@@ -1638,15 +1639,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 BuiltinCandidate { has_nested: false }\n                 | DiscriminantKindCandidate\n                 | PointeeCandidate\n-                | ConstDestructCandidate(_),\n+                | ConstDestructCandidate(_)\n+                | TupleCandidate,\n                 _,\n             ) => true,\n             (\n                 _,\n                 BuiltinCandidate { has_nested: false }\n                 | DiscriminantKindCandidate\n                 | PointeeCandidate\n-                | ConstDestructCandidate(_),\n+                | ConstDestructCandidate(_)\n+                | TupleCandidate,\n             ) => false,\n \n             (ParamCandidate(other), ParamCandidate(victim)) => {"}, {"sha": "8075cb77757a122722be27257909b60dfc8b2a01", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=d0e4c679ff1772e7ec0f9ca983ac229ffd3db2dc", "patch": "@@ -397,7 +397,8 @@ fn resolve_associated_item<'tcx>(\n         | traits::ImplSource::DiscriminantKind(..)\n         | traits::ImplSource::Pointee(..)\n         | traits::ImplSource::TraitUpcasting(_)\n-        | traits::ImplSource::ConstDestruct(_) => None,\n+        | traits::ImplSource::ConstDestruct(_)\n+        | traits::ImplSource::Tuple => None,\n     })\n }\n "}]}