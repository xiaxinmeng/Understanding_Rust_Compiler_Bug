{"sha": "e584a492f340a73b6d9e546b9708fcb48315bfc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ODRhNDkyZjM0MGE3M2I2ZDllNTQ2Yjk3MDhmY2I0ODMxNWJmYzg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-25T06:11:02Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-25T09:36:07Z"}, "message": "Rollup merge of #31837 - mitaa:rdoc-inherent-assoc, r=alexcrichton\n\nThis effectively only records associated items from either inherent impls or trait definitions in the search-index.\n\nfixes #31808\n\nr? @alexcrichton", "tree": {"sha": "544a36b22415f5c81da44d6fc5963dbed8e916af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/544a36b22415f5c81da44d6fc5963dbed8e916af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e584a492f340a73b6d9e546b9708fcb48315bfc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e584a492f340a73b6d9e546b9708fcb48315bfc8", "html_url": "https://github.com/rust-lang/rust/commit/e584a492f340a73b6d9e546b9708fcb48315bfc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e584a492f340a73b6d9e546b9708fcb48315bfc8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6078a86e2d54d8bd42c8ce64575f01e231bfc38e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6078a86e2d54d8bd42c8ce64575f01e231bfc38e", "html_url": "https://github.com/rust-lang/rust/commit/6078a86e2d54d8bd42c8ce64575f01e231bfc38e"}, {"sha": "f5df7e086516ba6398f2a1538c1c6d3193846f55", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5df7e086516ba6398f2a1538c1c6d3193846f55", "html_url": "https://github.com/rust-lang/rust/commit/f5df7e086516ba6398f2a1538c1c6d3193846f55"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "d7100f9f2204684c8a6c41d12f9951c98a9212b6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e584a492f340a73b6d9e546b9708fcb48315bfc8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e584a492f340a73b6d9e546b9708fcb48315bfc8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e584a492f340a73b6d9e546b9708fcb48315bfc8", "patch": "@@ -243,6 +243,7 @@ pub struct Cache {\n \n     stack: Vec<String>,\n     parent_stack: Vec<DefId>,\n+    parent_is_trait_impl: bool,\n     search_index: Vec<IndexItem>,\n     privmod: bool,\n     remove_priv: bool,\n@@ -487,6 +488,7 @@ pub fn run(mut krate: clean::Crate,\n         stack: Vec::new(),\n         parent_stack: Vec::new(),\n         search_index: Vec::new(),\n+        parent_is_trait_impl: false,\n         extern_locations: HashMap::new(),\n         primitive_locations: HashMap::new(),\n         remove_priv: cx.passes.contains(\"strip-private\"),\n@@ -996,6 +998,11 @@ impl DocFolder for Cache {\n         // Index this method for searching later on\n         if let Some(ref s) = item.name {\n             let (parent, is_method) = match item.inner {\n+                clean::AssociatedConstItem(..) |\n+                clean::TypedefItem(_, true) if self.parent_is_trait_impl => {\n+                    // skip associated items in trait impls\n+                    ((None, None), false)\n+                }\n                 clean::AssociatedTypeItem(..) |\n                 clean::AssociatedConstItem(..) |\n                 clean::TyMethodItem(..) |\n@@ -1027,10 +1034,6 @@ impl DocFolder for Cache {\n                         ((Some(*last), path), true)\n                     }\n                 }\n-                clean::TypedefItem(_, true) => {\n-                    // skip associated types in impls\n-                    ((None, None), false)\n-                }\n                 _ => ((None, Some(&*self.stack)), false)\n             };\n             let hidden_field = match item.inner {\n@@ -1116,12 +1119,15 @@ impl DocFolder for Cache {\n         }\n \n         // Maintain the parent stack\n+        let orig_parent_is_trait_impl = self.parent_is_trait_impl;\n         let parent_pushed = match item.inner {\n             clean::TraitItem(..) | clean::EnumItem(..) | clean::StructItem(..) => {\n                 self.parent_stack.push(item.def_id);\n+                self.parent_is_trait_impl = false;\n                 true\n             }\n             clean::ImplItem(ref i) => {\n+                self.parent_is_trait_impl = i.trait_.is_some();\n                 match i.for_ {\n                     clean::ResolvedPath{ did, .. } => {\n                         self.parent_stack.push(did);\n@@ -1202,6 +1208,7 @@ impl DocFolder for Cache {\n         if pushed { self.stack.pop().unwrap(); }\n         if parent_pushed { self.parent_stack.pop().unwrap(); }\n         self.privmod = orig_privmod;\n+        self.parent_is_trait_impl = orig_parent_is_trait_impl;\n         return ret;\n     }\n }"}, {"sha": "46be8229d7c651ba2982fb01a88dc8d1b381a84b", "filename": "src/test/rustdoc/issue-31808.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e584a492f340a73b6d9e546b9708fcb48315bfc8/src%2Ftest%2Frustdoc%2Fissue-31808.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e584a492f340a73b6d9e546b9708fcb48315bfc8/src%2Ftest%2Frustdoc%2Fissue-31808.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-31808.rs?ref=e584a492f340a73b6d9e546b9708fcb48315bfc8", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts, associated_types)]\n+\n+// Test that associated item impls on primitive types don't crash rustdoc\n+\n+pub trait Foo {\n+    const BAR: usize;\n+    type BAZ;\n+}\n+\n+impl Foo for () {\n+    const BAR: usize = 0;\n+    type BAZ = usize;\n+}"}]}