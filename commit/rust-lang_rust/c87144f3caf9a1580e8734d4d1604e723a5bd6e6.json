{"sha": "c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NzE0NGYzY2FmOWExNTgwZTg3MzRkNGQxNjA0ZTcyM2E1YmQ2ZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-19T10:27:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-19T10:27:59Z"}, "message": "Auto merge of #57752 - Centril:rollup, r=Centril\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #57268 (Add a target option \"merge-functions\", and a corresponding -Z flag (works around #57356))\n - #57476 (Move glob map use to query and get rid of CrateAnalysis)\n - #57501 (High priority resolutions for associated variants)\n - #57573 (Querify `entry_fn`)\n - #57610 (Fix nested `?` matchers)\n - #57634 (Remove an unused function argument)\n - #57653 (Make the contribution doc reference the guide more)\n - #57666 (Generalize `huge-enum.rs` test and expected stderr for more cross platform cases)\n - #57698 (Fix typo bug in DepGraph::try_mark_green().)\n - #57746 (Update README.md)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "b8abafe076df0bf56c27099127448a5158d16424", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8abafe076df0bf56c27099127448a5158d16424"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "html_url": "https://github.com/rust-lang/rust/commit/c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bc6baec76f4540c87b23ef349c664fd427d0f53", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc6baec76f4540c87b23ef349c664fd427d0f53", "html_url": "https://github.com/rust-lang/rust/commit/1bc6baec76f4540c87b23ef349c664fd427d0f53"}, {"sha": "f7b9084e6e49a1bc7510fad7639c548c5d1c5c3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7b9084e6e49a1bc7510fad7639c548c5d1c5c3e", "html_url": "https://github.com/rust-lang/rust/commit/f7b9084e6e49a1bc7510fad7639c548c5d1c5c3e"}], "stats": {"total": 1413, "additions": 793, "deletions": 620}, "files": [{"sha": "9924055ca45ea0053a89e8613ef4e524f550da63", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 21, "deletions": 229, "changes": 250, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -19,9 +19,16 @@ hop on [#rust-internals][pound-rust-internals].\n \n As a reminder, all contributors are expected to follow our [Code of Conduct][coc].\n \n+The [rustc-guide] is your friend! It describes how the compiler works and how\n+to contribute to it in more detail than this document.\n+\n+If this is your first time contributing, the [walkthrough] chapter of the guide\n+can give you a good example of how a typical contribution would go.\n+\n [pound-rust-internals]: https://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust-internals\n [internals]: https://internals.rust-lang.org\n [coc]: https://www.rust-lang.org/conduct.html\n+[walkthrough]: https://rust-lang.github.io/rustc-guide/walkthrough.html\n \n ## Feature Requests\n [feature-requests]: #feature-requests\n@@ -89,222 +96,14 @@ $ RUST_BACKTRACE=1 rustc ...\n ```\n \n ## The Build System\n-[the-build-system]: #the-build-system\n-\n-Rust's build system allows you to bootstrap the compiler, run tests &\n-benchmarks, generate documentation, install a fresh build of Rust, and more.\n-It's your best friend when working on Rust, allowing you to compile & test\n-your contributions before submission.\n-\n-The build system lives in [the `src/bootstrap` directory][bootstrap] in the\n-project root. Our build system is itself written in Rust and is based on Cargo\n-to actually build all the compiler's crates. If you have questions on the build\n-system internals, try asking in [`#rust-internals`][pound-rust-internals].\n-\n-[bootstrap]: https://github.com/rust-lang/rust/tree/master/src/bootstrap/\n-\n-### Configuration\n-[configuration]: #configuration\n-\n-Before you can start building the compiler you need to configure the build for\n-your system. In most cases, that will just mean using the defaults provided\n-for Rust.\n-\n-To change configuration, you must copy the file `config.toml.example`\n-to `config.toml` in the directory from which you will be running the build, and\n-change the settings provided.\n-\n-There are large number of options provided in this config file that will alter the\n-configuration used in the build process. Some options to note:\n-\n-#### `[llvm]`:\n-- `assertions = true` = This enables LLVM assertions, which makes LLVM misuse cause an assertion failure instead of weird misbehavior. This also slows down the compiler's runtime by ~20%.\n-- `ccache = true` - Use ccache when building llvm\n-\n-#### `[build]`:\n-- `compiler-docs = true` - Build compiler documentation\n-\n-#### `[rust]`:\n-- `debuginfo = true` - Build a compiler with debuginfo. Makes building rustc slower, but then you can use a debugger to debug `rustc`.\n-- `debuginfo-lines = true` - An alternative to `debuginfo = true` that doesn't let you use a debugger, but doesn't make building rustc slower and still gives you line numbers in backtraces.\n-- `debuginfo-tools = true` - Build the extended tools with debuginfo.\n-- `debug-assertions = true` - Makes the log output of `debug!` work.\n-- `optimize = false` - Disable optimizations to speed up compilation of stage1 rust, but makes the stage1 compiler x100 slower.\n-\n-For more options, the `config.toml` file contains commented out defaults, with\n-descriptions of what each option will do.\n-\n-Note: Previously the `./configure` script was used to configure this\n-project. It can still be used, but it's recommended to use a `config.toml`\n-file. If you still have a `config.mk` file in your directory - from\n-`./configure` - you may need to delete it for `config.toml` to work.\n-\n-### Building\n-[building]: #building\n-\n-A default configuration requires around 3.5 GB of disk space, whereas building a debug configuration may require more than 30 GB.\n \n-Dependencies\n-- [build dependencies](README.md#building-from-source)\n-- `gdb` 6.2.0 minimum, 7.1 or later recommended for test builds\n+For info on how to configure and build the compiler, please see [this\n+chapter][rustcguidebuild] of the rustc-guide. This chapter contains info for\n+contributions to the compiler and the standard library. It also lists some\n+really useful commands to the build system (`./x.py`), which could save you a\n+lot of time.\n \n-The build system uses the `x.py` script to control the build process. This script\n-is used to build, test, and document various parts of the compiler. You can\n-execute it as:\n-\n-```sh\n-python x.py build\n-```\n-\n-On some systems you can also use the shorter version:\n-\n-```sh\n-./x.py build\n-```\n-\n-To learn more about the driver and top-level targets, you can execute:\n-\n-```sh\n-python x.py --help\n-```\n-\n-The general format for the driver script is:\n-\n-```sh\n-python x.py <command> [<directory>]\n-```\n-\n-Some example commands are `build`, `test`, and `doc`. These will build, test,\n-and document the specified directory. The second argument, `<directory>`, is\n-optional and defaults to working over the entire compiler. If specified,\n-however, only that specific directory will be built. For example:\n-\n-```sh\n-# build the entire compiler\n-python x.py build\n-\n-# build all documentation\n-python x.py doc\n-\n-# run all test suites\n-python x.py test\n-\n-# build only the standard library\n-python x.py build src/libstd\n-\n-# test only one particular test suite\n-python x.py test src/test/rustdoc\n-\n-# build only the stage0 libcore library\n-python x.py build src/libcore --stage 0\n-```\n-\n-You can explore the build system through the various `--help` pages for each\n-subcommand. For example to learn more about a command you can run:\n-\n-```\n-python x.py build --help\n-```\n-\n-To learn about all possible rules you can execute, run:\n-\n-```\n-python x.py build --help --verbose\n-```\n-\n-Note: Previously `./configure` and `make` were used to build this project.\n-They are still available, but `x.py` is the recommended build system.\n-\n-### Useful commands\n-[useful-commands]: #useful-commands\n-\n-Some common invocations of `x.py` are:\n-\n-- `x.py build --help` - show the help message and explain the subcommand\n-- `x.py build src/libtest --stage 1` - build up to (and including) the first\n-  stage. For most cases we don't need to build the stage2 compiler, so we can\n-  save time by not building it. The stage1 compiler is a fully functioning\n-  compiler and (probably) will be enough to determine if your change works as\n-  expected.\n-- `x.py build src/rustc --stage 1` - This will build just rustc, without libstd.\n-  This is the fastest way to recompile after you changed only rustc source code.\n-  Note however that the resulting rustc binary won't have a stdlib to link\n-  against by default. You can build libstd once with `x.py build src/libstd`,\n-  but it is only guaranteed to work if recompiled, so if there are any issues\n-  recompile it.\n-- `x.py test` - build the full compiler & run all tests (takes a while). This\n-  is what gets run by the continuous integration system against your pull\n-  request. You should run this before submitting to make sure your tests pass\n-  & everything builds in the correct manner.\n-- `x.py test src/libstd --stage 1` - test the standard library without\n-  recompiling stage 2.\n-- `x.py test src/test/run-pass --test-args TESTNAME` - Run a matching set of\n-  tests.\n-  - `TESTNAME` should be a substring of the tests to match against e.g. it could\n-    be the fully qualified test name, or just a part of it.\n-    `TESTNAME=collections::hash::map::test_map::test_capacity_not_less_than_len`\n-    or `TESTNAME=test_capacity_not_less_than_len`.\n-- `x.py test src/test/run-pass --stage 1 --test-args <substring-of-test-name>` -\n-  Run a single rpass test with the stage1 compiler (this will be quicker than\n-  running the command above as we only build the stage1 compiler, not the entire\n-  thing).  You can also leave off the directory argument to run all stage1 test\n-  types.\n-- `x.py test src/libcore --stage 1` - Run stage1 tests in `libcore`.\n-- `x.py test src/tools/tidy` - Check that the source code is in compliance with\n-  Rust's style guidelines. There is no official document describing Rust's full\n-  guidelines as of yet, but basic rules like 4 spaces for indentation and no\n-  more than 99 characters in a single line should be kept in mind when writing\n-  code.\n-\n-### Using your local build\n-[using-local-build]: #using-local-build\n-\n-If you use Rustup to manage your rust install, it has a feature called [\"custom\n-toolchains\"][toolchain-link] that you can use to access your newly-built compiler\n-without having to install it to your system or user PATH. If you've run `python\n-x.py build`, then you can add your custom rustc to a new toolchain like this:\n-\n-[toolchain-link]: https://github.com/rust-lang-nursery/rustup.rs#working-with-custom-toolchains-and-local-builds\n-\n-```\n-rustup toolchain link <name> build/<host-triple>/stage2\n-```\n-\n-Where `<host-triple>` is the build triple for the host (the triple of your\n-computer, by default), and `<name>` is the name for your custom toolchain. (If you\n-added `--stage 1` to your build command, the compiler will be in the `stage1`\n-folder instead.) You'll only need to do this once - it will automatically point\n-to the latest build you've done.\n-\n-Once this is set up, you can use your custom toolchain just like any other. For\n-example, if you've named your toolchain `local`, running `cargo +local build` will\n-compile a project with your custom rustc, setting `rustup override set local` will\n-override the toolchain for your current directory, and `cargo +local doc` will use\n-your custom rustc and rustdoc to generate docs. (If you do this with a `--stage 1`\n-build, you'll need to build rustdoc specially, since it's not normally built in\n-stage 1. `python x.py build --stage 1 src/libstd src/tools/rustdoc` will build\n-rustdoc and libstd, which will allow rustdoc to be run with that toolchain.)\n-\n-### Out-of-tree builds\n-[out-of-tree-builds]: #out-of-tree-builds\n-\n-Rust's `x.py` script fully supports out-of-tree builds - it looks for\n-the Rust source code from the directory `x.py` was found in, but it\n-reads the `config.toml` configuration file from the directory it's\n-run in, and places all build artifacts within a subdirectory named `build`.\n-\n-This means that if you want to do an out-of-tree build, you can just do it:\n-```\n-$ cd my/build/dir\n-$ cp ~/my-config.toml config.toml # Or fill in config.toml otherwise\n-$ path/to/rust/x.py build\n-...\n-$ # This will use the Rust source code in `path/to/rust`, but build\n-$ # artifacts will now be in ./build\n-```\n-\n-It's absolutely fine to have multiple build directories with different\n-`config.toml` configurations using the same code.\n+[rustcguidebuild]: https://rust-lang.github.io/rustc-guide/how-to-build-and-run.html\n \n ## Pull Requests\n [pull-requests]: #pull-requests\n@@ -320,26 +119,13 @@ bring those changes into the source repository.\n \n Please make pull requests against the `master` branch.\n \n-Compiling all of `./x.py test` can take a while. When testing your pull request,\n-consider using one of the more specialized `./x.py` targets to cut down on the\n-amount of time you have to wait. You need to have built the compiler at least\n-once before running these will work, but that\u2019s only one full build rather than\n-one each time.\n-\n-    $ python x.py test --stage 1\n-\n-is one such example, which builds just `rustc`, and then runs the tests. If\n-you\u2019re adding something to the standard library, try\n-\n-    $ python x.py test src/libstd --stage 1\n-\n Please make sure your pull request is in compliance with Rust's style\n guidelines by running\n \n     $ python x.py test src/tools/tidy\n \n Make this check before every pull request (and every new commit in a pull\n-request) ; you can add [git hooks](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)\n+request); you can add [git hooks](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)\n before every push to make sure you never forget to make this check.\n \n All pull requests are reviewed by another person. We have a bot,\n@@ -532,6 +318,12 @@ to check small fixes. For example, `rustdoc src/doc/reference.md` will render\n reference to `doc/reference.html`. The CSS might be messed up, but you can\n verify that the HTML is right.\n \n+Additionally, contributions to the [rustc-guide] are always welcome. Contributions\n+can be made directly at [the\n+rust-lang/rustc-guide](https://github.com/rust-lang/rustc-guide) repo. The issue\n+tracker in that repo is also a great way to find things that need doing. There\n+are issues for beginners and advanced compiler devs alike!\n+\n ## Issue Triage\n [issue-triage]: #issue-triage\n \n@@ -627,7 +419,7 @@ For people new to Rust, and just starting to contribute, or even for\n more seasoned developers, some useful places to look for information\n are:\n \n-* The [rustc guide] contains information about how various parts of the compiler work\n+* The [rustc guide] contains information about how various parts of the compiler work and how to contribute to the compiler\n * [Rust Forge][rustforge] contains additional documentation, including write-ups of how to achieve common tasks\n * The [Rust Internals forum][rif], a place to ask questions and\n   discuss Rust's internals"}, {"sha": "514e420ca457cab879d3daae5746caf370dcdd4f", "filename": "README.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -13,9 +13,13 @@ Read [\"Installation\"] from [The Book].\n [\"Installation\"]: https://doc.rust-lang.org/book/ch01-01-installation.html\n [The Book]: https://doc.rust-lang.org/book/index.html\n \n-## Building from Source\n+## Installing from Source\n [building-from-source]: #building-from-source\n \n+_Note: If you wish to contribute to the compiler, you should read\n+[this chapter](https://rust-lang.github.io/rustc-guide/how-to-build-and-run.html)\n+of the rustc-guide instead._\n+\n ### Building on *nix\n 1. Make sure you have installed the dependencies:\n "}, {"sha": "4cfebaa8b5be708b45e98b4baa91dba45993b644", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -586,6 +586,7 @@ define_dep_nodes!( <'tcx>\n     [] CheckImplItemWellFormed(DefId),\n     [] ReachableNonGenerics(CrateNum),\n     [] NativeLibraries(CrateNum),\n+    [] EntryFn(CrateNum),\n     [] PluginRegistrarFn(CrateNum),\n     [] ProcMacroDeclsStatic(CrateNum),\n     [input] CrateDisambiguator(CrateNum),\n@@ -633,6 +634,7 @@ define_dep_nodes!( <'tcx>\n     [input] Freevars(DefId),\n     [input] MaybeUnusedTraitImport(DefId),\n     [input] MaybeUnusedExternCrates,\n+    [input] NamesImportedByGlobUse(DefId),\n     [eval_always] StabilityIndex,\n     [eval_always] AllTraits,\n     [input] AllCrateNums,"}, {"sha": "a9e80ddf4ba2a47d1e0f49512c19ee46ddebc2fd", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -638,7 +638,7 @@ impl DepGraph {\n                             DepKind::Hir |\n                             DepKind::HirBody |\n                             DepKind::CrateMetadata => {\n-                                if dep_node.extract_def_id(tcx).is_none() {\n+                                if dep_dep_node.extract_def_id(tcx).is_none() {\n                                     // If the node does not exist anymore, we\n                                     // just fail to mark green.\n                                     return None"}, {"sha": "041291e80eee989d0aa804cdf94a5048187057b6", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 57, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -35,11 +35,9 @@ use syntax::ast::{NodeId, CRATE_NODE_ID, Ident, Name, Attribute};\n use syntax_pos::Span;\n use hir::*;\n use hir::def::Def;\n-use hir::map::{self, Map};\n+use hir::map::Map;\n use super::itemlikevisit::DeepVisitor;\n \n-use std::cmp;\n-\n #[derive(Copy, Clone)]\n pub enum FnKind<'a> {\n     /// `#[xxx] pub async/const/extern \"Abi\" fn foo()`\n@@ -1133,57 +1131,3 @@ pub fn walk_defaultness<'v, V: Visitor<'v>>(_: &mut V, _: &'v Defaultness) {\n     // the right thing to do, should content be added in the future,\n     // would be to walk it.\n }\n-\n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct IdRange {\n-    pub min: NodeId,\n-    pub max: NodeId,\n-}\n-\n-impl IdRange {\n-    pub fn max() -> IdRange {\n-        IdRange {\n-            min: NodeId::MAX,\n-            max: NodeId::from_u32(0),\n-        }\n-    }\n-\n-    pub fn empty(&self) -> bool {\n-        self.min >= self.max\n-    }\n-\n-    pub fn contains(&self, id: NodeId) -> bool {\n-        id >= self.min && id < self.max\n-    }\n-\n-    pub fn add(&mut self, id: NodeId) {\n-        self.min = cmp::min(self.min, id);\n-        self.max = cmp::max(self.max, NodeId::from_u32(id.as_u32() + 1));\n-    }\n-}\n-\n-\n-pub struct IdRangeComputingVisitor<'a, 'hir: 'a> {\n-    result: IdRange,\n-    map: &'a map::Map<'hir>,\n-}\n-\n-impl<'a, 'hir> IdRangeComputingVisitor<'a, 'hir> {\n-    pub fn new(map: &'a map::Map<'hir>) -> IdRangeComputingVisitor<'a, 'hir> {\n-        IdRangeComputingVisitor { result: IdRange::max(), map: map }\n-    }\n-\n-    pub fn result(&self) -> IdRange {\n-        self.result\n-    }\n-}\n-\n-impl<'a, 'hir> Visitor<'hir> for IdRangeComputingVisitor<'a, 'hir> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'hir> {\n-        NestedVisitorMap::OnlyBodies(&self.map)\n-    }\n-\n-    fn visit_id(&mut self, id: NodeId) {\n-        self.result.add(id);\n-    }\n-}"}, {"sha": "a0bd4f01cd231d664527304fd2e190c2719ec5fd", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -368,6 +368,12 @@ declare_lint! {\n     report_in_external_macro: true\n }\n \n+declare_lint! {\n+    pub AMBIGUOUS_ASSOCIATED_ITEMS,\n+    Warn,\n+    \"ambiguous associated items\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// that are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -433,6 +439,7 @@ impl LintPass for HardwiredLints {\n             parser::QUESTION_MARK_MACRO_SEP,\n             parser::ILL_FORMED_ATTRIBUTE_INPUT,\n             DEPRECATED_IN_FUTURE,\n+            AMBIGUOUS_ASSOCIATED_ITEMS,\n         )\n     }\n }"}, {"sha": "abbf0ae210c25c6635e7472429df15ceeb9c6240", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -409,7 +409,7 @@ fn create_and_seed_worklist<'a, 'tcx>(\n         }\n     }).chain(\n         // Seed entry point\n-        tcx.sess.entry_fn.borrow().map(|(id, _, _)| id)\n+        tcx.entry_fn(LOCAL_CRATE).map(|(def_id, _)| tcx.hir().as_local_node_id(def_id).unwrap())\n     ).collect::<Vec<_>>();\n \n     // Seed implemented trait items"}, {"sha": "218ca3b7553c06a496df5ec90cae01cfe7c07c40", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 46, "deletions": 31, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -1,5 +1,5 @@\n use hir::map as hir_map;\n-use hir::def_id::{CRATE_DEF_INDEX};\n+use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use session::{config, Session};\n use session::config::EntryFnType;\n use syntax::ast::NodeId;\n@@ -8,6 +8,8 @@ use syntax::entry::EntryPointType;\n use syntax_pos::Span;\n use hir::{Item, ItemKind, ImplItem, TraitItem};\n use hir::itemlikevisit::ItemLikeVisitor;\n+use ty::TyCtxt;\n+use ty::query::Providers;\n \n struct EntryContext<'a, 'tcx: 'a> {\n     session: &'a Session,\n@@ -45,36 +47,34 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n     }\n }\n \n-pub fn find_entry_point(session: &Session,\n-                        hir_map: &hir_map::Map<'_>,\n-                        crate_name: &str) {\n-    let any_exe = session.crate_types.borrow().iter().any(|ty| {\n+fn entry_fn(tcx: TyCtxt<'_, '_, '_>, cnum: CrateNum) -> Option<(DefId, EntryFnType)> {\n+    assert_eq!(cnum, LOCAL_CRATE);\n+\n+    let any_exe = tcx.sess.crate_types.borrow().iter().any(|ty| {\n         *ty == config::CrateType::Executable\n     });\n     if !any_exe {\n         // No need to find a main function\n-        session.entry_fn.set(None);\n-        return\n+        return None;\n     }\n \n     // If the user wants no main function at all, then stop here.\n-    if attr::contains_name(&hir_map.krate().attrs, \"no_main\") {\n-        session.entry_fn.set(None);\n-        return\n+    if attr::contains_name(&tcx.hir().krate().attrs, \"no_main\") {\n+        return None;\n     }\n \n     let mut ctxt = EntryContext {\n-        session,\n-        map: hir_map,\n+        session: tcx.sess,\n+        map: tcx.hir(),\n         main_fn: None,\n         attr_main_fn: None,\n         start_fn: None,\n         non_main_fns: Vec::new(),\n     };\n \n-    hir_map.krate().visit_all_item_likes(&mut ctxt);\n+    tcx.hir().krate().visit_all_item_likes(&mut ctxt);\n \n-    configure_main(&mut ctxt, crate_name);\n+    configure_main(tcx, &ctxt)\n }\n \n // Beware, this is duplicated in `libsyntax/entry.rs`, so make sure to keep\n@@ -135,43 +135,58 @@ fn find_item(item: &Item, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n                     .span_label(item.span, \"multiple `start` functions\")\n                     .emit();\n             }\n-        },\n-        EntryPointType::None => ()\n+        }\n+        EntryPointType::None => (),\n     }\n }\n \n-fn configure_main(this: &mut EntryContext<'_, '_>, crate_name: &str) {\n-    if let Some((node_id, span)) = this.start_fn {\n-        this.session.entry_fn.set(Some((node_id, span, EntryFnType::Start)));\n-    } else if let Some((node_id, span)) = this.attr_main_fn {\n-        this.session.entry_fn.set(Some((node_id, span, EntryFnType::Main)));\n-    } else if let Some((node_id, span)) = this.main_fn {\n-        this.session.entry_fn.set(Some((node_id, span, EntryFnType::Main)));\n+fn configure_main(\n+    tcx: TyCtxt<'_, '_, '_>,\n+    visitor: &EntryContext<'_, '_>,\n+) -> Option<(DefId, EntryFnType)> {\n+    if let Some((node_id, _)) = visitor.start_fn {\n+        Some((tcx.hir().local_def_id(node_id), EntryFnType::Start))\n+    } else if let Some((node_id, _)) = visitor.attr_main_fn {\n+        Some((tcx.hir().local_def_id(node_id), EntryFnType::Main))\n+    } else if let Some((node_id, _)) = visitor.main_fn {\n+        Some((tcx.hir().local_def_id(node_id), EntryFnType::Main))\n     } else {\n         // No main function\n-        this.session.entry_fn.set(None);\n-        let mut err = struct_err!(this.session, E0601,\n-            \"`main` function not found in crate `{}`\", crate_name);\n-        if !this.non_main_fns.is_empty() {\n+        let mut err = struct_err!(tcx.sess, E0601,\n+            \"`main` function not found in crate `{}`\", tcx.crate_name(LOCAL_CRATE));\n+        if !visitor.non_main_fns.is_empty() {\n             // There were some functions named 'main' though. Try to give the user a hint.\n             err.note(\"the main function must be defined at the crate level \\\n                       but you have one or more functions named 'main' that are not \\\n                       defined at the crate level. Either move the definition or \\\n                       attach the `#[main]` attribute to override this behavior.\");\n-            for &(_, span) in &this.non_main_fns {\n+            for &(_, span) in &visitor.non_main_fns {\n                 err.span_note(span, \"here is a function named 'main'\");\n             }\n             err.emit();\n-            this.session.abort_if_errors();\n+            tcx.sess.abort_if_errors();\n         } else {\n-            if let Some(ref filename) = this.session.local_crate_source_file {\n+            if let Some(ref filename) = tcx.sess.local_crate_source_file {\n                 err.note(&format!(\"consider adding a `main` function to `{}`\", filename.display()));\n             }\n-            if this.session.teach(&err.get_code().unwrap()) {\n+            if tcx.sess.teach(&err.get_code().unwrap()) {\n                 err.note(\"If you don't know the basics of Rust, you can go look to the Rust Book \\\n                           to get started: https://doc.rust-lang.org/book/\");\n             }\n             err.emit();\n         }\n+\n+        None\n     }\n }\n+\n+pub fn find_entry_point(tcx: TyCtxt<'_, '_, '_>) -> Option<(DefId, EntryFnType)> {\n+    tcx.entry_fn(LOCAL_CRATE)\n+}\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    *providers = Providers {\n+        entry_fn,\n+        ..*providers\n+    };\n+}"}, {"sha": "0f14049ef2cca36748255e8de01d850a9b070fe5", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -6,7 +6,7 @@ use std::str::FromStr;\n use session::{early_error, early_warn, Session};\n use session::search_paths::SearchPath;\n \n-use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n+use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n use rustc_target::spec::{Target, TargetTriple};\n use lint;\n use middle::cstore;\n@@ -649,15 +649,15 @@ impl Options {\n     }\n }\n \n-// The type of entry function, so\n-// users can have their own entry\n-// functions\n-#[derive(Copy, Clone, PartialEq)]\n+// The type of entry function, so users can have their own entry functions\n+#[derive(Copy, Clone, PartialEq, Hash, Debug)]\n pub enum EntryFnType {\n     Main,\n     Start,\n }\n \n+impl_stable_hash_via_hash!(EntryFnType);\n+\n #[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug)]\n pub enum CrateType {\n     Executable,\n@@ -808,13 +808,16 @@ macro_rules! options {\n         pub const parse_cross_lang_lto: Option<&str> =\n             Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), \\\n                   or the path to the linker plugin\");\n+        pub const parse_merge_functions: Option<&str> =\n+            Some(\"one of: `disabled`, `trampolines`, or `aliases`\");\n     }\n \n     #[allow(dead_code)]\n     mod $mod_set {\n         use super::{$struct_name, Passes, Sanitizer, LtoCli, CrossLangLto};\n-        use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n+        use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n+        use std::str::FromStr;\n \n         $(\n             pub fn $opt(cg: &mut $struct_name, v: Option<&str>) -> bool {\n@@ -1046,6 +1049,14 @@ macro_rules! options {\n             };\n             true\n         }\n+\n+        fn parse_merge_functions(slot: &mut Option<MergeFunctions>, v: Option<&str>) -> bool {\n+            match v.and_then(|s| MergeFunctions::from_str(s).ok()) {\n+                Some(mergefunc) => *slot = Some(mergefunc),\n+                _ => return false,\n+            }\n+            true\n+        }\n     }\n ) }\n \n@@ -1376,6 +1387,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"whether to use the PLT when calling into shared libraries;\n           only has effect for PIC code on systems with ELF binaries\n           (default: PLT is disabled if full relro is enabled)\"),\n+    merge_functions: Option<MergeFunctions> = (None, parse_merge_functions, [TRACKED],\n+        \"control the operation of the MergeFunctions LLVM pass, taking\n+         the same values as the target option of the same name\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -2394,7 +2408,7 @@ mod dep_tracking {\n     use super::{CrateType, DebugInfo, ErrorOutputType, OptLevel, OutputTypes,\n                 Passes, Sanitizer, LtoCli, CrossLangLto};\n     use syntax::feature_gate::UnstableFeatures;\n-    use rustc_target::spec::{PanicStrategy, RelroLevel, TargetTriple};\n+    use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel, TargetTriple};\n     use syntax::edition::Edition;\n \n     pub trait DepTrackingHash {\n@@ -2437,12 +2451,14 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<usize>);\n     impl_dep_tracking_hash_via_hash!(Option<String>);\n     impl_dep_tracking_hash_via_hash!(Option<(String, u64)>);\n+    impl_dep_tracking_hash_via_hash!(Option<MergeFunctions>);\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n     impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);\n     impl_dep_tracking_hash_via_hash!(Option<PathBuf>);\n     impl_dep_tracking_hash_via_hash!(Option<cstore::NativeLibraryKind>);\n     impl_dep_tracking_hash_via_hash!(CrateType);\n+    impl_dep_tracking_hash_via_hash!(MergeFunctions);\n     impl_dep_tracking_hash_via_hash!(PanicStrategy);\n     impl_dep_tracking_hash_via_hash!(RelroLevel);\n     impl_dep_tracking_hash_via_hash!(Passes);\n@@ -2528,7 +2544,7 @@ mod tests {\n     use std::iter::FromIterator;\n     use std::path::PathBuf;\n     use super::{Externs, OutputType, OutputTypes};\n-    use rustc_target::spec::{PanicStrategy, RelroLevel};\n+    use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel};\n     use syntax::symbol::Symbol;\n     use syntax::edition::{Edition, DEFAULT_EDITION};\n     use syntax;\n@@ -3183,6 +3199,10 @@ mod tests {\n         opts = reference.clone();\n         opts.debugging_opts.cross_lang_lto = CrossLangLto::LinkerPluginAuto;\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+        opts = reference.clone();\n+        opts.debugging_opts.merge_functions = Some(MergeFunctions::Disabled);\n+        assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n     }\n \n     #[test]"}, {"sha": "cf00bf330deea36cc7d98ea3ac11d76c10f2be14", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -67,8 +67,6 @@ pub struct Session {\n     /// This is `None` if the host and target are the same.\n     pub target_tlib_path: Option<SearchPath>,\n     pub parse_sess: ParseSess,\n-    /// For a library crate, this is always none\n-    pub entry_fn: Once<Option<(NodeId, Span, config::EntryFnType)>>,\n     pub sysroot: PathBuf,\n     /// The name of the root source file of the crate, in the local file system.\n     /// `None` means that there is no source file.\n@@ -1173,8 +1171,6 @@ pub fn build_session_(\n         host_tlib_path,\n         target_tlib_path,\n         parse_sess: p_s,\n-        // For a library crate, this is always none\n-        entry_fn: Once::new(),\n         sysroot,\n         local_crate_source_file,\n         working_dir,"}, {"sha": "e37eab622df3f062e79e48783f064dc38c527868", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -983,6 +983,9 @@ pub struct GlobalCtxt<'tcx> {\n \n     maybe_unused_trait_imports: FxHashSet<DefId>,\n     maybe_unused_extern_crates: Vec<(DefId, Span)>,\n+    /// A map of glob use to a set of names it actually imports. Currently only\n+    /// used in save-analysis.\n+    glob_map: FxHashMap<DefId, FxHashSet<ast::Name>>,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in.\n     pub extern_prelude: FxHashMap<ast::Name, bool>,\n@@ -1232,6 +1235,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     .into_iter()\n                     .map(|(id, sp)| (hir.local_def_id(id), sp))\n                     .collect(),\n+            glob_map: resolutions.glob_map.into_iter().map(|(id, names)| {\n+                (hir.local_def_id(id), names)\n+            }).collect(),\n             extern_prelude: resolutions.extern_prelude,\n             hir_map: hir,\n             def_path_hash_to_def_id,\n@@ -2972,6 +2978,10 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         assert_eq!(cnum, LOCAL_CRATE);\n         Lrc::new(tcx.maybe_unused_extern_crates.clone())\n     };\n+    providers.names_imported_by_glob_use = |tcx, id| {\n+        assert_eq!(id.krate, LOCAL_CRATE);\n+        Lrc::new(tcx.glob_map.get(&id).cloned().unwrap_or_default())\n+    };\n \n     providers.stability_index = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "f1b36e8def88bc3e94c0c4958395556cf57a8416", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -4,7 +4,7 @@ pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n pub use self::fold::TypeFoldable;\n \n-use hir::{map as hir_map, FreevarMap, TraitMap};\n+use hir::{map as hir_map, FreevarMap, GlobMap, TraitMap};\n use hir::Node;\n use hir::def::{Def, CtorKind, ExportMap};\n use hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -115,23 +115,14 @@ mod sty;\n \n // Data types\n \n-/// The complete set of all analyses described in this module. This is\n-/// produced by the driver and fed to codegen and later passes.\n-///\n-/// N.B., these contents are being migrated into queries using the\n-/// *on-demand* infrastructure.\n-#[derive(Clone)]\n-pub struct CrateAnalysis {\n-    pub glob_map: hir::GlobMap,\n-}\n-\n #[derive(Clone)]\n pub struct Resolutions {\n     pub freevars: FreevarMap,\n     pub trait_map: TraitMap,\n     pub maybe_unused_trait_imports: NodeSet,\n     pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n     pub export_map: ExportMap,\n+    pub glob_map: GlobMap,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in.\n     pub extern_prelude: FxHashMap<Name, bool>,"}, {"sha": "ae41ca0cbb54f6482a008b9b082fcd309265d750", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -656,6 +656,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::foreign_modules<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::entry_fn<'tcx> {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"looking up the entry function of a crate\".into()\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::plugin_registrar_fn<'tcx> {\n     fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n         \"looking up the plugin registrar for a crate\".into()"}, {"sha": "10f35719cc80c19fd40559a8224293caa359963e", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -22,7 +22,7 @@ use mir::mono::CodegenUnit;\n use mir;\n use mir::interpret::GlobalId;\n use session::{CompileResult, CrateDisambiguator};\n-use session::config::OutputFilenames;\n+use session::config::{EntryFnType, OutputFilenames};\n use traits::{self, Vtable};\n use traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal,\n@@ -482,6 +482,9 @@ define_queries! { <'tcx>\n \n         [] fn foreign_modules: ForeignModules(CrateNum) -> Lrc<Vec<ForeignModule>>,\n \n+        /// Identifies the entry-point (e.g. the `main` function) for a given\n+        /// crate, returning `None` if there is no entry point (such as for library crates).\n+        [] fn entry_fn: EntryFn(CrateNum) -> Option<(DefId, EntryFnType)>,\n         [] fn plugin_registrar_fn: PluginRegistrarFn(CrateNum) -> Option<DefId>,\n         [] fn proc_macro_decls_static: ProcMacroDeclsStatic(CrateNum) -> Option<DefId>,\n         [] fn crate_disambiguator: CrateDisambiguator(CrateNum) -> CrateDisambiguator,\n@@ -547,6 +550,8 @@ define_queries! { <'tcx>\n         [] fn maybe_unused_trait_import: MaybeUnusedTraitImport(DefId) -> bool,\n         [] fn maybe_unused_extern_crates: maybe_unused_extern_crates_node(CrateNum)\n             -> Lrc<Vec<(DefId, Span)>>,\n+        [] fn names_imported_by_glob_use: NamesImportedByGlobUse(DefId)\n+            -> Lrc<FxHashSet<ast::Name>>,\n \n         [] fn stability_index: stability_index_node(CrateNum) -> Lrc<stability::Index<'tcx>>,\n         [] fn all_crate_nums: all_crate_nums_node(CrateNum) -> Lrc<Vec<CrateNum>>,"}, {"sha": "1cc9bbd22b0d6e3a993826885b9a6d2f6cdba7f2", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -1332,6 +1332,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::CheckImplItemWellFormed => { force!(check_impl_item_well_formed, def_id!()); }\n         DepKind::ReachableNonGenerics => { force!(reachable_non_generics, krate!()); }\n         DepKind::NativeLibraries => { force!(native_libraries, krate!()); }\n+        DepKind::EntryFn => { force!(entry_fn, krate!()); }\n         DepKind::PluginRegistrarFn => { force!(plugin_registrar_fn, krate!()); }\n         DepKind::ProcMacroDeclsStatic => { force!(proc_macro_decls_static, krate!()); }\n         DepKind::CrateDisambiguator => { force!(crate_disambiguator, krate!()); }\n@@ -1383,6 +1384,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::MaybeUnusedTraitImport => {\n             force!(maybe_unused_trait_import, def_id!());\n         }\n+        DepKind::NamesImportedByGlobUse => { force!(names_imported_by_glob_use, def_id!()); }\n         DepKind::MaybeUnusedExternCrates => { force!(maybe_unused_extern_crates, LOCAL_CRATE); }\n         DepKind::StabilityIndex => { force!(stability_index, LOCAL_CRATE); }\n         DepKind::AllTraits => { force!(all_traits, LOCAL_CRATE); }"}, {"sha": "72963cb7e7fb4e76a99d34dd59ce70f4f5b0d4f6", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -39,7 +39,6 @@ use syntax_pos::{MultiSpan, Span};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n \n use rustc::hir;\n-use rustc::hir::intravisit::{self, Visitor};\n \n use dataflow::{DataFlowContext, BitwiseOperator, DataFlowOperator, KillFrom};\n \n@@ -157,12 +156,6 @@ fn build_borrowck_dataflow_data<'a, 'c, 'tcx, F>(this: &mut BorrowckCtxt<'a, 'tc\n     where F: FnOnce(&mut BorrowckCtxt<'a, 'tcx>) -> &'c cfg::CFG\n {\n     // Check the body of fn items.\n-    let tcx = this.tcx;\n-    let id_range = {\n-        let mut visitor = intravisit::IdRangeComputingVisitor::new(&tcx.hir());\n-        visitor.visit_body(this.body);\n-        visitor.result()\n-    };\n     let (all_loans, move_data) =\n         gather_loans::gather_loans_in_fn(this, body_id);\n \n@@ -184,7 +177,6 @@ fn build_borrowck_dataflow_data<'a, 'c, 'tcx, F>(this: &mut BorrowckCtxt<'a, 'tc\n                              Some(this.body),\n                              cfg,\n                              LoanDataFlowOperator,\n-                             id_range,\n                              all_loans.len());\n     for (loan_idx, loan) in all_loans.iter().enumerate() {\n         loan_dfcx.add_gen(loan.gen_scope.item_local_id(), loan_idx);\n@@ -198,7 +190,6 @@ fn build_borrowck_dataflow_data<'a, 'c, 'tcx, F>(this: &mut BorrowckCtxt<'a, 'tc\n     let flowed_moves = move_data::FlowedMoveData::new(move_data,\n                                                       this,\n                                                       cfg,\n-                                                      id_range,\n                                                       this.body);\n \n     Some(AnalysisData { all_loans,"}, {"sha": "56c9f928eb03a30885a1521b8f5fdf0cabdc1de6", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -15,7 +15,6 @@ use std::rc::Rc;\n use std::usize;\n use syntax_pos::Span;\n use rustc::hir;\n-use rustc::hir::intravisit::IdRange;\n \n #[derive(Default)]\n pub struct MoveData<'tcx> {\n@@ -559,7 +558,6 @@ impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> {\n     pub fn new(move_data: MoveData<'tcx>,\n                bccx: &BorrowckCtxt<'a, 'tcx>,\n                cfg: &cfg::CFG,\n-               id_range: IdRange,\n                body: &hir::Body)\n                -> FlowedMoveData<'a, 'tcx> {\n         let tcx = bccx.tcx;\n@@ -570,15 +568,13 @@ impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> {\n                                  Some(body),\n                                  cfg,\n                                  MoveDataFlowOperator,\n-                                 id_range,\n                                  move_data.moves.borrow().len());\n         let mut dfcx_assign =\n             DataFlowContext::new(tcx,\n                                  \"flowed_move_data_assigns\",\n                                  Some(body),\n                                  cfg,\n                                  AssignDataFlowOperator,\n-                                 id_range,\n                                  move_data.var_assignments.borrow().len());\n \n         move_data.add_gen_kills(bccx,"}, {"sha": "8cf620567405c374b203eb5a9be56dd9a1c49e39", "filename": "src/librustc_borrowck/dataflow.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_borrowck%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_borrowck%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdataflow.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -15,7 +15,7 @@ use rustc_data_structures::graph::implementation::OUTGOING;\n \n use rustc::util::nodemap::FxHashMap;\n use rustc::hir;\n-use rustc::hir::intravisit::{self, IdRange};\n+use rustc::hir::intravisit;\n use rustc::hir::print as pprust;\n \n \n@@ -230,16 +230,15 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n                body: Option<&hir::Body>,\n                cfg: &cfg::CFG,\n                oper: O,\n-               id_range: IdRange,\n                bits_per_id: usize) -> DataFlowContext<'a, 'tcx, O> {\n         let usize_bits = mem::size_of::<usize>() * 8;\n         let words_per_id = (bits_per_id + usize_bits - 1) / usize_bits;\n         let num_nodes = cfg.graph.all_nodes().len();\n \n-        debug!(\"DataFlowContext::new(analysis_name: {}, id_range={:?}, \\\n+        debug!(\"DataFlowContext::new(analysis_name: {}, \\\n                                      bits_per_id={}, words_per_id={}) \\\n                                      num_nodes: {}\",\n-               analysis_name, id_range, bits_per_id, words_per_id,\n+               analysis_name, bits_per_id, words_per_id,\n                num_nodes);\n \n         let entry = if oper.initial_value() { usize::MAX } else {0};"}, {"sha": "b504aa515fd4442753789c28b8291649f9574e7f", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -14,7 +14,7 @@ use llvm;\n use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilder, DISubprogram, DIArray, DIFlags,\n     DILexicalBlock};\n use rustc::hir::CodegenFnAttrFlags;\n-use rustc::hir::def_id::{DefId, CrateNum};\n+use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use rustc::ty::subst::{Substs, UnpackedKind};\n \n use abi::Abi;\n@@ -290,9 +290,8 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n         let mut flags = DIFlags::FlagPrototyped;\n \n-        let local_id = self.tcx().hir().as_local_node_id(def_id);\n-        if let Some((id, _, _)) = *self.sess().entry_fn.borrow() {\n-            if local_id == Some(id) {\n+        if let Some((id, _)) = self.tcx.entry_fn(LOCAL_CRATE) {\n+            if id == def_id {\n                 flags |= DIFlags::FlagMainSubprogram;\n             }\n         }"}, {"sha": "dc70ebcf943a503420074a724e375e5f070411e3", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -3,6 +3,7 @@ use back::write::create_target_machine;\n use llvm;\n use rustc::session::Session;\n use rustc::session::config::PrintRequest;\n+use rustc_target::spec::MergeFunctions;\n use libc::c_int;\n use std::ffi::CString;\n use syntax::feature_gate::UnstableFeatures;\n@@ -61,7 +62,14 @@ unsafe fn configure_llvm(sess: &Session) {\n             add(\"-disable-preinline\");\n         }\n         if llvm::LLVMRustIsRustLLVM() {\n-            add(\"-mergefunc-use-aliases\");\n+            match sess.opts.debugging_opts.merge_functions\n+                  .unwrap_or(sess.target.target.options.merge_functions) {\n+                MergeFunctions::Disabled |\n+                MergeFunctions::Trampolines => {}\n+                MergeFunctions::Aliases => {\n+                    add(\"-mergefunc-use-aliases\");\n+                }\n+            }\n         }\n \n         // HACK(eddyb) LLVM inserts `llvm.assume` calls to preserve align attributes"}, {"sha": "c372892c521bec292cf4c150bdb9604282426aa8", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -194,7 +194,7 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  })\n                                  .collect();\n \n-    if tcx.sess.entry_fn.borrow().is_some() {\n+    if tcx.entry_fn(LOCAL_CRATE).is_some() {\n         let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(\"main\"));\n \n         symbols.push((exported_symbol, SymbolExportLevel::C));"}, {"sha": "39bdc70f8322e876ce713ade1250f12cd1b2f16e", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -24,6 +24,7 @@ use rustc_fs_util::link_or_copy;\n use rustc_data_structures::svh::Svh;\n use rustc_errors::{Handler, Level, DiagnosticBuilder, FatalError, DiagnosticId};\n use rustc_errors::emitter::{Emitter};\n+use rustc_target::spec::MergeFunctions;\n use syntax::attr;\n use syntax::ext::hygiene::Mark;\n use syntax_pos::MultiSpan;\n@@ -152,8 +153,24 @@ impl ModuleConfig {\n                             sess.opts.optimize == config::OptLevel::Aggressive &&\n                             !sess.target.target.options.is_like_emscripten;\n \n-        self.merge_functions = sess.opts.optimize == config::OptLevel::Default ||\n-                               sess.opts.optimize == config::OptLevel::Aggressive;\n+        // Some targets (namely, NVPTX) interact badly with the MergeFunctions\n+        // pass. This is because MergeFunctions can generate new function calls\n+        // which may interfere with the target calling convention; e.g. for the\n+        // NVPTX target, PTX kernels should not call other PTX kernels.\n+        // MergeFunctions can also be configured to generate aliases instead,\n+        // but aliases are not supported by some backends (again, NVPTX).\n+        // Therefore, allow targets to opt out of the MergeFunctions pass,\n+        // but otherwise keep the pass enabled (at O2 and O3) since it can be\n+        // useful for reducing code size.\n+        self.merge_functions = match sess.opts.debugging_opts.merge_functions\n+                                     .unwrap_or(sess.target.target.options.merge_functions) {\n+            MergeFunctions::Disabled => false,\n+            MergeFunctions::Trampolines |\n+            MergeFunctions::Aliases => {\n+                sess.opts.optimize == config::OptLevel::Default ||\n+                sess.opts.optimize == config::OptLevel::Aggressive\n+            }\n+        };\n     }\n \n     pub fn bitcode_needed(&self) -> bool {"}, {"sha": "38caacba4d0692c4ae99126da14d1f44145f0a00", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -441,10 +441,8 @@ pub fn codegen_instance<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     cx: &'a Bx::CodegenCx\n ) {\n-    let (main_def_id, span) = match *cx.sess().entry_fn.borrow() {\n-        Some((id, span, _)) => {\n-            (cx.tcx().hir().local_def_id(id), span)\n-        }\n+    let (main_def_id, span) = match cx.tcx().entry_fn(LOCAL_CRATE) {\n+        Some((def_id, _)) => { (def_id, cx.tcx().def_span(def_id)) },\n         None => return,\n     };\n \n@@ -458,7 +456,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n \n     let main_llfn = cx.get_fn(instance);\n \n-    let et = cx.sess().entry_fn.get().map(|e| e.2);\n+    let et = cx.tcx().entry_fn(LOCAL_CRATE).map(|e| e.1);\n     match et {\n         Some(EntryFnType::Main) => create_entry_fn::<Bx>(cx, span, main_llfn, main_def_id, true),\n         Some(EntryFnType::Start) => create_entry_fn::<Bx>(cx, span, main_llfn, main_def_id, false),"}, {"sha": "5f61852178d0f0c8e9d836b5088e4777727e475c", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -31,6 +31,7 @@ extern crate syntax_pos;\n #[macro_use] extern crate rustc_data_structures;\n \n use rustc::ty::TyCtxt;\n+use rustc::hir::def_id::LOCAL_CRATE;\n \n pub mod link;\n pub mod codegen_backend;\n@@ -42,11 +43,9 @@ pub mod symbol_names_test;\n /// that actually test that compilation succeeds without\n /// reporting an error.\n pub fn check_for_rustc_errors_attr(tcx: TyCtxt) {\n-    if let Some((id, span, _)) = *tcx.sess.entry_fn.borrow() {\n-        let main_def_id = tcx.hir().local_def_id(id);\n-\n-        if tcx.has_attr(main_def_id, \"rustc_error\") {\n-            tcx.sess.span_fatal(span, \"compilation successful\");\n+    if let Some((def_id, _)) = tcx.entry_fn(LOCAL_CRATE) {\n+        if tcx.has_attr(def_id, \"rustc_error\") {\n+            tcx.sess.span_fatal(tcx.def_span(def_id), \"compilation successful\");\n         }\n     }\n }"}, {"sha": "d23d8b829c0c057c8746a8867c32725015cbfce7", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -168,7 +168,6 @@ pub fn compile_input(\n         let ExpansionResult {\n             expanded_crate,\n             defs,\n-            analysis,\n             resolutions,\n             mut hir_forest,\n         } = {\n@@ -251,7 +250,6 @@ pub fn compile_input(\n                     output,\n                     &cstore,\n                     &hir_map,\n-                    &analysis,\n                     &resolutions,\n                     &expanded_crate,\n                     &hir_map.krate(),\n@@ -277,12 +275,11 @@ pub fn compile_input(\n             sess,\n             cstore,\n             hir_map,\n-            analysis,\n             resolutions,\n             &mut arenas,\n             &crate_name,\n             &outputs,\n-            |tcx, analysis, rx, result| {\n+            |tcx, rx, result| {\n                 {\n                     // Eventually, we will want to track plugins.\n                     tcx.dep_graph.with_ignore(|| {\n@@ -293,7 +290,6 @@ pub fn compile_input(\n                             output,\n                             opt_crate,\n                             tcx.hir().krate(),\n-                            &analysis,\n                             tcx,\n                             &crate_name,\n                         );\n@@ -527,7 +523,6 @@ pub struct CompileState<'a, 'tcx: 'a> {\n     pub hir_crate: Option<&'a hir::Crate>,\n     pub hir_map: Option<&'a hir_map::Map<'tcx>>,\n     pub resolutions: Option<&'a Resolutions>,\n-    pub analysis: Option<&'a ty::CrateAnalysis>,\n     pub tcx: Option<TyCtxt<'a, 'tcx, 'tcx>>,\n }\n \n@@ -547,7 +542,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n             hir_crate: None,\n             hir_map: None,\n             resolutions: None,\n-            analysis: None,\n             tcx: None,\n         }\n     }\n@@ -595,7 +589,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n         out_file: &'a Option<PathBuf>,\n         cstore: &'tcx CStore,\n         hir_map: &'a hir_map::Map<'tcx>,\n-        analysis: &'a ty::CrateAnalysis,\n         resolutions: &'a Resolutions,\n         krate: &'a ast::Crate,\n         hir_crate: &'a hir::Crate,\n@@ -606,7 +599,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n             crate_name: Some(crate_name),\n             cstore: Some(cstore),\n             hir_map: Some(hir_map),\n-            analysis: Some(analysis),\n             resolutions: Some(resolutions),\n             expanded_crate: Some(krate),\n             hir_crate: Some(hir_crate),\n@@ -623,12 +615,10 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n         out_file: &'a Option<PathBuf>,\n         krate: Option<&'a ast::Crate>,\n         hir_crate: &'a hir::Crate,\n-        analysis: &'a ty::CrateAnalysis,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         crate_name: &'a str,\n     ) -> Self {\n         CompileState {\n-            analysis: Some(analysis),\n             tcx: Some(tcx),\n             expanded_crate: krate,\n             hir_crate: Some(hir_crate),\n@@ -711,7 +701,6 @@ fn count_nodes(krate: &ast::Crate) -> usize {\n pub struct ExpansionResult {\n     pub expanded_crate: ast::Crate,\n     pub defs: hir_map::Definitions,\n-    pub analysis: ty::CrateAnalysis,\n     pub resolutions: Resolutions,\n     pub hir_forest: hir_map::Forest,\n }\n@@ -772,16 +761,13 @@ where\n                 freevars: resolver.freevars,\n                 export_map: resolver.export_map,\n                 trait_map: resolver.trait_map,\n+                glob_map: resolver.glob_map,\n                 maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n                 maybe_unused_extern_crates: resolver.maybe_unused_extern_crates,\n                 extern_prelude: resolver.extern_prelude.iter().map(|(ident, entry)| {\n                     (ident.name, entry.introduced_by_item)\n                 }).collect(),\n             },\n-\n-            analysis: ty::CrateAnalysis {\n-                glob_map: resolver.glob_map\n-            },\n         }),\n         Err(x) => Err(x),\n     }\n@@ -1165,6 +1151,7 @@ pub fn default_provide(providers: &mut ty::query::Providers) {\n     rustc_passes::provide(providers);\n     rustc_traits::provide(providers);\n     middle::region::provide(providers);\n+    middle::entry::provide(providers);\n     cstore::provide(providers);\n     lint::provide(providers);\n }\n@@ -1182,7 +1169,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(\n     sess: &'tcx Session,\n     cstore: &'tcx CStore,\n     hir_map: hir_map::Map<'tcx>,\n-    analysis: ty::CrateAnalysis,\n     resolutions: Resolutions,\n     arenas: &'tcx mut AllArenas<'tcx>,\n     name: &str,\n@@ -1192,7 +1178,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(\n where\n     F: for<'a> FnOnce(\n         TyCtxt<'a, 'tcx, 'tcx>,\n-        ty::CrateAnalysis,\n         mpsc::Receiver<Box<dyn Any + Send>>,\n         CompileResult,\n     ) -> R,\n@@ -1201,10 +1186,6 @@ where\n         rustc_incremental::load_query_result_cache(sess)\n     });\n \n-    time(sess, \"looking for entry point\", || {\n-        middle::entry::find_entry_point(sess, &hir_map, name)\n-    });\n-\n     let mut local_providers = ty::query::Providers::default();\n     default_provide(&mut local_providers);\n     codegen_backend.provide(&mut local_providers);\n@@ -1234,6 +1215,10 @@ where\n             // tcx available.\n             time(sess, \"dep graph tcx init\", || rustc_incremental::dep_graph_tcx_init(tcx));\n \n+            time(sess, \"looking for entry point\", || {\n+                middle::entry::find_entry_point(tcx)\n+            });\n+\n             time(sess, \"looking for plugin registrar\", || {\n                 plugin::build::find_plugin_registrar(tcx)\n             });\n@@ -1256,7 +1241,7 @@ where\n             match typeck::check_crate(tcx) {\n                 Ok(x) => x,\n                 Err(x) => {\n-                    f(tcx, analysis, rx, Err(x));\n+                    f(tcx, rx, Err(x));\n                     return Err(x);\n                 }\n             }\n@@ -1309,7 +1294,7 @@ where\n             // lint warnings and so on -- kindck used to do this abort, but\n             // kindck is gone now). -nmatsakis\n             if sess.err_count() > 0 {\n-                return Ok(f(tcx, analysis, rx, sess.compile_status()));\n+                return Ok(f(tcx, rx, sess.compile_status()));\n             }\n \n             time(sess, \"death checking\", || middle::dead::check_crate(tcx));\n@@ -1320,7 +1305,7 @@ where\n \n             time(sess, \"lint checking\", || lint::check_crate(tcx));\n \n-            return Ok(f(tcx, analysis, rx, tcx.sess.compile_status()));\n+            return Ok(f(tcx, rx, tcx.sess.compile_status()));\n         },\n     )\n }"}, {"sha": "c8a5bbe8315b376f56a7b16a4c27b29d9f57f9a6", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -879,7 +879,6 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                     pretty::print_after_hir_lowering(state.session,\n                                                      state.cstore.unwrap(),\n                                                      state.hir_map.unwrap(),\n-                                                     state.analysis.unwrap(),\n                                                      state.resolutions.unwrap(),\n                                                      state.input,\n                                                      &state.expanded_crate.take().unwrap(),\n@@ -940,7 +939,6 @@ pub fn enable_save_analysis(control: &mut CompileController) {\n         time(state.session, \"save analysis\", || {\n             save::process_crate(state.tcx.unwrap(),\n                                 state.expanded_crate.unwrap(),\n-                                state.analysis.unwrap(),\n                                 state.crate_name.unwrap(),\n                                 state.input,\n                                 None,"}, {"sha": "d1108304d11d9a02a600eb7b4b51cb317b5d8f42", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -190,7 +190,6 @@ impl PpSourceMode {\n         sess: &'tcx Session,\n         cstore: &'tcx CStore,\n         hir_map: &hir_map::Map<'tcx>,\n-        analysis: &ty::CrateAnalysis,\n         resolutions: &Resolutions,\n         output_filenames: &OutputFilenames,\n         id: &str,\n@@ -223,12 +222,11 @@ impl PpSourceMode {\n                                                                  sess,\n                                                                  cstore,\n                                                                  hir_map.clone(),\n-                                                                 analysis.clone(),\n                                                                  resolutions.clone(),\n                                                                  &mut arenas,\n                                                                  id,\n                                                                  output_filenames,\n-                                                                 |tcx, _, _, _| {\n+                                                                 |tcx, _, _| {\n                     let empty_tables = ty::TypeckTables::empty(None);\n                     let annotation = TypedAnnotation {\n                         tcx,\n@@ -959,7 +957,6 @@ pub fn print_after_parsing(sess: &Session,\n pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                                 cstore: &'tcx CStore,\n                                                 hir_map: &hir_map::Map<'tcx>,\n-                                                analysis: &ty::CrateAnalysis,\n                                                 resolutions: &Resolutions,\n                                                 input: &Input,\n                                                 krate: &ast::Crate,\n@@ -972,7 +969,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n         print_with_analysis(sess,\n                             cstore,\n                             hir_map,\n-                            analysis,\n                             resolutions,\n                             crate_name,\n                             output_filenames,\n@@ -1010,7 +1006,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                 s.call_with_pp_support_hir(sess,\n                                            cstore,\n                                            hir_map,\n-                                           analysis,\n                                            resolutions,\n                                            output_filenames,\n                                            crate_name,\n@@ -1033,7 +1028,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                 s.call_with_pp_support_hir(sess,\n                                            cstore,\n                                            hir_map,\n-                                           analysis,\n                                            resolutions,\n                                            output_filenames,\n                                            crate_name,\n@@ -1048,7 +1042,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                 s.call_with_pp_support_hir(sess,\n                                            cstore,\n                                            hir_map,\n-                                           analysis,\n                                            resolutions,\n                                            output_filenames,\n                                            crate_name,\n@@ -1081,7 +1074,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                 s.call_with_pp_support_hir(sess,\n                                            cstore,\n                                            hir_map,\n-                                           analysis,\n                                            resolutions,\n                                            output_filenames,\n                                            crate_name,\n@@ -1103,13 +1095,12 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n }\n \n // In an ideal world, this would be a public function called by the driver after\n-// analsysis is performed. However, we want to call `phase_3_run_analysis_passes`\n+// analysis is performed. However, we want to call `phase_3_run_analysis_passes`\n // with a different callback than the standard driver, so that isn't easy.\n // Instead, we call that function ourselves.\n fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                        cstore: &'a CStore,\n                                        hir_map: &hir_map::Map<'tcx>,\n-                                       analysis: &ty::CrateAnalysis,\n                                        resolutions: &Resolutions,\n                                        crate_name: &str,\n                                        output_filenames: &OutputFilenames,\n@@ -1134,12 +1125,11 @@ fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                                      sess,\n                                                      cstore,\n                                                      hir_map.clone(),\n-                                                     analysis.clone(),\n                                                      resolutions.clone(),\n                                                      &mut arenas,\n                                                      crate_name,\n                                                      output_filenames,\n-                                                     |tcx, _, _, _| {\n+                                                     |tcx, _, _| {\n         match ppm {\n             PpmMir | PpmMirCFG => {\n                 if let Some(nodeid) = nodeid {"}, {"sha": "71c859d8dbea71fb489d0ff3364c607d1b639f83", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -341,6 +341,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n             edition: None,\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(AMBIGUOUS_ASSOCIATED_ITEMS),\n+            reference: \"issue #57644 <https://github.com/rust-lang/rust/issues/57644>\",\n+            edition: None,\n+        },\n         ]);\n \n     // Register renamed and removed lints."}, {"sha": "eb49547e9bf529b38b4a430b47e41e8e9441bec6", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -177,13 +177,13 @@\n use rustc::hir::{self, CodegenFnAttrFlags};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n-use rustc::session::config;\n+use rustc::session::config::EntryFnType;\n use rustc::mir::{self, Location, Promoted};\n use rustc::mir::visit::Visitor as MirVisitor;\n use rustc::mir::mono::MonoItem;\n@@ -321,9 +321,7 @@ fn collect_roots<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut roots = Vec::new();\n \n     {\n-        let entry_fn = tcx.sess.entry_fn.borrow().map(|(node_id, _, _)| {\n-            tcx.hir().local_def_id(node_id)\n-        });\n+        let entry_fn = tcx.entry_fn(LOCAL_CRATE);\n \n         debug!(\"collect_roots: entry_fn = {:?}\", entry_fn);\n \n@@ -924,7 +922,7 @@ struct RootCollector<'b, 'a: 'b, 'tcx: 'a + 'b> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mode: MonoItemCollectionMode,\n     output: &'b mut Vec<MonoItem<'tcx>>,\n-    entry_fn: Option<DefId>,\n+    entry_fn: Option<(DefId, EntryFnType)>,\n }\n \n impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n@@ -1023,7 +1021,7 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n                 true\n             }\n             MonoItemCollectionMode::Lazy => {\n-                self.entry_fn == Some(def_id) ||\n+                self.entry_fn.map(|(id, _)| id) == Some(def_id) ||\n                 self.tcx.is_reachable_non_generic(def_id) ||\n                 self.tcx.codegen_fn_attrs(def_id).flags.contains(\n                     CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL)\n@@ -1048,14 +1046,9 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n     /// the return type of `main`. This is not needed when\n     /// the user writes their own `start` manually.\n     fn push_extra_entry_roots(&mut self) {\n-        if self.tcx.sess.entry_fn.get().map(|e| e.2) != Some(config::EntryFnType::Main) {\n-            return\n-        }\n-\n-        let main_def_id = if let Some(def_id) = self.entry_fn {\n-            def_id\n-        } else {\n-            return\n+        let main_def_id = match self.entry_fn {\n+            Some((def_id, EntryFnType::Main)) => def_id,\n+            _ => return,\n         };\n \n         let start_def_id = match self.tcx.lang_items().require(StartFnLangItem) {"}, {"sha": "c831cbd98299c3ae49be2894c0a091f7017d7a56", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -1,6 +1,6 @@\n use monomorphize::Instance;\n use rustc::hir;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::config::OptLevel;\n use rustc::ty::{self, Ty, TyCtxt, ClosureSubsts, GeneratorSubsts};\n use rustc::ty::subst::Substs;\n@@ -75,8 +75,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n \n         match *self.as_mono_item() {\n             MonoItem::Fn(ref instance) => {\n-                let entry_def_id =\n-                    tcx.sess.entry_fn.borrow().map(|(id, _, _)| tcx.hir().local_def_id(id));\n+                let entry_def_id = tcx.entry_fn(LOCAL_CRATE).map(|(id, _)| id);\n                 // If this function isn't inlined or otherwise has explicit\n                 // linkage, then we'll be creating a globally shared version.\n                 if self.explicit_linkage(tcx).is_some() ||"}, {"sha": "995df3802aabd043390405125d7cdc0920af80b7", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -1238,12 +1238,9 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 };\n \n                 // Make a comma-separated list of names of imported modules.\n-                let glob_map = &self.save_ctxt.analysis.glob_map;\n-                let names = if glob_map.contains_key(&id) {\n-                    glob_map.get(&id).unwrap().iter().map(|n| n.to_string()).collect()\n-                } else {\n-                    Vec::new()\n-                };\n+                let def_id = self.tcx.hir().local_def_id(id);\n+                let names = self.tcx.names_imported_by_glob_use(def_id);\n+                let names: Vec<_> = names.iter().map(|n| n.to_string()).collect();\n \n                 // Otherwise it's a span with wrong macro expansion info, which\n                 // we don't want to track anyway, since it's probably macro-internal `use`"}, {"sha": "73eb5de5c76f01bbc54903d7d008bbe83c5106bf", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -71,7 +71,6 @@ pub struct SaveContext<'l, 'tcx: 'l> {\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n     tables: &'l ty::TypeckTables<'tcx>,\n     access_levels: &'l AccessLevels,\n-    analysis: &'l ty::CrateAnalysis,\n     span_utils: SpanUtils<'tcx>,\n     config: Config,\n     impl_counter: Cell<u32>,\n@@ -1120,7 +1119,6 @@ impl<'b> SaveHandler for CallbackHandler<'b> {\n pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n     krate: &ast::Crate,\n-    analysis: &'l ty::CrateAnalysis,\n     cratename: &str,\n     input: &'l Input,\n     config: Option<Config>,\n@@ -1139,7 +1137,6 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n         let save_ctxt = SaveContext {\n             tcx,\n             tables: &ty::TypeckTables::empty(None),\n-            analysis,\n             access_levels: &access_levels,\n             span_utils: SpanUtils::new(&tcx.sess),\n             config: find_config(config),"}, {"sha": "3a21ca19b176b789a7328bd19ef922f2c79dc1e2", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -217,6 +217,46 @@ impl ToJson for RelroLevel {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n+pub enum MergeFunctions {\n+    Disabled,\n+    Trampolines,\n+    Aliases\n+}\n+\n+impl MergeFunctions {\n+    pub fn desc(&self) -> &str {\n+        match *self {\n+            MergeFunctions::Disabled => \"disabled\",\n+            MergeFunctions::Trampolines => \"trampolines\",\n+            MergeFunctions::Aliases => \"aliases\",\n+        }\n+    }\n+}\n+\n+impl FromStr for MergeFunctions {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<MergeFunctions, ()> {\n+        match s {\n+            \"disabled\" => Ok(MergeFunctions::Disabled),\n+            \"trampolines\" => Ok(MergeFunctions::Trampolines),\n+            \"aliases\" => Ok(MergeFunctions::Aliases),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n+impl ToJson for MergeFunctions {\n+    fn to_json(&self) -> Json {\n+        match *self {\n+            MergeFunctions::Disabled => \"disabled\".to_json(),\n+            MergeFunctions::Trampolines => \"trampolines\".to_json(),\n+            MergeFunctions::Aliases => \"aliases\".to_json(),\n+        }\n+    }\n+}\n+\n pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<String>>;\n pub type TargetResult = Result<Target, String>;\n \n@@ -690,7 +730,15 @@ pub struct TargetOptions {\n \n     /// If set, have the linker export exactly these symbols, instead of using\n     /// the usual logic to figure this out from the crate itself.\n-    pub override_export_symbols: Option<Vec<String>>\n+    pub override_export_symbols: Option<Vec<String>>,\n+\n+    /// Determines how or whether the MergeFunctions LLVM pass should run for\n+    /// this target. Either \"disabled\", \"trampolines\", or \"aliases\".\n+    /// The MergeFunctions pass is generally useful, but some targets may need\n+    /// to opt out. The default is \"aliases\".\n+    ///\n+    /// Workaround for: https://github.com/rust-lang/rust/issues/57356\n+    pub merge_functions: MergeFunctions\n }\n \n impl Default for TargetOptions {\n@@ -773,6 +821,7 @@ impl Default for TargetOptions {\n             requires_uwtable: false,\n             simd_types_indirect: true,\n             override_export_symbols: None,\n+            merge_functions: MergeFunctions::Aliases,\n         }\n     }\n }\n@@ -875,6 +924,19 @@ impl Target {\n                     .map(|o| o.as_u64()\n                          .map(|s| base.options.$key_name = Some(s)));\n             } );\n+            ($key_name:ident, MergeFunctions) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                    match s.parse::<MergeFunctions>() {\n+                        Ok(mergefunc) => base.options.$key_name = mergefunc,\n+                        _ => return Some(Err(format!(\"'{}' is not a valid value for \\\n+                                                      merge-functions. Use 'disabled', \\\n+                                                      'trampolines', or 'aliases'.\",\n+                                                      s))),\n+                    }\n+                    Some(Ok(()))\n+                })).unwrap_or(Ok(()))\n+            } );\n             ($key_name:ident, PanicStrategy) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n@@ -1064,6 +1126,7 @@ impl Target {\n         key!(requires_uwtable, bool);\n         key!(simd_types_indirect, bool);\n         key!(override_export_symbols, opt_list);\n+        key!(merge_functions, MergeFunctions)?;\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -1275,6 +1338,7 @@ impl ToJson for Target {\n         target_option_val!(requires_uwtable);\n         target_option_val!(simd_types_indirect);\n         target_option_val!(override_export_symbols);\n+        target_option_val!(merge_functions);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "534279e981d624cd465e31b4b78a30b6388b4020", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 96, "deletions": 66, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -10,6 +10,7 @@ use hir::HirVec;\n use lint;\n use middle::resolve_lifetime as rl;\n use namespace::Namespace;\n+use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n@@ -1278,29 +1279,50 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     }\n \n     // Create a type from a path to an associated type.\n-    // For a path `A::B::C::D`, `ty` and `ty_path_def` are the type and def for `A::B::C`\n+    // For a path `A::B::C::D`, `qself_ty` and `qself_def` are the type and def for `A::B::C`\n     // and item_segment is the path segment for `D`. We return a type and a def for\n     // the whole path.\n-    // Will fail except for `T::A` and `Self::A`; i.e., if `ty`/`ty_path_def` are not a type\n+    // Will fail except for `T::A` and `Self::A`; i.e., if `qself_ty`/`qself_def` are not a type\n     // parameter or `Self`.\n-    pub fn associated_path_def_to_ty(&self,\n-                                     ref_id: ast::NodeId,\n-                                     span: Span,\n-                                     ty: Ty<'tcx>,\n-                                     ty_path_def: Def,\n-                                     item_segment: &hir::PathSegment)\n-                                     -> (Ty<'tcx>, Def)\n-    {\n+    pub fn associated_path_to_ty(\n+        &self,\n+        ref_id: ast::NodeId,\n+        span: Span,\n+        qself_ty: Ty<'tcx>,\n+        qself_def: Def,\n+        assoc_segment: &hir::PathSegment,\n+        permit_variants: bool,\n+    ) -> (Ty<'tcx>, Def) {\n         let tcx = self.tcx();\n-        let assoc_name = item_segment.ident;\n+        let assoc_ident = assoc_segment.ident;\n \n-        debug!(\"associated_path_def_to_ty: {:?}::{}\", ty, assoc_name);\n+        debug!(\"associated_path_to_ty: {:?}::{}\", qself_ty, assoc_ident);\n \n-        self.prohibit_generics(slice::from_ref(item_segment));\n+        self.prohibit_generics(slice::from_ref(assoc_segment));\n+\n+        // Check if we have an enum variant.\n+        let mut variant_resolution = None;\n+        if let ty::Adt(adt_def, _) = qself_ty.sty {\n+            if adt_def.is_enum() {\n+                let variant_def = adt_def.variants.iter().find(|vd| {\n+                    tcx.hygienic_eq(assoc_ident, vd.ident, adt_def.did)\n+                });\n+                if let Some(variant_def) = variant_def {\n+                    let def = Def::Variant(variant_def.did);\n+                    if permit_variants {\n+                        check_type_alias_enum_variants_enabled(tcx, span);\n+                        tcx.check_stability(variant_def.did, Some(ref_id), span);\n+                        return (qself_ty, def);\n+                    } else {\n+                        variant_resolution = Some(def);\n+                    }\n+                }\n+            }\n+        }\n \n         // Find the type of the associated item, and the trait where the associated\n         // item is declared.\n-        let bound = match (&ty.sty, ty_path_def) {\n+        let bound = match (&qself_ty.sty, qself_def) {\n             (_, Def::SelfTy(Some(_), Some(impl_def_id))) => {\n                 // `Self` in an impl of a trait -- we have a concrete self type and a\n                 // trait reference.\n@@ -1313,77 +1335,61 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 };\n \n                 let candidates = traits::supertraits(tcx, ty::Binder::bind(trait_ref))\n-                    .filter(|r| self.trait_defines_associated_type_named(r.def_id(), assoc_name));\n+                    .filter(|r| self.trait_defines_associated_type_named(r.def_id(), assoc_ident));\n \n-                match self.one_bound_for_assoc_type(candidates, \"Self\", assoc_name, span) {\n+                match self.one_bound_for_assoc_type(candidates, \"Self\", assoc_ident, span) {\n                     Ok(bound) => bound,\n                     Err(ErrorReported) => return (tcx.types.err, Def::Err),\n                 }\n             }\n             (&ty::Param(_), Def::SelfTy(Some(param_did), None)) |\n             (&ty::Param(_), Def::TyParam(param_did)) => {\n-                match self.find_bound_for_assoc_item(param_did, assoc_name, span) {\n+                match self.find_bound_for_assoc_item(param_did, assoc_ident, span) {\n                     Ok(bound) => bound,\n                     Err(ErrorReported) => return (tcx.types.err, Def::Err),\n                 }\n             }\n-            (&ty::Adt(adt_def, _substs), Def::Enum(_did)) => {\n-                let ty_str = ty.to_string();\n-                // Incorrect enum variant.\n-                let mut err = tcx.sess.struct_span_err(\n-                    span,\n-                    &format!(\"no variant `{}` on enum `{}`\", &assoc_name.as_str(), ty_str),\n-                );\n-                // Check if it was a typo.\n-                let input = adt_def.variants.iter().map(|variant| &variant.ident.name);\n-                if let Some(suggested_name) = find_best_match_for_name(\n-                    input,\n-                    &assoc_name.as_str(),\n-                    None,\n-                ) {\n-                    err.span_suggestion_with_applicability(\n+            _ => {\n+                if variant_resolution.is_some() {\n+                    // Variant in type position\n+                    let msg = format!(\"expected type, found variant `{}`\", assoc_ident);\n+                    tcx.sess.span_err(span, &msg);\n+                } else if qself_ty.is_enum() {\n+                    // Report as incorrect enum variant rather than ambiguous type.\n+                    let mut err = tcx.sess.struct_span_err(\n                         span,\n-                        \"did you mean\",\n-                        format!(\"{}::{}\", ty_str, suggested_name.to_string()),\n-                        Applicability::MaybeIncorrect,\n+                        &format!(\"no variant `{}` on enum `{}`\", &assoc_ident.as_str(), qself_ty),\n                     );\n-                } else {\n-                    err.span_label(span, \"unknown variant\");\n-                }\n-                err.emit();\n-                return (tcx.types.err, Def::Err);\n-            }\n-            _ => {\n-                // Check if we have an enum variant.\n-                match ty.sty {\n-                    ty::Adt(adt_def, _) if adt_def.is_enum() => {\n-                        let variant_def = adt_def.variants.iter().find(|vd| {\n-                            tcx.hygienic_eq(assoc_name, vd.ident, adt_def.did)\n-                        });\n-                        if let Some(variant_def) = variant_def {\n-                            check_type_alias_enum_variants_enabled(tcx, span);\n-\n-                            let def = Def::Variant(variant_def.did);\n-                            tcx.check_stability(def.def_id(), Some(ref_id), span);\n-                            return (ty, def);\n-                        }\n-                    },\n-                    _ => (),\n-                }\n-\n-                // Don't print `TyErr` to the user.\n-                if !ty.references_error() {\n+                    // Check if it was a typo.\n+                    let adt_def = qself_ty.ty_adt_def().expect(\"enum is not an ADT\");\n+                    if let Some(suggested_name) = find_best_match_for_name(\n+                        adt_def.variants.iter().map(|variant| &variant.ident.name),\n+                        &assoc_ident.as_str(),\n+                        None,\n+                    ) {\n+                        err.span_suggestion_with_applicability(\n+                            span,\n+                            \"did you mean\",\n+                            format!(\"{}::{}\", qself_ty, suggested_name),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    } else {\n+                        err.span_label(span, \"unknown variant\");\n+                    }\n+                    err.emit();\n+                } else if !qself_ty.references_error() {\n+                    // Don't print `TyErr` to the user.\n                     self.report_ambiguous_associated_type(span,\n-                                                          &ty.to_string(),\n+                                                          &qself_ty.to_string(),\n                                                           \"Trait\",\n-                                                          &assoc_name.as_str());\n+                                                          &assoc_ident.as_str());\n                 }\n                 return (tcx.types.err, Def::Err);\n             }\n         };\n \n         let trait_did = bound.def_id();\n-        let (assoc_ident, def_scope) = tcx.adjust_ident(assoc_name, trait_did, ref_id);\n+        let (assoc_ident, def_scope) = tcx.adjust_ident(assoc_ident, trait_did, ref_id);\n         let item = tcx.associated_items(trait_did).find(|i| {\n             Namespace::from(i.kind) == Namespace::Type &&\n                 i.ident.modern() == assoc_ident\n@@ -1394,11 +1400,35 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n \n         let def = Def::AssociatedTy(item.def_id);\n         if !item.vis.is_accessible_from(def_scope, tcx) {\n-            let msg = format!(\"{} `{}` is private\", def.kind_name(), assoc_name);\n+            let msg = format!(\"{} `{}` is private\", def.kind_name(), assoc_ident);\n             tcx.sess.span_err(span, &msg);\n         }\n         tcx.check_stability(item.def_id, Some(ref_id), span);\n \n+        if let Some(variant_def) = variant_resolution {\n+            let mut err = tcx.struct_span_lint_node(\n+                AMBIGUOUS_ASSOCIATED_ITEMS,\n+                ref_id,\n+                span,\n+                \"ambiguous associated item\",\n+            );\n+\n+            let mut could_refer_to = |def: Def, also| {\n+                let note_msg = format!(\"`{}` could{} refer to {} defined here\",\n+                                       assoc_ident, also, def.kind_name());\n+                err.span_note(tcx.def_span(def.def_id()), &note_msg);\n+            };\n+            could_refer_to(variant_def, \"\");\n+            could_refer_to(def, \" also\");\n+\n+            err.span_suggestion_with_applicability(\n+                span,\n+                \"use fully-qualified syntax\",\n+                format!(\"<{} as {}>::{}\", qself_ty, \"Trait\", assoc_ident),\n+                Applicability::HasPlaceholders,\n+            ).emit();\n+        }\n+\n         (ty, def)\n     }\n \n@@ -1773,7 +1803,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 } else {\n                     Def::Err\n                 };\n-                self.associated_path_def_to_ty(ast_ty.id, ast_ty.span, ty, def, segment).0\n+                self.associated_path_to_ty(ast_ty.id, ast_ty.span, ty, def, segment, false).0\n             }\n             hir::TyKind::Array(ref ty, ref length) => {\n                 let length_def_id = tcx.hir().local_def_id(length.id);"}, {"sha": "e71dc019471bdc3d2cf85fc0f0ce779561e89a2f", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 26, "deletions": 35, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -408,45 +408,36 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let tcx = self.tcx;\n \n-        let mode = probe::Mode::Path;\n-        match self.probe_for_name(span, mode, method_name, IsSuggestion(false),\n-                                  self_ty, expr_id, ProbeScope::TraitsInScope) {\n-            Ok(pick) => {\n-                debug!(\"resolve_ufcs: pick={:?}\", pick);\n-                if let Some(import_id) = pick.import_id {\n-                    let import_def_id = tcx.hir().local_def_id(import_id);\n-                    debug!(\"resolve_ufcs: used_trait_import: {:?}\", import_def_id);\n-                    Lrc::get_mut(&mut self.tables.borrow_mut().used_trait_imports)\n-                                                .unwrap().insert(import_def_id);\n+        // Check if we have an enum variant.\n+        if let ty::Adt(adt_def, _) = self_ty.sty {\n+            if adt_def.is_enum() {\n+                let variant_def = adt_def.variants.iter().find(|vd| {\n+                    tcx.hygienic_eq(method_name, vd.ident, adt_def.did)\n+                });\n+                if let Some(variant_def) = variant_def {\n+                    check_type_alias_enum_variants_enabled(tcx, span);\n+\n+                    let def = Def::VariantCtor(variant_def.did, variant_def.ctor_kind);\n+                    tcx.check_stability(def.def_id(), Some(expr_id), span);\n+                    return Ok(def);\n                 }\n-\n-                let def = pick.item.def();\n-                debug!(\"resolve_ufcs: def={:?}\", def);\n-                tcx.check_stability(def.def_id(), Some(expr_id), span);\n-\n-                Ok(def)\n             }\n-            Err(err) => {\n-                // Check if we have an enum variant.\n-                match self_ty.sty {\n-                    ty::Adt(adt_def, _) if adt_def.is_enum() => {\n-                        let variant_def = adt_def.variants.iter().find(|vd| {\n-                            tcx.hygienic_eq(method_name, vd.ident, adt_def.did)\n-                        });\n-                        if let Some(variant_def) = variant_def {\n-                            check_type_alias_enum_variants_enabled(tcx, span);\n-\n-                            let def = Def::VariantCtor(variant_def.did, variant_def.ctor_kind);\n-                            tcx.check_stability(def.def_id(), Some(expr_id), span);\n-                            return Ok(def);\n-                        }\n-                    },\n-                    _ => (),\n-                }\n+        }\n \n-                Err(err)\n-            }\n+        let pick = self.probe_for_name(span, probe::Mode::Path, method_name, IsSuggestion(false),\n+                                       self_ty, expr_id, ProbeScope::TraitsInScope)?;\n+        debug!(\"resolve_ufcs: pick={:?}\", pick);\n+        if let Some(import_id) = pick.import_id {\n+            let import_def_id = tcx.hir().local_def_id(import_id);\n+            debug!(\"resolve_ufcs: used_trait_import: {:?}\", import_def_id);\n+            Lrc::get_mut(&mut self.tables.borrow_mut().used_trait_imports)\n+                .unwrap().insert(import_def_id);\n         }\n+\n+        let def = pick.item.def();\n+        debug!(\"resolve_ufcs: def={:?}\", def);\n+        tcx.check_stability(def.def_id(), Some(expr_id), span);\n+        Ok(def)\n     }\n \n     /// Find item with name `item_name` defined in impl/trait `def_id`"}, {"sha": "452fd248f51214351bfc4f3d2f2d126d184264b4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -132,7 +132,8 @@ use std::ops::{self, Deref};\n use std::slice;\n \n use require_c_abi_if_variadic;\n-use session::{CompileIncomplete, config, Session};\n+use session::{CompileIncomplete, Session};\n+use session::config::EntryFnType;\n use TypeAndSubsts;\n use lint;\n use util::captures::Captures;\n@@ -1163,19 +1164,18 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n \n     // Check that the main return type implements the termination trait.\n     if let Some(term_id) = fcx.tcx.lang_items().termination() {\n-        if let Some((id, _, entry_type)) = *fcx.tcx.sess.entry_fn.borrow() {\n-            if id == fn_id {\n-                if let config::EntryFnType::Main = entry_type {\n-                    let substs = fcx.tcx.mk_substs_trait(declared_ret_ty, &[]);\n-                    let trait_ref = ty::TraitRef::new(term_id, substs);\n-                    let return_ty_span = decl.output.span();\n-                    let cause = traits::ObligationCause::new(\n-                        return_ty_span, fn_id, ObligationCauseCode::MainFunctionType);\n-\n-                    inherited.register_predicate(\n-                        traits::Obligation::new(\n-                            cause, param_env, trait_ref.to_predicate()));\n-                }\n+        if let Some((def_id, EntryFnType::Main)) = fcx.tcx.entry_fn(LOCAL_CRATE) {\n+            let main_id = fcx.tcx.hir().as_local_node_id(def_id).unwrap();\n+            if main_id == fn_id {\n+                let substs = fcx.tcx.mk_substs_trait(declared_ret_ty, &[]);\n+                let trait_ref = ty::TraitRef::new(term_id, substs);\n+                let return_ty_span = decl.output.span();\n+                let cause = traits::ObligationCause::new(\n+                    return_ty_span, fn_id, ObligationCauseCode::MainFunctionType);\n+\n+                inherited.register_predicate(\n+                    traits::Obligation::new(\n+                        cause, param_env, trait_ref.to_predicate()));\n             }\n         }\n     }\n@@ -4724,8 +4724,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 } else {\n                     Def::Err\n                 };\n-                let (ty, def) = AstConv::associated_path_def_to_ty(self, node_id, path_span,\n-                                                                   ty, def, segment);\n+                let (ty, def) = AstConv::associated_path_to_ty(self, node_id, path_span,\n+                                                               ty, def, segment, true);\n \n                 // Write back the new resolution.\n                 let hir_id = self.tcx.hir().node_to_hir_id(node_id);"}, {"sha": "6c1c49bda4ce5d4f7062738f5c11e8eed5ac55b5", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -103,23 +103,22 @@ mod namespace;\n mod outlives;\n mod variance;\n \n-use hir::Node;\n use rustc_target::spec::abi::Abi;\n-use rustc::hir;\n+use rustc::hir::{self, Node};\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::infer::InferOk;\n use rustc::lint;\n use rustc::middle;\n use rustc::session;\n-use rustc::session::config::nightly_options;\n+use rustc::session::CompileIncomplete;\n+use rustc::session::config::{EntryFnType, nightly_options};\n use rustc::traits::{ObligationCause, ObligationCauseCode, TraitEngine, TraitEngineExt};\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::query::Providers;\n use rustc::util;\n use rustc::util::profiling::ProfileCategory;\n-use session::{CompileIncomplete, config};\n use syntax_pos::Span;\n-use syntax::ast;\n use util::common::time;\n \n use std::iter;\n@@ -184,10 +183,9 @@ fn require_same_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     })\n }\n \n-fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                              main_id: ast::NodeId,\n-                              main_span: Span) {\n-    let main_def_id = tcx.hir().local_def_id(main_id);\n+fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, main_def_id: DefId) {\n+    let main_id = tcx.hir().as_local_node_id(main_def_id).unwrap();\n+    let main_span = tcx.def_span(main_def_id);\n     let main_t = tcx.type_of(main_def_id);\n     match main_t.sty {\n         ty::FnDef(..) => {\n@@ -250,10 +248,9 @@ fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                               start_id: ast::NodeId,\n-                               start_span: Span) {\n-    let start_def_id = tcx.hir().local_def_id(start_id);\n+fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, start_def_id: DefId) {\n+    let start_id = tcx.hir().as_local_node_id(start_def_id).unwrap();\n+    let start_span = tcx.def_span(start_def_id);\n     let start_t = tcx.type_of(start_def_id);\n     match start_t.sty {\n         ty::FnDef(..) => {\n@@ -309,11 +306,10 @@ fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn check_for_entry_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    if let Some((id, sp, entry_type)) = *tcx.sess.entry_fn.borrow() {\n-        match entry_type {\n-            config::EntryFnType::Main => check_main_fn_ty(tcx, id, sp),\n-            config::EntryFnType::Start => check_start_fn_ty(tcx, id, sp),\n-        }\n+    match tcx.entry_fn(LOCAL_CRATE) {\n+        Some((def_id, EntryFnType::Main)) => check_main_fn_ty(tcx, def_id),\n+        Some((def_id, EntryFnType::Start)) => check_start_fn_ty(tcx, def_id),\n+        _ => {}\n     }\n }\n "}, {"sha": "7069f04fe188c233795e2f72e656baf2d5d696ba", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -51,9 +51,6 @@ pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a> {\n     /// The stack of module NodeIds up till this point\n     pub crate_name: Option<String>,\n     pub cstore: Rc<CStore>,\n-    // Note that external items for which `doc(hidden)` applies to are shown as\n-    // non-reachable while local items aren't. This is because we're reusing\n-    // the access levels from crateanalysis.\n     /// Later on moved into `html::render::CACHE_KEY`\n     pub renderinfo: RefCell<RenderInfo>,\n     /// Later on moved through `clean::Crate` into `html::render::CACHE_KEY`\n@@ -468,15 +465,13 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             freevars: resolver.freevars.clone(),\n             export_map: resolver.export_map.clone(),\n             trait_map: resolver.trait_map.clone(),\n+            glob_map: resolver.glob_map.clone(),\n             maybe_unused_trait_imports: resolver.maybe_unused_trait_imports.clone(),\n             maybe_unused_extern_crates: resolver.maybe_unused_extern_crates.clone(),\n             extern_prelude: resolver.extern_prelude.iter().map(|(ident, entry)| {\n                 (ident.name, entry.introduced_by_item)\n             }).collect(),\n         };\n-        let analysis = ty::CrateAnalysis {\n-            glob_map: resolver.glob_map.clone(),\n-        };\n \n         let mut arenas = AllArenas::new();\n         let hir_map = hir_map::map_crate(&sess, &*cstore, &mut hir_forest, &defs);\n@@ -492,12 +487,11 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                                                         &sess,\n                                                         &*cstore,\n                                                         hir_map,\n-                                                        analysis,\n                                                         resolutions,\n                                                         &mut arenas,\n                                                         &name,\n                                                         &output_filenames,\n-                                                        |tcx, _, _, result| {\n+                                                        |tcx, _, result| {\n             if result.is_err() {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");\n             }"}, {"sha": "ad1659be3460e00fd153281d3fede04a3b172dab", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -309,7 +309,7 @@ pub struct Cache {\n \n     // Note that external items for which `doc(hidden)` applies to are shown as\n     // non-reachable while local items aren't. This is because we're reusing\n-    // the access levels from crateanalysis.\n+    // the access levels from the privacy check pass.\n     pub access_levels: AccessLevels<DefId>,\n \n     /// The version of the crate being documented, if given from the `--crate-version` flag."}, {"sha": "9a129e7e8fcd8c7df0efa8bd733c674d79af8f39", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -435,7 +435,8 @@ fn check_lhs_no_empty_seq(sess: &ParseSess, tts: &[quoted::TokenTree]) -> bool {\n                     match *seq_tt {\n                         TokenTree::MetaVarDecl(_, _, id) => id.name == \"vis\",\n                         TokenTree::Sequence(_, ref sub_seq) =>\n-                            sub_seq.op == quoted::KleeneOp::ZeroOrMore,\n+                            sub_seq.op == quoted::KleeneOp::ZeroOrMore\n+                            || sub_seq.op == quoted::KleeneOp::ZeroOrOne,\n                         _ => false,\n                     }\n                 }) {\n@@ -543,7 +544,10 @@ impl FirstSets {\n                         }\n \n                         // Reverse scan: Sequence comes before `first`.\n-                        if subfirst.maybe_empty || seq_rep.op == quoted::KleeneOp::ZeroOrMore {\n+                        if subfirst.maybe_empty\n+                           || seq_rep.op == quoted::KleeneOp::ZeroOrMore\n+                           || seq_rep.op == quoted::KleeneOp::ZeroOrOne\n+                        {\n                             // If sequence is potentially empty, then\n                             // union them (preserving first emptiness).\n                             first.add_all(&TokenSet { maybe_empty: true, ..subfirst });\n@@ -591,8 +595,10 @@ impl FirstSets {\n \n                             assert!(first.maybe_empty);\n                             first.add_all(subfirst);\n-                            if subfirst.maybe_empty ||\n-                               seq_rep.op == quoted::KleeneOp::ZeroOrMore {\n+                            if subfirst.maybe_empty\n+                               || seq_rep.op == quoted::KleeneOp::ZeroOrMore\n+                               || seq_rep.op == quoted::KleeneOp::ZeroOrOne\n+                            {\n                                 // continue scanning for more first\n                                 // tokens, but also make sure we\n                                 // restore empty-tracking state"}, {"sha": "5b27b6808ead218073be982280a5f9ddff27caeb", "filename": "src/test/incremental/change_name_of_static_in_fn.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fincremental%2Fchange_name_of_static_in_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fincremental%2Fchange_name_of_static_in_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_name_of_static_in_fn.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -0,0 +1,17 @@\n+\n+// revisions:rpass1 rpass2 rpass3\n+\n+// See issue #57692.\n+\n+#![allow(warnings)]\n+\n+fn main() {\n+    #[cfg(rpass1)]\n+    {\n+        static map: u64 = 0;\n+    }\n+    #[cfg(not(rpass1))]\n+    {\n+        static MAP: u64 = 0;\n+    }\n+}"}, {"sha": "71c8fd55b23f3711bd4a5898f4e4c69c5653bc6e", "filename": "src/test/ui/huge-enum.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Fhuge-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Fhuge-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-enum.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -1,7 +1,5 @@\n-// error-pattern: Option\n-// normalize-stderr-test \"<\\[u32; \\d+\\]>\" -> \"<[u32; N]>\"\n-\n-// FIXME: work properly with higher limits\n+// normalize-stderr-test \"std::option::Option<\\[u32; \\d+\\]>\" -> \"TYPE\"\n+// normalize-stderr-test \"\\[u32; \\d+\\]\" -> \"TYPE\"\n \n #[cfg(target_pointer_width = \"32\")]\n fn main() {"}, {"sha": "67cae3d52ed2dd998bfeadf009438945d9c8f234", "filename": "src/test/ui/huge-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Fhuge-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Fhuge-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-enum.stderr?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -1,4 +1,4 @@\n-error: the type `std::option::Option<[u32; N]>` is too big for the current architecture\n+error: the type `TYPE` is too big for the current architecture\n \n error: aborting due to previous error\n "}, {"sha": "616fd09907a2be4a2c39ddb2f94b897a51ffe18e", "filename": "src/test/ui/issues/issue-5067.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Fissues%2Fissue-5067.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Fissues%2Fissue-5067.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5067.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -1,37 +1,59 @@\n #![allow(unused_macros)]\n \n+// Tests that repetition matchers cannot match the empty token tree (since that would be\n+// ambiguous).\n+\n+// edition:2018\n+\n macro_rules! foo {\n     ( $()* ) => {};\n     //~^ ERROR repetition matches empty token tree\n     ( $()+ ) => {};\n     //~^ ERROR repetition matches empty token tree\n-\n+    ( $()? ) => {};\n+    //~^ ERROR repetition matches empty token tree\n     ( $(),* ) => {}; // PASS\n     ( $(),+ ) => {}; // PASS\n-\n+    // `?` cannot have a separator...\n     ( [$()*] ) => {};\n     //~^ ERROR repetition matches empty token tree\n     ( [$()+] ) => {};\n     //~^ ERROR repetition matches empty token tree\n-\n+    ( [$()?] ) => {};\n+    //~^ ERROR repetition matches empty token tree\n     ( [$(),*] ) => {}; // PASS\n     ( [$(),+] ) => {}; // PASS\n-\n+    // `?` cannot have a separator...\n     ( $($()* $(),* $(a)* $(a),* )* ) => {};\n     //~^ ERROR repetition matches empty token tree\n     ( $($()* $(),* $(a)* $(a),* )+ ) => {};\n     //~^ ERROR repetition matches empty token tree\n-\n+    ( $($()* $(),* $(a)* $(a),* )? ) => {};\n+    //~^ ERROR repetition matches empty token tree\n+    ( $($()? $(),* $(a)? $(a),* )* ) => {};\n+    //~^ ERROR repetition matches empty token tree\n+    ( $($()? $(),* $(a)? $(a),* )+ ) => {};\n+    //~^ ERROR repetition matches empty token tree\n+    ( $($()? $(),* $(a)? $(a),* )? ) => {};\n+    //~^ ERROR repetition matches empty token tree\n     ( $(a     $(),* $(a)* $(a),* )* ) => {}; // PASS\n     ( $($(a)+ $(),* $(a)* $(a),* )+ ) => {}; // PASS\n+    ( $($(a)+ $(),* $(a)* $(a),* )? ) => {}; // PASS\n+\n+    ( $(a     $(),* $(a)? $(a),* )* ) => {}; // PASS\n+    ( $($(a)+ $(),* $(a)? $(a),* )+ ) => {}; // PASS\n+    ( $($(a)+ $(),* $(a)? $(a),* )? ) => {}; // PASS\n \n     ( $(a $()+)* ) => {};\n     //~^ ERROR repetition matches empty token tree\n     ( $(a $()*)+ ) => {};\n     //~^ ERROR repetition matches empty token tree\n+    ( $(a $()+)? ) => {};\n+    //~^ ERROR repetition matches empty token tree\n+    ( $(a $()?)+ ) => {};\n+    //~^ ERROR repetition matches empty token tree\n }\n \n-\n // --- Original Issue --- //\n \n macro_rules! make_vec {\n@@ -43,11 +65,10 @@ fn main() {\n     let _ = make_vec![a 1, a 2, a 3];\n }\n \n-\n // --- Minified Issue --- //\n \n macro_rules! m {\n-    ( $()* ) => {}\n+    ( $()* ) => {};\n     //~^ ERROR repetition matches empty token tree\n }\n "}, {"sha": "7ffc6071407c5e6b411993d019512cf95227e9fd", "filename": "src/test/ui/issues/issue-5067.stderr", "status": "modified", "additions": 60, "deletions": 12, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Fissues%2Fissue-5067.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Fissues%2Fissue-5067.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5067.stderr?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -1,62 +1,110 @@\n error: repetition matches empty token tree\n-  --> $DIR/issue-5067.rs:4:8\n+  --> $DIR/issue-5067.rs:9:8\n    |\n LL |     ( $()* ) => {};\n    |        ^^\n \n error: repetition matches empty token tree\n-  --> $DIR/issue-5067.rs:6:8\n+  --> $DIR/issue-5067.rs:11:8\n    |\n LL |     ( $()+ ) => {};\n    |        ^^\n \n error: repetition matches empty token tree\n-  --> $DIR/issue-5067.rs:12:9\n+  --> $DIR/issue-5067.rs:13:8\n+   |\n+LL |     ( $()? ) => {};\n+   |        ^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-5067.rs:18:9\n    |\n LL |     ( [$()*] ) => {};\n    |         ^^\n \n error: repetition matches empty token tree\n-  --> $DIR/issue-5067.rs:14:9\n+  --> $DIR/issue-5067.rs:20:9\n    |\n LL |     ( [$()+] ) => {};\n    |         ^^\n \n error: repetition matches empty token tree\n-  --> $DIR/issue-5067.rs:20:8\n+  --> $DIR/issue-5067.rs:22:9\n+   |\n+LL |     ( [$()?] ) => {};\n+   |         ^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-5067.rs:27:8\n    |\n LL |     ( $($()* $(),* $(a)* $(a),* )* ) => {};\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: repetition matches empty token tree\n-  --> $DIR/issue-5067.rs:22:8\n+  --> $DIR/issue-5067.rs:29:8\n    |\n LL |     ( $($()* $(),* $(a)* $(a),* )+ ) => {};\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: repetition matches empty token tree\n-  --> $DIR/issue-5067.rs:28:12\n+  --> $DIR/issue-5067.rs:31:8\n+   |\n+LL |     ( $($()* $(),* $(a)* $(a),* )? ) => {};\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-5067.rs:33:8\n+   |\n+LL |     ( $($()? $(),* $(a)? $(a),* )* ) => {};\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-5067.rs:35:8\n+   |\n+LL |     ( $($()? $(),* $(a)? $(a),* )+ ) => {};\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-5067.rs:37:8\n+   |\n+LL |     ( $($()? $(),* $(a)? $(a),* )? ) => {};\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-5067.rs:47:12\n    |\n LL |     ( $(a $()+)* ) => {};\n    |            ^^\n \n error: repetition matches empty token tree\n-  --> $DIR/issue-5067.rs:30:12\n+  --> $DIR/issue-5067.rs:49:12\n    |\n LL |     ( $(a $()*)+ ) => {};\n    |            ^^\n \n error: repetition matches empty token tree\n-  --> $DIR/issue-5067.rs:38:18\n+  --> $DIR/issue-5067.rs:51:12\n+   |\n+LL |     ( $(a $()+)? ) => {};\n+   |            ^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-5067.rs:53:12\n+   |\n+LL |     ( $(a $()?)+ ) => {};\n+   |            ^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-5067.rs:60:18\n    |\n LL |     (a $e1:expr $($(, a $e2:expr)*)*) => ([$e1 $($(, $e2)*)*]);\n    |                  ^^^^^^^^^^^^^^^^^^\n \n error: repetition matches empty token tree\n-  --> $DIR/issue-5067.rs:50:8\n+  --> $DIR/issue-5067.rs:71:8\n    |\n-LL |     ( $()* ) => {}\n+LL |     ( $()* ) => {};\n    |        ^^\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 18 previous errors\n "}, {"sha": "ebeb3fe07adb4401d660066d9e22102e6475a896", "filename": "src/test/ui/issues/issue-57597.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Fissues%2Fissue-57597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Fissues%2Fissue-57597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57597.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -0,0 +1,80 @@\n+// Regression test for #57597.\n+//\n+// Make sure that nested matchers work correctly rather than causing an infinite loop or crash.\n+\n+// edition:2018\n+\n+macro_rules! foo1 {\n+    ($($($i:ident)?)+) => {};\n+    //~^ ERROR repetition matches empty token tree\n+}\n+\n+macro_rules! foo2 {\n+    ($($($i:ident)?)*) => {};\n+    //~^ ERROR repetition matches empty token tree\n+}\n+\n+macro_rules! foo3 {\n+    ($($($i:ident)?)?) => {};\n+    //~^ ERROR repetition matches empty token tree\n+}\n+\n+macro_rules! foo4 {\n+    ($($($($i:ident)?)?)?) => {};\n+    //~^ ERROR repetition matches empty token tree\n+}\n+\n+macro_rules! foo5 {\n+    ($($($($i:ident)*)?)?) => {};\n+    //~^ ERROR repetition matches empty token tree\n+}\n+\n+macro_rules! foo6 {\n+    ($($($($i:ident)?)*)?) => {};\n+    //~^ ERROR repetition matches empty token tree\n+}\n+\n+macro_rules! foo7 {\n+    ($($($($i:ident)?)?)*) => {};\n+    //~^ ERROR repetition matches empty token tree\n+}\n+\n+macro_rules! foo8 {\n+    ($($($($i:ident)*)*)?) => {};\n+    //~^ ERROR repetition matches empty token tree\n+}\n+\n+macro_rules! foo9 {\n+    ($($($($i:ident)?)*)*) => {};\n+    //~^ ERROR repetition matches empty token tree\n+}\n+\n+macro_rules! foo10 {\n+    ($($($($i:ident)?)*)+) => {};\n+    //~^ ERROR repetition matches empty token tree\n+}\n+\n+macro_rules! foo11 {\n+    ($($($($i:ident)+)?)*) => {};\n+    //~^ ERROR repetition matches empty token tree\n+}\n+\n+macro_rules! foo12 {\n+    ($($($($i:ident)+)*)?) => {};\n+    //~^ ERROR repetition matches empty token tree\n+}\n+\n+fn main() {\n+    foo1!();\n+    foo2!();\n+    foo3!();\n+    foo4!();\n+    foo5!();\n+    foo6!();\n+    foo7!();\n+    foo8!();\n+    foo9!();\n+    foo10!();\n+    foo11!();\n+    foo12!();\n+}"}, {"sha": "0a02ac8c499b690efb4c184665be4af02470090c", "filename": "src/test/ui/issues/issue-57597.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Fissues%2Fissue-57597.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Fissues%2Fissue-57597.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57597.stderr?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -0,0 +1,74 @@\n+error: repetition matches empty token tree\n+  --> $DIR/issue-57597.rs:8:7\n+   |\n+LL |     ($($($i:ident)?)+) => {};\n+   |       ^^^^^^^^^^^^^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-57597.rs:13:7\n+   |\n+LL |     ($($($i:ident)?)*) => {};\n+   |       ^^^^^^^^^^^^^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-57597.rs:18:7\n+   |\n+LL |     ($($($i:ident)?)?) => {};\n+   |       ^^^^^^^^^^^^^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-57597.rs:23:7\n+   |\n+LL |     ($($($($i:ident)?)?)?) => {};\n+   |       ^^^^^^^^^^^^^^^^^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-57597.rs:28:7\n+   |\n+LL |     ($($($($i:ident)*)?)?) => {};\n+   |       ^^^^^^^^^^^^^^^^^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-57597.rs:33:7\n+   |\n+LL |     ($($($($i:ident)?)*)?) => {};\n+   |       ^^^^^^^^^^^^^^^^^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-57597.rs:38:7\n+   |\n+LL |     ($($($($i:ident)?)?)*) => {};\n+   |       ^^^^^^^^^^^^^^^^^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-57597.rs:43:7\n+   |\n+LL |     ($($($($i:ident)*)*)?) => {};\n+   |       ^^^^^^^^^^^^^^^^^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-57597.rs:48:7\n+   |\n+LL |     ($($($($i:ident)?)*)*) => {};\n+   |       ^^^^^^^^^^^^^^^^^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-57597.rs:53:7\n+   |\n+LL |     ($($($($i:ident)?)*)+) => {};\n+   |       ^^^^^^^^^^^^^^^^^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-57597.rs:58:7\n+   |\n+LL |     ($($($($i:ident)+)?)*) => {};\n+   |       ^^^^^^^^^^^^^^^^^^\n+\n+error: repetition matches empty token tree\n+  --> $DIR/issue-57597.rs:63:7\n+   |\n+LL |     ($($($($i:ident)+)*)?) => {};\n+   |       ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "295f8acf62f8539c6f134391c233f07502a00ad7", "filename": "src/test/ui/type-alias-enum-variants-priority-2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-2.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -0,0 +1,13 @@\n+#![feature(type_alias_enum_variants)]\n+\n+enum E {\n+    V(u8)\n+}\n+\n+impl E {\n+    fn V() {}\n+}\n+\n+fn main() {\n+    <E>::V(); //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n+}"}, {"sha": "c6ec96ebb7d3b6e0b24d7ddf6d2431a4bf5ccb44", "filename": "src/test/ui/type-alias-enum-variants-priority-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-2.stderr?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -0,0 +1,12 @@\n+error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+  --> $DIR/type-alias-enum-variants-priority-2.rs:12:5\n+   |\n+LL |     V(u8)\n+   |     ----- defined here\n+...\n+LL |     <E>::V(); //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n+   |     ^^^^^^^^ expected 1 parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "33f96553b57f03a79b9d16c39edec315bb61710f", "filename": "src/test/ui/type-alias-enum-variants-priority-3.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-3.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -0,0 +1,10 @@\n+#![feature(type_alias_enum_variants)]\n+\n+enum E {\n+    V\n+}\n+\n+fn check() -> <E>::V {}\n+//~^ ERROR expected type, found variant `V`\n+\n+fn main() {}"}, {"sha": "b3451542a2570ccd7634f2d9b185f92094688a80", "filename": "src/test/ui/type-alias-enum-variants-priority-3.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-3.stderr?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -0,0 +1,8 @@\n+error: expected type, found variant `V`\n+  --> $DIR/type-alias-enum-variants-priority-3.rs:7:15\n+   |\n+LL | fn check() -> <E>::V {}\n+   |               ^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "db1da2b12e256645b03babf708c1905f22943d8b", "filename": "src/test/ui/type-alias-enum-variants-priority.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority.rs?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -0,0 +1,20 @@\n+#![feature(type_alias_enum_variants)]\n+#![deny(ambiguous_associated_items)]\n+\n+enum E {\n+    V\n+}\n+\n+trait Tr {\n+    type V;\n+    fn f() -> Self::V;\n+}\n+\n+impl Tr for E {\n+    type V = u8;\n+    fn f() -> Self::V { 0 }\n+    //~^ ERROR ambiguous associated item\n+    //~| WARN this was previously accepted\n+}\n+\n+fn main() {}"}, {"sha": "dcf7dc77ed5eab21fa4ab01eb343aaf198cb2129", "filename": "src/test/ui/type-alias-enum-variants-priority.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c87144f3caf9a1580e8734d4d1604e723a5bd6e6/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority.stderr?ref=c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "patch": "@@ -0,0 +1,26 @@\n+error: ambiguous associated item\n+  --> $DIR/type-alias-enum-variants-priority.rs:15:15\n+   |\n+LL |     fn f() -> Self::V { 0 }\n+   |               ^^^^^^^ help: use fully-qualified syntax: `<E as Trait>::V`\n+   |\n+note: lint level defined here\n+  --> $DIR/type-alias-enum-variants-priority.rs:2:9\n+   |\n+LL | #![deny(ambiguous_associated_items)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #57644 <https://github.com/rust-lang/rust/issues/57644>\n+note: `V` could refer to variant defined here\n+  --> $DIR/type-alias-enum-variants-priority.rs:5:5\n+   |\n+LL |     V\n+   |     ^\n+note: `V` could also refer to associated type defined here\n+  --> $DIR/type-alias-enum-variants-priority.rs:9:5\n+   |\n+LL |     type V;\n+   |     ^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}