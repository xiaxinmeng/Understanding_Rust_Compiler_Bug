{"sha": "8a6ff90a3a41e6ace18aeb089ea0a0eb3726dd08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNmZmOTBhM2E0MWU2YWNlMThhZWIwODllYTBhMGViMzcyNmRkMDg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-28T12:54:05Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-28T12:54:31Z"}, "message": "Use __muloti4 instead of __rust_i128_mulo\n\nFixes #1126", "tree": {"sha": "e954a76dc3d388df5b323a1daec44e74b6d23d71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e954a76dc3d388df5b323a1daec44e74b6d23d71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a6ff90a3a41e6ace18aeb089ea0a0eb3726dd08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6ff90a3a41e6ace18aeb089ea0a0eb3726dd08", "html_url": "https://github.com/rust-lang/rust/commit/8a6ff90a3a41e6ace18aeb089ea0a0eb3726dd08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a6ff90a3a41e6ace18aeb089ea0a0eb3726dd08/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4ba61eee573888b9723df5d2c3c2f7a0143fe80", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ba61eee573888b9723df5d2c3c2f7a0143fe80", "html_url": "https://github.com/rust-lang/rust/commit/f4ba61eee573888b9723df5d2c3c2f7a0143fe80"}], "stats": {"total": 65, "additions": 44, "deletions": 21}, "files": [{"sha": "638b2d573b5ddbe00ae715e12417cde097f12072", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 44, "deletions": 21, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/8a6ff90a3a41e6ace18aeb089ea0a0eb3726dd08/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a6ff90a3a41e6ace18aeb089ea0a0eb3726dd08/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=8a6ff90a3a41e6ace18aeb089ea0a0eb3726dd08", "patch": "@@ -27,29 +27,53 @@ pub(crate) fn maybe_codegen<'tcx>(\n             None\n         }\n         BinOp::Add | BinOp::Sub if !checked => None,\n-        BinOp::Mul if !checked => {\n-            let val_ty = if is_signed { fx.tcx.types.i128 } else { fx.tcx.types.u128 };\n-            if fx.tcx.sess.target.is_like_windows {\n-                let ret_place = CPlace::new_stack_slot(fx, lhs.layout());\n-                let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);\n-                let (rhs_ptr, rhs_extra) = rhs.force_stack(fx);\n-                assert!(lhs_extra.is_none());\n-                assert!(rhs_extra.is_none());\n-                let args =\n-                    [ret_place.to_ptr().get_addr(fx), lhs_ptr.get_addr(fx), rhs_ptr.get_addr(fx)];\n-                fx.lib_call(\n-                    \"__multi3\",\n+        BinOp::Mul if !checked || is_signed => {\n+            if !checked {\n+                let val_ty = if is_signed { fx.tcx.types.i128 } else { fx.tcx.types.u128 };\n+                if fx.tcx.sess.target.is_like_windows {\n+                    let ret_place = CPlace::new_stack_slot(fx, lhs.layout());\n+                    let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);\n+                    let (rhs_ptr, rhs_extra) = rhs.force_stack(fx);\n+                    assert!(lhs_extra.is_none());\n+                    assert!(rhs_extra.is_none());\n+                    let args = [\n+                        ret_place.to_ptr().get_addr(fx),\n+                        lhs_ptr.get_addr(fx),\n+                        rhs_ptr.get_addr(fx),\n+                    ];\n+                    fx.lib_call(\n+                        \"__multi3\",\n+                        vec![\n+                            AbiParam::special(fx.pointer_type, ArgumentPurpose::StructReturn),\n+                            AbiParam::new(fx.pointer_type),\n+                            AbiParam::new(fx.pointer_type),\n+                        ],\n+                        vec![],\n+                        &args,\n+                    );\n+                    Some(ret_place.to_cvalue(fx))\n+                } else {\n+                    Some(fx.easy_call(\"__multi3\", &[lhs, rhs], val_ty))\n+                }\n+            } else {\n+                let out_ty = fx.tcx.mk_tup([lhs.layout().ty, fx.tcx.types.bool].iter());\n+                let oflow = CPlace::new_stack_slot(fx, fx.layout_of(fx.tcx.types.i32));\n+                let lhs = lhs.load_scalar(fx);\n+                let rhs = rhs.load_scalar(fx);\n+                let oflow_ptr = oflow.to_ptr().get_addr(fx);\n+                let res = fx.lib_call(\n+                    \"__muloti4\",\n                     vec![\n-                        AbiParam::special(fx.pointer_type, ArgumentPurpose::StructReturn),\n-                        AbiParam::new(fx.pointer_type),\n+                        AbiParam::new(types::I128),\n+                        AbiParam::new(types::I128),\n                         AbiParam::new(fx.pointer_type),\n                     ],\n-                    vec![],\n-                    &args,\n-                );\n-                Some(ret_place.to_cvalue(fx))\n-            } else {\n-                Some(fx.easy_call(\"__multi3\", &[lhs, rhs], val_ty))\n+                    vec![AbiParam::new(types::I128)],\n+                    &[lhs, rhs, oflow_ptr],\n+                )[0];\n+                let oflow = oflow.to_cvalue(fx).load_scalar(fx);\n+                let oflow = fx.bcx.ins().ireduce(types::I8, oflow);\n+                Some(CValue::by_val_pair(res, oflow, fx.layout_of(out_ty)))\n             }\n         }\n         BinOp::Add | BinOp::Sub | BinOp::Mul => {\n@@ -85,7 +109,6 @@ pub(crate) fn maybe_codegen<'tcx>(\n                 (BinOp::Sub, false) => \"__rust_u128_subo\",\n                 (BinOp::Sub, true) => \"__rust_i128_subo\",\n                 (BinOp::Mul, false) => \"__rust_u128_mulo\",\n-                (BinOp::Mul, true) => \"__rust_i128_mulo\",\n                 _ => unreachable!(),\n             };\n             fx.lib_call(name, param_types, vec![], &args);"}]}