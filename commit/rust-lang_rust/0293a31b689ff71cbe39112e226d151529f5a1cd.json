{"sha": "0293a31b689ff71cbe39112e226d151529f5a1cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyOTNhMzFiNjg5ZmY3MWNiZTM5MTEyZTIyNmQxNTE1MjlmNWExY2Q=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-29T22:29:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-30T23:01:52Z"}, "message": "Remove old sugared call syntax", "tree": {"sha": "d36d921b9f5260c8140e6306662ae821bdaf2393", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d36d921b9f5260c8140e6306662ae821bdaf2393"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0293a31b689ff71cbe39112e226d151529f5a1cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0293a31b689ff71cbe39112e226d151529f5a1cd", "html_url": "https://github.com/rust-lang/rust/commit/0293a31b689ff71cbe39112e226d151529f5a1cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0293a31b689ff71cbe39112e226d151529f5a1cd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3382b6f26e582210a3b649c9a71badaef0530bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3382b6f26e582210a3b649c9a71badaef0530bf", "html_url": "https://github.com/rust-lang/rust/commit/a3382b6f26e582210a3b649c9a71badaef0530bf"}], "stats": {"total": 47, "additions": 19, "deletions": 28}, "files": [{"sha": "106fc26d88e75ced1e7149bdf18d38e3064bddd1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 19, "deletions": 28, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0293a31b689ff71cbe39112e226d151529f5a1cd/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0293a31b689ff71cbe39112e226d151529f5a1cd/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0293a31b689ff71cbe39112e226d151529f5a1cd", "patch": "@@ -1040,26 +1040,6 @@ class parser {\n                 e = self.mk_pexpr(lo, hi, nd);\n               }\n \n-              // expr {|| ... }\n-              token::LBRACE if (token::is_bar(self.look_ahead(1u))\n-                                && self.permits_call()) {\n-                self.bump();\n-                let blk = self.parse_fn_block_expr();\n-                alt e.node {\n-                  expr_call(f, args, false) {\n-                    e = pexpr(@{node: expr_call(f,\n-                                                vec::append(args, ~[blk]),\n-                                                true)\n-                                with *self.to_expr(e)});\n-                  }\n-                  _ {\n-                    e = self.mk_pexpr(lo, self.last_span.hi,\n-                                      expr_call(self.to_expr(e),\n-                                                ~[blk], true));\n-                  }\n-                }\n-              }\n-\n               // expr[...]\n               token::LBRACKET {\n                 self.bump();\n@@ -1387,16 +1367,27 @@ class parser {\n     fn parse_sugary_call_expr(keyword: str,\n                               ctor: fn(+@expr) -> expr_) -> @expr {\n         let lo = self.last_span;\n-        let call = self.parse_expr_res(RESTRICT_STMT_EXPR);\n-        alt call.node {\n-          expr_call(f, args, true) {\n-            let b_arg = vec::last(args);\n-            let last = self.mk_expr(b_arg.span.lo, b_arg.span.hi,\n-                                    ctor(b_arg));\n-            @{node: expr_call(f, vec::append(vec::init(args), ~[last]), true)\n-              with *call}\n+        let e = self.parse_expr_res(RESTRICT_STMT_EXPR);\n+        alt e.node {\n+          expr_call(f, args, false) {\n+            self.expect(token::LBRACE);\n+            let block = self.parse_fn_block_expr();\n+            let last_arg = self.mk_expr(block.span.lo, block.span.hi,\n+                                    ctor(block));\n+            let args = vec::append(args, ~[last_arg]);\n+            @{node: expr_call(f, args, true)\n+              with *e}\n+          }\n+          expr_path(*) | expr_field(*) | expr_call(*) {\n+            self.expect(token::LBRACE);\n+            let block = self.parse_fn_block_expr();\n+            let last_arg = self.mk_expr(block.span.lo, block.span.hi,\n+                                    ctor(block));\n+            self.mk_expr(lo.lo, last_arg.span.hi,\n+                         expr_call(e, ~[last_arg], true))\n           }\n           _ {\n+            self.warn(#fmt(\"unexpected sugary call %?\", e.node));\n             self.span_fatal(\n                 lo, #fmt(\"`%s` must be followed by a block call\", keyword));\n           }"}]}