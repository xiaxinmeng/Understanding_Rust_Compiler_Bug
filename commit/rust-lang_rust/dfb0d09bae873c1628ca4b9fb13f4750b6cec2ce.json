{"sha": "dfb0d09bae873c1628ca4b9fb13f4750b6cec2ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYjBkMDliYWU4NzNjMTYyOGNhNGI5ZmIxM2Y0NzUwYjZjZWMyY2U=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-23T09:26:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-23T09:26:33Z"}, "message": "Rollup merge of #78163 - camelid:fixup-lib-docs, r=m-ou-se\n\nClean up lib docs\n\nCherry-picked out of #78094.", "tree": {"sha": "a3bf06ab4cefcb96e782acf245faab905d4f5f5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3bf06ab4cefcb96e782acf245faab905d4f5f5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfb0d09bae873c1628ca4b9fb13f4750b6cec2ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfkqHKCRBK7hj4Ov3rIwAAdHIIADRuZyO+n9ilygybZw2awKWE\nYhDs0IjtffnxLf/LXofPl22OW0UXL1qRLooGvLIutS83rbDnHV5N/IVVj01HDpph\nlRgXSzgkcXIop2vUgwJ9NFW81yZev+NVyckCVWa6vgONYAG618FKLLTG+EeiVR/j\nOCmo2hduKpYhcDrtufyGQ0X4aBc3qAf+ZJykyUOetLGIemo+6GtO4I7yKrI0awK+\nFgcrkMNxW5NNo0oFhhn/+lG2Egn+B2BBvpufhJSVThWH0h/jZBk11bBmmoFMdzzc\nLxTx7RQIfj3asxxrONqKk2sOtNnPoCTKzgDkLX38me2D1jHtygPCrumxywNhm5M=\n=IjU3\n-----END PGP SIGNATURE-----\n", "payload": "tree a3bf06ab4cefcb96e782acf245faab905d4f5f5e\nparent 025481a5eb519f3f9e34e61cd67bbbcc2591e1a8\nparent 13bc087a73e6a5bf500b7f52cf391ca4df98841f\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603445193 +0900\ncommitter GitHub <noreply@github.com> 1603445193 +0900\n\nRollup merge of #78163 - camelid:fixup-lib-docs, r=m-ou-se\n\nClean up lib docs\n\nCherry-picked out of #78094.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb0d09bae873c1628ca4b9fb13f4750b6cec2ce", "html_url": "https://github.com/rust-lang/rust/commit/dfb0d09bae873c1628ca4b9fb13f4750b6cec2ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfb0d09bae873c1628ca4b9fb13f4750b6cec2ce/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "025481a5eb519f3f9e34e61cd67bbbcc2591e1a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/025481a5eb519f3f9e34e61cd67bbbcc2591e1a8", "html_url": "https://github.com/rust-lang/rust/commit/025481a5eb519f3f9e34e61cd67bbbcc2591e1a8"}, {"sha": "13bc087a73e6a5bf500b7f52cf391ca4df98841f", "url": "https://api.github.com/repos/rust-lang/rust/commits/13bc087a73e6a5bf500b7f52cf391ca4df98841f", "html_url": "https://github.com/rust-lang/rust/commit/13bc087a73e6a5bf500b7f52cf391ca4df98841f"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "72ed036637d8b074d512b7ab728671c3489e6ba0", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dfb0d09bae873c1628ca4b9fb13f4750b6cec2ce/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb0d09bae873c1628ca4b9fb13f4750b6cec2ce/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=dfb0d09bae873c1628ca4b9fb13f4750b6cec2ce", "patch": "@@ -1,8 +1,8 @@\n-//! A UTF-8 encoded, growable string.\n+//! A UTF-8\u2013encoded, growable string.\n //!\n-//! This module contains the [`String`] type, a trait for converting\n-//! [`ToString`]s, and several error types that may result from working with\n-//! [`String`]s.\n+//! This module contains the [`String`] type, the [`ToString`] trait for\n+//! converting to strings, and several error types that may result from\n+//! working with [`String`]s.\n //!\n //! # Examples\n //!\n@@ -57,7 +57,7 @@ use crate::collections::TryReserveError;\n use crate::str::{self, from_boxed_utf8_unchecked, Chars, FromStr, Utf8Error};\n use crate::vec::Vec;\n \n-/// A UTF-8 encoded, growable string.\n+/// A UTF-8\u2013encoded, growable string.\n ///\n /// The `String` type is the most common string type that has ownership over the\n /// contents of the string. It has a close relationship with its borrowed\n@@ -565,7 +565,7 @@ impl String {\n         Cow::Owned(res)\n     }\n \n-    /// Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`]\n+    /// Decode a UTF-16\u2013encoded vector `v` into a `String`, returning [`Err`]\n     /// if `v` contains any invalid data.\n     ///\n     /// # Examples\n@@ -599,7 +599,7 @@ impl String {\n         Ok(ret)\n     }\n \n-    /// Decode a UTF-16 encoded slice `v` into a `String`, replacing\n+    /// Decode a UTF-16\u2013encoded slice `v` into a `String`, replacing\n     /// invalid data with [the replacement character (`U+FFFD`)][U+FFFD].\n     ///\n     /// Unlike [`from_utf8_lossy`] which returns a [`Cow<'a, str>`],\n@@ -2191,8 +2191,9 @@ pub trait ToString {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: fmt::Display + ?Sized> ToString for T {\n     // A common guideline is to not inline generic functions. However,\n-    // remove `#[inline]` from this method causes non-negligible regression.\n-    // See <https://github.com/rust-lang/rust/pull/74852> as last attempt try to remove it.\n+    // removing `#[inline]` from this method causes non-negligible regressions.\n+    // See <https://github.com/rust-lang/rust/pull/74852>, the last attempt\n+    // to try to remove it.\n     #[inline]\n     default fn to_string(&self) -> String {\n         use fmt::Write;"}]}