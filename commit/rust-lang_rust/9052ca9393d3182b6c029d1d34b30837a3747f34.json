{"sha": "9052ca9393d3182b6c029d1d34b30837a3747f34", "node_id": "C_kwDOAAsO6NoAKDkwNTJjYTkzOTNkMzE4MmI2YzAyOWQxZDM0YjMwODM3YTM3NDdmMzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T07:14:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T07:14:23Z"}, "message": "Auto merge of #111710 - Dylan-DPC:rollup-eutrx54, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #110884 (Support RISC-V unaligned-scalar-mem target feature)\n - #111160 (Update serde in workspace and non-synced dependencies)\n - #111168 (Specialize ToString implementation for fmt::Arguments)\n - #111527 (add examples of port 0 binding behavior)\n - #111561 (Include better context for \"already exists\" error in compiletest)\n - #111633 (Avoid `&format(\"...\")` calls in error message code.)\n - #111679 (Remove libs message about ACPs from triagebot)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9216cc90ab142304d97012258271d55061eae5ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9216cc90ab142304d97012258271d55061eae5ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9052ca9393d3182b6c029d1d34b30837a3747f34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9052ca9393d3182b6c029d1d34b30837a3747f34", "html_url": "https://github.com/rust-lang/rust/commit/9052ca9393d3182b6c029d1d34b30837a3747f34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9052ca9393d3182b6c029d1d34b30837a3747f34/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77c836e1ae582661924d3b6ec4d57a2de120f59f", "url": "https://api.github.com/repos/rust-lang/rust/commits/77c836e1ae582661924d3b6ec4d57a2de120f59f", "html_url": "https://github.com/rust-lang/rust/commit/77c836e1ae582661924d3b6ec4d57a2de120f59f"}, {"sha": "79090885b016562845065efa1fef11dc14357197", "url": "https://api.github.com/repos/rust-lang/rust/commits/79090885b016562845065efa1fef11dc14357197", "html_url": "https://github.com/rust-lang/rust/commit/79090885b016562845065efa1fef11dc14357197"}], "stats": {"total": 376, "additions": 189, "deletions": 187}, "files": [{"sha": "f4510aa913098091f4348ba1db5200618685bd41", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -723,6 +723,7 @@ dependencies = [\n name = \"compiletest\"\n version = \"0.0.0\"\n dependencies = [\n+ \"anyhow\",\n  \"build_helper\",\n  \"colored\",\n  \"diff\",\n@@ -2695,9 +2696,9 @@ checksum = \"dbf0c48bc1d91375ae5c3cd81e3722dff1abcf81a30960240640d223f59fe0e5\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.53\"\n+version = \"1.0.56\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ba466839c78239c09faf015484e5cc04860f88242cff4d03eb038f04b4699b73\"\n+checksum = \"2b63bdb0cd06f1f4dedf69b254734f9b45af66e4a031e42a7480257d9898b435\"\n dependencies = [\n  \"unicode-ident\",\n ]\n@@ -4477,18 +4478,18 @@ dependencies = [\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.159\"\n+version = \"1.0.160\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3c04e8343c3daeec41f58990b9d77068df31209f2af111e059e9fe9646693065\"\n+checksum = \"bb2f3770c8bce3bcda7e149193a069a0f4365bda1fa5cd88e03bca26afc1216c\"\n dependencies = [\n  \"serde_derive\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.159\"\n+version = \"1.0.160\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4c614d17805b093df4b147b51339e7e44bf05ef59fba1e45d83500bcfb4d8585\"\n+checksum = \"291a097c63d8497e00160b166a967a4a79c64f3facdd01cbd7502231688d77df\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\","}, {"sha": "f11c1c77f9cfc30a180ae8f3f669105dc22804af", "filename": "compiler/rustc_abi/src/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flayout.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -12,7 +12,7 @@ use tracing::debug;\n pub trait LayoutCalculator {\n     type TargetDataLayoutRef: Borrow<TargetDataLayout>;\n \n-    fn delay_bug(&self, txt: &str);\n+    fn delay_bug(&self, txt: String);\n     fn current_data_layout(&self) -> Self::TargetDataLayoutRef;\n \n     fn scalar_pair(&self, a: Scalar, b: Scalar) -> LayoutS {\n@@ -969,7 +969,7 @@ fn univariant(\n     for &i in &inverse_memory_index {\n         let field = &fields[i];\n         if !sized {\n-            this.delay_bug(&format!(\n+            this.delay_bug(format!(\n                 \"univariant: field #{} comes after unsized field\",\n                 offsets.len(),\n             ));"}, {"sha": "b6ccf924a5c88ec19ccf537c042fe9d34d72b35f", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -430,7 +430,7 @@ pub(super) fn dump_annotation<'tcx>(\n fn for_each_region_constraint<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     closure_region_requirements: &ClosureRegionRequirements<'tcx>,\n-    with_msg: &mut dyn FnMut(&str) -> io::Result<()>,\n+    with_msg: &mut dyn FnMut(String) -> io::Result<()>,\n ) -> io::Result<()> {\n     for req in &closure_region_requirements.outlives_requirements {\n         let subject = match req.subject {\n@@ -439,7 +439,7 @@ fn for_each_region_constraint<'tcx>(\n                 format!(\"{:?}\", ty.instantiate(tcx, |vid| tcx.mk_re_var(vid)))\n             }\n         };\n-        with_msg(&format!(\"where {}: {:?}\", subject, req.outlived_free_region,))?;\n+        with_msg(format!(\"where {}: {:?}\", subject, req.outlived_free_region,))?;\n     }\n     Ok(())\n }"}, {"sha": "fa4bc926f273916806c823c73b1e03f1e60e4287", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -71,7 +71,7 @@ macro_rules! span_mirbug {\n         $crate::type_check::mirbug(\n             $context.tcx(),\n             $context.last_span,\n-            &format!(\n+            format!(\n                 \"broken MIR in {:?} ({:?}): {}\",\n                 $context.body().source.def_id(),\n                 $elem,\n@@ -274,7 +274,7 @@ fn translate_outlives_facts(typeck: &mut TypeChecker<'_, '_>) {\n }\n \n #[track_caller]\n-fn mirbug(tcx: TyCtxt<'_>, span: Span, msg: &str) {\n+fn mirbug(tcx: TyCtxt<'_>, span: Span, msg: String) {\n     // We sometimes see MIR failures (notably predicate failures) due to\n     // the fact that we check rvalue sized predicates here. So use `delay_span_bug`\n     // to avoid reporting bugs in those cases."}, {"sha": "5217e317adfee7898ca63c950b80dccc86aaaff8", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -550,7 +550,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n         if !parser.errors.is_empty() {\n             let err = parser.errors.remove(0);\n             let err_sp = template_span.from_inner(InnerSpan::new(err.span.start, err.span.end));\n-            let msg = &format!(\"invalid asm template string: {}\", err.description);\n+            let msg = format!(\"invalid asm template string: {}\", err.description);\n             let mut e = ecx.struct_span_err(err_sp, msg);\n             e.span_label(err_sp, err.label + \" in asm template string\");\n             if let Some(note) = err.note {\n@@ -585,7 +585,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                                 || args.reg_args.contains(idx)\n                             {\n                                 let msg = format!(\"invalid reference to argument at index {}\", idx);\n-                                let mut err = ecx.struct_span_err(span, &msg);\n+                                let mut err = ecx.struct_span_err(span, msg);\n                                 err.span_label(span, \"from here\");\n \n                                 let positional_args = args.operands.len()\n@@ -638,7 +638,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                                     ecx.struct_span_err(\n                                         template_span\n                                             .from_inner(InnerSpan::new(span.start, span.end)),\n-                                        &msg,\n+                                        msg,\n                                     )\n                                     .emit();\n                                     None"}, {"sha": "9883563746e905f172ad3a387deb99b1885dbbf8", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -145,7 +145,7 @@ fn cs_clone_simple(\n             }\n             _ => cx.span_bug(\n                 trait_span,\n-                &format!(\"unexpected substructure in simple `derive({})`\", name),\n+                format!(\"unexpected substructure in simple `derive({})`\", name),\n             ),\n         }\n     }\n@@ -179,10 +179,10 @@ fn cs_clone(\n             vdata = &variant.data;\n         }\n         EnumTag(..) | AllFieldlessEnum(..) => {\n-            cx.span_bug(trait_span, &format!(\"enum tags in `derive({})`\", name,))\n+            cx.span_bug(trait_span, format!(\"enum tags in `derive({})`\", name,))\n         }\n         StaticEnum(..) | StaticStruct(..) => {\n-            cx.span_bug(trait_span, &format!(\"associated function in `derive({})`\", name))\n+            cx.span_bug(trait_span, format!(\"associated function in `derive({})`\", name))\n         }\n     }\n \n@@ -194,7 +194,7 @@ fn cs_clone(\n                     let Some(ident) = field.name else {\n                         cx.span_bug(\n                             trait_span,\n-                            &format!(\"unnamed field in normal struct in `derive({})`\", name,),\n+                            format!(\"unnamed field in normal struct in `derive({})`\", name,),\n                         );\n                     };\n                     let call = subcall(cx, field);"}, {"sha": "4ba09335cb7abfe961631ad5234889ca6a475ef7", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -1591,7 +1591,7 @@ impl<'a> TraitDef<'a> {\n                                 BYTE_SLICE_IN_PACKED_STRUCT_WITH_DERIVE,\n                                 sp,\n                                 ast::CRATE_NODE_ID,\n-                                &format!(\n+                                format!(\n                                     \"{} slice in a packed struct that derives a built-in trait\",\n                                     ty\n                                 ),"}, {"sha": "c59a733c05568974757c0f92773cf748ac2bee4c", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -814,7 +814,7 @@ fn report_invalid_references(\n         };\n         e = ecx.struct_span_err(\n             span,\n-            &format!(\"invalid reference to positional {} ({})\", arg_list, num_args_desc),\n+            format!(\"invalid reference to positional {} ({})\", arg_list, num_args_desc),\n         );\n         e.note(\"positional arguments are zero-based\");\n     }"}, {"sha": "e613b904d2eaf66439115ddb07f72b9cb93a29b4", "filename": "compiler/rustc_builtin_macros/src/source_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -188,12 +188,12 @@ pub fn expand_include_str(\n                 base::MacEager::expr(cx.expr_str(sp, interned_src))\n             }\n             Err(_) => {\n-                cx.span_err(sp, &format!(\"{} wasn't a utf-8 file\", file.display()));\n+                cx.span_err(sp, format!(\"{} wasn't a utf-8 file\", file.display()));\n                 DummyResult::any(sp)\n             }\n         },\n         Err(e) => {\n-            cx.span_err(sp, &format!(\"couldn't read {}: {}\", file.display(), e));\n+            cx.span_err(sp, format!(\"couldn't read {}: {}\", file.display(), e));\n             DummyResult::any(sp)\n         }\n     }\n@@ -221,7 +221,7 @@ pub fn expand_include_bytes(\n             base::MacEager::expr(expr)\n         }\n         Err(e) => {\n-            cx.span_err(sp, &format!(\"couldn't read {}: {}\", file.display(), e));\n+            cx.span_err(sp, format!(\"couldn't read {}: {}\", file.display(), e));\n             DummyResult::any(sp)\n         }\n     }"}, {"sha": "1007b33eca42d73aa787779cac302f09d70c07b8", "filename": "compiler/rustc_codegen_cranelift/src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -227,7 +227,7 @@ pub(crate) fn write_ir_file(\n         // Using early_warn as no Session is available here\n         rustc_session::early_warn(\n             rustc_session::config::ErrorOutputType::default(),\n-            &format!(\"error writing ir file: {}\", err),\n+            format!(\"error writing ir file: {}\", err),\n         );\n     }\n }"}, {"sha": "c5976a65411fdd739afe6170077beb04099c4b67", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -250,6 +250,7 @@ const RISCV_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"f\", Some(sym::riscv_target_feature)),\n     (\"m\", Some(sym::riscv_target_feature)),\n     (\"relax\", Some(sym::riscv_target_feature)),\n+    (\"unaligned-scalar-mem\", Some(sym::riscv_target_feature)),\n     (\"v\", Some(sym::riscv_target_feature)),\n     (\"zba\", Some(sym::riscv_target_feature)),\n     (\"zbb\", Some(sym::riscv_target_feature)),"}, {"sha": "a713affa0991938835e8122c979a8e293d46e9c2", "filename": "compiler/rustc_driver_impl/src/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_driver_impl%2Fsrc%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_driver_impl%2Fsrc%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Fargs.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -25,7 +25,7 @@ pub fn arg_expand_all(at_args: &[String]) -> Vec<String> {\n             Ok(arg) => args.extend(arg),\n             Err(err) => rustc_session::early_error(\n                 rustc_session::config::ErrorOutputType::default(),\n-                &format!(\"Failed to load argument file: {err}\"),\n+                format!(\"Failed to load argument file: {err}\"),\n             ),\n         }\n     }"}, {"sha": "cf2ab3c2d2ad1b79be3ecc4fd750ae726271685a", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -322,7 +322,7 @@ fn run_compiler(\n             1 => panic!(\"make_input should have provided valid inputs\"),\n             _ => early_error(\n                 config.opts.error_format,\n-                &format!(\n+                format!(\n                     \"multiple input filenames provided (first two filenames are `{}` and `{}`)\",\n                     matches.free[0], matches.free[1],\n                 ),\n@@ -527,7 +527,7 @@ fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n             }\n         }\n         Err(InvalidErrorCode) => {\n-            early_error(output, &format!(\"{code} is not a valid error code\"));\n+            early_error(output, format!(\"{code} is not a valid error code\"));\n         }\n     }\n }\n@@ -1102,7 +1102,7 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n                 .map(|(flag, _)| format!(\"{e}. Did you mean `-{flag} {opt}`?\")),\n             _ => None,\n         };\n-        early_error(ErrorOutputType::default(), &msg.unwrap_or_else(|| e.to_string()));\n+        early_error(ErrorOutputType::default(), msg.unwrap_or_else(|| e.to_string()));\n     });\n \n     // For all options we just parsed, we check a few aspects:\n@@ -1250,7 +1250,7 @@ pub fn install_ice_hook(bug_report_url: &'static str, extra_info: fn(&Handler))\n         #[cfg(windows)]\n         if let Some(msg) = info.payload().downcast_ref::<String>() {\n             if msg.starts_with(\"failed printing to stdout: \") && msg.ends_with(\"(os error 232)\") {\n-                early_error_no_abort(ErrorOutputType::default(), &msg);\n+                early_error_no_abort(ErrorOutputType::default(), msg.as_str());\n                 return;\n             }\n         };\n@@ -1342,7 +1342,7 @@ pub fn init_rustc_env_logger() {\n /// other than `RUSTC_LOG`.\n pub fn init_env_logger(env: &str) {\n     if let Err(error) = rustc_log::init_env_logger(env) {\n-        early_error(ErrorOutputType::default(), &error.to_string());\n+        early_error(ErrorOutputType::default(), error.to_string());\n     }\n }\n \n@@ -1409,7 +1409,7 @@ pub fn main() -> ! {\n                 arg.into_string().unwrap_or_else(|arg| {\n                     early_error(\n                         ErrorOutputType::default(),\n-                        &format!(\"argument {i} is not valid Unicode: {arg:?}\"),\n+                        format!(\"argument {i} is not valid Unicode: {arg:?}\"),\n                     )\n                 })\n             })"}, {"sha": "fd721749066474027e4a96dc5ba87ff7130b65c6", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -15,7 +15,8 @@ use rustc_attr::{self as attr, Deprecation, Stability};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_errors::{\n-    Applicability, DiagnosticBuilder, ErrorGuaranteed, IntoDiagnostic, MultiSpan, PResult,\n+    Applicability, DiagnosticBuilder, DiagnosticMessage, ErrorGuaranteed, IntoDiagnostic,\n+    MultiSpan, PResult,\n };\n use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n use rustc_lint_defs::{BufferedEarlyLint, BuiltinLintDiagnostics, RegisteredTools};\n@@ -1110,7 +1111,7 @@ impl<'a> ExtCtxt<'a> {\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n-        msg: &str,\n+        msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         self.sess.parse_sess.span_diagnostic.struct_span_err(sp, msg)\n     }\n@@ -1132,14 +1133,14 @@ impl<'a> ExtCtxt<'a> {\n     /// Compilation will be stopped in the near future (at the end of\n     /// the macro expansion phase).\n     #[rustc_lint_diagnostics]\n-    pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n+    pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) {\n         self.sess.parse_sess.span_diagnostic.span_err(sp, msg);\n     }\n     #[rustc_lint_diagnostics]\n-    pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n+    pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) {\n         self.sess.parse_sess.span_diagnostic.span_warn(sp, msg);\n     }\n-    pub fn span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n+    pub fn span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.sess.parse_sess.span_diagnostic.span_bug(sp, msg);\n     }\n     pub fn trace_macros_diag(&mut self) {"}, {"sha": "1f77e687bb18d3b7a4ca7dfef8d90ef05f27cac9", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -1664,7 +1664,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                         &UNUSED_ATTRIBUTES,\n                         attr.span,\n                         self.cx.current_expansion.lint_node_id,\n-                        &format!(\"unused attribute `{}`\", attr_name),\n+                        format!(\"unused attribute `{}`\", attr_name),\n                         BuiltinLintDiagnostics::UnusedBuiltinAttribute {\n                             attr_name,\n                             macro_name: pprust::path_to_string(&call.path),"}, {"sha": "cb8b4899e485ce4628e2acf3b153209a0086612c", "filename": "compiler/rustc_expand/src/mbe/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -48,7 +48,7 @@ pub(super) fn failed_to_match_macro<'cx>(\n \n     let span = token.span.substitute_dummy(sp);\n \n-    let mut err = cx.struct_span_err(span, &parse_failure_msg(&token));\n+    let mut err = cx.struct_span_err(span, parse_failure_msg(&token));\n     err.span_label(span, label);\n     if !def_span.is_dummy() && !cx.source_map().is_imported(def_span) {\n         err.span_label(cx.source_map().guess_head_span(def_span), \"when calling this macro\");\n@@ -170,7 +170,7 @@ impl<'a, 'cx, 'matcher> Tracker<'matcher> for CollectTrackerAndEmitter<'a, 'cx,\n             }\n             Error(err_sp, msg) => {\n                 let span = err_sp.substitute_dummy(self.root_span);\n-                self.cx.struct_span_err(span, msg).emit();\n+                self.cx.struct_span_err(span, msg.as_str()).emit();\n                 self.result = Some(DummyResult::any(span));\n             }\n             ErrorReported(_) => self.result = Some(DummyResult::any(self.root_span)),"}, {"sha": "34f998274e99531ad6512e3eb3c7383f56030fd6", "filename": "compiler/rustc_expand/src/mbe/macro_check.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -110,7 +110,7 @@ use crate::mbe::{KleeneToken, TokenTree};\n use rustc_ast::token::{Delimiter, Token, TokenKind};\n use rustc_ast::{NodeId, DUMMY_NODE_ID};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::MultiSpan;\n+use rustc_errors::{DiagnosticMessage, MultiSpan};\n use rustc_session::lint::builtin::{META_VARIABLE_MISUSE, MISSING_FRAGMENT_SPECIFIER};\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::kw;\n@@ -593,7 +593,7 @@ fn check_ops_is_prefix(\n             return;\n         }\n     }\n-    buffer_lint(sess, span.into(), node_id, &format!(\"unknown macro variable `{}`\", name));\n+    buffer_lint(sess, span.into(), node_id, format!(\"unknown macro variable `{}`\", name));\n }\n \n /// Returns whether `binder_ops` is a prefix of `occurrence_ops`.\n@@ -626,7 +626,7 @@ fn ops_is_prefix(\n         if i >= occurrence_ops.len() {\n             let mut span = MultiSpan::from_span(span);\n             span.push_span_label(binder.span, \"expected repetition\");\n-            let message = &format!(\"variable '{}' is still repeating at this depth\", name);\n+            let message = format!(\"variable '{}' is still repeating at this depth\", name);\n             buffer_lint(sess, span, node_id, message);\n             return;\n         }\n@@ -642,7 +642,12 @@ fn ops_is_prefix(\n     }\n }\n \n-fn buffer_lint(sess: &ParseSess, span: MultiSpan, node_id: NodeId, message: &str) {\n+fn buffer_lint(\n+    sess: &ParseSess,\n+    span: MultiSpan,\n+    node_id: NodeId,\n+    message: impl Into<DiagnosticMessage>,\n+) {\n     // Macros loaded from other crates have dummy node ids.\n     if node_id != DUMMY_NODE_ID {\n         sess.buffer_lint(&META_VARIABLE_MISUSE, span, node_id, message);"}, {"sha": "d523d3eacbeb9df1f94678fde5e760ed447a6dec", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -510,7 +510,7 @@ fn out_of_bounds_err<'a>(\n              must be less than {max}\"\n         )\n     };\n-    cx.struct_span_err(span, &msg)\n+    cx.struct_span_err(span, msg)\n }\n \n fn transcribe_metavar_expr<'a>("}, {"sha": "39d1d1f2de52ad9ce74166b0b8b12f5ea6e3ade1", "filename": "compiler/rustc_hir_analysis/src/astconv/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -24,7 +24,7 @@ fn generic_arg_mismatch_err(\n     arg: &GenericArg<'_>,\n     param: &GenericParamDef,\n     possible_ordering_error: bool,\n-    help: Option<&str>,\n+    help: Option<String>,\n ) -> ErrorGuaranteed {\n     let sess = tcx.sess;\n     let mut err = struct_span_err!(\n@@ -300,7 +300,7 @@ pub fn create_substs_for_generic_args<'tcx, 'a>(\n                                     arg,\n                                     param,\n                                     !args_iter.clone().is_sorted_by_key(|arg| arg.to_ord()),\n-                                    Some(&format!(\n+                                    Some(format!(\n                                         \"reorder the arguments: {}: `<{}>`\",\n                                         param_types_present\n                                             .into_iter()"}, {"sha": "ca430a5e8632434debd2acba8c3970b7db2ed1d0", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -164,7 +164,7 @@ fn anon_const_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> Ty<'tcx> {\n             let Some(type_dependent_def) = tables.type_dependent_def_id(parent_node_id) else {\n                 return tcx.ty_error_with_message(\n                     tcx.def_span(def_id),\n-                    &format!(\"unable to find type-dependent def for {:?}\", parent_node_id),\n+                    format!(\"unable to find type-dependent def for {:?}\", parent_node_id),\n                 );\n             };\n             let idx = segment\n@@ -205,14 +205,14 @@ fn anon_const_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> Ty<'tcx> {\n                     } else {\n                         return tcx.ty_error_with_message(\n                             tcx.def_span(def_id),\n-                            &format!(\"unable to find const parent for {} in pat {:?}\", hir_id, pat),\n+                            format!(\"unable to find const parent for {} in pat {:?}\", hir_id, pat),\n                         );\n                     }\n                 }\n                 _ => {\n                     return tcx.ty_error_with_message(\n                         tcx.def_span(def_id),\n-                        &format!(\"unexpected const parent path {:?}\", parent_node),\n+                        format!(\"unexpected const parent path {:?}\", parent_node),\n                     );\n                 }\n             };\n@@ -243,7 +243,7 @@ fn anon_const_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> Ty<'tcx> {\n                 None => {\n                     return tcx.ty_error_with_message(\n                         tcx.def_span(def_id),\n-                        &format!(\"unexpected anon const res {:?} in path: {:?}\", segment.res, path),\n+                        format!(\"unexpected anon const res {:?} in path: {:?}\", segment.res, path),\n                     );\n                 }\n             };\n@@ -253,7 +253,7 @@ fn anon_const_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> Ty<'tcx> {\n \n         _ => return tcx.ty_error_with_message(\n             tcx.def_span(def_id),\n-            &format!(\"unexpected const parent in type_of(): {parent_node:?}\"),\n+            format!(\"unexpected const parent in type_of(): {parent_node:?}\"),\n         ),\n     };\n \n@@ -279,7 +279,7 @@ fn anon_const_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> Ty<'tcx> {\n     } else {\n         return tcx.ty_error_with_message(\n             tcx.def_span(def_id),\n-            &format!(\"const generic parameter not found in {generics:?} at position {arg_idx:?}\"),\n+            format!(\"const generic parameter not found in {generics:?} at position {arg_idx:?}\"),\n         );\n     }\n }"}, {"sha": "940ed7349c46c25fb9aec20aa36ef9a0697c7e36", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -2469,7 +2469,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             self.suggest_method_call(\n                 &mut err,\n-                &format!(\"a method `{field}` also exists, call it with parentheses\"),\n+                format!(\"a method `{field}` also exists, call it with parentheses\"),\n                 field,\n                 expr_t,\n                 expr,"}, {"sha": "59bf45f0ed210dfeeed8edb049bd3566b1713473", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -158,7 +158,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         let Some((ty, n)) = autoderef.nth(pick.autoderefs) else {\n             return self.tcx.ty_error_with_message(\n                 rustc_span::DUMMY_SP,\n-                &format!(\"failed autoderef {}\", pick.autoderefs),\n+                format!(\"failed autoderef {}\", pick.autoderefs),\n             );\n         };\n         assert_eq!(n, pick.autoderefs);"}, {"sha": "6f4d674ba103bf4f090b54b63e639d315a8eb7ba", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -13,7 +13,7 @@ pub use self::MethodError::*;\n use crate::errors::OpMethodGenericParams;\n use crate::FnCtxt;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Applicability, Diagnostic};\n+use rustc_errors::{Applicability, Diagnostic, SubdiagnosticMessage};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Namespace};\n use rustc_hir::def_id::DefId;\n@@ -130,7 +130,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(crate) fn suggest_method_call(\n         &self,\n         err: &mut Diagnostic,\n-        msg: &str,\n+        msg: impl Into<SubdiagnosticMessage> + std::fmt::Debug,\n         method_name: Ident,\n         self_ty: Ty<'tcx>,\n         call_expr: &hir::Expr<'tcx>,"}, {"sha": "eed3c65eccc0e2b673ad9be461661dec31d3d97b", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -237,7 +237,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                     // error has been emitted. (#64638)\n                     self.fcx.tcx.ty_error_with_message(\n                         e.span,\n-                        &format!(\"bad index {:?} for base: `{:?}`\", index, base),\n+                        format!(\"bad index {:?} for base: `{:?}`\", index, base),\n                     )\n                 });\n                 let index_ty = self.fcx.resolve_vars_if_possible(index_ty);"}, {"sha": "681819703c29868b0ae678a457c83408acc285c8", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -80,7 +80,7 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n                     ($reason: expr) => {\n                         early_error(\n                             ErrorOutputType::default(),\n-                            &format!(concat!(\"invalid `--cfg` argument: `{}` (\", $reason, \")\"), s),\n+                            format!(concat!(\"invalid `--cfg` argument: `{}` (\", $reason, \")\"), s),\n                         );\n                     };\n                 }\n@@ -139,10 +139,7 @@ pub fn parse_check_cfg(specs: Vec<String>) -> CheckCfg {\n                 ($reason: expr) => {\n                     early_error(\n                         ErrorOutputType::default(),\n-                        &format!(\n-                            concat!(\"invalid `--check-cfg` argument: `{}` (\", $reason, \")\"),\n-                            s\n-                        ),\n+                        format!(concat!(\"invalid `--check-cfg` argument: `{}` (\", $reason, \")\"), s),\n                     )\n                 };\n             }"}, {"sha": "910cafff769fd2306a699be349204988be8a8ede", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -88,7 +88,7 @@ pub fn create_session(\n     ) {\n         Ok(bundle) => bundle,\n         Err(e) => {\n-            early_error(sopts.error_format, &format!(\"failed to load fluent bundle: {e}\"));\n+            early_error(sopts.error_format, format!(\"failed to load fluent bundle: {e}\"));\n         }\n     };\n \n@@ -220,13 +220,13 @@ pub(crate) fn run_in_thread_pool_with_globals<F: FnOnce() -> R + Send, R: Send>(\n fn load_backend_from_dylib(path: &Path) -> MakeBackendFn {\n     let lib = unsafe { Library::new(path) }.unwrap_or_else(|err| {\n         let err = format!(\"couldn't load codegen backend {path:?}: {err}\");\n-        early_error(ErrorOutputType::default(), &err);\n+        early_error(ErrorOutputType::default(), err);\n     });\n \n     let backend_sym = unsafe { lib.get::<MakeBackendFn>(b\"__rustc_codegen_backend\") }\n         .unwrap_or_else(|e| {\n             let err = format!(\"couldn't load codegen backend: {e}\");\n-            early_error(ErrorOutputType::default(), &err);\n+            early_error(ErrorOutputType::default(), err);\n         });\n \n     // Intentionally leak the dynamic library. We can't ever unload it\n@@ -320,7 +320,7 @@ fn get_codegen_sysroot(maybe_sysroot: &Option<PathBuf>, backend_name: &str) -> M\n             \"failed to find a `codegen-backends` folder \\\n                            in the sysroot candidates:\\n* {candidates}\"\n         );\n-        early_error(ErrorOutputType::default(), &err);\n+        early_error(ErrorOutputType::default(), err);\n     });\n     info!(\"probing {} for a codegen backend\", sysroot.display());\n \n@@ -331,7 +331,7 @@ fn get_codegen_sysroot(maybe_sysroot: &Option<PathBuf>, backend_name: &str) -> M\n             sysroot.display(),\n             e\n         );\n-        early_error(ErrorOutputType::default(), &err);\n+        early_error(ErrorOutputType::default(), err);\n     });\n \n     let mut file: Option<PathBuf> = None;\n@@ -359,7 +359,7 @@ fn get_codegen_sysroot(maybe_sysroot: &Option<PathBuf>, backend_name: &str) -> M\n                 prev.display(),\n                 path.display()\n             );\n-            early_error(ErrorOutputType::default(), &err);\n+            early_error(ErrorOutputType::default(), err);\n         }\n         file = Some(path.clone());\n     }\n@@ -368,7 +368,7 @@ fn get_codegen_sysroot(maybe_sysroot: &Option<PathBuf>, backend_name: &str) -> M\n         Some(ref s) => load_backend_from_dylib(s),\n         None => {\n             let err = format!(\"unsupported builtin codegen backend `{backend_name}`\");\n-            early_error(ErrorOutputType::default(), &err);\n+            early_error(ErrorOutputType::default(), err);\n         }\n     }\n }"}, {"sha": "98ea9dc750127a600d8b2ae4a27f92880491a3e4", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -943,7 +943,7 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n                     lint::builtin::UNUSED_CRATE_DEPENDENCIES,\n                     span,\n                     ast::CRATE_NODE_ID,\n-                    &format!(\n+                    format!(\n                         \"external crate `{}` unused in `{}`: remove the dependency or add `use {} as _;`\",\n                         name,\n                         self.tcx.crate_name(LOCAL_CRATE),"}, {"sha": "bbea3e1412b00aa04974ae0ebaf241d9acbbfb3d", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -700,7 +700,11 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` with the given `msg` to\n     /// ensure it gets used.\n     #[track_caller]\n-    pub fn ty_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Ty<'tcx> {\n+    pub fn ty_error_with_message<S: Into<MultiSpan>>(\n+        self,\n+        span: S,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> Ty<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n         self.mk_ty_from_kind(Error(reported))\n     }\n@@ -2433,7 +2437,7 @@ impl<'tcx> TyCtxtAt<'tcx> {\n     /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` with the given `msg` to\n     /// ensure it gets used.\n     #[track_caller]\n-    pub fn ty_error_with_message(self, msg: &str) -> Ty<'tcx> {\n+    pub fn ty_error_with_message(self, msg: impl Into<DiagnosticMessage>) -> Ty<'tcx> {\n         self.tcx.ty_error_with_message(self.span, msg)\n     }\n }"}, {"sha": "b5a743cfe343ee30241c6bb4c8b10ba55853fc92", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -269,7 +269,7 @@ pub struct LayoutCx<'tcx, C> {\n impl<'tcx> LayoutCalculator for LayoutCx<'tcx, TyCtxt<'tcx>> {\n     type TargetDataLayoutRef = &'tcx TargetDataLayout;\n \n-    fn delay_bug(&self, txt: &str) {\n+    fn delay_bug(&self, txt: String) {\n         self.tcx.sess.delay_span_bug(DUMMY_SP, txt);\n     }\n "}, {"sha": "c6e6b46e4551cdf1e8759278bca543fcabfd2a4d", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -662,7 +662,7 @@ impl<'a> StringReader<'a> {\n                 &RUST_2021_PREFIXES_INCOMPATIBLE_SYNTAX,\n                 prefix_span,\n                 ast::CRATE_NODE_ID,\n-                &format!(\"prefix `{prefix}` is unknown\"),\n+                format!(\"prefix `{prefix}` is unknown\"),\n                 BuiltinLintDiagnostics::ReservedPrefix(prefix_span),\n             );\n         }"}, {"sha": "928fdce313d9187c3e14a60127e5aa56ca1361d0", "filename": "compiler/rustc_parse/src/validate_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -186,7 +186,7 @@ fn emit_malformed_attribute(\n         suggestions.push(code);\n     }\n     if should_warn(name) {\n-        sess.buffer_lint(&ILL_FORMED_ATTRIBUTE_INPUT, span, ast::CRATE_NODE_ID, &msg);\n+        sess.buffer_lint(&ILL_FORMED_ATTRIBUTE_INPUT, span, ast::CRATE_NODE_ID, msg);\n     } else {\n         sess.span_diagnostic\n             .struct_span_err(span, error_msg)"}, {"sha": "39e255104d572f47dfd120247acfe56db36b3a13", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -1319,23 +1319,22 @@ pub(super) fn build_target_config(\n     let (target, target_warnings) = target_result.unwrap_or_else(|e| {\n         early_error(\n             opts.error_format,\n-            &format!(\n+            format!(\n                 \"Error loading target specification: {}. \\\n                  Run `rustc --print target-list` for a list of built-in targets\",\n                 e\n             ),\n         )\n     });\n     for warning in target_warnings.warning_messages() {\n-        early_warn(opts.error_format, &warning)\n+        early_warn(opts.error_format, warning)\n     }\n \n     if !matches!(target.pointer_width, 16 | 32 | 64) {\n         early_error(\n             opts.error_format,\n-            &format!(\n-                \"target specification was invalid: \\\n-             unrecognized target-pointer-width {}\",\n+            format!(\n+                \"target specification was invalid: unrecognized target-pointer-width {}\",\n                 target.pointer_width\n             ),\n         )\n@@ -1599,7 +1598,7 @@ pub fn get_cmd_lint_options(\n \n     let lint_cap = matches.opt_str(\"cap-lints\").map(|cap| {\n         lint::Level::from_str(&cap)\n-            .unwrap_or_else(|| early_error(error_format, &format!(\"unknown lint level: `{cap}`\")))\n+            .unwrap_or_else(|| early_error(error_format, format!(\"unknown lint level: `{cap}`\")))\n     });\n \n     (lint_opts, describe_lints, lint_cap)\n@@ -1616,7 +1615,7 @@ pub fn parse_color(matches: &getopts::Matches) -> ColorConfig {\n \n         Some(arg) => early_error(\n             ErrorOutputType::default(),\n-            &format!(\n+            format!(\n                 \"argument for `--color` must be auto, \\\n                  always or never (instead was `{arg}`)\"\n             ),\n@@ -1691,7 +1690,7 @@ pub fn parse_json(matches: &getopts::Matches) -> JsonConfig {\n                 \"future-incompat\" => json_future_incompat = true,\n                 s => early_error(\n                     ErrorOutputType::default(),\n-                    &format!(\"unknown `--json` option `{s}`\"),\n+                    format!(\"unknown `--json` option `{s}`\"),\n                 ),\n             }\n         }\n@@ -1729,7 +1728,7 @@ pub fn parse_error_format(\n \n             Some(arg) => early_error(\n                 ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(color)),\n-                &format!(\n+                format!(\n                     \"argument for `--error-format` must be `human`, `json` or \\\n                      `short` (instead was `{arg}`)\"\n                 ),\n@@ -1763,7 +1762,7 @@ pub fn parse_crate_edition(matches: &getopts::Matches) -> Edition {\n         Some(arg) => Edition::from_str(&arg).unwrap_or_else(|_| {\n             early_error(\n                 ErrorOutputType::default(),\n-                &format!(\n+                format!(\n                     \"argument for `--edition` must be one of: \\\n                      {EDITION_NAME_LIST}. (instead was `{arg}`)\"\n                 ),\n@@ -1782,7 +1781,7 @@ pub fn parse_crate_edition(matches: &getopts::Matches) -> Edition {\n         } else {\n             format!(\"edition {edition} is unstable and only available with -Z unstable-options\")\n         };\n-        early_error(ErrorOutputType::default(), &msg)\n+        early_error(ErrorOutputType::default(), msg)\n     }\n \n     edition\n@@ -1827,7 +1826,7 @@ fn parse_output_types(\n                 let output_type = OutputType::from_shorthand(shorthand).unwrap_or_else(|| {\n                     early_error(\n                         error_format,\n-                        &format!(\n+                        format!(\n                             \"unknown emission type: `{shorthand}` - expected one of: {display}\",\n                             display = OutputType::shorthands_display(),\n                         ),\n@@ -1866,7 +1865,7 @@ fn should_override_cgus_and_disable_thinlto(\n                     for ot in &incompatible {\n                         early_warn(\n                             error_format,\n-                            &format!(\n+                            format!(\n                                 \"`--emit={ot}` with `-o` incompatible with \\\n                                  `-C codegen-units=N` for N > 1\",\n                             ),\n@@ -1970,7 +1969,7 @@ fn collect_print_requests(\n                 let prints = prints.join(\", \");\n                 early_error(\n                     error_format,\n-                    &format!(\"unknown print request `{req}`. Valid print requests are: {prints}\"),\n+                    format!(\"unknown print request `{req}`. Valid print requests are: {prints}\"),\n                 );\n             }\n         }\n@@ -1987,7 +1986,7 @@ pub fn parse_target_triple(\n         Some(target) if target.ends_with(\".json\") => {\n             let path = Path::new(&target);\n             TargetTriple::from_path(path).unwrap_or_else(|_| {\n-                early_error(error_format, &format!(\"target file {path:?} does not exist\"))\n+                early_error(error_format, format!(\"target file {path:?} does not exist\"))\n             })\n         }\n         Some(target) => TargetTriple::TargetTriple(target),\n@@ -2028,7 +2027,7 @@ fn parse_opt_level(\n             arg => {\n                 early_error(\n                     error_format,\n-                    &format!(\n+                    format!(\n                         \"optimization level needs to be \\\n                             between 0-3, s or z (instead was `{arg}`)\"\n                     ),\n@@ -2059,7 +2058,7 @@ pub(crate) fn parse_assert_incr_state(\n         Some(s) if s.as_str() == \"loaded\" => Some(IncrementalStateAssertion::Loaded),\n         Some(s) if s.as_str() == \"not-loaded\" => Some(IncrementalStateAssertion::NotLoaded),\n         Some(s) => {\n-            early_error(error_format, &format!(\"unexpected incremental state assertion value: {s}\"))\n+            early_error(error_format, format!(\"unexpected incremental state assertion value: {s}\"))\n         }\n         None => None,\n     }\n@@ -2086,13 +2085,13 @@ fn parse_native_lib_kind(\n                 } else {\n                     \", the `-Z unstable-options` flag must also be passed to use it\"\n                 };\n-                early_error(error_format, &format!(\"library kind `link-arg` is unstable{why}\"))\n+                early_error(error_format, format!(\"library kind `link-arg` is unstable{why}\"))\n             }\n             NativeLibKind::LinkArg\n         }\n         _ => early_error(\n             error_format,\n-            &format!(\n+            format!(\n                 \"unknown library kind `{kind}`, expected one of: static, dylib, framework, link-arg\"\n             ),\n         ),\n@@ -2127,16 +2126,13 @@ fn parse_native_lib_modifiers(\n                 } else {\n                     \", the `-Z unstable-options` flag must also be passed to use it\"\n                 };\n-                early_error(\n-                    error_format,\n-                    &format!(\"linking modifier `{modifier}` is unstable{why}\"),\n-                )\n+                early_error(error_format, format!(\"linking modifier `{modifier}` is unstable{why}\"))\n             }\n         };\n         let assign_modifier = |dst: &mut Option<bool>| {\n             if dst.is_some() {\n                 let msg = format!(\"multiple `{modifier}` modifiers in a single `-l` option\");\n-                early_error(error_format, &msg)\n+                early_error(error_format, msg)\n             } else {\n                 *dst = Some(value);\n             }\n@@ -2173,7 +2169,7 @@ fn parse_native_lib_modifiers(\n             // string, like `modifiers = \"\"`.\n             _ => early_error(\n                 error_format,\n-                &format!(\n+                format!(\n                     \"unknown linking modifier `{modifier}`, expected one \\\n                      of: bundle, verbatim, whole-archive, as-needed\"\n                 ),\n@@ -2303,7 +2299,7 @@ pub fn parse_externs(\n                     }\n                     \"nounused\" => nounused_dep = true,\n                     \"force\" => force = true,\n-                    _ => early_error(error_format, &format!(\"unknown --extern option `{opt}`\")),\n+                    _ => early_error(error_format, format!(\"unknown --extern option `{opt}`\")),\n                 }\n             }\n         }\n@@ -2369,7 +2365,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let unparsed_crate_types = matches.opt_strs(\"crate-type\");\n     let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n-        .unwrap_or_else(|e| early_error(error_format, &e));\n+        .unwrap_or_else(|e| early_error(error_format, e));\n \n     let mut unstable_opts = UnstableOptions::build(matches, error_format);\n     let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n@@ -2597,7 +2593,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     };\n \n     let working_dir = std::env::current_dir().unwrap_or_else(|e| {\n-        early_error(error_format, &format!(\"Current directory is invalid: {e}\"));\n+        early_error(error_format, format!(\"Current directory is invalid: {e}\"));\n     });\n \n     let remap = FilePathMapping::new(remap_path_prefix.clone());\n@@ -2669,7 +2665,7 @@ fn parse_pretty(unstable_opts: &UnstableOptions, efmt: ErrorOutputType) -> Optio\n         \"mir-cfg\" => MirCFG,\n         name => early_error(\n             efmt,\n-            &format!(\n+            format!(\n                 \"argument to `unpretty` must be one of `normal`, `identified`, \\\n                             `expanded`, `expanded,identified`, `expanded,hygiene`, \\\n                             `ast-tree`, `ast-tree,expanded`, `hir`, `hir,identified`, \\\n@@ -2747,7 +2743,7 @@ pub mod nightly_options {\n             if opt.name != \"Z\" && !has_z_unstable_option {\n                 early_error(\n                     ErrorOutputType::default(),\n-                    &format!(\n+                    format!(\n                         \"the `-Z unstable-options` flag must also be passed to enable \\\n                          the flag `{}`\",\n                         opt.name\n@@ -2760,11 +2756,10 @@ pub mod nightly_options {\n             match opt.stability {\n                 OptionStability::Unstable => {\n                     let msg = format!(\n-                        \"the option `{}` is only accepted on the \\\n-                         nightly compiler\",\n+                        \"the option `{}` is only accepted on the nightly compiler\",\n                         opt.name\n                     );\n-                    early_error(ErrorOutputType::default(), &msg);\n+                    early_error(ErrorOutputType::default(), msg);\n                 }\n                 OptionStability::Stable => {}\n             }"}, {"sha": "2c4c4a7a6ce29fa8049bb41d260550c3ff3b1501", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -329,21 +329,21 @@ fn build_options<O: Default>(\n                     match value {\n                         None => early_error(\n                             error_format,\n-                            &format!(\n+                            format!(\n                                 \"{0} option `{1}` requires {2} ({3} {1}=<value>)\",\n                                 outputname, key, type_desc, prefix\n                             ),\n                         ),\n                         Some(value) => early_error(\n                             error_format,\n-                            &format!(\n+                            format!(\n                                 \"incorrect value `{value}` for {outputname} option `{key}` - {type_desc} was expected\"\n                             ),\n                         ),\n                     }\n                 }\n             }\n-            None => early_error(error_format, &format!(\"unknown {outputname} option: `{key}`\")),\n+            None => early_error(error_format, format!(\"unknown {outputname} option: `{key}`\")),\n         }\n     }\n     return op;"}, {"sha": "7b396dde91ba166a6614f29667b0d31cbc252938", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -289,7 +289,7 @@ impl ParseSess {\n         lint: &'static Lint,\n         span: impl Into<MultiSpan>,\n         node_id: NodeId,\n-        msg: &str,\n+        msg: impl Into<DiagnosticMessage>,\n     ) {\n         self.buffered_lints.with_lock(|buffered_lints| {\n             buffered_lints.push(BufferedEarlyLint {\n@@ -307,7 +307,7 @@ impl ParseSess {\n         lint: &'static Lint,\n         span: impl Into<MultiSpan>,\n         node_id: NodeId,\n-        msg: &str,\n+        msg: impl Into<DiagnosticMessage>,\n         diagnostic: BuiltinLintDiagnostics,\n     ) {\n         self.buffered_lints.with_lock(|buffered_lints| {"}, {"sha": "4abe734d372d4017ce39a15176298a8d08c9c761", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -490,20 +490,6 @@ impl Session {\n     }\n     #[rustc_lint_diagnostics]\n     #[track_caller]\n-    pub fn span_err_or_warn<S: Into<MultiSpan>>(\n-        &self,\n-        is_warning: bool,\n-        sp: S,\n-        msg: impl Into<DiagnosticMessage>,\n-    ) {\n-        if is_warning {\n-            self.span_warn(sp, msg);\n-        } else {\n-            self.span_err(sp, msg);\n-        }\n-    }\n-    #[rustc_lint_diagnostics]\n-    #[track_caller]\n     pub fn span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -1400,10 +1386,10 @@ pub fn build_session(\n     let target_cfg = config::build_target_config(&sopts, target_override, &sysroot);\n     let host_triple = TargetTriple::from_triple(config::host_triple());\n     let (host, target_warnings) = Target::search(&host_triple, &sysroot).unwrap_or_else(|e| {\n-        early_error(sopts.error_format, &format!(\"Error loading host specification: {e}\"))\n+        early_error(sopts.error_format, format!(\"Error loading host specification: {e}\"))\n     });\n     for warning in target_warnings.warning_messages() {\n-        early_warn(sopts.error_format, &warning)\n+        early_warn(sopts.error_format, warning)\n     }\n \n     let loader = file_loader.unwrap_or_else(|| Box::new(RealFileLoader));\n@@ -1445,7 +1431,7 @@ pub fn build_session(\n         match profiler {\n             Ok(profiler) => Some(Arc::new(profiler)),\n             Err(e) => {\n-                early_warn(sopts.error_format, &format!(\"failed to create profiler: {e}\"));\n+                early_warn(sopts.error_format, format!(\"failed to create profiler: {e}\"));\n                 None\n             }\n         }\n@@ -1741,18 +1727,21 @@ fn early_error_handler(output: config::ErrorOutputType) -> rustc_errors::Handler\n \n #[allow(rustc::untranslatable_diagnostic)]\n #[allow(rustc::diagnostic_outside_of_impl)]\n-pub fn early_error_no_abort(output: config::ErrorOutputType, msg: &str) -> ErrorGuaranteed {\n+pub fn early_error_no_abort(\n+    output: config::ErrorOutputType,\n+    msg: impl Into<DiagnosticMessage>,\n+) -> ErrorGuaranteed {\n     early_error_handler(output).struct_err(msg).emit()\n }\n \n #[allow(rustc::untranslatable_diagnostic)]\n #[allow(rustc::diagnostic_outside_of_impl)]\n-pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n+pub fn early_error(output: config::ErrorOutputType, msg: impl Into<DiagnosticMessage>) -> ! {\n     early_error_handler(output).struct_fatal(msg).emit()\n }\n \n #[allow(rustc::untranslatable_diagnostic)]\n #[allow(rustc::diagnostic_outside_of_impl)]\n-pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n+pub fn early_warn(output: config::ErrorOutputType, msg: impl Into<DiagnosticMessage>) {\n     early_error_handler(output).struct_warn(msg).emit()\n }"}, {"sha": "445ab99b28fb3dd41be4f08a0e4f55945f7718b1", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -2260,7 +2260,7 @@ fn confirm_param_env_candidate<'cx, 'tcx>(\n                 obligation, poly_cache_entry, e,\n             );\n             debug!(\"confirm_param_env_candidate: {}\", msg);\n-            let err = infcx.tcx.ty_error_with_message(obligation.cause.span, &msg);\n+            let err = infcx.tcx.ty_error_with_message(obligation.cause.span, msg);\n             Progress { term: err.into(), obligations: vec![] }\n         }\n     }"}, {"sha": "498fbd93288c8bf0765e2a3c7f45a6d1a542f223", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -2623,6 +2623,15 @@ impl ToString for String {\n     }\n }\n \n+#[cfg(not(no_global_oom_handling))]\n+#[stable(feature = \"fmt_arguments_to_string_specialization\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl ToString for fmt::Arguments<'_> {\n+    #[inline]\n+    fn to_string(&self) -> String {\n+        crate::fmt::format(*self)\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<str> for String {\n     #[inline]"}, {"sha": "141a18a42dde64a4f6b6770d0cebb9a621f78660", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -756,6 +756,15 @@ impl TcpListener {\n     /// ];\n     /// let listener = TcpListener::bind(&addrs[..]).unwrap();\n     /// ```\n+    ///\n+    /// Creates a TCP listener bound to a port assigned by the operating system\n+    /// at `127.0.0.1`.\n+    ///\n+    /// ```no_run\n+    /// use std::net::TcpListener;\n+    ///\n+    /// let socket = TcpListener::bind(\"127.0.0.1:0\").unwrap();\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener> {\n         super::each_addr(addr, net_imp::TcpListener::bind).map(TcpListener)"}, {"sha": "5ca4ed832f3404e70b640da8c36eb7832daa1eb4", "filename": "library/std/src/net/udp.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -90,6 +90,15 @@ impl UdpSocket {\n     /// ];\n     /// let socket = UdpSocket::bind(&addrs[..]).expect(\"couldn't bind to address\");\n     /// ```\n+    ///\n+    /// Creates a UDP socket bound to a port assigned by the operating system\n+    /// at `127.0.0.1`.\n+    ///\n+    /// ```no_run\n+    /// use std::net::UdpSocket;\n+    ///\n+    /// let socket = UdpSocket::bind(\"127.0.0.1:0\").unwrap();\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<UdpSocket> {\n         super::each_addr(addr, net_imp::UdpSocket::bind).map(UdpSocket)"}, {"sha": "1ab5565fdb8d96db15c6a8ec7eee2313b27e91bd", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -139,7 +139,7 @@ dependencies = [\n  \"heck\",\n  \"proc-macro2\",\n  \"quote\",\n- \"syn 2.0.15\",\n+ \"syn 2.0.8\",\n ]\n \n [[package]]\n@@ -654,19 +654,19 @@ checksum = \"bebd363326d05ec3e2f532ab7660680f3b02130d780c299bca73469d521bc0ed\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.137\"\n+version = \"1.0.160\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"61ea8d54c77f8315140a05f4c7237403bf38b72704d031543aa1d16abbf517d1\"\n+checksum = \"bb2f3770c8bce3bcda7e149193a069a0f4365bda1fa5cd88e03bca26afc1216c\"\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.137\"\n+version = \"1.0.160\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1f26faba0c3959972377d3b2d306ee9f71faee9714294e41bb777f83f88578be\"\n+checksum = \"291a097c63d8497e00160b166a967a4a79c64f3facdd01cbd7502231688d77df\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn 1.0.102\",\n+ \"syn 2.0.8\",\n ]\n \n [[package]]\n@@ -704,9 +704,9 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"2.0.15\"\n+version = \"2.0.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a34fcf3e8b60f57e6a14301a2e916d323af98b0ea63c599441eec8558660c822\"\n+checksum = \"bcc02725fd69ab9f26eab07fad303e2497fad6fb9eba4f96c4d1687bdf704ad9\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\","}, {"sha": "c9957e8e39c8f55dd8ea0a899300da661d0d8e33", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -773,7 +773,7 @@ impl<'tcx> ExtraInfo<'tcx> {\n         ExtraInfo { def_id, sp, tcx }\n     }\n \n-    fn error_invalid_codeblock_attr(&self, msg: &str, help: &str) {\n+    fn error_invalid_codeblock_attr(&self, msg: String, help: &str) {\n         if let Some(def_id) = self.def_id.as_local() {\n             self.tcx.struct_span_lint_hir(\n                 crate::lint::INVALID_CODEBLOCK_ATTRIBUTES,\n@@ -948,7 +948,7 @@ impl LangString {\n                     } {\n                         if let Some(extra) = extra {\n                             extra.error_invalid_codeblock_attr(\n-                                &format!(\"unknown attribute `{}`. Did you mean `{}`?\", x, flag),\n+                                format!(\"unknown attribute `{}`. Did you mean `{}`?\", x, flag),\n                                 help,\n                             );\n                         }"}, {"sha": "0a56916edcd9c1eb99a7b13be026312e2d5671fa", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -192,11 +192,11 @@ fn init_logging() {\n         Ok(\"auto\") | Err(VarError::NotPresent) => io::stdout().is_terminal(),\n         Ok(value) => early_error(\n             ErrorOutputType::default(),\n-            &format!(\"invalid log color value '{}': expected one of always, never, or auto\", value),\n+            format!(\"invalid log color value '{}': expected one of always, never, or auto\", value),\n         ),\n         Err(VarError::NotUnicode(value)) => early_error(\n             ErrorOutputType::default(),\n-            &format!(\n+            format!(\n                 \"invalid log color value '{}': expected one of always, never, or auto\",\n                 value.to_string_lossy()\n             ),\n@@ -228,7 +228,7 @@ fn get_args() -> Option<Vec<String>> {\n                 .map_err(|arg| {\n                     early_warn(\n                         ErrorOutputType::default(),\n-                        &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg),\n+                        format!(\"Argument {} is not valid Unicode: {:?}\", i, arg),\n                     );\n                 })\n                 .ok()\n@@ -721,7 +721,7 @@ fn main_args(at_args: &[String]) -> MainResult {\n     let matches = match options.parse(&args[1..]) {\n         Ok(m) => m,\n         Err(err) => {\n-            early_error(ErrorOutputType::default(), &err.to_string());\n+            early_error(ErrorOutputType::default(), err.to_string());\n         }\n     };\n "}, {"sha": "9381b3e0567a5c47df705a6b30b7dcbe6cc2a6a4", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -8,7 +8,7 @@ use rustc_data_structures::{\n     fx::{FxHashMap, FxHashSet},\n     intern::Interned,\n };\n-use rustc_errors::{Applicability, Diagnostic};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticMessage};\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{DefKind, Namespace, PerNS};\n use rustc_hir::def_id::{DefId, CRATE_DEF_ID};\n@@ -24,6 +24,7 @@ use rustc_span::BytePos;\n use smallvec::{smallvec, SmallVec};\n \n use std::borrow::Cow;\n+use std::fmt::Display;\n use std::mem;\n use std::ops::Range;\n \n@@ -841,7 +842,7 @@ impl PreprocessingError {\n         match self {\n             PreprocessingError::MultipleAnchors => report_multiple_anchors(cx, diag_info),\n             PreprocessingError::Disambiguator(range, msg) => {\n-                disambiguator_error(cx, diag_info, range.clone(), msg)\n+                disambiguator_error(cx, diag_info, range.clone(), msg.as_str())\n             }\n             PreprocessingError::MalformedGenerics(err, path_str) => {\n                 report_malformed_generics(cx, diag_info, *err, path_str)\n@@ -1185,7 +1186,7 @@ impl LinkCollector<'_, '_> {\n             }\n             suggest_disambiguator(resolved, diag, path_str, &ori_link.link, sp);\n         };\n-        report_diagnostic(self.cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, diag_info, callback);\n+        report_diagnostic(self.cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, diag_info, callback);\n     }\n \n     fn report_rawptr_assoc_feature_gate(&self, dox: &str, ori_link: &Range<usize>, item: &Item) {\n@@ -1581,7 +1582,7 @@ impl Suggestion {\n fn report_diagnostic(\n     tcx: TyCtxt<'_>,\n     lint: &'static Lint,\n-    msg: &str,\n+    msg: impl Into<DiagnosticMessage> + Display,\n     DiagnosticInfo { item, ori_link: _, dox, link_range }: &DiagnosticInfo<'_>,\n     decorate: impl FnOnce(&mut Diagnostic, Option<rustc_span::Span>),\n ) {\n@@ -1649,7 +1650,7 @@ fn resolution_failure(\n     report_diagnostic(\n         tcx,\n         BROKEN_INTRA_DOC_LINKS,\n-        &format!(\"unresolved link to `{}`\", path_str),\n+        format!(\"unresolved link to `{}`\", path_str),\n         &diag_info,\n         |diag, sp| {\n             let item = |res: Res| format!(\"the {} `{}`\", res.descr(), res.name(tcx),);\n@@ -1865,20 +1866,20 @@ fn resolution_failure(\n \n fn report_multiple_anchors(cx: &DocContext<'_>, diag_info: DiagnosticInfo<'_>) {\n     let msg = format!(\"`{}` contains multiple anchors\", diag_info.ori_link);\n-    anchor_failure(cx, diag_info, &msg, 1)\n+    anchor_failure(cx, diag_info, msg, 1)\n }\n \n fn report_anchor_conflict(cx: &DocContext<'_>, diag_info: DiagnosticInfo<'_>, def_id: DefId) {\n     let (link, kind) = (diag_info.ori_link, Res::from_def_id(cx.tcx, def_id).descr());\n     let msg = format!(\"`{link}` contains an anchor, but links to {kind}s are already anchored\");\n-    anchor_failure(cx, diag_info, &msg, 0)\n+    anchor_failure(cx, diag_info, msg, 0)\n }\n \n /// Report an anchor failure.\n fn anchor_failure(\n     cx: &DocContext<'_>,\n     diag_info: DiagnosticInfo<'_>,\n-    msg: &str,\n+    msg: String,\n     anchor_idx: usize,\n ) {\n     report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, &diag_info, |diag, sp| {\n@@ -1898,7 +1899,7 @@ fn disambiguator_error(\n     cx: &DocContext<'_>,\n     mut diag_info: DiagnosticInfo<'_>,\n     disambiguator_range: Range<usize>,\n-    msg: &str,\n+    msg: impl Into<DiagnosticMessage> + Display,\n ) {\n     diag_info.link_range = disambiguator_range;\n     report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, &diag_info, |diag, _sp| {\n@@ -1919,7 +1920,7 @@ fn report_malformed_generics(\n     report_diagnostic(\n         cx.tcx,\n         BROKEN_INTRA_DOC_LINKS,\n-        &format!(\"unresolved link to `{}`\", path_str),\n+        format!(\"unresolved link to `{}`\", path_str),\n         &diag_info,\n         |diag, sp| {\n             let note = match err {\n@@ -1994,7 +1995,7 @@ fn ambiguity_error(\n         }\n     }\n \n-    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, diag_info, |diag, sp| {\n+    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, diag_info, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"ambiguous link\");\n         } else {\n@@ -2046,7 +2047,7 @@ fn privacy_error(cx: &DocContext<'_>, diag_info: &DiagnosticInfo<'_>, path_str:\n     let msg =\n         format!(\"public documentation for `{}` links to private item `{}`\", item_name, path_str);\n \n-    report_diagnostic(cx.tcx, PRIVATE_INTRA_DOC_LINKS, &msg, diag_info, |diag, sp| {\n+    report_diagnostic(cx.tcx, PRIVATE_INTRA_DOC_LINKS, msg, diag_info, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"this item is private\");\n         }"}, {"sha": "e5297d41a61195c245e1723caf555139304202f8", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -20,6 +20,7 @@ once_cell = \"1.16.0\"\n walkdir = \"2\"\n glob = \"0.3.0\"\n lazycell = \"1.3.0\"\n+anyhow = \"1\"\n \n [target.'cfg(unix)'.dependencies]\n libc = \"0.2\""}, {"sha": "5bc4d1642655136e7bd3fdf6aa19d375d97dde17", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -32,6 +32,7 @@ use std::process::{Child, Command, ExitStatus, Output, Stdio};\n use std::str;\n use std::sync::Arc;\n \n+use anyhow::Context;\n use glob::glob;\n use once_cell::sync::Lazy;\n use tracing::*;\n@@ -131,7 +132,11 @@ pub fn run(config: Arc<Config>, testpaths: &TestPaths, revision: Option<&str>) {\n     }\n \n     let cx = TestCx { config: &config, props: &props, testpaths, revision };\n-    create_dir_all(&cx.output_base_dir()).unwrap();\n+    create_dir_all(&cx.output_base_dir())\n+        .with_context(|| {\n+            format!(\"failed to create output base directory {}\", cx.output_base_dir().display())\n+        })\n+        .unwrap();\n     if props.incremental {\n         cx.init_incremental_test();\n     }"}, {"sha": "046d732bd4257455a2059b3e0712cfdd6b65e54d", "filename": "triagebot.toml", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9052ca9393d3182b6c029d1d34b30837a3747f34/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9052ca9393d3182b6c029d1d34b30837a3747f34/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=9052ca9393d3182b6c029d1d34b30837a3747f34", "patch": "@@ -371,31 +371,6 @@ cc = [\"@GuillaumeGomez\"]\n message = \"Some changes might have occurred in exhaustiveness checking\"\n cc = [\"@Nadrieril\"]\n \n-[mentions.\"library\"]\n-message = \"\"\"\n-Hey! It looks like you've submitted a new PR for the library teams!\n-\n-If this PR contains changes to any `rust-lang/rust` public library APIs then \\\n-please comment with `@rustbot label +T-libs-api -T-libs` to tag it \\\n-appropriately. If this PR contains changes to any unstable APIs please edit \\\n-the PR description to add a link to the relevant [API Change \\\n-Proposal](https://std-dev-guide.rust-lang.org/feature-lifecycle/api-change-proposals.html) \\\n-or [create one](https://github.com/rust-lang/libs-team/issues/new?assignees=&labels=api-change-proposal%2C+T-libs-api&template=api-change-proposal.md&title=%28My+API+Change+Proposal%29) \\\n-if you haven't already. If you're unsure where your change falls no worries, \\\n-just leave it as is and the reviewer will take a look and make a decision to \\\n-forward on if necessary.\n-\n-Examples of `T-libs-api` changes:\n-\n-* Stabilizing library features\n-* Introducing insta-stable changes such as new implementations of existing \\\n-  stable traits on existing stable types\n-* Introducing new or changing existing unstable library APIs (excluding \\\n-  permanently unstable features / features without a tracking issue)\n-* Changing public documentation in ways that create new stability guarantees\n-* Changing observable runtime behavior of library APIs\n-\"\"\"\n-\n [mentions.\"src/librustdoc/clean/types.rs\"]\n cc = [\"@camelid\"]\n "}]}