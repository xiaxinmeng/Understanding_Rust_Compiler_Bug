{"sha": "b1c9832c9b54e75141501b691844bdfd37cde7cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYzk4MzJjOWI1NGU3NTE0MTUwMWI2OTE4NDRiZGZkMzdjZGU3Y2I=", "commit": {"author": {"name": "Jonathan Behrens", "email": "fintelia@gmail.com", "date": "2017-05-06T21:59:51Z"}, "committer": {"name": "Jonathan Behrens", "email": "fintelia@gmail.com", "date": "2017-05-06T21:59:51Z"}, "message": "Respect file_lines within write_snippet() function", "tree": {"sha": "12311ac8d24980865a83f892b628a554e7f4b035", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12311ac8d24980865a83f892b628a554e7f4b035"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1c9832c9b54e75141501b691844bdfd37cde7cb", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEz+31Or6w9EWGEiCukUmbp1Q7H0cFAlkOR3QACgkQkUmbp1Q7\nH0ebBwf/RPyh1c/TMibTFbpM9o5678o3tsPlg7upAUWYMif2Tt4vuwF7qta4kUW3\nXDFZ4v7RxSS+5ahXEH48XHftgYsr7HMFSaLqYmcr9mcHvmgqaBiUIPSCgRZj/9of\n+2S7L/D9DfEp2MBxSSE+GRZmEGyofm0NON9N94BR3BlMOL3HyK833XoG/ziUsWQH\n0FKDr9QMdQnvaYRijhuCzpxpwdqjQHwmlzKgNx61DxkUTJzLVn6oHnAOl7d+iPH4\nGozfqO+IIs9qzVa+jn5oo6JufXB/dCuzlHHhvEIrC7OGPyabyEtZWB/G9cKCFa8e\n7oLayDr98gmFBv823m3OFdLiEteaPQ==\n=fP7W\n-----END PGP SIGNATURE-----", "payload": "tree 12311ac8d24980865a83f892b628a554e7f4b035\nparent 7c6479358bb562094de8a932c941254b5e31f210\nauthor Jonathan Behrens <fintelia@gmail.com> 1494107991 -0400\ncommitter Jonathan Behrens <fintelia@gmail.com> 1494107991 -0400\n\nRespect file_lines within write_snippet() function\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1c9832c9b54e75141501b691844bdfd37cde7cb", "html_url": "https://github.com/rust-lang/rust/commit/b1c9832c9b54e75141501b691844bdfd37cde7cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1c9832c9b54e75141501b691844bdfd37cde7cb/comments", "author": {"login": "fintelia", "id": 4943209, "node_id": "MDQ6VXNlcjQ5NDMyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/4943209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fintelia", "html_url": "https://github.com/fintelia", "followers_url": "https://api.github.com/users/fintelia/followers", "following_url": "https://api.github.com/users/fintelia/following{/other_user}", "gists_url": "https://api.github.com/users/fintelia/gists{/gist_id}", "starred_url": "https://api.github.com/users/fintelia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fintelia/subscriptions", "organizations_url": "https://api.github.com/users/fintelia/orgs", "repos_url": "https://api.github.com/users/fintelia/repos", "events_url": "https://api.github.com/users/fintelia/events{/privacy}", "received_events_url": "https://api.github.com/users/fintelia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fintelia", "id": 4943209, "node_id": "MDQ6VXNlcjQ5NDMyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/4943209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fintelia", "html_url": "https://github.com/fintelia", "followers_url": "https://api.github.com/users/fintelia/followers", "following_url": "https://api.github.com/users/fintelia/following{/other_user}", "gists_url": "https://api.github.com/users/fintelia/gists{/gist_id}", "starred_url": "https://api.github.com/users/fintelia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fintelia/subscriptions", "organizations_url": "https://api.github.com/users/fintelia/orgs", "repos_url": "https://api.github.com/users/fintelia/repos", "events_url": "https://api.github.com/users/fintelia/events{/privacy}", "received_events_url": "https://api.github.com/users/fintelia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c6479358bb562094de8a932c941254b5e31f210", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c6479358bb562094de8a932c941254b5e31f210", "html_url": "https://github.com/rust-lang/rust/commit/7c6479358bb562094de8a932c941254b5e31f210"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "ea3d63feb92a4459641e0c8064b5ca5c67347a73", "filename": "src/file_lines.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b1c9832c9b54e75141501b691844bdfd37cde7cb/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c9832c9b54e75141501b691844bdfd37cde7cb/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=b1c9832c9b54e75141501b691844bdfd37cde7cb", "patch": "@@ -158,6 +158,20 @@ impl FileLines {\n             Err(_) => false,\n         }\n     }\n+\n+    pub fn intersects_range(&self, file_name: &str, lo: usize, hi: usize) -> bool {\n+        let map = match self.0 {\n+            // `None` means \"all lines in all files\".\n+            None => return true,\n+            Some(ref map) => map,\n+        };\n+\n+        match canonicalize_path_string(file_name)\n+                  .and_then(|canonical| map.get_vec(&canonical).ok_or(())) {\n+            Ok(ranges) => ranges.iter().any(|r| r.intersects(Range::new(lo, hi))),\n+            Err(_) => false,\n+        }\n+    }\n }\n \n /// FileLines files iterator."}, {"sha": "aef158199bab02919a35faa35dbf169aab6ab9f1", "filename": "src/missed_spans.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b1c9832c9b54e75141501b691844bdfd37cde7cb/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c9832c9b54e75141501b691844bdfd37cde7cb/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=b1c9832c9b54e75141501b691844bdfd37cde7cb", "patch": "@@ -83,17 +83,18 @@ impl<'a> FmtVisitor<'a> {\n         let big_snippet = &local_begin.fm.src.as_ref().unwrap()[start_index..end_index];\n \n         let big_diff = (span.lo - big_span_lo).to_usize();\n-        let snippet = self.snippet(span);\n+        let snippet = self.snippet(span.clone());\n \n         debug!(\"write_snippet `{}`\", snippet);\n \n-        self.write_snippet_inner(big_snippet, big_diff, &snippet, process_last_snippet);\n+        self.write_snippet_inner(big_snippet, big_diff, &snippet, span, process_last_snippet);\n     }\n \n     fn write_snippet_inner<F>(&mut self,\n                               big_snippet: &str,\n                               big_diff: usize,\n                               old_snippet: &str,\n+                              span: Span,\n                               process_last_snippet: F)\n         where F: Fn(&mut FmtVisitor, &str, &str)\n     {\n@@ -104,6 +105,10 @@ impl<'a> FmtVisitor<'a> {\n         let mut last_wspace = None;\n         let mut rewrite_next_comment = true;\n \n+        let char_pos = self.codemap.lookup_char_pos(span.lo);\n+        let file_name = &char_pos.file.name;\n+        let mut cur_line = char_pos.line;\n+\n         fn replace_chars(string: &str) -> String {\n             string\n                 .chars()\n@@ -129,6 +134,15 @@ impl<'a> FmtVisitor<'a> {\n \n                 let fix_indent = last_char.map_or(true, |rev_c| ['{', '\\n'].contains(&rev_c));\n \n+                let subslice_num_lines = subslice.chars().filter(|c| *c == '\\n').count();\n+\n+                if rewrite_next_comment &&\n+                   !self.config\n+                        .file_lines\n+                        .intersects_range(file_name, cur_line, cur_line + subslice_num_lines) {\n+                    rewrite_next_comment = false;\n+                }\n+\n                 if rewrite_next_comment {\n                     if fix_indent {\n                         if let Some('{') = last_char {\n@@ -172,6 +186,7 @@ impl<'a> FmtVisitor<'a> {\n                         }\n                     }\n \n+                    cur_line += subslice_num_lines;\n                     continue;\n                 } else {\n                     rewrite_next_comment = false;\n@@ -182,13 +197,18 @@ impl<'a> FmtVisitor<'a> {\n                 i += offset;\n \n                 if c == '\\n' {\n+                    if !self.config.file_lines.contains_line(file_name, cur_line) {\n+                        last_wspace = None;\n+                    }\n+\n                     if let Some(lw) = last_wspace {\n                         self.buffer.push_str(&snippet[line_start..lw]);\n                         self.buffer.push_str(\"\\n\");\n                     } else {\n                         self.buffer.push_str(&snippet[line_start..i + 1]);\n                     }\n \n+                    cur_line += 1;\n                     line_start = i + 1;\n                     last_wspace = None;\n                     rewrite_next_comment = rewrite_next_comment || kind == CodeCharKind::Normal;"}]}