{"sha": "b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MTAxMTg0NTM3YjExNjVjZmRkNWZjNDczZTA0YWQ0YzViN2JmZmE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-02T12:13:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-02T13:07:08Z"}, "message": "Deny unreachable-pub\n\nIt's very useful when `pub` is equivalent to \"this is crate's public\nAPI\", let's enforce this!\n\nIdeally, we should enforce it for local `cargo test`, and only during\nCI, but that needs https://github.com/rust-lang/cargo/issues/5034.", "tree": {"sha": "bcc2efd8a2696840a4724ad88758e973ecb77157", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcc2efd8a2696840a4724ad88758e973ecb77157"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "html_url": "https://github.com/rust-lang/rust/commit/b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7f90866bcf4b04a11e958eda0ac53f7ff0a607b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f90866bcf4b04a11e958eda0ac53f7ff0a607b", "html_url": "https://github.com/rust-lang/rust/commit/e7f90866bcf4b04a11e958eda0ac53f7ff0a607b"}], "stats": {"total": 315, "additions": 157, "deletions": 158}, "files": [{"sha": "83b1d33a128adc551b46dd01eb216e8a5584daef", "filename": ".github/workflows/ci.yaml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/.github%2Fworkflows%2Fci.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/.github%2Fworkflows%2Fci.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yaml?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -12,7 +12,7 @@ env:\n   CARGO_NET_RETRY: 10\n   CI: 1\n   RUST_BACKTRACE: short\n-  RUSTFLAGS: -D warnings\n+  RUSTFLAGS: \"-D warnings \" # -W unreachable-pub\"\n   RUSTUP_MAX_RETRIES: 10\n \n jobs:"}, {"sha": "72050a5271e17e4f648701e38e43a8ef7719ff28", "filename": ".github/workflows/metrics.yaml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/.github%2Fworkflows%2Fmetrics.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/.github%2Fworkflows%2Fmetrics.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fmetrics.yaml?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -7,7 +7,7 @@ on:\n env:\n   CARGO_INCREMENTAL: 0\n   CARGO_NET_RETRY: 10\n-  RUSTFLAGS: -D warnings\n+  RUSTFLAGS: \"-D warnings \" # -W unreachable-pub\"\n   RUSTUP_MAX_RETRIES: 10\n \n jobs:"}, {"sha": "fbefbd9eb18c94b576b177a8d528bdc621f4061f", "filename": ".github/workflows/release.yaml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/.github%2Fworkflows%2Frelease.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/.github%2Fworkflows%2Frelease.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frelease.yaml?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -11,7 +11,7 @@ on:\n env:\n   CARGO_INCREMENTAL: 0\n   CARGO_NET_RETRY: 10\n-  RUSTFLAGS: -D warnings\n+  RUSTFLAGS: \"-D warnings \" # -W unreachable-pub\"\n   RUSTUP_MAX_RETRIES: 10\n \n jobs:"}, {"sha": "29ca3d3b2a52c5d8d0424dd51192096ff8bfea5e", "filename": ".github/workflows/rustdoc.yaml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/.github%2Fworkflows%2Frustdoc.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/.github%2Fworkflows%2Frustdoc.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frustdoc.yaml?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -7,7 +7,7 @@ on:\n env:\n   CARGO_INCREMENTAL: 0\n   CARGO_NET_RETRY: 10\n-  RUSTFLAGS: -D warnings\n+  RUSTFLAGS: \"-D warnings \" # -W unreachable-pub\"\n   RUSTUP_MAX_RETRIES: 10\n \n jobs:"}, {"sha": "31907ed980275c9e7d9e48780dc46dd528efff6d", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -12,9 +12,7 @@ use cfg::CfgOptions;\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::SmolStr;\n use tt::TokenExpander;\n-use vfs::{file_set::FileSet, VfsPath};\n-\n-pub use vfs::FileId;\n+use vfs::{file_set::FileSet, FileId, VfsPath};\n \n /// Files are grouped into source roots. A source root is a directory on the\n /// file systems which is watched for changes. Typically it corresponds to a"}, {"sha": "ce75a5337a4b8a83d680e89ce9a20e61f1d37a81", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -14,11 +14,11 @@ pub use crate::{\n     change::Change,\n     input::{\n         CrateData, CrateDisplayName, CrateGraph, CrateId, CrateName, Dependency, Edition, Env,\n-        FileId, ProcMacroId, SourceRoot, SourceRootId,\n+        ProcMacroId, SourceRoot, SourceRootId,\n     },\n };\n pub use salsa;\n-pub use vfs::{file_set::FileSet, VfsPath};\n+pub use vfs::{file_set::FileSet, FileId, VfsPath};\n \n #[macro_export]\n macro_rules! impl_intern_key {"}, {"sha": "1deaa90f2139cda42d890f0cf43befb642ff157d", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -45,14 +45,14 @@ pub(crate) struct LowerCtx {\n }\n \n impl LowerCtx {\n-    pub fn new(db: &dyn DefDatabase, file_id: HirFileId) -> Self {\n+    pub(crate) fn new(db: &dyn DefDatabase, file_id: HirFileId) -> Self {\n         LowerCtx { hygiene: Hygiene::new(db.upcast(), file_id) }\n     }\n-    pub fn with_hygiene(hygiene: &Hygiene) -> Self {\n+    pub(crate) fn with_hygiene(hygiene: &Hygiene) -> Self {\n         LowerCtx { hygiene: hygiene.clone() }\n     }\n \n-    pub fn lower_path(&self, ast: ast::Path) -> Option<Path> {\n+    pub(crate) fn lower_path(&self, ast: ast::Path) -> Option<Path> {\n         Path::from_src(ast, &self.hygiene)\n     }\n }"}, {"sha": "1b22d1eec9c1b44d9aea8cdea724f1e692976caa", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -486,12 +486,12 @@ impl AsMacroCall for InFile<&ast::MacroCall> {\n /// Helper wrapper for `AstId` with `ModPath`\n #[derive(Clone, Debug, Eq, PartialEq)]\n struct AstIdWithPath<T: ast::AstNode> {\n-    pub ast_id: AstId<T>,\n-    pub path: path::ModPath,\n+    ast_id: AstId<T>,\n+    path: path::ModPath,\n }\n \n impl<T: ast::AstNode> AstIdWithPath<T> {\n-    pub fn new(file_id: HirFileId, ast_id: FileAstId<T>, path: path::ModPath) -> AstIdWithPath<T> {\n+    fn new(file_id: HirFileId, ast_id: FileAstId<T>, path: path::ModPath) -> AstIdWithPath<T> {\n         AstIdWithPath { ast_id: AstId::new(file_id, ast_id), path }\n     }\n }"}, {"sha": "59b6644c388de59ed2d1eb77f0b366b431a85065", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -122,13 +122,13 @@ enum ImportSource {\n \n #[derive(Clone, Debug, Eq, PartialEq)]\n struct Import {\n-    pub path: ModPath,\n-    pub alias: Option<ImportAlias>,\n-    pub visibility: RawVisibility,\n-    pub is_glob: bool,\n-    pub is_prelude: bool,\n-    pub is_extern_crate: bool,\n-    pub is_macro_use: bool,\n+    path: ModPath,\n+    alias: Option<ImportAlias>,\n+    visibility: RawVisibility,\n+    is_glob: bool,\n+    is_prelude: bool,\n+    is_extern_crate: bool,\n+    is_macro_use: bool,\n     source: ImportSource,\n }\n "}, {"sha": "00fe711fea3769c7fe64ee91e8bb0c6f9dfb7d24", "filename": "crates/hir_def/src/test_db.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftest_db.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -25,7 +25,7 @@ use crate::{db::DefDatabase, ModuleDefId};\n     crate::db::DefDatabaseStorage\n )]\n #[derive(Default)]\n-pub struct TestDB {\n+pub(crate) struct TestDB {\n     storage: salsa::Storage<TestDB>,\n     events: Mutex<Option<Vec<salsa::Event>>>,\n }\n@@ -72,7 +72,7 @@ impl FileLoader for TestDB {\n }\n \n impl TestDB {\n-    pub fn module_for_file(&self, file_id: FileId) -> crate::ModuleId {\n+    pub(crate) fn module_for_file(&self, file_id: FileId) -> crate::ModuleId {\n         for &krate in self.relevant_crates(file_id).iter() {\n             let crate_def_map = self.crate_def_map(krate);\n             for (local_id, data) in crate_def_map.modules.iter() {\n@@ -84,13 +84,13 @@ impl TestDB {\n         panic!(\"Can't find module for file\")\n     }\n \n-    pub fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event> {\n+    pub(crate) fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event> {\n         *self.events.lock().unwrap() = Some(Vec::new());\n         f();\n         self.events.lock().unwrap().take().unwrap()\n     }\n \n-    pub fn log_executed(&self, f: impl FnOnce()) -> Vec<String> {\n+    pub(crate) fn log_executed(&self, f: impl FnOnce()) -> Vec<String> {\n         let events = self.log(f);\n         events\n             .into_iter()\n@@ -105,7 +105,7 @@ impl TestDB {\n             .collect()\n     }\n \n-    pub fn extract_annotations(&self) -> FxHashMap<FileId, Vec<(TextRange, String)>> {\n+    pub(crate) fn extract_annotations(&self) -> FxHashMap<FileId, Vec<(TextRange, String)>> {\n         let mut files = Vec::new();\n         let crate_graph = self.crate_graph();\n         for krate in crate_graph.iter() {\n@@ -129,7 +129,7 @@ impl TestDB {\n             .collect()\n     }\n \n-    pub fn diagnostics<F: FnMut(&dyn Diagnostic)>(&self, mut cb: F) {\n+    pub(crate) fn diagnostics<F: FnMut(&dyn Diagnostic)>(&self, mut cb: F) {\n         let crate_graph = self.crate_graph();\n         for krate in crate_graph.iter() {\n             let crate_def_map = self.crate_def_map(krate);\n@@ -148,7 +148,7 @@ impl TestDB {\n         }\n     }\n \n-    pub fn check_diagnostics(&self) {\n+    pub(crate) fn check_diagnostics(&self) {\n         let db: &TestDB = self;\n         let annotations = db.extract_annotations();\n         assert!(!annotations.is_empty());"}, {"sha": "14e4d92f077dd4068781f111d1b9a5dd28acf3e2", "filename": "crates/hir_ty/src/diagnostics/decl_check/case_conv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check%2Fcase_conv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check%2Fcase_conv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check%2Fcase_conv.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -6,7 +6,7 @@\n \n /// Converts an identifier to an UpperCamelCase form.\n /// Returns `None` if the string is already is UpperCamelCase.\n-pub fn to_camel_case(ident: &str) -> Option<String> {\n+pub(crate) fn to_camel_case(ident: &str) -> Option<String> {\n     if is_camel_case(ident) {\n         return None;\n     }\n@@ -59,7 +59,7 @@ pub fn to_camel_case(ident: &str) -> Option<String> {\n \n /// Converts an identifier to a lower_snake_case form.\n /// Returns `None` if the string is already in lower_snake_case.\n-pub fn to_lower_snake_case(ident: &str) -> Option<String> {\n+pub(crate) fn to_lower_snake_case(ident: &str) -> Option<String> {\n     if is_lower_snake_case(ident) {\n         return None;\n     } else if is_upper_snake_case(ident) {\n@@ -71,7 +71,7 @@ pub fn to_lower_snake_case(ident: &str) -> Option<String> {\n \n /// Converts an identifier to an UPPER_SNAKE_CASE form.\n /// Returns `None` if the string is already is UPPER_SNAKE_CASE.\n-pub fn to_upper_snake_case(ident: &str) -> Option<String> {\n+pub(crate) fn to_upper_snake_case(ident: &str) -> Option<String> {\n     if is_upper_snake_case(ident) {\n         return None;\n     } else if is_lower_snake_case(ident) {"}, {"sha": "434b19354f225e11ceb4e9c70453ffe84f81cfd8", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -17,17 +17,10 @@ use crate::{\n     ApplicationTy, InferenceResult, Ty, TypeCtor,\n };\n \n-pub use hir_def::{\n-    body::{\n-        scope::{ExprScopes, ScopeEntry, ScopeId},\n-        Body, BodySourceMap, ExprPtr, ExprSource, PatPtr, PatSource,\n-    },\n-    expr::{\n-        ArithOp, Array, BinaryOp, BindingAnnotation, CmpOp, Expr, ExprId, Literal, LogicOp,\n-        MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField, Statement, UnaryOp,\n-    },\n-    src::HasSource,\n-    LocalFieldId, Lookup, VariantId,\n+pub(crate) use hir_def::{\n+    body::{Body, BodySourceMap},\n+    expr::{Expr, ExprId, MatchArm, Pat, PatId},\n+    LocalFieldId, VariantId,\n };\n \n pub(super) struct ExprValidator<'a, 'b: 'a> {"}, {"sha": "6dc862826471a458614ebe8b269bf80a677111f3", "filename": "crates/hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -59,12 +59,12 @@ impl<'a, 'b> UnsafeValidator<'a, 'b> {\n     }\n }\n \n-pub struct UnsafeExpr {\n-    pub expr: ExprId,\n-    pub inside_unsafe_block: bool,\n+pub(crate) struct UnsafeExpr {\n+    pub(crate) expr: ExprId,\n+    pub(crate) inside_unsafe_block: bool,\n }\n \n-pub fn unsafe_expressions(\n+pub(crate) fn unsafe_expressions(\n     db: &dyn HirDatabase,\n     infer: &InferenceResult,\n     def: DefWithBodyId,"}, {"sha": "f4c1fa2f2beadeb2cbefaf89f44497c74b84d4c2", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -214,9 +214,9 @@ struct InferenceContext<'a> {\n \n #[derive(Clone, Debug)]\n struct BreakableContext {\n-    pub may_break: bool,\n-    pub break_ty: Ty,\n-    pub label: Option<name::Name>,\n+    may_break: bool,\n+    break_ty: Ty,\n+    label: Option<name::Name>,\n }\n \n fn find_breakable<'c>("}, {"sha": "605951b1032e65f0576ab13691ed724ab6ffc540", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -107,7 +107,7 @@ impl<'a> InferenceContext<'a> {\n         }\n     }\n \n-    pub fn callable_sig(&mut self, ty: &Ty, num_args: usize) -> Option<(Vec<Ty>, Ty)> {\n+    pub(crate) fn callable_sig(&mut self, ty: &Ty, num_args: usize) -> Option<(Vec<Ty>, Ty)> {\n         match ty.callable_sig(self.db) {\n             Some(sig) => Some((sig.params().to_vec(), sig.ret().clone())),\n             None => self.callable_sig_from_fn_trait(ty, num_args),"}, {"sha": "2406a73614aa8ce29f3d6399a00ec79492497c46", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -127,7 +127,7 @@ where\n }\n \n impl<T> Canonicalized<T> {\n-    pub fn decanonicalize_ty(&self, mut ty: Ty) -> Ty {\n+    pub(super) fn decanonicalize_ty(&self, mut ty: Ty) -> Ty {\n         ty.walk_mut_binders(\n             &mut |ty, binders| {\n                 if let &mut Ty::Bound(bound) = ty {\n@@ -141,7 +141,11 @@ impl<T> Canonicalized<T> {\n         ty\n     }\n \n-    pub fn apply_solution(&self, ctx: &mut InferenceContext<'_>, solution: Canonical<Substs>) {\n+    pub(super) fn apply_solution(\n+        &self,\n+        ctx: &mut InferenceContext<'_>,\n+        solution: Canonical<Substs>,\n+    ) {\n         // the solution may contain new variables, which we need to convert to new inference vars\n         let new_vars = Substs(\n             solution\n@@ -164,7 +168,7 @@ impl<T> Canonicalized<T> {\n     }\n }\n \n-pub fn unify(tys: &Canonical<(Ty, Ty)>) -> Option<Substs> {\n+pub(crate) fn unify(tys: &Canonical<(Ty, Ty)>) -> Option<Substs> {\n     let mut table = InferenceTable::new();\n     let vars = Substs(\n         tys.kinds\n@@ -199,41 +203,46 @@ pub(crate) struct InferenceTable {\n }\n \n impl InferenceTable {\n-    pub fn new() -> Self {\n+    pub(crate) fn new() -> Self {\n         InferenceTable { var_unification_table: InPlaceUnificationTable::new() }\n     }\n \n-    pub fn new_type_var(&mut self) -> Ty {\n+    pub(crate) fn new_type_var(&mut self) -> Ty {\n         Ty::Infer(InferTy::TypeVar(self.var_unification_table.new_key(TypeVarValue::Unknown)))\n     }\n \n-    pub fn new_integer_var(&mut self) -> Ty {\n+    pub(crate) fn new_integer_var(&mut self) -> Ty {\n         Ty::Infer(InferTy::IntVar(self.var_unification_table.new_key(TypeVarValue::Unknown)))\n     }\n \n-    pub fn new_float_var(&mut self) -> Ty {\n+    pub(crate) fn new_float_var(&mut self) -> Ty {\n         Ty::Infer(InferTy::FloatVar(self.var_unification_table.new_key(TypeVarValue::Unknown)))\n     }\n \n-    pub fn new_maybe_never_type_var(&mut self) -> Ty {\n+    pub(crate) fn new_maybe_never_type_var(&mut self) -> Ty {\n         Ty::Infer(InferTy::MaybeNeverTypeVar(\n             self.var_unification_table.new_key(TypeVarValue::Unknown),\n         ))\n     }\n \n-    pub fn resolve_ty_completely(&mut self, ty: Ty) -> Ty {\n+    pub(crate) fn resolve_ty_completely(&mut self, ty: Ty) -> Ty {\n         self.resolve_ty_completely_inner(&mut Vec::new(), ty)\n     }\n \n-    pub fn resolve_ty_as_possible(&mut self, ty: Ty) -> Ty {\n+    pub(crate) fn resolve_ty_as_possible(&mut self, ty: Ty) -> Ty {\n         self.resolve_ty_as_possible_inner(&mut Vec::new(), ty)\n     }\n \n-    pub fn unify(&mut self, ty1: &Ty, ty2: &Ty) -> bool {\n+    pub(crate) fn unify(&mut self, ty1: &Ty, ty2: &Ty) -> bool {\n         self.unify_inner(ty1, ty2, 0)\n     }\n \n-    pub fn unify_substs(&mut self, substs1: &Substs, substs2: &Substs, depth: usize) -> bool {\n+    pub(crate) fn unify_substs(\n+        &mut self,\n+        substs1: &Substs,\n+        substs2: &Substs,\n+        depth: usize,\n+    ) -> bool {\n         substs1.0.iter().zip(substs2.0.iter()).all(|(t1, t2)| self.unify_inner(t1, t2, depth))\n     }\n \n@@ -331,7 +340,7 @@ impl InferenceTable {\n \n     /// If `ty` is a type variable with known type, returns that type;\n     /// otherwise, return ty.\n-    pub fn resolve_ty_shallow<'b>(&mut self, ty: &'b Ty) -> Cow<'b, Ty> {\n+    pub(crate) fn resolve_ty_shallow<'b>(&mut self, ty: &'b Ty) -> Cow<'b, Ty> {\n         let mut ty = Cow::Borrowed(ty);\n         // The type variable could resolve to a int/float variable. Hence try\n         // resolving up to three times; each type of variable shouldn't occur"}, {"sha": "5a8c971985d85d2199c84008577fde08ff7ebaaf", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -1,6 +1,5 @@\n //! The type system. We currently use this to infer types for completion, hover\n //! information and various assists.\n-\n #[allow(unused)]\n macro_rules! eprintln {\n     ($($tt:tt)*) => { stdx::eprintln!($($tt)*) };\n@@ -1115,5 +1114,5 @@ pub struct ReturnTypeImplTraits {\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub(crate) struct ReturnTypeImplTrait {\n-    pub bounds: Binders<Vec<GenericPredicate>>,\n+    pub(crate) bounds: Binders<Vec<GenericPredicate>>,\n }"}, {"sha": "22254b7659e96564b95a0cead09aef56ea87f9fb", "filename": "crates/hir_ty/src/test_db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -21,7 +21,7 @@ use test_utils::extract_annotations;\n     crate::db::HirDatabaseStorage\n )]\n #[derive(Default)]\n-pub struct TestDB {\n+pub(crate) struct TestDB {\n     storage: salsa::Storage<TestDB>,\n     events: Mutex<Option<Vec<salsa::Event>>>,\n }\n@@ -113,13 +113,13 @@ impl TestDB {\n }\n \n impl TestDB {\n-    pub fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event> {\n+    pub(crate) fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event> {\n         *self.events.lock().unwrap() = Some(Vec::new());\n         f();\n         self.events.lock().unwrap().take().unwrap()\n     }\n \n-    pub fn log_executed(&self, f: impl FnOnce()) -> Vec<String> {\n+    pub(crate) fn log_executed(&self, f: impl FnOnce()) -> Vec<String> {\n         let events = self.log(f);\n         events\n             .into_iter()"}, {"sha": "75b16172e5868e73475c8a55f36cb0344ab15322", "filename": "crates/hir_ty/src/traits/chalk/tls.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -8,12 +8,12 @@ use super::{from_chalk, Interner, TypeAliasAsAssocType};\n use crate::{db::HirDatabase, CallableDefId};\n use hir_def::{AdtId, AssocContainerId, Lookup, TypeAliasId};\n \n-pub use unsafe_tls::{set_current_program, with_current_program};\n+pub(crate) use unsafe_tls::{set_current_program, with_current_program};\n \n-pub struct DebugContext<'a>(&'a dyn HirDatabase);\n+pub(crate) struct DebugContext<'a>(&'a dyn HirDatabase);\n \n impl DebugContext<'_> {\n-    pub fn debug_struct_id(\n+    pub(crate) fn debug_struct_id(\n         &self,\n         id: super::AdtId,\n         f: &mut fmt::Formatter<'_>,\n@@ -26,7 +26,7 @@ impl DebugContext<'_> {\n         write!(f, \"{}\", name)\n     }\n \n-    pub fn debug_trait_id(\n+    pub(crate) fn debug_trait_id(\n         &self,\n         id: super::TraitId,\n         fmt: &mut fmt::Formatter<'_>,\n@@ -36,7 +36,7 @@ impl DebugContext<'_> {\n         write!(fmt, \"{}\", trait_data.name)\n     }\n \n-    pub fn debug_assoc_type_id(\n+    pub(crate) fn debug_assoc_type_id(\n         &self,\n         id: super::AssocTypeId,\n         fmt: &mut fmt::Formatter<'_>,\n@@ -51,15 +51,15 @@ impl DebugContext<'_> {\n         write!(fmt, \"{}::{}\", trait_data.name, type_alias_data.name)\n     }\n \n-    pub fn debug_opaque_ty_id(\n+    pub(crate) fn debug_opaque_ty_id(\n         &self,\n         opaque_ty_id: chalk_ir::OpaqueTyId<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         fmt.debug_struct(\"OpaqueTyId\").field(\"index\", &opaque_ty_id.0).finish()\n     }\n \n-    pub fn debug_alias(\n+    pub(crate) fn debug_alias(\n         &self,\n         alias_ty: &AliasTy<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n@@ -70,7 +70,7 @@ impl DebugContext<'_> {\n         }\n     }\n \n-    pub fn debug_projection_ty(\n+    pub(crate) fn debug_projection_ty(\n         &self,\n         projection_ty: &chalk_ir::ProjectionTy<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n@@ -95,39 +95,39 @@ impl DebugContext<'_> {\n         write!(fmt, \">::{}\", type_alias_data.name)\n     }\n \n-    pub fn debug_opaque_ty(\n+    pub(crate) fn debug_opaque_ty(\n         &self,\n         opaque_ty: &chalk_ir::OpaqueTy<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         write!(fmt, \"{:?}\", opaque_ty.opaque_ty_id)\n     }\n \n-    pub fn debug_ty(\n+    pub(crate) fn debug_ty(\n         &self,\n         ty: &chalk_ir::Ty<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         write!(fmt, \"{:?}\", ty.data(&Interner))\n     }\n \n-    pub fn debug_lifetime(\n+    pub(crate) fn debug_lifetime(\n         &self,\n         lifetime: &Lifetime<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         write!(fmt, \"{:?}\", lifetime.data(&Interner))\n     }\n \n-    pub fn debug_generic_arg(\n+    pub(crate) fn debug_generic_arg(\n         &self,\n         parameter: &GenericArg<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         write!(fmt, \"{:?}\", parameter.data(&Interner).inner_debug())\n     }\n \n-    pub fn debug_goal(\n+    pub(crate) fn debug_goal(\n         &self,\n         goal: &Goal<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n@@ -136,39 +136,39 @@ impl DebugContext<'_> {\n         write!(fmt, \"{:?}\", goal_data)\n     }\n \n-    pub fn debug_goals(\n+    pub(crate) fn debug_goals(\n         &self,\n         goals: &Goals<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         write!(fmt, \"{:?}\", goals.debug(&Interner))\n     }\n \n-    pub fn debug_program_clause_implication(\n+    pub(crate) fn debug_program_clause_implication(\n         &self,\n         pci: &ProgramClauseImplication<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         write!(fmt, \"{:?}\", pci.debug(&Interner))\n     }\n \n-    pub fn debug_substitution(\n+    pub(crate) fn debug_substitution(\n         &self,\n         substitution: &chalk_ir::Substitution<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         write!(fmt, \"{:?}\", substitution.debug(&Interner))\n     }\n \n-    pub fn debug_separator_trait_ref(\n+    pub(crate) fn debug_separator_trait_ref(\n         &self,\n         separator_trait_ref: &chalk_ir::SeparatorTraitRef<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         write!(fmt, \"{:?}\", separator_trait_ref.debug(&Interner))\n     }\n \n-    pub fn debug_fn_def_id(\n+    pub(crate) fn debug_fn_def_id(\n         &self,\n         fn_def_id: chalk_ir::FnDefId<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n@@ -190,50 +190,50 @@ impl DebugContext<'_> {\n         }\n     }\n \n-    pub fn debug_const(\n+    pub(crate) fn debug_const(\n         &self,\n         _constant: &chalk_ir::Const<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> fmt::Result {\n         write!(fmt, \"const\")\n     }\n \n-    pub fn debug_variable_kinds(\n+    pub(crate) fn debug_variable_kinds(\n         &self,\n         variable_kinds: &chalk_ir::VariableKinds<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> fmt::Result {\n         write!(fmt, \"{:?}\", variable_kinds.as_slice(&Interner))\n     }\n-    pub fn debug_variable_kinds_with_angles(\n+    pub(crate) fn debug_variable_kinds_with_angles(\n         &self,\n         variable_kinds: &chalk_ir::VariableKinds<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> fmt::Result {\n         write!(fmt, \"{:?}\", variable_kinds.inner_debug(&Interner))\n     }\n-    pub fn debug_canonical_var_kinds(\n+    pub(crate) fn debug_canonical_var_kinds(\n         &self,\n         canonical_var_kinds: &chalk_ir::CanonicalVarKinds<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> fmt::Result {\n         write!(fmt, \"{:?}\", canonical_var_kinds.as_slice(&Interner))\n     }\n-    pub fn debug_program_clause(\n+    pub(crate) fn debug_program_clause(\n         &self,\n         clause: &chalk_ir::ProgramClause<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> fmt::Result {\n         write!(fmt, \"{:?}\", clause.data(&Interner))\n     }\n-    pub fn debug_program_clauses(\n+    pub(crate) fn debug_program_clauses(\n         &self,\n         clauses: &chalk_ir::ProgramClauses<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> fmt::Result {\n         write!(fmt, \"{:?}\", clauses.as_slice(&Interner))\n     }\n-    pub fn debug_quantified_where_clauses(\n+    pub(crate) fn debug_quantified_where_clauses(\n         &self,\n         clauses: &chalk_ir::QuantifiedWhereClauses<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n@@ -249,7 +249,7 @@ mod unsafe_tls {\n \n     scoped_thread_local!(static PROGRAM: DebugContext);\n \n-    pub fn with_current_program<R>(\n+    pub(crate) fn with_current_program<R>(\n         op: impl for<'a> FnOnce(Option<&'a DebugContext<'a>>) -> R,\n     ) -> R {\n         if PROGRAM.is_set() {\n@@ -259,7 +259,7 @@ mod unsafe_tls {\n         }\n     }\n \n-    pub fn set_current_program<OP, R>(p: &dyn HirDatabase, op: OP) -> R\n+    pub(crate) fn set_current_program<OP, R>(p: &dyn HirDatabase, op: OP) -> R\n     where\n         OP: FnOnce() -> R,\n     {"}, {"sha": "39a8eefbd6360c1e842813f946f43a301b78d3b3", "filename": "crates/mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -61,16 +61,16 @@ macro_rules! err {\n \n #[derive(Debug, Default)]\n pub(super) struct Match {\n-    pub bindings: Bindings,\n+    pub(super) bindings: Bindings,\n     /// We currently just keep the first error and count the rest to compare matches.\n-    pub err: Option<ExpandError>,\n-    pub err_count: usize,\n+    pub(super) err: Option<ExpandError>,\n+    pub(super) err_count: usize,\n     /// How many top-level token trees were left to match.\n-    pub unmatched_tts: usize,\n+    pub(super) unmatched_tts: usize,\n }\n \n impl Match {\n-    pub fn add_err(&mut self, err: ExpandError) {\n+    pub(super) fn add_err(&mut self, err: ExpandError) {\n         let prev_err = self.err.take();\n         self.err = prev_err.or(Some(err));\n         self.err_count += 1;"}, {"sha": "38237cdcfbc385851db9dd972dc213b8a2fa8de8", "filename": "crates/mbe/src/subtree_source.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -7,9 +7,9 @@ use tt::buffer::{Cursor, TokenBuffer};\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n struct TtToken {\n-    pub kind: SyntaxKind,\n-    pub is_joint_to_next: bool,\n-    pub text: SmolStr,\n+    kind: SyntaxKind,\n+    is_joint_to_next: bool,\n+    text: SmolStr,\n }\n \n pub(crate) struct SubtreeTokenSource<'a> {\n@@ -30,7 +30,7 @@ impl<'a> SubtreeTokenSource<'a> {\n }\n \n impl<'a> SubtreeTokenSource<'a> {\n-    pub fn new(buffer: &'a TokenBuffer) -> SubtreeTokenSource<'a> {\n+    pub(crate) fn new(buffer: &'a TokenBuffer) -> SubtreeTokenSource<'a> {\n         let cursor = buffer.begin();\n \n         let mut res = SubtreeTokenSource {"}, {"sha": "907cb3db71811d56749f9d5eb691e1d1858075ec", "filename": "crates/proc_macro_api/src/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -30,7 +30,7 @@ pub(crate) struct ProcMacroProcessThread {\n }\n \n impl ProcMacroProcessSrv {\n-    pub fn run(\n+    pub(crate) fn run(\n         process_path: PathBuf,\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n     ) -> io::Result<(ProcMacroProcessThread, ProcMacroProcessSrv)> {\n@@ -48,7 +48,7 @@ impl ProcMacroProcessSrv {\n         Ok((thread, srv))\n     }\n \n-    pub fn find_proc_macros(\n+    pub(crate) fn find_proc_macros(\n         &self,\n         dylib_path: &Path,\n     ) -> Result<Vec<(String, ProcMacroKind)>, tt::ExpansionError> {\n@@ -58,7 +58,7 @@ impl ProcMacroProcessSrv {\n         Ok(result.macros)\n     }\n \n-    pub fn custom_derive(\n+    pub(crate) fn custom_derive(\n         &self,\n         dylib_path: &Path,\n         subtree: &Subtree,\n@@ -75,7 +75,7 @@ impl ProcMacroProcessSrv {\n         Ok(result.expansion)\n     }\n \n-    pub fn send_task<R>(&self, req: Request) -> Result<R, tt::ExpansionError>\n+    pub(crate) fn send_task<R>(&self, req: Request) -> Result<R, tt::ExpansionError>\n     where\n         R: TryFrom<Response, Error = &'static str>,\n     {"}, {"sha": "203109ca40d18e54a15573b9d6f5af3c7d38b70b", "filename": "crates/proc_macro_api/src/rpc.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -75,18 +75,18 @@ struct TokenIdDef(u32);\n #[serde(remote = \"Delimiter\")]\n struct DelimiterDef {\n     #[serde(with = \"TokenIdDef\")]\n-    pub id: TokenId,\n+    id: TokenId,\n     #[serde(with = \"DelimiterKindDef\")]\n-    pub kind: DelimiterKind,\n+    kind: DelimiterKind,\n }\n \n #[derive(Serialize, Deserialize)]\n #[serde(remote = \"Subtree\")]\n struct SubtreeDef {\n     #[serde(default, with = \"opt_delimiter_def\")]\n-    pub delimiter: Option<Delimiter>,\n+    delimiter: Option<Delimiter>,\n     #[serde(with = \"vec_token_tree\")]\n-    pub token_trees: Vec<TokenTree>,\n+    token_trees: Vec<TokenTree>,\n }\n \n #[derive(Serialize, Deserialize)]\n@@ -112,19 +112,19 @@ enum LeafDef {\n #[derive(Serialize, Deserialize)]\n #[serde(remote = \"Literal\")]\n struct LiteralDef {\n-    pub text: SmolStr,\n+    text: SmolStr,\n     #[serde(with = \"TokenIdDef\")]\n-    pub id: TokenId,\n+    id: TokenId,\n }\n \n #[derive(Serialize, Deserialize)]\n #[serde(remote = \"Punct\")]\n struct PunctDef {\n-    pub char: char,\n+    char: char,\n     #[serde(with = \"SpacingDef\")]\n-    pub spacing: Spacing,\n+    spacing: Spacing,\n     #[serde(with = \"TokenIdDef\")]\n-    pub id: TokenId,\n+    id: TokenId,\n }\n \n #[derive(Serialize, Deserialize)]\n@@ -137,16 +137,16 @@ enum SpacingDef {\n #[derive(Serialize, Deserialize)]\n #[serde(remote = \"Ident\")]\n struct IdentDef {\n-    pub text: SmolStr,\n+    text: SmolStr,\n     #[serde(with = \"TokenIdDef\")]\n-    pub id: TokenId,\n+    id: TokenId,\n }\n \n mod opt_delimiter_def {\n     use super::{Delimiter, DelimiterDef};\n     use serde::{Deserialize, Deserializer, Serialize, Serializer};\n \n-    pub fn serialize<S>(value: &Option<Delimiter>, serializer: S) -> Result<S::Ok, S::Error>\n+    pub(super) fn serialize<S>(value: &Option<Delimiter>, serializer: S) -> Result<S::Ok, S::Error>\n     where\n         S: Serializer,\n     {\n@@ -155,7 +155,7 @@ mod opt_delimiter_def {\n         value.as_ref().map(Helper).serialize(serializer)\n     }\n \n-    pub fn deserialize<'de, D>(deserializer: D) -> Result<Option<Delimiter>, D::Error>\n+    pub(super) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Delimiter>, D::Error>\n     where\n         D: Deserializer<'de>,\n     {\n@@ -170,7 +170,7 @@ mod opt_subtree_def {\n     use super::{Subtree, SubtreeDef};\n     use serde::{Deserialize, Deserializer, Serialize, Serializer};\n \n-    pub fn serialize<S>(value: &Option<Subtree>, serializer: S) -> Result<S::Ok, S::Error>\n+    pub(super) fn serialize<S>(value: &Option<Subtree>, serializer: S) -> Result<S::Ok, S::Error>\n     where\n         S: Serializer,\n     {\n@@ -179,7 +179,7 @@ mod opt_subtree_def {\n         value.as_ref().map(Helper).serialize(serializer)\n     }\n \n-    pub fn deserialize<'de, D>(deserializer: D) -> Result<Option<Subtree>, D::Error>\n+    pub(super) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Subtree>, D::Error>\n     where\n         D: Deserializer<'de>,\n     {\n@@ -194,7 +194,7 @@ mod vec_token_tree {\n     use super::{TokenTree, TokenTreeDef};\n     use serde::{ser::SerializeSeq, Deserialize, Deserializer, Serialize, Serializer};\n \n-    pub fn serialize<S>(value: &Vec<TokenTree>, serializer: S) -> Result<S::Ok, S::Error>\n+    pub(super) fn serialize<S>(value: &Vec<TokenTree>, serializer: S) -> Result<S::Ok, S::Error>\n     where\n         S: Serializer,\n     {\n@@ -209,7 +209,7 @@ mod vec_token_tree {\n         seq.end()\n     }\n \n-    pub fn deserialize<'de, D>(deserializer: D) -> Result<Vec<TokenTree>, D::Error>\n+    pub(super) fn deserialize<'de, D>(deserializer: D) -> Result<Vec<TokenTree>, D::Error>\n     where\n         D: Deserializer<'de>,\n     {"}, {"sha": "6e890f8e28e84681fa05002600313e01a30f2d7d", "filename": "crates/proc_macro_srv/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fproc_macro_srv%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fproc_macro_srv%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Flib.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -9,6 +9,7 @@\n //!   RA than `proc-macro2` token stream.\n //! * By **copying** the whole rustc `lib_proc_macro` code, we are able to build this with `stable`\n //!   rustc rather than `unstable`. (Although in general ABI compatibility is still an issue)\u2026\n+#![allow(unreachable_pub)]\n \n #[allow(dead_code)]\n #[doc(hidden)]"}, {"sha": "8957ea0164342778928b56fd33ef6c9549a3ce22", "filename": "crates/profile/src/hprof.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fprofile%2Fsrc%2Fhprof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fprofile%2Fsrc%2Fhprof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fhprof.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -27,7 +27,7 @@ pub fn init_from(spec: &str) {\n     filter.install();\n }\n \n-pub type Label = &'static str;\n+type Label = &'static str;\n \n /// This function starts a profiling scope in the current execution stack with a given description.\n /// It returns a `Profile` struct that measures elapsed time between this method invocation and `Profile` struct drop.\n@@ -173,7 +173,7 @@ impl ProfileStack {\n         true\n     }\n \n-    pub fn pop(&mut self, label: Label, detail: Option<String>) {\n+    fn pop(&mut self, label: Label, detail: Option<String>) {\n         let start = self.starts.pop().unwrap();\n         let duration = start.elapsed();\n         self.messages.finish(Message { duration, label, detail });"}, {"sha": "3fac1f36c944565a1687c2038ce8e40256313ce9", "filename": "crates/profile/src/tree.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fprofile%2Fsrc%2Ftree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fprofile%2Fsrc%2Ftree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Ftree.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -4,15 +4,15 @@ use std::ops;\n use arena::Arena;\n \n #[derive(Default)]\n-pub struct Tree<T> {\n+pub(crate) struct Tree<T> {\n     nodes: Arena<Node<T>>,\n     current_path: Vec<(Idx<T>, Option<Idx<T>>)>,\n }\n \n-pub type Idx<T> = arena::Idx<Node<T>>;\n+pub(crate) type Idx<T> = arena::Idx<Node<T>>;\n \n impl<T> Tree<T> {\n-    pub fn start(&mut self)\n+    pub(crate) fn start(&mut self)\n     where\n         T: Default,\n     {\n@@ -30,19 +30,19 @@ impl<T> Tree<T> {\n         self.current_path.push((me, None));\n     }\n \n-    pub fn finish(&mut self, data: T) {\n+    pub(crate) fn finish(&mut self, data: T) {\n         let (me, _last_child) = self.current_path.pop().unwrap();\n         self.nodes[me].data = data;\n     }\n \n-    pub fn root(&self) -> Option<Idx<T>> {\n+    pub(crate) fn root(&self) -> Option<Idx<T>> {\n         self.nodes.iter().next().map(|(idx, _)| idx)\n     }\n \n-    pub fn children(&self, idx: Idx<T>) -> impl Iterator<Item = Idx<T>> + '_ {\n+    pub(crate) fn children(&self, idx: Idx<T>) -> impl Iterator<Item = Idx<T>> + '_ {\n         NodeIter { nodes: &self.nodes, next: self.nodes[idx].first_child }\n     }\n-    pub fn clear(&mut self) {\n+    pub(crate) fn clear(&mut self) {\n         self.nodes.clear();\n         self.current_path.clear();\n     }\n@@ -55,7 +55,7 @@ impl<T> ops::Index<Idx<T>> for Tree<T> {\n     }\n }\n \n-pub struct Node<T> {\n+pub(crate) struct Node<T> {\n     data: T,\n     first_child: Option<Idx<T>>,\n     next_sibling: Option<Idx<T>>,"}, {"sha": "8a0e3d27b21ab6647ed0229cbafccf0c9717c05a", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -17,7 +17,7 @@ use crate::{\n \n pub use self::{\n     expr_ext::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n-    generated::*,\n+    generated::{nodes::*, tokens::*},\n     node_ext::{\n         AttrKind, FieldKind, NameOrNameRef, PathSegmentKind, SelfParamKind, SlicePatComponents,\n         StructKind, TypeBoundKind, VisibilityKind,"}, {"sha": "843b43cf0b6ba1d61068f4a18d8f15c4d379b542", "filename": "crates/syntax/src/ast/generated.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -1,16 +1,16 @@\n //! This file is actually hand-written, but the submodules are indeed generated.\n #[rustfmt::skip]\n-mod nodes;\n+pub(crate) mod nodes;\n #[rustfmt::skip]\n-mod tokens;\n+pub(crate) mod tokens;\n \n use crate::{\n     AstNode,\n     SyntaxKind::{self, *},\n     SyntaxNode,\n };\n \n-pub use {nodes::*, tokens::*};\n+pub(crate) use nodes::*;\n \n // Stmt is the only nested enum, so it's easier to just hand-write it\n impl AstNode for Stmt {"}, {"sha": "e753b11bb84586365d198e1fe1b30ca0985f50ad", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -46,16 +46,19 @@ use text_edit::Indel;\n pub use crate::{\n     algo::InsertPosition,\n     ast::{AstNode, AstToken},\n-    parsing::{lex_single_syntax_kind, lex_single_valid_syntax_kind, tokenize, Token},\n+    parsing::lexer::{lex_single_syntax_kind, lex_single_valid_syntax_kind, tokenize, Token},\n     ptr::{AstPtr, SyntaxNodePtr},\n     syntax_error::SyntaxError,\n     syntax_node::{\n-        Direction, GreenNode, NodeOrToken, SyntaxElement, SyntaxElementChildren, SyntaxNode,\n-        SyntaxNodeChildren, SyntaxToken, SyntaxTreeBuilder,\n+        SyntaxElement, SyntaxElementChildren, SyntaxNode, SyntaxNodeChildren, SyntaxToken,\n+        SyntaxTreeBuilder,\n     },\n };\n pub use parser::{SyntaxKind, T};\n-pub use rowan::{SmolStr, SyntaxText, TextRange, TextSize, TokenAtOffset, WalkEvent};\n+pub use rowan::{\n+    Direction, GreenNode, NodeOrToken, SmolStr, SyntaxText, TextRange, TextSize, TokenAtOffset,\n+    WalkEvent,\n+};\n \n /// `Parse` is the result of the parsing: a syntax tree and a collection of\n /// errors."}, {"sha": "333bde54abb04411e08f155e02c34d07034e3bc7", "filename": "crates/syntax/src/parsing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fsyntax%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fsyntax%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -1,7 +1,7 @@\n //! Lexing, bridging to parser (which does the actual parsing) and\n //! incremental reparsing.\n \n-mod lexer;\n+pub(crate) mod lexer;\n mod text_token_source;\n mod text_tree_sink;\n mod reparsing;\n@@ -10,7 +10,7 @@ use crate::{syntax_node::GreenNode, AstNode, SyntaxError, SyntaxNode};\n use text_token_source::TextTokenSource;\n use text_tree_sink::TextTreeSink;\n \n-pub use lexer::*;\n+pub(crate) use lexer::*;\n \n pub(crate) use self::reparsing::incremental_reparse;\n use parser::SyntaxKind;"}, {"sha": "0614194a56b4821df30808598b7aa90a222ddb4c", "filename": "crates/syntax/src/parsing/text_token_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_token_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_token_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_token_source.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -65,7 +65,7 @@ fn mk_token(pos: usize, token_offset_pairs: &[(Token, TextSize)]) -> parser::Tok\n \n impl<'t> TextTokenSource<'t> {\n     /// Generate input from tokens(expect comment and whitespace).\n-    pub fn new(text: &'t str, raw_tokens: &'t [Token]) -> TextTokenSource<'t> {\n+    pub(crate) fn new(text: &'t str, raw_tokens: &'t [Token]) -> TextTokenSource<'t> {\n         let token_offset_pairs: Vec<_> = raw_tokens\n             .iter()\n             .filter_map({"}, {"sha": "cc30138faa00e8603a864b35055c15c3e9b36d53", "filename": "crates/syntax/src/syntax_node.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -10,9 +10,7 @@ use rowan::{GreenNodeBuilder, Language};\n \n use crate::{Parse, SmolStr, SyntaxError, SyntaxKind, TextSize};\n \n-pub use rowan::GreenNode;\n-\n-pub(crate) use rowan::GreenToken;\n+pub(crate) use rowan::{GreenNode, GreenToken, NodeOrToken};\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub enum RustLanguage {}\n@@ -34,8 +32,6 @@ pub type SyntaxElement = rowan::SyntaxElement<RustLanguage>;\n pub type SyntaxNodeChildren = rowan::SyntaxNodeChildren<RustLanguage>;\n pub type SyntaxElementChildren = rowan::SyntaxElementChildren<RustLanguage>;\n \n-pub use rowan::{Direction, NodeOrToken};\n-\n #[derive(Default)]\n pub struct SyntaxTreeBuilder {\n     errors: Vec<SyntaxError>,"}, {"sha": "7a213fc3e05a15455b5ab867ba49d9017844ad47", "filename": "crates/vfs/src/vfs_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fvfs_path.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -287,7 +287,7 @@ impl VirtualPath {\n         Some(res)\n     }\n \n-    pub fn name_and_extension(&self) -> Option<(&str, Option<&str>)> {\n+    pub(crate) fn name_and_extension(&self) -> Option<(&str, Option<&str>)> {\n         let file_path = if self.0.ends_with('/') { &self.0[..&self.0.len() - 1] } else { &self.0 };\n         let file_name = match file_path.rfind('/') {\n             Some(position) => &file_path[position + 1..],"}, {"sha": "6e4abd10c014115abd6994643a2d2053113da48c", "filename": "xtask/src/codegen/gen_parser_tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6101184537b1165cfdd5fc473e04ad4c5b7bffa/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs?ref=b6101184537b1165cfdd5fc473e04ad4c5b7bffa", "patch": "@@ -45,15 +45,15 @@ pub fn generate_parser_tests(mode: Mode) -> Result<()> {\n \n #[derive(Debug)]\n struct Test {\n-    pub name: String,\n-    pub text: String,\n-    pub ok: bool,\n+    name: String,\n+    text: String,\n+    ok: bool,\n }\n \n #[derive(Default, Debug)]\n struct Tests {\n-    pub ok: HashMap<String, Test>,\n-    pub err: HashMap<String, Test>,\n+    ok: HashMap<String, Test>,\n+    err: HashMap<String, Test>,\n }\n \n fn collect_tests(s: &str) -> Vec<Test> {"}]}