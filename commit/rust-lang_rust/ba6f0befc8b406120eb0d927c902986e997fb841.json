{"sha": "ba6f0befc8b406120eb0d927c902986e997fb841", "node_id": "C_kwDOAAsO6NoAKGJhNmYwYmVmYzhiNDA2MTIwZWIwZDkyN2M5MDI5ODZlOTk3ZmI4NDE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-08T18:54:08Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-08T18:54:08Z"}, "message": "Simplify `remove_parentheses`'s implementation", "tree": {"sha": "3633d5c6cd77f63fe606851263550f4dccd5d7b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3633d5c6cd77f63fe606851263550f4dccd5d7b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba6f0befc8b406120eb0d927c902986e997fb841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6f0befc8b406120eb0d927c902986e997fb841", "html_url": "https://github.com/rust-lang/rust/commit/ba6f0befc8b406120eb0d927c902986e997fb841", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba6f0befc8b406120eb0d927c902986e997fb841/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d42439a7d5c3edbb0ef6d1398436944ed662111", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d42439a7d5c3edbb0ef6d1398436944ed662111", "html_url": "https://github.com/rust-lang/rust/commit/8d42439a7d5c3edbb0ef6d1398436944ed662111"}], "stats": {"total": 27, "additions": 6, "deletions": 21}, "files": [{"sha": "185beda9d0796911715af7e5be74a333cd63bee6", "filename": "crates/ide-assists/src/handlers/remove_parentheses.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ba6f0befc8b406120eb0d927c902986e997fb841/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_parentheses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6f0befc8b406120eb0d927c902986e997fb841/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_parentheses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_parentheses.rs?ref=ba6f0befc8b406120eb0d927c902986e997fb841", "patch": "@@ -1,4 +1,4 @@\n-use syntax::{ast, AstNode, SyntaxKind, TextRange};\n+use syntax::{ast, AstNode};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -19,43 +19,28 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // ```\n pub(crate) fn remove_parentheses(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n     let parens = ctx.find_node_at_offset::<ast::ParenExpr>()?;\n-    let l_paren = parens.l_paren_token()?;\n-    let r_paren = parens.r_paren_token()?;\n \n-    let cursor_in_range = l_paren.text_range().contains_range(ctx.selection_trimmed())\n-        || r_paren.text_range().contains_range(ctx.selection_trimmed());\n+    let cursor_in_range =\n+        parens.l_paren_token()?.text_range().contains_range(ctx.selection_trimmed())\n+            || parens.r_paren_token()?.text_range().contains_range(ctx.selection_trimmed());\n     if !cursor_in_range {\n         return None;\n     }\n \n     let expr = parens.expr()?;\n+\n     let parent = ast::Expr::cast(parens.syntax().parent()?);\n     let is_ok_to_remove = expr.precedence() >= parent.as_ref().and_then(ast::Expr::precedence);\n     if !is_ok_to_remove {\n         return None;\n     }\n \n-    let delete_from_l = l_paren.text_range().start();\n-    let delete_to_l = match l_paren.next_token() {\n-        Some(it) if it.kind() == SyntaxKind::WHITESPACE => it.text_range().end(),\n-        _ => l_paren.text_range().end(),\n-    };\n-\n-    let delete_from_r = match r_paren.prev_token() {\n-        Some(it) if it.kind() == SyntaxKind::WHITESPACE => it.text_range().start(),\n-        _ => r_paren.text_range().start(),\n-    };\n-    let delete_to_r = r_paren.text_range().end();\n-\n     let target = parens.syntax().text_range();\n     acc.add(\n         AssistId(\"remove_parentheses\", AssistKind::Refactor),\n         \"Remove redundant parentheses\",\n         target,\n-        |builder| {\n-            builder.delete(TextRange::new(delete_from_l, delete_to_l));\n-            builder.delete(TextRange::new(delete_from_r, delete_to_r));\n-        },\n+        |builder| builder.replace_ast(parens.into(), expr),\n     )\n }\n "}]}