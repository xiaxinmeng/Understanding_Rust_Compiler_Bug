{"sha": "1e57774011ab634a04c0efd3bf2e956ee8997245", "node_id": "C_kwDOAAsO6NoAKDFlNTc3NzQwMTFhYjYzNGEwNGMwZWZkM2JmMmU5NTZlZTg5OTcyNDU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-18T17:23:36Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-18T17:23:36Z"}, "message": "Move set_function_span earlier", "tree": {"sha": "a4d8aab96a8bc1cbfda9b88b097dc6639dda7d28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4d8aab96a8bc1cbfda9b88b097dc6639dda7d28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e57774011ab634a04c0efd3bf2e956ee8997245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e57774011ab634a04c0efd3bf2e956ee8997245", "html_url": "https://github.com/rust-lang/rust/commit/1e57774011ab634a04c0efd3bf2e956ee8997245", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e57774011ab634a04c0efd3bf2e956ee8997245/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01be0ddacfa84559947d024c6060a99c63c48e29", "url": "https://api.github.com/repos/rust-lang/rust/commits/01be0ddacfa84559947d024c6060a99c63c48e29", "html_url": "https://github.com/rust-lang/rust/commit/01be0ddacfa84559947d024c6060a99c63c48e29"}], "stats": {"total": 65, "additions": 41, "deletions": 24}, "files": [{"sha": "8440a03335a4258be9de92c023f7097054adf035", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e57774011ab634a04c0efd3bf2e956ee8997245/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e57774011ab634a04c0efd3bf2e956ee8997245/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=1e57774011ab634a04c0efd3bf2e956ee8997245", "patch": "@@ -85,7 +85,7 @@ fn codegen_fn<'tcx>(\n     let clif_comments = crate::pretty_clif::CommentWriter::new(tcx, instance);\n \n     let func_debug_cx = if let Some(debug_context) = &mut cx.debug_context {\n-        Some(debug_context.define_function(symbol_name.name))\n+        Some(debug_context.define_function(tcx, symbol_name.name, mir.span))\n     } else {\n         None\n     };"}, {"sha": "5a13b9681c0fc4f9d6081f7c1cf7874c4d53bbc9", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1e57774011ab634a04c0efd3bf2e956ee8997245/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e57774011ab634a04c0efd3bf2e956ee8997245/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=1e57774011ab634a04c0efd3bf2e956ee8997245", "patch": "@@ -3,6 +3,7 @@\n use std::ffi::OsStr;\n use std::path::{Component, Path};\n \n+use crate::debuginfo::FunctionDebugContext;\n use crate::prelude::*;\n \n use rustc_data_structures::sync::Lrc;\n@@ -15,7 +16,6 @@ use cranelift_codegen::MachSrcLoc;\n \n use gimli::write::{\n     Address, AttributeValue, FileId, FileInfo, LineProgram, LineString, LineStringTable,\n-    UnitEntryId,\n };\n \n // OPTIMIZATION: It is cheaper to do this in one pass than using `.parent()` and `.file_name()`.\n@@ -121,19 +121,39 @@ fn line_program_add_file(\n     }\n }\n \n-impl DebugContext {\n+impl FunctionDebugContext {\n+    pub(super) fn set_function_span(\n+        &mut self,\n+        debug_context: &mut DebugContext,\n+        tcx: TyCtxt<'_>,\n+        span: Span,\n+    ) {\n+        let (file, line, column) = get_span_loc(tcx, span, span);\n+\n+        let file_id = line_program_add_file(\n+            &mut debug_context.dwarf.unit.line_program,\n+            &mut debug_context.dwarf.line_strings,\n+            &file,\n+        );\n+\n+        let entry = debug_context.dwarf.unit.get_mut(self.entry_id);\n+        entry.set(gimli::DW_AT_decl_file, AttributeValue::FileIndex(Some(file_id)));\n+        entry.set(gimli::DW_AT_decl_line, AttributeValue::Udata(line));\n+        entry.set(gimli::DW_AT_decl_column, AttributeValue::Udata(column));\n+    }\n+\n     pub(super) fn create_debug_lines(\n         &mut self,\n+        debug_context: &mut DebugContext,\n         tcx: TyCtxt<'_>,\n         symbol: usize,\n-        entry_id: UnitEntryId,\n         context: &Context,\n         function_span: Span,\n         source_info_set: &indexmap::IndexSet<SourceInfo>,\n     ) -> CodeOffset {\n-        let line_program = &mut self.dwarf.unit.line_program;\n+        let line_program = &mut debug_context.dwarf.unit.line_program;\n \n-        let line_strings = &mut self.dwarf.line_strings;\n+        let line_strings = &mut debug_context.dwarf.line_strings;\n         let mut last_span = None;\n         let mut last_file = None;\n         let mut create_row_for_span = |line_program: &mut LineProgram, span: Span| {\n@@ -189,24 +209,12 @@ impl DebugContext {\n \n         assert_ne!(func_end, 0);\n \n-        let (function_file, function_line, function_col) =\n-            get_span_loc(tcx, function_span, function_span);\n-\n-        let function_file_id = line_program_add_file(\n-            &mut self.dwarf.unit.line_program,\n-            &mut self.dwarf.line_strings,\n-            &function_file,\n-        );\n-\n-        let entry = self.dwarf.unit.get_mut(entry_id);\n+        let entry = debug_context.dwarf.unit.get_mut(self.entry_id);\n         entry.set(\n             gimli::DW_AT_low_pc,\n             AttributeValue::Address(Address::Symbol { symbol, addend: 0 }),\n         );\n         entry.set(gimli::DW_AT_high_pc, AttributeValue::Udata(u64::from(func_end)));\n-        entry.set(gimli::DW_AT_decl_file, AttributeValue::FileIndex(Some(function_file_id)));\n-        entry.set(gimli::DW_AT_decl_line, AttributeValue::Udata(function_line));\n-        entry.set(gimli::DW_AT_decl_column, AttributeValue::Udata(function_col));\n \n         func_end\n     }"}, {"sha": "169b7d1ef4c0e3fc45ae828a122fb8659e0e1510", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1e57774011ab634a04c0efd3bf2e956ee8997245/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e57774011ab634a04c0efd3bf2e956ee8997245/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=1e57774011ab634a04c0efd3bf2e956ee8997245", "patch": "@@ -99,7 +99,12 @@ impl DebugContext {\n         DebugContext { endian, dwarf, unit_range_list: RangeList(Vec::new()) }\n     }\n \n-    pub(crate) fn define_function(&mut self, name: &str) -> FunctionDebugContext {\n+    pub(crate) fn define_function(\n+        &mut self,\n+        tcx: TyCtxt<'_>,\n+        name: &str,\n+        function_span: Span,\n+    ) -> FunctionDebugContext {\n         // FIXME: add to appropriate scope instead of root\n         let scope = self.dwarf.unit.root();\n \n@@ -110,13 +115,17 @@ impl DebugContext {\n         entry.set(gimli::DW_AT_name, AttributeValue::StringRef(name_id));\n         entry.set(gimli::DW_AT_linkage_name, AttributeValue::StringRef(name_id));\n \n-        FunctionDebugContext { entry_id }\n+        let mut function_debug_context = FunctionDebugContext { entry_id };\n+\n+        function_debug_context.set_function_span(self, tcx, function_span);\n+\n+        function_debug_context\n     }\n }\n \n impl FunctionDebugContext {\n     pub(crate) fn finalize(\n-        self,\n+        mut self,\n         debug_context: &mut DebugContext,\n         tcx: TyCtxt<'_>,\n         func_id: FuncId,\n@@ -126,10 +135,10 @@ impl FunctionDebugContext {\n     ) {\n         let symbol = func_id.as_u32() as usize;\n \n-        let end = debug_context.create_debug_lines(\n+        let end = self.create_debug_lines(\n+            debug_context,\n             tcx,\n             symbol,\n-            self.entry_id,\n             context,\n             function_span,\n             source_info_set,"}]}