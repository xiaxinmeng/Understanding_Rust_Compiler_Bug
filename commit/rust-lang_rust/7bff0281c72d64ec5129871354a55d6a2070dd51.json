{"sha": "7bff0281c72d64ec5129871354a55d6a2070dd51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZmYwMjgxYzcyZDY0ZWM1MTI5ODcxMzU0YTU1ZDZhMjA3MGRkNTE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-24T02:54:46Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-24T03:00:16Z"}, "message": "optimize util::swap, &mut pointers never alias", "tree": {"sha": "c4b507c7d835956958e4c8a95f87a50ca6f40082", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4b507c7d835956958e4c8a95f87a50ca6f40082"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bff0281c72d64ec5129871354a55d6a2070dd51", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bff0281c72d64ec5129871354a55d6a2070dd51", "html_url": "https://github.com/rust-lang/rust/commit/7bff0281c72d64ec5129871354a55d6a2070dd51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bff0281c72d64ec5129871354a55d6a2070dd51/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7f450ab2284ace796ce01f99919f058735c491c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f450ab2284ace796ce01f99919f058735c491c", "html_url": "https://github.com/rust-lang/rust/commit/a7f450ab2284ace796ce01f99919f058735c491c"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "d1c0ffe79531118394508c9e8f524f79a86ef7e9", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7bff0281c72d64ec5129871354a55d6a2070dd51/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bff0281c72d64ec5129871354a55d6a2070dd51/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=7bff0281c72d64ec5129871354a55d6a2070dd51", "patch": "@@ -112,6 +112,28 @@ pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n     memmove64(dst as *mut u8, src as *u8, n as u64);\n }\n \n+#[inline(always)]\n+#[cfg(target_word_size = \"32\")]\n+pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: uint) {\n+    #[cfg(stage0)]\n+    use memcpy32 = unstable::intrinsics::memmove32;\n+    #[cfg(not(stage0))]\n+    use unstable::intrinsics::memcpy32;\n+    let n = count * sys::size_of::<T>();\n+    memcpy32(dst as *mut u8, src as *u8, n as u32);\n+}\n+\n+#[inline(always)]\n+#[cfg(target_word_size = \"64\")]\n+pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: uint) {\n+    #[cfg(stage0)]\n+    use memcpy64 = unstable::intrinsics::memmove64;\n+    #[cfg(not(stage0))]\n+    use unstable::intrinsics::memcpy64;\n+    let n = count * sys::size_of::<T>();\n+    memcpy64(dst as *mut u8, src as *u8, n as u64);\n+}\n+\n #[inline(always)]\n pub unsafe fn set_memory<T>(dst: *mut T, c: int, count: uint) {\n     let n = count * sys::size_of::<T>();"}, {"sha": "521708621fc8934a512613f9b7dd6d1b13017bf8", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7bff0281c72d64ec5129871354a55d6a2070dd51/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bff0281c72d64ec5129871354a55d6a2070dd51/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=7bff0281c72d64ec5129871354a55d6a2070dd51", "patch": "@@ -31,7 +31,6 @@ A quick refresher on memory ordering:\n   with atomic types and is equivalent to Java's `volatile`.\n \n */\n-\n #[abi = \"rust-intrinsic\"]\n pub extern \"rust-intrinsic\" {\n "}, {"sha": "400a13896be8c9aea4af6f096951db4a889cf3bb", "filename": "src/libstd/util.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7bff0281c72d64ec5129871354a55d6a2070dd51/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bff0281c72d64ec5129871354a55d6a2070dd51/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=7bff0281c72d64ec5129871354a55d6a2070dd51", "patch": "@@ -51,7 +51,18 @@ pub fn with<T,R>(\n #[inline(always)]\n pub fn swap<T>(x: &mut T, y: &mut T) {\n     unsafe {\n-        swap_ptr(ptr::to_mut_unsafe_ptr(x), ptr::to_mut_unsafe_ptr(y));\n+        // Give ourselves some scratch space to work with\n+        let mut tmp: T = intrinsics::uninit();\n+        let t: *mut T = &mut tmp;\n+\n+        // Perform the swap, `&mut` pointers never alias\n+        ptr::copy_nonoverlapping_memory(t, x, 1);\n+        ptr::copy_nonoverlapping_memory(x, y, 1);\n+        ptr::copy_nonoverlapping_memory(y, t, 1);\n+\n+        // y and t now point to the same thing, but we need to completely forget `tmp`\n+        // because it's no longer relevant.\n+        cast::forget(tmp);\n     }\n }\n \n@@ -63,7 +74,7 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n pub unsafe fn swap_ptr<T>(x: *mut T, y: *mut T) {\n     // Give ourselves some scratch space to work with\n     let mut tmp: T = intrinsics::uninit();\n-    let t = ptr::to_mut_unsafe_ptr(&mut tmp);\n+    let t: *mut T = &mut tmp;\n \n     // Perform the swap\n     ptr::copy_memory(t, x, 1);"}]}