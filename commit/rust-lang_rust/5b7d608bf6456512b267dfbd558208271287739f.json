{"sha": "5b7d608bf6456512b267dfbd558208271287739f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViN2Q2MDhiZjY0NTY1MTJiMjY3ZGZiZDU1ODIwODI3MTI4NzczOWY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-30T20:31:03Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-30T20:31:03Z"}, "message": "std: add more json decoder tests.", "tree": {"sha": "017b6eb4390023a838e7a369e5207307dcd7da06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/017b6eb4390023a838e7a369e5207307dcd7da06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b7d608bf6456512b267dfbd558208271287739f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7d608bf6456512b267dfbd558208271287739f", "html_url": "https://github.com/rust-lang/rust/commit/5b7d608bf6456512b267dfbd558208271287739f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b7d608bf6456512b267dfbd558208271287739f/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f364cf54631fc22860d0f00fb60f6a1dea3d7fd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f364cf54631fc22860d0f00fb60f6a1dea3d7fd2", "html_url": "https://github.com/rust-lang/rust/commit/f364cf54631fc22860d0f00fb60f6a1dea3d7fd2"}], "stats": {"total": 136, "additions": 124, "deletions": 12}, "files": [{"sha": "e090d6bc036d8444fceed65435ad4eb6081671f6", "filename": "src/libstd/json.rs", "status": "modified", "additions": 124, "deletions": 12, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/5b7d608bf6456512b267dfbd558208271287739f/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7d608bf6456512b267dfbd558208271287739f/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=5b7d608bf6456512b267dfbd558208271287739f", "patch": "@@ -1173,6 +1173,22 @@ mod tests {\n         Frog(~str, int)\n     }\n \n+    #[auto_encode]\n+    #[auto_decode]\n+    #[deriving(Eq)]\n+    struct Inner {\n+        a: (),\n+        b: uint,\n+        c: ~[~str],\n+    }\n+\n+    #[auto_encode]\n+    #[auto_decode]\n+    #[deriving(Eq)]\n+    struct Outer {\n+        inner: ~[Inner],\n+    }\n+\n     fn mk_object(items: &[(~str, Json)]) -> Json {\n         let mut d = ~LinearMap::new();\n \n@@ -1441,6 +1457,18 @@ mod tests {\n         assert_eq!(from_str(~\" false \"), Ok(Boolean(false)));\n     }\n \n+    #[test]\n+    fn test_decode_identifiers() {\n+        let v: () = Decodable::decode(&Decoder(from_str(~\"null\").unwrap()));\n+        assert_eq!(v, ());\n+\n+        let v: bool = Decodable::decode(&Decoder(from_str(~\"true\").unwrap()));\n+        assert_eq!(v, true);\n+\n+        let v: bool = Decodable::decode(&Decoder(from_str(~\"false\").unwrap()));\n+        assert_eq!(v, false);\n+    }\n+\n     #[test]\n     fn test_read_number() {\n         assert_eq!(from_str(~\"+\"),\n@@ -1469,6 +1497,30 @@ mod tests {\n         assert_eq!(from_str(~\" 3 \"), Ok(Number(3f)));\n     }\n \n+    #[test]\n+    fn test_decode_numbers() {\n+        let v: float = Decodable::decode(&Decoder(from_str(~\"3\").unwrap()));\n+        assert_eq!(v, 3f);\n+\n+        let v: float = Decodable::decode(&Decoder(from_str(~\"3.1\").unwrap()));\n+        assert_eq!(v, 3.1f);\n+\n+        let v: float = Decodable::decode(&Decoder(from_str(~\"-1.2\").unwrap()));\n+        assert_eq!(v, -1.2f);\n+\n+        let v: float = Decodable::decode(&Decoder(from_str(~\"0.4\").unwrap()));\n+        assert_eq!(v, 0.4f);\n+\n+        let v: float = Decodable::decode(&Decoder(from_str(~\"0.4e5\").unwrap()));\n+        assert_eq!(v, 0.4e5f);\n+\n+        let v: float = Decodable::decode(&Decoder(from_str(~\"0.4e15\").unwrap()));\n+        assert_eq!(v, 0.4e15f);\n+\n+        let v: float = Decodable::decode(&Decoder(from_str(~\"0.4e-01\").unwrap()));\n+        assert_eq!(v, 0.4e-01f);\n+    }\n+\n     #[test]\n     fn test_read_str() {\n         assert_eq!(from_str(~\"\\\"\"),\n@@ -1486,12 +1538,38 @@ mod tests {\n         assert_eq!(from_str(~\"\\\"\\\\r\\\"\"), Ok(String(~\"\\r\")));\n         assert_eq!(from_str(~\"\\\"\\\\t\\\"\"), Ok(String(~\"\\t\")));\n         assert_eq!(from_str(~\" \\\"foo\\\" \"), Ok(String(~\"foo\")));\n+        assert_eq!(from_str(~\"\\\"\\\\u12ab\\\"\"), Ok(String(~\"\\u12ab\")));\n+        assert_eq!(from_str(~\"\\\"\\\\uAB12\\\"\"), Ok(String(~\"\\uAB12\")));\n     }\n \n     #[test]\n-    fn test_unicode_hex_escapes_in_str() {\n-        assert_eq!(from_str(~\"\\\"\\\\u12ab\\\"\"), Ok(String(~\"\\u12ab\")));\n-        assert_eq!(from_str(~\"\\\"\\\\uAB12\\\"\"), Ok(String(~\"\\uAB12\")));\n+    fn test_decode_str() {\n+        let v: ~str = Decodable::decode(&Decoder(from_str(~\"\\\"\\\"\").unwrap()));\n+        assert_eq!(v, ~\"\");\n+\n+        let v: ~str = Decodable::decode(&Decoder(from_str(~\"\\\"foo\\\"\").unwrap()));\n+        assert_eq!(v, ~\"foo\");\n+\n+        let v: ~str = Decodable::decode(&Decoder(from_str(~\"\\\"\\\\\\\"\\\"\").unwrap()));\n+        assert_eq!(v, ~\"\\\"\");\n+\n+        let v: ~str = Decodable::decode(&Decoder(from_str(~\"\\\"\\\\b\\\"\").unwrap()));\n+        assert_eq!(v, ~\"\\x08\");\n+\n+        let v: ~str = Decodable::decode(&Decoder(from_str(~\"\\\"\\\\n\\\"\").unwrap()));\n+        assert_eq!(v, ~\"\\n\");\n+\n+        let v: ~str = Decodable::decode(&Decoder(from_str(~\"\\\"\\\\r\\\"\").unwrap()));\n+        assert_eq!(v, ~\"\\r\");\n+\n+        let v: ~str = Decodable::decode(&Decoder(from_str(~\"\\\"\\\\t\\\"\").unwrap()));\n+        assert_eq!(v, ~\"\\t\");\n+\n+        let v: ~str = Decodable::decode(&Decoder(from_str(~\"\\\"\\\\u12ab\\\"\").unwrap()));\n+        assert_eq!(v, ~\"\\u12ab\");\n+\n+        let v: ~str = Decodable::decode(&Decoder(from_str(~\"\\\"\\\\uAB12\\\"\").unwrap()));\n+        assert_eq!(v, ~\"\\uAB12\");\n     }\n \n     #[test]\n@@ -1520,6 +1598,28 @@ mod tests {\n                Ok(List(~[Number(2f), List(~[Number(4f), Number(1f)])])));\n     }\n \n+    #[test]\n+    fn test_decode_list() {\n+        let v: ~[()] = Decodable::decode(&Decoder(from_str(~\"[]\").unwrap()));\n+        assert_eq!(v, ~[]);\n+\n+        let v: ~[()] = Decodable::decode(&Decoder(from_str(~\"[null]\").unwrap()));\n+        assert_eq!(v, ~[()]);\n+\n+\n+        let v: ~[bool] = Decodable::decode(&Decoder(from_str(~\"[true]\").unwrap()));\n+        assert_eq!(v, ~[true]);\n+\n+        let v: ~[bool] = Decodable::decode(&Decoder(from_str(~\"[true]\").unwrap()));\n+        assert_eq!(v, ~[true]);\n+\n+        let v: ~[int] = Decodable::decode(&Decoder(from_str(~\"[3, 1]\").unwrap()));\n+        assert_eq!(v, ~[3, 1]);\n+\n+        let v: ~[~[uint]] = Decodable::decode(&Decoder(from_str(~\"[[3], [1, 2]]\").unwrap()));\n+        assert_eq!(v, ~[~[3], ~[1, 2]]);\n+    }\n+\n     #[test]\n     fn test_read_object() {\n         assert_eq!(from_str(~\"{\"),\n@@ -1612,35 +1712,47 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_read_none() {\n+    fn test_decode_struct() {\n+        let s = ~\"{\n+            \\\"inner\\\": [\n+                { \\\"a\\\": null, \\\"b\\\": 2, \\\"c\\\": [\\\"abc\\\", \\\"xyz\\\"] }\n+            ]\n+        }\";\n+        let v: Outer = Decodable::decode(&Decoder(from_str(s).unwrap()));\n+        assert_eq!(\n+            v,\n+            Outer {\n+                inner: ~[\n+                    Inner { a: (), b: 2, c: ~[~\"abc\", ~\"xyz\"] }\n+                ]\n+            }\n+        );\n+    }\n+\n+    #[test]\n+    fn test_decode_option() {\n         let decoder = Decoder(from_str(~\"null\").unwrap());\n         let value: Option<~str> = Decodable::decode(&decoder);\n         assert_eq!(value, None);\n-    }\n \n-    #[test]\n-    fn test_read_some() {\n         let decoder = Decoder(from_str(~\"\\\"jodhpurs\\\"\").unwrap());\n         let value: Option<~str> = Decodable::decode(&decoder);\n         assert_eq!(value, Some(~\"jodhpurs\"));\n     }\n \n     #[test]\n-    fn test_read_enum_no_args() {\n+    fn test_decode_enum() {\n         let decoder = Decoder(from_str(~\"\\\"Dog\\\"\").unwrap());\n         let value: Animal = Decodable::decode(&decoder);\n         assert_eq!(value, Dog);\n-    }\n \n-    #[test]\n-    fn test_read_enum_multiple_args() {\n         let decoder = Decoder(from_str(~\"[\\\"Frog\\\",\\\"Henry\\\",349]\").unwrap());\n         let value: Animal = Decodable::decode(&decoder);\n         assert_eq!(value, Frog(~\"Henry\", 349));\n     }\n \n     #[test]\n-    fn test_read_map() {\n+    fn test_decode_map() {\n         let s = ~\"{\\\"a\\\": \\\"Dog\\\", \\\"b\\\": [\\\"Frog\\\", \\\"Henry\\\", 349]}\";\n         let decoder = Decoder(from_str(s).unwrap());\n         let mut map: LinearMap<~str, Animal> = Decodable::decode(&decoder);"}]}