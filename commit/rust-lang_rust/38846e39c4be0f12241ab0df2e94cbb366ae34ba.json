{"sha": "38846e39c4be0f12241ab0df2e94cbb366ae34ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ODQ2ZTM5YzRiZTBmMTIyNDFhYjBkZjJlOTRjYmIzNjZhZTM0YmE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-29T20:29:57Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-29T20:29:57Z"}, "message": "Add ast.ty_mutable.", "tree": {"sha": "78b01de1abc68687f5057619de868763b8daf07b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78b01de1abc68687f5057619de868763b8daf07b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38846e39c4be0f12241ab0df2e94cbb366ae34ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38846e39c4be0f12241ab0df2e94cbb366ae34ba", "html_url": "https://github.com/rust-lang/rust/commit/38846e39c4be0f12241ab0df2e94cbb366ae34ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38846e39c4be0f12241ab0df2e94cbb366ae34ba/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20b11c832cee3f4ed7a7abaa0284c40d32dbd262", "url": "https://api.github.com/repos/rust-lang/rust/commits/20b11c832cee3f4ed7a7abaa0284c40d32dbd262", "html_url": "https://github.com/rust-lang/rust/commit/20b11c832cee3f4ed7a7abaa0284c40d32dbd262"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "a177f30187f22a2cef1713c078ffadc2957c04d1", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38846e39c4be0f12241ab0df2e94cbb366ae34ba/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38846e39c4be0f12241ab0df2e94cbb366ae34ba/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=38846e39c4be0f12241ab0df2e94cbb366ae34ba", "patch": "@@ -150,6 +150,7 @@ tag ty_ {\n     ty_tup(vec[tup(bool /* mutability */, @ty)]);\n     ty_fn(vec[rec(mode mode, @ty ty)], @ty);        // TODO: effect\n     ty_path(path, option.t[def]);\n+    ty_mutable(@ty);\n }\n \n tag mode {"}, {"sha": "ab0f795d6dd3c379f857dbfa9484c26a49b0d59d", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38846e39c4be0f12241ab0df2e94cbb366ae34ba/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38846e39c4be0f12241ab0df2e94cbb366ae34ba/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=38846e39c4be0f12241ab0df2e94cbb366ae34ba", "patch": "@@ -174,7 +174,12 @@ impure fn parse_ty(parser p) -> @ast.ty {\n             }\n         }\n \n-        case (token.AT) { p.bump(); t = ast.ty_box(parse_ty(p)); }\n+        case (token.AT) {\n+            p.bump();\n+            auto t0 = parse_ty(p);\n+            hi = t0.span;\n+            t = ast.ty_box(t0);\n+        }\n \n         case (token.VEC) {\n             p.bump();\n@@ -193,6 +198,13 @@ impure fn parse_ty(parser p) -> @ast.ty {\n             t = ast.ty_tup(elems.node);\n         }\n \n+        case (token.MUTABLE) {\n+            p.bump();\n+            auto t0 = parse_ty(p);\n+            hi = p.get_span();\n+            t = ast.ty_mutable(t0);\n+        }\n+\n         case (token.FN) {\n             t = parse_ty_fn(p);\n             alt (t) {"}, {"sha": "1caaa00e7d3f1ab5b6e44d89fe64520da0dba550", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38846e39c4be0f12241ab0df2e94cbb366ae34ba/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38846e39c4be0f12241ab0df2e94cbb366ae34ba/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=38846e39c4be0f12241ab0df2e94cbb366ae34ba", "patch": "@@ -55,6 +55,8 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp, ast.path p,\n          &option.t[def] d) -> @ty)                fold_ty_path,\n \n+     (fn(&ENV e, &span sp, @ty t) -> @ty)         fold_ty_mutable,\n+\n      // Expr folds.\n      (fn(&ENV e, &span sp,\n          vec[@expr] es, ann a) -> @expr)          fold_expr_vec,\n@@ -258,6 +260,11 @@ fn fold_ty[ENV](&ENV env, ast_fold[ENV] fld, @ty t) -> @ty {\n             ret fld.fold_ty_path(env_, t.span, path, ref_opt);\n         }\n \n+        case (ast.ty_mutable(?ty)) {\n+            auto ty_ = fold_ty(env, fld, ty);\n+            ret fld.fold_ty_mutable(env_, t.span, ty_);\n+        }\n+\n         case (ast.ty_fn(?inputs, ?output)) {\n             ret fld.fold_ty_fn(env_, t.span, inputs, output);\n         }\n@@ -659,6 +666,10 @@ fn identity_fold_ty_path[ENV](&ENV env, &span sp, ast.path p,\n     ret @respan(sp, ast.ty_path(p, d));\n }\n \n+fn identity_fold_ty_mutable[ENV](&ENV env, &span sp, @ty t) -> @ty {\n+    ret @respan(sp, ast.ty_mutable(t));\n+}\n+\n \n // Expr identities.\n \n@@ -908,6 +919,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_ty_tup     = bind identity_fold_ty_tup[ENV](_,_,_),\n          fold_ty_fn      = bind identity_fold_ty_fn[ENV](_,_,_,_),\n          fold_ty_path    = bind identity_fold_ty_path[ENV](_,_,_,_),\n+         fold_ty_mutable = bind identity_fold_ty_mutable[ENV](_,_,_),\n \n          fold_expr_vec    = bind identity_fold_expr_vec[ENV](_,_,_,_),\n          fold_expr_tup    = bind identity_fold_expr_tup[ENV](_,_,_,_),"}, {"sha": "0fd72d9e66f2d9ecfbf763c5f8296344ec0e7580", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38846e39c4be0f12241ab0df2e94cbb366ae34ba/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38846e39c4be0f12241ab0df2e94cbb366ae34ba/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=38846e39c4be0f12241ab0df2e94cbb366ae34ba", "patch": "@@ -122,6 +122,10 @@ fn ast_ty_to_str(&@ast.ty ty) -> str {\n             s = path_to_str(path);\n         }\n \n+        case (ast.ty_mutable(?t)) {\n+            s = \"mutable \" + ast_ty_to_str(t);\n+        }\n+\n         case (_) {\n             fail;   // FIXME: typestate bug\n         }\n@@ -213,6 +217,7 @@ fn ast_ty_to_ty(ty_getter getter, &@ast.ty ast_ty) -> @ty {\n         ret rec(mode=arg.mode, ty=ast_ty_to_ty(getter, arg.ty));\n     }\n \n+    auto mut = false;\n     auto sty;\n     auto cname = none[str];\n     alt (ast_ty.node) {\n@@ -252,12 +257,19 @@ fn ast_ty_to_ty(ty_getter getter, &@ast.ty ast_ty) -> @ty {\n             cname = some(path_to_str(path));\n         }\n \n+        case (ast.ty_mutable(?t)) {\n+            mut = true;\n+            auto t0 = ast_ty_to_ty(getter, t);\n+            sty = t0.struct;\n+            cname = t0.cname;\n+        }\n+\n         case (_) {\n             fail;\n         }\n     }\n \n-    ret @rec(struct=sty, mut=false, cname=cname);\n+    ret @rec(struct=sty, mut=mut, cname=cname);\n }\n \n // A convenience function to use a crate_ctxt to resolve names for"}]}