{"sha": "257ac1b4984f261dfe4572907955a24f43eee209", "node_id": "C_kwDOAAsO6NoAKDI1N2FjMWI0OTg0ZjI2MWRmZTQ1NzI5MDc5NTVhMjRmNDNlZWUyMDk", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-08-26T18:37:44Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-11-07T15:03:40Z"}, "message": "Improve error when an .rlib can't be parsed\n\nThis usually describes either an error in the compiler itself or some\nsort of IO error. Either way, we should report it to the user rather\nthan just saying \"crate not found\".\n\nThis only gives an error if the crate couldn't be loaded at all - if the\ncompiler finds another .rlib or .rmeta file which was valid, it will\ncontinue to compile the crate.\n\nExample output:\n```\nerror[E0785]: found invalid metadata files for crate `foo`\n --> bar.rs:3:24\n  |\n3 |         println!(\"{}\", foo::FOO_11_49[0]);\n  |                        ^^^\n  |\n  = warning: failed to parse rlib '/home/joshua/test-rustdoc/libfoo.rlib': Invalid archive extended name offset\n```", "tree": {"sha": "1d34fc788831e9b5b63a2a5020d29a06935a1094", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d34fc788831e9b5b63a2a5020d29a06935a1094"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/257ac1b4984f261dfe4572907955a24f43eee209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/257ac1b4984f261dfe4572907955a24f43eee209", "html_url": "https://github.com/rust-lang/rust/commit/257ac1b4984f261dfe4572907955a24f43eee209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/257ac1b4984f261dfe4572907955a24f43eee209/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90a273b785b3bc482b82c4896ba1bdea68745e46", "url": "https://api.github.com/repos/rust-lang/rust/commits/90a273b785b3bc482b82c4896ba1bdea68745e46", "html_url": "https://github.com/rust-lang/rust/commit/90a273b785b3bc482b82c4896ba1bdea68745e46"}], "stats": {"total": 134, "additions": 118, "deletions": 16}, "files": [{"sha": "ce26ff62235f466103df17ccdf0b1e07287460d6", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/257ac1b4984f261dfe4572907955a24f43eee209/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257ac1b4984f261dfe4572907955a24f43eee209/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=257ac1b4984f261dfe4572907955a24f43eee209", "patch": "@@ -484,6 +484,7 @@ E0782: include_str!(\"./error_codes/E0782.md\"),\n E0783: include_str!(\"./error_codes/E0783.md\"),\n E0784: include_str!(\"./error_codes/E0784.md\"),\n E0785: include_str!(\"./error_codes/E0785.md\"),\n+E0786: include_str!(\"./error_codes/E0786.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "4a9635bf51637c2c36bd5acd0770b41d50676132", "filename": "compiler/rustc_error_codes/src/error_codes/E0786.md", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/257ac1b4984f261dfe4572907955a24f43eee209/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0786.md", "raw_url": "https://github.com/rust-lang/rust/raw/257ac1b4984f261dfe4572907955a24f43eee209/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0786.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0786.md?ref=257ac1b4984f261dfe4572907955a24f43eee209", "patch": "@@ -0,0 +1,14 @@\n+A metadata file was invalid.\n+\n+Erroneous code example:\n+\n+```ignore (needs extern files)\n+use ::foo; // error: found invalid metadata files for crate `foo`\n+```\n+\n+When loading crates, each crate must have a valid metadata file.\n+Invalid files could be caused by filesystem corruption,\n+an IO error while reading the file, or (rarely) a bug in the compiler itself.\n+\n+Consider deleting the file and recreating it,\n+or reporting a bug against the compiler."}, {"sha": "7cba16e0a9ae38d9333afc16d1dc1b0b65699dfc", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 75, "deletions": 15, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/257ac1b4984f261dfe4572907955a24f43eee209/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257ac1b4984f261dfe4572907955a24f43eee209/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=257ac1b4984f261dfe4572907955a24f43eee209", "patch": "@@ -350,6 +350,7 @@ impl<'a> CrateLocator<'a> {\n         self.crate_rejections.via_kind.clear();\n         self.crate_rejections.via_version.clear();\n         self.crate_rejections.via_filename.clear();\n+        self.crate_rejections.via_invalid.clear();\n     }\n \n     crate fn maybe_load_library_crate(&mut self) -> Result<Option<Library>, CrateError> {\n@@ -548,7 +549,17 @@ impl<'a> CrateLocator<'a> {\n                             continue;\n                         }\n                     }\n-                    Err(err) => {\n+                    Err(MetadataError::LoadFailure(err)) => {\n+                        info!(\"no metadata found: {}\", err);\n+                        // The file was present and created by the same compiler version, but we\n+                        // couldn't load it for some reason.  Give a hard error instead of silently\n+                        // ignoring it, but only if we would have given an error anyway.\n+                        self.crate_rejections\n+                            .via_invalid\n+                            .push(CrateMismatch { path: lib, got: err });\n+                        continue;\n+                    }\n+                    Err(err @ MetadataError::NotPresent(_)) => {\n                         info!(\"no metadata found: {}\", err);\n                         continue;\n                     }\n@@ -726,25 +737,28 @@ impl<'a> CrateLocator<'a> {\n fn get_metadata_section(\n     target: &Target,\n     flavor: CrateFlavor,\n-    filename: &Path,\n+    filename: &'p Path,\n     loader: &dyn MetadataLoader,\n-) -> Result<MetadataBlob, String> {\n+) -> Result<MetadataBlob, MetadataError<'p>> {\n     if !filename.exists() {\n-        return Err(format!(\"no such file: '{}'\", filename.display()));\n+        return Err(MetadataError::NotPresent(filename));\n     }\n     let raw_bytes: MetadataRef = match flavor {\n-        CrateFlavor::Rlib => loader.get_rlib_metadata(target, filename)?,\n+        CrateFlavor::Rlib => {\n+            loader.get_rlib_metadata(target, filename).map_err(MetadataError::LoadFailure)?\n+        }\n         CrateFlavor::Dylib => {\n-            let buf = loader.get_dylib_metadata(target, filename)?;\n+            let buf =\n+                loader.get_dylib_metadata(target, filename).map_err(MetadataError::LoadFailure)?;\n             // The header is uncompressed\n             let header_len = METADATA_HEADER.len();\n             debug!(\"checking {} bytes of metadata-version stamp\", header_len);\n             let header = &buf[..cmp::min(header_len, buf.len())];\n             if header != METADATA_HEADER {\n-                return Err(format!(\n-                    \"incompatible metadata version found: '{}'\",\n+                return Err(MetadataError::LoadFailure(format!(\n+                    \"invalid metadata version found: {}\",\n                     filename.display()\n-                ));\n+                )));\n             }\n \n             // Header is okay -> inflate the actual metadata\n@@ -756,17 +770,28 @@ fn get_metadata_section(\n             match FrameDecoder::new(compressed_bytes).read_to_end(&mut inflated) {\n                 Ok(_) => rustc_erase_owner!(OwningRef::new(inflated).map_owner_box()),\n                 Err(_) => {\n-                    return Err(format!(\"failed to decompress metadata: {}\", filename.display()));\n+                    return Err(MetadataError::LoadFailure(format!(\n+                        \"failed to decompress metadata: {}\",\n+                        filename.display()\n+                    )));\n                 }\n             }\n         }\n         CrateFlavor::Rmeta => {\n             // mmap the file, because only a small fraction of it is read.\n-            let file = std::fs::File::open(filename)\n-                .map_err(|_| format!(\"failed to open rmeta metadata: '{}'\", filename.display()))?;\n+            let file = std::fs::File::open(filename).map_err(|_| {\n+                MetadataError::LoadFailure(format!(\n+                    \"failed to open rmeta metadata: '{}'\",\n+                    filename.display()\n+                ))\n+            })?;\n             let mmap = unsafe { Mmap::map(file) };\n-            let mmap = mmap\n-                .map_err(|_| format!(\"failed to mmap rmeta metadata: '{}'\", filename.display()))?;\n+            let mmap = mmap.map_err(|_| {\n+                MetadataError::LoadFailure(format!(\n+                    \"failed to mmap rmeta metadata: '{}'\",\n+                    filename.display()\n+                ))\n+            })?;\n \n             rustc_erase_owner!(OwningRef::new(mmap).map_owner_box())\n         }\n@@ -775,7 +800,10 @@ fn get_metadata_section(\n     if blob.is_compatible() {\n         Ok(blob)\n     } else {\n-        Err(format!(\"incompatible metadata version found: '{}'\", filename.display()))\n+        Err(MetadataError::LoadFailure(format!(\n+            \"invalid metadata version found: {}\",\n+            filename.display()\n+        )))\n     }\n }\n \n@@ -854,6 +882,7 @@ struct CrateRejections {\n     via_kind: Vec<CrateMismatch>,\n     via_version: Vec<CrateMismatch>,\n     via_filename: Vec<CrateMismatch>,\n+    via_invalid: Vec<CrateMismatch>,\n }\n \n /// Candidate rejection reasons collected during crate search.\n@@ -883,6 +912,24 @@ crate enum CrateError {\n     NonDylibPlugin(Symbol),\n }\n \n+enum MetadataError<'a> {\n+    /// The file was missing.\n+    NotPresent(&'a Path),\n+    /// The file was present and invalid.\n+    LoadFailure(String),\n+}\n+\n+impl fmt::Display for MetadataError<'_> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            MetadataError::NotPresent(filename) => {\n+                f.write_str(&format!(\"no such file: '{}'\", filename.display()))\n+            }\n+            MetadataError::LoadFailure(msg) => f.write_str(msg),\n+        }\n+    }\n+}\n+\n impl CrateError {\n     crate fn report(self, sess: &Session, span: Span, missing_core: bool) -> ! {\n         let mut err = match self {\n@@ -1064,6 +1111,19 @@ impl CrateError {\n                     }\n                     err.note(&msg);\n                     err\n+                } else if !locator.crate_rejections.via_invalid.is_empty() {\n+                    let mut err = struct_span_err!(\n+                        sess,\n+                        span,\n+                        E0786,\n+                        \"found invalid metadata files for crate `{}`{}\",\n+                        crate_name,\n+                        add,\n+                    );\n+                    for CrateMismatch { path: _, got } in locator.crate_rejections.via_invalid {\n+                        err.note(&got);\n+                    }\n+                    err\n                 } else {\n                     let mut err = struct_span_err!(\n                         sess,"}, {"sha": "de463a330149b0416afbf5b98c21a4591082a5da", "filename": "src/test/run-make-fulldeps/invalid-library/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/257ac1b4984f261dfe4572907955a24f43eee209/src%2Ftest%2Frun-make-fulldeps%2Finvalid-library%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/257ac1b4984f261dfe4572907955a24f43eee209/src%2Ftest%2Frun-make-fulldeps%2Finvalid-library%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finvalid-library%2FMakefile?ref=257ac1b4984f261dfe4572907955a24f43eee209", "patch": "@@ -3,4 +3,4 @@\n all:\n \ttouch $(TMPDIR)/lib.rmeta\n \t$(AR) crus $(TMPDIR)/libfoo-ffffffff-1.0.rlib $(TMPDIR)/lib.rmeta\n-\t$(RUSTC) foo.rs 2>&1 | $(CGREP) \"can't find crate for\"\n+\t$(RUSTC) foo.rs 2>&1 | $(CGREP) \"found invalid metadata\""}, {"sha": "5b82ecd207dda42bff095b9041f99baa973ccf96", "filename": "src/test/run-make/invalid-so/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/257ac1b4984f261dfe4572907955a24f43eee209/src%2Ftest%2Frun-make%2Finvalid-so%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/257ac1b4984f261dfe4572907955a24f43eee209/src%2Ftest%2Frun-make%2Finvalid-so%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finvalid-so%2FMakefile?ref=257ac1b4984f261dfe4572907955a24f43eee209", "patch": "@@ -0,0 +1,7 @@\n+include ../../run-make-fulldeps/tools.mk\n+\n+DYLIB_NAME := $(shell echo | $(RUSTC) --crate-name foo --crate-type dylib --print file-names -)\n+\n+all:\n+\techo >> $(TMPDIR)/$(DYLIB_NAME)\n+\t$(RUSTC) --crate-type lib --extern foo=$(TMPDIR)/$(DYLIB_NAME) bar.rs 2>&1 | $(CGREP) 'invalid metadata files for crate `foo`'"}, {"sha": "49af74e1b748908873bf49dfcd2239724b7ab495", "filename": "src/test/run-make/invalid-so/bar.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/257ac1b4984f261dfe4572907955a24f43eee209/src%2Ftest%2Frun-make%2Finvalid-so%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257ac1b4984f261dfe4572907955a24f43eee209/src%2Ftest%2Frun-make%2Finvalid-so%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finvalid-so%2Fbar.rs?ref=257ac1b4984f261dfe4572907955a24f43eee209", "patch": "@@ -0,0 +1 @@\n+extern crate foo;"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/crate-loading/auxiliary/libfoo.rlib", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/257ac1b4984f261dfe4572907955a24f43eee209/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Flibfoo.rlib", "raw_url": "https://github.com/rust-lang/rust/raw/257ac1b4984f261dfe4572907955a24f43eee209/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Flibfoo.rlib", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Flibfoo.rlib?ref=257ac1b4984f261dfe4572907955a24f43eee209"}, {"sha": "77c29090a3ee094ddf9458608faa6b56c78d1bcf", "filename": "src/test/ui/crate-loading/invalid-rlib.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/257ac1b4984f261dfe4572907955a24f43eee209/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257ac1b4984f261dfe4572907955a24f43eee209/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.rs?ref=257ac1b4984f261dfe4572907955a24f43eee209", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: --crate-type lib --extern foo={{src-base}}/crate-loading/auxiliary/libfoo.rlib\n+// normalize-stderr-test: \"failed to mmap file '.*auxiliary/libfoo.rlib':.*\" -> \"failed to mmap file 'auxiliary/libfoo.rlib'\"\n+// don't emit warn logging, it's basically the same as the errors and it's annoying to normalize\n+// rustc-env:RUSTC_LOG=error\n+// edition:2018\n+#![no_std]\n+use ::foo; //~ ERROR invalid metadata files for crate `foo`\n+//~| NOTE failed to mmap file"}, {"sha": "b2c79f742fb3090cfc84dba8a9ab1af5e61d3799", "filename": "src/test/ui/crate-loading/invalid-rlib.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/257ac1b4984f261dfe4572907955a24f43eee209/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/257ac1b4984f261dfe4572907955a24f43eee209/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.stderr?ref=257ac1b4984f261dfe4572907955a24f43eee209", "patch": "@@ -0,0 +1,11 @@\n+error[E0786]: found invalid metadata files for crate `foo`\n+  --> $DIR/invalid-rlib.rs:7:7\n+   |\n+LL | use ::foo;\n+   |       ^^^\n+   |\n+   = note: failed to mmap file 'auxiliary/libfoo.rlib'\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0786`."}]}