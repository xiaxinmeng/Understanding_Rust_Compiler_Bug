{"sha": "cd3ead19dd37c829d22af947d510d8efa73cdb70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkM2VhZDE5ZGQzN2M4MjlkMjJhZjk0N2Q1MTBkOGVmYTczY2RiNzA=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-08T17:19:30Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-20T20:14:11Z"}, "message": "Use `delay_span_bug` less often", "tree": {"sha": "b281c455ee584ae3a13822e3efebe8ce15285ddf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b281c455ee584ae3a13822e3efebe8ce15285ddf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd3ead19dd37c829d22af947d510d8efa73cdb70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3ead19dd37c829d22af947d510d8efa73cdb70", "html_url": "https://github.com/rust-lang/rust/commit/cd3ead19dd37c829d22af947d510d8efa73cdb70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd3ead19dd37c829d22af947d510d8efa73cdb70/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63940322792240a936d60e7fee062275891bf920", "url": "https://api.github.com/repos/rust-lang/rust/commits/63940322792240a936d60e7fee062275891bf920", "html_url": "https://github.com/rust-lang/rust/commit/63940322792240a936d60e7fee062275891bf920"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "408743d5788d105a7a05d05f3c87d68a749625ee", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cd3ead19dd37c829d22af947d510d8efa73cdb70/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3ead19dd37c829d22af947d510d8efa73cdb70/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=cd3ead19dd37c829d22af947d510d8efa73cdb70", "patch": "@@ -23,6 +23,7 @@ use crate::ty::subst::{Subst, InternalSubsts};\n use crate::ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::util::common::FN_OUTPUT_NAME;\n+use syntax_pos::DUMMY_SP;\n \n /// Depending on the stage of compilation, we want projection to be\n /// more or less conservative.\n@@ -1437,11 +1438,14 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n     obligation: &ProjectionTyObligation<'tcx>,\n     impl_vtable: VtableImplData<'tcx, PredicateObligation<'tcx>>,\n ) -> Progress<'tcx> {\n+    let tcx = selcx.tcx();\n+\n     let VtableImplData { impl_def_id, substs, nested } = impl_vtable;\n+    let assoc_item_id = obligation.predicate.item_def_id;\n+    let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();\n \n-    let tcx = selcx.tcx();\n     let param_env = obligation.param_env;\n-    let assoc_ty = assoc_ty_def(selcx, impl_def_id, obligation.predicate.item_def_id);\n+    let assoc_ty = assoc_ty_def(selcx, impl_def_id, assoc_item_id);\n \n     if !assoc_ty.item.defaultness.has_value() {\n         // This means that the impl is missing a definition for the\n@@ -1456,16 +1460,28 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n             obligations: nested,\n         };\n     }\n+    let substs = obligation.predicate.substs.rebase_onto(tcx, trait_def_id, substs);\n     let substs = translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.node);\n     let ty = if let ty::AssocKind::OpaqueTy = assoc_ty.item.kind {\n         let item_substs = InternalSubsts::identity_for_item(tcx, assoc_ty.item.def_id);\n         tcx.mk_opaque(assoc_ty.item.def_id, item_substs)\n     } else {\n         tcx.type_of(assoc_ty.item.def_id)\n     };\n-    Progress {\n-        ty: ty.subst(tcx, substs),\n-        obligations: nested,\n+    if substs.len() != tcx.generics_of(assoc_ty.item.def_id).count() {\n+        tcx.sess.delay_span_bug(\n+            DUMMY_SP,\n+            \"impl item and trait item have different parameter counts\",\n+        );\n+        Progress {\n+            ty: tcx.types.err,\n+            obligations: nested,\n+        }\n+    } else {\n+        Progress {\n+            ty: ty.subst(tcx, substs),\n+            obligations: nested,\n+        }\n     }\n }\n "}, {"sha": "217188a6f04c298112ba1762ac245acab385470d", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd3ead19dd37c829d22af947d510d8efa73cdb70/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3ead19dd37c829d22af947d510d8efa73cdb70/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=cd3ead19dd37c829d22af947d510d8efa73cdb70", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n                 ty::GenericParamDefKind::Const => {\n                     tcx.mk_const(ty::Const {\n                         val: ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from(param.index)),\n-                        ty: tcx.type_of(def_id),\n+                        ty: tcx.type_of(param.def_id),\n                     }).into()\n                 }\n             }\n@@ -533,8 +533,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n                             data.name,\n                             self.root_ty,\n                             data.index);\n-                        self.tcx.sess.delay_span_bug(span, &msg);\n-                        r\n+                        span_bug!(span, \"{}\", msg);\n                     }\n                 }\n             }"}]}