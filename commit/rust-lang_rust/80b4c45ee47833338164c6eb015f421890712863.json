{"sha": "80b4c45ee47833338164c6eb015f421890712863", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYjRjNDVlZTQ3ODMzMzM4MTY0YzZlYjAxNWY0MjE4OTA3MTI4NjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-02-20T15:37:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-13T15:21:31Z"}, "message": "change `ParamEnv::and` to sometimes keep the environment [VIC]\n\nIn general, we've been moving towards a semantics where you can have\ncontradictory where-clauses, and we try to honor them.  There are\nalready existing run-pass tests where we take that philosophy as\nwell (e.g., `compile-fail/issue-36839.rs`). The current behavior of\n`and`, where it strips the environment, breaks that code.", "tree": {"sha": "74cdb96ed797789d78ed7cc6aaef20d7c63b18e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74cdb96ed797789d78ed7cc6aaef20d7c63b18e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80b4c45ee47833338164c6eb015f421890712863", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80b4c45ee47833338164c6eb015f421890712863", "html_url": "https://github.com/rust-lang/rust/commit/80b4c45ee47833338164c6eb015f421890712863", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80b4c45ee47833338164c6eb015f421890712863/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64d4ed300b52834954179284a0d0a6eb5084d39e", "url": "https://api.github.com/repos/rust-lang/rust/commits/64d4ed300b52834954179284a0d0a6eb5084d39e", "html_url": "https://github.com/rust-lang/rust/commit/64d4ed300b52834954179284a0d0a6eb5084d39e"}], "stats": {"total": 49, "additions": 28, "deletions": 21}, "files": [{"sha": "e3405e0c3b36042d2239075339e4417a53dd1451", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/80b4c45ee47833338164c6eb015f421890712863/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80b4c45ee47833338164c6eb015f421890712863/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=80b4c45ee47833338164c6eb015f421890712863", "patch": "@@ -1439,31 +1439,38 @@ impl<'tcx> ParamEnv<'tcx> {\n     }\n \n     /// Creates a suitable environment in which to perform trait\n-    /// queries on the given value. This will either be `self` *or*\n-    /// the empty environment, depending on whether `value` references\n-    /// type parameters that are in scope. (If it doesn't, then any\n-    /// judgements should be completely independent of the context,\n-    /// and hence we can safely use the empty environment so as to\n-    /// enable more sharing across functions.)\n+    /// queries on the given value. When type-checking, this is simply\n+    /// the pair of the environment plus value. But when reveal is set to\n+    /// All, then if `value` does not reference any type parameters, we will\n+    /// pair it with the empty environment. This improves caching and is generally\n+    /// invisible.\n     ///\n-    /// NB: This is a mildly dubious thing to do, in that a function\n-    /// (or other environment) might have wacky where-clauses like\n+    /// NB: We preserve the environment when type-checking because it\n+    /// is possible for the user to have wacky where-clauses like\n     /// `where Box<u32>: Copy`, which are clearly never\n-    /// satisfiable. The code will at present ignore these,\n-    /// effectively, when type-checking the body of said\n-    /// function. This preserves existing behavior in any\n-    /// case. --nmatsakis\n+    /// satisfiable. We generally want to behave as if they were true,\n+    /// although the surrounding function is never reachable.\n     pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {\n-        assert!(!value.needs_infer());\n-        if value.has_param_types() || value.has_self_ty() {\n-            ParamEnvAnd {\n-                param_env: self,\n-                value,\n+        match self.reveal {\n+            Reveal::UserFacing => {\n+                ParamEnvAnd {\n+                    param_env: self,\n+                    value,\n+                }\n             }\n-        } else {\n-            ParamEnvAnd {\n-                param_env: self.without_caller_bounds(),\n-                value,\n+\n+            Reveal::All => {\n+                if value.needs_infer() || value.has_param_types() || value.has_self_ty() {\n+                    ParamEnvAnd {\n+                        param_env: self,\n+                        value,\n+                    }\n+                } else {\n+                    ParamEnvAnd {\n+                        param_env: self.without_caller_bounds(),\n+                        value,\n+                    }\n+                }\n             }\n         }\n     }"}]}