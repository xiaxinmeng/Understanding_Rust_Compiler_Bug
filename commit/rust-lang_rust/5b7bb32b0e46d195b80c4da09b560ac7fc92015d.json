{"sha": "5b7bb32b0e46d195b80c4da09b560ac7fc92015d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViN2JiMzJiMGU0NmQxOTViODBjNGRhMDliNTYwYWM3ZmM5MjAxNWQ=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-07-02T16:00:36Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-07-02T16:00:36Z"}, "message": "Rustup", "tree": {"sha": "7a23c76026606f49188c9167631397e498689182", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a23c76026606f49188c9167631397e498689182"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b7bb32b0e46d195b80c4da09b560ac7fc92015d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7bb32b0e46d195b80c4da09b560ac7fc92015d", "html_url": "https://github.com/rust-lang/rust/commit/5b7bb32b0e46d195b80c4da09b560ac7fc92015d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b7bb32b0e46d195b80c4da09b560ac7fc92015d/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1dbbe538f5fe978333dfa9f63533f5ead2866ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1dbbe538f5fe978333dfa9f63533f5ead2866ae", "html_url": "https://github.com/rust-lang/rust/commit/e1dbbe538f5fe978333dfa9f63533f5ead2866ae"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "1c3998a4f022fa3585cf091beb59be85c0929bf2", "filename": "src/fn_call.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b7bb32b0e46d195b80c4da09b560ac7fc92015d/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7bb32b0e46d195b80c4da09b560ac7fc92015d/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=5b7bb32b0e46d195b80c4da09b560ac7fc92015d", "patch": "@@ -199,7 +199,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                     self.write_null(dest, dest_ty)?;\n                 } else {\n                     let align = self.tcx.data_layout.pointer_align;\n-                    let ptr = self.memory.allocate(Size::from_bytes(size), align, Some(MemoryKind::C.into()))?;\n+                    let ptr = self.memory.allocate(Size::from_bytes(size), align, MemoryKind::C.into())?;\n                     self.write_scalar(dest, Scalar::Ptr(ptr), dest_ty)?;\n                 }\n             }\n@@ -395,7 +395,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                     let value_copy = self.memory.allocate(\n                         Size::from_bytes((value.len() + 1) as u64),\n                         Align::from_bytes(1, 1).unwrap(),\n-                        Some(MemoryKind::Env.into()),\n+                        MemoryKind::Env.into(),\n                     )?;\n                     self.memory.write_bytes(value_copy.into(), &value)?;\n                     let trailing_zero_ptr = value_copy.offset(Size::from_bytes(value.len() as u64), &self)?.into();\n@@ -656,7 +656,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                 }\n                 let ptr = self.memory.allocate(Size::from_bytes(size),\n                                                Align::from_bytes(align, align).unwrap(),\n-                                               Some(MemoryKind::Rust.into()))?;\n+                                               MemoryKind::Rust.into())?;\n                 self.write_scalar(dest, Scalar::Ptr(ptr), dest_ty)?;\n             }\n             \"alloc::alloc::::__rust_alloc_zeroed\" => {\n@@ -670,7 +670,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                 }\n                 let ptr = self.memory.allocate(Size::from_bytes(size),\n                                                Align::from_bytes(align, align).unwrap(),\n-                                               Some(MemoryKind::Rust.into()))?;\n+                                               MemoryKind::Rust.into())?;\n                 self.memory.write_repeat(ptr.into(), 0, Size::from_bytes(size))?;\n                 self.write_scalar(dest, Scalar::Ptr(ptr), dest_ty)?;\n             }"}, {"sha": "d6b0bd045099e1967746a2bbdeebacaf2a02c74b", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b7bb32b0e46d195b80c4da09b560ac7fc92015d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7bb32b0e46d195b80c4da09b560ac7fc92015d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5b7bb32b0e46d195b80c4da09b560ac7fc92015d", "patch": "@@ -171,7 +171,7 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n         // Return value\n         let size = ecx.tcx.data_layout.pointer_size;\n         let align = ecx.tcx.data_layout.pointer_align;\n-        let ret_ptr = ecx.memory_mut().allocate(size, align, Some(MemoryKind::Stack))?;\n+        let ret_ptr = ecx.memory_mut().allocate(size, align, MemoryKind::Stack)?;\n         cleanup_ptr = Some(ret_ptr);\n \n         // Push our stack frame\n@@ -210,7 +210,7 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n         let foo = ecx.memory.allocate_bytes(b\"foo\\0\");\n         let ptr_size = ecx.memory.pointer_size();\n         let ptr_align = ecx.tcx.data_layout.pointer_align;\n-        let foo_ptr = ecx.memory.allocate(ptr_size, ptr_align, None)?;\n+        let foo_ptr = ecx.memory.allocate(ptr_size, ptr_align, MemoryKind::Stack)?;\n         ecx.memory.write_scalar(foo_ptr.into(), ptr_align, Scalar::Ptr(foo), ptr_size, false)?;\n         ecx.memory.mark_static_initialized(foo_ptr.alloc_id, Mutability::Immutable)?;\n         ecx.write_ptr(dest, foo_ptr.into(), ty)?;\n@@ -269,10 +269,10 @@ pub fn eval_main<'a, 'tcx: 'a>(\n                     block.terminator().source_info.span\n                 };\n \n-                let mut err = mir::interpret::struct_error(ecx.tcx.tcx.at(span), \"constant evaluation error\");\n+                let mut err = struct_error(ecx.tcx.tcx.at(span), \"constant evaluation error\");\n                 let (frames, span) = ecx.generate_stacktrace(None);\n                 err.span_label(span, e.to_string());\n-                for mir::interpret::FrameInfo { span, location, .. } in frames {\n+                for FrameInfo { span, location, .. } in frames {\n                     err.span_note(span, &format!(\"inside call to `{}`\", location));\n                 }\n                 err.emit();\n@@ -404,7 +404,7 @@ impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         let ptr = ecx.memory.allocate(\n             layout.size,\n             layout.align,\n-            None,\n+            MemoryKind::Stack,\n         )?;\n \n         // Step 4: Cache allocation id for recursive statics"}, {"sha": "851f5df9792e42f014cee6d8245effb7703a2f19", "filename": "src/validation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b7bb32b0e46d195b80c4da09b560ac7fc92015d/src%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7bb32b0e46d195b80c4da09b560ac7fc92015d/src%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalidation.rs?ref=5b7bb32b0e46d195b80c4da09b560ac7fc92015d", "patch": "@@ -8,6 +8,7 @@ use rustc::ty::subst::{Substs, Subst};\n use rustc::traits::{self, TraitEngine};\n use rustc::infer::InferCtxt;\n use rustc::middle::region;\n+use rustc::mir::interpret::{ConstValue};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_mir::interpret::HasMemory;\n \n@@ -718,7 +719,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                 }\n                 TyArray(elem_ty, len) => {\n                     let len = match len.val {\n-                        mir::interpret::ConstValue::Unevaluated(def_id, substs) => {\n+                        ConstValue::Unevaluated(def_id, substs) => {\n                             self.tcx.const_eval(self.tcx.param_env(def_id).and(GlobalId {\n                                 instance: Instance::new(def_id, substs),\n                                 promoted: None,"}]}