{"sha": "a67208f212657f94833792148e3e3e09fe0785ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NzIwOGYyMTI2NTdmOTQ4MzM3OTIxNDhlM2UzZTA5ZmUwNzg1YmE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-09-03T01:10:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-03T01:10:50Z"}, "message": "Merge pull request #2986 from topecongiro/issue-2907\n\nHandle chain w/ try operators with spaces", "tree": {"sha": "5ec85fa1b283ad44f2553f1c836dcf021897de58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ec85fa1b283ad44f2553f1c836dcf021897de58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a67208f212657f94833792148e3e3e09fe0785ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbjIoaCRBK7hj4Ov3rIwAAdHIIAC0s2QuUB5Djvv8oAUbsOHRM\nq2saxl3IHIeDACVZva+y41y4jMvZyok8jqDaxVOUCMI19QUbLwu/NghpWh+KIUD7\nz5uzfXHSHp4Jyi9nlOESuqPItHPcjoW1duT5Hllba4Ye5PwgfGArh3fPYlfC96pa\n9Up7vctzkrGbgWXdBUfVBZmMWZTfk8p/DeE8zuNcb/6KqKyMD5XbbD68fYNJaqb6\nV/y+fh+GOrShxO57VhVYNyfT9PlEoHtQrDKmv9aKM3cWCocexTdV3ePW2Ewb5A1a\nI9JkcU3YW0CGxMdlNrsugI/fnRRqFhUo7MtqI+39YL5bvXatXf0KuVBeRdOjWD4=\n=HU2w\n-----END PGP SIGNATURE-----\n", "payload": "tree 5ec85fa1b283ad44f2553f1c836dcf021897de58\nparent 5fb9418aecf392bf996370873d9e493e3591b8f9\nparent ba9e15972248b043c6101cc240271dfaf1bc8fa5\nauthor Nick Cameron <nrc@ncameron.org> 1535937050 +1200\ncommitter GitHub <noreply@github.com> 1535937050 +1200\n\nMerge pull request #2986 from topecongiro/issue-2907\n\nHandle chain w/ try operators with spaces"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a67208f212657f94833792148e3e3e09fe0785ba", "html_url": "https://github.com/rust-lang/rust/commit/a67208f212657f94833792148e3e3e09fe0785ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a67208f212657f94833792148e3e3e09fe0785ba/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fb9418aecf392bf996370873d9e493e3591b8f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb9418aecf392bf996370873d9e493e3591b8f9", "html_url": "https://github.com/rust-lang/rust/commit/5fb9418aecf392bf996370873d9e493e3591b8f9"}, {"sha": "ba9e15972248b043c6101cc240271dfaf1bc8fa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9e15972248b043c6101cc240271dfaf1bc8fa5", "html_url": "https://github.com/rust-lang/rust/commit/ba9e15972248b043c6101cc240271dfaf1bc8fa5"}], "stats": {"total": 124, "additions": 98, "deletions": 26}, "files": [{"sha": "3acb8e2eac31b72bda951997a2e90af227e0508b", "filename": "src/chains.rs", "status": "modified", "additions": 47, "deletions": 20, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a67208f212657f94833792148e3e3e09fe0785ba/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67208f212657f94833792148e3e3e09fe0785ba/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=a67208f212657f94833792148e3e3e09fe0785ba", "patch": "@@ -65,10 +65,10 @@\n //!            .qux\n //! ```\n \n-use comment::rewrite_comment;\n+use comment::{rewrite_comment, CharClasses, FullCodeCharKind, RichChar};\n use config::IndentStyle;\n use expr::rewrite_call;\n-use lists::{extract_post_comment, extract_pre_comment, get_comment_end};\n+use lists::extract_pre_comment;\n use macros::convert_try_mac;\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n@@ -275,6 +275,20 @@ impl Chain {\n             s.chars().all(|c| c == '?')\n         }\n \n+        fn is_post_comment(s: &str) -> bool {\n+            let comment_start_index = s.chars().position(|c| c == '/');\n+            if comment_start_index.is_none() {\n+                return false;\n+            }\n+\n+            let newline_index = s.chars().position(|c| c == '\\n');\n+            if newline_index.is_none() {\n+                return true;\n+            }\n+\n+            comment_start_index.unwrap() < newline_index.unwrap()\n+        }\n+\n         fn handle_post_comment(\n             post_comment_span: Span,\n             post_comment_snippet: &str,\n@@ -289,25 +303,14 @@ impl Chain {\n                 // No post comment.\n                 return;\n             }\n-            // HACK: Treat `?`s as separators.\n-            let trimmed_snippet = post_comment_snippet.trim_matches('?');\n-            let comment_end = get_comment_end(trimmed_snippet, \"?\", \"\", false);\n-            let maybe_post_comment = extract_post_comment(trimmed_snippet, comment_end, \"?\")\n-                .and_then(|comment| {\n-                    if comment.is_empty() {\n-                        None\n-                    } else {\n-                        Some((comment, comment_end))\n-                    }\n-                });\n-\n-            if let Some((post_comment, comment_end)) = maybe_post_comment {\n+            let trimmed_snippet = trim_tries(post_comment_snippet);\n+            if is_post_comment(&trimmed_snippet) {\n                 children.push(ChainItem::comment(\n                     post_comment_span,\n-                    post_comment,\n+                    trimmed_snippet.trim().to_owned(),\n                     CommentPosition::Back,\n                 ));\n-                *prev_span_end = *prev_span_end + BytePos(comment_end as u32);\n+                *prev_span_end = post_comment_span.hi();\n             }\n         }\n \n@@ -336,9 +339,8 @@ impl Chain {\n             // Pre-comment\n             if handle_comment {\n                 let pre_comment_span = mk_sp(prev_span_end, chain_item.span.lo());\n-                let pre_comment_snippet = context.snippet(pre_comment_span);\n-                let pre_comment_snippet = pre_comment_snippet.trim().trim_matches('?');\n-                let (pre_comment, _) = extract_pre_comment(pre_comment_snippet);\n+                let pre_comment_snippet = trim_tries(context.snippet(pre_comment_span));\n+                let (pre_comment, _) = extract_pre_comment(&pre_comment_snippet);\n                 match pre_comment {\n                     Some(ref comment) if !comment.is_empty() => {\n                         children.push(ChainItem::comment(\n@@ -872,3 +874,28 @@ fn is_block_expr(context: &RewriteContext, expr: &ast::Expr, repr: &str) -> bool\n         _ => false,\n     }\n }\n+\n+/// Remove try operators (`?`s) that appear in the given string. If removing\n+/// them leaves an empty line, remove that line as well unless it is the first\n+/// line (we need the first newline for detecting pre/post comment).\n+fn trim_tries(s: &str) -> String {\n+    let mut result = String::with_capacity(s.len());\n+    let mut line_buffer = String::with_capacity(s.len());\n+    for (kind, rich_char) in CharClasses::new(s.chars()) {\n+        match rich_char.get_char() {\n+            '\\n' => {\n+                if result.is_empty() || !line_buffer.trim().is_empty() {\n+                    result.push_str(&line_buffer);\n+                    result.push('\\n')\n+                }\n+                line_buffer.clear();\n+            }\n+            '?' if kind == FullCodeCharKind::Normal => continue,\n+            c => line_buffer.push(c),\n+        }\n+    }\n+    if !line_buffer.trim().is_empty() {\n+        result.push_str(&line_buffer);\n+    }\n+    result\n+}"}, {"sha": "91160711b89099785c51657f04442a853c5bc06d", "filename": "tests/source/chains_with_comment.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a67208f212657f94833792148e3e3e09fe0785ba/tests%2Fsource%2Fchains_with_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67208f212657f94833792148e3e3e09fe0785ba/tests%2Fsource%2Fchains_with_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains_with_comment.rs?ref=a67208f212657f94833792148e3e3e09fe0785ba", "patch": "@@ -93,3 +93,29 @@ impl Foo {\n             .map(|(k, deps)| (k.clone(), deps.iter().cloned().filter(|d| dirties.contains(&d)).collect()))\n     }\n }\n+\n+// #2907\n+fn foo() {\n+    let x = foo\n+        .bar??  ? // comment\n+        .baz;\n+    let x = foo\n+        .bar?  ??\n+    // comment\n+        .baz;\n+    let x = foo\n+        .bar? ? ? // comment\n+    // comment\n+        .baz;\n+    let x = foo\n+        .bar? ?? // comment\n+    // comment\n+        ? ??\n+    // comment\n+        ?  ??\n+    // comment\n+        ???  \n+    // comment\n+        ? ? ?\n+        .baz;\n+}"}, {"sha": "522d70713bcd3d6c267f09d078bd0abb3f3fb81b", "filename": "tests/target/chains_with_comment.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a67208f212657f94833792148e3e3e09fe0785ba/tests%2Ftarget%2Fchains_with_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67208f212657f94833792148e3e3e09fe0785ba/tests%2Ftarget%2Fchains_with_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains_with_comment.rs?ref=a67208f212657f94833792148e3e3e09fe0785ba", "patch": "@@ -31,8 +31,7 @@ fn main() {\n             )\n         });\n \n-    let y = expr\n-        /* comment */\n+    let y = expr /* comment */\n         .kaas()?\n         // comment\n         .test();\n@@ -50,11 +49,9 @@ fn main() {\n \n     let y = a\n         .very\n-        .loooooooooooooooooooooooooooooooooooooong()\n-        /* comment */\n+        .loooooooooooooooooooooooooooooooooooooong() /* comment */\n         .chain()\n-        .inside()\n-        /* comment */\n+        .inside() /* comment */\n         .weeeeeeeeeeeeeee()?\n         .test()\n         .0\n@@ -116,3 +113,25 @@ impl Foo {\n             })\n     }\n }\n+\n+// #2907\n+fn foo() {\n+    let x = foo\n+        .bar??? // comment\n+        .baz;\n+    let x = foo\n+        .bar???\n+        // comment\n+        .baz;\n+    let x = foo\n+        .bar??? // comment\n+        // comment\n+        .baz;\n+    let x = foo\n+        .bar??????????????? // comment\n+        // comment\n+        // comment\n+        // comment\n+        // comment\n+        .baz;\n+}"}]}