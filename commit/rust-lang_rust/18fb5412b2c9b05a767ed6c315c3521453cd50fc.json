{"sha": "18fb5412b2c9b05a767ed6c315c3521453cd50fc", "node_id": "C_kwDOAAsO6NoAKDE4ZmI1NDEyYjJjOWIwNWE3NjdlZDZjMzE1YzM1MjE0NTNjZDUwZmM", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-11T21:39:50Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-14T01:32:11Z"}, "message": "all tests work", "tree": {"sha": "4e001c3f4bbf507a001b02386fbcb3705f470038", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e001c3f4bbf507a001b02386fbcb3705f470038"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18fb5412b2c9b05a767ed6c315c3521453cd50fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmHg0psACgkQeO9fUvOM\nSb1ygAv7BWHNpdTUiWT7SIc+B7FiaI8LHuS9r/uHKN1oqi+FffoS3r9gpZzuYt80\nEmjCyW/N+tOrjaVoUgYSGlRNW/QkdiVgoaMNZzACS7tiUKEKODI4kBJH2h2hw44K\ngsqWAXA6LYErYILl3zwZRv6uYJczVOImx5NCDujTphTAqmufnHJxKgXGa7NfZMII\nwlSAwbtXdQuUGs2gALMKYttZJAAiErEj77baj44Ub1fhHLQK86Q7s5CSXGP2ZNDV\ni9n3HGdHM1itWaSR/735t8+I4lHJ8hVkjkG+EPCD/YHP4r/1z1DlubM+xYhxpEA9\n/Wcf7gjT16SeOrTc8UyR+EH5LidCDLs5z4HZ9K6EB9uNC87GrMbO/CyDqhpNayjD\nMCkgsnvDxmoqxL2ZdGHiHlRAx0eIigmWYoaW+t62k+MsuO96+SIfS/ABIeDMimdP\n9IlvvfjW2X6yh6169fbHkHw6UnrX70kHyck36PFQfcwJZ8wpgewsPTIdkl/fEHZj\nbAyH4UDL\n=vDJU\n-----END PGP SIGNATURE-----", "payload": "tree 4e001c3f4bbf507a001b02386fbcb3705f470038\nparent aaec467cfde482ce7959ea1452138f71202f8dfd\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1641937190 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1642123931 +0000\n\nall tests work\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18fb5412b2c9b05a767ed6c315c3521453cd50fc", "html_url": "https://github.com/rust-lang/rust/commit/18fb5412b2c9b05a767ed6c315c3521453cd50fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18fb5412b2c9b05a767ed6c315c3521453cd50fc/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaec467cfde482ce7959ea1452138f71202f8dfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaec467cfde482ce7959ea1452138f71202f8dfd", "html_url": "https://github.com/rust-lang/rust/commit/aaec467cfde482ce7959ea1452138f71202f8dfd"}], "stats": {"total": 76, "additions": 57, "deletions": 19}, "files": [{"sha": "7f9b5f459705b45fba432fcf38233af16276f512", "filename": "crates/ide_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 57, "deletions": 19, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/18fb5412b2c9b05a767ed6c315c3521453cd50fc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18fb5412b2c9b05a767ed6c315c3521453cd50fc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=18fb5412b2c9b05a767ed6c315c3521453cd50fc", "patch": "@@ -1,8 +1,8 @@\n-use itertools::Itertools;\n-use std::iter::successors;\n+use hir::TypeInfo;\n+use std::{iter::successors, collections::HashMap};\n use syntax::{\n     algo::neighbor,\n-    ast::{self, AstNode},\n+    ast::{self, AstNode, Pat, MatchArm, HasName},\n     Direction,\n };\n \n@@ -52,6 +52,7 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n                     return false;\n                 }\n \n+                println!(\"Checking types\");\n                 return are_same_types(&current_arm_types, arm, ctx);\n             }\n             _ => false,\n@@ -90,34 +91,69 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n     )\n }\n \n-fn contains_placeholder(a: &ast::MatchArm) -> bool {\n+fn contains_placeholder(a: &MatchArm) -> bool {\n     matches!(a.pat(), Some(ast::Pat::WildcardPat(..)))\n }\n \n fn are_same_types(\n-    current_arm_types: &Vec<Option<hir::TypeInfo>>,\n+    current_arm_types: &HashMap<String, Option<TypeInfo>>,\n     arm: &ast::MatchArm,\n     ctx: &AssistContext,\n ) -> bool {\n     let arm_types = get_arm_types(&ctx, &arm);\n-    for i in 0..arm_types.len() {\n-        let other_arm_type = &arm_types[i];\n-        let current_arm_type = &current_arm_types[i];\n-        if let (Some(other_arm_type), Some(current_arm_type)) = (other_arm_type, current_arm_type) {\n-            return &other_arm_type.original == &current_arm_type.original;\n+    for other_arm_type_entry in arm_types {\n+        let current_arm_type = current_arm_types.get_key_value(&other_arm_type_entry.0);\n+        if current_arm_type.is_none() {\n+            println!(\"No corresponding type found for {:?}\", {other_arm_type_entry});\n+            return false;\n+        }\n+\n+        let unwrapped_current_arm_type = current_arm_type.unwrap().1;\n+        \n+        if let (Some(other_arm_type), Some(current_arm_type)) = (other_arm_type_entry.1, unwrapped_current_arm_type) {\n+            if other_arm_type.original != current_arm_type.original {\n+                println!(\"Type {:?} is different from {:?}\", &other_arm_type.original, &current_arm_type.original);\n+                return false;\n+            }\n         }\n     }\n \n     return true;\n }\n \n-fn get_arm_types(ctx: &AssistContext, arm: &ast::MatchArm) -> Vec<Option<hir::TypeInfo>> {\n-    match arm.pat() {\n-        Some(ast::Pat::TupleStructPat(tp)) => {\n-            tp.fields().into_iter().map(|field| ctx.sema.type_of_pat(&field)).collect_vec()\n+fn get_arm_types(context: &AssistContext, arm: &MatchArm) -> HashMap<String, Option<TypeInfo>> {\n+    let mut mapping: HashMap<String, Option<TypeInfo>> = HashMap::new();\n+    \n+    fn recurse(pat: &Option<Pat>, map: &mut HashMap<String, Option<TypeInfo>>, ctx: &AssistContext) {\n+        if let Some(local_pat) = pat {\n+            println!(\"{:?}\", pat);\n+            match pat {\n+                Some(ast::Pat::TupleStructPat(tuple)) => {\n+                    for field in tuple.fields() {\n+                        recurse(&Some(field), map, ctx);\n+                    }\n+                },\n+                Some(ast::Pat::RecordPat(record)) => {\n+                    if let Some(field_list) = record.record_pat_field_list() {\n+                        for field in field_list.fields() {\n+                            recurse(&field.pat(), map, ctx);\n+                        }\n+                    }\n+                },\n+                Some(ast::Pat::IdentPat(ident_pat)) => {\n+                    if let Some(name) = ident_pat.name() {\n+                        println!(\"Found name: {:?}\", name.text().to_string());\n+                        let pat_type = ctx.sema.type_of_pat(local_pat);\n+                        map.insert(name.text().to_string(), pat_type);\n+                    }\n+                },\n+                _ => (),\n+            }\n         }\n-        _ => Vec::new(),\n     }\n+\n+    recurse(&arm.pat(), &mut mapping, &context);\n+    return mapping;\n }\n \n #[cfg(test)]\n@@ -430,21 +466,25 @@ fn func() {\n         check_assist(\n             merge_match_arms,\n             r#\"\n-let x = 'c';\n+fn func() {\n+    let x = 'c';\n \n     match x {\n         'a'..='j' => $0\"\",\n         'c'..='z' => \"\",\n         _ => \"other\",\n     };\n+}\n \"#,\n             r#\"\n-let x = 'c';\n+fn func() {\n+    let x = 'c';\n \n     match x {\n         'a'..='j' | 'c'..='z' => \"\",\n         _ => \"other\",\n     };\n+}\n \"#,\n         );\n     }\n@@ -675,5 +715,3 @@ fn main(msg: Message) {\n         )\n     }\n }\n-\n-"}]}