{"sha": "5fa04bc3cdb3071dddbfd9cf9cf33bc099b182f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYTA0YmMzY2RiMzA3MWRkZGJmZDljZjljZjMzYmMwOTliMTgyZjA=", "commit": {"author": {"name": "Guillem Nieto", "email": "gnieto.talo@gmail.com", "date": "2018-11-18T22:45:53Z"}, "committer": {"name": "Guillem Nieto", "email": "gnieto@scopely.com", "date": "2018-11-25T22:34:23Z"}, "message": "Lint only the first statment/expression after alloc\n\nInstead of searching for all the successive expressions after a vector\nallocation, check only the first expression.\n\nThis is done to minimize the amount of false positives of the lint.", "tree": {"sha": "1d4db3c87ed8c836bb1e96d636599a0b193f221c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d4db3c87ed8c836bb1e96d636599a0b193f221c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fa04bc3cdb3071dddbfd9cf9cf33bc099b182f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa04bc3cdb3071dddbfd9cf9cf33bc099b182f0", "html_url": "https://github.com/rust-lang/rust/commit/5fa04bc3cdb3071dddbfd9cf9cf33bc099b182f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fa04bc3cdb3071dddbfd9cf9cf33bc099b182f0/comments", "author": {"login": "gnieto", "id": 4637936, "node_id": "MDQ6VXNlcjQ2Mzc5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/4637936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnieto", "html_url": "https://github.com/gnieto", "followers_url": "https://api.github.com/users/gnieto/followers", "following_url": "https://api.github.com/users/gnieto/following{/other_user}", "gists_url": "https://api.github.com/users/gnieto/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnieto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnieto/subscriptions", "organizations_url": "https://api.github.com/users/gnieto/orgs", "repos_url": "https://api.github.com/users/gnieto/repos", "events_url": "https://api.github.com/users/gnieto/events{/privacy}", "received_events_url": "https://api.github.com/users/gnieto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnieto", "id": 4637936, "node_id": "MDQ6VXNlcjQ2Mzc5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/4637936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnieto", "html_url": "https://github.com/gnieto", "followers_url": "https://api.github.com/users/gnieto/followers", "following_url": "https://api.github.com/users/gnieto/following{/other_user}", "gists_url": "https://api.github.com/users/gnieto/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnieto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnieto/subscriptions", "organizations_url": "https://api.github.com/users/gnieto/orgs", "repos_url": "https://api.github.com/users/gnieto/repos", "events_url": "https://api.github.com/users/gnieto/events{/privacy}", "received_events_url": "https://api.github.com/users/gnieto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39b02fdcd26adc95540e96c82b93beb926b6606f", "url": "https://api.github.com/repos/rust-lang/rust/commits/39b02fdcd26adc95540e96c82b93beb926b6606f", "html_url": "https://github.com/rust-lang/rust/commit/39b02fdcd26adc95540e96c82b93beb926b6606f"}], "stats": {"total": 66, "additions": 48, "deletions": 18}, "files": [{"sha": "272047bc7cb0f9591474672cee3d29d144267761", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5fa04bc3cdb3071dddbfd9cf9cf33bc099b182f0/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa04bc3cdb3071dddbfd9cf9cf33bc099b182f0/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=5fa04bc3cdb3071dddbfd9cf9cf33bc099b182f0", "patch": "@@ -7,7 +7,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use crate::rustc::hir::intravisit::{walk_expr, walk_stmt, walk_block, NestedVisitorMap, Visitor};\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, Lint};\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc::hir::*;\n@@ -353,20 +353,41 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for VectorInitializationVisitor<'a, 'tcx> {\n-    fn visit_expr(&mut self, expr: &'tcx Expr) {\n-        // Stop the search if we already found a slow zero-filling initialization\n-        if self.slow_expression.is_some() {\n-            return\n+    fn visit_stmt(&mut self, stmt: &'tcx Stmt) {\n+        if self.initialization_found {\n+            match stmt.node {\n+                StmtKind::Expr(ref expr, _) |\n+                StmtKind::Semi(ref expr, _) => {\n+                    self.search_slow_extend_filling(expr);\n+                    self.search_slow_resize_filling(expr);\n+                    self.search_unsafe_set_len(expr);\n+                },\n+                _ => (),\n+            }\n+\n+            self.initialization_found = false;\n+        } else {\n+            walk_stmt(self, stmt);\n+        }\n+    }\n+\n+    fn visit_block(&mut self, block: &'tcx Block) {\n+        if self.initialization_found {\n+            if let Some(ref s) = block.stmts.get(0) {\n+                self.visit_stmt( s)\n+            }\n+\n+            self.initialization_found = false;\n+        } else {\n+            walk_block(self, block);\n         }\n+    }\n \n+    fn visit_expr(&mut self, expr: &'tcx Expr) {\n         // Skip all the expressions previous to the vector initialization\n         if self.vec_alloc.allocation_expr.id == expr.id {\n             self.initialization_found = true;\n         }\n-        \n-        self.search_slow_extend_filling(expr);\n-        self.search_slow_resize_filling(expr);\n-        self.search_unsafe_set_len(expr);\n \n         walk_expr(self, expr);\n     }"}, {"sha": "daa6b9c13769d97a14f9802a966f50d8888fb3e7", "filename": "tests/ui/slow_vector_initialization.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5fa04bc3cdb3071dddbfd9cf9cf33bc099b182f0/tests%2Fui%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa04bc3cdb3071dddbfd9cf9cf33bc099b182f0/tests%2Fui%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fslow_vector_initialization.rs?ref=5fa04bc3cdb3071dddbfd9cf9cf33bc099b182f0", "patch": "@@ -34,13 +34,13 @@ fn extend_vector() {\n fn mixed_extend_resize_vector() {\n     // Mismatching len\n     let mut mismatching_len = Vec::with_capacity(30);\n+    mismatching_len.extend(repeat(0).take(40));\n \n     // Slow initialization\n     let mut resized_vec = Vec::with_capacity(30);\n-    let mut extend_vec = Vec::with_capacity(30);\n-\n     resized_vec.resize(30, 0);\n-    mismatching_len.extend(repeat(0).take(40));\n+\n+    let mut extend_vec = Vec::with_capacity(30);\n     extend_vec.extend(repeat(0).take(30));\n }\n \n@@ -70,3 +70,14 @@ fn unsafe_vector() {\n         unsafe_vec.set_len(200);\n     }\n }\n+\n+fn do_stuff(vec: &mut Vec<u8>) {\n+\n+}\n+\n+fn extend_vector_with_manipulations_between() {\n+    let len = 300;\n+    let mut vec1:Vec<u8> = Vec::with_capacity(len);\n+    do_stuff(&mut vec1);\n+    vec1.extend(repeat(0).take(len));\n+}"}, {"sha": "577cc82c6d52f82a8cf8202d6f86cb3137c55730", "filename": "tests/ui/slow_vector_initialization.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5fa04bc3cdb3071dddbfd9cf9cf33bc099b182f0/tests%2Fui%2Fslow_vector_initialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fa04bc3cdb3071dddbfd9cf9cf33bc099b182f0/tests%2Fui%2Fslow_vector_initialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fslow_vector_initialization.stderr?ref=5fa04bc3cdb3071dddbfd9cf9cf33bc099b182f0", "patch": "@@ -17,20 +17,18 @@ error: slow zero-filling initialization\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: slow zero-filling initialization\n-  --> $DIR/slow_vector_initialization.rs:42:5\n+  --> $DIR/slow_vector_initialization.rs:41:5\n    |\n-39 |     let mut resized_vec = Vec::with_capacity(30);\n+40 |     let mut resized_vec = Vec::with_capacity(30);\n    |                           ---------------------- help: consider replace allocation with: `vec![0; 30]`\n-...\n-42 |     resized_vec.resize(30, 0);\n+41 |     resized_vec.resize(30, 0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: slow zero-filling initialization\n   --> $DIR/slow_vector_initialization.rs:44:5\n    |\n-40 |     let mut extend_vec = Vec::with_capacity(30);\n+43 |     let mut extend_vec = Vec::with_capacity(30);\n    |                          ---------------------- help: consider replace allocation with: `vec![0; 30]`\n-...\n 44 |     extend_vec.extend(repeat(0).take(30));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n "}]}