{"sha": "800ddb367e4a56a77ab940ce95023e82b64f3bd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMGRkYjM2N2U0YTU2YTc3YWI5NDBjZTk1MDIzZTgyYjY0ZjNiZDI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-01-18T19:45:13Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc: remove fields from ty::print::PrintConfig available from tcx.", "tree": {"sha": "b04bef1b145faf2646a1d8ef38aeab14521bcb15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b04bef1b145faf2646a1d8ef38aeab14521bcb15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/800ddb367e4a56a77ab940ce95023e82b64f3bd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/800ddb367e4a56a77ab940ce95023e82b64f3bd2", "html_url": "https://github.com/rust-lang/rust/commit/800ddb367e4a56a77ab940ce95023e82b64f3bd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/800ddb367e4a56a77ab940ce95023e82b64f3bd2/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55871aad9a9c621e245c2b238f04f9fab55da759", "url": "https://api.github.com/repos/rust-lang/rust/commits/55871aad9a9c621e245c2b238f04f9fab55da759", "html_url": "https://github.com/rust-lang/rust/commit/55871aad9a9c621e245c2b238f04f9fab55da759"}], "stats": {"total": 68, "additions": 29, "deletions": 39}, "files": [{"sha": "c0f0df004c67023cb9414da3d6d11759f773c988", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/800ddb367e4a56a77ab940ce95023e82b64f3bd2/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800ddb367e4a56a77ab940ce95023e82b64f3bd2/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=800ddb367e4a56a77ab940ce95023e82b64f3bd2", "patch": "@@ -2369,20 +2369,20 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                 };\n \n                 // When printing regions, add trailing space if necessary.\n-                let ns = Namespace::ValueNS;\n-                ty::print::PrintCx::with_tls_tcx(ty::print::FmtPrinter::new(fmt, ns), |mut cx| {\n-                    let region = if cx.config.is_verbose || cx.config.identify_regions {\n-                        let mut region = region.to_string();\n-                        if region.len() > 0 {\n-                            region.push(' ');\n-                        }\n-                        region\n-                    } else {\n-                        // Do not even print 'static\n-                        String::new()\n-                    };\n-                    write!(cx.printer, \"&{}{}{:?}\", region, kind_str, place)\n-                })\n+                let print_region = ty::tls::with(|tcx| {\n+                    tcx.sess.verbose() || tcx.sess.opts.debugging_opts.identify_regions\n+                });\n+                let region = if print_region {\n+                    let mut region = region.to_string();\n+                    if region.len() > 0 {\n+                        region.push(' ');\n+                    }\n+                    region\n+                } else {\n+                    // Do not even print 'static\n+                    String::new()\n+                };\n+                write!(fmt, \"&{}{}{:?}\", region, kind_str, place)\n             }\n \n             Aggregate(ref kind, ref places) => {"}, {"sha": "ccd2a702c9f262d3e46de137887b2f54bfcb1307", "filename": "src/librustc/ty/print/mod.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/800ddb367e4a56a77ab940ce95023e82b64f3bd2/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800ddb367e4a56a77ab940ce95023e82b64f3bd2/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs?ref=800ddb367e4a56a77ab940ce95023e82b64f3bd2", "patch": "@@ -29,28 +29,14 @@ impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector {\n     }\n }\n \n+#[derive(Default)]\n pub(crate) struct PrintConfig {\n     pub(crate) is_debug: bool,\n-    pub(crate) is_verbose: bool,\n-    pub(crate) identify_regions: bool,\n     used_region_names: Option<FxHashSet<InternedString>>,\n     region_index: usize,\n     binder_depth: usize,\n }\n \n-impl PrintConfig {\n-    fn new(tcx: TyCtxt<'_, '_, '_>) -> Self {\n-        PrintConfig {\n-            is_debug: false,\n-            is_verbose: tcx.sess.verbose(),\n-            identify_regions: tcx.sess.opts.debugging_opts.identify_regions,\n-            used_region_names: None,\n-            region_index: 0,\n-            binder_depth: 0,\n-        }\n-    }\n-}\n-\n pub struct PrintCx<'a, 'gcx, 'tcx, P> {\n     pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     pub printer: P,\n@@ -75,7 +61,7 @@ impl<'a, 'gcx, 'tcx, P> PrintCx<'a, 'gcx, 'tcx, P> {\n         f(PrintCx {\n             tcx,\n             printer,\n-            config: &mut PrintConfig::new(tcx),\n+            config: &mut PrintConfig::default(),\n         })\n     }\n "}, {"sha": "325897dc042f192e6fb104d2960949e6fbb1a35a", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/800ddb367e4a56a77ab940ce95023e82b64f3bd2/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800ddb367e4a56a77ab940ce95023e82b64f3bd2/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=800ddb367e4a56a77ab940ce95023e82b64f3bd2", "patch": "@@ -515,7 +515,7 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n         });\n \n         // Don't print args that are the defaults of their respective parameters.\n-        let num_supplied_defaults = if self.config.is_verbose {\n+        let num_supplied_defaults = if self.tcx.sess.verbose() {\n             0\n         } else {\n             params.iter().rev().take_while(|param| {\n@@ -818,10 +818,12 @@ impl<F: fmt::Write> PrettyPrinter for FmtPrinter<F> {\n             return true;\n         }\n \n-        if self.config.is_verbose {\n+        if self.tcx.sess.verbose() {\n             return true;\n         }\n \n+        let identify_regions = self.tcx.sess.opts.debugging_opts.identify_regions;\n+\n         match *region {\n             ty::ReEarlyBound(ref data) => {\n                 data.name != \"\" && data.name != \"'_\"\n@@ -846,7 +848,7 @@ impl<F: fmt::Write> PrettyPrinter for FmtPrinter<F> {\n             }\n \n             ty::ReScope(_) |\n-            ty::ReVar(_) if self.config.identify_regions => true,\n+            ty::ReVar(_) if identify_regions => true,\n \n             ty::ReVar(_) |\n             ty::ReScope(_) |\n@@ -874,10 +876,12 @@ impl<F: fmt::Write> FmtPrinter<F> {\n             return Ok(self.printer);\n         }\n \n-        if self.config.is_verbose {\n+        if self.tcx.sess.verbose() {\n             return region.print_debug(self);\n         }\n \n+        let identify_regions = self.tcx.sess.opts.debugging_opts.identify_regions;\n+\n         // These printouts are concise.  They do not contain all the information\n         // the user might want to diagnose an error, but there is basically no way\n         // to fit that into a short string.  Hence the recommendation to use\n@@ -904,7 +908,7 @@ impl<F: fmt::Write> FmtPrinter<F> {\n                     }\n                 }\n             }\n-            ty::ReScope(scope) if self.config.identify_regions => {\n+            ty::ReScope(scope) if identify_regions => {\n                 match scope.data {\n                     region::ScopeData::Node =>\n                         p!(write(\"'{}s\", scope.item_local_id().as_usize())),\n@@ -921,7 +925,7 @@ impl<F: fmt::Write> FmtPrinter<F> {\n                     )),\n                 }\n             }\n-            ty::ReVar(region_vid) if self.config.identify_regions => {\n+            ty::ReVar(region_vid) if identify_regions => {\n                 p!(write(\"{:?}\", region_vid));\n             }\n             ty::ReVar(_) => {}\n@@ -1029,7 +1033,7 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n                 p!(write(\"Placeholder({:?})\", placeholder))\n             }\n             ty::Opaque(def_id, substs) => {\n-                if self.config.is_verbose {\n+                if self.tcx.sess.verbose() {\n                     p!(write(\"Opaque({:?}, {:?})\", def_id, substs));\n                     return Ok(self.printer);\n                 }"}, {"sha": "20df306dd2aff52586875deeef8b174e86efcc93", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/800ddb367e4a56a77ab940ce95023e82b64f3bd2/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800ddb367e4a56a77ab940ce95023e82b64f3bd2/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=800ddb367e4a56a77ab940ce95023e82b64f3bd2", "patch": "@@ -166,7 +166,7 @@ define_print! {\n \n                 // Special-case `Fn(...) -> ...` and resugar it.\n                 let fn_trait_kind = cx.tcx.lang_items().fn_trait_kind(principal.def_id);\n-                if !cx.config.is_verbose && fn_trait_kind.is_some() {\n+                if !cx.tcx.sess.verbose() && fn_trait_kind.is_some() {\n                     if let ty::Tuple(ref args) = principal.substs.type_at(0).sty {\n                         let mut projections = self.projection_bounds();\n                         if let (Some(proj), None) = (projections.next(), projections.next()) {\n@@ -463,7 +463,7 @@ impl fmt::Debug for ty::RegionVid {\n define_print! {\n     () ty::InferTy, (self, cx) {\n         display {\n-            if cx.config.is_verbose {\n+            if cx.tcx.sess.verbose() {\n                 return self.print_debug(cx);\n             }\n             match *self {"}]}