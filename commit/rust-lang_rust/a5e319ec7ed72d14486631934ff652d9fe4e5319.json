{"sha": "a5e319ec7ed72d14486631934ff652d9fe4e5319", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZTMxOWVjN2VkNzJkMTQ0ODY2MzE5MzRmZjY1MmQ5ZmU0ZTUzMTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-02T20:09:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-02T20:09:47Z"}, "message": "Store symbols separately from file data", "tree": {"sha": "8ab55c71188e69809faaa623a9424905cd673ed2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ab55c71188e69809faaa623a9424905cd673ed2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5e319ec7ed72d14486631934ff652d9fe4e5319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e319ec7ed72d14486631934ff652d9fe4e5319", "html_url": "https://github.com/rust-lang/rust/commit/a5e319ec7ed72d14486631934ff652d9fe4e5319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5e319ec7ed72d14486631934ff652d9fe4e5319/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "440dc41dd8f53876d0949272e76b1f560e10ec69", "url": "https://api.github.com/repos/rust-lang/rust/commits/440dc41dd8f53876d0949272e76b1f560e10ec69", "html_url": "https://github.com/rust-lang/rust/commit/440dc41dd8f53876d0949272e76b1f560e10ec69"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "4d565e95fccd84faac615fc5c0bede19e5eb21b6", "filename": "crates/libanalysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5e319ec7ed72d14486631934ff652d9fe4e5319/crates%2Flibanalysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a5e319ec7ed72d14486631934ff652d9fe4e5319/crates%2Flibanalysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2FCargo.toml?ref=a5e319ec7ed72d14486631934ff652d9fe4e5319", "patch": "@@ -8,7 +8,7 @@ relative-path = \"0.3.7\"\n log = \"0.4.2\"\n crossbeam-channel = \"0.2.4\"\n parking_lot = \"0.6.3\"\n-once_cell = \"0.1.4\"\n+once_cell = \"0.1.5\"\n rayon = \"1.0.2\"\n fst = \"0.3.1\"\n libsyntax2 = { path = \"../libsyntax2\" }"}, {"sha": "eb14e756781db65b3dab4b5f122dc440d2aacae6", "filename": "crates/libanalysis/src/roots.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a5e319ec7ed72d14486631934ff652d9fe4e5319/crates%2Flibanalysis%2Fsrc%2Froots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e319ec7ed72d14486631934ff652d9fe4e5319/crates%2Flibanalysis%2Fsrc%2Froots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Froots.rs?ref=a5e319ec7ed72d14486631934ff652d9fe4e5319", "patch": "@@ -18,7 +18,7 @@ use {\n \n #[derive(Clone, Default, Debug)]\n pub(crate) struct SourceRoot {\n-    file_map: HashMap<FileId, Arc<FileData>>,\n+    file_map: HashMap<FileId, Arc<(FileData, OnceCell<FileSymbols>)>>,\n     module_map: ModuleMap,\n }\n \n@@ -37,9 +37,7 @@ impl SourceRoot {\n         self.file_map.remove(&file_id);\n         if let Some(text) = text {\n             let file_data = FileData::new(text);\n-            self.file_map.insert(file_id, Arc::new(file_data));\n-        } else {\n-            self.file_map.remove(&file_id);\n+            self.file_map.insert(file_id, Arc::new((file_data, Default::default())));\n         }\n     }\n     pub fn module_map(&self) -> &ModuleMap {\n@@ -64,40 +62,43 @@ impl SourceRoot {\n     pub(crate) fn symbols(&self) -> Vec<(FileId, &FileSymbols)> {\n         self.file_map\n             .iter()\n-            .map(|(&file_id, data)| (file_id, data.symbols()))\n+            .map(|(&file_id, data)| (file_id, symbols(data)))\n             .collect()\n     }\n     pub fn reindex(&self) {\n         let now = Instant::now();\n         self.file_map\n             .par_iter()\n             .for_each(|(_, data)| {\n-                data.symbols();\n+                symbols(data);\n             });\n         info!(\"parallel indexing took {:?}\", now.elapsed());\n \n     }\n     fn data(&self, file_id: FileId) -> &FileData {\n         match self.file_map.get(&file_id) {\n-            Some(data) => data,\n+            Some(data) => &data.0,\n             None => panic!(\"unknown file: {:?}\", file_id),\n         }\n     }\n }\n \n+fn symbols((data, symbols): &(FileData, OnceCell<FileSymbols>)) -> &FileSymbols {\n+    let syntax = data.syntax_transient();\n+    symbols.get_or_init(|| FileSymbols::new(&syntax))\n+}\n+\n #[derive(Debug)]\n struct FileData {\n     text: String,\n     lines: OnceCell<LineIndex>,\n     syntax: OnceCell<File>,\n-    symbols: OnceCell<FileSymbols>,\n }\n \n impl FileData {\n     fn new(text: String) -> FileData {\n         FileData {\n             text,\n-            symbols: OnceCell::new(),\n             syntax: OnceCell::new(),\n             lines: OnceCell::new(),\n         }\n@@ -106,8 +107,4 @@ impl FileData {\n         self.syntax.get().map(|s| s.clone())\n             .unwrap_or_else(|| File::parse(&self.text))\n     }\n-    fn symbols(&self) -> &FileSymbols {\n-        let syntax = self.syntax_transient();\n-        self.symbols.get_or_init(|| FileSymbols::new(&syntax))\n-    }\n }"}]}