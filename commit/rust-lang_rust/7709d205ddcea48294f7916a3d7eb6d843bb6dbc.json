{"sha": "7709d205ddcea48294f7916a3d7eb6d843bb6dbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MDlkMjA1ZGRjZWE0ODI5NGY3OTE2YTNkN2ViNmQ4NDNiYjZkYmM=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2020-04-15T16:38:22Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2020-04-16T15:20:53Z"}, "message": "Implement `Box::into_raw` based on `Box::leak`\n\n\u2026 instead of the other way around.", "tree": {"sha": "40c82b652bdd2309c6efb65cda52be2fd3f70c62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40c82b652bdd2309c6efb65cda52be2fd3f70c62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7709d205ddcea48294f7916a3d7eb6d843bb6dbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7709d205ddcea48294f7916a3d7eb6d843bb6dbc", "html_url": "https://github.com/rust-lang/rust/commit/7709d205ddcea48294f7916a3d7eb6d843bb6dbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7709d205ddcea48294f7916a3d7eb6d843bb6dbc/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a1c7dba32e13184f4c5c3ad914d536f9799c524", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a1c7dba32e13184f4c5c3ad914d536f9799c524", "html_url": "https://github.com/rust-lang/rust/commit/9a1c7dba32e13184f4c5c3ad914d536f9799c524"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "3d657396a9feb704e534e6ff43fda3b9e37528e6", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7709d205ddcea48294f7916a3d7eb6d843bb6dbc/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7709d205ddcea48294f7916a3d7eb6d843bb6dbc/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=7709d205ddcea48294f7916a3d7eb6d843bb6dbc", "patch": "@@ -428,15 +428,12 @@ impl<T: ?Sized> Box<T> {\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n     pub fn into_raw(b: Box<T>) -> *mut T {\n-        let b = mem::ManuallyDrop::new(b);\n-        let mut unique = b.0;\n-        // Box is kind-of a library type, but recognized as a \"unique pointer\" by\n-        // Stacked Borrows.  This function here corresponds to \"reborrowing to\n-        // a raw pointer\", but there is no actual reborrow here -- so\n-        // without some care, the pointer we are returning here still carries\n-        // the tag of `b`, with `Unique` permission.\n-        // We round-trip through a mutable reference to avoid that.\n-        unsafe { unique.as_mut() as *mut T }\n+        // Box is recognized as a \"unique pointer\" by Stacked Borrows, but internally it is a\n+        // raw pointer for the type system. Turning it directly into a raw pointer would not be\n+        // recognized as \"releasing\" the unique pointer to permit aliased raw accesses,\n+        // so all raw pointer methods go through `leak` which creates a (unique)\n+        // mutable reference. Turning *that* to a raw pointer behaves correctly.\n+        Box::leak(b) as *mut T\n     }\n \n     /// Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.\n@@ -475,6 +472,11 @@ impl<T: ?Sized> Box<T> {\n     )]\n     #[inline]\n     pub fn into_raw_non_null(b: Box<T>) -> NonNull<T> {\n+        // Box is recognized as a \"unique pointer\" by Stacked Borrows, but internally it is a\n+        // raw pointer for the type system. Turning it directly into a raw pointer would not be\n+        // recognized as \"releasing\" the unique pointer to permit aliased raw accesses,\n+        // so all raw pointer methods go through `leak` which creates a (unique)\n+        // mutable reference. Turning *that* to a raw pointer behaves correctly.\n         Box::leak(b).into()\n     }\n \n@@ -486,6 +488,11 @@ impl<T: ?Sized> Box<T> {\n     #[inline]\n     #[doc(hidden)]\n     pub fn into_unique(b: Box<T>) -> Unique<T> {\n+        // Box is recognized as a \"unique pointer\" by Stacked Borrows, but internally it is a\n+        // raw pointer for the type system. Turning it directly into a raw pointer would not be\n+        // recognized as \"releasing\" the unique pointer to permit aliased raw accesses,\n+        // so all raw pointer methods go through `leak` which creates a (unique)\n+        // mutable reference. Turning *that* to a raw pointer behaves correctly.\n         Box::leak(b).into()\n     }\n \n@@ -532,7 +539,7 @@ impl<T: ?Sized> Box<T> {\n     where\n         T: 'a, // Technically not needed, but kept to be explicit.\n     {\n-        unsafe { &mut *Box::into_raw(b) }\n+        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }\n     }\n \n     /// Converts a `Box<T>` into a `Pin<Box<T>>`"}]}