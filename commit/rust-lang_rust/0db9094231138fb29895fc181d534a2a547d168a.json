{"sha": "0db9094231138fb29895fc181d534a2a547d168a", "node_id": "C_kwDOAAsO6NoAKDBkYjkwOTQyMzExMzhmYjI5ODk1ZmMxODFkNTM0YTJhNTQ3ZDE2OGE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-31T10:15:56Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-31T10:15:56Z"}, "message": "Rustfmt", "tree": {"sha": "e23aec138bec8656302e306ef8797c81410b8ebc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e23aec138bec8656302e306ef8797c81410b8ebc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0db9094231138fb29895fc181d534a2a547d168a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0db9094231138fb29895fc181d534a2a547d168a", "html_url": "https://github.com/rust-lang/rust/commit/0db9094231138fb29895fc181d534a2a547d168a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0db9094231138fb29895fc181d534a2a547d168a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d489fb9a59338051e1f488c87d8ee55bd25e0208", "url": "https://api.github.com/repos/rust-lang/rust/commits/d489fb9a59338051e1f488c87d8ee55bd25e0208", "html_url": "https://github.com/rust-lang/rust/commit/d489fb9a59338051e1f488c87d8ee55bd25e0208"}], "stats": {"total": 245, "additions": 187, "deletions": 58}, "files": [{"sha": "7e205b0fd0b3b85dab07cb83a620a56fd256a233", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db9094231138fb29895fc181d534a2a547d168a/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db9094231138fb29895fc181d534a2a547d168a/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=0db9094231138fb29895fc181d534a2a547d168a", "patch": "@@ -2,7 +2,7 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::{self, Command};\n \n-use super::rustc_info::{get_file_name, get_wrapper_file_name, get_rustc_version};\n+use super::rustc_info::{get_file_name, get_rustc_version, get_wrapper_file_name};\n use super::utils::{spawn_and_wait, try_hard_link};\n use super::SysrootKind;\n "}, {"sha": "8c7d05993a51b9dd1d33a33e96c178efb4b02c60", "filename": "build_system/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0db9094231138fb29895fc181d534a2a547d168a/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db9094231138fb29895fc181d534a2a547d168a/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=0db9094231138fb29895fc181d534a2a547d168a", "patch": "@@ -7,8 +7,8 @@ mod build_sysroot;\n mod config;\n mod prepare;\n mod rustc_info;\n-mod utils;\n mod tests;\n+mod utils;\n \n fn usage() {\n     eprintln!(\"Usage:\");\n@@ -122,7 +122,8 @@ pub fn main() {\n         process::exit(1);\n     }\n \n-    let cg_clif_build_dir = build_backend::build_backend(channel, &host_triple, use_unstable_features);\n+    let cg_clif_build_dir =\n+        build_backend::build_backend(channel, &host_triple, use_unstable_features);\n     match command {\n         Command::Test => {\n             tests::run_tests(\n@@ -133,7 +134,7 @@ pub fn main() {\n                 &host_triple,\n                 &target_triple,\n             );\n-        },\n+        }\n         Command::Build => {\n             build_sysroot::build_sysroot(\n                 channel,"}, {"sha": "3f225b4efa2b11a7121bf275c94cdda3b0c64121", "filename": "build_system/tests.rs", "status": "modified", "additions": 181, "deletions": 53, "changes": 234, "blob_url": "https://github.com/rust-lang/rust/blob/0db9094231138fb29895fc181d534a2a547d168a/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db9094231138fb29895fc181d534a2a547d168a/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=0db9094231138fb29895fc181d534a2a547d168a", "patch": "@@ -22,85 +22,195 @@ impl TestCase {\n \n const NO_SYSROOT_SUITE: &[TestCase] = &[\n     TestCase::new(\"build.mini_core\", &|runner| {\n-        runner.run_rustc([\"example/mini_core.rs\", \"--crate-name\", \"mini_core\", \"--crate-type\", \"lib,dylib\", \"--target\", &runner.target_triple]);\n+        runner.run_rustc([\n+            \"example/mini_core.rs\",\n+            \"--crate-name\",\n+            \"mini_core\",\n+            \"--crate-type\",\n+            \"lib,dylib\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n     }),\n-\n     TestCase::new(\"build.example\", &|runner| {\n-        runner.run_rustc([\"example/example.rs\", \"--crate-type\", \"lib\", \"--target\", &runner.target_triple]);\n+        runner.run_rustc([\n+            \"example/example.rs\",\n+            \"--crate-type\",\n+            \"lib\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n     }),\n-\n     TestCase::new(\"jit.mini_core_hello_world\", &|runner| {\n-        let mut jit_cmd = runner.rustc_command([\"-Zunstable-options\", \"-Cllvm-args=mode=jit\", \"-Cprefer-dynamic\", \"example/mini_core_hello_world.rs\", \"--cfg\", \"jit\", \"--target\", &runner.host_triple]);\n+        let mut jit_cmd = runner.rustc_command([\n+            \"-Zunstable-options\",\n+            \"-Cllvm-args=mode=jit\",\n+            \"-Cprefer-dynamic\",\n+            \"example/mini_core_hello_world.rs\",\n+            \"--cfg\",\n+            \"jit\",\n+            \"--target\",\n+            &runner.host_triple,\n+        ]);\n         jit_cmd.env(\"CG_CLIF_JIT_ARGS\", \"abc bcd\");\n         spawn_and_wait(jit_cmd);\n \n         eprintln!(\"[JIT-lazy] mini_core_hello_world\");\n-        let mut jit_cmd = runner.rustc_command([\"-Zunstable-options\", \"-Cllvm-args=mode=jit-lazy\", \"-Cprefer-dynamic\", \"example/mini_core_hello_world.rs\", \"--cfg\", \"jit\", \"--target\", &runner.host_triple]);\n+        let mut jit_cmd = runner.rustc_command([\n+            \"-Zunstable-options\",\n+            \"-Cllvm-args=mode=jit-lazy\",\n+            \"-Cprefer-dynamic\",\n+            \"example/mini_core_hello_world.rs\",\n+            \"--cfg\",\n+            \"jit\",\n+            \"--target\",\n+            &runner.host_triple,\n+        ]);\n         jit_cmd.env(\"CG_CLIF_JIT_ARGS\", \"abc bcd\");\n         spawn_and_wait(jit_cmd);\n     }),\n-\n     TestCase::new(\"aot.mini_core_hello_world\", &|runner| {\n-        runner.run_rustc([\"example/mini_core_hello_world.rs\", \"--crate-name\", \"mini_core_hello_world\", \"--crate-type\", \"bin\", \"-g\", \"--target\", &runner.target_triple]);\n+        runner.run_rustc([\n+            \"example/mini_core_hello_world.rs\",\n+            \"--crate-name\",\n+            \"mini_core_hello_world\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"-g\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n         runner.run_out_command(\"mini_core_hello_world\", [\"abc\", \"bcd\"]);\n     }),\n ];\n \n-\n const BASE_SYSROOT_SUITE: &[TestCase] = &[\n     TestCase::new(\"aot.arbitrary_self_types_pointers_and_wrappers\", &|runner| {\n-        runner.run_rustc([\"example/arbitrary_self_types_pointers_and_wrappers.rs\", \"--crate-name\", \"arbitrary_self_types_pointers_and_wrappers\", \"--crate-type\", \"bin\", \"--target\", &runner.target_triple]);\n+        runner.run_rustc([\n+            \"example/arbitrary_self_types_pointers_and_wrappers.rs\",\n+            \"--crate-name\",\n+            \"arbitrary_self_types_pointers_and_wrappers\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n         runner.run_out_command(\"arbitrary_self_types_pointers_and_wrappers\", []);\n     }),\n-\n     TestCase::new(\"aot.issue_91827_extern_types\", &|runner| {\n-        runner.run_rustc([\"example/issue-91827-extern-types.rs\", \"--crate-name\", \"issue_91827_extern_types\", \"--crate-type\", \"bin\", \"--target\", &runner.target_triple]);\n+        runner.run_rustc([\n+            \"example/issue-91827-extern-types.rs\",\n+            \"--crate-name\",\n+            \"issue_91827_extern_types\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n         runner.run_out_command(\"issue_91827_extern_types\", []);\n     }),\n-\n     TestCase::new(\"build.alloc_system\", &|runner| {\n-        runner.run_rustc([\"example/alloc_system.rs\", \"--crate-type\", \"lib\", \"--target\", &runner.target_triple]);\n+        runner.run_rustc([\n+            \"example/alloc_system.rs\",\n+            \"--crate-type\",\n+            \"lib\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n     }),\n-\n     TestCase::new(\"aot.alloc_example\", &|runner| {\n-        runner.run_rustc([\"example/alloc_example.rs\", \"--crate-type\", \"bin\", \"--target\", &runner.target_triple]);\n+        runner.run_rustc([\n+            \"example/alloc_example.rs\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n         runner.run_out_command(\"alloc_example\", []);\n     }),\n-\n     TestCase::new(\"jit.std_example\", &|runner| {\n-        runner.run_rustc([\"-Zunstable-options\", \"-Cllvm-args=mode=jit\", \"-Cprefer-dynamic\", \"example/std_example.rs\", \"--target\", &runner.host_triple]);\n+        runner.run_rustc([\n+            \"-Zunstable-options\",\n+            \"-Cllvm-args=mode=jit\",\n+            \"-Cprefer-dynamic\",\n+            \"example/std_example.rs\",\n+            \"--target\",\n+            &runner.host_triple,\n+        ]);\n \n         eprintln!(\"[JIT-lazy] std_example\");\n-        runner.run_rustc([\"-Zunstable-options\", \"-Cllvm-args=mode=jit-lazy\", \"-Cprefer-dynamic\", \"example/std_example.rs\", \"--target\", &runner.host_triple]);\n+        runner.run_rustc([\n+            \"-Zunstable-options\",\n+            \"-Cllvm-args=mode=jit-lazy\",\n+            \"-Cprefer-dynamic\",\n+            \"example/std_example.rs\",\n+            \"--target\",\n+            &runner.host_triple,\n+        ]);\n     }),\n-\n     TestCase::new(\"aot.std_example\", &|runner| {\n-        runner.run_rustc([\"example/std_example.rs\", \"--crate-type\", \"bin\", \"--target\", &runner.target_triple]);\n+        runner.run_rustc([\n+            \"example/std_example.rs\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n         runner.run_out_command(\"std_example\", [\"arg\"]);\n     }),\n-\n     TestCase::new(\"aot.dst_field_align\", &|runner| {\n-        runner.run_rustc([\"example/dst-field-align.rs\", \"--crate-name\", \"dst_field_align\", \"--crate-type\", \"bin\", \"--target\", &runner.target_triple]);\n+        runner.run_rustc([\n+            \"example/dst-field-align.rs\",\n+            \"--crate-name\",\n+            \"dst_field_align\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n         runner.run_out_command(\"dst_field_align\", []);\n     }),\n-\n     TestCase::new(\"aot.subslice-patterns-const-eval\", &|runner| {\n-        runner.run_rustc([\"example/subslice-patterns-const-eval.rs\", \"--crate-type\", \"bin\", \"-Cpanic=abort\", \"--target\", &runner.target_triple]);\n+        runner.run_rustc([\n+            \"example/subslice-patterns-const-eval.rs\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"-Cpanic=abort\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n         runner.run_out_command(\"subslice-patterns-const-eval\", []);\n     }),\n-\n     TestCase::new(\"aot.track-caller-attribute\", &|runner| {\n-        runner.run_rustc([\"example/track-caller-attribute.rs\", \"--crate-type\", \"bin\", \"-Cpanic=abort\", \"--target\", &runner.target_triple]);\n+        runner.run_rustc([\n+            \"example/track-caller-attribute.rs\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"-Cpanic=abort\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n         runner.run_out_command(\"track-caller-attribute\", []);\n     }),\n-\n     TestCase::new(\"aot.float-minmax-pass\", &|runner| {\n-        runner.run_rustc([\"example/float-minmax-pass.rs\", \"--crate-type\", \"bin\", \"-Cpanic=abort\", \"--target\", &runner.target_triple]);\n+        runner.run_rustc([\n+            \"example/float-minmax-pass.rs\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"-Cpanic=abort\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n         runner.run_out_command(\"float-minmax-pass\", []);\n     }),\n-\n     TestCase::new(\"aot.mod_bench\", &|runner| {\n-        runner.run_rustc([\"example/mod_bench.rs\", \"--crate-type\", \"bin\", \"--target\", &runner.target_triple]);\n+        runner.run_rustc([\n+            \"example/mod_bench.rs\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n         runner.run_out_command(\"mod_bench\", []);\n     }),\n ];\n@@ -115,11 +225,16 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n                 runner.run_cargo([\"test\", \"--workspace\"]);\n             } else {\n                 eprintln!(\"[AOT] rust-random/rand\");\n-                runner.run_cargo([\"build\", \"--workspace\", \"--target\", &runner.target_triple, \"--tests\"]);\n+                runner.run_cargo([\n+                    \"build\",\n+                    \"--workspace\",\n+                    \"--target\",\n+                    &runner.target_triple,\n+                    \"--tests\",\n+                ]);\n             }\n         });\n     }),\n-\n     TestCase::new(\"bench.simple-raytracer\", &|runner| {\n         runner.in_dir([\"simple-raytracer\"], |runner| {\n             let run_runs = env::var(\"RUN_RUNS\").unwrap_or(\"10\".to_string());\n@@ -143,10 +258,9 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n                 bench_compile.arg(format!(\"{:?}\", runner.cargo_command([\"build\"])));\n                 spawn_and_wait(bench_compile);\n \n-\n-\n                 eprintln!(\"[BENCH RUN] ebobby/simple-raytracer\");\n-                fs::copy(PathBuf::from(\"./target/debug/main\"), PathBuf::from(\"raytracer_cg_clif\")).unwrap();\n+                fs::copy(PathBuf::from(\"./target/debug/main\"), PathBuf::from(\"raytracer_cg_clif\"))\n+                    .unwrap();\n \n                 let mut bench_run = Command::new(\"hyperfine\");\n                 bench_run.arg(\"--runs\");\n@@ -163,7 +277,6 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             }\n         });\n     }),\n-\n     TestCase::new(\"test.libcore\", &|runner| {\n         runner.in_dir([\"build_sysroot\", \"sysroot_src\", \"library\", \"core\", \"tests\"], |runner| {\n             runner.run_cargo([\"clean\"]);\n@@ -176,36 +289,47 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             }\n         });\n     }),\n-\n     TestCase::new(\"test.regex-shootout-regex-dna\", &|runner| {\n         runner.in_dir([\"regex\"], |runner| {\n             runner.run_cargo([\"clean\"]);\n \n             // newer aho_corasick versions throw a deprecation warning\n             let lint_rust_flags = format!(\"{} --cap-lints warn\", runner.rust_flags);\n \n-            let mut build_cmd = runner.cargo_command([\"build\", \"--example\", \"shootout-regex-dna\", \"--target\", &runner.target_triple]);\n+            let mut build_cmd = runner.cargo_command([\n+                \"build\",\n+                \"--example\",\n+                \"shootout-regex-dna\",\n+                \"--target\",\n+                &runner.target_triple,\n+            ]);\n             build_cmd.env(\"RUSTFLAGS\", lint_rust_flags.clone());\n             spawn_and_wait(build_cmd);\n \n             if runner.host_triple == runner.target_triple {\n-                let mut run_cmd = runner.cargo_command([\"run\", \"--example\", \"shootout-regex-dna\", \"--target\", &runner.target_triple]);\n+                let mut run_cmd = runner.cargo_command([\n+                    \"run\",\n+                    \"--example\",\n+                    \"shootout-regex-dna\",\n+                    \"--target\",\n+                    &runner.target_triple,\n+                ]);\n                 run_cmd.env(\"RUSTFLAGS\", lint_rust_flags);\n \n-\n-                let input = fs::read_to_string(PathBuf::from(\"examples/regexdna-input.txt\")).unwrap();\n+                let input =\n+                    fs::read_to_string(PathBuf::from(\"examples/regexdna-input.txt\")).unwrap();\n                 let expected_path = PathBuf::from(\"examples/regexdna-output.txt\");\n                 let expected = fs::read_to_string(&expected_path).unwrap();\n \n                 let output = spawn_and_wait_with_input(run_cmd, input);\n                 // Make sure `[codegen mono items] start` doesn't poison the diff\n-                let output = output.lines()\n+                let output = output\n+                    .lines()\n                     .filter(|line| !line.contains(\"codegen mono items\"))\n                     .chain(Some(\"\")) // This just adds the trailing newline\n                     .collect::<Vec<&str>>()\n                     .join(\"\\r\\n\");\n \n-\n                 let output_matches = expected.lines().eq(output.lines());\n                 if !output_matches {\n                     let res_path = PathBuf::from(\"res.txt\");\n@@ -228,7 +352,6 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             }\n         });\n     }),\n-\n     TestCase::new(\"test.regex\", &|runner| {\n         runner.in_dir([\"regex\"], |runner| {\n             runner.run_cargo([\"clean\"]);\n@@ -237,18 +360,27 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             let lint_rust_flags = format!(\"{} --cap-lints warn\", runner.rust_flags);\n \n             if runner.host_triple == runner.target_triple {\n-                let mut run_cmd = runner.cargo_command([\"test\", \"--tests\", \"--\", \"--exclude-should-panic\", \"--test-threads\", \"1\", \"-Zunstable-options\", \"-q\"]);\n+                let mut run_cmd = runner.cargo_command([\n+                    \"test\",\n+                    \"--tests\",\n+                    \"--\",\n+                    \"--exclude-should-panic\",\n+                    \"--test-threads\",\n+                    \"1\",\n+                    \"-Zunstable-options\",\n+                    \"-q\",\n+                ]);\n                 run_cmd.env(\"RUSTFLAGS\", lint_rust_flags);\n                 spawn_and_wait(run_cmd);\n             } else {\n                 eprintln!(\"Cross-Compiling: Not running tests\");\n-                let mut build_cmd = runner.cargo_command([\"build\",  \"--tests\", \"--target\", &runner.target_triple]);\n+                let mut build_cmd =\n+                    runner.cargo_command([\"build\", \"--tests\", \"--target\", &runner.target_triple]);\n                 build_cmd.env(\"RUSTFLAGS\", lint_rust_flags.clone());\n                 spawn_and_wait(build_cmd);\n             }\n         });\n     }),\n-\n     TestCase::new(\"test.portable-simd\", &|runner| {\n         runner.in_dir([\"portable-simd\"], |runner| {\n             runner.run_cargo([\"clean\"]);\n@@ -261,8 +393,6 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     }),\n ];\n \n-\n-\n pub(crate) fn run_tests(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n@@ -316,8 +446,6 @@ pub(crate) fn run_tests(\n     }\n }\n \n-\n-\n struct TestRunner {\n     root_dir: PathBuf,\n     out_dir: PathBuf,\n@@ -348,7 +476,7 @@ impl TestRunner {\n                     // We are cross-compiling for aarch64. Use the correct linker and run tests in qemu.\n                     rust_flags = format!(\"-Clinker=aarch64-linux-gnu-gcc{}\", rust_flags);\n                     run_wrapper = vec![\"qemu-aarch64\", \"-L\", \"/usr/aarch64-linux-gnu\"];\n-                },\n+                }\n                 \"x86_64-pc-windows-gnu\" => {\n                     // We are cross-compiling for Windows. Run tests in wine.\n                     run_wrapper = vec![\"wine\"];"}, {"sha": "3282778e25486bb63a28841a2ff113b3ac80e11f", "filename": "build_system/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db9094231138fb29895fc181d534a2a547d168a/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db9094231138fb29895fc181d534a2a547d168a/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=0db9094231138fb29895fc181d534a2a547d168a", "patch": "@@ -1,7 +1,7 @@\n use std::fs;\n+use std::io::Write;\n use std::path::Path;\n use std::process::{self, Command, Stdio};\n-use std::io::Write;\n \n #[track_caller]\n pub(crate) fn try_hard_link(src: impl AsRef<Path>, dst: impl AsRef<Path>) {"}]}