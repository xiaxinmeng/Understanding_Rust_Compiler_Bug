{"sha": "21c1504ca972d59307a065f72154e50bd32aa763", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYzE1MDRjYTk3MmQ1OTMwN2EwNjVmNzIxNTRlNTBiZDMyYWE3NjM=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-07-15T13:45:30Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-07-15T13:45:30Z"}, "message": "Move allow list into AssistConfig", "tree": {"sha": "e6c25847e4de5a87bf677ea2e23f2efa9343ba5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6c25847e4de5a87bf677ea2e23f2efa9343ba5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21c1504ca972d59307a065f72154e50bd32aa763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21c1504ca972d59307a065f72154e50bd32aa763", "html_url": "https://github.com/rust-lang/rust/commit/21c1504ca972d59307a065f72154e50bd32aa763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21c1504ca972d59307a065f72154e50bd32aa763/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a7d1d4412cd1047f309605156ea9f6cd8f3d997", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a7d1d4412cd1047f309605156ea9f6cd8f3d997", "html_url": "https://github.com/rust-lang/rust/commit/6a7d1d4412cd1047f309605156ea9f6cd8f3d997"}], "stats": {"total": 84, "additions": 40, "deletions": 44}, "files": [{"sha": "cda2abfb9c2fdf49ff322a248c8bf30729150cf0", "filename": "crates/ra_assists/src/assist_config.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21c1504ca972d59307a065f72154e50bd32aa763/crates%2Fra_assists%2Fsrc%2Fassist_config.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c1504ca972d59307a065f72154e50bd32aa763/crates%2Fra_assists%2Fsrc%2Fassist_config.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_config.rs?ref=21c1504ca972d59307a065f72154e50bd32aa763", "patch": "@@ -4,9 +4,12 @@\n //! module, and we use to statically check that we only produce snippet\n //! assists if we are allowed to.\n \n+use crate::AssistKind;\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct AssistConfig {\n     pub snippet_cap: Option<SnippetCap>,\n+    pub allowed: Option<Vec<AssistKind>>,\n }\n \n impl AssistConfig {\n@@ -22,6 +25,6 @@ pub struct SnippetCap {\n \n impl Default for AssistConfig {\n     fn default() -> Self {\n-        AssistConfig { snippet_cap: Some(SnippetCap { _private: () }) }\n+        AssistConfig { snippet_cap: Some(SnippetCap { _private: () }), allowed: None }\n     }\n }"}, {"sha": "3407df8562d2580635777f6f85ebb15dd0c70439", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21c1504ca972d59307a065f72154e50bd32aa763/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c1504ca972d59307a065f72154e50bd32aa763/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=21c1504ca972d59307a065f72154e50bd32aa763", "patch": "@@ -57,18 +57,16 @@ pub(crate) struct AssistContext<'a> {\n     pub(crate) sema: Semantics<'a, RootDatabase>,\n     pub(crate) frange: FileRange,\n     source_file: SourceFile,\n-    allowed: Option<Vec<AssistKind>>,\n }\n \n impl<'a> AssistContext<'a> {\n     pub(crate) fn new(\n         sema: Semantics<'a, RootDatabase>,\n         config: &'a AssistConfig,\n         frange: FileRange,\n-        allowed: Option<Vec<AssistKind>>,\n     ) -> AssistContext<'a> {\n         let source_file = sema.parse(frange.file_id);\n-        AssistContext { config, sema, frange, source_file, allowed }\n+        AssistContext { config, sema, frange, source_file }\n     }\n \n     pub(crate) fn db(&self) -> &RootDatabase {\n@@ -114,7 +112,7 @@ impl Assists {\n             resolve: true,\n             file: ctx.frange.file_id,\n             buf: Vec::new(),\n-            allowed: ctx.allowed.clone(),\n+            allowed: ctx.config.allowed.clone(),\n         }\n     }\n \n@@ -123,7 +121,7 @@ impl Assists {\n             resolve: false,\n             file: ctx.frange.file_id,\n             buf: Vec::new(),\n-            allowed: ctx.allowed.clone(),\n+            allowed: ctx.config.allowed.clone(),\n         }\n     }\n "}, {"sha": "465b90415171093f0b83f78affe9b26cb28d1122", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21c1504ca972d59307a065f72154e50bd32aa763/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c1504ca972d59307a065f72154e50bd32aa763/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=21c1504ca972d59307a065f72154e50bd32aa763", "patch": "@@ -86,14 +86,9 @@ impl Assist {\n     ///\n     /// Assists are returned in the \"unresolved\" state, that is only labels are\n     /// returned, without actual edits.\n-    pub fn unresolved(\n-        db: &RootDatabase,\n-        config: &AssistConfig,\n-        range: FileRange,\n-        allowed: Option<Vec<AssistKind>>,\n-    ) -> Vec<Assist> {\n+    pub fn unresolved(db: &RootDatabase, config: &AssistConfig, range: FileRange) -> Vec<Assist> {\n         let sema = Semantics::new(db);\n-        let ctx = AssistContext::new(sema, config, range, allowed);\n+        let ctx = AssistContext::new(sema, config, range);\n         let mut acc = Assists::new_unresolved(&ctx);\n         handlers::all().iter().for_each(|handler| {\n             handler(&mut acc, &ctx);\n@@ -109,10 +104,9 @@ impl Assist {\n         db: &RootDatabase,\n         config: &AssistConfig,\n         range: FileRange,\n-        allowed: Option<Vec<AssistKind>>,\n     ) -> Vec<ResolvedAssist> {\n         let sema = Semantics::new(db);\n-        let ctx = AssistContext::new(sema, config, range, allowed);\n+        let ctx = AssistContext::new(sema, config, range);\n         let mut acc = Assists::new_resolved(&ctx);\n         handlers::all().iter().for_each(|handler| {\n             handler(&mut acc, &ctx);"}, {"sha": "18fcb90498742189306e7ce809c4cc400ec34154", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/21c1504ca972d59307a065f72154e50bd32aa763/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c1504ca972d59307a065f72154e50bd32aa763/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=21c1504ca972d59307a065f72154e50bd32aa763", "patch": "@@ -35,14 +35,14 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n     let before = db.file_text(file_id).to_string();\n     let frange = FileRange { file_id, range: selection.into() };\n \n-    let mut assist = Assist::resolved(&db, &AssistConfig::default(), frange, None)\n+    let mut assist = Assist::resolved(&db, &AssistConfig::default(), frange)\n         .into_iter()\n         .find(|assist| assist.assist.id.0 == assist_id)\n         .unwrap_or_else(|| {\n             panic!(\n                 \"\\n\\nAssist is not applicable: {}\\nAvailable assists: {}\",\n                 assist_id,\n-                Assist::resolved(&db, &AssistConfig::default(), frange, None)\n+                Assist::resolved(&db, &AssistConfig::default(), frange)\n                     .into_iter()\n                     .map(|assist| assist.assist.id.0)\n                     .collect::<Vec<_>>()\n@@ -73,7 +73,7 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult) {\n \n     let sema = Semantics::new(&db);\n     let config = AssistConfig::default();\n-    let ctx = AssistContext::new(sema, &config, frange, None);\n+    let ctx = AssistContext::new(sema, &config, frange);\n     let mut acc = Assists::new_resolved(&ctx);\n     handler(&mut acc, &ctx);\n     let mut res = acc.finish_resolved();\n@@ -105,7 +105,7 @@ fn assist_order_field_struct() {\n     let (before_cursor_pos, before) = extract_offset(before);\n     let (db, file_id) = with_single_file(&before);\n     let frange = FileRange { file_id, range: TextRange::empty(before_cursor_pos) };\n-    let assists = Assist::resolved(&db, &AssistConfig::default(), frange, None);\n+    let assists = Assist::resolved(&db, &AssistConfig::default(), frange);\n     let mut assists = assists.iter();\n \n     assert_eq!(\n@@ -128,7 +128,7 @@ fn assist_order_if_expr() {\n     let (range, before) = extract_range(before);\n     let (db, file_id) = with_single_file(&before);\n     let frange = FileRange { file_id, range };\n-    let assists = Assist::resolved(&db, &AssistConfig::default(), frange, None);\n+    let assists = Assist::resolved(&db, &AssistConfig::default(), frange);\n     let mut assists = assists.iter();\n \n     assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Extract into variable\");\n@@ -150,27 +150,30 @@ fn assist_filter_works() {\n     let frange = FileRange { file_id, range };\n \n     {\n-        let allowed = Some(vec![AssistKind::Refactor]);\n+        let mut cfg = AssistConfig::default();\n+        cfg.allowed = Some(vec![AssistKind::Refactor]);\n \n-        let assists = Assist::resolved(&db, &AssistConfig::default(), frange, allowed);\n+        let assists = Assist::resolved(&db, &cfg, frange);\n         let mut assists = assists.iter();\n \n         assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Extract into variable\");\n         assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Replace with match\");\n     }\n \n     {\n-        let allowed = Some(vec![AssistKind::RefactorExtract]);\n-        let assists = Assist::resolved(&db, &AssistConfig::default(), frange, allowed);\n+        let mut cfg = AssistConfig::default();\n+        cfg.allowed = Some(vec![AssistKind::RefactorExtract]);\n+        let assists = Assist::resolved(&db, &cfg, frange);\n         assert_eq!(assists.len(), 1);\n \n         let mut assists = assists.iter();\n         assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Extract into variable\");\n     }\n \n     {\n-        let allowed = Some(vec![AssistKind::QuickFix]);\n-        let assists = Assist::resolved(&db, &AssistConfig::default(), frange, allowed);\n+        let mut cfg = AssistConfig::default();\n+        cfg.allowed = Some(vec![AssistKind::QuickFix]);\n+        let assists = Assist::resolved(&db, &cfg, frange);\n         assert!(assists.is_empty(), \"All asserts but quickfixes should be filtered out\");\n     }\n }"}, {"sha": "6a4f5cb3db16bdf87d01ad87a13cd6f2ecedc763", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21c1504ca972d59307a065f72154e50bd32aa763/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c1504ca972d59307a065f72154e50bd32aa763/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=21c1504ca972d59307a065f72154e50bd32aa763", "patch": "@@ -476,9 +476,8 @@ impl Analysis {\n         &self,\n         config: &AssistConfig,\n         frange: FileRange,\n-        allowed: Option<Vec<AssistKind>>,\n     ) -> Cancelable<Vec<ResolvedAssist>> {\n-        self.with_db(|db| ra_assists::Assist::resolved(db, config, frange, allowed))\n+        self.with_db(|db| ra_assists::Assist::resolved(db, config, frange))\n     }\n \n     /// Computes unresolved assists (aka code actions aka intentions) for the given\n@@ -487,9 +486,8 @@ impl Analysis {\n         &self,\n         config: &AssistConfig,\n         frange: FileRange,\n-        allowed: Option<Vec<AssistKind>>,\n     ) -> Cancelable<Vec<Assist>> {\n-        self.with_db(|db| Assist::unresolved(db, config, frange, allowed))\n+        self.with_db(|db| Assist::unresolved(db, config, frange))\n     }\n \n     /// Computes the set of diagnostics for the given file."}, {"sha": "d28c700f14ed168bdbcd158b45a0636504d21fba", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/21c1504ca972d59307a065f72154e50bd32aa763/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c1504ca972d59307a065f72154e50bd32aa763/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=21c1504ca972d59307a065f72154e50bd32aa763", "patch": "@@ -790,7 +790,7 @@ fn handle_fixes(\n }\n \n pub(crate) fn handle_code_action(\n-    snap: GlobalStateSnapshot,\n+    mut snap: GlobalStateSnapshot,\n     params: lsp_types::CodeActionParams,\n ) -> Result<Option<Vec<lsp_ext::CodeAction>>> {\n     let _p = profile(\"handle_code_action\");\n@@ -806,25 +806,24 @@ pub(crate) fn handle_code_action(\n     let range = from_proto::text_range(&line_index, params.range);\n     let frange = FileRange { file_id, range };\n \n+    snap.config.assist.allowed = params\n+        .clone()\n+        .context\n+        .only\n+        .map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n+\n     let mut res: Vec<lsp_ext::CodeAction> = Vec::new();\n \n     handle_fixes(&snap, &params, &mut res)?;\n \n-    let only =\n-        params.context.only.map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n-\n     if snap.config.client_caps.resolve_code_action {\n-        for (index, assist) in snap\n-            .analysis\n-            .unresolved_assists(&snap.config.assist, frange, only)?\n-            .into_iter()\n-            .enumerate()\n+        for (index, assist) in\n+            snap.analysis.unresolved_assists(&snap.config.assist, frange)?.into_iter().enumerate()\n         {\n             res.push(to_proto::unresolved_code_action(&snap, assist, index)?);\n         }\n     } else {\n-        for assist in snap.analysis.resolved_assists(&snap.config.assist, frange, only)?.into_iter()\n-        {\n+        for assist in snap.analysis.resolved_assists(&snap.config.assist, frange)?.into_iter() {\n             res.push(to_proto::resolved_code_action(&snap, assist)?);\n         }\n     }\n@@ -833,21 +832,22 @@ pub(crate) fn handle_code_action(\n }\n \n pub(crate) fn handle_resolve_code_action(\n-    snap: GlobalStateSnapshot,\n+    mut snap: GlobalStateSnapshot,\n     params: lsp_ext::ResolveCodeActionParams,\n ) -> Result<Option<lsp_ext::SnippetWorkspaceEdit>> {\n     let _p = profile(\"handle_resolve_code_action\");\n     let file_id = from_proto::file_id(&snap, &params.code_action_params.text_document.uri)?;\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.code_action_params.range);\n     let frange = FileRange { file_id, range };\n-    let only = params\n+\n+    snap.config.assist.allowed = params\n         .code_action_params\n         .context\n         .only\n         .map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n \n-    let assists = snap.analysis.resolved_assists(&snap.config.assist, frange, only)?;\n+    let assists = snap.analysis.resolved_assists(&snap.config.assist, frange)?;\n     let (id_string, index) = split_delim(&params.id, ':').unwrap();\n     let index = index.parse::<usize>().unwrap();\n     let assist = &assists[index];"}]}