{"sha": "240d5e0f6886f1741cb67bade8629b97e8396af7", "node_id": "C_kwDOAAsO6NoAKDI0MGQ1ZTBmNjg4NmYxNzQxY2I2N2JhZGU4NjI5Yjk3ZTgzOTZhZjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-11T16:18:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-11T16:18:43Z"}, "message": "Rollup merge of #107864 - notriddle:notriddle/rustdoc-write-stutter, r=GuillaumeGomez\n\nrustdoc: clean up `write!` calls with less stuttering", "tree": {"sha": "a812091715c0261140813cac45d7dbe7531d154b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a812091715c0261140813cac45d7dbe7531d154b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/240d5e0f6886f1741cb67bade8629b97e8396af7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj57/jCRBK7hj4Ov3rIwAA0IcIAItW1jzee2onK3ObYVH5XNlT\nQ0NQPeKGXOvhrmgTf9ZSIljtnyNmr+3ttP049Xt54OIYfbIpVYssXShyk5XQpPo8\nfahs6zspzD9juKTp8iiYdfz2g5H++jFvGjKL15b7li5AqwLVKuf+19PU2G8RuIEV\nwADeZkUhj1GO5G7LlWSjxBnlNsW0lpxSN5GU5KkIeisB3Cq7pTN1Pjw7G9tigYC5\nOLcIEEmm+sXjC5cujnE04tYeNuMriOMNKePAHNPOfhhFC/xzIOaVY9pwHg3f9rfZ\ne3Kh/r2Dd6+g4pRFw6QhYHqdEp2RlM60WVs81/P633YA9fgKPbhVL8aLmHP5Yz4=\n=DhHJ\n-----END PGP SIGNATURE-----\n", "payload": "tree a812091715c0261140813cac45d7dbe7531d154b\nparent 585b458021b1c197a8fdabf3283f9d2ef2467a6d\nparent 1a98305b9d848fde0cf8052f2aba25b878e8ea5c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676132323 +0100\ncommitter GitHub <noreply@github.com> 1676132323 +0100\n\nRollup merge of #107864 - notriddle:notriddle/rustdoc-write-stutter, r=GuillaumeGomez\n\nrustdoc: clean up `write!` calls with less stuttering\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/240d5e0f6886f1741cb67bade8629b97e8396af7", "html_url": "https://github.com/rust-lang/rust/commit/240d5e0f6886f1741cb67bade8629b97e8396af7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/240d5e0f6886f1741cb67bade8629b97e8396af7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "585b458021b1c197a8fdabf3283f9d2ef2467a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/585b458021b1c197a8fdabf3283f9d2ef2467a6d", "html_url": "https://github.com/rust-lang/rust/commit/585b458021b1c197a8fdabf3283f9d2ef2467a6d"}, {"sha": "1a98305b9d848fde0cf8052f2aba25b878e8ea5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a98305b9d848fde0cf8052f2aba25b878e8ea5c", "html_url": "https://github.com/rust-lang/rust/commit/1a98305b9d848fde0cf8052f2aba25b878e8ea5c"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "d0f497321abf534aa47c4e65e70dc29effd82321", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/240d5e0f6886f1741cb67bade8629b97e8396af7/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240d5e0f6886f1741cb67bade8629b97e8396af7/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=240d5e0f6886f1741cb67bade8629b97e8396af7", "patch": "@@ -1081,10 +1081,10 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n     fn write_content(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Typedef) {\n         wrap_item(w, |w| {\n             render_attributes_in_pre(w, it, \"\");\n-            write!(w, \"{}\", visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx));\n             write!(\n                 w,\n-                \"type {}{}{where_clause} = {type_};\",\n+                \"{}type {}{}{where_clause} = {type_};\",\n+                visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx),\n                 it.name.unwrap(),\n                 t.generics.print(cx),\n                 where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n@@ -1138,13 +1138,11 @@ fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean:\n                      <a href=\\\"#{id}\\\" class=\\\"anchor field\\\">\u00a7</a>\\\n                      <code>{name}: {ty}</code>\\\n                  </span>\",\n-                id = id,\n-                name = name,\n                 shortty = ItemType::StructField,\n                 ty = ty.print(cx),\n             );\n             if let Some(stability_class) = field.stability_class(cx.tcx()) {\n-                write!(w, \"<span class=\\\"stab {stab}\\\"></span>\", stab = stability_class);\n+                write!(w, \"<span class=\\\"stab {stability_class}\\\"></span>\");\n             }\n             document(w, cx, field, Some(it), HeadingOffset::H3);\n         }\n@@ -1242,7 +1240,6 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n                 w,\n                 \"<section id=\\\"{id}\\\" class=\\\"variant\\\">\\\n                     <a href=\\\"#{id}\\\" class=\\\"anchor\\\">\u00a7</a>\",\n-                id = id,\n             );\n             render_stability_since_raw_with_extra(\n                 w,\n@@ -1280,8 +1277,11 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n             if let Some((heading, fields)) = heading_and_fields {\n                 let variant_id =\n                     cx.derive_id(format!(\"{}.{}.fields\", ItemType::Variant, variant.name.unwrap()));\n-                write!(w, \"<div class=\\\"sub-variant\\\" id=\\\"{id}\\\">\", id = variant_id);\n-                write!(w, \"<h4>{heading}</h4>\", heading = heading);\n+                write!(\n+                    w,\n+                    \"<div class=\\\"sub-variant\\\" id=\\\"{variant_id}\\\">\\\n+                        <h4>{heading}</h4>\",\n+                );\n                 document_non_exhaustive(w, variant);\n                 for field in fields {\n                     match *field.kind {\n@@ -1299,7 +1299,6 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n                                      <a href=\\\"#{id}\\\" class=\\\"anchor field\\\">\u00a7</a>\\\n                                      <code>{f}: {t}</code>\\\n                                  </span>\",\n-                                id = id,\n                                 f = field.name.unwrap(),\n                                 t = ty.print(cx)\n                             );\n@@ -1450,11 +1449,9 @@ fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n                     w,\n                     \"<span id=\\\"{id}\\\" class=\\\"{item_type} small-section-header\\\">\\\n                          <a href=\\\"#{id}\\\" class=\\\"anchor field\\\">\u00a7</a>\\\n-                         <code>{name}: {ty}</code>\\\n+                         <code>{field_name}: {ty}</code>\\\n                      </span>\",\n                     item_type = ItemType::StructField,\n-                    id = id,\n-                    name = field_name,\n                     ty = ty.print(cx)\n                 );\n                 document(w, cx, field, Some(it), HeadingOffset::H3);\n@@ -1840,8 +1837,8 @@ fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n         if layout.abi.is_unsized() {\n             write!(w, \"(unsized)\");\n         } else {\n-            let bytes = layout.size.bytes() - tag_size;\n-            write!(w, \"{size} byte{pl}\", size = bytes, pl = if bytes == 1 { \"\" } else { \"s\" },);\n+            let size = layout.size.bytes() - tag_size;\n+            write!(w, \"{size} byte{pl}\", pl = if size == 1 { \"\" } else { \"s\" },);\n         }\n     }\n \n@@ -1896,7 +1893,7 @@ fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n \n                     for (index, layout) in variants.iter_enumerated() {\n                         let name = adt.variant(index).name;\n-                        write!(w, \"<li><code>{name}</code>: \", name = name);\n+                        write!(w, \"<li><code>{name}</code>: \");\n                         write_size_of_layout(w, layout, tag_size);\n                         writeln!(w, \"</li>\");\n                     }"}]}