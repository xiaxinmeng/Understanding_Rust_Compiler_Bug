{"sha": "0dc215741b34236c310e409c437600ba0165c97c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYzIxNTc0MWIzNDIzNmMzMTBlNDA5YzQzNzYwMGJhMDE2NWM5N2M=", "commit": {"author": {"name": "Falco Hirschenberger", "email": "falco.hirschenberger@gmail.com", "date": "2014-08-05T07:59:03Z"}, "committer": {"name": "Falco Hirschenberger", "email": "falco.hirschenberger@gmail.com", "date": "2014-08-05T07:59:03Z"}, "message": "Fixes missing overflow lint for i64 #14269\n\nThe `type_overflow` lint, doesn't catch the overflow for `i64` because\nthe overflow happens earlier in the parse phase when the `u64` as biggest\npossible int gets casted to `i64` , without checking the for overflows.\nWe can't lint in the parse phase, so a refactoring of the `LitInt` type\nwas necessary.\n\nThe types `LitInt`, `LitUint` and `LitIntUnsuffixed` where merged to one\ntype `LitInt` which stores it's value as `u64`. An additional parameter was\nadded which indicate the signedness of the type and the sign of the value.", "tree": {"sha": "bfaee6d4c3d1b082fadf859cb106b5e99d458028", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfaee6d4c3d1b082fadf859cb106b5e99d458028"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dc215741b34236c310e409c437600ba0165c97c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dc215741b34236c310e409c437600ba0165c97c", "html_url": "https://github.com/rust-lang/rust/commit/0dc215741b34236c310e409c437600ba0165c97c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dc215741b34236c310e409c437600ba0165c97c/comments", "author": {"login": "hirschenberger", "id": 1053180, "node_id": "MDQ6VXNlcjEwNTMxODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1053180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hirschenberger", "html_url": "https://github.com/hirschenberger", "followers_url": "https://api.github.com/users/hirschenberger/followers", "following_url": "https://api.github.com/users/hirschenberger/following{/other_user}", "gists_url": "https://api.github.com/users/hirschenberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/hirschenberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hirschenberger/subscriptions", "organizations_url": "https://api.github.com/users/hirschenberger/orgs", "repos_url": "https://api.github.com/users/hirschenberger/repos", "events_url": "https://api.github.com/users/hirschenberger/events{/privacy}", "received_events_url": "https://api.github.com/users/hirschenberger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hirschenberger", "id": 1053180, "node_id": "MDQ6VXNlcjEwNTMxODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1053180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hirschenberger", "html_url": "https://github.com/hirschenberger", "followers_url": "https://api.github.com/users/hirschenberger/followers", "following_url": "https://api.github.com/users/hirschenberger/following{/other_user}", "gists_url": "https://api.github.com/users/hirschenberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/hirschenberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hirschenberger/subscriptions", "organizations_url": "https://api.github.com/users/hirschenberger/orgs", "repos_url": "https://api.github.com/users/hirschenberger/repos", "events_url": "https://api.github.com/users/hirschenberger/events{/privacy}", "received_events_url": "https://api.github.com/users/hirschenberger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "795f6ae829ab1bfd72394a5da9096e2717ec0f62", "url": "https://api.github.com/repos/rust-lang/rust/commits/795f6ae829ab1bfd72394a5da9096e2717ec0f62", "html_url": "https://github.com/rust-lang/rust/commit/795f6ae829ab1bfd72394a5da9096e2717ec0f62"}], "stats": {"total": 241, "additions": 142, "deletions": 99}, "files": [{"sha": "bac5b6e10135ce784f610e081b6f1e3261a1d52d", "filename": "src/libfourcc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibfourcc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibfourcc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfourcc%2Flib.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -124,7 +124,7 @@ pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n             (val << 8) | (byte as u32)\n         };\n     }\n-    let e = cx.expr_lit(sp, ast::LitUint(val as u64, ast::TyU32));\n+    let e = cx.expr_lit(sp, ast::LitInt(val as u64, ast::UnsignedIntLit(ast::TyU32)));\n     MacExpr::new(e)\n }\n "}, {"sha": "bde0992dabeef574b9bcd4d5937f1437aa5e67d0", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -135,7 +135,7 @@ impl LintPass for TypeLimits {\n                 match expr.node  {\n                     ast::ExprLit(lit) => {\n                         match lit.node {\n-                            ast::LitUint(..) => {\n+                            ast::LitInt(_, ast::UnsignedIntLit(_)) => {\n                                 cx.span_lint(UNSIGNED_NEGATE, e.span,\n                                              \"negation of unsigned int literal may \\\n                                              be unintentional\");\n@@ -177,15 +177,25 @@ impl LintPass for TypeLimits {\n                         } else { t };\n                         let (min, max) = int_ty_range(int_type);\n                         let mut lit_val: i64 = match lit.node {\n-                            ast::LitInt(v, _) => v,\n-                            ast::LitUint(v, _) => v as i64,\n-                            ast::LitIntUnsuffixed(v) => v,\n+                            ast::LitInt(v, ast::SignedIntLit(_, ast::Plus)) |\n+                            ast::LitInt(v, ast::UnsuffixedIntLit(ast::Plus)) => {\n+                                if v > i64::MAX as u64{\n+                                    cx.span_lint(TYPE_OVERFLOW, e.span,\n+                                                 \"literal out of range for its type\");\n+                                    return;\n+                                }\n+                                v as i64\n+                            }\n+                            ast::LitInt(v, ast::SignedIntLit(_, ast::Minus)) |\n+                            ast::LitInt(v, ast::UnsuffixedIntLit(ast::Minus)) => {\n+                                -(v as i64)\n+                            }\n                             _ => fail!()\n                         };\n                         if self.negated_expr_id == e.id {\n                             lit_val *= -1;\n                         }\n-                        if  lit_val < min || lit_val > max {\n+                        if lit_val < min || lit_val > max {\n                             cx.span_lint(TYPE_OVERFLOW, e.span,\n                                          \"literal out of range for its type\");\n                         }\n@@ -197,9 +207,7 @@ impl LintPass for TypeLimits {\n                         let (min, max) = uint_ty_range(uint_type);\n                         let lit_val: u64 = match lit.node {\n                             ast::LitByte(_v) => return,  // _v is u8, within range by definition\n-                            ast::LitInt(v, _) => v as u64,\n-                            ast::LitUint(v, _) => v,\n-                            ast::LitIntUnsuffixed(v) => v as u64,\n+                            ast::LitInt(v, _) => v,\n                             _ => fail!()\n                         };\n                         if  lit_val < min || lit_val > max {\n@@ -294,9 +302,10 @@ impl LintPass for TypeLimits {\n                     let (min, max) = int_ty_range(int_ty);\n                     let lit_val: i64 = match lit.node {\n                         ast::ExprLit(li) => match li.node {\n-                            ast::LitInt(v, _) => v,\n-                            ast::LitUint(v, _) => v as i64,\n-                            ast::LitIntUnsuffixed(v) => v,\n+                            ast::LitInt(v, ast::SignedIntLit(_, ast::Plus)) |\n+                            ast::LitInt(v, ast::UnsuffixedIntLit(ast::Plus)) => v as i64,\n+                            ast::LitInt(v, ast::SignedIntLit(_, ast::Minus)) |\n+                            ast::LitInt(v, ast::UnsuffixedIntLit(ast::Minus)) => -(v as i64),\n                             _ => return true\n                         },\n                         _ => fail!()\n@@ -307,9 +316,7 @@ impl LintPass for TypeLimits {\n                     let (min, max): (u64, u64) = uint_ty_range(uint_ty);\n                     let lit_val: u64 = match lit.node {\n                         ast::ExprLit(li) => match li.node {\n-                            ast::LitInt(v, _) => v as u64,\n-                            ast::LitUint(v, _) => v,\n-                            ast::LitIntUnsuffixed(v) => v as u64,\n+                            ast::LitInt(v, _) => v,\n                             _ => return true\n                         },\n                         _ => fail!()"}, {"sha": "0b149f5b92e4035ccf77a962f8e97487fa9bf981", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -560,10 +560,13 @@ pub fn lit_to_const(lit: &Lit) -> const_val {\n         }\n         LitByte(n) => const_uint(n as u64),\n         LitChar(n) => const_uint(n as u64),\n-        LitInt(n, _) => const_int(n),\n-        LitUint(n, _) => const_uint(n),\n-        LitIntUnsuffixed(n) => const_int(n),\n-        LitFloat(ref n, _) | LitFloatUnsuffixed(ref n) => {\n+        LitInt(n, ast::SignedIntLit(_, ast::Plus)) |\n+        LitInt(n, ast::UnsuffixedIntLit(ast::Plus)) => const_int(n as i64),\n+        LitInt(n, ast::SignedIntLit(_, ast::Minus)) |\n+        LitInt(n, ast::UnsuffixedIntLit(ast::Minus)) => const_int(-(n as i64)),\n+        LitInt(n, ast::UnsignedIntLit(_)) => const_uint(n),\n+        LitFloat(ref n, _) |\n+        LitFloatUnsuffixed(ref n) => {\n             const_float(from_str::<f64>(n.get()).unwrap() as f64)\n         }\n         LitNil => const_nil,"}, {"sha": "07f0dbaf73fc0d3a925a4ee83120cdab1de3f7c0", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -47,9 +47,13 @@ pub fn const_lit(cx: &CrateContext, e: &ast::Expr, lit: ast::Lit)\n     match lit.node {\n         ast::LitByte(b) => C_integral(Type::uint_from_ty(cx, ast::TyU8), b as u64, false),\n         ast::LitChar(i) => C_integral(Type::char(cx), i as u64, false),\n-        ast::LitInt(i, t) => C_integral(Type::int_from_ty(cx, t), i as u64, true),\n-        ast::LitUint(u, t) => C_integral(Type::uint_from_ty(cx, t), u, false),\n-        ast::LitIntUnsuffixed(i) => {\n+        ast::LitInt(i, ast::SignedIntLit(t, _)) => {\n+            C_integral(Type::int_from_ty(cx, t), i, true)\n+        }\n+        ast::LitInt(u, ast::UnsignedIntLit(t)) => {\n+            C_integral(Type::uint_from_ty(cx, t), u, false)\n+        }\n+        ast::LitInt(i, ast::UnsuffixedIntLit(_)) => {\n             let lit_int_ty = ty::node_id_to_type(cx.tcx(), e.id);\n             match ty::get(lit_int_ty).sty {\n                 ty::ty_int(t) => {"}, {"sha": "787a4bebc559bd65af2552f5dd76d07958719020", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -2057,9 +2057,9 @@ fn check_lit(fcx: &FnCtxt,\n         }\n         ast::LitByte(_) => ty::mk_u8(),\n         ast::LitChar(_) => ty::mk_char(),\n-        ast::LitInt(_, t) => ty::mk_mach_int(t),\n-        ast::LitUint(_, t) => ty::mk_mach_uint(t),\n-        ast::LitIntUnsuffixed(_) => {\n+        ast::LitInt(_, ast::SignedIntLit(t, _)) => ty::mk_mach_int(t),\n+        ast::LitInt(_, ast::UnsignedIntLit(t)) => ty::mk_mach_uint(t),\n+        ast::LitInt(_, ast::UnsuffixedIntLit(_)) => {\n             let opt_ty = expected.map_to_option(fcx, |sty| {\n                 match *sty {\n                     ty::ty_int(i) => Some(ty::mk_mach_int(i)),"}, {"sha": "7eecae84d1d6f2312af2fb354d4b6750a2a44633", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -1947,8 +1947,6 @@ fn lit_to_string(lit: &ast::Lit) -> String {\n         },\n         ast::LitChar(c) => format!(\"'{}'\", c),\n         ast::LitInt(i, _t) => i.to_string(),\n-        ast::LitUint(u, _t) => u.to_string(),\n-        ast::LitIntUnsuffixed(i) => i.to_string(),\n         ast::LitFloat(ref f, _t) => f.get().to_string(),\n         ast::LitFloatUnsuffixed(ref f) => f.get().to_string(),\n         ast::LitBool(b) => b.to_string(),"}, {"sha": "19882fecaa90010043249a04619f8d749d32de61", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -18,6 +18,7 @@ use parse::token::{InternedString, str_to_ident};\n use parse::token;\n \n use std::fmt;\n+use std::num::Zero;\n use std::fmt::Show;\n use std::option::Option;\n use std::rc::Rc;\n@@ -656,15 +657,46 @@ pub enum StrStyle {\n \n pub type Lit = Spanned<Lit_>;\n \n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+pub enum Sign {\n+    Minus,\n+    Plus\n+}\n+\n+impl<T: PartialOrd+Zero> Sign {\n+    pub fn new(n: T) -> Sign {\n+        if n < Zero::zero() {\n+            Minus\n+        } else {\n+            Plus\n+        }\n+    }\n+}\n+\n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+pub enum LitIntType {\n+    SignedIntLit(IntTy, Sign),\n+    UnsignedIntLit(UintTy),\n+    UnsuffixedIntLit(Sign)\n+}\n+\n+impl LitIntType {\n+    pub fn suffix_len(&self) -> uint {\n+        match *self {\n+            UnsuffixedIntLit(_) => 0,\n+            SignedIntLit(s, _) => s.suffix_len(),\n+            UnsignedIntLit(u) => u.suffix_len()\n+        }\n+    }\n+}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Lit_ {\n     LitStr(InternedString, StrStyle),\n     LitBinary(Rc<Vec<u8> >),\n     LitByte(u8),\n     LitChar(char),\n-    LitInt(i64, IntTy),\n-    LitUint(u64, UintTy),\n-    LitIntUnsuffixed(i64),\n+    LitInt(u64, LitIntType),\n     LitFloat(InternedString, FloatTy),\n     LitFloatUnsuffixed(InternedString),\n     LitNil,"}, {"sha": "5acb84cf852984bfcae967e185448fdfc6fdf25f", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -626,13 +626,13 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(sp, ast::ExprLit(box(GC) respan(sp, lit)))\n     }\n     fn expr_uint(&self, span: Span, i: uint) -> Gc<ast::Expr> {\n-        self.expr_lit(span, ast::LitUint(i as u64, ast::TyU))\n+        self.expr_lit(span, ast::LitInt(i as u64, ast::UnsignedIntLit(ast::TyU)))\n     }\n     fn expr_int(&self, sp: Span, i: int) -> Gc<ast::Expr> {\n-        self.expr_lit(sp, ast::LitInt(i as i64, ast::TyI))\n+        self.expr_lit(sp, ast::LitInt(i as u64, ast::SignedIntLit(ast::TyI, ast::Sign::new(i))))\n     }\n     fn expr_u8(&self, sp: Span, u: u8) -> Gc<ast::Expr> {\n-        self.expr_lit(sp, ast::LitUint(u as u64, ast::TyU8))\n+        self.expr_lit(sp, ast::LitInt(u as u64, ast::UnsignedIntLit(ast::TyU8)))\n     }\n     fn expr_bool(&self, sp: Span, value: bool) -> Gc<ast::Expr> {\n         self.expr_lit(sp, ast::LitBool(value))"}, {"sha": "6ea55096348548a5876cb2037f3c968e10b780ab", "filename": "src/libsyntax/ext/bytes.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fext%2Fbytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fext%2Fbytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbytes.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -47,7 +47,7 @@ pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                 }\n \n                 // u8 literal, push to vector expression\n-                ast::LitUint(v, ast::TyU8) => {\n+                ast::LitInt(v, ast::UnsignedIntLit(ast::TyU8)) => {\n                     if v > 0xFF {\n                         cx.span_err(expr.span, \"too large u8 literal in bytes!\");\n                         err = true;\n@@ -57,13 +57,14 @@ pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                 }\n \n                 // integer literal, push to vector expression\n-                ast::LitIntUnsuffixed(v) => {\n+                ast::LitInt(_, ast::UnsuffixedIntLit(ast::Minus)) => {\n+                    cx.span_err(expr.span, \"negative integer literal in bytes!\");\n+                    err = true;\n+                }\n+                ast::LitInt(v, ast::UnsuffixedIntLit(ast::Plus)) => {\n                     if v > 0xFF {\n                         cx.span_err(expr.span, \"too large integer literal in bytes!\");\n                         err = true;\n-                    } else if v < 0 {\n-                        cx.span_err(expr.span, \"negative integer literal in bytes!\");\n-                        err = true;\n                     } else {\n                         bytes.push(cx.expr_u8(expr.span, v as u8));\n                     }"}, {"sha": "dd1153bf66667dd6999d602eaf11d7a0c6e47a8d", "filename": "src/libsyntax/ext/concat.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -37,11 +37,14 @@ pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n                     ast::LitChar(c) => {\n                         accumulator.push_char(c);\n                     }\n-                    ast::LitInt(i, _) | ast::LitIntUnsuffixed(i) => {\n+                    ast::LitInt(i, ast::UnsignedIntLit(_)) |\n+                    ast::LitInt(i, ast::SignedIntLit(_, ast::Plus)) |\n+                    ast::LitInt(i, ast::UnsuffixedIntLit(ast::Plus)) => {\n                         accumulator.push_str(format!(\"{}\", i).as_slice());\n                     }\n-                    ast::LitUint(u, _) => {\n-                        accumulator.push_str(format!(\"{}\", u).as_slice());\n+                    ast::LitInt(i, ast::SignedIntLit(_, ast::Minus)) |\n+                    ast::LitInt(i, ast::UnsuffixedIntLit(ast::Minus)) => {\n+                        accumulator.push_str(format!(\"-{}\", i).as_slice());\n                     }\n                     ast::LitNil => {}\n                     ast::LitBool(b) => {"}, {"sha": "9225e4414c40e2126cc7402cb5dac6b363974fef", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -996,7 +996,7 @@ impl<'a> MethodDef<'a> {\n             let arms : Vec<ast::Arm> = variants.iter().enumerate()\n                 .map(|(index, &variant)| {\n                     let pat = variant_to_pat(cx, sp, &*variant);\n-                    let lit = ast::LitUint(index as u64, ast::TyU);\n+                    let lit = ast::LitInt(index as u64, ast::UnsignedIntLit(ast::TyU));\n                     cx.arm(sp, vec![pat], cx.expr_lit(sp, lit))\n                 }).collect();\n "}, {"sha": "cc07b5312589f84b05c314014f2e441397a372c2", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -189,16 +189,17 @@ pub mod rt {\n         (signed, $t:ty, $tag:ident) => (\n             impl ToSource for $t {\n                 fn to_source(&self) -> String {\n-                    let lit = dummy_spanned(ast::LitInt(*self as i64, ast::$tag));\n-                    pprust::lit_to_string(&lit)\n+                    let lit = ast::LitInt(*self as u64, ast::SignedIntLit(ast::$tag,\n+                                                                          ast::Sign::new(*self)));\n+                    pprust::lit_to_string(&dummy_spanned(lit))\n                 }\n             }\n         );\n         (unsigned, $t:ty, $tag:ident) => (\n             impl ToSource for $t {\n                 fn to_source(&self) -> String {\n-                    let lit = dummy_spanned(ast::LitUint(*self as u64, ast::$tag));\n-                    pprust::lit_to_string(&lit)\n+                    let lit = ast::LitInt(*self as u64, ast::UnsignedIntLit(ast::$tag));\n+                    pprust::lit_to_string(&dummy_spanned(lit))\n                 }\n             }\n         );"}, {"sha": "8f960e37de2e74f062c2f20f8b7df32353a277d9", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 20, "deletions": 37, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -515,31 +515,13 @@ pub fn integer_lit(s: &str, sd: &SpanHandler, sp: Span) -> ast::Lit_ {\n     debug!(\"parse_integer_lit: {}\", s);\n \n     if s.len() == 1 {\n-        return ast::LitIntUnsuffixed((s.char_at(0)).to_digit(10).unwrap() as i64);\n+        let n = (s.char_at(0)).to_digit(10).unwrap();\n+        return ast::LitInt(n as u64, ast::UnsuffixedIntLit(ast::Sign::new(n)));\n     }\n \n     let mut base = 10;\n     let orig = s;\n-\n-    #[deriving(Show)]\n-    enum Result {\n-        Nothing,\n-        Signed(ast::IntTy),\n-        Unsigned(ast::UintTy)\n-    }\n-\n-    impl Result {\n-        fn suffix_len(&self) -> uint {\n-            match *self {\n-                Nothing => 0,\n-                Signed(s) => s.suffix_len(),\n-                Unsigned(u) => u.suffix_len()\n-            }\n-        }\n-    }\n-\n-    let mut ty = Nothing;\n-\n+    let mut ty = ast::UnsuffixedIntLit(ast::Plus);\n \n     if s.char_at(0) == '0' {\n         match s.char_at(1) {\n@@ -556,62 +538,63 @@ pub fn integer_lit(s: &str, sd: &SpanHandler, sp: Span) -> ast::Lit_ {\n \n     let last = s.len() - 1;\n     match s.char_at(last) {\n-        'i' => ty = Signed(ast::TyI),\n-        'u' => ty = Unsigned(ast::TyU),\n+        'i' => ty = ast::SignedIntLit(ast::TyI, ast::Plus),\n+        'u' => ty = ast::UnsignedIntLit(ast::TyU),\n         '8' => {\n             if s.len() > 2 {\n                 match s.char_at(last - 1) {\n-                    'i' => ty = Signed(ast::TyI8),\n-                    'u' => ty = Unsigned(ast::TyU8),\n+                    'i' => ty = ast::SignedIntLit(ast::TyI8, ast::Plus),\n+                    'u' => ty = ast::UnsignedIntLit(ast::TyU8),\n                     _ => { }\n                 }\n             }\n         },\n         '6' => {\n             if s.len() > 3 && s.char_at(last - 1) == '1' {\n                 match s.char_at(last - 2) {\n-                    'i' => ty = Signed(ast::TyI16),\n-                    'u' => ty = Unsigned(ast::TyU16),\n+                    'i' => ty = ast::SignedIntLit(ast::TyI16, ast::Plus),\n+                    'u' => ty = ast::UnsignedIntLit(ast::TyU16),\n                     _ => { }\n                 }\n             }\n         },\n         '2' => {\n             if s.len() > 3 && s.char_at(last - 1) == '3' {\n                 match s.char_at(last - 2) {\n-                    'i' => ty = Signed(ast::TyI32),\n-                    'u' => ty = Unsigned(ast::TyU32),\n+                    'i' => ty = ast::SignedIntLit(ast::TyI32, ast::Plus),\n+                    'u' => ty = ast::UnsignedIntLit(ast::TyU32),\n                     _ => { }\n                 }\n             }\n         },\n         '4' => {\n             if s.len() > 3 && s.char_at(last - 1) == '6' {\n                 match s.char_at(last - 2) {\n-                    'i' => ty = Signed(ast::TyI64),\n-                    'u' => ty = Unsigned(ast::TyU64),\n+                    'i' => ty = ast::SignedIntLit(ast::TyI64, ast::Plus),\n+                    'u' => ty = ast::UnsignedIntLit(ast::TyU64),\n                     _ => { }\n                 }\n             }\n         },\n         _ => { }\n     }\n \n-\n-    s = s.slice_to(s.len() - ty.suffix_len());\n-\n     debug!(\"The suffix is {}, base {}, the new string is {}, the original \\\n            string was {}\", ty, base, s, orig);\n \n+    s = s.slice_to(s.len() - ty.suffix_len());\n+\n     let res: u64 = match ::std::num::from_str_radix(s, base) {\n         Some(r) => r,\n         None => { sd.span_err(sp, \"int literal is too large\"); 0 }\n     };\n \n+    // adjust the sign\n+    let sign = ast::Sign::new(res);\n     match ty {\n-        Nothing => ast::LitIntUnsuffixed(res as i64),\n-        Signed(t) => ast::LitInt(res as i64, t),\n-        Unsigned(t) => ast::LitUint(res, t)\n+        ast::SignedIntLit(t, _) => ast::LitInt(res, ast::SignedIntLit(t, sign)),\n+        ast::UnsuffixedIntLit(_) => ast::LitInt(res, ast::UnsuffixedIntLit(sign)),\n+        us@ast::UnsignedIntLit(_) => ast::LitInt(res, us)\n     }\n }\n "}, {"sha": "18b1d60d4e98bbfb8d07d1987b232037d7ef267a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -34,7 +34,7 @@ use ast::{Ident, NormalFn, Inherited, Item, Item_, ItemStatic};\n use ast::{ItemEnum, ItemFn, ItemForeignMod, ItemImpl};\n use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy, Lit, Lit_};\n use ast::{LitBool, LitChar, LitByte, LitBinary};\n-use ast::{LitNil, LitStr, LitUint, Local, LocalLet};\n+use ast::{LitNil, LitStr, LitInt, Local, LocalLet};\n use ast::{MutImmutable, MutMutable, Mac_, MacInvocTT, Matcher, MatchNonterminal};\n use ast::{MatchSeq, MatchTok, Method, MutTy, BiMul, Mutability};\n use ast::{NamedField, UnNeg, NoReturn, UnNot, P, Pat, PatEnum};\n@@ -1889,7 +1889,7 @@ impl<'a> Parser<'a> {\n     pub fn mk_lit_u32(&mut self, i: u32) -> Gc<Expr> {\n         let span = &self.span;\n         let lv_lit = box(GC) codemap::Spanned {\n-            node: LitUint(i as u64, TyU32),\n+            node: LitInt(i as u64, ast::UnsignedIntLit(TyU32)),\n             span: *span\n         };\n "}, {"sha": "095dca66164d2aa58430462b7ddf4c2c50eebc9d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -2415,15 +2415,25 @@ impl<'a> State<'a> {\n                 word(&mut self.s, res.as_slice())\n             }\n             ast::LitInt(i, t) => {\n-                word(&mut self.s,\n-                     ast_util::int_ty_to_string(t, Some(i)).as_slice())\n-            }\n-            ast::LitUint(u, t) => {\n-                word(&mut self.s,\n-                     ast_util::uint_ty_to_string(t, Some(u)).as_slice())\n-            }\n-            ast::LitIntUnsuffixed(i) => {\n-                word(&mut self.s, format!(\"{}\", i).as_slice())\n+                match t {\n+                    ast::SignedIntLit(st, ast::Plus) => {\n+                        word(&mut self.s,\n+                             ast_util::int_ty_to_string(st, Some(i as i64)).as_slice())\n+                    }\n+                    ast::SignedIntLit(st, ast::Minus) => {\n+                        word(&mut self.s,\n+                             ast_util::int_ty_to_string(st, Some(-(i as i64))).as_slice())\n+                    }\n+                    ast::UnsignedIntLit(ut) => {\n+                        word(&mut self.s, ast_util::uint_ty_to_string(ut, Some(i)).as_slice())\n+                    }\n+                    ast::UnsuffixedIntLit(ast::Plus) => {\n+                        word(&mut self.s, format!(\"{}\", i).as_slice())\n+                    }\n+                    ast::UnsuffixedIntLit(ast::Minus) => {\n+                        word(&mut self.s, format!(\"-{}\", i).as_slice())\n+                    }\n+                }\n             }\n             ast::LitFloat(ref f, t) => {\n                 word(&mut self.s,"}, {"sha": "c8179c3adb039c122bc8b3d6eae53e71f518f39e", "filename": "src/test/compile-fail/lint-type-overflow.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -48,6 +48,9 @@ fn main() {\n     let x: i32 = -2147483649; //~ error: literal out of range for its type\n     let x = -2147483649_i32; //~ error: literal out of range for its type\n \n+    let x = 9223372036854775808_i64; //~ error: literal out of range for its type\n+    let x = 18446744073709551615_i64; //~ error: literal out of range for its type\n+\n     let x = -3.40282348e+38_f32; //~ error: literal out of range for its type\n     let x =  3.40282348e+38_f32; //~ error: literal out of range for its type\n     let x = -1.7976931348623159e+308_f64; //~ error: literal out of range for its type"}, {"sha": "5416bcacf3d5924887146305c759a9ac39f313b1", "filename": "src/test/compile-fail/oversized-literal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -D type-overflow\n-\n-fn main() { println!(\"{}\", 300u8); } //~ error: literal out of range for its type\n+fn main() {\n+    println!(\"{}\", 18446744073709551616u64);  //~ error: int literal is too large\n+}"}, {"sha": "8afb33c7669f542158e198b0a0759ae41987cc83", "filename": "src/test/run-pass/big-literals.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc215741b34236c310e409c437600ba0165c97c/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc215741b34236c310e409c437600ba0165c97c/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbig-literals.rs?ref=0dc215741b34236c310e409c437600ba0165c97c", "patch": "@@ -15,6 +15,4 @@ pub fn main() {\n     assert_eq!(18446744073709551615u64, (-1 as u64));\n \n     assert_eq!(-2147483648i32 - 1i32, 2147483647i32);\n-    assert_eq!(-9223372036854775808i64 - 1i64, 9223372036854775807i64);\n-    assert_eq!(-9223372036854775808i - 1, 9223372036854775807);\n }"}]}