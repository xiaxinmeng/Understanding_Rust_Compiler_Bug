{"sha": "2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "node_id": "C_kwDOAAsO6NoAKDJkNWEyMWY2M2M5OGY4YTFkNWYzYzNhZjkzYmNiMGE4YWYxOWFmMzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-08T13:22:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-08T13:22:07Z"}, "message": "Auto merge of #95772 - flip1995:clippyup, r=Manishearth,flip1995\n\nUpdate Clippy\n\nr? `@Manishearth`", "tree": {"sha": "549aa15ff7710746e0b6146ca72f622c578de7d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/549aa15ff7710746e0b6146ca72f622c578de7d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "html_url": "https://github.com/rust-lang/rust/commit/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "html_url": "https://github.com/rust-lang/rust/commit/e4f5b15b8832334eca2c0bd3929eb3969f1d166d"}, {"sha": "b590d5cc9f1f7a0b0f3678a9649a94a2feb35f57", "url": "https://api.github.com/repos/rust-lang/rust/commits/b590d5cc9f1f7a0b0f3678a9649a94a2feb35f57", "html_url": "https://github.com/rust-lang/rust/commit/b590d5cc9f1f7a0b0f3678a9649a94a2feb35f57"}], "stats": {"total": 4610, "additions": 3117, "deletions": 1493}, "files": [{"sha": "c83763be3d893bb190b5f9478983dc87c8f8772d", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -613,9 +613,8 @@ dependencies = [\n \n [[package]]\n name = \"clippy\"\n-version = \"0.1.61\"\n+version = \"0.1.62\"\n dependencies = [\n- \"cargo_metadata\",\n  \"clippy_lints\",\n  \"clippy_utils\",\n  \"compiletest_rs\",\n@@ -642,20 +641,18 @@ dependencies = [\n name = \"clippy_dev\"\n version = \"0.0.1\"\n dependencies = [\n- \"bytecount\",\n- \"cargo_metadata\",\n  \"clap 2.34.0\",\n  \"indoc\",\n  \"itertools\",\n  \"opener\",\n- \"regex\",\n  \"shell-escape\",\n+ \"tempfile\",\n  \"walkdir\",\n ]\n \n [[package]]\n name = \"clippy_lints\"\n-version = \"0.1.61\"\n+version = \"0.1.62\"\n dependencies = [\n  \"cargo_metadata\",\n  \"clippy_utils\",\n@@ -676,7 +673,7 @@ dependencies = [\n \n [[package]]\n name = \"clippy_utils\"\n-version = \"0.1.61\"\n+version = \"0.1.62\"\n dependencies = [\n  \"arrayvec\",\n  \"if_chain\","}, {"sha": "b4097ea86a5185ce492067bad0ffb086733ad4c1", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 142, "deletions": 4, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -6,11 +6,143 @@ document.\n \n ## Unreleased / In Rust Nightly\n \n-[0eff589...master](https://github.com/rust-lang/rust-clippy/compare/0eff589...master)\n+[57b3c4b...master](https://github.com/rust-lang/rust-clippy/compare/57b3c4b...master)\n \n-## Rust 1.59 (beta)\n+## Rust 1.60\n \n-Current beta, release 2022-02-24\n+Current stable, released 2022-04-07\n+\n+[0eff589...57b3c4b](https://github.com/rust-lang/rust-clippy/compare/0eff589...57b3c4b)\n+\n+### New Lints\n+\n+* [`single_char_lifetime_names`]\n+  [#8236](https://github.com/rust-lang/rust-clippy/pull/8236)\n+* [`iter_overeager_cloned`]\n+  [#8203](https://github.com/rust-lang/rust-clippy/pull/8203)\n+* [`transmute_undefined_repr`]\n+  [#8398](https://github.com/rust-lang/rust-clippy/pull/8398)\n+* [`default_union_representation`]\n+  [#8289](https://github.com/rust-lang/rust-clippy/pull/8289)\n+* [`manual_bits`]\n+  [#8213](https://github.com/rust-lang/rust-clippy/pull/8213)\n+* [`borrow_as_ptr`]\n+  [#8210](https://github.com/rust-lang/rust-clippy/pull/8210)\n+\n+### Moves and Deprecations\n+\n+* Moved [`disallowed_methods`] and [`disallowed_types`] to `style` (now warn-by-default)\n+  [#8261](https://github.com/rust-lang/rust-clippy/pull/8261)\n+* Rename `ref_in_deref` to [`needless_borrow`]\n+  [#8217](https://github.com/rust-lang/rust-clippy/pull/8217)\n+* Moved [`mutex_atomic`] to `nursery` (now allow-by-default)\n+  [#8260](https://github.com/rust-lang/rust-clippy/pull/8260)\n+\n+### Enhancements\n+\n+* [`ptr_arg`]: Now takes the argument usage into account and lints for mutable references\n+  [#8271](https://github.com/rust-lang/rust-clippy/pull/8271)\n+* [`unused_io_amount`]: Now supports async read and write traits\n+  [#8179](https://github.com/rust-lang/rust-clippy/pull/8179)\n+* [`while_let_on_iterator`]: Improved detection to catch more cases\n+  [#8221](https://github.com/rust-lang/rust-clippy/pull/8221)\n+* [`trait_duplication_in_bounds`]: Now covers trait functions with `Self` bounds\n+  [#8252](https://github.com/rust-lang/rust-clippy/pull/8252)\n+* [`unwrap_used`]: Now works for `.get(i).unwrap()` and `.get_mut(i).unwrap()`\n+  [#8372](https://github.com/rust-lang/rust-clippy/pull/8372)\n+* [`map_clone`]: The suggestion takes `msrv` into account\n+  [#8280](https://github.com/rust-lang/rust-clippy/pull/8280)\n+* [`manual_bits`] and [`borrow_as_ptr`]: Now track the `clippy::msrv` attribute\n+  [#8280](https://github.com/rust-lang/rust-clippy/pull/8280)\n+* [`disallowed_methods`]: Now works for methods on primitive types\n+  [#8112](https://github.com/rust-lang/rust-clippy/pull/8112)\n+* [`not_unsafe_ptr_arg_deref`]: Now works for type aliases\n+  [#8273](https://github.com/rust-lang/rust-clippy/pull/8273)\n+* [`needless_question_mark`]: Now works for async functions\n+  [#8311](https://github.com/rust-lang/rust-clippy/pull/8311)\n+* [`iter_not_returning_iterator`]: Now handles type projections\n+  [#8228](https://github.com/rust-lang/rust-clippy/pull/8228)\n+* [`wrong_self_convention`]: Now detects wrong `self` references in more cases\n+  [#8208](https://github.com/rust-lang/rust-clippy/pull/8208)\n+* [`single_match`]: Now works for `match` statements with tuples\n+  [#8322](https://github.com/rust-lang/rust-clippy/pull/8322)\n+\n+### False Positive Fixes\n+\n+* [`erasing_op`]: No longer triggers if the output type changes\n+  [#8204](https://github.com/rust-lang/rust-clippy/pull/8204)\n+* [`if_same_then_else`]: No longer triggers for `if let` statements\n+  [#8297](https://github.com/rust-lang/rust-clippy/pull/8297)\n+* [`manual_memcpy`]: No longer lints on `VecDeque`\n+  [#8226](https://github.com/rust-lang/rust-clippy/pull/8226)\n+* [`trait_duplication_in_bounds`]: Now takes path segments into account\n+  [#8315](https://github.com/rust-lang/rust-clippy/pull/8315)\n+* [`deref_addrof`]: No longer lints when the dereference or borrow occurs in different a context\n+  [#8268](https://github.com/rust-lang/rust-clippy/pull/8268)\n+* [`type_repetition_in_bounds`]: Now checks for full equality to prevent false positives\n+  [#8224](https://github.com/rust-lang/rust-clippy/pull/8224)\n+* [`ptr_arg`]: No longer lint for mutable references in traits\n+  [#8369](https://github.com/rust-lang/rust-clippy/pull/8369)\n+* [`implicit_clone`]: No longer lints for double references\n+  [#8231](https://github.com/rust-lang/rust-clippy/pull/8231)\n+* [`needless_lifetimes`]: No longer lints lifetimes for explicit `self` types\n+  [#8278](https://github.com/rust-lang/rust-clippy/pull/8278)\n+* [`op_ref`]: No longer lints in `BinOp` impl if that can cause recursion\n+  [#8298](https://github.com/rust-lang/rust-clippy/pull/8298)\n+* [`enum_variant_names`]: No longer triggers for empty variant names\n+  [#8329](https://github.com/rust-lang/rust-clippy/pull/8329)\n+* [`redundant_closure`]: No longer lints for `Arc<T>` or `Rc<T>`\n+  [#8193](https://github.com/rust-lang/rust-clippy/pull/8193)\n+* [`iter_not_returning_iterator`]: No longer lints on trait implementations but therefore on trait definitions\n+  [#8228](https://github.com/rust-lang/rust-clippy/pull/8228)\n+* [`single_match`]: No longer lints on exhaustive enum patterns without a wildcard\n+  [#8322](https://github.com/rust-lang/rust-clippy/pull/8322)\n+* [`manual_swap`]: No longer lints on cases that involve automatic dereferences\n+  [#8220](https://github.com/rust-lang/rust-clippy/pull/8220)\n+* [`useless_format`]: Now works for implicit named arguments\n+  [#8295](https://github.com/rust-lang/rust-clippy/pull/8295)\n+\n+### Suggestion Fixes/Improvements\n+\n+* [`needless_borrow`]: Prevent mutable borrows being moved and suggest removing the borrow on method calls\n+  [#8217](https://github.com/rust-lang/rust-clippy/pull/8217)\n+* [`chars_next_cmp`]: Correctly excapes the suggestion\n+  [#8376](https://github.com/rust-lang/rust-clippy/pull/8376)\n+* [`explicit_write`]: Add suggestions for `write!`s with format arguments\n+  [#8365](https://github.com/rust-lang/rust-clippy/pull/8365)\n+* [`manual_memcpy`]: Suggests `copy_from_slice` when applicable\n+  [#8226](https://github.com/rust-lang/rust-clippy/pull/8226)\n+* [`or_fun_call`]: Improved suggestion display for long arguments\n+  [#8292](https://github.com/rust-lang/rust-clippy/pull/8292)\n+* [`unnecessary_cast`]: Now correctly includes the sign\n+  [#8350](https://github.com/rust-lang/rust-clippy/pull/8350)\n+* [`cmp_owned`]: No longer flips the comparison order\n+  [#8299](https://github.com/rust-lang/rust-clippy/pull/8299)\n+* [`explicit_counter_loop`]: Now correctly suggests `iter()` on references\n+  [#8382](https://github.com/rust-lang/rust-clippy/pull/8382)\n+\n+### ICE Fixes\n+\n+* [`manual_split_once`]\n+  [#8250](https://github.com/rust-lang/rust-clippy/pull/8250)\n+\n+### Documentation Improvements\n+\n+* [`map_flatten`]: Add documentation for the `Option` type\n+  [#8354](https://github.com/rust-lang/rust-clippy/pull/8354)\n+* Document that Clippy's driver might use a different code generation than rustc\n+  [#8037](https://github.com/rust-lang/rust-clippy/pull/8037)\n+* Clippy's lint list will now automatically focus the search box\n+  [#8343](https://github.com/rust-lang/rust-clippy/pull/8343)\n+\n+### Others\n+\n+* Clippy now warns if we find multiple Clippy config files exist\n+  [#8326](https://github.com/rust-lang/rust-clippy/pull/8326)\n+\n+## Rust 1.59\n+\n+Released 2022-02-24\n \n [e181011...0eff589](https://github.com/rust-lang/rust-clippy/compare/e181011...0eff589)\n \n@@ -174,7 +306,7 @@ Current beta, release 2022-02-24\n \n ## Rust 1.58\n \n-Current stable, released 2022-01-13\n+Released 2022-01-13\n \n [00e31fa...e181011](https://github.com/rust-lang/rust-clippy/compare/00e31fa...e181011)\n \n@@ -3069,6 +3201,7 @@ Released 2018-09-13\n [`bytes_nth`]: https://rust-lang.github.io/rust-clippy/master/index.html#bytes_nth\n [`cargo_common_metadata`]: https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata\n [`case_sensitive_file_extension_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#case_sensitive_file_extension_comparisons\n+[`cast_abs_to_unsigned`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_abs_to_unsigned\n [`cast_enum_constructor`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_enum_constructor\n [`cast_enum_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_enum_truncation\n [`cast_lossless`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless\n@@ -3097,6 +3230,7 @@ Released 2018-09-13\n [`comparison_chain`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\n [`comparison_to_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_to_empty\n [`copy_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#copy_iterator\n+[`crate_in_macro_def`]: https://rust-lang.github.io/rust-clippy/master/index.html#crate_in_macro_def\n [`create_dir`]: https://rust-lang.github.io/rust-clippy/master/index.html#create_dir\n [`crosspointer_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#crosspointer_transmute\n [`dbg_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#dbg_macro\n@@ -3123,19 +3257,22 @@ Released 2018-09-13\n [`double_neg`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_neg\n [`double_parens`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_parens\n [`drop_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#drop_copy\n+[`drop_non_drop`]: https://rust-lang.github.io/rust-clippy/master/index.html#drop_non_drop\n [`drop_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#drop_ref\n [`duplicate_underscore_argument`]: https://rust-lang.github.io/rust-clippy/master/index.html#duplicate_underscore_argument\n [`duration_subsec`]: https://rust-lang.github.io/rust-clippy/master/index.html#duration_subsec\n [`else_if_without_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#else_if_without_else\n [`empty_enum`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_enum\n [`empty_line_after_outer_attr`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr\n [`empty_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n+[`empty_structs_with_brackets`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_structs_with_brackets\n [`enum_clike_unportable_variant`]: https://rust-lang.github.io/rust-clippy/master/index.html#enum_clike_unportable_variant\n [`enum_glob_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#enum_glob_use\n [`enum_variant_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names\n [`eq_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#eq_op\n [`equatable_if_let`]: https://rust-lang.github.io/rust-clippy/master/index.html#equatable_if_let\n [`erasing_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#erasing_op\n+[`err_expect`]: https://rust-lang.github.io/rust-clippy/master/index.html#err_expect\n [`eval_order_dependence`]: https://rust-lang.github.io/rust-clippy/master/index.html#eval_order_dependence\n [`excessive_precision`]: https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision\n [`exhaustive_enums`]: https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_enums\n@@ -3174,6 +3311,7 @@ Released 2018-09-13\n [`for_kv_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map\n [`for_loops_over_fallibles`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loops_over_fallibles\n [`forget_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_copy\n+[`forget_non_drop`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_non_drop\n [`forget_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_ref\n [`format_in_format_args`]: https://rust-lang.github.io/rust-clippy/master/index.html#format_in_format_args\n [`from_iter_instead_of_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_iter_instead_of_collect"}, {"sha": "dd6518d5241b5fad11f356ae2fa089f3218a109e", "filename": "src/tools/clippy/Cargo.toml", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCargo.toml?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.61\"\n+version = \"0.1.62\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\"\n@@ -21,13 +21,12 @@ name = \"clippy-driver\"\n path = \"src/driver.rs\"\n \n [dependencies]\n-clippy_lints = { version = \"0.1\", path = \"clippy_lints\" }\n+clippy_lints = { path = \"clippy_lints\" }\n semver = \"1.0\"\n-rustc_tools_util = { version = \"0.2\", path = \"rustc_tools_util\" }\n+rustc_tools_util = { path = \"rustc_tools_util\" }\n tempfile = { version = \"3.2\", optional = true }\n \n [dev-dependencies]\n-cargo_metadata = \"0.14\"\n compiletest_rs = { version = \"0.7.1\", features = [\"tmp\"] }\n tester = \"0.9\"\n regex = \"1.5\"\n@@ -45,7 +44,7 @@ derive-new = \"0.5\"\n if_chain = \"1.0\"\n itertools = \"0.10.1\"\n quote = \"1.0\"\n-serde = { version = \"1.0\", features = [\"derive\"] }\n+serde = { version = \"1.0.125\", features = [\"derive\"] }\n syn = { version = \"1.0\", features = [\"full\"] }\n futures = \"0.3\"\n parking_lot = \"0.11.2\""}, {"sha": "81faa5fe5e14823474fa0a90661da56ea75afa1e", "filename": "src/tools/clippy/clippy_dev/Cargo.toml", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2FCargo.toml?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -4,15 +4,17 @@ version = \"0.0.1\"\n edition = \"2021\"\n \n [dependencies]\n-bytecount = \"0.6\"\n clap = \"2.33\"\n indoc = \"1.0\"\n itertools = \"0.10.1\"\n opener = \"0.5\"\n-regex = \"1.5\"\n shell-escape = \"0.1\"\n+tempfile = \"3.2\"\n walkdir = \"2.3\"\n-cargo_metadata = \"0.14\"\n \n [features]\n deny-warnings = []\n+\n+[package.metadata.rust-analyzer]\n+# This package uses #[feature(rustc_private)]\n+rustc_private = true"}, {"sha": "8e5c739afe05ae85e3a00cee769678233806b5ba", "filename": "src/tools/clippy/clippy_dev/src/bless.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fbless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fbless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fbless.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,22 +1,15 @@\n //! `bless` updates the reference files in the repo with changed output files\n //! from the last test run.\n \n+use crate::cargo_clippy_path;\n use std::ffi::OsStr;\n use std::fs;\n use std::lazy::SyncLazy;\n use std::path::{Path, PathBuf};\n use walkdir::{DirEntry, WalkDir};\n \n-#[cfg(not(windows))]\n-static CARGO_CLIPPY_EXE: &str = \"cargo-clippy\";\n-#[cfg(windows)]\n-static CARGO_CLIPPY_EXE: &str = \"cargo-clippy.exe\";\n-\n-static CLIPPY_BUILD_TIME: SyncLazy<Option<std::time::SystemTime>> = SyncLazy::new(|| {\n-    let mut path = std::env::current_exe().unwrap();\n-    path.set_file_name(CARGO_CLIPPY_EXE);\n-    fs::metadata(path).ok()?.modified().ok()\n-});\n+static CLIPPY_BUILD_TIME: SyncLazy<Option<std::time::SystemTime>> =\n+    SyncLazy::new(|| cargo_clippy_path().metadata().ok()?.modified().ok());\n \n /// # Panics\n ///"}, {"sha": "9c6d754b400fc0f41595cfd8a4a745a1de926dd9", "filename": "src/tools/clippy/clippy_dev/src/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,8 +1,12 @@\n+#![feature(let_else)]\n #![feature(once_cell)]\n+#![feature(rustc_private)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n+extern crate rustc_lexer;\n+\n use std::path::PathBuf;\n \n pub mod bless;\n@@ -13,6 +17,19 @@ pub mod serve;\n pub mod setup;\n pub mod update_lints;\n \n+#[cfg(not(windows))]\n+static CARGO_CLIPPY_EXE: &str = \"cargo-clippy\";\n+#[cfg(windows)]\n+static CARGO_CLIPPY_EXE: &str = \"cargo-clippy.exe\";\n+\n+/// Returns the path to the `cargo-clippy` binary\n+#[must_use]\n+pub fn cargo_clippy_path() -> PathBuf {\n+    let mut path = std::env::current_exe().expect(\"failed to get current executable name\");\n+    path.set_file_name(CARGO_CLIPPY_EXE);\n+    path\n+}\n+\n /// Returns the path to the Clippy project directory\n ///\n /// # Panics"}, {"sha": "1bc1a39542db5c00bb0ebc1dd854d4b90b5aa859", "filename": "src/tools/clippy/clippy_dev/src/lint.rs", "status": "modified", "additions": 48, "deletions": 15, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flint.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,19 +1,52 @@\n-use std::process::{self, Command};\n+use crate::cargo_clippy_path;\n+use std::process::{self, Command, ExitStatus};\n+use std::{fs, io};\n \n-pub fn run(filename: &str) {\n-    let code = Command::new(\"cargo\")\n-        .args([\"run\", \"--bin\", \"clippy-driver\", \"--\"])\n-        .args([\"-L\", \"./target/debug\"])\n-        .args([\"-Z\", \"no-codegen\"])\n-        .args([\"--edition\", \"2021\"])\n-        .arg(filename)\n-        .status()\n-        .expect(\"failed to run cargo\")\n-        .code();\n-\n-    if code.is_none() {\n-        eprintln!(\"Killed by signal\");\n+fn exit_if_err(status: io::Result<ExitStatus>) {\n+    match status.expect(\"failed to run command\").code() {\n+        Some(0) => {},\n+        Some(n) => process::exit(n),\n+        None => {\n+            eprintln!(\"Killed by signal\");\n+            process::exit(1);\n+        },\n     }\n+}\n+\n+pub fn run(path: &str) {\n+    let is_file = match fs::metadata(path) {\n+        Ok(metadata) => metadata.is_file(),\n+        Err(e) => {\n+            eprintln!(\"Failed to read {path}: {e:?}\");\n+            process::exit(1);\n+        },\n+    };\n+\n+    if is_file {\n+        exit_if_err(\n+            Command::new(\"cargo\")\n+                .args([\"run\", \"--bin\", \"clippy-driver\", \"--\"])\n+                .args([\"-L\", \"./target/debug\"])\n+                .args([\"-Z\", \"no-codegen\"])\n+                .args([\"--edition\", \"2021\"])\n+                .arg(path)\n+                .status(),\n+        );\n+    } else {\n+        exit_if_err(Command::new(\"cargo\").arg(\"build\").status());\n \n-    process::exit(code.unwrap_or(1));\n+        // Run in a tempdir as changes to clippy do not retrigger linting\n+        let target = tempfile::Builder::new()\n+            .prefix(\"clippy\")\n+            .tempdir()\n+            .expect(\"failed to create tempdir\");\n+\n+        let status = Command::new(cargo_clippy_path())\n+            .current_dir(path)\n+            .env(\"CARGO_TARGET_DIR\", target.as_ref())\n+            .status();\n+\n+        target.close().expect(\"failed to remove tempdir\");\n+        exit_if_err(status);\n+    }\n }"}, {"sha": "b1fe35a0243f04e4887cdb020edd0de32040c7eb", "filename": "src/tools/clippy/clippy_dev/src/main.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -4,6 +4,7 @@\n \n use clap::{App, AppSettings, Arg, ArgMatches, SubCommand};\n use clippy_dev::{bless, fmt, lint, new_lint, serve, setup, update_lints};\n+use indoc::indoc;\n fn main() {\n     let matches = get_clap_config();\n \n@@ -56,8 +57,8 @@ fn main() {\n             serve::run(port, lint);\n         },\n         (\"lint\", Some(matches)) => {\n-            let filename = matches.value_of(\"filename\").unwrap();\n-            lint::run(filename);\n+            let path = matches.value_of(\"path\").unwrap();\n+            lint::run(path);\n         },\n         _ => {},\n     }\n@@ -225,11 +226,20 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n         )\n         .subcommand(\n             SubCommand::with_name(\"lint\")\n-                .about(\"Manually run clippy on a file\")\n+                .about(\"Manually run clippy on a file or package\")\n+                .after_help(indoc! {\"\n+                    EXAMPLES\n+                        Lint a single file:\n+                            cargo dev lint tests/ui/attrs.rs\n+\n+                        Lint a package directory:\n+                            cargo dev lint tests/ui-cargo/wildcard_dependencies/fail\n+                            cargo dev lint ~/my-project\n+                \"})\n                 .arg(\n-                    Arg::with_name(\"filename\")\n+                    Arg::with_name(\"path\")\n                         .required(true)\n-                        .help(\"The path to a file to lint\"),\n+                        .help(\"The path to a file or package directory to lint\"),\n                 ),\n         )\n         .get_matches()"}, {"sha": "7a3fd1317619e39d3021f8dafe8e0281dc4a99a1", "filename": "src/tools/clippy/clippy_dev/src/new_lint.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fnew_lint.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -133,15 +133,23 @@ fn to_camel_case(name: &str) -> String {\n }\n \n fn get_stabilisation_version() -> String {\n-    let mut command = cargo_metadata::MetadataCommand::new();\n-    command.no_deps();\n-    if let Ok(metadata) = command.exec() {\n-        if let Some(pkg) = metadata.packages.iter().find(|pkg| pkg.name == \"clippy\") {\n-            return format!(\"{}.{}.0\", pkg.version.minor, pkg.version.patch);\n-        }\n+    fn parse_manifest(contents: &str) -> Option<String> {\n+        let version = contents\n+            .lines()\n+            .filter_map(|l| l.split_once('='))\n+            .find_map(|(k, v)| (k.trim() == \"version\").then(|| v.trim()))?;\n+        let Some((\"0\", version)) = version.get(1..version.len() - 1)?.split_once('.') else {\n+            return None;\n+        };\n+        let (minor, patch) = version.split_once('.')?;\n+        Some(format!(\n+            \"{}.{}.0\",\n+            minor.parse::<u32>().ok()?,\n+            patch.parse::<u32>().ok()?\n+        ))\n     }\n-\n-    String::from(\"<TODO set version(see doc/adding_lints.md)>\")\n+    let contents = fs::read_to_string(\"Cargo.toml\").expect(\"Unable to read `Cargo.toml`\");\n+    parse_manifest(&contents).expect(\"Unable to find package version in `Cargo.toml`\")\n }\n \n fn get_test_file_contents(lint_name: &str, header_commands: Option<&str>) -> String {"}, {"sha": "59db51fbfac5149fec5158a137c91e94fa86bf4b", "filename": "src/tools/clippy/clippy_dev/src/update_lints.rs", "status": "modified", "additions": 274, "deletions": 380, "changes": 654, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fupdate_lints.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,9 +1,9 @@\n+use core::fmt::Write;\n use itertools::Itertools;\n-use regex::Regex;\n+use rustc_lexer::{tokenize, unescape, LiteralKind, TokenKind};\n use std::collections::HashMap;\n use std::ffi::OsStr;\n use std::fs;\n-use std::lazy::SyncLazy;\n use std::path::Path;\n use walkdir::WalkDir;\n \n@@ -13,35 +13,7 @@ const GENERATED_FILE_COMMENT: &str = \"// This file was generated by `cargo dev u\n      // Use that command to update this file and do not edit by hand.\\n\\\n      // Manual edits will be overwritten.\\n\\n\";\n \n-static DEC_CLIPPY_LINT_RE: SyncLazy<Regex> = SyncLazy::new(|| {\n-    Regex::new(\n-        r#\"(?x)\n-    declare_clippy_lint!\\s*[\\{(]\n-    (?:\\s+///.*)*\n-    (?:\\s*\\#\\[clippy::version\\s*=\\s*\"[^\"]*\"\\])?\n-    \\s+pub\\s+(?P<name>[A-Z_][A-Z_0-9]*)\\s*,\\s*\n-    (?P<cat>[a-z_]+)\\s*,\\s*\n-    \"(?P<desc>(?:[^\"\\\\]+|\\\\(?s).(?-s))*)\"\\s*[})]\n-\"#,\n-    )\n-    .unwrap()\n-});\n-\n-static DEC_DEPRECATED_LINT_RE: SyncLazy<Regex> = SyncLazy::new(|| {\n-    Regex::new(\n-        r#\"(?x)\n-    declare_deprecated_lint!\\s*[{(]\\s*\n-    (?:\\s+///.*)*\n-    (?:\\s*\\#\\[clippy::version\\s*=\\s*\"[^\"]*\"\\])?\n-    \\s+pub\\s+(?P<name>[A-Z_][A-Z_0-9]*)\\s*,\\s*\n-    \"(?P<desc>(?:[^\"\\\\]+|\\\\(?s).(?-s))*)\"\\s*[})]\n-\"#,\n-    )\n-    .unwrap()\n-});\n-static NL_ESCAPE_RE: SyncLazy<Regex> = SyncLazy::new(|| Regex::new(r#\"\\\\\\n\\s*\"#).unwrap());\n-\n-static DOCS_LINK: &str = \"https://rust-lang.github.io/rust-clippy/master/index.html\";\n+const DOCS_LINK: &str = \"https://rust-lang.github.io/rust-clippy/master/index.html\";\n \n #[derive(Clone, Copy, PartialEq)]\n pub enum UpdateMode {\n@@ -60,60 +32,52 @@ pub enum UpdateMode {\n /// Panics if a file path could not read from or then written to\n #[allow(clippy::too_many_lines)]\n pub fn run(update_mode: UpdateMode) {\n-    let lint_list: Vec<Lint> = gather_all().collect();\n+    let (lints, deprecated_lints) = gather_all();\n \n-    let internal_lints = Lint::internal_lints(&lint_list);\n-    let deprecated_lints = Lint::deprecated_lints(&lint_list);\n-    let usable_lints = Lint::usable_lints(&lint_list);\n+    let internal_lints = Lint::internal_lints(&lints);\n+    let usable_lints = Lint::usable_lints(&lints);\n     let mut sorted_usable_lints = usable_lints.clone();\n     sorted_usable_lints.sort_by_key(|lint| lint.name.clone());\n \n-    let usable_lint_count = round_to_fifty(usable_lints.len());\n-\n-    let mut file_change = false;\n-\n-    file_change |= replace_region_in_file(\n+    replace_region_in_file(\n+        update_mode,\n         Path::new(\"README.md\"),\n-        &format!(\n-            r#\"\\[There are over \\d+ lints included in this crate!\\]\\({}\\)\"#,\n-            DOCS_LINK\n-        ),\n-        \"\",\n-        true,\n-        update_mode == UpdateMode::Change,\n-        || {\n-            vec![format!(\n-                \"[There are over {} lints included in this crate!]({})\",\n-                usable_lint_count, DOCS_LINK\n-            )]\n+        \"[There are over \",\n+        \" lints included in this crate!]\",\n+        |res| {\n+            write!(res, \"{}\", round_to_fifty(usable_lints.len())).unwrap();\n         },\n-    )\n-    .changed;\n+    );\n \n-    file_change |= replace_region_in_file(\n+    replace_region_in_file(\n+        update_mode,\n         Path::new(\"CHANGELOG.md\"),\n-        \"<!-- begin autogenerated links to lint list -->\",\n+        \"<!-- begin autogenerated links to lint list -->\\n\",\n         \"<!-- end autogenerated links to lint list -->\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_changelog_lint_list(usable_lints.iter().chain(deprecated_lints.iter())),\n-    )\n-    .changed;\n+        |res| {\n+            for lint in usable_lints\n+                .iter()\n+                .map(|l| &l.name)\n+                .chain(deprecated_lints.iter().map(|l| &l.name))\n+                .sorted()\n+            {\n+                writeln!(res, \"[`{}`]: {}#{}\", lint, DOCS_LINK, lint).unwrap();\n+            }\n+        },\n+    );\n \n     // This has to be in lib.rs, otherwise rustfmt doesn't work\n-    file_change |= replace_region_in_file(\n+    replace_region_in_file(\n+        update_mode,\n         Path::new(\"clippy_lints/src/lib.rs\"),\n-        \"begin lints modules\",\n-        \"end lints modules\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_modules_list(usable_lints.iter()),\n-    )\n-    .changed;\n-\n-    if file_change && update_mode == UpdateMode::Check {\n-        exit_with_failure();\n-    }\n+        \"// begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\\n\",\n+        \"// end lints modules, do not remove this comment, it\u2019s used in `update_lints`\",\n+        |res| {\n+            for lint_mod in usable_lints.iter().map(|l| &l.module).unique().sorted() {\n+                writeln!(res, \"mod {};\", lint_mod).unwrap();\n+            }\n+        },\n+    );\n \n     process_file(\n         \"clippy_lints/src/lib.register_lints.rs\",\n@@ -123,7 +87,7 @@ pub fn run(update_mode: UpdateMode) {\n     process_file(\n         \"clippy_lints/src/lib.deprecated.rs\",\n         update_mode,\n-        &gen_deprecated(deprecated_lints.iter()),\n+        &gen_deprecated(&deprecated_lints),\n     );\n \n     let all_group_lints = usable_lints.iter().filter(|l| {\n@@ -146,15 +110,12 @@ pub fn run(update_mode: UpdateMode) {\n }\n \n pub fn print_lints() {\n-    let lint_list: Vec<Lint> = gather_all().collect();\n+    let (lint_list, _) = gather_all();\n     let usable_lints = Lint::usable_lints(&lint_list);\n     let usable_lint_count = usable_lints.len();\n     let grouped_by_lint_group = Lint::by_lint_group(usable_lints.into_iter());\n \n     for (lint_group, mut lints) in grouped_by_lint_group {\n-        if lint_group == \"Deprecated\" {\n-            continue;\n-        }\n         println!(\"\\n## {}\", lint_group);\n \n         lints.sort_by_key(|l| l.name.clone());\n@@ -198,19 +159,17 @@ struct Lint {\n     name: String,\n     group: String,\n     desc: String,\n-    deprecation: Option<String>,\n     module: String,\n }\n \n impl Lint {\n     #[must_use]\n-    fn new(name: &str, group: &str, desc: &str, deprecation: Option<&str>, module: &str) -> Self {\n+    fn new(name: &str, group: &str, desc: &str, module: &str) -> Self {\n         Self {\n             name: name.to_lowercase(),\n-            group: group.to_string(),\n-            desc: NL_ESCAPE_RE.replace(&desc.replace(\"\\\\\\\"\", \"\\\"\"), \"\").to_string(),\n-            deprecation: deprecation.map(ToString::to_string),\n-            module: module.to_string(),\n+            group: group.into(),\n+            desc: remove_line_splices(desc),\n+            module: module.into(),\n         }\n     }\n \n@@ -219,7 +178,7 @@ impl Lint {\n     fn usable_lints(lints: &[Self]) -> Vec<Self> {\n         lints\n             .iter()\n-            .filter(|l| l.deprecation.is_none() && !l.group.starts_with(\"internal\"))\n+            .filter(|l| !l.group.starts_with(\"internal\"))\n             .cloned()\n             .collect()\n     }\n@@ -230,19 +189,27 @@ impl Lint {\n         lints.iter().filter(|l| l.group == \"internal\").cloned().collect()\n     }\n \n-    /// Returns all deprecated lints\n-    #[must_use]\n-    fn deprecated_lints(lints: &[Self]) -> Vec<Self> {\n-        lints.iter().filter(|l| l.deprecation.is_some()).cloned().collect()\n-    }\n-\n     /// Returns the lints in a `HashMap`, grouped by the different lint groups\n     #[must_use]\n     fn by_lint_group(lints: impl Iterator<Item = Self>) -> HashMap<String, Vec<Self>> {\n         lints.map(|lint| (lint.group.to_string(), lint)).into_group_map()\n     }\n }\n \n+#[derive(Clone, PartialEq, Debug)]\n+struct DeprecatedLint {\n+    name: String,\n+    reason: String,\n+}\n+impl DeprecatedLint {\n+    fn new(name: &str, reason: &str) -> Self {\n+        Self {\n+            name: name.to_lowercase(),\n+            reason: remove_line_splices(reason),\n+        }\n+    }\n+}\n+\n /// Generates the code for registering a group\n fn gen_lint_group_list<'a>(group_name: &str, lints: impl Iterator<Item = &'a Lint>) -> String {\n     let mut details: Vec<_> = lints.map(|l| (&l.module, l.name.to_uppercase())).collect();\n@@ -262,41 +229,20 @@ fn gen_lint_group_list<'a>(group_name: &str, lints: impl Iterator<Item = &'a Lin\n     output\n }\n \n-/// Generates the module declarations for `lints`\n-#[must_use]\n-fn gen_modules_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n-    lints\n-        .map(|l| &l.module)\n-        .unique()\n-        .map(|module| format!(\"mod {};\", module))\n-        .sorted()\n-        .collect::<Vec<String>>()\n-}\n-\n-/// Generates the list of lint links at the bottom of the CHANGELOG\n-#[must_use]\n-fn gen_changelog_lint_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n-    lints\n-        .sorted_by_key(|l| &l.name)\n-        .map(|l| format!(\"[`{}`]: {}#{}\", l.name, DOCS_LINK, l.name))\n-        .collect()\n-}\n-\n /// Generates the `register_removed` code\n #[must_use]\n-fn gen_deprecated<'a>(lints: impl Iterator<Item = &'a Lint>) -> String {\n+fn gen_deprecated(lints: &[DeprecatedLint]) -> String {\n     let mut output = GENERATED_FILE_COMMENT.to_string();\n     output.push_str(\"{\\n\");\n-    for Lint { name, deprecation, .. } in lints {\n+    for lint in lints {\n         output.push_str(&format!(\n             concat!(\n                 \"    store.register_removed(\\n\",\n                 \"        \\\"clippy::{}\\\",\\n\",\n                 \"        \\\"{}\\\",\\n\",\n                 \"    );\\n\"\n             ),\n-            name,\n-            deprecation.as_ref().expect(\"`lints` are deprecated\")\n+            lint.name, lint.reason,\n         ));\n     }\n     output.push_str(\"}\\n\");\n@@ -330,61 +276,136 @@ fn gen_register_lint_list<'a>(\n     output\n }\n \n-/// Gathers all files in `src/clippy_lints` and gathers all lints inside\n-fn gather_all() -> impl Iterator<Item = Lint> {\n-    lint_files().flat_map(|f| gather_from_file(&f))\n-}\n+/// Gathers all lints defined in `clippy_lints/src`\n+fn gather_all() -> (Vec<Lint>, Vec<DeprecatedLint>) {\n+    let mut lints = Vec::with_capacity(1000);\n+    let mut deprecated_lints = Vec::with_capacity(50);\n+    let root_path = clippy_project_root().join(\"clippy_lints/src\");\n \n-fn gather_from_file(dir_entry: &walkdir::DirEntry) -> impl Iterator<Item = Lint> {\n-    let content = fs::read_to_string(dir_entry.path()).unwrap();\n-    let path = dir_entry.path();\n-    let filename = path.file_stem().unwrap();\n-    let path_buf = path.with_file_name(filename);\n-    let mut rel_path = path_buf\n-        .strip_prefix(clippy_project_root().join(\"clippy_lints/src\"))\n-        .expect(\"only files in `clippy_lints/src` should be looked at\");\n-    // If the lints are stored in mod.rs, we get the module name from\n-    // the containing directory:\n-    if filename == \"mod\" {\n-        rel_path = rel_path.parent().unwrap();\n-    }\n+    for (rel_path, file) in WalkDir::new(&root_path)\n+        .into_iter()\n+        .map(Result::unwrap)\n+        .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n+        .map(|f| (f.path().strip_prefix(&root_path).unwrap().to_path_buf(), f))\n+    {\n+        let path = file.path();\n+        let contents =\n+            fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from `{}`: {}\", path.display(), e));\n+        let module = rel_path\n+            .components()\n+            .map(|c| c.as_os_str().to_str().unwrap())\n+            .collect::<Vec<_>>()\n+            .join(\"::\");\n+\n+        // If the lints are stored in mod.rs, we get the module name from\n+        // the containing directory:\n+        let module = if let Some(module) = module.strip_suffix(\"::mod.rs\") {\n+            module\n+        } else {\n+            module.strip_suffix(\".rs\").unwrap_or(&module)\n+        };\n \n-    let module = rel_path\n-        .components()\n-        .map(|c| c.as_os_str().to_str().unwrap())\n-        .collect::<Vec<_>>()\n-        .join(\"::\");\n+        if module == \"deprecated_lints\" {\n+            parse_deprecated_contents(&contents, &mut deprecated_lints);\n+        } else {\n+            parse_contents(&contents, module, &mut lints);\n+        }\n+    }\n+    (lints, deprecated_lints)\n+}\n \n-    parse_contents(&content, &module)\n+macro_rules! match_tokens {\n+    ($iter:ident, $($token:ident $({$($fields:tt)*})? $(($capture:ident))?)*) => {\n+         {\n+            $($(let $capture =)? if let Some((TokenKind::$token $({$($fields)*})?, _x)) = $iter.next() {\n+                _x\n+            } else {\n+                continue;\n+            };)*\n+            #[allow(clippy::unused_unit)]\n+            { ($($($capture,)?)*) }\n+        }\n+    }\n }\n \n-fn parse_contents(content: &str, module: &str) -> impl Iterator<Item = Lint> {\n-    let lints = DEC_CLIPPY_LINT_RE\n-        .captures_iter(content)\n-        .map(|m| Lint::new(&m[\"name\"], &m[\"cat\"], &m[\"desc\"], None, module));\n-    let deprecated = DEC_DEPRECATED_LINT_RE\n-        .captures_iter(content)\n-        .map(|m| Lint::new(&m[\"name\"], \"Deprecated\", &m[\"desc\"], Some(&m[\"desc\"]), module));\n-    // Removing the `.collect::<Vec<Lint>>().into_iter()` causes some lifetime issues due to the map\n-    lints.chain(deprecated).collect::<Vec<Lint>>().into_iter()\n+/// Parse a source file looking for `declare_clippy_lint` macro invocations.\n+fn parse_contents(contents: &str, module: &str, lints: &mut Vec<Lint>) {\n+    let mut offset = 0usize;\n+    let mut iter = tokenize(contents).map(|t| {\n+        let range = offset..offset + t.len;\n+        offset = range.end;\n+        (t.kind, &contents[range])\n+    });\n+\n+    while iter.any(|(kind, s)| kind == TokenKind::Ident && s == \"declare_clippy_lint\") {\n+        let mut iter = iter\n+            .by_ref()\n+            .filter(|&(kind, _)| !matches!(kind, TokenKind::Whitespace | TokenKind::LineComment { .. }));\n+        // matches `!{`\n+        match_tokens!(iter, Bang OpenBrace);\n+        match iter.next() {\n+            // #[clippy::version = \"version\"] pub\n+            Some((TokenKind::Pound, _)) => {\n+                match_tokens!(iter, OpenBracket Ident Colon Colon Ident Eq Literal{..} CloseBracket Ident);\n+            },\n+            // pub\n+            Some((TokenKind::Ident, _)) => (),\n+            _ => continue,\n+        }\n+        let (name, group, desc) = match_tokens!(\n+            iter,\n+            // LINT_NAME\n+            Ident(name) Comma\n+            // group,\n+            Ident(group) Comma\n+            // \"description\" }\n+            Literal{..}(desc) CloseBrace\n+        );\n+        lints.push(Lint::new(name, group, desc, module));\n+    }\n }\n \n-/// Collects all .rs files in the `clippy_lints/src` directory\n-fn lint_files() -> impl Iterator<Item = walkdir::DirEntry> {\n-    // We use `WalkDir` instead of `fs::read_dir` here in order to recurse into subdirectories.\n-    // Otherwise we would not collect all the lints, for example in `clippy_lints/src/methods/`.\n-    let path = clippy_project_root().join(\"clippy_lints/src\");\n-    WalkDir::new(path)\n-        .into_iter()\n-        .filter_map(Result::ok)\n-        .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n+/// Parse a source file looking for `declare_deprecated_lint` macro invocations.\n+fn parse_deprecated_contents(contents: &str, lints: &mut Vec<DeprecatedLint>) {\n+    let mut offset = 0usize;\n+    let mut iter = tokenize(contents).map(|t| {\n+        let range = offset..offset + t.len;\n+        offset = range.end;\n+        (t.kind, &contents[range])\n+    });\n+    while iter.any(|(kind, s)| kind == TokenKind::Ident && s == \"declare_deprecated_lint\") {\n+        let mut iter = iter\n+            .by_ref()\n+            .filter(|&(kind, _)| !matches!(kind, TokenKind::Whitespace | TokenKind::LineComment { .. }));\n+        let (name, reason) = match_tokens!(\n+            iter,\n+            // !{\n+            Bang OpenBrace\n+            // #[clippy::version = \"version\"]\n+            Pound OpenBracket Ident Colon Colon Ident Eq Literal{..} CloseBracket\n+            // pub LINT_NAME,\n+            Ident Ident(name) Comma\n+            // \"description\"\n+            Literal{kind: LiteralKind::Str{..},..}(reason)\n+            // }\n+            CloseBrace\n+        );\n+        lints.push(DeprecatedLint::new(name, reason));\n+    }\n }\n \n-/// Whether a file has had its text changed or not\n-#[derive(PartialEq, Debug)]\n-struct FileChange {\n-    changed: bool,\n-    new_lines: String,\n+/// Removes the line splices and surrounding quotes from a string literal\n+fn remove_line_splices(s: &str) -> String {\n+    let s = s\n+        .strip_prefix('r')\n+        .unwrap_or(s)\n+        .trim_matches('#')\n+        .strip_prefix('\"')\n+        .and_then(|s| s.strip_suffix('\"'))\n+        .unwrap_or_else(|| panic!(\"expected quoted string, found `{}`\", s));\n+    let mut res = String::with_capacity(s.len());\n+    unescape::unescape_literal(s, unescape::Mode::Str, &mut |range, _| res.push_str(&s[range]));\n+    res\n }\n \n /// Replaces a region in a file delimited by two lines matching regexes.\n@@ -396,200 +417,115 @@ struct FileChange {\n /// # Panics\n ///\n /// Panics if the path could not read or then written\n-fn replace_region_in_file<F>(\n+fn replace_region_in_file(\n+    update_mode: UpdateMode,\n     path: &Path,\n     start: &str,\n     end: &str,\n-    replace_start: bool,\n-    write_back: bool,\n-    replacements: F,\n-) -> FileChange\n-where\n-    F: FnOnce() -> Vec<String>,\n-{\n-    let contents = fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from {}: {}\", path.display(), e));\n-    let file_change = replace_region_in_text(&contents, start, end, replace_start, replacements);\n-\n-    if write_back {\n-        if let Err(e) = fs::write(path, file_change.new_lines.as_bytes()) {\n-            panic!(\"Cannot write to {}: {}\", path.display(), e);\n-        }\n-    }\n-    file_change\n-}\n-\n-/// Replaces a region in a text delimited by two lines matching regexes.\n-///\n-/// * `text` is the input text on which you want to perform the replacement\n-/// * `start` is a `&str` that describes the delimiter line before the region you want to replace.\n-///   As the `&str` will be converted to a `Regex`, this can contain regex syntax, too.\n-/// * `end` is a `&str` that describes the delimiter line until where the replacement should happen.\n-///   As the `&str` will be converted to a `Regex`, this can contain regex syntax, too.\n-/// * If `replace_start` is true, the `start` delimiter line is replaced as well. The `end`\n-///   delimiter line is never replaced.\n-/// * `replacements` is a closure that has to return a `Vec<String>` which contains the new text.\n-///\n-/// If you want to perform the replacement on files instead of already parsed text,\n-/// use `replace_region_in_file`.\n-///\n-/// # Example\n-///\n-/// ```ignore\n-/// let the_text = \"replace_start\\nsome text\\nthat will be replaced\\nreplace_end\";\n-/// let result =\n-///     replace_region_in_text(the_text, \"replace_start\", \"replace_end\", false, || {\n-///         vec![\"a different\".to_string(), \"text\".to_string()]\n-///     })\n-///     .new_lines;\n-/// assert_eq!(\"replace_start\\na different\\ntext\\nreplace_end\", result);\n-/// ```\n-///\n-/// # Panics\n-///\n-/// Panics if start or end is not valid regex\n-fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_start: bool, replacements: F) -> FileChange\n-where\n-    F: FnOnce() -> Vec<String>,\n-{\n-    let replace_it = replacements();\n-    let mut in_old_region = false;\n-    let mut found = false;\n-    let mut new_lines = vec![];\n-    let start = Regex::new(start).unwrap();\n-    let end = Regex::new(end).unwrap();\n-\n-    for line in text.lines() {\n-        if in_old_region {\n-            if end.is_match(line) {\n-                in_old_region = false;\n-                new_lines.extend(replace_it.clone());\n-                new_lines.push(line.to_string());\n-            }\n-        } else if start.is_match(line) {\n-            if !replace_start {\n-                new_lines.push(line.to_string());\n+    write_replacement: impl FnMut(&mut String),\n+) {\n+    let contents = fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from `{}`: {}\", path.display(), e));\n+    let new_contents = match replace_region_in_text(&contents, start, end, write_replacement) {\n+        Ok(x) => x,\n+        Err(delim) => panic!(\"Couldn't find `{}` in file `{}`\", delim, path.display()),\n+    };\n+\n+    match update_mode {\n+        UpdateMode::Check if contents != new_contents => exit_with_failure(),\n+        UpdateMode::Check => (),\n+        UpdateMode::Change => {\n+            if let Err(e) = fs::write(path, new_contents.as_bytes()) {\n+                panic!(\"Cannot write to `{}`: {}\", path.display(), e);\n             }\n-            in_old_region = true;\n-            found = true;\n-        } else {\n-            new_lines.push(line.to_string());\n-        }\n-    }\n-\n-    if !found {\n-        // This happens if the provided regex in `clippy_dev/src/main.rs` does not match in the\n-        // given text or file. Most likely this is an error on the programmer's side and the Regex\n-        // is incorrect.\n-        eprintln!(\"error: regex \\n{:?}\\ndoesn't match. You may have to update it.\", start);\n-        std::process::exit(1);\n-    }\n-\n-    let mut new_lines = new_lines.join(\"\\n\");\n-    if text.ends_with('\\n') {\n-        new_lines.push('\\n');\n+        },\n     }\n-    let changed = new_lines != text;\n-    FileChange { changed, new_lines }\n-}\n-\n-#[test]\n-fn test_parse_contents() {\n-    let result: Vec<Lint> = parse_contents(\n-        r#\"\n-declare_clippy_lint! {\n-    #[clippy::version = \"Hello Clippy!\"]\n-    pub PTR_ARG,\n-    style,\n-    \"really long \\\n-     text\"\n }\n \n-declare_clippy_lint!{\n-    #[clippy::version = \"Test version\"]\n-    pub DOC_MARKDOWN,\n-    pedantic,\n-    \"single line\"\n-}\n-\n-/// some doc comment\n-declare_deprecated_lint! {\n-    #[clippy::version = \"I'm a version\"]\n-    pub SHOULD_ASSERT_EQ,\n-    \"`assert!()` will be more flexible with RFC 2011\"\n-}\n-    \"#,\n-        \"module_name\",\n-    )\n-    .collect();\n-\n-    let expected = vec![\n-        Lint::new(\"ptr_arg\", \"style\", \"really long text\", None, \"module_name\"),\n-        Lint::new(\"doc_markdown\", \"pedantic\", \"single line\", None, \"module_name\"),\n-        Lint::new(\n-            \"should_assert_eq\",\n-            \"Deprecated\",\n-            \"`assert!()` will be more flexible with RFC 2011\",\n-            Some(\"`assert!()` will be more flexible with RFC 2011\"),\n-            \"module_name\",\n-        ),\n-    ];\n-    assert_eq!(expected, result);\n+/// Replaces a region in a text delimited by two strings. Returns the new text if both delimiters\n+/// were found, or the missing delimiter if not.\n+fn replace_region_in_text<'a>(\n+    text: &str,\n+    start: &'a str,\n+    end: &'a str,\n+    mut write_replacement: impl FnMut(&mut String),\n+) -> Result<String, &'a str> {\n+    let (text_start, rest) = text.split_once(start).ok_or(start)?;\n+    let (_, text_end) = rest.split_once(end).ok_or(end)?;\n+\n+    let mut res = String::with_capacity(text.len() + 4096);\n+    res.push_str(text_start);\n+    res.push_str(start);\n+    write_replacement(&mut res);\n+    res.push_str(end);\n+    res.push_str(text_end);\n+\n+    Ok(res)\n }\n \n #[cfg(test)]\n mod tests {\n     use super::*;\n \n     #[test]\n-    fn test_replace_region() {\n-        let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n-        let expected = FileChange {\n-            changed: true,\n-            new_lines: \"\\nabc\\nhello world\\ndef\\nghi\".to_string(),\n-        };\n-        let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, false, || {\n-            vec![\"hello world\".to_string()]\n-        });\n-        assert_eq!(expected, result);\n-    }\n+    fn test_parse_contents() {\n+        static CONTENTS: &str = r#\"\n+            declare_clippy_lint! {\n+                #[clippy::version = \"Hello Clippy!\"]\n+                pub PTR_ARG,\n+                style,\n+                \"really long \\\n+                text\"\n+            }\n \n-    #[test]\n-    fn test_replace_region_with_start() {\n-        let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n-        let expected = FileChange {\n-            changed: true,\n-            new_lines: \"\\nhello world\\ndef\\nghi\".to_string(),\n-        };\n-        let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, true, || {\n-            vec![\"hello world\".to_string()]\n-        });\n+            declare_clippy_lint!{\n+                #[clippy::version = \"Test version\"]\n+                pub DOC_MARKDOWN,\n+                pedantic,\n+                \"single line\"\n+            }\n+        \"#;\n+        let mut result = Vec::new();\n+        parse_contents(CONTENTS, \"module_name\", &mut result);\n+\n+        let expected = vec![\n+            Lint::new(\"ptr_arg\", \"style\", \"\\\"really long text\\\"\", \"module_name\"),\n+            Lint::new(\"doc_markdown\", \"pedantic\", \"\\\"single line\\\"\", \"module_name\"),\n+        ];\n         assert_eq!(expected, result);\n     }\n \n     #[test]\n-    fn test_replace_region_no_changes() {\n-        let text = \"123\\n456\\n789\";\n-        let expected = FileChange {\n-            changed: false,\n-            new_lines: \"123\\n456\\n789\".to_string(),\n-        };\n-        let result = replace_region_in_text(text, r#\"^\\s*123$\"#, r#\"^\\s*456\"#, false, Vec::new);\n+    fn test_parse_deprecated_contents() {\n+        static DEPRECATED_CONTENTS: &str = r#\"\n+            /// some doc comment\n+            declare_deprecated_lint! {\n+                #[clippy::version = \"I'm a version\"]\n+                pub SHOULD_ASSERT_EQ,\n+                \"`assert!()` will be more flexible with RFC 2011\"\n+            }\n+        \"#;\n+\n+        let mut result = Vec::new();\n+        parse_deprecated_contents(DEPRECATED_CONTENTS, &mut result);\n+\n+        let expected = vec![DeprecatedLint::new(\n+            \"should_assert_eq\",\n+            \"\\\"`assert!()` will be more flexible with RFC 2011\\\"\",\n+        )];\n         assert_eq!(expected, result);\n     }\n \n     #[test]\n     fn test_usable_lints() {\n         let lints = vec![\n-            Lint::new(\"should_assert_eq\", \"Deprecated\", \"abc\", Some(\"Reason\"), \"module_name\"),\n-            Lint::new(\"should_assert_eq2\", \"Not Deprecated\", \"abc\", None, \"module_name\"),\n-            Lint::new(\"should_assert_eq2\", \"internal\", \"abc\", None, \"module_name\"),\n-            Lint::new(\"should_assert_eq2\", \"internal_style\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"Not Deprecated\", \"\\\"abc\\\"\", \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"internal\", \"\\\"abc\\\"\", \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"internal_style\", \"\\\"abc\\\"\", \"module_name\"),\n         ];\n         let expected = vec![Lint::new(\n             \"should_assert_eq2\",\n             \"Not Deprecated\",\n-            \"abc\",\n-            None,\n+            \"\\\"abc\\\"\",\n             \"module_name\",\n         )];\n         assert_eq!(expected, Lint::usable_lints(&lints));\n@@ -598,55 +534,30 @@ mod tests {\n     #[test]\n     fn test_by_lint_group() {\n         let lints = vec![\n-            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-            Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n-            Lint::new(\"incorrect_match\", \"group1\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"should_assert_eq\", \"group1\", \"\\\"abc\\\"\", \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"group2\", \"\\\"abc\\\"\", \"module_name\"),\n+            Lint::new(\"incorrect_match\", \"group1\", \"\\\"abc\\\"\", \"module_name\"),\n         ];\n         let mut expected: HashMap<String, Vec<Lint>> = HashMap::new();\n         expected.insert(\n             \"group1\".to_string(),\n             vec![\n-                Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-                Lint::new(\"incorrect_match\", \"group1\", \"abc\", None, \"module_name\"),\n+                Lint::new(\"should_assert_eq\", \"group1\", \"\\\"abc\\\"\", \"module_name\"),\n+                Lint::new(\"incorrect_match\", \"group1\", \"\\\"abc\\\"\", \"module_name\"),\n             ],\n         );\n         expected.insert(\n             \"group2\".to_string(),\n-            vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")],\n+            vec![Lint::new(\"should_assert_eq2\", \"group2\", \"\\\"abc\\\"\", \"module_name\")],\n         );\n         assert_eq!(expected, Lint::by_lint_group(lints.into_iter()));\n     }\n \n-    #[test]\n-    fn test_gen_changelog_lint_list() {\n-        let lints = vec![\n-            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-            Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n-        ];\n-        let expected = vec![\n-            format!(\"[`should_assert_eq`]: {}#should_assert_eq\", DOCS_LINK),\n-            format!(\"[`should_assert_eq2`]: {}#should_assert_eq2\", DOCS_LINK),\n-        ];\n-        assert_eq!(expected, gen_changelog_lint_list(lints.iter()));\n-    }\n-\n     #[test]\n     fn test_gen_deprecated() {\n         let lints = vec![\n-            Lint::new(\n-                \"should_assert_eq\",\n-                \"group1\",\n-                \"abc\",\n-                Some(\"has been superseded by should_assert_eq2\"),\n-                \"module_name\",\n-            ),\n-            Lint::new(\n-                \"another_deprecated\",\n-                \"group2\",\n-                \"abc\",\n-                Some(\"will be removed\"),\n-                \"module_name\",\n-            ),\n+            DeprecatedLint::new(\"should_assert_eq\", \"\\\"has been superseded by should_assert_eq2\\\"\"),\n+            DeprecatedLint::new(\"another_deprecated\", \"\\\"will be removed\\\"\"),\n         ];\n \n         let expected = GENERATED_FILE_COMMENT.to_string()\n@@ -665,32 +576,15 @@ mod tests {\n             .join(\"\\n\")\n             + \"\\n\";\n \n-        assert_eq!(expected, gen_deprecated(lints.iter()));\n-    }\n-\n-    #[test]\n-    #[should_panic]\n-    fn test_gen_deprecated_fail() {\n-        let lints = vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")];\n-        let _deprecated_lints = gen_deprecated(lints.iter());\n-    }\n-\n-    #[test]\n-    fn test_gen_modules_list() {\n-        let lints = vec![\n-            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-            Lint::new(\"incorrect_stuff\", \"group3\", \"abc\", None, \"another_module\"),\n-        ];\n-        let expected = vec![\"mod another_module;\".to_string(), \"mod module_name;\".to_string()];\n-        assert_eq!(expected, gen_modules_list(lints.iter()));\n+        assert_eq!(expected, gen_deprecated(&lints));\n     }\n \n     #[test]\n     fn test_gen_lint_group_list() {\n         let lints = vec![\n-            Lint::new(\"abc\", \"group1\", \"abc\", None, \"module_name\"),\n-            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-            Lint::new(\"internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"abc\", \"group1\", \"\\\"abc\\\"\", \"module_name\"),\n+            Lint::new(\"should_assert_eq\", \"group1\", \"\\\"abc\\\"\", \"module_name\"),\n+            Lint::new(\"internal\", \"internal_style\", \"\\\"abc\\\"\", \"module_name\"),\n         ];\n         let expected = GENERATED_FILE_COMMENT.to_string()\n             + &["}, {"sha": "aebf9a87cabd2c7369816bbfcb7386eea0cba6fb", "filename": "src/tools/clippy/clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.61\"\n+version = \"0.1.62\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "e9b0f1f672de0bb06e6178fa95746c3aba60d600", "filename": "src/tools/clippy/clippy_lints/src/casts/cast_abs_to_unsigned.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,42 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::{meets_msrv, msrvs};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::Ty;\n+use rustc_semver::RustcVersion;\n+\n+use super::CAST_ABS_TO_UNSIGNED;\n+\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n+    cast_expr: &Expr<'_>,\n+    cast_from: Ty<'_>,\n+    cast_to: Ty<'_>,\n+    msrv: &Option<RustcVersion>,\n+) {\n+    if_chain! {\n+        if meets_msrv(msrv.as_ref(), &msrvs::UNSIGNED_ABS);\n+        if cast_from.is_integral();\n+        if cast_to.is_integral();\n+        if cast_from.is_signed();\n+        if !cast_to.is_signed();\n+        if let ExprKind::MethodCall(method_path, args, _) = cast_expr.kind;\n+        if let method_name = method_path.ident.name.as_str();\n+        if method_name == \"abs\";\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                CAST_ABS_TO_UNSIGNED,\n+                expr.span,\n+                &format!(\"casting the result of `{}::{}()` to {}\", cast_from, method_name, cast_to),\n+                \"replace with\",\n+                format!(\"{}.unsigned_abs()\", Sugg::hir(cx, &args[0], \"..\")),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}"}, {"sha": "d476a1a7646c01e24bd8ea9b3df3297ec980fdba", "filename": "src/tools/clippy/clippy_lints/src/casts/cast_ptr_alignment.rs", "status": "modified", "additions": 66, "deletions": 34, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,7 +1,6 @@\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::is_hir_ty_cfg_dependant;\n use clippy_utils::ty::is_c_void;\n-use if_chain::if_chain;\n+use clippy_utils::{get_parent_expr, is_hir_ty_cfg_dependant, match_any_def_paths, paths};\n use rustc_hir::{Expr, ExprKind, GenericArg};\n use rustc_lint::LateContext;\n use rustc_middle::ty::layout::LayoutOf;\n@@ -20,45 +19,78 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         );\n         lint_cast_ptr_alignment(cx, expr, cast_from, cast_to);\n     } else if let ExprKind::MethodCall(method_path, [self_arg, ..], _) = &expr.kind {\n-        if_chain! {\n-            if method_path.ident.name == sym!(cast);\n-            if let Some(generic_args) = method_path.args;\n-            if let [GenericArg::Type(cast_to)] = generic_args.args;\n+        if method_path.ident.name == sym!(cast)\n+            && let Some(generic_args) = method_path.args\n+            && let [GenericArg::Type(cast_to)] = generic_args.args\n             // There probably is no obvious reason to do this, just to be consistent with `as` cases.\n-            if !is_hir_ty_cfg_dependant(cx, cast_to);\n-            then {\n-                let (cast_from, cast_to) =\n-                    (cx.typeck_results().expr_ty(self_arg), cx.typeck_results().expr_ty(expr));\n-                lint_cast_ptr_alignment(cx, expr, cast_from, cast_to);\n-            }\n+            && !is_hir_ty_cfg_dependant(cx, cast_to)\n+        {\n+            let (cast_from, cast_to) =\n+                (cx.typeck_results().expr_ty(self_arg), cx.typeck_results().expr_ty(expr));\n+            lint_cast_ptr_alignment(cx, expr, cast_from, cast_to);\n         }\n     }\n }\n \n fn lint_cast_ptr_alignment<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, cast_from: Ty<'tcx>, cast_to: Ty<'tcx>) {\n-    if_chain! {\n-        if let ty::RawPtr(from_ptr_ty) = &cast_from.kind();\n-        if let ty::RawPtr(to_ptr_ty) = &cast_to.kind();\n-        if let Ok(from_layout) = cx.layout_of(from_ptr_ty.ty);\n-        if let Ok(to_layout) = cx.layout_of(to_ptr_ty.ty);\n-        if from_layout.align.abi < to_layout.align.abi;\n+    if let ty::RawPtr(from_ptr_ty) = &cast_from.kind()\n+        && let ty::RawPtr(to_ptr_ty) = &cast_to.kind()\n+        && let Ok(from_layout) = cx.layout_of(from_ptr_ty.ty)\n+        && let Ok(to_layout) = cx.layout_of(to_ptr_ty.ty)\n+        && from_layout.align.abi < to_layout.align.abi\n         // with c_void, we inherently need to trust the user\n-        if !is_c_void(cx, from_ptr_ty.ty);\n+        && !is_c_void(cx, from_ptr_ty.ty)\n         // when casting from a ZST, we don't know enough to properly lint\n-        if !from_layout.is_zst();\n-        then {\n-            span_lint(\n-                cx,\n-                CAST_PTR_ALIGNMENT,\n-                expr.span,\n-                &format!(\n-                    \"casting from `{}` to a more-strictly-aligned pointer (`{}`) ({} < {} bytes)\",\n-                    cast_from,\n-                    cast_to,\n-                    from_layout.align.abi.bytes(),\n-                    to_layout.align.abi.bytes(),\n-                ),\n-            );\n-        }\n+        && !from_layout.is_zst()\n+        && !is_used_as_unaligned(cx, expr)\n+    {\n+        span_lint(\n+            cx,\n+            CAST_PTR_ALIGNMENT,\n+            expr.span,\n+            &format!(\n+                \"casting from `{}` to a more-strictly-aligned pointer (`{}`) ({} < {} bytes)\",\n+                cast_from,\n+                cast_to,\n+                from_layout.align.abi.bytes(),\n+                to_layout.align.abi.bytes(),\n+            ),\n+        );\n+    }\n+}\n+\n+fn is_used_as_unaligned(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n+    let Some(parent) = get_parent_expr(cx, e) else {\n+        return false;\n+    };\n+    match parent.kind {\n+        ExprKind::MethodCall(name, [self_arg, ..], _) if self_arg.hir_id == e.hir_id => {\n+            if matches!(name.ident.as_str(), \"read_unaligned\" | \"write_unaligned\")\n+                && let Some(def_id) = cx.typeck_results().type_dependent_def_id(parent.hir_id)\n+                && let Some(def_id) = cx.tcx.impl_of_method(def_id)\n+                && cx.tcx.type_of(def_id).is_unsafe_ptr()\n+            {\n+                true\n+            } else {\n+                false\n+            }\n+        },\n+        ExprKind::Call(func, [arg, ..]) if arg.hir_id == e.hir_id => {\n+            static PATHS: &[&[&str]] = &[\n+                paths::PTR_READ_UNALIGNED.as_slice(),\n+                paths::PTR_WRITE_UNALIGNED.as_slice(),\n+                paths::PTR_UNALIGNED_VOLATILE_LOAD.as_slice(),\n+                paths::PTR_UNALIGNED_VOLATILE_STORE.as_slice(),\n+            ];\n+            if let ExprKind::Path(path) = &func.kind\n+                && let Some(def_id) = cx.qpath_res(path, func.hir_id).opt_def_id()\n+                && match_any_def_paths(cx, def_id, PATHS).is_some()\n+            {\n+                true\n+            } else {\n+                false\n+            }\n+        },\n+        _ => false,\n     }\n }"}, {"sha": "55c1f085657bb1842eafd7c52ff5e75a5b68321c", "filename": "src/tools/clippy/clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,3 +1,4 @@\n+mod cast_abs_to_unsigned;\n mod cast_enum_constructor;\n mod cast_lossless;\n mod cast_possible_truncation;\n@@ -473,6 +474,28 @@ declare_clippy_lint! {\n     \"casts from an enum tuple constructor to an integer\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for uses of the `abs()` method that cast the result to unsigned.\n+    ///\n+    /// ### Why is this bad?\n+    /// The `unsigned_abs()` method avoids panic when called on the MIN value.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let x: i32 = -42;\n+    /// let y: u32 = x.abs() as u32;\n+    /// ```\n+    /// Use instead:\n+    /// let x: i32 = -42;\n+    /// let y: u32 = x.unsigned_abs();\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub CAST_ABS_TO_UNSIGNED,\n+    suspicious,\n+    \"casting the result of `abs()` to an unsigned integer can panic\"\n+}\n+\n pub struct Casts {\n     msrv: Option<RustcVersion>,\n }\n@@ -500,7 +523,8 @@ impl_lint_pass!(Casts => [\n     CHAR_LIT_AS_U8,\n     PTR_AS_PTR,\n     CAST_ENUM_TRUNCATION,\n-    CAST_ENUM_CONSTRUCTOR\n+    CAST_ENUM_CONSTRUCTOR,\n+    CAST_ABS_TO_UNSIGNED\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Casts {\n@@ -536,6 +560,7 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                     cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n                     cast_precision_loss::check(cx, expr, cast_from, cast_to);\n                     cast_sign_loss::check(cx, expr, cast_expr, cast_from, cast_to);\n+                    cast_abs_to_unsigned::check(cx, expr, cast_expr, cast_from, cast_to, &self.msrv);\n                 }\n                 cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to, &self.msrv);\n                 cast_enum_constructor::check(cx, expr, cast_expr, cast_from);"}, {"sha": "af56ec11ef8acd741ec4a8a45926d8fd2656e36a", "filename": "src/tools/clippy/clippy_lints/src/casts/unnecessary_cast.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -4,7 +4,8 @@ use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_ast::{LitFloatType, LitIntType, LitKind};\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, Lit, UnOp};\n+use rustc_hir::def::Res;\n+use rustc_hir::{Expr, ExprKind, Lit, QPath, TyKind, UnOp};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, FloatTy, InferTy, Ty};\n@@ -18,6 +19,17 @@ pub(super) fn check(\n     cast_from: Ty<'_>,\n     cast_to: Ty<'_>,\n ) -> bool {\n+    // skip non-primitive type cast\n+    if_chain! {\n+        if let ExprKind::Cast(_, cast_to) = expr.kind;\n+        if let TyKind::Path(QPath::Resolved(_, path)) = &cast_to.kind;\n+        if let Res::PrimTy(_) = path.res;\n+        then {}\n+        else {\n+            return false\n+        }\n+    }\n+\n     if let Some(lit) = get_numeric_literal(cast_expr) {\n         let literal_str = snippet_opt(cx, cast_expr.span).unwrap_or_default();\n "}, {"sha": "fc141b4a6e3afcc3874b5c776be3cfb88303bdfc", "filename": "src/tools/clippy/clippy_lints/src/crate_in_macro_def.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcrate_in_macro_def.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,125 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use rustc_ast::ast::{AttrKind, Attribute, Item, ItemKind};\n+use rustc_ast::token::{Token, TokenKind};\n+use rustc_ast::tokenstream::{TokenStream, TokenTree};\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{symbol::sym, Span};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for use of `crate` as opposed to `$crate` in a macro definition.\n+    ///\n+    /// ### Why is this bad?\n+    /// `crate` refers to the macro call's crate, whereas `$crate` refers to the macro definition's\n+    /// crate. Rarely is the former intended. See:\n+    /// https://doc.rust-lang.org/reference/macros-by-example.html#hygiene\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// #[macro_export]\n+    /// macro_rules! print_message {\n+    ///     () => {\n+    ///         println!(\"{}\", crate::MESSAGE);\n+    ///     };\n+    /// }\n+    /// pub const MESSAGE: &str = \"Hello!\";\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// #[macro_export]\n+    /// macro_rules! print_message {\n+    ///     () => {\n+    ///         println!(\"{}\", $crate::MESSAGE);\n+    ///     };\n+    /// }\n+    /// pub const MESSAGE: &str = \"Hello!\";\n+    /// ```\n+    ///\n+    /// Note that if the use of `crate` is intentional, an `allow` attribute can be applied to the\n+    /// macro definition, e.g.:\n+    /// ```rust,ignore\n+    /// #[allow(clippy::crate_in_macro_def)]\n+    /// macro_rules! ok { ... crate::foo ... }\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub CRATE_IN_MACRO_DEF,\n+    suspicious,\n+    \"using `crate` in a macro definition\"\n+}\n+declare_lint_pass!(CrateInMacroDef => [CRATE_IN_MACRO_DEF]);\n+\n+impl EarlyLintPass for CrateInMacroDef {\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+        if_chain! {\n+            if item.attrs.iter().any(is_macro_export);\n+            if let ItemKind::MacroDef(macro_def) = &item.kind;\n+            let tts = macro_def.body.inner_tokens();\n+            if let Some(span) = contains_unhygienic_crate_reference(&tts);\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    CRATE_IN_MACRO_DEF,\n+                    span,\n+                    \"`crate` references the macro call's crate\",\n+                    \"to reference the macro definition's crate, use\",\n+                    String::from(\"$crate\"),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+fn is_macro_export(attr: &Attribute) -> bool {\n+    if_chain! {\n+        if let AttrKind::Normal(attr_item, _) = &attr.kind;\n+        if let [segment] = attr_item.path.segments.as_slice();\n+        then {\n+            segment.ident.name == sym::macro_export\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n+fn contains_unhygienic_crate_reference(tts: &TokenStream) -> Option<Span> {\n+    let mut prev_is_dollar = false;\n+    let mut cursor = tts.trees();\n+    while let Some(curr) = cursor.next() {\n+        if_chain! {\n+            if !prev_is_dollar;\n+            if let Some(span) = is_crate_keyword(&curr);\n+            if let Some(next) = cursor.look_ahead(0);\n+            if is_token(next, &TokenKind::ModSep);\n+            then {\n+                return Some(span);\n+            }\n+        }\n+        if let TokenTree::Delimited(_, _, tts) = &curr {\n+            let span = contains_unhygienic_crate_reference(tts);\n+            if span.is_some() {\n+                return span;\n+            }\n+        }\n+        prev_is_dollar = is_token(&curr, &TokenKind::Dollar);\n+    }\n+    None\n+}\n+\n+fn is_crate_keyword(tt: &TokenTree) -> Option<Span> {\n+    if_chain! {\n+        if let TokenTree::Token(Token { kind: TokenKind::Ident(symbol, _), span }) = tt;\n+        if symbol.as_str() == \"crate\";\n+        then { Some(*span) } else { None }\n+    }\n+}\n+\n+fn is_token(tt: &TokenTree, kind: &TokenKind) -> bool {\n+    if let TokenTree::Token(Token { kind: other, .. }) = tt {\n+        kind == other\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "28d0c75fde6baf95b8d89bc22f973ae928509072", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -621,8 +621,8 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                 let filename = FileName::anon_source_code(&code);\n \n                 let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-                let fallback_bundle = rustc_errors::fallback_fluent_bundle(false)\n-                    .expect(\"failed to load fallback fluent bundle\");\n+                let fallback_bundle =\n+                    rustc_errors::fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n                 let emitter = EmitterWriter::new(\n                     Box::new(io::sink()),\n                     None,"}, {"sha": "88c54828da834da3e94ae9d513a76102e1d1f0c9", "filename": "src/tools/clippy/clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 127, "deletions": 54, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,9 +1,8 @@\n-use clippy_utils::diagnostics::span_lint_and_note;\n-use clippy_utils::ty::is_copy;\n-use if_chain::if_chain;\n-use rustc_hir::{Expr, ExprKind};\n+use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note};\n+use clippy_utils::is_must_use_func_call;\n+use clippy_utils::ty::{is_copy, is_must_use_ty, is_type_lang_item};\n+use rustc_hir::{Expr, ExprKind, LangItem};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n@@ -103,6 +102,75 @@ declare_clippy_lint! {\n     \"calls to `std::mem::forget` with a value that implements Copy\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for calls to `std::mem::drop` with a value that does not implement `Drop`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Calling `std::mem::drop` is no different than dropping such a type. A different value may\n+    /// have been intended.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct Foo;\n+    /// let x = Foo;\n+    /// std::mem::drop(x);\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub DROP_NON_DROP,\n+    suspicious,\n+    \"call to `std::mem::drop` with a value which does not implement `Drop`\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for calls to `std::mem::forget` with a value that does not implement `Drop`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Calling `std::mem::forget` is no different than dropping such a type. A different value may\n+    /// have been intended.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct Foo;\n+    /// let x = Foo;\n+    /// std::mem::forget(x);\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub FORGET_NON_DROP,\n+    suspicious,\n+    \"call to `std::mem::forget` with a value which does not implement `Drop`\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Prevents the safe `std::mem::drop` function from being called on `std::mem::ManuallyDrop`.\n+    ///\n+    /// ### Why is this bad?\n+    /// The safe `drop` function does not drop the inner value of a `ManuallyDrop`.\n+    ///\n+    /// ### Known problems\n+    /// Does not catch cases if the user binds `std::mem::drop`\n+    /// to a different name and calls it that way.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct S;\n+    /// drop(std::mem::ManuallyDrop::new(S));\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct S;\n+    /// unsafe {\n+    ///     std::mem::ManuallyDrop::drop(&mut std::mem::ManuallyDrop::new(S));\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.49.0\"]\n+    pub UNDROPPED_MANUALLY_DROPS,\n+    correctness,\n+    \"use of safe `std::mem::drop` function to drop a std::mem::ManuallyDrop, which will not drop the inner value\"\n+}\n+\n const DROP_REF_SUMMARY: &str = \"calls to `std::mem::drop` with a reference instead of an owned value. \\\n                                 Dropping a reference does nothing\";\n const FORGET_REF_SUMMARY: &str = \"calls to `std::mem::forget` with a reference instead of an owned value. \\\n@@ -111,60 +179,65 @@ const DROP_COPY_SUMMARY: &str = \"calls to `std::mem::drop` with a value that imp\n                                  Dropping a copy leaves the original intact\";\n const FORGET_COPY_SUMMARY: &str = \"calls to `std::mem::forget` with a value that implements `Copy`. \\\n                                    Forgetting a copy leaves the original intact\";\n+const DROP_NON_DROP_SUMMARY: &str = \"call to `std::mem::drop` with a value that does not implement `Drop`. \\\n+                                 Dropping such a type only extends it's contained lifetimes\";\n+const FORGET_NON_DROP_SUMMARY: &str = \"call to `std::mem::forget` with a value that does not implement `Drop`. \\\n+                                   Forgetting such a type is the same as dropping it\";\n \n-declare_lint_pass!(DropForgetRef => [DROP_REF, FORGET_REF, DROP_COPY, FORGET_COPY]);\n+declare_lint_pass!(DropForgetRef => [\n+    DROP_REF,\n+    FORGET_REF,\n+    DROP_COPY,\n+    FORGET_COPY,\n+    DROP_NON_DROP,\n+    FORGET_NON_DROP,\n+    UNDROPPED_MANUALLY_DROPS\n+]);\n \n impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if let ExprKind::Call(path, args) = expr.kind;\n-            if let ExprKind::Path(ref qpath) = path.kind;\n-            if args.len() == 1;\n-            if let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id();\n-            then {\n-                let lint;\n-                let msg;\n-                let arg = &args[0];\n-                let arg_ty = cx.typeck_results().expr_ty(arg);\n-\n-                if let ty::Ref(..) = arg_ty.kind() {\n-                    match cx.tcx.get_diagnostic_name(def_id) {\n-                        Some(sym::mem_drop) => {\n-                            lint = DROP_REF;\n-                            msg = DROP_REF_SUMMARY.to_string();\n-                        },\n-                        Some(sym::mem_forget) => {\n-                            lint = FORGET_REF;\n-                            msg = FORGET_REF_SUMMARY.to_string();\n-                        },\n-                        _ => return,\n-                    }\n-                    span_lint_and_note(cx,\n-                                       lint,\n-                                       expr.span,\n-                                       &msg,\n-                                       Some(arg.span),\n-                                       &format!(\"argument has type `{}`\", arg_ty));\n-                } else if is_copy(cx, arg_ty) {\n-                    match cx.tcx.get_diagnostic_name(def_id) {\n-                        Some(sym::mem_drop) => {\n-                            lint = DROP_COPY;\n-                            msg = DROP_COPY_SUMMARY.to_string();\n-                        },\n-                        Some(sym::mem_forget) => {\n-                            lint = FORGET_COPY;\n-                            msg = FORGET_COPY_SUMMARY.to_string();\n-                        },\n-                        _ => return,\n-                    }\n-                    span_lint_and_note(cx,\n-                                       lint,\n-                                       expr.span,\n-                                       &msg,\n-                                       Some(arg.span),\n-                                       &format!(\"argument has type {}\", arg_ty));\n+        if let ExprKind::Call(path, [arg]) = expr.kind\n+            && let ExprKind::Path(ref qpath) = path.kind\n+            && let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id()\n+            && let Some(fn_name) = cx.tcx.get_diagnostic_name(def_id)\n+        {\n+            let arg_ty = cx.typeck_results().expr_ty(arg);\n+            let (lint, msg) = match fn_name {\n+                sym::mem_drop if arg_ty.is_ref() => (DROP_REF, DROP_REF_SUMMARY),\n+                sym::mem_forget if arg_ty.is_ref() => (FORGET_REF, FORGET_REF_SUMMARY),\n+                sym::mem_drop if is_copy(cx, arg_ty) => (DROP_COPY, DROP_COPY_SUMMARY),\n+                sym::mem_forget if is_copy(cx, arg_ty) => (FORGET_COPY, FORGET_COPY_SUMMARY),\n+                sym::mem_drop if is_type_lang_item(cx, arg_ty, LangItem::ManuallyDrop) => {\n+                    span_lint_and_help(\n+                        cx,\n+                        UNDROPPED_MANUALLY_DROPS,\n+                        expr.span,\n+                        \"the inner value of this ManuallyDrop will not be dropped\",\n+                        None,\n+                        \"to drop a `ManuallyDrop<T>`, use std::mem::ManuallyDrop::drop\",\n+                    );\n+                    return;\n                 }\n-            }\n+                sym::mem_drop\n+                    if !(arg_ty.needs_drop(cx.tcx, cx.param_env)\n+                        || is_must_use_func_call(cx, arg)\n+                        || is_must_use_ty(cx, arg_ty)) =>\n+                {\n+                    (DROP_NON_DROP, DROP_NON_DROP_SUMMARY)\n+                },\n+                sym::mem_forget if !arg_ty.needs_drop(cx.tcx, cx.param_env) => {\n+                    (FORGET_NON_DROP, FORGET_NON_DROP_SUMMARY)\n+                },\n+                _ => return,\n+            };\n+            span_lint_and_note(\n+                cx,\n+                lint,\n+                expr.span,\n+                msg,\n+                Some(arg.span),\n+                &format!(\"argument has type `{}`\", arg_ty),\n+            );\n         }\n     }\n }"}, {"sha": "fdeac8d82557fd518cb54143fe152246070bd2bb", "filename": "src/tools/clippy/clippy_lints/src/empty_structs_with_brackets.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_structs_with_brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_structs_with_brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_structs_with_brackets.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,99 @@\n+use clippy_utils::{diagnostics::span_lint_and_then, source::snippet_opt};\n+use rustc_ast::ast::{Item, ItemKind, VariantData};\n+use rustc_errors::Applicability;\n+use rustc_lexer::TokenKind;\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Finds structs without fields (a so-called \"empty struct\") that are declared with brackets.\n+    ///\n+    /// ### Why is this bad?\n+    /// Empty brackets after a struct declaration can be omitted.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct Cookie {}\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct Cookie;\n+    /// ```\n+    #[clippy::version = \"1.62.0\"]\n+    pub EMPTY_STRUCTS_WITH_BRACKETS,\n+    restriction,\n+    \"finds struct declarations with empty brackets\"\n+}\n+declare_lint_pass!(EmptyStructsWithBrackets => [EMPTY_STRUCTS_WITH_BRACKETS]);\n+\n+impl EarlyLintPass for EmptyStructsWithBrackets {\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+        let span_after_ident = item.span.with_lo(item.ident.span.hi());\n+\n+        if let ItemKind::Struct(var_data, _) = &item.kind\n+            && has_brackets(var_data)\n+            && has_no_fields(cx, var_data, span_after_ident) {\n+            span_lint_and_then(\n+                cx,\n+                EMPTY_STRUCTS_WITH_BRACKETS,\n+                span_after_ident,\n+                \"found empty brackets on struct declaration\",\n+                |diagnostic| {\n+                    diagnostic.span_suggestion_hidden(\n+                        span_after_ident,\n+                        \"remove the brackets\",\n+                        \";\".to_string(),\n+                        Applicability::MachineApplicable);\n+                    },\n+            );\n+        }\n+    }\n+}\n+\n+fn has_no_ident_token(braces_span_str: &str) -> bool {\n+    !rustc_lexer::tokenize(braces_span_str).any(|t| t.kind == TokenKind::Ident)\n+}\n+\n+fn has_brackets(var_data: &VariantData) -> bool {\n+    !matches!(var_data, VariantData::Unit(_))\n+}\n+\n+fn has_no_fields(cx: &EarlyContext<'_>, var_data: &VariantData, braces_span: Span) -> bool {\n+    if !var_data.fields().is_empty() {\n+        return false;\n+    }\n+\n+    // there might still be field declarations hidden from the AST\n+    // (conditionaly compiled code using #[cfg(..)])\n+\n+    let Some(braces_span_str) = snippet_opt(cx, braces_span) else {\n+        return false;\n+    };\n+\n+    has_no_ident_token(braces_span_str.as_ref())\n+}\n+\n+#[cfg(test)]\n+mod unit_test {\n+    use super::*;\n+\n+    #[test]\n+    fn test_has_no_ident_token() {\n+        let input = \"{ field: u8 }\";\n+        assert!(!has_no_ident_token(input));\n+\n+        let input = \"(u8, String);\";\n+        assert!(!has_no_ident_token(input));\n+\n+        let input = \" {\n+                // test = 5\n+        }\n+        \";\n+        assert!(has_no_ident_token(input));\n+\n+        let input = \" ();\";\n+        assert!(has_no_ident_token(input));\n+    }\n+}"}, {"sha": "4d6bef89bea7f09cbbfa8f618b4d26b871e371b6", "filename": "src/tools/clippy/clippy_lints/src/identity_op.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fidentity_op.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n-use clippy_utils::consts::{constant_simple, Constant};\n+use clippy_utils::consts::{constant_full_int, constant_simple, Constant, FullInt};\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::{clip, unsext};\n \n@@ -54,6 +54,7 @@ impl<'tcx> LateLintPass<'tcx> for IdentityOp {\n                     check(cx, left, -1, e.span, right.span);\n                     check(cx, right, -1, e.span, left.span);\n                 },\n+                BinOpKind::Rem => check_remainder(cx, left, right, e.span, left.span),\n                 _ => (),\n             }\n         }\n@@ -70,6 +71,18 @@ fn is_allowed(cx: &LateContext<'_>, cmp: BinOp, left: &Expr<'_>, right: &Expr<'_\n             && constant_simple(cx, cx.typeck_results(), left) == Some(Constant::Int(1)))\n }\n \n+fn check_remainder(cx: &LateContext<'_>, left: &Expr<'_>, right: &Expr<'_>, span: Span, arg: Span) {\n+    let lhs_const = constant_full_int(cx, cx.typeck_results(), left);\n+    let rhs_const = constant_full_int(cx, cx.typeck_results(), right);\n+    if match (lhs_const, rhs_const) {\n+        (Some(FullInt::S(lv)), Some(FullInt::S(rv))) => lv.abs() < rv.abs(),\n+        (Some(FullInt::U(lv)), Some(FullInt::U(rv))) => lv < rv,\n+        _ => return,\n+    } {\n+        span_ineffective_operation(cx, span, arg);\n+    }\n+}\n+\n fn check(cx: &LateContext<'_>, e: &Expr<'_>, m: i8, span: Span, arg: Span) {\n     if let Some(Constant::Int(v)) = constant_simple(cx, cx.typeck_results(), e).map(Constant::peel_refs) {\n         let check = match *cx.typeck_results().expr_ty(e).peel_refs().kind() {\n@@ -83,15 +96,19 @@ fn check(cx: &LateContext<'_>, e: &Expr<'_>, m: i8, span: Span, arg: Span) {\n             1 => v == 1,\n             _ => unreachable!(),\n         } {\n-            span_lint(\n-                cx,\n-                IDENTITY_OP,\n-                span,\n-                &format!(\n-                    \"the operation is ineffective. Consider reducing it to `{}`\",\n-                    snippet(cx, arg, \"..\")\n-                ),\n-            );\n+            span_ineffective_operation(cx, span, arg);\n         }\n     }\n }\n+\n+fn span_ineffective_operation(cx: &LateContext<'_>, span: Span, arg: Span) {\n+    span_lint(\n+        cx,\n+        IDENTITY_OP,\n+        span,\n+        &format!(\n+            \"the operation is ineffective. Consider reducing it to `{}`\",\n+            snippet(cx, arg, \"..\")\n+        ),\n+    );\n+}"}, {"sha": "4ba7477add82a420dc3b160da1782e880adf85a0", "filename": "src/tools/clippy/clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findexing_slicing.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -96,6 +96,10 @@ declare_lint_pass!(IndexingSlicing => [INDEXING_SLICING, OUT_OF_BOUNDS_INDEXING]\n \n impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n+            return;\n+        }\n+\n         if let ExprKind::Index(array, index) = &expr.kind {\n             let ty = cx.typeck_results().expr_ty(array).peel_refs();\n             if let Some(range) = higher::Range::hir(index) {\n@@ -151,6 +155,10 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n             } else {\n                 // Catchall non-range index, i.e., [n] or [n << m]\n                 if let ty::Array(..) = ty.kind() {\n+                    // Index is a const block.\n+                    if let ExprKind::ConstBlock(..) = index.kind {\n+                        return;\n+                    }\n                     // Index is a constant uint.\n                     if let Some(..) = constant(cx, cx.typeck_results(), index) {\n                         // Let rustc's `const_err` lint handle constant `usize` indexing on arrays."}, {"sha": "14ca93b5f3c14b3629a0168b421a3527797ffc8d", "filename": "src/tools/clippy/clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -23,6 +23,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n     LintId::of(booleans::LOGIC_BUG),\n     LintId::of(booleans::NONMINIMAL_BOOL),\n+    LintId::of(casts::CAST_ABS_TO_UNSIGNED),\n     LintId::of(casts::CAST_ENUM_CONSTRUCTOR),\n     LintId::of(casts::CAST_ENUM_TRUNCATION),\n     LintId::of(casts::CAST_REF_TO_MUT),\n@@ -37,6 +38,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(comparison_chain::COMPARISON_CHAIN),\n     LintId::of(copies::IFS_SAME_COND),\n     LintId::of(copies::IF_SAME_THEN_ELSE),\n+    LintId::of(crate_in_macro_def::CRATE_IN_MACRO_DEF),\n     LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n     LintId::of(dereference::NEEDLESS_BORROW),\n     LintId::of(derivable_impls::DERIVABLE_IMPLS),\n@@ -49,9 +51,12 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(double_comparison::DOUBLE_COMPARISONS),\n     LintId::of(double_parens::DOUBLE_PARENS),\n     LintId::of(drop_forget_ref::DROP_COPY),\n+    LintId::of(drop_forget_ref::DROP_NON_DROP),\n     LintId::of(drop_forget_ref::DROP_REF),\n     LintId::of(drop_forget_ref::FORGET_COPY),\n+    LintId::of(drop_forget_ref::FORGET_NON_DROP),\n     LintId::of(drop_forget_ref::FORGET_REF),\n+    LintId::of(drop_forget_ref::UNDROPPED_MANUALLY_DROPS),\n     LintId::of(duration_subsec::DURATION_SUBSEC),\n     LintId::of(entry::MAP_ENTRY),\n     LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n@@ -152,6 +157,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::CHARS_NEXT_CMP),\n     LintId::of(methods::CLONE_DOUBLE_REF),\n     LintId::of(methods::CLONE_ON_COPY),\n+    LintId::of(methods::ERR_EXPECT),\n     LintId::of(methods::EXPECT_FUN_CALL),\n     LintId::of(methods::EXTEND_WITH_DRAIN),\n     LintId::of(methods::FILTER_MAP_IDENTITY),\n@@ -175,6 +181,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n     LintId::of(methods::MAP_FLATTEN),\n     LintId::of(methods::MAP_IDENTITY),\n+    LintId::of(methods::NEEDLESS_OPTION_AS_DEREF),\n     LintId::of(methods::NEEDLESS_SPLITN),\n     LintId::of(methods::NEW_RET_NO_SELF),\n     LintId::of(methods::OK_EXPECT),\n@@ -224,7 +231,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(needless_bool::NEEDLESS_BOOL),\n     LintId::of(needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n     LintId::of(needless_late_init::NEEDLESS_LATE_INIT),\n-    LintId::of(needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF),\n     LintId::of(needless_question_mark::NEEDLESS_QUESTION_MARK),\n     LintId::of(needless_update::NEEDLESS_UPDATE),\n     LintId::of(neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),\n@@ -296,7 +302,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(types::REDUNDANT_ALLOCATION),\n     LintId::of(types::TYPE_COMPLEXITY),\n     LintId::of(types::VEC_BOX),\n-    LintId::of(undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n     LintId::of(unicode::INVISIBLE_CHARACTERS),\n     LintId::of(uninit_vec::UNINIT_VEC),\n     LintId::of(unit_hash::UNIT_HASH),"}, {"sha": "10369a855ae6e007f43469e7c58e4f38e4368376", "filename": "src/tools/clippy/clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -44,6 +44,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(methods::MANUAL_SPLIT_ONCE),\n     LintId::of(methods::MAP_FLATTEN),\n     LintId::of(methods::MAP_IDENTITY),\n+    LintId::of(methods::NEEDLESS_OPTION_AS_DEREF),\n     LintId::of(methods::NEEDLESS_SPLITN),\n     LintId::of(methods::OPTION_AS_REF_DEREF),\n     LintId::of(methods::OPTION_FILTER_MAP),\n@@ -60,7 +61,6 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(needless_bool::BOOL_COMPARISON),\n     LintId::of(needless_bool::NEEDLESS_BOOL),\n     LintId::of(needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n-    LintId::of(needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF),\n     LintId::of(needless_question_mark::NEEDLESS_QUESTION_MARK),\n     LintId::of(needless_update::NEEDLESS_UPDATE),\n     LintId::of(neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),"}, {"sha": "6bf2c4bbaedc024ad45ac7970c6fc030be7c9d67", "filename": "src/tools/clippy/clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -22,6 +22,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(drop_forget_ref::DROP_REF),\n     LintId::of(drop_forget_ref::FORGET_COPY),\n     LintId::of(drop_forget_ref::FORGET_REF),\n+    LintId::of(drop_forget_ref::UNDROPPED_MANUALLY_DROPS),\n     LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n     LintId::of(eq_op::EQ_OP),\n     LintId::of(erasing_op::ERASING_OP),\n@@ -62,7 +63,6 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n     LintId::of(transmute::WRONG_TRANSMUTE),\n     LintId::of(transmuting_null::TRANSMUTING_NULL),\n-    LintId::of(undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n     LintId::of(unicode::INVISIBLE_CHARACTERS),\n     LintId::of(uninit_vec::UNINIT_VEC),\n     LintId::of(unit_hash::UNIT_HASH),"}, {"sha": "532590aaa5a3d294d96dc5cf831318ee8a97c276", "filename": "src/tools/clippy/clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -70,6 +70,7 @@ store.register_lints(&[\n     cargo::REDUNDANT_FEATURE_NAMES,\n     cargo::WILDCARD_DEPENDENCIES,\n     case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n+    casts::CAST_ABS_TO_UNSIGNED,\n     casts::CAST_ENUM_CONSTRUCTOR,\n     casts::CAST_ENUM_TRUNCATION,\n     casts::CAST_LOSSLESS,\n@@ -97,6 +98,7 @@ store.register_lints(&[\n     copies::IF_SAME_THEN_ELSE,\n     copies::SAME_FUNCTIONS_IN_IF_CONDITION,\n     copy_iterator::COPY_ITERATOR,\n+    crate_in_macro_def::CRATE_IN_MACRO_DEF,\n     create_dir::CREATE_DIR,\n     dbg_macro::DBG_MACRO,\n     default::DEFAULT_TRAIT_ACCESS,\n@@ -122,12 +124,16 @@ store.register_lints(&[\n     double_comparison::DOUBLE_COMPARISONS,\n     double_parens::DOUBLE_PARENS,\n     drop_forget_ref::DROP_COPY,\n+    drop_forget_ref::DROP_NON_DROP,\n     drop_forget_ref::DROP_REF,\n     drop_forget_ref::FORGET_COPY,\n+    drop_forget_ref::FORGET_NON_DROP,\n     drop_forget_ref::FORGET_REF,\n+    drop_forget_ref::UNDROPPED_MANUALLY_DROPS,\n     duration_subsec::DURATION_SUBSEC,\n     else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n     empty_enum::EMPTY_ENUM,\n+    empty_structs_with_brackets::EMPTY_STRUCTS_WITH_BRACKETS,\n     entry::MAP_ENTRY,\n     enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,\n     enum_variants::ENUM_VARIANT_NAMES,\n@@ -280,6 +286,7 @@ store.register_lints(&[\n     methods::CLONE_DOUBLE_REF,\n     methods::CLONE_ON_COPY,\n     methods::CLONE_ON_REF_PTR,\n+    methods::ERR_EXPECT,\n     methods::EXPECT_FUN_CALL,\n     methods::EXPECT_USED,\n     methods::EXTEND_WITH_DRAIN,\n@@ -313,6 +320,7 @@ store.register_lints(&[\n     methods::MAP_FLATTEN,\n     methods::MAP_IDENTITY,\n     methods::MAP_UNWRAP_OR,\n+    methods::NEEDLESS_OPTION_AS_DEREF,\n     methods::NEEDLESS_SPLITN,\n     methods::NEW_RET_NO_SELF,\n     methods::OK_EXPECT,\n@@ -384,7 +392,6 @@ store.register_lints(&[\n     needless_continue::NEEDLESS_CONTINUE,\n     needless_for_each::NEEDLESS_FOR_EACH,\n     needless_late_init::NEEDLESS_LATE_INIT,\n-    needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF,\n     needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n     needless_question_mark::NEEDLESS_QUESTION_MARK,\n     needless_update::NEEDLESS_UPDATE,\n@@ -505,7 +512,6 @@ store.register_lints(&[\n     types::TYPE_COMPLEXITY,\n     types::VEC_BOX,\n     undocumented_unsafe_blocks::UNDOCUMENTED_UNSAFE_BLOCKS,\n-    undropped_manually_drops::UNDROPPED_MANUALLY_DROPS,\n     unicode::INVISIBLE_CHARACTERS,\n     unicode::NON_ASCII_LITERAL,\n     unicode::UNICODE_NOT_NFC,"}, {"sha": "4802dd877e99d12d90d85d124d164d034bad14ef", "filename": "src/tools/clippy/clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -16,6 +16,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(default_union_representation::DEFAULT_UNION_REPRESENTATION),\n     LintId::of(disallowed_script_idents::DISALLOWED_SCRIPT_IDENTS),\n     LintId::of(else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n+    LintId::of(empty_structs_with_brackets::EMPTY_STRUCTS_WITH_BRACKETS),\n     LintId::of(exhaustive_items::EXHAUSTIVE_ENUMS),\n     LintId::of(exhaustive_items::EXHAUSTIVE_STRUCTS),\n     LintId::of(exit::EXIT),"}, {"sha": "3114afac8863e69f574e172383fcc8f50414f50b", "filename": "src/tools/clippy/clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -59,6 +59,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(methods::BYTES_NTH),\n     LintId::of(methods::CHARS_LAST_CMP),\n     LintId::of(methods::CHARS_NEXT_CMP),\n+    LintId::of(methods::ERR_EXPECT),\n     LintId::of(methods::INTO_ITER_ON_REF),\n     LintId::of(methods::ITER_CLONED_COLLECT),\n     LintId::of(methods::ITER_NEXT_SLICE),"}, {"sha": "82f45b5fd58b9691e7c13360c9fe5821de283f4d", "filename": "src/tools/clippy/clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -7,8 +7,12 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n+    LintId::of(casts::CAST_ABS_TO_UNSIGNED),\n     LintId::of(casts::CAST_ENUM_CONSTRUCTOR),\n     LintId::of(casts::CAST_ENUM_TRUNCATION),\n+    LintId::of(crate_in_macro_def::CRATE_IN_MACRO_DEF),\n+    LintId::of(drop_forget_ref::DROP_NON_DROP),\n+    LintId::of(drop_forget_ref::FORGET_NON_DROP),\n     LintId::of(eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n     LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n     LintId::of(format_impl::PRINT_IN_FORMAT_IMPL),"}, {"sha": "c9b836f95808a623d02b567e5b5ca2f502aa8e33", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,5 +1,6 @@\n // error-pattern:cargo-clippy\n \n+#![feature(array_windows)]\n #![feature(binary_heap_into_iter_sorted)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n@@ -190,6 +191,7 @@ mod collapsible_match;\n mod comparison_chain;\n mod copies;\n mod copy_iterator;\n+mod crate_in_macro_def;\n mod create_dir;\n mod dbg_macro;\n mod default;\n@@ -208,6 +210,7 @@ mod drop_forget_ref;\n mod duration_subsec;\n mod else_if_without_else;\n mod empty_enum;\n+mod empty_structs_with_brackets;\n mod entry;\n mod enum_clike;\n mod enum_variants;\n@@ -305,7 +308,6 @@ mod needless_borrowed_ref;\n mod needless_continue;\n mod needless_for_each;\n mod needless_late_init;\n-mod needless_option_as_deref;\n mod needless_pass_by_value;\n mod needless_question_mark;\n mod needless_update;\n@@ -375,7 +377,6 @@ mod transmuting_null;\n mod try_err;\n mod types;\n mod undocumented_unsafe_blocks;\n-mod undropped_manually_drops;\n mod unicode;\n mod uninit_vec;\n mod unit_hash;\n@@ -533,7 +534,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(ptr::Ptr));\n     store.register_late_pass(|| Box::new(ptr_eq::PtrEq));\n     store.register_late_pass(|| Box::new(needless_bool::NeedlessBool));\n-    store.register_late_pass(|| Box::new(needless_option_as_deref::OptionNeedlessDeref));\n     store.register_late_pass(|| Box::new(needless_bool::BoolComparison));\n     store.register_late_pass(|| Box::new(needless_for_each::NeedlessForEach));\n     store.register_late_pass(|| Box::new(misc::MiscLints));\n@@ -812,7 +812,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(disallowed_methods::DisallowedMethods::new(disallowed_methods.clone())));\n     store.register_early_pass(|| Box::new(asm_syntax::InlineAsmX86AttSyntax));\n     store.register_early_pass(|| Box::new(asm_syntax::InlineAsmX86IntelSyntax));\n-    store.register_late_pass(|| Box::new(undropped_manually_drops::UndroppedManuallyDrops));\n     store.register_late_pass(|| Box::new(strings::StrToString));\n     store.register_late_pass(|| Box::new(strings::StringToString));\n     store.register_late_pass(|| Box::new(zero_sized_map_values::ZeroSizedMapValues));\n@@ -847,7 +846,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n             enable_raw_pointer_heuristic_for_send,\n         ))\n     });\n-    store.register_late_pass(move || Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks::default()));\n+    store.register_late_pass(move || Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks));\n     store.register_late_pass(|| Box::new(match_str_case_mismatch::MatchStrCaseMismatch));\n     store.register_late_pass(move || Box::new(format_args::FormatArgs));\n     store.register_late_pass(|| Box::new(trailing_empty_array::TrailingEmptyArray));\n@@ -867,6 +866,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n             ignore_publish: cargo_ignore_publish,\n         })\n     });\n+    store.register_early_pass(|| Box::new(crate_in_macro_def::CrateInMacroDef));\n+    store.register_early_pass(|| Box::new(empty_structs_with_brackets::EmptyStructsWithBrackets));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "a0bd7ad0ac647fb7d0f606e932b15a7e5a5031b3", "filename": "src/tools/clippy/clippy_lints/src/loops/single_element_loop.rs", "status": "modified", "additions": 63, "deletions": 7, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -2,9 +2,12 @@ use super::SINGLE_ELEMENT_LOOP;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::{indent_of, snippet_with_applicability};\n use if_chain::if_chain;\n+use rustc_ast::util::parser::PREC_PREFIX;\n+use rustc_ast::Mutability;\n use rustc_errors::Applicability;\n-use rustc_hir::{BorrowKind, Expr, ExprKind, Pat};\n+use rustc_hir::{is_range_literal, BorrowKind, Expr, ExprKind, Pat};\n use rustc_lint::LateContext;\n+use rustc_span::edition::Edition;\n \n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n@@ -13,31 +16,84 @@ pub(super) fn check<'tcx>(\n     body: &'tcx Expr<'_>,\n     expr: &'tcx Expr<'_>,\n ) {\n-    let arg_expr = match arg.kind {\n-        ExprKind::AddrOf(BorrowKind::Ref, _, ref_arg) => ref_arg,\n-        ExprKind::MethodCall(method, [arg], _) if method.ident.name == rustc_span::sym::iter => arg,\n+    let (arg_expression, prefix) = match arg.kind {\n+        ExprKind::AddrOf(\n+            BorrowKind::Ref,\n+            Mutability::Not,\n+            Expr {\n+                kind: ExprKind::Array([arg]),\n+                ..\n+            },\n+        ) => (arg, \"&\"),\n+        ExprKind::AddrOf(\n+            BorrowKind::Ref,\n+            Mutability::Mut,\n+            Expr {\n+                kind: ExprKind::Array([arg]),\n+                ..\n+            },\n+        ) => (arg, \"&mut \"),\n+        ExprKind::MethodCall(\n+            method,\n+            [\n+                Expr {\n+                    kind: ExprKind::Array([arg]),\n+                    ..\n+                },\n+            ],\n+            _,\n+        ) if method.ident.name == rustc_span::sym::iter => (arg, \"&\"),\n+        ExprKind::MethodCall(\n+            method,\n+            [\n+                Expr {\n+                    kind: ExprKind::Array([arg]),\n+                    ..\n+                },\n+            ],\n+            _,\n+        ) if method.ident.name.as_str() == \"iter_mut\" => (arg, \"&mut \"),\n+        ExprKind::MethodCall(\n+            method,\n+            [\n+                Expr {\n+                    kind: ExprKind::Array([arg]),\n+                    ..\n+                },\n+            ],\n+            _,\n+        ) if method.ident.name == rustc_span::sym::into_iter => (arg, \"\"),\n+        // Only check for arrays edition 2021 or later, as this case will trigger a compiler error otherwise.\n+        ExprKind::Array([arg]) if cx.tcx.sess.edition() >= Edition::Edition2021 => (arg, \"\"),\n         _ => return,\n     };\n     if_chain! {\n-        if let ExprKind::Array([arg_expression]) = arg_expr.kind;\n         if let ExprKind::Block(block, _) = body.kind;\n         if !block.stmts.is_empty();\n         then {\n             let mut applicability = Applicability::MachineApplicable;\n             let pat_snip = snippet_with_applicability(cx, pat.span, \"..\", &mut applicability);\n-            let arg_snip = snippet_with_applicability(cx, arg_expression.span, \"..\", &mut applicability);\n+            let mut arg_snip = snippet_with_applicability(cx, arg_expression.span, \"..\", &mut applicability);\n             let mut block_str = snippet_with_applicability(cx, block.span, \"..\", &mut applicability).into_owned();\n             block_str.remove(0);\n             block_str.pop();\n             let indent = \" \".repeat(indent_of(cx, block.stmts[0].span).unwrap_or(0));\n \n+            // Reference iterator from `&(mut) []` or `[].iter(_mut)()`.\n+            if !prefix.is_empty() && (\n+                // Precedence of internal expression is less than or equal to precedence of `&expr`.\n+                arg_expression.precedence().order() <= PREC_PREFIX || is_range_literal(arg_expression)\n+            ) {\n+                arg_snip = format!(\"({arg_snip})\").into();\n+            }\n+\n             span_lint_and_sugg(\n                 cx,\n                 SINGLE_ELEMENT_LOOP,\n                 expr.span,\n                 \"for loop over a single element\",\n                 \"try\",\n-                format!(\"{{\\n{}let {} = &{};{}}}\", indent, pat_snip, arg_snip, block_str),\n+                format!(\"{{\\n{indent}let {pat_snip} = {prefix}{arg_snip};{block_str}}}\"),\n                 applicability,\n             )\n         }"}, {"sha": "f552d5c1afab9268f4448af24acbd7e881cd2a84", "filename": "src/tools/clippy/clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::source::snippet;\n+use clippy_utils::source::{snippet, snippet_with_applicability, snippet_with_context};\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{iter_input_pats, method_chain_args};\n use if_chain::if_chain;\n@@ -217,36 +217,33 @@ fn lint_map_unit_fn(cx: &LateContext<'_>, stmt: &hir::Stmt<'_>, expr: &hir::Expr\n     let fn_arg = &map_args[1];\n \n     if is_unit_function(cx, fn_arg) {\n+        let mut applicability = Applicability::MachineApplicable;\n         let msg = suggestion_msg(\"function\", map_type);\n         let suggestion = format!(\n             \"if let {0}({binding}) = {1} {{ {2}({binding}) }}\",\n             variant,\n-            snippet(cx, var_arg.span, \"_\"),\n-            snippet(cx, fn_arg.span, \"_\"),\n+            snippet_with_applicability(cx, var_arg.span, \"_\", &mut applicability),\n+            snippet_with_applicability(cx, fn_arg.span, \"_\", &mut applicability),\n             binding = let_binding_name(cx, var_arg)\n         );\n \n         span_lint_and_then(cx, lint, expr.span, &msg, |diag| {\n-            diag.span_suggestion(stmt.span, \"try this\", suggestion, Applicability::MachineApplicable);\n+            diag.span_suggestion(stmt.span, \"try this\", suggestion, applicability);\n         });\n     } else if let Some((binding, closure_expr)) = unit_closure(cx, fn_arg) {\n         let msg = suggestion_msg(\"closure\", map_type);\n \n         span_lint_and_then(cx, lint, expr.span, &msg, |diag| {\n             if let Some(reduced_expr_span) = reduce_unit_expression(cx, closure_expr) {\n+                let mut applicability = Applicability::MachineApplicable;\n                 let suggestion = format!(\n                     \"if let {0}({1}) = {2} {{ {3} }}\",\n                     variant,\n-                    snippet(cx, binding.pat.span, \"_\"),\n-                    snippet(cx, var_arg.span, \"_\"),\n-                    snippet(cx, reduced_expr_span, \"_\")\n-                );\n-                diag.span_suggestion(\n-                    stmt.span,\n-                    \"try this\",\n-                    suggestion,\n-                    Applicability::MachineApplicable, // snippet\n+                    snippet_with_applicability(cx, binding.pat.span, \"_\", &mut applicability),\n+                    snippet_with_applicability(cx, var_arg.span, \"_\", &mut applicability),\n+                    snippet_with_context(cx, reduced_expr_span, var_arg.span.ctxt(), \"_\", &mut applicability).0,\n                 );\n+                diag.span_suggestion(stmt.span, \"try this\", suggestion, applicability);\n             } else {\n                 let suggestion = format!(\n                     \"if let {0}({1}) = {2} {{ ... }}\","}, {"sha": "e93b494653fc05923feecace84790bb7606d6122", "filename": "src/tools/clippy/clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -667,7 +667,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n                     overlapping_arms::check(cx, ex, arms);\n                     match_wild_enum::check(cx, ex, arms);\n                     match_as_ref::check(cx, ex, arms, expr);\n-                    needless_match::check_match(cx, ex, arms);\n+                    needless_match::check_match(cx, ex, arms, expr);\n \n                     if self.infallible_destructuring_match_linted {\n                         self.infallible_destructuring_match_linted = false;"}, {"sha": "2105a03e03a301cb8cca7aba53623766dd1fdc6e", "filename": "src/tools/clippy/clippy_lints/src/matches/needless_match.rs", "status": "modified", "additions": 86, "deletions": 74, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,37 +1,25 @@\n use super::NEEDLESS_MATCH;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{eq_expr_value, get_parent_expr, higher, is_else_clause, is_lang_ctor, peel_blocks_with_stmt};\n+use clippy_utils::ty::{is_type_diagnostic_item, same_type_and_consts};\n+use clippy_utils::{\n+    eq_expr_value, get_parent_expr_for_hir, get_parent_node, higher, is_else_clause, is_lang_ctor, over,\n+    peel_blocks_with_stmt,\n+};\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::OptionNone;\n-use rustc_hir::{Arm, BindingAnnotation, Expr, ExprKind, Pat, PatKind, Path, PathSegment, QPath, UnOp};\n+use rustc_hir::{Arm, BindingAnnotation, Expr, ExprKind, FnRetTy, Node, Pat, PatKind, Path, QPath};\n use rustc_lint::LateContext;\n use rustc_span::sym;\n+use rustc_typeck::hir_ty_to_ty;\n \n-pub(crate) fn check_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n-    // This is for avoiding collision with `match_single_binding`.\n-    if arms.len() < 2 {\n-        return;\n-    }\n-\n-    for arm in arms {\n-        if let PatKind::Wild = arm.pat.kind {\n-            let ret_expr = strip_return(arm.body);\n-            if !eq_expr_value(cx, ex, ret_expr) {\n-                return;\n-            }\n-        } else if !pat_same_as_expr(arm.pat, arm.body) {\n-            return;\n-        }\n-    }\n-\n-    if let Some(match_expr) = get_parent_expr(cx, ex) {\n+pub(crate) fn check_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr: &Expr<'_>) {\n+    if arms.len() > 1 && expr_ty_matches_p_ty(cx, ex, expr) && check_all_arms(cx, ex, arms) {\n         let mut applicability = Applicability::MachineApplicable;\n         span_lint_and_sugg(\n             cx,\n             NEEDLESS_MATCH,\n-            match_expr.span,\n+            expr.span,\n             \"this match expression is unnecessary\",\n             \"replace it with\",\n             snippet_with_applicability(cx, ex.span, \"..\", &mut applicability).to_string(),\n@@ -60,11 +48,8 @@ pub(crate) fn check_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n /// }\n /// ```\n pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>) {\n-    if_chain! {\n-        if let Some(ref if_let) = higher::IfLet::hir(cx, ex);\n-        if !is_else_clause(cx.tcx, ex);\n-        if check_if_let(cx, if_let);\n-        then {\n+    if let Some(ref if_let) = higher::IfLet::hir(cx, ex) {\n+        if !is_else_clause(cx.tcx, ex) && expr_ty_matches_p_ty(cx, if_let.let_expr, ex) && check_if_let(cx, if_let) {\n             let mut applicability = Applicability::MachineApplicable;\n             span_lint_and_sugg(\n                 cx,\n@@ -79,6 +64,19 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>) {\n     }\n }\n \n+fn check_all_arms(cx: &LateContext<'_>, match_expr: &Expr<'_>, arms: &[Arm<'_>]) -> bool {\n+    for arm in arms {\n+        let arm_expr = peel_blocks_with_stmt(arm.body);\n+        if let PatKind::Wild = arm.pat.kind {\n+            return eq_expr_value(cx, match_expr, strip_return(arm_expr));\n+        } else if !pat_same_as_expr(arm.pat, arm_expr) {\n+            return false;\n+        }\n+    }\n+\n+    true\n+}\n+\n fn check_if_let(cx: &LateContext<'_>, if_let: &higher::IfLet<'_>) -> bool {\n     if let Some(if_else) = if_let.if_else {\n         if !pat_same_as_expr(if_let.let_pat, peel_blocks_with_stmt(if_let.if_then)) {\n@@ -92,18 +90,21 @@ fn check_if_let(cx: &LateContext<'_>, if_let: &higher::IfLet<'_>) -> bool {\n \n         if matches!(if_else.kind, ExprKind::Block(..)) {\n             let else_expr = peel_blocks_with_stmt(if_else);\n+            if matches!(else_expr.kind, ExprKind::Block(..)) {\n+                return false;\n+            }\n             let ret = strip_return(else_expr);\n             let let_expr_ty = cx.typeck_results().expr_ty(if_let.let_expr);\n             if is_type_diagnostic_item(cx, let_expr_ty, sym::Option) {\n                 if let ExprKind::Path(ref qpath) = ret.kind {\n                     return is_lang_ctor(cx, qpath, OptionNone) || eq_expr_value(cx, if_let.let_expr, ret);\n                 }\n-            } else {\n-                return eq_expr_value(cx, if_let.let_expr, ret);\n+                return true;\n             }\n-            return true;\n+            return eq_expr_value(cx, if_let.let_expr, ret);\n         }\n     }\n+\n     false\n }\n \n@@ -116,48 +117,70 @@ fn strip_return<'hir>(expr: &'hir Expr<'hir>) -> &'hir Expr<'hir> {\n     }\n }\n \n+/// Manually check for coercion casting by checking if the type of the match operand or let expr\n+/// differs with the assigned local variable or the funtion return type.\n+fn expr_ty_matches_p_ty(cx: &LateContext<'_>, expr: &Expr<'_>, p_expr: &Expr<'_>) -> bool {\n+    if let Some(p_node) = get_parent_node(cx.tcx, p_expr.hir_id) {\n+        match p_node {\n+            // Compare match_expr ty with local in `let local = match match_expr {..}`\n+            Node::Local(local) => {\n+                let results = cx.typeck_results();\n+                return same_type_and_consts(results.node_type(local.hir_id), results.expr_ty(expr));\n+            },\n+            // compare match_expr ty with RetTy in `fn foo() -> RetTy`\n+            Node::Item(..) => {\n+                if let Some(fn_decl) = p_node.fn_decl() {\n+                    if let FnRetTy::Return(ret_ty) = fn_decl.output {\n+                        return same_type_and_consts(hir_ty_to_ty(cx.tcx, ret_ty), cx.typeck_results().expr_ty(expr));\n+                    }\n+                }\n+            },\n+            // check the parent expr for this whole block `{ match match_expr {..} }`\n+            Node::Block(block) => {\n+                if let Some(block_parent_expr) = get_parent_expr_for_hir(cx, block.hir_id) {\n+                    return expr_ty_matches_p_ty(cx, expr, block_parent_expr);\n+                }\n+            },\n+            // recursively call on `if xxx {..}` etc.\n+            Node::Expr(p_expr) => {\n+                return expr_ty_matches_p_ty(cx, expr, p_expr);\n+            },\n+            _ => {},\n+        }\n+    }\n+    false\n+}\n+\n fn pat_same_as_expr(pat: &Pat<'_>, expr: &Expr<'_>) -> bool {\n     let expr = strip_return(expr);\n     match (&pat.kind, &expr.kind) {\n         // Example: `Some(val) => Some(val)`\n-        (\n-            PatKind::TupleStruct(QPath::Resolved(_, path), [first_pat, ..], _),\n-            ExprKind::Call(call_expr, [first_param, ..]),\n-        ) => {\n+        (PatKind::TupleStruct(QPath::Resolved(_, path), tuple_params, _), ExprKind::Call(call_expr, call_params)) => {\n             if let ExprKind::Path(QPath::Resolved(_, call_path)) = call_expr.kind {\n-                if has_identical_segments(path.segments, call_path.segments)\n-                    && has_same_non_ref_symbol(first_pat, first_param)\n-                {\n-                    return true;\n-                }\n+                return over(path.segments, call_path.segments, |pat_seg, call_seg| {\n+                    pat_seg.ident.name == call_seg.ident.name\n+                }) && same_non_ref_symbols(tuple_params, call_params);\n             }\n         },\n-        // Example: `val => val`, or `ref val => *val`\n-        (PatKind::Binding(annot, _, pat_ident, _), _) => {\n-            let new_expr = if let (\n-                BindingAnnotation::Ref | BindingAnnotation::RefMut,\n-                ExprKind::Unary(UnOp::Deref, operand_expr),\n-            ) = (annot, &expr.kind)\n-            {\n-                operand_expr\n-            } else {\n-                expr\n-            };\n-\n-            if let ExprKind::Path(QPath::Resolved(\n+        // Example: `val => val`\n+        (\n+            PatKind::Binding(annot, _, pat_ident, _),\n+            ExprKind::Path(QPath::Resolved(\n                 _,\n                 Path {\n                     segments: [first_seg, ..],\n                     ..\n                 },\n-            )) = new_expr.kind\n-            {\n-                return pat_ident.name == first_seg.ident.name;\n-            }\n+            )),\n+        ) => {\n+            return !matches!(annot, BindingAnnotation::Ref | BindingAnnotation::RefMut)\n+                && pat_ident.name == first_seg.ident.name;\n         },\n         // Example: `Custom::TypeA => Custom::TypeB`, or `None => None`\n         (PatKind::Path(QPath::Resolved(_, p_path)), ExprKind::Path(QPath::Resolved(_, e_path))) => {\n-            return has_identical_segments(p_path.segments, e_path.segments);\n+            return over(p_path.segments, e_path.segments, |p_seg, e_seg| {\n+                p_seg.ident.name == e_seg.ident.name\n+            });\n         },\n         // Example: `5 => 5`\n         (PatKind::Lit(pat_lit_expr), ExprKind::Lit(expr_spanned)) => {\n@@ -171,27 +194,16 @@ fn pat_same_as_expr(pat: &Pat<'_>, expr: &Expr<'_>) -> bool {\n     false\n }\n \n-fn has_identical_segments(left_segs: &[PathSegment<'_>], right_segs: &[PathSegment<'_>]) -> bool {\n-    if left_segs.len() != right_segs.len() {\n+fn same_non_ref_symbols(pats: &[Pat<'_>], exprs: &[Expr<'_>]) -> bool {\n+    if pats.len() != exprs.len() {\n         return false;\n     }\n-    for i in 0..left_segs.len() {\n-        if left_segs[i].ident.name != right_segs[i].ident.name {\n-            return false;\n-        }\n-    }\n-    true\n-}\n \n-fn has_same_non_ref_symbol(pat: &Pat<'_>, expr: &Expr<'_>) -> bool {\n-    if_chain! {\n-        if let PatKind::Binding(annot, _, pat_ident, _) = pat.kind;\n-        if !matches!(annot, BindingAnnotation::Ref | BindingAnnotation::RefMut);\n-        if let ExprKind::Path(QPath::Resolved(_, Path {segments: [first_seg, ..], .. })) = expr.kind;\n-        then {\n-            return pat_ident.name == first_seg.ident.name;\n+    for i in 0..pats.len() {\n+        if !pat_same_as_expr(&pats[i], &exprs[i]) {\n+            return false;\n         }\n     }\n \n-    false\n+    true\n }"}, {"sha": "44857d61fef8f9461e03eca830e4adccf882ca88", "filename": "src/tools/clippy/clippy_lints/src/methods/bytes_nth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, recv: &'tcx E\n         cx,\n         BYTES_NTH,\n         expr.span,\n-        &format!(\"called `.byte().nth()` on a `{}`\", caller_type),\n+        &format!(\"called `.bytes().nth()` on a `{}`\", caller_type),\n         \"try\",\n         format!(\n             \"{}.as_bytes().get({})\","}, {"sha": "be9d4ad94fb8ef580e60fbd90f9454d2ed1a817b", "filename": "src/tools/clippy/clippy_lints/src/methods/err_expect.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,60 @@\n+use super::ERR_EXPECT;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::ty::implements_trait;\n+use clippy_utils::{meets_msrv, msrvs, ty::is_type_diagnostic_item};\n+use rustc_errors::Applicability;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_middle::ty::Ty;\n+use rustc_semver::RustcVersion;\n+use rustc_span::{sym, Span};\n+\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    _expr: &rustc_hir::Expr<'_>,\n+    recv: &rustc_hir::Expr<'_>,\n+    msrv: Option<&RustcVersion>,\n+    expect_span: Span,\n+    err_span: Span,\n+) {\n+    if_chain! {\n+        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n+        // Test the version to make sure the lint can be showed (expect_err has been\n+        // introduced in rust 1.17.0 : https://github.com/rust-lang/rust/pull/38982)\n+        if meets_msrv(msrv, &msrvs::EXPECT_ERR);\n+\n+        // Grabs the `Result<T, E>` type\n+        let result_type = cx.typeck_results().expr_ty(recv);\n+        // Tests if the T type in a `Result<T, E>` is not None\n+        if let Some(data_type) = get_data_type(cx, result_type);\n+        // Tests if the T type in a `Result<T, E>` implements debug\n+        if has_debug_impl(data_type, cx);\n+\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                ERR_EXPECT,\n+                err_span.to(expect_span),\n+                \"called `.err().expect()` on a `Result` value\",\n+                \"try\",\n+                \"expect_err\".to_string(),\n+                Applicability::MachineApplicable\n+        );\n+        }\n+    };\n+}\n+\n+/// Given a `Result<T, E>` type, return its data (`T`).\n+fn get_data_type<'a>(cx: &LateContext<'_>, ty: Ty<'a>) -> Option<Ty<'a>> {\n+    match ty.kind() {\n+        ty::Adt(_, substs) if is_type_diagnostic_item(cx, ty, sym::Result) => substs.types().next(),\n+        _ => None,\n+    }\n+}\n+\n+/// Given a type, very if the Debug trait has been impl'd\n+fn has_debug_impl<'tcx>(ty: Ty<'tcx>, cx: &LateContext<'tcx>) -> bool {\n+    cx.tcx\n+        .get_diagnostic_item(sym::Debug)\n+        .map_or(false, |debug| implements_trait(cx, ty, debug, &[]))\n+}"}, {"sha": "9651a52be4e7281a28a4891a942c5d415d3de761", "filename": "src/tools/clippy/clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -48,13 +48,11 @@ pub fn is_clone_like(cx: &LateContext<'_>, method_name: &str, method_def_id: hir\n         \"to_os_string\" => is_diag_item_method(cx, method_def_id, sym::OsStr),\n         \"to_owned\" => is_diag_trait_item(cx, method_def_id, sym::ToOwned),\n         \"to_path_buf\" => is_diag_item_method(cx, method_def_id, sym::Path),\n-        \"to_vec\" => {\n-            cx.tcx.impl_of_method(method_def_id)\n-                .filter(|&impl_did| {\n-                    cx.tcx.type_of(impl_did).is_slice() && cx.tcx.impl_trait_ref(impl_did).is_none()\n-                })\n-                .is_some()\n-        },\n+        \"to_vec\" => cx\n+            .tcx\n+            .impl_of_method(method_def_id)\n+            .filter(|&impl_did| cx.tcx.type_of(impl_did).is_slice() && cx.tcx.impl_trait_ref(impl_did).is_none())\n+            .is_some(),\n         _ => false,\n     }\n }"}, {"sha": "54c9ca435a447d8e870403ecf78cc48a5ce7d09a", "filename": "src/tools/clippy/clippy_lints/src/methods/iter_overeager_cloned.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,11 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet;\n-use clippy_utils::ty::{get_iterator_item_ty, is_copy};\n+use clippy_utils::ty::{get_iterator_item_ty, implements_trait, is_copy};\n use itertools::Itertools;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n+use rustc_span::sym;\n use std::ops::Not;\n \n use super::ITER_OVEREAGER_CLONED;\n@@ -20,9 +21,16 @@ pub(super) fn check<'tcx>(\n     map_arg: &[hir::Expr<'_>],\n ) {\n     // Check if it's iterator and get type associated with `Item`.\n-    let inner_ty = match get_iterator_item_ty(cx, cx.typeck_results().expr_ty_adjusted(recv)) {\n-        Some(ty) => ty,\n-        _ => return,\n+    let inner_ty = if_chain! {\n+        if let Some(iterator_trait_id) = cx.tcx.get_diagnostic_item(sym::Iterator);\n+        let recv_ty = cx.typeck_results().expr_ty(recv);\n+        if implements_trait(cx, recv_ty, iterator_trait_id, &[]);\n+        if let Some(inner_ty) = get_iterator_item_ty(cx, cx.typeck_results().expr_ty_adjusted(recv));\n+        then {\n+            inner_ty\n+        } else {\n+            return;\n+        }\n     };\n \n     match inner_ty.kind() {"}, {"sha": "862a9578e6ff26d76296e18ad7b78a9e53ec36d0", "filename": "src/tools/clippy/clippy_lints/src/methods/map_identity.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -13,6 +13,7 @@ pub(super) fn check(\n     expr: &hir::Expr<'_>,\n     caller: &hir::Expr<'_>,\n     map_arg: &hir::Expr<'_>,\n+    name: &str,\n     _map_span: Span,\n ) {\n     let caller_ty = cx.typeck_results().expr_ty(caller);\n@@ -29,7 +30,7 @@ pub(super) fn check(\n                 MAP_IDENTITY,\n                 sugg_span,\n                 \"unnecessary map of the identity function\",\n-                \"remove the call to `map`\",\n+                &format!(\"remove the call to `{}`\", name),\n                 String::new(),\n                 Applicability::MachineApplicable,\n             )"}, {"sha": "70d021a1668eb7ffb68b2cce0a79cc5c50d6195d", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 62, "deletions": 4, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -9,6 +9,7 @@ mod chars_next_cmp_with_unwrap;\n mod clone_on_copy;\n mod clone_on_ref_ptr;\n mod cloned_instead_of_copied;\n+mod err_expect;\n mod expect_fun_call;\n mod expect_used;\n mod extend_with_drain;\n@@ -40,6 +41,7 @@ mod map_collect_result_unit;\n mod map_flatten;\n mod map_identity;\n mod map_unwrap_or;\n+mod needless_option_as_deref;\n mod ok_expect;\n mod option_as_ref_deref;\n mod option_map_or_none;\n@@ -362,6 +364,29 @@ declare_clippy_lint! {\n     \"using `ok().expect()`, which gives worse error messages than calling `expect` directly on the Result\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `.err().expect()` calls on the `Result` type.\n+    ///\n+    /// ### Why is this bad?\n+    /// `.expect_err()` can be called directly to avoid the extra type conversion from `err()`.\n+    ///\n+    /// ### Example\n+    /// ```should_panic\n+    /// let x: Result<u32, &str> = Ok(10);\n+    /// x.err().expect(\"Testing err().expect()\");\n+    /// ```\n+    /// Use instead:\n+    /// ```should_panic\n+    /// let x: Result<u32, &str> = Ok(10);\n+    /// x.expect_err(\"Testing expect_err\");\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub ERR_EXPECT,\n+    style,\n+    r#\"using `.err().expect(\"\")` when `.expect_err(\"\")` can be used\"#\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for usages of `_.unwrap_or_else(Default::default)` on `Option` and\n@@ -2055,7 +2080,7 @@ declare_clippy_lint! {\n     /// Checks for use of `.collect::<Vec<String>>().join(\"\")` on iterators.\n     ///\n     /// ### Why is this bad?\n-    /// `.collect::<String>()` is more concise and usually more performant\n+    /// `.collect::<String>()` is more concise and might be more performant\n     ///\n     /// ### Example\n     /// ```rust\n@@ -2070,15 +2095,42 @@ declare_clippy_lint! {\n     /// println!(\"{}\", output);\n     /// ```\n     /// ### Known problems\n-    /// While `.collect::<String>()` is more performant in most cases, there are cases where\n+    /// While `.collect::<String>()` is sometimes more performant, there are cases where\n     /// using `.collect::<String>()` over `.collect::<Vec<String>>().join(\"\")`\n     /// will prevent loop unrolling and will result in a negative performance impact.\n+    ///\n+    /// Additionlly, differences have been observed between aarch64 and x86_64 assembly output,\n+    /// with aarch64 tending to producing faster assembly in more cases when using `.collect::<String>()`\n     #[clippy::version = \"1.61.0\"]\n     pub UNNECESSARY_JOIN,\n     pedantic,\n     \"using `.collect::<Vec<String>>().join(\\\"\\\")` on an iterator\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for no-op uses of `Option::{as_deref, as_deref_mut}`,\n+    /// for example, `Option<&T>::as_deref()` returns the same type.\n+    ///\n+    /// ### Why is this bad?\n+    /// Redundant code and improving readability.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let a = Some(&1);\n+    /// let b = a.as_deref(); // goes from Option<&i32> to Option<&i32>\n+    /// ```\n+    /// Could be written as:\n+    /// ```rust\n+    /// let a = Some(&1);\n+    /// let b = a;\n+    /// ```\n+    #[clippy::version = \"1.57.0\"]\n+    pub NEEDLESS_OPTION_AS_DEREF,\n+    complexity,\n+    \"no-op use of `deref` or `deref_mut` method to `Option`.\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -2165,6 +2217,8 @@ impl_lint_pass!(Methods => [\n     NEEDLESS_SPLITN,\n     UNNECESSARY_TO_OWNED,\n     UNNECESSARY_JOIN,\n+    ERR_EXPECT,\n+    NEEDLESS_OPTION_AS_DEREF,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -2397,6 +2451,9 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                     unnecessary_lazy_eval::check(cx, expr, recv, arg, \"and\");\n                 }\n             },\n+            (\"as_deref\" | \"as_deref_mut\", []) => {\n+                needless_option_as_deref::check(cx, expr, recv, name);\n+            },\n             (\"as_mut\", []) => useless_asref::check(cx, expr, \"as_mut\", recv),\n             (\"as_ref\", []) => useless_asref::check(cx, expr, \"as_ref\", recv),\n             (\"assume_init\", []) => uninit_assumed_init::check(cx, expr, recv),\n@@ -2428,6 +2485,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n             },\n             (\"expect\", [_]) => match method_call(recv) {\n                 Some((\"ok\", [recv], _)) => ok_expect::check(cx, expr, recv),\n+                Some((\"err\", [recv], err_span)) => err_expect::check(cx, expr, recv, msrv, span, err_span),\n                 _ => expect_used::check(cx, expr, recv),\n             },\n             (\"extend\", [arg]) => {\n@@ -2472,7 +2530,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                     }\n                 }\n             },\n-            (\"map\", [m_arg]) => {\n+            (name @ (\"map\" | \"map_err\"), [m_arg]) => {\n                 if let Some((name, [recv2, args @ ..], span2)) = method_call(recv) {\n                     match (name, args) {\n                         (\"as_mut\", []) => option_as_ref_deref::check(cx, expr, recv2, m_arg, true, msrv),\n@@ -2484,7 +2542,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                         _ => {},\n                     }\n                 }\n-                map_identity::check(cx, expr, recv, m_arg, span);\n+                map_identity::check(cx, expr, recv, m_arg, name, span);\n             },\n             (\"map_or\", [def, map]) => option_map_or_none::check(cx, expr, recv, def, map),\n             (name @ \"next\", args @ []) => {"}, {"sha": "7030baf19ff5cf9bd9fd714a8ac9e319e957a54d", "filename": "src/tools/clippy/clippy_lints/src/methods/needless_option_as_deref.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_option_as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_option_as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_option_as_deref.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,37 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::path_res;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::usage::local_used_after_expr;\n+use rustc_errors::Applicability;\n+use rustc_hir::def::Res;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+use super::NEEDLESS_OPTION_AS_DEREF;\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, name: &str) {\n+    let typeck = cx.typeck_results();\n+    let outer_ty = typeck.expr_ty(expr);\n+\n+    if is_type_diagnostic_item(cx, outer_ty, sym::Option) && outer_ty == typeck.expr_ty(recv) {\n+        if name == \"as_deref_mut\" && recv.is_syntactic_place_expr() {\n+            let Res::Local(binding_id) = path_res(cx, recv) else { return };\n+\n+            if local_used_after_expr(cx, binding_id, recv) {\n+                return;\n+            }\n+        }\n+\n+        span_lint_and_sugg(\n+            cx,\n+            NEEDLESS_OPTION_AS_DEREF,\n+            expr.span,\n+            \"derefed type is same as origin\",\n+            \"try this\",\n+            snippet_opt(cx, recv.span).unwrap(),\n+            Applicability::MachineApplicable,\n+        );\n+    }\n+}"}, {"sha": "0a393657267b07833371498eb52b5015faf8c874", "filename": "src/tools/clippy/clippy_lints/src/module_style.rs", "status": "modified", "additions": 26, "deletions": 40, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmodule_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmodule_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmodule_style.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,17 +1,14 @@\n-use std::{\n-    ffi::OsString,\n-    path::{Component, Path},\n-};\n-\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_lint::{EarlyContext, EarlyLintPass, Level, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{FileName, RealFileName, SourceFile, Span, SyntaxContext};\n+use std::ffi::OsStr;\n+use std::path::{Component, Path};\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks that module layout uses only self named module files, bans mod.rs files.\n+    /// Checks that module layout uses only self named module files, bans `mod.rs` files.\n     ///\n     /// ### Why is this bad?\n     /// Having multiple module layout styles in a project can be confusing.\n@@ -40,7 +37,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks that module layout uses only mod.rs files.\n+    /// Checks that module layout uses only `mod.rs` files.\n     ///\n     /// ### Why is this bad?\n     /// Having multiple module layout styles in a project can be confusing.\n@@ -82,11 +79,7 @@ impl EarlyLintPass for ModStyle {\n \n         let files = cx.sess().source_map().files();\n \n-        let trim_to_src = if let RealFileName::LocalPath(p) = &cx.sess().opts.working_dir {\n-            p.to_string_lossy()\n-        } else {\n-            return;\n-        };\n+        let RealFileName::LocalPath(trim_to_src) = &cx.sess().opts.working_dir else { return };\n \n         // `folder_segments` is all unique folder path segments `path/to/foo.rs` gives\n         // `[path, to]` but not foo\n@@ -97,26 +90,27 @@ impl EarlyLintPass for ModStyle {\n         // `{ foo => path/to/foo.rs, .. }\n         let mut file_map = FxHashMap::default();\n         for file in files.iter() {\n-            match &file.name {\n-                FileName::Real(RealFileName::LocalPath(lp))\n-                    if lp.to_string_lossy().starts_with(trim_to_src.as_ref()) =>\n-                {\n-                    let p = lp.to_string_lossy();\n-                    let path = Path::new(p.trim_start_matches(trim_to_src.as_ref()));\n-                    if let Some(stem) = path.file_stem() {\n-                        file_map.insert(stem.to_os_string(), (file, path.to_owned()));\n-                    }\n-                    process_paths_for_mod_files(path, &mut folder_segments, &mut mod_folders);\n-                    check_self_named_mod_exists(cx, path, file);\n-                },\n-                _ => {},\n+            if let FileName::Real(RealFileName::LocalPath(lp)) = &file.name {\n+                let path = if lp.is_relative() {\n+                    lp\n+                } else if let Ok(relative) = lp.strip_prefix(trim_to_src) {\n+                    relative\n+                } else {\n+                    continue;\n+                };\n+\n+                if let Some(stem) = path.file_stem() {\n+                    file_map.insert(stem, (file, path));\n+                }\n+                process_paths_for_mod_files(path, &mut folder_segments, &mut mod_folders);\n+                check_self_named_mod_exists(cx, path, file);\n             }\n         }\n \n         for folder in &folder_segments {\n             if !mod_folders.contains(folder) {\n                 if let Some((file, path)) = file_map.get(folder) {\n-                    let mut correct = path.clone();\n+                    let mut correct = path.to_path_buf();\n                     correct.pop();\n                     correct.push(folder);\n                     correct.push(\"mod.rs\");\n@@ -138,25 +132,17 @@ impl EarlyLintPass for ModStyle {\n \n /// For each `path` we add each folder component to `folder_segments` and if the file name\n /// is `mod.rs` we add it's parent folder to `mod_folders`.\n-fn process_paths_for_mod_files(\n-    path: &Path,\n-    folder_segments: &mut FxHashSet<OsString>,\n-    mod_folders: &mut FxHashSet<OsString>,\n+fn process_paths_for_mod_files<'a>(\n+    path: &'a Path,\n+    folder_segments: &mut FxHashSet<&'a OsStr>,\n+    mod_folders: &mut FxHashSet<&'a OsStr>,\n ) {\n     let mut comp = path.components().rev().peekable();\n     let _ = comp.next();\n     if path.ends_with(\"mod.rs\") {\n-        mod_folders.insert(comp.peek().map(|c| c.as_os_str().to_owned()).unwrap_or_default());\n+        mod_folders.insert(comp.peek().map(|c| c.as_os_str()).unwrap_or_default());\n     }\n-    let folders = comp\n-        .filter_map(|c| {\n-            if let Component::Normal(s) = c {\n-                Some(s.to_os_string())\n-            } else {\n-                None\n-            }\n-        })\n-        .collect::<Vec<_>>();\n+    let folders = comp.filter_map(|c| if let Component::Normal(s) = c { Some(s) } else { None });\n     folder_segments.extend(folders);\n }\n "}, {"sha": "9d3d7d1f24cbc3dfa86f5a8166fd38eadc02ecd2", "filename": "src/tools/clippy/clippy_lints/src/needless_option_as_deref.rs", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -1,65 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet_opt;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::symbol::sym;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for no-op uses of Option::{as_deref,as_deref_mut},\n-    /// for example, `Option<&T>::as_deref()` returns the same type.\n-    ///\n-    /// ### Why is this bad?\n-    /// Redundant code and improving readability.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let a = Some(&1);\n-    /// let b = a.as_deref(); // goes from Option<&i32> to Option<&i32>\n-    /// ```\n-    /// Could be written as:\n-    /// ```rust\n-    /// let a = Some(&1);\n-    /// let b = a;\n-    /// ```\n-    #[clippy::version = \"1.57.0\"]\n-    pub NEEDLESS_OPTION_AS_DEREF,\n-    complexity,\n-    \"no-op use of `deref` or `deref_mut` method to `Option`.\"\n-}\n-\n-declare_lint_pass!(OptionNeedlessDeref=> [\n-    NEEDLESS_OPTION_AS_DEREF,\n-]);\n-\n-impl<'tcx> LateLintPass<'tcx> for OptionNeedlessDeref {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if expr.span.from_expansion() {\n-            return;\n-        }\n-        let typeck = cx.typeck_results();\n-        let outer_ty = typeck.expr_ty(expr);\n-\n-        if_chain! {\n-            if is_type_diagnostic_item(cx,outer_ty,sym::Option);\n-            if let ExprKind::MethodCall(path, [sub_expr], _) = expr.kind;\n-            let symbol = path.ident.as_str();\n-            if symbol == \"as_deref\" || symbol == \"as_deref_mut\";\n-            if outer_ty == typeck.expr_ty(sub_expr);\n-            then{\n-                span_lint_and_sugg(\n-                    cx,\n-                    NEEDLESS_OPTION_AS_DEREF,\n-                    expr.span,\n-                    \"derefed type is same as origin\",\n-                    \"try this\",\n-                    snippet_opt(cx,sub_expr.span).unwrap(),\n-                    Applicability::MachineApplicable\n-                );\n-            }\n-        }\n-    }\n-}"}, {"sha": "2f3007658ea6296f8e2b7b1c541f0224cc10fca0", "filename": "src/tools/clippy/clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -78,6 +78,10 @@ impl<'tcx> LateLintPass<'tcx> for PanicUnimplemented {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         let Some(macro_call) = root_macro_call_first_node(cx, expr) else { return };\n         if is_panic(cx, macro_call.def_id) {\n+            if cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n+                return;\n+            }\n+\n             span_lint(\n                 cx,\n                 PANIC,"}, {"sha": "48a2666a2e0cef399b2cfeb4a5fd3e808d9b1655", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -601,9 +601,7 @@ fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args:\n                             },\n                             // If the types match check for methods which exist on both types. e.g. `Vec::len` and\n                             // `slice::len`\n-                            ty::Adt(def, _)\n-                                if def.did() == args.ty_did =>\n-                            {\n+                            ty::Adt(def, _) if def.did() == args.ty_did => {\n                                 set_skip_flag();\n                             },\n                             _ => (),"}, {"sha": "342f23f030cd06fa3bf3c55355f50f92c2ede39e", "filename": "src/tools/clippy/clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -410,9 +410,10 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n             if let Some(def_id) = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id();\n             if cx.tcx.is_diagnostic_item(sym::transmute, def_id);\n             then {\n-                // Avoid suggesting from/to bits and dereferencing raw pointers in const contexts.\n-                // See https://github.com/rust-lang/rust/issues/73736 for progress on making them `const fn`.\n-                // And see https://github.com/rust-lang/rust/issues/51911 for dereferencing raw pointers.\n+                // Avoid suggesting non-const operations in const contexts:\n+                // - from/to bits (https://github.com/rust-lang/rust/issues/73736)\n+                // - dereferencing raw pointers (https://github.com/rust-lang/rust/issues/51911)\n+                // - char conversions (https://github.com/rust-lang/rust/issues/89259)\n                 let const_context = in_constant(cx, e.hir_id);\n \n                 let from_ty = cx.typeck_results().expr_ty_adjusted(arg);\n@@ -427,7 +428,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 let linted = wrong_transmute::check(cx, e, from_ty, to_ty)\n                     | crosspointer_transmute::check(cx, e, from_ty, to_ty)\n                     | transmute_ptr_to_ref::check(cx, e, from_ty, to_ty, arg, qpath)\n-                    | transmute_int_to_char::check(cx, e, from_ty, to_ty, arg)\n+                    | transmute_int_to_char::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | transmute_ref_to_ref::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | transmute_ptr_to_ptr::check(cx, e, from_ty, to_ty, arg)\n                     | transmute_int_to_bool::check(cx, e, from_ty, to_ty, arg)"}, {"sha": "9e1823c373bfdb4d641536bfd04b10157eda1b1c", "filename": "src/tools/clippy/clippy_lints/src/transmute/transmute_int_to_char.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -15,9 +15,10 @@ pub(super) fn check<'tcx>(\n     from_ty: Ty<'tcx>,\n     to_ty: Ty<'tcx>,\n     arg: &'tcx Expr<'_>,\n+    const_context: bool,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n-        (ty::Int(ty::IntTy::I32) | ty::Uint(ty::UintTy::U32), &ty::Char) => {\n+        (ty::Int(ty::IntTy::I32) | ty::Uint(ty::UintTy::U32), &ty::Char) if !const_context => {\n             span_lint_and_then(\n                 cx,\n                 TRANSMUTE_INT_TO_CHAR,"}, {"sha": "786e7bfc56f6ecbb00e442e72bd530f865d26100", "filename": "src/tools/clippy/clippy_lints/src/transmute/transmute_ref_to_ref.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -32,18 +32,20 @@ pub(super) fn check<'tcx>(\n                     \"\"\n                 };\n \n+                let snippet = snippet(cx, arg.span, \"..\");\n+\n                 span_lint_and_sugg(\n                     cx,\n                     TRANSMUTE_BYTES_TO_STR,\n                     e.span,\n                     &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n                     \"consider using\",\n-                    format!(\n-                        \"std::str::from_utf8{}({}).unwrap()\",\n-                        postfix,\n-                        snippet(cx, arg.span, \"..\"),\n-                    ),\n-                    Applicability::Unspecified,\n+                    if const_context {\n+                        format!(\"std::str::from_utf8_unchecked{postfix}({snippet})\")\n+                    } else {\n+                        format!(\"std::str::from_utf8{postfix}({snippet}).unwrap()\")\n+                    },\n+                    Applicability::MaybeIncorrect,\n                 );\n                 triggered = true;\n             } else {"}, {"sha": "c8912a18f1854e3dcf5ee2252b1dcb52ced5d754", "filename": "src/tools/clippy/clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 142, "deletions": 167, "changes": 309, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,23 +1,38 @@\n-use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::is_lint_allowed;\n-use clippy_utils::source::{indent_of, reindent_multiline, snippet};\n-use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{Block, BlockCheckMode, Expr, ExprKind, HirId, Local, UnsafeSource};\n-use rustc_lexer::TokenKind;\n-use rustc_lint::{LateContext, LateLintPass};\n+use clippy_utils::source::walk_span_to_context;\n+use rustc_data_structures::sync::Lrc;\n+use rustc_hir::{Block, BlockCheckMode, UnsafeSource};\n+use rustc_lexer::{tokenize, TokenKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::TyCtxt;\n-use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{BytePos, Span};\n-use std::borrow::Cow;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{BytePos, Pos, SyntaxContext};\n \n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for `unsafe` blocks without a `// SAFETY: ` comment\n     /// explaining why the unsafe operations performed inside\n     /// the block are safe.\n     ///\n+    /// Note the comment must appear on the line(s) preceding the unsafe block\n+    /// with nothing appearing in between. The following is ok:\n+    /// ```ignore\n+    /// foo(\n+    ///     // SAFETY:\n+    ///     // This is a valid safety comment\n+    ///     unsafe { *x }\n+    /// )\n+    /// ```\n+    /// But neither of these are:\n+    /// ```ignore\n+    /// // SAFETY:\n+    /// // This is not a valid safety comment\n+    /// foo(\n+    ///     /* SAFETY: Neither is this */ unsafe { *x },\n+    /// );\n+    /// ```\n+    ///\n     /// ### Why is this bad?\n     /// Undocumented unsafe blocks can make it difficult to\n     /// read and maintain code, as well as uncover unsoundness\n@@ -44,179 +59,139 @@ declare_clippy_lint! {\n     \"creating an unsafe block without explaining why it is safe\"\n }\n \n-impl_lint_pass!(UndocumentedUnsafeBlocks => [UNDOCUMENTED_UNSAFE_BLOCKS]);\n-\n-#[derive(Default)]\n-pub struct UndocumentedUnsafeBlocks {\n-    pub local_level: u32,\n-    pub local_span: Option<Span>,\n-    // The local was already checked for an overall safety comment\n-    // There is no need to continue checking the blocks in the local\n-    pub local_checked: bool,\n-    // Since we can only check the blocks from expanded macros\n-    // We have to omit the suggestion due to the actual definition\n-    // Not being available to us\n-    pub macro_expansion: bool,\n-}\n+declare_lint_pass!(UndocumentedUnsafeBlocks => [UNDOCUMENTED_UNSAFE_BLOCKS]);\n \n impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n     fn check_block(&mut self, cx: &LateContext<'_>, block: &'_ Block<'_>) {\n-        if_chain! {\n-            if !self.local_checked;\n-            if !is_lint_allowed(cx, UNDOCUMENTED_UNSAFE_BLOCKS, block.hir_id);\n-            if !in_external_macro(cx.tcx.sess, block.span);\n-            if let BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) = block.rules;\n-            if let Some(enclosing_scope_hir_id) = cx.tcx.hir().get_enclosing_scope(block.hir_id);\n-            if self.block_has_safety_comment(cx.tcx, enclosing_scope_hir_id, block.span) == Some(false);\n-            then {\n-                let mut span = block.span;\n-\n-                if let Some(local_span) = self.local_span {\n-                    span = local_span;\n-\n-                    let result = self.block_has_safety_comment(cx.tcx, enclosing_scope_hir_id, span);\n+        if block.rules == BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided)\n+            && !in_external_macro(cx.tcx.sess, block.span)\n+            && !is_lint_allowed(cx, UNDOCUMENTED_UNSAFE_BLOCKS, block.hir_id)\n+            && !is_unsafe_from_proc_macro(cx, block)\n+            && !block_has_safety_comment(cx, block)\n+        {\n+            let source_map = cx.tcx.sess.source_map();\n+            let span = if source_map.is_multiline(block.span) {\n+                source_map.span_until_char(block.span, '\\n')\n+            } else {\n+                block.span\n+            };\n \n-                    if result.unwrap_or(true) {\n-                        self.local_checked = true;\n-                        return;\n-                    }\n-                }\n-\n-                self.lint(cx, span);\n-            }\n-        }\n-    }\n-\n-    fn check_local(&mut self, cx: &LateContext<'_>, local: &'_ Local<'_>) {\n-        if_chain! {\n-            if !is_lint_allowed(cx, UNDOCUMENTED_UNSAFE_BLOCKS, local.hir_id);\n-            if !in_external_macro(cx.tcx.sess, local.span);\n-            if let Some(init) = local.init;\n-            then {\n-                self.visit_expr(init);\n-\n-                if self.local_level > 0 {\n-                    self.local_span = Some(local.span);\n-                }\n-            }\n+            span_lint_and_help(\n+                cx,\n+                UNDOCUMENTED_UNSAFE_BLOCKS,\n+                span,\n+                \"unsafe block missing a safety comment\",\n+                None,\n+                \"consider adding a safety comment on the preceding line\",\n+            );\n         }\n     }\n+}\n \n-    fn check_block_post(&mut self, _: &LateContext<'_>, _: &'_ Block<'_>) {\n-        self.local_level = self.local_level.saturating_sub(1);\n-\n-        if self.local_level == 0 {\n-            self.local_checked = false;\n-            self.local_span = None;\n-        }\n-    }\n+fn is_unsafe_from_proc_macro(cx: &LateContext<'_>, block: &Block<'_>) -> bool {\n+    let source_map = cx.sess().source_map();\n+    let file_pos = source_map.lookup_byte_offset(block.span.lo());\n+    file_pos\n+        .sf\n+        .src\n+        .as_deref()\n+        .and_then(|src| src.get(file_pos.pos.to_usize()..))\n+        .map_or(true, |src| !src.starts_with(\"unsafe\"))\n }\n \n-impl<'v> Visitor<'v> for UndocumentedUnsafeBlocks {\n-    fn visit_expr(&mut self, ex: &'v Expr<'v>) {\n-        match ex.kind {\n-            ExprKind::Block(_, _) => self.local_level = self.local_level.saturating_add(1),\n-            _ => walk_expr(self, ex),\n+/// Checks if the lines immediately preceding the block contain a safety comment.\n+fn block_has_safety_comment(cx: &LateContext<'_>, block: &Block<'_>) -> bool {\n+    // This intentionally ignores text before the start of a function so something like:\n+    // ```\n+    //     // SAFETY: reason\n+    //     fn foo() { unsafe { .. } }\n+    // ```\n+    // won't work. This is to avoid dealing with where such a comment should be place relative to\n+    // attributes and doc comments.\n+\n+    let source_map = cx.sess().source_map();\n+    let ctxt = block.span.ctxt();\n+    if ctxt != SyntaxContext::root() {\n+        // From a macro expansion. Get the text from the start of the macro declaration to start of the unsafe block.\n+        //     macro_rules! foo { () => { stuff }; (x) => { unsafe { stuff } }; }\n+        //     ^--------------------------------------------^\n+        if let Ok(unsafe_line) = source_map.lookup_line(block.span.lo())\n+            && let Ok(macro_line) = source_map.lookup_line(ctxt.outer_expn_data().def_site.lo())\n+            && Lrc::ptr_eq(&unsafe_line.sf, &macro_line.sf)\n+            && let Some(src) = unsafe_line.sf.src.as_deref()\n+        {\n+            macro_line.line < unsafe_line.line && text_has_safety_comment(\n+                src,\n+                &unsafe_line.sf.lines[macro_line.line + 1..=unsafe_line.line],\n+                unsafe_line.sf.start_pos.to_usize(),\n+            )\n+        } else {\n+            // Problem getting source text. Pretend a comment was found.\n+            true\n         }\n+    } else if let Ok(unsafe_line) = source_map.lookup_line(block.span.lo())\n+        && let Some(body) = cx.enclosing_body\n+        && let Some(body_span) = walk_span_to_context(cx.tcx.hir().body(body).value.span, SyntaxContext::root())\n+        && let Ok(body_line) = source_map.lookup_line(body_span.lo())\n+        && Lrc::ptr_eq(&unsafe_line.sf, &body_line.sf)\n+        && let Some(src) = unsafe_line.sf.src.as_deref()\n+    {\n+        // Get the text from the start of function body to the unsafe block.\n+        //     fn foo() { some_stuff; unsafe { stuff }; other_stuff; }\n+        //              ^-------------^\n+        body_line.line < unsafe_line.line && text_has_safety_comment(\n+            src,\n+            &unsafe_line.sf.lines[body_line.line + 1..=unsafe_line.line],\n+            unsafe_line.sf.start_pos.to_usize(),\n+        )\n+    } else {\n+        // Problem getting source text. Pretend a comment was found.\n+        true\n     }\n }\n \n-impl UndocumentedUnsafeBlocks {\n-    fn block_has_safety_comment(&mut self, tcx: TyCtxt<'_>, enclosing_hir_id: HirId, block_span: Span) -> Option<bool> {\n-        let map = tcx.hir();\n-        let source_map = tcx.sess.source_map();\n-\n-        let enclosing_scope_span = map.opt_span(enclosing_hir_id)?;\n-\n-        let between_span = if block_span.from_expansion() {\n-            self.macro_expansion = true;\n-            enclosing_scope_span.with_hi(block_span.hi()).source_callsite()\n-        } else {\n-            self.macro_expansion = false;\n-            enclosing_scope_span.to(block_span).source_callsite()\n-        };\n-\n-        let file_name = source_map.span_to_filename(between_span);\n-        let source_file = source_map.get_source_file(&file_name)?;\n-\n-        let lex_start = (between_span.lo().0 - source_file.start_pos.0 + 1) as usize;\n-        let lex_end = (between_span.hi().0 - source_file.start_pos.0) as usize;\n-        let src_str = source_file.src.as_ref()?[lex_start..lex_end].to_string();\n-\n-        let source_start_pos = source_file.start_pos.0 as usize + lex_start;\n-\n-        let mut pos = 0;\n-        let mut comment = false;\n-\n-        for token in rustc_lexer::tokenize(&src_str) {\n-            match token.kind {\n-                TokenKind::LineComment { doc_style: None }\n-                | TokenKind::BlockComment {\n-                    doc_style: None,\n-                    terminated: true,\n-                } => {\n-                    let comment_str = src_str[pos + 2..pos + token.len].to_ascii_uppercase();\n-\n-                    if comment_str.contains(\"SAFETY:\") {\n-                        comment = true;\n-                    }\n-                },\n-                // We need to add all whitespace to `pos` before checking the comment's line number\n-                TokenKind::Whitespace => {},\n-                _ => {\n-                    if comment {\n-                        // Get the line number of the \"comment\" (really wherever the trailing whitespace ended)\n-                        let comment_line_num = source_file\n-                            .lookup_file_pos(BytePos((source_start_pos + pos).try_into().unwrap()))\n-                            .0;\n-                        // Find the block/local's line number\n-                        let block_line_num = tcx.sess.source_map().lookup_char_pos(block_span.lo()).line;\n-\n-                        // Check the comment is immediately followed by the block/local\n-                        if block_line_num == comment_line_num + 1 || block_line_num == comment_line_num {\n-                            return Some(true);\n-                        }\n-\n-                        comment = false;\n-                    }\n-                },\n+/// Checks if the given text has a safety comment for the immediately proceeding line.\n+fn text_has_safety_comment(src: &str, line_starts: &[BytePos], offset: usize) -> bool {\n+    let mut lines = line_starts\n+        .array_windows::<2>()\n+        .rev()\n+        .map_while(|[start, end]| {\n+            src.get(start.to_usize() - offset..end.to_usize() - offset)\n+                .map(|text| (start.to_usize(), text.trim_start()))\n+        })\n+        .filter(|(_, text)| !text.is_empty());\n+\n+    let Some((line_start, line)) = lines.next() else {\n+        return false;\n+    };\n+    // Check for a sequence of line comments.\n+    if line.starts_with(\"//\") {\n+        let mut line = line;\n+        loop {\n+            if line.to_ascii_uppercase().contains(\"SAFETY:\") {\n+                return true;\n+            }\n+            match lines.next() {\n+                Some((_, x)) if x.starts_with(\"//\") => line = x,\n+                _ => return false,\n             }\n-\n-            pos += token.len;\n         }\n-\n-        Some(false)\n     }\n-\n-    fn lint(&self, cx: &LateContext<'_>, mut span: Span) {\n-        let source_map = cx.tcx.sess.source_map();\n-\n-        if source_map.is_multiline(span) {\n-            span = source_map.span_until_char(span, '\\n');\n+    // No line comments; look for the start of a block comment.\n+    // This will only find them if they are at the start of a line.\n+    let (mut line_start, mut line) = (line_start, line);\n+    loop {\n+        if line.starts_with(\"/*\") {\n+            let src = src[line_start..line_starts.last().unwrap().to_usize()].trim_start();\n+            let mut tokens = tokenize(src);\n+            return src[..tokens.next().unwrap().len]\n+                .to_ascii_uppercase()\n+                .contains(\"SAFETY:\")\n+                && tokens.all(|t| t.kind == TokenKind::Whitespace);\n         }\n-\n-        if self.macro_expansion {\n-            span_lint_and_help(\n-                cx,\n-                UNDOCUMENTED_UNSAFE_BLOCKS,\n-                span,\n-                \"unsafe block in macro expansion missing a safety comment\",\n-                None,\n-                \"consider adding a safety comment in the macro definition\",\n-            );\n-        } else {\n-            let block_indent = indent_of(cx, span);\n-            let suggestion = format!(\"// SAFETY: ...\\n{}\", snippet(cx, span, \"..\"));\n-\n-            span_lint_and_sugg(\n-                cx,\n-                UNDOCUMENTED_UNSAFE_BLOCKS,\n-                span,\n-                \"unsafe block missing a safety comment\",\n-                \"consider adding a safety comment\",\n-                reindent_multiline(Cow::Borrowed(&suggestion), true, block_indent).to_string(),\n-                Applicability::HasPlaceholders,\n-            );\n+        match lines.next() {\n+            Some(x) => (line_start, line) = x,\n+            None => return false,\n         }\n     }\n }"}, {"sha": "db652766705c4989532ee74bcdc07c50045f9f0e", "filename": "src/tools/clippy/clippy_lints/src/undropped_manually_drops.rs", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundropped_manually_drops.rs?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -1,59 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::path_res;\n-use clippy_utils::ty::is_type_lang_item;\n-use rustc_hir::{lang_items, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Prevents the safe `std::mem::drop` function from being called on `std::mem::ManuallyDrop`.\n-    ///\n-    /// ### Why is this bad?\n-    /// The safe `drop` function does not drop the inner value of a `ManuallyDrop`.\n-    ///\n-    /// ### Known problems\n-    /// Does not catch cases if the user binds `std::mem::drop`\n-    /// to a different name and calls it that way.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// struct S;\n-    /// drop(std::mem::ManuallyDrop::new(S));\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// struct S;\n-    /// unsafe {\n-    ///     std::mem::ManuallyDrop::drop(&mut std::mem::ManuallyDrop::new(S));\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.49.0\"]\n-    pub UNDROPPED_MANUALLY_DROPS,\n-    correctness,\n-    \"use of safe `std::mem::drop` function to drop a std::mem::ManuallyDrop, which will not drop the inner value\"\n-}\n-\n-declare_lint_pass!(UndroppedManuallyDrops => [UNDROPPED_MANUALLY_DROPS]);\n-\n-impl<'tcx> LateLintPass<'tcx> for UndroppedManuallyDrops {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if let ExprKind::Call(fun, [arg_0, ..]) = expr.kind;\n-            if path_res(cx, fun).opt_def_id() == cx.tcx.get_diagnostic_item(sym::mem_drop);\n-            let ty = cx.typeck_results().expr_ty(arg_0);\n-            if is_type_lang_item(cx, ty, lang_items::LangItem::ManuallyDrop);\n-            then {\n-                span_lint_and_help(\n-                    cx,\n-                    UNDROPPED_MANUALLY_DROPS,\n-                    expr.span,\n-                    \"the inner value of this ManuallyDrop will not be dropped\",\n-                    None,\n-                    \"to drop a `ManuallyDrop<T>`, use std::mem::ManuallyDrop::drop\",\n-                );\n-            }\n-        }\n-    }\n-}"}, {"sha": "f8e1021af0ea11b9bd46acc78dfe62ea9ea4ccaf", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -34,7 +34,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// struct Foo {}\n+    /// struct Foo;\n     /// impl Foo {\n     ///     fn new() -> Foo {\n     ///         Foo {}\n@@ -43,7 +43,7 @@ declare_clippy_lint! {\n     /// ```\n     /// could be\n     /// ```rust\n-    /// struct Foo {}\n+    /// struct Foo;\n     /// impl Foo {\n     ///     fn new() -> Self {\n     ///         Self {}"}, {"sha": "271c3a3dd181cef4db12b84a6db0f9a3fa42ebf5", "filename": "src/tools/clippy/clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -156,7 +156,7 @@ define_Conf! {\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates.\n     (avoid_breaking_exported_api: bool = true),\n-    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE, APPROX_CONSTANT, DEPRECATED_CFG_ATTR, INDEX_REFUTABLE_SLICE, MAP_CLONE, BORROW_AS_PTR, MANUAL_BITS.\n+    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE, APPROX_CONSTANT, DEPRECATED_CFG_ATTR, INDEX_REFUTABLE_SLICE, MAP_CLONE, BORROW_AS_PTR, MANUAL_BITS, ERR_EXPECT, CAST_ABS_TO_UNSIGNED.\n     ///\n     /// The minimum rust version that the project supports\n     (msrv: Option<String> = None),"}, {"sha": "25d74b8c49939da8a643e60a2da1e4b264440d91", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -25,7 +25,7 @@ use rustc_hir::{\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::mir::interpret::ConstValue;\n-use rustc_middle::ty::{self, subst::GenericArgKind};\n+use rustc_middle::ty::{self, fast_reject::SimplifiedTypeGen, subst::GenericArgKind, FloatTy};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Spanned;\n@@ -889,7 +889,7 @@ fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Ve\n                     }\n                 }\n             },\n-            Res::Def(DefKind::Const | DefKind::Static, def_id) => {\n+            Res::Def(DefKind::Const | DefKind::Static(..), def_id) => {\n                 if let Some(Node::Item(item)) = cx.tcx.hir().get_if_local(def_id) {\n                     if let ItemKind::Const(.., body_id) | ItemKind::Static(.., body_id) = item.kind {\n                         let body = cx.tcx.hir().body(body_id);\n@@ -934,7 +934,16 @@ pub fn check_path(cx: &LateContext<'_>, path: &[&str]) -> bool {\n     // implementations of native types. Check lang items.\n     let path_syms: Vec<_> = path.iter().map(|p| Symbol::intern(p)).collect();\n     let lang_items = cx.tcx.lang_items();\n-    for item_def_id in lang_items.items().iter().flatten() {\n+    // This list isn't complete, but good enough for our current list of paths.\n+    let incoherent_impls = [\n+        SimplifiedTypeGen::FloatSimplifiedType(FloatTy::F32),\n+        SimplifiedTypeGen::FloatSimplifiedType(FloatTy::F64),\n+        SimplifiedTypeGen::SliceSimplifiedType,\n+        SimplifiedTypeGen::StrSimplifiedType,\n+    ]\n+    .iter()\n+    .flat_map(|&ty| cx.tcx.incoherent_impls(ty));\n+    for item_def_id in lang_items.items().iter().flatten().chain(incoherent_impls) {\n         let lang_item_path = cx.get_def_path(*item_def_id);\n         if path_syms.starts_with(&lang_item_path) {\n             if let [item] = &path_syms[lang_item_path.len()..] {"}, {"sha": "ca03b8010dd821c2c68da237efae631c279e1711", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -756,7 +756,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for LintResolver<'a, 'hir> {\n             let (expr_ty, _) = walk_ptrs_ty_depth(self.cx.typeck_results().expr_ty(expr));\n             if match_type(self.cx, expr_ty, &paths::LINT);\n             then {\n-                if let hir::def::Res::Def(DefKind::Static, _) = path.res {\n+                if let hir::def::Res::Def(DefKind::Static(..), _) = path.res {\n                     let lint_name = last_path_segment(qpath).ident.name;\n                     self.lints.push(sym_to_string(lint_name).to_ascii_lowercase());\n                 } else if let Some(local) = get_parent_local(self.cx, expr) {"}, {"sha": "0b1fd95c3453d1ba4f6e5e653d47488ac3f1b1ab", "filename": "src/tools/clippy/clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2FCargo.toml?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.61\"\n+version = \"0.1.62\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "a275bac4ce63dc5436ea18d4677f8c219c50488c", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -77,19 +77,22 @@ use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n-    def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Constness, Destination, Expr,\n-    ExprKind, FnDecl, ForeignItem, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local,\n-    MatchSource, Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind,\n-    TraitItem, TraitItemKind, TraitRef, TyKind, UnOp,\n+    def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Constness, Destination, Expr, ExprKind, FnDecl,\n+    ForeignItem, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource,\n+    Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind,\n+    TraitRef, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::ty as rustc_ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n-use rustc_middle::ty::{IntTy, UintTy, FloatTy};\n-use rustc_middle::ty::fast_reject::SimplifiedTypeGen::*;\n+use rustc_middle::ty::fast_reject::SimplifiedTypeGen::{\n+    ArraySimplifiedType, BoolSimplifiedType, CharSimplifiedType, FloatSimplifiedType, IntSimplifiedType,\n+    PtrSimplifiedType, SliceSimplifiedType, StrSimplifiedType, UintSimplifiedType,\n+};\n use rustc_middle::ty::{layout::IntegerExt, BorrowKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeFoldable, UpvarCapture};\n+use rustc_middle::ty::{FloatTy, IntTy, UintTy};\n use rustc_semver::RustcVersion;\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n@@ -522,7 +525,7 @@ pub fn def_path_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n     let tcx = cx.tcx;\n     let starts = find_primitive(tcx, base)\n         .chain(find_crate(tcx, base))\n-        .flat_map(|id| item_child_by_name(tcx, id, first));\n+        .filter_map(|id| item_child_by_name(tcx, id, first));\n \n     for first in starts {\n         let last = path"}, {"sha": "0424e06720263e5322b38eabf54d518bb899d0e6", "filename": "src/tools/clippy/clippy_utils/src/msrvs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -14,7 +14,7 @@ macro_rules! msrv_aliases {\n msrv_aliases! {\n     1,53,0 { OR_PATTERNS, MANUAL_BITS }\n     1,52,0 { STR_SPLIT_ONCE }\n-    1,51,0 { BORROW_AS_PTR }\n+    1,51,0 { BORROW_AS_PTR, UNSIGNED_ABS }\n     1,50,0 { BOOL_THEN }\n     1,47,0 { TAU }\n     1,46,0 { CONST_IF_MATCH }\n@@ -30,6 +30,6 @@ msrv_aliases! {\n     1,34,0 { TRY_FROM }\n     1,30,0 { ITERATOR_FIND_MAP, TOOL_ATTRIBUTES }\n     1,28,0 { FROM_BOOL }\n-    1,17,0 { FIELD_INIT_SHORTHAND, STATIC_IN_CONST }\n+    1,17,0 { FIELD_INIT_SHORTHAND, STATIC_IN_CONST, EXPECT_ERR }\n     1,16,0 { STR_REPEAT }\n }"}, {"sha": "79e6e92dc0aaf3a2506db51edaeaf6cc47fcb1df", "filename": "src/tools/clippy/clippy_utils/src/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -105,6 +105,8 @@ pub const PTR_READ_UNALIGNED: [&str; 3] = [\"core\", \"ptr\", \"read_unaligned\"];\n pub const PTR_READ_VOLATILE: [&str; 3] = [\"core\", \"ptr\", \"read_volatile\"];\n pub const PTR_REPLACE: [&str; 3] = [\"core\", \"ptr\", \"replace\"];\n pub const PTR_SWAP: [&str; 3] = [\"core\", \"ptr\", \"swap\"];\n+pub const PTR_UNALIGNED_VOLATILE_LOAD: [&str; 3] = [\"core\", \"intrinsics\", \"unaligned_volatile_load\"];\n+pub const PTR_UNALIGNED_VOLATILE_STORE: [&str; 3] = [\"core\", \"intrinsics\", \"unaligned_volatile_store\"];\n pub const PTR_WRITE: [&str; 3] = [\"core\", \"ptr\", \"write\"];\n pub const PTR_WRITE_BYTES: [&str; 3] = [\"core\", \"intrinsics\", \"write_bytes\"];\n pub const PTR_WRITE_UNALIGNED: [&str; 3] = [\"core\", \"ptr\", \"write_unaligned\"];"}, {"sha": "c4f8f989384280659f899f6f6d9820cf0087e8a6", "filename": "src/tools/clippy/doc/release.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fdoc%2Frelease.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fdoc%2Frelease.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fdoc%2Frelease.md?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -121,4 +121,25 @@ happened a stable backport, make sure to re-merge those changes just as with the\n \n For this see the document on [how to update the changelog].\n \n+If you don't have time to do a complete changelog update right away, just update\n+the following parts:\n+\n+- Remove the `(beta)` from the new stable version:\n+\n+  ```markdown\n+  ## Rust 1.XX (beta) -> ## Rust 1.XX\n+  ```\n+\n+- Update the release date line of the new stable version:\n+\n+  ```markdown\n+  Current beta, release 20YY-MM-DD -> Current stable, released 20YY-MM-DD\n+  ```\n+\n+- Update the release date line of the previous stable version:\n+\n+  ```markdown\n+  Current stable, released 20YY-MM-DD -> Released 20YY-MM-DD\n+  ```\n+\n [how to update the changelog]: https://github.com/rust-lang/rust-clippy/blob/master/doc/changelog_update.md"}, {"sha": "bb29c71e9f455889ff8cb1f001ee916fb273b0c1", "filename": "src/tools/clippy/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Frust-toolchain?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-03-24\"\n+channel = \"nightly-2022-04-07\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "00dc916b217ca0b93f18a387290545e517a2a97f", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -165,8 +165,7 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // Separate the output with an empty line\n     eprintln!();\n \n-    let fallback_bundle = rustc_errors::fallback_fluent_bundle(false)\n-        .expect(\"failed to load fallback fluent bundle\");\n+    let fallback_bundle = rustc_errors::fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n     let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n         rustc_errors::ColorConfig::Auto,\n         None,"}, {"sha": "0defd45b68b064745537b02321f5bb2b56c688aa", "filename": "src/tools/clippy/tests/check-fmt.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fcheck-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fcheck-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fcheck-fmt.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "previous_filename": "src/tools/clippy/tests/fmt.rs"}, {"sha": "e2010e9981315a748fbdbebc0a902bfa479766cb", "filename": "src/tools/clippy/tests/ui-cargo/module_style/fail_mod/src/main.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod%2Fsrc%2Fmain.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,19 +1,19 @@\n-error: `mod.rs` files are required, found `/bad/inner.rs`\n+error: `mod.rs` files are required, found `bad/inner.rs`\n   --> $DIR/bad/inner.rs:1:1\n    |\n LL | pub mod stuff;\n    | ^\n    |\n    = note: `-D clippy::self-named-module-files` implied by `-D warnings`\n-   = help: move `/bad/inner.rs` to `/bad/inner/mod.rs`\n+   = help: move `bad/inner.rs` to `bad/inner/mod.rs`\n \n-error: `mod.rs` files are required, found `/bad/inner/stuff.rs`\n+error: `mod.rs` files are required, found `bad/inner/stuff.rs`\n   --> $DIR/bad/inner/stuff.rs:1:1\n    |\n LL | pub mod most;\n    | ^\n    |\n-   = help: move `/bad/inner/stuff.rs` to `/bad/inner/stuff/mod.rs`\n+   = help: move `bad/inner/stuff.rs` to `bad/inner/stuff/mod.rs`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f91940209383ff66d330c58df0e1ea54ca3d83b4", "filename": "src/tools/clippy/tests/ui-cargo/module_style/fail_no_mod/src/main.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_no_mod%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_no_mod%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_no_mod%2Fsrc%2Fmain.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,11 +1,11 @@\n-error: `mod.rs` files are not allowed, found `/bad/mod.rs`\n+error: `mod.rs` files are not allowed, found `bad/mod.rs`\n   --> $DIR/bad/mod.rs:1:1\n    |\n LL | pub struct Thing;\n    | ^\n    |\n    = note: `-D clippy::mod-module-files` implied by `-D warnings`\n-   = help: move `/bad/mod.rs` to `/bad.rs`\n+   = help: move `bad/mod.rs` to `bad.rs`\n \n error: aborting due to previous error\n "}, {"sha": "67e1a07b7f5fac8a895d8c224599facaa0225516", "filename": "src/tools/clippy/tests/ui-internal/check_clippy_version_attribute.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcheck_clippy_version_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcheck_clippy_version_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcheck_clippy_version_attribute.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -46,11 +46,6 @@ LL | |     report_in_external_macro: true\n LL | | }\n    | |_^\n    |\n-note: the lint level is defined here\n-  --> $DIR/check_clippy_version_attribute.rs:1:9\n-   |\n-LL | #![deny(clippy::internal)]\n-   |         ^^^^^^^^^^^^^^^^\n    = note: `#[deny(clippy::missing_clippy_version_attribute)]` implied by `#[deny(clippy::internal)]`\n    = help: please use a `clippy::version` attribute, see `doc/adding_lints.md`\n    = note: this error originates in the macro `$crate::declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "32dd80246fab44cda2884f4a4f996d1e8f69d3e9", "filename": "src/tools/clippy/tests/ui-toml/struct_excessive_bools/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fstruct_excessive_bools%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fstruct_excessive_bools%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fstruct_excessive_bools%2Ftest.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -4,6 +4,6 @@ struct S {\n     a: bool,\n }\n \n-struct Foo {}\n+struct Foo;\n \n fn main() {}"}, {"sha": "3c40f77469b8207bcf2d8e4ae7e22751e3f9bbc8", "filename": "src/tools/clippy/tests/ui/auxiliary/proc_macro_unsafe.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fproc_macro_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fproc_macro_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fproc_macro_unsafe.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: --emit=link\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{Delimiter, Group, Ident, TokenStream, TokenTree};\n+\n+#[proc_macro]\n+pub fn unsafe_block(input: TokenStream) -> TokenStream {\n+    let span = input.into_iter().next().unwrap().span();\n+    TokenStream::from_iter([TokenTree::Ident(Ident::new(\"unsafe\", span)), {\n+        let mut group = Group::new(Delimiter::Brace, TokenStream::new());\n+        group.set_span(span);\n+        TokenTree::Group(group)\n+    }])\n+}"}, {"sha": "9851d4791d8db59da4c1bcf333b770e7148f5119", "filename": "src/tools/clippy/tests/ui/bytes_nth.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbytes_nth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbytes_nth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbytes_nth.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,18 +1,18 @@\n-error: called `.byte().nth()` on a `String`\n+error: called `.bytes().nth()` on a `String`\n   --> $DIR/bytes_nth.rs:8:13\n    |\n LL |     let _ = s.bytes().nth(3);\n    |             ^^^^^^^^^^^^^^^^ help: try: `s.as_bytes().get(3)`\n    |\n    = note: `-D clippy::bytes-nth` implied by `-D warnings`\n \n-error: called `.byte().nth()` on a `String`\n+error: called `.bytes().nth()` on a `String`\n   --> $DIR/bytes_nth.rs:9:14\n    |\n LL |     let _ = &s.bytes().nth(3);\n    |              ^^^^^^^^^^^^^^^^ help: try: `s.as_bytes().get(3)`\n \n-error: called `.byte().nth()` on a `str`\n+error: called `.bytes().nth()` on a `str`\n   --> $DIR/bytes_nth.rs:10:13\n    |\n LL |     let _ = s[..].bytes().nth(3);"}, {"sha": "0d65071af15ed1c4694daec5b20dac9baa96e56a", "filename": "src/tools/clippy/tests/ui/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -2,7 +2,7 @@\n \n use std::string::String;\n \n-struct TestStruct {}\n+struct TestStruct;\n \n impl TestStruct {\n     fn ends_with(self, arg: &str) {}"}, {"sha": "cf85a5ca931dd1e560134cf39304659254af3b43", "filename": "src/tools/clippy/tests/ui/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -7,7 +7,7 @@\n     clippy::cast_sign_loss,\n     clippy::cast_possible_wrap\n )]\n-#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n+#[allow(clippy::cast_abs_to_unsigned, clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n     // Test clippy::cast_precision_loss\n     let x0 = 1i32;"}, {"sha": "4ec2465be06db74a6ac1d4e70585aa4020ba33bc", "filename": "src/tools/clippy/tests/ui/cast_abs_to_unsigned.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+#![warn(clippy::cast_abs_to_unsigned)]\n+\n+fn main() {\n+    let x: i32 = -42;\n+    let y: u32 = x.unsigned_abs();\n+    println!(\"The absolute value of {} is {}\", x, y);\n+}"}, {"sha": "59b9c8c367883b7883f05a8d065d9e688ee68eca", "filename": "src/tools/clippy/tests/ui/cast_abs_to_unsigned.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+#![warn(clippy::cast_abs_to_unsigned)]\n+\n+fn main() {\n+    let x: i32 = -42;\n+    let y: u32 = x.abs() as u32;\n+    println!(\"The absolute value of {} is {}\", x, y);\n+}"}, {"sha": "eb12857357a444abaf62ec93b3350e9c67565f62", "filename": "src/tools/clippy/tests/ui/cast_abs_to_unsigned.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,10 @@\n+error: casting the result of `i32::abs()` to u32\n+  --> $DIR/cast_abs_to_unsigned.rs:6:18\n+   |\n+LL |     let y: u32 = x.abs() as u32;\n+   |                  ^^^^^^^^^^^^^^ help: replace with: `x.unsigned_abs()`\n+   |\n+   = note: `-D clippy::cast-abs-to-unsigned` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e4e7290a30e9e711c911c34d96a1239af8e0d19a", "filename": "src/tools/clippy/tests/ui/cast_alignment.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_alignment.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,6 +1,7 @@\n //! Test casts for alignment issues\n \n #![feature(rustc_private)]\n+#![feature(core_intrinsics)]\n extern crate libc;\n \n #[warn(clippy::cast_ptr_alignment)]\n@@ -34,4 +35,17 @@ fn main() {\n     (&1u32 as *const u32 as *const libc::c_void) as *const u32;\n     // For ZST, we should trust the user. See #4256\n     (&1u32 as *const u32 as *const ()) as *const u32;\n+\n+    // Issue #2881\n+    let mut data = [0u8, 0u8];\n+    unsafe {\n+        let ptr = &data as *const [u8; 2] as *const u8;\n+        let _ = (ptr as *const u16).read_unaligned();\n+        let _ = core::ptr::read_unaligned(ptr as *const u16);\n+        let _ = core::intrinsics::unaligned_volatile_load(ptr as *const u16);\n+        let ptr = &mut data as *mut [u8; 2] as *mut u8;\n+        let _ = (ptr as *mut u16).write_unaligned(0);\n+        let _ = core::ptr::write_unaligned(ptr as *mut u16, 0);\n+        let _ = core::intrinsics::unaligned_volatile_store(ptr as *mut u16, 0);\n+    }\n }"}, {"sha": "5df2b5b1094be2b96bd552184326695820fb6b6d", "filename": "src/tools/clippy/tests/ui/cast_alignment.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_alignment.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,25 +1,25 @@\n error: casting from `*const u8` to a more-strictly-aligned pointer (`*const u16`) (1 < 2 bytes)\n-  --> $DIR/cast_alignment.rs:18:5\n+  --> $DIR/cast_alignment.rs:19:5\n    |\n LL |     (&1u8 as *const u8) as *const u16;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-ptr-alignment` implied by `-D warnings`\n \n error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`) (1 < 2 bytes)\n-  --> $DIR/cast_alignment.rs:19:5\n+  --> $DIR/cast_alignment.rs:20:5\n    |\n LL |     (&mut 1u8 as *mut u8) as *mut u16;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: casting from `*const u8` to a more-strictly-aligned pointer (`*const u16`) (1 < 2 bytes)\n-  --> $DIR/cast_alignment.rs:22:5\n+  --> $DIR/cast_alignment.rs:23:5\n    |\n LL |     (&1u8 as *const u8).cast::<u16>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`) (1 < 2 bytes)\n-  --> $DIR/cast_alignment.rs:23:5\n+  --> $DIR/cast_alignment.rs:24:5\n    |\n LL |     (&mut 1u8 as *mut u8).cast::<u16>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "88cfa1f923c0bff23329871fa193c2698e3c65b5", "filename": "src/tools/clippy/tests/ui/crashes/ice-2774.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-2774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-2774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-2774.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -8,7 +8,7 @@ pub struct Bar {\n }\n \n #[derive(Eq, PartialEq, Debug, Hash)]\n-pub struct Foo {}\n+pub struct Foo;\n \n #[allow(clippy::implicit_hasher)]\n // This should not cause a \"cannot relate bound region\" ICE."}, {"sha": "4fe92d356c44de5f2d2f24f2292d6135b8b4aa9f", "filename": "src/tools/clippy/tests/ui/crashes/ice-6179.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6179.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -4,7 +4,7 @@\n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n \n-struct Foo {}\n+struct Foo;\n \n impl Foo {\n     fn new() -> Self {"}, {"sha": "9cbafc716b5000dc2bd4ac51904fa90369df037a", "filename": "src/tools/clippy/tests/ui/crashes/ice-6792.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6792.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6792.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6792.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -7,7 +7,7 @@ trait Trait {\n     fn broken() -> Self::Ty;\n }\n \n-struct Foo {}\n+struct Foo;\n \n impl Trait for Foo {\n     type Ty = Foo;"}, {"sha": "1a33e647588f19ea3c6c678285c23ae9e483b57c", "filename": "src/tools/clippy/tests/ui/crashes/ice-7868.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7868.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7868.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7868.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -5,11 +5,7 @@ LL |     unsafe { 0 };\n    |     ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::undocumented-unsafe-blocks` implied by `-D warnings`\n-help: consider adding a safety comment\n-   |\n-LL ~     // SAFETY: ...\n-LL ~     unsafe { 0 };\n-   |\n+   = help: consider adding a safety comment on the preceding line\n \n error: aborting due to previous error\n "}, {"sha": "376ff97ba6036f3fbbf6336504a73610b910dc4f", "filename": "src/tools/clippy/tests/ui/crashes/needless_lifetimes_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -3,7 +3,7 @@\n \n trait Foo {}\n \n-struct Bar {}\n+struct Bar;\n \n struct Baz<'a> {\n     bar: &'a Bar,"}, {"sha": "6f9d98bbfe7f341b8b166800314b77495ba0697a", "filename": "src/tools/clippy/tests/ui/crashes/regressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fregressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fregressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fregressions.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -6,6 +6,6 @@ pub fn foo(bar: *const u8) {\n \n // Regression test for https://github.com/rust-lang/rust-clippy/issues/4917\n /// <foo\n-struct A {}\n+struct A;\n \n fn main() {}"}, {"sha": "9fc594be311e2fd23fe01dfc552b2ff703f1c483", "filename": "src/tools/clippy/tests/ui/crate_in_macro_def.fixed", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_in_macro_def.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_in_macro_def.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_in_macro_def.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,56 @@\n+// run-rustfix\n+#![warn(clippy::crate_in_macro_def)]\n+\n+mod hygienic {\n+    #[macro_export]\n+    macro_rules! print_message_hygienic {\n+        () => {\n+            println!(\"{}\", $crate::hygienic::MESSAGE);\n+        };\n+    }\n+\n+    pub const MESSAGE: &str = \"Hello!\";\n+}\n+\n+mod unhygienic {\n+    #[macro_export]\n+    macro_rules! print_message_unhygienic {\n+        () => {\n+            println!(\"{}\", $crate::unhygienic::MESSAGE);\n+        };\n+    }\n+\n+    pub const MESSAGE: &str = \"Hello!\";\n+}\n+\n+mod unhygienic_intentionally {\n+    // For cases where the use of `crate` is intentional, applying `allow` to the macro definition\n+    // should suppress the lint.\n+    #[allow(clippy::crate_in_macro_def)]\n+    #[macro_export]\n+    macro_rules! print_message_unhygienic_intentionally {\n+        () => {\n+            println!(\"{}\", crate::CALLER_PROVIDED_MESSAGE);\n+        };\n+    }\n+}\n+\n+#[macro_use]\n+mod not_exported {\n+    macro_rules! print_message_not_exported {\n+        () => {\n+            println!(\"{}\", crate::not_exported::MESSAGE);\n+        };\n+    }\n+\n+    pub const MESSAGE: &str = \"Hello!\";\n+}\n+\n+fn main() {\n+    print_message_hygienic!();\n+    print_message_unhygienic!();\n+    print_message_unhygienic_intentionally!();\n+    print_message_not_exported!();\n+}\n+\n+pub const CALLER_PROVIDED_MESSAGE: &str = \"Hello!\";"}, {"sha": "ac456108e4ab15fb842d210c5605dcb9d3342122", "filename": "src/tools/clippy/tests/ui/crate_in_macro_def.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_in_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_in_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_in_macro_def.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,56 @@\n+// run-rustfix\n+#![warn(clippy::crate_in_macro_def)]\n+\n+mod hygienic {\n+    #[macro_export]\n+    macro_rules! print_message_hygienic {\n+        () => {\n+            println!(\"{}\", $crate::hygienic::MESSAGE);\n+        };\n+    }\n+\n+    pub const MESSAGE: &str = \"Hello!\";\n+}\n+\n+mod unhygienic {\n+    #[macro_export]\n+    macro_rules! print_message_unhygienic {\n+        () => {\n+            println!(\"{}\", crate::unhygienic::MESSAGE);\n+        };\n+    }\n+\n+    pub const MESSAGE: &str = \"Hello!\";\n+}\n+\n+mod unhygienic_intentionally {\n+    // For cases where the use of `crate` is intentional, applying `allow` to the macro definition\n+    // should suppress the lint.\n+    #[allow(clippy::crate_in_macro_def)]\n+    #[macro_export]\n+    macro_rules! print_message_unhygienic_intentionally {\n+        () => {\n+            println!(\"{}\", crate::CALLER_PROVIDED_MESSAGE);\n+        };\n+    }\n+}\n+\n+#[macro_use]\n+mod not_exported {\n+    macro_rules! print_message_not_exported {\n+        () => {\n+            println!(\"{}\", crate::not_exported::MESSAGE);\n+        };\n+    }\n+\n+    pub const MESSAGE: &str = \"Hello!\";\n+}\n+\n+fn main() {\n+    print_message_hygienic!();\n+    print_message_unhygienic!();\n+    print_message_unhygienic_intentionally!();\n+    print_message_not_exported!();\n+}\n+\n+pub const CALLER_PROVIDED_MESSAGE: &str = \"Hello!\";"}, {"sha": "9ac5937dcc0634da7cdbd4f1fa2db106e175391d", "filename": "src/tools/clippy/tests/ui/crate_in_macro_def.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_in_macro_def.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_in_macro_def.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_in_macro_def.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,10 @@\n+error: `crate` references the macro call's crate\n+  --> $DIR/crate_in_macro_def.rs:19:28\n+   |\n+LL |             println!(\"{}\", crate::unhygienic::MESSAGE);\n+   |                            ^^^^^ help: to reference the macro definition's crate, use: `$crate`\n+   |\n+   = note: `-D clippy::crate-in-macro-def` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e0b4a2f6942392c575e3f491914dfbf11b7cf6cd", "filename": "src/tools/clippy/tests/ui/default_numeric_fallback_f64.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_numeric_fallback_f64.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_numeric_fallback_f64.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_numeric_fallback_f64.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -134,7 +134,7 @@ mod enum_ctor {\n }\n \n mod method_calls {\n-    struct StructForMethodCallTest {}\n+    struct StructForMethodCallTest;\n \n     impl StructForMethodCallTest {\n         fn concrete_arg(&self, f: f64) {}"}, {"sha": "50bbb6eec6c700fdbdb7a54051e48c21715b0dbd", "filename": "src/tools/clippy/tests/ui/default_numeric_fallback_f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_numeric_fallback_f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_numeric_fallback_f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_numeric_fallback_f64.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -134,7 +134,7 @@ mod enum_ctor {\n }\n \n mod method_calls {\n-    struct StructForMethodCallTest {}\n+    struct StructForMethodCallTest;\n \n     impl StructForMethodCallTest {\n         fn concrete_arg(&self, f: f64) {}"}, {"sha": "bded9e2c0e801723b89547d606120a989078473d", "filename": "src/tools/clippy/tests/ui/default_numeric_fallback_i32.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_numeric_fallback_i32.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -133,7 +133,7 @@ mod enum_ctor {\n }\n \n mod method_calls {\n-    struct StructForMethodCallTest {}\n+    struct StructForMethodCallTest;\n \n     impl StructForMethodCallTest {\n         fn concrete_arg(&self, x: i32) {}"}, {"sha": "3fceefa551c7843c4d1b54a36f98c3ac86bf2612", "filename": "src/tools/clippy/tests/ui/default_numeric_fallback_i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_numeric_fallback_i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_numeric_fallback_i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_numeric_fallback_i32.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -133,7 +133,7 @@ mod enum_ctor {\n }\n \n mod method_calls {\n-    struct StructForMethodCallTest {}\n+    struct StructForMethodCallTest;\n \n     impl StructForMethodCallTest {\n         fn concrete_arg(&self, x: i32) {}"}, {"sha": "7c7a9ecff67f5a56efb13c560ba21417a3cf32d9", "filename": "src/tools/clippy/tests/ui/drop_forget_copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -5,7 +5,7 @@ use std::mem::{drop, forget};\n use std::vec::Vec;\n \n #[derive(Copy, Clone)]\n-struct SomeStruct {}\n+struct SomeStruct;\n \n struct AnotherStruct {\n     x: u8,"}, {"sha": "88228afae89c005d698051baecdd76ee87f17ace", "filename": "src/tools/clippy/tests/ui/drop_forget_copy.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -5,7 +5,7 @@ LL |     drop(s1);\n    |     ^^^^^^^^\n    |\n    = note: `-D clippy::drop-copy` implied by `-D warnings`\n-note: argument has type SomeStruct\n+note: argument has type `SomeStruct`\n   --> $DIR/drop_forget_copy.rs:33:10\n    |\n LL |     drop(s1);\n@@ -17,7 +17,7 @@ error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a\n LL |     drop(s2);\n    |     ^^^^^^^^\n    |\n-note: argument has type SomeStruct\n+note: argument has type `SomeStruct`\n   --> $DIR/drop_forget_copy.rs:34:10\n    |\n LL |     drop(s2);\n@@ -29,7 +29,7 @@ error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a\n LL |     drop(s4);\n    |     ^^^^^^^^\n    |\n-note: argument has type SomeStruct\n+note: argument has type `SomeStruct`\n   --> $DIR/drop_forget_copy.rs:36:10\n    |\n LL |     drop(s4);\n@@ -42,7 +42,7 @@ LL |     forget(s1);\n    |     ^^^^^^^^^^\n    |\n    = note: `-D clippy::forget-copy` implied by `-D warnings`\n-note: argument has type SomeStruct\n+note: argument has type `SomeStruct`\n   --> $DIR/drop_forget_copy.rs:39:12\n    |\n LL |     forget(s1);\n@@ -54,7 +54,7 @@ error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetti\n LL |     forget(s2);\n    |     ^^^^^^^^^^\n    |\n-note: argument has type SomeStruct\n+note: argument has type `SomeStruct`\n   --> $DIR/drop_forget_copy.rs:40:12\n    |\n LL |     forget(s2);\n@@ -66,7 +66,7 @@ error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetti\n LL |     forget(s4);\n    |     ^^^^^^^^^^\n    |\n-note: argument has type SomeStruct\n+note: argument has type `SomeStruct`\n   --> $DIR/drop_forget_copy.rs:42:12\n    |\n LL |     forget(s4);"}, {"sha": "5a0ebde82c5d4eea033c467a2f13c2c32f67bf09", "filename": "src/tools/clippy/tests/ui/drop_non_drop.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_non_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_non_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_non_drop.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,40 @@\n+#![warn(clippy::drop_non_drop)]\n+\n+use core::mem::drop;\n+\n+fn make_result<T>(t: T) -> Result<T, ()> {\n+    Ok(t)\n+}\n+\n+#[must_use]\n+fn must_use<T>(t: T) -> T {\n+    t\n+}\n+\n+fn drop_generic<T>(t: T) {\n+    // Don't lint\n+    drop(t)\n+}\n+\n+fn main() {\n+    struct Foo;\n+    // Lint\n+    drop(Foo);\n+    // Don't lint\n+    drop(make_result(Foo));\n+    // Don't lint\n+    drop(must_use(Foo));\n+\n+    struct Bar;\n+    impl Drop for Bar {\n+        fn drop(&mut self) {}\n+    }\n+    // Don't lint\n+    drop(Bar);\n+\n+    struct Baz<T>(T);\n+    // Lint\n+    drop(Baz(Foo));\n+    // Don't lint\n+    drop(Baz(Bar));\n+}"}, {"sha": "f73068901c503ac2ff3eb1b685b3336247b1ddd9", "filename": "src/tools/clippy/tests/ui/drop_non_drop.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_non_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_non_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_non_drop.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,27 @@\n+error: call to `std::mem::drop` with a value that does not implement `Drop`. Dropping such a type only extends it's contained lifetimes\n+  --> $DIR/drop_non_drop.rs:22:5\n+   |\n+LL |     drop(Foo);\n+   |     ^^^^^^^^^\n+   |\n+   = note: `-D clippy::drop-non-drop` implied by `-D warnings`\n+note: argument has type `main::Foo`\n+  --> $DIR/drop_non_drop.rs:22:10\n+   |\n+LL |     drop(Foo);\n+   |          ^^^\n+\n+error: call to `std::mem::drop` with a value that does not implement `Drop`. Dropping such a type only extends it's contained lifetimes\n+  --> $DIR/drop_non_drop.rs:37:5\n+   |\n+LL |     drop(Baz(Foo));\n+   |     ^^^^^^^^^^^^^^\n+   |\n+note: argument has type `main::Baz<main::Foo>`\n+  --> $DIR/drop_non_drop.rs:37:10\n+   |\n+LL |     drop(Baz(Foo));\n+   |          ^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7de0b0bbdf9ae8ffdfb4019d695e4a38df8ad197", "filename": "src/tools/clippy/tests/ui/drop_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,7 +1,7 @@\n #![warn(clippy::drop_ref)]\n #![allow(clippy::toplevel_ref_arg)]\n #![allow(clippy::map_err_ignore)]\n-#![allow(clippy::unnecessary_wraps)]\n+#![allow(clippy::unnecessary_wraps, clippy::drop_non_drop)]\n \n use std::mem::drop;\n "}, {"sha": "80f07603b8d4f93ecf477ef4e2fd5cdeb7d3140f", "filename": "src/tools/clippy/tests/ui/empty_structs_with_brackets.fixed", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_structs_with_brackets.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_structs_with_brackets.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_structs_with_brackets.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,25 @@\n+// run-rustfix\n+#![warn(clippy::empty_structs_with_brackets)]\n+#![allow(dead_code)]\n+\n+pub struct MyEmptyStruct; // should trigger lint\n+struct MyEmptyTupleStruct; // should trigger lint\n+\n+// should not trigger lint\n+struct MyCfgStruct {\n+    #[cfg(feature = \"thisisneverenabled\")]\n+    field: u8,\n+}\n+\n+// should not trigger lint\n+struct MyCfgTupleStruct(#[cfg(feature = \"thisisneverenabled\")] u8);\n+\n+// should not trigger lint\n+struct MyStruct {\n+    field: u8,\n+}\n+struct MyTupleStruct(usize, String); // should not trigger lint\n+struct MySingleTupleStruct(usize); // should not trigger lint\n+struct MyUnitLikeStruct; // should not trigger lint\n+\n+fn main() {}"}, {"sha": "1d1ed4c769025526e118d89f1bea0581a66ab4a7", "filename": "src/tools/clippy/tests/ui/empty_structs_with_brackets.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_structs_with_brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_structs_with_brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_structs_with_brackets.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,25 @@\n+// run-rustfix\n+#![warn(clippy::empty_structs_with_brackets)]\n+#![allow(dead_code)]\n+\n+pub struct MyEmptyStruct {} // should trigger lint\n+struct MyEmptyTupleStruct(); // should trigger lint\n+\n+// should not trigger lint\n+struct MyCfgStruct {\n+    #[cfg(feature = \"thisisneverenabled\")]\n+    field: u8,\n+}\n+\n+// should not trigger lint\n+struct MyCfgTupleStruct(#[cfg(feature = \"thisisneverenabled\")] u8);\n+\n+// should not trigger lint\n+struct MyStruct {\n+    field: u8,\n+}\n+struct MyTupleStruct(usize, String); // should not trigger lint\n+struct MySingleTupleStruct(usize); // should not trigger lint\n+struct MyUnitLikeStruct; // should not trigger lint\n+\n+fn main() {}"}, {"sha": "0308cb5571af25cf8442d14c67d64be91cc95347", "filename": "src/tools/clippy/tests/ui/empty_structs_with_brackets.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_structs_with_brackets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_structs_with_brackets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_structs_with_brackets.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,19 @@\n+error: found empty brackets on struct declaration\n+  --> $DIR/empty_structs_with_brackets.rs:5:25\n+   |\n+LL | pub struct MyEmptyStruct {} // should trigger lint\n+   |                         ^^^\n+   |\n+   = note: `-D clippy::empty-structs-with-brackets` implied by `-D warnings`\n+   = help: remove the brackets\n+\n+error: found empty brackets on struct declaration\n+  --> $DIR/empty_structs_with_brackets.rs:6:26\n+   |\n+LL | struct MyEmptyTupleStruct(); // should trigger lint\n+   |                          ^^^\n+   |\n+   = help: remove the brackets\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7e18d70bae4007313c76d384005d255fd921a2d9", "filename": "src/tools/clippy/tests/ui/err_expect.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ferr_expect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ferr_expect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ferr_expect.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+struct MyTypeNonDebug;\n+\n+#[derive(Debug)]\n+struct MyTypeDebug;\n+\n+fn main() {\n+    let test_debug: Result<MyTypeDebug, u32> = Ok(MyTypeDebug);\n+    test_debug.expect_err(\"Testing debug type\");\n+\n+    let test_non_debug: Result<MyTypeNonDebug, u32> = Ok(MyTypeNonDebug);\n+    test_non_debug.err().expect(\"Testing non debug type\");\n+}"}, {"sha": "bf8c3c9fb8c98f680adfaeb6a9e9f2fa30fc437a", "filename": "src/tools/clippy/tests/ui/err_expect.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ferr_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ferr_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ferr_expect.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+struct MyTypeNonDebug;\n+\n+#[derive(Debug)]\n+struct MyTypeDebug;\n+\n+fn main() {\n+    let test_debug: Result<MyTypeDebug, u32> = Ok(MyTypeDebug);\n+    test_debug.err().expect(\"Testing debug type\");\n+\n+    let test_non_debug: Result<MyTypeNonDebug, u32> = Ok(MyTypeNonDebug);\n+    test_non_debug.err().expect(\"Testing non debug type\");\n+}"}, {"sha": "ffd97e00a5c09fa21dc16efa4ce028df4704e521", "filename": "src/tools/clippy/tests/ui/err_expect.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ferr_expect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ferr_expect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ferr_expect.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,10 @@\n+error: called `.err().expect()` on a `Result` value\n+  --> $DIR/err_expect.rs:10:16\n+   |\n+LL |     test_debug.err().expect(\"Testing debug type\");\n+   |                ^^^^^^^^^^^^ help: try: `expect_err`\n+   |\n+   = note: `-D clippy::err-expect` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f805bcc9ba8af503140bf2cff10433824147971b", "filename": "src/tools/clippy/tests/ui/fn_params_excessive_bools.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffn_params_excessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffn_params_excessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffn_params_excessive_bools.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -20,7 +20,7 @@ fn h(_: bool, _: bool, _: bool) {}\n fn e(_: S, _: S, _: Box<S>, _: Vec<u32>) {}\n fn t(_: S, _: S, _: Box<S>, _: Vec<u32>, _: bool, _: bool, _: bool, _: bool) {}\n \n-struct S {}\n+struct S;\n trait Trait {\n     fn f(_: bool, _: bool, _: bool, _: bool);\n     fn g(_: bool, _: bool, _: bool, _: Vec<u32>);"}, {"sha": "7580cf95ebfa8214facad9f9338c14aa54dc7c68", "filename": "src/tools/clippy/tests/ui/forget_non_drop.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_non_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_non_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_non_drop.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,27 @@\n+#![warn(clippy::forget_non_drop)]\n+\n+use core::mem::forget;\n+\n+fn forget_generic<T>(t: T) {\n+    // Don't lint\n+    forget(t)\n+}\n+\n+fn main() {\n+    struct Foo;\n+    // Lint\n+    forget(Foo);\n+\n+    struct Bar;\n+    impl Drop for Bar {\n+        fn drop(&mut self) {}\n+    }\n+    // Don't lint\n+    forget(Bar);\n+\n+    struct Baz<T>(T);\n+    // Lint\n+    forget(Baz(Foo));\n+    // Don't lint\n+    forget(Baz(Bar));\n+}"}, {"sha": "03fb00960a44732faaf1f9078952fe86884d77db", "filename": "src/tools/clippy/tests/ui/forget_non_drop.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_non_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_non_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_non_drop.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -0,0 +1,27 @@\n+error: call to `std::mem::forget` with a value that does not implement `Drop`. Forgetting such a type is the same as dropping it\n+  --> $DIR/forget_non_drop.rs:13:5\n+   |\n+LL |     forget(Foo);\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::forget-non-drop` implied by `-D warnings`\n+note: argument has type `main::Foo`\n+  --> $DIR/forget_non_drop.rs:13:12\n+   |\n+LL |     forget(Foo);\n+   |            ^^^\n+\n+error: call to `std::mem::forget` with a value that does not implement `Drop`. Forgetting such a type is the same as dropping it\n+  --> $DIR/forget_non_drop.rs:24:5\n+   |\n+LL |     forget(Baz(Foo));\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `main::Baz<main::Foo>`\n+  --> $DIR/forget_non_drop.rs:24:12\n+   |\n+LL |     forget(Baz(Foo));\n+   |            ^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6c8c4c9c0edecc01adeaee75a87681af5b94dc06", "filename": "src/tools/clippy/tests/ui/forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,6 +1,6 @@\n #![warn(clippy::forget_ref)]\n #![allow(clippy::toplevel_ref_arg)]\n-#![allow(clippy::unnecessary_wraps)]\n+#![allow(clippy::unnecessary_wraps, clippy::forget_non_drop)]\n \n use std::mem::forget;\n "}, {"sha": "edc3fe1aec13a556fa0c8c2121a1639553c57952", "filename": "src/tools/clippy/tests/ui/identity_op.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -66,4 +66,13 @@ fn main() {\n     let b = a << 0; // no error: non-integer\n \n     1 * Meter; // no error: non-integer\n+\n+    2 % 3;\n+    -2 % 3;\n+    2 % -3 + x;\n+    -2 % -3 + x;\n+    x + 1 % 3;\n+    (x + 1) % 3; // no error\n+    4 % 3; // no error\n+    4 % -3; // no error\n }"}, {"sha": "706f01a3dd6c403b245ca8568cdb624def8f943a", "filename": "src/tools/clippy/tests/ui/identity_op.stderr", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -78,5 +78,35 @@ error: the operation is ineffective. Consider reducing it to `x`\n LL |     x >> &0;\n    |     ^^^^^^^\n \n-error: aborting due to 13 previous errors\n+error: the operation is ineffective. Consider reducing it to `2`\n+  --> $DIR/identity_op.rs:70:5\n+   |\n+LL |     2 % 3;\n+   |     ^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `-2`\n+  --> $DIR/identity_op.rs:71:5\n+   |\n+LL |     -2 % 3;\n+   |     ^^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `2`\n+  --> $DIR/identity_op.rs:72:5\n+   |\n+LL |     2 % -3 + x;\n+   |     ^^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `-2`\n+  --> $DIR/identity_op.rs:73:5\n+   |\n+LL |     -2 % -3 + x;\n+   |     ^^^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `1`\n+  --> $DIR/identity_op.rs:74:9\n+   |\n+LL |     x + 1 % 3;\n+   |         ^^^^^\n+\n+error: aborting due to 18 previous errors\n "}, {"sha": "2549c9f32f9049326e8ae416a651a81526a23b47", "filename": "src/tools/clippy/tests/ui/implicit_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -30,7 +30,7 @@ where\n }\n \n #[derive(Copy, Clone)]\n-struct Kitten {}\n+struct Kitten;\n impl Kitten {\n     // badly named method\n     fn to_vec(self) -> Kitten {\n@@ -44,7 +44,7 @@ impl Borrow<BorrowedKitten> for Kitten {\n     }\n }\n \n-struct BorrowedKitten {}\n+struct BorrowedKitten;\n impl ToOwned for BorrowedKitten {\n     type Owned = Kitten;\n     fn to_owned(&self) -> Kitten {"}, {"sha": "45a430edcb58998562e96b35e86d8c2a41db1e8b", "filename": "src/tools/clippy/tests/ui/indexing_slicing_index.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,18 +1,34 @@\n+#![feature(inline_const)]\n #![warn(clippy::indexing_slicing)]\n // We also check the out_of_bounds_indexing lint here, because it lints similar things and\n // we want to avoid false positives.\n #![warn(clippy::out_of_bounds_indexing)]\n-#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n+#![allow(const_err, clippy::no_effect, clippy::unnecessary_operation)]\n+\n+const ARR: [i32; 2] = [1, 2];\n+const REF: &i32 = &ARR[idx()]; // Ok, should not produce stderr.\n+const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n+\n+const fn idx() -> usize {\n+    1\n+}\n+const fn idx4() -> usize {\n+    4\n+}\n \n fn main() {\n     let x = [1, 2, 3, 4];\n     let index: usize = 1;\n     x[index];\n-    x[4]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n-    x[1 << 3]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n+    x[4]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n+    x[1 << 3]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n \n     x[0]; // Ok, should not produce stderr.\n     x[3]; // Ok, should not produce stderr.\n+    x[const { idx() }]; // Ok, should not produce stderr.\n+    x[const { idx4() }]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n+    const { &ARR[idx()] }; // Ok, should not produce stderr.\n+    const { &ARR[idx4()] }; // Ok, let rustc handle const contexts.\n \n     let y = &x;\n     y[0]; // Ok, referencing shouldn't affect this lint. See the issue 6021\n@@ -25,7 +41,7 @@ fn main() {\n \n     const N: usize = 15; // Out of bounds\n     const M: usize = 3; // In bounds\n-    x[N]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n+    x[N]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n     x[M]; // Ok, should not produce stderr.\n     v[N];\n     v[M];"}, {"sha": "83a36f407d5d877b18511182ca893781bbc628aa", "filename": "src/tools/clippy/tests/ui/indexing_slicing_index.stderr", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,5 +1,17 @@\n+error[E0080]: evaluation of `main::{constant#3}::<&i32>` failed\n+  --> $DIR/indexing_slicing_index.rs:31:14\n+   |\n+LL |     const { &ARR[idx4()] }; // Ok, let rustc handle const contexts.\n+   |              ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/indexing_slicing_index.rs:31:5\n+   |\n+LL |     const { &ARR[idx4()] }; // Ok, let rustc handle const contexts.\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n error: indexing may panic\n-  --> $DIR/indexing_slicing_index.rs:10:5\n+  --> $DIR/indexing_slicing_index.rs:22:5\n    |\n LL |     x[index];\n    |     ^^^^^^^^\n@@ -8,44 +20,45 @@ LL |     x[index];\n    = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic\n-  --> $DIR/indexing_slicing_index.rs:22:5\n+  --> $DIR/indexing_slicing_index.rs:38:5\n    |\n LL |     v[0];\n    |     ^^^^\n    |\n    = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic\n-  --> $DIR/indexing_slicing_index.rs:23:5\n+  --> $DIR/indexing_slicing_index.rs:39:5\n    |\n LL |     v[10];\n    |     ^^^^^\n    |\n    = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic\n-  --> $DIR/indexing_slicing_index.rs:24:5\n+  --> $DIR/indexing_slicing_index.rs:40:5\n    |\n LL |     v[1 << 3];\n    |     ^^^^^^^^^\n    |\n    = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic\n-  --> $DIR/indexing_slicing_index.rs:30:5\n+  --> $DIR/indexing_slicing_index.rs:46:5\n    |\n LL |     v[N];\n    |     ^^^^\n    |\n    = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic\n-  --> $DIR/indexing_slicing_index.rs:31:5\n+  --> $DIR/indexing_slicing_index.rs:47:5\n    |\n LL |     v[M];\n    |     ^^^^\n    |\n    = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "f23671c26e4cc55b43615564d8fd28148b3a6a98", "filename": "src/tools/clippy/tests/ui/iter_nth_zero.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_nth_zero.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_nth_zero.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_nth_zero.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -3,7 +3,7 @@\n #![warn(clippy::iter_nth_zero)]\n use std::collections::HashSet;\n \n-struct Foo {}\n+struct Foo;\n \n impl Foo {\n     fn nth(&self, index: usize) -> usize {"}, {"sha": "7c968d49845714574db74baaf2178eff36244467", "filename": "src/tools/clippy/tests/ui/iter_nth_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_nth_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_nth_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_nth_zero.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -3,7 +3,7 @@\n #![warn(clippy::iter_nth_zero)]\n use std::collections::HashSet;\n \n-struct Foo {}\n+struct Foo;\n \n impl Foo {\n     fn nth(&self, index: usize) -> usize {"}, {"sha": "56761ebbcb80bb0e5dcd595ba3ca0194b41829e2", "filename": "src/tools/clippy/tests/ui/iter_overeager_cloned.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![warn(clippy::iter_overeager_cloned, clippy::redundant_clone, clippy::filter_next)]\n+#![allow(dead_code)]\n \n fn main() {\n     let vec = vec![\"1\".to_string(), \"2\".to_string(), \"3\".to_string()];\n@@ -43,3 +44,8 @@ fn main() {\n     // Should probably stay as it is.\n     let _ = [0, 1, 2, 3, 4].iter().cloned().take(10);\n }\n+\n+// #8527\n+fn cloned_flatten(x: Option<&Option<String>>) -> Option<String> {\n+    x.cloned().flatten()\n+}"}, {"sha": "98321d889b58273fd78a023d8933ad3af3f53074", "filename": "src/tools/clippy/tests/ui/iter_overeager_cloned.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![warn(clippy::iter_overeager_cloned, clippy::redundant_clone, clippy::filter_next)]\n+#![allow(dead_code)]\n \n fn main() {\n     let vec = vec![\"1\".to_string(), \"2\".to_string(), \"3\".to_string()];\n@@ -45,3 +46,8 @@ fn main() {\n     // Should probably stay as it is.\n     let _ = [0, 1, 2, 3, 4].iter().cloned().take(10);\n }\n+\n+// #8527\n+fn cloned_flatten(x: Option<&Option<String>>) -> Option<String> {\n+    x.cloned().flatten()\n+}"}, {"sha": "0582700fd16a8bde34e9b13c93786ad9e467c8e6", "filename": "src/tools/clippy/tests/ui/iter_overeager_cloned.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_overeager_cloned.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,45 +1,45 @@\n error: called `cloned().last()` on an `Iterator`. It may be more efficient to call `last().cloned()` instead\n-  --> $DIR/iter_overeager_cloned.rs:7:29\n+  --> $DIR/iter_overeager_cloned.rs:8:29\n    |\n LL |     let _: Option<String> = vec.iter().cloned().last();\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().last().cloned()`\n    |\n    = note: `-D clippy::iter-overeager-cloned` implied by `-D warnings`\n \n error: called `cloned().next()` on an `Iterator`. It may be more efficient to call `next().cloned()` instead\n-  --> $DIR/iter_overeager_cloned.rs:9:29\n+  --> $DIR/iter_overeager_cloned.rs:10:29\n    |\n LL |     let _: Option<String> = vec.iter().chain(vec.iter()).cloned().next();\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().chain(vec.iter()).next().cloned()`\n \n error: called `cloned().count()` on an `Iterator`. It may be more efficient to call `count()` instead\n-  --> $DIR/iter_overeager_cloned.rs:11:20\n+  --> $DIR/iter_overeager_cloned.rs:12:20\n    |\n LL |     let _: usize = vec.iter().filter(|x| x == &\"2\").cloned().count();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().filter(|x| x == &\"2\").count()`\n    |\n    = note: `-D clippy::redundant-clone` implied by `-D warnings`\n \n error: called `cloned().take(...)` on an `Iterator`. It may be more efficient to call `take(...).cloned()` instead\n-  --> $DIR/iter_overeager_cloned.rs:13:21\n+  --> $DIR/iter_overeager_cloned.rs:14:21\n    |\n LL |     let _: Vec<_> = vec.iter().cloned().take(2).collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().take(2).cloned()`\n \n error: called `cloned().skip(...)` on an `Iterator`. It may be more efficient to call `skip(...).cloned()` instead\n-  --> $DIR/iter_overeager_cloned.rs:15:21\n+  --> $DIR/iter_overeager_cloned.rs:16:21\n    |\n LL |     let _: Vec<_> = vec.iter().cloned().skip(2).collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().skip(2).cloned()`\n \n error: called `cloned().nth(...)` on an `Iterator`. It may be more efficient to call `nth(...).cloned()` instead\n-  --> $DIR/iter_overeager_cloned.rs:17:13\n+  --> $DIR/iter_overeager_cloned.rs:18:13\n    |\n LL |     let _ = vec.iter().filter(|x| x == &\"2\").cloned().nth(2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().filter(|x| x == &\"2\").nth(2).cloned()`\n \n error: called `cloned().flatten()` on an `Iterator`. It may be more efficient to call `flatten().cloned()` instead\n-  --> $DIR/iter_overeager_cloned.rs:19:13\n+  --> $DIR/iter_overeager_cloned.rs:20:13\n    |\n LL |       let _ = [Some(Some(\"str\".to_string())), Some(Some(\"str\".to_string()))]\n    |  _____________^"}, {"sha": "7601b5c66fa35057f69ea8cd989b5df689761e3c", "filename": "src/tools/clippy/tests/ui/large_types_passed_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_types_passed_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_types_passed_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_types_passed_by_value.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -37,7 +37,7 @@ pub trait PubLargeTypeDevourer {\n     fn devoure_array_in_public(&self, array: [u8; 6666]);\n }\n \n-struct S {}\n+struct S;\n impl LargeTypeDevourer for S {\n     fn devoure_array(&self, array: [u8; 6666]) {\n         todo!();"}, {"sha": "bb162adc9adb26309f3b0968936a4e378ec0cfe4", "filename": "src/tools/clippy/tests/ui/let_and_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_and_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_and_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_and_return.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -88,7 +88,7 @@ mod no_lint_if_stmt_borrows {\n             ret\n         }\n \n-        struct Bar {}\n+        struct Bar;\n \n         impl Bar {\n             fn new() -> Self {"}, {"sha": "1edb77c748bfb715c0a3ddbcf2db2b19237238c7", "filename": "src/tools/clippy/tests/ui/let_underscore_must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_underscore_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_underscore_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_underscore_must_use.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -26,7 +26,7 @@ fn h() -> u32 {\n     0\n }\n \n-struct S {}\n+struct S;\n \n impl S {\n     #[must_use]"}, {"sha": "b7e46a4a8ccc284cb9b8a5640e00bc944a762314", "filename": "src/tools/clippy/tests/ui/manual_async_fn.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -38,7 +38,7 @@ async fn already_async() -> impl Future<Output = i32> {\n     async { 42 }\n }\n \n-struct S {}\n+struct S;\n impl S {\n     async fn inh_fut() -> i32 {\n         // NOTE: this code is here just to check that the indentation is correct in the suggested fix"}, {"sha": "b05429da6622500a9b35a606ed4967317419cb85", "filename": "src/tools/clippy/tests/ui/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -52,7 +52,7 @@ async fn already_async() -> impl Future<Output = i32> {\n     async { 42 }\n }\n \n-struct S {}\n+struct S;\n impl S {\n     fn inh_fut() -> impl Future<Output = i32> {\n         async {"}, {"sha": "7d68978216c9c67b8931a9562e96d3e7791930de", "filename": "src/tools/clippy/tests/ui/manual_unwrap_or.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -78,7 +78,7 @@ fn result_unwrap_or() {\n     (Ok(1) as Result<i32, &str>).unwrap_or(42);\n \n     // method call case, suggestion must not surround Result expr `s.method()` with parentheses\n-    struct S {}\n+    struct S;\n     impl S {\n         fn method(self) -> Option<i32> {\n             Some(42)"}, {"sha": "b937fe6f977e5b7393d3423b9573ab5b903f89ea", "filename": "src/tools/clippy/tests/ui/manual_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -102,7 +102,7 @@ fn result_unwrap_or() {\n     };\n \n     // method call case, suggestion must not surround Result expr `s.method()` with parentheses\n-    struct S {}\n+    struct S;\n     impl S {\n         fn method(self) -> Option<i32> {\n             Some(42)"}, {"sha": "2256e51f2d09c49550f3f6ccd7c74034c1b82ab8", "filename": "src/tools/clippy/tests/ui/map_identity.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_identity.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_identity.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_identity.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -16,6 +16,8 @@ fn main() {\n     let _: Result<i8, f32> = Err(2.3).map(|x: i8| {\n         return x + 3;\n     });\n+    let _: Result<u32, u32> = Ok(1);\n+    let _: Result<u32, u32> = Ok(1).map_err(|a: u32| a * 42);\n }\n \n fn not_identity(x: &u16) -> u16 {"}, {"sha": "ccfdc9ea76d522ce6d888d04aafdbd401fda0959", "filename": "src/tools/clippy/tests/ui/map_identity.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_identity.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -18,6 +18,8 @@ fn main() {\n     let _: Result<i8, f32> = Err(2.3).map(|x: i8| {\n         return x + 3;\n     });\n+    let _: Result<u32, u32> = Ok(1).map_err(|a| a);\n+    let _: Result<u32, u32> = Ok(1).map_err(|a: u32| a * 42);\n }\n \n fn not_identity(x: &u16) -> u16 {"}, {"sha": "b6a77281f6de2e6424c76bd23f1dab64e99469a7", "filename": "src/tools/clippy/tests/ui/map_identity.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_identity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_identity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_identity.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -33,5 +33,11 @@ LL | |         return x;\n LL | |     });\n    | |______^ help: remove the call to `map`\n \n-error: aborting due to 5 previous errors\n+error: unnecessary map of the identity function\n+  --> $DIR/map_identity.rs:21:36\n+   |\n+LL |     let _: Result<u32, u32> = Ok(1).map_err(|a| a);\n+   |                                    ^^^^^^^^^^^^^^^ help: remove the call to `map_err`\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "e7f07b50f3ab1fbad149d309b3da9c67bd007950", "filename": "src/tools/clippy/tests/ui/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_unit_fn.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,5 +1,5 @@\n #![allow(unused)]\n-struct Mappable {}\n+struct Mappable;\n \n impl Mappable {\n     pub fn map(&self) {}"}, {"sha": "f83c3e0e281ca29ccad4714e491feb26a6b18f5e", "filename": "src/tools/clippy/tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -99,7 +99,7 @@ pub fn manual_range_contains() {\n }\n \n pub fn use_self() {\n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         fn new() -> Foo {\n@@ -145,6 +145,16 @@ fn int_from_bool() -> u8 {\n     true as u8\n }\n \n+fn err_expect() {\n+    let x: Result<u32, &str> = Ok(10);\n+    x.err().expect(\"Testing expect_err\");\n+}\n+\n+fn cast_abs_to_unsigned() {\n+    let x: i32 = 10;\n+    assert_eq!(10u32, x.abs() as u32);\n+}\n+\n fn main() {\n     filter_map_next();\n     checked_conversion();\n@@ -162,6 +172,8 @@ fn main() {\n     missing_const_for_fn();\n     unnest_or_patterns();\n     int_from_bool();\n+    err_expect();\n+    cast_abs_to_unsigned();\n }\n \n mod just_under_msrv {"}, {"sha": "de225eb740d03dc9024df7276c6e72d9d399e760", "filename": "src/tools/clippy/tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,12 +1,12 @@\n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:186:24\n+  --> $DIR/min_rust_version_attr.rs:198:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::manual-strip` implied by `-D warnings`\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:185:9\n+  --> $DIR/min_rust_version_attr.rs:197:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,13 +17,13 @@ LL ~             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:198:24\n+  --> $DIR/min_rust_version_attr.rs:210:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:197:9\n+  --> $DIR/min_rust_version_attr.rs:209:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "07f8e3888c998274b8fa240a6fac1e72fd7f2e10", "filename": "src/tools/clippy/tests/ui/missing_inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_inline.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -7,8 +7,8 @@\n type Typedef = String;\n pub type PubTypedef = String;\n \n-struct Foo {} // ok\n-pub struct PubFoo {} // ok\n+struct Foo; // ok\n+pub struct PubFoo; // ok\n enum FooE {} // ok\n pub enum PubFooE {} // ok\n \n@@ -63,4 +63,4 @@ impl PubFoo {\n \n // do not lint this since users cannot control the external code\n #[derive(Debug)]\n-pub struct S {}\n+pub struct S;"}, {"sha": "ebaa77cc283e0420cd0c7f17085cf998524e6b33", "filename": "src/tools/clippy/tests/ui/module_name_repetitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodule_name_repetitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodule_name_repetitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodule_name_repetitions.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -7,7 +7,7 @@ mod foo {\n     pub fn foo() {}\n     pub fn foo_bar() {}\n     pub fn bar_foo() {}\n-    pub struct FooCake {}\n+    pub struct FooCake;\n     pub enum CakeFoo {}\n     pub struct Foo7Bar;\n "}, {"sha": "3f343a3e430185f8ca8535370c363b1f2c308ace", "filename": "src/tools/clippy/tests/ui/module_name_repetitions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodule_name_repetitions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodule_name_repetitions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodule_name_repetitions.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -15,8 +15,8 @@ LL |     pub fn bar_foo() {}\n error: item name starts with its containing module's name\n   --> $DIR/module_name_repetitions.rs:10:5\n    |\n-LL |     pub struct FooCake {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+LL |     pub struct FooCake;\n+   |     ^^^^^^^^^^^^^^^^^^^\n \n error: item name ends with its containing module's name\n   --> $DIR/module_name_repetitions.rs:11:5"}, {"sha": "3ebe46bc5be7c5b8b4108f4477b70663a5734b38", "filename": "src/tools/clippy/tests/ui/modulo_arithmetic_integral_const.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_arithmetic_integral_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_arithmetic_integral_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_arithmetic_integral_const.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,5 +1,10 @@\n #![warn(clippy::modulo_arithmetic)]\n-#![allow(clippy::no_effect, clippy::unnecessary_operation, clippy::modulo_one)]\n+#![allow(\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::modulo_one,\n+    clippy::identity_op\n+)]\n \n fn main() {\n     // Lint when both sides are const and of the opposite sign"}, {"sha": "11b5f77461ba2e93b94779543f77b8770ffbf440", "filename": "src/tools/clippy/tests/ui/modulo_arithmetic_integral_const.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_arithmetic_integral_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_arithmetic_integral_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_arithmetic_integral_const.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,5 +1,5 @@\n error: you are using modulo operator on constants with different signs: `-1 % 2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:6:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:11:5\n    |\n LL |     -1 % 2;\n    |     ^^^^^^\n@@ -9,7 +9,7 @@ LL |     -1 % 2;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `1 % -2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:7:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:12:5\n    |\n LL |     1 % -2;\n    |     ^^^^^^\n@@ -18,7 +18,7 @@ LL |     1 % -2;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `-1 % 3`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:8:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:13:5\n    |\n LL |     (1 - 2) % (1 + 2);\n    |     ^^^^^^^^^^^^^^^^^\n@@ -27,7 +27,7 @@ LL |     (1 - 2) % (1 + 2);\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `3 % -1`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:9:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:14:5\n    |\n LL |     (1 + 2) % (1 - 2);\n    |     ^^^^^^^^^^^^^^^^^\n@@ -36,7 +36,7 @@ LL |     (1 + 2) % (1 - 2);\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `-35 % 300000`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:10:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:15:5\n    |\n LL |     35 * (7 - 4 * 2) % (-500 * -600);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -45,7 +45,7 @@ LL |     35 * (7 - 4 * 2) % (-500 * -600);\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `-1 % 2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:12:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:17:5\n    |\n LL |     -1i8 % 2i8;\n    |     ^^^^^^^^^^\n@@ -54,7 +54,7 @@ LL |     -1i8 % 2i8;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `1 % -2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:13:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:18:5\n    |\n LL |     1i8 % -2i8;\n    |     ^^^^^^^^^^\n@@ -63,7 +63,7 @@ LL |     1i8 % -2i8;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `-1 % 2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:14:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:19:5\n    |\n LL |     -1i16 % 2i16;\n    |     ^^^^^^^^^^^^\n@@ -72,7 +72,7 @@ LL |     -1i16 % 2i16;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `1 % -2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:15:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:20:5\n    |\n LL |     1i16 % -2i16;\n    |     ^^^^^^^^^^^^\n@@ -81,7 +81,7 @@ LL |     1i16 % -2i16;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `-1 % 2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:16:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:21:5\n    |\n LL |     -1i32 % 2i32;\n    |     ^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL |     -1i32 % 2i32;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `1 % -2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:17:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:22:5\n    |\n LL |     1i32 % -2i32;\n    |     ^^^^^^^^^^^^\n@@ -99,7 +99,7 @@ LL |     1i32 % -2i32;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `-1 % 2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:18:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:23:5\n    |\n LL |     -1i64 % 2i64;\n    |     ^^^^^^^^^^^^\n@@ -108,7 +108,7 @@ LL |     -1i64 % 2i64;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `1 % -2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:19:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:24:5\n    |\n LL |     1i64 % -2i64;\n    |     ^^^^^^^^^^^^\n@@ -117,7 +117,7 @@ LL |     1i64 % -2i64;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `-1 % 2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:20:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:25:5\n    |\n LL |     -1i128 % 2i128;\n    |     ^^^^^^^^^^^^^^\n@@ -126,7 +126,7 @@ LL |     -1i128 % 2i128;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `1 % -2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:21:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:26:5\n    |\n LL |     1i128 % -2i128;\n    |     ^^^^^^^^^^^^^^\n@@ -135,7 +135,7 @@ LL |     1i128 % -2i128;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `-1 % 2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:22:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:27:5\n    |\n LL |     -1isize % 2isize;\n    |     ^^^^^^^^^^^^^^^^\n@@ -144,7 +144,7 @@ LL |     -1isize % 2isize;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `1 % -2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:23:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:28:5\n    |\n LL |     1isize % -2isize;\n    |     ^^^^^^^^^^^^^^^^"}, {"sha": "02b43cce2bd4c5b77a46ee1d73088f83ad8732ca", "filename": "src/tools/clippy/tests/ui/needless_arbitrary_self_type_unfixable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_arbitrary_self_type_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_arbitrary_self_type_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_arbitrary_self_type_unfixable.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -14,7 +14,7 @@ mod issue_6089 {\n                 fn test(self: &Self);\n             }\n \n-            struct S1 {}\n+            struct S1;\n \n             impl T1 for S1 {\n                 fn test(self: &Self) {}\n@@ -32,7 +32,7 @@ mod issue_6089 {\n         fn call_with_mut_self(&mut self);\n     }\n \n-    struct S2 {}\n+    struct S2;\n \n     // The method's signature will be expanded to:\n     //  fn call_with_mut_self<'life0>(self: &'life0 mut Self) {}"}, {"sha": "1456204ca8692fdd79f65e4540946674c2d9f7e2", "filename": "src/tools/clippy/tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -268,7 +268,7 @@ mod issue4291 {\n \n mod issue2944 {\n     trait Foo {}\n-    struct Bar {}\n+    struct Bar;\n     struct Baz<'a> {\n         bar: &'a Bar,\n     }"}, {"sha": "9ccccaa1725a65dc8867a1a48e9698c811682886", "filename": "src/tools/clippy/tests/ui/needless_match.fixed", "status": "modified", "additions": 142, "deletions": 28, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -4,38 +4,35 @@\n #![allow(dead_code)]\n \n #[derive(Clone, Copy)]\n-enum Choice {\n+enum Simple {\n     A,\n     B,\n     C,\n     D,\n }\n \n-#[allow(unused_mut)]\n fn useless_match() {\n-    let mut i = 10;\n+    let i = 10;\n     let _: i32 = i;\n-    let _: i32 = i;\n-    let mut _i_mut = i;\n-\n     let s = \"test\";\n     let _: &str = s;\n }\n \n-fn custom_type_match(se: Choice) {\n-    let _: Choice = se;\n+fn custom_type_match() {\n+    let se = Simple::A;\n+    let _: Simple = se;\n     // Don't trigger\n-    let _: Choice = match se {\n-        Choice::A => Choice::A,\n-        Choice::B => Choice::B,\n-        _ => Choice::C,\n+    let _: Simple = match se {\n+        Simple::A => Simple::A,\n+        Simple::B => Simple::B,\n+        _ => Simple::C,\n     };\n     // Mingled, don't trigger\n-    let _: Choice = match se {\n-        Choice::A => Choice::B,\n-        Choice::B => Choice::C,\n-        Choice::C => Choice::D,\n-        Choice::D => Choice::A,\n+    let _: Simple = match se {\n+        Simple::A => Simple::B,\n+        Simple::B => Simple::C,\n+        Simple::C => Simple::D,\n+        Simple::D => Simple::A,\n     };\n }\n \n@@ -55,29 +52,146 @@ fn func_ret_err<T>(err: T) -> Result<i32, T> {\n fn result_match() {\n     let _: Result<i32, i32> = Ok(1);\n     let _: Result<i32, i32> = func_ret_err(0_i32);\n+    // as ref, don't trigger\n+    let res = &func_ret_err(0_i32);\n+    let _: Result<&i32, &i32> = match *res {\n+        Ok(ref x) => Ok(x),\n+        Err(ref x) => Err(x),\n+    };\n }\n \n-fn if_let_option() -> Option<i32> {\n-    Some(1)\n+fn if_let_option() {\n+    let _ = Some(1);\n+\n+    fn do_something() {}\n+\n+    // Don't trigger\n+    let _ = if let Some(a) = Some(1) {\n+        Some(a)\n+    } else {\n+        do_something();\n+        None\n+    };\n+\n+    // Don't trigger\n+    let _ = if let Some(a) = Some(1) {\n+        do_something();\n+        Some(a)\n+    } else {\n+        None\n+    };\n }\n \n-fn if_let_result(x: Result<(), i32>) {\n-    let _: Result<(), i32> = x;\n-    let _: Result<(), i32> = x;\n+fn if_let_result() {\n+    let x: Result<i32, i32> = Ok(1);\n+    let _: Result<i32, i32> = x;\n+    let _: Result<i32, i32> = x;\n     // Input type mismatch, don't trigger\n-    let _: Result<(), i32> = if let Err(e) = Ok(1) { Err(e) } else { x };\n+    let _: Result<i32, i32> = if let Err(e) = Ok(1) { Err(e) } else { x };\n }\n \n-fn if_let_custom_enum(x: Choice) {\n-    let _: Choice = x;\n+fn if_let_custom_enum(x: Simple) {\n+    let _: Simple = x;\n+\n     // Don't trigger\n-    let _: Choice = if let Choice::A = x {\n-        Choice::A\n+    let _: Simple = if let Simple::A = x {\n+        Simple::A\n     } else if true {\n-        Choice::B\n+        Simple::B\n     } else {\n         x\n     };\n }\n \n+mod issue8542 {\n+    #[derive(Clone, Copy)]\n+    enum E {\n+        VariantA(u8, u8),\n+        VariantB(u8, bool),\n+    }\n+\n+    enum Complex {\n+        A(u8),\n+        B(u8, bool),\n+        C(u8, i32, f64),\n+        D(E, bool),\n+    }\n+\n+    fn match_test() {\n+        let ce = Complex::B(8, false);\n+        let aa = 0_u8;\n+        let bb = false;\n+\n+        let _: Complex = ce;\n+\n+        // Don't trigger\n+        let _: Complex = match ce {\n+            Complex::A(_) => Complex::A(aa),\n+            Complex::B(_, b) => Complex::B(aa, b),\n+            Complex::C(_, b, _) => Complex::C(aa, b, 64_f64),\n+            Complex::D(e, b) => Complex::D(e, b),\n+        };\n+\n+        // Don't trigger\n+        let _: Complex = match ce {\n+            Complex::A(a) => Complex::A(a),\n+            Complex::B(a, _) => Complex::B(a, bb),\n+            Complex::C(a, _, _) => Complex::C(a, 32_i32, 64_f64),\n+            _ => ce,\n+        };\n+    }\n+}\n+\n+/// Lint triggered when type coercions happen.\n+/// Do NOT trigger on any of these.\n+mod issue8551 {\n+    trait Trait {}\n+    struct Struct;\n+    impl Trait for Struct {}\n+\n+    fn optmap(s: Option<&Struct>) -> Option<&dyn Trait> {\n+        match s {\n+            Some(s) => Some(s),\n+            None => None,\n+        }\n+    }\n+\n+    fn lint_tests() {\n+        let option: Option<&Struct> = None;\n+        let _: Option<&dyn Trait> = match option {\n+            Some(s) => Some(s),\n+            None => None,\n+        };\n+\n+        let _: Option<&dyn Trait> = if true {\n+            match option {\n+                Some(s) => Some(s),\n+                None => None,\n+            }\n+        } else {\n+            None\n+        };\n+\n+        let result: Result<&Struct, i32> = Err(0);\n+        let _: Result<&dyn Trait, i32> = match result {\n+            Ok(s) => Ok(s),\n+            Err(e) => Err(e),\n+        };\n+\n+        let _: Option<&dyn Trait> = if let Some(s) = option { Some(s) } else { None };\n+    }\n+}\n+\n+trait Tr {\n+    fn as_mut(&mut self) -> Result<&mut i32, &mut i32>;\n+}\n+impl Tr for Result<i32, i32> {\n+    fn as_mut(&mut self) -> Result<&mut i32, &mut i32> {\n+        match self {\n+            Ok(x) => Ok(x),\n+            Err(e) => Err(e),\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "d210ecff7f1633a8a6e157e643cc9d42725457e9", "filename": "src/tools/clippy/tests/ui/needless_match.rs", "status": "modified", "additions": 157, "deletions": 45, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -4,33 +4,21 @@\n #![allow(dead_code)]\n \n #[derive(Clone, Copy)]\n-enum Choice {\n+enum Simple {\n     A,\n     B,\n     C,\n     D,\n }\n \n-#[allow(unused_mut)]\n fn useless_match() {\n-    let mut i = 10;\n+    let i = 10;\n     let _: i32 = match i {\n         0 => 0,\n         1 => 1,\n         2 => 2,\n         _ => i,\n     };\n-    let _: i32 = match i {\n-        0 => 0,\n-        1 => 1,\n-        ref i => *i,\n-    };\n-    let mut _i_mut = match i {\n-        0 => 0,\n-        1 => 1,\n-        ref mut i => *i,\n-    };\n-\n     let s = \"test\";\n     let _: &str = match s {\n         \"a\" => \"a\",\n@@ -39,25 +27,26 @@ fn useless_match() {\n     };\n }\n \n-fn custom_type_match(se: Choice) {\n-    let _: Choice = match se {\n-        Choice::A => Choice::A,\n-        Choice::B => Choice::B,\n-        Choice::C => Choice::C,\n-        Choice::D => Choice::D,\n+fn custom_type_match() {\n+    let se = Simple::A;\n+    let _: Simple = match se {\n+        Simple::A => Simple::A,\n+        Simple::B => Simple::B,\n+        Simple::C => Simple::C,\n+        Simple::D => Simple::D,\n     };\n     // Don't trigger\n-    let _: Choice = match se {\n-        Choice::A => Choice::A,\n-        Choice::B => Choice::B,\n-        _ => Choice::C,\n+    let _: Simple = match se {\n+        Simple::A => Simple::A,\n+        Simple::B => Simple::B,\n+        _ => Simple::C,\n     };\n     // Mingled, don't trigger\n-    let _: Choice = match se {\n-        Choice::A => Choice::B,\n-        Choice::B => Choice::C,\n-        Choice::C => Choice::D,\n-        Choice::D => Choice::A,\n+    let _: Simple = match se {\n+        Simple::A => Simple::B,\n+        Simple::B => Simple::C,\n+        Simple::C => Simple::D,\n+        Simple::D => Simple::A,\n     };\n }\n \n@@ -86,37 +75,160 @@ fn result_match() {\n         Err(err) => Err(err),\n         Ok(a) => Ok(a),\n     };\n+    // as ref, don't trigger\n+    let res = &func_ret_err(0_i32);\n+    let _: Result<&i32, &i32> = match *res {\n+        Ok(ref x) => Ok(x),\n+        Err(ref x) => Err(x),\n+    };\n }\n \n-fn if_let_option() -> Option<i32> {\n-    if let Some(a) = Some(1) { Some(a) } else { None }\n+fn if_let_option() {\n+    let _ = if let Some(a) = Some(1) { Some(a) } else { None };\n+\n+    fn do_something() {}\n+\n+    // Don't trigger\n+    let _ = if let Some(a) = Some(1) {\n+        Some(a)\n+    } else {\n+        do_something();\n+        None\n+    };\n+\n+    // Don't trigger\n+    let _ = if let Some(a) = Some(1) {\n+        do_something();\n+        Some(a)\n+    } else {\n+        None\n+    };\n }\n \n-fn if_let_result(x: Result<(), i32>) {\n-    let _: Result<(), i32> = if let Err(e) = x { Err(e) } else { x };\n-    let _: Result<(), i32> = if let Ok(val) = x { Ok(val) } else { x };\n+fn if_let_result() {\n+    let x: Result<i32, i32> = Ok(1);\n+    let _: Result<i32, i32> = if let Err(e) = x { Err(e) } else { x };\n+    let _: Result<i32, i32> = if let Ok(val) = x { Ok(val) } else { x };\n     // Input type mismatch, don't trigger\n-    let _: Result<(), i32> = if let Err(e) = Ok(1) { Err(e) } else { x };\n+    let _: Result<i32, i32> = if let Err(e) = Ok(1) { Err(e) } else { x };\n }\n \n-fn if_let_custom_enum(x: Choice) {\n-    let _: Choice = if let Choice::A = x {\n-        Choice::A\n-    } else if let Choice::B = x {\n-        Choice::B\n-    } else if let Choice::C = x {\n-        Choice::C\n+fn if_let_custom_enum(x: Simple) {\n+    let _: Simple = if let Simple::A = x {\n+        Simple::A\n+    } else if let Simple::B = x {\n+        Simple::B\n+    } else if let Simple::C = x {\n+        Simple::C\n     } else {\n         x\n     };\n+\n     // Don't trigger\n-    let _: Choice = if let Choice::A = x {\n-        Choice::A\n+    let _: Simple = if let Simple::A = x {\n+        Simple::A\n     } else if true {\n-        Choice::B\n+        Simple::B\n     } else {\n         x\n     };\n }\n \n+mod issue8542 {\n+    #[derive(Clone, Copy)]\n+    enum E {\n+        VariantA(u8, u8),\n+        VariantB(u8, bool),\n+    }\n+\n+    enum Complex {\n+        A(u8),\n+        B(u8, bool),\n+        C(u8, i32, f64),\n+        D(E, bool),\n+    }\n+\n+    fn match_test() {\n+        let ce = Complex::B(8, false);\n+        let aa = 0_u8;\n+        let bb = false;\n+\n+        let _: Complex = match ce {\n+            Complex::A(a) => Complex::A(a),\n+            Complex::B(a, b) => Complex::B(a, b),\n+            Complex::C(a, b, c) => Complex::C(a, b, c),\n+            Complex::D(E::VariantA(ea, eb), b) => Complex::D(E::VariantA(ea, eb), b),\n+            Complex::D(E::VariantB(ea, eb), b) => Complex::D(E::VariantB(ea, eb), b),\n+        };\n+\n+        // Don't trigger\n+        let _: Complex = match ce {\n+            Complex::A(_) => Complex::A(aa),\n+            Complex::B(_, b) => Complex::B(aa, b),\n+            Complex::C(_, b, _) => Complex::C(aa, b, 64_f64),\n+            Complex::D(e, b) => Complex::D(e, b),\n+        };\n+\n+        // Don't trigger\n+        let _: Complex = match ce {\n+            Complex::A(a) => Complex::A(a),\n+            Complex::B(a, _) => Complex::B(a, bb),\n+            Complex::C(a, _, _) => Complex::C(a, 32_i32, 64_f64),\n+            _ => ce,\n+        };\n+    }\n+}\n+\n+/// Lint triggered when type coercions happen.\n+/// Do NOT trigger on any of these.\n+mod issue8551 {\n+    trait Trait {}\n+    struct Struct;\n+    impl Trait for Struct {}\n+\n+    fn optmap(s: Option<&Struct>) -> Option<&dyn Trait> {\n+        match s {\n+            Some(s) => Some(s),\n+            None => None,\n+        }\n+    }\n+\n+    fn lint_tests() {\n+        let option: Option<&Struct> = None;\n+        let _: Option<&dyn Trait> = match option {\n+            Some(s) => Some(s),\n+            None => None,\n+        };\n+\n+        let _: Option<&dyn Trait> = if true {\n+            match option {\n+                Some(s) => Some(s),\n+                None => None,\n+            }\n+        } else {\n+            None\n+        };\n+\n+        let result: Result<&Struct, i32> = Err(0);\n+        let _: Result<&dyn Trait, i32> = match result {\n+            Ok(s) => Ok(s),\n+            Err(e) => Err(e),\n+        };\n+\n+        let _: Option<&dyn Trait> = if let Some(s) = option { Some(s) } else { None };\n+    }\n+}\n+\n+trait Tr {\n+    fn as_mut(&mut self) -> Result<&mut i32, &mut i32>;\n+}\n+impl Tr for Result<i32, i32> {\n+    fn as_mut(&mut self) -> Result<&mut i32, &mut i32> {\n+        match self {\n+            Ok(x) => Ok(x),\n+            Err(e) => Err(e),\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "34c5226f06057611d9eb87ac5c631b4d241850e8", "filename": "src/tools/clippy/tests/ui/needless_match.stderr", "status": "modified", "additions": 39, "deletions": 48, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_match.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,5 +1,5 @@\n error: this match expression is unnecessary\n-  --> $DIR/needless_match.rs:17:18\n+  --> $DIR/needless_match.rs:16:18\n    |\n LL |       let _: i32 = match i {\n    |  __________________^\n@@ -13,29 +13,7 @@ LL | |     };\n    = note: `-D clippy::needless-match` implied by `-D warnings`\n \n error: this match expression is unnecessary\n-  --> $DIR/needless_match.rs:23:18\n-   |\n-LL |       let _: i32 = match i {\n-   |  __________________^\n-LL | |         0 => 0,\n-LL | |         1 => 1,\n-LL | |         ref i => *i,\n-LL | |     };\n-   | |_____^ help: replace it with: `i`\n-\n-error: this match expression is unnecessary\n-  --> $DIR/needless_match.rs:28:22\n-   |\n-LL |       let mut _i_mut = match i {\n-   |  ______________________^\n-LL | |         0 => 0,\n-LL | |         1 => 1,\n-LL | |         ref mut i => *i,\n-LL | |     };\n-   | |_____^ help: replace it with: `i`\n-\n-error: this match expression is unnecessary\n-  --> $DIR/needless_match.rs:35:19\n+  --> $DIR/needless_match.rs:23:19\n    |\n LL |       let _: &str = match s {\n    |  ___________________^\n@@ -46,19 +24,19 @@ LL | |     };\n    | |_____^ help: replace it with: `s`\n \n error: this match expression is unnecessary\n-  --> $DIR/needless_match.rs:43:21\n+  --> $DIR/needless_match.rs:32:21\n    |\n-LL |       let _: Choice = match se {\n+LL |       let _: Simple = match se {\n    |  _____________________^\n-LL | |         Choice::A => Choice::A,\n-LL | |         Choice::B => Choice::B,\n-LL | |         Choice::C => Choice::C,\n-LL | |         Choice::D => Choice::D,\n+LL | |         Simple::A => Simple::A,\n+LL | |         Simple::B => Simple::B,\n+LL | |         Simple::C => Simple::C,\n+LL | |         Simple::D => Simple::D,\n LL | |     };\n    | |_____^ help: replace it with: `se`\n \n error: this match expression is unnecessary\n-  --> $DIR/needless_match.rs:65:26\n+  --> $DIR/needless_match.rs:54:26\n    |\n LL |       let _: Option<i32> = match x {\n    |  __________________________^\n@@ -68,7 +46,7 @@ LL | |     };\n    | |_____^ help: replace it with: `x`\n \n error: this match expression is unnecessary\n-  --> $DIR/needless_match.rs:81:31\n+  --> $DIR/needless_match.rs:70:31\n    |\n LL |       let _: Result<i32, i32> = match Ok(1) {\n    |  _______________________________^\n@@ -78,7 +56,7 @@ LL | |     };\n    | |_____^ help: replace it with: `Ok(1)`\n \n error: this match expression is unnecessary\n-  --> $DIR/needless_match.rs:85:31\n+  --> $DIR/needless_match.rs:74:31\n    |\n LL |       let _: Result<i32, i32> = match func_ret_err(0_i32) {\n    |  _______________________________^\n@@ -88,35 +66,48 @@ LL | |     };\n    | |_____^ help: replace it with: `func_ret_err(0_i32)`\n \n error: this if-let expression is unnecessary\n-  --> $DIR/needless_match.rs:92:5\n+  --> $DIR/needless_match.rs:87:13\n    |\n-LL |     if let Some(a) = Some(1) { Some(a) } else { None }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `Some(1)`\n+LL |     let _ = if let Some(a) = Some(1) { Some(a) } else { None };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `Some(1)`\n \n error: this if-let expression is unnecessary\n-  --> $DIR/needless_match.rs:96:30\n+  --> $DIR/needless_match.rs:110:31\n    |\n-LL |     let _: Result<(), i32> = if let Err(e) = x { Err(e) } else { x };\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `x`\n+LL |     let _: Result<i32, i32> = if let Err(e) = x { Err(e) } else { x };\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `x`\n \n error: this if-let expression is unnecessary\n-  --> $DIR/needless_match.rs:97:30\n+  --> $DIR/needless_match.rs:111:31\n    |\n-LL |     let _: Result<(), i32> = if let Ok(val) = x { Ok(val) } else { x };\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `x`\n+LL |     let _: Result<i32, i32> = if let Ok(val) = x { Ok(val) } else { x };\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `x`\n \n error: this if-let expression is unnecessary\n-  --> $DIR/needless_match.rs:103:21\n+  --> $DIR/needless_match.rs:117:21\n    |\n-LL |       let _: Choice = if let Choice::A = x {\n+LL |       let _: Simple = if let Simple::A = x {\n    |  _____________________^\n-LL | |         Choice::A\n-LL | |     } else if let Choice::B = x {\n-LL | |         Choice::B\n+LL | |         Simple::A\n+LL | |     } else if let Simple::B = x {\n+LL | |         Simple::B\n ...  |\n LL | |         x\n LL | |     };\n    | |_____^ help: replace it with: `x`\n \n-error: aborting due to 12 previous errors\n+error: this match expression is unnecessary\n+  --> $DIR/needless_match.rs:156:26\n+   |\n+LL |           let _: Complex = match ce {\n+   |  __________________________^\n+LL | |             Complex::A(a) => Complex::A(a),\n+LL | |             Complex::B(a, b) => Complex::B(a, b),\n+LL | |             Complex::C(a, b, c) => Complex::C(a, b, c),\n+LL | |             Complex::D(E::VariantA(ea, eb), b) => Complex::D(E::VariantA(ea, eb), b),\n+LL | |             Complex::D(E::VariantB(ea, eb), b) => Complex::D(E::VariantB(ea, eb), b),\n+LL | |         };\n+   | |_________^ help: replace it with: `ce`\n+\n+error: aborting due to 11 previous errors\n "}, {"sha": "c09b07db3dca9787a2c6d585057dcf188e39b508", "filename": "src/tools/clippy/tests/ui/needless_option_as_deref.fixed", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_option_as_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_option_as_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_option_as_deref.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,13 +1,41 @@\n // run-rustfix\n \n-#[warn(clippy::needless_option_as_deref)]\n+#![allow(unused)]\n+#![warn(clippy::needless_option_as_deref)]\n \n fn main() {\n     // should lint\n     let _: Option<&usize> = Some(&1);\n     let _: Option<&mut usize> = Some(&mut 1);\n \n+    let mut y = 0;\n+    let mut x = Some(&mut y);\n+    let _ = x;\n+\n     // should not lint\n     let _ = Some(Box::new(1)).as_deref();\n     let _ = Some(Box::new(1)).as_deref_mut();\n+\n+    // #7846\n+    let mut i = 0;\n+    let mut opt_vec = vec![Some(&mut i)];\n+    opt_vec[0].as_deref_mut().unwrap();\n+\n+    let mut i = 0;\n+    let x = &mut Some(&mut i);\n+    (*x).as_deref_mut();\n+\n+    // #8047\n+    let mut y = 0;\n+    let mut x = Some(&mut y);\n+    x.as_deref_mut();\n+    dbg!(x);\n+}\n+\n+struct S<'a> {\n+    opt: Option<&'a mut usize>,\n+}\n+\n+fn from_field<'a>(s: &'a mut S<'a>) -> Option<&'a mut usize> {\n+    s.opt.as_deref_mut()\n }"}, {"sha": "c3ba27ecccf22fe8c09ca1327c62944f8b72d75b", "filename": "src/tools/clippy/tests/ui/needless_option_as_deref.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_option_as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_option_as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_option_as_deref.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,13 +1,41 @@\n // run-rustfix\n \n-#[warn(clippy::needless_option_as_deref)]\n+#![allow(unused)]\n+#![warn(clippy::needless_option_as_deref)]\n \n fn main() {\n     // should lint\n     let _: Option<&usize> = Some(&1).as_deref();\n     let _: Option<&mut usize> = Some(&mut 1).as_deref_mut();\n \n+    let mut y = 0;\n+    let mut x = Some(&mut y);\n+    let _ = x.as_deref_mut();\n+\n     // should not lint\n     let _ = Some(Box::new(1)).as_deref();\n     let _ = Some(Box::new(1)).as_deref_mut();\n+\n+    // #7846\n+    let mut i = 0;\n+    let mut opt_vec = vec![Some(&mut i)];\n+    opt_vec[0].as_deref_mut().unwrap();\n+\n+    let mut i = 0;\n+    let x = &mut Some(&mut i);\n+    (*x).as_deref_mut();\n+\n+    // #8047\n+    let mut y = 0;\n+    let mut x = Some(&mut y);\n+    x.as_deref_mut();\n+    dbg!(x);\n+}\n+\n+struct S<'a> {\n+    opt: Option<&'a mut usize>,\n+}\n+\n+fn from_field<'a>(s: &'a mut S<'a>) -> Option<&'a mut usize> {\n+    s.opt.as_deref_mut()\n }"}, {"sha": "bc07db5b38ed3ffcb1f161dea22ad85445811857", "filename": "src/tools/clippy/tests/ui/needless_option_as_deref.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_option_as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_option_as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_option_as_deref.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,16 +1,22 @@\n error: derefed type is same as origin\n-  --> $DIR/needless_option_as_deref.rs:7:29\n+  --> $DIR/needless_option_as_deref.rs:8:29\n    |\n LL |     let _: Option<&usize> = Some(&1).as_deref();\n    |                             ^^^^^^^^^^^^^^^^^^^ help: try this: `Some(&1)`\n    |\n    = note: `-D clippy::needless-option-as-deref` implied by `-D warnings`\n \n error: derefed type is same as origin\n-  --> $DIR/needless_option_as_deref.rs:8:33\n+  --> $DIR/needless_option_as_deref.rs:9:33\n    |\n LL |     let _: Option<&mut usize> = Some(&mut 1).as_deref_mut();\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `Some(&mut 1)`\n \n-error: aborting due to 2 previous errors\n+error: derefed type is same as origin\n+  --> $DIR/needless_option_as_deref.rs:13:13\n+   |\n+LL |     let _ = x.as_deref_mut();\n+   |             ^^^^^^^^^^^^^^^^ help: try this: `x`\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "7ece66a1ccb6f9117df23ed1cb99f8ec1a60ecd8", "filename": "src/tools/clippy/tests/ui/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -78,7 +78,7 @@ impl FnOnce<(&str,)> for GreetStruct2 {\n     }\n }\n \n-struct GreetStruct3 {}\n+struct GreetStruct3;\n \n impl FnOnce<(&str,)> for GreetStruct3 {\n     type Output = ();"}, {"sha": "1290bd8efebd287eda8df11864090b9202a229ba", "filename": "src/tools/clippy/tests/ui/option_map_unit_fn_fixable.fixed", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_map_unit_fn_fixable.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -80,6 +80,9 @@ fn option_map_unit_fn() {\n \n     if let Some(ref value) = x.field { do_nothing(value + captured) }\n \n-    if let Some(a) = option() { do_nothing(a) }}\n+    if let Some(a) = option() { do_nothing(a) }\n+\n+    if let Some(value) = option() { println!(\"{:?}\", value) }\n+}\n \n fn main() {}"}, {"sha": "f3e5b62c65b7f769bb0812d8460a2791b0a14c65", "filename": "src/tools/clippy/tests/ui/option_map_unit_fn_fixable.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_map_unit_fn_fixable.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -80,6 +80,9 @@ fn option_map_unit_fn() {\n \n     x.field.map(|ref value| { do_nothing(value + captured) });\n \n-    option().map(do_nothing);}\n+    option().map(do_nothing);\n+\n+    option().map(|value| println!(\"{:?}\", value));\n+}\n \n fn main() {}"}, {"sha": "ab2a294a060f0c2507b81f1eedd6288e4b486f3d", "filename": "src/tools/clippy/tests/ui/option_map_unit_fn_fixable.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_map_unit_fn_fixable.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -139,10 +139,18 @@ LL |     x.field.map(|ref value| { do_nothing(value + captured) });\n error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:83:5\n    |\n-LL |     option().map(do_nothing);}\n+LL |     option().map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(a) = option() { do_nothing(a) }`\n \n-error: aborting due to 18 previous errors\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n+  --> $DIR/option_map_unit_fn_fixable.rs:85:5\n+   |\n+LL |     option().map(|value| println!(\"{:?}\", value));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = option() { println!(\"{:?}\", value) }`\n+\n+error: aborting due to 19 previous errors\n "}, {"sha": "6e0d5a87f6807b012fcc55428b5b0aee61882301", "filename": "src/tools/clippy/tests/ui/or_then_unwrap.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_then_unwrap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_then_unwrap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_then_unwrap.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -3,15 +3,15 @@\n #![warn(clippy::or_then_unwrap)]\n #![allow(clippy::map_identity)]\n \n-struct SomeStruct {}\n+struct SomeStruct;\n impl SomeStruct {\n     fn or(self, _: Option<Self>) -> Self {\n         self\n     }\n     fn unwrap(&self) {}\n }\n \n-struct SomeOtherStruct {}\n+struct SomeOtherStruct;\n impl SomeOtherStruct {\n     fn or(self) -> Self {\n         self"}, {"sha": "e406a71d46d00d377024971cee471851e0c3a063", "filename": "src/tools/clippy/tests/ui/or_then_unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_then_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_then_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_then_unwrap.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -3,15 +3,15 @@\n #![warn(clippy::or_then_unwrap)]\n #![allow(clippy::map_identity)]\n \n-struct SomeStruct {}\n+struct SomeStruct;\n impl SomeStruct {\n     fn or(self, _: Option<Self>) -> Self {\n         self\n     }\n     fn unwrap(&self) {}\n }\n \n-struct SomeOtherStruct {}\n+struct SomeOtherStruct;\n impl SomeOtherStruct {\n     fn or(self) -> Self {\n         self"}, {"sha": "12a0c776ae2fd6feb90371be57be32ddd59379de", "filename": "src/tools/clippy/tests/ui/panicking_macros.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanicking_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanicking_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanicking_macros.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,8 +1,23 @@\n-#![warn(clippy::unimplemented, clippy::unreachable, clippy::todo, clippy::panic)]\n #![allow(clippy::assertions_on_constants, clippy::eq_op)]\n+#![feature(inline_const)]\n+#![warn(clippy::unimplemented, clippy::unreachable, clippy::todo, clippy::panic)]\n \n extern crate core;\n \n+const _: () = {\n+    if 1 == 0 {\n+        panic!(\"A balanced diet means a cupcake in each hand\");\n+    }\n+};\n+\n+fn inline_const() {\n+    let _ = const {\n+        if 1 == 0 {\n+            panic!(\"When nothing goes right, go left\")\n+        }\n+    };\n+}\n+\n fn panic() {\n     let a = 2;\n     panic!();"}, {"sha": "4ceb6d1440f61c58d718ae051124d8e7c12285c4", "filename": "src/tools/clippy/tests/ui/panicking_macros.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanicking_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanicking_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanicking_macros.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,103 +1,103 @@\n error: `panic` should not be present in production code\n-  --> $DIR/panicking_macros.rs:8:5\n+  --> $DIR/panicking_macros.rs:23:5\n    |\n LL |     panic!();\n    |     ^^^^^^^^\n    |\n    = note: `-D clippy::panic` implied by `-D warnings`\n \n error: `panic` should not be present in production code\n-  --> $DIR/panicking_macros.rs:9:5\n+  --> $DIR/panicking_macros.rs:24:5\n    |\n LL |     panic!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^\n \n error: `panic` should not be present in production code\n-  --> $DIR/panicking_macros.rs:10:5\n+  --> $DIR/panicking_macros.rs:25:5\n    |\n LL |     panic!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `todo` should not be present in production code\n-  --> $DIR/panicking_macros.rs:16:5\n+  --> $DIR/panicking_macros.rs:31:5\n    |\n LL |     todo!();\n    |     ^^^^^^^\n    |\n    = note: `-D clippy::todo` implied by `-D warnings`\n \n error: `todo` should not be present in production code\n-  --> $DIR/panicking_macros.rs:17:5\n+  --> $DIR/panicking_macros.rs:32:5\n    |\n LL |     todo!(\"message\");\n    |     ^^^^^^^^^^^^^^^^\n \n error: `todo` should not be present in production code\n-  --> $DIR/panicking_macros.rs:18:5\n+  --> $DIR/panicking_macros.rs:33:5\n    |\n LL |     todo!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `unimplemented` should not be present in production code\n-  --> $DIR/panicking_macros.rs:24:5\n+  --> $DIR/panicking_macros.rs:39:5\n    |\n LL |     unimplemented!();\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unimplemented` implied by `-D warnings`\n \n error: `unimplemented` should not be present in production code\n-  --> $DIR/panicking_macros.rs:25:5\n+  --> $DIR/panicking_macros.rs:40:5\n    |\n LL |     unimplemented!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `unimplemented` should not be present in production code\n-  --> $DIR/panicking_macros.rs:26:5\n+  --> $DIR/panicking_macros.rs:41:5\n    |\n LL |     unimplemented!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: usage of the `unreachable!` macro\n-  --> $DIR/panicking_macros.rs:32:5\n+  --> $DIR/panicking_macros.rs:47:5\n    |\n LL |     unreachable!();\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unreachable` implied by `-D warnings`\n \n error: usage of the `unreachable!` macro\n-  --> $DIR/panicking_macros.rs:33:5\n+  --> $DIR/panicking_macros.rs:48:5\n    |\n LL |     unreachable!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: usage of the `unreachable!` macro\n-  --> $DIR/panicking_macros.rs:34:5\n+  --> $DIR/panicking_macros.rs:49:5\n    |\n LL |     unreachable!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `panic` should not be present in production code\n-  --> $DIR/panicking_macros.rs:40:5\n+  --> $DIR/panicking_macros.rs:55:5\n    |\n LL |     panic!();\n    |     ^^^^^^^^\n \n error: `todo` should not be present in production code\n-  --> $DIR/panicking_macros.rs:41:5\n+  --> $DIR/panicking_macros.rs:56:5\n    |\n LL |     todo!();\n    |     ^^^^^^^\n \n error: `unimplemented` should not be present in production code\n-  --> $DIR/panicking_macros.rs:42:5\n+  --> $DIR/panicking_macros.rs:57:5\n    |\n LL |     unimplemented!();\n    |     ^^^^^^^^^^^^^^^^\n \n error: usage of the `unreachable!` macro\n-  --> $DIR/panicking_macros.rs:43:5\n+  --> $DIR/panicking_macros.rs:58:5\n    |\n LL |     unreachable!();\n    |     ^^^^^^^^^^^^^^"}, {"sha": "814bbc7af713b77783dbcc741888ed95868ad2f9", "filename": "src/tools/clippy/tests/ui/ptr_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fptr_arg.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -112,7 +112,7 @@ mod issue_5644 {\n     ) {\n     }\n \n-    struct S {}\n+    struct S;\n     impl S {\n         fn allowed(\n             #[allow(clippy::ptr_arg)] _v: &Vec<u32>,"}, {"sha": "f72fc77ab9977dda9e161eb1714b2f912647ca88", "filename": "src/tools/clippy/tests/ui/recursive_format_impl.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frecursive_format_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frecursive_format_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frecursive_format_impl.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -66,7 +66,7 @@ impl std::fmt::Display for D {\n \n // Check for use of self as Display, in Display impl\n // Triggers on direct use of self\n-struct G {}\n+struct G;\n \n impl std::fmt::Display for G {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n@@ -75,7 +75,7 @@ impl std::fmt::Display for G {\n }\n \n // Triggers on reference to self\n-struct H {}\n+struct H;\n \n impl std::fmt::Display for H {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n@@ -90,7 +90,7 @@ impl std::fmt::Debug for H {\n }\n \n // Triggers on multiple reference to self\n-struct H2 {}\n+struct H2;\n \n impl std::fmt::Display for H2 {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n@@ -99,7 +99,7 @@ impl std::fmt::Display for H2 {\n }\n \n // Doesn't trigger on correct deref\n-struct I {}\n+struct I;\n \n impl std::ops::Deref for I {\n     type Target = str;\n@@ -122,7 +122,7 @@ impl std::fmt::Debug for I {\n }\n \n // Doesn't trigger on multiple correct deref\n-struct I2 {}\n+struct I2;\n \n impl std::ops::Deref for I2 {\n     type Target = str;\n@@ -139,7 +139,7 @@ impl std::fmt::Display for I2 {\n }\n \n // Doesn't trigger on multiple correct deref\n-struct I3 {}\n+struct I3;\n \n impl std::ops::Deref for I3 {\n     type Target = str;\n@@ -156,7 +156,7 @@ impl std::fmt::Display for I3 {\n }\n \n // Does trigger when deref resolves to self\n-struct J {}\n+struct J;\n \n impl std::ops::Deref for J {\n     type Target = str;\n@@ -178,7 +178,7 @@ impl std::fmt::Debug for J {\n     }\n }\n \n-struct J2 {}\n+struct J2;\n \n impl std::ops::Deref for J2 {\n     type Target = str;\n@@ -194,7 +194,7 @@ impl std::fmt::Display for J2 {\n     }\n }\n \n-struct J3 {}\n+struct J3;\n \n impl std::ops::Deref for J3 {\n     type Target = str;\n@@ -210,7 +210,7 @@ impl std::fmt::Display for J3 {\n     }\n }\n \n-struct J4 {}\n+struct J4;\n \n impl std::ops::Deref for J4 {\n     type Target = str;\n@@ -227,7 +227,7 @@ impl std::fmt::Display for J4 {\n }\n \n // Doesn't trigger on Debug from Display\n-struct K {}\n+struct K;\n \n impl std::fmt::Debug for K {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n@@ -242,7 +242,7 @@ impl std::fmt::Display for K {\n }\n \n // Doesn't trigger on Display from Debug\n-struct K2 {}\n+struct K2;\n \n impl std::fmt::Debug for K2 {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {"}, {"sha": "80f94e5f3cbbb278e4d333f7b1887ff3d51ec81e", "filename": "src/tools/clippy/tests/ui/redundant_allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_allocation.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -3,7 +3,7 @@\n #![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n #![allow(unused_imports)]\n \n-pub struct MyStruct {}\n+pub struct MyStruct;\n \n pub struct SubT<T> {\n     foo: T,"}, {"sha": "e7ed84731c02e4d64ec6e45cd5782d0e632b2416", "filename": "src/tools/clippy/tests/ui/redundant_allocation_fixable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_allocation_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_allocation_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_allocation_fixable.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -4,7 +4,7 @@\n #![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n #![allow(unused_imports)]\n \n-pub struct MyStruct {}\n+pub struct MyStruct;\n \n pub struct SubT<T> {\n     foo: T,"}, {"sha": "de763f98b5c89fb55d344bff8b836fde26f2f916", "filename": "src/tools/clippy/tests/ui/redundant_allocation_fixable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_allocation_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_allocation_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_allocation_fixable.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -4,7 +4,7 @@\n #![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n #![allow(unused_imports)]\n \n-pub struct MyStruct {}\n+pub struct MyStruct;\n \n pub struct SubT<T> {\n     foo: T,"}, {"sha": "1525f6a93dfdd4dcac0492dad3adbf63e8f621f5", "filename": "src/tools/clippy/tests/ui/redundant_clone.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_clone.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n // rustfix-only-machine-applicable\n \n-#![allow(clippy::implicit_clone)]\n+#![allow(clippy::implicit_clone, clippy::drop_non_drop)]\n use std::ffi::OsString;\n use std::path::Path;\n "}, {"sha": "2f82aefd928309c23eee5d3c7a0540a2f5335b5a", "filename": "src/tools/clippy/tests/ui/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_clone.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n // rustfix-only-machine-applicable\n \n-#![allow(clippy::implicit_clone)]\n+#![allow(clippy::implicit_clone, clippy::drop_non_drop)]\n use std::ffi::OsString;\n use std::path::Path;\n "}, {"sha": "acc8f1e25b6ed3a937186d5146275271ad46c0d8", "filename": "src/tools/clippy/tests/ui/redundant_static_lifetimes.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_static_lifetimes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_static_lifetimes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_static_lifetimes.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -3,7 +3,7 @@\n #![allow(unused)]\n \n #[derive(Debug)]\n-struct Foo {}\n+struct Foo;\n \n const VAR_ONE: &str = \"Test constant #1\"; // ERROR Consider removing 'static.\n "}, {"sha": "f2f0f78659c936516fab442fd624e1ba7f5164a0", "filename": "src/tools/clippy/tests/ui/redundant_static_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_static_lifetimes.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -3,7 +3,7 @@\n #![allow(unused)]\n \n #[derive(Debug)]\n-struct Foo {}\n+struct Foo;\n \n const VAR_ONE: &'static str = \"Test constant #1\"; // ERROR Consider removing 'static.\n "}, {"sha": "14c331f67e739c34ca722ff0776a83fbe88f5566", "filename": "src/tools/clippy/tests/ui/result_map_unit_fn_fixable.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fresult_map_unit_fn_fixable.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -75,6 +75,8 @@ fn result_map_unit_fn() {\n \n \n     if let Ok(ref value) = x.field { do_nothing(value + captured) }\n+\n+    if let Ok(value) = x.field { println!(\"{:?}\", value) }\n }\n \n fn main() {}"}, {"sha": "8b0fca9ece1a375d45e532a5eda015265db5a383", "filename": "src/tools/clippy/tests/ui/result_map_unit_fn_fixable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fresult_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fresult_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fresult_map_unit_fn_fixable.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -75,6 +75,8 @@ fn result_map_unit_fn() {\n \n \n     x.field.map(|ref value| { do_nothing(value + captured) });\n+\n+    x.field.map(|value| println!(\"{:?}\", value));\n }\n \n fn main() {}"}, {"sha": "782febd52644128e0e7e18e4c1f4316efbb33b9e", "filename": "src/tools/clippy/tests/ui/result_map_unit_fn_fixable.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fresult_map_unit_fn_fixable.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -136,5 +136,13 @@ LL |     x.field.map(|ref value| { do_nothing(value + captured) });\n    |     |\n    |     help: try this: `if let Ok(ref value) = x.field { do_nothing(value + captured) }`\n \n-error: aborting due to 17 previous errors\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n+  --> $DIR/result_map_unit_fn_fixable.rs:79:5\n+   |\n+LL |     x.field.map(|value| println!(\"{:?}\", value));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Ok(value) = x.field { println!(\"{:?}\", value) }`\n+\n+error: aborting due to 18 previous errors\n "}, {"sha": "99964f0de075c04a53467f12fd732e2f97a9506e", "filename": "src/tools/clippy/tests/ui/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_item_push.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -120,7 +120,7 @@ fn main() {\n     }\n     // Fix #5979\n     #[derive(Clone)]\n-    struct S {}\n+    struct S;\n \n     trait T {}\n     impl T for S {}"}, {"sha": "63d31ff83f9b5c508f09fa556ba5ee2421bd0cc4", "filename": "src/tools/clippy/tests/ui/single_element_loop.fixed", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -6,11 +6,31 @@ fn main() {\n     let item1 = 2;\n     {\n         let item = &item1;\n-        println!(\"{}\", item);\n+        dbg!(item);\n     }\n \n     {\n         let item = &item1;\n-        println!(\"{:?}\", item);\n+        dbg!(item);\n+    }\n+\n+    {\n+        let item = &(0..5);\n+        dbg!(item);\n+    }\n+\n+    {\n+        let item = &mut (0..5);\n+        dbg!(item);\n+    }\n+\n+    {\n+        let item = 0..5;\n+        dbg!(item);\n+    }\n+\n+    {\n+        let item = 0..5;\n+        dbg!(item);\n     }\n }"}, {"sha": "2cda5a329d254fb496dec9dca41bfa899142ed4c", "filename": "src/tools/clippy/tests/ui/single_element_loop.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -5,10 +5,26 @@\n fn main() {\n     let item1 = 2;\n     for item in &[item1] {\n-        println!(\"{}\", item);\n+        dbg!(item);\n     }\n \n     for item in [item1].iter() {\n-        println!(\"{:?}\", item);\n+        dbg!(item);\n+    }\n+\n+    for item in &[0..5] {\n+        dbg!(item);\n+    }\n+\n+    for item in [0..5].iter_mut() {\n+        dbg!(item);\n+    }\n+\n+    for item in [0..5] {\n+        dbg!(item);\n+    }\n+\n+    for item in [0..5].into_iter() {\n+        dbg!(item);\n     }\n }"}, {"sha": "0aeb8da1a2e23e6dac4c85f1be745ede77c4c830", "filename": "src/tools/clippy/tests/ui/single_element_loop.stderr", "status": "modified", "additions": 69, "deletions": 5, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -2,7 +2,7 @@ error: for loop over a single element\n   --> $DIR/single_element_loop.rs:7:5\n    |\n LL | /     for item in &[item1] {\n-LL | |         println!(\"{}\", item);\n+LL | |         dbg!(item);\n LL | |     }\n    | |_____^\n    |\n@@ -11,25 +11,89 @@ help: try\n    |\n LL ~     {\n LL +         let item = &item1;\n-LL +         println!(\"{}\", item);\n+LL +         dbg!(item);\n LL +     }\n    |\n \n error: for loop over a single element\n   --> $DIR/single_element_loop.rs:11:5\n    |\n LL | /     for item in [item1].iter() {\n-LL | |         println!(\"{:?}\", item);\n+LL | |         dbg!(item);\n LL | |     }\n    | |_____^\n    |\n help: try\n    |\n LL ~     {\n LL +         let item = &item1;\n-LL +         println!(\"{:?}\", item);\n+LL +         dbg!(item);\n LL +     }\n    |\n \n-error: aborting due to 2 previous errors\n+error: for loop over a single element\n+  --> $DIR/single_element_loop.rs:15:5\n+   |\n+LL | /     for item in &[0..5] {\n+LL | |         dbg!(item);\n+LL | |     }\n+   | |_____^\n+   |\n+help: try\n+   |\n+LL ~     {\n+LL +         let item = &(0..5);\n+LL +         dbg!(item);\n+LL +     }\n+   |\n+\n+error: for loop over a single element\n+  --> $DIR/single_element_loop.rs:19:5\n+   |\n+LL | /     for item in [0..5].iter_mut() {\n+LL | |         dbg!(item);\n+LL | |     }\n+   | |_____^\n+   |\n+help: try\n+   |\n+LL ~     {\n+LL +         let item = &mut (0..5);\n+LL +         dbg!(item);\n+LL +     }\n+   |\n+\n+error: for loop over a single element\n+  --> $DIR/single_element_loop.rs:23:5\n+   |\n+LL | /     for item in [0..5] {\n+LL | |         dbg!(item);\n+LL | |     }\n+   | |_____^\n+   |\n+help: try\n+   |\n+LL ~     {\n+LL +         let item = 0..5;\n+LL +         dbg!(item);\n+LL +     }\n+   |\n+\n+error: for loop over a single element\n+  --> $DIR/single_element_loop.rs:27:5\n+   |\n+LL | /     for item in [0..5].into_iter() {\n+LL | |         dbg!(item);\n+LL | |     }\n+   | |_____^\n+   |\n+help: try\n+   |\n+LL ~     {\n+LL +         let item = 0..5;\n+LL +         dbg!(item);\n+LL +     }\n+   |\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "f5ca91143af25683625d19ba51efe22d070e5233", "filename": "src/tools/clippy/tests/ui/trait_duplication_in_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -62,7 +62,7 @@ trait BadTrait: Default + Clone {\n }\n \n #[derive(Default, Clone)]\n-struct Life {}\n+struct Life;\n \n impl T for Life {\n     // this should not warn\n@@ -85,7 +85,7 @@ trait Iter: Iterator {\n     }\n }\n \n-struct Foo {}\n+struct Foo;\n \n trait FooIter: Iterator<Item = Foo> {\n     fn bar()"}, {"sha": "5b688ce4d644f766881cf36b74e3648df9c2f061", "filename": "src/tools/clippy/tests/ui/transmute.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -73,6 +73,10 @@ fn crosspointer() {\n fn int_to_char() {\n     let _: char = unsafe { std::mem::transmute(0_u32) };\n     let _: char = unsafe { std::mem::transmute(0_i32) };\n+\n+    // These shouldn't warn\n+    const _: char = unsafe { std::mem::transmute(0_u32) };\n+    const _: char = unsafe { std::mem::transmute(0_i32) };\n }\n \n #[warn(clippy::transmute_int_to_bool)]\n@@ -130,9 +134,12 @@ mod num_to_bytes {\n     }\n }\n \n-fn bytes_to_str(b: &[u8], mb: &mut [u8]) {\n-    let _: &str = unsafe { std::mem::transmute(b) };\n+fn bytes_to_str(mb: &mut [u8]) {\n+    const B: &[u8] = b\"\";\n+\n+    let _: &str = unsafe { std::mem::transmute(B) };\n     let _: &mut str = unsafe { std::mem::transmute(mb) };\n+    const _: &str = unsafe { std::mem::transmute(B) };\n }\n \n fn main() {}"}, {"sha": "72a386e8fa618f2fe96c5b7f7fc188759c07c161", "filename": "src/tools/clippy/tests/ui/transmute.stderr", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -107,138 +107,144 @@ LL |     let _: char = unsafe { std::mem::transmute(0_i32) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_i32 as u32).unwrap()`\n \n error: transmute from a `u8` to a `bool`\n-  --> $DIR/transmute.rs:80:28\n+  --> $DIR/transmute.rs:84:28\n    |\n LL |     let _: bool = unsafe { std::mem::transmute(0_u8) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `0_u8 != 0`\n    |\n    = note: `-D clippy::transmute-int-to-bool` implied by `-D warnings`\n \n error: transmute from a `u32` to a `f32`\n-  --> $DIR/transmute.rs:86:31\n+  --> $DIR/transmute.rs:90:31\n    |\n LL |         let _: f32 = unsafe { std::mem::transmute(0_u32) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_u32)`\n    |\n    = note: `-D clippy::transmute-int-to-float` implied by `-D warnings`\n \n error: transmute from a `i32` to a `f32`\n-  --> $DIR/transmute.rs:87:31\n+  --> $DIR/transmute.rs:91:31\n    |\n LL |         let _: f32 = unsafe { std::mem::transmute(0_i32) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_i32 as u32)`\n \n error: transmute from a `u64` to a `f64`\n-  --> $DIR/transmute.rs:88:31\n+  --> $DIR/transmute.rs:92:31\n    |\n LL |         let _: f64 = unsafe { std::mem::transmute(0_u64) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f64::from_bits(0_u64)`\n \n error: transmute from a `i64` to a `f64`\n-  --> $DIR/transmute.rs:89:31\n+  --> $DIR/transmute.rs:93:31\n    |\n LL |         let _: f64 = unsafe { std::mem::transmute(0_i64) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f64::from_bits(0_i64 as u64)`\n \n error: transmute from a `u8` to a `[u8; 1]`\n-  --> $DIR/transmute.rs:109:30\n+  --> $DIR/transmute.rs:113:30\n    |\n LL |             let _: [u8; 1] = std::mem::transmute(0u8);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u8.to_ne_bytes()`\n    |\n    = note: `-D clippy::transmute-num-to-bytes` implied by `-D warnings`\n \n error: transmute from a `u32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:110:30\n+  --> $DIR/transmute.rs:114:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0u32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u32.to_ne_bytes()`\n \n error: transmute from a `u128` to a `[u8; 16]`\n-  --> $DIR/transmute.rs:111:31\n+  --> $DIR/transmute.rs:115:31\n    |\n LL |             let _: [u8; 16] = std::mem::transmute(0u128);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u128.to_ne_bytes()`\n \n error: transmute from a `i8` to a `[u8; 1]`\n-  --> $DIR/transmute.rs:112:30\n+  --> $DIR/transmute.rs:116:30\n    |\n LL |             let _: [u8; 1] = std::mem::transmute(0i8);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i8.to_ne_bytes()`\n \n error: transmute from a `i32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:113:30\n+  --> $DIR/transmute.rs:117:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0i32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i32.to_ne_bytes()`\n \n error: transmute from a `i128` to a `[u8; 16]`\n-  --> $DIR/transmute.rs:114:31\n+  --> $DIR/transmute.rs:118:31\n    |\n LL |             let _: [u8; 16] = std::mem::transmute(0i128);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i128.to_ne_bytes()`\n \n error: transmute from a `f32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:115:30\n+  --> $DIR/transmute.rs:119:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0.0f32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0.0f32.to_ne_bytes()`\n \n error: transmute from a `f64` to a `[u8; 8]`\n-  --> $DIR/transmute.rs:116:30\n+  --> $DIR/transmute.rs:120:30\n    |\n LL |             let _: [u8; 8] = std::mem::transmute(0.0f64);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0.0f64.to_ne_bytes()`\n \n error: transmute from a `u8` to a `[u8; 1]`\n-  --> $DIR/transmute.rs:121:30\n+  --> $DIR/transmute.rs:125:30\n    |\n LL |             let _: [u8; 1] = std::mem::transmute(0u8);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u8.to_ne_bytes()`\n \n error: transmute from a `u32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:122:30\n+  --> $DIR/transmute.rs:126:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0u32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u32.to_ne_bytes()`\n \n error: transmute from a `u128` to a `[u8; 16]`\n-  --> $DIR/transmute.rs:123:31\n+  --> $DIR/transmute.rs:127:31\n    |\n LL |             let _: [u8; 16] = std::mem::transmute(0u128);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u128.to_ne_bytes()`\n \n error: transmute from a `i8` to a `[u8; 1]`\n-  --> $DIR/transmute.rs:124:30\n+  --> $DIR/transmute.rs:128:30\n    |\n LL |             let _: [u8; 1] = std::mem::transmute(0i8);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i8.to_ne_bytes()`\n \n error: transmute from a `i32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:125:30\n+  --> $DIR/transmute.rs:129:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0i32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i32.to_ne_bytes()`\n \n error: transmute from a `i128` to a `[u8; 16]`\n-  --> $DIR/transmute.rs:126:31\n+  --> $DIR/transmute.rs:130:31\n    |\n LL |             let _: [u8; 16] = std::mem::transmute(0i128);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i128.to_ne_bytes()`\n \n error: transmute from a `&[u8]` to a `&str`\n-  --> $DIR/transmute.rs:134:28\n+  --> $DIR/transmute.rs:140:28\n    |\n-LL |     let _: &str = unsafe { std::mem::transmute(b) };\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(b).unwrap()`\n+LL |     let _: &str = unsafe { std::mem::transmute(B) };\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(B).unwrap()`\n    |\n    = note: `-D clippy::transmute-bytes-to-str` implied by `-D warnings`\n \n error: transmute from a `&mut [u8]` to a `&mut str`\n-  --> $DIR/transmute.rs:135:32\n+  --> $DIR/transmute.rs:141:32\n    |\n LL |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n \n-error: aborting due to 38 previous errors\n+error: transmute from a `&[u8]` to a `&str`\n+  --> $DIR/transmute.rs:142:30\n+   |\n+LL |     const _: &str = unsafe { std::mem::transmute(B) };\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_unchecked(B)`\n+\n+error: aborting due to 39 previous errors\n "}, {"sha": "afa337c45f41766033abe0d1d85b2694f7fa11f6", "filename": "src/tools/clippy/tests/ui/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,5 +1,9 @@\n+// aux-build:proc_macro_unsafe.rs\n+\n #![warn(clippy::undocumented_unsafe_blocks)]\n \n+extern crate proc_macro_unsafe;\n+\n // Valid comments\n \n fn nested_local() {\n@@ -89,11 +93,6 @@ fn block_comment_newlines() {\n     unsafe {}\n }\n \n-#[rustfmt::skip]\n-fn inline_block_comment() {\n-    /* Safety: */unsafe {}\n-}\n-\n fn block_comment_with_extras() {\n     /* This is a description\n      * SAFETY:\n@@ -209,8 +208,54 @@ fn local_nest() {\n     let _ = [(42, unsafe {}, unsafe {}), (52, unsafe {}, unsafe {})];\n }\n \n+fn in_fn_call(x: *const u32) {\n+    fn f(x: u32) {}\n+\n+    // Safety: reason\n+    f(unsafe { *x });\n+}\n+\n+fn multi_in_fn_call(x: *const u32) {\n+    fn f(x: u32, y: u32) {}\n+\n+    // Safety: reason\n+    f(unsafe { *x }, unsafe { *x });\n+}\n+\n+fn in_multiline_fn_call(x: *const u32) {\n+    fn f(x: u32, y: u32) {}\n+\n+    f(\n+        // Safety: reason\n+        unsafe { *x },\n+        0,\n+    );\n+}\n+\n+fn in_macro_call(x: *const u32) {\n+    // Safety: reason\n+    println!(\"{}\", unsafe { *x });\n+}\n+\n+fn in_multiline_macro_call(x: *const u32) {\n+    println!(\n+        \"{}\",\n+        // Safety: reason\n+        unsafe { *x },\n+    );\n+}\n+\n+fn from_proc_macro() {\n+    proc_macro_unsafe::unsafe_block!(token);\n+}\n+\n // Invalid comments\n \n+#[rustfmt::skip]\n+fn inline_block_comment() {\n+    /* Safety: */ unsafe {}\n+}\n+\n fn no_comment() {\n     unsafe {}\n }"}, {"sha": "856a07fd31685e3170eba2ff3baf47221494cf01", "filename": "src/tools/clippy/tests/ui/undocumented_unsafe_blocks.stderr", "status": "modified", "additions": 64, "deletions": 84, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.stderr?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -1,171 +1,151 @@\n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:215:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:256:19\n+   |\n+LL |     /* Safety: */ unsafe {}\n+   |                   ^^^^^^^^^\n+   |\n+   = note: `-D clippy::undocumented-unsafe-blocks` implied by `-D warnings`\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:260:5\n    |\n LL |     unsafe {}\n    |     ^^^^^^^^^\n    |\n-   = note: `-D clippy::undocumented-unsafe-blocks` implied by `-D warnings`\n-help: consider adding a safety comment\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:264:14\n    |\n-LL ~     // SAFETY: ...\n-LL +     unsafe {}\n+LL |     let _ = [unsafe { 14 }, unsafe { 15 }, 42, unsafe { 16 }];\n+   |              ^^^^^^^^^^^^^\n    |\n+   = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:219:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:264:29\n    |\n LL |     let _ = [unsafe { 14 }, unsafe { 15 }, 42, unsafe { 16 }];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^\n    |\n-help: consider adding a safety comment\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:264:48\n    |\n-LL ~     // SAFETY: ...\n-LL +     let _ = [unsafe { 14 }, unsafe { 15 }, 42, unsafe { 16 }];\n+LL |     let _ = [unsafe { 14 }, unsafe { 15 }, 42, unsafe { 16 }];\n+   |                                                ^^^^^^^^^^^^^\n    |\n+   = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:223:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:268:18\n    |\n LL |     let _ = (42, unsafe {}, \"test\", unsafe {});\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^\n    |\n-help: consider adding a safety comment\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:268:37\n    |\n-LL ~     // SAFETY: ...\n-LL +     let _ = (42, unsafe {}, \"test\", unsafe {});\n+LL |     let _ = (42, unsafe {}, \"test\", unsafe {});\n+   |                                     ^^^^^^^^^\n    |\n+   = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:227:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:272:14\n    |\n LL |     let _ = *unsafe { &42 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider adding a safety comment\n-   |\n-LL ~     // SAFETY: ...\n-LL +     let _ = *unsafe { &42 };\n+   |              ^^^^^^^^^^^^^^\n    |\n+   = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:232:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:277:19\n    |\n LL |     let _ = match unsafe {} {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider adding a safety comment\n-   |\n-LL ~     // SAFETY: ...\n-LL +     let _ = match unsafe {} {\n+   |                   ^^^^^^^^^\n    |\n+   = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:238:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:283:14\n    |\n LL |     let _ = &unsafe {};\n-   |     ^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider adding a safety comment\n-   |\n-LL ~     // SAFETY: ...\n-LL +     let _ = &unsafe {};\n+   |              ^^^^^^^^^\n    |\n+   = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:242:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:287:14\n    |\n LL |     let _ = [unsafe {}; 5];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider adding a safety comment\n-   |\n-LL ~     // SAFETY: ...\n-LL +     let _ = [unsafe {}; 5];\n+   |              ^^^^^^^^^\n    |\n+   = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:246:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:291:13\n    |\n LL |     let _ = unsafe {};\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider adding a safety comment\n-   |\n-LL ~     // SAFETY: ...\n-LL +     let _ = unsafe {};\n+   |             ^^^^^^^^^\n    |\n+   = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:256:8\n+  --> $DIR/undocumented_unsafe_blocks.rs:301:8\n    |\n LL |     t!(unsafe {});\n    |        ^^^^^^^^^\n    |\n-help: consider adding a safety comment\n-   |\n-LL ~     t!(// SAFETY: ...\n-LL ~     unsafe {});\n-   |\n+   = help: consider adding a safety comment on the preceding line\n \n-error: unsafe block in macro expansion missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:262:13\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:307:13\n    |\n LL |             unsafe {}\n    |             ^^^^^^^^^\n ...\n LL |     t!();\n    |     ---- in this macro invocation\n    |\n-   = help: consider adding a safety comment in the macro definition\n+   = help: consider adding a safety comment on the preceding line\n    = note: this error originates in the macro `t` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:270:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:315:5\n    |\n LL |     unsafe {} // SAFETY:\n    |     ^^^^^^^^^\n    |\n-help: consider adding a safety comment\n-   |\n-LL ~     // SAFETY: ...\n-LL ~     unsafe {} // SAFETY:\n-   |\n+   = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:274:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:319:5\n    |\n LL |     unsafe {\n    |     ^^^^^^^^\n    |\n-help: consider adding a safety comment\n-   |\n-LL ~     // SAFETY: ...\n-LL +     unsafe {\n-   |\n+   = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:284:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:329:5\n    |\n LL |     unsafe {};\n    |     ^^^^^^^^^\n    |\n-help: consider adding a safety comment\n-   |\n-LL ~     // SAFETY: ...\n-LL ~     unsafe {};\n-   |\n+   = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:288:20\n+  --> $DIR/undocumented_unsafe_blocks.rs:333:20\n    |\n LL |     println!(\"{}\", unsafe { String::from_utf8_unchecked(vec![]) });\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: consider adding a safety comment\n-   |\n-LL ~     println!(\"{}\", // SAFETY: ...\n-LL ~     unsafe { String::from_utf8_unchecked(vec![]) });\n-   |\n+   = help: consider adding a safety comment on the preceding line\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 18 previous errors\n "}, {"sha": "62c3e9636866a5a67492f339ca706b97aea73c31", "filename": "src/tools/clippy/tests/ui/unnecessary_cast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -30,4 +30,10 @@ fn main() {\n \n     // do not lint cast to cfg-dependant type\n     1 as std::os::raw::c_char;\n+\n+    // do not lint cast to alias type\n+    1 as I32Alias;\n+    &1 as &I32Alias;\n }\n+\n+type I32Alias = i32;"}, {"sha": "36800c5340db21d665070b288040e00958bd612a", "filename": "src/tools/clippy/tests/ui/unnecessary_cast_fixable.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -42,4 +42,9 @@ fn main() {\n \n     let _ = -1_i32;\n     let _ = -1.0_f32;\n+\n+    let _ = 1 as I32Alias;\n+    let _ = &1 as &I32Alias;\n }\n+\n+type I32Alias = i32;"}, {"sha": "d4b6bb952ab3508261198212ba394d20b5cd3d4c", "filename": "src/tools/clippy/tests/ui/unnecessary_cast_fixable.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -42,4 +42,9 @@ fn main() {\n \n     let _ = -1 as i32;\n     let _ = -1.0 as f32;\n+\n+    let _ = 1 as I32Alias;\n+    let _ = &1 as &I32Alias;\n }\n+\n+type I32Alias = i32;"}, {"sha": "bafca91917aa431d6747b50a4fee16a4fefe4666", "filename": "src/tools/clippy/tests/ui/unsafe_derive_deserialize.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funsafe_derive_deserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funsafe_derive_deserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funsafe_derive_deserialize.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -6,37 +6,37 @@ extern crate serde;\n use serde::Deserialize;\n \n #[derive(Deserialize)]\n-pub struct A {}\n+pub struct A;\n impl A {\n     pub unsafe fn new(_a: i32, _b: i32) -> Self {\n         Self {}\n     }\n }\n \n #[derive(Deserialize)]\n-pub struct B {}\n+pub struct B;\n impl B {\n     pub unsafe fn unsafe_method(&self) {}\n }\n \n #[derive(Deserialize)]\n-pub struct C {}\n+pub struct C;\n impl C {\n     pub fn unsafe_block(&self) {\n         unsafe {}\n     }\n }\n \n #[derive(Deserialize)]\n-pub struct D {}\n+pub struct D;\n impl D {\n     pub fn inner_unsafe_fn(&self) {\n         unsafe fn inner() {}\n     }\n }\n \n // Does not derive `Deserialize`, should be ignored\n-pub struct E {}\n+pub struct E;\n impl E {\n     pub unsafe fn new(_a: i32, _b: i32) -> Self {\n         Self {}\n@@ -55,12 +55,12 @@ impl E {\n \n // Does not have methods using `unsafe`, should be ignored\n #[derive(Deserialize)]\n-pub struct F {}\n+pub struct F;\n \n // Check that we honor the `allow` attribute on the ADT\n #[allow(clippy::unsafe_derive_deserialize)]\n #[derive(Deserialize)]\n-pub struct G {}\n+pub struct G;\n impl G {\n     pub fn unsafe_block(&self) {\n         unsafe {}"}, {"sha": "cde4e96d668c2c78b5cb79478702db0e66520e46", "filename": "src/tools/clippy/tests/ui/unsafe_removed_from_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funsafe_removed_from_name.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -14,8 +14,8 @@ use std::cell::UnsafeCell as Dangerunsafe;\n use std::cell::UnsafeCell as Bombsawayunsafe;\n \n mod mod_with_some_unsafe_things {\n-    pub struct Safe {}\n-    pub struct Unsafe {}\n+    pub struct Safe;\n+    pub struct Unsafe;\n }\n \n use mod_with_some_unsafe_things::Unsafe as LieAboutModSafety;"}, {"sha": "08bf58fec7c3eb0d21b18cb6c64334bfbcb88e53", "filename": "src/tools/clippy/tests/ui/unused_self.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_self.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -5,7 +5,7 @@ mod unused_self {\n     use std::pin::Pin;\n     use std::sync::{Arc, Mutex};\n \n-    struct A {}\n+    struct A;\n \n     impl A {\n         fn unused_self_move(self) {}\n@@ -27,23 +27,23 @@ mod unused_self {\n }\n \n mod unused_self_allow {\n-    struct A {}\n+    struct A;\n \n     impl A {\n         // shouldn't trigger\n         #[allow(clippy::unused_self)]\n         fn unused_self_move(self) {}\n     }\n \n-    struct B {}\n+    struct B;\n \n     // shouldn't trigger\n     #[allow(clippy::unused_self)]\n     impl B {\n         fn unused_self_move(self) {}\n     }\n \n-    struct C {}\n+    struct C;\n \n     #[allow(clippy::unused_self)]\n     impl C {\n@@ -120,7 +120,7 @@ mod used_self {\n mod not_applicable {\n     use std::fmt;\n \n-    struct A {}\n+    struct A;\n \n     impl fmt::Debug for A {\n         fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "3e62ffe74feddb270f358cc17785175353e34495", "filename": "src/tools/clippy/tests/ui/use_self.fixed", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -16,7 +16,7 @@ extern crate proc_macro_derive;\n fn main() {}\n \n mod use_self {\n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         fn new() -> Self {\n@@ -35,7 +35,7 @@ mod use_self {\n }\n \n mod better {\n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         fn new() -> Self {\n@@ -123,7 +123,7 @@ mod macros {\n         };\n     }\n \n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         use_self_expand!(); // Should not lint in local macros\n@@ -134,7 +134,7 @@ mod macros {\n }\n \n mod nesting {\n-    struct Foo {}\n+    struct Foo;\n     impl Foo {\n         fn foo() {\n             #[allow(unused_imports)]\n@@ -209,7 +209,7 @@ mod issue3410 {\n #[allow(clippy::no_effect, path_statements)]\n mod rustfix {\n     mod nested {\n-        pub struct A {}\n+        pub struct A;\n     }\n \n     impl nested::A {\n@@ -227,7 +227,7 @@ mod rustfix {\n }\n \n mod issue3567 {\n-    struct TestStruct {}\n+    struct TestStruct;\n     impl TestStruct {\n         fn from_something() -> Self {\n             Self {}\n@@ -248,7 +248,7 @@ mod issue3567 {\n mod paths_created_by_lowering {\n     use std::ops::Range;\n \n-    struct S {}\n+    struct S;\n \n     impl S {\n         const A: usize = 0;\n@@ -382,7 +382,7 @@ mod issue4305 {\n }\n \n mod lint_at_item_level {\n-    struct Foo {}\n+    struct Foo;\n \n     #[allow(clippy::use_self)]\n     impl Foo {\n@@ -400,7 +400,7 @@ mod lint_at_item_level {\n }\n \n mod lint_at_impl_item_level {\n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         #[allow(clippy::use_self)]\n@@ -433,8 +433,8 @@ mod issue4734 {\n mod nested_paths {\n     use std::convert::Into;\n     mod submod {\n-        pub struct B {}\n-        pub struct C {}\n+        pub struct B;\n+        pub struct C;\n \n         impl Into<C> for B {\n             fn into(self) -> C {"}, {"sha": "da2faddee12a71327de345e5c7460659853690dc", "filename": "src/tools/clippy/tests/ui/use_self.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -16,7 +16,7 @@ extern crate proc_macro_derive;\n fn main() {}\n \n mod use_self {\n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         fn new() -> Foo {\n@@ -35,7 +35,7 @@ mod use_self {\n }\n \n mod better {\n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         fn new() -> Self {\n@@ -123,7 +123,7 @@ mod macros {\n         };\n     }\n \n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         use_self_expand!(); // Should not lint in local macros\n@@ -134,7 +134,7 @@ mod macros {\n }\n \n mod nesting {\n-    struct Foo {}\n+    struct Foo;\n     impl Foo {\n         fn foo() {\n             #[allow(unused_imports)]\n@@ -209,7 +209,7 @@ mod issue3410 {\n #[allow(clippy::no_effect, path_statements)]\n mod rustfix {\n     mod nested {\n-        pub struct A {}\n+        pub struct A;\n     }\n \n     impl nested::A {\n@@ -227,7 +227,7 @@ mod rustfix {\n }\n \n mod issue3567 {\n-    struct TestStruct {}\n+    struct TestStruct;\n     impl TestStruct {\n         fn from_something() -> Self {\n             Self {}\n@@ -248,7 +248,7 @@ mod issue3567 {\n mod paths_created_by_lowering {\n     use std::ops::Range;\n \n-    struct S {}\n+    struct S;\n \n     impl S {\n         const A: usize = 0;\n@@ -382,7 +382,7 @@ mod issue4305 {\n }\n \n mod lint_at_item_level {\n-    struct Foo {}\n+    struct Foo;\n \n     #[allow(clippy::use_self)]\n     impl Foo {\n@@ -400,7 +400,7 @@ mod lint_at_item_level {\n }\n \n mod lint_at_impl_item_level {\n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         #[allow(clippy::use_self)]\n@@ -433,8 +433,8 @@ mod issue4734 {\n mod nested_paths {\n     use std::convert::Into;\n     mod submod {\n-        pub struct B {}\n-        pub struct C {}\n+        pub struct B;\n+        pub struct C;\n \n         impl Into<C> for B {\n             fn into(self) -> C {"}, {"sha": "ce58a80347b558ef7a46b48b2883def9f0455f71", "filename": "src/tools/clippy/tests/ui/useless_attribute.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_attribute.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_attribute.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_attribute.fixed?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -42,7 +42,7 @@ mod a {\n     mod b {\n         #[allow(dead_code)]\n         #[allow(unreachable_pub)]\n-        pub struct C {}\n+        pub struct C;\n     }\n \n     #[allow(unreachable_pub)]"}, {"sha": "c82bb9ba07fd731efb14a91a954fb3a132cc6423", "filename": "src/tools/clippy/tests/ui/useless_attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_attribute.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -42,7 +42,7 @@ mod a {\n     mod b {\n         #[allow(dead_code)]\n         #[allow(unreachable_pub)]\n-        pub struct C {}\n+        pub struct C;\n     }\n \n     #[allow(unreachable_pub)]"}, {"sha": "38498ebdcf2c1ed49f0f22ee3a2be6a2c29d078e", "filename": "src/tools/clippy/tests/versioncheck.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fversioncheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36/src%2Ftools%2Fclippy%2Ftests%2Fversioncheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fversioncheck.rs?ref=2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "patch": "@@ -3,34 +3,32 @@\n #![allow(clippy::single_match_else)]\n \n use rustc_tools_util::VersionInfo;\n+use std::fs;\n \n #[test]\n fn check_that_clippy_lints_and_clippy_utils_have_the_same_version_as_clippy() {\n+    fn read_version(path: &str) -> String {\n+        let contents = fs::read_to_string(path).unwrap_or_else(|e| panic!(\"error reading `{}`: {:?}\", path, e));\n+        contents\n+            .lines()\n+            .filter_map(|l| l.split_once('='))\n+            .find_map(|(k, v)| (k.trim() == \"version\").then(|| v.trim()))\n+            .unwrap_or_else(|| panic!(\"error finding version in `{}`\", path))\n+            .to_string()\n+    }\n+\n     // do not run this test inside the upstream rustc repo:\n     // https://github.com/rust-lang/rust-clippy/issues/6683\n     if option_env!(\"RUSTC_TEST_SUITE\").is_some() {\n         return;\n     }\n \n-    let clippy_meta = cargo_metadata::MetadataCommand::new()\n-        .no_deps()\n-        .exec()\n-        .expect(\"could not obtain cargo metadata\");\n+    let clippy_version = read_version(\"Cargo.toml\");\n+    let clippy_lints_version = read_version(\"clippy_lints/Cargo.toml\");\n+    let clippy_utils_version = read_version(\"clippy_utils/Cargo.toml\");\n \n-    for krate in &[\"clippy_lints\", \"clippy_utils\"] {\n-        let krate_meta = cargo_metadata::MetadataCommand::new()\n-            .current_dir(std::env::current_dir().unwrap().join(krate))\n-            .no_deps()\n-            .exec()\n-            .expect(\"could not obtain cargo metadata\");\n-        assert_eq!(krate_meta.packages[0].version, clippy_meta.packages[0].version);\n-        for package in &clippy_meta.packages[0].dependencies {\n-            if package.name == *krate {\n-                assert!(package.req.matches(&krate_meta.packages[0].version));\n-                break;\n-            }\n-        }\n-    }\n+    assert_eq!(clippy_version, clippy_lints_version);\n+    assert_eq!(clippy_version, clippy_utils_version);\n }\n \n #[test]"}]}