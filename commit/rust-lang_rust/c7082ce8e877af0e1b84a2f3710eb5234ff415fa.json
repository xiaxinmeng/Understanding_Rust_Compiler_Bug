{"sha": "c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MDgyY2U4ZTg3N2FmMGUxYjg0YTJmMzcxMGViNTIzNGZmNDE1ZmE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-29T19:21:13Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-29T19:22:01Z"}, "message": "Require \"self\" as base expression for intra-class method or field references\n\nAll field or method references within a class must begin with \"self.\" now.\nA bare reference to a field or method in the same class will no longer\ntypecheck.", "tree": {"sha": "29aed232d2d7e6471eb9d7419bc60cb08bca1b16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29aed232d2d7e6471eb9d7419bc60cb08bca1b16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "html_url": "https://github.com/rust-lang/rust/commit/c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2f28e231f65802d695815b6e40547b5a0e283fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2f28e231f65802d695815b6e40547b5a0e283fc", "html_url": "https://github.com/rust-lang/rust/commit/c2f28e231f65802d695815b6e40547b5a0e283fc"}], "stats": {"total": 211, "additions": 49, "deletions": 162}, "files": [{"sha": "5d7802e08c0fbc19aff6f4b3fd41e67b0fb2daa6", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -443,12 +443,6 @@ impl of tr for ast::def {\n           ast::def_class(did) {\n             ast::def_class(did.tr(xcx))\n           }\n-          ast::def_class_field(did0, did1) {\n-            ast::def_class_field(did0.tr(xcx), did1.tr(xcx))\n-          }\n-          ast::def_class_method(did0, did1) {\n-            ast::def_class_method(did0.tr(xcx), did1.tr(xcx))\n-          }\n           ast::def_region(nid) { ast::def_region(xcx.tr_id(nid)) }\n         }\n     }"}, {"sha": "268d63b84f52f30a8d3d504de41fc5ec7a194caf", "filename": "src/rustc/middle/mutbl.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Frustc%2Fmiddle%2Fmutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Frustc%2Fmiddle%2Fmutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmutbl.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -321,7 +321,7 @@ fn check_bind(cx: @ctx, f: @expr, args: [option<@expr>]) {\n fn is_illegal_to_modify_def(cx: @ctx, def: def, msg: msg) -> option<str> {\n     alt def {\n       def_fn(_, _) | def_mod(_) | def_native_mod(_) | def_const(_) |\n-      def_use(_) | def_class_method(_,_) {\n+      def_use(_) {\n         some(\"static item\")\n       }\n       def_arg(_, m) {\n@@ -354,18 +354,6 @@ fn is_illegal_to_modify_def(cx: @ctx, def: def, msg: msg) -> option<str> {\n       }\n \n       def_binding(_) { some(\"binding\") }\n-      def_class_field(parent,fld) {\n-          if option::is_none(cx.in_ctor) {\n-             /* Enforce mutability *unless* we're inside a ctor */\n-             alt ty::lookup_class_field(cx.tcx, parent, fld).mutability {\n-               class_mutable { none }\n-               class_immutable { some(\"immutable class field\") }\n-             }\n-          }\n-          else {\n-              none\n-          }\n-      }\n       _ { none }\n     }\n }"}, {"sha": "3fe98999cefad7967d2a5f33e830c7e1d3bb417d", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -88,8 +88,6 @@ enum mod_index_entry {\n     mie_view_item(ident, node_id, span),\n     mie_import_ident(node_id, span),\n     mie_item(@ast::item),\n-    mie_class_item(node_id, /* parent class name */\n-                   @ast::class_member), /* class member */\n     mie_native_item(@ast::native_item),\n     mie_enum_variant(/* variant index */uint,\n                      /*parts of enum item*/ [variant],\n@@ -1017,9 +1015,6 @@ fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace,\n                       ret some(ast::def_fn(local_def(ctor.node.id),\n                                            ast::impure_fn));\n                   }\n-                  if ns == ns_val {\n-                      ret lookup_in_class(local_def(it.id), members, name);\n-                  }\n                   // FIXME: AST allows other items to appear in a class,\n                   // but that might not be wise\n               }\n@@ -1156,30 +1151,6 @@ fn lookup_in_fn(e: env, name: ident, decl: ast::fn_decl,\n     }\n }\n \n-/*\n-   FIXME: not sure about this code. maybe this should be handled\n-   using the mod_index stuff\n- */\n-fn lookup_in_class(parent_id: def_id,\n-                   members: [@class_member], name: ident)\n-   -> option<def> {\n-    for m in members {\n-      alt m.node {\n-        instance_var(v_name,_,_,id,_) {\n-            if v_name == name {\n-              ret some(def_class_field(parent_id, local_def(id)));\n-            }\n-        }\n-        class_method(i) {\n-            if i.ident == name {\n-              ret some(def_class_method(parent_id, local_def(i.id)));\n-            }\n-        }\n-      }\n-    }\n-    ret none;\n-}\n-\n fn lookup_in_block(e: env, name: ident, sp: span, b: ast::blk_, pos: uint,\n                    loc_pos: uint, ns: namespace) -> option<def> {\n \n@@ -1559,18 +1530,6 @@ fn lookup_in_mie(e: env, mie: mod_index_entry, ns: namespace) ->\n           }\n         }\n       }\n-      mie_class_item(parent_id, class_item) {\n-          alt class_item.node {\n-              instance_var(_,_,_,id,_) {\n-                  ret some(ast::def_class_field(local_def(parent_id),\n-                                                local_def(id)));\n-              }\n-              class_method(it) {\n-                  ret some(ast::def_class_method(local_def(parent_id),\n-                                                 local_def(it.id)));\n-              }\n-          }\n-      }\n     }\n     ret none;\n }\n@@ -1648,11 +1607,6 @@ fn index_mod(md: ast::_mod) -> mod_index {\n                             node:\n                               item_fn(ctor.node.dec, tps, ctor.node.body),\n                             span: ctor.node.body.span}));\n-              // add the members\n-              for ci in items {\n-                 add_to_index(index, class_item_ident(ci),\n-                              mie_class_item(it.id, ci));\n-              }\n           }\n         }\n     }\n@@ -1678,8 +1632,7 @@ fn ns_for_def(d: def) -> namespace {\n       ast::def_variant(_, _) { ns_val }\n       ast::def_fn(_, _) | ast::def_self(_) |\n       ast::def_const(_) | ast::def_arg(_, _) | ast::def_local(_, _) |\n-      ast::def_upvar(_, _, _) |  ast::def_self(_) |\n-      ast::def_class_field(_,_) | ast::def_class_method(_,_) { ns_val }\n+      ast::def_upvar(_, _, _) |  ast::def_self(_) { ns_val }\n       ast::def_mod(_) | ast::def_native_mod(_) { ns_module }\n       ast::def_ty(_) | ast::def_binding(_) | ast::def_use(_) |\n       ast::def_ty_param(_, _) | ast::def_prim_ty(_) | ast::def_class(_)\n@@ -1761,7 +1714,6 @@ fn mie_span(mie: mod_index_entry) -> span {\n           mie_item(item) { item.span }\n           mie_enum_variant(_, _, _, span) { span }\n           mie_native_item(item) { item.span }\n-          mie_class_item(_,item) { item.span }\n         };\n }\n "}, {"sha": "26565b05b97e96b97163afc79d2fbc316e575c95", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 32, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -2177,22 +2177,18 @@ fn trans_local_var(cx: block, def: ast::def) -> local_var_result {\n     }\n }\n \n-// The third argument (path) ends up getting used when the id\n-// refers to a field within the enclosing class, since the name\n-// gets turned into a record field name.\n-fn trans_path(cx: block, id: ast::node_id, path: @ast::path)\n+fn trans_path(cx: block, id: ast::node_id)\n     -> lval_maybe_callee {\n     let _icx = cx.insn_ctxt(\"trans_path\");\n     alt cx.tcx().def_map.find(id) {\n       none { cx.sess().bug(\"trans_path: unbound node ID\"); }\n       some(df) {\n-          ret trans_var(cx, df, id, path);\n+          ret trans_var(cx, df, id);\n       }\n     }\n }\n \n-fn trans_var(cx: block, def: ast::def, id: ast::node_id, path: @ast::path)\n-    -> lval_maybe_callee {\n+fn trans_var(cx: block, def: ast::def, id: ast::node_id)-> lval_maybe_callee {\n     let _icx = cx.insn_ctxt(\"trans_var\");\n     let ccx = cx.ccx();\n     alt def {\n@@ -2225,28 +2221,6 @@ fn trans_var(cx: block, def: ast::def, id: ast::node_id, path: @ast::path)\n             ret lval_no_env(cx, load_if_immediate(cx, val, tp), owned_imm);\n         }\n       }\n-      ast::def_class_field(parent, did) {\n-          // base is implicitly \"Self\"\n-          alt cx.fcx.llself {\n-            some(slf) {\n-                let base = cast_self(cx, slf);\n-                let {bcx, val, kind} = trans_rec_field_inner(cx, base,\n-                                         slf.t,\n-                                         path_to_ident(path), path.span);\n-                ret lval_no_env(bcx, val, kind);\n-            }\n-            _ { cx.sess().bug(\"unbound self param in class\"); }\n-          }\n-      }\n-      ast::def_class_method(parent, did) {\n-          alt cx.fcx.llself {\n-             some(slf) {\n-                ret {env: self_env(slf.v, slf.t, none)\n-                        with lval_static_fn(cx, did, id)};\n-             }\n-             none { cx.sess().bug(\"unbound self param in class\"); }\n-          }\n-      }\n       _ {\n         let loc = trans_local_var(cx, def);\n         ret lval_no_env(cx, loc.val, loc.kind);\n@@ -2323,7 +2297,7 @@ fn expr_is_lval(bcx: block, e: @ast::expr) -> bool {\n fn trans_callee(bcx: block, e: @ast::expr) -> lval_maybe_callee {\n     let _icx = bcx.insn_ctxt(\"trans_callee\");\n     alt e.node {\n-      ast::expr_path(path) { ret trans_path(bcx, e.id, path); }\n+      ast::expr_path(path) { ret trans_path(bcx, e.id); }\n       ast::expr_field(base, ident, _) {\n         // Lval means this is a record field, so not a method\n         if !expr_is_lval(bcx, e) {\n@@ -2350,8 +2324,8 @@ fn trans_callee(bcx: block, e: @ast::expr) -> lval_maybe_callee {\n fn trans_lval(cx: block, e: @ast::expr) -> lval_result {\n     let _icx = cx.insn_ctxt(\"trans_lval\");\n     alt e.node {\n-      ast::expr_path(p) {\n-          let v = trans_path(cx, e.id, p);\n+      ast::expr_path(_) {\n+        let v = trans_path(cx, e.id);\n         ret lval_maybe_callee_to_lval(v, expr_ty(cx, e));\n       }\n       ast::expr_field(base, ident, _) {"}, {"sha": "5fde3ab75de9e121da446fd8e39f1affc18cfb68", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -170,20 +170,6 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n       ast::def_upvar(_, inner, _) {\n         ret ty_param_bounds_and_ty_for_def(fcx, sp, *inner);\n       }\n-      ast::def_class_method(_, id) | ast::def_class_field(_, id) {\n-          if id.crate != ast::local_crate {\n-                  fcx.ccx.tcx.sess.span_fatal(sp,\n-                                 \"class method or field referred to \\\n-                                  out of scope\");\n-          }\n-          alt fcx.ccx.enclosing_class.find(id.node) {\n-             some(a_ty) { ret {bounds: @[], ty: a_ty}; }\n-             _ { fcx.ccx.tcx.sess.span_fatal(sp,\n-                                 \"class method or field referred to \\\n-                                  out of scope\"); }\n-          }\n-      }\n-\n       _ {\n         // FIXME: handle other names.\n         fcx.ccx.tcx.sess.unimpl(\"definition variant\");"}, {"sha": "c6fe959e2902d44308ed97504848fc946c25a5da", "filename": "src/rustc/syntax/ast.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Frustc%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Frustc%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fast.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -83,11 +83,6 @@ enum def {\n               @def    /* closed over def */,\n               node_id /* expr node that creates the closure */),\n     def_class(def_id),\n-    // first def_id is for parent class\n-    def_class_field(def_id, def_id),\n-    // No purity allowed for now, I guess\n-    // (simpler this way, b/c presumably methods read mut state)\n-    def_class_method(def_id, def_id),\n     def_region(node_id)\n }\n "}, {"sha": "5e0f1c898179bd53932948bd0319a92ef5a0e0dd", "filename": "src/rustc/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Frustc%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Frustc%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fast_util.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -40,9 +40,7 @@ fn def_id_of_def(d: def) -> def_id {\n       def_fn(id, _) | def_mod(id) |\n       def_native_mod(id) | def_const(id) |\n       def_variant(_, id) | def_ty(id) | def_ty_param(id, _) |\n-      def_use(id) |\n-      def_class(id) | def_class_field(_, id) | def_class_method(_, id) { id }\n-\n+      def_use(id) | def_class(id) { id }\n       def_arg(id, _) | def_local(id, _) | def_self(id) |\n       def_upvar(id, _, _) | def_binding(id) | def_region(id) {\n         local_def(id)"}, {"sha": "182bfd351d481910544e545bbea1f6c73c43c5c7", "filename": "src/test/auxiliary/cci_class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -7,7 +7,7 @@ class cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n }\n \n }"}, {"sha": "92ffb217f6af2afcfff13e9df0c487adc8d20562", "filename": "src/test/auxiliary/cci_class_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -7,7 +7,7 @@ class cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n \n   fn speak() {}\n }"}, {"sha": "dab856377f8f38831c06a14fe2d7ff49a7184b02", "filename": "src/test/auxiliary/cci_class_3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -7,10 +7,10 @@ class cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n \n-  fn speak() { meows += 1u; }\n-  fn meow_count() -> uint { meows }\n+  fn speak() { self.meows += 1u; }\n+  fn meow_count() -> uint { self.meows }\n \n }\n "}, {"sha": "1ed65b21d036be33a2b3c613da788afef2747026", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -5,9 +5,9 @@ class cat {\n     let mut meows : uint;\n     fn meow() {\n       #error(\"Meow\");\n-      meows += 1u;\n-      if meows % 5u == 0u {\n-          how_hungry += 1;\n+      self.meows += 1u;\n+      if self.meows % 5u == 0u {\n+          self.how_hungry += 1;\n       }\n     }\n   }\n@@ -16,14 +16,14 @@ class cat {\n   let name : str;\n \n   new(in_x : uint, in_y : int, in_name: str)\n-    { meows = in_x; how_hungry = in_y; name = in_name; }\n+    { self.meows = in_x; self.how_hungry = in_y; self.name = in_name; }\n \n-  fn speak() { meow(); }\n+  fn speak() { self.meow(); }\n \n   fn eat() -> bool {\n-    if how_hungry > 0 {\n+    if self.how_hungry > 0 {\n         #error(\"OM NOM NOM\");\n-        how_hungry -= 2;\n+        self.how_hungry -= 2;\n         ret true;\n     }\n     else {"}, {"sha": "dc9339370583f25e0796af430ade4808087baa5f", "filename": "src/test/auxiliary/cci_class_5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -8,7 +8,7 @@ class cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n }\n \n }\n\\ No newline at end of file"}, {"sha": "bec203900675805a73e9df7858412f483353bf27", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -6,8 +6,8 @@ class cat {\n \n   let how_hungry : int;\n \n-  fn speak() { meows += 1u; }\n-  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+  fn speak() { self.meows += 1u; }\n+  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n }\n \n fn main() {"}, {"sha": "5450cd771895de57afcc1a488dd03df3235e501e", "filename": "src/test/compile-fail/ctor-uninit-var.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fcompile-fail%2Fctor-uninit-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fcompile-fail%2Fctor-uninit-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fctor-uninit-var.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -7,13 +7,13 @@ class cat {\n   let how_hungry : int;\n \n   fn eat() {\n-    how_hungry -= 5;\n+    self.how_hungry -= 5;\n   }\n \n   new(in_x : uint, in_y : int) {\n     let foo;\n-    meows = in_x + (in_y as uint);\n-    how_hungry = foo;\n+    self.meows = in_x + (in_y as uint);\n+    self.how_hungry = foo;\n   }\n }\n "}, {"sha": "1c06727ec2e6545234c6c32c305591cee7c9c19c", "filename": "src/test/compile-fail/mutable-class-fields-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:assigning to immutable class field\n+// error-pattern:assigning to immutable field\n class cat {\n   priv {\n     let mutable meows : uint;\n@@ -7,10 +7,10 @@ class cat {\n   let how_hungry : int;\n \n   fn eat() {\n-    how_hungry -= 5;\n+    self.how_hungry -= 5;\n   }\n \n-  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n }\n \n fn main() {"}, {"sha": "adac61c5e64e1f352b2cd78f0e51b3cc42fa417c", "filename": "src/test/compile-fail/mutable-class-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -6,7 +6,7 @@ class cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n }\n \n fn main() {"}, {"sha": "15aba5d009d070c7becd0d4535cad0c4b51935a2", "filename": "src/test/compile-fail/private-class-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fcompile-fail%2Fprivate-class-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fcompile-fail%2Fprivate-class-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-class-field.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -6,7 +6,7 @@ class cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n }\n \n fn main() {"}, {"sha": "b6a16c33a2bc4aa917e7c1bbf9045d09a2f249c5", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -7,7 +7,7 @@ class cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n }\n \n fn main() {"}, {"sha": "8023879ca9711ed73755e046133578ab30e56215", "filename": "src/test/run-pass/class-methods.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -5,10 +5,10 @@ class cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n \n-  fn speak() { meows += 1u; }\n-  fn meow_count() -> uint { meows }\n+  fn speak() { self.meows += 1u; }\n+  fn meow_count() -> uint { self.meows }\n }\n \n fn main() {"}, {"sha": "fab99f2591085a551865188fcb8207345a9f2d86", "filename": "src/test/run-pass/class-str-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Frun-pass%2Fclass-str-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Frun-pass%2Fclass-str-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-str-field.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -3,7 +3,7 @@ class cat {\n   let name : str;\n \n   new(in_name: str)\n-    { name = in_name; }\n+    { self.name = in_name; }\n }\n \n fn main() {"}, {"sha": "8fcf5b96be2d82f113b9f985c61f9e29cc4a177d", "filename": "src/test/run-pass/classes-simple-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -5,7 +5,7 @@ class cat {\n \n   let how_hungry : int;\n \n-  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n \n   fn speak() {}\n }"}, {"sha": "f2790cee35480022c14002807e5c646bbc64db18", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -3,9 +3,9 @@ class cat {\n     let mut meows : uint;\n     fn meow() {\n       #error(\"Meow\");\n-      meows += 1u;\n-      if meows % 5u == 0u {\n-          how_hungry += 1;\n+      self.meows += 1u;\n+      if self.meows % 5u == 0u {\n+          self.how_hungry += 1;\n       }\n     }\n   }\n@@ -14,14 +14,14 @@ class cat {\n   let name : str;\n \n   new(in_x : uint, in_y : int, in_name: str)\n-    { meows = in_x; how_hungry = in_y; name = in_name; }\n+    { self.meows = in_x; self.how_hungry = in_y; self.name = in_name; }\n \n-  fn speak() { meow(); }\n+  fn speak() { self.meow(); }\n \n   fn eat() -> bool {\n-    if how_hungry > 0 {\n+    if self.how_hungry > 0 {\n         #error(\"OM NOM NOM\");\n-        how_hungry -= 2;\n+        self.how_hungry -= 2;\n         ret true;\n     }\n     else {"}, {"sha": "a6baea1ffa7d376896c2db617bf63f6cc34b38ed", "filename": "src/test/run-pass/private-class-field.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -5,8 +5,8 @@ class cat {\n \n   let how_hungry : int;\n \n-  fn meow_count() -> uint { meows }\n-  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+  fn meow_count() -> uint { self.meows }\n+  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n }\n \n fn main() {"}, {"sha": "fab6bbaf7d985656a3f70d7fb6fe55e42fd09f8d", "filename": "src/test/run-pass/private-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7082ce8e877af0e1b84a2f3710eb5234ff415fa/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-method.rs?ref=c7082ce8e877af0e1b84a2f3710eb5234ff415fa", "patch": "@@ -7,10 +7,10 @@ class cat {\n   let how_hungry : int;\n \n   fn play() {\n-    meows += 1u;\n+    self.meows += 1u;\n     self.nap();\n   }\n-  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n }\n \n fn main() {"}]}