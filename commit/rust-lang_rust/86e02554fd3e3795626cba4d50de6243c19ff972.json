{"sha": "86e02554fd3e3795626cba4d50de6243c19ff972", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZTAyNTU0ZmQzZTM3OTU2MjZjYmE0ZDUwZGU2MjQzYzE5ZmY5NzI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-12T18:15:39Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-12T18:33:40Z"}, "message": "Make moves in arguments explicit in libsyntax and rustc", "tree": {"sha": "8cd8d23cc1afc252365392014e44c08554a08cc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cd8d23cc1afc252365392014e44c08554a08cc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86e02554fd3e3795626cba4d50de6243c19ff972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86e02554fd3e3795626cba4d50de6243c19ff972", "html_url": "https://github.com/rust-lang/rust/commit/86e02554fd3e3795626cba4d50de6243c19ff972", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86e02554fd3e3795626cba4d50de6243c19ff972/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "320331fe35f4020b388b2ccc5128d7261473ea08", "url": "https://api.github.com/repos/rust-lang/rust/commits/320331fe35f4020b388b2ccc5128d7261473ea08", "html_url": "https://github.com/rust-lang/rust/commit/320331fe35f4020b388b2ccc5128d7261473ea08"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "cc72ddfc7abbb7227e4acebef89e2aa1a6721e5f", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/86e02554fd3e3795626cba4d50de6243c19ff972/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e02554fd3e3795626cba4d50de6243c19ff972/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=86e02554fd3e3795626cba4d50de6243c19ff972", "patch": "@@ -365,19 +365,19 @@ fn ser_variant(cx: ext_ctxt,\n         let arg_blk =\n             cx.blk(\n                 span,\n-                ser_ty(cx, tps, tys[i], cx.clone(s), v));\n+                ser_ty(cx, tps, tys[i], cx.clone(s), move v));\n         cx.stmt(argfn(cx.clone(s), i, arg_blk))\n     };\n \n     let body_blk = cx.blk(span, stmts);\n-    let body = cx.blk(span, ~[cx.stmt(bodyfn(s, body_blk))]);\n+    let body = cx.blk(span, ~[cx.stmt(bodyfn(move s, body_blk))]);\n \n     {pats: ~[pat], guard: None, body: body}\n }\n \n fn ser_lambda(cx: ext_ctxt, tps: ser_tps_map, ty: @ast::ty,\n               -s: @ast::expr, -v: @ast::expr) -> @ast::expr {\n-    cx.lambda(cx.blk(ty.span, ser_ty(cx, tps, ty, s, v)))\n+    cx.lambda(cx.blk(ty.span, ser_ty(cx, tps, ty, move s, move v)))\n }\n \n fn is_vec_or_str(ty: @ast::ty) -> bool {\n@@ -415,7 +415,7 @@ fn ser_ty(cx: ext_ctxt, tps: ser_tps_map,\n \n       // For unique evecs/estrs, just pass through to underlying vec or str\n       ast::ty_uniq(mt) if is_vec_or_str(mt.ty) => {\n-        ser_ty(cx, tps, mt.ty, s, v)\n+        ser_ty(cx, tps, mt.ty, move s, move v)\n       }\n \n       ast::ty_uniq(mt) => {\n@@ -439,7 +439,7 @@ fn ser_ty(cx: ext_ctxt, tps: ser_tps_map,\n             let f = cx.lit_str(fld.span, cx.parse_sess().interner.get(\n                 fld.node.ident));\n             let i = cx.lit_uint(fld.span, fidx);\n-            let l = ser_lambda(cx, tps, fld.node.mt.ty, cx.clone(s), vf);\n+            let l = ser_lambda(cx, tps, fld.node.mt.ty, cx.clone(s), move vf);\n             #ast[stmt]{$(s).emit_rec_field($(f), $(i), $(l));}\n         };\n         let fld_lambda = cx.lambda(cx.blk(ty.span, fld_stmts));\n@@ -463,7 +463,7 @@ fn ser_ty(cx: ext_ctxt, tps: ser_tps_map,\n         let arms = ~[\n             ser_variant(\n \n-                cx, tps, tys, ty.span, s,\n+                cx, tps, tys, ty.span, move s,\n \n                 // Generate pattern (v1, v2, v3)\n                 |pats| ast::pat_tup(pats),\n@@ -482,20 +482,19 @@ fn ser_ty(cx: ext_ctxt, tps: ser_tps_map,\n                     #ast{ $(s).emit_tup_elt($(idx), $(body)) }\n                 })\n         ];\n-        ~[cx.alt_stmt(arms, ty.span, v)]\n+        ~[cx.alt_stmt(arms, ty.span, move v)]\n       }\n \n       ast::ty_path(path, _) => {\n-        if vec::len(path.idents) == 1u &&\n-            vec::is_empty(path.types) {\n+        if path.idents.len() == 1 && path.types.is_empty() {\n             let ident = path.idents[0];\n \n             match tps.find(ident) {\n               Some(f) => f(v),\n-              None => ser_path(cx, tps, path, s, v)\n+              None => ser_path(cx, tps, path, move s, move v)\n             }\n         } else {\n-            ser_path(cx, tps, path, s, v)\n+            ser_path(cx, tps, path, move s, move v)\n         }\n       }\n \n@@ -634,7 +633,7 @@ fn deser_path(cx: ext_ctxt, tps: deser_tps_map, path: @ast::path,\n \n fn deser_lambda(cx: ext_ctxt, tps: deser_tps_map, ty: @ast::ty,\n                 -d: @ast::expr) -> @ast::expr {\n-    cx.lambda(cx.expr_blk(deser_ty(cx, tps, ty, d)))\n+    cx.lambda(cx.expr_blk(deser_ty(cx, tps, ty, move d)))\n }\n \n fn deser_ty(cx: ext_ctxt, tps: deser_tps_map,\n@@ -658,7 +657,7 @@ fn deser_ty(cx: ext_ctxt, tps: deser_tps_map,\n \n       // For unique evecs/estrs, just pass through to underlying vec or str\n       ast::ty_uniq(mt) if is_vec_or_str(mt.ty) => {\n-        deser_ty(cx, tps, mt.ty, d)\n+        deser_ty(cx, tps, mt.ty, move d)\n       }\n \n       ast::ty_uniq(mt) => {\n@@ -719,10 +718,10 @@ fn deser_ty(cx: ext_ctxt, tps: deser_tps_map,\n \n             match tps.find(ident) {\n               Some(f) => f(),\n-              None => deser_path(cx, tps, path, d)\n+              None => deser_path(cx, tps, path, move d)\n             }\n         } else {\n-            deser_path(cx, tps, path, d)\n+            deser_path(cx, tps, path, move d)\n         }\n       }\n \n@@ -822,8 +821,9 @@ fn ty_fns(cx: ext_ctxt, name: ast::ident,\n \n     let span = ty.span;\n     ~[\n-        mk_ser_fn(cx, span, name, tps, |a,b,c,d| ser_ty(a, b, ty, c, d)),\n-        mk_deser_fn(cx, span, name, tps, |a,b,c| deser_ty(a, b, ty, c))\n+        mk_ser_fn(cx, span, name, tps, |a,b,c,d| ser_ty(a, b, ty, move c,\n+                                                        move d)),\n+        mk_deser_fn(cx, span, name, tps, |a,b,c| deser_ty(a, b, ty, move c))\n     ]\n }\n \n@@ -881,7 +881,7 @@ fn ser_enum(cx: ext_ctxt, tps: ser_tps_map, e_name: ast::ident,\n                 fail ~\"struct variants unimplemented for auto serialize\"\n         }\n     };\n-    let lam = cx.lambda(cx.blk(e_span, ~[cx.alt_stmt(arms, e_span, v)]));\n+    let lam = cx.lambda(cx.blk(e_span, ~[cx.alt_stmt(arms, e_span, move v)]));\n     let e_name = cx.lit_str(e_span, @cx.str_of(e_name));\n     ~[#ast[stmt]{ $(s).emit_enum($(e_name), $(lam)) }]\n }\n@@ -954,8 +954,9 @@ fn enum_fns(cx: ext_ctxt, e_name: ast::ident, e_span: span,\n     -> ~[@ast::item] {\n     ~[\n         mk_ser_fn(cx, e_span, e_name, tps,\n-                  |a,b,c,d| ser_enum(a, b, e_name, e_span, variants, c, d)),\n+                  |a,b,c,d| ser_enum(a, b, e_name, e_span, variants, move c,\n+                                     move d)),\n         mk_deser_fn(cx, e_span, e_name, tps,\n-                    |a,b,c| deser_enum(a, b, e_name, e_span, variants, c))\n+          |a,b,c| deser_enum(a, b, e_name, e_span, variants, move c))\n     ]\n }"}, {"sha": "1058028f7e9971e5f000c5f9abbad75da992e3d5", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e02554fd3e3795626cba4d50de6243c19ff972/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e02554fd3e3795626cba4d50de6243c19ff972/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=86e02554fd3e3795626cba4d50de6243c19ff972", "patch": "@@ -96,7 +96,7 @@ mod jit {\n                 code: ptr,\n                 env: ptr::null()\n             };\n-            let func: fn(~[~str]) = unsafe::transmute(closure);\n+            let func: fn(~[~str]) = unsafe::transmute(move closure);\n \n             func(~[sess.opts.binary]);\n         }"}, {"sha": "28e94e280bf5deb89e72982cdc5cfca04866e500", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e02554fd3e3795626cba4d50de6243c19ff972/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e02554fd3e3795626cba4d50de6243c19ff972/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=86e02554fd3e3795626cba4d50de6243c19ff972", "patch": "@@ -228,7 +228,7 @@ fn monitor(+f: fn~(diagnostic::emitter)) {\n     let p = comm::Port();\n     let ch = comm::Chan(p);\n \n-    match do task::try  {\n+    match do task::try |move f| {\n \n         // The 'diagnostics emitter'. Every error, warning, etc. should\n         // go through this function."}, {"sha": "98b942ace2b462f1d0937b8d3965e2ddbb9b7672", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e02554fd3e3795626cba4d50de6243c19ff972/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e02554fd3e3795626cba4d50de6243c19ff972/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=86e02554fd3e3795626cba4d50de6243c19ff972", "patch": "@@ -1046,7 +1046,7 @@ fn new_block(cx: fn_ctxt, parent: Option<block>, +kind: block_kind,\n     let llbb: BasicBlockRef = str::as_c_str(cx.ccx.sess.str_of(s), |buf| {\n         llvm::LLVMAppendBasicBlock(cx.llfn, buf)\n     });\n-    let bcx = mk_block(llbb, parent, kind, is_lpad, opt_node_info, cx);\n+    let bcx = mk_block(llbb, parent, move kind, is_lpad, opt_node_info, cx);\n     do option::iter(parent) |cx| {\n         if cx.unreachable { Unreachable(bcx); }\n     };"}, {"sha": "03ccea0ad50d80f2f7ac0204bf0b74a0ec3e738c", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e02554fd3e3795626cba4d50de6243c19ff972/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e02554fd3e3795626cba4d50de6243c19ff972/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=86e02554fd3e3795626cba4d50de6243c19ff972", "patch": "@@ -527,7 +527,7 @@ enum block = @block_;\n fn mk_block(llbb: BasicBlockRef, parent: Option<block>, -kind: block_kind,\n             is_lpad: bool, node_info: Option<node_info>, fcx: fn_ctxt)\n     -> block {\n-    block(@block_(llbb, parent, kind, is_lpad, node_info, fcx))\n+    block(@block_(llbb, parent, move kind, is_lpad, node_info, fcx))\n }\n \n // First two args are retptr, env"}, {"sha": "fc0c462e9359c9c0926a15cc14ddde1092fd5fa3", "filename": "src/rustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e02554fd3e3795626cba4d50de6243c19ff972/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e02554fd3e3795626cba4d50de6243c19ff972/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=86e02554fd3e3795626cba4d50de6243c19ff972", "patch": "@@ -131,7 +131,7 @@ enum debug_metadata {\n \n fn cast_safely<T: Copy, U>(val: T) -> U unsafe {\n     let val2 = val;\n-    return unsafe::transmute(val2);\n+    return unsafe::transmute(move val2);\n }\n \n fn md_from_metadata<T>(val: debug_metadata) -> T unsafe {"}, {"sha": "631efe4a766fc409846c4fc72c1be548d03176dd", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e02554fd3e3795626cba4d50de6243c19ff972/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e02554fd3e3795626cba4d50de6243c19ff972/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=86e02554fd3e3795626cba4d50de6243c19ff972", "patch": "@@ -383,7 +383,7 @@ type t = *t_opaque;\n pure fn get(t: t) -> t_box unsafe {\n     let t2 = unsafe::reinterpret_cast::<t, t_box>(&t);\n     let t3 = t2;\n-    unsafe::forget(t2);\n+    unsafe::forget(move t2);\n     t3\n }\n "}]}