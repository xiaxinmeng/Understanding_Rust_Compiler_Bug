{"sha": "9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliM2FlYTYwMmMzN2Q1M2JiZWNmOGJmZjhjNzdjY2JmYmVmYzIzZDA=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-01-30T05:53:01Z"}, "committer": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-05-02T09:32:34Z"}, "message": "Remove Option from the return type of Attribute::name()", "tree": {"sha": "dafe616470a07d22095ed35f0d2f421d309d44d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dafe616470a07d22095ed35f0d2f421d309d44d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz66kzxK9mXB0K2lyZ1erJvcvAIQFAlrphbIACgkQZ1erJvcv\nAITvZg/9FIxJ5A2w9mpwhR6XzvH5LTzFja3fMPxsbbnoY5J2AcaAAxuyVPN0zvqe\nBHnPZVQSB/Q/Wnmi7DVFS/OvbRUcZGCuQM6VW98GDHDP243Rj7+BiktbjLX2rhaY\nO1SRjGl2/AH1ImhFmtZa9lP8UELa1j+ssL87qUZTvxxTZWuTTBwOQmArTtXmRx77\nCzUS3RxNROQ1ViDXX47KeK9fvo6e4OPtzkuVJO3g9fImZ3IlGW72DoYLfFTwRaN0\nNBeox2WZ2mrxQLlXNOn4gSGUlKtPEmb4OO7KUng40JlJaYZXyllzaGHeU2J+1FdE\nFe1UFEntCvo58MshN8rxDBPohmhsPtQQdpOYuQcNh49c0EKMPl3/IEi6ZEahTPpV\njl6GuE6Gc0Ku7cTls4FYnsrQro7PqF39CB/OITyGib3ibjC3LOs7BFHDjxhb2gXo\nQ9cgpja+LJLmz88Bkhs19frCTutFg5THNk7XId+iqU23I2HycQ+ajhW/HzPaWIcR\nnn3lTC/FNEzyhpZ2XeE211fOkXutWs9X2lTz2Kpv46LSx2hvTRBR91Wod6B6SB1T\nKHZ3/XMiLFszwILtV/0CCOdLFucMjH62XDAJxS6J43p1egIUyhvYJYZ/C15HZagA\nI/qszj18I0I9ktTJ/Olu2o9sRAaygWVHrbOBm5FzitUGHzMjt1I=\n=g5aF\n-----END PGP SIGNATURE-----", "payload": "tree dafe616470a07d22095ed35f0d2f421d309d44d9\nparent 759bd01e039452a1a357d347aea51348f9ffc443\nauthor Seiichi Uchida <seuchida@gmail.com> 1517291581 +0900\ncommitter flip1995 <uwdkn@student.kit.edu> 1525253554 +0200\n\nRemove Option from the return type of Attribute::name()\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "html_url": "https://github.com/rust-lang/rust/commit/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "759bd01e039452a1a357d347aea51348f9ffc443", "url": "https://api.github.com/repos/rust-lang/rust/commits/759bd01e039452a1a357d347aea51348f9ffc443", "html_url": "https://github.com/rust-lang/rust/commit/759bd01e039452a1a357d347aea51348f9ffc443"}], "stats": {"total": 64, "additions": 28, "deletions": 36}, "files": [{"sha": "e8bdb9d5d5f6216d91b88f46b543996d6b42e3ba", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "patch": "@@ -153,10 +153,7 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n         // ```\n         let hints: Vec<_> = item.attrs\n             .iter()\n-            .filter(|attr| match attr.name() {\n-                Some(name) => name == \"repr\",\n-                None => false,\n-            })\n+            .filter(|attr| attr.name() == \"repr\")\n             .filter_map(|attr| attr.meta_item_list())\n             .flat_map(|hints| hints)\n             .collect();"}, {"sha": "d90dba2ff0495b5a21d6ebfe41a811d0ff8d2089", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "patch": "@@ -199,8 +199,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for [ast::Attribute] {\n         let filtered: AccumulateVec<[&ast::Attribute; 8]> = self\n             .iter()\n             .filter(|attr| {\n-                !attr.is_sugared_doc &&\n-                attr.name().map(|name| !hcx.is_ignored_attr(name)).unwrap_or(true)\n+                !attr.is_sugared_doc && !hcx.is_ignored_attr(attr.name())\n             })\n             .collect();\n \n@@ -227,7 +226,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for ast::Attribute {\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         // Make sure that these have been filtered out.\n-        debug_assert!(self.name().map(|name| !hcx.is_ignored_attr(name)).unwrap_or(true));\n+        debug_assert!(!hcx.is_ignored_attr(self.name()));\n         debug_assert!(!self.is_sugared_doc);\n \n         let ast::Attribute {"}, {"sha": "0eeb0cf6c3705dbf39281cd781f9fa366c937140", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "patch": "@@ -198,7 +198,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                       \"malformed lint attribute\");\n         };\n         for attr in attrs {\n-            let level = match attr.name().and_then(|name| Level::from_str(&name.as_str())) {\n+            let level = match Level::from_str(&attr.name().as_str()) {\n                 None => continue,\n                 Some(lvl) => lvl,\n             };"}, {"sha": "279908d2b675fae372bbb13780bf293d39fc7220", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "patch": "@@ -205,7 +205,7 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n         } else {\n             // Emit errors for non-staged-api crates.\n             for attr in attrs {\n-                let tag = unwrap_or!(attr.name(), continue);\n+                let tag = attr.name();\n                 if tag == \"unstable\" || tag == \"stable\" || tag == \"rustc_deprecated\" {\n                     attr::mark_used(attr);\n                     self.tcx.sess.span_err(attr.span(), \"stability attributes may not be used \\"}, {"sha": "f06062fa4ac83091dddc7945df8660ef7672d202", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "patch": "@@ -675,9 +675,8 @@ impl LintPass for DeprecatedAttr {\n \n impl EarlyLintPass for DeprecatedAttr {\n     fn check_attribute(&mut self, cx: &EarlyContext, attr: &ast::Attribute) {\n-        let name = unwrap_or!(attr.name(), return);\n         for &&(n, _, ref g) in &self.depr_attrs {\n-            if name == n {\n+            if attr.name() == n {\n                 if let &AttributeGate::Gated(Stability::Deprecated(link),\n                                              ref name,\n                                              ref reason,"}, {"sha": "4f6d23dce6dbb835c27a520e48737323c3ff8d9c", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "patch": "@@ -30,7 +30,6 @@\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n \n-#[macro_use]\n extern crate syntax;\n #[macro_use]\n extern crate rustc;"}, {"sha": "8df40b62ddd1253d66cfd874ecce18377502ba69", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "patch": "@@ -192,8 +192,6 @@ impl LintPass for UnusedAttributes {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n     fn check_attribute(&mut self, cx: &LateContext, attr: &ast::Attribute) {\n         debug!(\"checking attribute: {:?}\", attr);\n-        let name = unwrap_or!(attr.name(), return);\n-\n         // Note that check_name() marks the attribute as used if it matches.\n         for &(ref name, ty, _) in BUILTIN_ATTRIBUTES {\n             match ty {\n@@ -213,6 +211,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n             }\n         }\n \n+        let name = attr.name();\n         if !attr::is_used(attr) {\n             debug!(\"Emitting warning for: {:?}\", attr);\n             cx.span_lint(UNUSED_ATTRIBUTES, attr.span, \"unused attribute\");"}, {"sha": "4afc621ad8b3e2751c8d6cccd2daac8ef9c2e51b", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "patch": "@@ -209,7 +209,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn find_legacy_attr_invoc(&mut self, attrs: &mut Vec<ast::Attribute>, allow_derive: bool)\n                               -> Option<ast::Attribute> {\n         for i in 0..attrs.len() {\n-            let name = unwrap_or!(attrs[i].name(), continue);\n+            let name = attrs[i].name();\n \n             if self.session.plugin_attributes.borrow().iter()\n                     .any(|&(ref attr_nm, _)| name == &**attr_nm) {\n@@ -231,11 +231,11 @@ impl<'a> base::Resolver for Resolver<'a> {\n \n         // Check for legacy derives\n         for i in 0..attrs.len() {\n-            let name = unwrap_or!(attrs[i].name(), continue);\n+            let name = attrs[i].name();\n \n             if name == \"derive\" {\n                 let result = attrs[i].parse_list(&self.session.parse_sess, |parser| {\n-                    parser.parse_path(PathStyle::Mod)\n+                    parser.parse_path_allowing_meta(PathStyle::Mod)\n                 });\n \n                 let mut traits = match result {"}, {"sha": "d124a17b421d140bcedc53f65b99a53e830ef5d0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "patch": "@@ -3661,7 +3661,7 @@ impl Clean<Vec<Item>> for doctree::Import {\n         // #[doc(no_inline)] attribute is present.\n         // Don't inline doc(hidden) imports so they can be stripped at a later stage.\n         let denied = self.vis != hir::Public || self.attrs.iter().any(|a| {\n-            a.name().unwrap() == \"doc\" && match a.meta_item_list() {\n+            a.name() == \"doc\" && match a.meta_item_list() {\n                 Some(l) => attr::list_contains_name(&l, \"no_inline\") ||\n                            attr::list_contains_name(&l, \"hidden\"),\n                 None => false,"}, {"sha": "9248210c2691be15c97b5190b2b9611134e63335", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "patch": "@@ -3319,7 +3319,7 @@ fn render_attributes(w: &mut fmt::Formatter, it: &clean::Item) -> fmt::Result {\n     let mut attrs = String::new();\n \n     for attr in &it.attrs.other_attrs {\n-        let name = attr.name().unwrap();\n+        let name = attr.name();\n         if !ATTRIBUTE_WHITELIST.contains(&&*name.as_str()) {\n             continue;\n         }"}, {"sha": "f805ba80885256fd820846dbafbb09a33342ee45", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "patch": "@@ -217,11 +217,10 @@ impl Attribute {\n         matches\n     }\n \n-    pub fn name(&self) -> Option<Name> {\n-        match self.path.segments.len() {\n-            1 => Some(self.path.segments[0].identifier.name),\n-            _ => None,\n-        }\n+    /// Returns the first segment of the name of this attribute.\n+    /// E.g. `foo` for `#[foo]`, `rustfmt` for `#[rustfmt::skip]`.\n+    pub fn name(&self) -> Name {\n+        name_from_path(&self.path)\n     }\n \n     pub fn value_str(&self) -> Option<Symbol> {"}, {"sha": "6bf166dfe950a84dc3559068d200e132ee4d26e3", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "patch": "@@ -26,7 +26,8 @@ pub fn collect_derives(cx: &mut ExtCtxt, attrs: &mut Vec<ast::Attribute>) -> Vec\n             return true;\n         }\n \n-        match attr.parse_list(cx.parse_sess, |parser| parser.parse_path(PathStyle::Mod)) {\n+        match attr.parse_list(cx.parse_sess,\n+                              |parser| parser.parse_path_allowing_meta(PathStyle::Mod)) {\n             Ok(ref traits) if traits.is_empty() => {\n                 cx.span_warn(attr.span, \"empty trait list in `derive`\");\n                 false"}, {"sha": "9bae8e73c7fe4b8636d873df770d78932e31c1f2", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "patch": "@@ -1132,7 +1132,7 @@ macro_rules! gate_feature {\n impl<'a> Context<'a> {\n     fn check_attribute(&self, attr: &ast::Attribute, is_macro: bool) {\n         debug!(\"check_attribute(attr = {:?})\", attr);\n-        let name = unwrap_or!(attr.name(), return).as_str();\n+        let name = attr.name().as_str();\n         for &(n, ty, ref gateage) in BUILTIN_ATTRIBUTES {\n             if name == n {\n                 if let Gated(_, name, desc, ref has_feature) = *gateage {"}, {"sha": "d8fd387049588f81a00c0ff7477deb02e2f38c4f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "patch": "@@ -1955,19 +1955,19 @@ impl<'a> Parser<'a> {\n     /// Like `parse_path`, but also supports parsing `Word` meta items into paths for back-compat.\n     /// This is used when parsing derive macro paths in `#[derive]` attributes.\n     pub fn parse_path_allowing_meta(&mut self, style: PathStyle) -> PResult<'a, ast::Path> {\n-        let meta_ident = match self.token {\n+        let meta_name = match self.token {\n             token::Interpolated(ref nt) => match nt.0 {\n                 token::NtMeta(ref meta) => match meta.node {\n-                    ast::MetaItemKind::Word => Some(meta.ident),\n+                    ast::MetaItemKind::Word => Some(meta.name.clone()),\n                     _ => None,\n                 },\n                 _ => None,\n             },\n             _ => None,\n         };\n-        if let Some(ident) = meta_ident {\n+        if let Some(path) = meta_name {\n             self.bump();\n-            return Ok(ast::Path::from_ident(ident));\n+            return Ok(path);\n         }\n         self.parse_path(style)\n     }"}, {"sha": "96f7caf165c9f2d8ca24efcd38612fd646c159ff", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "patch": "@@ -776,6 +776,7 @@ pub trait PrintState<'a> {\n             ast::MetaItemKind::Word => self.print_attribute_path(&item.name)?,\n             ast::MetaItemKind::NameValue(ref value) => {\n                 self.print_attribute_path(&item.name)?;\n+                self.writer().space()?;\n                 self.word_space(\"=\")?;\n                 self.print_literal(value)?;\n             }"}, {"sha": "76da1746a0397a100b4901f9e55d4dcd0b997800", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "patch": "@@ -22,11 +22,9 @@ struct MarkAttrs<'a>(&'a [ast::Name]);\n \n impl<'a> Visitor<'a> for MarkAttrs<'a> {\n     fn visit_attribute(&mut self, attr: &Attribute) {\n-        if let Some(name) = attr.name() {\n-            if self.0.contains(&name) {\n-                mark_used(attr);\n-                mark_known(attr);\n-            }\n+        if self.0.contains(&attr.name()) {\n+            mark_used(attr);\n+            mark_known(attr);\n         }\n     }\n "}, {"sha": "80f65957c39a2e3935c41ef99b961c2c083e50bd", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=9b3aea602c37d53bbecf8bff8c77ccbfbefc23d0", "patch": "@@ -472,7 +472,7 @@ impl<'a> TraitDef<'a> {\n                 attrs.extend(item.attrs\n                     .iter()\n                     .filter(|a| {\n-                        a.name().is_some() && match &*a.name().unwrap().as_str() {\n+                        match &*a.name().as_str() {\n                             \"allow\" | \"warn\" | \"deny\" | \"forbid\" | \"stable\" | \"unstable\" => true,\n                             _ => false,\n                         }"}]}