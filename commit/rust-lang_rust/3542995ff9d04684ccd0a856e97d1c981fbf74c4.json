{"sha": "3542995ff9d04684ccd0a856e97d1c981fbf74c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NDI5OTVmZjlkMDQ2ODRjY2QwYTg1NmU5N2QxYzk4MWZiZjc0YzQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-21T08:50:30Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-07T10:04:07Z"}, "message": "syntax: Keep full `Stability` in `SyntaxExtension`", "tree": {"sha": "0a975869fad3f2f2511c2f0e0592b66ce03643ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a975869fad3f2f2511c2f0e0592b66ce03643ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3542995ff9d04684ccd0a856e97d1c981fbf74c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3542995ff9d04684ccd0a856e97d1c981fbf74c4", "html_url": "https://github.com/rust-lang/rust/commit/3542995ff9d04684ccd0a856e97d1c981fbf74c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3542995ff9d04684ccd0a856e97d1c981fbf74c4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73dec4a804c0dd63405f01f38664e6026a56df31", "url": "https://api.github.com/repos/rust-lang/rust/commits/73dec4a804c0dd63405f01f38664e6026a56df31", "html_url": "https://github.com/rust-lang/rust/commit/73dec4a804c0dd63405f01f38664e6026a56df31"}], "stats": {"total": 44, "additions": 18, "deletions": 26}, "files": [{"sha": "46704bc791c41b21bd6919892c183afc4060186c", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3542995ff9d04684ccd0a856e97d1c981fbf74c4/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3542995ff9d04684ccd0a856e97d1c981fbf74c4/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=3542995ff9d04684ccd0a856e97d1c981fbf74c4", "patch": "@@ -11,7 +11,7 @@ use rustc::hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc::hir::map::{self, DefCollector};\n use rustc::{ty, lint, span_bug};\n use syntax::ast::{self, Ident};\n-use syntax::attr;\n+use syntax::attr::{self, StabilityLevel};\n use syntax::errors::DiagnosticBuilder;\n use syntax::ext::base::{self, Determinacy};\n use syntax::ext::base::{MacroKind, SyntaxExtension};\n@@ -236,13 +236,15 @@ impl<'a> base::Resolver for Resolver<'a> {\n         };\n         invoc.expansion_data.mark.set_expn_info(ext.expn_info(span, &format));\n \n-        if let Some((feature, issue)) = ext.unstable_feature {\n-            let features = self.session.features_untracked();\n-            if !span.allows_unstable(feature) &&\n-               features.declared_lib_features.iter().all(|(feat, _)| *feat != feature) {\n-                let msg = format!(\"macro {}! is unstable\", path);\n-                emit_feature_err(&self.session.parse_sess, feature, span,\n-                                 GateIssue::Library(Some(issue)), &msg);\n+        if let Some(stability) = ext.stability {\n+            if let StabilityLevel::Unstable { issue, .. } = stability.level {\n+                let features = self.session.features_untracked();\n+                if !span.allows_unstable(stability.feature) &&\n+                   features.declared_lib_features.iter().all(|(feat, _)| *feat != stability.feature) {\n+                    let msg = format!(\"macro {}! is unstable\", path);\n+                    emit_feature_err(&self.session.parse_sess, stability.feature, span,\n+                                     GateIssue::Library(Some(issue)), &msg);\n+                }\n             }\n         }\n "}, {"sha": "9b411981ed34a34661799bbc21c90344d25c9a00", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3542995ff9d04684ccd0a856e97d1c981fbf74c4/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3542995ff9d04684ccd0a856e97d1c981fbf74c4/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=3542995ff9d04684ccd0a856e97d1c981fbf74c4", "patch": "@@ -171,7 +171,8 @@ pub fn contains_feature_attr(attrs: &[Attribute], feature_name: Symbol) -> bool\n     })\n }\n \n-/// Finds the first stability attribute. `None` if none exists.\n+/// Collects stability info from all stability attributes in `attrs`.\n+/// Returns `None` if no stability attributes are found.\n pub fn find_stability(sess: &ParseSess, attrs: &[Attribute],\n                       item_sp: Span) -> Option<Stability> {\n     find_stability_generic(sess, attrs.iter(), item_sp)"}, {"sha": "d5d1c7662b2b8c74a4807a26cf3e64f49ac339de", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3542995ff9d04684ccd0a856e97d1c981fbf74c4/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3542995ff9d04684ccd0a856e97d1c981fbf74c4/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3542995ff9d04684ccd0a856e97d1c981fbf74c4", "patch": "@@ -1,5 +1,5 @@\n use crate::ast::{self, Attribute, Name, PatKind};\n-use crate::attr::HasAttrs;\n+use crate::attr::{HasAttrs, Stability};\n use crate::source_map::{SourceMap, Spanned, respan};\n use crate::edition::Edition;\n use crate::ext::expand::{self, AstFragment, Invocation};\n@@ -616,8 +616,8 @@ pub struct SyntaxExtension {\n     pub allow_internal_unsafe: bool,\n     /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`) for this macro.\n     pub local_inner_macros: bool,\n-    /// The macro's feature name and tracking issue number if it is unstable.\n-    pub unstable_feature: Option<(Symbol, u32)>,\n+    /// The macro's stability and deprecation info.\n+    pub stability: Option<Stability>,\n     /// Names of helper attributes registered by this macro.\n     pub helper_attrs: Vec<Symbol>,\n     /// Edition of the crate in which this macro is defined.\n@@ -662,7 +662,7 @@ impl SyntaxExtension {\n             allow_internal_unstable: None,\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n-            unstable_feature: None,\n+            stability: None,\n             helper_attrs: Vec::new(),\n             edition,\n             kind,"}, {"sha": "5b5588a02f2682eed9a1760ced03bcdabc334765", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3542995ff9d04684ccd0a856e97d1c981fbf74c4/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3542995ff9d04684ccd0a856e97d1c981fbf74c4/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=3542995ff9d04684ccd0a856e97d1c981fbf74c4", "patch": "@@ -422,32 +422,21 @@ pub fn compile(\n                 })\n         });\n \n-    let allow_internal_unsafe = attr::contains_name(&def.attrs, sym::allow_internal_unsafe);\n-\n     let mut local_inner_macros = false;\n     if let Some(macro_export) = attr::find_by_name(&def.attrs, sym::macro_export) {\n         if let Some(l) = macro_export.meta_item_list() {\n             local_inner_macros = attr::list_contains_name(&l, sym::local_inner_macros);\n         }\n     }\n \n-    let unstable_feature =\n-        attr::find_stability(&sess, &def.attrs, def.span).and_then(|stability| {\n-            if let attr::StabilityLevel::Unstable { issue, .. } = stability.level {\n-                Some((stability.feature, issue))\n-            } else {\n-                None\n-            }\n-        });\n-\n     SyntaxExtension {\n         kind: SyntaxExtensionKind::LegacyBang(expander),\n         span: def.span,\n         default_transparency,\n         allow_internal_unstable,\n-        allow_internal_unsafe,\n+        allow_internal_unsafe: attr::contains_name(&def.attrs, sym::allow_internal_unsafe),\n         local_inner_macros,\n-        unstable_feature,\n+        stability: attr::find_stability(&sess, &def.attrs, def.span),\n         helper_attrs: Vec::new(),\n         edition,\n     }"}]}