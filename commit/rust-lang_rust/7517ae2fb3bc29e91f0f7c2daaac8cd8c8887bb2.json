{"sha": "7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2", "node_id": "C_kwDOAAsO6NoAKDc1MTdhZTJmYjNiYzI5ZTkxZjBmN2MyZGFhYWM4Y2Q4Yzg4ODdiYjI", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-10-24T20:47:39Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-10-24T20:47:39Z"}, "message": "Refactored some string handling to prevent ICEs and FNs", "tree": {"sha": "a3571aae8b76e7c282294bc5175d018a88e877a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3571aae8b76e7c282294bc5175d018a88e877a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2", "html_url": "https://github.com/rust-lang/rust/commit/7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d38fddd89908cae6767ad599388421f99f71840b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d38fddd89908cae6767ad599388421f99f71840b", "html_url": "https://github.com/rust-lang/rust/commit/d38fddd89908cae6767ad599388421f99f71840b"}], "stats": {"total": 139, "additions": 106, "deletions": 33}, "files": [{"sha": "404b67c8f29f2817a9e6f58c3fc55d3b588075e4", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 13, "deletions": 31, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2", "patch": "@@ -2,7 +2,7 @@\n \n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::source::is_present_in_source;\n-use clippy_utils::str_utils;\n+use clippy_utils::str_utils::{self, count_match_end, count_match_start};\n use rustc_hir::{EnumDef, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -117,26 +117,6 @@ impl_lint_pass!(EnumVariantNames => [\n     MODULE_INCEPTION\n ]);\n \n-/// Returns the number of chars that match from the start\n-#[must_use]\n-fn partial_match(pre: &str, name: &str) -> usize {\n-    let mut name_iter = name.chars();\n-    let _ = name_iter.next_back(); // make sure the name is never fully matched\n-    pre.chars().zip(name_iter).take_while(|&(l, r)| l == r).count()\n-}\n-\n-/// Returns the number of chars that match from the end\n-#[must_use]\n-fn partial_rmatch(post: &str, name: &str) -> usize {\n-    let mut name_iter = name.chars();\n-    let _ = name_iter.next(); // make sure the name is never fully matched\n-    post.chars()\n-        .rev()\n-        .zip(name_iter.rev())\n-        .take_while(|&(l, r)| l == r)\n-        .count()\n-}\n-\n fn check_variant(\n     cx: &LateContext<'_>,\n     threshold: u64,\n@@ -150,7 +130,7 @@ fn check_variant(\n     }\n     for var in def.variants {\n         let name = var.ident.name.as_str();\n-        if partial_match(item_name, &name) == item_name_chars\n+        if count_match_start(item_name, &name).char_count == item_name_chars\n             && name.chars().nth(item_name_chars).map_or(false, |c| !c.is_lowercase())\n             && name.chars().nth(item_name_chars + 1).map_or(false, |c| !c.is_numeric())\n         {\n@@ -161,7 +141,7 @@ fn check_variant(\n                 \"variant name starts with the enum's name\",\n             );\n         }\n-        if partial_rmatch(item_name, &name) == item_name_chars {\n+        if count_match_end(item_name, &name).char_count == item_name_chars {\n             span_lint(\n                 cx,\n                 ENUM_VARIANT_NAMES,\n@@ -176,7 +156,7 @@ fn check_variant(\n     for var in def.variants {\n         let name = var.ident.name.as_str();\n \n-        let pre_match = partial_match(pre, &name);\n+        let pre_match = count_match_start(pre, &name).byte_count;\n         pre = &pre[..pre_match];\n         let pre_camel = str_utils::camel_case_until(pre).byte_index;\n         pre = &pre[..pre_camel];\n@@ -193,8 +173,8 @@ fn check_variant(\n             }\n         }\n \n-        let post_match = partial_rmatch(post, &name);\n-        let post_end = post.len() - post_match;\n+        let post_match = count_match_end(post, &name);\n+        let post_end = post.len() - post_match.byte_count;\n         post = &post[post_end..];\n         let post_camel = str_utils::camel_case_start(post);\n         post = &post[post_camel.byte_index..];\n@@ -266,14 +246,16 @@ impl LateLintPass<'_> for EnumVariantNames {\n                             );\n                         }\n                     }\n-                    if item.vis.node.is_pub() {\n-                        let matching = partial_match(mod_camel, &item_camel);\n-                        let rmatching = partial_rmatch(mod_camel, &item_camel);\n+                    // The `module_name_repetitions` lint should only trigger if the item has the module in its\n+                    // name. Having the same name is accepted.\n+                    if item.vis.node.is_pub() && item_camel.len() > mod_camel.len() {\n+                        let matching = count_match_start(mod_camel, &item_camel);\n+                        let rmatching = count_match_end(mod_camel, &item_camel);\n                         let nchars = mod_camel.chars().count();\n \n                         let is_word_beginning = |c: char| c == '_' || c.is_uppercase() || c.is_numeric();\n \n-                        if matching == nchars {\n+                        if matching.char_count == nchars {\n                             match item_camel.chars().nth(nchars) {\n                                 Some(c) if is_word_beginning(c) => span_lint(\n                                     cx,\n@@ -284,7 +266,7 @@ impl LateLintPass<'_> for EnumVariantNames {\n                                 _ => (),\n                             }\n                         }\n-                        if rmatching == nchars {\n+                        if rmatching.char_count == nchars {\n                             span_lint(\n                                 cx,\n                                 MODULE_NAME_REPETITIONS,"}, {"sha": "cba96e05a2412244e6c36cd78d52b181c985cc8b", "filename": "clippy_utils/src/str_utils.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2/clippy_utils%2Fsrc%2Fstr_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2/clippy_utils%2Fsrc%2Fstr_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fstr_utils.rs?ref=7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2", "patch": "@@ -99,6 +99,75 @@ pub fn camel_case_start(s: &str) -> StrIndex {\n     last_index\n }\n \n+/// Dealing with sting comparison can be complicated, this struct ensures that both the\n+/// character and byte count are provided for correct indexing.\n+#[derive(Debug, Default, PartialEq, Eq)]\n+pub struct StrCount {\n+    pub char_count: usize,\n+    pub byte_count: usize,\n+}\n+\n+impl StrCount {\n+    pub fn new(char_count: usize, byte_count: usize) -> Self {\n+        Self { char_count, byte_count }\n+    }\n+}\n+\n+/// Returns the number of chars that match from the start\n+///\n+/// ```\n+/// assert_eq!(count_match_start(\"hello_mouse\", \"hello_penguin\"), StrCount::new(6, 6));\n+/// assert_eq!(count_match_start(\"hello_clippy\", \"bye_bugs\"), StrCount::new(0, 0));\n+/// assert_eq!(count_match_start(\"hello_world\", \"hello_world\"), StrCount::new(11, 11));\n+/// assert_eq!(count_match_start(\"T\\u{f6}ffT\\u{f6}ff\", \"T\\u{f6}ff\"), StrCount::new(4, 5));\n+/// ```\n+#[must_use]\n+pub fn count_match_start(str1: &str, str2: &str) -> StrCount {\n+    // (char_index, char1)\n+    let char_count = str1.chars().count();\n+    let iter1 = (0..=char_count).zip(str1.chars());\n+    // (byte_index, char2)\n+    let iter2 = str2.char_indices();\n+\n+    iter1\n+        .zip(iter2)\n+        .take_while(|((_, c1), (_, c2))| c1 == c2)\n+        .last()\n+        .map_or_else(StrCount::default, |((char_index, _), (byte_index, character))| {\n+            StrCount::new(char_index + 1, byte_index + character.len_utf8())\n+        })\n+}\n+\n+/// Returns the number of chars and bytes that match from the end\n+///\n+/// ```\n+/// assert_eq!(count_match_end(\"hello_cat\", \"bye_cat\"), StrCount::new(4, 4));\n+/// assert_eq!(count_match_end(\"if_item_thing\", \"enum_value\"), StrCount::new(0, 0));\n+/// assert_eq!(count_match_end(\"Clippy\", \"Clippy\"), StrCount::new(6, 6));\n+/// assert_eq!(count_match_end(\"MyT\\u{f6}ff\", \"YourT\\u{f6}ff\"), StrCount::new(4, 5));\n+/// ```\n+#[must_use]\n+pub fn count_match_end(str1: &str, str2: &str) -> StrCount {\n+    let char_count = str1.chars().count();\n+    if char_count == 0 {\n+        return StrCount::default();\n+    }\n+\n+    // (char_index, char1)\n+    let iter1 = (0..char_count).rev().zip(str1.chars().rev());\n+    // (byte_index, char2)\n+    let byte_count = str2.len();\n+    let iter2 = str2.char_indices().rev();\n+\n+    iter1\n+        .zip(iter2)\n+        .take_while(|((_, c1), (_, c2))| c1 == c2)\n+        .last()\n+        .map_or_else(StrCount::default, |((char_index, _), (byte_index, _))| {\n+            StrCount::new(char_count - char_index, byte_count - byte_index)\n+        })\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::*;"}, {"sha": "8f97a063a9a9f1618a41ef2fdafc9e51b1030575", "filename": "tests/ui/crashes/ice-7869.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2/tests%2Fui%2Fcrashes%2Fice-7869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2/tests%2Fui%2Fcrashes%2Fice-7869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-7869.rs?ref=7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2", "patch": "@@ -0,0 +1,7 @@\n+enum Tila {\n+    Ty\u00f6Alkoi,\n+    Ty\u00f6Keskeytyi,\n+    Ty\u00f6Valmis,\n+}\n+\n+fn main() {}"}, {"sha": "4fa9fb27e7659ebb0acbef1778b01d8a8696afd8", "filename": "tests/ui/crashes/ice-7869.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2/tests%2Fui%2Fcrashes%2Fice-7869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2/tests%2Fui%2Fcrashes%2Fice-7869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-7869.stderr?ref=7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2", "patch": "@@ -0,0 +1,15 @@\n+error: all variants have the same prefix: `Ty\u00f6`\n+  --> $DIR/ice-7869.rs:1:1\n+   |\n+LL | / enum Tila {\n+LL | |     Ty\u00f6Alkoi,\n+LL | |     Ty\u00f6Keskeytyi,\n+LL | |     Ty\u00f6Valmis,\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::enum-variant-names` implied by `-D warnings`\n+   = help: remove the prefixes and use full paths to the variants instead of glob imports\n+\n+error: aborting due to previous error\n+"}, {"sha": "add8a91e26b85a2b9745a73053ff73d418a54cdd", "filename": "tests/ui/enum_variants.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2/tests%2Fui%2Fenum_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2/tests%2Fui%2Fenum_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.stderr?ref=7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2", "patch": "@@ -60,7 +60,7 @@ LL | | }\n    |\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n-error: all variants have the same prefix: `With`\n+error: all variants have the same prefix: `WithOut`\n   --> $DIR/enum_variants.rs:81:1\n    |\n LL | / enum Seallll {"}, {"sha": "7e3674ab8c9f2c633094cce82c11d3351ebb8cb8", "filename": "tests/ui/match_ref_pats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2/tests%2Fui%2Fmatch_ref_pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2/tests%2Fui%2Fmatch_ref_pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_ref_pats.rs?ref=7517ae2fb3bc29e91f0f7c2daaac8cd8c8887bb2", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::match_ref_pats)]\n-#![allow(clippy::equatable_if_let)]\n+#![allow(clippy::equatable_if_let, clippy::enum_variant_names)]\n \n fn ref_pats() {\n     {"}]}