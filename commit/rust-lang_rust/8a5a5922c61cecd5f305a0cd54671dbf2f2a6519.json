{"sha": "8a5a5922c61cecd5f305a0cd54671dbf2f2a6519", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNWE1OTIyYzYxY2VjZDVmMzA1YTBjZDU0NjcxZGJmMmYyYTY1MTk=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-16T13:31:59Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-16T21:36:04Z"}, "message": "std::vec: convert .copy_memory to use copy_nonoverlapping_memory.\n\nIt is required that &mut[]s are disjoint from all other &(mut)[]s, so\nthis assumption is ok.", "tree": {"sha": "80afb3a5745383031154bac2a5737ed2cad477fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80afb3a5745383031154bac2a5737ed2cad477fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a5a5922c61cecd5f305a0cd54671dbf2f2a6519", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5a5922c61cecd5f305a0cd54671dbf2f2a6519", "html_url": "https://github.com/rust-lang/rust/commit/8a5a5922c61cecd5f305a0cd54671dbf2f2a6519", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a5a5922c61cecd5f305a0cd54671dbf2f2a6519/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c147cc40847da033674663cedabaf515eda8b20", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c147cc40847da033674663cedabaf515eda8b20", "html_url": "https://github.com/rust-lang/rust/commit/5c147cc40847da033674663cedabaf515eda8b20"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "2a0f575cddec9e5552c7376e06fda20c627eff1a", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a5a5922c61cecd5f305a0cd54671dbf2f2a6519/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5a5922c61cecd5f305a0cd54671dbf2f2a6519/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=8a5a5922c61cecd5f305a0cd54671dbf2f2a6519", "patch": "@@ -2060,7 +2060,7 @@ pub trait MutableVector<'a, T> {\n      */\n     unsafe fn init_elem(self, i: uint, val: T);\n \n-    /// Copies data from `src` to `self`\n+    /// Copies data from `src` to `self`.\n     ///\n     /// `self` and `src` must not overlap. Fails if `self` is\n     /// shorter than `src`.\n@@ -2208,7 +2208,7 @@ impl<'a,T> MutableVector<'a, T> for &'a mut [T] {\n         self.as_mut_buf(|p_dst, len_dst| {\n             src.as_imm_buf(|p_src, len_src| {\n                 assert!(len_dst >= len_src)\n-                ptr::copy_memory(p_dst, p_src, len_src)\n+                ptr::copy_nonoverlapping_memory(p_dst, p_src, len_src)\n             })\n         })\n     }\n@@ -2350,10 +2350,10 @@ pub mod bytes {\n         }\n     }\n \n-    /// Copies data from one vector to another.\n+    /// Copies data from `src` to `dst`\n     ///\n-    /// Copies `src` to `dst`. Fails if the length of `dst` is less\n-    /// than the length of `src`.\n+    /// `src` and `dst` must not overlap. Fails if the length of `dst`\n+    /// is less than the length of `src`.\n     #[inline]\n     pub fn copy_memory(dst: &mut [u8], src: &[u8]) {\n         // Bound checks are done at .copy_memory."}]}