{"sha": "0c1ba07a777546595212ed3a8f5a4fda13588986", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMWJhMDdhNzc3NTQ2NTk1MjEyZWQzYThmNWE0ZmRhMTM1ODg5ODY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-23T22:09:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-23T22:09:09Z"}, "message": "Rollup merge of #57020 - estebank:return-span, r=zackmdavis\n\nPoint to cause of `fn` expected return type\n\nFix #48136.", "tree": {"sha": "5431c90249149d1cefb95e655e8a189703749d66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5431c90249149d1cefb95e655e8a189703749d66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c1ba07a777546595212ed3a8f5a4fda13588986", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcIAeFCRBK7hj4Ov3rIwAAdHIIAHpxxdSKmdqdQ1uqvKRCSZj8\ntKOnNS74Q6EdZIG+2qUCnk7Epq7nsH6sKGS2YCpankFZm92kKxnL4zghGir5Gm6E\n9+dOKoteassc/6oRdMcIid4g4h7ALnCx3INtrKi/P60xH18DHuyoynqW7RDZ1tBJ\nvj53LBGEKrKkzK5BjE+wlv2qsbsMllFzmC0VCbuOJAXxh2wCik2nx5Xbi1tloEu/\n+PLVSRVWTqXkNJ+dmvSRrVnPk3ekE9XpxVje3vc8wzzFNCKgZPMgQcN3hkzV39Yk\ndC1uAL7u3NoIBtScsvytPEJh8mu8linPslyiDehNyQYEWmr9jgRB68MTW0PRgnY=\n=CAFk\n-----END PGP SIGNATURE-----\n", "payload": "tree 5431c90249149d1cefb95e655e8a189703749d66\nparent eb24b33b666451dbf0193df1a997e0fa1da970fd\nparent 2820dc868a35c02adb9225492d575c7d5e72338c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1545602949 +0100\ncommitter GitHub <noreply@github.com> 1545602949 +0100\n\nRollup merge of #57020 - estebank:return-span, r=zackmdavis\n\nPoint to cause of `fn` expected return type\n\nFix #48136.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c1ba07a777546595212ed3a8f5a4fda13588986", "html_url": "https://github.com/rust-lang/rust/commit/0c1ba07a777546595212ed3a8f5a4fda13588986", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c1ba07a777546595212ed3a8f5a4fda13588986/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb24b33b666451dbf0193df1a997e0fa1da970fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb24b33b666451dbf0193df1a997e0fa1da970fd", "html_url": "https://github.com/rust-lang/rust/commit/eb24b33b666451dbf0193df1a997e0fa1da970fd"}, {"sha": "2820dc868a35c02adb9225492d575c7d5e72338c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2820dc868a35c02adb9225492d575c7d5e72338c", "html_url": "https://github.com/rust-lang/rust/commit/2820dc868a35c02adb9225492d575c7d5e72338c"}], "stats": {"total": 68, "additions": 62, "deletions": 6}, "files": [{"sha": "0fd5963c99d4a800081360479b6de555dae911bd", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0c1ba07a777546595212ed3a8f5a4fda13588986/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1ba07a777546595212ed3a8f5a4fda13588986/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=0c1ba07a777546595212ed3a8f5a4fda13588986", "patch": "@@ -1979,6 +1979,15 @@ pub enum FunctionRetTy {\n     Return(P<Ty>),\n }\n \n+impl fmt::Display for FunctionRetTy {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Return(ref ty) => print::to_string(print::NO_ANN, |s| s.print_type(ty)).fmt(f),\n+            DefaultReturn(_) => \"()\".fmt(f),\n+        }\n+    }\n+}\n+\n impl FunctionRetTy {\n     pub fn span(&self) -> Span {\n         match *self {"}, {"sha": "8b2be84942388bb55c48bb554531d66f3adcefb6", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c1ba07a777546595212ed3a8f5a4fda13588986/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1ba07a777546595212ed3a8f5a4fda13588986/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=0c1ba07a777546595212ed3a8f5a4fda13588986", "patch": "@@ -1169,7 +1169,6 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n             // `expression_ty` will be unit).\n             //\n             // Another example is `break` with no argument expression.\n-            assert!(expression_ty.is_unit());\n             assert!(expression_ty.is_unit(), \"if let hack without unit type\");\n             fcx.at(cause, fcx.param_env)\n                .eq_exp(label_expression_as_expected, expression_ty, self.merged_ty())\n@@ -1210,13 +1209,14 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                     (self.final_ty.unwrap_or(self.expected_ty), expression_ty)\n                 };\n \n+                let reason_label = \"expected because of this statement\";\n                 let mut db;\n                 match cause.code {\n                     ObligationCauseCode::ReturnNoExpression => {\n                         db = struct_span_err!(\n                             fcx.tcx.sess, cause.span, E0069,\n                             \"`return;` in a function whose return type is not `()`\");\n-                        db.span_label(cause.span, \"return type is not ()\");\n+                        db.span_label(cause.span, \"return type is not `()`\");\n                     }\n                     ObligationCauseCode::BlockTailExpression(blk_id) => {\n                         db = fcx.report_mismatched_types(cause, expected, found, err);\n@@ -1234,9 +1234,19 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                             cause.span,\n                             blk_id,\n                         );\n+                        if let Some(sp) = fcx.ret_coercion_span.borrow().as_ref() {\n+                            if !sp.overlaps(cause.span) {\n+                                db.span_label(*sp, reason_label);\n+                            }\n+                        }\n                     }\n                     _ => {\n                         db = fcx.report_mismatched_types(cause, expected, found, err);\n+                        if let Some(sp) = fcx.ret_coercion_span.borrow().as_ref() {\n+                            if !sp.overlaps(cause.span) {\n+                                db.span_label(*sp, reason_label);\n+                            }\n+                        }\n                     }\n                 }\n "}, {"sha": "0665452e30a575ac17cd76b1e03134801e0da669", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0c1ba07a777546595212ed3a8f5a4fda13588986/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1ba07a777546595212ed3a8f5a4fda13588986/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0c1ba07a777546595212ed3a8f5a4fda13588986", "patch": "@@ -538,6 +538,7 @@ pub struct FnCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     err_count_on_creation: usize,\n \n     ret_coercion: Option<RefCell<DynamicCoerceMany<'gcx, 'tcx>>>,\n+    ret_coercion_span: RefCell<Option<Span>>,\n \n     yield_ty: Option<Ty<'tcx>>,\n \n@@ -1987,6 +1988,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             param_env,\n             err_count_on_creation: inh.tcx.sess.err_count(),\n             ret_coercion: None,\n+            ret_coercion_span: RefCell::new(None),\n             yield_ty: None,\n             ps: RefCell::new(UnsafetyState::function(hir::Unsafety::Normal,\n                                                      ast::CRATE_NODE_ID)),\n@@ -4172,11 +4174,30 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     struct_span_err!(self.tcx.sess, expr.span, E0572,\n                                      \"return statement outside of function body\").emit();\n                 } else if let Some(ref e) = *expr_opt {\n+                    *self.ret_coercion_span.borrow_mut() = Some(e.span);\n                     self.check_return_expr(e);\n                 } else {\n                     let mut coercion = self.ret_coercion.as_ref().unwrap().borrow_mut();\n+                    *self.ret_coercion_span.borrow_mut() = Some(expr.span);\n                     let cause = self.cause(expr.span, ObligationCauseCode::ReturnNoExpression);\n-                    coercion.coerce_forced_unit(self, &cause, &mut |_| (), true);\n+                    if let Some((fn_decl, _)) = self.get_fn_decl(expr.id) {\n+                        coercion.coerce_forced_unit(\n+                            self,\n+                            &cause,\n+                            &mut |db| {\n+                                db.span_label(\n+                                    fn_decl.output.span(),\n+                                    format!(\n+                                        \"expected `{}` because of this return type\",\n+                                        fn_decl.output,\n+                                    ),\n+                                );\n+                            },\n+                            true,\n+                        );\n+                    } else {\n+                        coercion.coerce_forced_unit(self, &cause, &mut |_| (), true);\n+                    }\n                 }\n                 tcx.types.never\n             }"}, {"sha": "ae2259d5258989121787ad1010109a09138ae1f3", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0c1ba07a777546595212ed3a8f5a4fda13588986/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1ba07a777546595212ed3a8f5a4fda13588986/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=0c1ba07a777546595212ed3a8f5a4fda13588986", "patch": "@@ -334,6 +334,13 @@ impl Span {\n         span.lo <= other.lo && other.hi <= span.hi\n     }\n \n+    /// Return `true` if `self` touches `other`.\n+    pub fn overlaps(self, other: Span) -> bool {\n+        let span = self.data();\n+        let other = other.data();\n+        span.lo < other.hi && other.lo < span.hi\n+    }\n+\n     /// Return true if the spans are equal with regards to the source text.\n     ///\n     /// Use this instead of `==` when either span could be generated code,"}, {"sha": "12b778f42e22ca7cba305e89defe55f4bdeeaee8", "filename": "src/test/ui/error-codes/E0069.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1ba07a777546595212ed3a8f5a4fda13588986/src%2Ftest%2Fui%2Ferror-codes%2FE0069.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1ba07a777546595212ed3a8f5a4fda13588986/src%2Ftest%2Fui%2Ferror-codes%2FE0069.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0069.stderr?ref=0c1ba07a777546595212ed3a8f5a4fda13588986", "patch": "@@ -1,8 +1,10 @@\n error[E0069]: `return;` in a function whose return type is not `()`\n   --> $DIR/E0069.rs:12:5\n    |\n+LL | fn foo() -> u8 {\n+   |             -- expected `u8` because of this return type\n LL |     return;\n-   |     ^^^^^^ return type is not ()\n+   |     ^^^^^^ return type is not `()`\n \n error: aborting due to previous error\n "}, {"sha": "f1d2071bbdb9ea2ead06a23d90683a9ff48739bf", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c1ba07a777546595212ed3a8f5a4fda13588986/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1ba07a777546595212ed3a8f5a4fda13588986/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=0c1ba07a777546595212ed3a8f5a4fda13588986", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/equality.rs:25:5\n    |\n+LL |         return 1_i32;\n+   |                ----- expected because of this statement\n+LL |     }\n LL |     0_u32\n    |     ^^^^^ expected i32, found u32\n    |"}, {"sha": "e0fdc8c67edf7fedcb13ffcb486e69e5335bfd7f", "filename": "src/test/ui/ret-non-nil.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1ba07a777546595212ed3a8f5a4fda13588986/src%2Ftest%2Fui%2Fret-non-nil.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1ba07a777546595212ed3a8f5a4fda13588986/src%2Ftest%2Fui%2Fret-non-nil.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fret-non-nil.stderr?ref=0c1ba07a777546595212ed3a8f5a4fda13588986", "patch": "@@ -2,7 +2,9 @@ error[E0069]: `return;` in a function whose return type is not `()`\n   --> $DIR/ret-non-nil.rs:15:19\n    |\n LL | fn g() -> isize { return; }\n-   |                   ^^^^^^ return type is not ()\n+   |           -----   ^^^^^^ return type is not `()`\n+   |           |\n+   |           expected `isize` because of this return type\n \n error: aborting due to previous error\n "}, {"sha": "5a9f0877cc6b6957dfcc4be8c7ba39427e92d093", "filename": "src/test/ui/return/return-unit-from-diverging.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1ba07a777546595212ed3a8f5a4fda13588986/src%2Ftest%2Fui%2Freturn%2Freturn-unit-from-diverging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1ba07a777546595212ed3a8f5a4fda13588986/src%2Ftest%2Fui%2Freturn%2Freturn-unit-from-diverging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-unit-from-diverging.stderr?ref=0c1ba07a777546595212ed3a8f5a4fda13588986", "patch": "@@ -1,8 +1,10 @@\n error[E0069]: `return;` in a function whose return type is not `()`\n   --> $DIR/return-unit-from-diverging.rs:15:5\n    |\n+LL | fn fail() -> ! {\n+   |              - expected `!` because of this return type\n LL |     return; //~ ERROR in a function whose return type is not\n-   |     ^^^^^^ return type is not ()\n+   |     ^^^^^^ return type is not `()`\n \n error: aborting due to previous error\n "}]}