{"sha": "caa770aee128c1e79479960319bd2b8ccfd0be63", "node_id": "C_kwDOAAsO6NoAKGNhYTc3MGFlZTEyOGMxZTc5NDc5OTYwMzE5YmQyYjhjY2ZkMGJlNjM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-15T19:52:43Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-17T16:04:10Z"}, "message": "Fix rustdoc duplicated blanket impls issue", "tree": {"sha": "6ef12f313200efed1fd0af25e312dd77cbf1f0d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ef12f313200efed1fd0af25e312dd77cbf1f0d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caa770aee128c1e79479960319bd2b8ccfd0be63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caa770aee128c1e79479960319bd2b8ccfd0be63", "html_url": "https://github.com/rust-lang/rust/commit/caa770aee128c1e79479960319bd2b8ccfd0be63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caa770aee128c1e79479960319bd2b8ccfd0be63/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ec2c136b35bd4660cba778346f8df7daf2ab173", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec2c136b35bd4660cba778346f8df7daf2ab173", "html_url": "https://github.com/rust-lang/rust/commit/1ec2c136b35bd4660cba778346f8df7daf2ab173"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "06e7c9e763df970e98416569f58448e5aaa60d14", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/caa770aee128c1e79479960319bd2b8ccfd0be63/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa770aee128c1e79479960319bd2b8ccfd0be63/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=caa770aee128c1e79479960319bd2b8ccfd0be63", "patch": "@@ -127,6 +127,8 @@ crate struct Cache {\n /// This struct is used to wrap the `cache` and `tcx` in order to run `DocFolder`.\n struct CacheBuilder<'a, 'tcx> {\n     cache: &'a mut Cache,\n+    /// This field is used to prevent duplicated impl blocks.\n+    impl_ids: FxHashMap<DefId, FxHashSet<DefId>>,\n     tcx: TyCtxt<'tcx>,\n }\n \n@@ -170,12 +172,19 @@ impl Cache {\n                 .insert(def_id, (vec![crate_name, prim.as_sym()], ItemType::Primitive));\n         }\n \n-        krate = CacheBuilder { tcx, cache: &mut cx.cache }.fold_crate(krate);\n+        let (krate, mut impl_ids) = {\n+            let mut cache_builder =\n+                CacheBuilder { tcx, cache: &mut cx.cache, impl_ids: FxHashMap::default() };\n+            krate = cache_builder.fold_crate(krate);\n+            (krate, cache_builder.impl_ids)\n+        };\n \n         for (trait_did, dids, impl_) in cx.cache.orphan_trait_impls.drain(..) {\n             if cx.cache.traits.contains_key(&trait_did) {\n                 for did in dids {\n-                    cx.cache.impls.entry(did).or_default().push(impl_.clone());\n+                    if impl_ids.entry(did).or_default().insert(impl_.def_id()) {\n+                        cx.cache.impls.entry(did).or_default().push(impl_.clone());\n+                    }\n                 }\n             }\n         }\n@@ -467,7 +476,13 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n             let impl_item = Impl { impl_item: item };\n             if impl_item.trait_did().map_or(true, |d| self.cache.traits.contains_key(&d)) {\n                 for did in dids {\n-                    self.cache.impls.entry(did).or_insert_with(Vec::new).push(impl_item.clone());\n+                    if self.impl_ids.entry(did).or_default().insert(impl_item.def_id()) {\n+                        self.cache\n+                            .impls\n+                            .entry(did)\n+                            .or_insert_with(Vec::new)\n+                            .push(impl_item.clone());\n+                    }\n                 }\n             } else {\n                 let trait_did = impl_item.trait_did().expect(\"no trait did\");"}, {"sha": "3e36318eb71b0cb65e225a65a2bb183a2092cd1c", "filename": "src/librustdoc/formats/mod.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/caa770aee128c1e79479960319bd2b8ccfd0be63/src%2Flibrustdoc%2Fformats%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa770aee128c1e79479960319bd2b8ccfd0be63/src%2Flibrustdoc%2Fformats%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fmod.rs?ref=caa770aee128c1e79479960319bd2b8ccfd0be63", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::def_id::DefId;\n \n crate use renderer::{run_format, FormatRenderer};\n \n-use crate::clean;\n+use crate::clean::{self, ItemId};\n \n /// Specifies whether rendering directly implemented trait items or ones from a certain Deref\n /// impl.\n@@ -40,4 +40,24 @@ impl Impl {\n     crate fn trait_did(&self) -> Option<DefId> {\n         self.inner_impl().trait_.as_ref().map(|t| t.def_id())\n     }\n+\n+    /// This function is used to extract a `DefId` to be used as a key for the `Cache::impls` field.\n+    ///\n+    /// It allows to prevent having duplicated implementations showing up (the biggest issue was\n+    /// with blanket impls).\n+    ///\n+    /// It panics if `self` is a `ItemId::Primitive`.\n+    crate fn def_id(&self) -> DefId {\n+        match self.impl_item.item_id {\n+            ItemId::Blanket { impl_id, .. } => impl_id,\n+            ItemId::Auto { trait_, .. } => trait_,\n+            ItemId::DefId(def_id) => def_id,\n+            ItemId::Primitive(_, _) => {\n+                panic!(\n+                    \"Unexpected ItemId::Primitive in expect_def_id: {:?}\",\n+                    self.impl_item.item_id\n+                )\n+            }\n+        }\n+    }\n }"}]}