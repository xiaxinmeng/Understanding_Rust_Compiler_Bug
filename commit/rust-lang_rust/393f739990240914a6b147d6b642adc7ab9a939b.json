{"sha": "393f739990240914a6b147d6b642adc7ab9a939b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5M2Y3Mzk5OTAyNDA5MTRhNmIxNDdkNmI2NDJhZGM3YWI5YTkzOWI=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-21T17:47:27Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-21T17:47:45Z"}, "message": "Rename upcall_malloc_dyn to just upcall_malloc.", "tree": {"sha": "074c2235a09418f23c875f6393f6b41b9497dd17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/074c2235a09418f23c875f6393f6b41b9497dd17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/393f739990240914a6b147d6b642adc7ab9a939b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/393f739990240914a6b147d6b642adc7ab9a939b", "html_url": "https://github.com/rust-lang/rust/commit/393f739990240914a6b147d6b642adc7ab9a939b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/393f739990240914a6b147d6b642adc7ab9a939b/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a2b60dfce3ababb59eac53b7da083d7bd087e1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2b60dfce3ababb59eac53b7da083d7bd087e1d", "html_url": "https://github.com/rust-lang/rust/commit/9a2b60dfce3ababb59eac53b7da083d7bd087e1d"}], "stats": {"total": 136, "additions": 48, "deletions": 88}, "files": [{"sha": "986bc7132136eb0ae61fcfb1f8c3cdced9509dcd", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 39, "deletions": 79, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/393f739990240914a6b147d6b642adc7ab9a939b/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/393f739990240914a6b147d6b642adc7ab9a939b/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=393f739990240914a6b147d6b642adc7ab9a939b", "patch": "@@ -143,66 +143,46 @@ upcall_trace(char const *msg,\n  * Allocate an object in the exchange heap\n  */\n \n-extern \"C\" CDECL uintptr_t\n-exchange_malloc(rust_task *task, type_desc *td, uintptr_t size) {\n-\n-    LOG(task, mem, \"upcall exchange malloc(0x%\" PRIxPTR \")\", td);\n-\n-    size_t total_size = get_box_size(size, td->align);\n-    void *p = task->kernel->calloc(total_size, \"exchange malloc\");\n-\n-    rust_opaque_box *header = static_cast<rust_opaque_box*>(p);\n-    header->ref_count = -1; // This is not ref counted\n-    header->td = td;\n-    header->prev = 0;\n-    header->next = 0;\n-\n-    return (uintptr_t)header;\n-}\n-\n-// FIXME: remove after snapshot (6/13/12)\n struct s_exchange_malloc_args {\n     rust_task *task;\n     uintptr_t retval;\n     type_desc *td;\n+    uintptr_t size;\n };\n \n extern \"C\" CDECL void\n upcall_s_exchange_malloc(s_exchange_malloc_args *args) {\n     rust_task *task = args->task;\n     LOG_UPCALL_ENTRY(task);\n+    LOG(task, mem, \"upcall exchange malloc(0x%\" PRIxPTR \")\", args->td);\n+\n+    size_t total_size = get_box_size(args->size, args->td->align);\n+    // FIXME--does this have to be calloc? (Issue #2682)\n+    void *p = task->kernel->calloc(total_size, \"exchange malloc\");\n+\n+    rust_opaque_box *header = static_cast<rust_opaque_box*>(p);\n+    header->ref_count = -1; // This is not ref counted\n+    header->td = args->td;\n+    header->prev = 0;\n+    header->next = 0;\n \n-    args->retval = exchange_malloc(task, args->td, args->td->size);\n+    args->retval = (uintptr_t)header;\n }\n \n extern \"C\" CDECL uintptr_t\n-upcall_exchange_malloc(type_desc *td) {\n+upcall_exchange_malloc(type_desc *td, uintptr_t size) {\n     rust_task *task = rust_get_current_task();\n-    s_exchange_malloc_args args = {task, 0, td};\n+    s_exchange_malloc_args args = {task, 0, td, size};\n     UPCALL_SWITCH_STACK(task, &args, upcall_s_exchange_malloc);\n     return args.retval;\n }\n \n-struct s_exchange_malloc_dyn_args {\n-    rust_task *task;\n-    uintptr_t retval;\n-    type_desc *td;\n-    uintptr_t size;\n-};\n-\n-extern \"C\" CDECL void\n-upcall_s_exchange_malloc_dyn(s_exchange_malloc_dyn_args *args) {\n-    rust_task *task = args->task;\n-    LOG_UPCALL_ENTRY(task);\n-\n-    args->retval = exchange_malloc(task, args->td, args->size);\n-}\n-\n+// FIXME: remove after snapshot (6/21/12)\n extern \"C\" CDECL uintptr_t\n upcall_exchange_malloc_dyn(type_desc *td, uintptr_t size) {\n     rust_task *task = rust_get_current_task();\n-    s_exchange_malloc_dyn_args args = {task, 0, td, size};\n-    UPCALL_SWITCH_STACK(task, &args, upcall_s_exchange_malloc_dyn);\n+    s_exchange_malloc_args args = {task, 0, td, size};\n+    UPCALL_SWITCH_STACK(task, &args, upcall_s_exchange_malloc);\n     return args.retval;\n }\n \n@@ -229,69 +209,49 @@ upcall_exchange_free(void *ptr) {\n  * Allocate an object in the task-local heap.\n  */\n \n-extern \"C\" CDECL uintptr_t\n-shared_malloc(rust_task *task, type_desc *td, uintptr_t size) {\n-    LOG(task, mem, \"upcall malloc(0x%\" PRIxPTR \")\", td);\n-\n-    cc::maybe_cc(task);\n-\n-    // FIXME--does this have to be calloc?\n-    rust_opaque_box *box = task->boxed.calloc(td, size);\n-    void *body = box_body(box);\n-\n-    debug::maybe_track_origin(task, box);\n-\n-    LOG(task, mem,\n-        \"upcall malloc(0x%\" PRIxPTR \") = box 0x%\" PRIxPTR\n-        \" with body 0x%\" PRIxPTR,\n-        td, (uintptr_t)box, (uintptr_t)body);\n-\n-    return (uintptr_t)box;\n-}\n-\n-// FIXME: remove after snapshot (6/13/12)\n struct s_malloc_args {\n     rust_task *task;\n     uintptr_t retval;\n     type_desc *td;\n+    uintptr_t size;\n };\n \n extern \"C\" CDECL void\n upcall_s_malloc(s_malloc_args *args) {\n     rust_task *task = args->task;\n     LOG_UPCALL_ENTRY(task);\n+    LOG(task, mem, \"upcall malloc(0x%\" PRIxPTR \")\", args->td);\n+\n+    cc::maybe_cc(task);\n+\n+    // FIXME--does this have to be calloc? (Issue #2682)\n+    rust_opaque_box *box = task->boxed.calloc(args->td, args->size);\n+    void *body = box_body(box);\n+\n+    debug::maybe_track_origin(task, box);\n \n-    args->retval = shared_malloc(task, args->td, args->td->size);\n+    LOG(task, mem,\n+        \"upcall malloc(0x%\" PRIxPTR \") = box 0x%\" PRIxPTR\n+        \" with body 0x%\" PRIxPTR,\n+        args->td, (uintptr_t)box, (uintptr_t)body);\n+\n+    args->retval = (uintptr_t)box;\n }\n \n extern \"C\" CDECL uintptr_t\n-upcall_malloc(type_desc *td) {\n+upcall_malloc(type_desc *td, uintptr_t size) {\n     rust_task *task = rust_get_current_task();\n-    s_malloc_args args = {task, 0, td};\n+    s_malloc_args args = {task, 0, td, size};\n     UPCALL_SWITCH_STACK(task, &args, upcall_s_malloc);\n     return args.retval;\n }\n \n-struct s_malloc_dyn_args {\n-    rust_task *task;\n-    uintptr_t retval;\n-    type_desc *td;\n-    uintptr_t size;\n-};\n-\n-extern \"C\" CDECL void\n-upcall_s_malloc_dyn(s_malloc_dyn_args *args) {\n-    rust_task *task = args->task;\n-    LOG_UPCALL_ENTRY(task);\n-\n-    args->retval = shared_malloc(task, args->td, args->size);\n-}\n-\n+// FIXME: remove after snapshot (6/21/12)\n extern \"C\" CDECL uintptr_t\n upcall_malloc_dyn(type_desc *td, uintptr_t size) {\n     rust_task *task = rust_get_current_task();\n-    s_malloc_dyn_args args = {task, 0, td, size};\n-    UPCALL_SWITCH_STACK(task, &args, upcall_s_malloc_dyn);\n+    s_malloc_args args = {task, 0, td, size};\n+    UPCALL_SWITCH_STACK(task, &args, upcall_s_malloc);\n     return args.retval;\n }\n "}, {"sha": "2cae381431d012873e773896194446650e026c1a", "filename": "src/rustc/back/upcall.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/393f739990240914a6b147d6b642adc7ab9a939b/src%2Frustc%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393f739990240914a6b147d6b642adc7ab9a939b/src%2Frustc%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fupcall.rs?ref=393f739990240914a6b147d6b642adc7ab9a939b", "patch": "@@ -10,9 +10,9 @@ import lib::llvm::{type_names, ModuleRef, ValueRef, TypeRef};\n type upcalls =\n     {_fail: ValueRef,\n      trace: ValueRef,\n-     malloc_dyn: ValueRef,\n+     malloc: ValueRef,\n      free: ValueRef,\n-     exchange_malloc_dyn: ValueRef,\n+     exchange_malloc: ValueRef,\n      exchange_free: ValueRef,\n      validate_box: ValueRef,\n      mark: ValueRef,\n@@ -55,14 +55,14 @@ fn declare_upcalls(targ_cfg: @session::config,\n           trace: dv(\"trace\", [T_ptr(T_i8()),\n                               T_ptr(T_i8()),\n                               int_t]),\n-          malloc_dyn:\n-              nothrow(d(\"malloc_dyn\",\n+          malloc:\n+              nothrow(d(\"malloc\",\n                         [T_ptr(tydesc_type), int_t],\n                         T_ptr(T_i8()))),\n           free:\n               nothrow(dv(\"free\", [T_ptr(T_i8())])),\n-          exchange_malloc_dyn:\n-              nothrow(d(\"exchange_malloc_dyn\",\n+          exchange_malloc:\n+              nothrow(d(\"exchange_malloc\",\n                         [T_ptr(tydesc_type), int_t],\n                         T_ptr(T_i8()))),\n           exchange_free:"}, {"sha": "b2c02c909c77c301798a9260c76304c5e11777f2", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/393f739990240914a6b147d6b642adc7ab9a939b/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393f739990240914a6b147d6b642adc7ab9a939b/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=393f739990240914a6b147d6b642adc7ab9a939b", "patch": "@@ -356,9 +356,9 @@ fn malloc_raw_dyn(bcx: block, t: ty::t, heap: heap,\n     let ccx = bcx.ccx();\n \n     let (mk_fn, upcall) = alt heap {\n-      heap_shared { (ty::mk_imm_box, ccx.upcalls.malloc_dyn) }\n+      heap_shared { (ty::mk_imm_box, ccx.upcalls.malloc) }\n       heap_exchange {\n-        (ty::mk_imm_uniq, ccx.upcalls.exchange_malloc_dyn )\n+        (ty::mk_imm_uniq, ccx.upcalls.exchange_malloc )\n       }\n     };\n "}, {"sha": "745c25f6f7997441d1aff609340c288691b4a579", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/393f739990240914a6b147d6b642adc7ab9a939b/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393f739990240914a6b147d6b642adc7ab9a939b/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=393f739990240914a6b147d6b642adc7ab9a939b", "patch": "@@ -545,7 +545,7 @@ fn make_opaque_cbox_take_glue(\n         let sz = Add(bcx, sz, shape::llsize_of(ccx, T_box_header(ccx)));\n \n         // Allocate memory, update original ptr, and copy existing data\n-        let malloc = ccx.upcalls.exchange_malloc_dyn;\n+        let malloc = ccx.upcalls.exchange_malloc;\n         let cbox_out = Call(bcx, malloc, [tydesc, sz]);\n         let cbox_out = PointerCast(bcx, cbox_out, llopaquecboxty);\n         call_memmove(bcx, cbox_out, cbox_in, sz);"}]}