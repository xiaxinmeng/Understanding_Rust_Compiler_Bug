{"sha": "a4d36928fd872c146b15cc8aa2211267441cffc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZDM2OTI4ZmQ4NzJjMTQ2YjE1Y2M4YWEyMjExMjY3NDQxY2ZmYzE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-24T11:14:26Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-24T11:49:18Z"}, "message": "Make it work for traits", "tree": {"sha": "a71c3cb13186b5e06de877065a7b604c4f1a6e76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a71c3cb13186b5e06de877065a7b604c4f1a6e76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4d36928fd872c146b15cc8aa2211267441cffc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d36928fd872c146b15cc8aa2211267441cffc1", "html_url": "https://github.com/rust-lang/rust/commit/a4d36928fd872c146b15cc8aa2211267441cffc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4d36928fd872c146b15cc8aa2211267441cffc1/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a89f4011605d6636359335e65120d6b7360ef3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a89f4011605d6636359335e65120d6b7360ef3e", "html_url": "https://github.com/rust-lang/rust/commit/5a89f4011605d6636359335e65120d6b7360ef3e"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "7b851665d3ea2a940de94fec51111fca3c148c26", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a4d36928fd872c146b15cc8aa2211267441cffc1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d36928fd872c146b15cc8aa2211267441cffc1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a4d36928fd872c146b15cc8aa2211267441cffc1", "patch": "@@ -911,11 +911,29 @@ fn resolve(cx: &DocContext, path_str: &str, is_val: bool) -> Result<(Def, Option\n                                                 &path_str, is_val)\n         });\n \n-        if result.is_ok() {\n-            return result.map(|path| (path.def, None));\n+        if let Ok(result) = result {\n+            // In case this is a trait item, skip the\n+            // early return and try looking for the trait\n+            let value = match result.def {\n+                Def::Method(_) | Def::AssociatedConst(_) => true,\n+                Def::AssociatedTy(_)  => false,\n+                // not a trait item, just return what we found\n+                _ => return Ok((result.def, None))\n+            };\n+\n+            if value != is_val {\n+                return Err(())\n+            }\n+        } else {\n+            // If resolution failed, it may still be a method\n+            // because methods are not handled by the resolver\n+            // If so, bail when we're not looking for a value\n+            if !is_val {\n+                return Err(())\n+            }\n         }\n \n-        // Try looking for methods and other associated items\n+        // Try looking for methods and associated items\n         let mut split = path_str.rsplitn(2, \"::\");\n         let mut item_name = if let Some(first) = split.next() {\n             first\n@@ -935,8 +953,6 @@ fn resolve(cx: &DocContext, path_str: &str, is_val: bool) -> Result<(Def, Option\n                 resolver.resolve_str_path_error(DUMMY_SP,\n                                                 &path, false)\n         })?;\n-\n-\n         match ty.def {\n             Def::Struct(did) | Def::Union(did) | Def::Enum(did) | Def::TyAlias(did) => {\n                 let item = cx.tcx.inherent_impls(did).iter()\n@@ -952,9 +968,22 @@ fn resolve(cx: &DocContext, path_str: &str, is_val: bool) -> Result<(Def, Option\n                     Err(())\n                 }\n             }\n-            Def::Trait(_) => {\n-                // XXXManishearth todo\n-                Err(())\n+            Def::Trait(did) => {\n+                let item = cx.tcx.associated_item_def_ids(did).iter()\n+                             .map(|item| cx.tcx.associated_item(*item))\n+                             .find(|item| item.name == item_name);\n+                if let Some(item) = item {\n+                    let kind = match item.kind {\n+                        ty::AssociatedKind::Const if is_val => \"associatedconstant\",\n+                        ty::AssociatedKind::Type if !is_val => \"associatedtype\",\n+                        ty::AssociatedKind::Method if is_val => \"tymethod\",\n+                        _ => return Err(())\n+                    };\n+\n+                    Ok((ty.def, Some(format!(\"{}.{}\", kind, item_name))))\n+                } else {\n+                    Err(())\n+                }\n             }\n             _ => Err(())\n         }"}]}