{"sha": "ae42f22ba055337f802b02b8c07e999bd52ec01d", "node_id": "C_kwDOAAsO6NoAKGFlNDJmMjJiYTA1NTMzN2Y4MDJiMDJiOGMwN2U5OTliZDUyZWMwMWQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-25T03:11:51Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-27T01:50:46Z"}, "message": "make `fn() -> _ {}` suggestion MachineApplicable", "tree": {"sha": "6e99217688add43dbc75c9e1833de129cd6c24f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e99217688add43dbc75c9e1833de129cd6c24f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae42f22ba055337f802b02b8c07e999bd52ec01d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae42f22ba055337f802b02b8c07e999bd52ec01d", "html_url": "https://github.com/rust-lang/rust/commit/ae42f22ba055337f802b02b8c07e999bd52ec01d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae42f22ba055337f802b02b8c07e999bd52ec01d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7197189cd0e3a86d1b661d1dceb8bdff021d0b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7197189cd0e3a86d1b661d1dceb8bdff021d0b8", "html_url": "https://github.com/rust-lang/rust/commit/a7197189cd0e3a86d1b661d1dceb8bdff021d0b8"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "37bcbf37426d4e83a657cf6233fe8a95e4e386e9", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ae42f22ba055337f802b02b8c07e999bd52ec01d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae42f22ba055337f802b02b8c07e999bd52ec01d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=ae42f22ba055337f802b02b8c07e999bd52ec01d", "patch": "@@ -41,7 +41,7 @@ use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, AdtKind, Const, DefIdTree, Ty, TyCtxt};\n-use rustc_middle::ty::{ReprOptions, ToPredicate, TypeFoldable};\n+use rustc_middle::ty::{ReprOptions, ToPredicate};\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -2004,28 +2004,29 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n             visitor.visit_ty(ty);\n             let mut diag = bad_placeholder(tcx, visitor.0, \"return type\");\n             let ret_ty = fn_sig.skip_binder().output();\n-            if !ret_ty.references_error() {\n-                if !ret_ty.is_closure() {\n-                    let ret_ty_str = match ret_ty.kind() {\n-                        // Suggest a function pointer return type instead of a unique function definition\n-                        // (e.g. `fn() -> i32` instead of `fn() -> i32 { f }`, the latter of which is invalid\n-                        // syntax)\n-                        ty::FnDef(..) => ret_ty.fn_sig(tcx).to_string(),\n-                        _ => ret_ty.to_string(),\n-                    };\n+            if ret_ty.is_suggestable() {\n+                diag.span_suggestion(\n+                    ty.span,\n+                    \"replace with the correct return type\",\n+                    ret_ty.to_string(),\n+                    Applicability::MachineApplicable,\n+                );\n+            } else if matches!(ret_ty.kind(), ty::FnDef(..)) {\n+                let fn_sig = ret_ty.fn_sig(tcx);\n+                if fn_sig.skip_binder().inputs_and_output.iter().all(|t| t.is_suggestable()) {\n                     diag.span_suggestion(\n                         ty.span,\n                         \"replace with the correct return type\",\n-                        ret_ty_str,\n-                        Applicability::MaybeIncorrect,\n+                        fn_sig.to_string(),\n+                        Applicability::MachineApplicable,\n                     );\n-                } else {\n-                    // We're dealing with a closure, so we should suggest using `impl Fn` or trait bounds\n-                    // to prevent the user from getting a papercut while trying to use the unique closure\n-                    // syntax (e.g. `[closure@src/lib.rs:2:5: 2:9]`).\n-                    diag.help(\"consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\");\n-                    diag.note(\"for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\");\n                 }\n+            } else if ret_ty.is_closure() {\n+                // We're dealing with a closure, so we should suggest using `impl Fn` or trait bounds\n+                // to prevent the user from getting a papercut while trying to use the unique closure\n+                // syntax (e.g. `[closure@src/lib.rs:2:5: 2:9]`).\n+                diag.help(\"consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\");\n+                diag.note(\"for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\");\n             }\n             diag.emit();\n "}, {"sha": "f9a1eaca38411c7b10318a9a8f1f07c89c2817d9", "filename": "src/test/ui/type-alias-impl-trait/issue-77179.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae42f22ba055337f802b02b8c07e999bd52ec01d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae42f22ba055337f802b02b8c07e999bd52ec01d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.stderr?ref=ae42f22ba055337f802b02b8c07e999bd52ec01d", "patch": "@@ -2,10 +2,7 @@ error[E0121]: the placeholder `_` is not allowed within types on item signatures\n   --> $DIR/issue-77179.rs:7:22\n    |\n LL | fn test() -> Pointer<_> {\n-   |              --------^-\n-   |              |       |\n-   |              |       not allowed in type signatures\n-   |              help: replace with the correct return type: `Pointer<i32>`\n+   |                      ^ not allowed in type signatures\n \n error: aborting due to previous error\n "}]}