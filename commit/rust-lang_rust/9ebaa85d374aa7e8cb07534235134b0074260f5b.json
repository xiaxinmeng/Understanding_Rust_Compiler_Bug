{"sha": "9ebaa85d374aa7e8cb07534235134b0074260f5b", "node_id": "C_kwDOAAsO6NoAKDllYmFhODVkMzc0YWE3ZThjYjA3NTM0MjM1MTM0YjAwNzQyNjBmNWI", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-05-23T08:55:40Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-05-28T10:54:23Z"}, "message": "Split test module for metavariable expressions", "tree": {"sha": "0e3e3e058600bcff708c66c4d9923e283cbed4aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e3e3e058600bcff708c66c4d9923e283cbed4aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ebaa85d374aa7e8cb07534235134b0074260f5b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmRzMt8ACgkQ4laYqTBY\nYXEXEBAAgioYkUiCPf3F2WzTg0uKpvTS0b7x1UI87MuUjRlMLUFG4e4Txrf0LPSs\n6HD/pvHUpdcXuZ0n+XQQJDrr6j9s8s2Ge8yvGKATL8DhRZ959lO38b59ru8ZHRSI\n02zS1qASTcf90UcUCojnix3tO9acWMo/GKS3vWt4X9uUWlY38nTbGVVPQsLSNOOy\nCIx+6p0ZSryewkmyZKQ+JCvSFEBEj/SRE2XHOEtQLg8zwb3WyjywAvb+cqnGhJxf\n0A1JG4I3KTBknhfdyxGd0BU1L4was1ntJZfQIVXDc6MkoBdOWQfm86mnoPk3yIQc\ntgTTo1bUEXmEUHXuWuOhMdcyp/MxQM4fmHoFvgvW1nWbleueLI9kSMR6f0QV03Ma\npf2JDzsiGE/b+GFVOTVMF+XPbcfrTc9RGuzHf/gisMRL8Oj60+2/FV1zcDO5OMXv\nU/KcRoK2Zu+cdxVaKMJCitkJiNeNJPpkovD2fWoc8Ymf+ZS9SMrr6A0VO2qsVmkm\nx40t4vK3Lz59ZqCMc2lq8EcBXL5s+BDB+HR+Us4zsDPcy9XB5AEqm17nL3gNlWxs\n8AK+hcNZj6TjObky9d9AcbI1sajrRqfFKR/KSKOUDRUcuFQ7Qt/BmyH+4O3U6ztW\nkSAc8cuBWalnvHJ7rvsuU4jUoaan0ikl+ygKgWHGZZYpWcG3KSc=\n=YSv5\n-----END PGP SIGNATURE-----", "payload": "tree 0e3e3e058600bcff708c66c4d9923e283cbed4aa\nparent f6e3a87bf9478574f8c64ac2efec125bc19b1c64\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1684832140 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1685271263 +0900\n\nSplit test module for metavariable expressions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ebaa85d374aa7e8cb07534235134b0074260f5b", "html_url": "https://github.com/rust-lang/rust/commit/9ebaa85d374aa7e8cb07534235134b0074260f5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ebaa85d374aa7e8cb07534235134b0074260f5b/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6e3a87bf9478574f8c64ac2efec125bc19b1c64", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e3a87bf9478574f8c64ac2efec125bc19b1c64", "html_url": "https://github.com/rust-lang/rust/commit/f6e3a87bf9478574f8c64ac2efec125bc19b1c64"}], "stats": {"total": 178, "additions": 92, "deletions": 86}, "files": [{"sha": "553ffe3d0b88bfdea40fb21eaf4d96aa6cc225c1", "filename": "crates/hir-def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 1, "deletions": 86, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/9ebaa85d374aa7e8cb07534235134b0074260f5b/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ebaa85d374aa7e8cb07534235134b0074260f5b/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=9ebaa85d374aa7e8cb07534235134b0074260f5b", "patch": "@@ -4,6 +4,7 @@\n mod tt_conversion;\n mod matching;\n mod meta_syntax;\n+mod metavar_expr;\n mod regression;\n \n use expect_test::expect;\n@@ -1614,92 +1615,6 @@ struct Foo;\n     )\n }\n \n-#[test]\n-fn test_dollar_dollar() {\n-    check(\n-        r#\"\n-macro_rules! register_struct { ($Struct:ident) => {\n-    macro_rules! register_methods { ($$($method:ident),*) => {\n-        macro_rules! implement_methods { ($$$$($$val:expr),*) => {\n-            struct $Struct;\n-            impl $Struct { $$(fn $method() -> &'static [u32] { &[$$$$($$$$val),*] })*}\n-        }}\n-    }}\n-}}\n-\n-register_struct!(Foo);\n-register_methods!(alpha, beta);\n-implement_methods!(1, 2, 3);\n-\"#,\n-        expect![[r#\"\n-macro_rules! register_struct { ($Struct:ident) => {\n-    macro_rules! register_methods { ($$($method:ident),*) => {\n-        macro_rules! implement_methods { ($$$$($$val:expr),*) => {\n-            struct $Struct;\n-            impl $Struct { $$(fn $method() -> &'static [u32] { &[$$$$($$$$val),*] })*}\n-        }}\n-    }}\n-}}\n-\n-macro_rules !register_methods {\n-    ($($method: ident), *) = > {\n-        macro_rules!implement_methods {\n-            ($$($val: expr), *) = > {\n-                struct Foo;\n-                impl Foo {\n-                    $(fn $method()-> &'static[u32] {\n-                        &[$$($$val), *]\n-                    }\n-                    )*\n-                }\n-            }\n-        }\n-    }\n-}\n-macro_rules !implement_methods {\n-    ($($val: expr), *) = > {\n-        struct Foo;\n-        impl Foo {\n-            fn alpha()-> &'static[u32] {\n-                &[$($val), *]\n-            }\n-            fn beta()-> &'static[u32] {\n-                &[$($val), *]\n-            }\n-        }\n-    }\n-}\n-struct Foo;\n-impl Foo {\n-    fn alpha() -> &'static[u32] {\n-        &[1, 2, 3]\n-    }\n-    fn beta() -> &'static[u32] {\n-        &[1, 2, 3]\n-    }\n-}\n-\"#]],\n-    )\n-}\n-\n-#[test]\n-fn test_metavar_exprs() {\n-    check(\n-        r#\"\n-macro_rules! m {\n-    ( $( $t:tt )* ) => ( $( ${ignore(t)} -${index()} )-* );\n-}\n-const _: i32 = m!(a b c);\n-    \"#,\n-        expect![[r#\"\n-macro_rules! m {\n-    ( $( $t:tt )* ) => ( $( ${ignore(t)} -${index()} )-* );\n-}\n-const _: i32 = -0--1--2;\n-    \"#]],\n-    );\n-}\n-\n #[test]\n fn test_punct_without_space() {\n     // Puncts are \"glued\" greedily."}, {"sha": "ae138529ea647814ba54e70c01c7845544af58df", "filename": "crates/hir-def/src/macro_expansion_tests/mbe/metavar_expr.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/9ebaa85d374aa7e8cb07534235134b0074260f5b/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmetavar_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ebaa85d374aa7e8cb07534235134b0074260f5b/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmetavar_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmetavar_expr.rs?ref=9ebaa85d374aa7e8cb07534235134b0074260f5b", "patch": "@@ -0,0 +1,91 @@\n+//! Tests for RFC 3086 metavariable expressions.\n+\n+use expect_test::expect;\n+\n+use crate::macro_expansion_tests::check;\n+\n+#[test]\n+fn test_dollar_dollar() {\n+    check(\n+        r#\"\n+macro_rules! register_struct { ($Struct:ident) => {\n+    macro_rules! register_methods { ($$($method:ident),*) => {\n+        macro_rules! implement_methods { ($$$$($$val:expr),*) => {\n+            struct $Struct;\n+            impl $Struct { $$(fn $method() -> &'static [u32] { &[$$$$($$$$val),*] })*}\n+        }}\n+    }}\n+}}\n+\n+register_struct!(Foo);\n+register_methods!(alpha, beta);\n+implement_methods!(1, 2, 3);\n+\"#,\n+        expect![[r#\"\n+macro_rules! register_struct { ($Struct:ident) => {\n+    macro_rules! register_methods { ($$($method:ident),*) => {\n+        macro_rules! implement_methods { ($$$$($$val:expr),*) => {\n+            struct $Struct;\n+            impl $Struct { $$(fn $method() -> &'static [u32] { &[$$$$($$$$val),*] })*}\n+        }}\n+    }}\n+}}\n+\n+macro_rules !register_methods {\n+    ($($method: ident), *) = > {\n+        macro_rules!implement_methods {\n+            ($$($val: expr), *) = > {\n+                struct Foo;\n+                impl Foo {\n+                    $(fn $method()-> &'static[u32] {\n+                        &[$$($$val), *]\n+                    }\n+                    )*\n+                }\n+            }\n+        }\n+    }\n+}\n+macro_rules !implement_methods {\n+    ($($val: expr), *) = > {\n+        struct Foo;\n+        impl Foo {\n+            fn alpha()-> &'static[u32] {\n+                &[$($val), *]\n+            }\n+            fn beta()-> &'static[u32] {\n+                &[$($val), *]\n+            }\n+        }\n+    }\n+}\n+struct Foo;\n+impl Foo {\n+    fn alpha() -> &'static[u32] {\n+        &[1, 2, 3]\n+    }\n+    fn beta() -> &'static[u32] {\n+        &[1, 2, 3]\n+    }\n+}\n+\"#]],\n+    )\n+}\n+\n+#[test]\n+fn test_metavar_exprs() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ( $( $t:tt )* ) => ( $( ${ignore(t)} -${index()} )-* );\n+}\n+const _: i32 = m!(a b c);\n+    \"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ( $( $t:tt )* ) => ( $( ${ignore(t)} -${index()} )-* );\n+}\n+const _: i32 = -0--1--2;\n+    \"#]],\n+    );\n+}"}]}