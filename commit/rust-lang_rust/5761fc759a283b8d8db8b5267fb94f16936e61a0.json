{"sha": "5761fc759a283b8d8db8b5267fb94f16936e61a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NjFmYzc1OWEyODNiOGQ4ZGI4YjUyNjdmYjk0ZjE2OTM2ZTYxYTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-25T00:44:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-25T00:44:58Z"}, "message": "Rollup merge of #62744 - llogiq:tiny-list-refactor, r=eddyb\n\nRefactor `TinyList::contains` and `len` to iterate instead of recurse\n\nNone", "tree": {"sha": "d8d410d1377d1668dd6779cec792db21133c4373", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8d410d1377d1668dd6779cec792db21133c4373"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5761fc759a283b8d8db8b5267fb94f16936e61a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdYdoKCRBK7hj4Ov3rIwAAdHIIAEHXTzMAvrQDsPaLux+3g6XH\napmaJmXzCbpELjhzozQk4ipLmGsnE/ovKZ0wnG87sxM+uxkGrZEkyiX3S6ZOqNTP\naoyv03MPn14rIz9AXoCQqBjruu2OtQ4M2tFdK4pf4/Vr+u2RZholQw8SIfglqd37\n9+4tRgL8JGgaGmlCTEfTV4Kj3P+PNLp7I/gT2oF3Fh1t3TsxnnehhbburibsDMGs\n5C8oBPjKA+MAvbisRl2queqpKUcbJpDx4pkOMEmeQREU3zameJtgIMOCiHqae1qV\n1re93ZiPfzj6ZG68AjsebuF4bmy0tKw5znV9uz9UR/kfwn28RkKhXhIbi3j+hdI=\n=ZUTM\n-----END PGP SIGNATURE-----\n", "payload": "tree d8d410d1377d1668dd6779cec792db21133c4373\nparent eeba189cfb2cfc5c5898513352d4ca8f1df06e05\nparent 45f14a8c9026b33dc278000a5fc120e9667806ff\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566693898 +0200\ncommitter GitHub <noreply@github.com> 1566693898 +0200\n\nRollup merge of #62744 - llogiq:tiny-list-refactor, r=eddyb\n\nRefactor `TinyList::contains` and `len` to iterate instead of recurse\n\nNone\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5761fc759a283b8d8db8b5267fb94f16936e61a0", "html_url": "https://github.com/rust-lang/rust/commit/5761fc759a283b8d8db8b5267fb94f16936e61a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5761fc759a283b8d8db8b5267fb94f16936e61a0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeba189cfb2cfc5c5898513352d4ca8f1df06e05", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeba189cfb2cfc5c5898513352d4ca8f1df06e05", "html_url": "https://github.com/rust-lang/rust/commit/eeba189cfb2cfc5c5898513352d4ca8f1df06e05"}, {"sha": "45f14a8c9026b33dc278000a5fc120e9667806ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/45f14a8c9026b33dc278000a5fc120e9667806ff", "html_url": "https://github.com/rust-lang/rust/commit/45f14a8c9026b33dc278000a5fc120e9667806ff"}], "stats": {"total": 91, "additions": 45, "deletions": 46}, "files": [{"sha": "ea771d9f20f8b69a60068870ba93060854736233", "filename": "src/librustc_data_structures/tiny_list.rs", "status": "modified", "additions": 16, "deletions": 40, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5761fc759a283b8d8db8b5267fb94f16936e61a0/src%2Flibrustc_data_structures%2Ftiny_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5761fc759a283b8d8db8b5267fb94f16936e61a0/src%2Flibrustc_data_structures%2Ftiny_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftiny_list.rs?ref=5761fc759a283b8d8db8b5267fb94f16936e61a0", "patch": "@@ -20,7 +20,6 @@ pub struct TinyList<T: PartialEq> {\n }\n \n impl<T: PartialEq> TinyList<T> {\n-\n     #[inline]\n     pub fn new() -> TinyList<T> {\n         TinyList {\n@@ -60,20 +59,24 @@ impl<T: PartialEq> TinyList<T> {\n \n     #[inline]\n     pub fn contains(&self, data: &T) -> bool {\n-        if let Some(ref head) = self.head {\n-            head.contains(data)\n-        } else {\n-            false\n+        let mut elem = self.head.as_ref();\n+        while let Some(ref e) = elem {\n+            if &e.data == data {\n+                return true;\n+            }\n+            elem = e.next.as_ref().map(|e| &**e);\n         }\n+        false\n     }\n \n     #[inline]\n     pub fn len(&self) -> usize {\n-        if let Some(ref head) = self.head {\n-            head.len()\n-        } else {\n-            0\n+        let (mut elem, mut count) = (self.head.as_ref(), 0);\n+        while let Some(ref e) = elem {\n+            count += 1;\n+            elem = e.next.as_ref().map(|e| &**e);\n         }\n+        count\n     }\n }\n \n@@ -84,40 +87,13 @@ struct Element<T: PartialEq> {\n }\n \n impl<T: PartialEq> Element<T> {\n-\n     fn remove_next(&mut self, data: &T) -> bool {\n-        let new_next = if let Some(ref mut next) = self.next {\n-            if next.data != *data {\n-                return next.remove_next(data)\n-            } else {\n-                next.next.take()\n-            }\n-        } else {\n-            return false\n+        let new_next = match self.next {\n+            Some(ref mut next) if next.data == *data => next.next.take(),\n+            Some(ref mut next) => return next.remove_next(data),\n+            None => return false,\n         };\n-\n         self.next = new_next;\n-\n         true\n     }\n-\n-    fn len(&self) -> usize {\n-        if let Some(ref next) = self.next {\n-            1 + next.len()\n-        } else {\n-            1\n-        }\n-    }\n-\n-    fn contains(&self, data: &T) -> bool {\n-        if self.data == *data {\n-            return true\n-        }\n-\n-        if let Some(ref next) = self.next {\n-            next.contains(data)\n-        } else {\n-            false\n-        }\n-    }\n }"}, {"sha": "0142631590cc9af411574dbf2ab8835b47852754", "filename": "src/librustc_data_structures/tiny_list/tests.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5761fc759a283b8d8db8b5267fb94f16936e61a0/src%2Flibrustc_data_structures%2Ftiny_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5761fc759a283b8d8db8b5267fb94f16936e61a0/src%2Flibrustc_data_structures%2Ftiny_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftiny_list%2Ftests.rs?ref=5761fc759a283b8d8db8b5267fb94f16936e61a0", "patch": "@@ -1,7 +1,7 @@\n use super::*;\n \n extern crate test;\n-use test::Bencher;\n+use test::{Bencher, black_box};\n \n #[test]\n fn test_contains_and_insert() {\n@@ -98,36 +98,59 @@ fn test_remove_single() {\n #[bench]\n fn bench_insert_empty(b: &mut Bencher) {\n     b.iter(|| {\n-        let mut list = TinyList::new();\n+        let mut list = black_box(TinyList::new());\n         list.insert(1);\n+        list\n     })\n }\n \n #[bench]\n fn bench_insert_one(b: &mut Bencher) {\n     b.iter(|| {\n-        let mut list = TinyList::new_single(0);\n+        let mut list = black_box(TinyList::new_single(0));\n         list.insert(1);\n+        list\n     })\n }\n \n+#[bench]\n+fn bench_contains_empty(b: &mut Bencher) {\n+    b.iter(|| {\n+        black_box(TinyList::new()).contains(&1)\n+    });\n+}\n+\n+#[bench]\n+fn bench_contains_unknown(b: &mut Bencher) {\n+    b.iter(|| {\n+        black_box(TinyList::new_single(0)).contains(&1)\n+    });\n+}\n+\n+#[bench]\n+fn bench_contains_one(b: &mut Bencher) {\n+    b.iter(|| {\n+        black_box(TinyList::new_single(1)).contains(&1)\n+    });\n+}\n+\n #[bench]\n fn bench_remove_empty(b: &mut Bencher) {\n     b.iter(|| {\n-        TinyList::new().remove(&1)\n+        black_box(TinyList::new()).remove(&1)\n     });\n }\n \n #[bench]\n fn bench_remove_unknown(b: &mut Bencher) {\n     b.iter(|| {\n-        TinyList::new_single(0).remove(&1)\n+        black_box(TinyList::new_single(0)).remove(&1)\n     });\n }\n \n #[bench]\n fn bench_remove_one(b: &mut Bencher) {\n     b.iter(|| {\n-        TinyList::new_single(1).remove(&1)\n+        black_box(TinyList::new_single(1)).remove(&1)\n     });\n }"}]}