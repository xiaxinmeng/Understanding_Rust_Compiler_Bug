{"sha": "91c3eee1735ad72b579f99cbb6919c3471747d94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYzNlZWUxNzM1YWQ3MmI1NzlmOTljYmI2OTE5YzM0NzE3NDdkOTQ=", "commit": {"author": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2018-01-03T20:09:22Z"}, "committer": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2018-01-04T23:11:39Z"}, "message": "[unix] Don't clone command-line args on startup", "tree": {"sha": "1cb4b6fcd496ce32e21b6b5c3fddd97aadb3513c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cb4b6fcd496ce32e21b6b5c3fddd97aadb3513c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91c3eee1735ad72b579f99cbb6919c3471747d94", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91c3eee1735ad72b579f99cbb6919c3471747d94", "html_url": "https://github.com/rust-lang/rust/commit/91c3eee1735ad72b579f99cbb6919c3471747d94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91c3eee1735ad72b579f99cbb6919c3471747d94/comments", "author": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9", "html_url": "https://github.com/rust-lang/rust/commit/d96cc6e2865ff2cc77f061ae97e58aae50f5a1e9"}], "stats": {"total": 39, "additions": 16, "deletions": 23}, "files": [{"sha": "e1c7ffc19e51eb1bb911c8a2df98d05fecc3c181", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/91c3eee1735ad72b579f99cbb6919c3471747d94/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c3eee1735ad72b579f99cbb6919c3471747d94/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=91c3eee1735ad72b579f99cbb6919c3471747d94", "patch": "@@ -69,57 +69,50 @@ impl DoubleEndedIterator for Args {\n           target_os = \"fuchsia\"))]\n mod imp {\n     use os::unix::prelude::*;\n-    use mem;\n+    use ptr;\n     use ffi::{CStr, OsString};\n     use marker::PhantomData;\n     use libc;\n     use super::Args;\n \n     use sys_common::mutex::Mutex;\n \n-    static mut GLOBAL_ARGS_PTR: usize = 0;\n+    static mut ARGC: isize = 0;\n+    static mut ARGV: *const *const u8 = ptr::null();\n     static LOCK: Mutex = Mutex::new();\n \n     pub unsafe fn init(argc: isize, argv: *const *const u8) {\n-        let args = (0..argc).map(|i| {\n-            CStr::from_ptr(*argv.offset(i) as *const libc::c_char).to_bytes().to_vec()\n-        }).collect();\n-\n         LOCK.lock();\n-        let ptr = get_global_ptr();\n-        assert!((*ptr).is_none());\n-        (*ptr) = Some(box args);\n+        ARGC = argc;\n+        ARGV = argv;\n         LOCK.unlock();\n     }\n \n     pub unsafe fn cleanup() {\n         LOCK.lock();\n-        *get_global_ptr() = None;\n+        ARGC = 0;\n+        ARGV = ptr::null();\n         LOCK.unlock();\n     }\n \n     pub fn args() -> Args {\n-        let bytes = clone().unwrap_or(Vec::new());\n-        let v: Vec<OsString> = bytes.into_iter().map(|v| {\n-            OsStringExt::from_vec(v)\n-        }).collect();\n-        Args { iter: v.into_iter(), _dont_send_or_sync_me: PhantomData }\n+        Args {\n+            iter: clone().into_iter(),\n+            _dont_send_or_sync_me: PhantomData\n+        }\n     }\n \n-    fn clone() -> Option<Vec<Vec<u8>>> {\n+    fn clone() -> Vec<OsString> {\n         unsafe {\n             LOCK.lock();\n-            let ptr = get_global_ptr();\n-            let ret = (*ptr).as_ref().map(|s| (**s).clone());\n+            let ret = (0..ARGC).map(|i| {\n+                let cstr = CStr::from_ptr(*ARGV.offset(i) as *const libc::c_char);\n+                OsStringExt::from_vec(cstr.to_bytes().to_vec())\n+            }).collect();\n             LOCK.unlock();\n             return ret\n         }\n     }\n-\n-    fn get_global_ptr() -> *mut Option<Box<Vec<Vec<u8>>>> {\n-        unsafe { mem::transmute(&GLOBAL_ARGS_PTR) }\n-    }\n-\n }\n \n #[cfg(any(target_os = \"macos\","}]}