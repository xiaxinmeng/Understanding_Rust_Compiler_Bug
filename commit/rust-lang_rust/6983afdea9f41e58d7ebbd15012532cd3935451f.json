{"sha": "6983afdea9f41e58d7ebbd15012532cd3935451f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ODNhZmRlYTlmNDFlNThkN2ViYmQxNTAxMjUzMmNkMzkzNTQ1MWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-20T18:38:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-20T18:38:00Z"}, "message": "Merge #2330\n\n2330: Remove hir/adt.rs r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "7f902137075f6b44266f127442ae8e99fceaac35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f902137075f6b44266f127442ae8e99fceaac35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6983afdea9f41e58d7ebbd15012532cd3935451f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd1YgICRBK7hj4Ov3rIwAAdHIIAG0ukOfV8Zl4meUVn+MyPh3S\neqtnttfqH5n2qJjO1RIbgM5tQjbpzB1sJRGLInIbghyeH6axjEjXbGiLpMCsw7Vj\n0fpRmEzGaSCaWY1xBWLUzRhF6w3I41/FCg3QKTohULpvKO6qVO959bvgUhHsfCZF\niyKV1rC7AxsbIc6cJl3CU00anknDKay8VlpTv1AJJcG3wk2N1sBcNNr71FhjFGvY\n68JCcMGWF9Qj4ixOn7lLzEfHdN9NVZ2hv8dL7l5M0zJ5GIcQS2fzVbLJwdLgN11J\nVsBlIyAYnZ+msxJQVUAu/QKEJGLF2jHQGran8ifSyR2LDjBSFI08h8pzFEnNSGc=\n=O1ty\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f902137075f6b44266f127442ae8e99fceaac35\nparent 5aec3e4a7b21855fb4688e466d4f5bee9feabe2e\nparent 7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574275080 +0000\ncommitter GitHub <noreply@github.com> 1574275080 +0000\n\nMerge #2330\n\n2330: Remove hir/adt.rs r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6983afdea9f41e58d7ebbd15012532cd3935451f", "html_url": "https://github.com/rust-lang/rust/commit/6983afdea9f41e58d7ebbd15012532cd3935451f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6983afdea9f41e58d7ebbd15012532cd3935451f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aec3e4a7b21855fb4688e466d4f5bee9feabe2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aec3e4a7b21855fb4688e466d4f5bee9feabe2e", "html_url": "https://github.com/rust-lang/rust/commit/5aec3e4a7b21855fb4688e466d4f5bee9feabe2e"}, {"sha": "7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3", "html_url": "https://github.com/rust-lang/rust/commit/7c275a7ed2253fc7bd8b46c685a754c4d4e9dee3"}], "stats": {"total": 186, "additions": 81, "deletions": 105}, "files": [{"sha": "945f236c22e7ac2a5ed1f472e2c3468564a44628", "filename": "crates/ra_hir/src/adt.rs", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5aec3e4a7b21855fb4688e466d4f5bee9feabe2e/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aec3e4a7b21855fb4688e466d4f5bee9feabe2e/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=5aec3e4a7b21855fb4688e466d4f5bee9feabe2e", "patch": "@@ -1,54 +0,0 @@\n-//! This module contains the implementation details of the HIR for ADTs, i.e.\n-//! structs and enums (and unions).\n-\n-use std::sync::Arc;\n-\n-use hir_def::adt::VariantData;\n-\n-use crate::{\n-    db::{DefDatabase, HirDatabase},\n-    EnumVariant, Module, Name, Struct, StructField,\n-};\n-\n-impl Struct {\n-    pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n-        db.struct_data(self.id.into()).variant_data.clone()\n-    }\n-}\n-\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub enum VariantDef {\n-    Struct(Struct),\n-    EnumVariant(EnumVariant),\n-}\n-impl_froms!(VariantDef: Struct, EnumVariant);\n-\n-impl VariantDef {\n-    pub fn fields(self, db: &impl HirDatabase) -> Vec<StructField> {\n-        match self {\n-            VariantDef::Struct(it) => it.fields(db),\n-            VariantDef::EnumVariant(it) => it.fields(db),\n-        }\n-    }\n-\n-    pub fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n-        match self {\n-            VariantDef::Struct(it) => it.field(db, name),\n-            VariantDef::EnumVariant(it) => it.field(db, name),\n-        }\n-    }\n-\n-    pub fn module(self, db: &impl HirDatabase) -> Module {\n-        match self {\n-            VariantDef::Struct(it) => it.module(db),\n-            VariantDef::EnumVariant(it) => it.module(db),\n-        }\n-    }\n-\n-    pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n-        match self {\n-            VariantDef::Struct(it) => it.variant_data(db),\n-            VariantDef::EnumVariant(it) => it.variant_data(db),\n-        }\n-    }\n-}"}, {"sha": "9b6276b51bc504e05bdaa268ab34acb763ac96b9", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 47, "deletions": 18, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/6983afdea9f41e58d7ebbd15012532cd3935451f/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6983afdea9f41e58d7ebbd15012532cd3935451f/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=6983afdea9f41e58d7ebbd15012532cd3935451f", "patch": "@@ -23,7 +23,6 @@ use ra_db::{CrateId, Edition};\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n-    adt::VariantDef,\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     expr::{BindingAnnotation, Body, BodySourceMap, ExprValidator, Pat, PatId},\n     generics::{GenericDef, HasGenericParams},\n@@ -322,9 +321,11 @@ impl Struct {\n         // take the outer scope...\n         let r = self.module(db).resolver(db);\n         // ...and add generic params, if present\n-        let p = self.generic_params(db);\n-        let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n-        r\n+        r.push_generic_params_scope(db, self.into())\n+    }\n+\n+    fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n+        db.struct_data(self.id.into()).variant_data.clone()\n     }\n }\n \n@@ -352,9 +353,7 @@ impl Union {\n         // take the outer scope...\n         let r = self.module(db).resolver(db);\n         // ...and add generic params, if present\n-        let p = self.generic_params(db);\n-        let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n-        r\n+        r.push_generic_params_scope(db, self.into())\n     }\n }\n \n@@ -402,8 +401,7 @@ impl Enum {\n         // take the outer scope...\n         let r = self.module(db).resolver(db);\n         // ...and add generic params, if present\n-        let p = self.generic_params(db);\n-        let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n+        let r = r.push_generic_params_scope(db, self.into());\n         r.push_scope(Scope::AdtScope(self.into()))\n     }\n }\n@@ -487,6 +485,43 @@ impl Adt {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum VariantDef {\n+    Struct(Struct),\n+    EnumVariant(EnumVariant),\n+}\n+impl_froms!(VariantDef: Struct, EnumVariant);\n+\n+impl VariantDef {\n+    pub fn fields(self, db: &impl HirDatabase) -> Vec<StructField> {\n+        match self {\n+            VariantDef::Struct(it) => it.fields(db),\n+            VariantDef::EnumVariant(it) => it.fields(db),\n+        }\n+    }\n+\n+    pub fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n+        match self {\n+            VariantDef::Struct(it) => it.field(db, name),\n+            VariantDef::EnumVariant(it) => it.field(db, name),\n+        }\n+    }\n+\n+    pub fn module(self, db: &impl HirDatabase) -> Module {\n+        match self {\n+            VariantDef::Struct(it) => it.module(db),\n+            VariantDef::EnumVariant(it) => it.module(db),\n+        }\n+    }\n+\n+    pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n+        match self {\n+            VariantDef::Struct(it) => it.variant_data(db),\n+            VariantDef::EnumVariant(it) => it.variant_data(db),\n+        }\n+    }\n+}\n+\n /// The defs which have a body.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum DefWithBody {\n@@ -709,9 +744,7 @@ impl Function {\n         // take the outer scope...\n         let r = self.container(db).map_or_else(|| self.module(db).resolver(db), |c| c.resolver(db));\n         // ...and add generic params, if present\n-        let p = self.generic_params(db);\n-        let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n-        r\n+        r.push_generic_params_scope(db, self.into())\n     }\n \n     pub fn diagnostics(self, db: &impl HirDatabase, sink: &mut DiagnosticSink) {\n@@ -946,9 +979,7 @@ impl Trait {\n     pub(crate) fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         let r = self.module(db).resolver(db);\n         // add generic params, if present\n-        let p = self.generic_params(db);\n-        let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n-        r\n+        r.push_generic_params_scope(db, self.into())\n     }\n }\n \n@@ -1010,9 +1041,7 @@ impl TypeAlias {\n             .map(|ib| ib.resolver(db))\n             .unwrap_or_else(|| self.module(db).resolver(db));\n         // ...and add generic params, if present\n-        let p = self.generic_params(db);\n-        let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n-        r\n+        r.push_generic_params_scope(db, self.into())\n     }\n }\n "}, {"sha": "4aa427de43bd3f0e6e1985cac882ef1e9f2743f1", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6983afdea9f41e58d7ebbd15012532cd3935451f/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6983afdea9f41e58d7ebbd15012532cd3935451f/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=6983afdea9f41e58d7ebbd15012532cd3935451f", "patch": "@@ -4,11 +4,10 @@ use hir_def::{HasSource as _, Lookup};\n use ra_syntax::ast::{self, AstNode};\n \n use crate::{\n-    adt::VariantDef,\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     ids::AstItemDef,\n     Const, Either, Enum, EnumVariant, FieldSource, Function, HasBody, HirFileId, MacroDef, Module,\n-    ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n+    ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union, VariantDef,\n };\n \n pub use hir_expand::Source;"}, {"sha": "492d964a43c493a63d8a24b255d7af07461d0abc", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6983afdea9f41e58d7ebbd15012532cd3935451f/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6983afdea9f41e58d7ebbd15012532cd3935451f/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=6983afdea9f41e58d7ebbd15012532cd3935451f", "patch": "@@ -5,7 +5,6 @@ use ra_syntax::ast::{self};\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    generics::HasGenericParams,\n     resolve::Resolver,\n     ty::Ty,\n     AssocItem, Crate, HasSource, ImplBlock, Module, Source, TraitRef,\n@@ -52,12 +51,11 @@ impl ImplBlock {\n         Crate { crate_id: self.module(db).id.krate }\n     }\n \n-    pub(crate) fn resolver(&self, db: &impl DefDatabase) -> Resolver {\n+    pub(crate) fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         let r = self.module(db).resolver(db);\n         // add generic params, if present\n-        let p = self.generic_params(db);\n-        let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n-        let r = r.push_impl_block_scope(self.clone());\n+        let r = r.push_generic_params_scope(db, self.into());\n+        let r = r.push_impl_block_scope(self);\n         r\n     }\n }"}, {"sha": "31da74d2f3b66312def365ddfd630adc346739d6", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6983afdea9f41e58d7ebbd15012532cd3935451f/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6983afdea9f41e58d7ebbd15012532cd3935451f/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=6983afdea9f41e58d7ebbd15012532cd3935451f", "patch": "@@ -32,7 +32,6 @@ pub mod db;\n pub mod source_binder;\n \n mod ids;\n-mod adt;\n mod type_alias;\n mod ty;\n mod impl_block;\n@@ -56,15 +55,14 @@ mod marks;\n use crate::resolve::Resolver;\n \n pub use crate::{\n-    adt::VariantDef,\n-    code_model::ImplBlock,\n     code_model::{\n         attrs::{AttrDef, Attrs},\n         docs::{DocDef, Docs, Documentation},\n         src::{HasBodySource, HasSource},\n         Adt, AssocItem, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n-        EnumVariant, FieldSource, FnData, Function, GenericParam, HasBody, Local, MacroDef, Module,\n-        ModuleDef, ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n+        EnumVariant, FieldSource, FnData, Function, GenericParam, HasBody, ImplBlock, Local,\n+        MacroDef, Module, ModuleDef, ModuleSource, Static, Struct, StructField, Trait, TypeAlias,\n+        Union, VariantDef,\n     },\n     expr::ExprScopes,\n     from_source::FromSource,"}, {"sha": "e5e768be90e0db631f5934a335e46630614eae51", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6983afdea9f41e58d7ebbd15012532cd3935451f/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6983afdea9f41e58d7ebbd15012532cd3935451f/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=6983afdea9f41e58d7ebbd15012532cd3935451f", "patch": "@@ -14,9 +14,9 @@ use crate::{\n     code_model::Crate,\n     db::{DefDatabase, HirDatabase},\n     expr::{ExprScopes, PatId, ScopeId},\n-    generics::GenericParams,\n-    Adt, Const, DefWithBody, Enum, EnumVariant, Function, ImplBlock, Local, MacroDef, ModuleDef,\n-    PerNs, Static, Struct, Trait, TypeAlias,\n+    generics::{GenericParams, HasGenericParams},\n+    Adt, Const, DefWithBody, Enum, EnumVariant, Function, GenericDef, ImplBlock, Local, MacroDef,\n+    ModuleDef, PerNs, Static, Struct, Trait, TypeAlias,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -43,7 +43,7 @@ pub(crate) enum Scope {\n     /// All the items and imported names of a module\n     ModuleScope(ModuleItemMap),\n     /// Brings the generic parameters of an item into scope\n-    GenericParams(Arc<GenericParams>),\n+    GenericParams { def: GenericDef, params: Arc<GenericParams> },\n     /// Brings `Self` in `impl` block into scope\n     ImplBlockScope(ImplBlock),\n     /// Brings `Self` in enum, struct and union definitions into scope\n@@ -141,9 +141,9 @@ impl Resolver {\n         for scope in self.scopes.iter().rev() {\n             match scope {\n                 Scope::ExprScope(_) => continue,\n-                Scope::GenericParams(_) | Scope::ImplBlockScope(_) if skip_to_mod => continue,\n+                Scope::GenericParams { .. } | Scope::ImplBlockScope(_) if skip_to_mod => continue,\n \n-                Scope::GenericParams(params) => {\n+                Scope::GenericParams { params, .. } => {\n                     if let Some(param) = params.find_by_name(first_name) {\n                         let idx = if path.segments.len() == 1 { None } else { Some(1) };\n                         return Some((TypeNs::GenericParam(param.idx), idx));\n@@ -212,7 +212,7 @@ impl Resolver {\n             match scope {\n                 Scope::AdtScope(_)\n                 | Scope::ExprScope(_)\n-                | Scope::GenericParams(_)\n+                | Scope::GenericParams { .. }\n                 | Scope::ImplBlockScope(_)\n                     if skip_to_mod =>\n                 {\n@@ -232,13 +232,13 @@ impl Resolver {\n                 }\n                 Scope::ExprScope(_) => continue,\n \n-                Scope::GenericParams(params) if n_segments > 1 => {\n+                Scope::GenericParams { params, .. } if n_segments > 1 => {\n                     if let Some(param) = params.find_by_name(first_name) {\n                         let ty = TypeNs::GenericParam(param.idx);\n                         return Some(ResolveValueResult::Partial(ty, 1));\n                     }\n                 }\n-                Scope::GenericParams(_) => continue,\n+                Scope::GenericParams { .. } => continue,\n \n                 Scope::ImplBlockScope(impl_) if n_segments > 1 => {\n                     if first_name == &name::SELF_TYPE {\n@@ -361,15 +361,15 @@ impl Resolver {\n         self.scopes\n             .iter()\n             .filter_map(|scope| match scope {\n-                Scope::GenericParams(params) => Some(params),\n+                Scope::GenericParams { params, .. } => Some(params),\n                 _ => None,\n             })\n             .flat_map(|params| params.where_predicates.iter())\n     }\n \n     pub(crate) fn generic_def(&self) -> Option<crate::generics::GenericDef> {\n         self.scopes.iter().find_map(|scope| match scope {\n-            Scope::GenericParams(params) => Some(params.def.into()),\n+            Scope::GenericParams { def, .. } => Some(*def),\n             _ => None,\n         })\n     }\n@@ -381,8 +381,17 @@ impl Resolver {\n         self\n     }\n \n-    pub(crate) fn push_generic_params_scope(self, params: Arc<GenericParams>) -> Resolver {\n-        self.push_scope(Scope::GenericParams(params))\n+    pub(crate) fn push_generic_params_scope(\n+        self,\n+        db: &impl DefDatabase,\n+        def: GenericDef,\n+    ) -> Resolver {\n+        let params = def.generic_params(db);\n+        if params.params.is_empty() {\n+            self\n+        } else {\n+            self.push_scope(Scope::GenericParams { def, params })\n+        }\n     }\n \n     pub(crate) fn push_impl_block_scope(self, impl_block: ImplBlock) -> Resolver {\n@@ -457,8 +466,8 @@ impl Scope {\n                     });\n                 }\n             }\n-            Scope::GenericParams(gp) => {\n-                for param in &gp.params {\n+            Scope::GenericParams { params, .. } => {\n+                for param in params.params.iter() {\n                     f(param.name.clone(), ScopeDef::GenericParam(param.idx))\n                 }\n             }"}, {"sha": "092bc3a3f2b10c07251b55c47fcdcd15e269213f", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6983afdea9f41e58d7ebbd15012532cd3935451f/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6983afdea9f41e58d7ebbd15012532cd3935451f/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=6983afdea9f41e58d7ebbd15012532cd3935451f", "patch": "@@ -37,14 +37,13 @@ use super::{\n     TypeCtor, TypeWalk, Uncertain,\n };\n use crate::{\n-    adt::VariantDef,\n     code_model::TypeAlias,\n     db::HirDatabase,\n     expr::{BindingAnnotation, Body, ExprId, PatId},\n     resolve::{Resolver, TypeNs},\n     ty::infer::diagnostics::InferenceDiagnostic,\n     Adt, AssocItem, ConstData, DefWithBody, FloatTy, FnData, Function, HasBody, IntTy, Path,\n-    StructField,\n+    StructField, VariantDef,\n };\n \n macro_rules! ty_app {"}, {"sha": "91e60b5ab4cb273063c8b31be2e9b30bc5eb0ee8", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6983afdea9f41e58d7ebbd15012532cd3935451f/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6983afdea9f41e58d7ebbd15012532cd3935451f/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=6983afdea9f41e58d7ebbd15012532cd3935451f", "patch": "@@ -19,7 +19,6 @@ use super::{\n     TypeWalk,\n };\n use crate::{\n-    adt::VariantDef,\n     db::HirDatabase,\n     generics::HasGenericParams,\n     generics::{GenericDef, WherePredicate},\n@@ -30,7 +29,7 @@ use crate::{\n     },\n     util::make_mut_slice,\n     Const, Enum, EnumVariant, Function, ModuleDef, Path, Static, Struct, StructField, Trait,\n-    TypeAlias, Union,\n+    TypeAlias, Union, VariantDef,\n };\n \n // FIXME: this is only really used in `type_for_def`, which contains a bunch of"}, {"sha": "9e2e4c3cc311b0657d5d2dc9e7862ef40f5b58c4", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6983afdea9f41e58d7ebbd15012532cd3935451f/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6983afdea9f41e58d7ebbd15012532cd3935451f/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=6983afdea9f41e58d7ebbd15012532cd3935451f", "patch": "@@ -25,7 +25,6 @@ pub struct GenericParam {\n /// Data about the generic parameters of a function, struct, impl, etc.\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct GenericParams {\n-    pub def: GenericDefId,\n     pub parent_params: Option<Arc<GenericParams>>,\n     pub params: Vec<GenericParam>,\n     pub where_predicates: Vec<WherePredicate>,\n@@ -56,7 +55,7 @@ impl GenericParams {\n         parent_params: Option<Arc<GenericParams>>,\n     ) -> GenericParams {\n         let mut generics =\n-            GenericParams { def, params: Vec::new(), parent_params, where_predicates: Vec::new() };\n+            GenericParams { params: Vec::new(), parent_params, where_predicates: Vec::new() };\n         let start = generics.parent_params.as_ref().map(|p| p.params.len()).unwrap_or(0) as u32;\n         // FIXME: add `: Sized` bound for everything except for `Self` in traits\n         match def {"}]}