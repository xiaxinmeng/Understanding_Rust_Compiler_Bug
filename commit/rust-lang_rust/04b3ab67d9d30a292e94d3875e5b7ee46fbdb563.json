{"sha": "04b3ab67d9d30a292e94d3875e5b7ee46fbdb563", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YjNhYjY3ZDlkMzBhMjkyZTk0ZDM4NzVlNWI3ZWU0NmZiZGI1NjM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-04-11T11:31:37Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-04-14T10:21:46Z"}, "message": "Encode items before encoding the list of AllocIds", "tree": {"sha": "be0531a7747a90b32043e30b5b31f4949901b975", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be0531a7747a90b32043e30b5b31f4949901b975"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04b3ab67d9d30a292e94d3875e5b7ee46fbdb563", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlrR1josHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MAQ5\n8Q//WO7zy8qthUzfBDxUWN6yVhQk8cS8fI9PvVOwAW+2QMYSsEJ1geiBrWhume82\nQPUqc3zX6Jz206Q93+BRNXm2kJ4bWC2+9h6LCRGqLHFP1T6Zr7SeOR+iepH3L61n\nAHZkwJbahiwhqMJFpcdj3J1S9lXoMmhT5KJEjbZ/RwjSYU/uvCQCDk4AD9blcT6y\nfWX7MZwLsiCwbOvp7t+fXBDLmTnguSQv3stb95mQlEtd8vUJlHV53iZEMc0W7HUk\nGssRpu49a4Ycbp0892MgtAY6d4cnVWOI0ZK/zuP2pfS3IZEAn9+T6p9pQTH71HFI\ncHi+rxrwzt83+XVPYQwJxbBg3AzZCNRvxlkJ6ranSi7EAzqraeJCo0RUsbHHShs1\nxJfIkyj12nROb5JNHS0lyKlH6HxmdE0vQ1k29l/15vOMV/9GpRKhCNJ+5Q9QPFuY\nPtNM6a+W4Ym4jlvX9sUrA51e4pJOmU0fCwQCEPG7ZAyakGxl2GLfP5JbOuXYXl/r\naqJNu5EWPRLwsNvAzJYjtm3Upp2E8evlX6dueFnCTaKYsYwiCrZuZWnbIADXOAw8\nCCtt1XAg0xoYruhuVGhyxDw5/5XndAFGeolz1G2b2vzMS8AwD3p9lhKXSygmSlEv\n87fkzfEO0TYr0p7r+ifzvmmwbCB9KMsfsitgBG9H3ZFU0JU=\n=u7wM\n-----END PGP SIGNATURE-----", "payload": "tree be0531a7747a90b32043e30b5b31f4949901b975\nparent 6f251c2a0318cc4b61c7f9e96113d2e31175d8fc\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1523446297 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1523701306 +0200\n\nEncode items before encoding the list of AllocIds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04b3ab67d9d30a292e94d3875e5b7ee46fbdb563", "html_url": "https://github.com/rust-lang/rust/commit/04b3ab67d9d30a292e94d3875e5b7ee46fbdb563", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04b3ab67d9d30a292e94d3875e5b7ee46fbdb563/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f251c2a0318cc4b61c7f9e96113d2e31175d8fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f251c2a0318cc4b61c7f9e96113d2e31175d8fc", "html_url": "https://github.com/rust-lang/rust/commit/6f251c2a0318cc4b61c7f9e96113d2e31175d8fc"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "5ecfbd7c6fba3faddfde926ecc8812013d76fab6", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/04b3ab67d9d30a292e94d3875e5b7ee46fbdb563/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b3ab67d9d30a292e94d3875e5b7ee46fbdb563/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=04b3ab67d9d30a292e94d3875e5b7ee46fbdb563", "patch": "@@ -445,12 +445,24 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         let tcx = self.tcx;\n \n+        // Encode the items.\n+        i = self.position();\n+        let items = self.encode_info_for_items();\n+        let item_bytes = self.position() - i;\n+\n         // Encode the allocation index\n         let interpret_alloc_index = {\n             let mut interpret_alloc_index = Vec::new();\n             let mut n = 0;\n+            trace!(\"beginning to encode alloc ids\");\n             loop {\n                 let new_n = self.interpret_alloc_ids.len();\n+                // if we have found new ids, serialize those, too\n+                if n == new_n {\n+                    // otherwise, abort\n+                    break;\n+                }\n+                trace!(\"encoding {} further alloc ids\", new_n - n);\n                 for idx in n..new_n {\n                     let id = self.interpret_allocs_inverse[idx];\n                     let pos = self.position() as u32;\n@@ -461,21 +473,12 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                         id,\n                     ).unwrap();\n                 }\n-                // if we have found new ids, serialize those, too\n-                if n == new_n {\n-                    // otherwise, abort\n-                    break;\n-                }\n                 n = new_n;\n             }\n             self.lazy_seq(interpret_alloc_index)\n         };\n \n-        // Encode and index the items.\n-        i = self.position();\n-        let items = self.encode_info_for_items();\n-        let item_bytes = self.position() - i;\n-\n+        // Index the items\n         i = self.position();\n         let index = items.write_index(&mut self.opaque.cursor);\n         let index_bytes = self.position() - i;"}]}