{"sha": "d7a74be09b3c3d5ad015be31c51208260aa85007", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YTc0YmUwOWIzYzNkNWFkMDE1YmUzMWM1MTIwODI2MGFhODUwMDc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-09-04T17:41:33Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-09-05T10:34:16Z"}, "message": "Fix incorrect outer function type parameter message", "tree": {"sha": "12af8e4d4fe2287e58d8a3aa25071a4dbf4afb2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12af8e4d4fe2287e58d8a3aa25071a4dbf4afb2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7a74be09b3c3d5ad015be31c51208260aa85007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a74be09b3c3d5ad015be31c51208260aa85007", "html_url": "https://github.com/rust-lang/rust/commit/d7a74be09b3c3d5ad015be31c51208260aa85007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7a74be09b3c3d5ad015be31c51208260aa85007/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c2e17f4e3a2070a7f703f51e29c1c388ef703b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c2e17f4e3a2070a7f703f51e29c1c388ef703b6", "html_url": "https://github.com/rust-lang/rust/commit/1c2e17f4e3a2070a7f703f51e29c1c388ef703b6"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "19a4fdae485960c695afecfa4242d424b6f02041", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7a74be09b3c3d5ad015be31c51208260aa85007/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a74be09b3c3d5ad015be31c51208260aa85007/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d7a74be09b3c3d5ad015be31c51208260aa85007", "patch": "@@ -197,13 +197,15 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             err.span_label(span, \"use of type variable from outer function\");\n \n             let cm = resolver.session.source_map();\n+            let mut is_self = false;\n             match outer_def {\n                 Def::SelfTy(_, maybe_impl_defid) => {\n                     if let Some(impl_span) = maybe_impl_defid.map_or(None,\n                             |def_id| resolver.definitions.opt_span(def_id)) {\n                         err.span_label(reduce_impl_span_to_impl_keyword(cm, impl_span),\n                                     \"`Self` type implicitly declared here, on the `impl`\");\n                     }\n+                    is_self = true;\n                 },\n                 Def::TyParam(typaram_defid) => {\n                     if let Some(typaram_span) = resolver.definitions.opt_span(typaram_defid) {\n@@ -219,7 +221,12 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             // Try to retrieve the span of the function signature and generate a new message with\n             // a local type parameter\n             let sugg_msg = \"try using a local type parameter instead\";\n-            if let Some((sugg_span, new_snippet)) = cm.generate_local_type_param_snippet(span) {\n+            if is_self {\n+                // Suggest using the actual type\n+                err.span_label(span, \"use a materialized type here instead\");\n+            } else if let Some(\n+                (sugg_span, new_snippet),\n+            ) = cm.generate_local_type_param_snippet(span) {\n                 // Suggest the modification to the user\n                 err.span_suggestion_with_applicability(\n                     sugg_span,"}, {"sha": "90e8d2d2479da8f8958c13beff88c24cd2bb0731", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7a74be09b3c3d5ad015be31c51208260aa85007/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7a74be09b3c3d5ad015be31c51208260aa85007/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=d7a74be09b3c3d5ad015be31c51208260aa85007", "patch": "@@ -27,9 +27,10 @@ LL | impl<T> Iterator for A<T> {\n    | ---- `Self` type implicitly declared here, on the `impl`\n ...\n LL |         fn helper(sel: &Self) -> u8 { //~ ERROR E0401\n-   |            ------       ^^^^ use of type variable from outer function\n-   |            |\n-   |            help: try using a local type parameter instead: `helper<Self>`\n+   |                         ^^^^\n+   |                         |\n+   |                         use of type variable from outer function\n+   |                         use a materialized type here instead\n \n error: aborting due to 3 previous errors\n "}, {"sha": "078c1db5de5943fd2fdf1744c6875d33fd793e9b", "filename": "src/test/ui/issues/issue-12796.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7a74be09b3c3d5ad015be31c51208260aa85007/src%2Ftest%2Fui%2Fissues%2Fissue-12796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7a74be09b3c3d5ad015be31c51208260aa85007/src%2Ftest%2Fui%2Fissues%2Fissue-12796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12796.stderr?ref=d7a74be09b3c3d5ad015be31c51208260aa85007", "patch": "@@ -2,9 +2,10 @@ error[E0401]: can't use type parameters from outer function\n   --> $DIR/issue-12796.rs:13:22\n    |\n LL |         fn inner(_: &Self) {\n-   |            -----     ^^^^ use of type variable from outer function\n-   |            |\n-   |            help: try using a local type parameter instead: `inner<Self>`\n+   |                      ^^^^\n+   |                      |\n+   |                      use of type variable from outer function\n+   |                      use a materialized type here instead\n \n error: aborting due to previous error\n "}, {"sha": "a1183854eb50a5688db15f5e6746393d48368719", "filename": "src/test/ui/use-self-in-inner-fn.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d7a74be09b3c3d5ad015be31c51208260aa85007/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a74be09b3c3d5ad015be31c51208260aa85007/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.rs?ref=d7a74be09b3c3d5ad015be31c51208260aa85007", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A;\n+\n+impl A {\n+//~^ NOTE `Self` type implicitly declared here, on the `impl`\n+    fn banana(&mut self) {\n+        fn peach(this: &Self) {\n+        //~^ ERROR can't use type parameters from outer function\n+        //~| NOTE use of type variable from outer function\n+        //~| NOTE use a materialized type here instead\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "c14e4895d99308828127087b42fee49b57ccb6d0", "filename": "src/test/ui/use-self-in-inner-fn.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d7a74be09b3c3d5ad015be31c51208260aa85007/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7a74be09b3c3d5ad015be31c51208260aa85007/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.stderr?ref=d7a74be09b3c3d5ad015be31c51208260aa85007", "patch": "@@ -0,0 +1,15 @@\n+error[E0401]: can't use type parameters from outer function\n+  --> $DIR/use-self-in-inner-fn.rs:16:25\n+   |\n+LL | impl A {\n+   | ---- `Self` type implicitly declared here, on the `impl`\n+...\n+LL |         fn peach(this: &Self) {\n+   |                         ^^^^\n+   |                         |\n+   |                         use of type variable from outer function\n+   |                         use a materialized type here instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0401`."}]}