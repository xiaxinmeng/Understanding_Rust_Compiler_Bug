{"sha": "d588f9338da3f29f03216e2f2685df5b7ad3d0b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ODhmOTMzOGRhM2YyOWYwMzIxNmUyZjI2ODVkZjViN2FkM2QwYjM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-11-03T19:41:15Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-11-03T19:41:15Z"}, "message": "Shorten paths to auxiliary files created by tests", "tree": {"sha": "b1e69fa04552e6d47cc1543e760482d38a1a2592", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1e69fa04552e6d47cc1543e760482d38a1a2592"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d588f9338da3f29f03216e2f2685df5b7ad3d0b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d588f9338da3f29f03216e2f2685df5b7ad3d0b3", "html_url": "https://github.com/rust-lang/rust/commit/d588f9338da3f29f03216e2f2685df5b7ad3d0b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d588f9338da3f29f03216e2f2685df5b7ad3d0b3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "525b81d570b15df2ed5896f0215baea5c64c650c", "url": "https://api.github.com/repos/rust-lang/rust/commits/525b81d570b15df2ed5896f0215baea5c64c650c", "html_url": "https://github.com/rust-lang/rust/commit/525b81d570b15df2ed5896f0215baea5c64c650c"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "8401d493b9dbf575eabf6a72c0fdba8c54cd4a2d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d588f9338da3f29f03216e2f2685df5b7ad3d0b3/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d588f9338da3f29f03216e2f2685df5b7ad3d0b3/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=d588f9338da3f29f03216e2f2685df5b7ad3d0b3", "patch": "@@ -410,7 +410,7 @@ impl_stable_hash_for!(struct self::OutputFilenames {\n     outputs\n });\n \n-pub const RUST_CGU_EXT: &str = \"rust-cgu\";\n+pub const RUST_CGU_EXT: &str = \"rcgu\";\n \n impl OutputFilenames {\n     pub fn path(&self, flavor: OutputType) -> PathBuf {"}, {"sha": "907693ea8a379ee179908b9132eefaf70cc02dcf", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d588f9338da3f29f03216e2f2685df5b7ad3d0b3/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d588f9338da3f29f03216e2f2685df5b7ad3d0b3/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=d588f9338da3f29f03216e2f2685df5b7ad3d0b3", "patch": "@@ -1222,7 +1222,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n                 let canonical = f.replace(\"-\", \"_\");\n                 let canonical_name = name.replace(\"-\", \"_\");\n \n-                // Look for `.rust-cgu.o` at the end of the filename to conclude\n+                // Look for `.rcgu.o` at the end of the filename to conclude\n                 // that this is a Rust-related object file.\n                 fn looks_like_rust(s: &str) -> bool {\n                     let path = Path::new(s);"}, {"sha": "6de4f97df0c16bf6df2b83c8fec542a2e8198910", "filename": "src/test/run-make/extra-filename-with-temp-outputs/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d588f9338da3f29f03216e2f2685df5b7ad3d0b3/src%2Ftest%2Frun-make%2Fextra-filename-with-temp-outputs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d588f9338da3f29f03216e2f2685df5b7ad3d0b3/src%2Ftest%2Frun-make%2Fextra-filename-with-temp-outputs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextra-filename-with-temp-outputs%2FMakefile?ref=d588f9338da3f29f03216e2f2685df5b7ad3d0b3", "patch": "@@ -2,5 +2,5 @@\n \n all:\n \t$(RUSTC) -C extra-filename=bar foo.rs -C save-temps\n-\trm $(TMPDIR)/foobar.foo0.rust-cgu.o\n+\trm $(TMPDIR)/foobar.foo0.rcgu.o\n \trm $(TMPDIR)/$(call BIN,foobar)"}, {"sha": "660462ad419f70c70a047590c735a102dcc7f0ee", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d588f9338da3f29f03216e2f2685df5b7ad3d0b3/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d588f9338da3f29f03216e2f2685df5b7ad3d0b3/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=d588f9338da3f29f03216e2f2685df5b7ad3d0b3", "patch": "@@ -34,6 +34,20 @@ pub enum Mode {\n     MirOpt,\n }\n \n+impl Mode {\n+    pub fn disambiguator(self) -> &'static str {\n+        // Run-pass and pretty run-pass tests could run concurrently, and if they do,\n+        // they need to keep their output segregated. Same is true for debuginfo tests that\n+        // can be run both on gdb and lldb.\n+        match self {\n+            Pretty => \".pretty\",\n+            DebugInfoGdb => \".gdb\",\n+            DebugInfoLldb => \".lldb\",\n+            _ => \"\",\n+        }\n+    }\n+}\n+\n impl FromStr for Mode {\n     type Err = ();\n     fn from_str(s: &str) -> Result<Mode, ()> {"}, {"sha": "17fa19afdd2bb51d2f48ee1afe84496327c59542", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d588f9338da3f29f03216e2f2685df5b7ad3d0b3/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d588f9338da3f29f03216e2f2685df5b7ad3d0b3/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=d588f9338da3f29f03216e2f2685df5b7ad3d0b3", "patch": "@@ -1565,7 +1565,7 @@ actual:\\n\\\n     fn aux_output_dir_name(&self) -> PathBuf {\n         let f = self.output_base_name();\n         let mut fname = f.file_name().unwrap().to_os_string();\n-        fname.push(&format!(\".{}.libaux\", self.config.mode));\n+        fname.push(&format!(\"{}.aux\", self.config.mode.disambiguator()));\n         f.with_file_name(&fname)\n     }\n "}]}