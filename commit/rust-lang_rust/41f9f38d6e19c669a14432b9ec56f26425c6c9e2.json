{"sha": "41f9f38d6e19c669a14432b9ec56f26425c6c9e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZjlmMzhkNmUxOWM2NjlhMTQ0MzJiOWVjNTZmMjY0MjVjNmM5ZTI=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-08-21T23:45:56Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-08-22T01:45:11Z"}, "message": "Remove `Session.trait_methods_not_found`\n\nInstead, avoid registering the problematic well-formed obligation\nto begin with. This removes global untracked mutable state,\nand avoids potential issues with incremental compilation.", "tree": {"sha": "cad6265947d0823ddc489af5427f6c7d7ef6da4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cad6265947d0823ddc489af5427f6c7d7ef6da4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41f9f38d6e19c669a14432b9ec56f26425c6c9e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmEhrGwACgkQtAh+UQ6Y\nsWRzEw//VdnXZrB5lBfqEU6umm1KEQza/8RCZHOqB8ftIEkfNxZUauUhygklSqan\nheTmhPGIXvSDtGCjrottE6VusRdNZBLjAliR54SqEm5erZD4ZYrY1JUD3JE9Xl6n\nA63onoU/GduVmdyC1ktFqvzTEq9VbAwg/peaJ/idgAz9hHYRWSx3Dbzsv7ccgUEx\nSLVOKkGsPBIJH1v5zVRmrDCZZuZuk9/Y9NHQel9nR/tOAOJLIQqD0x+Ec7dsZfPk\nWLFnZUuz0BHPyULI3Sma4bwriUdRYS2RdCiGRG7wzcfWStBc5Trq4pyvTjABEBar\nBhr3y6671bMf+oFlGodZtSDvLBxqOYgeKfUB66oW4ZsHmVZ6JPFlLpsbRr2Plg6O\nlauibpiKH7cXzwH0EFrHEGCE1/YqIvjS4e3Tf3zc+t4/v2vsBkejdXhzdwUFJwYI\nJiuQDb52jzGLK8hua0gcTCEYXBKAHiikbCqy3Mkcca0e8dobZ8rFG1i6NDqFTwR3\nKbmeRFs/l6O+4ahEpHI3ZIrEENnDbyFkEe2p5HUwPhfJEpzh0uQJkEh1NnQmaUCj\nF38VDNMoQT9MokeSLrtpF/TvmCXExkhFd6pMFnXjuooUbqfGnxYpprdJLiDzdFHZ\nMAgkp3q5YpFccRQZuS2r2v5em5mVxyg+XYwB4Vli9f/8c9BGUzc=\n=3BO7\n-----END PGP SIGNATURE-----", "payload": "tree cad6265947d0823ddc489af5427f6c7d7ef6da4c\nparent b6e334d87349502766be70d649e6fe4a73573482\nauthor Aaron Hill <aa1ronham@gmail.com> 1629589556 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1629596711 -0500\n\nRemove `Session.trait_methods_not_found`\n\nInstead, avoid registering the problematic well-formed obligation\nto begin with. This removes global untracked mutable state,\nand avoids potential issues with incremental compilation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41f9f38d6e19c669a14432b9ec56f26425c6c9e2", "html_url": "https://github.com/rust-lang/rust/commit/41f9f38d6e19c669a14432b9ec56f26425c6c9e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41f9f38d6e19c669a14432b9ec56f26425c6c9e2/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6e334d87349502766be70d649e6fe4a73573482", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e334d87349502766be70d649e6fe4a73573482", "html_url": "https://github.com/rust-lang/rust/commit/b6e334d87349502766be70d649e6fe4a73573482"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "d0bd508bc257f2dfd4fd63b71bdd0e65c669a7f2", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41f9f38d6e19c669a14432b9ec56f26425c6c9e2/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f9f38d6e19c669a14432b9ec56f26425c6c9e2/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=41f9f38d6e19c669a14432b9ec56f26425c6c9e2", "patch": "@@ -104,11 +104,5 @@ pub fn report_object_safety_error(\n          to be resolvable dynamically; for more information visit \\\n          <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\",\n     );\n-\n-    if tcx.sess.trait_methods_not_found.borrow().iter().any(|full_span| full_span.contains(span)) {\n-        // Avoid emitting error caused by non-existing method (#58734)\n-        err.cancel();\n-    }\n-\n     err\n }"}, {"sha": "fabdebfb2127bf615fe3c6d0ec503f9e95d1bc68", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41f9f38d6e19c669a14432b9ec56f26425c6c9e2/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f9f38d6e19c669a14432b9ec56f26425c6c9e2/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=41f9f38d6e19c669a14432b9ec56f26425c6c9e2", "patch": "@@ -189,9 +189,6 @@ pub struct Session {\n     /// Cap lint level specified by a driver specifically.\n     pub driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n \n-    /// `Span`s of trait methods that weren't found to avoid emitting object safety errors\n-    pub trait_methods_not_found: Lock<FxHashSet<Span>>,\n-\n     /// Mapping from ident span to path span for paths that don't exist as written, but that\n     /// exist under `std`. For example, wrote `str::from_utf8` instead of `std::str::from_utf8`.\n     pub confused_type_with_std_module: Lock<FxHashMap<Span, Span>>,\n@@ -1353,7 +1350,6 @@ pub fn build_session(\n         print_fuel,\n         jobserver: jobserver::client(),\n         driver_lint_caps,\n-        trait_methods_not_found: Lock::new(Default::default()),\n         confused_type_with_std_module: Lock::new(Default::default()),\n         ctfe_backtrace,\n         miri_unleashed_features: Lock::new(Default::default()),"}, {"sha": "8be57e4b3cab9e7dae5bf37c139a3a1535df812f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/41f9f38d6e19c669a14432b9ec56f26425c6c9e2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f9f38d6e19c669a14432b9ec56f26425c6c9e2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=41f9f38d6e19c669a14432b9ec56f26425c6c9e2", "patch": "@@ -858,13 +858,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     path.segments,\n                 );\n             }\n-            QPath::TypeRelative(ref qself, ref segment) => (self.to_ty(qself), qself, segment),\n+            QPath::TypeRelative(ref qself, ref segment) => {\n+                // Don't use `self.to_ty`, since this will register a WF obligation.\n+                // If we're trying to call a non-existent method on a trait\n+                // (e.g. `MyTrait::missing_method`), then resolution will\n+                // give us a `QPath::TypeRelative` with a trait object as\n+                // `qself`. In that case, we want to avoid registering a WF obligation\n+                // for `dyn MyTrait`, since we don't actually need the trait\n+                // to be object-safe.\n+                // We manually call `register_wf_obligation` in the success path\n+                // below.\n+                (<dyn AstConv<'_>>::ast_ty_to_ty(self, qself), qself, segment)\n+            }\n             QPath::LangItem(..) => {\n                 bug!(\"`resolve_ty_and_res_fully_qualified_call` called on `LangItem`\")\n             }\n         };\n         if let Some(&cached_result) = self.typeck_results.borrow().type_dependent_defs().get(hir_id)\n         {\n+            self.register_wf_obligation(ty.into(), qself.span, traits::WellFormed(None));\n             // Return directly on cache hit. This is useful to avoid doubly reporting\n             // errors with default match binding modes. See #44614.\n             let def = cached_result.map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id));\n@@ -878,6 +890,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     method::MethodError::PrivateMatch(kind, def_id, _) => Ok((kind, def_id)),\n                     _ => Err(ErrorReported),\n                 };\n+\n+                // If we have a path like `MyTrait::missing_method`, then don't register\n+                // a WF obligation for `dyn MyTrait` when method lookup fails. Otherwise,\n+                // register a WF obligation so that we can detect any additional\n+                // errors in the self type.\n+                if !(matches!(error, method::MethodError::NoMatch(_)) && ty.is_trait()) {\n+                    self.register_wf_obligation(ty.into(), qself.span, traits::WellFormed(None));\n+                }\n                 if item_name.name != kw::Empty {\n                     if let Some(mut e) = self.report_method_error(\n                         span,\n@@ -895,6 +915,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if result.is_ok() {\n             self.maybe_lint_bare_trait(qpath, hir_id);\n+            self.register_wf_obligation(ty.into(), qself.span, traits::WellFormed(None));\n         }\n \n         // Write back the new resolution."}, {"sha": "afe274a2a796e11e8b2c39d911eac04dab0b2fba", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41f9f38d6e19c669a14432b9ec56f26425c6c9e2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f9f38d6e19c669a14432b9ec56f26425c6c9e2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=41f9f38d6e19c669a14432b9ec56f26425c6c9e2", "patch": "@@ -70,15 +70,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub fn report_method_error(\n         &self,\n-        span: Span,\n+        mut span: Span,\n         rcvr_ty: Ty<'tcx>,\n         item_name: Ident,\n         source: SelfSource<'tcx>,\n         error: MethodError<'tcx>,\n         args: Option<&'tcx [hir::Expr<'tcx>]>,\n     ) -> Option<DiagnosticBuilder<'_>> {\n-        let orig_span = span;\n-        let mut span = span;\n         // Avoid suggestions when we don't know what's going on.\n         if rcvr_ty.references_error() {\n             return None;\n@@ -545,7 +543,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     } else {\n                         err.span_label(span, format!(\"{item_kind} cannot be called on `{ty_str}` due to unsatisfied trait bounds\"));\n                     }\n-                    self.tcx.sess.trait_methods_not_found.borrow_mut().insert(orig_span);\n                 };\n \n                 // If the method name is the name of a field with a function or closure type,"}]}