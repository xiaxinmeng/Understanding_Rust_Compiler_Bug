{"sha": "033f93fbb98c3fb9bd09858f5b822789a4339de8", "node_id": "C_kwDOAAsO6NoAKDAzM2Y5M2ZiYjk4YzNmYjliZDA5ODU4ZjViODIyNzg5YTQzMzlkZTg", "commit": {"author": {"name": "fee1-dead", "email": "ent3rm4n@gmail.com", "date": "2022-09-25T14:06:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-25T14:06:36Z"}, "message": "Rollup merge of #98111 - eggyal:issue-97982, r=GuillaumeGomez\n\nClarify `[T]::select_nth_unstable*` return values\n\nIn cases where the nth element is not unique within the slice, it is not\ncorrect to say that the values in the returned triplet include ones for\n\"all elements\" less/greater than that at the given index: indeed one (or\nmore) such values would then also contain elements equal to that at\nthe given index.\n\nThe text proposed here clarifies exactly what is returned, but in so\ndoing it is also documenting an implementation detail that previously\nwasn't detailed: namely that the returned slices are slices into the\nreordered slice.  I don't think this can be contentious, because the\nlifetimes of those returned slices are bound to that of the original\n(now reordered) slice\u2014so there really isn't any other reasonable\nimplementation that could have this behaviour; but nevertheless it's\nprobably best if `@rust-lang/libs-api` give it a nod?\n\nFixes #97982\nr? `@m-ou-se`\n\n`@rustbot` label +A-docs +C-bug +T-libs-api -T-libs", "tree": {"sha": "6e6154956c6abe0fdd62096712f757ca5a6f707f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e6154956c6abe0fdd62096712f757ca5a6f707f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/033f93fbb98c3fb9bd09858f5b822789a4339de8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjMGBsCRBK7hj4Ov3rIwAArjAIAI780iYUPsejcWcE63UPEYKy\nCW0gW1Kmdjky66vwWAiipu9ebfBC7ov9REVz3rdfIS2sJrQS9u3dUyNgo3IZjuKw\nLJeWhlKhPPFDoimocB8+m/56SaBorHNVf8n9Pew3q9sljlpo96uHDnkk2OGP77XK\n0goz9HKDkAqRYL/zLX+E8R0UZnV1Ummca2z61v9W7KI7SLdPgToxmKSkbJiG6kYC\nu9VZC38/ZXOPU7iJjxx53DXwTYNiO4ix7JDfAJE9yU+9Kuz9et0SCeJDaRWtmcGm\n0cVBTjvXDCsH4czi5wgKJGmewzcEQFFkFInZGr1ZHhtONeWFe/TdYEZT3B6rv1c=\n=F7qc\n-----END PGP SIGNATURE-----\n", "payload": "tree 6e6154956c6abe0fdd62096712f757ca5a6f707f\nparent 6f6010b08bd5e5dd0d03d4abf35a3acc4d2433a2\nparent 97bd49bf2d1d7604dc0a5040edb2a550adf5497b\nauthor fee1-dead <ent3rm4n@gmail.com> 1664114796 +0800\ncommitter GitHub <noreply@github.com> 1664114796 +0800\n\nRollup merge of #98111 - eggyal:issue-97982, r=GuillaumeGomez\n\nClarify `[T]::select_nth_unstable*` return values\n\nIn cases where the nth element is not unique within the slice, it is not\ncorrect to say that the values in the returned triplet include ones for\n\"all elements\" less/greater than that at the given index: indeed one (or\nmore) such values would then also contain elements equal to that at\nthe given index.\n\nThe text proposed here clarifies exactly what is returned, but in so\ndoing it is also documenting an implementation detail that previously\nwasn't detailed: namely that the returned slices are slices into the\nreordered slice.  I don't think this can be contentious, because the\nlifetimes of those returned slices are bound to that of the original\n(now reordered) slice\u2014so there really isn't any other reasonable\nimplementation that could have this behaviour; but nevertheless it's\nprobably best if `@rust-lang/libs-api` give it a nod?\n\nFixes #97982\nr? `@m-ou-se`\n\n`@rustbot` label +A-docs +C-bug +T-libs-api -T-libs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/033f93fbb98c3fb9bd09858f5b822789a4339de8", "html_url": "https://github.com/rust-lang/rust/commit/033f93fbb98c3fb9bd09858f5b822789a4339de8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/033f93fbb98c3fb9bd09858f5b822789a4339de8/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f6010b08bd5e5dd0d03d4abf35a3acc4d2433a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6010b08bd5e5dd0d03d4abf35a3acc4d2433a2", "html_url": "https://github.com/rust-lang/rust/commit/6f6010b08bd5e5dd0d03d4abf35a3acc4d2433a2"}, {"sha": "97bd49bf2d1d7604dc0a5040edb2a550adf5497b", "url": "https://api.github.com/repos/rust-lang/rust/commits/97bd49bf2d1d7604dc0a5040edb2a550adf5497b", "html_url": "https://github.com/rust-lang/rust/commit/97bd49bf2d1d7604dc0a5040edb2a550adf5497b"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "fcfa9c845123a4d376848171b1de33ba926bf694", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/033f93fbb98c3fb9bd09858f5b822789a4339de8/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033f93fbb98c3fb9bd09858f5b822789a4339de8/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=033f93fbb98c3fb9bd09858f5b822789a4339de8", "patch": "@@ -2643,9 +2643,10 @@ impl<T> [T] {\n     /// less than or equal to any value at a position `j > index`. Additionally, this reordering is\n     /// unstable (i.e. any number of equal elements may end up at position `index`), in-place\n     /// (i.e. does not allocate), and *O*(*n*) worst-case. This function is also/ known as \"kth\n-    /// element\" in other libraries. It returns a triplet of the following values: all elements less\n-    /// than the one at the given index, the value at the given index, and all elements greater than\n-    /// the one at the given index.\n+    /// element\" in other libraries. It returns a triplet of the following from the reordered slice:\n+    /// the subslice prior to `index`, the element at `index`, and the subslice after `index`;\n+    /// accordingly, the values in those two subslices will respectively all be less-than-or-equal-to\n+    /// and greater-than-or-equal-to the value of the element at `index`.\n     ///\n     /// # Current implementation\n     ///\n@@ -2689,10 +2690,11 @@ impl<T> [T] {\n     /// less than or equal to any value at a position `j > index` using the comparator function.\n     /// Additionally, this reordering is unstable (i.e. any number of equal elements may end up at\n     /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) worst-case. This function\n-    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following\n-    /// values: all elements less than the one at the given index, the value at the given index,\n-    /// and all elements greater than the one at the given index, using the provided comparator\n-    /// function.\n+    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following from\n+    /// the slice reordered according to the provided comparator function: the subslice prior to\n+    /// `index`, the element at `index`, and the subslice after `index`; accordingly, the values in\n+    /// those two subslices will respectively all be less-than-or-equal-to and greater-than-or-equal-to\n+    /// the value of the element at `index`.\n     ///\n     /// # Current implementation\n     ///\n@@ -2740,10 +2742,11 @@ impl<T> [T] {\n     /// less than or equal to any value at a position `j > index` using the key extraction function.\n     /// Additionally, this reordering is unstable (i.e. any number of equal elements may end up at\n     /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) worst-case. This function\n-    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following\n-    /// values: all elements less than the one at the given index, the value at the given index, and\n-    /// all elements greater than the one at the given index, using the provided key extraction\n-    /// function.\n+    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following from\n+    /// the slice reordered according to the provided key extraction function: the subslice prior to\n+    /// `index`, the element at `index`, and the subslice after `index`; accordingly, the values in\n+    /// those two subslices will respectively all be less-than-or-equal-to and greater-than-or-equal-to\n+    /// the value of the element at `index`.\n     ///\n     /// # Current implementation\n     ///"}]}