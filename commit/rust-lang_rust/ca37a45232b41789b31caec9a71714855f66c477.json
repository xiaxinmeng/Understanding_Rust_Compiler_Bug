{"sha": "ca37a45232b41789b31caec9a71714855f66c477", "node_id": "C_kwDOAAsO6NoAKGNhMzdhNDUyMzJiNDE3ODliMzFjYWVjOWE3MTcxNDg1NWY2NmM0Nzc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-02T06:09:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-02T06:09:22Z"}, "message": "Auto merge of #100048 - matthiaskrgr:rollup-agimvm6, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #99156 (`codegen_fulfill_obligation` expect erased regions)\n - #99293 (only run --all-targets in stage0 for Std)\n - #99779 (Fix item info pos and height)\n - #99994 (Remove `guess_head_span`)\n - #100011 (Use Parser's `restrictions` instead of `let_expr_allowed`)\n - #100017 (kmc-solid: Update `Socket::connect_timeout` to be in line with #78802)\n - #100037 (Update rustc man page to match `rustc --help`)\n - #100042 (Update books)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "27b0f48de73c23bf4e8751255bbc490663a450a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27b0f48de73c23bf4e8751255bbc490663a450a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca37a45232b41789b31caec9a71714855f66c477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca37a45232b41789b31caec9a71714855f66c477", "html_url": "https://github.com/rust-lang/rust/commit/ca37a45232b41789b31caec9a71714855f66c477", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca37a45232b41789b31caec9a71714855f66c477/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9538d2d0f1c708affa36ef8917729efec2e5e0ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/9538d2d0f1c708affa36ef8917729efec2e5e0ed", "html_url": "https://github.com/rust-lang/rust/commit/9538d2d0f1c708affa36ef8917729efec2e5e0ed"}, {"sha": "6ab19fd4f505443919545b70890c86c0bfb3d2aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ab19fd4f505443919545b70890c86c0bfb3d2aa", "html_url": "https://github.com/rust-lang/rust/commit/6ab19fd4f505443919545b70890c86c0bfb3d2aa"}], "stats": {"total": 742, "additions": 418, "deletions": 324}, "files": [{"sha": "0424b5a7c442a0c81d91d9a63965c9b39116f144", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca37a45232b41789b31caec9a71714855f66c477/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca37a45232b41789b31caec9a71714855f66c477/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -8,7 +8,7 @@ pub use self::ValuePairs::*;\n use self::opaque_types::OpaqueTypeStorage;\n pub(crate) use self::undo_log::{InferCtxtUndoLogs, Snapshot, UndoLog};\n \n-use crate::traits::{self, ObligationCause, PredicateObligations, TraitEngine};\n+use crate::traits::{self, ObligationCause, PredicateObligations, TraitEngine, TraitEngineExt};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n@@ -645,9 +645,7 @@ impl<'tcx, T> InferOk<'tcx, T> {\n         fulfill_cx: &mut dyn TraitEngine<'tcx>,\n     ) -> T {\n         let InferOk { value, obligations } = self;\n-        for obligation in obligations {\n-            fulfill_cx.register_predicate_obligation(infcx, obligation);\n-        }\n+        fulfill_cx.register_predicate_obligations(infcx, obligations);\n         value\n     }\n }"}, {"sha": "e473f4d30cf093c54cff8923363fb99b78027b5a", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 17, "deletions": 39, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ca37a45232b41789b31caec9a71714855f66c477/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca37a45232b41789b31caec9a71714855f66c477/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -1391,8 +1391,6 @@ impl<'a> Parser<'a> {\n         } else if self.is_do_yeet() {\n             self.parse_yeet_expr(attrs)\n         } else if self.check_keyword(kw::Let) {\n-            self.manage_let_chains_context();\n-            self.bump();\n             self.parse_let_expr(attrs)\n         } else if self.eat_keyword(kw::Underscore) {\n             Ok(self.mk_expr(self.prev_token.span, ExprKind::Underscore, attrs))\n@@ -2342,32 +2340,24 @@ impl<'a> Parser<'a> {\n \n     /// Parses the condition of a `if` or `while` expression.\n     fn parse_cond_expr(&mut self) -> PResult<'a, P<Expr>> {\n-        self.with_let_management(true, |local_self| {\n-            local_self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)\n-        })\n+        self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL | Restrictions::ALLOW_LET, None)\n     }\n \n-    // Checks if `let` is in an invalid position like `let x = let y = 1;` or\n-    // if the current `let` is in a let_chains context but nested in another\n-    // expression like `if let Some(_) = _opt && [1, 2, 3][let _ = ()] = 1`.\n-    //\n-    // This method expects that the current token is `let`.\n-    fn manage_let_chains_context(&mut self) {\n-        debug_assert!(matches!(self.token.kind, TokenKind::Ident(kw::Let, _)));\n-        let is_in_a_let_chains_context_but_nested_in_other_expr = self.let_expr_allowed\n-            && !matches!(\n-                self.prev_token.kind,\n-                TokenKind::AndAnd | TokenKind::Ident(kw::If, _) | TokenKind::Ident(kw::While, _)\n-            );\n-        if !self.let_expr_allowed || is_in_a_let_chains_context_but_nested_in_other_expr {\n+    /// Parses a `let $pat = $expr` pseudo-expression.\n+    fn parse_let_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n+        // This is a *approximate* heuristic that detects if `let` chains are\n+        // being parsed in the right position. It's approximate because it\n+        // doesn't deny all invalid `let` expressions, just completely wrong usages.\n+        let not_in_chain = !matches!(\n+            self.prev_token.kind,\n+            TokenKind::AndAnd | TokenKind::Ident(kw::If, _) | TokenKind::Ident(kw::While, _)\n+        );\n+        if !self.restrictions.contains(Restrictions::ALLOW_LET) || not_in_chain {\n             self.struct_span_err(self.token.span, \"expected expression, found `let` statement\")\n                 .emit();\n         }\n-    }\n \n-    /// Parses a `let $pat = $expr` pseudo-expression.\n-    /// The `let` token has already been eaten.\n-    fn parse_let_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n+        self.bump(); // Eat `let` token\n         let lo = self.prev_token.span;\n         let pat = self.parse_pat_allow_top_alt(\n             None,\n@@ -2687,7 +2677,9 @@ impl<'a> Parser<'a> {\n         // `&&` tokens.\n         fn check_let_expr(expr: &Expr) -> bool {\n             match expr.kind {\n-                ExprKind::Binary(_, ref lhs, ref rhs) => check_let_expr(lhs) || check_let_expr(rhs),\n+                ExprKind::Binary(BinOp { node: BinOpKind::And, .. }, ref lhs, ref rhs) => {\n+                    check_let_expr(lhs) || check_let_expr(rhs)\n+                }\n                 ExprKind::Let(..) => true,\n                 _ => false,\n             }\n@@ -2703,9 +2695,8 @@ impl<'a> Parser<'a> {\n             )?;\n             let guard = if this.eat_keyword(kw::If) {\n                 let if_span = this.prev_token.span;\n-                let cond = this.with_let_management(true, |local_this| local_this.parse_expr())?;\n-                let has_let_expr = check_let_expr(&cond);\n-                if has_let_expr {\n+                let cond = this.parse_expr_res(Restrictions::ALLOW_LET, None)?;\n+                if check_let_expr(&cond) {\n                     let span = if_span.to(cond.span);\n                     this.sess.gated_spans.gate(sym::if_let_guard, span);\n                 }\n@@ -3279,17 +3270,4 @@ impl<'a> Parser<'a> {\n             Ok((res, trailing))\n         })\n     }\n-\n-    // Calls `f` with the internal `let_expr_allowed` set to `let_expr_allowed` and then\n-    // sets the internal `let_expr_allowed` back to its original value.\n-    fn with_let_management<T>(\n-        &mut self,\n-        let_expr_allowed: bool,\n-        f: impl FnOnce(&mut Self) -> T,\n-    ) -> T {\n-        let last_let_expr_allowed = mem::replace(&mut self.let_expr_allowed, let_expr_allowed);\n-        let rslt = f(self);\n-        self.let_expr_allowed = last_let_expr_allowed;\n-        rslt\n-    }\n }"}, {"sha": "0c523ad22c205e7c7fa679c0b8f85e33cd410b7c", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca37a45232b41789b31caec9a71714855f66c477/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca37a45232b41789b31caec9a71714855f66c477/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -47,6 +47,7 @@ bitflags::bitflags! {\n         const STMT_EXPR         = 1 << 0;\n         const NO_STRUCT_LITERAL = 1 << 1;\n         const CONST_EXPR        = 1 << 2;\n+        const ALLOW_LET         = 1 << 3;\n     }\n }\n \n@@ -147,15 +148,12 @@ pub struct Parser<'a> {\n     /// This allows us to recover when the user forget to add braces around\n     /// multiple statements in the closure body.\n     pub current_closure: Option<ClosureSpans>,\n-    /// Used to track where `let`s are allowed. For example, `if true && let 1 = 1` is valid\n-    /// but `[1, 2, 3][let _ = ()]` is not.\n-    let_expr_allowed: bool,\n }\n \n // This type is used a lot, e.g. it's cloned when matching many declarative macro rules. Make sure\n // it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Parser<'_>, 336);\n+rustc_data_structures::static_assert_size!(Parser<'_>, 328);\n \n /// Stores span information about a closure.\n #[derive(Clone)]\n@@ -462,7 +460,6 @@ impl<'a> Parser<'a> {\n                 inner_attr_ranges: Default::default(),\n             },\n             current_closure: None,\n-            let_expr_allowed: false,\n         };\n \n         // Make parser point to the first token."}, {"sha": "4b575ea660a794ec5d811197408162dbeafff537", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca37a45232b41789b31caec9a71714855f66c477/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca37a45232b41789b31caec9a71714855f66c477/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -23,8 +23,6 @@ pub fn codegen_fulfill_obligation<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (param_env, trait_ref): (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>),\n ) -> Result<&'tcx ImplSource<'tcx, ()>, CodegenObligationError> {\n-    // Remove any references to regions; this helps improve caching.\n-    let trait_ref = tcx.erase_regions(trait_ref);\n     // We expect the input to be fully normalized.\n     debug_assert_eq!(trait_ref, tcx.normalize_erasing_regions(param_env, trait_ref));\n "}, {"sha": "1b13c98e4c3fac2e35867e437592143afcdc14f9", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca37a45232b41789b31caec9a71714855f66c477/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca37a45232b41789b31caec9a71714855f66c477/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -356,13 +356,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // 6 | |     };\n             //   | |_____^ expected integer, found `()`\n             // ```\n-            if block.expr.is_none() && block.stmts.is_empty() && outer_span.is_some() {\n-                let sp = if let Some(cs) = cond_span.find_ancestor_inside(span) {\n-                    span.with_hi(cs.hi())\n-                } else {\n-                    span\n-                };\n-                outer_span = Some(sp);\n+            if block.expr.is_none() && block.stmts.is_empty()\n+                && let Some(outer_span) = &mut outer_span\n+                && let Some(cond_span) = cond_span.find_ancestor_inside(*outer_span)\n+            {\n+                *outer_span = outer_span.with_hi(cond_span.hi())\n             }\n \n             (self.find_block_span(block), block.hir_id)"}, {"sha": "1b98ef993b04a199a1252cbecd55a88a0dd8a053", "filename": "library/std/src/sys/solid/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca37a45232b41789b31caec9a71714855f66c477/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca37a45232b41789b31caec9a71714855f66c477/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -230,8 +230,8 @@ impl Socket {\n     pub fn connect_timeout(&self, addr: &SocketAddr, timeout: Duration) -> io::Result<()> {\n         self.set_nonblocking(true)?;\n         let r = unsafe {\n-            let (addrp, len) = addr.into_inner();\n-            cvt(netc::connect(self.0.raw(), addrp, len))\n+            let (addr, len) = addr.into_inner();\n+            cvt(netc::connect(self.0.raw(), addr.as_ptr(), len))\n         };\n         self.set_nonblocking(false)?;\n "}, {"sha": "4e1e8ef9dead812b380578eef085c175f458fc5c", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca37a45232b41789b31caec9a71714855f66c477/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca37a45232b41789b31caec9a71714855f66c477/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -140,7 +140,13 @@ impl Step for Std {\n             cargo_subcommand(builder.kind),\n         );\n \n-        cargo.arg(\"--all-targets\");\n+        // If we're not in stage 0, tests and examples will fail to compile\n+        // from `core` definitions being loaded from two different `libcore`\n+        // .rmeta and .rlib files.\n+        if compiler.stage == 0 {\n+            cargo.arg(\"--all-targets\");\n+        }\n+\n         std_cargo(builder, target, compiler.stage, &mut cargo);\n \n         // Explicitly pass -p for all dependencies krates -- this will force cargo"}, {"sha": "befe6840874311635c417cf731377f07234ee373", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -1 +1 @@\n-Subproject commit 766979590da8100998f0d662499d4a901d8d1640\n+Subproject commit befe6840874311635c417cf731377f07234ee373"}, {"sha": "534af3f85bb96383266016ed54961f4b42db108d", "filename": "src/doc/man/rustc.1", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca37a45232b41789b31caec9a71714855f66c477/src%2Fdoc%2Fman%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/ca37a45232b41789b31caec9a71714855f66c477/src%2Fdoc%2Fman%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fman%2Frustc.1?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -44,18 +44,18 @@ The optional \\fIKIND\\fR can be one of \\fIstatic\\fR, \\fIdylib\\fR, or\n \\fIframework\\fR.\n If omitted, \\fIdylib\\fR is assumed.\n .TP\n-\\fB\\-\\-crate\\-type\\fR [bin|lib|rlib|dylib|cdylib|staticlib]\n+\\fB\\-\\-crate\\-type\\fR [bin|lib|rlib|dylib|cdylib|staticlib|proc\\-macro]\n Comma separated list of types of crates for the compiler to emit.\n .TP\n \\fB\\-\\-crate\\-name\\fR \\fINAME\\fR\n Specify the name of the crate being built.\n .TP\n-\\fB\\-\\-emit\\fR [asm|llvm\\-bc|llvm\\-ir|obj|link|dep\\-info|mir][=\\fIPATH\\fR]\n+\\fB\\-\\-emit\\fR [asm|llvm\\-bc|llvm\\-ir|obj|metadata|link|dep\\-info|mir][=\\fIPATH\\fR]\n Configure the output that \\fBrustc\\fR will produce. Each emission may also have\n an optional explicit output \\fIPATH\\fR specified for that particular emission\n kind. This path takes precedence over the \\fB-o\\fR option.\n .TP\n-\\fB\\-\\-print\\fR [crate\\-name|\\:file\\-names|\\:sysroot|\\:cfg|\\:target\\-list|\\:target\\-cpus|\\:target\\-features|\\:relocation\\-models|\\:code\\-models|\\:tls\\-models|\\:target\\-spec\\-json|\\:native\\-static\\-libs]\n+\\fB\\-\\-print\\fR [crate\\-name|\\:file\\-names|\\:sysroot|\\:target\\-libdir|\\:cfg|\\:target\\-list|\\:target\\-cpus|\\:target\\-features|\\:relocation\\-models|\\:code\\-models|\\:tls\\-models|\\:target\\-spec\\-json|\\:native\\-static\\-libs|\\:stack\\-protector\\-strategies|\\:link\\-args]\n Comma separated list of compiler information to print on stdout.\n .TP\n \\fB\\-g\\fR"}, {"sha": "f3d3953bf3b158d596c96d55ce5366f9f3f972e9", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -1 +1 @@\n-Subproject commit a92be0fef439b3d8e0468d82cb24812d303520a0\n+Subproject commit f3d3953bf3b158d596c96d55ce5366f9f3f972e9"}, {"sha": "ee342dc91e1ba1bb1e1f1318f84bbe3bfac04798", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -1 +1 @@\n-Subproject commit 3155db49b0d57cd82c65456ac210b69ecec5ccb1\n+Subproject commit ee342dc91e1ba1bb1e1f1318f84bbe3bfac04798"}, {"sha": "04f3cf0bb2f5a6ee2bfc4b1a6a6cd8c11d1c5531", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -1 +1 @@\n-Subproject commit d5201cddace979b299ec1bf9fd8997338151aa9d\n+Subproject commit 04f3cf0bb2f5a6ee2bfc4b1a6a6cd8c11d1c5531"}, {"sha": "83fe14550cc214d645dd81aba87eebedca78a9fc", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca37a45232b41789b31caec9a71714855f66c477/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/ca37a45232b41789b31caec9a71714855f66c477/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -1111,7 +1111,14 @@ table,\n }\n \n .item-info .stab {\n-\tdisplay: inline-block;\n+\twidth: fit-content;\n+\t/* This min-height is needed to unify the height of the stab elements because some of them\n+\t   have emojis.\n+\t*/\n+\tmin-height: 36px;\n+\tdisplay: flex;\n+\talign-items: center;\n+\twhite-space: pre-wrap;\n }\n .stab {\n \tpadding: 3px;\n@@ -1121,6 +1128,7 @@ table,\n }\n .stab p {\n \tdisplay: inline;\n+\tmargin: 0;\n }\n \n .stab .emoji {"}, {"sha": "8b6d355a8f1a7f488911fd79c505a6a793b6bda9", "filename": "src/test/rustdoc-gui/item-info-width.goml", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9538d2d0f1c708affa36ef8917729efec2e5e0ed/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "raw_url": "https://github.com/rust-lang/rust/raw/9538d2d0f1c708affa36ef8917729efec2e5e0ed/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml?ref=9538d2d0f1c708affa36ef8917729efec2e5e0ed", "patch": "@@ -1,8 +0,0 @@\n-// This test ensures that the item information don't take 100% of the width if unnecessary.\n-goto: file://|DOC_PATH|/lib2/struct.Foo.html\n-// We set a fixed size so there is no chance of \"random\" resize.\n-size: (1100, 800)\n-// We check that \".item-info\" is bigger than its content.\n-assert-css: (\".item-info\", {\"width\": \"790px\"})\n-assert-css: (\".item-info .stab\", {\"width\": \"289px\"})\n-assert-position: (\".item-info .stab\", {\"x\": 295})"}, {"sha": "50c45b76bd630c83f4bc29b444a7da8d036c48e4", "filename": "src/test/rustdoc-gui/item-info.goml", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ca37a45232b41789b31caec9a71714855f66c477/src%2Ftest%2Frustdoc-gui%2Fitem-info.goml", "raw_url": "https://github.com/rust-lang/rust/raw/ca37a45232b41789b31caec9a71714855f66c477/src%2Ftest%2Frustdoc-gui%2Fitem-info.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info.goml?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -0,0 +1,32 @@\n+// This test ensures a few things for item info elements.\n+goto: file://|DOC_PATH|/lib2/struct.Foo.html\n+// Ensuring that the item information don't take 100% of the width if unnecessary.\n+// We set a fixed size so there is no chance of \"random\" resize.\n+size: (1100, 800)\n+// We check that \".item-info\" is bigger than its content.\n+assert-css: (\".item-info\", {\"width\": \"790px\"})\n+assert-css: (\".item-info .stab\", {\"width\": \"289px\"})\n+assert-position: (\".item-info .stab\", {\"x\": 295})\n+\n+// Now we ensure that they're not rendered on the same line.\n+goto: file://|DOC_PATH|/lib2/trait.Trait.html\n+// We first ensure that there are two item info on the trait.\n+assert-count: (\"#main-content > .item-info .stab\", 2)\n+// They should not have the same `y` position!\n+compare-elements-position-false: (\n+    \"#main-content > .item-info .stab:nth-of-type(1)\",\n+    \"#main-content > .item-info .stab:nth-of-type(2)\",\n+    (\"y\"),\n+)\n+// But they should have the same `x` position.\n+compare-elements-position: (\n+    \"#main-content > .item-info .stab:nth-of-type(1)\",\n+    \"#main-content > .item-info .stab:nth-of-type(2)\",\n+    (\"x\"),\n+)\n+// They are supposed to have the same height too.\n+compare-elements-css: (\n+    \"#main-content > .item-info .stab:nth-of-type(1)\",\n+    \"#main-content > .item-info .stab:nth-of-type(2)\",\n+    [\"height\"],\n+)"}, {"sha": "87f91be3ac82cec26d87785a1afe2debd038aed8", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca37a45232b41789b31caec9a71714855f66c477/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca37a45232b41789b31caec9a71714855f66c477/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -30,10 +30,13 @@ impl Foo {\n     pub fn a_method(&self) {}\n }\n \n+#[doc(cfg(feature = \"foo-method\"))]\n+#[deprecated = \"Whatever [`Foo::a_method`](#method.a_method)\"]\n pub trait Trait {\n     type X;\n     const Y: u32;\n \n+    #[deprecated = \"Whatever [`Foo`](#tadam)\"]\n     fn foo() {}\n }\n "}, {"sha": "0fe50932b4bbc0c5724bb43fe231db4260c31d5b", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca37a45232b41789b31caec9a71714855f66c477/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca37a45232b41789b31caec9a71714855f66c477/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -32,6 +32,8 @@ fn _if_let_guard() {\n         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n         //~^ ERROR `if let` guards are experimental\n         //~| ERROR expected expression, found `let` statement\n+        //~| ERROR expected expression, found `let` statement\n+        //~| ERROR expected expression, found `let` statement\n \n         () if let Range { start: _, end: _ } = (true..true) && false => {}\n         //~^ ERROR `if let` guards are experimental"}, {"sha": "35db84a6cb79ab55cdd6373f7dc827f6adb7461f", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ca37a45232b41789b31caec9a71714855f66c477/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca37a45232b41789b31caec9a71714855f66c477/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -41,19 +41,31 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    |                                          ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:52:16\n+  --> $DIR/feature-gate.rs:32:55\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                                       ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:32:68\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                                                    ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:54:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:54:16\n+  --> $DIR/feature-gate.rs:56:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^\n \n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:62:15\n+  --> $DIR/feature-gate.rs:64:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -102,7 +114,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:36:12\n+  --> $DIR/feature-gate.rs:38:12\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -112,7 +124,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:58:12\n+  --> $DIR/feature-gate.rs:60:12\n    |\n LL |         () if let 0 = 1 => {}\n    |            ^^^^^^^^^^^^\n@@ -121,6 +133,6 @@ LL |         () if let 0 = 1 => {}\n    = help: add `#![feature(if_let_guard)]` to the crate attributes to enable\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 18 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "e8f1ff9c3fdd251b50bf73993c4dd33126f775e4", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca37a45232b41789b31caec9a71714855f66c477/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca37a45232b41789b31caec9a71714855f66c477/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -51,6 +51,8 @@ fn _if() {\n     //~| ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n     //~| ERROR expected expression, found `let` statement\n+    //~| ERROR expected expression, found `let` statement\n+    //~| ERROR expected expression, found `let` statement\n }\n \n fn _while() {\n@@ -81,6 +83,8 @@ fn _while() {\n     //~| ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n     //~| ERROR expected expression, found `let` statement\n+    //~| ERROR expected expression, found `let` statement\n+    //~| ERROR expected expression, found `let` statement\n }\n \n fn _macros() {\n@@ -146,6 +150,7 @@ fn nested_within_if_expr() {\n     //~| ERROR expected expression, found `let` statement\n     if true || (true && let 0 = 0) {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     let mut x = true;\n     if x = let 0 = 0 {}\n@@ -237,6 +242,7 @@ fn nested_within_while_expr() {\n     //~| ERROR expected expression, found `let` statement\n     while true || (true && let 0 = 0) {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     let mut x = true;\n     while x = let 0 = 0 {}\n@@ -388,16 +394,19 @@ fn inside_const_generic_arguments() {\n     if let A::<{\n         true && let 1 = 1\n         //~^ ERROR `let` expressions are not supported here\n+        //~| ERROR expected expression, found `let` statement\n     }>::O = 5 {}\n \n     while let A::<{\n         true && let 1 = 1\n         //~^ ERROR `let` expressions are not supported here\n+        //~| ERROR expected expression, found `let` statement\n     }>::O = 5 {}\n \n     if A::<{\n         true && let 1 = 1\n         //~^ ERROR `let` expressions are not supported here\n+        //~| ERROR expected expression, found `let` statement\n     }>::O == 5 {}\n \n     // In the cases above we have `ExprKind::Block` to help us out.\n@@ -409,7 +418,8 @@ fn inside_const_generic_arguments() {\n     if A::<\n         true && let 1 = 1\n         //~^ ERROR `let` expressions are not supported here\n-        //~| ERROR  expressions must be enclosed in braces\n+        //~| ERROR expressions must be enclosed in braces\n+        //~| ERROR expected expression, found `let` statement\n     >::O == 5 {}\n }\n "}, {"sha": "d5d82166a4ac4c5104cec8c2560ec370aa824def", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 301, "deletions": 241, "changes": 542, "blob_url": "https://github.com/rust-lang/rust/blob/ca37a45232b41789b31caec9a71714855f66c477/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca37a45232b41789b31caec9a71714855f66c477/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=ca37a45232b41789b31caec9a71714855f66c477", "patch": "@@ -41,313 +41,373 @@ LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:57:12\n+  --> $DIR/disallowed-positions.rs:49:48\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                                ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:49:61\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                                             ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:59:12\n    |\n LL |     while (let 0 = 1) {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:61:14\n+  --> $DIR/disallowed-positions.rs:63:14\n    |\n LL |     while (((let 0 = 1))) {}\n    |              ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:65:12\n+  --> $DIR/disallowed-positions.rs:67:12\n    |\n LL |     while (let 0 = 1) && true {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:69:20\n+  --> $DIR/disallowed-positions.rs:71:20\n    |\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:73:12\n+  --> $DIR/disallowed-positions.rs:75:12\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:73:27\n+  --> $DIR/disallowed-positions.rs:75:27\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:79:38\n+  --> $DIR/disallowed-positions.rs:81:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:110:9\n+  --> $DIR/disallowed-positions.rs:81:51\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                                   ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:81:64\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                                                ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:114:9\n    |\n LL |     if &let 0 = 0 {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:115:9\n+  --> $DIR/disallowed-positions.rs:119:9\n    |\n LL |     if !let 0 = 0 {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:118:9\n+  --> $DIR/disallowed-positions.rs:122:9\n    |\n LL |     if *let 0 = 0 {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:122:9\n+  --> $DIR/disallowed-positions.rs:126:9\n    |\n LL |     if -let 0 = 0 {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:132:9\n+  --> $DIR/disallowed-positions.rs:136:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:138:16\n+  --> $DIR/disallowed-positions.rs:142:16\n    |\n LL |     if true || let 0 = 0 {}\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:141:17\n+  --> $DIR/disallowed-positions.rs:145:17\n    |\n LL |     if (true || let 0 = 0) {}\n    |                 ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:144:25\n+  --> $DIR/disallowed-positions.rs:148:25\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:151:12\n+  --> $DIR/disallowed-positions.rs:151:25\n+   |\n+LL |     if true || (true && let 0 = 0) {}\n+   |                         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:156:12\n    |\n LL |     if x = let 0 = 0 {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:156:15\n+  --> $DIR/disallowed-positions.rs:161:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:160:11\n+  --> $DIR/disallowed-positions.rs:165:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:164:9\n+  --> $DIR/disallowed-positions.rs:169:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:195:19\n+  --> $DIR/disallowed-positions.rs:200:19\n    |\n LL |     if let true = let true = true {}\n    |                   ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:201:12\n+  --> $DIR/disallowed-positions.rs:206:12\n    |\n LL |     while &let 0 = 0 {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:206:12\n+  --> $DIR/disallowed-positions.rs:211:12\n    |\n LL |     while !let 0 = 0 {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:209:12\n+  --> $DIR/disallowed-positions.rs:214:12\n    |\n LL |     while *let 0 = 0 {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:213:12\n+  --> $DIR/disallowed-positions.rs:218:12\n    |\n LL |     while -let 0 = 0 {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:223:12\n+  --> $DIR/disallowed-positions.rs:228:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:229:19\n+  --> $DIR/disallowed-positions.rs:234:19\n    |\n LL |     while true || let 0 = 0 {}\n    |                   ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:232:20\n+  --> $DIR/disallowed-positions.rs:237:20\n    |\n LL |     while (true || let 0 = 0) {}\n    |                    ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:235:28\n+  --> $DIR/disallowed-positions.rs:240:28\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:242:15\n+  --> $DIR/disallowed-positions.rs:243:28\n+   |\n+LL |     while true || (true && let 0 = 0) {}\n+   |                            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:248:15\n    |\n LL |     while x = let 0 = 0 {}\n    |               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:247:18\n+  --> $DIR/disallowed-positions.rs:253:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:251:14\n+  --> $DIR/disallowed-positions.rs:257:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:255:12\n+  --> $DIR/disallowed-positions.rs:261:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:286:22\n+  --> $DIR/disallowed-positions.rs:292:22\n    |\n LL |     while let true = let true = true {}\n    |                      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:302:6\n+  --> $DIR/disallowed-positions.rs:308:6\n    |\n LL |     &let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:306:6\n+  --> $DIR/disallowed-positions.rs:312:6\n    |\n LL |     !let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:309:6\n+  --> $DIR/disallowed-positions.rs:315:6\n    |\n LL |     *let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:313:6\n+  --> $DIR/disallowed-positions.rs:319:6\n    |\n LL |     -let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:323:6\n+  --> $DIR/disallowed-positions.rs:329:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:329:13\n+  --> $DIR/disallowed-positions.rs:335:13\n    |\n LL |     true || let 0 = 0;\n    |             ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:332:14\n+  --> $DIR/disallowed-positions.rs:338:14\n    |\n LL |     (true || let 0 = 0);\n    |              ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:335:22\n+  --> $DIR/disallowed-positions.rs:341:22\n    |\n LL |     true && (true || let 0 = 0);\n    |                      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:340:9\n+  --> $DIR/disallowed-positions.rs:346:9\n    |\n LL |     x = let 0 = 0;\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:344:12\n+  --> $DIR/disallowed-positions.rs:350:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:347:8\n+  --> $DIR/disallowed-positions.rs:353:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:350:6\n+  --> $DIR/disallowed-positions.rs:356:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:354:6\n+  --> $DIR/disallowed-positions.rs:360:6\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:359:6\n+  --> $DIR/disallowed-positions.rs:365:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:359:17\n+  --> $DIR/disallowed-positions.rs:365:17\n    |\n LL |     (let true = let true = true);\n    |                 ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:366:25\n+  --> $DIR/disallowed-positions.rs:372:25\n    |\n LL |         let x = true && let y = 1;\n    |                         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:372:19\n+  --> $DIR/disallowed-positions.rs:378:19\n    |\n LL |         [1, 2, 3][let _ = ()]\n    |                   ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:377:6\n+  --> $DIR/disallowed-positions.rs:383:6\n    |\n LL |     &let 0 = 0\n    |      ^^^\n \n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:395:17\n+   |\n+LL |         true && let 1 = 1\n+   |                 ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:401:17\n+   |\n+LL |         true && let 1 = 1\n+   |                 ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:407:17\n+   |\n+LL |         true && let 1 = 1\n+   |                 ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:419:17\n+   |\n+LL |         true && let 1 = 1\n+   |                 ^^^\n+\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/disallowed-positions.rs:410:9\n+  --> $DIR/disallowed-positions.rs:419:9\n    |\n LL |         true && let 1 = 1\n    |         ^^^^^^^^^^^^^^^^^\n@@ -358,97 +418,97 @@ LL |         { true && let 1 = 1 }\n    |         +                   +\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:419:9\n+  --> $DIR/disallowed-positions.rs:429:9\n    |\n LL |     if (let Some(a) = opt && true) {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:424:9\n+  --> $DIR/disallowed-positions.rs:434:9\n    |\n LL |     if (let Some(a) = opt) && true {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:428:9\n+  --> $DIR/disallowed-positions.rs:438:9\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:428:32\n+  --> $DIR/disallowed-positions.rs:438:32\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |                                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:437:9\n+  --> $DIR/disallowed-positions.rs:447:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:437:31\n+  --> $DIR/disallowed-positions.rs:447:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |                               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:443:9\n+  --> $DIR/disallowed-positions.rs:453:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:443:31\n+  --> $DIR/disallowed-positions.rs:453:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |                               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:449:9\n+  --> $DIR/disallowed-positions.rs:459:9\n    |\n LL |     if (let Some(a) = opt && (true)) && true {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:466:22\n+  --> $DIR/disallowed-positions.rs:476:22\n    |\n LL |     let x = (true && let y = 1);\n    |                      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:471:20\n+  --> $DIR/disallowed-positions.rs:481:20\n    |\n LL |         ([1, 2, 3][let _ = ()])\n    |                    ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:475:20\n+  --> $DIR/disallowed-positions.rs:485:20\n    |\n LL |     #[cfg(FALSE)] (let 0 = 1);\n    |                    ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:93:16\n+  --> $DIR/disallowed-positions.rs:97:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:97:16\n+  --> $DIR/disallowed-positions.rs:101:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:101:23\n+  --> $DIR/disallowed-positions.rs:105:23\n    |\n LL |     use_expr!(true && let 0 = 1);\n    |                       ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:105:17\n+  --> $DIR/disallowed-positions.rs:109:17\n    |\n LL |     noop_expr!((let 0 = 1));\n    |                 ^^^\n@@ -571,853 +631,853 @@ LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:57:12\n+  --> $DIR/disallowed-positions.rs:59:12\n    |\n LL |     while (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:57:12\n+  --> $DIR/disallowed-positions.rs:59:12\n    |\n LL |     while (let 0 = 1) {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:61:14\n+  --> $DIR/disallowed-positions.rs:63:14\n    |\n LL |     while (((let 0 = 1))) {}\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:61:14\n+  --> $DIR/disallowed-positions.rs:63:14\n    |\n LL |     while (((let 0 = 1))) {}\n    |              ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:65:12\n+  --> $DIR/disallowed-positions.rs:67:12\n    |\n LL |     while (let 0 = 1) && true {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:65:12\n+  --> $DIR/disallowed-positions.rs:67:12\n    |\n LL |     while (let 0 = 1) && true {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:69:20\n+  --> $DIR/disallowed-positions.rs:71:20\n    |\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:69:20\n+  --> $DIR/disallowed-positions.rs:71:20\n    |\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:73:12\n+  --> $DIR/disallowed-positions.rs:75:12\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:73:12\n+  --> $DIR/disallowed-positions.rs:75:12\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:73:27\n+  --> $DIR/disallowed-positions.rs:75:27\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:73:27\n+  --> $DIR/disallowed-positions.rs:75:27\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:79:38\n+  --> $DIR/disallowed-positions.rs:81:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:79:38\n+  --> $DIR/disallowed-positions.rs:81:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:79:51\n+  --> $DIR/disallowed-positions.rs:81:51\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:79:38\n+  --> $DIR/disallowed-positions.rs:81:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:79:64\n+  --> $DIR/disallowed-positions.rs:81:64\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:79:38\n+  --> $DIR/disallowed-positions.rs:81:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:93:16\n+  --> $DIR/disallowed-positions.rs:97:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:93:16\n+  --> $DIR/disallowed-positions.rs:97:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:93:16\n+  --> $DIR/disallowed-positions.rs:97:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:93:16\n+  --> $DIR/disallowed-positions.rs:97:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:97:16\n+  --> $DIR/disallowed-positions.rs:101:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:97:16\n+  --> $DIR/disallowed-positions.rs:101:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:97:16\n+  --> $DIR/disallowed-positions.rs:101:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:97:16\n+  --> $DIR/disallowed-positions.rs:101:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:110:9\n+  --> $DIR/disallowed-positions.rs:114:9\n    |\n LL |     if &let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:115:9\n+  --> $DIR/disallowed-positions.rs:119:9\n    |\n LL |     if !let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:118:9\n+  --> $DIR/disallowed-positions.rs:122:9\n    |\n LL |     if *let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:122:9\n+  --> $DIR/disallowed-positions.rs:126:9\n    |\n LL |     if -let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:132:9\n+  --> $DIR/disallowed-positions.rs:136:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:132:9\n+  --> $DIR/disallowed-positions.rs:136:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:138:16\n+  --> $DIR/disallowed-positions.rs:142:16\n    |\n LL |     if true || let 0 = 0 {}\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:138:13\n+  --> $DIR/disallowed-positions.rs:142:13\n    |\n LL |     if true || let 0 = 0 {}\n    |             ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:141:17\n+  --> $DIR/disallowed-positions.rs:145:17\n    |\n LL |     if (true || let 0 = 0) {}\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:141:14\n+  --> $DIR/disallowed-positions.rs:145:14\n    |\n LL |     if (true || let 0 = 0) {}\n    |              ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:144:25\n+  --> $DIR/disallowed-positions.rs:148:25\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:144:22\n+  --> $DIR/disallowed-positions.rs:148:22\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                      ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:147:25\n+  --> $DIR/disallowed-positions.rs:151:25\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:147:17\n+  --> $DIR/disallowed-positions.rs:151:17\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                 ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:151:12\n+  --> $DIR/disallowed-positions.rs:156:12\n    |\n LL |     if x = let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:156:15\n+  --> $DIR/disallowed-positions.rs:161:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:156:15\n+  --> $DIR/disallowed-positions.rs:161:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:160:11\n+  --> $DIR/disallowed-positions.rs:165:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:160:11\n+  --> $DIR/disallowed-positions.rs:165:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:164:9\n+  --> $DIR/disallowed-positions.rs:169:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:164:9\n+  --> $DIR/disallowed-positions.rs:169:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:170:8\n+  --> $DIR/disallowed-positions.rs:175:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:174:8\n+  --> $DIR/disallowed-positions.rs:179:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:181:8\n+  --> $DIR/disallowed-positions.rs:186:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:189:8\n+  --> $DIR/disallowed-positions.rs:194:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:195:19\n+  --> $DIR/disallowed-positions.rs:200:19\n    |\n LL |     if let true = let true = true {}\n    |                   ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:201:12\n+  --> $DIR/disallowed-positions.rs:206:12\n    |\n LL |     while &let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:206:12\n+  --> $DIR/disallowed-positions.rs:211:12\n    |\n LL |     while !let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:209:12\n+  --> $DIR/disallowed-positions.rs:214:12\n    |\n LL |     while *let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:213:12\n+  --> $DIR/disallowed-positions.rs:218:12\n    |\n LL |     while -let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:223:12\n+  --> $DIR/disallowed-positions.rs:228:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:223:12\n+  --> $DIR/disallowed-positions.rs:228:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:229:19\n+  --> $DIR/disallowed-positions.rs:234:19\n    |\n LL |     while true || let 0 = 0 {}\n    |                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:229:16\n+  --> $DIR/disallowed-positions.rs:234:16\n    |\n LL |     while true || let 0 = 0 {}\n    |                ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:232:20\n+  --> $DIR/disallowed-positions.rs:237:20\n    |\n LL |     while (true || let 0 = 0) {}\n    |                    ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:232:17\n+  --> $DIR/disallowed-positions.rs:237:17\n    |\n LL |     while (true || let 0 = 0) {}\n    |                 ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:235:28\n+  --> $DIR/disallowed-positions.rs:240:28\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:235:25\n+  --> $DIR/disallowed-positions.rs:240:25\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                         ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:238:28\n+  --> $DIR/disallowed-positions.rs:243:28\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:238:20\n+  --> $DIR/disallowed-positions.rs:243:20\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                    ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:242:15\n+  --> $DIR/disallowed-positions.rs:248:15\n    |\n LL |     while x = let 0 = 0 {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:247:18\n+  --> $DIR/disallowed-positions.rs:253:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:247:18\n+  --> $DIR/disallowed-positions.rs:253:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:251:14\n+  --> $DIR/disallowed-positions.rs:257:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:251:14\n+  --> $DIR/disallowed-positions.rs:257:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:255:12\n+  --> $DIR/disallowed-positions.rs:261:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:255:12\n+  --> $DIR/disallowed-positions.rs:261:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:261:11\n+  --> $DIR/disallowed-positions.rs:267:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:265:11\n+  --> $DIR/disallowed-positions.rs:271:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:272:11\n+  --> $DIR/disallowed-positions.rs:278:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:280:11\n+  --> $DIR/disallowed-positions.rs:286:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:286:22\n+  --> $DIR/disallowed-positions.rs:292:22\n    |\n LL |     while let true = let true = true {}\n    |                      ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:302:6\n+  --> $DIR/disallowed-positions.rs:308:6\n    |\n LL |     &let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:306:6\n+  --> $DIR/disallowed-positions.rs:312:6\n    |\n LL |     !let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:309:6\n+  --> $DIR/disallowed-positions.rs:315:6\n    |\n LL |     *let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:313:6\n+  --> $DIR/disallowed-positions.rs:319:6\n    |\n LL |     -let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:323:6\n+  --> $DIR/disallowed-positions.rs:329:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:323:6\n+  --> $DIR/disallowed-positions.rs:329:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:329:13\n+  --> $DIR/disallowed-positions.rs:335:13\n    |\n LL |     true || let 0 = 0;\n    |             ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:329:10\n+  --> $DIR/disallowed-positions.rs:335:10\n    |\n LL |     true || let 0 = 0;\n    |          ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:332:14\n+  --> $DIR/disallowed-positions.rs:338:14\n    |\n LL |     (true || let 0 = 0);\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:332:11\n+  --> $DIR/disallowed-positions.rs:338:11\n    |\n LL |     (true || let 0 = 0);\n    |           ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:335:22\n+  --> $DIR/disallowed-positions.rs:341:22\n    |\n LL |     true && (true || let 0 = 0);\n    |                      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:335:19\n+  --> $DIR/disallowed-positions.rs:341:19\n    |\n LL |     true && (true || let 0 = 0);\n    |                   ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:340:9\n+  --> $DIR/disallowed-positions.rs:346:9\n    |\n LL |     x = let 0 = 0;\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:344:12\n+  --> $DIR/disallowed-positions.rs:350:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:344:12\n+  --> $DIR/disallowed-positions.rs:350:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:347:8\n+  --> $DIR/disallowed-positions.rs:353:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:347:8\n+  --> $DIR/disallowed-positions.rs:353:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:350:6\n+  --> $DIR/disallowed-positions.rs:356:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:350:6\n+  --> $DIR/disallowed-positions.rs:356:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:354:6\n+  --> $DIR/disallowed-positions.rs:360:6\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:359:6\n+  --> $DIR/disallowed-positions.rs:365:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:359:6\n+  --> $DIR/disallowed-positions.rs:365:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:377:6\n+  --> $DIR/disallowed-positions.rs:383:6\n    |\n LL |     &let 0 = 0\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:389:17\n+  --> $DIR/disallowed-positions.rs:395:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:394:17\n+  --> $DIR/disallowed-positions.rs:401:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:399:17\n+  --> $DIR/disallowed-positions.rs:407:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:410:17\n+  --> $DIR/disallowed-positions.rs:419:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:419:9\n+  --> $DIR/disallowed-positions.rs:429:9\n    |\n LL |     if (let Some(a) = opt && true) {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:419:9\n+  --> $DIR/disallowed-positions.rs:429:9\n    |\n LL |     if (let Some(a) = opt && true) {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:424:9\n+  --> $DIR/disallowed-positions.rs:434:9\n    |\n LL |     if (let Some(a) = opt) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:424:9\n+  --> $DIR/disallowed-positions.rs:434:9\n    |\n LL |     if (let Some(a) = opt) && true {\n    |         ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:428:9\n+  --> $DIR/disallowed-positions.rs:438:9\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:428:9\n+  --> $DIR/disallowed-positions.rs:438:9\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |         ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:428:32\n+  --> $DIR/disallowed-positions.rs:438:32\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |                                ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:428:32\n+  --> $DIR/disallowed-positions.rs:438:32\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |                                ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:437:9\n+  --> $DIR/disallowed-positions.rs:447:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:437:9\n+  --> $DIR/disallowed-positions.rs:447:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:437:31\n+  --> $DIR/disallowed-positions.rs:447:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |                               ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:437:31\n+  --> $DIR/disallowed-positions.rs:447:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |                               ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:443:9\n+  --> $DIR/disallowed-positions.rs:453:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:443:9\n+  --> $DIR/disallowed-positions.rs:453:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:443:31\n+  --> $DIR/disallowed-positions.rs:453:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |                               ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:443:31\n+  --> $DIR/disallowed-positions.rs:453:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |                               ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:449:9\n+  --> $DIR/disallowed-positions.rs:459:9\n    |\n LL |     if (let Some(a) = opt && (true)) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:449:9\n+  --> $DIR/disallowed-positions.rs:459:9\n    |\n LL |     if (let Some(a) = opt && (true)) && true {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:110:8\n+  --> $DIR/disallowed-positions.rs:114:8\n    |\n LL |     if &let 0 = 0 {}\n    |        ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -1429,27 +1489,27 @@ LL +     if let 0 = 0 {}\n    |\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:118:8\n+  --> $DIR/disallowed-positions.rs:122:8\n    |\n LL |     if *let 0 = 0 {}\n    |        ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:122:8\n+  --> $DIR/disallowed-positions.rs:126:8\n    |\n LL |     if -let 0 = 0 {}\n    |        ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:132:8\n+  --> $DIR/disallowed-positions.rs:136:8\n    |\n LL |     if (let 0 = 0)? {}\n    |        ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:132:19\n+  --> $DIR/disallowed-positions.rs:136:19\n    |\n LL | / fn nested_within_if_expr() {\n LL | |     if &let 0 = 0 {}\n@@ -1466,7 +1526,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:151:8\n+  --> $DIR/disallowed-positions.rs:156:8\n    |\n LL |     if x = let 0 = 0 {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -1477,7 +1537,7 @@ LL |     if x == let 0 = 0 {}\n    |          ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:156:8\n+  --> $DIR/disallowed-positions.rs:161:8\n    |\n LL |     if true..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1486,7 +1546,7 @@ LL |     if true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:160:8\n+  --> $DIR/disallowed-positions.rs:165:8\n    |\n LL |     if ..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -1495,7 +1555,7 @@ LL |     if ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:164:8\n+  --> $DIR/disallowed-positions.rs:169:8\n    |\n LL |     if (let 0 = 0).. {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -1504,7 +1564,7 @@ LL |     if (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:170:12\n+  --> $DIR/disallowed-positions.rs:175:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1515,7 +1575,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:170:8\n+  --> $DIR/disallowed-positions.rs:175:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1524,7 +1584,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:174:12\n+  --> $DIR/disallowed-positions.rs:179:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1535,7 +1595,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:174:8\n+  --> $DIR/disallowed-positions.rs:179:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1544,7 +1604,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:181:12\n+  --> $DIR/disallowed-positions.rs:186:12\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -1555,20 +1615,20 @@ LL |     if let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:181:41\n+  --> $DIR/disallowed-positions.rs:186:41\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |                                         ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:181:41: 181:43]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:186:41: 186:43]`\n help: use parentheses to call this closure\n    |\n LL |     if let Range { start: F, end } = F..(|| true)() {}\n    |                                         +       +++\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:181:8\n+  --> $DIR/disallowed-positions.rs:186:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1577,7 +1637,7 @@ LL |     if let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:189:12\n+  --> $DIR/disallowed-positions.rs:194:12\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -1588,7 +1648,7 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:189:44\n+  --> $DIR/disallowed-positions.rs:194:44\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |                                            ^^^^^^^ expected `bool`, found `&&bool`\n@@ -1600,7 +1660,7 @@ LL +     if let Range { start: true, end } = t..false {}\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:189:8\n+  --> $DIR/disallowed-positions.rs:194:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1609,15 +1669,15 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:128:20\n+  --> $DIR/disallowed-positions.rs:132:20\n    |\n LL |         if let 0 = 0? {}\n    |                    ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:201:11\n+  --> $DIR/disallowed-positions.rs:206:11\n    |\n LL |     while &let 0 = 0 {}\n    |           ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -1629,27 +1689,27 @@ LL +     while let 0 = 0 {}\n    |\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:209:11\n+  --> $DIR/disallowed-positions.rs:214:11\n    |\n LL |     while *let 0 = 0 {}\n    |           ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:213:11\n+  --> $DIR/disallowed-positions.rs:218:11\n    |\n LL |     while -let 0 = 0 {}\n    |           ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:223:11\n+  --> $DIR/disallowed-positions.rs:228:11\n    |\n LL |     while (let 0 = 0)? {}\n    |           ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:223:22\n+  --> $DIR/disallowed-positions.rs:228:22\n    |\n LL | / fn nested_within_while_expr() {\n LL | |     while &let 0 = 0 {}\n@@ -1666,7 +1726,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:242:11\n+  --> $DIR/disallowed-positions.rs:248:11\n    |\n LL |     while x = let 0 = 0 {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -1677,7 +1737,7 @@ LL |     while x == let 0 = 0 {}\n    |             ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:247:11\n+  --> $DIR/disallowed-positions.rs:253:11\n    |\n LL |     while true..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1686,7 +1746,7 @@ LL |     while true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:251:11\n+  --> $DIR/disallowed-positions.rs:257:11\n    |\n LL |     while ..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -1695,7 +1755,7 @@ LL |     while ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:255:11\n+  --> $DIR/disallowed-positions.rs:261:11\n    |\n LL |     while (let 0 = 0).. {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -1704,7 +1764,7 @@ LL |     while (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:261:15\n+  --> $DIR/disallowed-positions.rs:267:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1715,7 +1775,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:261:11\n+  --> $DIR/disallowed-positions.rs:267:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1724,7 +1784,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:265:15\n+  --> $DIR/disallowed-positions.rs:271:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1735,7 +1795,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:265:11\n+  --> $DIR/disallowed-positions.rs:271:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1744,7 +1804,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:272:15\n+  --> $DIR/disallowed-positions.rs:278:15\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -1755,20 +1815,20 @@ LL |     while let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:272:44\n+  --> $DIR/disallowed-positions.rs:278:44\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |                                            ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:272:44: 272:46]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:278:44: 278:46]`\n help: use parentheses to call this closure\n    |\n LL |     while let Range { start: F, end } = F..(|| true)() {}\n    |                                            +       +++\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:272:11\n+  --> $DIR/disallowed-positions.rs:278:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1777,7 +1837,7 @@ LL |     while let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:280:15\n+  --> $DIR/disallowed-positions.rs:286:15\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -1788,7 +1848,7 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:280:47\n+  --> $DIR/disallowed-positions.rs:286:47\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |                                               ^^^^^^^ expected `bool`, found `&&bool`\n@@ -1800,7 +1860,7 @@ LL +     while let Range { start: true, end } = t..false {}\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:280:11\n+  --> $DIR/disallowed-positions.rs:286:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1809,35 +1869,35 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:219:23\n+  --> $DIR/disallowed-positions.rs:224:23\n    |\n LL |         while let 0 = 0? {}\n    |                       ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:309:5\n+  --> $DIR/disallowed-positions.rs:315:5\n    |\n LL |     *let 0 = 0;\n    |     ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:313:5\n+  --> $DIR/disallowed-positions.rs:319:5\n    |\n LL |     -let 0 = 0;\n    |     ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:323:5\n+  --> $DIR/disallowed-positions.rs:329:5\n    |\n LL |     (let 0 = 0)?;\n    |     ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:323:16\n+  --> $DIR/disallowed-positions.rs:329:16\n    |\n LL | / fn outside_if_and_while_expr() {\n LL | |     &let 0 = 0;\n@@ -1854,7 +1914,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:354:10\n+  --> $DIR/disallowed-positions.rs:360:10\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1865,7 +1925,7 @@ LL |     (let Range { start: _, end: _ } = true..true || false);\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:377:5\n+  --> $DIR/disallowed-positions.rs:383:5\n    |\n LL | fn outside_if_and_while_expr() {\n    |                                - help: try adding a return type: `-> &bool`\n@@ -1874,14 +1934,14 @@ LL |     &let 0 = 0\n    |     ^^^^^^^^^^ expected `()`, found `&bool`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:319:17\n+  --> $DIR/disallowed-positions.rs:325:17\n    |\n LL |         let 0 = 0?;\n    |                 ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n-error: aborting due to 208 previous errors\n+error: aborting due to 218 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0600, E0614.\n For more information about an error, try `rustc --explain E0277`."}]}