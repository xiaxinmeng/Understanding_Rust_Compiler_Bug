{"sha": "57746f943bef5720d97ad2cb413c54b0f432566b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NzQ2Zjk0M2JlZjU3MjBkOTdhZDJjYjQxM2M1NGIwZjQzMjU2NmI=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-11T20:04:22Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-20T13:44:34Z"}, "message": "intern `PredicateKind`", "tree": {"sha": "261545fd1bc05bb777234d3a5020998a7912e6c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/261545fd1bc05bb777234d3a5020998a7912e6c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57746f943bef5720d97ad2cb413c54b0f432566b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57746f943bef5720d97ad2cb413c54b0f432566b", "html_url": "https://github.com/rust-lang/rust/commit/57746f943bef5720d97ad2cb413c54b0f432566b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57746f943bef5720d97ad2cb413c54b0f432566b/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3164790bdea9ae4f23631f78a4c52dc1b3bdf06", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3164790bdea9ae4f23631f78a4c52dc1b3bdf06", "html_url": "https://github.com/rust-lang/rust/commit/f3164790bdea9ae4f23631f78a4c52dc1b3bdf06"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "892a62855a0a2e2cac46e69ea40df84464be876b", "filename": "src/librustc_infer/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57746f943bef5720d97ad2cb413c54b0f432566b/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57746f943bef5720d97ad2cb413c54b0f432566b/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fmod.rs?ref=57746f943bef5720d97ad2cb413c54b0f432566b", "patch": "@@ -59,7 +59,7 @@ pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;\n \n // `PredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PredicateObligation<'_>, 112);\n+static_assert_size!(PredicateObligation<'_>, 88);\n \n pub type Obligations<'tcx, O> = Vec<Obligation<'tcx, O>>;\n pub type PredicateObligations<'tcx> = Vec<PredicateObligation<'tcx>>;"}, {"sha": "7d192a44eaf2adeefbe9ccd4944dad60672d0095", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/57746f943bef5720d97ad2cb413c54b0f432566b/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57746f943bef5720d97ad2cb413c54b0f432566b/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=57746f943bef5720d97ad2cb413c54b0f432566b", "patch": "@@ -29,10 +29,9 @@ use crate::ty::{self, DefIdTree, Ty, TypeAndMut};\n use crate::ty::{AdtDef, AdtKind, Const, Region};\n use crate::ty::{BindingMode, BoundVar};\n use crate::ty::{ConstVid, FloatVar, FloatVid, IntVar, IntVid, TyVar, TyVid};\n-use crate::ty::{\n-    ExistentialPredicate, InferTy, ParamTy, PolyFnSig, Predicate, PredicateKind, ProjectionTy,\n-};\n+use crate::ty::{ExistentialPredicate, Predicate, PredicateKind};\n use crate::ty::{InferConst, ParamConst};\n+use crate::ty::{InferTy, ParamTy, PolyFnSig, ProjectionTy};\n use crate::ty::{List, TyKind, TyS};\n use rustc_ast::ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n@@ -91,6 +90,7 @@ pub struct CtxtInterners<'tcx> {\n     canonical_var_infos: InternedSet<'tcx, List<CanonicalVarInfo>>,\n     region: InternedSet<'tcx, RegionKind>,\n     existential_predicates: InternedSet<'tcx, List<ExistentialPredicate<'tcx>>>,\n+    predicate_kind: InternedSet<'tcx, PredicateKind<'tcx>>,\n     predicates: InternedSet<'tcx, List<Predicate<'tcx>>>,\n     projs: InternedSet<'tcx, List<ProjectionKind>>,\n     place_elems: InternedSet<'tcx, List<PlaceElem<'tcx>>>,\n@@ -109,6 +109,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n             region: Default::default(),\n             existential_predicates: Default::default(),\n             canonical_var_infos: Default::default(),\n+            predicate_kind: Default::default(),\n             predicates: Default::default(),\n             projs: Default::default(),\n             place_elems: Default::default(),\n@@ -1579,6 +1580,7 @@ macro_rules! nop_list_lift {\n nop_lift! {type_; Ty<'a> => Ty<'tcx>}\n nop_lift! {region; Region<'a> => Region<'tcx>}\n nop_lift! {const_; &'a Const<'a> => &'tcx Const<'tcx>}\n+nop_lift! {predicate_kind; &'a PredicateKind<'a> => &'tcx PredicateKind<'tcx>}\n \n nop_list_lift! {type_list; Ty<'a> => Ty<'tcx>}\n nop_list_lift! {existential_predicates; ExistentialPredicate<'a> => ExistentialPredicate<'tcx>}\n@@ -2017,8 +2019,14 @@ impl<'tcx> Borrow<[traits::ChalkEnvironmentClause<'tcx>]>\n     }\n }\n \n+impl<'tcx> Borrow<PredicateKind<'tcx>> for Interned<'tcx, PredicateKind<'tcx>> {\n+    fn borrow<'a>(&'a self) -> &'a PredicateKind<'tcx> {\n+        &self.0\n+    }\n+}\n+\n macro_rules! direct_interners {\n-    ($($name:ident: $method:ident($ty:ty)),+) => {\n+    ($($name:ident: $method:ident($ty:ty),)+) => {\n         $(impl<'tcx> PartialEq for Interned<'tcx, $ty> {\n             fn eq(&self, other: &Self) -> bool {\n                 self.0 == other.0\n@@ -2043,7 +2051,11 @@ macro_rules! direct_interners {\n     }\n }\n \n-direct_interners!(region: mk_region(RegionKind), const_: mk_const(Const<'tcx>));\n+direct_interners!(\n+    region: mk_region(RegionKind),\n+    const_: mk_const(Const<'tcx>),\n+    predicate_kind: intern_predicate_kind(PredicateKind<'tcx>),\n+);\n \n macro_rules! slice_interners {\n     ($($field:ident: $method:ident($ty:ty)),+) => (\n@@ -2107,6 +2119,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_predicate(&self, kind: PredicateKind<'tcx>) -> Predicate<'tcx> {\n+        let kind = self.intern_predicate_kind(kind);\n         Predicate { kind }\n     }\n "}, {"sha": "72c785074996bb41abba9577df6faa1b346f6533", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57746f943bef5720d97ad2cb413c54b0f432566b/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57746f943bef5720d97ad2cb413c54b0f432566b/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=57746f943bef5720d97ad2cb413c54b0f432566b", "patch": "@@ -1017,14 +1017,14 @@ impl<'tcx> GenericPredicates<'tcx> {\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Lift)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable)]\n pub struct Predicate<'tcx> {\n-    kind: PredicateKind<'tcx>,\n+    kind: &'tcx PredicateKind<'tcx>,\n }\n \n impl Predicate<'tcx> {\n     pub fn kind(&self) -> PredicateKind<'tcx> {\n-        self.kind\n+        *self.kind\n     }\n }\n "}, {"sha": "babe0c54801e82d51ec2f2ca6c7b966746a0a146", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57746f943bef5720d97ad2cb413c54b0f432566b/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57746f943bef5720d97ad2cb413c54b0f432566b/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=57746f943bef5720d97ad2cb413c54b0f432566b", "patch": "@@ -987,6 +987,16 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n     }\n }\n \n+impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        folder.tcx().mk_predicate(ty::PredicateKind::super_fold_with(self.kind, folder))\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        ty::PredicateKind::super_visit_with(self.kind, visitor)\n+    }\n+}\n+\n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         fold_list(*self, folder, |tcx, v| tcx.intern_predicates(v))"}, {"sha": "6f6430c100da90ee5e544f3d359456c68dfde35e", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57746f943bef5720d97ad2cb413c54b0f432566b/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57746f943bef5720d97ad2cb413c54b0f432566b/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=57746f943bef5720d97ad2cb413c54b0f432566b", "patch": "@@ -83,7 +83,7 @@ pub struct PendingPredicateObligation<'tcx> {\n \n // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PendingPredicateObligation<'_>, 136);\n+static_assert_size!(PendingPredicateObligation<'_>, 112);\n \n impl<'a, 'tcx> FulfillmentContext<'tcx> {\n     /// Creates a new fulfillment context."}, {"sha": "22077b49c3b775de71d3e2280a2861ea1ffc76b7", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57746f943bef5720d97ad2cb413c54b0f432566b/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57746f943bef5720d97ad2cb413c54b0f432566b/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=57746f943bef5720d97ad2cb413c54b0f432566b", "patch": "@@ -6,10 +6,8 @@ use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{GenericArg, Subst, UserSelfTy, UserSubsts};\n-use rustc_middle::ty::{\n-    self, FnSig, Lift, ParamEnv, ParamEnvAnd, PolyFnSig, Predicate, ToPredicate, Ty, TyCtxt,\n-    TypeFoldable, Variance,\n-};\n+use rustc_middle::ty::{self, FnSig, Lift, PolyFnSig, Ty, TyCtxt, TypeFoldable, Variance};\n+use rustc_middle::ty::{ParamEnv, ParamEnvAnd, Predicate, ToPredicate};\n use rustc_span::DUMMY_SP;\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n use rustc_trait_selection::infer::InferCtxtExt;"}]}