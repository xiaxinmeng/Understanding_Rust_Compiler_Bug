{"sha": "3415a18febb8d8afe6de9f462fee953e979a88a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MTVhMThmZWJiOGQ4YWZlNmRlOWY0NjJmZWU5NTNlOTc5YTg4YTk=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-08T10:21:24Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-08T10:21:50Z"}, "message": "Rustup to *1.11.0-nightly (763f9234b 2016-06-06)*", "tree": {"sha": "6e6a202b6dd1627762fb48402b8a88dca3c42f68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e6a202b6dd1627762fb48402b8a88dca3c42f68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3415a18febb8d8afe6de9f462fee953e979a88a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXV/G/AAoJEF5CfHlMukXo2eUP/j6KFHNJp9ERRI9GU7yfrShK\n/Fu2lUAjUIZcIDL1tWYQaIQnJ125fV8yY2ncSVj/tkpaoNG+3Utc2ziUT2jrmwWq\nM52Fsj44eL4OFrJcA9Xo/NQI3vi5i/GQco/e0q90/kKfe0pSMURVf0Luzw386xW6\nM5RuWmBixSFCdIQU+jijQxqG262gA7z5XctB50iTV+J8X5I7Qt3k0i7+c9cxQ1DT\nauWQh4cnazadXn8LD1n3p7yfSwmWXJ5HI1E45zCGXi3jZcKIP1jswY6H3EtdwbpS\nXjO4arDEiLPSmwnZ3OsdIJ8nEXEKlJDKBJXp3k+nADfavsONotXRJoSvLij4l7i1\nGlZD/ZbQPWs8MIXpML3uFjeX1WT7Sj8l7qDwkCPKAdEEiwNDwbikqYpF7FMu4NQb\nGUhuXuw8LNDtTPw5YXY8/MeCb8XlYQ+VIztkkXX63wUGM5YXnaiK1lNheOt204Gr\ncb5moj8EgNa/piRzMbGfrxLxK1TsVJ+20N86f3aWO7sLgRy866Sx1g1bi5eNNOS1\nSMohX6/i+62xSMXSW/+Z+I/0CY4KB9rPIRfm2KhkTZ0KnAhVT32Q4fnillJ7SIJ3\nU2KkQGiYcV7W6/rpTVIzLSCQkGmqt6FoAZUOBbVik79IOE8YBJvwwK5tMrjvcRq6\nIm9nnplzXnon2CKn6gmp\n=kUou\n-----END PGP SIGNATURE-----", "payload": "tree 6e6a202b6dd1627762fb48402b8a88dca3c42f68\nparent f4726c0ad852c788d4c653163cefd192d9e0d0cc\nauthor mcarton <cartonmartin+git@gmail.com> 1465381284 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1465381310 +0200\n\nRustup to *1.11.0-nightly (763f9234b 2016-06-06)*\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3415a18febb8d8afe6de9f462fee953e979a88a9", "html_url": "https://github.com/rust-lang/rust/commit/3415a18febb8d8afe6de9f462fee953e979a88a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3415a18febb8d8afe6de9f462fee953e979a88a9/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4726c0ad852c788d4c653163cefd192d9e0d0cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4726c0ad852c788d4c653163cefd192d9e0d0cc", "html_url": "https://github.com/rust-lang/rust/commit/f4726c0ad852c788d4c653163cefd192d9e0d0cc"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "c283dc69b99cc474e4cf0f084e96d20c2eba6d32", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3415a18febb8d8afe6de9f462fee953e979a88a9/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3415a18febb8d8afe6de9f462fee953e979a88a9/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=3415a18febb8d8afe6de9f462fee953e979a88a9", "patch": "@@ -6,6 +6,7 @@ use rustc::middle::const_val::ConstVal;\n use rustc::ty;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::eval_const_expr_partial;\n+use rustc_const_math::ConstFloat;\n use syntax::codemap::{Span, Spanned, ExpnFormat};\n use syntax::ptr::P;\n use utils::{\n@@ -182,7 +183,26 @@ impl LateLintPass for FloatCmp {\n fn is_allowed(cx: &LateContext, expr: &Expr) -> bool {\n     let res = eval_const_expr_partial(cx.tcx, expr, ExprTypeChecked, None);\n     if let Ok(ConstVal::Float(val)) = res {\n-        val == 0.0 || val == ::std::f64::INFINITY || val == ::std::f64::NEG_INFINITY\n+        use std::cmp::Ordering;\n+\n+        let zero = ConstFloat::FInfer {\n+            f32: 0.0,\n+            f64: 0.0,\n+        };\n+\n+        let infinity = ConstFloat::FInfer {\n+            f32: ::std::f32::INFINITY,\n+            f64: ::std::f64::INFINITY,\n+        };\n+\n+        let neg_infinity = ConstFloat::FInfer {\n+            f32: ::std::f32::NEG_INFINITY,\n+            f64: ::std::f64::NEG_INFINITY,\n+        };\n+\n+        val.try_cmp(zero) == Ok(Ordering::Equal)\n+            || val.try_cmp(infinity) == Ok(Ordering::Equal)\n+            || val.try_cmp(neg_infinity) == Ok(Ordering::Equal)\n     } else {\n         false\n     }"}]}