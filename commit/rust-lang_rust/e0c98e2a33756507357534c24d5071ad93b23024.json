{"sha": "e0c98e2a33756507357534c24d5071ad93b23024", "node_id": "C_kwDOAAsO6NoAKGUwYzk4ZTJhMzM3NTY1MDczNTc1MzRjMjRkNTA3MWFkOTNiMjMwMjQ", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-11-26T17:37:29Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-12-01T11:12:39Z"}, "message": "add tests and bless existing ones", "tree": {"sha": "e55e7b179a18c551f30db1c3538c771ee874cc42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e55e7b179a18c551f30db1c3538c771ee874cc42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0c98e2a33756507357534c24d5071ad93b23024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0c98e2a33756507357534c24d5071ad93b23024", "html_url": "https://github.com/rust-lang/rust/commit/e0c98e2a33756507357534c24d5071ad93b23024", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0c98e2a33756507357534c24d5071ad93b23024/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff448cfcee92cf507488d6335c68ca98a70cf7cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff448cfcee92cf507488d6335c68ca98a70cf7cc", "html_url": "https://github.com/rust-lang/rust/commit/ff448cfcee92cf507488d6335c68ca98a70cf7cc"}], "stats": {"total": 360, "additions": 360, "deletions": 0}, "files": [{"sha": "9e68e9e77515bc6633b0ad3e8a603f98c765d587", "filename": "src/test/ui/associated-types/issue-59324.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e0c98e2a33756507357534c24d5071ad93b23024/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c98e2a33756507357534c24d5071ad93b23024/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs?ref=e0c98e2a33756507357534c24d5071ad93b23024", "patch": "@@ -0,0 +1,26 @@\n+trait NotFoo {}\n+\n+pub trait Foo: NotFoo {\n+    type OnlyFoo;\n+}\n+\n+pub trait Service {\n+    type AssocType;\n+}\n+\n+pub trait ThriftService<Bug: NotFoo>:\n+//~^ ERROR the trait bound `Bug: Foo` is not satisfied\n+//~| ERROR the trait bound `Bug: Foo` is not satisfied\n+    Service<AssocType = <Bug as Foo>::OnlyFoo>\n+{\n+    fn get_service(\n+    //~^ ERROR the trait bound `Bug: Foo` is not satisfied\n+    //~| ERROR the trait bound `Bug: Foo` is not satisfied\n+        &self,\n+    ) -> Self::AssocType;\n+}\n+\n+fn with_factory<H>(factory: dyn ThriftService<()>) {}\n+//~^ ERROR the trait bound `(): Foo` is not satisfied\n+\n+fn main() {}"}, {"sha": "2f430d3055e1938d3820856af3c291d0988d808a", "filename": "src/test/ui/associated-types/issue-59324.stderr", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e0c98e2a33756507357534c24d5071ad93b23024/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0c98e2a33756507357534c24d5071ad93b23024/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr?ref=e0c98e2a33756507357534c24d5071ad93b23024", "patch": "@@ -0,0 +1,69 @@\n+error[E0277]: the trait bound `Bug: Foo` is not satisfied\n+  --> $DIR/issue-59324.rs:11:1\n+   |\n+LL | / pub trait ThriftService<Bug: NotFoo>:\n+LL | |\n+LL | |\n+LL | |     Service<AssocType = <Bug as Foo>::OnlyFoo>\n+...  |\n+LL | |     ) -> Self::AssocType;\n+LL | | }\n+   | |_^ the trait `Foo` is not implemented for `Bug`\n+   |\n+help: consider further restricting this bound\n+   |\n+LL | pub trait ThriftService<Bug: NotFoo + Foo>:\n+   |                                     +++++\n+\n+error[E0277]: the trait bound `Bug: Foo` is not satisfied\n+  --> $DIR/issue-59324.rs:11:1\n+   |\n+LL | / pub trait ThriftService<Bug: NotFoo>:\n+LL | |\n+LL | |\n+LL | |     Service<AssocType = <Bug as Foo>::OnlyFoo>\n+...  |\n+LL | |     ) -> Self::AssocType;\n+LL | | }\n+   | |_^ the trait `Foo` is not implemented for `Bug`\n+   |\n+help: consider further restricting this bound\n+   |\n+LL | pub trait ThriftService<Bug: NotFoo + Foo>:\n+   |                                     +++++\n+\n+error[E0277]: the trait bound `Bug: Foo` is not satisfied\n+  --> $DIR/issue-59324.rs:16:5\n+   |\n+LL | /     fn get_service(\n+LL | |\n+LL | |\n+LL | |         &self,\n+LL | |     ) -> Self::AssocType;\n+   | |_________________________^ the trait `Foo` is not implemented for `Bug`\n+   |\n+help: consider further restricting this bound\n+   |\n+LL | pub trait ThriftService<Bug: NotFoo + Foo>:\n+   |                                     +++++\n+\n+error[E0277]: the trait bound `Bug: Foo` is not satisfied\n+  --> $DIR/issue-59324.rs:16:8\n+   |\n+LL |     fn get_service(\n+   |        ^^^^^^^^^^^ the trait `Foo` is not implemented for `Bug`\n+   |\n+help: consider further restricting this bound\n+   |\n+LL | pub trait ThriftService<Bug: NotFoo + Foo>:\n+   |                                     +++++\n+\n+error[E0277]: the trait bound `(): Foo` is not satisfied\n+  --> $DIR/issue-59324.rs:23:29\n+   |\n+LL | fn with_factory<H>(factory: dyn ThriftService<()>) {}\n+   |                             ^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `()`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "49efe8a1bdaaca43c268d75d9e3ec6d69fb44775", "filename": "src/test/ui/associated-types/issue-67684.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e0c98e2a33756507357534c24d5071ad93b23024/src%2Ftest%2Fui%2Fassociated-types%2Fissue-67684.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c98e2a33756507357534c24d5071ad93b23024/src%2Ftest%2Fui%2Fassociated-types%2Fissue-67684.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-67684.rs?ref=e0c98e2a33756507357534c24d5071ad93b23024", "patch": "@@ -0,0 +1,62 @@\n+// check-pass\n+\n+#![allow(dead_code)]\n+\n+trait ParseError {\n+    type StreamError;\n+}\n+\n+impl<T> ParseError for T {\n+    type StreamError = ();\n+}\n+\n+trait Stream {\n+    type Item;\n+    type Error: ParseError;\n+}\n+\n+trait Parser\n+where\n+    <Self as Parser>::PartialState: Default,\n+{\n+    type PartialState;\n+    fn parse_mode(_: &Self, _: Self::PartialState) {\n+        loop {}\n+    }\n+}\n+\n+impl Stream for () {\n+    type Item = ();\n+    type Error = ();\n+}\n+\n+impl Parser for () {\n+    type PartialState = ();\n+}\n+\n+struct AndThen<A, B>(core::marker::PhantomData<(A, B)>);\n+\n+impl<A, B> Parser for AndThen<A, B>\n+where\n+    A: Stream,\n+    B: Into<<A::Error as ParseError>::StreamError>,\n+{\n+    type PartialState = ();\n+}\n+\n+fn expr<A>() -> impl Parser\n+where\n+    A: Stream<Error = <A as Stream>::Item>,\n+{\n+    AndThen::<A, ()>(core::marker::PhantomData)\n+}\n+\n+fn parse_mode_impl<A>()\n+where\n+    <A as Stream>::Error: ParseError,\n+    A: Stream<Error = <A as Stream>::Item>,\n+{\n+    Parser::parse_mode(&expr::<A>(), Default::default())\n+}\n+\n+fn main() {}"}, {"sha": "ca3d66b1c8eb7d9cb96551589f5a97b26da50e31", "filename": "src/test/ui/associated-types/issue-69398.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e0c98e2a33756507357534c24d5071ad93b23024/src%2Ftest%2Fui%2Fassociated-types%2Fissue-69398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c98e2a33756507357534c24d5071ad93b23024/src%2Ftest%2Fui%2Fassociated-types%2Fissue-69398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-69398.rs?ref=e0c98e2a33756507357534c24d5071ad93b23024", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+\n+pub trait Foo {\n+    type Bar;\n+}\n+\n+pub trait Broken {\n+    type Assoc;\n+    fn broken(&self) where Self::Assoc: Foo;\n+}\n+\n+impl<T> Broken for T {\n+    type Assoc = ();\n+    fn broken(&self) where Self::Assoc: Foo {\n+        let _x: <Self::Assoc as Foo>::Bar;\n+    }\n+}\n+\n+fn main() {\n+    let _m: &dyn Broken<Assoc=()> = &();\n+}"}, {"sha": "48de89127f4a5cd1e8389e63ffa606b5294a0770", "filename": "src/test/ui/associated-types/issue-71113.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e0c98e2a33756507357534c24d5071ad93b23024/src%2Ftest%2Fui%2Fassociated-types%2Fissue-71113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c98e2a33756507357534c24d5071ad93b23024/src%2Ftest%2Fui%2Fassociated-types%2Fissue-71113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-71113.rs?ref=e0c98e2a33756507357534c24d5071ad93b23024", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+use std::borrow::Cow;\n+\n+enum _Recursive<'a>\n+where\n+    Self: ToOwned<Owned=Box<Self>>\n+{\n+    Variant(MyCow<'a, _Recursive<'a>>),\n+}\n+\n+pub struct Wrapper<T>(T);\n+\n+pub struct MyCow<'a, T: ToOwned<Owned=Box<T>> + 'a>(Wrapper<Cow<'a, T>>);\n+\n+fn main() {}"}, {"sha": "590c799c2d71c61ae5368da8343757369676a38b", "filename": "src/test/ui/associated-types/issue-82079.rs", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/e0c98e2a33756507357534c24d5071ad93b23024/src%2Ftest%2Fui%2Fassociated-types%2Fissue-82079.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c98e2a33756507357534c24d5071ad93b23024/src%2Ftest%2Fui%2Fassociated-types%2Fissue-82079.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-82079.rs?ref=e0c98e2a33756507357534c24d5071ad93b23024", "patch": "@@ -0,0 +1,121 @@\n+// check-pass\n+\n+mod convenience_operators {\n+    use crate::{Op, Relation};\n+    use std::ops::AddAssign;\n+    use std::ops::Mul;\n+\n+    impl<C: Op> Relation<C> {\n+        pub fn map<F: Fn(C::D) -> D2 + 'static, D2: 'static>(\n+            self,\n+            f: F,\n+        ) -> Relation<impl Op<D = D2, R = C::R>> {\n+            self.map_dr(move |x, r| (f(x), r))\n+        }\n+    }\n+\n+    impl<K: 'static, V: 'static, C: Op<D = (K, V)>> Relation<C> {\n+        pub fn semijoin<C2: Op<D = K, R = R2>, R2, R3: AddAssign<R3>>(\n+            self,\n+            other: Relation<C2>,\n+        ) -> Relation<impl Op<D = C::D, R = R3>>\n+        where\n+            C::R: Mul<R2, Output = R3>,\n+        {\n+            self.join(other.map(|x| (x, ()))).map(|(k, x, ())| (k, x))\n+        }\n+    }\n+}\n+\n+mod core {\n+    mod operator {\n+        mod join {\n+            use super::Op;\n+            use crate::core::Relation;\n+            use std::ops::{AddAssign, Mul};\n+            struct Join<LC, RC> {\n+                _left: LC,\n+                _right: RC,\n+            }\n+            impl<\n+                    LC: Op<D = (K, LD), R = LR>,\n+                    RC: Op<D = (K, RD), R = RR>,\n+                    K: 'static,\n+                    LD: 'static,\n+                    LR: AddAssign<LR> + Mul<RR, Output = OR>,\n+                    RD: 'static,\n+                    RR: AddAssign<RR>,\n+                    OR: AddAssign<OR>,\n+                > Op for Join<LC, RC>\n+            {\n+                type D = (K, LD, RD);\n+                type R = OR;\n+            }\n+            impl<K: 'static, D: 'static, C: Op<D = (K, D)>> Relation<C> {\n+                pub fn join<C2: Op<D = (K, D2)>, D2: 'static, OR: AddAssign<OR>>(\n+                    self,\n+                    other: Relation<C2>,\n+                ) -> Relation<impl Op<D = (K, D, D2), R = OR>>\n+                where\n+                    C::R: Mul<C2::R, Output = OR>,\n+                {\n+                    Relation {\n+                        inner: Join {\n+                            _left: self.inner,\n+                            _right: other.inner,\n+                        },\n+                    }\n+                }\n+            }\n+        }\n+        mod map {\n+            use super::Op;\n+            use crate::core::Relation;\n+            use std::ops::AddAssign;\n+            struct Map<C, MF> {\n+                _inner: C,\n+                _op: MF,\n+            }\n+            impl<\n+                    D1,\n+                    R1,\n+                    D2: 'static,\n+                    R2: AddAssign<R2>,\n+                    C: Op<D = D1, R = R1>,\n+                    MF: Fn(D1, R1) -> (D2, R2),\n+                > Op for Map<C, MF>\n+            {\n+                type D = D2;\n+                type R = R2;\n+            }\n+            impl<C: Op> Relation<C> {\n+                pub fn map_dr<F: Fn(C::D, C::R) -> (D2, R2), D2: 'static, R2: AddAssign<R2>>(\n+                    self,\n+                    f: F,\n+                ) -> Relation<impl Op<D = D2, R = R2>> {\n+                    Relation {\n+                        inner: Map {\n+                            _inner: self.inner,\n+                            _op: f,\n+                        },\n+                    }\n+                }\n+            }\n+        }\n+        use std::ops::AddAssign;\n+        pub trait Op {\n+            type D: 'static;\n+            type R: AddAssign<Self::R>;\n+        }\n+    }\n+    pub use self::operator::Op;\n+    #[derive(Clone)]\n+    pub struct Relation<C> {\n+        inner: C,\n+    }\n+}\n+\n+use self::core::Op;\n+pub use self::core::Relation;\n+\n+fn main() {}"}, {"sha": "7cae7c71cd2d01e0d5419a05d180eea09636bdc6", "filename": "src/test/ui/associated-types/issue-88856.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e0c98e2a33756507357534c24d5071ad93b23024/src%2Ftest%2Fui%2Fassociated-types%2Fissue-88856.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c98e2a33756507357534c24d5071ad93b23024/src%2Ftest%2Fui%2Fassociated-types%2Fissue-88856.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-88856.rs?ref=e0c98e2a33756507357534c24d5071ad93b23024", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub trait Trait{\n+    type R;\n+    fn func(self)->Self::R;\n+}\n+\n+pub struct TraitImpl<const N:usize>(pub i32);\n+\n+impl<const N:usize> Trait for TraitImpl<N>\n+where [();N/2]:,\n+{\n+    type R = Self;\n+    fn func(self)->Self::R {\n+        self\n+    }\n+}\n+\n+fn sample<P,Convert>(p:P,f:Convert) -> i32\n+where\n+    P:Trait,Convert:Fn(P::R)->i32\n+{\n+    f(p.func())\n+}\n+\n+fn main() {\n+    let t = TraitImpl::<10>(4);\n+    sample(t,|x|x.0);\n+}"}, {"sha": "2f6c2d3aebd0a85b15d4b6ea3734be89aaeb671b", "filename": "src/test/ui/associated-types/issue-91234.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e0c98e2a33756507357534c24d5071ad93b23024/src%2Ftest%2Fui%2Fassociated-types%2Fissue-91234.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c98e2a33756507357534c24d5071ad93b23024/src%2Ftest%2Fui%2Fassociated-types%2Fissue-91234.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-91234.rs?ref=e0c98e2a33756507357534c24d5071ad93b23024", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+struct Struct;\n+\n+trait Trait {\n+    type Type;\n+}\n+\n+enum Enum<'a> where &'a Struct: Trait {\n+    Variant(<&'a Struct as Trait>::Type)\n+}\n+\n+fn main() {}"}]}