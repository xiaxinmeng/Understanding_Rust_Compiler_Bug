{"sha": "572f3414b782311a8ec4143c50bbe3b006594898", "node_id": "C_kwDOAAsO6NoAKDU3MmYzNDE0Yjc4MjMxMWE4ZWM0MTQzYzUwYmJlM2IwMDY1OTQ4OTg", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-09-24T18:49:29Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-07T19:19:27Z"}, "message": "migrate check_const.rs to translateable diagnostics", "tree": {"sha": "3df8075f4592340889a56140e9cfccc4323b5584", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3df8075f4592340889a56140e9cfccc4323b5584"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/572f3414b782311a8ec4143c50bbe3b006594898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/572f3414b782311a8ec4143c50bbe3b006594898", "html_url": "https://github.com/rust-lang/rust/commit/572f3414b782311a8ec4143c50bbe3b006594898", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/572f3414b782311a8ec4143c50bbe3b006594898/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "c457abee2e913ebb6f46329c15c6b43fbcb8c703", "url": "https://api.github.com/repos/rust-lang/rust/commits/c457abee2e913ebb6f46329c15c6b43fbcb8c703", "html_url": "https://github.com/rust-lang/rust/commit/c457abee2e913ebb6f46329c15c6b43fbcb8c703"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "550096469bb0bf58a3ef577d2fbe5a1cead28c61", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/572f3414b782311a8ec4143c50bbe3b006594898/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/572f3414b782311a8ec4143c50bbe3b006594898/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=572f3414b782311a8ec4143c50bbe3b006594898", "patch": "@@ -426,3 +426,10 @@ passes_feature_stable_twice =\n \n passes_feature_previously_declared =\n     feature `{$feature}` is declared {$declared}, but was previously declared {$prev_declared}\n+\n+passes_expr_not_allowed_in_context =\n+    {$expr} is not allowed in a `{$context}`\n+\n+passes_const_impl_const_trait =\n+    const `impl`s must be for traits marked with `#[const_trait]`\n+    .note = this trait must be annotated with `#[const_trait]`"}, {"sha": "0a509598ec51d57ee25413e1d1ec40cc93848f09", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/572f3414b782311a8ec4143c50bbe3b006594898/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572f3414b782311a8ec4143c50bbe3b006594898/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=572f3414b782311a8ec4143c50bbe3b006594898", "patch": "@@ -8,7 +8,6 @@\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n use rustc_attr as attr;\n-use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, Visitor};\n@@ -18,6 +17,8 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::parse::feature_err;\n use rustc_span::{sym, Span, Symbol};\n \n+use crate::errors::{ConstImplConstTrait, ExprNotAllowedInContext};\n+\n /// An expression that is not *always* legal in a const context.\n #[derive(Clone, Copy)]\n enum NonConstExpr {\n@@ -133,18 +134,22 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n         let const_kind =\n             const_kind.expect(\"`const_check_violated` may only be called inside a const context\");\n \n-        let msg = format!(\"{} is not allowed in a `{}`\", expr.name(), const_kind.keyword_name());\n-\n         let required_gates = required_gates.unwrap_or(&[]);\n         let missing_gates: Vec<_> =\n             required_gates.iter().copied().filter(|&g| !features.enabled(g)).collect();\n \n         match missing_gates.as_slice() {\n             [] => {\n-                struct_span_err!(tcx.sess, span, E0744, \"{}\", msg).emit();\n+                tcx.sess.emit_err(ExprNotAllowedInContext {\n+                    span,\n+                    expr: expr.name(),\n+                    context: const_kind.keyword_name(),\n+                });\n             }\n \n             [missing_primary, ref missing_secondary @ ..] => {\n+                let msg =\n+                    format!(\"{} is not allowed in a `{}`\", expr.name(), const_kind.keyword_name());\n                 let mut err = feature_err(&tcx.sess.parse_sess, *missing_primary, span, &msg);\n \n                 // If multiple feature gates would be required to enable this expression, include\n@@ -191,6 +196,26 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n         self.tcx.hir()\n     }\n \n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n+        let tcx = self.tcx;\n+        if let hir::ItemKind::Impl(hir::Impl {\n+            constness: hir::Constness::Const,\n+            of_trait: Some(trait_ref),\n+            ..\n+        }) = item.kind\n+            && let Some(def_id) = trait_ref.trait_def_id()\n+        {\n+            let source_map = tcx.sess.source_map();\n+            if !tcx.has_attr(def_id, sym::const_trait) {\n+                tcx.sess.emit_err(ConstImplConstTrait {\n+                    span: source_map.guess_head_span(item.span),\n+                    def_span: source_map.guess_head_span(tcx.def_span(def_id)),\n+                });\n+            }\n+        }\n+        intravisit::walk_item(self, item);\n+    }\n+\n     fn visit_anon_const(&mut self, anon: &'tcx hir::AnonConst) {\n         let kind = Some(hir::ConstContext::Const);\n         self.recurse_into(kind, None, |this| intravisit::walk_anon_const(this, anon));"}, {"sha": "fe169c566f63583bca18736db80580b40dccff4c", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/572f3414b782311a8ec4143c50bbe3b006594898/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572f3414b782311a8ec4143c50bbe3b006594898/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=572f3414b782311a8ec4143c50bbe3b006594898", "patch": "@@ -852,3 +852,21 @@ pub struct FeaturePreviouslyDeclared<'a, 'b> {\n     pub declared: &'a str,\n     pub prev_declared: &'b str,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(passes::expr_not_allowed_in_context, code = \"E0744\")]\n+pub struct ExprNotAllowedInContext<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub expr: String,\n+    pub context: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes::const_impl_const_trait)]\n+pub struct ConstImplConstTrait {\n+    #[primary_span]\n+    pub span: Span,\n+    #[note]\n+    pub def_span: Span,\n+}"}]}