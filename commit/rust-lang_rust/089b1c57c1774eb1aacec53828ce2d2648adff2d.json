{"sha": "089b1c57c1774eb1aacec53828ce2d2648adff2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4OWIxYzU3YzE3NzRlYjFhYWNlYzUzODI4Y2UyZDI2NDhhZGZmMmQ=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-26T11:06:41Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-27T16:59:21Z"}, "message": "Address some issues flagged in review", "tree": {"sha": "ba098a1ef9cfc82271a9abcc0eb022b40739a3d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba098a1ef9cfc82271a9abcc0eb022b40739a3d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/089b1c57c1774eb1aacec53828ce2d2648adff2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/089b1c57c1774eb1aacec53828ce2d2648adff2d", "html_url": "https://github.com/rust-lang/rust/commit/089b1c57c1774eb1aacec53828ce2d2648adff2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/089b1c57c1774eb1aacec53828ce2d2648adff2d/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04748a0f16624a1893c1da28a35ca3e220c81fce", "url": "https://api.github.com/repos/rust-lang/rust/commits/04748a0f16624a1893c1da28a35ca3e220c81fce", "html_url": "https://github.com/rust-lang/rust/commit/04748a0f16624a1893c1da28a35ca3e220c81fce"}], "stats": {"total": 66, "additions": 26, "deletions": 40}, "files": [{"sha": "e4008058ccf58bf7275af6350ee8f079cd6353f7", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/089b1c57c1774eb1aacec53828ce2d2648adff2d/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089b1c57c1774eb1aacec53828ce2d2648adff2d/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=089b1c57c1774eb1aacec53828ce2d2648adff2d", "patch": "@@ -388,8 +388,7 @@ pub use crate::code_model_impl::function::ScopeEntryWithSyntax;\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct FnSignature {\n     pub(crate) name: Name,\n-    pub(crate) type_params: Arc<GenericParams>,\n-    pub(crate) args: Vec<TypeRef>,\n+    pub(crate) params: Vec<TypeRef>,\n     pub(crate) ret_type: TypeRef,\n     /// True if the first param is `self`. This is relevant to decide whether this\n     /// can be called as a method.\n@@ -401,8 +400,8 @@ impl FnSignature {\n         &self.name\n     }\n \n-    pub fn args(&self) -> &[TypeRef] {\n-        &self.args\n+    pub fn params(&self) -> &[TypeRef] {\n+        &self.params\n     }\n \n     pub fn ret_type(&self) -> &TypeRef {\n@@ -414,10 +413,6 @@ impl FnSignature {\n     pub fn has_self_param(&self) -> bool {\n         self.has_self_param\n     }\n-\n-    pub fn generics(&self) -> &GenericParams {\n-        &self.type_params\n-    }\n }\n \n impl Function {"}, {"sha": "e0dd4d6290bebfa70fb4daeb7185a83a6df3b670", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/089b1c57c1774eb1aacec53828ce2d2648adff2d/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089b1c57c1774eb1aacec53828ce2d2648adff2d/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=089b1c57c1774eb1aacec53828ce2d2648adff2d", "patch": "@@ -32,7 +32,7 @@ impl FnSignature {\n             .name()\n             .map(|n| n.as_name())\n             .unwrap_or_else(Name::missing);\n-        let mut args = Vec::new();\n+        let mut params = Vec::new();\n         let mut has_self_param = false;\n         if let Some(param_list) = node.param_list() {\n             if let Some(self_param) = param_list.self_param() {\n@@ -50,15 +50,14 @@ impl FnSignature {\n                         }\n                     }\n                 };\n-                args.push(self_type);\n+                params.push(self_type);\n                 has_self_param = true;\n             }\n             for param in param_list.params() {\n                 let type_ref = TypeRef::from_ast_opt(param.type_ref());\n-                args.push(type_ref);\n+                params.push(type_ref);\n             }\n         }\n-        let type_params = db.generic_params(func.into());\n         let ret_type = if let Some(type_ref) = node.ret_type().and_then(|rt| rt.type_ref()) {\n             TypeRef::from_ast(type_ref)\n         } else {\n@@ -67,8 +66,7 @@ impl FnSignature {\n \n         let sig = FnSignature {\n             name,\n-            type_params,\n-            args,\n+            params,\n             ret_type,\n             has_self_param,\n         };"}, {"sha": "3cf3eaded45b3123794f7c30e2bce853706b2c0e", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/089b1c57c1774eb1aacec53828ce2d2648adff2d/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089b1c57c1774eb1aacec53828ce2d2648adff2d/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=089b1c57c1774eb1aacec53828ce2d2648adff2d", "patch": "@@ -34,7 +34,7 @@ use test_utils::tested_by;\n \n use crate::{\n     Module, Function, Struct, StructField, Enum, EnumVariant, Path, Name, ImplBlock,\n-    FnSignature, FnScopes, ModuleDef, AdtDef,\n+    FnScopes, ModuleDef, AdtDef,\n     db::HirDatabase,\n     type_ref::{TypeRef, Mutability},\n     name::KnownName,\n@@ -1164,13 +1164,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let ty = self.insert_type_vars(ty.apply_substs(substs));\n                 (ty, Some(var.into()))\n             }\n-            TypableDef::Function(func) => {\n-                let ty = type_for_fn(self.db, func);\n-                let ty = self.insert_type_vars(ty.apply_substs(substs));\n-                // FIXME: is this right?\n-                (ty, None)\n-            }\n-            TypableDef::Enum(_) => (Ty::Unknown, None),\n+            TypableDef::Function(_) | TypableDef::Enum(_) => (Ty::Unknown, None),\n         }\n     }\n \n@@ -1363,15 +1357,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     Ty::FnPtr(sig) => (sig.input.clone(), sig.output.clone()),\n                     Ty::FnDef { def, substs, .. } => {\n                         let fn_sig = def.signature(self.db);\n+                        let generic_params = def.generic_params(self.db);\n                         let ret_ty = self\n-                            .make_ty(fn_sig.ret_type(), fn_sig.generics())\n+                            .make_ty(fn_sig.ret_type(), &generic_params)\n                             .subst(&substs);\n                         let param_tys = fn_sig\n-                            .args()\n+                            .params()\n                             .iter()\n-                            .map(|type_ref| {\n-                                self.make_ty(type_ref, fn_sig.generics()).subst(&substs)\n-                            })\n+                            .map(|type_ref| self.make_ty(type_ref, &generic_params).subst(&substs))\n                             .collect();\n                         (param_tys, ret_ty)\n                     }\n@@ -1416,13 +1409,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     }\n                     Ty::FnDef { def, substs, .. } => {\n                         let fn_sig = def.signature(self.db);\n+                        let generic_params = def.generic_params(self.db);\n                         let ret_ty = self\n-                            .make_ty(fn_sig.ret_type(), fn_sig.generics())\n+                            .make_ty(fn_sig.ret_type(), &generic_params)\n                             .subst(&substs);\n \n-                        if fn_sig.args().len() > 0 {\n-                            let mut arg_iter = fn_sig.args().iter().map(|type_ref| {\n-                                self.make_ty(type_ref, fn_sig.generics()).subst(&substs)\n+                        if fn_sig.params().len() > 0 {\n+                            let mut arg_iter = fn_sig.params().iter().map(|type_ref| {\n+                                self.make_ty(type_ref, &generic_params).subst(&substs)\n                             });\n                             let receiver_ty = arg_iter.next().unwrap();\n                             (receiver_ty, arg_iter.collect(), ret_ty)\n@@ -1660,15 +1654,16 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         ty\n     }\n \n-    fn collect_fn_signature(&mut self, signature: &FnSignature) {\n+    fn collect_fn_signature(&mut self, func: Function) {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n-        let generics = signature.generics();\n-        for (type_ref, pat) in signature.args().iter().zip(body.params()) {\n-            let ty = self.make_ty(type_ref, generics);\n+        let signature = func.signature(self.db);\n+        let generics = func.generic_params(self.db);\n+        for (type_ref, pat) in signature.params().iter().zip(body.params()) {\n+            let ty = self.make_ty(type_ref, &generics);\n \n             self.infer_pat(*pat, &ty);\n         }\n-        self.return_ty = self.make_ty(signature.ret_type(), generics);\n+        self.return_ty = self.make_ty(signature.ret_type(), &generics);\n     }\n \n     fn infer_body(&mut self) {\n@@ -1687,9 +1682,7 @@ pub fn infer(db: &impl HirDatabase, func: Function) -> Arc<InferenceResult> {\n     let impl_block = func.impl_block(db);\n     let mut ctx = InferenceContext::new(db, body, scopes, module, impl_block);\n \n-    let signature = func.signature(db);\n-    ctx.collect_fn_signature(&signature);\n-\n+    ctx.collect_fn_signature(func);\n     ctx.infer_body();\n \n     Arc::new(ctx.resolve_all())"}, {"sha": "b16ac2b289c80520be27e49a46debcdaf34c3dd0", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/089b1c57c1774eb1aacec53828ce2d2648adff2d/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089b1c57c1774eb1aacec53828ce2d2648adff2d/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=089b1c57c1774eb1aacec53828ce2d2648adff2d", "patch": "@@ -240,7 +240,7 @@ impl Builder {\n         if ctx.use_item_syntax.is_none() && !ctx.is_call {\n             tested_by!(inserts_parens_for_function_calls);\n             let sig = function.signature(ctx.db);\n-            if sig.args().is_empty() || sig.has_self_param() && sig.args().len() == 1 {\n+            if sig.params().is_empty() || sig.has_self_param() && sig.params().len() == 1 {\n                 self.insert_text = Some(format!(\"{}()$0\", self.label));\n             } else {\n                 self.insert_text = Some(format!(\"{}($0)\", self.label));"}]}