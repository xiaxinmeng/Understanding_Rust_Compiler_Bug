{"sha": "0437bf7a7d968af885dc05931e4e7d1eaddaadbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MzdiZjdhN2Q5NjhhZjg4NWRjMDU5MzFlNGU3ZDFlYWRkYWFkYmY=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-01T16:59:38Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-04T17:19:30Z"}, "message": "Allow for stdin input in EmitMode::ModifiedLines", "tree": {"sha": "d11cc2cb623eda33999bbef632c27cebe53d58f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d11cc2cb623eda33999bbef632c27cebe53d58f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0437bf7a7d968af885dc05931e4e7d1eaddaadbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0437bf7a7d968af885dc05931e4e7d1eaddaadbf", "html_url": "https://github.com/rust-lang/rust/commit/0437bf7a7d968af885dc05931e4e7d1eaddaadbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0437bf7a7d968af885dc05931e4e7d1eaddaadbf/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51af19547313cc129dcccbe728ab2b9de439405f", "url": "https://api.github.com/repos/rust-lang/rust/commits/51af19547313cc129dcccbe728ab2b9de439405f", "html_url": "https://github.com/rust-lang/rust/commit/51af19547313cc129dcccbe728ab2b9de439405f"}], "stats": {"total": 107, "additions": 80, "deletions": 27}, "files": [{"sha": "f6daab0f487758e62c9c80bb6cf9dfca9a9f7840", "filename": "src/formatting.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0437bf7a7d968af885dc05931e4e7d1eaddaadbf/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0437bf7a7d968af885dc05931e4e7d1eaddaadbf/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=0437bf7a7d968af885dc05931e4e7d1eaddaadbf", "patch": "@@ -181,15 +181,20 @@ impl<'a, T: FormatHandler + 'a> FormatContext<'a, T> {\n         self.report\n             .add_non_formatted_ranges(visitor.skipped_range.clone());\n \n-        self.handler\n-            .handle_formatted_file(path, visitor.buffer.to_owned(), &mut self.report)\n+        self.handler.handle_formatted_file(\n+            self.parse_session.source_map(),\n+            path,\n+            visitor.buffer.to_owned(),\n+            &mut self.report,\n+        )\n     }\n }\n \n // Handle the results of formatting.\n trait FormatHandler {\n     fn handle_formatted_file(\n         &mut self,\n+        source_map: &SourceMap,\n         path: FileName,\n         result: String,\n         report: &mut FormatReport,\n@@ -200,13 +205,14 @@ impl<'b, T: Write + 'b> FormatHandler for Session<'b, T> {\n     // Called for each formatted file.\n     fn handle_formatted_file(\n         &mut self,\n+        source_map: &SourceMap,\n         path: FileName,\n         result: String,\n         report: &mut FormatReport,\n     ) -> Result<(), ErrorKind> {\n         if let Some(ref mut out) = self.out {\n-            match source_file::write_file(&result, &path, out, &self.config) {\n-                Ok(b) if b => report.add_diff(),\n+            match source_file::write_file(Some(source_map), &path, &result, out, &self.config) {\n+                Ok(has_diff) if has_diff => report.add_diff(),\n                 Err(e) => {\n                     // Create a new error with path_str to help users see which files failed\n                     let err_msg = format!(\"{}: {}\", path, e);\n@@ -299,7 +305,7 @@ impl FormattingError {\n \n pub(crate) type FormatErrorMap = HashMap<FileName, Vec<FormattingError>>;\n \n-#[derive(Default, Debug)]\n+#[derive(Default, Debug, PartialEq)]\n pub(crate) struct ReportedErrors {\n     // Encountered e.g., an IO error.\n     pub(crate) has_operational_errors: bool,"}, {"sha": "2a64d58ba52122990e2fb265d490f3bfaa0a755e", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0437bf7a7d968af885dc05931e4e7d1eaddaadbf/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0437bf7a7d968af885dc05931e4e7d1eaddaadbf/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0437bf7a7d968af885dc05931e4e7d1eaddaadbf", "patch": "@@ -33,6 +33,8 @@ pub use crate::config::{\n     Range, Verbosity,\n };\n \n+pub use crate::rustfmt_diff::make_diff;\n+\n #[macro_use]\n mod utils;\n "}, {"sha": "5cbb01dd1233c50137ca24882cd4ab0ece5e22cc", "filename": "src/source_file.rs", "status": "modified", "additions": 42, "deletions": 21, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/0437bf7a7d968af885dc05931e4e7d1eaddaadbf/src%2Fsource_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0437bf7a7d968af885dc05931e4e7d1eaddaadbf/src%2Fsource_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_file.rs?ref=0437bf7a7d968af885dc05931e4e7d1eaddaadbf", "patch": "@@ -1,5 +1,8 @@\n use std::fs;\n use std::io::{self, Write};\n+use std::path::Path;\n+\n+use syntax::source_map::SourceMap;\n \n use crate::checkstyle::output_checkstyle_file;\n use crate::config::{Config, EmitMode, FileName, Verbosity};\n@@ -26,7 +29,7 @@ where\n         write!(out, \"{}\", crate::checkstyle::header())?;\n     }\n     for &(ref filename, ref text) in source_file {\n-        write_file(text, filename, out, config)?;\n+        write_file(None, filename, text, out, config)?;\n     }\n     if config.emit_mode() == EmitMode::Checkstyle {\n         write!(out, \"{}\", crate::checkstyle::footer())?;\n@@ -36,24 +39,46 @@ where\n }\n \n pub fn write_file<T>(\n-    formatted_text: &str,\n+    source_map: Option<&SourceMap>,\n     filename: &FileName,\n+    formatted_text: &str,\n     out: &mut T,\n     config: &Config,\n ) -> Result<bool, io::Error>\n where\n     T: Write,\n {\n-    let filename_to_path = || match *filename {\n-        FileName::Real(ref path) => path,\n-        _ => panic!(\"cannot format `{}` and emit to files\", filename),\n+    fn ensure_real_path(filename: &FileName) -> &Path {\n+        match *filename {\n+            FileName::Real(ref path) => path,\n+            _ => panic!(\"cannot format `{}` and emit to files\", filename),\n+        }\n+    }\n+\n+    impl From<&FileName> for syntax_pos::FileName {\n+        fn from(filename: &FileName) -> syntax_pos::FileName {\n+            match filename {\n+                FileName::Real(path) => syntax_pos::FileName::Real(path.to_owned()),\n+                FileName::Stdin => syntax_pos::FileName::Custom(\"stdin\".to_owned()),\n+            }\n+        }\n+    }\n+\n+    // If parse session is around (cfg(not(test))) then try getting source from\n+    // there instead of hitting the file system. This also supports getting\n+    // original text for `FileName::Stdin`.\n+    let original_text = source_map\n+        .and_then(|x| x.get_source_file(&filename.into()))\n+        .and_then(|x| x.src.as_ref().map(|x| x.to_string()));\n+    let original_text = match original_text {\n+        Some(ori) => ori,\n+        None => fs::read_to_string(ensure_real_path(filename))?,\n     };\n \n     match config.emit_mode() {\n         EmitMode::Files if config.make_backup() => {\n-            let filename = filename_to_path();\n-            let ori = fs::read_to_string(filename)?;\n-            if ori != formatted_text {\n+            let filename = ensure_real_path(filename);\n+            if original_text != formatted_text {\n                 // Do a little dance to make writing safer - write to a temp file\n                 // rename the original to a .bk, then rename the temp file to the\n                 // original.\n@@ -67,9 +92,9 @@ where\n         }\n         EmitMode::Files => {\n             // Write text directly over original file if there is a diff.\n-            let filename = filename_to_path();\n-            let ori = fs::read_to_string(filename)?;\n-            if ori != formatted_text {\n+            let filename = ensure_real_path(filename);\n+\n+            if original_text != formatted_text {\n                 fs::write(filename, formatted_text)?;\n             }\n         }\n@@ -80,27 +105,23 @@ where\n             write!(out, \"{}\", formatted_text)?;\n         }\n         EmitMode::ModifiedLines => {\n-            let filename = filename_to_path();\n-            let ori = fs::read_to_string(filename)?;\n-            let mismatch = make_diff(&ori, formatted_text, 0);\n+            let mismatch = make_diff(&original_text, formatted_text, 0);\n             let has_diff = !mismatch.is_empty();\n             output_modified(out, mismatch);\n             return Ok(has_diff);\n         }\n         EmitMode::Checkstyle => {\n-            let filename = filename_to_path();\n-            let ori = fs::read_to_string(filename)?;\n-            let diff = make_diff(&ori, formatted_text, 3);\n+            let filename = ensure_real_path(filename);\n+\n+            let diff = make_diff(&original_text, formatted_text, 3);\n             output_checkstyle_file(out, filename, diff)?;\n         }\n         EmitMode::Diff => {\n-            let filename = filename_to_path();\n-            let ori = fs::read_to_string(filename)?;\n-            let mismatch = make_diff(&ori, formatted_text, 3);\n+            let mismatch = make_diff(&original_text, formatted_text, 3);\n             let has_diff = !mismatch.is_empty();\n             print_diff(\n                 mismatch,\n-                |line_num| format!(\"Diff in {} at line {}:\", filename.display(), line_num),\n+                |line_num| format!(\"Diff in {} at line {}:\", filename, line_num),\n                 config,\n             );\n             return Ok(has_diff);"}, {"sha": "5d9c103ed03177c9bec4411529a28f996528cc84", "filename": "src/test/mod.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0437bf7a7d968af885dc05931e4e7d1eaddaadbf/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0437bf7a7d968af885dc05931e4e7d1eaddaadbf/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=0437bf7a7d968af885dc05931e4e7d1eaddaadbf", "patch": "@@ -9,7 +9,7 @@ use std::process::{Command, Stdio};\n use std::str::Chars;\n \n use crate::config::{Color, Config, EmitMode, FileName, ReportTactic};\n-use crate::formatting::{ModifiedChunk, SourceFile};\n+use crate::formatting::{ModifiedChunk, ReportedErrors, SourceFile};\n use crate::rustfmt_diff::{make_diff, print_diff, DiffLine, Mismatch, OutputWriter};\n use crate::source_file;\n use crate::{FormatReport, Input, Session};\n@@ -290,6 +290,30 @@ fn stdin_parser_panic_caught() {\n     }\n }\n \n+/// Ensures that `EmitMode::ModifiedLines` works with input from `stdin`. Useful\n+/// when embedding Rustfmt (e.g. inside RLS).\n+#[test]\n+fn stdin_works_with_modified_lines() {\n+    let input = \"\\nfn\\n some( )\\n{\\n}\\nfn main () {}\\n\";\n+    let output = \"1 6 2\\nfn some() {}\\nfn main() {}\\n\";\n+\n+    let input = Input::Text(input.to_owned());\n+    let mut config = Config::default();\n+    config.set().emit_mode(EmitMode::ModifiedLines);\n+    let mut buf: Vec<u8> = vec![];\n+    {\n+        let mut session = Session::new(config, Some(&mut buf));\n+        session.format(input).unwrap();\n+        let errors = ReportedErrors {\n+            has_diff: true,\n+            ..Default::default()\n+        };\n+        assert_eq!(session.errors, errors);\n+    }\n+    let newline = if cfg!(windows) { \"\\r\\n\" } else { \"\\n\" };\n+    assert_eq!(buf, output.replace('\\n', newline).as_bytes());\n+}\n+\n #[test]\n fn stdin_disable_all_formatting_test() {\n     match option_env!(\"CFG_RELEASE_CHANNEL\") {"}]}