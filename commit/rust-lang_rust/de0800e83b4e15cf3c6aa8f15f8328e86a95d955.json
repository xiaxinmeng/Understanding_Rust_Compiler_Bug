{"sha": "de0800e83b4e15cf3c6aa8f15f8328e86a95d955", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMDgwMGU4M2I0ZTE1Y2YzYzZhYThmMTVmODMyOGU4NmE5NWQ5NTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-25T10:05:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-25T10:05:12Z"}, "message": "Auto merge of #1688 - RalfJung:rustup, r=RalfJung\n\nadjust Windows shims for stdlib changes (Windows XP removal)", "tree": {"sha": "be65430d051e348c1d94923ecb90db22d9bbd627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be65430d051e348c1d94923ecb90db22d9bbd627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de0800e83b4e15cf3c6aa8f15f8328e86a95d955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de0800e83b4e15cf3c6aa8f15f8328e86a95d955", "html_url": "https://github.com/rust-lang/rust/commit/de0800e83b4e15cf3c6aa8f15f8328e86a95d955", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de0800e83b4e15cf3c6aa8f15f8328e86a95d955/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5483ed5836b7686db9115e66bb9374308bc0d873", "url": "https://api.github.com/repos/rust-lang/rust/commits/5483ed5836b7686db9115e66bb9374308bc0d873", "html_url": "https://github.com/rust-lang/rust/commit/5483ed5836b7686db9115e66bb9374308bc0d873"}, {"sha": "13dd513254f92e5faa3f4ac7d41fc084c11fbb85", "url": "https://api.github.com/repos/rust-lang/rust/commits/13dd513254f92e5faa3f4ac7d41fc084c11fbb85", "html_url": "https://github.com/rust-lang/rust/commit/13dd513254f92e5faa3f4ac7d41fc084c11fbb85"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "2064258addf68dac2dbf34721100111d555f73e7", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de0800e83b4e15cf3c6aa8f15f8328e86a95d955/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/de0800e83b4e15cf3c6aa8f15f8328e86a95d955/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=de0800e83b4e15cf3c6aa8f15f8328e86a95d955", "patch": "@@ -1 +1 @@\n-dc1eee2f256efbd1d3b50b6b090232f81cac6d72\n+9a9477fada5baf69d693e717d6df902e411a73d6"}, {"sha": "c88a16461153dd70023023f7a7abae0167e02719", "filename": "src/shims/windows/dlsym.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de0800e83b4e15cf3c6aa8f15f8328e86a95d955/src%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0800e83b4e15cf3c6aa8f15f8328e86a95d955/src%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fdlsym.rs?ref=de0800e83b4e15cf3c6aa8f15f8328e86a95d955", "patch": "@@ -27,7 +27,6 @@ impl Dlsym {\n             \"AcquireSRWLockShared\" => Some(Dlsym::AcquireSRWLockShared),\n             \"ReleaseSRWLockShared\" => Some(Dlsym::ReleaseSRWLockShared),\n             \"TryAcquireSRWLockShared\" => Some(Dlsym::TryAcquireSRWLockShared),\n-            \"SetThreadStackGuarantee\" => None,\n             \"GetSystemTimePreciseAsFileTime\" => None,\n             _ => throw_unsup_format!(\"unsupported Windows dlsym: {}\", name),\n         })"}, {"sha": "17d566d18eea1837d4138f334c26c8c57b2830a4", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/de0800e83b4e15cf3c6aa8f15f8328e86a95d955/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0800e83b4e15cf3c6aa8f15f8328e86a95d955/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=de0800e83b4e15cf3c6aa8f15f8328e86a95d955", "patch": "@@ -5,6 +5,7 @@ use rustc_target::abi::Size;\n \n use crate::*;\n use helpers::check_arg_count;\n+use shims::windows::sync::EvalContextExt as _;\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n@@ -207,6 +208,34 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n+            // Synchronization primitives\n+            \"AcquireSRWLockExclusive\" => {\n+                let &[ptr] = check_arg_count(args)?;\n+                this.AcquireSRWLockExclusive(ptr)?;\n+            }\n+            \"ReleaseSRWLockExclusive\" => {\n+                let &[ptr] = check_arg_count(args)?;\n+                this.ReleaseSRWLockExclusive(ptr)?;\n+            }\n+            \"TryAcquireSRWLockExclusive\" => {\n+                let &[ptr] = check_arg_count(args)?;\n+                let ret = this.TryAcquireSRWLockExclusive(ptr)?;\n+                this.write_scalar(Scalar::from_u8(ret), dest)?;\n+            }\n+            \"AcquireSRWLockShared\" => {\n+                let &[ptr] = check_arg_count(args)?;\n+                this.AcquireSRWLockShared(ptr)?;\n+            }\n+            \"ReleaseSRWLockShared\" => {\n+                let &[ptr] = check_arg_count(args)?;\n+                this.ReleaseSRWLockShared(ptr)?;\n+            }\n+            \"TryAcquireSRWLockShared\" => {\n+                let &[ptr] = check_arg_count(args)?;\n+                let ret = this.TryAcquireSRWLockShared(ptr)?;\n+                this.write_scalar(Scalar::from_u8(ret), dest)?;\n+            }\n+\n             // Dynamic symbol loading\n             \"GetProcAddress\" => {\n                 #[allow(non_snake_case)]\n@@ -285,6 +314,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // Any non zero value works for the stdlib. This is just used for stack overflows anyway.\n                 this.write_scalar(Scalar::from_machine_usize(1, this), dest)?;\n             }\n+            \"SetThreadStackGuarantee\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n+                #[allow(non_snake_case)]\n+                let &[_StackSizeInBytes] = check_arg_count(args)?;\n+                // Any non zero value works for the stdlib. This is just used for stack overflows anyway.\n+                this.write_scalar(Scalar::from_u32(1), dest)?;\n+            }\n             | \"InitializeCriticalSection\"\n             | \"EnterCriticalSection\"\n             | \"LeaveCriticalSection\""}]}