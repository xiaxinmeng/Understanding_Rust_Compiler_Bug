{"sha": "f626185a5b792c171297d1e9a6b8d166348a5e53", "node_id": "C_kwDOAAsO6NoAKGY2MjYxODVhNWI3OTJjMTcxMjk3ZDFlOWE2YjhkMTY2MzQ4YTVlNTM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-15T11:09:45Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-15T11:09:45Z"}, "message": "Update portable-simd to 582239ac3b32007613df04d7ffa78dc30f4c5645", "tree": {"sha": "24a371b73e2b705766a0b7a7a3f09f525f529ab7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24a371b73e2b705766a0b7a7a3f09f525f529ab7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f626185a5b792c171297d1e9a6b8d166348a5e53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f626185a5b792c171297d1e9a6b8d166348a5e53", "html_url": "https://github.com/rust-lang/rust/commit/f626185a5b792c171297d1e9a6b8d166348a5e53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f626185a5b792c171297d1e9a6b8d166348a5e53/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "808cba2251aba868a97b67ad7d5d7cecc9024f93", "url": "https://api.github.com/repos/rust-lang/rust/commits/808cba2251aba868a97b67ad7d5d7cecc9024f93", "html_url": "https://github.com/rust-lang/rust/commit/808cba2251aba868a97b67ad7d5d7cecc9024f93"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "2131b88c2328693b47b5a68ea77ebc3b46436714", "filename": "build_system/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f626185a5b792c171297d1e9a6b8d166348a5e53/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f626185a5b792c171297d1e9a6b8d166348a5e53/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=f626185a5b792c171297d1e9a6b8d166348a5e53", "patch": "@@ -244,7 +244,7 @@ static REGEX: CargoProject = CargoProject::new(&REGEX_REPO.source_dir(), \"regex\"\n pub(crate) static PORTABLE_SIMD_REPO: GitRepo = GitRepo::github(\n     \"rust-lang\",\n     \"portable-simd\",\n-    \"d5cd4a8112d958bd3a252327e0d069a6363249bd\",\n+    \"582239ac3b32007613df04d7ffa78dc30f4c5645\",\n     \"portable-simd\",\n );\n "}, {"sha": "bdf727666bedff5a1bd149eb6466aac9dc4be716", "filename": "patches/0001-portable-simd-Disable-unsupported-tests.patch", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f626185a5b792c171297d1e9a6b8d166348a5e53/patches%2F0001-portable-simd-Disable-unsupported-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/f626185a5b792c171297d1e9a6b8d166348a5e53/patches%2F0001-portable-simd-Disable-unsupported-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0001-portable-simd-Disable-unsupported-tests.patch?ref=f626185a5b792c171297d1e9a6b8d166348a5e53", "patch": "@@ -24,8 +24,8 @@ index e8e8f68..7173c24 100644\n      /// If an index is out-of-bounds, the lane is instead selected from the `or` vector.\n      ///\n @@ -473,6 +474,7 @@ where\n-             // Cleared \u2622\ufe0f *mut T Zone\n-         }\n+         // Safety: The caller is responsible for upholding all invariants\n+         unsafe { intrinsics::simd_scatter(self, dest, enable.to_int()) }\n      }\n +    */\n  }"}, {"sha": "a6f5f70dc4cadb50e585a79a740c4b3b7a676ba4", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f626185a5b792c171297d1e9a6b8d166348a5e53/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f626185a5b792c171297d1e9a6b8d166348a5e53/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=f626185a5b792c171297d1e9a6b8d166348a5e53", "patch": "@@ -770,7 +770,37 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         }\n \n-        // simd_arith_offset\n+        sym::simd_expose_addr | sym::simd_from_exposed_addr | sym::simd_cast_ptr => {\n+            intrinsic_args!(fx, args => (arg); intrinsic);\n+            ret.write_cvalue_transmute(fx, arg);\n+        }\n+\n+        sym::simd_arith_offset => {\n+            intrinsic_args!(fx, args => (ptr, offset); intrinsic);\n+\n+            let (lane_count, ptr_lane_ty) = ptr.layout().ty.simd_size_and_type(fx.tcx);\n+            let pointee_ty = ptr_lane_ty.builtin_deref(true).unwrap().ty;\n+            let pointee_size = fx.layout_of(pointee_ty).size.bytes();\n+            let (ret_lane_count, ret_lane_ty) = ret.layout().ty.simd_size_and_type(fx.tcx);\n+            let ret_lane_layout = fx.layout_of(ret_lane_ty);\n+            assert_eq!(lane_count, ret_lane_count);\n+\n+            for lane_idx in 0..lane_count {\n+                let ptr_lane = ptr.value_lane(fx, lane_idx).load_scalar(fx);\n+                let offset_lane = offset.value_lane(fx, lane_idx).load_scalar(fx);\n+\n+                let ptr_diff = if pointee_size != 1 {\n+                    fx.bcx.ins().imul_imm(offset_lane, pointee_size as i64)\n+                } else {\n+                    offset_lane\n+                };\n+                let res_lane = fx.bcx.ins().iadd(ptr_lane, ptr_diff);\n+                let res_lane = CValue::by_val(res_lane, ret_lane_layout);\n+\n+                ret.place_lane(fx, lane_idx).write_cvalue(fx, res_lane);\n+            }\n+        }\n+\n         // simd_scatter\n         // simd_gather\n         _ => {"}]}