{"sha": "ed8c3594bc86dd366e729d02c34915c783e6ac81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkOGMzNTk0YmM4NmRkMzY2ZTcyOWQwMmMzNDkxNWM3ODNlNmFjODE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-29T02:53:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-29T21:09:01Z"}, "message": "core::rt: Add SleeperList to Scheduler", "tree": {"sha": "b7f9c5260581da0ac945ab463895ab0aa45d6fa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7f9c5260581da0ac945ab463895ab0aa45d6fa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed8c3594bc86dd366e729d02c34915c783e6ac81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed8c3594bc86dd366e729d02c34915c783e6ac81", "html_url": "https://github.com/rust-lang/rust/commit/ed8c3594bc86dd366e729d02c34915c783e6ac81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed8c3594bc86dd366e729d02c34915c783e6ac81/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dec9db10da062b1c528d46426d9f62e201d39bc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec9db10da062b1c528d46426d9f62e201d39bc6", "html_url": "https://github.com/rust-lang/rust/commit/dec9db10da062b1c528d46426d9f62e201d39bc6"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "75036dcd28f8d41e4d93f28ab7c9925228b54904", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed8c3594bc86dd366e729d02c34915c783e6ac81/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8c3594bc86dd366e729d02c34915c783e6ac81/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=ed8c3594bc86dd366e729d02c34915c783e6ac81", "patch": "@@ -150,12 +150,14 @@ pub fn start(_argc: int, _argv: **u8, crate_map: *u8, main: ~fn()) -> int {\n     use self::sched::{Scheduler, Coroutine};\n     use self::work_queue::WorkQueue;\n     use self::uv::uvio::UvEventLoop;\n+    use self::sleeper_list::SleeperList;\n \n     init(crate_map);\n \n     let loop_ = ~UvEventLoop::new();\n     let work_queue = WorkQueue::new();\n-    let mut sched = ~Scheduler::new(loop_, work_queue);\n+    let sleepers = SleeperList::new();\n+    let mut sched = ~Scheduler::new(loop_, work_queue, sleepers);\n     let main_task = ~Coroutine::new(&mut sched.stack_pool, main);\n \n     sched.enqueue_task(main_task);"}, {"sha": "2a99648fa04594f6a634b868c1ce199777a6eb06", "filename": "src/libcore/rt/sched.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ed8c3594bc86dd366e729d02c34915c783e6ac81/src%2Flibcore%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8c3594bc86dd366e729d02c34915c783e6ac81/src%2Flibcore%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched.rs?ref=ed8c3594bc86dd366e729d02c34915c783e6ac81", "patch": "@@ -13,6 +13,7 @@ use sys;\n use cast::transmute;\n use cell::Cell;\n \n+use super::sleeper_list::SleeperList;\n use super::work_queue::WorkQueue;\n use super::stack::{StackPool, StackSegment};\n use super::rtio::{EventLoop, EventLoopObject, RemoteCallbackObject};\n@@ -27,7 +28,12 @@ use rt::rtio::IoFactoryObject;\n /// thread local storage and the running task is owned by the\n /// scheduler.\n pub struct Scheduler {\n+    /// A queue of available work. Under a work-stealing policy there\n+    /// is one per Scheduler.\n     priv work_queue: WorkQueue<~Coroutine>,\n+    /// A shared list of sleeping schedulers. We'll use this to wake\n+    /// up schedulers when pushing work onto the work queue.\n+    priv sleeper_list: SleeperList,\n     stack_pool: StackPool,\n     /// The event loop used to drive the scheduler and perform I/O\n     event_loop: ~EventLoopObject,\n@@ -65,12 +71,16 @@ pub impl Scheduler {\n \n     fn in_task_context(&self) -> bool { self.current_task.is_some() }\n \n-    fn new(event_loop: ~EventLoopObject, work_queue: WorkQueue<~Coroutine>) -> Scheduler {\n+    fn new(event_loop: ~EventLoopObject,\n+           work_queue: WorkQueue<~Coroutine>,\n+           sleeper_list: SleeperList)\n+        -> Scheduler {\n \n         // Lazily initialize the runtime TLS key\n         local_ptr::init_tls_key();\n \n         Scheduler {\n+            sleeper_list: sleeper_list,\n             event_loop: event_loop,\n             work_queue: work_queue,\n             stack_pool: StackPool::new(),\n@@ -618,19 +628,23 @@ mod test {\n         use container::Container;\n         use vec::OwnedVector;\n         use rt::rtio::RemoteCallback;\n+        use rt::sleeper_list::SleeperList;\n \n         do run_in_bare_thread {\n+            let sleepers1 = SleeperList::new();\n             let work_queue1 = WorkQueue::new();\n+\n+            let sleepers2 = sleepers1.clone();\n             let work_queue2 = work_queue1.clone();\n \n             let loop1 = ~UvEventLoop::new();\n-            let mut sched1 = ~Scheduler::new(loop1, work_queue1.clone());\n+            let mut sched1 = ~Scheduler::new(loop1, work_queue1.clone(), sleepers1);\n             let handle1 = sched1.make_handle();\n             let sched1_cell = Cell(sched1);\n             let handle1_cell = Cell(handle1);\n \n             let loop2 = ~UvEventLoop::new();\n-            let mut sched2 = ~Scheduler::new(loop2, work_queue2.clone());\n+            let mut sched2 = ~Scheduler::new(loop2, work_queue2.clone(), sleepers2);\n             let handle2 = sched2.make_handle();\n             let sched2_cell = Cell(sched2);\n             let handle2_cell = Cell(handle2);"}, {"sha": "dfcac8eb088f7853819b333d502310cd7f811fb2", "filename": "src/libcore/rt/sleeper_list.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed8c3594bc86dd366e729d02c34915c783e6ac81/src%2Flibcore%2Frt%2Fsleeper_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8c3594bc86dd366e729d02c34915c783e6ac81/src%2Flibcore%2Frt%2Fsleeper_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsleeper_list.rs?ref=ed8c3594bc86dd366e729d02c34915c783e6ac81", "patch": "@@ -17,6 +17,7 @@ use option::{Option, Some, None};\n use cell::Cell;\n use unstable::sync::{Exclusive, exclusive};\n use rt::sched::{Scheduler, SchedHandle};\n+use clone::Clone;\n \n pub struct SleeperList {\n     priv stack: ~Exclusive<~[SchedHandle]>\n@@ -44,3 +45,11 @@ impl SleeperList {\n         }\n     }\n }\n+\n+impl Clone for SleeperList {\n+    fn clone(&self) -> SleeperList {\n+        SleeperList {\n+            stack: self.stack.clone()\n+        }\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "d6896f50034375be7c115cc516c199f86ca6f660", "filename": "src/libcore/rt/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed8c3594bc86dd366e729d02c34915c783e6ac81/src%2Flibcore%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8c3594bc86dd366e729d02c34915c783e6ac81/src%2Flibcore%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Ftest.rs?ref=ed8c3594bc86dd366e729d02c34915c783e6ac81", "patch": "@@ -21,8 +21,9 @@ use rt::sched::Scheduler;\n pub fn new_test_uv_sched() -> Scheduler {\n     use rt::uv::uvio::UvEventLoop;\n     use rt::work_queue::WorkQueue;\n+    use rt::sleeper_list::SleeperList;\n \n-    Scheduler::new(~UvEventLoop::new(), WorkQueue::new())\n+    Scheduler::new(~UvEventLoop::new(), WorkQueue::new(), SleeperList::new())\n }\n \n /// Creates a new scheduler in a new thread and runs a task in it,"}]}