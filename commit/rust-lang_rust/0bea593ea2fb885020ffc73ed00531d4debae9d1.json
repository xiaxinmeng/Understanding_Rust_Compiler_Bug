{"sha": "0bea593ea2fb885020ffc73ed00531d4debae9d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZWE1OTNlYTJmYjg4NTAyMGZmYzczZWQwMDUzMWQ0ZGViYWU5ZDE=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-09T01:22:14Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-09T04:40:39Z"}, "message": "Remove somewhat bogus process-spawn-errno test (non-mac, non-windows only)", "tree": {"sha": "cac136997e5fcded633c79b8736fe58c39164769", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cac136997e5fcded633c79b8736fe58c39164769"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bea593ea2fb885020ffc73ed00531d4debae9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bea593ea2fb885020ffc73ed00531d4debae9d1", "html_url": "https://github.com/rust-lang/rust/commit/0bea593ea2fb885020ffc73ed00531d4debae9d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bea593ea2fb885020ffc73ed00531d4debae9d1/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa94fdad3e880d2d6cbd82c12bd12caefbeb81a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa94fdad3e880d2d6cbd82c12bd12caefbeb81a8", "html_url": "https://github.com/rust-lang/rust/commit/fa94fdad3e880d2d6cbd82c12bd12caefbeb81a8"}], "stats": {"total": 95, "additions": 0, "deletions": 95}, "files": [{"sha": "b2ef1a044db808e8e51b95b556fb05f415c170e2", "filename": "src/test/run-pass/unix-process-spawn-errno.rs", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/fa94fdad3e880d2d6cbd82c12bd12caefbeb81a8/src%2Ftest%2Frun-pass%2Funix-process-spawn-errno.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa94fdad3e880d2d6cbd82c12bd12caefbeb81a8/src%2Ftest%2Frun-pass%2Funix-process-spawn-errno.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funix-process-spawn-errno.rs?ref=fa94fdad3e880d2d6cbd82c12bd12caefbeb81a8", "patch": "@@ -1,95 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-windows\n-// ignore-macos\n-\n-#![feature(macro_rules)]\n-\n-extern crate native;\n-extern crate rustrt;\n-extern crate libc;\n-use libc::{c_char, c_int};\n-use native::io::process;\n-use rustrt::rtio;\n-use rustrt::c_str;\n-\n-macro_rules! c_string {\n-    ($s:expr) => { {\n-        let ptr = concat!($s, \"\\0\").as_ptr() as *const i8;\n-        unsafe { &c_str::CString::new(ptr, false) }\n-    } }\n-}\n-\n-static EXPECTED_ERRNO: c_int = 0x778899aa;\n-\n-#[no_mangle]\n-pub unsafe extern \"C\" fn chdir(_: *const c_char) -> c_int {\n-    // copied from std::os::errno()\n-    #[cfg(any(target_os = \"macos\",\n-              target_os = \"ios\",\n-              target_os = \"freebsd\"))]\n-    fn errno_location() -> *mut c_int {\n-        extern {\n-            fn __error() -> *mut c_int;\n-        }\n-        unsafe {\n-            __error()\n-        }\n-    }\n-\n-    #[cfg(target_os = \"dragonfly\")]\n-    fn errno_location() -> *mut c_int {\n-        extern {\n-            fn __dfly_error() -> *mut c_int;\n-        }\n-        unsafe {\n-            __dfly_error()\n-        }\n-    }\n-\n-    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-    fn errno_location() -> *mut c_int {\n-        extern {\n-            fn __errno_location() -> *mut c_int;\n-        }\n-        unsafe {\n-            __errno_location()\n-        }\n-    }\n-\n-    *errno_location() = EXPECTED_ERRNO;\n-    return -1;\n-}\n-\n-fn main() {\n-    let program = c_string!(\"true\");\n-    let cwd = c_string!(\"whatever\");\n-    let cfg = rtio::ProcessConfig {\n-        program: program,\n-        args: &[],\n-        env: None,\n-        cwd: Some(cwd),\n-        stdin: rtio::Ignored,\n-        stdout: rtio::Ignored,\n-        stderr: rtio::Ignored,\n-        extra_io: &[],\n-        uid: None,\n-        gid: None,\n-        detach: false\n-    };\n-\n-    match process::Process::spawn(cfg) {\n-        Ok(_) => { panic!(\"spawn() should have panicked\"); }\n-        Err(rtio::IoError { code: err, ..}) => {\n-            assert_eq!(err as c_int, EXPECTED_ERRNO);\n-        }\n-    };\n-}"}]}