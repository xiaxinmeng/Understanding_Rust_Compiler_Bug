{"sha": "79450360d279f169a40bc8fd55536830f5a939fe", "node_id": "C_kwDOAAsO6NoAKDc5NDUwMzYwZDI3OWYxNjlhNDBiYzhmZDU1NTM2ODMwZjVhOTM5ZmU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-05T04:16:05Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-05T04:16:05Z"}, "message": "Fix test for default body with impl", "tree": {"sha": "00c11700d419a10ed233ba056f8c5cd312a8def7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00c11700d419a10ed233ba056f8c5cd312a8def7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79450360d279f169a40bc8fd55536830f5a939fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79450360d279f169a40bc8fd55536830f5a939fe", "html_url": "https://github.com/rust-lang/rust/commit/79450360d279f169a40bc8fd55536830f5a939fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79450360d279f169a40bc8fd55536830f5a939fe/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21047f1a1c0dc1dd36c5d5a0a85d76234dd4a263", "url": "https://api.github.com/repos/rust-lang/rust/commits/21047f1a1c0dc1dd36c5d5a0a85d76234dd4a263", "html_url": "https://github.com/rust-lang/rust/commit/21047f1a1c0dc1dd36c5d5a0a85d76234dd4a263"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "f8a169fc869f1ea72821c9f7606e21c3a69c436a", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79450360d279f169a40bc8fd55536830f5a939fe/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79450360d279f169a40bc8fd55536830f5a939fe/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=79450360d279f169a40bc8fd55536830f5a939fe", "patch": "@@ -1160,6 +1160,7 @@ impl<'tcx> ProjectionTy<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n     ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {\n+        assert_eq!(tcx.def_kind(def_id), DefKind::Trait);\n         let def_id = tcx.parent(self.item_def_id);\n         let trait_generics = tcx.generics_of(def_id);\n         ("}, {"sha": "4ec9d0b0852835940c29387d4a5c2e50ee75d80e", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/79450360d279f169a40bc8fd55536830f5a939fe/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79450360d279f169a40bc8fd55536830f5a939fe/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=79450360d279f169a40bc8fd55536830f5a939fe", "patch": "@@ -122,8 +122,20 @@ where\n         &mut self,\n         projection: ty::ProjectionTy<'tcx>,\n     ) -> ControlFlow<V::BreakTy> {\n-        let (trait_ref, assoc_substs) =\n-            projection.trait_ref_and_own_substs(self.def_id_visitor.tcx());\n+        let tcx = self.def_id_visitor.tcx();\n+        let (trait_ref, assoc_substs) = if tcx.def_kind(projection.item_def_id)\n+            != DefKind::ImplTraitPlaceholder\n+        {\n+            projection.trait_ref_and_own_substs(tcx)\n+        } else {\n+            // HACK(RPITIT): Remove this when RPITITs are lowered to regular assoc tys\n+            let def_id = tcx.impl_trait_in_trait_parent(projection.item_def_id);\n+            let trait_generics = tcx.generics_of(def_id);\n+            (\n+                ty::TraitRef { def_id, substs: projection.substs.truncate_to(tcx, trait_generics) },\n+                &projection.substs[trait_generics.count()..],\n+            )\n+        };\n         self.visit_trait(trait_ref)?;\n         if self.def_id_visitor.shallow() {\n             ControlFlow::CONTINUE"}, {"sha": "6a4ea114b401e9830e86861e5876af69757307d4", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79450360d279f169a40bc8fd55536830f5a939fe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79450360d279f169a40bc8fd55536830f5a939fe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=79450360d279f169a40bc8fd55536830f5a939fe", "patch": "@@ -1325,10 +1325,11 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n ) {\n     let tcx = selcx.tcx();\n     if tcx.def_kind(obligation.predicate.item_def_id) == DefKind::ImplTraitPlaceholder {\n-        // If we are trying to project an RPITIT with the _identity_ substs,\n+        // If we are trying to project an RPITIT with trait's default `Self` parameter,\n         // then we must be within a default trait body.\n-        if obligation.predicate.substs\n+        if obligation.predicate.self_ty()\n             == ty::InternalSubsts::identity_for_item(tcx, obligation.predicate.item_def_id)\n+                .type_at(0)\n         {\n             candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(\n                 ImplTraitInTraitCandidate::Trait,"}, {"sha": "b0baf5bb10dd2ab60e411878660b2fe125000b7b", "filename": "src/test/ui/impl-trait/in-trait/default-body.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/79450360d279f169a40bc8fd55536830f5a939fe/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79450360d279f169a40bc8fd55536830f5a939fe/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs?ref=79450360d279f169a40bc8fd55536830f5a939fe", "patch": "@@ -1,15 +1,21 @@\n // check-pass\n // edition:2021\n \n-#![feature(return_position_impl_trait_in_trait)]\n+#![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n \n use std::fmt::Debug;\n \n trait Foo {\n-    async fn baz() -> impl Debug {\n-        Self::baz().await\n+    async fn baz(&self) -> &str {\n+        \"\"\n     }\n }\n \n-fn main() {}\n+struct Bar;\n+\n+impl Foo for Bar {}\n+\n+fn main() {\n+    let _ = Bar.baz();\n+}"}]}