{"sha": "45382e64cfe21c2638365540bda9c1bc48619b99", "node_id": "C_kwDOAAsO6NoAKDQ1MzgyZTY0Y2ZlMjFjMjYzODM2NTU0MGJkYTljMWJjNDg2MTliOTk", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2022-07-20T01:27:33Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2022-07-20T07:21:00Z"}, "message": "compiletest: allow using revisions with debuginfo tests", "tree": {"sha": "a536453b7bf16a26e046b7ce68aa5beb5d7fa25a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a536453b7bf16a26e046b7ce68aa5beb5d7fa25a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45382e64cfe21c2638365540bda9c1bc48619b99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45382e64cfe21c2638365540bda9c1bc48619b99", "html_url": "https://github.com/rust-lang/rust/commit/45382e64cfe21c2638365540bda9c1bc48619b99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45382e64cfe21c2638365540bda9c1bc48619b99/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98", "html_url": "https://github.com/rust-lang/rust/commit/9a7b7d5e50ab0b59c6d349bbf005680a7c880e98"}], "stats": {"total": 60, "additions": 47, "deletions": 13}, "files": [{"sha": "26730fcec4cec4099c8eb85353144329dae80e72", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/45382e64cfe21c2638365540bda9c1bc48619b99/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45382e64cfe21c2638365540bda9c1bc48619b99/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=45382e64cfe21c2638365540bda9c1bc48619b99", "patch": "@@ -648,8 +648,6 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn run_debuginfo_cdb_test(&self) {\n-        assert!(self.revision.is_none(), \"revisions not relevant here\");\n-\n         let config = Config {\n             target_rustcflags: self.cleanup_debug_info_options(&self.config.target_rustcflags),\n             host_rustcflags: self.cleanup_debug_info_options(&self.config.host_rustcflags),\n@@ -695,7 +693,12 @@ impl<'test> TestCx<'test> {\n \n         // Parse debugger commands etc from test files\n         let DebuggerCommands { commands, check_lines, breakpoint_lines, .. } =\n-            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+            match DebuggerCommands::parse_from(\n+                &self.testpaths.file,\n+                self.config,\n+                prefixes,\n+                self.revision,\n+            ) {\n                 Ok(cmds) => cmds,\n                 Err(e) => self.fatal(&e),\n             };\n@@ -756,8 +759,6 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn run_debuginfo_gdb_test(&self) {\n-        assert!(self.revision.is_none(), \"revisions not relevant here\");\n-\n         let config = Config {\n             target_rustcflags: self.cleanup_debug_info_options(&self.config.target_rustcflags),\n             host_rustcflags: self.cleanup_debug_info_options(&self.config.host_rustcflags),\n@@ -783,7 +784,12 @@ impl<'test> TestCx<'test> {\n         };\n \n         let DebuggerCommands { commands, check_lines, breakpoint_lines } =\n-            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+            match DebuggerCommands::parse_from(\n+                &self.testpaths.file,\n+                self.config,\n+                prefixes,\n+                self.revision,\n+            ) {\n                 Ok(cmds) => cmds,\n                 Err(e) => self.fatal(&e),\n             };\n@@ -1005,8 +1011,6 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn run_debuginfo_lldb_test(&self) {\n-        assert!(self.revision.is_none(), \"revisions not relevant here\");\n-\n         if self.config.lldb_python_dir.is_none() {\n             self.fatal(\"Can't run LLDB test because LLDB's python path is not set.\");\n         }\n@@ -1059,7 +1063,12 @@ impl<'test> TestCx<'test> {\n \n         // Parse debugger commands etc from test files\n         let DebuggerCommands { commands, check_lines, breakpoint_lines, .. } =\n-            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+            match DebuggerCommands::parse_from(\n+                &self.testpaths.file,\n+                self.config,\n+                prefixes,\n+                self.revision,\n+            ) {\n                 Ok(cmds) => cmds,\n                 Err(e) => self.fatal(&e),\n             };"}, {"sha": "99394c3bfbfe4d122abcb95aa50feac381bee337", "filename": "src/tools/compiletest/src/runtest/debugger.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/45382e64cfe21c2638365540bda9c1bc48619b99/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45382e64cfe21c2638365540bda9c1bc48619b99/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs?ref=45382e64cfe21c2638365540bda9c1bc48619b99", "patch": "@@ -16,6 +16,7 @@ impl DebuggerCommands {\n         file: &Path,\n         config: &Config,\n         debugger_prefixes: &[&str],\n+        rev: Option<&str>,\n     ) -> Result<Self, String> {\n         let directives = debugger_prefixes\n             .iter()\n@@ -25,13 +26,38 @@ impl DebuggerCommands {\n         let mut breakpoint_lines = vec![];\n         let mut commands = vec![];\n         let mut check_lines = vec![];\n-        let mut counter = 1;\n+        let mut counter = 0;\n         let reader = BufReader::new(File::open(file).unwrap());\n         for line in reader.lines() {\n+            counter += 1;\n             match line {\n                 Ok(line) => {\n-                    let line =\n-                        if line.starts_with(\"//\") { line[2..].trim_start() } else { line.as_str() };\n+                    let (line, lnrev) = if line.starts_with(\"//\") {\n+                        let line = line[2..].trim_start();\n+                        if line.starts_with('[') {\n+                            if let Some(close_brace) = line.find(']') {\n+                                let open_brace = line.find('[').unwrap();\n+                                let lnrev = &line[open_brace + 1..close_brace];\n+                                let line = line[(close_brace + 1)..].trim_start();\n+                                (line, Some(lnrev))\n+                            } else {\n+                                panic!(\n+                                    \"malformed condition direction: expected `//[foo]`, found `{}`\",\n+                                    line\n+                                )\n+                            }\n+                        } else {\n+                            (line, None)\n+                        }\n+                    } else {\n+                        (line.as_str(), None)\n+                    };\n+\n+                    // Skip any revision specific directive that doesn't match the current\n+                    // revision being tested\n+                    if lnrev.is_some() && lnrev != rev {\n+                        continue;\n+                    }\n \n                     if line.contains(\"#break\") {\n                         breakpoint_lines.push(counter);\n@@ -49,7 +75,6 @@ impl DebuggerCommands {\n                 }\n                 Err(e) => return Err(format!(\"Error while parsing debugger commands: {}\", e)),\n             }\n-            counter += 1;\n         }\n \n         Ok(Self { commands, check_lines, breakpoint_lines })"}]}