{"sha": "7a3704c50044a0e9d611a264daeabbf47d398474", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMzcwNGM1MDA0NGEwZTlkNjExYTI2NGRhZWFiYmY0N2QzOTg0NzQ=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-09-27T16:06:44Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2016-12-30T14:17:27Z"}, "message": "Fix rebase fallout\n\nThis commit includes manual merge conflict resolution changes from a rebase by @est31.", "tree": {"sha": "15ae27e2975d19e8d7e2b13185ad2149c5c5f23b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15ae27e2975d19e8d7e2b13185ad2149c5c5f23b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a3704c50044a0e9d611a264daeabbf47d398474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a3704c50044a0e9d611a264daeabbf47d398474", "html_url": "https://github.com/rust-lang/rust/commit/7a3704c50044a0e9d611a264daeabbf47d398474", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a3704c50044a0e9d611a264daeabbf47d398474/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfa53cfb76e6e23c8f0380132ceef5008add8ccb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfa53cfb76e6e23c8f0380132ceef5008add8ccb", "html_url": "https://github.com/rust-lang/rust/commit/bfa53cfb76e6e23c8f0380132ceef5008add8ccb"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "7ce65d0fe4dbcb98a66143d5790ca009abde5768", "filename": "src/libproc_macro/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibproc_macro%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibproc_macro%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2FCargo.toml?ref=7a3704c50044a0e9d611a264daeabbf47d398474", "patch": "@@ -9,4 +9,3 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n syntax = { path = \"../libsyntax\" }\n-rustc_i128 = { path = \"../librustc_i128\" }"}, {"sha": "ed2aa5e51b905dfa0b92f680f087099af297392f", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=7a3704c50044a0e9d611a264daeabbf47d398474", "patch": "@@ -350,6 +350,7 @@ impl Integer {\n             I16 => Size::from_bytes(2),\n             I32 => Size::from_bytes(4),\n             I64  => Size::from_bytes(8),\n+            I128  => Size::from_bytes(16),\n         }\n     }\n \n@@ -360,6 +361,7 @@ impl Integer {\n             I16 => dl.i16_align,\n             I32 => dl.i32_align,\n             I64 => dl.i64_align,\n+            I128 => dl.i128_align,\n         }\n     }\n \n@@ -371,11 +373,13 @@ impl Integer {\n             (I16, false) => tcx.types.u16,\n             (I32, false) => tcx.types.u32,\n             (I64, false) => tcx.types.u64,\n+            (I128, false) => tcx.types.u128,\n             (I1, true) => tcx.types.i8,\n             (I8, true) => tcx.types.i8,\n             (I16, true) => tcx.types.i16,\n             (I32, true) => tcx.types.i32,\n             (I64, true) => tcx.types.i64,\n+            (I128, true) => tcx.types.i128,\n         }\n     }\n "}, {"sha": "cfc4dfb90753eeea7882c987d5881e7db955a1f3", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=7a3704c50044a0e9d611a264daeabbf47d398474", "patch": "@@ -44,7 +44,7 @@ use syntax::ast::{self, NodeId};\n use syntax::codemap;\n use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP};\n use syntax_pos::{self, Span, BytePos, Pos};\n-use rustc_i128::u128;\n+use rustc_i128::{u128, i128};\n \n pub struct DecodeContext<'a, 'tcx: 'a> {\n     opaque: opaque::Decoder<'a>,"}, {"sha": "c3bcdf42d4edecca53c1d750fddea3943bdda989", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=7a3704c50044a0e9d611a264daeabbf47d398474", "patch": "@@ -43,6 +43,8 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::intravisit::{Visitor, NestedVisitorMap};\n use rustc::hir::intravisit;\n \n+use rustc_i128::{u128, i128};\n+\n use super::index_builder::{FromId, IndexBuilder, Untracked};\n \n pub struct EncodeContext<'a, 'tcx: 'a> {\n@@ -75,12 +77,14 @@ impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> {\n \n     encoder_methods! {\n         emit_usize(usize);\n+        emit_u128(u128);\n         emit_u64(u64);\n         emit_u32(u32);\n         emit_u16(u16);\n         emit_u8(u8);\n \n         emit_isize(isize);\n+        emit_i128(i128);\n         emit_i64(i64);\n         emit_i32(i32);\n         emit_i16(i16);\n@@ -259,7 +263,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         let data = VariantData {\n             ctor_kind: variant.ctor_kind,\n-            disr: variant.disr_val.to_u64_unchecked(),\n+            disr: variant.disr_val.to_u128_unchecked(),\n             struct_ctor: None,\n         };\n \n@@ -386,7 +390,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         let data = VariantData {\n             ctor_kind: variant.ctor_kind,\n-            disr: variant.disr_val.to_u64_unchecked(),\n+            disr: variant.disr_val.to_u128_unchecked(),\n             struct_ctor: Some(def_id.index),\n         };\n \n@@ -648,7 +652,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 };\n                 EntryKind::Struct(self.lazy(&VariantData {\n                     ctor_kind: variant.ctor_kind,\n-                    disr: variant.disr_val.to_u64_unchecked(),\n+                    disr: variant.disr_val.to_u128_unchecked(),\n                     struct_ctor: struct_ctor,\n                 }))\n             }\n@@ -657,7 +661,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n                 EntryKind::Union(self.lazy(&VariantData {\n                     ctor_kind: variant.ctor_kind,\n-                    disr: variant.disr_val.to_u64_unchecked(),\n+                    disr: variant.disr_val.to_u128_unchecked(),\n                     struct_ctor: None,\n                 }))\n             }"}, {"sha": "f4ccc01544aa660a045ab396d0361440ff013da4", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=7a3704c50044a0e9d611a264daeabbf47d398474", "patch": "@@ -51,9 +51,6 @@ mod diagnostics;\n \n pub use rustc::middle;\n \n-#[macro_use]\n-mod macros;\n-\n mod astencode;\n mod index_builder;\n mod index;"}, {"sha": "74825a5c6e3f676325a2419ee782aca90cead7ef", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=7a3704c50044a0e9d611a264daeabbf47d398474", "patch": "@@ -27,6 +27,8 @@ use syntax_pos::{self, Span};\n \n use std::marker::PhantomData;\n \n+use rustc_i128::u128;\n+\n pub fn rustc_version() -> String {\n     format!(\"rustc {}\",\n             option_env!(\"CFG_VERSION\").unwrap_or(\"unknown version\"))\n@@ -264,7 +266,7 @@ pub struct FnData {\n #[derive(RustcEncodable, RustcDecodable)]\n pub struct VariantData {\n     pub ctor_kind: CtorKind,\n-    pub disr: u64,\n+    pub disr: u128,\n \n     /// If this is a struct's only variant, this\n     /// is the index of the \"struct ctor\" item."}, {"sha": "b7908f0c0edded5a92e26cd17a00ab01062d7914", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7a3704c50044a0e9d611a264daeabbf47d398474", "patch": "@@ -2313,8 +2313,8 @@ impl<'a> Resolver<'a> {\n                 let prim = self.primitive_type_table.primitive_types[&path[0].name];\n                 match prim {\n                     TyUint(UintTy::U128) | TyInt(IntTy::I128) => {\n-                        if !this.session.features.borrow().i128_type {\n-                            emit_feature_err(&this.session.parse_sess.span_diagnostic,\n+                        if !self.session.features.borrow().i128_type {\n+                            emit_feature_err(&self.session.parse_sess,\n                                                 \"i128_type\", span, GateIssue::Language,\n                                                 \"128-bit type is unstable\");\n "}, {"sha": "f68acab911317c5935920cc32f7f13cb823b9297", "filename": "src/librustc_trans/type_.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibrustc_trans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibrustc_trans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_.rs?ref=7a3704c50044a0e9d611a264daeabbf47d398474", "patch": "@@ -313,6 +313,7 @@ impl Type {\n             I16 => Type::i16(cx),\n             I32 => Type::i32(cx),\n             I64 => Type::i64(cx),\n+            I128 => Type::i128(cx),\n         }\n     }\n "}, {"sha": "26dd53fecb243e306626a2ecd57ca7a2bf5ebb74", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7a3704c50044a0e9d611a264daeabbf47d398474", "patch": "@@ -1332,7 +1332,7 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n     let repr_type_ty = ccx.tcx.enum_repr_type(Some(&hint)).to_ty(ccx.tcx);\n     if repr_type_ty == ccx.tcx.types.i128 || repr_type_ty == ccx.tcx.types.u128 {\n         if !ccx.tcx.sess.features.borrow().i128_type {\n-            emit_feature_err(&ccx.tcx.sess.parse_sess.span_diagnostic,\n+            emit_feature_err(&ccx.tcx.sess.parse_sess,\n                              \"i128_type\", sp, GateIssue::Language, \"128-bit type is unstable\");\n         }\n     }"}, {"sha": "0d2f4eaaffda3097a903bef2745c247feee035db", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=7a3704c50044a0e9d611a264daeabbf47d398474", "patch": "@@ -788,6 +788,7 @@ fn find_repr_type_name(diagnostic: &Handler, type_attrs: &[ast::Attribute]) -> &\n                 attr::ReprInt(attr::UnsignedInt(ast::UintTy::U8)) => \"u8\",\n                 attr::ReprInt(attr::UnsignedInt(ast::UintTy::U16)) => \"u16\",\n                 attr::ReprInt(attr::UnsignedInt(ast::UintTy::U32)) => \"u32\",\n+                attr::ReprInt(attr::UnsignedInt(ast::UintTy::U64)) => \"u64\",\n                 attr::ReprInt(attr::UnsignedInt(ast::UintTy::U128)) => \"u128\",\n             }\n         }"}, {"sha": "46ba68f0724008960f46f6ed222e6eb0517d230c", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=7a3704c50044a0e9d611a264daeabbf47d398474", "patch": "@@ -1456,6 +1456,7 @@ extern \"C\" LLVMRustLinkage LLVMRustGetLinkage(LLVMValueRef V) {\n \n extern \"C\" void LLVMRustSetLinkage(LLVMValueRef V, LLVMRustLinkage RustLinkage) {\n     LLVMSetLinkage(V, from_rust(RustLinkage));\n+}\n \n // Returns true if both high and low were successfully set. Fails in case constant wasn\u2019t any of\n // the common sizes (1, 8, 16, 32, 64, 128 bits)"}, {"sha": "2279a84ca5cc5492b3345ae172c4f7814ac0932c", "filename": "src/test/run-pass/i128.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Ftest%2Frun-pass%2Fi128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Ftest%2Frun-pass%2Fi128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi128.rs?ref=7a3704c50044a0e9d611a264daeabbf47d398474", "patch": "@@ -7,6 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+// ignore-stage0\n+// ignore-stage1\n #![feature(i128_type)]\n \n fn main() {"}, {"sha": "9c87a5a8ee6fce0ddcbe2a49f219a05eb0b2f031", "filename": "src/test/run-pass/u128.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Ftest%2Frun-pass%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3704c50044a0e9d611a264daeabbf47d398474/src%2Ftest%2Frun-pass%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fu128.rs?ref=7a3704c50044a0e9d611a264daeabbf47d398474", "patch": "@@ -7,6 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+// ignore-stage0\n+// ignore-stage1\n #![feature(i128_type)]\n \n fn main() {"}]}