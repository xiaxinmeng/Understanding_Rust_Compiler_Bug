{"sha": "98a8035bedd2c660912d1e6ecfe86c895e588feb", "node_id": "C_kwDOAAsO6NoAKDk4YTgwMzViZWRkMmM2NjA5MTJkMWU2ZWNmZTg2Yzg5NWU1ODhmZWI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-23T13:11:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-23T13:11:02Z"}, "message": "Rollup merge of #96129 - mattheww:2022-04_float_rounding, r=Dylan-DPC\n\nDocument rounding for floating-point primitive operations and string parsing\n\nThe docs for floating point don't have much to say at present about either the precision of their results or rounding behaviour.\n\nAs I understand it[^1][^2], Rust doesn't support operating with non-default rounding directions, so we need only describe roundTiesToEven.\n\n[^1]: https://github.com/rust-lang/rust/issues/41753#issuecomment-299322887\n[^2]: https://github.com/llvm/llvm-project/issues/8472#issuecomment-980888781\n\nThis PR makes a start by documenting that for primitive operations and `from_str()`.", "tree": {"sha": "f126f37017f2bc9adf59edfda8d0dc35a73413f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f126f37017f2bc9adf59edfda8d0dc35a73413f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98a8035bedd2c660912d1e6ecfe86c895e588feb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJii4fmCRBK7hj4Ov3rIwAALMQIAD2ZomqTZbKj/ZcnP60LE80j\nBDXAI/C958rpWlp7jvI4siEk7OCKDVfgJ83o6kQwPzHvv41vd1CwgZBfAqGwyBOF\nrs1qw4jZZRZYCkneIFNt9jr6omfvygTtmkD0ArAmcT/rK9vp0VJQ5bm7v4Wj8ulK\nY90J+ESkumRE1IFX00IDU1o94i7LymcOjKJH+owaefN/jfkx+XNVaGsnPiRAZngh\npJaXkBLAkVZXh3R1ZCC3tTVRVFwLbzuhm/3/tUVVz6zv7dhd5Xc93FJHKs+zeIiF\nYp2ny1dbiNQ1yv7npQdMwRDK75WKlPEUnHxya6iXL1r0OQFCj+uvzogSdFhqzts=\n=Hgx0\n-----END PGP SIGNATURE-----\n", "payload": "tree f126f37017f2bc9adf59edfda8d0dc35a73413f5\nparent 32c8c5df06c025441ad04791d7982d65c79a60e4\nparent 16c81fa9a6b0e5b56320baa7ca569e024425344e\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1653311462 +0200\ncommitter GitHub <noreply@github.com> 1653311462 +0200\n\nRollup merge of #96129 - mattheww:2022-04_float_rounding, r=Dylan-DPC\n\nDocument rounding for floating-point primitive operations and string parsing\n\nThe docs for floating point don't have much to say at present about either the precision of their results or rounding behaviour.\n\nAs I understand it[^1][^2], Rust doesn't support operating with non-default rounding directions, so we need only describe roundTiesToEven.\n\n[^1]: https://github.com/rust-lang/rust/issues/41753#issuecomment-299322887\n[^2]: https://github.com/llvm/llvm-project/issues/8472#issuecomment-980888781\n\nThis PR makes a start by documenting that for primitive operations and `from_str()`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98a8035bedd2c660912d1e6ecfe86c895e588feb", "html_url": "https://github.com/rust-lang/rust/commit/98a8035bedd2c660912d1e6ecfe86c895e588feb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98a8035bedd2c660912d1e6ecfe86c895e588feb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32c8c5df06c025441ad04791d7982d65c79a60e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/32c8c5df06c025441ad04791d7982d65c79a60e4", "html_url": "https://github.com/rust-lang/rust/commit/32c8c5df06c025441ad04791d7982d65c79a60e4"}, {"sha": "16c81fa9a6b0e5b56320baa7ca569e024425344e", "url": "https://api.github.com/repos/rust-lang/rust/commits/16c81fa9a6b0e5b56320baa7ca569e024425344e", "html_url": "https://github.com/rust-lang/rust/commit/16c81fa9a6b0e5b56320baa7ca569e024425344e"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "df0e7431f1f5f47df924255723869bc25cece707", "filename": "library/core/src/num/dec2flt/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98a8035bedd2c660912d1e6ecfe86c895e588feb/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a8035bedd2c660912d1e6ecfe86c895e588feb/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs?ref=98a8035bedd2c660912d1e6ecfe86c895e588feb", "patch": "@@ -143,8 +143,10 @@ macro_rules! from_str_float_impl {\n             /// # Return value\n             ///\n             /// `Err(ParseFloatError)` if the string did not represent a valid\n-            /// number. Otherwise, `Ok(n)` where `n` is the floating-point\n-            /// number represented by `src`.\n+            /// number. Otherwise, `Ok(n)` where `n` is the closest\n+            /// representable floating-point number to the number represented\n+            /// by `src` (following the same rules for rounding as for the\n+            /// results of primitive operations).\n             #[inline]\n             fn from_str(src: &str) -> Result<Self, ParseFloatError> {\n                 dec2flt(src)"}, {"sha": "631cc313fa092066741dae9f48a71143770b7434", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/98a8035bedd2c660912d1e6ecfe86c895e588feb/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a8035bedd2c660912d1e6ecfe86c895e588feb/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=98a8035bedd2c660912d1e6ecfe86c895e588feb", "patch": "@@ -994,6 +994,19 @@ mod prim_tuple {}\n ///     surprising results upon inspecting the bit patterns,\n ///     as the same calculations might produce NaNs with different bit patterns.\n ///\n+/// When the number resulting from a primitive operation (addition,\n+/// subtraction, multiplication, or division) on this type is not exactly\n+/// representable as `f32`, it is rounded according to the roundTiesToEven\n+/// direction defined in IEEE 754-2008. That means:\n+///\n+/// - The result is the representable value closest to the true value, if there\n+///   is a unique closest representable value.\n+/// - If the true value is exactly half-way between two representable values,\n+///   the result is the one with an even least-significant binary digit.\n+/// - If the true value's magnitude is \u2265 `f32::MAX` + 2<sup>(`f32::MAX_EXP` \u2212\n+///   `f32::MANTISSA_DIGITS` \u2212 1)</sup>, the result is \u221e or \u2212\u221e (preserving the\n+///   true value's sign).\n+///\n /// For more information on floating point numbers, see [Wikipedia][wikipedia].\n ///\n /// *[See also the `std::f32::consts` module](crate::f32::consts).*"}, {"sha": "631cc313fa092066741dae9f48a71143770b7434", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/98a8035bedd2c660912d1e6ecfe86c895e588feb/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a8035bedd2c660912d1e6ecfe86c895e588feb/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=98a8035bedd2c660912d1e6ecfe86c895e588feb", "patch": "@@ -994,6 +994,19 @@ mod prim_tuple {}\n ///     surprising results upon inspecting the bit patterns,\n ///     as the same calculations might produce NaNs with different bit patterns.\n ///\n+/// When the number resulting from a primitive operation (addition,\n+/// subtraction, multiplication, or division) on this type is not exactly\n+/// representable as `f32`, it is rounded according to the roundTiesToEven\n+/// direction defined in IEEE 754-2008. That means:\n+///\n+/// - The result is the representable value closest to the true value, if there\n+///   is a unique closest representable value.\n+/// - If the true value is exactly half-way between two representable values,\n+///   the result is the one with an even least-significant binary digit.\n+/// - If the true value's magnitude is \u2265 `f32::MAX` + 2<sup>(`f32::MAX_EXP` \u2212\n+///   `f32::MANTISSA_DIGITS` \u2212 1)</sup>, the result is \u221e or \u2212\u221e (preserving the\n+///   true value's sign).\n+///\n /// For more information on floating point numbers, see [Wikipedia][wikipedia].\n ///\n /// *[See also the `std::f32::consts` module](crate::f32::consts).*"}]}