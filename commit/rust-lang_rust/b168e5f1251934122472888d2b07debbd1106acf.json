{"sha": "b168e5f1251934122472888d2b07debbd1106acf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNjhlNWYxMjUxOTM0MTIyNDcyODg4ZDJiMDdkZWJiZDExMDZhY2Y=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-08T14:59:24Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-08T17:17:24Z"}, "message": "codegen_llvm: fix spelling & grammatical errors", "tree": {"sha": "7403b062757b63e3846b5a9a302ddaded26a75da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7403b062757b63e3846b5a9a302ddaded26a75da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b168e5f1251934122472888d2b07debbd1106acf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b168e5f1251934122472888d2b07debbd1106acf", "html_url": "https://github.com/rust-lang/rust/commit/b168e5f1251934122472888d2b07debbd1106acf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b168e5f1251934122472888d2b07debbd1106acf/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0af79143ae5b80697acb8a4a78bc3c953dd5478d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0af79143ae5b80697acb8a4a78bc3c953dd5478d", "html_url": "https://github.com/rust-lang/rust/commit/0af79143ae5b80697acb8a4a78bc3c953dd5478d"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "c8e8d0dc84ef038027ffc589c558923721a253d2", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b168e5f1251934122472888d2b07debbd1106acf/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b168e5f1251934122472888d2b07debbd1106acf/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=b168e5f1251934122472888d2b07debbd1106acf", "patch": "@@ -336,7 +336,7 @@ impl<'tcx> FnTypeExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n             RustIntrinsic | PlatformIntrinsic |\n             Rust | RustCall => Conv::C,\n \n-            // It's the ABI's job to select this, not us.\n+            // It's the ABI's job to select this, not ours.\n             System => bug!(\"system abi should be selected elsewhere\"),\n \n             Stdcall => Conv::X86Stdcall,"}, {"sha": "c814ab4ab6710123e8e69069ad7690761134ea7d", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b168e5f1251934122472888d2b07debbd1106acf/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b168e5f1251934122472888d2b07debbd1106acf/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=b168e5f1251934122472888d2b07debbd1106acf", "patch": "@@ -363,8 +363,8 @@ fn cast_shift_rhs<'ll, F, G>(op: hir::BinOpKind,\n         if lhs_sz < rhs_sz {\n             trunc(rhs, lhs_llty)\n         } else if lhs_sz > rhs_sz {\n-            // FIXME (#1877: If shifting by negative\n-            // values becomes not undefined then this is wrong.\n+            // FIXME (#1877: If in the future shifting by negative\n+            // values is no longer undefined then this is wrong.\n             zext(rhs, lhs_llty)\n         } else {\n             rhs"}, {"sha": "4bf5b09baa6294ffbfd022bdb4bc8e5646f3cdfa", "filename": "src/librustc_codegen_llvm/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b168e5f1251934122472888d2b07debbd1106acf/src%2Flibrustc_codegen_llvm%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b168e5f1251934122472888d2b07debbd1106acf/src%2Flibrustc_codegen_llvm%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fvalue.rs?ref=b168e5f1251934122472888d2b07debbd1106acf", "patch": "@@ -34,6 +34,6 @@ impl fmt::Debug for Value {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.write_str(&llvm::build_string(|s| unsafe {\n             llvm::LLVMRustWriteValueToString(self, s);\n-        }).expect(\"nun-UTF8 value description from LLVM\"))\n+        }).expect(\"non-UTF8 value description from LLVM\"))\n     }\n }"}]}