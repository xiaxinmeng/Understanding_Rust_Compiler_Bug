{"sha": "ae5959f4bab2d48e909cc5af6b906526ab83cc3d", "node_id": "C_kwDOAAsO6NoAKGFlNTk1OWY0YmFiMmQ0OGU5MDljYzVhZjZiOTA2NTI2YWI4M2NjM2Q", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-15T17:42:43Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-15T17:42:43Z"}, "message": "Consume resolutions for lowering separately.", "tree": {"sha": "27cff38507f01c806fb47adb803426a91286175f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27cff38507f01c806fb47adb803426a91286175f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae5959f4bab2d48e909cc5af6b906526ab83cc3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae5959f4bab2d48e909cc5af6b906526ab83cc3d", "html_url": "https://github.com/rust-lang/rust/commit/ae5959f4bab2d48e909cc5af6b906526ab83cc3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae5959f4bab2d48e909cc5af6b906526ab83cc3d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ffbd814afd5bcb0534eef7d69af8df3a641d3ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ffbd814afd5bcb0534eef7d69af8df3a641d3ec", "html_url": "https://github.com/rust-lang/rust/commit/8ffbd814afd5bcb0534eef7d69af8df3a641d3ec"}], "stats": {"total": 95, "additions": 59, "deletions": 36}, "files": [{"sha": "717918116e595b4f694ae58ece54bc448842e18a", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ae5959f4bab2d48e909cc5af6b906526ab83cc3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae5959f4bab2d48e909cc5af6b906526ab83cc3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=ae5959f4bab2d48e909cc5af6b906526ab83cc3d", "patch": "@@ -15,7 +15,7 @@ use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::definitions::Definitions;\n use rustc_hir::PredicateOrigin;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_middle::ty::ResolverOutputs;\n+use rustc_middle::ty::{ResolverAstLowering, ResolverOutputs};\n use rustc_session::cstore::CrateStoreDyn;\n use rustc_session::Session;\n use rustc_span::source_map::DesugaringKind;\n@@ -30,7 +30,8 @@ pub(super) struct ItemLowerer<'a, 'hir> {\n     pub(super) sess: &'a Session,\n     pub(super) definitions: &'a mut Definitions,\n     pub(super) cstore: &'a CrateStoreDyn,\n-    pub(super) resolver: &'a mut ResolverOutputs,\n+    pub(super) resolutions: &'a ResolverOutputs,\n+    pub(super) resolver: &'a mut ResolverAstLowering,\n     pub(super) arena: &'hir Arena<'hir>,\n     pub(super) ast_index: &'a IndexVec<LocalDefId, AstOwner<'a>>,\n     pub(super) owners: &'a mut IndexVec<LocalDefId, hir::MaybeOwner<&'hir hir::OwnerInfo<'hir>>>,\n@@ -62,12 +63,12 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n         owner: NodeId,\n         f: impl FnOnce(&mut LoweringContext<'_, 'hir>) -> hir::OwnerNode<'hir>,\n     ) {\n-        let next_node_id = self.resolver.next_node_id;\n         let mut lctx = LoweringContext {\n             // Pseudo-globals.\n             sess: &self.sess,\n             definitions: self.definitions,\n             cstore: self.cstore,\n+            resolutions: self.resolutions,\n             resolver: self.resolver,\n             arena: self.arena,\n \n@@ -80,8 +81,6 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n             node_id_to_local_id: Default::default(),\n             local_id_to_def_id: SortedMap::new(),\n             trait_map: Default::default(),\n-            local_node_id_to_def_id: FxHashMap::default(),\n-            next_node_id,\n \n             // Lowering state.\n             catch_scope: None,"}, {"sha": "d3eb3f29b1c3b3b33d9dee01b910bdadaceb6568", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ae5959f4bab2d48e909cc5af6b906526ab83cc3d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae5959f4bab2d48e909cc5af6b906526ab83cc3d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=ae5959f4bab2d48e909cc5af6b906526ab83cc3d", "patch": "@@ -56,7 +56,7 @@ use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::definitions::{DefPathData, Definitions};\n use rustc_hir::{ConstArg, GenericArg, ItemLocalId, ParamName, TraitCandidate};\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_middle::ty::ResolverOutputs;\n+use rustc_middle::ty::{ResolverAstLowering, ResolverOutputs};\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::cstore::CrateStoreDyn;\n use rustc_session::parse::feature_err;\n@@ -91,7 +91,8 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     definitions: &'a mut Definitions,\n     cstore: &'a CrateStoreDyn,\n-    resolver: &'a mut ResolverOutputs,\n+    resolutions: &'a ResolverOutputs,\n+    resolver: &'a mut ResolverAstLowering,\n \n     /// Used to allocate HIR nodes.\n     arena: &'hir Arena<'hir>,\n@@ -133,10 +134,6 @@ struct LoweringContext<'a, 'hir: 'a> {\n     /// NodeIds that are lowered inside the current HIR owner.\n     node_id_to_local_id: FxHashMap<NodeId, hir::ItemLocalId>,\n \n-    // The next_node_id is reset for each item.\n-    next_node_id: ast::NodeId,\n-    local_node_id_to_def_id: FxHashMap<ast::NodeId, LocalDefId>,\n-\n     allow_try_trait: Option<Lrc<[Symbol]>>,\n     allow_gen_future: Option<Lrc<[Symbol]>>,\n     allow_into_future: Option<Lrc<[Symbol]>>,\n@@ -174,7 +171,7 @@ trait ResolverAstLoweringExt {\n     fn decl_macro_kind(&self, def_id: LocalDefId) -> MacroKind;\n }\n \n-impl ResolverAstLoweringExt for ResolverOutputs {\n+impl ResolverAstLoweringExt for ResolverAstLowering {\n     fn legacy_const_generic_args(&self, expr: &Expr) -> Option<Vec<usize>> {\n         if let ExprKind::Path(None, path) = &expr.kind {\n             // Don't perform legacy const generics rewriting if the path already\n@@ -415,7 +412,8 @@ pub fn lower_crate<'hir>(\n     krate: &Crate,\n     definitions: &mut Definitions,\n     cstore: &CrateStoreDyn,\n-    resolver: &mut ResolverOutputs,\n+    resolutions: &ResolverOutputs,\n+    mut resolver: ResolverAstLowering,\n     arena: &'hir Arena<'hir>,\n ) -> &'hir hir::Crate<'hir> {\n     let _prof_timer = sess.prof.verbose_generic_activity(\"hir_lowering\");\n@@ -430,15 +428,16 @@ pub fn lower_crate<'hir>(\n             sess,\n             definitions,\n             cstore,\n-            resolver,\n+            resolutions,\n+            resolver: &mut resolver,\n             arena,\n             ast_index: &ast_index,\n             owners: &mut owners,\n         }\n         .lower_node(def_id);\n     }\n \n-    let hir_hash = compute_hir_hash(sess, definitions, cstore, resolver, &owners);\n+    let hir_hash = compute_hir_hash(sess, definitions, cstore, resolutions, &owners);\n     let krate = hir::Crate { owners, hir_hash };\n     arena.alloc(krate)\n }\n@@ -464,7 +463,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             self.sess,\n             self.definitions,\n             self.cstore,\n-            &self.resolver.source_span,\n+            &self.resolutions.source_span,\n         )\n     }\n \n@@ -489,25 +488,21 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // we don't need a mapping from `NodeId` to `LocalDefId`.\n         if node_id != ast::DUMMY_NODE_ID {\n             debug!(\"create_def: def_id_to_node_id[{:?}] <-> {:?}\", def_id, node_id);\n-            self.local_node_id_to_def_id.insert(node_id, def_id);\n+            self.resolver.node_id_to_def_id.insert(node_id, def_id);\n         }\n \n         def_id\n     }\n \n     fn next_node_id(&mut self) -> NodeId {\n-        let start = self.next_node_id;\n+        let start = self.resolver.next_node_id;\n         let next = start.as_u32().checked_add(1).expect(\"input too large; ran out of NodeIds\");\n-        self.next_node_id = ast::NodeId::from_u32(next);\n+        self.resolver.next_node_id = ast::NodeId::from_u32(next);\n         start\n     }\n \n     fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {\n-        if node <= self.resolver.next_node_id {\n-            self.resolver.node_id_to_def_id.get(&node).copied()\n-        } else {\n-            self.local_node_id_to_def_id.get(&node).copied()\n-        }\n+        self.resolver.node_id_to_def_id.get(&node).copied()\n     }\n \n     fn local_def_id(&self, node: NodeId) -> LocalDefId {"}, {"sha": "19f086b3a4426244f946f544528ca7fd109a7781", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ae5959f4bab2d48e909cc5af6b906526ab83cc3d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae5959f4bab2d48e909cc5af6b906526ab83cc3d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=ae5959f4bab2d48e909cc5af6b906526ab83cc3d", "patch": "@@ -21,7 +21,7 @@ use rustc_metadata::{encode_metadata, EncodedMetadata};\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n-use rustc_middle::ty::{self, GlobalCtxt, RegisteredTools, ResolverOutputs, TyCtxt};\n+use rustc_middle::ty::{self, GlobalCtxt, RegisteredTools, TyCtxt};\n use rustc_mir_build as mir_build;\n use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str, validate_attr};\n use rustc_passes::{self, hir_stats, layout_test};\n@@ -139,7 +139,8 @@ mod boxed_resolver {\n \n         pub fn to_resolver_outputs(\n             resolver: Rc<RefCell<BoxedResolver>>,\n-        ) -> (Definitions, Box<CrateStoreDyn>, ResolverOutputs) {\n+        ) -> (Definitions, Box<CrateStoreDyn>, ty::ResolverOutputs, ty::ResolverAstLowering)\n+        {\n             match Rc::try_unwrap(resolver) {\n                 Ok(resolver) => {\n                     let mut resolver = resolver.into_inner();\n@@ -485,13 +486,21 @@ fn lower_to_hir<'tcx>(\n     sess: &Session,\n     definitions: &mut Definitions,\n     cstore: &CrateStoreDyn,\n-    resolver: &mut ResolverOutputs,\n+    resolutions: &ty::ResolverOutputs,\n+    resolver: ty::ResolverAstLowering,\n     krate: Rc<ast::Crate>,\n     arena: &'tcx rustc_ast_lowering::Arena<'tcx>,\n ) -> &'tcx Crate<'tcx> {\n     // Lower AST to HIR.\n-    let hir_crate =\n-        rustc_ast_lowering::lower_crate(sess, &krate, definitions, cstore, resolver, arena);\n+    let hir_crate = rustc_ast_lowering::lower_crate(\n+        sess,\n+        &krate,\n+        definitions,\n+        cstore,\n+        resolutions,\n+        resolver,\n+        arena,\n+    );\n \n     // Drop AST to free memory\n     sess.time(\"drop_ast\", || std::mem::drop(krate));\n@@ -829,14 +838,21 @@ pub fn create_global_ctxt<'tcx>(\n     // incr. comp. yet.\n     dep_graph.assert_ignored();\n \n-    let (mut definitions, cstore, mut resolver_outputs) =\n+    let (mut definitions, cstore, resolver_outputs, resolver_for_lowering) =\n         BoxedResolver::to_resolver_outputs(resolver);\n \n     let sess = &compiler.session();\n \n     // Lower AST to HIR.\n-    let krate =\n-        lower_to_hir(sess, &mut definitions, &*cstore, &mut resolver_outputs, krate, hir_arena);\n+    let krate = lower_to_hir(\n+        sess,\n+        &mut definitions,\n+        &*cstore,\n+        &resolver_outputs,\n+        resolver_for_lowering,\n+        krate,\n+        hir_arena,\n+    );\n \n     let query_result_on_disk_cache = rustc_incremental::load_query_result_cache(sess);\n "}, {"sha": "749feb850b0982dca798a6634fdec3f1e075e49d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae5959f4bab2d48e909cc5af6b906526ab83cc3d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae5959f4bab2d48e909cc5af6b906526ab83cc3d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=ae5959f4bab2d48e909cc5af6b906526ab83cc3d", "patch": "@@ -160,7 +160,12 @@ pub struct ResolverOutputs {\n     /// exist under `std`. For example, wrote `str::from_utf8` instead of `std::str::from_utf8`.\n     pub confused_type_with_std_module: FxHashMap<Span, Span>,\n     pub registered_tools: RegisteredTools,\n+}\n \n+/// Resolutions that should only be used for lowering.\n+/// This struct is meant to be consumed by lowering.\n+#[derive(Debug)]\n+pub struct ResolverAstLowering {\n     pub legacy_const_generic_args: FxHashMap<DefId, Option<Vec<usize>>>,\n \n     /// Resolutions for nodes that have a single resolution."}, {"sha": "ddf2a53b47d272efbfd293cb6e4b0510dc20569a", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ae5959f4bab2d48e909cc5af6b906526ab83cc3d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae5959f4bab2d48e909cc5af6b906526ab83cc3d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=ae5959f4bab2d48e909cc5af6b906526ab83cc3d", "patch": "@@ -1392,7 +1392,9 @@ impl<'a> Resolver<'a> {\n         Default::default()\n     }\n \n-    pub fn into_outputs(self) -> (Definitions, Box<CrateStoreDyn>, ResolverOutputs) {\n+    pub fn into_outputs(\n+        self,\n+    ) -> (Definitions, Box<CrateStoreDyn>, ResolverOutputs, ty::ResolverAstLowering) {\n         let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();\n         let definitions = self.definitions;\n         let cstore = Box::new(self.crate_loader.into_cstore());\n@@ -1429,6 +1431,8 @@ impl<'a> Resolver<'a> {\n             proc_macros,\n             confused_type_with_std_module,\n             registered_tools: self.registered_tools,\n+        };\n+        let resolutions_lowering = ty::ResolverAstLowering {\n             legacy_const_generic_args: self.legacy_const_generic_args,\n             partial_res_map: self.partial_res_map,\n             import_res_map: self.import_res_map,\n@@ -1441,10 +1445,12 @@ impl<'a> Resolver<'a> {\n             trait_map: self.trait_map,\n             builtin_macro_kinds: self.builtin_macro_kinds,\n         };\n-        (definitions, cstore, resolutions)\n+        (definitions, cstore, resolutions, resolutions_lowering)\n     }\n \n-    pub fn clone_outputs(&self) -> (Definitions, Box<CrateStoreDyn>, ResolverOutputs) {\n+    pub fn clone_outputs(\n+        &self,\n+    ) -> (Definitions, Box<CrateStoreDyn>, ResolverOutputs, ty::ResolverAstLowering) {\n         let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();\n         let definitions = self.definitions.clone();\n         let cstore = Box::new(self.cstore().clone());\n@@ -1469,6 +1475,8 @@ impl<'a> Resolver<'a> {\n             confused_type_with_std_module: self.confused_type_with_std_module.clone(),\n             registered_tools: self.registered_tools.clone(),\n             access_levels: self.access_levels.clone(),\n+        };\n+        let resolutions_lowering = ty::ResolverAstLowering {\n             legacy_const_generic_args: self.legacy_const_generic_args.clone(),\n             partial_res_map: self.partial_res_map.clone(),\n             import_res_map: self.import_res_map.clone(),\n@@ -1481,7 +1489,7 @@ impl<'a> Resolver<'a> {\n             trait_map: self.trait_map.clone(),\n             builtin_macro_kinds: self.builtin_macro_kinds.clone(),\n         };\n-        (definitions, cstore, resolutions)\n+        (definitions, cstore, resolutions, resolutions_lowering)\n     }\n \n     fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {"}]}