{"sha": "d7695abb7667d2e8b7a010282ad5f44abbc58a58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3Njk1YWJiNzY2N2QyZThiN2EwMTAyODJhZDVmNDRhYmJjNThhNTg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-05T15:50:00Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-07T14:02:16Z"}, "message": "Support const generics in derive\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "77bb6c0c52f6bfba98b5cbb609666370c644803c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77bb6c0c52f6bfba98b5cbb609666370c644803c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7695abb7667d2e8b7a010282ad5f44abbc58a58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7695abb7667d2e8b7a010282ad5f44abbc58a58", "html_url": "https://github.com/rust-lang/rust/commit/d7695abb7667d2e8b7a010282ad5f44abbc58a58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7695abb7667d2e8b7a010282ad5f44abbc58a58/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a8d98a270da057975d3cc552a4bb5f0bda5a3af", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8d98a270da057975d3cc552a4bb5f0bda5a3af", "html_url": "https://github.com/rust-lang/rust/commit/0a8d98a270da057975d3cc552a4bb5f0bda5a3af"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "6708e3c12a0057e4b52bd087749a629acac414a7", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d7695abb7667d2e8b7a010282ad5f44abbc58a58/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7695abb7667d2e8b7a010282ad5f44abbc58a58/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=d7695abb7667d2e8b7a010282ad5f44abbc58a58", "patch": "@@ -38,12 +38,14 @@ pub trait AstBuilder {\n                 bindings: Vec<ast::TypeBinding>)\n                 -> (ast::QSelf, ast::Path);\n \n-    // types\n+    // types and consts\n     fn ty_mt(&self, ty: P<ast::Ty>, mutbl: ast::Mutability) -> ast::MutTy;\n \n     fn ty(&self, span: Span, ty: ast::TyKind) -> P<ast::Ty>;\n     fn ty_path(&self, path: ast::Path) -> P<ast::Ty>;\n     fn ty_ident(&self, span: Span, idents: ast::Ident) -> P<ast::Ty>;\n+    fn anon_const(&self, span: Span, expr: ast::ExprKind) -> ast::AnonConst;\n+    fn const_ident(&self, span: Span, idents: ast::Ident) -> ast::AnonConst;\n \n     fn ty_rptr(&self, span: Span,\n                ty: P<ast::Ty>,\n@@ -394,6 +396,22 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.ty_path(self.path_ident(span, ident))\n     }\n \n+    fn anon_const(&self, span: Span, expr: ast::ExprKind) -> ast::AnonConst {\n+        ast::AnonConst {\n+            id: ast::DUMMY_NODE_ID,\n+            value: P(ast::Expr {\n+                id: ast::DUMMY_NODE_ID,\n+                node: expr,\n+                span,\n+                attrs: ThinVec::new(),\n+            })\n+        }\n+    }\n+\n+    fn const_ident(&self, span: Span, ident: ast::Ident) -> ast::AnonConst {\n+        self.anon_const(span, ast::ExprKind::Path(None, self.path_ident(span, ident)))\n+    }\n+\n     fn ty_rptr(&self,\n                span: Span,\n                ty: P<ast::Ty>,"}, {"sha": "4678c7520455a10dace790e00f8343e30b04441d", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7695abb7667d2e8b7a010282ad5f44abbc58a58/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7695abb7667d2e8b7a010282ad5f44abbc58a58/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=d7695abb7667d2e8b7a010282ad5f44abbc58a58", "patch": "@@ -560,6 +560,7 @@ impl<'a> TraitDef<'a> {\n \n                 cx.typaram(self.span, param.ident, vec![], bounds, None)\n             }\n+            GenericParamKind::Const { .. } => param.clone(),\n         }));\n \n         // and similarly for where clauses\n@@ -657,6 +658,9 @@ impl<'a> TraitDef<'a> {\n             GenericParamKind::Type { .. } => {\n                 GenericArg::Type(cx.ty_ident(self.span, param.ident))\n             }\n+            GenericParamKind::Const { .. } => {\n+                GenericArg::Const(cx.const_ident(self.span, param.ident))\n+            }\n         }).collect();\n \n         // Create the type of `self`."}, {"sha": "100ec0057ee028ddf62a74110e551ce85b58ec05", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7695abb7667d2e8b7a010282ad5f44abbc58a58/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7695abb7667d2e8b7a010282ad5f44abbc58a58/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=d7695abb7667d2e8b7a010282ad5f44abbc58a58", "patch": "@@ -94,7 +94,7 @@ impl<'a> Path<'a> {\n     }\n }\n \n-/// A type. Supports pointers, Self, and literals\n+/// A type. Supports pointers, Self, and literals.\n #[derive(Clone)]\n pub enum Ty<'a> {\n     Self_,\n@@ -107,6 +107,13 @@ pub enum Ty<'a> {\n     Tuple(Vec<Ty<'a>>),\n }\n \n+/// A const expression. Supports literals and blocks.\n+#[derive(Clone, Eq, PartialEq)]\n+pub enum Const {\n+    Literal,\n+    Block,\n+}\n+\n pub fn borrowed_ptrty<'r>() -> PtrTy<'r> {\n     Borrowed(None, ast::Mutability::Immutable)\n }\n@@ -180,6 +187,9 @@ impl<'a> Ty<'a> {\n                     GenericParamKind::Type { .. } => {\n                         GenericArg::Type(cx.ty_ident(span, param.ident))\n                     }\n+                    GenericParamKind::Const { .. } => {\n+                        GenericArg::Const(cx.const_ident(span, param.ident))\n+                    }\n                 }).collect();\n \n                 cx.path_all(span, false, vec![self_ty], params, vec![])"}]}