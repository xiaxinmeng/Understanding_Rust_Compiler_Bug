{"sha": "f62c73a97286a49c228cd13c32ed37340afd2c1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MmM3M2E5NzI4NmE0OWMyMjhjZDEzYzMyZWQzNzM0MGFmZDJjMWQ=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-13T12:44:35Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-14T01:40:41Z"}, "message": "add diagnostics subcommand to rust-analyzer CLI", "tree": {"sha": "1d0e15b4b93b49ab64f68ff42b8efc6886be1068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d0e15b4b93b49ab64f68ff42b8efc6886be1068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f62c73a97286a49c228cd13c32ed37340afd2c1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f62c73a97286a49c228cd13c32ed37340afd2c1d", "html_url": "https://github.com/rust-lang/rust/commit/f62c73a97286a49c228cd13c32ed37340afd2c1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f62c73a97286a49c228cd13c32ed37340afd2c1d/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c388130f5ffbcbe7d3131213a24d12d02f769b87", "url": "https://api.github.com/repos/rust-lang/rust/commits/c388130f5ffbcbe7d3131213a24d12d02f769b87", "html_url": "https://github.com/rust-lang/rust/commit/c388130f5ffbcbe7d3131213a24d12d02f769b87"}], "stats": {"total": 120, "additions": 117, "deletions": 3}, "files": [{"sha": "25367df45bb7dd9c01c1ed7d5c5a2b9f8c2b5eb4", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f62c73a97286a49c228cd13c32ed37340afd2c1d/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c73a97286a49c228cd13c32ed37340afd2c1d/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=f62c73a97286a49c228cd13c32ed37340afd2c1d", "patch": "@@ -35,6 +35,10 @@ pub(crate) enum Command {\n         what: BenchWhat,\n         load_output_dirs: bool,\n     },\n+    Diagnostics {\n+        path: PathBuf,\n+        load_output_dirs: bool,\n+    },\n     RunServer,\n     Version,\n }\n@@ -209,6 +213,36 @@ ARGS:\n                 let load_output_dirs = matches.contains(\"--load-output-dirs\");\n                 Command::Bench { path, what, load_output_dirs }\n             }\n+            \"diagnostics\" => {\n+                if matches.contains([\"-h\", \"--help\"]) {\n+                    eprintln!(\n+                        \"\\\n+ra-cli-diagnostics\n+\n+USAGE:\n+    rust-analyzer diagnostics [FLAGS] [PATH]\n+\n+FLAGS:\n+    -h, --help              Prints help information\n+        --load-output-dirs  Load OUT_DIR values by running `cargo check` before analysis\n+\n+ARGS:\n+    <PATH>\"\n+                    );\n+                    return Ok(Err(HelpPrinted));\n+                }\n+\n+                let load_output_dirs = matches.contains(\"--load-output-dirs\");\n+                let path = {\n+                    let mut trailing = matches.free()?;\n+                    if trailing.len() != 1 {\n+                        bail!(\"Invalid flags\");\n+                    }\n+                    trailing.pop().unwrap().into()\n+                };\n+\n+                Command::Diagnostics { path, load_output_dirs }\n+            }\n             _ => {\n                 eprintln!(\n                     \"\\"}, {"sha": "4edd617ee3564f0b9d61f201573d2f4b5730fc0e", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f62c73a97286a49c228cd13c32ed37340afd2c1d/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c73a97286a49c228cd13c32ed37340afd2c1d/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=f62c73a97286a49c228cd13c32ed37340afd2c1d", "patch": "@@ -39,6 +39,10 @@ fn main() -> Result<()> {\n             cli::analysis_bench(args.verbosity, path.as_ref(), what, load_output_dirs)?\n         }\n \n+        args::Command::Diagnostics { path, load_output_dirs } => {\n+            cli::diagnostics(path.as_ref(), load_output_dirs)?\n+        }\n+\n         args::Command::RunServer => run_server()?,\n         args::Command::Version => println!(\"rust-analyzer {}\", env!(\"REV\")),\n     }"}, {"sha": "a865a7c7e23be3f98e222a368ac0075f32aeab85", "filename": "crates/rust-analyzer/src/cli.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f62c73a97286a49c228cd13c32ed37340afd2c1d/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c73a97286a49c228cd13c32ed37340afd2c1d/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli.rs?ref=f62c73a97286a49c228cd13c32ed37340afd2c1d", "patch": "@@ -3,6 +3,7 @@\n mod load_cargo;\n mod analysis_stats;\n mod analysis_bench;\n+mod diagnostics;\n mod progress_report;\n \n use std::io::Read;\n@@ -12,6 +13,10 @@ use ra_ide::{file_structure, Analysis};\n use ra_prof::profile;\n use ra_syntax::{AstNode, SourceFile};\n \n+pub use analysis_bench::{analysis_bench, BenchWhat, Position};\n+pub use analysis_stats::analysis_stats;\n+pub use diagnostics::diagnostics;\n+\n #[derive(Clone, Copy)]\n pub enum Verbosity {\n     Spammy,\n@@ -60,9 +65,6 @@ pub fn highlight(rainbow: bool) -> Result<()> {\n     Ok(())\n }\n \n-pub use analysis_bench::{analysis_bench, BenchWhat, Position};\n-pub use analysis_stats::analysis_stats;\n-\n fn file() -> Result<SourceFile> {\n     let text = read_stdin()?;\n     Ok(SourceFile::parse(&text).tree())"}, {"sha": "f5aab89a24b5852d98bc219d223298ca7b84d1d4", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f62c73a97286a49c228cd13c32ed37340afd2c1d/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c73a97286a49c228cd13c32ed37340afd2c1d/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=f62c73a97286a49c228cd13c32ed37340afd2c1d", "patch": "@@ -0,0 +1,74 @@\n+//! Analyze all files in project for diagnostics. Exits with a non-zero status\n+//! code if any errors are found.\n+\n+use anyhow::anyhow;\n+use ra_db::{SourceDatabaseExt, SourceRootId};\n+use ra_ide::{Analysis, Severity};\n+use std::{collections::HashSet, path::Path};\n+\n+use crate::cli::{load_cargo::load_cargo, Result};\n+use hir::{db::HirDatabase, Crate, Module};\n+\n+pub fn diagnostics(path: &Path, load_output_dirs: bool) -> Result<()> {\n+    let (host, roots) = load_cargo(path, load_output_dirs)?;\n+    let db = host.raw_database();\n+    let analysis = host.analysis();\n+    let members = roots\n+        .into_iter()\n+        .filter_map(\n+            |(source_root_id, project_root)| {\n+                if project_root.is_member() {\n+                    Some(source_root_id)\n+                } else {\n+                    None\n+                }\n+            },\n+        )\n+        .collect::<HashSet<_>>();\n+\n+    let mut found_error = false;\n+    let mut visited_modules = HashSet::new();\n+    for krate in Crate::all(db) {\n+        let module = krate.root_module(db).expect(\"crate without root module\");\n+        check_module(module, db, &mut visited_modules, &members, &analysis, &mut found_error);\n+    }\n+\n+    println!();\n+    println!(\"diagnostic scan complete\");\n+\n+    if found_error {\n+        println!();\n+        Err(anyhow!(\"diagnostic error detected\"))\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+fn check_module(\n+    module: Module,\n+    db: &(impl HirDatabase + SourceDatabaseExt),\n+    visited_modules: &mut HashSet<Module>,\n+    members: &HashSet<SourceRootId>,\n+    analysis: &Analysis,\n+    found_error: &mut bool,\n+) {\n+    let file_id = module.definition_source(db).file_id.original_file(db);\n+    if !visited_modules.contains(&module) {\n+        if members.contains(&db.file_source_root(file_id)) {\n+            println!(\"processing: {}\", db.file_relative_path(file_id));\n+            for diagnostic in analysis.diagnostics(file_id).unwrap() {\n+                if matches!(diagnostic.severity, Severity::Error) {\n+                    *found_error = true;\n+                }\n+\n+                println!(\"{:?}\", diagnostic);\n+            }\n+        }\n+\n+        visited_modules.insert(module);\n+\n+        for child_module in module.children(db) {\n+            check_module(child_module, db, visited_modules, members, analysis, found_error);\n+        }\n+    }\n+}"}]}