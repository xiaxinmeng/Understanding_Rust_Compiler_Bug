{"sha": "13267adb12b6a62d69c5ca0cf872beba9413b6ec", "node_id": "C_kwDOAAsO6NoAKDEzMjY3YWRiMTJiNmE2MmQ2OWM1Y2EwY2Y4NzJiZWJhOTQxM2I2ZWM", "commit": {"author": {"name": "unvalley", "email": "kirohi.code@gmail.com", "date": "2022-11-27T05:44:32Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-09T11:22:29Z"}, "message": "fix: to leave Ident in parse_format_exprs", "tree": {"sha": "c6c33477b4ed3024c6eeccecb845bfe897c59603", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6c33477b4ed3024c6eeccecb845bfe897c59603"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13267adb12b6a62d69c5ca0cf872beba9413b6ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13267adb12b6a62d69c5ca0cf872beba9413b6ec", "html_url": "https://github.com/rust-lang/rust/commit/13267adb12b6a62d69c5ca0cf872beba9413b6ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13267adb12b6a62d69c5ca0cf872beba9413b6ec/comments", "author": {"login": "unvalley", "id": 38400669, "node_id": "MDQ6VXNlcjM4NDAwNjY5", "avatar_url": "https://avatars.githubusercontent.com/u/38400669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unvalley", "html_url": "https://github.com/unvalley", "followers_url": "https://api.github.com/users/unvalley/followers", "following_url": "https://api.github.com/users/unvalley/following{/other_user}", "gists_url": "https://api.github.com/users/unvalley/gists{/gist_id}", "starred_url": "https://api.github.com/users/unvalley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unvalley/subscriptions", "organizations_url": "https://api.github.com/users/unvalley/orgs", "repos_url": "https://api.github.com/users/unvalley/repos", "events_url": "https://api.github.com/users/unvalley/events{/privacy}", "received_events_url": "https://api.github.com/users/unvalley/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "796a1064122d7e85b509716d46beb6bb3d267811", "url": "https://api.github.com/repos/rust-lang/rust/commits/796a1064122d7e85b509716d46beb6bb3d267811", "html_url": "https://github.com/rust-lang/rust/commit/796a1064122d7e85b509716d46beb6bb3d267811"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "6ff580c16761f61fe0f5bf6f5089d29e0958227b", "filename": "crates/ide-db/src/syntax_helpers/format_string_exprs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13267adb12b6a62d69c5ca0cf872beba9413b6ec/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13267adb12b6a62d69c5ca0cf872beba9413b6ec/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs?ref=13267adb12b6a62d69c5ca0cf872beba9413b6ec", "patch": "@@ -140,8 +140,8 @@ pub fn parse_format_exprs(input: &str) -> Result<(String, Vec<Arg>), ()> {\n                         output.push_str(trimmed);\n                     } else if matches!(state, State::Expr) {\n                         extracted_expressions.push(Arg::Expr(trimmed.into()));\n-                    } else {\n-                        extracted_expressions.push(Arg::Ident(trimmed.into()));\n+                    } else if matches!(state, State::Ident) {\n+                        output.push_str(trimmed);\n                     }\n \n                     output.push(chr);\n@@ -218,9 +218,9 @@ mod tests {\n         let test_vector = &[\n             (\"no expressions\", expect![[\"no expressions\"]]),\n             (r\"no expressions with \\$0$1\", expect![r\"no expressions with \\\\\\$0\\$1\"]),\n-            (\"{expr} is {2 + 2}\", expect![[\"{} is {}; expr, 2 + 2\"]]),\n-            (\"{expr:?}\", expect![[\"{:?}; expr\"]]),\n-            (\"{expr:1$}\", expect![[r\"{:1\\$}; expr\"]]),\n+            (\"{expr} is {2 + 2}\", expect![[\"{expr} is {}; 2 + 2\"]]),\n+            (\"{expr:?}\", expect![[\"{expr:?}\"]]),\n+            (\"{expr:1$}\", expect![[r\"{expr:1\\$}\"]]),\n             (\"{:1$}\", expect![[r\"{:1\\$}; $1\"]]),\n             (\"{:>padding$}\", expect![[r\"{:>padding\\$}; $1\"]]),\n             (\"{}, {}, {0}\", expect![[r\"{}, {}, {0}; $1, $2\"]]),\n@@ -230,16 +230,16 @@ mod tests {\n             (\"malformed}\", expect![[\"-\"]]),\n             (\"{{correct\", expect![[\"{{correct\"]]),\n             (\"correct}}\", expect![[\"correct}}\"]]),\n-            (\"{correct}}}\", expect![[\"{}}}; correct\"]]),\n-            (\"{correct}}}}}\", expect![[\"{}}}}}; correct\"]]),\n+            (\"{correct}}}\", expect![[\"{correct}}}\"]]),\n+            (\"{correct}}}}}\", expect![[\"{correct}}}}}\"]]),\n             (\"{incorrect}}\", expect![[\"-\"]]),\n             (\"placeholders {} {}\", expect![[\"placeholders {} {}; $1, $2\"]]),\n             (\"mixed {} {2 + 2} {}\", expect![[\"mixed {} {} {}; $1, 2 + 2, $2\"]]),\n             (\n                 \"{SomeStruct { val_a: 0, val_b: 1 }}\",\n                 expect![[\"{}; SomeStruct { val_a: 0, val_b: 1 }\"]],\n             ),\n-            (\"{expr:?} is {2.32f64:.5}\", expect![[\"{:?} is {:.5}; expr, 2.32f64\"]]),\n+            (\"{expr:?} is {2.32f64:.5}\", expect![[\"{expr:?} is {:.5}; 2.32f64\"]]),\n             (\n                 \"{SomeStruct { val_a: 0, val_b: 1 }:?}\",\n                 expect![[\"{:?}; SomeStruct { val_a: 0, val_b: 1 }\"]],"}]}