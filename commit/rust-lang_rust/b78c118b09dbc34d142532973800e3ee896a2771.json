{"sha": "b78c118b09dbc34d142532973800e3ee896a2771", "node_id": "C_kwDOAAsO6NoAKGI3OGMxMThiMDlkYmMzNGQxNDI1MzI5NzM4MDBlM2VlODk2YTI3NzE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-01T21:44:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-01T21:44:29Z"}, "message": "Rollup merge of #97626 - RalfJung:expose, r=tmiasko\n\nrename PointerAddress \u2192 PointerExposeAddress\n\n`PointerAddress` sounds a bit too much like `ptr.addr()`, but this corresponds to `ptr.expose_addr()`.\n\nr? `@tmiasko`", "tree": {"sha": "40922ddc74a2febda0d91d299efe0460682b8d64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40922ddc74a2febda0d91d299efe0460682b8d64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b78c118b09dbc34d142532973800e3ee896a2771", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJil92+CRBK7hj4Ov3rIwAAkywIAChmOUINMQ1dOc0jtM2KTFPC\nF36/89xo3eec4tQkPRcsGXaRDibMep5nE9xLUaF/xr077lyLveWBvbXD1IGC7yT9\nRrbQU+jOVryDafvkemkk7IX/XXIF5YRDHpF2NZ/zPnQ6xqZGjdx/Of9akQjb7R7o\nK2QMyD6TwkURg6iX4VbzwyWoOeEVPg3HLnrnsbC2hBJ9xtheKTKFR9If8cbMkv1A\nZAZl4S0wMP55CRlW4DO+CZD2oJ0w+pBcCeOZEGsAsnqwIr/ze2EmMpGoTJ8hpnC9\ncPkyhNeWXBqORu93CSW3ITT/Q1czAjBf4T9yE9w9ah9ZS1Ub2tSc1tG8PlDmBWg=\n=EQ12\n-----END PGP SIGNATURE-----\n", "payload": "tree 40922ddc74a2febda0d91d299efe0460682b8d64\nparent a96e71c7520c77147b8bf6ae33fd35bec8d69f68\nparent 4dc5d457d86f7414b1a2b4d81bf7428b3ffcbb34\nauthor Yuki Okushi <jtitor@2k36.org> 1654119869 +0900\ncommitter GitHub <noreply@github.com> 1654119869 +0900\n\nRollup merge of #97626 - RalfJung:expose, r=tmiasko\n\nrename PointerAddress \u2192 PointerExposeAddress\n\n`PointerAddress` sounds a bit too much like `ptr.addr()`, but this corresponds to `ptr.expose_addr()`.\n\nr? `@tmiasko`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b78c118b09dbc34d142532973800e3ee896a2771", "html_url": "https://github.com/rust-lang/rust/commit/b78c118b09dbc34d142532973800e3ee896a2771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b78c118b09dbc34d142532973800e3ee896a2771/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a96e71c7520c77147b8bf6ae33fd35bec8d69f68", "url": "https://api.github.com/repos/rust-lang/rust/commits/a96e71c7520c77147b8bf6ae33fd35bec8d69f68", "html_url": "https://github.com/rust-lang/rust/commit/a96e71c7520c77147b8bf6ae33fd35bec8d69f68"}, {"sha": "4dc5d457d86f7414b1a2b4d81bf7428b3ffcbb34", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc5d457d86f7414b1a2b4d81bf7428b3ffcbb34", "html_url": "https://github.com/rust-lang/rust/commit/4dc5d457d86f7414b1a2b4d81bf7428b3ffcbb34"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "abf77acb8c7adeddaf49d2df92c5f86d13365cb1", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78c118b09dbc34d142532973800e3ee896a2771/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78c118b09dbc34d142532973800e3ee896a2771/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=b78c118b09dbc34d142532973800e3ee896a2771", "patch": "@@ -2147,7 +2147,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         }\n                     }\n \n-                    CastKind::PointerAddress => {\n+                    CastKind::PointerExposeAddress => {\n                         let ty_from = op.ty(body, tcx);\n                         let cast_ty_from = CastTy::from_ty(ty_from);\n                         let cast_ty_to = CastTy::from_ty(*ty);"}, {"sha": "58bec183c94aa52aee6d0fb3d063ef3790cad4f8", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b78c118b09dbc34d142532973800e3ee896a2771/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78c118b09dbc34d142532973800e3ee896a2771/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=b78c118b09dbc34d142532973800e3ee896a2771", "patch": "@@ -607,7 +607,11 @@ fn codegen_stmt<'tcx>(\n                     let operand = codegen_operand(fx, operand);\n                     lval.write_cvalue(fx, operand.cast_pointer_to(to_layout));\n                 }\n-                Rvalue::Cast(CastKind::Misc | CastKind::PointerAddress, ref operand, to_ty) => {\n+                Rvalue::Cast(\n+                    CastKind::Misc | CastKind::PointerExposeAddress,\n+                    ref operand,\n+                    to_ty,\n+                ) => {\n                     let operand = codegen_operand(fx, operand);\n                     let from_ty = operand.layout().ty;\n                     let to_ty = fx.monomorphize(to_ty);"}, {"sha": "6ff8d4aa4421694587df6627ac786e8161acfd9a", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78c118b09dbc34d142532973800e3ee896a2771/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78c118b09dbc34d142532973800e3ee896a2771/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=b78c118b09dbc34d142532973800e3ee896a2771", "patch": "@@ -181,7 +181,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let cast = bx.cx().layout_of(self.monomorphize(mir_cast_ty));\n \n                 let val = match *kind {\n-                    mir::CastKind::PointerAddress => {\n+                    mir::CastKind::PointerExposeAddress => {\n                         assert!(bx.cx().is_backend_immediate(cast));\n                         let llptr = operand.immediate();\n                         let llcast_ty = bx.cx().immediate_backend_type(cast);"}, {"sha": "520ae409e6b9fa08f1191fa05ba28f41e3ee49c8", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b78c118b09dbc34d142532973800e3ee896a2771/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78c118b09dbc34d142532973800e3ee896a2771/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=b78c118b09dbc34d142532973800e3ee896a2771", "patch": "@@ -31,9 +31,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.unsize_into(src, cast_ty, dest)?;\n             }\n \n-            PointerAddress => {\n+            PointerExposeAddress => {\n                 let src = self.read_immediate(src)?;\n-                let res = self.pointer_address_cast(&src, cast_ty)?;\n+                let res = self.pointer_expose_address_cast(&src, cast_ty)?;\n                 self.write_immediate(res, dest)?;\n             }\n \n@@ -184,7 +184,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(self.cast_from_int_like(scalar, src.layout, cast_ty)?.into())\n     }\n \n-    pub fn pointer_address_cast(\n+    pub fn pointer_expose_address_cast(\n         &mut self,\n         src: &ImmTy<'tcx, M::PointerTag>,\n         cast_ty: Ty<'tcx>,"}, {"sha": "c07680515f4e7125f87555bb1aac46ef1fc76ee4", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78c118b09dbc34d142532973800e3ee896a2771/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78c118b09dbc34d142532973800e3ee896a2771/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=b78c118b09dbc34d142532973800e3ee896a2771", "patch": "@@ -542,7 +542,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 // in the type of any local, which also excludes casts).\n             }\n \n-            Rvalue::Cast(CastKind::PointerAddress, _, _) => {\n+            Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => {\n                 self.check_op(ops::RawPtrToIntCast);\n             }\n "}, {"sha": "cf5d7b6c70a30f09c0d9f57a60806a6d58f5e789", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78c118b09dbc34d142532973800e3ee896a2771/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78c118b09dbc34d142532973800e3ee896a2771/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=b78c118b09dbc34d142532973800e3ee896a2771", "patch": "@@ -502,7 +502,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n             Rvalue::ThreadLocalRef(_) => return Err(Unpromotable),\n \n             // ptr-to-int casts are not possible in consts and thus not promotable\n-            Rvalue::Cast(CastKind::PointerAddress, _, _) => return Err(Unpromotable),\n+            Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => return Err(Unpromotable),\n \n             // int-to-ptr casts are fine, they just use the integer value at pointer type.\n             Rvalue::Cast(_, operand, _) => {"}, {"sha": "d9cdca8bcb5d72f31d9209c71cd589854d7de5f9", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b78c118b09dbc34d142532973800e3ee896a2771/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78c118b09dbc34d142532973800e3ee896a2771/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=b78c118b09dbc34d142532973800e3ee896a2771", "patch": "@@ -2607,16 +2607,17 @@ static_assert_size!(Rvalue<'_>, 40);\n impl<'tcx> Rvalue<'tcx> {\n     #[inline]\n     pub fn is_pointer_int_cast(&self) -> bool {\n-        matches!(self, Rvalue::Cast(CastKind::PointerAddress, _, _))\n+        matches!(self, Rvalue::Cast(CastKind::PointerExposeAddress, _, _))\n     }\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n pub enum CastKind {\n     Misc,\n-    /// A pointer to address cast. A cast between a pointer and an integer type,\n-    /// or between a function pointer and an integer type.\n-    PointerAddress,\n+    /// An exposing pointer to address cast. A cast between a pointer and an integer type, or\n+    /// between a function pointer and an integer type.\n+    /// See the docs on `expose_addr` for more details.\n+    PointerExposeAddress,\n     Pointer(PointerCast),\n }\n "}, {"sha": "7d08b20631e477c3a58d25dc57924bea4b3ba371", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78c118b09dbc34d142532973800e3ee896a2771/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78c118b09dbc34d142532973800e3ee896a2771/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=b78c118b09dbc34d142532973800e3ee896a2771", "patch": "@@ -194,7 +194,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let cast_ty = CastTy::from_ty(expr.ty);\n                 let cast_kind = match (from_ty, cast_ty) {\n                     (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Int(_))) => {\n-                        CastKind::PointerAddress\n+                        CastKind::PointerExposeAddress\n                     }\n                     (_, _) => CastKind::Misc,\n                 };"}, {"sha": "84d72202d527eee6c1ba526700dbed6ae51b0293", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78c118b09dbc34d142532973800e3ee896a2771/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b78c118b09dbc34d142532973800e3ee896a2771/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=b78c118b09dbc34d142532973800e3ee896a2771", "patch": "@@ -21,7 +21,7 @@\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n                                            // + literal: Const { ty: &i32, val: Unevaluated(FOO, [], None) }\n           _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-          _1 = move _2 as usize (PointerAddress); // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:39\n+          _1 = move _2 as usize (PointerExposeAddress); // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:39\n           StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:38: 7:39\n           StorageDead(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:39: 7:40\n           StorageLive(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:5: 8:12"}, {"sha": "04724b13ca64ce3c9a7067727753da0f669a7403", "filename": "src/test/mir-opt/const_prop/reify_fn_ptr.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78c118b09dbc34d142532973800e3ee896a2771/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b78c118b09dbc34d142532973800e3ee896a2771/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff?ref=b78c118b09dbc34d142532973800e3ee896a2771", "patch": "@@ -17,7 +17,7 @@\n                                            // mir::Constant\n                                            // + span: $DIR/reify_fn_ptr.rs:4:13: 4:17\n                                            // + literal: Const { ty: fn() {main}, val: Value(Scalar(<ZST>)) }\n-          _2 = move _3 as usize (PointerAddress); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n+          _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n           StorageDead(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:25: 4:26\n           _1 = move _2 as *const fn() (Misc); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41\n           StorageDead(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:40: 4:41"}, {"sha": "2331f63ecdd42199d276193d4dad10fe0f930f07", "filename": "src/test/mir-opt/dead-store-elimination/provenance_soundness.pointer_to_int.DeadStoreElimination.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b78c118b09dbc34d142532973800e3ee896a2771/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.pointer_to_int.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b78c118b09dbc34d142532973800e3ee896a2771/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.pointer_to_int.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.pointer_to_int.DeadStoreElimination.diff?ref=b78c118b09dbc34d142532973800e3ee896a2771", "patch": "@@ -19,12 +19,12 @@\n           StorageLive(_2);                 // scope 0 at $DIR/provenance_soundness.rs:8:9: 8:11\n           StorageLive(_3);                 // scope 0 at $DIR/provenance_soundness.rs:8:14: 8:15\n           _3 = _1;                         // scope 0 at $DIR/provenance_soundness.rs:8:14: 8:15\n-          _2 = move _3 as usize (PointerAddress); // scope 0 at $DIR/provenance_soundness.rs:8:14: 8:24\n+          _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/provenance_soundness.rs:8:14: 8:24\n           StorageDead(_3);                 // scope 0 at $DIR/provenance_soundness.rs:8:23: 8:24\n           StorageLive(_4);                 // scope 1 at $DIR/provenance_soundness.rs:9:9: 9:11\n           StorageLive(_5);                 // scope 1 at $DIR/provenance_soundness.rs:9:14: 9:15\n           _5 = _1;                         // scope 1 at $DIR/provenance_soundness.rs:9:14: 9:15\n-          _4 = move _5 as isize (PointerAddress); // scope 1 at $DIR/provenance_soundness.rs:9:14: 9:24\n+          _4 = move _5 as isize (PointerExposeAddress); // scope 1 at $DIR/provenance_soundness.rs:9:14: 9:24\n           StorageDead(_5);                 // scope 1 at $DIR/provenance_soundness.rs:9:23: 9:24\n           _0 = const ();                   // scope 0 at $DIR/provenance_soundness.rs:7:32: 10:2\n           StorageDead(_4);                 // scope 1 at $DIR/provenance_soundness.rs:10:1: 10:2"}, {"sha": "b1c82ac76e8eb149880e19d56f361cb0714113fe", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78c118b09dbc34d142532973800e3ee896a2771/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78c118b09dbc34d142532973800e3ee896a2771/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=b78c118b09dbc34d142532973800e3ee896a2771", "patch": "@@ -125,7 +125,7 @@ fn check_rvalue<'tcx>(\n         Rvalue::Len(place) | Rvalue::Discriminant(place) | Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n             check_place(tcx, *place, span, body)\n         },\n-        Rvalue::Cast(CastKind::PointerAddress, _, _) => {\n+        Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => {\n             Err((span, \"casting pointers to ints is unstable in const fn\".into()))\n         },\n         Rvalue::Cast(CastKind::Misc, operand, _) => {"}]}