{"sha": "a384f131cbb3e79154cc99ef0d025fc9ed6d9674", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzODRmMTMxY2JiM2U3OTE1NGNjOTllZjBkMDI1ZmM5ZWQ2ZDk2NzQ=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-04-11T11:31:20Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-04-11T12:21:07Z"}, "message": "Fix handling of closure arguments\n\nThose did not take tuple reordering into account, causing majority of the compiler test suite to\nfail.", "tree": {"sha": "faa775ce62bd3053cb8fc472d84b3c07b0777749", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faa775ce62bd3053cb8fc472d84b3c07b0777749"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a384f131cbb3e79154cc99ef0d025fc9ed6d9674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a384f131cbb3e79154cc99ef0d025fc9ed6d9674", "html_url": "https://github.com/rust-lang/rust/commit/a384f131cbb3e79154cc99ef0d025fc9ed6d9674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a384f131cbb3e79154cc99ef0d025fc9ed6d9674/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d821e98fd73ee16c2f2733570220b2b64d367d45", "url": "https://api.github.com/repos/rust-lang/rust/commits/d821e98fd73ee16c2f2733570220b2b64d367d45", "html_url": "https://github.com/rust-lang/rust/commit/d821e98fd73ee16c2f2733570220b2b64d367d45"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "d7a4b3fda63bb84054d49fde393e1f2ef62e9fe3", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a384f131cbb3e79154cc99ef0d025fc9ed6d9674/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a384f131cbb3e79154cc99ef0d025fc9ed6d9674/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=a384f131cbb3e79154cc99ef0d025fc9ed6d9674", "patch": "@@ -598,7 +598,7 @@ impl<'a, 'gcx, 'tcx> Struct {\n         // In addition, code in trans assume that 2-element structs can become pairs.\n         // It's easier to just short-circuit here.\n         let can_optimize = (fields.len() > 2 || StructKind::EnumVariant == kind)\n-            && ! (repr.c || repr.packed || repr.linear || repr.simd);\n+            && !(repr.c || repr.packed || repr.linear || repr.simd);\n \n         let (optimize, sort_ascending) = match kind {\n             StructKind::AlwaysSizedUnivariant => (can_optimize, false),"}, {"sha": "a2c356c20db09d563afa0e532dc964c39f139138", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a384f131cbb3e79154cc99ef0d025fc9ed6d9674/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a384f131cbb3e79154cc99ef0d025fc9ed6d9674/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a384f131cbb3e79154cc99ef0d025fc9ed6d9674", "patch": "@@ -1419,7 +1419,8 @@ impl_stable_hash_for!(struct ReprOptions {\n     c,\n     packed,\n     simd,\n-    int\n+    int,\n+    linear\n });\n \n impl ReprOptions {"}, {"sha": "b6fbc2f5ad53717f31a55985f0b6bfc9f292d358", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a384f131cbb3e79154cc99ef0d025fc9ed6d9674/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a384f131cbb3e79154cc99ef0d025fc9ed6d9674/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=a384f131cbb3e79154cc99ef0d025fc9ed6d9674", "patch": "@@ -16,7 +16,7 @@ use llvm;\n use llvm::{ValueRef};\n use abi::{Abi, FnType};\n use adt;\n-use mir::lvalue::LvalueRef;\n+use mir::lvalue::{LvalueRef, Alignment};\n use base::*;\n use common::*;\n use declare;\n@@ -36,8 +36,6 @@ use syntax_pos::Span;\n use std::cmp::Ordering;\n use std::iter;\n \n-use mir::lvalue::Alignment;\n-\n fn get_simple_intrinsic(ccx: &CrateContext, name: &str) -> Option<ValueRef> {\n     let llvm_name = match name {\n         \"sqrtf32\" => \"llvm.sqrt.f32\",\n@@ -622,7 +620,10 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n \n                     for i in 0..elems.len() {\n                         let val = bcx.extract_value(val, i);\n-                        bcx.store(val, bcx.struct_gep(llresult, i), None);\n+                        let lval = LvalueRef::new_sized_ty(llresult, ret_ty,\n+                                                           Alignment::AbiAligned);\n+                        let (dest, _) = lval.trans_field_ptr(bcx, i);\n+                        bcx.store(val, dest, None);\n                     }\n                     C_nil(ccx)\n                 }"}, {"sha": "f4c9a136ace3c9516e9857fb20651f1976455e3a", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a384f131cbb3e79154cc99ef0d025fc9ed6d9674/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a384f131cbb3e79154cc99ef0d025fc9ed6d9674/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=a384f131cbb3e79154cc99ef0d025fc9ed6d9674", "patch": "@@ -386,7 +386,7 @@ fn arg_local_refs<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n \n             let lvalue = LvalueRef::alloca(bcx, arg_ty, &format!(\"arg{}\", arg_index));\n             for (i, &tupled_arg_ty) in tupled_arg_tys.iter().enumerate() {\n-                let dst = bcx.struct_gep(lvalue.llval, i);\n+                let (dst, _) = lvalue.trans_field_ptr(bcx, i);\n                 let arg = &mircx.fn_ty.args[idx];\n                 idx += 1;\n                 if common::type_is_fat_ptr(bcx.ccx, tupled_arg_ty) {"}]}