{"sha": "9b5a974bd5c398e5706e463045121b20f0f6abb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNWE5NzRiZDVjMzk4ZTU3MDZlNDYzMDQ1MTIxYjIwZjBmNmFiYjk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-22T19:01:56Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-22T19:01:56Z"}, "message": "Correctly parse `{} && false` in tail expression\n\nFix #74233.", "tree": {"sha": "f844cb95f3ea3161f0c5432e2be17d73c7ce5698", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f844cb95f3ea3161f0c5432e2be17d73c7ce5698"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b5a974bd5c398e5706e463045121b20f0f6abb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5a974bd5c398e5706e463045121b20f0f6abb9", "html_url": "https://github.com/rust-lang/rust/commit/9b5a974bd5c398e5706e463045121b20f0f6abb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b5a974bd5c398e5706e463045121b20f0f6abb9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ad7bc3f428300aee6764f6e23527e19eb235e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad7bc3f428300aee6764f6e23527e19eb235e81", "html_url": "https://github.com/rust-lang/rust/commit/8ad7bc3f428300aee6764f6e23527e19eb235e81"}], "stats": {"total": 88, "additions": 63, "deletions": 25}, "files": [{"sha": "2ee94965756a5e0d72fc8bbe084b628f1c49f799", "filename": "src/librustc_ast/util/parser.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Flibrustc_ast%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Flibrustc_ast%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fparser.rs?ref=9b5a974bd5c398e5706e463045121b20f0f6abb9", "patch": "@@ -222,7 +222,6 @@ impl AssocOp {\n             Greater | // `{ 42 } > 3`\n             GreaterEqual | // `{ 42 } >= 3`\n             AssignOp(_) | // `{ 42 } +=`\n-            LAnd | // `{ 42 } &&foo`\n             As | // `{ 42 } as usize`\n             // Equal | // `{ 42 } == { 42 }`    Accepting these here would regress incorrect\n             // NotEqual | // `{ 42 } != { 42 }  struct literals parser recovery."}, {"sha": "223986635a03a60e790895a7f2a6394d410e740f", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=9b5a974bd5c398e5706e463045121b20f0f6abb9", "patch": "@@ -295,11 +295,18 @@ impl<'a> Parser<'a> {\n             // want to keep their span info to improve diagnostics in these cases in a later stage.\n             (true, Some(AssocOp::Multiply)) | // `{ 42 } *foo = bar;` or `{ 42 } * 3`\n             (true, Some(AssocOp::Subtract)) | // `{ 42 } -5`\n-            (true, Some(AssocOp::LAnd)) | // `{ 42 } &&x` (#61475)\n             (true, Some(AssocOp::Add)) // `{ 42 } + 42\n             // If the next token is a keyword, then the tokens above *are* unambiguously incorrect:\n             // `if x { a } else { b } && if y { c } else { d }`\n-            if !self.look_ahead(1, |t| t.is_reserved_ident()) => {\n+            if !self.look_ahead(1, |t| t.is_used_keyword()) => {\n+                // These cases are ambiguous and can't be identified in the parser alone.\n+                let sp = self.sess.source_map().start_point(self.token.span);\n+                self.sess.ambiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);\n+                false\n+            }\n+            (true, Some(AssocOp::LAnd)) => {\n+                // `{ 42 } &&x` (#61475) or `{ 42 } && if x { 1 } else { 0 }`. Separated from the\n+                // above due to #74233.\n                 // These cases are ambiguous and can't be identified in the parser alone.\n                 let sp = self.sess.source_map().start_point(self.token.span);\n                 self.sess.ambiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);"}, {"sha": "46303a99278dd9780c7d61c3904762b8f5ec862f", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=9b5a974bd5c398e5706e463045121b20f0f6abb9", "patch": "@@ -34,6 +34,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty);\n         self.suggest_missing_await(err, expr, expected, expr_ty);\n+        self.suggest_missing_parentheses(err, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);\n     }\n "}, {"sha": "57de1780c65ea374ebd7db733e1cb67559fdc2dc", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9b5a974bd5c398e5706e463045121b20f0f6abb9", "patch": "@@ -5403,6 +5403,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggest_missing_parentheses(&self, err: &mut DiagnosticBuilder<'_>, expr: &hir::Expr<'_>) {\n+        let sp = self.tcx.sess.source_map().start_point(expr.span);\n+        if let Some(sp) = self.tcx.sess.parse_sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n+            // `{ 42 } &&x` (#61475) or `{ 42 } && if x { 1 } else { 0 }`\n+            self.tcx.sess.parse_sess.expr_parentheses_needed(err, *sp, None);\n+        }\n+    }\n+\n     fn note_need_for_fn_pointer(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,"}, {"sha": "3a18bdc3b730a8477a27a00e361d769ef4f8033a", "filename": "src/test/ui/parser/expr-as-stmt-2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.rs?ref=9b5a974bd5c398e5706e463045121b20f0f6abb9", "patch": "@@ -0,0 +1,10 @@\n+// This is not autofixable because we give extra suggestions to end the first expression with `;`.\n+fn foo(a: Option<u32>, b: Option<u32>) -> bool {\n+    if let Some(x) = a { true } else { false }\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+    && //~ ERROR mismatched types\n+    if let Some(y) = a { true } else { false }\n+}\n+\n+fn main() {}"}, {"sha": "ee07c36763356d64e6fd5ce8d1380bac7508cfc9", "filename": "src/test/ui/parser/expr-as-stmt-2.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr?ref=9b5a974bd5c398e5706e463045121b20f0f6abb9", "patch": "@@ -0,0 +1,33 @@\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt-2.rs:3:26\n+   |\n+LL |     if let Some(x) = a { true } else { false }\n+   |     ---------------------^^^^------------------ help: consider using a semicolon here\n+   |     |                    |\n+   |     |                    expected `()`, found `bool`\n+   |     expected this to be `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt-2.rs:3:40\n+   |\n+LL |     if let Some(x) = a { true } else { false }\n+   |     -----------------------------------^^^^^--- help: consider using a semicolon here\n+   |     |                                  |\n+   |     |                                  expected `()`, found `bool`\n+   |     expected this to be `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt-2.rs:6:5\n+   |\n+LL |   fn foo(a: Option<u32>, b: Option<u32>) -> bool {\n+   |                                             ---- expected `bool` because of return type\n+LL |       if let Some(x) = a { true } else { false }\n+   |       ------------------------------------------ help: parentheses are required to parse this as an expression: `(if let Some(x) = a { true } else { false })`\n+...\n+LL | /     &&\n+LL | |     if let Some(y) = a { true } else { false }\n+   | |______________________________________________^ expected `bool`, found `&&bool`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "02816ef2791b0dcaa5b83ec0a694795e5083e730", "filename": "src/test/ui/parser/expr-as-stmt.fixed", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed?ref=9b5a974bd5c398e5706e463045121b20f0f6abb9", "patch": "@@ -25,12 +25,6 @@ fn baz() -> i32 {\n     //~^ ERROR mismatched types\n }\n \n-fn qux(a: Option<u32>, b: Option<u32>) -> bool {\n-    (if let Some(x) = a { true } else { false })\n-    && //~ ERROR expected expression\n-    if let Some(y) = a { true } else { false }\n-}\n-\n fn moo(x: u32) -> bool {\n     (match x {\n         _ => 1,"}, {"sha": "93baa8278f890b7bd431c0d86bf63c1d001d5721", "filename": "src/test/ui/parser/expr-as-stmt.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs?ref=9b5a974bd5c398e5706e463045121b20f0f6abb9", "patch": "@@ -25,12 +25,6 @@ fn baz() -> i32 {\n     //~^ ERROR mismatched types\n }\n \n-fn qux(a: Option<u32>, b: Option<u32>) -> bool {\n-    if let Some(x) = a { true } else { false }\n-    && //~ ERROR expected expression\n-    if let Some(y) = a { true } else { false }\n-}\n-\n fn moo(x: u32) -> bool {\n     match x {\n         _ => 1,"}, {"sha": "324aed0ad7cf6df71e5ecb701edbe007e6fad0a6", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b5a974bd5c398e5706e463045121b20f0f6abb9/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=9b5a974bd5c398e5706e463045121b20f0f6abb9", "patch": "@@ -22,16 +22,8 @@ LL |     { 42 } + foo;\n    |     |\n    |     help: parentheses are required to parse this as an expression: `({ 42 })`\n \n-error: expected expression, found `&&`\n-  --> $DIR/expr-as-stmt.rs:30:5\n-   |\n-LL |     if let Some(x) = a { true } else { false }\n-   |     ------------------------------------------ help: parentheses are required to parse this as an expression: `(if let Some(x) = a { true } else { false })`\n-LL |     &&\n-   |     ^^ expected expression\n-\n error: expected expression, found `>`\n-  --> $DIR/expr-as-stmt.rs:37:7\n+  --> $DIR/expr-as-stmt.rs:31:7\n    |\n LL |     } > 0\n    |       ^ expected expression\n@@ -75,7 +67,7 @@ LL |     { 3 } * 3\n    |     |\n    |     help: parentheses are required to parse this as an expression: `({ 3 })`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 9 previous errors\n \n Some errors have detailed explanations: E0308, E0614.\n For more information about an error, try `rustc --explain E0308`."}]}