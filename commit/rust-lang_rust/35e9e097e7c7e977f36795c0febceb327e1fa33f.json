{"sha": "35e9e097e7c7e977f36795c0febceb327e1fa33f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZTllMDk3ZTdjN2U5NzdmMzY3OTVjMGZlYmNlYjMyN2UxZmEzM2Y=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-02T02:16:12Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T17:01:33Z"}, "message": "More c-variadic errors as semantic restrictions.", "tree": {"sha": "0e30fcc08cca08347d5cf3de7f8ccf895e7279f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e30fcc08cca08347d5cf3de7f8ccf895e7279f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35e9e097e7c7e977f36795c0febceb327e1fa33f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35e9e097e7c7e977f36795c0febceb327e1fa33f", "html_url": "https://github.com/rust-lang/rust/commit/35e9e097e7c7e977f36795c0febceb327e1fa33f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35e9e097e7c7e977f36795c0febceb327e1fa33f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a57a2cca489da43fa3168aa1cb453e2b175a1f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a57a2cca489da43fa3168aa1cb453e2b175a1f6", "html_url": "https://github.com/rust-lang/rust/commit/3a57a2cca489da43fa3168aa1cb453e2b175a1f6"}], "stats": {"total": 408, "additions": 322, "deletions": 86}, "files": [{"sha": "58225e87f2682bb80f42487bd01e4e5aeda28633", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35e9e097e7c7e977f36795c0febceb327e1fa33f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e9e097e7c7e977f36795c0febceb327e1fa33f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=35e9e097e7c7e977f36795c0febceb327e1fa33f", "patch": "@@ -1426,7 +1426,13 @@ impl<'a> LoweringContext<'a> {\n                 }\n             }\n             TyKind::Mac(_) => bug!(\"`TyKind::Mac` should have been expanded by now\"),\n-            TyKind::CVarArgs => bug!(\"`TyKind::CVarArgs` should have been handled elsewhere\"),\n+            TyKind::CVarArgs => {\n+                self.sess.delay_span_bug(\n+                    t.span,\n+                    \"`TyKind::CVarArgs` should have been handled elsewhere\",\n+                );\n+                hir::TyKind::Err\n+            }\n         };\n \n         hir::Ty {"}, {"sha": "a7c98886622807a30d5722d168d0237879b32b6b", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 10, "deletions": 45, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/35e9e097e7c7e977f36795c0febceb327e1fa33f/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e9e097e7c7e977f36795c0febceb327e1fa33f/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=35e9e097e7c7e977f36795c0febceb327e1fa33f", "patch": "@@ -1885,58 +1885,23 @@ impl<'a> Parser<'a> {\n \n     /// Parses the parameter list of a function, including the `(` and `)` delimiters.\n     fn parse_fn_params(&mut self, mut cfg: ParamCfg) -> PResult<'a, Vec<Param>> {\n-        let sp = self.token.span;\n         let is_trait_item = cfg.is_self_allowed;\n-        let mut c_variadic = false;\n         // Parse the arguments, starting out with `self` being possibly allowed...\n-        let (params, _) = self.parse_paren_comma_seq(|p| {\n-            let param = p.parse_param_general(&cfg, is_trait_item);\n+        let (mut params, _) = self.parse_paren_comma_seq(|p| {\n+            let param = p.parse_param_general(&cfg, is_trait_item).or_else(|mut e| {\n+                e.emit();\n+                let lo = p.prev_span;\n+                // Skip every token until next possible arg or end.\n+                p.eat_to_tokens(&[&token::Comma, &token::CloseDelim(token::Paren)]);\n+                // Create a placeholder argument for proper arg count (issue #34264).\n+                Ok(dummy_arg(Ident::new(kw::Invalid, lo.to(p.prev_span))))\n+            });\n             // ...now that we've parsed the first argument, `self` is no longer allowed.\n             cfg.is_self_allowed = false;\n-\n-            match param {\n-                Ok(param) => Ok(\n-                    if let TyKind::CVarArgs = param.ty.kind {\n-                        c_variadic = true;\n-                        if p.token != token::CloseDelim(token::Paren) {\n-                            p.span_err(\n-                                p.token.span,\n-                                \"`...` must be the last argument of a C-variadic function\",\n-                            );\n-                            // FIXME(eddyb) this should probably still push `CVarArgs`.\n-                            // Maybe AST validation/HIR lowering should emit the above error?\n-                            None\n-                        } else {\n-                            Some(param)\n-                        }\n-                    } else {\n-                        Some(param)\n-                    }\n-                ),\n-                Err(mut e) => {\n-                    e.emit();\n-                    let lo = p.prev_span;\n-                    // Skip every token until next possible arg or end.\n-                    p.eat_to_tokens(&[&token::Comma, &token::CloseDelim(token::Paren)]);\n-                    // Create a placeholder argument for proper arg count (issue #34264).\n-                    let span = lo.to(p.prev_span);\n-                    Ok(Some(dummy_arg(Ident::new(kw::Invalid, span))))\n-                }\n-            }\n+            param\n         })?;\n-\n-        let mut params: Vec<_> = params.into_iter().filter_map(|x| x).collect();\n-\n         // Replace duplicated recovered params with `_` pattern to avoid unnecessary errors.\n         self.deduplicate_recovered_params_names(&mut params);\n-\n-        if c_variadic && params.len() <= 1 {\n-            self.span_err(\n-                sp,\n-                \"C-variadic function must be declared with at least one named argument\",\n-            );\n-        }\n-\n         Ok(params)\n     }\n "}, {"sha": "c75bd996e10c1cfea867fd1dd831dfef9f22635f", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/35e9e097e7c7e977f36795c0febceb327e1fa33f/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e9e097e7c7e977f36795c0febceb327e1fa33f/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=35e9e097e7c7e977f36795c0febceb327e1fa33f", "patch": "@@ -250,6 +250,26 @@ impl<'a> AstValidator<'a> {\n     }\n \n     fn check_fn_decl(&self, fn_decl: &FnDecl) {\n+        match &*fn_decl.inputs {\n+            [Param { ty, span, .. }] => if let TyKind::CVarArgs = ty.kind {\n+                self.err_handler()\n+                    .span_err(\n+                        *span,\n+                        \"C-variadic function must be declared with at least one named argument\",\n+                    );\n+            },\n+            [ps @ .., _] => for Param { ty, span, .. } in ps {\n+                if let TyKind::CVarArgs = ty.kind {\n+                    self.err_handler()\n+                        .span_err(\n+                            *span,\n+                            \"`...` must be the last argument of a C-variadic function\",\n+                        );\n+                }\n+            }\n+            _ => {}\n+        }\n+\n         fn_decl\n             .inputs\n             .iter()\n@@ -265,8 +285,7 @@ impl<'a> AstValidator<'a> {\n                 )\n                 .span_label(attr.span, \"doc comments are not allowed here\")\n                 .emit();\n-            }\n-            else {\n+            } else {\n                 self.err_handler().span_err(attr.span, \"allow, cfg, cfg_attr, deny, \\\n                 forbid, and warn are the only allowed built-in attributes in function parameters\")\n             });"}, {"sha": "7af38c88f4334c6eb4c2f22f774bf5fbdbaf0d64", "filename": "src/test/ui/c-variadic/variadic-ffi-no-fixed-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35e9e097e7c7e977f36795c0febceb327e1fa33f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-no-fixed-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35e9e097e7c7e977f36795c0febceb327e1fa33f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-no-fixed-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-no-fixed-args.stderr?ref=35e9e097e7c7e977f36795c0febceb327e1fa33f", "patch": "@@ -1,8 +1,8 @@\n error: C-variadic function must be declared with at least one named argument\n-  --> $DIR/variadic-ffi-no-fixed-args.rs:2:11\n+  --> $DIR/variadic-ffi-no-fixed-args.rs:2:12\n    |\n LL |     fn foo(...);\n-   |           ^\n+   |            ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "aa85f6d6b522b25566f6c152d48b062ad210e54f", "filename": "src/test/ui/parser/variadic-ffi-semantic-restrictions.rs", "status": "modified", "additions": 62, "deletions": 12, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/35e9e097e7c7e977f36795c0febceb327e1fa33f/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e9e097e7c7e977f36795c0febceb327e1fa33f/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.rs?ref=35e9e097e7c7e977f36795c0febceb327e1fa33f", "patch": "@@ -2,25 +2,75 @@\n \n fn main() {}\n \n-fn f1(x: isize, ...) {}\n-//~^ ERROR: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+fn f1_1(x: isize, ...) {}\n+//~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n \n-extern \"C\" fn f2(x: isize, ...) {}\n-//~^ ERROR: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+fn f1_2(...) {}\n+//~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+//~| ERROR C-variadic function must be declared with at least one named argument\n \n-extern fn f3(x: isize, ...) {}\n-//~^ ERROR: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+extern \"C\" fn f2_1(x: isize, ...) {}\n+//~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+\n+extern \"C\" fn f2_2(...) {}\n+//~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+//~| ERROR C-variadic function must be declared with at least one named argument\n+\n+extern \"C\" fn f2_3(..., x: isize) {}\n+//~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+//~| ERROR `...` must be the last argument of a C-variadic function\n+\n+extern fn f3_1(x: isize, ...) {}\n+//~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+\n+extern fn f3_2(...) {}\n+//~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+//~| ERROR C-variadic function must be declared with at least one named argument\n+\n+extern fn f3_3(..., x: isize) {}\n+//~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+//~| ERROR `...` must be the last argument of a C-variadic function\n+\n+extern {\n+    fn e_f1(...);\n+    //~^ ERROR C-variadic function must be declared with at least one named argument\n+    fn e_f2(..., x: isize);\n+    //~^ ERROR `...` must be the last argument of a C-variadic function\n+}\n \n struct X;\n \n impl X {\n-    fn f4(x: isize, ...) {}\n-    //~^ ERROR: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    fn i_f1(x: isize, ...) {}\n+    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    fn i_f2(...) {}\n+    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~| ERROR C-variadic function must be declared with at least one named argument\n+    fn i_f3(..., x: isize, ...) {}\n+    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~| ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~| ERROR `...` must be the last argument of a C-variadic function\n+    fn i_f4(..., x: isize, ...) {}\n+    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~| ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~| ERROR `...` must be the last argument of a C-variadic function\n }\n \n trait T {\n-    fn f5(x: isize, ...) {}\n-    //~^ ERROR: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-    fn f6(x: isize, ...);\n-    //~^ ERROR: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    fn t_f1(x: isize, ...) {}\n+    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    fn t_f2(x: isize, ...);\n+    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    fn t_f3(...) {}\n+    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~| ERROR C-variadic function must be declared with at least one named argument\n+    fn t_f4(...);\n+    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~| ERROR C-variadic function must be declared with at least one named argument\n+    fn t_f5(..., x: isize) {}\n+    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~| ERROR `...` must be the last argument of a C-variadic function\n+    fn t_f6(..., x: isize);\n+    //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    //~| ERROR `...` must be the last argument of a C-variadic function\n }"}, {"sha": "21992a29670c9bcfd33b2950f471ded48e26d0aa", "filename": "src/test/ui/parser/variadic-ffi-semantic-restrictions.stderr", "status": "modified", "additions": 186, "deletions": 18, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/35e9e097e7c7e977f36795c0febceb327e1fa33f/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35e9e097e7c7e977f36795c0febceb327e1fa33f/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.stderr?ref=35e9e097e7c7e977f36795c0febceb327e1fa33f", "patch": "@@ -1,38 +1,206 @@\n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:5:17\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:5:19\n    |\n-LL | fn f1(x: isize, ...) {}\n-   |                 ^^^^\n+LL | fn f1_1(x: isize, ...) {}\n+   |                   ^^^^\n+\n+error: C-variadic function must be declared with at least one named argument\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:8:9\n+   |\n+LL | fn f1_2(...) {}\n+   |         ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:8:9\n+   |\n+LL | fn f1_2(...) {}\n+   |         ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:12:30\n+   |\n+LL | extern \"C\" fn f2_1(x: isize, ...) {}\n+   |                              ^^^^\n+\n+error: C-variadic function must be declared with at least one named argument\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:15:20\n+   |\n+LL | extern \"C\" fn f2_2(...) {}\n+   |                    ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:15:20\n+   |\n+LL | extern \"C\" fn f2_2(...) {}\n+   |                    ^^^^\n+\n+error: `...` must be the last argument of a C-variadic function\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:19:20\n+   |\n+LL | extern \"C\" fn f2_3(..., x: isize) {}\n+   |                    ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:19:20\n+   |\n+LL | extern \"C\" fn f2_3(..., x: isize) {}\n+   |                    ^^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:8:28\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:23:26\n    |\n-LL | extern \"C\" fn f2(x: isize, ...) {}\n+LL | extern fn f3_1(x: isize, ...) {}\n+   |                          ^^^^\n+\n+error: C-variadic function must be declared with at least one named argument\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:26:16\n+   |\n+LL | extern fn f3_2(...) {}\n+   |                ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:26:16\n+   |\n+LL | extern fn f3_2(...) {}\n+   |                ^^^^\n+\n+error: `...` must be the last argument of a C-variadic function\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:30:16\n+   |\n+LL | extern fn f3_3(..., x: isize) {}\n+   |                ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:30:16\n+   |\n+LL | extern fn f3_3(..., x: isize) {}\n+   |                ^^^^\n+\n+error: C-variadic function must be declared with at least one named argument\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:35:13\n+   |\n+LL |     fn e_f1(...);\n+   |             ^^^^\n+\n+error: `...` must be the last argument of a C-variadic function\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:37:13\n+   |\n+LL |     fn e_f2(..., x: isize);\n+   |             ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:44:23\n+   |\n+LL |     fn i_f1(x: isize, ...) {}\n+   |                       ^^^^\n+\n+error: C-variadic function must be declared with at least one named argument\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:46:13\n+   |\n+LL |     fn i_f2(...) {}\n+   |             ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:46:13\n+   |\n+LL |     fn i_f2(...) {}\n+   |             ^^^^\n+\n+error: `...` must be the last argument of a C-variadic function\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:49:13\n+   |\n+LL |     fn i_f3(..., x: isize, ...) {}\n+   |             ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:49:13\n+   |\n+LL |     fn i_f3(..., x: isize, ...) {}\n+   |             ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:49:28\n+   |\n+LL |     fn i_f3(..., x: isize, ...) {}\n    |                            ^^^^\n \n+error: `...` must be the last argument of a C-variadic function\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:53:13\n+   |\n+LL |     fn i_f4(..., x: isize, ...) {}\n+   |             ^^^^\n+\n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:11:24\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:53:13\n    |\n-LL | extern fn f3(x: isize, ...) {}\n-   |                        ^^^^\n+LL |     fn i_f4(..., x: isize, ...) {}\n+   |             ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:53:28\n+   |\n+LL |     fn i_f4(..., x: isize, ...) {}\n+   |                            ^^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:17:21\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:60:23\n    |\n-LL |     fn f4(x: isize, ...) {}\n-   |                     ^^^^\n+LL |     fn t_f1(x: isize, ...) {}\n+   |                       ^^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:22:21\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:62:23\n+   |\n+LL |     fn t_f2(x: isize, ...);\n+   |                       ^^^^\n+\n+error: C-variadic function must be declared with at least one named argument\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:64:13\n+   |\n+LL |     fn t_f3(...) {}\n+   |             ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:64:13\n+   |\n+LL |     fn t_f3(...) {}\n+   |             ^^^^\n+\n+error: C-variadic function must be declared with at least one named argument\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:67:13\n+   |\n+LL |     fn t_f4(...);\n+   |             ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:67:13\n+   |\n+LL |     fn t_f4(...);\n+   |             ^^^^\n+\n+error: `...` must be the last argument of a C-variadic function\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:70:13\n+   |\n+LL |     fn t_f5(..., x: isize) {}\n+   |             ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:70:13\n+   |\n+LL |     fn t_f5(..., x: isize) {}\n+   |             ^^^^\n+\n+error: `...` must be the last argument of a C-variadic function\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:73:13\n    |\n-LL |     fn f5(x: isize, ...) {}\n-   |                     ^^^^\n+LL |     fn t_f6(..., x: isize);\n+   |             ^^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:24:21\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:73:13\n    |\n-LL |     fn f6(x: isize, ...);\n-   |                     ^^^^\n+LL |     fn t_f6(..., x: isize);\n+   |             ^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 34 previous errors\n "}, {"sha": "3875d6af1371678549e3410a64b5b2c63df7e9a3", "filename": "src/test/ui/parser/variadic-ffi-syntactic-pass.rs", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/35e9e097e7c7e977f36795c0febceb327e1fa33f/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e9e097e7c7e977f36795c0febceb327e1fa33f/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-syntactic-pass.rs?ref=35e9e097e7c7e977f36795c0febceb327e1fa33f", "patch": "@@ -3,23 +3,51 @@\n fn main() {}\n \n #[cfg(FALSE)]\n-fn f1(x: isize, ...) {}\n+fn f1_1(x: isize, ...) {}\n \n #[cfg(FALSE)]\n-extern \"C\" fn f2(x: isize, ...) {}\n+fn f1_2(...) {}\n \n #[cfg(FALSE)]\n-extern fn f3(x: isize, ...) {}\n+extern \"C\" fn f2_1(x: isize, ...) {}\n+\n+#[cfg(FALSE)]\n+extern \"C\" fn f2_2(...) {}\n+\n+#[cfg(FALSE)]\n+extern \"C\" fn f2_3(..., x: isize) {}\n+\n+#[cfg(FALSE)]\n+extern fn f3_1(x: isize, ...) {}\n+\n+#[cfg(FALSE)]\n+extern fn f3_2(...) {}\n+\n+#[cfg(FALSE)]\n+extern fn f3_3(..., x: isize) {}\n+\n+#[cfg(FALSE)]\n+extern {\n+    fn e_f1(...);\n+    fn e_f2(..., x: isize);\n+}\n \n struct X;\n \n #[cfg(FALSE)]\n impl X {\n-    fn f4(x: isize, ...) {}\n+    fn i_f1(x: isize, ...) {}\n+    fn i_f2(...) {}\n+    fn i_f3(..., x: isize, ...) {}\n+    fn i_f4(..., x: isize, ...) {}\n }\n \n #[cfg(FALSE)]\n trait T {\n-    fn f5(x: isize, ...) {}\n-    fn f6(x: isize, ...);\n+    fn t_f1(x: isize, ...) {}\n+    fn t_f2(x: isize, ...);\n+    fn t_f3(...) {}\n+    fn t_f4(...);\n+    fn t_f5(..., x: isize) {}\n+    fn t_f6(..., x: isize);\n }"}]}