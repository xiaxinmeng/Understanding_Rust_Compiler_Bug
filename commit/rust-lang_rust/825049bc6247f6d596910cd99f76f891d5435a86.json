{"sha": "825049bc6247f6d596910cd99f76f891d5435a86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNTA0OWJjNjI0N2Y2ZDU5NjkxMGNkOTlmNzZmODkxZDU0MzVhODY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T09:31:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T09:34:26Z"}, "message": "Decouple", "tree": {"sha": "24e9543a78e13477a85c38f98a58f402d7a40ef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24e9543a78e13477a85c38f98a58f402d7a40ef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/825049bc6247f6d596910cd99f76f891d5435a86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/825049bc6247f6d596910cd99f76f891d5435a86", "html_url": "https://github.com/rust-lang/rust/commit/825049bc6247f6d596910cd99f76f891d5435a86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/825049bc6247f6d596910cd99f76f891d5435a86/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91ebfc752bdfa8fc20be6ea97a14aa6a4d897ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91ebfc752bdfa8fc20be6ea97a14aa6a4d897ae", "html_url": "https://github.com/rust-lang/rust/commit/e91ebfc752bdfa8fc20be6ea97a14aa6a4d897ae"}], "stats": {"total": 120, "additions": 71, "deletions": 49}, "files": [{"sha": "b9d3a171317759ad517768c001e0a958233af099", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/825049bc6247f6d596910cd99f76f891d5435a86/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825049bc6247f6d596910cd99f76f891d5435a86/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=825049bc6247f6d596910cd99f76f891d5435a86", "patch": "@@ -11,7 +11,7 @@ use hir_def::{\n     expr::{ExprId, PatId},\n     path::known,\n     resolver::{self, resolver_for_scope, HasResolver, Resolver, TypeNs, ValueNs},\n-    DefWithBodyId,\n+    AssocItemId, DefWithBodyId,\n };\n use hir_expand::{\n     hygiene::Hygiene, name::AsName, AstId, HirFileId, MacroCallId, MacroFileKind, Source,\n@@ -380,7 +380,7 @@ impl SourceAnalyzer {\n             name,\n             method_resolution::LookupMode::MethodCall,\n             |ty, it| match it {\n-                AssocItem::Function(f) => callback(ty, f),\n+                AssocItemId::FunctionId(f) => callback(ty, f.into()),\n                 _ => None,\n             },\n         )\n@@ -391,7 +391,7 @@ impl SourceAnalyzer {\n         db: &impl HirDatabase,\n         ty: &Type,\n         name: Option<&Name>,\n-        callback: impl FnMut(&Ty, AssocItem) -> Option<T>,\n+        mut callback: impl FnMut(&Ty, AssocItem) -> Option<T>,\n     ) -> Option<T> {\n         // There should be no inference vars in types passed here\n         // FIXME check that?\n@@ -403,7 +403,7 @@ impl SourceAnalyzer {\n             &self.resolver,\n             name,\n             method_resolution::LookupMode::Path,\n-            callback,\n+            |ty, it| callback(ty, it.into()),\n         )\n     }\n "}, {"sha": "db9a8c9d1ece9dbe4f29a3b4cd2dfe58b356bec8", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/825049bc6247f6d596910cd99f76f891d5435a86/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825049bc6247f6d596910cd99f76f891d5435a86/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=825049bc6247f6d596910cd99f76f891d5435a86", "patch": "@@ -26,7 +26,7 @@ use hir_def::{\n     path::known,\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{Mutability, TypeRef},\n-    AdtId, DefWithBodyId,\n+    AdtId, AssocItemId, DefWithBodyId,\n };\n use hir_expand::{diagnostics::DiagnosticSink, name};\n use ra_arena::map::ArenaMap;\n@@ -255,8 +255,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         self.result.variant_resolutions.insert(id, variant);\n     }\n \n-    fn write_assoc_resolution(&mut self, id: ExprOrPatId, item: AssocItem) {\n-        self.result.assoc_resolutions.insert(id, item);\n+    fn write_assoc_resolution(&mut self, id: ExprOrPatId, item: AssocItemId) {\n+        self.result.assoc_resolutions.insert(id, item.into());\n     }\n \n     fn write_pat_ty(&mut self, pat: PatId, ty: Ty) {"}, {"sha": "09ff797288587ac0cccbd47cf080deaa40cf01b7", "filename": "crates/ra_hir/src/ty/infer/path.rs", "status": "modified", "additions": 49, "deletions": 37, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/825049bc6247f6d596910cd99f76f891d5435a86/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825049bc6247f6d596910cd99f76f891d5435a86/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs?ref=825049bc6247f6d596910cd99f76f891d5435a86", "patch": "@@ -2,14 +2,14 @@\n \n use hir_def::{\n     path::{Path, PathSegment},\n-    resolver::{ResolveValueResult, Resolver, TypeNs, ValueNs},\n+    resolver::{HasResolver, ResolveValueResult, Resolver, TypeNs, ValueNs},\n+    AssocItemId, ContainerId, Lookup,\n };\n use hir_expand::name::Name;\n \n use crate::{\n     db::HirDatabase,\n     ty::{method_resolution, Substs, Ty, TypeWalk, ValueTyDefId},\n-    AssocItem, Container, Function,\n };\n \n use super::{ExprOrPatId, InferenceContext, TraitRef};\n@@ -143,31 +143,35 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         id: ExprOrPatId,\n     ) -> Option<(ValueNs, Option<Substs>)> {\n         let trait_ = trait_ref.trait_;\n-        let item =\n-            self.db.trait_data(trait_).items.iter().map(|(_name, id)| (*id).into()).find_map(\n-                |item| match item {\n-                    AssocItem::Function(func) => {\n-                        if segment.name == func.name(self.db) {\n-                            Some(AssocItem::Function(func))\n-                        } else {\n-                            None\n-                        }\n+        let item = self\n+            .db\n+            .trait_data(trait_)\n+            .items\n+            .iter()\n+            .map(|(_name, id)| (*id).into())\n+            .find_map(|item| match item {\n+                AssocItemId::FunctionId(func) => {\n+                    if segment.name == self.db.function_data(func).name {\n+                        Some(AssocItemId::FunctionId(func))\n+                    } else {\n+                        None\n                     }\n+                }\n \n-                    AssocItem::Const(konst) => {\n-                        if konst.name(self.db).map_or(false, |n| n == segment.name) {\n-                            Some(AssocItem::Const(konst))\n-                        } else {\n-                            None\n-                        }\n+                AssocItemId::ConstId(konst) => {\n+                    if self.db.const_data(konst).name.as_ref().map_or(false, |n| n == &segment.name)\n+                    {\n+                        Some(AssocItemId::ConstId(konst))\n+                    } else {\n+                        None\n                     }\n-                    AssocItem::TypeAlias(_) => None,\n-                },\n-            )?;\n+                }\n+                AssocItemId::TypeAliasId(_) => None,\n+            })?;\n         let def = match item {\n-            AssocItem::Function(f) => ValueNs::FunctionId(f.id),\n-            AssocItem::Const(c) => ValueNs::ConstId(c.id),\n-            AssocItem::TypeAlias(_) => unreachable!(),\n+            AssocItemId::FunctionId(f) => ValueNs::FunctionId(f),\n+            AssocItemId::ConstId(c) => ValueNs::ConstId(c),\n+            AssocItemId::TypeAliasId(_) => unreachable!(),\n         };\n         let substs = Substs::build_for_def(self.db, item)\n             .use_parent_substs(&trait_ref.substs)\n@@ -197,16 +201,18 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Some(name),\n             method_resolution::LookupMode::Path,\n             move |_ty, item| {\n-                let def = match item {\n-                    AssocItem::Function(f) => ValueNs::FunctionId(f.id),\n-                    AssocItem::Const(c) => ValueNs::ConstId(c.id),\n-                    AssocItem::TypeAlias(_) => unreachable!(),\n+                let (def, container) = match item {\n+                    AssocItemId::FunctionId(f) => {\n+                        (ValueNs::FunctionId(f), f.lookup(self.db).container)\n+                    }\n+                    AssocItemId::ConstId(c) => (ValueNs::ConstId(c), c.lookup(self.db).container),\n+                    AssocItemId::TypeAliasId(_) => unreachable!(),\n                 };\n-                let substs = match item.container(self.db) {\n-                    Container::ImplBlock(_) => self.find_self_types(&def, ty.clone()),\n-                    Container::Trait(t) => {\n+                let substs = match container {\n+                    ContainerId::ImplId(_) => self.find_self_types(&def, ty.clone()),\n+                    ContainerId::TraitId(trait_) => {\n                         // we're picking this method\n-                        let trait_substs = Substs::build_for_def(self.db, t.id)\n+                        let trait_substs = Substs::build_for_def(self.db, trait_)\n                             .push(ty.clone())\n                             .fill(std::iter::repeat_with(|| self.new_type_var()))\n                             .build();\n@@ -215,29 +221,35 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                             .fill_with_params()\n                             .build();\n                         self.obligations.push(super::Obligation::Trait(TraitRef {\n-                            trait_: t.id,\n+                            trait_,\n                             substs: trait_substs,\n                         }));\n                         Some(substs)\n                     }\n+                    ContainerId::ModuleId(_) => None,\n                 };\n \n-                self.write_assoc_resolution(id, item);\n+                self.write_assoc_resolution(id, item.into());\n                 Some((def, substs))\n             },\n         )\n     }\n \n     fn find_self_types(&self, def: &ValueNs, actual_def_ty: Ty) -> Option<Substs> {\n-        if let ValueNs::FunctionId(func) = def {\n-            let func = Function::from(*func);\n+        if let ValueNs::FunctionId(func) = *def {\n             // We only do the infer if parent has generic params\n-            let gen = self.db.generic_params(func.id.into());\n+            let gen = self.db.generic_params(func.into());\n             if gen.count_parent_params() == 0 {\n                 return None;\n             }\n \n-            let impl_block = func.impl_block(self.db)?.target_ty(self.db);\n+            let impl_id = match func.lookup(self.db).container {\n+                ContainerId::ImplId(it) => it,\n+                _ => return None,\n+            };\n+            let resolver = impl_id.resolver(self.db);\n+            let impl_data = self.db.impl_data(impl_id);\n+            let impl_block = Ty::from_hir(self.db, &resolver, &impl_data.target_type);\n             let impl_block_substs = impl_block.substs()?;\n             let actual_substs = actual_def_ty.substs()?;\n "}, {"sha": "02e81fb341ecca34982687259466119a9c6574b9", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/825049bc6247f6d596910cd99f76f891d5435a86/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825049bc6247f6d596910cd99f76f891d5435a86/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=825049bc6247f6d596910cd99f76f891d5435a86", "patch": "@@ -18,7 +18,7 @@ use crate::{\n     db::HirDatabase,\n     ty::primitive::{FloatBitness, Uncertain},\n     ty::{utils::all_super_traits, Ty, TypeCtor},\n-    AssocItem, Function,\n+    Function,\n };\n \n use super::{autoderef, Canonical, InEnvironment, TraitEnvironment, TraitRef};\n@@ -157,7 +157,7 @@ pub(crate) fn lookup_method(\n ) -> Option<(Ty, Function)> {\n     iterate_method_candidates(ty, db, resolver, Some(name), LookupMode::MethodCall, |ty, f| match f\n     {\n-        AssocItem::Function(f) => Some((ty.clone(), f)),\n+        AssocItemId::FunctionId(f) => Some((ty.clone(), f.into())),\n         _ => None,\n     })\n }\n@@ -183,7 +183,7 @@ pub(crate) fn iterate_method_candidates<T>(\n     resolver: &Resolver,\n     name: Option<&Name>,\n     mode: LookupMode,\n-    mut callback: impl FnMut(&Ty, AssocItem) -> Option<T>,\n+    mut callback: impl FnMut(&Ty, AssocItemId) -> Option<T>,\n ) -> Option<T> {\n     let krate = resolver.krate()?;\n     match mode {\n@@ -239,7 +239,7 @@ fn iterate_trait_method_candidates<T>(\n     resolver: &Resolver,\n     name: Option<&Name>,\n     mode: LookupMode,\n-    mut callback: impl FnMut(&Ty, AssocItem) -> Option<T>,\n+    mut callback: impl FnMut(&Ty, AssocItemId) -> Option<T>,\n ) -> Option<T> {\n     let krate = resolver.krate()?;\n     // FIXME: maybe put the trait_env behind a query (need to figure out good input parameters for that)\n@@ -285,7 +285,7 @@ fn iterate_inherent_methods<T>(\n     name: Option<&Name>,\n     mode: LookupMode,\n     krate: CrateId,\n-    mut callback: impl FnMut(&Ty, AssocItem) -> Option<T>,\n+    mut callback: impl FnMut(&Ty, AssocItemId) -> Option<T>,\n ) -> Option<T> {\n     for krate in ty.value.def_crates(db, krate)? {\n         let impls = db.impls_in_crate(krate);"}, {"sha": "ea3f00bb33f385cac5428920066f23fde80be5fe", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/825049bc6247f6d596910cd99f76f891d5435a86/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825049bc6247f6d596910cd99f76f891d5435a86/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=825049bc6247f6d596910cd99f76f891d5435a86", "patch": "@@ -398,6 +398,16 @@ impl_froms!(\n     ConstId\n );\n \n+impl From<AssocItemId> for GenericDefId {\n+    fn from(item: AssocItemId) -> Self {\n+        match item {\n+            AssocItemId::FunctionId(f) => f.into(),\n+            AssocItemId::ConstId(c) => c.into(),\n+            AssocItemId::TypeAliasId(t) => t.into(),\n+        }\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum AttrDefId {\n     ModuleId(ModuleId),"}]}