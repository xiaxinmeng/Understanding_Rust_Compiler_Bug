{"sha": "a324d066cb767876f9f3398f83db9f5a8dda8ce4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMjRkMDY2Y2I3Njc4NzZmOWYzMzk4ZjgzZGI5ZjVhOGRkYThjZTQ=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-14T13:44:00Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-14T13:44:00Z"}, "message": "Rename Ty::Param => Ty::Placeholder\n\nThis aligns more with Chalk.", "tree": {"sha": "e2b6b33ebf9445140549ae4f7f0b81dcc6a0855f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2b6b33ebf9445140549ae4f7f0b81dcc6a0855f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a324d066cb767876f9f3398f83db9f5a8dda8ce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a324d066cb767876f9f3398f83db9f5a8dda8ce4", "html_url": "https://github.com/rust-lang/rust/commit/a324d066cb767876f9f3398f83db9f5a8dda8ce4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a324d066cb767876f9f3398f83db9f5a8dda8ce4/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a19f52f9ae1634fa2267c3bc7647a0d47b6014ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/a19f52f9ae1634fa2267c3bc7647a0d47b6014ac", "html_url": "https://github.com/rust-lang/rust/commit/a19f52f9ae1634fa2267c3bc7647a0d47b6014ac"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "69ad13952155b7e72acb9f983d16dd7f1156fec2", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a324d066cb767876f9f3398f83db9f5a8dda8ce4/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a324d066cb767876f9f3398f83db9f5a8dda8ce4/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=a324d066cb767876f9f3398f83db9f5a8dda8ce4", "patch": "@@ -291,7 +291,7 @@ pub enum Ty {\n     /// {}` when we're type-checking the body of that function. In this\n     /// situation, we know this stands for *some* type, but don't know the exact\n     /// type.\n-    Param(TypeParamId),\n+    Placeholder(TypeParamId),\n \n     /// A bound type variable. This is used in various places: when representing\n     /// some polymorphic type like the type of function `fn f<T>`, the type\n@@ -365,7 +365,7 @@ impl Substs {\n \n     /// Return Substs that replace each parameter by itself (i.e. `Ty::Param`).\n     pub(crate) fn type_params_for_generics(generic_params: &Generics) -> Substs {\n-        Substs(generic_params.iter().map(|(id, _)| Ty::Param(id)).collect())\n+        Substs(generic_params.iter().map(|(id, _)| Ty::Placeholder(id)).collect())\n     }\n \n     /// Return Substs that replace each parameter by itself (i.e. `Ty::Param`).\n@@ -813,7 +813,7 @@ impl TypeWalk for Ty {\n                     p.walk(f);\n                 }\n             }\n-            Ty::Param { .. } | Ty::Bound(_) | Ty::Infer(_) | Ty::Unknown => {}\n+            Ty::Placeholder { .. } | Ty::Bound(_) | Ty::Infer(_) | Ty::Unknown => {}\n         }\n         f(self);\n     }\n@@ -831,7 +831,7 @@ impl TypeWalk for Ty {\n                     p.walk_mut_binders(f, binders + 1);\n                 }\n             }\n-            Ty::Param { .. } | Ty::Bound(_) | Ty::Infer(_) | Ty::Unknown => {}\n+            Ty::Placeholder { .. } | Ty::Bound(_) | Ty::Infer(_) | Ty::Unknown => {}\n         }\n         f(self, binders);\n     }\n@@ -1032,7 +1032,7 @@ impl HirDisplay for Ty {\n         match self {\n             Ty::Apply(a_ty) => a_ty.hir_fmt(f)?,\n             Ty::Projection(p_ty) => p_ty.hir_fmt(f)?,\n-            Ty::Param(id) => {\n+            Ty::Placeholder(id) => {\n                 let generics = generics(f.db, id.parent);\n                 let param_data = &generics.params.types[id.local_id];\n                 match param_data.provenance {"}, {"sha": "df24c16a3f81106cb2f7fb0f14e8180ba1e5e29c", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a324d066cb767876f9f3398f83db9f5a8dda8ce4/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a324d066cb767876f9f3398f83db9f5a8dda8ce4/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=a324d066cb767876f9f3398f83db9f5a8dda8ce4", "patch": "@@ -152,7 +152,7 @@ impl Ty {\n                                     data.provenance == TypeParamProvenance::ArgumentImplTrait\n                                 })\n                                 .nth(idx as usize)\n-                                .map_or(Ty::Unknown, |(id, _)| Ty::Param(id));\n+                                .map_or(Ty::Unknown, |(id, _)| Ty::Placeholder(id));\n                             param\n                         } else {\n                             Ty::Unknown\n@@ -270,7 +270,7 @@ impl Ty {\n                 let generics =\n                     generics(ctx.db, ctx.resolver.generic_def().expect(\"generics in scope\"));\n                 match ctx.type_param_mode {\n-                    TypeParamLoweringMode::Placeholder => Ty::Param(param_id),\n+                    TypeParamLoweringMode::Placeholder => Ty::Placeholder(param_id),\n                     TypeParamLoweringMode::Variable => {\n                         let idx = generics.param_idx(param_id).expect(\"matching generics\");\n                         Ty::Bound(idx)\n@@ -339,7 +339,7 @@ impl Ty {\n             None => return Ty::Unknown, // this can't actually happen\n         };\n         let param_id = match self_ty {\n-            Ty::Param(id) if ctx.type_param_mode == TypeParamLoweringMode::Placeholder => id,\n+            Ty::Placeholder(id) if ctx.type_param_mode == TypeParamLoweringMode::Placeholder => id,\n             Ty::Bound(idx) if ctx.type_param_mode == TypeParamLoweringMode::Variable => {\n                 let generics = generics(ctx.db, def);\n                 let param_id = if let Some((id, _)) = generics.iter().nth(idx as usize) {\n@@ -544,7 +544,7 @@ impl GenericPredicate {\n                 let generics = generics(ctx.db, generic_def);\n                 let param_id = hir_def::TypeParamId { parent: generic_def, local_id: *param_id };\n                 match ctx.type_param_mode {\n-                    TypeParamLoweringMode::Placeholder => Ty::Param(param_id),\n+                    TypeParamLoweringMode::Placeholder => Ty::Placeholder(param_id),\n                     TypeParamLoweringMode::Variable => {\n                         let idx = generics.param_idx(param_id).expect(\"matching generics\");\n                         Ty::Bound(idx)"}, {"sha": "882160fa8aa67ba6e61427916fd6fac236210db3", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a324d066cb767876f9f3398f83db9f5a8dda8ce4/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a324d066cb767876f9f3398f83db9f5a8dda8ce4/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=a324d066cb767876f9f3398f83db9f5a8dda8ce4", "patch": "@@ -142,7 +142,7 @@ impl ToChalk for Ty {\n                 let substitution = proj_ty.parameters.to_chalk(db);\n                 chalk_ir::AliasTy { associated_ty_id, substitution }.cast().intern()\n             }\n-            Ty::Param(id) => {\n+            Ty::Placeholder(id) => {\n                 let interned_id = db.intern_type_param_id(id);\n                 PlaceholderIndex {\n                     ui: UniverseIndex::ROOT,\n@@ -184,7 +184,7 @@ impl ToChalk for Ty {\n                 let interned_id = crate::db::GlobalTypeParamId::from_intern_id(\n                     crate::salsa::InternId::from(idx.idx),\n                 );\n-                Ty::Param(db.lookup_intern_type_param_id(interned_id))\n+                Ty::Placeholder(db.lookup_intern_type_param_id(interned_id))\n             }\n             chalk_ir::TyData::Alias(proj) => {\n                 let associated_ty = from_chalk(db, proj.associated_ty_id);"}]}