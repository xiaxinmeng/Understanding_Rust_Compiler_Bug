{"sha": "1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MjIwNDFlN2Y2OTQwN2U3ZmE0MGJmOTBlOGVjNDdkNDlhOTdmZDI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-17T08:15:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-18T20:38:29Z"}, "message": "change coercion to use target region if not LUB", "tree": {"sha": "b5d9f40ec24c43f7d56f318336b7f47b2108ee5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5d9f40ec24c43f7d56f318336b7f47b2108ee5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "html_url": "https://github.com/rust-lang/rust/commit/1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24bb607e7d65ebfc487eba62e053ac049f140efc", "url": "https://api.github.com/repos/rust-lang/rust/commits/24bb607e7d65ebfc487eba62e053ac049f140efc", "html_url": "https://github.com/rust-lang/rust/commit/24bb607e7d65ebfc487eba62e053ac049f140efc"}], "stats": {"total": 109, "additions": 53, "deletions": 56}, "files": [{"sha": "a8b4c2e12aabc8be8ee67c924ac96de30081c91e", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -166,8 +166,8 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 return self.coerce_unsafe_ptr(a, b, mt_b.mutbl);\n             }\n \n-            ty::TyRef(_, mt_b) => {\n-                return self.coerce_borrowed_pointer(exprs, a, b, mt_b.mutbl);\n+            ty::TyRef(r_b, mt_b) => {\n+                return self.coerce_borrowed_pointer(exprs, a, b, r_b, mt_b.mutbl);\n             }\n \n             _ => {}\n@@ -199,6 +199,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                                          exprs: &E,\n                                          a: Ty<'tcx>,\n                                          b: Ty<'tcx>,\n+                                         r_b: &'tcx ty::Region,\n                                          mutbl_b: hir::Mutability)\n                                          -> CoerceResult<'tcx>\n         // FIXME(eddyb) use copyable iterators when that becomes ergonomic.\n@@ -213,17 +214,28 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         // to type check, we will construct the type that `&M*expr` would\n         // yield.\n \n-        match a.sty {\n-            ty::TyRef(_, mt_a) => {\n+        let (_r_a, _mutbl_a) = match a.sty {\n+            ty::TyRef(r_a, mt_a) => {\n                 try!(coerce_mutbls(mt_a.mutbl, mutbl_b));\n+                (r_a, mt_a.mutbl)\n             }\n             _ => return self.unify(a, b)\n-        }\n+        };\n \n         let span = self.origin.span();\n         let coercion = Coercion(span);\n-        let r_borrow = self.fcx.infcx().next_region_var(coercion);\n-        let r_borrow = self.tcx().mk_region(r_borrow);\n+        let r_borrow = {\n+            // If are coercing from `&'a T` to `&'b U`, then we want to\n+            // reborrow the contents of `'a` for the lifetime `'b`\n+            // (which ought to be a sublifetime of `'a`).\n+            if !self.use_lub {\n+                r_b\n+            } else {\n+                // With LUB, we need more flexibility.\n+                let r_borrow = self.fcx.infcx().next_region_var(coercion);\n+                self.tcx().mk_region(r_borrow)\n+            }\n+        };\n         let autoref = Some(AutoPtr(r_borrow, mutbl_b));\n \n         let lvalue_pref = LvaluePreference::from_mutbl(mutbl_b);"}, {"sha": "43255db2ff3ab96ea443117ed3e70fcbebb6cf97", "filename": "src/test/compile-fail/issue-10291.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -11,8 +11,7 @@\n fn test<'x>(x: &'x isize) {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n-        x\n-        //~^ ERROR cannot infer an appropriate lifetime\n+        x //~ ERROR E0312\n     }));\n }\n "}, {"sha": "d13da1d9fd94817727296b389166f40fe7ceb97f", "filename": "src/test/compile-fail/issue-7573.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -24,11 +24,9 @@ impl CrateId {\n }\n \n pub fn remove_package_from_database() {\n-    let mut lines_to_use: Vec<&CrateId> = Vec::new();\n+    let mut lines_to_use: Vec<&CrateId> = Vec::new(); //~ ERROR E0495\n     let push_id = |installed_id: &CrateId| {\n         lines_to_use.push(installed_id);\n-        //~^ ERROR cannot infer an appropriate lifetime for automatic coercion due to\n-        // conflicting requirements\n     };\n     list_database(push_id);\n "}, {"sha": "655fe28b12b443bbfe64046f0c7a82ebe6b06ef2", "filename": "src/test/compile-fail/lifetime-inference-give-expl-lifetime-param-3.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-3.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -14,19 +14,19 @@ use std::marker::PhantomData;\n \n struct Bar<'x, 'y, 'z> { bar: &'y i32, baz: i32, marker: PhantomData<(&'x(),&'y(),&'z())> }\n fn bar1<'a>(x: &Bar) -> (&'a i32, &'a i32, &'a i32) {\n-//~^ HELP: consider using an explicit lifetime parameter as shown: fn bar1<'b, 'c, 'a>(x: &'a Bar<'b, 'a, 'c>) -> (&'a i32, &'a i32, &'a i32)\n+    //~^ HELP: consider using an explicit lifetime parameter as shown: fn bar1<'a>(x: &'a Bar) -> (&'a i32, &'a i32, &'a i32)\n     (x.bar, &x.baz, &x.baz)\n-    //~^ ERROR: cannot infer\n-    //~^^ ERROR: cannot infer\n-    //~^^^ ERROR: cannot infer\n+    //~^ ERROR E0312\n+    //~| ERROR cannot infer\n+    //~| ERROR cannot infer\n }\n \n fn bar2<'a, 'b, 'c>(x: &Bar<'a, 'b, 'c>) -> (&'a i32, &'a i32, &'a i32) {\n-//~^ HELP: consider using an explicit lifetime parameter as shown: fn bar2<'a, 'c>(x: &'a Bar<'a, 'a, 'c>) -> (&'a i32, &'a i32, &'a i32)\n+    //~^ HELP: consider using an explicit lifetime parameter as shown: fn bar2<'a, 'b, 'c>(x: &'a Bar<'a, 'b, 'c>) -> (&'a i32, &'a i32, &'a i32)\n     (x.bar, &x.baz, &x.baz)\n-    //~^ ERROR: cannot infer\n-    //~^^ ERROR: cannot infer\n-    //~^^^ ERROR: cannot infer\n+    //~^ ERROR E0312\n+    //~| ERROR cannot infer\n+    //~| ERROR cannot infer\n }\n \n fn main() { }"}, {"sha": "46160fbefcf11acf35dcd27f63fba24fd67ba48a", "filename": "src/test/compile-fail/lifetime-inference-give-expl-lifetime-param.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -39,8 +39,7 @@ struct Cat<'x, T> { cat: &'x isize, t: T }\n struct Dog<'y> { dog: &'y isize }\n \n fn cat2<'x, 'y>(x: Cat<'x, Dog<'y>>) -> &'x isize {\n-//~^ HELP: consider using an explicit lifetime parameter as shown: fn cat2<'x>(x: Cat<'x, Dog<'x>>) -> &'x isize\n-    x.t.dog //~ ERROR: cannot infer\n+    x.t.dog //~ ERROR E0312\n }\n \n struct Baz<'x> {\n@@ -49,11 +48,8 @@ struct Baz<'x> {\n \n impl<'a> Baz<'a> {\n     fn baz2<'b>(&self, x: &isize) -> (&'b isize, &'b isize) {\n-         //~^ HELP: parameter as shown: fn baz2<'b>(&self, x: &'b isize) -> (&'a isize, &'a isize)\n-        // The lifetime that gets assigned to `x` seems somewhat random.\n-        // I have disabled this test for the time being. --pcwalton\n-        (self.bar, x) //~ ERROR: cannot infer\n-        //~^ ERROR: cannot infer\n+        (self.bar, x) //~ ERROR E0312\n+        //~^ ERROR E0312\n     }\n }\n "}, {"sha": "8d2a0fd07e80a3e4436cb2ff221109491e2be3e3", "filename": "src/test/compile-fail/lub-if.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Flub-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Flub-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flub-if.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -35,14 +35,14 @@ pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n         \"(none)\"\n     } else {\n         let s: &'a str = maybestr.as_ref().unwrap();\n-        s  //~ ERROR cannot infer an appropriate lifetime for automatic coercion due to conflicting\n+        s  //~ ERROR E0312\n     }\n }\n \n pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n     if maybestr.is_some() {\n         let s: &'a str = maybestr.as_ref().unwrap();\n-        s  //~ ERROR cannot infer an appropriate lifetime for automatic coercion due to conflicting\n+        s  //~ ERROR E0312\n     } else {\n         \"(none)\"\n     }"}, {"sha": "b9423feb5c1cde561d8f586ad7a132cf4073c953", "filename": "src/test/compile-fail/lub-match.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Flub-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Flub-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flub-match.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -37,8 +37,7 @@ pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n         None => \"(none)\",\n         Some(ref s) => {\n             let s: &'a str = s;\n-            s\n-            //~^ ERROR cannot infer an appropriate lifetime\n+            s //~ ERROR E0312\n         }\n     }\n }\n@@ -47,8 +46,7 @@ pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n     match *maybestr {\n         Some(ref s) => {\n             let s: &'a str = s;\n-            s\n-            //~^ ERROR cannot infer an appropriate lifetime\n+            s //~ ERROR E0312\n         }\n         None => \"(none)\",\n     }"}, {"sha": "014b0c1e80e71467da8875a63f55fac28f1bd8dd", "filename": "src/test/compile-fail/object-lifetime-default-mybox.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-mybox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-mybox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-mybox.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -34,8 +34,7 @@ fn load1<'a,'b>(a: &'a MyBox<SomeTrait>,\n                 b: &'b MyBox<SomeTrait>)\n                 -> &'b MyBox<SomeTrait>\n {\n-    a\n-      //~^ ERROR cannot infer\n+    a //~ ERROR E0312\n }\n \n fn load2<'a>(ss: &MyBox<SomeTrait+'a>) -> MyBox<SomeTrait+'a> {"}, {"sha": "6364db1f4b49c2e33bf095020ab237b3257144c9", "filename": "src/test/compile-fail/region-lifetime-bounds-on-fns-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fregion-lifetime-bounds-on-fns-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fregion-lifetime-bounds-on-fns-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-lifetime-bounds-on-fns-where-clause.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -15,7 +15,7 @@ fn a<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) where 'b: 'a {\n \n fn b<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) {\n     // Illegal now because there is no `'b:'a` declaration.\n-    *x = *y; //~ ERROR cannot infer\n+    *x = *y; //~ ERROR E0312\n }\n \n fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {"}, {"sha": "154135eba38baf7bd4cbf6b175429a7824c66c9d", "filename": "src/test/compile-fail/region-multiple-lifetime-bounds-on-fns-where-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -16,8 +16,8 @@ fn a<'a, 'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) where\n \n fn b<'a, 'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n     // Illegal now because there is no `'b:'a` declaration.\n-    *x = *y; //~ ERROR cannot infer\n-    *z = *y; //~ ERROR cannot infer\n+    *x = *y; //~ ERROR E0312\n+    *z = *y; //~ ERROR E0312\n }\n \n fn c<'a,'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {"}, {"sha": "8cc35272282c41dbf4b5744e6d7604d59b6c91f9", "filename": "src/test/compile-fail/regions-early-bound-error-method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error-method.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -28,8 +28,7 @@ impl<'a> GetRef<'a> for Box<'a> {\n impl<'a> Box<'a> {\n     fn or<'b,G:GetRef<'b>>(&self, g2: G) -> &'a isize {\n         g2.get()\n-        //~^ ERROR cannot infer an appropriate lifetime for automatic coercion due to\n-        //~| ERROR mismatched types\n+        //~^ ERROR mismatched types\n         //~| expected `&'a isize`\n         //~| found `&'b isize`\n         //~| lifetime mismatch"}, {"sha": "1fc3b4b3c6a620279653f39d68b0143be1961817", "filename": "src/test/compile-fail/regions-early-bound-error.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -27,11 +27,7 @@ impl<'a,T:Clone> GetRef<'a,T> for Box<'a,T> {\n \n fn get<'a,'b,G:GetRef<'a, isize>>(g1: G, b: &'b isize) -> &'b isize {\n     g1.get()\n-    //~^ ERROR cannot infer an appropriate lifetime for automatic coercion due to\n-    //~| ERROR mismatched types\n-    //~| expected `&'b isize`\n-    //~| found `&'a isize`\n-    //~| lifetime mismatch\n+    //~^ ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "c2e4fbac3c9416f449a2b19743333245a78ee22b", "filename": "src/test/compile-fail/regions-glb-free-free.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -22,9 +22,9 @@ mod argparse {\n \n     impl<'a> Flag<'a> {\n         pub fn set_desc(self, s: &str) -> Flag<'a> {\n-            Flag {\n+            Flag { //~ ERROR cannot infer\n                 name: self.name,\n-                desc: s, //~ ERROR cannot infer an appropriate lifetime for automatic coercion due t\n+                desc: s,\n                 max_count: self.max_count,\n                 value: self.value\n             }"}, {"sha": "89254516ac600554386c34b54394a76c3e80cbdf", "filename": "src/test/compile-fail/regions-lifetime-bounds-on-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-bounds-on-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-bounds-on-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-bounds-on-fns.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -15,13 +15,13 @@ fn a<'a, 'b:'a>(x: &mut &'a isize, y: &mut &'b isize) {\n \n fn b<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) {\n     // Illegal now because there is no `'b:'a` declaration.\n-    *x = *y; //~ ERROR cannot infer\n+    *x = *y; //~ ERROR E0312\n }\n \n fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n     // Here we try to call `foo` but do not know that `'a` and `'b` are\n     // related as required.\n-    a(x, y); //~ ERROR cannot infer\n+    a(x, y); //~ ERROR E0495\n }\n \n fn d() {"}, {"sha": "5ef2a701a6005f37c2c54cfc208ae856bef4fcec", "filename": "src/test/compile-fail/regions-nested-fns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -14,16 +14,16 @@ fn ignore<T>(t: T) {}\n \n fn nested<'x>(x: &'x isize) {\n     let y = 3;\n-    let mut ay = &y;\n+    let mut ay = &y; //~ ERROR E0495\n \n     ignore::<Box<for<'z> FnMut(&'z isize)>>(Box::new(|z| {\n-        ay = x; //~ ERROR cannot infer\n+        ay = x;\n         ay = &y;\n         ay = z;\n     }));\n \n     ignore::< Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n-        if false { return x; }  //~ ERROR cannot infer an appropriate lifetime for automatic\n+        if false { return x; } //~ ERROR E0312\n         if false { return ay; }\n         return z;\n     }));"}, {"sha": "de695e72d07e4bab6bb979e71d515313f4764bc8", "filename": "src/test/compile-fail/regions-static-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fregions-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fregions-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-static-bound.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -13,7 +13,7 @@ fn static_id<'a,'b>(t: &'a ()) -> &'static ()\n fn static_id_indirect<'a,'b>(t: &'a ()) -> &'static ()\n     where 'a: 'b, 'b: 'static { t }\n fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n-    t //~ ERROR cannot infer an appropriate lifetime\n+    t //~ ERROR E0312\n }\n \n fn error(u: &(), v: &()) {"}, {"sha": "1e2b01856e71bb923d34fb6557684479e1943042", "filename": "src/test/compile-fail/unboxed-closures-infer-argument-types-two-region-pointers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -24,6 +24,6 @@ fn doit<T,F>(val: T, f: &F)\n \n pub fn main() {\n     doit(0, &|x, y| {\n-        x.set(y); //~ ERROR cannot infer\n+        x.set(y); //~ ERROR E0312\n     });\n }"}, {"sha": "e99957c79142738ac8ab7df1990ac943ec80dba9", "filename": "src/test/compile-fail/wf-static-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fwf-static-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922041e7f69407e7fa40bf90e8ec47d49a97fd2/src%2Ftest%2Fcompile-fail%2Fwf-static-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-static-method.rs?ref=1922041e7f69407e7fa40bf90e8ec47d49a97fd2", "patch": "@@ -24,7 +24,7 @@ struct Evil<'a, 'b: 'a>(Option<&'a &'b ()>);\n impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n     fn make_me() -> Self { }\n     fn static_evil(u: &'b u32) -> &'a u32 {\n-        u //~ ERROR cannot infer an appropriate lifetime\n+        u //~ ERROR E0312\n     }\n }\n \n@@ -40,7 +40,7 @@ impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n \n impl<'a, 'b> Evil<'a, 'b> {\n     fn inherent_evil(u: &'b u32) -> &'a u32 {\n-        u //~ ERROR cannot infer an appropriate lifetime\n+        u //~ ERROR E0312\n     }\n }\n "}]}