{"sha": "41ef7678061dde625bf273ab6b036aebd7153a43", "node_id": "C_kwDOAAsO6NoAKDQxZWY3Njc4MDYxZGRlNjI1YmYyNzNhYjZiMDM2YWViZDcxNTNhNDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-22T13:56:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-22T13:56:10Z"}, "message": "Auto merge of #96226 - xldenis:thir-clone, r=oli-obk\n\nMake all thir types implement clone\n\nThis PR adds `Clone` impl to all of the `Thir<'tcx>` types.\n\nI would like to be able to clone a `Thir` body so that I can make a copy in my rustc driver without breaking further compilation. Without this my driver is forced to run in the `after_expansion` callback and thus doesn't benefit from running all the safety checks that `rustc` usually does, instead i need to do them all myself.", "tree": {"sha": "2357a5427a5431b67c9454ca8945f9e08b21fdff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2357a5427a5431b67c9454ca8945f9e08b21fdff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41ef7678061dde625bf273ab6b036aebd7153a43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41ef7678061dde625bf273ab6b036aebd7153a43", "html_url": "https://github.com/rust-lang/rust/commit/41ef7678061dde625bf273ab6b036aebd7153a43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41ef7678061dde625bf273ab6b036aebd7153a43/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8272f23cc121cc3e98f3148c8dab532decc7b90", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8272f23cc121cc3e98f3148c8dab532decc7b90", "html_url": "https://github.com/rust-lang/rust/commit/a8272f23cc121cc3e98f3148c8dab532decc7b90"}, {"sha": "eed91ee8b3624bec1bbb19b2d309a3d1dbcce81b", "url": "https://api.github.com/repos/rust-lang/rust/commits/eed91ee8b3624bec1bbb19b2d309a3d1dbcce81b", "html_url": "https://github.com/rust-lang/rust/commit/eed91ee8b3624bec1bbb19b2d309a3d1dbcce81b"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "fdf5ecfdaf7ef25f599a228886b759f19d11f918", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/41ef7678061dde625bf273ab6b036aebd7153a43/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ef7678061dde625bf273ab6b036aebd7153a43/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=41ef7678061dde625bf273ab6b036aebd7153a43", "patch": "@@ -66,7 +66,7 @@ macro_rules! thir_with_elements {\n         /// A container for a THIR body.\n         ///\n         /// This can be indexed directly by any THIR index (e.g. [`ExprId`]).\n-        #[derive(Debug, HashStable)]\n+        #[derive(Debug, HashStable, Clone)]\n         pub struct Thir<'tcx> {\n             $(\n                 pub $name: IndexVec<$id, $value>,\n@@ -106,7 +106,7 @@ pub enum LintLevel {\n     Explicit(hir::HirId),\n }\n \n-#[derive(Debug, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct Block {\n     /// Whether the block itself has a label. Used by `label: {}`\n     /// and `try` blocks.\n@@ -125,7 +125,7 @@ pub struct Block {\n     pub safety_mode: BlockSafety,\n }\n \n-#[derive(Debug, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct Adt<'tcx> {\n     /// The ADT we're constructing.\n     pub adt_def: AdtDef<'tcx>,\n@@ -151,13 +151,13 @@ pub enum BlockSafety {\n     ExplicitUnsafe(hir::HirId),\n }\n \n-#[derive(Debug, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct Stmt<'tcx> {\n     pub kind: StmtKind<'tcx>,\n     pub opt_destruction_scope: Option<region::Scope>,\n }\n \n-#[derive(Debug, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub enum StmtKind<'tcx> {\n     /// An expression with a trailing semicolon.\n     Expr {\n@@ -196,7 +196,7 @@ pub enum StmtKind<'tcx> {\n rustc_data_structures::static_assert_size!(Expr<'_>, 104);\n \n /// A THIR expression.\n-#[derive(Debug, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct Expr<'tcx> {\n     /// The type of this expression\n     pub ty: Ty<'tcx>,\n@@ -212,7 +212,7 @@ pub struct Expr<'tcx> {\n     pub kind: ExprKind<'tcx>,\n }\n \n-#[derive(Debug, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub enum ExprKind<'tcx> {\n     /// `Scope`s are used to explicitly mark destruction scopes,\n     /// and to track the `HirId` of the expressions within the scope.\n@@ -461,20 +461,20 @@ impl<'tcx> ExprKind<'tcx> {\n /// Represents the association of a field identifier and an expression.\n ///\n /// This is used in struct constructors.\n-#[derive(Debug, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct FieldExpr {\n     pub name: Field,\n     pub expr: ExprId,\n }\n \n-#[derive(Debug, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct FruInfo<'tcx> {\n     pub base: ExprId,\n     pub field_types: Box<[Ty<'tcx>]>,\n }\n \n /// A `match` arm.\n-#[derive(Debug, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct Arm<'tcx> {\n     pub pattern: Pat<'tcx>,\n     pub guard: Option<Guard<'tcx>>,\n@@ -485,7 +485,7 @@ pub struct Arm<'tcx> {\n }\n \n /// A `match` guard.\n-#[derive(Debug, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub enum Guard<'tcx> {\n     If(ExprId),\n     IfLet(Pat<'tcx>, ExprId),\n@@ -499,7 +499,7 @@ pub enum LogicalOp {\n     Or,\n }\n \n-#[derive(Debug, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub enum InlineAsmOperand<'tcx> {\n     In {\n         reg: InlineAsmRegOrRegClass,"}]}