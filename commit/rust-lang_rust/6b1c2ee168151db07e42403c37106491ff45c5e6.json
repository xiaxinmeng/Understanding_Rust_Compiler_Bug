{"sha": "6b1c2ee168151db07e42403c37106491ff45c5e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMWMyZWUxNjgxNTFkYjA3ZTQyNDAzYzM3MTA2NDkxZmY0NWM1ZTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-08T16:53:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-08T16:53:21Z"}, "message": "Merge #2500 #2505 #2506\n\n2500: Fix format_args expansion & go to definition r=matklad a=flodiebold\n\nThe expansion of format_args wasn't yet correct enough to type-check. Also make macros in statement position expand to expressions for now, since it's not handled correctly in HIR lowering yet. This finally fixes go to definition within print macros, I think :slightly_smiling_face: \n\n2505: Remove more dead code r=matklad a=matklad\n\n\n\n2506: Remove one more Ty r=matklad a=matklad\n\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e3044af50bd5b7d91a21aa4703492a576a9f4ac7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3044af50bd5b7d91a21aa4703492a576a9f4ac7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b1c2ee168151db07e42403c37106491ff45c5e6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd7SqBCRBK7hj4Ov3rIwAAdHIIADioYyd172uFHzHKXu+d7j9k\nKEHxwSkbgXHrsj/gZsk8XroYp6vpOkHI19V6fjGyh7FQhRRo1ns/DUCnh0/9laWi\nadi/qUZDvDVs0rlVeDOvf/DjGp+2oA3KRpaL5Yu41ShgSqxxZdolDAlDxk76VGRi\nVkmy08pFN8rBWJcXQRpcX9icTYAuLHsqJQU/qpveG23T29AZ1ZpUncwl/Z6WZJ4c\nZBjoSMfR4TDRFsgqf8LkCqZZaMkmNKGzXkFHqKwI7vs3D3/j7or6d9HP+22Qpjeq\n2zrJ3t0kORnBqCLClUshoD7k0t1AGRef2NTnoxwebdR6MmOYhlkBRuUGDGnvOPs=\n=pjnG\n-----END PGP SIGNATURE-----\n", "payload": "tree e3044af50bd5b7d91a21aa4703492a576a9f4ac7\nparent d0ad30ad976f09367da931de22a762019de25073\nparent 5e096def15e992938b0e2838ae6c344939aa10f2\nparent a1639d0d1ef201b2b9a425eddecfb41a25f10931\nparent 61c3887b70820283cb759127e3aecf7cbdbdc8c1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1575824001 +0000\ncommitter GitHub <noreply@github.com> 1575824001 +0000\n\nMerge #2500 #2505 #2506\n\n2500: Fix format_args expansion & go to definition r=matklad a=flodiebold\n\nThe expansion of format_args wasn't yet correct enough to type-check. Also make macros in statement position expand to expressions for now, since it's not handled correctly in HIR lowering yet. This finally fixes go to definition within print macros, I think :slightly_smiling_face: \n\n2505: Remove more dead code r=matklad a=matklad\n\n\n\n2506: Remove one more Ty r=matklad a=matklad\n\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1c2ee168151db07e42403c37106491ff45c5e6", "html_url": "https://github.com/rust-lang/rust/commit/6b1c2ee168151db07e42403c37106491ff45c5e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b1c2ee168151db07e42403c37106491ff45c5e6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0ad30ad976f09367da931de22a762019de25073", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ad30ad976f09367da931de22a762019de25073", "html_url": "https://github.com/rust-lang/rust/commit/d0ad30ad976f09367da931de22a762019de25073"}, {"sha": "5e096def15e992938b0e2838ae6c344939aa10f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e096def15e992938b0e2838ae6c344939aa10f2", "html_url": "https://github.com/rust-lang/rust/commit/5e096def15e992938b0e2838ae6c344939aa10f2"}, {"sha": "a1639d0d1ef201b2b9a425eddecfb41a25f10931", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1639d0d1ef201b2b9a425eddecfb41a25f10931", "html_url": "https://github.com/rust-lang/rust/commit/a1639d0d1ef201b2b9a425eddecfb41a25f10931"}, {"sha": "61c3887b70820283cb759127e3aecf7cbdbdc8c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/61c3887b70820283cb759127e3aecf7cbdbdc8c1", "html_url": "https://github.com/rust-lang/rust/commit/61c3887b70820283cb759127e3aecf7cbdbdc8c1"}], "stats": {"total": 171, "additions": 31, "deletions": 140}, "files": [{"sha": "d5249f3088597a484f04f491bb26f2c66f3ba8af", "filename": "crates/ra_assists/src/test_db.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_assists%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_assists%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftest_db.rs?ref=6b1c2ee168151db07e42403c37106491ff45c5e6", "patch": "@@ -43,5 +43,3 @@ impl FileLoader for TestDB {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }\n-\n-impl hir::debug::HirDebugHelper for TestDB {}"}, {"sha": "c013ff99bbad47b7b7741a54746bc2e250acd705", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=6b1c2ee168151db07e42403c37106491ff45c5e6", "patch": "@@ -1,7 +1,4 @@\n //! FIXME: write short doc here\n-\n-pub(crate) mod src;\n-\n use std::sync::Arc;\n \n use either::Either;\n@@ -989,11 +986,6 @@ impl Type {\n         None\n     }\n \n-    // FIXME: remove\n-    pub fn into_ty(self) -> Ty {\n-        self.ty.value\n-    }\n-\n     pub fn as_adt(&self) -> Option<Adt> {\n         let (adt, _subst) = self.ty.value.as_adt()?;\n         Some(adt.into())"}, {"sha": "6cd5c8cb97edad2ec17b6540536d66871e108d51", "filename": "crates/ra_hir/src/debug.rs", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/d0ad30ad976f09367da931de22a762019de25073/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ad30ad976f09367da931de22a762019de25073/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdebug.rs?ref=d0ad30ad976f09367da931de22a762019de25073", "patch": "@@ -1,94 +0,0 @@\n-//! XXX: This does not work at the moment.\n-//!\n-//! printf debugging infrastructure for rust-analyzer.\n-//!\n-//! When you print a hir type, like a module, using `eprintln!(\"{:?}\", module)`,\n-//! you usually get back a numeric ID, which doesn't tell you much:\n-//! `Module(92)`.\n-//!\n-//! This module adds convenience `debug` methods to various types, which resolve\n-//! the id to a human-readable location info:\n-//!\n-//! ```not_rust\n-//! eprintln!(\"{:?}\", module.debug(db));\n-//! =>\n-//! Module { name: collections, path: \"liballoc/collections/mod.rs\" }\n-//! ```\n-//!\n-//! Note that to get this info, we might need to execute queries! So\n-//!\n-//! * don't use the `debug` methods for logging\n-//! * when debugging, be aware that interference is possible.\n-\n-use std::fmt;\n-\n-use hir_expand::HirFileId;\n-use ra_db::{CrateId, FileId};\n-\n-use crate::{db::HirDatabase, Crate, Module, Name};\n-\n-impl Crate {\n-    pub fn debug(self, db: &impl HirDebugDatabase) -> impl fmt::Debug + '_ {\n-        debug_fn(move |fmt| db.debug_crate(self, fmt))\n-    }\n-}\n-\n-impl Module {\n-    pub fn debug(self, db: &impl HirDebugDatabase) -> impl fmt::Debug + '_ {\n-        debug_fn(move |fmt| db.debug_module(self, fmt))\n-    }\n-}\n-\n-pub trait HirDebugHelper: HirDatabase {\n-    fn crate_name(&self, _krate: CrateId) -> Option<String> {\n-        None\n-    }\n-    fn file_path(&self, _file_id: FileId) -> Option<String> {\n-        None\n-    }\n-}\n-\n-pub trait HirDebugDatabase {\n-    fn debug_crate(&self, krate: Crate, fmt: &mut fmt::Formatter<'_>) -> fmt::Result;\n-    fn debug_module(&self, module: Module, fmt: &mut fmt::Formatter<'_>) -> fmt::Result;\n-    fn debug_hir_file_id(&self, file_id: HirFileId, fmt: &mut fmt::Formatter<'_>) -> fmt::Result;\n-}\n-\n-impl<DB: HirDebugHelper> HirDebugDatabase for DB {\n-    fn debug_crate(&self, krate: Crate, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let mut builder = fmt.debug_tuple(\"Crate\");\n-        match self.crate_name(krate.id) {\n-            Some(name) => builder.field(&name),\n-            None => builder.field(&krate.id),\n-        }\n-        .finish()\n-    }\n-\n-    fn debug_module(&self, module: Module, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let file_id = module.definition_source(self).file_id.original_file(self);\n-        let path = self.file_path(file_id).unwrap_or_else(|| \"N/A\".to_string());\n-        fmt.debug_struct(\"Module\")\n-            .field(\"name\", &module.name(self).unwrap_or_else(Name::missing))\n-            .field(\"path\", &path)\n-            .finish()\n-    }\n-\n-    fn debug_hir_file_id(&self, file_id: HirFileId, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let original = file_id.original_file(self);\n-        let path = self.file_path(original).unwrap_or_else(|| \"N/A\".to_string());\n-        let is_macro = file_id != original.into();\n-        fmt.debug_struct(\"HirFileId\").field(\"path\", &path).field(\"macro\", &is_macro).finish()\n-    }\n-}\n-\n-fn debug_fn(f: impl Fn(&mut fmt::Formatter<'_>) -> fmt::Result) -> impl fmt::Debug {\n-    struct DebugFn<F>(F);\n-\n-    impl<F: Fn(&mut fmt::Formatter<'_>) -> fmt::Result> fmt::Debug for DebugFn<F> {\n-        fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            (&self.0)(fmt)\n-        }\n-    }\n-\n-    DebugFn(f)\n-}"}, {"sha": "b09582f93c8b5ef212071f66b589e0bc65bf939f", "filename": "crates/ra_hir/src/has_source.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=6b1c2ee168151db07e42403c37106491ff45c5e6", "previous_filename": "crates/ra_hir/src/code_model/src.rs"}, {"sha": "e7602ee305e0660d3384e4a2c4d1549b2c1260a6", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=6b1c2ee168151db07e42403c37106491ff45c5e6", "patch": "@@ -26,8 +26,6 @@ macro_rules! impl_froms {\n     }\n }\n \n-pub mod debug;\n-\n pub mod db;\n pub mod source_binder;\n \n@@ -36,16 +34,18 @@ pub mod diagnostics;\n mod from_id;\n mod code_model;\n \n-pub mod from_source;\n+mod has_source;\n+mod from_source;\n \n pub use crate::{\n     code_model::{\n-        src::HasSource, Adt, AssocItem, AttrDef, Const, Container, Crate, CrateDependency,\n-        DefWithBody, Docs, Enum, EnumVariant, FieldSource, Function, GenericDef, HasAttrs,\n-        ImplBlock, Import, Local, MacroDef, Module, ModuleDef, ScopeDef, Static, Struct,\n-        StructField, Trait, Type, TypeAlias, TypeParam, Union, VariantDef,\n+        Adt, AssocItem, AttrDef, Const, Container, Crate, CrateDependency, DefWithBody, Docs, Enum,\n+        EnumVariant, FieldSource, Function, GenericDef, HasAttrs, ImplBlock, Import, Local,\n+        MacroDef, Module, ModuleDef, ScopeDef, Static, Struct, StructField, Trait, Type, TypeAlias,\n+        TypeParam, Union, VariantDef,\n     },\n     from_source::FromSource,\n+    has_source::HasSource,\n     source_binder::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},\n };\n "}, {"sha": "44d18500380789a9352d9ec8f63bf395913d0368", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=6b1c2ee168151db07e42403c37106491ff45c5e6", "patch": "@@ -427,7 +427,7 @@ impl SourceAnalyzer {\n \n     /// Checks that particular type `ty` implements `std::future::Future`.\n     /// This function is used in `.await` syntax completion.\n-    pub fn impls_future(&self, db: &impl HirDatabase, ty: Ty) -> bool {\n+    pub fn impls_future(&self, db: &impl HirDatabase, ty: Type) -> bool {\n         let std_future_path = known::std_future_future();\n \n         let std_future_trait = match self.resolver.resolve_known_trait(db, &std_future_path) {\n@@ -440,7 +440,7 @@ impl SourceAnalyzer {\n             _ => return false,\n         };\n \n-        let canonical_ty = Canonical { value: ty, num_vars: 0 };\n+        let canonical_ty = Canonical { value: ty.ty.value, num_vars: 0 };\n         implements_trait(&canonical_ty, db, &self.resolver, krate.into(), std_future_trait)\n     }\n "}, {"sha": "cc068ff94fcb0fe242e4e8e4c956abacb1765ddd", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=6b1c2ee168151db07e42403c37106491ff45c5e6", "patch": "@@ -437,9 +437,7 @@ where\n                     None => self.alloc_expr(Expr::Missing, syntax_ptr),\n                 }\n             }\n-\n-            // FIXME implement HIR for these:\n-            ast::Expr::Label(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n+            // FIXME expand to statements in statement position\n             ast::Expr::MacroCall(e) => match self.expander.enter_expand(self.db, e) {\n                 Some((mark, expansion)) => {\n                     let id = self.collect_expr(expansion);\n@@ -448,6 +446,9 @@ where\n                 }\n                 None => self.alloc_expr(Expr::Missing, syntax_ptr),\n             },\n+\n+            // FIXME implement HIR for these:\n+            ast::Expr::Label(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n         }\n     }\n "}, {"sha": "ec5ace757c663767fe1f04eb5c251a6ef60037bc", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=6b1c2ee168151db07e42403c37106491ff45c5e6", "patch": "@@ -208,15 +208,20 @@ fn format_args_expand(\n     _id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    // We expand `format_args!(\"\", arg1, arg2)` to\n-    // `std::fmt::Arguments::new_v1(&[], &[&arg1, &arg2])`,\n+    // We expand `format_args!(\"\", a1, a2)` to\n+    // ```\n+    // std::fmt::Arguments::new_v1(&[], &[\n+    //   std::fmt::ArgumentV1::new(&arg1,std::fmt::Display::fmt),\n+    //   std::fmt::ArgumentV1::new(&arg2,std::fmt::Display::fmt),\n+    // ])\n+    // ```,\n     // which is still not really correct, but close enough for now\n     let mut args = Vec::new();\n     let mut current = Vec::new();\n     for tt in tt.token_trees.iter().cloned() {\n         match tt {\n             tt::TokenTree::Leaf(tt::Leaf::Punct(p)) if p.char == ',' => {\n-                args.push(tt::Subtree { delimiter: tt::Delimiter::None, token_trees: current });\n+                args.push(current);\n                 current = Vec::new();\n             }\n             _ => {\n@@ -225,13 +230,15 @@ fn format_args_expand(\n         }\n     }\n     if !current.is_empty() {\n-        args.push(tt::Subtree { delimiter: tt::Delimiter::None, token_trees: current });\n+        args.push(current);\n     }\n     if args.is_empty() {\n         return Err(mbe::ExpandError::NoMatchingRule);\n     }\n     let _format_string = args.remove(0);\n-    let arg_tts = args.into_iter().flat_map(|arg| (quote! { & #arg , }).token_trees);\n+    let arg_tts = args.into_iter().flat_map(|arg| {\n+        quote! { std::fmt::ArgumentV1::new(&(##arg), std::fmt::Display::fmt), }\n+    }.token_trees).collect::<Vec<_>>();\n     let expanded = quote! {\n         std::fmt::Arguments::new_v1(&[], &[##arg_tts])\n     };\n@@ -360,6 +367,6 @@ mod tests {\n             BuiltinFnLikeExpander::FormatArgs,\n         );\n \n-        assert_eq!(expanded, r#\"std::fmt::Arguments::new_v1(&[] ,&[&arg1(a,b,c),&arg2,])\"#);\n+        assert_eq!(expanded, r#\"std::fmt::Arguments::new_v1(&[] ,&[std::fmt::ArgumentV1::new(&(arg1(a,b,c)),std::fmt::Display::fmt),std::fmt::ArgumentV1::new(&(arg2),std::fmt::Display::fmt),])\"#);\n     }\n }"}, {"sha": "f68aca789834f236e252797e0e6bc2e8f668cd98", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=6b1c2ee168151db07e42403c37106491ff45c5e6", "patch": "@@ -183,8 +183,8 @@ fn to_fragment_kind(db: &dyn AstDatabase, macro_call_id: MacroCallId) -> Fragmen\n             // FIXME: Handle Pattern\n             FragmentKind::Expr\n         }\n-        EXPR_STMT => FragmentKind::Statements,\n-        BLOCK => FragmentKind::Statements,\n+        // FIXME: Expand to statements in appropriate positions; HIR lowering needs to handle that\n+        EXPR_STMT | BLOCK => FragmentKind::Expr,\n         ARG_LIST => FragmentKind::Expr,\n         TRY_EXPR => FragmentKind::Expr,\n         TUPLE_EXPR => FragmentKind::Expr,"}, {"sha": "294964887a81a39dcfc5ac57ccfd70735573eccd", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=6b1c2ee168151db07e42403c37106491ff45c5e6", "patch": "@@ -27,7 +27,7 @@ pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n     complete_methods(acc, ctx, &receiver_ty);\n \n     // Suggest .await syntax for types that implement Future trait\n-    if ctx.analyzer.impls_future(ctx.db, receiver_ty.into_ty()) {\n+    if ctx.analyzer.impls_future(ctx.db, receiver_ty) {\n         CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), \"await\")\n             .detail(\"expr.await\")\n             .insert_text(\"await\")"}, {"sha": "47d0aed6fb59426733e58241b698769efaa0c518", "filename": "crates/ra_ide/src/db.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_ide%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_ide%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdb.rs?ref=6b1c2ee168151db07e42403c37106491ff45c5e6", "patch": "@@ -5,7 +5,7 @@ use std::sync::Arc;\n use ra_db::{\n     salsa::{self, Database, Durability},\n     Canceled, CheckCanceled, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath,\n-    SourceDatabase, SourceDatabaseExt, SourceRootId,\n+    SourceDatabase, SourceRootId,\n };\n use rustc_hash::FxHashMap;\n \n@@ -49,18 +49,6 @@ impl FileLoader for RootDatabase {\n     }\n }\n \n-impl hir::debug::HirDebugHelper for RootDatabase {\n-    fn crate_name(&self, krate: CrateId) -> Option<String> {\n-        self.debug_data.crate_names.get(&krate).cloned()\n-    }\n-    fn file_path(&self, file_id: FileId) -> Option<String> {\n-        let source_root_id = self.file_source_root(file_id);\n-        let source_root_path = self.debug_data.root_paths.get(&source_root_id)?;\n-        let file_path = self.file_relative_path(file_id);\n-        Some(format!(\"{}/{}\", source_root_path, file_path))\n-    }\n-}\n-\n impl salsa::Database for RootDatabase {\n     fn salsa_runtime(&self) -> &salsa::Runtime<RootDatabase> {\n         &self.runtime"}, {"sha": "b93d6a931a094cae0e4fec8de867c62a1fc07b13", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c2ee168151db07e42403c37106491ff45c5e6/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=6b1c2ee168151db07e42403c37106491ff45c5e6", "patch": "@@ -693,7 +693,6 @@ mod tests {\n         );\n     }\n \n-    #[should_panic] // currently failing because of expr mapping problems\n     #[test]\n     fn goto_through_format() {\n         check_goto(\n@@ -718,7 +717,7 @@ mod tests {\n                 format!(\\\"{}\\\", fo<|>o())\n             }\n             \",\n-            \"foo FN_DEF FileId(1) [359; 376) [362; 365)\",\n+            \"foo FN_DEF FileId(1) [398; 415) [401; 404)\",\n         );\n     }\n "}]}