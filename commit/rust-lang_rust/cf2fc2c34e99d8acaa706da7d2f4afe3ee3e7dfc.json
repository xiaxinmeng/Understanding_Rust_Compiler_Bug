{"sha": "cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMmZjMmMzNGU5OWQ4YWNhYTcwNmRhN2QyZjRhZmUzZWUzZTdkZmM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-17T23:17:11Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-18T03:39:17Z"}, "message": "Annotate or fix FIXMEs in LLVM bindings and metadata code\n\nFixed up a few FIXMEs in lib/llvm to use more descriptive data\ntypes. Covered FIXMEs in metadata::{creader, csearch, decoder} and\none in encoder.", "tree": {"sha": "b80dacbd9c1d1be724b3cb3ffe92dfa5517b4be1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b80dacbd9c1d1be724b3cb3ffe92dfa5517b4be1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc", "html_url": "https://github.com/rust-lang/rust/commit/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37abcda42b5060eafd65bf9fe6a6861efa5f0c15", "url": "https://api.github.com/repos/rust-lang/rust/commits/37abcda42b5060eafd65bf9fe6a6861efa5f0c15", "html_url": "https://github.com/rust-lang/rust/commit/37abcda42b5060eafd65bf9fe6a6861efa5f0c15"}], "stats": {"total": 158, "additions": 84, "deletions": 74}, "files": [{"sha": "2f31fdfaebcfebc02ba52f1c39462aea4aa7d8f9", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc", "patch": "@@ -6,11 +6,13 @@ import syntax::attr;\n import middle::ty;\n import metadata::{encoder, cstore};\n import middle::trans::common::crate_ctxt;\n+import metadata::common::link_meta;\n import std::map::hashmap;\n import std::sha1::sha1;\n import syntax::ast;\n import syntax::print::pprust;\n-import lib::llvm::{ModuleRef, mk_pass_manager, mk_target_data, True, False};\n+import lib::llvm::{ModuleRef, mk_pass_manager, mk_target_data, True, False,\n+        FileType};\n import util::filesearch;\n import middle::ast_map::{path, path_mod, path_name};\n \n@@ -125,8 +127,6 @@ mod write {\n         }\n         if opts.verify { llvm::LLVMAddVerifierPass(pm.llpm); }\n         if is_object_or_assembly_or_exe(opts.output_type) {\n-            let LLVMAssemblyFile  = 0 as c_int;\n-            let LLVMObjectFile    = 1 as c_int;\n             let LLVMOptNone       = 0 as c_int; // -O0\n             let LLVMOptLess       = 1 as c_int; // -O1\n             let LLVMOptDefault    = 2 as c_int; // -O2, -Os\n@@ -143,8 +143,8 @@ mod write {\n             let mut FileType;\n             if opts.output_type == output_type_object ||\n                    opts.output_type == output_type_exe {\n-                FileType = LLVMObjectFile;\n-            } else { FileType = LLVMAssemblyFile; }\n+               FileType = lib::llvm::ObjectFile;\n+            } else { FileType = lib::llvm::AssemblyFile; }\n             // Write optimized bitcode if --save-temps was on.\n \n             if opts.save_temps {\n@@ -169,7 +169,7 @@ mod write {\n                                     llmod,\n                                     buf_t,\n                                     buf_o,\n-                                    LLVMAssemblyFile,\n+                                    lib::llvm::AssemblyFile as c_uint,\n                                     CodeGenOptLevel,\n                                     true)})});\n                 }\n@@ -189,7 +189,7 @@ mod write {\n                                         llmod,\n                                         buf_t,\n                                         buf_o,\n-                                        LLVMObjectFile,\n+                                        lib::llvm::ObjectFile as c_uint,\n                                         CodeGenOptLevel,\n                                         true)})});\n                 }\n@@ -207,7 +207,7 @@ mod write {\n                                     llmod,\n                                     buf_t,\n                                     buf_o,\n-                                    FileType,\n+                                    FileType as c_uint,\n                                     CodeGenOptLevel,\n                                     true)})});\n             }\n@@ -288,7 +288,7 @@ mod write {\n  */\n \n fn build_link_meta(sess: session, c: ast::crate, output: str,\n-                   sha: sha1) -> encoder::link_meta {\n+                   sha: sha1) -> link_meta {\n \n     type provided_metas =\n         {name: option<str>,\n@@ -412,7 +412,7 @@ fn truncated_sha1_result(sha: sha1) -> str unsafe {\n \n // This calculates STH for a symbol, as defined above\n fn symbol_hash(tcx: ty::ctxt, sha: sha1, t: ty::t,\n-               link_meta: encoder::link_meta) -> str {\n+               link_meta: link_meta) -> str {\n     // NB: do *not* use abbrevs here as we want the symbol names\n     // to be independent of one another in the crate.\n \n@@ -525,7 +525,7 @@ fn mangle_internal_name_by_seq(ccx: @crate_ctxt, flav: str) -> str {\n fn link_binary(sess: session,\n                obj_filename: str,\n                out_filename: str,\n-               lm: encoder::link_meta) {\n+               lm: link_meta) {\n     // Converts a library file name into a cc -l argument\n     fn unlib(config: @session::config, filename: str) -> str unsafe {\n         let rmlib = fn@(filename: str) -> str {"}, {"sha": "d06c65dcb19153ad06d4cbe28960fe24892b5562", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 56, "deletions": 45, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc", "patch": "@@ -4,8 +4,8 @@ import libc::{c_char, c_int, c_uint, c_longlong, c_ulonglong};\n \n type Opcode = u32;\n type Bool = c_uint;\n-const True: Bool = 1u32; // FIXME: should be '1 as Bool'\n-const False: Bool = 0u32;\n+const True: Bool = 1 as Bool;\n+const False: Bool = 0 as Bool;\n \n // Consts for the LLVM CallConv type, pre-cast to uint.\n \n@@ -75,9 +75,7 @@ enum Attribute {\n     NonLazyBindAttribute = 2147483648,\n }\n \n-// Consts for the LLVM IntPredicate type, pre-cast to uint.\n-// FIXME: as above.\n-\n+// enum for the LLVM IntPredicate type\n enum IntPredicate {\n     IntEQ = 32,\n     IntNE = 33,\n@@ -91,9 +89,7 @@ enum IntPredicate {\n     IntSLE = 41,\n }\n \n-// Consts for the LLVM RealPredicate type, pre-case to uint.\n-// FIXME: as above.\n-\n+// enum for the LLVM RealPredicate type\n enum RealPredicate {\n     RealOEQ = 1,\n     RealOGT = 2,\n@@ -111,6 +107,34 @@ enum RealPredicate {\n     RealUNE = 14,\n }\n \n+// enum for the LLVM TypeKind type - must stay in sync with the def of\n+// LLVMTypeKind in llvm/include/llvm-c/Core.h\n+enum TypeKind {\n+    Void      = 0,\n+    Half      = 1,\n+    Float     = 2,\n+    Double    = 3,\n+    X86_FP80  = 4,\n+    FP128     = 5,\n+    PPC_FP128 = 6,\n+    Label     = 7,\n+    Integer   = 8,\n+    Function  = 9,\n+    Struct    = 10,\n+    Array     = 11,\n+    Pointer   = 12,\n+    Vector    = 13,\n+    Metadata  = 14,\n+    X86_MMX   = 15\n+}\n+\n+// FIXME: Not used right now, but will be once #2334 is fixed\n+// Consts for the LLVMCodeGenFileType type (in include/llvm/c/TargetMachine.h)\n+enum FileType {\n+    AssemblyFile = 0,\n+    ObjectFile = 1\n+}\n+\n // Opaque pointer types\n enum Module_opaque {}\n type ModuleRef = *Module_opaque;\n@@ -171,12 +195,7 @@ native mod llvm {\n     fn LLVMSetModuleInlineAsm(M: ModuleRef, Asm: *c_char);\n \n     /** See llvm::LLVMTypeKind::getTypeID. */\n-\n-    // FIXME: returning int rather than TypeKind because\n-    // we directly inspect the values, and casting from\n-    // a native doesn't work yet (only *to* a native).\n-\n-    fn LLVMGetTypeKind(Ty: TypeRef) -> c_int;\n+    fn LLVMGetTypeKind(Ty: TypeRef) -> TypeKind;\n \n     /** See llvm::LLVMType::getContext. */\n     fn LLVMGetTypeContext(Ty: TypeRef) -> ContextRef;\n@@ -294,9 +313,7 @@ native mod llvm {\n     /* Operations on scalar constants */\n     fn LLVMConstInt(IntTy: TypeRef, N: c_ulonglong, SignExtend: Bool) ->\n        ValueRef;\n-    // FIXME: radix is actually u8, but our native layer can't handle this\n-    // yet.  lucky for us we're little-endian. Small miracles.\n-    fn LLVMConstIntOfString(IntTy: TypeRef, Text: *c_char, Radix: c_int) ->\n+    fn LLVMConstIntOfString(IntTy: TypeRef, Text: *c_char, Radix: u8) ->\n        ValueRef;\n     fn LLVMConstIntOfStringAndSize(IntTy: TypeRef, Text: *c_char,\n                                    SLen: c_uint,\n@@ -764,8 +781,8 @@ native mod llvm {\n     /** Adds the target data to the given pass manager. The pass manager\n         references the target data only weakly. */\n     fn LLVMAddTargetData(TD: TargetDataRef, PM: PassManagerRef);\n-    /** Returns the size of a type. FIXME: rv is actually a C_Ulonglong! */\n-    fn LLVMStoreSizeOfType(TD: TargetDataRef, Ty: TypeRef) -> c_uint;\n+    /** Returns the size of a type. */\n+    fn LLVMStoreSizeOfType(TD: TargetDataRef, Ty: TypeRef) -> c_ulonglong;\n     fn LLVMABISizeOfType(TD: TargetDataRef, Ty: TypeRef) -> c_uint;\n     /** Returns the preferred alignment of a type. */\n     fn LLVMPreferredAlignmentOfType(TD: TargetDataRef,\n@@ -879,10 +896,11 @@ native mod llvm {\n     fn LLVMRustCreateMemoryBufferWithContentsOfFile(Path: *c_char) ->\n        MemoryBufferRef;\n \n-    /* FIXME: The FileType is an enum.*/\n     fn LLVMRustWriteOutputFile(PM: PassManagerRef, M: ModuleRef,\n                                Triple: *c_char,\n-                               Output: *c_char, FileType: c_int,\n+                               // FIXME: When #2334 is fixed, change\n+                               // c_uint to FileType\n+                               Output: *c_char, FileType: c_uint,\n                                OptLevel: c_int,\n                                EnableSegmentedStacks: bool);\n \n@@ -896,10 +914,6 @@ native mod llvm {\n     /** Parses LLVM asm in the given file */\n     fn LLVMRustParseAssemblyFile(Filename: *c_char) -> ModuleRef;\n \n-    /** FiXME: Hacky adaptor for lack of c_ulonglong in FFI: */\n-    fn LLVMRustConstInt(IntTy: TypeRef, N_hi: c_uint, N_lo: c_uint,\n-                        SignExtend: Bool) -> ValueRef;\n-\n     fn LLVMRustAddPrintModulePass(PM: PassManagerRef, M: ModuleRef,\n                                   Output: *c_char);\n \n@@ -970,7 +984,7 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n \n     let outer = outer0 + [ty];\n \n-    let kind: int = llvm::LLVMGetTypeKind(ty) as int;\n+    let kind = llvm::LLVMGetTypeKind(ty);\n \n     fn tys_str(names: type_names, outer: [TypeRef], tys: [TypeRef]) -> str {\n         let mut s: str = \"\";\n@@ -983,20 +997,18 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n     }\n \n     alt kind {\n-      // FIXME: more enum-as-int constants determined from Core::h;\n-      // horrible, horrible. Complete as needed.\n-      0 { ret \"Void\"; }\n-      1 { ret \"Half\"; }\n-      2 { ret \"Float\"; }\n-      3 { ret \"Double\"; }\n-      4 { ret \"X86_FP80\"; }\n-      5 { ret \"FP128\"; }\n-      6 { ret \"PPC_FP128\"; }\n-      7 { ret \"Label\"; }\n-      8 {\n+      Void { ret \"Void\"; }\n+      Half { ret \"Half\"; }\n+      Float { ret \"Float\"; }\n+      Double { ret \"Double\"; }\n+      X86_FP80 { ret \"X86_FP80\"; }\n+      FP128 { ret \"FP128\"; }\n+      PPC_FP128 { ret \"PPC_FP128\"; }\n+      Label { ret \"Label\"; }\n+      Integer {\n         ret \"i\" + int::str(llvm::LLVMGetIntTypeWidth(ty) as int);\n       }\n-      9 {\n+      Function {\n         let mut s = \"fn(\";\n         let out_ty: TypeRef = llvm::LLVMGetReturnType(ty);\n         let n_args = llvm::LLVMCountParamTypes(ty) as uint;\n@@ -1009,7 +1021,7 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n         s += type_to_str_inner(names, outer, out_ty);\n         ret s;\n       }\n-      10 {\n+      Struct {\n         let mut s: str = \"{\";\n         let n_elts = llvm::LLVMCountStructElementTypes(ty) as uint;\n         let elts: [TypeRef] = vec::from_elem::<TypeRef>(n_elts, 0 as TypeRef);\n@@ -1020,12 +1032,12 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n         s += \"}\";\n         ret s;\n       }\n-      11 {\n+      Array {\n         let el_ty = llvm::LLVMGetElementType(ty);\n         ret \"[\" + type_to_str_inner(names, outer, el_ty) + \" x \" +\n             uint::str(llvm::LLVMGetArrayLength(ty) as uint) + \"]\";\n       }\n-      12 {\n+      Pointer {\n         let mut i: uint = 0u;\n         for outer0.each {|tout|\n             i += 1u;\n@@ -1045,10 +1057,9 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n         ret addrstr + \"*\" +\n                 type_to_str_inner(names, outer, llvm::LLVMGetElementType(ty));\n       }\n-      13 { ret \"Vector\"; }\n-      14 { ret \"Metadata\"; }\n-      15 { ret \"X86_MMAX\"; }\n-      _ { #error(\"unknown TypeKind %d\", kind as int); fail; }\n+      Vector { ret \"Vector\"; }\n+      Metadata { ret \"Metadata\"; }\n+      X86_MMX { ret \"X86_MMAX\"; }\n     }\n }\n "}, {"sha": "a754d4c11a2685feb79a32337fc5b854d96e8351", "filename": "src/rustc/metadata/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcommon.rs?ref=cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc", "patch": "@@ -132,3 +132,6 @@ fn hash_path(&&s: str) -> uint {\n     for str::each(s) {|ch| h = (h << 5u) + h ^ (ch as uint); }\n     ret h;\n }\n+\n+type link_meta = {name: str, vers: str, extras_hash: str};\n+"}, {"sha": "d7bf5819392c253d229ec5b28ac8f3b03a50433d", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc", "patch": "@@ -239,6 +239,7 @@ fn resolve_crate_deps(e: env, cdata: @[u8]) -> cstore::cnum_map {\n             #debug(\"need to load it\");\n             // This is a new one so we've got to load it\n             // FIXME: Need better error reporting than just a bogus span\n+            // #2404\n             let fake_span = ast_util::dummy_sp();\n             let local_cnum =\n                 resolve_crate(e, cname, cmetas, dep.hash, fake_span);"}, {"sha": "300b6681b2fd770d360ebfbebef59ae619e9bc40", "filename": "src/rustc/metadata/csearch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcsearch.rs?ref=cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc", "patch": "@@ -141,7 +141,6 @@ fn get_type(tcx: ty::ctxt, def: ast::def_id) -> ty::ty_param_bounds_and_ty {\n     decoder::get_type(cdata, def.node, tcx)\n }\n \n-/* FIXME: Refactor */\n fn get_field_type(tcx: ty::ctxt, class_id: ast::def_id,\n                   def: ast::def_id) -> ty::ty_param_bounds_and_ty {\n     let cstore = tcx.sess.cstore;"}, {"sha": "edcf9e18a427099b19cc2592f4d015bb7169c59d", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc", "patch": "@@ -578,8 +578,8 @@ fn get_meta_items(md: ebml::doc) -> [@ast::meta_item] {\n         let vd = ebml::get_doc(meta_item_doc, tag_meta_item_value);\n         let n = str::from_bytes(ebml::doc_data(nd));\n         let v = str::from_bytes(ebml::doc_data(vd));\n-        // FIXME (#611): Should be able to decode meta_name_value variants,\n-        // but currently they can't be encoded\n+        // FIXME (#623): Should be able to decode meta_name_value variants,\n+        // but currently the encoder just drops them\n         items += [attr::mk_name_value_item_str(n, v)];\n     };\n     ebml::tagged_docs(md, tag_meta_item_list) {|meta_item_doc|"}, {"sha": "17ce46094a5361023752761f055e7c95ad37b409", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc", "patch": "@@ -20,7 +20,6 @@ import std::ebml::serializer;\n import syntax::ast;\n import syntax::diagnostic::span_handler;\n \n-export link_meta;\n export encode_parms;\n export encode_metadata;\n export encoded_ty;\n@@ -33,9 +32,6 @@ export encode_ctxt;\n export write_type;\n export encode_def_id;\n \n-// FIXME: This probably belongs somewhere else\n-type link_meta = {name: str, vers: str, extras_hash: str};\n-\n type abbrev_map = map::hashmap<ty::t, tyencode::ty_abbrev>;\n \n type encode_inlined_item = fn@(ecx: @encode_ctxt,\n@@ -916,7 +912,7 @@ fn encode_meta_item(ebml_w: ebml::writer, mi: meta_item) {\n             ebml_w.end_tag();\n             ebml_w.end_tag();\n           }\n-          _ {/* FIXME (#611) */ }\n+          _ {/* FIXME (#623): encode other variants */ }\n         }\n       }\n       meta_list(name, items) {"}, {"sha": "c892c92be97c997e9fef8481054d1688b806dfc7", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc", "patch": "@@ -39,6 +39,7 @@ import link::{mangle_internal_name_by_type_only,\n               mangle_internal_name_by_path_and_seq,\n               mangle_exported_name};\n import metadata::{csearch, cstore, encoder};\n+import metadata::common::link_meta;\n import util::ppaux::{ty_to_str, ty_to_short_str};\n \n import common::*;\n@@ -5150,7 +5151,7 @@ fn create_module_map(ccx: @crate_ctxt) -> ValueRef {\n }\n \n \n-fn decl_crate_map(sess: session::session, mapmeta: encoder::link_meta,\n+fn decl_crate_map(sess: session::session, mapmeta: link_meta,\n                   llmod: ModuleRef) -> ValueRef {\n     let targ_cfg = sess.targ_cfg;\n     let int_type = T_int(targ_cfg);\n@@ -5274,7 +5275,7 @@ fn write_abi_version(ccx: @crate_ctxt) {\n fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n                output: str, emap: resolve::exp_map,\n                maps: astencode::maps)\n-    -> (ModuleRef, encoder::link_meta) {\n+    -> (ModuleRef, link_meta) {\n     let sha = std::sha1::sha1();\n     let link_meta = link::build_link_meta(sess, *crate, output, sha);\n     let reachable = reachable::find_reachable(crate.node.module, emap, tcx,"}, {"sha": "4869450faed37f45e8799e63a637da6df52ff143", "filename": "src/rustc/middle/trans/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc", "patch": "@@ -5,7 +5,7 @@ import syntax::codemap;\n import codemap::span;\n import lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, ModuleRef};\n import lib::llvm::{Opcode, IntPredicate, RealPredicate, True, False,\n-                   CallConv};\n+        CallConv, TypeKind};\n import common::*;\n \n fn B(cx: block) -> BuilderRef {\n@@ -399,7 +399,7 @@ fn Load(cx: block, PointerVal: ValueRef) -> ValueRef {\n     let ccx = cx.fcx.ccx;\n     if cx.unreachable {\n         let ty = val_ty(PointerVal);\n-        let eltty = if llvm::LLVMGetTypeKind(ty) == 11 as c_int {\n+        let eltty = if llvm::LLVMGetTypeKind(ty) == lib::llvm::Array {\n             llvm::LLVMGetElementType(ty) } else { ccx.int_type };\n         ret llvm::LLVMGetUndef(eltty);\n     }\n@@ -632,7 +632,7 @@ fn AddIncomingToPhi(phi: ValueRef, val: ValueRef, bb: BasicBlockRef) {\n fn _UndefReturn(cx: block, Fn: ValueRef) -> ValueRef {\n     let ccx = cx.fcx.ccx;\n     let ty = val_ty(Fn);\n-    let retty = if llvm::LLVMGetTypeKind(ty) == 8 as c_int {\n+    let retty = if llvm::LLVMGetTypeKind(ty) == lib::llvm::Integer {\n         llvm::LLVMGetReturnType(ty) } else { ccx.int_type };\n         count_insn(cx, \"\");\n     ret llvm::LLVMGetUndef(retty);"}, {"sha": "2e440ce860b783356c74ad2df1bcbc3d7cccbd08", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=cf2fc2c34e99d8acaa706da7d2f4afe3ee3e7dfc", "patch": "@@ -17,7 +17,8 @@ import lib::llvm::{llvm, target_data, type_names, associate_type,\n                    name_has_type};\n import lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef, BuilderRef};\n import lib::llvm::{True, False, Bool};\n-import metadata::{csearch, encoder};\n+import metadata::{csearch};\n+import metadata::common::link_meta;\n import ast_map::path;\n import util::ppaux::ty_to_str;\n \n@@ -77,7 +78,7 @@ type crate_ctxt = {\n      reachable: reachable::map,\n      item_symbols: hashmap<ast::node_id, str>,\n      mut main_fn: option<ValueRef>,\n-     link_meta: encoder::link_meta,\n+     link_meta: link_meta,\n      enum_sizes: hashmap<ty::t, uint>,\n      discrims: hashmap<ast::def_id, ValueRef>,\n      discrim_symbols: hashmap<ast::node_id, str>,\n@@ -749,9 +750,7 @@ fn T_opaque_chan_ptr() -> TypeRef { ret T_ptr(T_i8()); }\n fn C_null(t: TypeRef) -> ValueRef { ret llvm::LLVMConstNull(t); }\n \n fn C_integral(t: TypeRef, u: u64, sign_extend: Bool) -> ValueRef {\n-    let u_hi = (u >> 32u64) as c_uint;\n-    let u_lo = u as c_uint;\n-    ret llvm::LLVMRustConstInt(t, u_hi, u_lo, sign_extend);\n+    ret llvm::LLVMConstInt(t, u, sign_extend);\n }\n \n fn C_floating(s: str, t: TypeRef) -> ValueRef {"}]}