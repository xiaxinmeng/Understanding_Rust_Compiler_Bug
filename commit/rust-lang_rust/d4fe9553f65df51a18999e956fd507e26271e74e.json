{"sha": "d4fe9553f65df51a18999e956fd507e26271e74e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZmU5NTUzZjY1ZGY1MWExODk5OWU5NTZmZDUwN2UyNjI3MWU3NGU=", "commit": {"author": {"name": "mibac138", "email": "5672750+mibac138@users.noreply.github.com", "date": "2020-05-07T01:57:31Z"}, "committer": {"name": "mibac138", "email": "5672750+mibac138@users.noreply.github.com", "date": "2020-05-20T18:42:07Z"}, "message": "Implement partial error recovery for `let` with `BinOpEq`\n\nWhen parsing `let x: i8 += 1` the compiler interprets `i8` as a trait\nwhich makes it more complicated to do error recovery. More advanced\nerror recovery is not implemented in this commit.", "tree": {"sha": "23200a5dafd0585d092fc91fc2e51ee76e510ec4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23200a5dafd0585d092fc91fc2e51ee76e510ec4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4fe9553f65df51a18999e956fd507e26271e74e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fe9553f65df51a18999e956fd507e26271e74e", "html_url": "https://github.com/rust-lang/rust/commit/d4fe9553f65df51a18999e956fd507e26271e74e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4fe9553f65df51a18999e956fd507e26271e74e/comments", "author": {"login": "mibac138", "id": 5672750, "node_id": "MDQ6VXNlcjU2NzI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5672750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mibac138", "html_url": "https://github.com/mibac138", "followers_url": "https://api.github.com/users/mibac138/followers", "following_url": "https://api.github.com/users/mibac138/following{/other_user}", "gists_url": "https://api.github.com/users/mibac138/gists{/gist_id}", "starred_url": "https://api.github.com/users/mibac138/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mibac138/subscriptions", "organizations_url": "https://api.github.com/users/mibac138/orgs", "repos_url": "https://api.github.com/users/mibac138/repos", "events_url": "https://api.github.com/users/mibac138/events{/privacy}", "received_events_url": "https://api.github.com/users/mibac138/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mibac138", "id": 5672750, "node_id": "MDQ6VXNlcjU2NzI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5672750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mibac138", "html_url": "https://github.com/mibac138", "followers_url": "https://api.github.com/users/mibac138/followers", "following_url": "https://api.github.com/users/mibac138/following{/other_user}", "gists_url": "https://api.github.com/users/mibac138/gists{/gist_id}", "starred_url": "https://api.github.com/users/mibac138/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mibac138/subscriptions", "organizations_url": "https://api.github.com/users/mibac138/orgs", "repos_url": "https://api.github.com/users/mibac138/repos", "events_url": "https://api.github.com/users/mibac138/events{/privacy}", "received_events_url": "https://api.github.com/users/mibac138/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f182c4af8a22df906f6e901cb11a1a804f29f32c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f182c4af8a22df906f6e901cb11a1a804f29f32c", "html_url": "https://github.com/rust-lang/rust/commit/f182c4af8a22df906f6e901cb11a1a804f29f32c"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "049aa7447f4db605b6481d171f41e9707ef71bcf", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d4fe9553f65df51a18999e956fd507e26271e74e/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fe9553f65df51a18999e956fd507e26271e74e/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=d4fe9553f65df51a18999e956fd507e26271e74e", "patch": "@@ -12,7 +12,7 @@ use rustc_ast::ast::{Block, BlockCheckMode, Expr, ExprKind, Local, Stmt, StmtKin\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, TokenKind};\n use rustc_ast::util::classify;\n-use rustc_errors::{Applicability, PResult};\n+use rustc_errors::{struct_span_err, Applicability, PResult};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::symbol::{kw, sym};\n \n@@ -217,7 +217,32 @@ impl<'a> Parser<'a> {\n \n     /// Parses the RHS of a local variable declaration (e.g., '= 14;').\n     fn parse_initializer(&mut self, skip_eq: bool) -> PResult<'a, Option<P<Expr>>> {\n-        if self.eat(&token::Eq) || skip_eq { Ok(Some(self.parse_expr()?)) } else { Ok(None) }\n+        let parse = if !self.eat(&token::Eq) && !skip_eq {\n+            // Error recovery for `let x += 1`\n+            if matches!(self.token.kind, TokenKind::BinOpEq(_)) {\n+                struct_span_err!(\n+                    self.sess.span_diagnostic,\n+                    self.token.span,\n+                    E0067,\n+                    \"can't reassign to a uninitialized variable\"\n+                )\n+                .span_suggestion_short(\n+                    self.token.span,\n+                    \"replace with `=` to initialize the variable\",\n+                    \"=\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                )\n+                .emit();\n+                self.bump();\n+                true\n+            } else {\n+                false\n+            }\n+        } else {\n+            true\n+        };\n+\n+        if parse { Ok(Some(self.parse_expr()?)) } else { Ok(None) }\n     }\n \n     /// Parses a block. No inner attributes are allowed."}, {"sha": "8d883d6e248944d8c34c5e18a31b65622dbcaba3", "filename": "src/test/ui/parser/let-binop-plus.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4fe9553f65df51a18999e956fd507e26271e74e/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fe9553f65df51a18999e956fd507e26271e74e/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.rs?ref=d4fe9553f65df51a18999e956fd507e26271e74e", "patch": "@@ -0,0 +1,7 @@\n+#![allow(bare_trait_objects)]\n+\n+fn main() {\n+    let a: i8 += 1;\n+    //~^ ERROR expected trait, found builtin type `i8`\n+    let _ = a;\n+}"}, {"sha": "baa935aff713c6ed6ce301e0cd03c5ee7e554d5b", "filename": "src/test/ui/parser/let-binop-plus.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d4fe9553f65df51a18999e956fd507e26271e74e/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4fe9553f65df51a18999e956fd507e26271e74e/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.stderr?ref=d4fe9553f65df51a18999e956fd507e26271e74e", "patch": "@@ -0,0 +1,9 @@\n+error[E0404]: expected trait, found builtin type `i8`\n+  --> $DIR/let-binop-plus.rs:4:12\n+   |\n+LL |     let a: i8 += 1;\n+   |            ^^ not a trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0404`."}, {"sha": "d445ab6bb8a1fc299ed76cc8eb8541cb1ad6de58", "filename": "src/test/ui/parser/let-binop.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4fe9553f65df51a18999e956fd507e26271e74e/src%2Ftest%2Fui%2Fparser%2Flet-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fe9553f65df51a18999e956fd507e26271e74e/src%2Ftest%2Fui%2Fparser%2Flet-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop.rs?ref=d4fe9553f65df51a18999e956fd507e26271e74e", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let a: i8 *= 1; //~ ERROR can't reassign to a uninitialized variable\n+    let _ = a;\n+    let b += 1; //~ ERROR can't reassign to a uninitialized variable\n+    let _ = b;\n+    let c *= 1; //~ ERROR can't reassign to a uninitialized variable\n+    let _ = c;\n+}"}, {"sha": "3e9d4a80a70ef94dae37ecd9df9e536ab647308d", "filename": "src/test/ui/parser/let-binop.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d4fe9553f65df51a18999e956fd507e26271e74e/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4fe9553f65df51a18999e956fd507e26271e74e/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr?ref=d4fe9553f65df51a18999e956fd507e26271e74e", "patch": "@@ -0,0 +1,21 @@\n+error[E0067]: can't reassign to a uninitialized variable\n+  --> $DIR/let-binop.rs:2:15\n+   |\n+LL |     let a: i8 *= 1;\n+   |               ^^ help: replace with `=` to initialize the variable\n+\n+error[E0067]: can't reassign to a uninitialized variable\n+  --> $DIR/let-binop.rs:4:11\n+   |\n+LL |     let b += 1;\n+   |           ^^ help: replace with `=` to initialize the variable\n+\n+error[E0067]: can't reassign to a uninitialized variable\n+  --> $DIR/let-binop.rs:6:11\n+   |\n+LL |     let c *= 1;\n+   |           ^^ help: replace with `=` to initialize the variable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0067`."}]}