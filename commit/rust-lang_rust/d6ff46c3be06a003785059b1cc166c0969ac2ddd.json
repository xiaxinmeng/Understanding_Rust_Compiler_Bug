{"sha": "d6ff46c3be06a003785059b1cc166c0969ac2ddd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZmY0NmMzYmUwNmEwMDM3ODUwNTliMWNjMTY2YzA5NjlhYzJkZGQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-18T03:20:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-18T03:20:25Z"}, "message": "Rollup merge of #75548 - dancrossnyc:master, r=tmandry\n\nlibrustc_metadata::locator: Properly detect file type.\n\nMake sure to test file types against the non-canonicalized name to\navoid detecting the wrong type.  Some systems save build artifacts\ninto associate file stores that do not preserve extensions, and\nthen link to those using conventionally-named symbolic links, that\nare the arguments to `rustc` et al.  If we canonicalize before\ntesting the type, we resolve the symlink, the extension is\nlost and we might treat rlibs and rmetas as dylibs.\n\nThe fix is to tntroduce a temporary to hold the canonicalized name,\ncompare against the non-canonical name, and add a comment\nexplaining what's going on for the would-be mainter who sees a\npotential cleanup.\n\nSigned-off-by: Dan Cross <dcross@google.com>", "tree": {"sha": "55f8d1d1dbc301eafbb2aff3b4bb6a899077f081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55f8d1d1dbc301eafbb2aff3b4bb6a899077f081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6ff46c3be06a003785059b1cc166c0969ac2ddd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfO0j5CRBK7hj4Ov3rIwAAdHIIAIsLhk04uRj4qVf39t0Xlw0w\n2MosRUBmHRvPdLdSqsYtEJcXvnE0tPjCZhm5pzSm9QYLUHDrBs5ihtXBHvv8NT2H\nfaVIz8w7lvMcz0usZpBi1GfzK6cVGmL4QkKYz39VhFzzDD+6BoBwWlaDzPRRNRUo\n/uw6rScQut4JOWhqdoAew+J2/NWbiXBTlMlfzpUIB9Ov3rwIS9lWIxn22KUQbJCT\n9mOgpXPi1vcBsVcTRpgCrCPhWkDcq2jITP5IFGsLQCJJGuHJQNRRIT/zj28yTzx8\n+veL9L4Tl06lBpYDehTbArA+A42Hc6pK2bpZUDjDD2McbESXO37KLI6fTib5wBM=\n=m7bQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 55f8d1d1dbc301eafbb2aff3b4bb6a899077f081\nparent d7dcae03c9c014362cdefb7ec605bb35804a6a94\nparent 6ad6d8c25c399cdc001ca65801017e8c5c51e9e2\nauthor Tyler Mandry <tmandry@gmail.com> 1597720825 -0700\ncommitter GitHub <noreply@github.com> 1597720825 -0700\n\nRollup merge of #75548 - dancrossnyc:master, r=tmandry\n\nlibrustc_metadata::locator: Properly detect file type.\n\nMake sure to test file types against the non-canonicalized name to\navoid detecting the wrong type.  Some systems save build artifacts\ninto associate file stores that do not preserve extensions, and\nthen link to those using conventionally-named symbolic links, that\nare the arguments to `rustc` et al.  If we canonicalize before\ntesting the type, we resolve the symlink, the extension is\nlost and we might treat rlibs and rmetas as dylibs.\n\nThe fix is to tntroduce a temporary to hold the canonicalized name,\ncompare against the non-canonical name, and add a comment\nexplaining what's going on for the would-be mainter who sees a\npotential cleanup.\n\nSigned-off-by: Dan Cross <dcross@google.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ff46c3be06a003785059b1cc166c0969ac2ddd", "html_url": "https://github.com/rust-lang/rust/commit/d6ff46c3be06a003785059b1cc166c0969ac2ddd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6ff46c3be06a003785059b1cc166c0969ac2ddd/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7dcae03c9c014362cdefb7ec605bb35804a6a94", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7dcae03c9c014362cdefb7ec605bb35804a6a94", "html_url": "https://github.com/rust-lang/rust/commit/d7dcae03c9c014362cdefb7ec605bb35804a6a94"}, {"sha": "6ad6d8c25c399cdc001ca65801017e8c5c51e9e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad6d8c25c399cdc001ca65801017e8c5c51e9e2", "html_url": "https://github.com/rust-lang/rust/commit/6ad6d8c25c399cdc001ca65801017e8c5c51e9e2"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "8fa14a44f527e48fa6fef3071314e03cfad4a840", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6ff46c3be06a003785059b1cc166c0969ac2ddd/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ff46c3be06a003785059b1cc166c0969ac2ddd/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=d6ff46c3be06a003785059b1cc166c0969ac2ddd", "patch": "@@ -685,13 +685,19 @@ impl<'a> CrateLocator<'a> {\n                     && file.ends_with(&self.target.options.dll_suffix)\n             {\n                 // Make sure there's at most one rlib and at most one dylib.\n-                let loc = fs::canonicalize(&loc).unwrap_or_else(|_| loc.clone());\n+                // Note to take care and match against the non-canonicalized name:\n+                // some systems save build artifacts into content-addressed stores\n+                // that do not preserve extensions, and then link to them using\n+                // e.g. symbolic links. If we canonicalize too early, we resolve\n+                // the symlink, the file type is lost and we might treat rlibs and\n+                // rmetas as dylibs.\n+                let loc_canon = fs::canonicalize(&loc).unwrap_or_else(|_| loc.clone());\n                 if loc.file_name().unwrap().to_str().unwrap().ends_with(\".rlib\") {\n-                    rlibs.insert(loc, PathKind::ExternFlag);\n+                    rlibs.insert(loc_canon, PathKind::ExternFlag);\n                 } else if loc.file_name().unwrap().to_str().unwrap().ends_with(\".rmeta\") {\n-                    rmetas.insert(loc, PathKind::ExternFlag);\n+                    rmetas.insert(loc_canon, PathKind::ExternFlag);\n                 } else {\n-                    dylibs.insert(loc, PathKind::ExternFlag);\n+                    dylibs.insert(loc_canon, PathKind::ExternFlag);\n                 }\n             } else {\n                 self.rejected_via_filename"}]}