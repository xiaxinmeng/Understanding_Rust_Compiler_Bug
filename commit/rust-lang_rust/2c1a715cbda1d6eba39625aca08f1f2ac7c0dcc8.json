{"sha": "2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMWE3MTVjYmRhMWQ2ZWJhMzk2MjVhY2EwOGYxZjJhYzdjMGRjYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-29T16:48:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-29T16:48:57Z"}, "message": "Auto merge of #51569 - SimonSapin:liballoc, r=sfackler\n\nMake the public API of the alloc crate a subset of std\n\nThis only affects **unstable** APIs.\n\nI plan to submit an RFC proposing to stabilize the crate. The reason it isn\u2019t stable yet (https://github.com/rust-lang/rust/issues/27783) is in case we end up merging the standard library crates into one. However the `core` crate is already stable, so if that happens we\u2019ll need to keep it working somehow (likely by making replacing its contents by `pub use` items). We can do the same for `alloc`. This PR will hopefully make this easier, but even if that doesn\u2019t happen consistency with `std` seems good.", "tree": {"sha": "9756750b94ea91185e1a174ae850b2607252f2f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9756750b94ea91185e1a174ae850b2607252f2f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "html_url": "https://github.com/rust-lang/rust/commit/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fdcd3aa389aa92879f576c55e429015667143c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fdcd3aa389aa92879f576c55e429015667143c3", "html_url": "https://github.com/rust-lang/rust/commit/5fdcd3aa389aa92879f576c55e429015667143c3"}, {"sha": "15bb6c431da6f486fd048a00ba9c72fe5bc2dd74", "url": "https://api.github.com/repos/rust-lang/rust/commits/15bb6c431da6f486fd048a00ba9c72fe5bc2dd74", "html_url": "https://github.com/rust-lang/rust/commit/15bb6c431da6f486fd048a00ba9c72fe5bc2dd74"}], "stats": {"total": 226, "additions": 121, "deletions": 105}, "files": [{"sha": "fcadcb544c431a9e9ede7bc00912ce3123b2533c", "filename": "src/liballoc/collections/binary_heap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "previous_filename": "src/liballoc/binary_heap.rs"}, {"sha": "e6e454446e232de826fe5a77a4837d4d5a2679e1", "filename": "src/liballoc/collections/btree/map.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "previous_filename": "src/liballoc/btree/map.rs"}, {"sha": "087c9f228d4448bb6c119675ce28eac9e354a6b4", "filename": "src/liballoc/collections/btree/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmod.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "previous_filename": "src/liballoc/btree/mod.rs"}, {"sha": "19bdcbc6ad63ea8d3f7fe7531b3f866fe019440c", "filename": "src/liballoc/collections/btree/node.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "previous_filename": "src/liballoc/btree/node.rs"}, {"sha": "bc1272fbc786e7aa4c2c9e39e24345c3a84f68a4", "filename": "src/liballoc/collections/btree/search.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "previous_filename": "src/liballoc/btree/search.rs"}, {"sha": "af9a7074e4a4f96d9916ae126ac8f936879cf2e2", "filename": "src/liballoc/collections/btree/set.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "patch": "@@ -19,7 +19,7 @@ use core::iter::{Peekable, FromIterator, FusedIterator};\n use core::ops::{BitOr, BitAnd, BitXor, Sub, RangeBounds};\n \n use borrow::Borrow;\n-use btree_map::{BTreeMap, Keys};\n+use collections::btree_map::{self, BTreeMap, Keys};\n use super::Recover;\n \n // FIXME(conventions): implement bounded iterators\n@@ -104,7 +104,7 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct IntoIter<T> {\n-    iter: ::btree_map::IntoIter<T, ()>,\n+    iter: btree_map::IntoIter<T, ()>,\n }\n \n /// An iterator over a sub-range of items in a `BTreeSet`.\n@@ -117,7 +117,7 @@ pub struct IntoIter<T> {\n #[derive(Debug)]\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct Range<'a, T: 'a> {\n-    iter: ::btree_map::Range<'a, T, ()>,\n+    iter: btree_map::Range<'a, T, ()>,\n }\n \n /// A lazy iterator producing elements in the difference of `BTreeSet`s.", "previous_filename": "src/liballoc/btree/set.rs"}, {"sha": "9844de9a57d70274c4bf91cc93d79da0e381acf4", "filename": "src/liballoc/collections/linked_list.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "previous_filename": "src/liballoc/linked_list.rs"}, {"sha": "96e0eb633b2f54cbaa38ad8c230a4c6f165ebc97", "filename": "src/liballoc/collections/mod.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fmod.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "patch": "@@ -0,0 +1,88 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Collection types.\n+\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+pub mod binary_heap;\n+mod btree;\n+pub mod linked_list;\n+pub mod vec_deque;\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub mod btree_map {\n+    //! A map based on a B-Tree.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub use super::btree::map::*;\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub mod btree_set {\n+    //! A set based on a B-Tree.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub use super::btree::set::*;\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(no_inline)]\n+pub use self::binary_heap::BinaryHeap;\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(no_inline)]\n+pub use self::btree_map::BTreeMap;\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(no_inline)]\n+pub use self::btree_set::BTreeSet;\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(no_inline)]\n+pub use self::linked_list::LinkedList;\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(no_inline)]\n+pub use self::vec_deque::VecDeque;\n+\n+use alloc::{AllocErr, LayoutErr};\n+\n+/// Augments `AllocErr` with a CapacityOverflow variant.\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+#[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n+pub enum CollectionAllocErr {\n+    /// Error due to the computed capacity exceeding the collection's maximum\n+    /// (usually `isize::MAX` bytes).\n+    CapacityOverflow,\n+    /// Error due to the allocator (see the `AllocErr` type's docs).\n+    AllocErr,\n+}\n+\n+#[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n+impl From<AllocErr> for CollectionAllocErr {\n+    #[inline]\n+    fn from(AllocErr: AllocErr) -> Self {\n+        CollectionAllocErr::AllocErr\n+    }\n+}\n+\n+#[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n+impl From<LayoutErr> for CollectionAllocErr {\n+    #[inline]\n+    fn from(_: LayoutErr) -> Self {\n+        CollectionAllocErr::CapacityOverflow\n+    }\n+}\n+\n+/// An intermediate trait for specialization of `Extend`.\n+#[doc(hidden)]\n+trait SpecExtend<I: IntoIterator> {\n+    /// Extends `self` with the contents of the given iterator.\n+    fn spec_extend(&mut self, iter: I);\n+}"}, {"sha": "ba92b886138c02efbeec9b421154965da89e41e7", "filename": "src/liballoc/collections/vec_deque.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "patch": "@@ -30,7 +30,7 @@ use core::slice;\n use core::hash::{Hash, Hasher};\n use core::cmp;\n \n-use alloc::CollectionAllocErr;\n+use collections::CollectionAllocErr;\n use raw_vec::RawVec;\n use vec::Vec;\n \n@@ -2891,7 +2891,7 @@ mod tests {\n \n     #[test]\n     fn test_from_vec() {\n-        use super::super::vec::Vec;\n+        use vec::Vec;\n         for cap in 0..35 {\n             for len in 0..cap + 1 {\n                 let mut vec = Vec::with_capacity(cap);\n@@ -2907,7 +2907,7 @@ mod tests {\n \n     #[test]\n     fn test_vec_from_vecdeque() {\n-        use super::super::vec::Vec;\n+        use vec::Vec;\n \n         fn create_vec_and_test_convert(cap: usize, offset: usize, len: usize) {\n             let mut vd = VecDeque::with_capacity(cap);", "previous_filename": "src/liballoc/vec_deque.rs"}, {"sha": "c054042d5a1848a957c9dbb907c43e280d457eeb", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 7, "deletions": 54, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "patch": "@@ -13,10 +13,10 @@\n //! This library provides smart pointers and collections for managing\n //! heap-allocated values.\n //!\n-//! This library, like libcore, is not intended for general usage, but rather as\n-//! a building block of other libraries. The types and interfaces in this\n-//! library are re-exported through the [standard library](../std/index.html),\n-//! and should not be used through this library.\n+//! This library, like libcore, normally doesn\u2019t need to be used directly\n+//! since its contents are re-exported in the [`std` crate](../std/index.html).\n+//! Crates that use the `#![no_std]` attribute however will typically\n+//! not depend on `std`, so they\u2019d use this crate instead.\n //!\n //! ## Boxed values\n //!\n@@ -40,7 +40,7 @@\n //!\n //! ## Atomically reference counted pointers\n //!\n-//! The [`Arc`](arc/index.html) type is the threadsafe equivalent of the `Rc`\n+//! The [`Arc`](sync/index.html) type is the threadsafe equivalent of the `Rc`\n //! type. It provides all the same functionality of `Rc`, except it requires\n //! that the contained type `T` is shareable. Additionally, `Arc<T>` is itself\n //! sendable while `Rc<T>` is not.\n@@ -141,13 +141,6 @@ extern crate rand;\n #[macro_use]\n mod macros;\n \n-#[rustc_deprecated(since = \"1.27.0\", reason = \"use the heap module in core, alloc, or std instead\")]\n-#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-/// Use the `alloc` module instead.\n-pub mod allocator {\n-    pub use alloc::*;\n-}\n-\n // Heaps provided for low-level allocation strategies\n \n pub mod alloc;\n@@ -169,60 +162,20 @@ mod boxed {\n }\n #[cfg(test)]\n mod boxed_test;\n+pub mod collections;\n #[cfg(target_has_atomic = \"ptr\")]\n-pub mod arc;\n+pub mod sync;\n pub mod rc;\n pub mod raw_vec;\n \n-// collections modules\n-pub mod binary_heap;\n-mod btree;\n pub mod borrow;\n pub mod fmt;\n-pub mod linked_list;\n pub mod slice;\n pub mod str;\n pub mod string;\n pub mod vec;\n-pub mod vec_deque;\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub mod btree_map {\n-    //! A map based on a B-Tree.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub use btree::map::*;\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub mod btree_set {\n-    //! A set based on a B-Tree.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub use btree::set::*;\n-}\n \n #[cfg(not(test))]\n mod std {\n     pub use core::ops;      // RangeFull\n }\n-\n-/// An intermediate trait for specialization of `Extend`.\n-#[doc(hidden)]\n-trait SpecExtend<I: IntoIterator> {\n-    /// Extends `self` with the contents of the given iterator.\n-    fn spec_extend(&mut self, iter: I);\n-}\n-\n-#[doc(no_inline)]\n-pub use binary_heap::BinaryHeap;\n-#[doc(no_inline)]\n-pub use btree_map::BTreeMap;\n-#[doc(no_inline)]\n-pub use btree_set::BTreeSet;\n-#[doc(no_inline)]\n-pub use linked_list::LinkedList;\n-#[doc(no_inline)]\n-pub use vec_deque::VecDeque;\n-#[doc(no_inline)]\n-pub use string::String;\n-#[doc(no_inline)]\n-pub use vec::Vec;"}, {"sha": "4f2686abf4515fbb11554df4b81dd83114b51976", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "patch": "@@ -8,15 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![unstable(feature = \"raw_vec_internals\", reason = \"implemention detail\", issue = \"0\")]\n+#![doc(hidden)]\n+\n use core::cmp;\n use core::mem;\n use core::ops::Drop;\n use core::ptr::{self, NonNull, Unique};\n use core::slice;\n \n use alloc::{Alloc, Layout, Global, handle_alloc_error};\n-use alloc::CollectionAllocErr;\n-use alloc::CollectionAllocErr::*;\n+use collections::CollectionAllocErr;\n+use collections::CollectionAllocErr::*;\n use boxed::Box;\n \n /// A low-level utility for more ergonomically allocating, reallocating, and deallocating\n@@ -264,7 +267,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc)]\n+    /// # #![feature(alloc, raw_vec_internals)]\n     /// # extern crate alloc;\n     /// # use std::ptr;\n     /// # use alloc::raw_vec::RawVec;\n@@ -468,7 +471,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc)]\n+    /// # #![feature(alloc, raw_vec_internals)]\n     /// # extern crate alloc;\n     /// # use std::ptr;\n     /// # use alloc::raw_vec::RawVec;"}, {"sha": "bb99d0401d3cd41e898405b4afdcb4ae1a41b69c", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "patch": "@@ -51,7 +51,6 @@ use boxed::Box;\n use slice::{SliceConcatExt, SliceIndex};\n use string::String;\n use vec::Vec;\n-use vec_deque::VecDeque;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{FromStr, Utf8Error};"}, {"sha": "6b28687a060de58c059cdaa376192f8d0e0a0f5b", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "patch": "@@ -66,7 +66,7 @@ use core::ptr;\n use core::str::pattern::Pattern;\n use core::str::lossy;\n \n-use alloc::CollectionAllocErr;\n+use collections::CollectionAllocErr;\n use borrow::{Cow, ToOwned};\n use boxed::Box;\n use str::{self, from_boxed_utf8_unchecked, FromStr, Utf8Error, Chars};"}, {"sha": "2abd9c85c5754f140beb33dcd8ac148969375215", "filename": "src/liballoc/sync.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "previous_filename": "src/liballoc/arc.rs"}, {"sha": "f14fe3a20da93ab2e062b37f9bde24f0f3b615ee", "filename": "src/liballoc/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftask.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "patch": "@@ -18,10 +18,10 @@ pub use self::if_arc::*;\n #[cfg(target_has_atomic = \"ptr\")]\n mod if_arc {\n     use super::*;\n-    use arc::Arc;\n     use core::marker::PhantomData;\n     use core::mem;\n     use core::ptr::{self, NonNull};\n+    use sync::Arc;\n \n     /// A way of waking up a specific task.\n     ///"}, {"sha": "fbbaced540e70cace77f7c600b31da99a4c9ed90", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "patch": "@@ -80,7 +80,7 @@ use core::ptr;\n use core::ptr::NonNull;\n use core::slice;\n \n-use alloc::CollectionAllocErr;\n+use collections::CollectionAllocErr;\n use borrow::ToOwned;\n use borrow::Cow;\n use boxed::Box;"}, {"sha": "0f4a5d16e1759aa1a4a0f957930fc5b02235c757", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "patch": "@@ -26,6 +26,7 @@\n #![feature(alloc)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n+#![feature(raw_vec_internals)]\n #![cfg_attr(test, feature(test))]\n \n #![allow(deprecated)]"}, {"sha": "01221aecb6284651aee6a4bf9189b90ec5ca0281", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "patch": "@@ -385,34 +385,6 @@ impl fmt::Display for CannotReallocInPlace {\n     }\n }\n \n-/// Augments `AllocErr` with a CapacityOverflow variant.\n-// FIXME: should this be in libcore or liballoc?\n-#[derive(Clone, PartialEq, Eq, Debug)]\n-#[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-pub enum CollectionAllocErr {\n-    /// Error due to the computed capacity exceeding the collection's maximum\n-    /// (usually `isize::MAX` bytes).\n-    CapacityOverflow,\n-    /// Error due to the allocator (see the `AllocErr` type's docs).\n-    AllocErr,\n-}\n-\n-#[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-impl From<AllocErr> for CollectionAllocErr {\n-    #[inline]\n-    fn from(AllocErr: AllocErr) -> Self {\n-        CollectionAllocErr::AllocErr\n-    }\n-}\n-\n-#[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-impl From<LayoutErr> for CollectionAllocErr {\n-    #[inline]\n-    fn from(_: LayoutErr) -> Self {\n-        CollectionAllocErr::CapacityOverflow\n-    }\n-}\n-\n /// A memory allocator that can be registered as the standard library\u2019s default\n /// though the `#[global_allocator]` attributes.\n ///"}, {"sha": "91912e5f2412ef75eb59c25abba89f0574174c00", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "patch": "@@ -11,7 +11,7 @@\n use self::Entry::*;\n use self::VacantEntryState::*;\n \n-use alloc::CollectionAllocErr;\n+use collections::CollectionAllocErr;\n use cell::Cell;\n use borrow::Borrow;\n use cmp::max;"}, {"sha": "2b319186a8db2ffdb9b997ccdc54140e319e861f", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use alloc::{Global, Alloc, Layout, LayoutErr, CollectionAllocErr, handle_alloc_error};\n+use alloc::{Global, Alloc, Layout, LayoutErr, handle_alloc_error};\n+use collections::CollectionAllocErr;\n use hash::{BuildHasher, Hash, Hasher};\n use marker;\n use mem::{size_of, needs_drop};"}, {"sha": "8d2c82bc0aa848a9c8df2eb30b891e5ddb50fc5e", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "patch": "@@ -424,21 +424,21 @@\n #[doc(hidden)]\n pub use ops::Bound;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use alloc_crate::{BinaryHeap, BTreeMap, BTreeSet};\n+pub use alloc_crate::collections::{BinaryHeap, BTreeMap, BTreeSet};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use alloc_crate::{LinkedList, VecDeque};\n+pub use alloc_crate::collections::{LinkedList, VecDeque};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use alloc_crate::{binary_heap, btree_map, btree_set};\n+pub use alloc_crate::collections::{binary_heap, btree_map, btree_set};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use alloc_crate::{linked_list, vec_deque};\n+pub use alloc_crate::collections::{linked_list, vec_deque};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::hash_map::HashMap;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::hash_set::HashSet;\n \n #[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-pub use alloc::CollectionAllocErr;\n+pub use alloc_crate::collections::CollectionAllocErr;\n \n mod hash;\n "}, {"sha": "e12ef8d9eda2de71ad030275addf8a9c492b5265", "filename": "src/libstd/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Flibstd%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Flibstd%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmod.rs?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "patch": "@@ -18,7 +18,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use alloc_crate::arc::{Arc, Weak};\n+pub use alloc_crate::sync::{Arc, Weak};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::sync::atomic;\n "}, {"sha": "3874e23a2a3c9969eee6670e7d7c1d04812d82c1", "filename": "src/test/rustdoc-js/struct-vec.js", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Ftest%2Frustdoc-js%2Fstruct-vec.js", "raw_url": "https://github.com/rust-lang/rust/raw/2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8/src%2Ftest%2Frustdoc-js%2Fstruct-vec.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fstruct-vec.js?ref=2c1a715cbda1d6eba39625aca08f1f2ac7c0dcc8", "patch": "@@ -14,6 +14,5 @@ const EXPECTED = {\n     'others': [\n         { 'path': 'std::vec', 'name': 'Vec' },\n         { 'path': 'std::collections', 'name': 'VecDeque' },\n-        { 'path': 'alloc::raw_vec', 'name': 'RawVec' },\n     ],\n };"}]}