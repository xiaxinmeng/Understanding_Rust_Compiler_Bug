{"sha": "516a7fa6934c561e9fc1b357a57eb5f0adb89739", "node_id": "C_kwDOAAsO6NoAKDUxNmE3ZmE2OTM0YzU2MWU5ZmMxYjM1N2E1N2ViNWYwYWRiODk3Mzk", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-05-12T03:50:07Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-05-12T03:50:07Z"}, "message": "Relax the wording about the meaning of -1.", "tree": {"sha": "d569ac1b8c6be60fe3b5d87ef35f886910be01d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d569ac1b8c6be60fe3b5d87ef35f886910be01d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/516a7fa6934c561e9fc1b357a57eb5f0adb89739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/516a7fa6934c561e9fc1b357a57eb5f0adb89739", "html_url": "https://github.com/rust-lang/rust/commit/516a7fa6934c561e9fc1b357a57eb5f0adb89739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/516a7fa6934c561e9fc1b357a57eb5f0adb89739/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f75b4aaa64fb8bfb9635a879c1af52a5d68f662", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f75b4aaa64fb8bfb9635a879c1af52a5d68f662", "html_url": "https://github.com/rust-lang/rust/commit/2f75b4aaa64fb8bfb9635a879c1af52a5d68f662"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "e473fac35182527fe4daf01d5bf2bebe15a3246a", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/516a7fa6934c561e9fc1b357a57eb5f0adb89739/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516a7fa6934c561e9fc1b357a57eb5f0adb89739/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=516a7fa6934c561e9fc1b357a57eb5f0adb89739", "patch": "@@ -23,8 +23,9 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n /// it is not captured or consumed.\n ///\n /// Note that it *may* have the value `-1`, which in `BorrowedHandle` always\n-/// represents the current process handle, and not `INVALID_HANDLE_VALUE`,\n-/// despite the two having the same value. See [here] for the full story.\n+/// represents a valid handle value, such as [the current process handle], and\n+/// not `INVALID_HANDLE_VALUE`, despite the two having the same value. See\n+/// [here] for the full story.\n ///\n /// And, it *may* have the value `NULL` (0), which can occur when consoles are\n /// detached from processes, or when `windows_subsystem` is used.\n@@ -34,6 +35,7 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n /// handle, which is then borrowed under the same lifetime.\n ///\n /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n+/// [the current process handle]: https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocess#remarks\n #[derive(Copy, Clone)]\n #[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n@@ -47,8 +49,9 @@ pub struct BorrowedHandle<'handle> {\n /// This closes the handle on drop.\n ///\n /// Note that it *may* have the value `-1`, which in `OwnedHandle` always\n-/// represents the current process handle, and not `INVALID_HANDLE_VALUE`,\n-/// despite the two having the same value. See [here] for the full story.\n+/// represents a valid handle value, such as [the current process handle], and\n+/// not `INVALID_HANDLE_VALUE`, despite the two having the same value. See\n+/// [here] for the full story.\n ///\n /// And, it *may* have the value `NULL` (0), which can occur when consoles are\n /// detached from processes, or when `windows_subsystem` is used.\n@@ -61,6 +64,7 @@ pub struct BorrowedHandle<'handle> {\n /// [`RegCloseKey`]: https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regclosekey\n ///\n /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n+/// [the current process handle]: https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocess#remarks\n #[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct OwnedHandle {\n@@ -78,10 +82,11 @@ pub struct OwnedHandle {\n /// checking for `NULL` first.\n ///\n /// This type may hold any handle value that [`OwnedHandle`] may hold. As with `OwnedHandle`, when\n-/// it holds `-1`, that value is interpreted as the current process handle, and not\n-/// `INVALID_HANDLE_VALUE`.\n+/// it holds `-1`, that value is interpreted as a valid handle value, such as\n+/// [the current process handle], and not `INVALID_HANDLE_VALUE`.\n ///\n /// If this holds a non-null handle, it will close the handle on drop.\n+/// [the current process handle]: https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocess#remarks\n #[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n #[derive(Debug)]"}]}