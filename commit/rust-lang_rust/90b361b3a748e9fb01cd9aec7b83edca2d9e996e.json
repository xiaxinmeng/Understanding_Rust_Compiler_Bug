{"sha": "90b361b3a748e9fb01cd9aec7b83edca2d9e996e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYjM2MWIzYTc0OGU5ZmIwMWNkOWFlYzdiODNlZGNhMmQ5ZTk5NmU=", "commit": {"author": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-04-18T20:48:34Z"}, "committer": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-04-18T20:48:56Z"}, "message": "fix my unit test that was horrendously wrong\n\nand add one for non-mut slicing since I touched that method too", "tree": {"sha": "99c33a6fd813a0e8c255c2f7e190e9acf7db70ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99c33a6fd813a0e8c255c2f7e190e9acf7db70ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90b361b3a748e9fb01cd9aec7b83edca2d9e996e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90b361b3a748e9fb01cd9aec7b83edca2d9e996e", "html_url": "https://github.com/rust-lang/rust/commit/90b361b3a748e9fb01cd9aec7b83edca2d9e996e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90b361b3a748e9fb01cd9aec7b83edca2d9e996e/comments", "author": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b74d6922ff15d9f3bf39d317ccd7141518f4f5ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/b74d6922ff15d9f3bf39d317ccd7141518f4f5ec", "html_url": "https://github.com/rust-lang/rust/commit/b74d6922ff15d9f3bf39d317ccd7141518f4f5ec"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "a03b61ec97e51c71210cc43ef10487266f3ca2e0", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/90b361b3a748e9fb01cd9aec7b83edca2d9e996e/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b361b3a748e9fb01cd9aec7b83edca2d9e996e/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=90b361b3a748e9fb01cd9aec7b83edca2d9e996e", "patch": "@@ -401,20 +401,34 @@ fn test_str_get_maxinclusive() {\n     }\n }\n \n+#[test]\n+fn test_str_slice_rangetoinclusive_ok() {\n+    let s = \"abc\u03b1\u03b2\u03b3\";\n+    assert_eq!(&s[..=2], \"abc\");\n+    assert_eq!(&s[..=4], \"abc\u03b1\");\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_str_slice_rangetoinclusive_notok() {\n+    let s = \"abc\u03b1\u03b2\u03b3\";\n+    &s[..=3];\n+}\n+\n #[test]\n fn test_str_slicemut_rangetoinclusive_ok() {\n     let mut s = \"abc\u03b1\u03b2\u03b3\".to_owned();\n     let s: &mut str = &mut s;\n-    &mut s[..=3]; // before alpha\n-    &mut s[..=5]; // after alpha\n+    assert_eq!(&mut s[..=2], \"abc\");\n+    assert_eq!(&mut s[..=4], \"abc\u03b1\");\n }\n \n #[test]\n #[should_panic]\n fn test_str_slicemut_rangetoinclusive_notok() {\n     let mut s = \"abc\u03b1\u03b2\u03b3\".to_owned();\n     let s: &mut str = &mut s;\n-    &mut s[..=4]; // middle of alpha, which is 2 bytes long\n+    &mut s[..=3];\n }\n \n #[test]"}]}