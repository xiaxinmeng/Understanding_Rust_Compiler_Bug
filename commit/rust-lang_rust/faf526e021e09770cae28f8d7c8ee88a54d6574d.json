{"sha": "faf526e021e09770cae28f8d7c8ee88a54d6574d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZjUyNmUwMjFlMDk3NzBjYWUyOGY4ZDdjOGVlODhhNTRkNjU3NGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-08T22:06:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-09T07:26:51Z"}, "message": "migrate to untyped rowan", "tree": {"sha": "9fb5bbab15472c7d5b870a65c0ec34256b13c428", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fb5bbab15472c7d5b870a65c0ec34256b13c428"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faf526e021e09770cae28f8d7c8ee88a54d6574d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faf526e021e09770cae28f8d7c8ee88a54d6574d", "html_url": "https://github.com/rust-lang/rust/commit/faf526e021e09770cae28f8d7c8ee88a54d6574d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faf526e021e09770cae28f8d7c8ee88a54d6574d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac6ab0758731d0555fbf1b1a918abd3e12c8169d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac6ab0758731d0555fbf1b1a918abd3e12c8169d", "html_url": "https://github.com/rust-lang/rust/commit/ac6ab0758731d0555fbf1b1a918abd3e12c8169d"}], "stats": {"total": 350, "additions": 192, "deletions": 158}, "files": [{"sha": "843183d1813325b88e4c3d79e0abcb7c7b880e74", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/faf526e021e09770cae28f8d7c8ee88a54d6574d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/faf526e021e09770cae28f8d7c8ee88a54d6574d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=faf526e021e09770cae28f8d7c8ee88a54d6574d", "patch": "@@ -1088,7 +1088,7 @@ dependencies = [\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_parser 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n- \"rowan 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rowan 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smol_str 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n  \"text_unit 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1309,7 +1309,7 @@ dependencies = [\n \n [[package]]\n name = \"rowan\"\n-version = \"0.4.0\"\n+version = \"0.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"colosseum 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1975,7 +1975,7 @@ dependencies = [\n \"checksum relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e7790c7f1cc73d831d28dc5a7deb316a006e7848e6a7f467cdb10a0a9e0fb1c\"\n \"checksum remove_dir_all 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3488ba1b9a2084d38645c4c08276a1752dcbf2c7130d74f1569681ad5d2799c5\"\n \"checksum ron 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"17f52a24414403f81528b67488cf8edc4eda977d3af1646bb6b106a600ead78f\"\n-\"checksum rowan 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"397cd19c109641f10f3c66433440285e232d8cbd37406cf8f944a15ab1e63a8e\"\n+\"checksum rowan 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"91237e0f16ac1073139acd696d9d386c3225ba1d6eafc09b105984905994068d\"\n \"checksum rustc-demangle 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"adacaae16d02b6ec37fdc7acfcddf365978de76d1983d3ee22afc260e1ca9619\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\""}, {"sha": "b8350266f6d8af4fbbf19eca12263a3c39afee53", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=faf526e021e09770cae28f8d7c8ee88a54d6574d", "patch": "@@ -7,6 +7,7 @@ use super::SyntaxInfo;\n \n /// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[repr(u16)]\n pub enum SyntaxKind {\n     // Technical SyntaxKinds: they appear temporally during parsing,\n     // but never end up in the final tree\n@@ -230,9 +231,25 @@ pub enum SyntaxKind {\n     ARG_LIST,\n     TYPE_BOUND,\n     TYPE_BOUND_LIST,\n+    // Technical kind so that we can cast from u16 safely\n+    #[doc(hidden)]\n+    __LAST,\n }\n use self::SyntaxKind::*;\n \n+impl From<u16> for SyntaxKind {\n+    fn from(d: u16) -> SyntaxKind {\n+        assert!(d <= (__LAST as u16));\n+        unsafe { std::mem::transmute::<u16, SyntaxKind>(d) }\n+    }\n+}\n+\n+impl From<SyntaxKind> for u16 {\n+    fn from(k: SyntaxKind) -> u16 {\n+        k as u16\n+    }\n+}\n+\n impl SyntaxKind {\n     pub fn is_keyword(self) -> bool {\n         match self {\n@@ -573,6 +590,7 @@ impl SyntaxKind {\n             TYPE_BOUND_LIST => &SyntaxInfo { name: \"TYPE_BOUND_LIST\" },\n             TOMBSTONE => &SyntaxInfo { name: \"TOMBSTONE\" },\n             EOF => &SyntaxInfo { name: \"EOF\" },\n+            __LAST => &SyntaxInfo { name: \"__LAST\" },\n         }\n     }\n     pub fn from_keyword(ident: &str) -> Option<SyntaxKind> {"}, {"sha": "5b9ff21af462e49f5eadb62618d3abac19a51480", "filename": "crates/ra_parser/src/syntax_kind/generated.rs.tera", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs.tera?ref=faf526e021e09770cae28f8d7c8ee88a54d6574d", "patch": "@@ -9,6 +9,7 @@ use super::SyntaxInfo;\n \n /// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[repr(u16)]\n pub enum SyntaxKind {\n     // Technical SyntaxKinds: they appear temporally during parsing,\n     // but never end up in the final tree\n@@ -26,9 +27,25 @@ pub enum SyntaxKind {\n {% for t in concat(a=literals, b=tokens, c=nodes) %}\n     {{t}},\n {%- endfor %}\n+    // Technical kind so that we can cast from u16 safely\n+    #[doc(hidden)]\n+    __LAST,\n }\n use self::SyntaxKind::*;\n \n+impl From<u16> for SyntaxKind {\n+    fn from(d: u16) -> SyntaxKind {\n+        assert!(d <= (__LAST as u16));\n+        unsafe { std::mem::transmute::<u16, SyntaxKind>(d) }\n+    }\n+}\n+\n+impl From<SyntaxKind> for u16 {\n+    fn from(k: SyntaxKind) -> u16 {\n+        k as u16\n+    }\n+}\n+\n impl SyntaxKind {\n     pub fn is_keyword(self) -> bool {\n         match self {\n@@ -72,6 +89,7 @@ impl SyntaxKind {\n {%- endfor %}\n             TOMBSTONE => &SyntaxInfo { name: \"TOMBSTONE\" },\n             EOF => &SyntaxInfo { name: \"EOF\" },\n+            __LAST => &SyntaxInfo { name: \"__LAST\" },\n         }\n     }\n     pub fn from_keyword(ident: &str) -> Option<SyntaxKind> {"}, {"sha": "1f3981f5abc99ac9394dcb5b27f1dfeb93fac330", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=faf526e021e09770cae28f8d7c8ee88a54d6574d", "patch": "@@ -13,7 +13,7 @@ unicode-xid = \"0.1.0\"\n itertools = \"0.8.0\"\n drop_bomb = \"0.1.4\"\n parking_lot = \"0.7.0\"\n-rowan = \"0.4.0\"\n+rowan = \"0.5.0\"\n \n # ideally, `serde` should be enabled by `ra_lsp_server`, but we enable it here\n # to reduce number of compilations"}, {"sha": "f7e33366eecee7c085079e4d7f4e0efdd60521b7", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=faf526e021e09770cae28f8d7c8ee88a54d6574d", "patch": "@@ -9,7 +9,7 @@ mod expr_extensions;\n use std::marker::PhantomData;\n \n use crate::{\n-    syntax_node::{SyntaxNode, SyntaxNodeChildren, TreeArc, RaTypes, SyntaxToken},\n+    syntax_node::{SyntaxNode, SyntaxNodeChildren, TreeArc, SyntaxToken},\n     SmolStr,\n };\n \n@@ -26,7 +26,7 @@ pub use self::{\n /// the same representation: a pointer to the tree root and a pointer to the\n /// node itself.\n pub trait AstNode:\n-    rowan::TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>> + ToOwned<Owned = TreeArc<Self>>\n+    rowan::TransparentNewType<Repr = rowan::SyntaxNode> + ToOwned<Owned = TreeArc<Self>>\n {\n     fn cast(syntax: &SyntaxNode) -> Option<&Self>\n     where"}, {"sha": "774d9bcc84887bfba3dd8fb37657adf0594cfcfa", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 115, "deletions": 115, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=faf526e021e09770cae28f8d7c8ee88a54d6574d", "patch": "@@ -13,7 +13,7 @@ use rowan::TransparentNewType;\n \n use crate::{\n     SyntaxNode, SyntaxKind::*,\n-    syntax_node::{RaTypes, TreeArc},\n+    syntax_node::{TreeArc},\n     ast::{self, AstNode},\n };\n \n@@ -24,7 +24,7 @@ pub struct Alias {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for Alias {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for Alias {\n@@ -53,7 +53,7 @@ pub struct ArgList {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ArgList {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for ArgList {\n@@ -85,7 +85,7 @@ pub struct ArrayExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ArrayExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for ArrayExpr {\n@@ -117,7 +117,7 @@ pub struct ArrayType {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ArrayType {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for ArrayType {\n@@ -153,7 +153,7 @@ pub struct AssocTypeArg {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for AssocTypeArg {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for AssocTypeArg {\n@@ -189,7 +189,7 @@ pub struct Attr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for Attr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for Attr {\n@@ -221,7 +221,7 @@ pub struct BinExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for BinExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for BinExpr {\n@@ -249,7 +249,7 @@ pub struct BindPat {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for BindPat {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for BindPat {\n@@ -282,7 +282,7 @@ pub struct Block {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for Block {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for Block {\n@@ -319,7 +319,7 @@ pub struct BlockExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for BlockExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for BlockExpr {\n@@ -351,7 +351,7 @@ pub struct BreakExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for BreakExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for BreakExpr {\n@@ -383,7 +383,7 @@ pub struct CallExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for CallExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for CallExpr {\n@@ -416,7 +416,7 @@ pub struct CastExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for CastExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for CastExpr {\n@@ -452,7 +452,7 @@ pub struct Condition {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for Condition {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for Condition {\n@@ -488,7 +488,7 @@ pub struct ConstDef {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ConstDef {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for ConstDef {\n@@ -526,7 +526,7 @@ pub struct ContinueExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ContinueExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for ContinueExpr {\n@@ -554,7 +554,7 @@ pub struct DynTraitType {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for DynTraitType {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for DynTraitType {\n@@ -583,7 +583,7 @@ pub struct EnumDef {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for EnumDef {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for EnumDef {\n@@ -620,7 +620,7 @@ pub struct EnumVariant {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for EnumVariant {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for EnumVariant {\n@@ -655,7 +655,7 @@ pub struct EnumVariantList {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for EnumVariantList {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for EnumVariantList {\n@@ -687,7 +687,7 @@ pub struct Expr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for Expr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -950,7 +950,7 @@ pub struct ExprStmt {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ExprStmt {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for ExprStmt {\n@@ -982,7 +982,7 @@ pub struct ExternCrateItem {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ExternCrateItem {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for ExternCrateItem {\n@@ -1018,7 +1018,7 @@ pub struct FieldExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for FieldExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for FieldExpr {\n@@ -1054,7 +1054,7 @@ pub struct FieldPat {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for FieldPat {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for FieldPat {\n@@ -1087,7 +1087,7 @@ pub struct FieldPatList {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for FieldPatList {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for FieldPatList {\n@@ -1123,7 +1123,7 @@ pub struct FnDef {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for FnDef {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for FnDef {\n@@ -1168,7 +1168,7 @@ pub struct FnPointerType {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for FnPointerType {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for FnPointerType {\n@@ -1204,7 +1204,7 @@ pub struct ForExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ForExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for ForExpr {\n@@ -1241,7 +1241,7 @@ pub struct ForType {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ForType {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for ForType {\n@@ -1273,7 +1273,7 @@ pub struct IfExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for IfExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for IfExpr {\n@@ -1305,7 +1305,7 @@ pub struct ImplBlock {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ImplBlock {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for ImplBlock {\n@@ -1338,7 +1338,7 @@ pub struct ImplItem {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ImplItem {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -1401,7 +1401,7 @@ pub struct ImplTraitType {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ImplTraitType {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for ImplTraitType {\n@@ -1430,7 +1430,7 @@ pub struct IndexExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for IndexExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for IndexExpr {\n@@ -1458,7 +1458,7 @@ pub struct ItemList {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ItemList {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for ItemList {\n@@ -1492,7 +1492,7 @@ pub struct Label {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for Label {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for Label {\n@@ -1520,7 +1520,7 @@ pub struct LambdaExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for LambdaExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for LambdaExpr {\n@@ -1556,7 +1556,7 @@ pub struct LetStmt {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for LetStmt {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for LetStmt {\n@@ -1593,7 +1593,7 @@ pub struct LifetimeArg {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for LifetimeArg {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for LifetimeArg {\n@@ -1621,7 +1621,7 @@ pub struct LifetimeParam {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for LifetimeParam {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for LifetimeParam {\n@@ -1650,7 +1650,7 @@ pub struct Literal {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for Literal {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for Literal {\n@@ -1678,7 +1678,7 @@ pub struct LiteralPat {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for LiteralPat {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for LiteralPat {\n@@ -1710,7 +1710,7 @@ pub struct LoopExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for LoopExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for LoopExpr {\n@@ -1739,7 +1739,7 @@ pub struct MacroCall {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for MacroCall {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for MacroCall {\n@@ -1777,7 +1777,7 @@ pub struct MatchArm {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for MatchArm {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for MatchArm {\n@@ -1818,7 +1818,7 @@ pub struct MatchArmList {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for MatchArmList {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for MatchArmList {\n@@ -1851,7 +1851,7 @@ pub struct MatchExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for MatchExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for MatchExpr {\n@@ -1887,7 +1887,7 @@ pub struct MatchGuard {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for MatchGuard {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for MatchGuard {\n@@ -1919,7 +1919,7 @@ pub struct MethodCallExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for MethodCallExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for MethodCallExpr {\n@@ -1960,7 +1960,7 @@ pub struct Module {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for Module {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for Module {\n@@ -1996,7 +1996,7 @@ pub struct ModuleItem {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ModuleItem {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -2123,7 +2123,7 @@ pub struct Name {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for Name {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for Name {\n@@ -2151,7 +2151,7 @@ pub struct NameRef {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for NameRef {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for NameRef {\n@@ -2179,7 +2179,7 @@ pub struct NamedField {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for NamedField {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for NamedField {\n@@ -2215,7 +2215,7 @@ pub struct NamedFieldDef {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for NamedFieldDef {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for NamedFieldDef {\n@@ -2248,7 +2248,7 @@ pub struct NamedFieldDefList {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for NamedFieldDefList {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for NamedFieldDefList {\n@@ -2280,7 +2280,7 @@ pub struct NamedFieldList {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for NamedFieldList {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for NamedFieldList {\n@@ -2312,7 +2312,7 @@ pub struct NeverType {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for NeverType {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for NeverType {\n@@ -2340,7 +2340,7 @@ pub struct NominalDef {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for NominalDef {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -2398,7 +2398,7 @@ pub struct Param {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for Param {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for Param {\n@@ -2431,7 +2431,7 @@ pub struct ParamList {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ParamList {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for ParamList {\n@@ -2467,7 +2467,7 @@ pub struct ParenExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ParenExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for ParenExpr {\n@@ -2499,7 +2499,7 @@ pub struct ParenType {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ParenType {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for ParenType {\n@@ -2531,7 +2531,7 @@ pub struct Pat {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for Pat {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -2650,7 +2650,7 @@ pub struct Path {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for Path {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for Path {\n@@ -2686,7 +2686,7 @@ pub struct PathExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for PathExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for PathExpr {\n@@ -2718,7 +2718,7 @@ pub struct PathPat {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for PathPat {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for PathPat {\n@@ -2750,7 +2750,7 @@ pub struct PathSegment {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for PathSegment {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for PathSegment {\n@@ -2786,7 +2786,7 @@ pub struct PathType {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for PathType {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for PathType {\n@@ -2818,7 +2818,7 @@ pub struct PlaceholderPat {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for PlaceholderPat {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for PlaceholderPat {\n@@ -2846,7 +2846,7 @@ pub struct PlaceholderType {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for PlaceholderType {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for PlaceholderType {\n@@ -2874,7 +2874,7 @@ pub struct PointerType {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for PointerType {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for PointerType {\n@@ -2906,7 +2906,7 @@ pub struct PosFieldDef {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for PosFieldDef {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for PosFieldDef {\n@@ -2940,7 +2940,7 @@ pub struct PosFieldDefList {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for PosFieldDefList {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for PosFieldDefList {\n@@ -2972,7 +2972,7 @@ pub struct PrefixExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for PrefixExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for PrefixExpr {\n@@ -3004,7 +3004,7 @@ pub struct RangeExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for RangeExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for RangeExpr {\n@@ -3032,7 +3032,7 @@ pub struct RangePat {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for RangePat {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for RangePat {\n@@ -3060,7 +3060,7 @@ pub struct RefExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for RefExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for RefExpr {\n@@ -3092,7 +3092,7 @@ pub struct RefPat {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for RefPat {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for RefPat {\n@@ -3124,7 +3124,7 @@ pub struct ReferenceType {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ReferenceType {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for ReferenceType {\n@@ -3156,7 +3156,7 @@ pub struct RetType {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for RetType {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for RetType {\n@@ -3188,7 +3188,7 @@ pub struct ReturnExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for ReturnExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for ReturnExpr {\n@@ -3220,7 +3220,7 @@ pub struct SelfParam {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for SelfParam {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for SelfParam {\n@@ -3249,7 +3249,7 @@ pub struct SlicePat {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for SlicePat {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for SlicePat {\n@@ -3277,7 +3277,7 @@ pub struct SliceType {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for SliceType {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for SliceType {\n@@ -3309,7 +3309,7 @@ pub struct SourceFile {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for SourceFile {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for SourceFile {\n@@ -3343,7 +3343,7 @@ pub struct StaticDef {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for StaticDef {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for StaticDef {\n@@ -3381,7 +3381,7 @@ pub struct Stmt {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for Stmt {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -3436,7 +3436,7 @@ pub struct StructDef {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for StructDef {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for StructDef {\n@@ -3469,7 +3469,7 @@ pub struct StructLit {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for StructLit {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for StructLit {\n@@ -3509,7 +3509,7 @@ pub struct StructPat {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for StructPat {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for StructPat {\n@@ -3545,7 +3545,7 @@ pub struct TokenTree {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for TokenTree {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for TokenTree {\n@@ -3573,7 +3573,7 @@ pub struct TraitDef {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for TraitDef {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for TraitDef {\n@@ -3611,7 +3611,7 @@ pub struct TryExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for TryExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for TryExpr {\n@@ -3643,7 +3643,7 @@ pub struct TupleExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for TupleExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for TupleExpr {\n@@ -3675,7 +3675,7 @@ pub struct TuplePat {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for TuplePat {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for TuplePat {\n@@ -3707,7 +3707,7 @@ pub struct TupleStructPat {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for TupleStructPat {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for TupleStructPat {\n@@ -3743,7 +3743,7 @@ pub struct TupleType {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for TupleType {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for TupleType {\n@@ -3775,7 +3775,7 @@ pub struct TypeAliasDef {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for TypeAliasDef {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for TypeAliasDef {\n@@ -3813,7 +3813,7 @@ pub struct TypeArg {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for TypeArg {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for TypeArg {\n@@ -3845,7 +3845,7 @@ pub struct TypeArgList {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for TypeArgList {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for TypeArgList {\n@@ -3885,7 +3885,7 @@ pub struct TypeBound {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for TypeBound {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for TypeBound {\n@@ -3917,7 +3917,7 @@ pub struct TypeBoundList {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for TypeBoundList {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for TypeBoundList {\n@@ -3949,7 +3949,7 @@ pub struct TypeParam {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for TypeParam {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for TypeParam {\n@@ -3980,7 +3980,7 @@ pub struct TypeParamList {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for TypeParamList {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for TypeParamList {\n@@ -4016,7 +4016,7 @@ pub struct TypeRef {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for TypeRef {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -4159,7 +4159,7 @@ pub struct UseItem {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for UseItem {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for UseItem {\n@@ -4192,7 +4192,7 @@ pub struct UseTree {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for UseTree {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for UseTree {\n@@ -4232,7 +4232,7 @@ pub struct UseTreeList {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for UseTreeList {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for UseTreeList {\n@@ -4264,7 +4264,7 @@ pub struct Visibility {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for Visibility {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for Visibility {\n@@ -4292,7 +4292,7 @@ pub struct WhereClause {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for WhereClause {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for WhereClause {\n@@ -4324,7 +4324,7 @@ pub struct WherePred {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for WherePred {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for WherePred {\n@@ -4357,7 +4357,7 @@ pub struct WhileExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for WhileExpr {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for WhileExpr {"}, {"sha": "c8a13fc5f81c00a4a555be8ac56dbd7f3833d0f3", "filename": "crates/ra_syntax/src/ast/generated.rs.tera", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera?ref=faf526e021e09770cae28f8d7c8ee88a54d6574d", "patch": "@@ -15,7 +15,7 @@ use rowan::TransparentNewType;\n \n use crate::{\n     SyntaxNode, SyntaxKind::*,\n-    syntax_node::{RaTypes, TreeArc},\n+    syntax_node::{TreeArc},\n     ast::{self, AstNode},\n };\n {% for node, methods in ast %}\n@@ -28,7 +28,7 @@ pub struct {{ node }} {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for {{ node }} {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -81,7 +81,7 @@ pub struct {{ node }} {\n     pub(crate) syntax: SyntaxNode,\n }\n unsafe impl TransparentNewType for {{ node }} {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl AstNode for {{ node }} {"}, {"sha": "a6ce14f066b17df2e4a4e6a1617258a376397dc7", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=faf526e021e09770cae28f8d7c8ee88a54d6574d", "patch": "@@ -79,7 +79,7 @@ impl SourceFile {\n     }\n \n     pub fn errors(&self) -> Vec<SyntaxError> {\n-        let mut errors = self.syntax.root_data().clone();\n+        let mut errors = self.syntax.root_data().to_vec();\n         errors.extend(validation::validate(self));\n         errors\n     }"}, {"sha": "434f850d18b90bde449bea6cc26fabedbcc01897", "filename": "crates/ra_syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=faf526e021e09770cae28f8d7c8ee88a54d6574d", "patch": "@@ -67,7 +67,7 @@ fn reparse_token<'node>(\n                 }\n             }\n \n-            let new_token = GreenToken::new(token.kind(), text.into());\n+            let new_token = GreenToken::new(rowan::SyntaxKind(token.kind().into()), text.into());\n             Some((token.replace_with(new_token), token.range()))\n         }\n         _ => None,"}, {"sha": "64d884287caf757b6dc7ffadd79224bd9afce9f8", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf526e021e09770cae28f8d7c8ee88a54d6574d/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=faf526e021e09770cae28f8d7c8ee88a54d6574d", "patch": "@@ -8,38 +8,28 @@\n \n use std::{\n     fmt::{self, Write},\n+    any::Any,\n     borrow::Borrow,\n };\n \n use ra_parser::ParseError;\n-use rowan::{Types, TransparentNewType, GreenNodeBuilder};\n+use rowan::{TransparentNewType, GreenNodeBuilder};\n \n use crate::{\n     SmolStr, SyntaxKind, TextUnit, TextRange, SyntaxText, SourceFile, AstNode,\n     syntax_error::{SyntaxError, SyntaxErrorKind},\n };\n \n pub use rowan::WalkEvent;\n-\n-#[derive(Debug, Clone, Copy)]\n-pub enum RaTypes {}\n-impl Types for RaTypes {\n-    type Kind = SyntaxKind;\n-    type RootData = Vec<SyntaxError>;\n-}\n-\n-pub(crate) type GreenNode = rowan::GreenNode<RaTypes>;\n-pub(crate) type GreenToken = rowan::GreenToken<RaTypes>;\n-#[allow(unused)]\n-pub(crate) type GreenElement = rowan::GreenElement<RaTypes>;\n+pub(crate) use rowan::{GreenNode, GreenToken};\n \n /// Marker trait for CST and AST nodes\n-pub trait SyntaxNodeWrapper: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>> {}\n-impl<T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>> SyntaxNodeWrapper for T {}\n+pub trait SyntaxNodeWrapper: TransparentNewType<Repr = rowan::SyntaxNode> {}\n+impl<T: TransparentNewType<Repr = rowan::SyntaxNode>> SyntaxNodeWrapper for T {}\n \n /// An owning smart pointer for CST or AST node.\n #[derive(PartialEq, Eq, Hash)]\n-pub struct TreeArc<T: SyntaxNodeWrapper>(pub(crate) rowan::TreeArc<RaTypes, T>);\n+pub struct TreeArc<T: SyntaxNodeWrapper>(pub(crate) rowan::TreeArc<T>);\n \n impl<T: SyntaxNodeWrapper> Borrow<T> for TreeArc<T> {\n     fn borrow(&self) -> &T {\n@@ -101,9 +91,9 @@ where\n \n #[derive(PartialEq, Eq, Hash)]\n #[repr(transparent)]\n-pub struct SyntaxNode(pub(crate) rowan::SyntaxNode<RaTypes>);\n+pub struct SyntaxNode(pub(crate) rowan::SyntaxNode);\n unsafe impl TransparentNewType for SyntaxNode {\n-    type Repr = rowan::SyntaxNode<RaTypes>;\n+    type Repr = rowan::SyntaxNode;\n }\n \n impl ToOwned for SyntaxNode {\n@@ -134,12 +124,14 @@ pub enum Direction {\n \n impl SyntaxNode {\n     pub(crate) fn new(green: GreenNode, errors: Vec<SyntaxError>) -> TreeArc<SyntaxNode> {\n+        let errors: Option<Box<Any + Send + Sync>> =\n+            if errors.is_empty() { None } else { Some(Box::new(errors)) };\n         let ptr = TreeArc(rowan::SyntaxNode::new(green, errors));\n         TreeArc::cast(ptr)\n     }\n \n     pub fn kind(&self) -> SyntaxKind {\n-        self.0.kind()\n+        self.0.kind().0.into()\n     }\n \n     pub fn range(&self) -> TextRange {\n@@ -303,8 +295,14 @@ impl SyntaxNode {\n         buf\n     }\n \n-    pub(crate) fn root_data(&self) -> &Vec<SyntaxError> {\n-        self.0.root_data()\n+    pub(crate) fn root_data(&self) -> &[SyntaxError] {\n+        match self.0.root_data() {\n+            None => &[],\n+            Some(data) => {\n+                let data: &Vec<SyntaxError> = std::any::Any::downcast_ref(data).unwrap();\n+                data.as_slice()\n+            }\n+        }\n     }\n \n     pub(crate) fn replace_with(&self, replacement: GreenNode) -> GreenNode {\n@@ -313,7 +311,7 @@ impl SyntaxNode {\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct SyntaxToken<'a>(pub(crate) rowan::SyntaxToken<'a, RaTypes>);\n+pub struct SyntaxToken<'a>(pub(crate) rowan::SyntaxToken<'a>);\n \n //FIXME: always output text\n impl<'a> fmt::Debug for SyntaxToken<'a> {\n@@ -339,15 +337,15 @@ impl<'a> fmt::Display for SyntaxToken<'a> {\n     }\n }\n \n-impl<'a> From<rowan::SyntaxToken<'a, RaTypes>> for SyntaxToken<'a> {\n-    fn from(t: rowan::SyntaxToken<'a, RaTypes>) -> Self {\n+impl<'a> From<rowan::SyntaxToken<'a>> for SyntaxToken<'a> {\n+    fn from(t: rowan::SyntaxToken<'a>) -> Self {\n         SyntaxToken(t)\n     }\n }\n \n impl<'a> SyntaxToken<'a> {\n     pub fn kind(&self) -> SyntaxKind {\n-        self.0.kind()\n+        self.0.kind().0.into()\n     }\n \n     pub fn text(&self) -> &'a SmolStr {\n@@ -454,8 +452,8 @@ impl<'a> SyntaxElement<'a> {\n     }\n }\n \n-impl<'a> From<rowan::SyntaxElement<'a, RaTypes>> for SyntaxElement<'a> {\n-    fn from(el: rowan::SyntaxElement<'a, RaTypes>) -> Self {\n+impl<'a> From<rowan::SyntaxElement<'a>> for SyntaxElement<'a> {\n+    fn from(el: rowan::SyntaxElement<'a>) -> Self {\n         match el {\n             rowan::SyntaxElement::Node(n) => SyntaxElement::Node(SyntaxNode::from_repr(n)),\n             rowan::SyntaxElement::Token(t) => SyntaxElement::Token(t.into()),\n@@ -485,7 +483,7 @@ impl<'a> SyntaxElement<'a> {\n }\n \n #[derive(Debug)]\n-pub struct SyntaxNodeChildren<'a>(rowan::SyntaxNodeChildren<'a, RaTypes>);\n+pub struct SyntaxNodeChildren<'a>(rowan::SyntaxNodeChildren<'a>);\n \n impl<'a> Iterator for SyntaxNodeChildren<'a> {\n     type Item = &'a SyntaxNode;\n@@ -496,7 +494,7 @@ impl<'a> Iterator for SyntaxNodeChildren<'a> {\n }\n \n #[derive(Debug)]\n-pub struct SyntaxElementChildren<'a>(rowan::SyntaxElementChildren<'a, RaTypes>);\n+pub struct SyntaxElementChildren<'a>(rowan::SyntaxElementChildren<'a>);\n \n impl<'a> Iterator for SyntaxElementChildren<'a> {\n     type Item = SyntaxElement<'a>;\n@@ -508,7 +506,7 @@ impl<'a> Iterator for SyntaxElementChildren<'a> {\n \n pub struct SyntaxTreeBuilder {\n     errors: Vec<SyntaxError>,\n-    inner: GreenNodeBuilder<RaTypes>,\n+    inner: GreenNodeBuilder,\n }\n \n impl Default for SyntaxTreeBuilder {\n@@ -533,11 +531,11 @@ impl SyntaxTreeBuilder {\n     }\n \n     pub fn token(&mut self, kind: SyntaxKind, text: SmolStr) {\n-        self.inner.token(kind, text)\n+        self.inner.token(rowan::SyntaxKind(kind.into()), text)\n     }\n \n     pub fn start_node(&mut self, kind: SyntaxKind) {\n-        self.inner.start_node(kind)\n+        self.inner.start_node(rowan::SyntaxKind(kind.into()))\n     }\n \n     pub fn finish_node(&mut self) {"}]}