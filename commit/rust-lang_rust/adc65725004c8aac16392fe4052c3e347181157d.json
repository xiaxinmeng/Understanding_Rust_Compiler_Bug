{"sha": "adc65725004c8aac16392fe4052c3e347181157d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYzY1NzI1MDA0YzhhYWMxNjM5MmZlNDA1MmMzZTM0NzE4MTE1N2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-09T02:05:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-09T02:05:15Z"}, "message": "Auto merge of #68034 - Centril:rollup-3d9pq14, r=Centril\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #67630 (Treat extern statics just like statics in the \"const pointer to static\" representation)\n - #67747 (Explain that associated types and consts can't be accessed directly on the trait's path)\n - #67884 (Fix incremental builds of core by allowing unused attribute.)\n - #67966 (Use matches macro in libcore and libstd)\n - #67979 (Move `intravisit` => `rustc_hir` + misc cleanup)\n - #67986 (Display more informative ICE)\n - #67990 (slice patterns: harden match-based borrowck tests)\n - #68005 (Improve E0184 explanation)\n - #68009 (Spell check librustc_error_codes)\n - #68023 (Fix issue #68008)\n - #68024 (Remove `-Z continue-parse-after-error`)\n - #68026 (Small improvements in lexical_region_resolve)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "01f6119b01516f50953d5b4a1f3cfdb44bf6742a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01f6119b01516f50953d5b4a1f3cfdb44bf6742a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adc65725004c8aac16392fe4052c3e347181157d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adc65725004c8aac16392fe4052c3e347181157d", "html_url": "https://github.com/rust-lang/rust/commit/adc65725004c8aac16392fe4052c3e347181157d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adc65725004c8aac16392fe4052c3e347181157d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caa231d998a5e853c7ba1455d7a05b500df9d63c", "url": "https://api.github.com/repos/rust-lang/rust/commits/caa231d998a5e853c7ba1455d7a05b500df9d63c", "html_url": "https://github.com/rust-lang/rust/commit/caa231d998a5e853c7ba1455d7a05b500df9d63c"}, {"sha": "b24de8f0f861781cd83018ad43d7aa9dd2cb55bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b24de8f0f861781cd83018ad43d7aa9dd2cb55bb", "html_url": "https://github.com/rust-lang/rust/commit/b24de8f0f861781cd83018ad43d7aa9dd2cb55bb"}], "stats": {"total": 2201, "additions": 1666, "deletions": 535}, "files": [{"sha": "3ea4baa57b49efb1acf3de276ced9d3e1150b07d", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -821,10 +821,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn lt(&self, other: &Rhs) -> bool {\n-        match self.partial_cmp(other) {\n-            Some(Less) => true,\n-            _ => false,\n-        }\n+        matches!(self.partial_cmp(other), Some(Less))\n     }\n \n     /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`\n@@ -843,10 +840,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn le(&self, other: &Rhs) -> bool {\n-        match self.partial_cmp(other) {\n-            Some(Less) | Some(Equal) => true,\n-            _ => false,\n-        }\n+        matches!(self.partial_cmp(other), Some(Less) | Some(Equal))\n     }\n \n     /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.\n@@ -864,10 +858,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn gt(&self, other: &Rhs) -> bool {\n-        match self.partial_cmp(other) {\n-            Some(Greater) => true,\n-            _ => false,\n-        }\n+        matches!(self.partial_cmp(other), Some(Greater))\n     }\n \n     /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`\n@@ -886,10 +877,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn ge(&self, other: &Rhs) -> bool {\n-        match self.partial_cmp(other) {\n-            Some(Greater) | Some(Equal) => true,\n-            _ => false,\n-        }\n+        matches!(self.partial_cmp(other), Some(Greater) | Some(Equal))\n     }\n }\n "}, {"sha": "21a569867b17830626cf0f595b6512025becce77", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -2968,10 +2968,7 @@ pub trait Iterator {\n         Self::Item: PartialOrd<I::Item>,\n         Self: Sized,\n     {\n-        match self.partial_cmp(other) {\n-            Some(Ordering::Less) | Some(Ordering::Equal) => true,\n-            _ => false,\n-        }\n+        matches!(self.partial_cmp(other), Some(Ordering::Less) | Some(Ordering::Equal))\n     }\n \n     /// Determines if the elements of this `Iterator` are lexicographically\n@@ -3011,10 +3008,7 @@ pub trait Iterator {\n         Self::Item: PartialOrd<I::Item>,\n         Self: Sized,\n     {\n-        match self.partial_cmp(other) {\n-            Some(Ordering::Greater) | Some(Ordering::Equal) => true,\n-            _ => false,\n-        }\n+        matches!(self.partial_cmp(other), Some(Ordering::Greater) | Some(Ordering::Equal))\n     }\n \n     /// Checks if the elements of this iterator are sorted."}, {"sha": "072966abf2c40226d928c51e7d16bc41aac76d1d", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 13, "deletions": 40, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1416,6 +1416,7 @@ $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+            #[allow(unused_attributes)]\n             #[allow_internal_unstable(const_if_match)]\n             #[inline]\n             pub const fn wrapping_abs(self) -> Self {\n@@ -1709,6 +1710,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_neg(), (\", stringify!($Self\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+            #[allow(unused_attributes)]\n             #[allow_internal_unstable(const_if_match)]\n             pub const fn overflowing_neg(self) -> (Self, bool) {\n                 if self == Self::min_value() {\n@@ -1997,6 +1999,7 @@ $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+            #[allow(unused_attributes)]\n             #[allow_internal_unstable(const_if_match)]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n@@ -4283,10 +4286,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_alphabetic(&self) -> bool {\n-        match *self {\n-            b'A'..=b'Z' | b'a'..=b'z' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'A'..=b'Z' | b'a'..=b'z')\n     }\n \n     /// Checks if the value is an ASCII uppercase character:\n@@ -4318,10 +4318,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_uppercase(&self) -> bool {\n-        match *self {\n-            b'A'..=b'Z' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'A'..=b'Z')\n     }\n \n     /// Checks if the value is an ASCII lowercase character:\n@@ -4353,10 +4350,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_lowercase(&self) -> bool {\n-        match *self {\n-            b'a'..=b'z' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'a'..=b'z')\n     }\n \n     /// Checks if the value is an ASCII alphanumeric character:\n@@ -4391,10 +4385,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_alphanumeric(&self) -> bool {\n-        match *self {\n-            b'0'..=b'9' | b'A'..=b'Z' | b'a'..=b'z' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'0'..=b'9' | b'A'..=b'Z' | b'a'..=b'z')\n     }\n \n     /// Checks if the value is an ASCII decimal digit:\n@@ -4426,10 +4417,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_digit(&self) -> bool {\n-        match *self {\n-            b'0'..=b'9' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'0'..=b'9')\n     }\n \n     /// Checks if the value is an ASCII hexadecimal digit:\n@@ -4464,10 +4452,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_hexdigit(&self) -> bool {\n-        match *self {\n-            b'0'..=b'9' | b'A'..=b'F' | b'a'..=b'f' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'0'..=b'9' | b'A'..=b'F' | b'a'..=b'f')\n     }\n \n     /// Checks if the value is an ASCII punctuation character:\n@@ -4503,10 +4488,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_punctuation(&self) -> bool {\n-        match *self {\n-            b'!'..=b'/' | b':'..=b'@' | b'['..=b'`' | b'{'..=b'~' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'!'..=b'/' | b':'..=b'@' | b'['..=b'`' | b'{'..=b'~')\n     }\n \n     /// Checks if the value is an ASCII graphic character:\n@@ -4538,10 +4520,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_graphic(&self) -> bool {\n-        match *self {\n-            b'!'..=b'~' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'!'..=b'~')\n     }\n \n     /// Checks if the value is an ASCII whitespace character:\n@@ -4590,10 +4569,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_whitespace(&self) -> bool {\n-        match *self {\n-            b'\\t' | b'\\n' | b'\\x0C' | b'\\r' | b' ' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'\\t' | b'\\n' | b'\\x0C' | b'\\r' | b' ')\n     }\n \n     /// Checks if the value is an ASCII control character:\n@@ -4627,10 +4603,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_control(&self) -> bool {\n-        match *self {\n-            b'\\0'..=b'\\x1F' | b'\\x7F' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'\\0'..=b'\\x1F' | b'\\x7F')\n     }\n }\n "}, {"sha": "a471b174534aa4e11d16781ecb1d1731d00ace64", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -187,10 +187,7 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_some(&self) -> bool {\n-        match *self {\n-            Some(_) => true,\n-            None => false,\n-        }\n+        matches!(*self, Some(_))\n     }\n \n     /// Returns `true` if the option is a [`None`] value."}, {"sha": "c6062493b8608846ebc21a2116dd635a4fa10a13", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -282,10 +282,7 @@ impl<T, E> Result<T, E> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn is_ok(&self) -> bool {\n-        match *self {\n-            Ok(_) => true,\n-            Err(_) => false,\n-        }\n+        matches!(*self, Ok(_))\n     }\n \n     /// Returns `true` if the result is [`Err`]."}, {"sha": "46d9499394a381c33eb8450ecb16a57b5739247e", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -46,10 +46,7 @@ pub trait Pattern<'a>: Sized {\n     /// Checks whether the pattern matches at the front of the haystack\n     #[inline]\n     fn is_prefix_of(self, haystack: &'a str) -> bool {\n-        match self.into_searcher(haystack).next() {\n-            SearchStep::Match(0, _) => true,\n-            _ => false,\n-        }\n+        matches!(self.into_searcher(haystack).next(), SearchStep::Match(0, _))\n     }\n \n     /// Checks whether the pattern matches at the back of the haystack\n@@ -58,10 +55,7 @@ pub trait Pattern<'a>: Sized {\n     where\n         Self::Searcher: ReverseSearcher<'a>,\n     {\n-        match self.into_searcher(haystack).next_back() {\n-            SearchStep::Match(_, j) if haystack.len() == j => true,\n-            _ => false,\n-        }\n+        matches!(self.into_searcher(haystack).next_back(), SearchStep::Match(_, j) if haystack.len() == j)\n     }\n }\n "}, {"sha": "b3a4bd20b8f042fabf7d818fab9eda88a0bd861b", "filename": "src/libcore/task/poll.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibcore%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibcore%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fpoll.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -39,10 +39,7 @@ impl<T> Poll<T> {\n     #[inline]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub fn is_ready(&self) -> bool {\n-        match *self {\n-            Poll::Ready(_) => true,\n-            Poll::Pending => false,\n-        }\n+        matches!(*self, Poll::Ready(_))\n     }\n \n     /// Returns `true` if this is `Poll::Pending`"}, {"sha": "06b7b3194defd020fea99afe3f6041f79674dfd4", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -4,7 +4,7 @@\n //! conflicts between multiple such attributes attached to the same\n //! item.\n \n-use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use crate::hir::map::Map;\n use crate::lint::builtin::UNUSED_ATTRIBUTES;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n@@ -13,6 +13,7 @@ use errors::struct_span_err;\n use rustc_error_codes::*;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::DUMMY_HIR_ID;\n use rustc_hir::{self, HirId, Item, ItemKind, TraitItem, TraitItemKind};\n use rustc_span::symbol::sym;\n@@ -519,7 +520,9 @@ impl CheckAttrVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "016fc939a7a172bfb17d2230b9368efd46704879", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -11,9 +11,9 @@\n //! nested within a uniquely determined `FnLike`), and users can ask\n //! for the `Code` associated with a particular NodeId.\n \n-use crate::hir::intravisit::FnKind;\n-use crate::hir::map;\n-use rustc_hir as ast;\n+use crate::hir::map::Map;\n+use rustc_hir as hir;\n+use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Expr, FnDecl, Node};\n use rustc_span::Span;\n use syntax::ast::{Attribute, Ident};\n@@ -39,37 +39,37 @@ trait MaybeFnLike {\n     fn is_fn_like(&self) -> bool;\n }\n \n-impl MaybeFnLike for ast::Item<'_> {\n+impl MaybeFnLike for hir::Item<'_> {\n     fn is_fn_like(&self) -> bool {\n         match self.kind {\n-            ast::ItemKind::Fn(..) => true,\n+            hir::ItemKind::Fn(..) => true,\n             _ => false,\n         }\n     }\n }\n \n-impl MaybeFnLike for ast::ImplItem<'_> {\n+impl MaybeFnLike for hir::ImplItem<'_> {\n     fn is_fn_like(&self) -> bool {\n         match self.kind {\n-            ast::ImplItemKind::Method(..) => true,\n+            hir::ImplItemKind::Method(..) => true,\n             _ => false,\n         }\n     }\n }\n \n-impl MaybeFnLike for ast::TraitItem<'_> {\n+impl MaybeFnLike for hir::TraitItem<'_> {\n     fn is_fn_like(&self) -> bool {\n         match self.kind {\n-            ast::TraitItemKind::Method(_, ast::TraitMethod::Provided(_)) => true,\n+            hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => true,\n             _ => false,\n         }\n     }\n }\n \n-impl MaybeFnLike for ast::Expr<'_> {\n+impl MaybeFnLike for hir::Expr<'_> {\n     fn is_fn_like(&self) -> bool {\n         match self.kind {\n-            ast::ExprKind::Closure(..) => true,\n+            hir::ExprKind::Closure(..) => true,\n             _ => false,\n         }\n     }\n@@ -85,21 +85,21 @@ pub enum Code<'a> {\n }\n \n impl<'a> Code<'a> {\n-    pub fn id(&self) -> ast::HirId {\n+    pub fn id(&self) -> hir::HirId {\n         match *self {\n             Code::FnLike(node) => node.id(),\n             Code::Expr(block) => block.hir_id,\n         }\n     }\n \n     /// Attempts to construct a Code from presumed FnLike or Expr node input.\n-    pub fn from_node(map: &map::Map<'a>, id: ast::HirId) -> Option<Code<'a>> {\n+    pub fn from_node(map: &Map<'a>, id: hir::HirId) -> Option<Code<'a>> {\n         match map.get(id) {\n-            map::Node::Block(_) => {\n+            Node::Block(_) => {\n                 //  Use the parent, hopefully an expression node.\n                 Code::from_node(map, map.get_parent_node(id))\n             }\n-            map::Node::Expr(expr) => Some(Code::Expr(expr)),\n+            Node::Expr(expr) => Some(Code::Expr(expr)),\n             node => FnLikeNode::from_node(node).map(Code::FnLike),\n         }\n     }\n@@ -109,12 +109,12 @@ impl<'a> Code<'a> {\n /// use when implementing FnLikeNode operations.\n struct ItemFnParts<'a> {\n     ident: Ident,\n-    decl: &'a ast::FnDecl<'a>,\n-    header: ast::FnHeader,\n-    vis: &'a ast::Visibility<'a>,\n-    generics: &'a ast::Generics<'a>,\n-    body: ast::BodyId,\n-    id: ast::HirId,\n+    decl: &'a hir::FnDecl<'a>,\n+    header: hir::FnHeader,\n+    vis: &'a hir::Visibility<'a>,\n+    generics: &'a hir::Generics<'a>,\n+    body: hir::BodyId,\n+    id: hir::HirId,\n     span: Span,\n     attrs: &'a [Attribute],\n }\n@@ -123,17 +123,17 @@ struct ItemFnParts<'a> {\n /// for use when implementing FnLikeNode operations.\n struct ClosureParts<'a> {\n     decl: &'a FnDecl<'a>,\n-    body: ast::BodyId,\n-    id: ast::HirId,\n+    body: hir::BodyId,\n+    id: hir::HirId,\n     span: Span,\n     attrs: &'a [Attribute],\n }\n \n impl<'a> ClosureParts<'a> {\n     fn new(\n         d: &'a FnDecl<'a>,\n-        b: ast::BodyId,\n-        id: ast::HirId,\n+        b: hir::BodyId,\n+        id: hir::HirId,\n         s: Span,\n         attrs: &'a [Attribute],\n     ) -> Self {\n@@ -145,65 +145,65 @@ impl<'a> FnLikeNode<'a> {\n     /// Attempts to construct a FnLikeNode from presumed FnLike node input.\n     pub fn from_node(node: Node<'_>) -> Option<FnLikeNode<'_>> {\n         let fn_like = match node {\n-            map::Node::Item(item) => item.is_fn_like(),\n-            map::Node::TraitItem(tm) => tm.is_fn_like(),\n-            map::Node::ImplItem(it) => it.is_fn_like(),\n-            map::Node::Expr(e) => e.is_fn_like(),\n+            Node::Item(item) => item.is_fn_like(),\n+            Node::TraitItem(tm) => tm.is_fn_like(),\n+            Node::ImplItem(it) => it.is_fn_like(),\n+            Node::Expr(e) => e.is_fn_like(),\n             _ => false,\n         };\n         fn_like.then_some(FnLikeNode { node })\n     }\n \n-    pub fn body(self) -> ast::BodyId {\n+    pub fn body(self) -> hir::BodyId {\n         self.handle(\n             |i: ItemFnParts<'a>| i.body,\n-            |_, _, _: &'a ast::FnSig<'a>, _, body: ast::BodyId, _, _| body,\n+            |_, _, _: &'a hir::FnSig<'a>, _, body: hir::BodyId, _, _| body,\n             |c: ClosureParts<'a>| c.body,\n         )\n     }\n \n     pub fn decl(self) -> &'a FnDecl<'a> {\n         self.handle(\n             |i: ItemFnParts<'a>| &*i.decl,\n-            |_, _, sig: &'a ast::FnSig<'a>, _, _, _, _| &sig.decl,\n+            |_, _, sig: &'a hir::FnSig<'a>, _, _, _, _| &sig.decl,\n             |c: ClosureParts<'a>| c.decl,\n         )\n     }\n \n     pub fn span(self) -> Span {\n         self.handle(\n             |i: ItemFnParts<'_>| i.span,\n-            |_, _, _: &'a ast::FnSig<'a>, _, _, span, _| span,\n+            |_, _, _: &'a hir::FnSig<'a>, _, _, span, _| span,\n             |c: ClosureParts<'_>| c.span,\n         )\n     }\n \n-    pub fn id(self) -> ast::HirId {\n+    pub fn id(self) -> hir::HirId {\n         self.handle(\n             |i: ItemFnParts<'_>| i.id,\n-            |id, _, _: &'a ast::FnSig<'a>, _, _, _, _| id,\n+            |id, _, _: &'a hir::FnSig<'a>, _, _, _, _| id,\n             |c: ClosureParts<'_>| c.id,\n         )\n     }\n \n-    pub fn constness(self) -> ast::Constness {\n-        self.kind().header().map_or(ast::Constness::NotConst, |header| header.constness)\n+    pub fn constness(self) -> hir::Constness {\n+        self.kind().header().map_or(hir::Constness::NotConst, |header| header.constness)\n     }\n \n-    pub fn asyncness(self) -> ast::IsAsync {\n-        self.kind().header().map_or(ast::IsAsync::NotAsync, |header| header.asyncness)\n+    pub fn asyncness(self) -> hir::IsAsync {\n+        self.kind().header().map_or(hir::IsAsync::NotAsync, |header| header.asyncness)\n     }\n \n-    pub fn unsafety(self) -> ast::Unsafety {\n-        self.kind().header().map_or(ast::Unsafety::Normal, |header| header.unsafety)\n+    pub fn unsafety(self) -> hir::Unsafety {\n+        self.kind().header().map_or(hir::Unsafety::Normal, |header| header.unsafety)\n     }\n \n     pub fn kind(self) -> FnKind<'a> {\n         let item = |p: ItemFnParts<'a>| -> FnKind<'a> {\n             FnKind::ItemFn(p.ident, p.generics, p.header, p.vis, p.attrs)\n         };\n         let closure = |c: ClosureParts<'a>| FnKind::Closure(c.attrs);\n-        let method = |_, ident: Ident, sig: &'a ast::FnSig<'a>, vis, _, _, attrs| {\n+        let method = |_, ident: Ident, sig: &'a hir::FnSig<'a>, vis, _, _, attrs| {\n             FnKind::Method(ident, sig, vis, attrs)\n         };\n         self.handle(item, method, closure)\n@@ -213,19 +213,19 @@ impl<'a> FnLikeNode<'a> {\n     where\n         I: FnOnce(ItemFnParts<'a>) -> A,\n         M: FnOnce(\n-            ast::HirId,\n+            hir::HirId,\n             Ident,\n-            &'a ast::FnSig<'a>,\n-            Option<&'a ast::Visibility<'a>>,\n-            ast::BodyId,\n+            &'a hir::FnSig<'a>,\n+            Option<&'a hir::Visibility<'a>>,\n+            hir::BodyId,\n             Span,\n             &'a [Attribute],\n         ) -> A,\n         C: FnOnce(ClosureParts<'a>) -> A,\n     {\n         match self.node {\n-            map::Node::Item(i) => match i.kind {\n-                ast::ItemKind::Fn(ref sig, ref generics, block) => item_fn(ItemFnParts {\n+            Node::Item(i) => match i.kind {\n+                hir::ItemKind::Fn(ref sig, ref generics, block) => item_fn(ItemFnParts {\n                     id: i.hir_id,\n                     ident: i.ident,\n                     decl: &sig.decl,\n@@ -238,20 +238,20 @@ impl<'a> FnLikeNode<'a> {\n                 }),\n                 _ => bug!(\"item FnLikeNode that is not fn-like\"),\n             },\n-            map::Node::TraitItem(ti) => match ti.kind {\n-                ast::TraitItemKind::Method(ref sig, ast::TraitMethod::Provided(body)) => {\n+            Node::TraitItem(ti) => match ti.kind {\n+                hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n                     method(ti.hir_id, ti.ident, sig, None, body, ti.span, &ti.attrs)\n                 }\n                 _ => bug!(\"trait method FnLikeNode that is not fn-like\"),\n             },\n-            map::Node::ImplItem(ii) => match ii.kind {\n-                ast::ImplItemKind::Method(ref sig, body) => {\n+            Node::ImplItem(ii) => match ii.kind {\n+                hir::ImplItemKind::Method(ref sig, body) => {\n                     method(ii.hir_id, ii.ident, sig, Some(&ii.vis), body, ii.span, &ii.attrs)\n                 }\n                 _ => bug!(\"impl method FnLikeNode that is not fn-like\"),\n             },\n-            map::Node::Expr(e) => match e.kind {\n-                ast::ExprKind::Closure(_, ref decl, block, _fn_decl_span, _gen) => {\n+            Node::Expr(e) => match e.kind {\n+                hir::ExprKind::Closure(_, ref decl, block, _fn_decl_span, _gen) => {\n                     closure(ClosureParts::new(&decl, block, e.hir_id, e.span, &e.attrs))\n                 }\n                 _ => bug!(\"expr FnLikeNode that is not fn-like\"),"}, {"sha": "b6be4bb00199656f8948306b21d37a200f56271b", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,22 +1,24 @@\n-use super::*;\n-use crate::dep_graph::{DepGraph, DepKind, DepNodeIndex};\n-use crate::hir::intravisit::{NestedVisitorMap, Visitor};\n-use crate::hir::map::HirEntryMap;\n-use crate::ich::Fingerprint;\n+use crate::dep_graph::{DepGraph, DepKind, DepNode, DepNodeIndex};\n+use crate::hir::map::definitions::{self, DefPathHash};\n+use crate::hir::map::{Entry, HirEntryMap, Map};\n+use crate::ich::StableHashingContext;\n use crate::middle::cstore::CrateStore;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n+use rustc_hir::def_id::CRATE_DEF_INDEX;\n use rustc_hir::def_id::{CrateNum, DefIndex, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::*;\n use rustc_index::vec::IndexVec;\n use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::source_map::SourceMap;\n-use rustc_span::Span;\n-use std::iter::repeat;\n+use rustc_span::{Span, Symbol, DUMMY_SP};\n use syntax::ast::NodeId;\n \n-use crate::ich::StableHashingContext;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use std::iter::repeat;\n \n /// A visitor that walks over the HIR and collects `Node`s into a HIR map.\n pub(super) struct NodeCollector<'a, 'hir> {\n@@ -49,15 +51,12 @@ pub(super) struct NodeCollector<'a, 'hir> {\n     hir_body_nodes: Vec<(DefPathHash, Fingerprint)>,\n }\n \n-fn input_dep_node_and_hash<I>(\n+fn input_dep_node_and_hash(\n     dep_graph: &DepGraph,\n     hcx: &mut StableHashingContext<'_>,\n     dep_node: DepNode,\n-    input: I,\n-) -> (DepNodeIndex, Fingerprint)\n-where\n-    I: for<'a> HashStable<StableHashingContext<'a>>,\n-{\n+    input: impl for<'a> HashStable<StableHashingContext<'a>>,\n+) -> (DepNodeIndex, Fingerprint) {\n     let dep_node_index = dep_graph.input_task(dep_node, &mut *hcx, &input).1;\n \n     let hash = if dep_graph.is_fully_enabled() {\n@@ -71,16 +70,13 @@ where\n     (dep_node_index, hash)\n }\n \n-fn alloc_hir_dep_nodes<I>(\n+fn alloc_hir_dep_nodes(\n     dep_graph: &DepGraph,\n     hcx: &mut StableHashingContext<'_>,\n     def_path_hash: DefPathHash,\n-    item_like: I,\n+    item_like: impl for<'a> HashStable<StableHashingContext<'a>>,\n     hir_body_nodes: &mut Vec<(DefPathHash, Fingerprint)>,\n-) -> (DepNodeIndex, DepNodeIndex)\n-where\n-    I: for<'a> HashStable<StableHashingContext<'a>>,\n-{\n+) -> (DepNodeIndex, DepNodeIndex) {\n     let sig = dep_graph\n         .input_task(\n             def_path_hash.to_dep_node(DepKind::Hir),\n@@ -98,6 +94,21 @@ where\n     (sig, full)\n }\n \n+fn upstream_crates(cstore: &dyn CrateStore) -> Vec<(Symbol, Fingerprint, Svh)> {\n+    let mut upstream_crates: Vec<_> = cstore\n+        .crates_untracked()\n+        .iter()\n+        .map(|&cnum| {\n+            let name = cstore.crate_name_untracked(cnum);\n+            let disambiguator = cstore.crate_disambiguator_untracked(cnum).to_fingerprint();\n+            let hash = cstore.crate_hash_untracked(cnum);\n+            (name, disambiguator, hash)\n+        })\n+        .collect();\n+    upstream_crates.sort_unstable_by_key(|&(name, dis, _)| (name.as_str(), dis));\n+    upstream_crates\n+}\n+\n impl<'a, 'hir> NodeCollector<'a, 'hir> {\n     pub(super) fn root(\n         sess: &'a Session,\n@@ -190,18 +201,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             },\n         );\n \n-        let mut upstream_crates: Vec<_> = cstore\n-            .crates_untracked()\n-            .iter()\n-            .map(|&cnum| {\n-                let name = cstore.crate_name_untracked(cnum);\n-                let disambiguator = cstore.crate_disambiguator_untracked(cnum).to_fingerprint();\n-                let hash = cstore.crate_hash_untracked(cnum);\n-                (name, disambiguator, hash)\n-            })\n-            .collect();\n-\n-        upstream_crates.sort_unstable_by_key(|&(name, dis, _)| (name.as_str(), dis));\n+        let upstream_crates = upstream_crates(cstore);\n \n         // We hash the final, remapped names of all local source files so we\n         // don't have to include the path prefix remapping commandline args.\n@@ -336,11 +336,13 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n }\n \n impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n+    type Map = Map<'hir>;\n+\n     /// Because we want to track parent items and so forth, enable\n     /// deep walking so that we walk nested items in the context of\n     /// their outer items.\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'hir> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         panic!(\"`visit_nested_xxx` must be manually implemented in this visitor\");\n     }\n "}, {"sha": "ac2d7a9a8dc2a953dd1a9c3b75be09068739e55e", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -4,7 +4,7 @@\n //! There are also some rather random cases (like const initializer\n //! expressions) that are mostly just leftovers.\n \n-use crate::ich::Fingerprint;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_hir as hir;\n@@ -15,10 +15,11 @@ use rustc_session::CrateDisambiguator;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n+use syntax::ast;\n+\n use std::borrow::Borrow;\n use std::fmt::Write;\n use std::hash::Hash;\n-use syntax::ast;\n \n /// The `DefPathTable` maps `DefIndex`es to `DefKey`s and vice versa.\n /// Internally the `DefPathTable` holds a tree of `DefKey`s, where each `DefKey`"}, {"sha": "76e42b8af2874a674a2a4fbd8af6abfd9f6c8a24", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,9 +1,9 @@\n-use crate::hir::intravisit;\n use crate::hir::map::Map;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_iter, Lock, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n+use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirId, ItemLocalId};\n \n@@ -133,7 +133,9 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n }\n \n impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'hir> {\n+    type Map = Map<'hir>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n         intravisit::NestedVisitorMap::OnlyBodies(self.hir_map)\n     }\n "}, {"sha": "e18ab7848feaae9c3707b3031fa1903721288b95", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -4,21 +4,21 @@ pub use self::definitions::{\n };\n \n use crate::dep_graph::{DepGraph, DepKind, DepNode, DepNodeIndex};\n-use crate::hir::intravisit;\n use crate::middle::cstore::CrateStoreDyn;\n use crate::ty::query::Providers;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::print::Nested;\n use rustc_hir::*;\n use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::kw;\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, Name, NodeId};\n \n@@ -186,12 +186,12 @@ struct ParentHirIterator<'map, 'hir> {\n }\n \n impl<'map, 'hir> ParentHirIterator<'map, 'hir> {\n-    fn new(current_id: HirId, map: &'map Map<'hir>) -> ParentHirIterator<'map, 'hir> {\n-        ParentHirIterator { current_id, map }\n+    fn new(current_id: HirId, map: &'map Map<'hir>) -> Self {\n+        Self { current_id, map }\n     }\n }\n \n-impl<'map, 'hir> Iterator for ParentHirIterator<'map, 'hir> {\n+impl<'hir> Iterator for ParentHirIterator<'_, 'hir> {\n     type Item = (HirId, Node<'hir>);\n \n     fn next(&mut self) -> Option<Self::Item> {\n@@ -405,6 +405,14 @@ impl<'hir> Map<'hir> {\n         self.forest.krate()\n     }\n \n+    pub fn item(&self, id: HirId) -> &'hir Item<'hir> {\n+        self.read(id);\n+\n+        // N.B., intentionally bypass `self.forest.krate()` so that we\n+        // do not trigger a read of the whole krate here\n+        self.forest.krate.item(id)\n+    }\n+\n     pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {\n         self.read(id.hir_id);\n \n@@ -1085,6 +1093,24 @@ impl<'hir> Map<'hir> {\n     }\n }\n \n+impl<'hir> intravisit::Map<'hir> for Map<'hir> {\n+    fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n+        self.body(id)\n+    }\n+\n+    fn item(&self, id: HirId) -> &'hir Item<'hir> {\n+        self.item(id)\n+    }\n+\n+    fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {\n+        self.trait_item(id)\n+    }\n+\n+    fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {\n+        self.impl_item(id)\n+    }\n+}\n+\n pub struct NodesMatchingSuffix<'a> {\n     map: &'a Map<'a>,\n     item_name: &'a String,"}, {"sha": "97c14dd7e00541f180cbc407dc07d0ed11eca243", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -4,7 +4,6 @@\n \n pub mod check_attr;\n pub mod exports;\n-pub mod intravisit;\n pub mod map;\n pub mod upvars;\n "}, {"sha": "4ca294f48615536a01498979d659079c165fe092", "filename": "src/librustc/hir/upvars.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fhir%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fhir%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fupvars.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,11 +1,12 @@\n //! Upvar (closure capture) collection from cross-body HIR uses of `Res::Local`s.\n \n-use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use crate::hir::map::Map;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{self, HirId};\n use rustc_span::Span;\n \n@@ -43,7 +44,9 @@ struct LocalCollector {\n }\n \n impl Visitor<'tcx> for LocalCollector {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -70,7 +73,9 @@ impl CaptureCollector<'_, '_> {\n }\n \n impl Visitor<'tcx> for CaptureCollector<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "16cfaec5ee91b852480cd5029fc5fd4d835ed2cb", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,4 +1,3 @@\n-use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use crate::hir::map::Map;\n use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::InferCtxt;\n@@ -7,6 +6,7 @@ use crate::ty::{self, DefIdTree, Infer, Ty, TyVar};\n use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, FunctionRetTy, HirId, Local, Pat};\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::kw;\n@@ -66,7 +66,9 @@ impl<'a, 'tcx> FindLocalByTypeVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for FindLocalByTypeVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.hir_map)\n     }\n "}, {"sha": "8e2592b5318855a9ac70ad62c69a1ac12828cc30", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,8 +1,9 @@\n-use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use crate::hir::map::Map;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::middle::resolve_lifetime as rl;\n use crate::ty::{self, Region, TyCtxt};\n use rustc_hir as hir;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::Node;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n@@ -90,7 +91,9 @@ struct FindNestedTypeVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n@@ -207,7 +210,9 @@ struct TyPathVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for TyPathVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Map<'tcx>> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "0bc49a290150554055f9c38bd47d6084f4014f72", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -204,9 +204,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         // want to stop at the first constraint that makes a change.\n         let mut any_changed = false;\n         for member_constraint in &self.data.member_constraints {\n-            if self.enforce_member_constraint(graph, member_constraint, var_values) {\n-                any_changed = true;\n-            }\n+            any_changed |= self.enforce_member_constraint(graph, member_constraint, var_values);\n         }\n         any_changed\n     }\n@@ -337,9 +335,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             for index in live_indices.iter() {\n                 let constraint = constraints[index];\n                 let (edge_changed, retain) = process_constraint(constraint);\n-                if edge_changed {\n-                    changed = true;\n-                }\n+                changed |= edge_changed;\n                 if !retain {\n                     let changed = killed_indices.insert(index);\n                     debug_assert!(changed);"}, {"sha": "3f43800590353dea0c72e619a27a73707c16e376", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -21,11 +21,10 @@\n pub use self::Level::*;\n pub use self::LintSource::*;\n \n-use rustc_data_structures::sync;\n-\n use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::ty::TyCtxt;\n use errors::{DiagnosticBuilder, DiagnosticId};\n+use rustc_data_structures::sync;\n use rustc_hir as hir;\n use rustc_session::node_id::NodeMap;\n use rustc_session::{DiagnosticMessageId, Session};\n@@ -109,13 +108,13 @@ macro_rules! late_lint_methods {\n             fn check_where_predicate(a: &$hir hir::WherePredicate<$hir>);\n             fn check_poly_trait_ref(a: &$hir hir::PolyTraitRef<$hir>, b: hir::TraitBoundModifier);\n             fn check_fn(\n-                a: $crate::hir::intravisit::FnKind<$hir>,\n+                a: rustc_hir::intravisit::FnKind<$hir>,\n                 b: &$hir hir::FnDecl<$hir>,\n                 c: &$hir hir::Body<$hir>,\n                 d: Span,\n                 e: hir::HirId);\n             fn check_fn_post(\n-                a: $crate::hir::intravisit::FnKind<$hir>,\n+                a: rustc_hir::intravisit::FnKind<$hir>,\n                 b: &$hir hir::FnDecl<$hir>,\n                 c: &$hir hir::Body<$hir>,\n                 d: Span,"}, {"sha": "89f385a51bc6a186339efa84650430854f57b700", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -3,13 +3,13 @@\n use crate::middle::lang_items;\n use crate::session::config;\n \n-use crate::hir::intravisit;\n-use crate::hir::intravisit::{NestedVisitorMap, Visitor};\n+use crate::hir::map::Map;\n use crate::ty::TyCtxt;\n use errors::struct_span_err;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::PanicStrategy;\n@@ -136,7 +136,9 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+    type Map = Map<'v>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Map<'v>> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "5b8eb34ead1b387843683dcd0a2c9af1aa3ed826", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -2075,7 +2075,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n                 let mut err = self.need_type_info_err(body_id, span, self_ty, ErrorCode::E0283);\n                 err.note(&format!(\"cannot resolve `{}`\", predicate));\n-                if let (Ok(ref snippet), ObligationCauseCode::BindingObligation(ref def_id, _)) =\n+                if let ObligationCauseCode::ItemObligation(def_id) = obligation.cause.code {\n+                    self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n+                } else if let (\n+                    Ok(ref snippet),\n+                    ObligationCauseCode::BindingObligation(ref def_id, _),\n+                ) =\n                     (self.tcx.sess.source_map().span_to_snippet(span), &obligation.cause.code)\n                 {\n                     let generics = self.tcx.generics_of(*def_id);\n@@ -2173,6 +2178,30 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n+    fn suggest_fully_qualified_path(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        def_id: DefId,\n+        span: Span,\n+        trait_ref: DefId,\n+    ) {\n+        if let Some(assoc_item) = self.tcx.opt_associated_item(def_id) {\n+            if let ty::AssocKind::Const | ty::AssocKind::Type = assoc_item.kind {\n+                err.note(&format!(\n+                    \"{}s cannot be accessed directly on a `trait`, they can only be \\\n+                        accessed through a specific `impl`\",\n+                    assoc_item.kind.suggestion_descr(),\n+                ));\n+                err.span_suggestion(\n+                    span,\n+                    \"use the fully qualified path to an implementation\",\n+                    format!(\"<Type as {}>::{}\", self.tcx.def_path_str(trait_ref), assoc_item.ident),\n+                    Applicability::HasPlaceholders,\n+                );\n+            }\n+        }\n+    }\n+\n     /// Returns `true` if the trait predicate may apply for *some* assignment\n     /// to the type parameters.\n     fn predicate_can_apply("}, {"sha": "acaa4eec9410d5e7a00bd6eebcef0eab07d38fbd", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -2507,17 +2507,21 @@ where\n         let extra_args = if sig.abi == RustCall {\n             assert!(!sig.c_variadic && extra_args.is_empty());\n \n-            match sig.inputs().last().unwrap().kind {\n-                ty::Tuple(tupled_arguments) => {\n+            if let Some(input) = sig.inputs().last() {\n+                if let ty::Tuple(tupled_arguments) = input.kind {\n                     inputs = &sig.inputs()[0..sig.inputs().len() - 1];\n                     tupled_arguments.iter().map(|k| k.expect_ty()).collect()\n-                }\n-                _ => {\n+                } else {\n                     bug!(\n                         \"argument to function with \\\"rust-call\\\" ABI \\\n-                         is not a tuple\"\n+                            is not a tuple\"\n                     );\n                 }\n+            } else {\n+                bug!(\n+                    \"argument to function with \\\"rust-call\\\" ABI \\\n+                        is not a tuple\"\n+                );\n             }\n         } else {\n             assert!(sig.c_variadic || extra_args.is_empty());"}, {"sha": "ddff8258c6d8f023e690d210efbb1d9bcb6a265b", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -533,8 +533,6 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         if self.is_mutable_static(def_id) {\n             self.mk_mut_ptr(static_ty)\n-        } else if self.is_foreign_item(def_id) {\n-            self.mk_imm_ptr(static_ty)\n         } else {\n             self.mk_imm_ref(self.lifetimes.re_erased, static_ty)\n         }"}, {"sha": "385153b62ce8296082bb2119f9749f89ee273f1f", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -36,8 +36,8 @@\n \n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n-use rustc::hir::intravisit;\n-use rustc::hir::map::{DefKey, DefPathData, Definitions};\n+use rustc::hir::map::definitions::{DefKey, DefPathData, Definitions};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::lint::builtin::{self, ELIDED_LIFETIMES_IN_PATHS};\n use rustc::middle::cstore::CrateStore;\n@@ -51,6 +51,7 @@ use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{DefId, DefIdMap, DefIndex, CRATE_DEF_INDEX};\n+use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, ParamName};\n use rustc_index::vec::IndexVec;\n use rustc_session::config::nightly_options;\n@@ -1484,7 +1485,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         impl<'r, 'a, 'v, 'hir> intravisit::Visitor<'v> for ImplTraitLifetimeCollector<'r, 'a, 'hir> {\n-            fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'v> {\n+            type Map = Map<'v>;\n+\n+            fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n                 intravisit::NestedVisitorMap::None\n             }\n "}, {"sha": "32ba2dd65a3fa8d5088fa05f74c165a08e587abd", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1679,7 +1679,6 @@ impl SharedEmitterMain {\n                         d.code(code);\n                     }\n                     handler.emit_diagnostic(&d);\n-                    handler.abort_if_errors_and_should_abort();\n                 }\n                 Ok(SharedEmitterMessage::InlineAsmError(cookie, msg)) => {\n                     sess.span_err(ExpnId::from_u32(cookie).expn_data().call_site, &msg)"}, {"sha": "8fbdf44de048d74f9d9f6ca7f9a0d10b27ca8250", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1178,7 +1178,6 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     if !info.payload().is::<errors::ExplicitBug>() {\n         let d = errors::Diagnostic::new(errors::Level::Bug, \"unexpected panic\");\n         handler.emit_diagnostic(&d);\n-        handler.abort_if_errors_and_should_abort();\n     }\n \n     let mut xs: Vec<Cow<'static, str>> = vec!["}, {"sha": "b2cc2a2273af25514dcbf5d3749f9a446646d2bf", "filename": "src/librustc_error_codes/error_codes/E0038.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0038.md", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0038.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0038.md?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -136,7 +136,7 @@ type parameters, the number of monomorphized implementations the compiler\n generates does not grow drastically, since the compiler will only generate an\n implementation if the function is called with unparametrized substitutions\n (i.e., substitutions where none of the substituted types are themselves\n-parametrized).\n+parameterized).\n \n However, with trait objects we have to make a table containing _every_ object\n that implements the trait. Now, if it has type parameters, we need to add"}, {"sha": "38ce9b43d0a2a5f869267c71f5bb5365bb132bae", "filename": "src/librustc_error_codes/error_codes/E0084.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0084.md", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0084.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0084.md?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -20,7 +20,7 @@ enum NightsWatch {\n }\n ```\n \n-or you remove the integer represention of your enum:\n+or you remove the integer representation of your enum:\n \n ```\n enum NightsWatch {}"}, {"sha": "4624f9e5b853112406f712328392b4541ff4bfee", "filename": "src/librustc_error_codes/error_codes/E0184.md", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0184.md", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0184.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0184.md?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,6 +1,20 @@\n-Explicitly implementing both Drop and Copy for a type is currently disallowed.\n-This feature can make some sense in theory, but the current implementation is\n-incorrect and can lead to memory unsafety (see [issue #20126][iss20126]), so\n-it has been disabled for now.\n+The `Copy` trait was implemented on a type with a `Drop` implementation.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0184\n+#[derive(Copy)]\n+struct Foo; // error!\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+    }\n+}\n+```\n+\n+Explicitly implementing both `Drop` and `Copy` trait on a type is currently\n+disallowed. This feature can make some sense in theory, but the current\n+implementation is incorrect and can lead to memory unsafety (see\n+[issue #20126][iss20126]), so it has been disabled for now.\n \n [iss20126]: https://github.com/rust-lang/rust/issues/20126"}, {"sha": "c628d176836f985b912d4abe1098773c8c54016b", "filename": "src/librustc_error_codes/error_codes/E0307.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0307.md", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0307.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0307.md?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -36,7 +36,7 @@ impl Trait for Foo {\n }\n ```\n \n-E0307 will be emitted by the compiler when using an invalid reciver type,\n+E0307 will be emitted by the compiler when using an invalid receiver type,\n like in the following example:\n \n ```compile_fail,E0307"}, {"sha": "808363e6eb04180b1d94df6179d11102faa34c82", "filename": "src/librustc_error_codes/error_codes/E0373.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0373.md", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0373.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0373.md?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -31,7 +31,7 @@ Since our new thread runs in parallel, the stack frame containing `x` and `y`\n may well have disappeared by the time we try to use them. Even if we call\n `thr.join()` within foo (which blocks until `thr` has completed, ensuring the\n stack frame won't disappear), we will not succeed: the compiler cannot prove\n-that this behaviour is safe, and so won't let us do it.\n+that this behavior is safe, and so won't let us do it.\n \n The solution to this problem is usually to switch to using a `move` closure.\n This approach moves (or copies, where possible) data into the closure, rather"}, {"sha": "275a83e606e400b4945220ffeef9c44d9dc0d0c7", "filename": "src/librustc_error_codes/error_codes/E0426.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0426.md", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0426.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0426.md?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -8,7 +8,7 @@ loop {\n }\n ```\n \n-Please verify you spelt or declare the label correctly. Example:\n+Please verify you spelled or declared the label correctly. Example:\n \n ```\n 'a: loop {"}, {"sha": "99a6d6f8ec2d49d190ceabd975df9dc7d33676d1", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -278,7 +278,6 @@ struct HandlerInner {\n     err_count: usize,\n     deduplicated_err_count: usize,\n     emitter: Box<dyn Emitter + sync::Send>,\n-    continue_after_error: bool,\n     delayed_span_bugs: Vec<Diagnostic>,\n \n     /// This set contains the `DiagnosticId` of all emitted diagnostics to avoid\n@@ -402,7 +401,6 @@ impl Handler {\n                 err_count: 0,\n                 deduplicated_err_count: 0,\n                 emitter,\n-                continue_after_error: true,\n                 delayed_span_bugs: Vec::new(),\n                 taught_diagnostics: Default::default(),\n                 emitted_diagnostic_codes: Default::default(),\n@@ -412,10 +410,6 @@ impl Handler {\n         }\n     }\n \n-    pub fn set_continue_after_error(&self, continue_after_error: bool) {\n-        self.inner.borrow_mut().continue_after_error = continue_after_error;\n-    }\n-\n     // This is here to not allow mutation of flags;\n     // as of this writing it's only used in tests in librustc.\n     pub fn can_emit_warnings(&self) -> bool {\n@@ -672,10 +666,6 @@ impl Handler {\n         self.inner.borrow_mut().abort_if_errors()\n     }\n \n-    pub fn abort_if_errors_and_should_abort(&self) {\n-        self.inner.borrow_mut().abort_if_errors_and_should_abort()\n-    }\n-\n     /// `true` if we haven't taught a diagnostic with this code already.\n     /// The caller must then teach the user about such a diagnostic.\n     ///\n@@ -696,7 +686,6 @@ impl Handler {\n     fn emit_diag_at_span(&self, mut diag: Diagnostic, sp: impl Into<MultiSpan>) {\n         let mut inner = self.inner.borrow_mut();\n         inner.emit_diagnostic(diag.set_span(sp));\n-        inner.abort_if_errors_and_should_abort();\n     }\n \n     pub fn emit_artifact_notification(&self, path: &Path, artifact_type: &str) {\n@@ -830,14 +819,6 @@ impl HandlerInner {\n         self.has_errors() || !self.delayed_span_bugs.is_empty()\n     }\n \n-    fn abort_if_errors_and_should_abort(&mut self) {\n-        self.emit_stashed_diagnostics();\n-\n-        if self.has_errors() && !self.continue_after_error {\n-            FatalError.raise();\n-        }\n-    }\n-\n     fn abort_if_errors(&mut self) {\n         self.emit_stashed_diagnostics();\n \n@@ -853,7 +834,6 @@ impl HandlerInner {\n \n     fn emit_diag_at_span(&mut self, mut diag: Diagnostic, sp: impl Into<MultiSpan>) {\n         self.emit_diagnostic(diag.set_span(sp));\n-        self.abort_if_errors_and_should_abort();\n     }\n \n     fn delay_span_bug(&mut self, sp: impl Into<MultiSpan>, msg: &str) {"}, {"sha": "4664340b15fb7d6222ebd74f7942f324adbe2671", "filename": "src/librustc_hir/intravisit.rs", "status": "renamed", "additions": 35, "deletions": 51, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -31,21 +31,18 @@\n //! This order consistency is required in a few places in rustc, for\n //! example generator inference, and possibly also HIR borrowck.\n \n-use crate::hir::map::Map;\n-\n-use rustc_hir::itemlikevisit::{ItemLikeVisitor, ParItemLikeVisitor};\n-use rustc_hir::*;\n+use crate::hir::*;\n+use crate::hir_id::CRATE_HIR_ID;\n+use crate::itemlikevisit::{ItemLikeVisitor, ParItemLikeVisitor};\n use rustc_span::Span;\n use syntax::ast::{Attribute, Ident, Label, Name};\n+use syntax::walk_list;\n \n pub struct DeepVisitor<'v, V> {\n     visitor: &'v mut V,\n }\n \n-impl<'v, 'hir, V> DeepVisitor<'v, V>\n-where\n-    V: Visitor<'hir> + 'v,\n-{\n+impl<'v, V> DeepVisitor<'v, V> {\n     pub fn new(base: &'v mut V) -> Self {\n         DeepVisitor { visitor: base }\n     }\n@@ -122,14 +119,22 @@ impl<'a> FnKind<'a> {\n     }\n }\n \n+/// An abstract representation of the HIR `rustc::hir::map::Map`.\n+pub trait Map<'hir> {\n+    fn body(&self, id: BodyId) -> &'hir Body<'hir>;\n+    fn item(&self, id: HirId) -> &'hir Item<'hir>;\n+    fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir>;\n+    fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir>;\n+}\n+\n /// Specifies what nested things a visitor wants to visit. The most\n /// common choice is `OnlyBodies`, which will cause the visitor to\n /// visit fn bodies for fns that it encounters, but skip over nested\n /// item-like things.\n ///\n /// See the comments on `ItemLikeVisitor` for more details on the overall\n /// visit strategy.\n-pub enum NestedVisitorMap<'this, 'tcx> {\n+pub enum NestedVisitorMap<'this, M> {\n     /// Do not visit any nested things. When you add a new\n     /// \"non-nested\" thing, you will want to audit such uses to see if\n     /// they remain valid.\n@@ -146,20 +151,20 @@ pub enum NestedVisitorMap<'this, 'tcx> {\n     /// to use `visit_all_item_likes()` as an outer loop,\n     /// and to have the visitor that visits the contents of each item\n     /// using this setting.\n-    OnlyBodies(&'this Map<'tcx>),\n+    OnlyBodies(&'this M),\n \n     /// Visits all nested things, including item-likes.\n     ///\n     /// **This is an unusual choice.** It is used when you want to\n     /// process everything within their lexical context. Typically you\n     /// kick off the visit by doing `walk_krate()`.\n-    All(&'this Map<'tcx>),\n+    All(&'this M),\n }\n \n-impl<'this, 'tcx> NestedVisitorMap<'this, 'tcx> {\n+impl<'this, M> NestedVisitorMap<'this, M> {\n     /// Returns the map to use for an \"intra item-like\" thing (if any).\n     /// E.g., function body.\n-    pub fn intra(self) -> Option<&'this Map<'tcx>> {\n+    fn intra(self) -> Option<&'this M> {\n         match self {\n             NestedVisitorMap::None => None,\n             NestedVisitorMap::OnlyBodies(map) => Some(map),\n@@ -169,7 +174,7 @@ impl<'this, 'tcx> NestedVisitorMap<'this, 'tcx> {\n \n     /// Returns the map to use for an \"item-like\" thing (if any).\n     /// E.g., item, impl-item.\n-    pub fn inter(self) -> Option<&'this Map<'tcx>> {\n+    fn inter(self) -> Option<&'this M> {\n         match self {\n             NestedVisitorMap::None => None,\n             NestedVisitorMap::OnlyBodies(_) => None,\n@@ -195,6 +200,8 @@ impl<'this, 'tcx> NestedVisitorMap<'this, 'tcx> {\n /// to monitor future changes to `Visitor` in case a new method with a\n /// new default implementation gets introduced.)\n pub trait Visitor<'v>: Sized {\n+    type Map: Map<'v>;\n+\n     ///////////////////////////////////////////////////////////////////////////\n     // Nested items.\n \n@@ -214,7 +221,7 @@ pub trait Visitor<'v>: Sized {\n     /// `panic!()`. This way, if a new `visit_nested_XXX` variant is\n     /// added in the future, we will see the panic in your code and\n     /// fix it appropriately.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v>;\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map>;\n \n     /// Invoked when a nested item is encountered. By default does\n     /// nothing unless you override `nested_visit_map` to return other than\n@@ -226,10 +233,8 @@ pub trait Visitor<'v>: Sized {\n     /// but cannot supply a `Map`; see `nested_visit_map` for advice.\n     #[allow(unused_variables)]\n     fn visit_nested_item(&mut self, id: ItemId) {\n-        let opt_item = self.nested_visit_map().inter().map(|map| map.expect_item(id.id));\n-        if let Some(item) = opt_item {\n-            self.visit_item(item);\n-        }\n+        let opt_item = self.nested_visit_map().inter().map(|map| map.item(id.id));\n+        walk_list!(self, visit_item, opt_item);\n     }\n \n     /// Like `visit_nested_item()`, but for trait items. See\n@@ -238,9 +243,7 @@ pub trait Visitor<'v>: Sized {\n     #[allow(unused_variables)]\n     fn visit_nested_trait_item(&mut self, id: TraitItemId) {\n         let opt_item = self.nested_visit_map().inter().map(|map| map.trait_item(id));\n-        if let Some(item) = opt_item {\n-            self.visit_trait_item(item);\n-        }\n+        walk_list!(self, visit_trait_item, opt_item);\n     }\n \n     /// Like `visit_nested_item()`, but for impl items. See\n@@ -249,9 +252,7 @@ pub trait Visitor<'v>: Sized {\n     #[allow(unused_variables)]\n     fn visit_nested_impl_item(&mut self, id: ImplItemId) {\n         let opt_item = self.nested_visit_map().inter().map(|map| map.impl_item(id));\n-        if let Some(item) = opt_item {\n-            self.visit_impl_item(item);\n-        }\n+        walk_list!(self, visit_impl_item, opt_item);\n     }\n \n     /// Invoked to visit the body of a function, method or closure. Like\n@@ -260,9 +261,7 @@ pub trait Visitor<'v>: Sized {\n     /// the body.\n     fn visit_nested_body(&mut self, id: BodyId) {\n         let opt_body = self.nested_visit_map().intra().map(|map| map.body(id));\n-        if let Some(body) = opt_body {\n-            self.visit_body(body);\n-        }\n+        walk_list!(self, visit_body, opt_body);\n     }\n \n     fn visit_param(&mut self, param: &'v Param<'v>) {\n@@ -496,21 +495,16 @@ pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime\n     }\n }\n \n-pub fn walk_poly_trait_ref<'v, V>(\n+pub fn walk_poly_trait_ref<'v, V: Visitor<'v>>(\n     visitor: &mut V,\n     trait_ref: &'v PolyTraitRef<'v>,\n     _modifier: TraitBoundModifier,\n-) where\n-    V: Visitor<'v>,\n-{\n+) {\n     walk_list!(visitor, visit_generic_param, trait_ref.bound_generic_params);\n     visitor.visit_trait_ref(&trait_ref.trait_ref);\n }\n \n-pub fn walk_trait_ref<'v, V>(visitor: &mut V, trait_ref: &'v TraitRef<'v>)\n-where\n-    V: Visitor<'v>,\n-{\n+pub fn walk_trait_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_ref: &'v TraitRef<'v>) {\n     visitor.visit_id(trait_ref.hir_ref_id);\n     visitor.visit_path(&trait_ref.path, trait_ref.hir_ref_id)\n }\n@@ -688,9 +682,7 @@ pub fn walk_qpath<'v, V: Visitor<'v>>(\n ) {\n     match *qpath {\n         QPath::Resolved(ref maybe_qself, ref path) => {\n-            if let Some(ref qself) = *maybe_qself {\n-                visitor.visit_ty(qself);\n-            }\n+            walk_list!(visitor, visit_ty, maybe_qself);\n             visitor.visit_path(path, id)\n         }\n         QPath::TypeRelative(ref qself, ref segment) => {\n@@ -712,9 +704,7 @@ pub fn walk_path_segment<'v, V: Visitor<'v>>(\n     segment: &'v PathSegment<'v>,\n ) {\n     visitor.visit_ident(segment.ident);\n-    if let Some(id) = segment.hir_id {\n-        visitor.visit_id(id);\n-    }\n+    walk_list!(visitor, visit_id, segment.hir_id);\n     if let Some(ref args) = segment.args {\n         visitor.visit_generic_args(path_span, args);\n     }\n@@ -1003,9 +993,7 @@ pub fn walk_struct_def<'v, V: Visitor<'v>>(\n     visitor: &mut V,\n     struct_definition: &'v VariantData<'v>,\n ) {\n-    if let Some(ctor_hir_id) = struct_definition.ctor_hir_id() {\n-        visitor.visit_id(ctor_hir_id);\n-    }\n+    walk_list!(visitor, visit_id, struct_definition.ctor_hir_id());\n     walk_list!(visitor, visit_struct_field, struct_definition.fields());\n }\n \n@@ -1125,15 +1113,11 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             visitor.visit_qpath(qpath, expression.hir_id, expression.span);\n         }\n         ExprKind::Break(ref destination, ref opt_expr) => {\n-            if let Some(ref label) = destination.label {\n-                visitor.visit_label(label);\n-            }\n+            walk_list!(visitor, visit_label, &destination.label);\n             walk_list!(visitor, visit_expr, opt_expr);\n         }\n         ExprKind::Continue(ref destination) => {\n-            if let Some(ref label) = destination.label {\n-                visitor.visit_label(label);\n-            }\n+            walk_list!(visitor, visit_label, &destination.label);\n         }\n         ExprKind::Ret(ref optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);", "previous_filename": "src/librustc/hir/intravisit.rs"}, {"sha": "66494d0fa736c9839508f251866a45de94a8c841", "filename": "src/librustc_hir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_hir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_hir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flib.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -15,6 +15,7 @@ pub mod def;\n pub mod def_id;\n mod hir;\n pub mod hir_id;\n+pub mod intravisit;\n pub mod itemlikevisit;\n pub mod pat_util;\n pub mod print;"}, {"sha": "9490128e32d6a3e6eed9edcb46c2e0dc2f89a939", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -36,12 +36,13 @@\n use graphviz as dot;\n use rustc::dep_graph::debug::{DepNodeFilter, EdgeFilter};\n use rustc::dep_graph::{DepGraphQuery, DepKind, DepNode};\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::implementation::{Direction, NodeIndex, INCOMING, OUTGOING};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use syntax::ast;\n@@ -159,7 +160,9 @@ impl IfThisChanged<'tcx> {\n }\n \n impl Visitor<'tcx> for IfThisChanged<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "ddfed53fa33491895e08504ae7727129af63ad74", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -14,12 +14,13 @@\n //! the required condition is not met.\n \n use rustc::dep_graph::{label_strs, DepNode};\n-use rustc::hir::intravisit;\n+use rustc::hir::map::Map;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::Node as HirNode;\n use rustc_hir::{ImplItemKind, ItemKind as HirItem, TraitItemKind};\n@@ -547,7 +548,9 @@ impl FindAllAttrs<'tcx> {\n }\n \n impl intravisit::Visitor<'tcx> for FindAllAttrs<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n         intravisit::NestedVisitorMap::All(&self.tcx.hir())\n     }\n "}, {"sha": "6e776e7d5542406b346514031a2625b67d3ee939", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -54,16 +54,13 @@ use std::rc::Rc;\n use std::{env, fs, iter, mem};\n \n pub fn parse<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n-    sess.diagnostic().set_continue_after_error(sess.opts.debugging_opts.continue_parse_after_error);\n     let krate = sess.time(\"parsing\", || match input {\n         Input::File(file) => parse_crate_from_file(file, &sess.parse_sess),\n         Input::Str { input, name } => {\n             parse_crate_from_source_str(name.clone(), input.clone(), &sess.parse_sess)\n         }\n     })?;\n \n-    sess.diagnostic().set_continue_after_error(true);\n-\n     if sess.opts.debugging_opts.ast_json_noexpand {\n         println!(\"{}\", json::as_json(&krate));\n     }"}, {"sha": "c2e9c35fcd4a71c7be05862f349e675367b9c3a7", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -601,10 +601,6 @@ fn test_debugging_options_tracking_hash() {\n     opts.debugging_opts.report_delayed_bugs = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n-    opts = reference.clone();\n-    opts.debugging_opts.continue_parse_after_error = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n     opts = reference.clone();\n     opts.debugging_opts.force_overflow_checks = Some(true);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}, {"sha": "23740af525971e98d34e0b8b5cd1811cce7bc462", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -25,6 +25,7 @@ use std::fmt::Write;\n \n use lint::{EarlyContext, EarlyLintPass, LateLintPass, LintPass};\n use lint::{LateContext, LintArray, LintContext};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::lint::FutureIncompatibleInfo;\n use rustc::traits::misc::can_type_implement_copy;\n@@ -1088,12 +1089,14 @@ impl TypeAliasBounds {\n         // bound.  Let's see if this type does that.\n \n         // We use a HIR visitor to walk the type.\n-        use rustc::hir::intravisit::{self, Visitor};\n+        use rustc_hir::intravisit::{self, Visitor};\n         struct WalkAssocTypes<'a, 'db> {\n             err: &'a mut DiagnosticBuilder<'db>,\n         }\n         impl<'a, 'db, 'v> Visitor<'v> for WalkAssocTypes<'a, 'db> {\n-            fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'v> {\n+            type Map = Map<'v>;\n+\n+            fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n                 intravisit::NestedVisitorMap::None\n             }\n "}, {"sha": "a37e3be9ced92fedc4a0074dc2bea6e3dd9bde86", "filename": "src/librustc_lint/late.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_lint%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_lint%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flate.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -14,15 +14,16 @@\n //! upon. As the ast is traversed, this keeps track of the current lint level\n //! for all lint attributes.\n \n-use rustc::hir::intravisit as hir_visit;\n-use rustc::hir::intravisit::Visitor;\n+use rustc::hir::map::Map;\n use rustc::lint::LateContext;\n use rustc::lint::LintPass;\n use rustc::lint::{LateLintPass, LateLintPassObject};\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::sync::{join, par_iter, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::intravisit as hir_visit;\n+use rustc_hir::intravisit::Visitor;\n use rustc_span::Span;\n use std::slice;\n use syntax::ast;\n@@ -86,10 +87,12 @@ impl<'a, 'tcx, T: LateLintPass<'a, 'tcx>> LateContextAndPass<'a, 'tcx, T> {\n impl<'a, 'tcx, T: LateLintPass<'a, 'tcx>> hir_visit::Visitor<'tcx>\n     for LateContextAndPass<'a, 'tcx, T>\n {\n+    type Map = Map<'tcx>;\n+\n     /// Because lints are scoped lexically, we want to walk nested\n     /// items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map<'this>(&'this mut self) -> hir_visit::NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> hir_visit::NestedVisitorMap<'this, Self::Map> {\n         hir_visit::NestedVisitorMap::All(&self.context.tcx.hir())\n     }\n "}, {"sha": "3d3e57fe2bae30bcd14038c660dbb544821fab67", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,9 +1,10 @@\n-use rustc::hir::intravisit;\n+use rustc::hir::map::Map;\n use rustc::lint::{LintLevelMap, LintLevelSets, LintLevelsBuilder, LintStore};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n+use rustc_hir::intravisit;\n use syntax::ast;\n \n pub use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintId};\n@@ -50,7 +51,9 @@ impl LintLevelMapBuilder<'_, '_> {\n }\n \n impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n         intravisit::NestedVisitorMap::All(&self.tcx.hir())\n     }\n "}, {"sha": "13e57ecf1469c4a59de3437b786bd90b903ae92a", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,10 +1,10 @@\n use lint::{EarlyContext, LateContext, LintArray, LintContext};\n use lint::{EarlyLintPass, LateLintPass, LintPass};\n-use rustc::hir::intravisit::FnKind;\n use rustc::lint;\n use rustc::ty;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::intravisit::FnKind;\n use rustc_hir::{GenericParamKind, PatKind};\n use rustc_span::symbol::sym;\n use rustc_span::{symbol::Ident, BytePos, Span};"}, {"sha": "952d3bb8582768bc87249424d773b4a402b28100", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -2,6 +2,7 @@ use crate::rmeta::table::FixedSizeEncoding;\n use crate::rmeta::*;\n \n use rustc::hir::map::definitions::DefPathTable;\n+use rustc::hir::map::Map;\n use rustc::middle::cstore::{EncodedMetadata, ForeignModule, LinkagePreference, NativeLibrary};\n use rustc::middle::dependency_format::Linkage;\n use rustc::middle::exported_symbols::{metadata_symbol_name, ExportedSymbol, SymbolExportLevel};\n@@ -35,9 +36,8 @@ use syntax::ast;\n use syntax::attr;\n use syntax::expand::is_proc_macro_attr;\n \n-use rustc::hir::intravisit;\n-use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir as hir;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n \n struct EncodeContext<'tcx> {\n@@ -1520,7 +1520,9 @@ impl EncodeContext<'tcx> {\n \n // FIXME(eddyb) make metadata encoding walk over all definitions, instead of HIR.\n impl Visitor<'tcx> for EncodeContext<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n     fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {"}, {"sha": "ce0c081bc160863d90f00acbd04e3048ac62201e", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -4,7 +4,7 @@ use super::_match::{expand_pattern, is_useful, MatchCheckCtxt, Matrix, PatStack}\n \n use super::{PatCtxt, PatKind, PatternError};\n \n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::session::Session;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n@@ -14,6 +14,7 @@ use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder\n use rustc_hir as hir;\n use rustc_hir::def::*;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{HirId, Pat};\n use rustc_span::symbol::sym;\n use rustc_span::{MultiSpan, Span};\n@@ -49,7 +50,9 @@ struct MatchVisitor<'a, 'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -730,7 +733,9 @@ fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pa\n     }\n \n     impl<'v> Visitor<'v> for AtBindingPatternVisitor<'_, '_, '_> {\n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+        type Map = Map<'v>;\n+\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n "}, {"sha": "a58d17569ef7181060d08335a57bc7900e8aae49", "filename": "src/librustc_mir/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_mir%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_mir%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flints.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,10 +1,10 @@\n-use rustc::hir::intravisit::FnKind;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::lint::builtin::UNCONDITIONAL_RECURSION;\n use rustc::mir::{self, Body, TerminatorKind};\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, AssocItem, AssocItemContainer, Instance, TyCtxt};\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::FnKind;\n use rustc_index::bit_set::BitSet;\n \n pub fn check(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId) {"}, {"sha": "02c54803842f0c7d815792fb4d737c92e7d6b7de", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,4 +1,4 @@\n-use rustc::hir::intravisit;\n+use rustc::hir::map::Map;\n use rustc::lint::builtin::{SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n use rustc::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc::mir::*;\n@@ -9,6 +9,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit;\n use rustc_hir::Node;\n use rustc_span::symbol::{sym, Symbol};\n \n@@ -476,7 +477,9 @@ struct UnusedUnsafeVisitor<'a> {\n }\n \n impl<'a, 'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n         intravisit::NestedVisitorMap::None\n     }\n "}, {"sha": "a2f76042ea72b965e06ac2b0f7cf64d852a8d6ce", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,11 +1,12 @@\n use crate::{build, shim};\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::mir::{BodyAndCache, ConstQualifs, MirPhase, Promoted};\n use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n use rustc::ty::{InstanceDef, TyCtxt, TypeFoldable};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::IndexVec;\n use rustc_span::Span;\n use std::borrow::Cow;\n@@ -85,7 +86,8 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n             }\n             intravisit::walk_struct_def(self, v)\n         }\n-        fn nested_visit_map<'b>(&'b mut self) -> NestedVisitorMap<'b, 'tcx> {\n+        type Map = Map<'tcx>;\n+        fn nested_visit_map<'b>(&'b mut self) -> NestedVisitorMap<'b, Self::Map> {\n             NestedVisitorMap::None\n         }\n     }"}, {"sha": "47e6e5ccc24fe2cc6666c419a8cb6da4b352c2f5", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -8,14 +8,14 @@\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n use errors::struct_span_err;\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::Map;\n use rustc::session::config::nightly_options;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_error_codes::*;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::{sym, Span, Symbol};\n use syntax::ast::Mutability;\n use syntax::feature_gate::feature_err;\n@@ -200,7 +200,9 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "f626a5f8cb0d1bd3c31f111c9a269275c991514a", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -2,7 +2,7 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::privacy;\n@@ -11,6 +11,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{Node, PatKind, TyKind};\n \n@@ -210,7 +211,9 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -563,11 +566,13 @@ impl DeadVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for DeadVisitor<'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// Walk nested items in place so that we don't report dead-code\n     /// on inner functions when the outer function is already getting\n     /// an error. We could do this also by checking the parents, but\n     /// this is how the code is setup and it seems harmless enough.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n "}, {"sha": "b6ca2b3a595db4d052557ad7af0f6e882bb7d907", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -2,10 +2,11 @@\n // pieces of AST and HIR. The resulting numbers are good approximations but not\n // completely accurate (some things might be counted twice, others missed).\n \n-use rustc::hir::intravisit as hir_visit;\n+use rustc::hir::map::Map;\n use rustc::util::common::to_readable_str;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n+use rustc_hir::intravisit as hir_visit;\n use rustc_hir::HirId;\n use rustc_span::Span;\n use syntax::ast::{self, AttrId, NodeId};\n@@ -92,7 +93,9 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_param(self, param)\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> hir_visit::NestedVisitorMap<'this, 'v> {\n+    type Map = Map<'v>;\n+\n+    fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<'_, Self::Map> {\n         panic!(\"visit_nested_xxx must be manually implemented in this visitor\")\n     }\n "}, {"sha": "ae8ac2e2c2e358ea601797ecc2799d5454ad24d2", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,12 +1,12 @@\n use errors::struct_span_err;\n+use rustc::hir::map::Map;\n use rustc::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n-\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir as hir;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::Idx;\n use rustc_span::{sym, Span};\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n@@ -124,7 +124,9 @@ impl ExprVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for ItemVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -139,7 +141,9 @@ impl Visitor<'tcx> for ItemVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for ExprVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "e7d490d6d8ddbe332f811d4a067f802d443a3f1b", "filename": "src/librustc_passes/lib_features.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib_features.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -5,11 +5,12 @@\n // (unlike lang features), which means we need to collect them instead.\n \n use errors::struct_span_err;\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::middle::lib_features::LibFeatures;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::symbol::Symbol;\n use rustc_span::{sym, Span};\n use syntax::ast::{Attribute, MetaItem, MetaItemKind};\n@@ -113,7 +114,9 @@ impl LibFeatureCollector<'tcx> {\n }\n \n impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n "}, {"sha": "5c1bc4d1eaa87f1d5babe8111e741579547bd9fa", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -97,14 +97,15 @@ use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n use errors::Applicability;\n-use rustc::hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir as hir;\n use rustc_hir::def::*;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{Expr, HirId, HirIdMap, HirIdSet, Node};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -153,7 +154,9 @@ fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_>) -> String {\n }\n \n impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n@@ -1348,7 +1351,9 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n // Checking for error conditions\n \n impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "333b39c3bb30277027d2d26260bd5cdfe41e2d58", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -3,12 +3,12 @@ use Context::*;\n use rustc::session::Session;\n \n use errors::{struct_span_err, Applicability};\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::Map;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Destination, Movability, Node};\n use rustc_span::Span;\n \n@@ -44,7 +44,9 @@ pub(crate) fn provide(providers: &mut Providers<'_>) {\n }\n \n impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'hir> {\n+    type Map = Map<'hir>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.hir_map)\n     }\n "}, {"sha": "5ce677f52cea670a016596344af2f270a0aad1ce", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -5,8 +5,7 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-use rustc::hir::intravisit;\n-use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::middle::privacy;\n use rustc::session::config;\n@@ -18,6 +17,8 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::intravisit;\n+use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirIdSet, Node};\n use rustc_target::spec::abi::Abi;\n@@ -82,7 +83,9 @@ struct ReachableContext<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "e79ca5c78d6d64bd5e8dc31961e2b40db38d82d8", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -6,13 +6,14 @@\n //!\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/borrowck.html\n \n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::middle::region::*;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Arm, Block, Expr, Local, Node, Pat, PatKind, Stmt};\n use rustc_index::vec::Idx;\n use rustc_span::source_map;\n@@ -695,7 +696,9 @@ impl<'tcx> RegionResolutionVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "be098543a2ff2cb837c2e500b66f7b029465de8d", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -2,7 +2,7 @@\n //! propagating default levels lexically from parent to children ast nodes.\n \n use errors::struct_span_err;\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability::{DeprecationEntry, Index};\n@@ -14,6 +14,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Generics, HirId, Item, StructField, Variant};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n@@ -204,7 +205,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     /// Because stability levels are scoped lexically, we want to walk\n     /// nested items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -293,7 +296,9 @@ impl<'a, 'tcx> MissingStabilityAnnotations<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n@@ -429,10 +434,12 @@ struct Checker<'tcx> {\n }\n \n impl Visitor<'tcx> for Checker<'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// Because stability levels are scoped lexically, we want to walk\n     /// nested items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "a96d59340237defd64630410ca9053e9962321a2", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -4,7 +4,7 @@\n #![recursion_limit = \"256\"]\n \n use rustc::bug;\n-use rustc::hir::intravisit::{self, DeepVisitor, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::fold::TypeVisitor;\n@@ -16,6 +16,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, DeepVisitor, NestedVisitorMap, Visitor};\n use rustc_hir::{AssocItemKind, HirIdSet, Node, PatKind};\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, sym};\n@@ -372,7 +373,9 @@ struct PubRestrictedVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for PubRestrictedVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n     fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {\n@@ -670,9 +673,11 @@ impl EmbargoVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -1039,9 +1044,11 @@ impl<'a, 'tcx> NamePrivacyVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -1179,9 +1186,11 @@ impl<'a, 'tcx> TypePrivacyVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -1437,7 +1446,9 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+    type Map = Map<'v>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -1463,9 +1474,11 @@ impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -1906,7 +1919,9 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "469e1b9aa62077e3c2be9a32eb03b8afb930b765", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -6,7 +6,6 @@\n //! way. Therefore, we break lifetime name resolution into a separate pass.\n \n use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::resolve_lifetime::*;\n@@ -17,6 +16,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{GenericArg, GenericParam, LifetimeName, Node, ParamName, QPath};\n use rustc_hir::{GenericParamKind, HirIdMap, HirIdSet, LifetimeParamKind};\n use rustc_span::symbol::{kw, sym};\n@@ -361,7 +361,9 @@ fn sub_items_have_self_param(node: &hir::ItemKind<'_>) -> bool {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -1086,7 +1088,9 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body<'_>) {\n     gather.visit_body(body);\n \n     impl<'v, 'a, 'tcx> Visitor<'v> for GatherLabels<'a, 'tcx> {\n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+        type Map = Map<'v>;\n+\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n \n@@ -2129,7 +2133,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             impl<'a> Visitor<'a> for SelfVisitor<'a> {\n-                fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'a> {\n+                type Map = Map<'a>;\n+\n+                fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n                     NestedVisitorMap::None\n                 }\n \n@@ -2217,7 +2223,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n \n         impl<'v, 'a> Visitor<'v> for GatherLifetimes<'a> {\n-            fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+            type Map = Map<'v>;\n+\n+            fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n                 NestedVisitorMap::None\n             }\n \n@@ -2802,7 +2810,9 @@ fn insert_late_bound_lifetimes(\n     }\n \n     impl<'v> Visitor<'v> for ConstrainedCollector {\n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+        type Map = Map<'v>;\n+\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n \n@@ -2843,7 +2853,9 @@ fn insert_late_bound_lifetimes(\n     }\n \n     impl<'v> Visitor<'v> for AllCollector {\n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+        type Map = Map<'v>;\n+\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n "}, {"sha": "4b5736adc17c3f0d4de30fed1499ece9bae4792a", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -772,8 +772,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"set the current terminal width\"),\n     panic_abort_tests: bool = (false, parse_bool, [TRACKED],\n         \"support compiling tests with panic=abort\"),\n-    continue_parse_after_error: bool = (false, parse_bool, [TRACKED],\n-        \"attempt to recover from parse errors (experimental)\"),\n     dep_tasks: bool = (false, parse_bool, [UNTRACKED],\n         \"print tasks that execute and the color their dep node gets (requires debug build)\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],"}, {"sha": "4b4fa4b7147fc0a780109ab8c2a57c4b3e440e99", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,7 +1,7 @@\n mod environment;\n \n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::definitions::DefPathData;\n+use rustc::hir::map::Map;\n use rustc::traits::{\n     Clause, Clauses, DomainGoal, FromEnv, GoalKind, PolyDomainGoal, ProgramClause,\n     ProgramClauseCategory, WellFormed, WhereClause,\n@@ -12,6 +12,7 @@ use rustc::ty::{self, List, TyCtxt};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::symbol::sym;\n use syntax::ast;\n \n@@ -600,7 +601,9 @@ impl ClauseDumper<'tcx> {\n }\n \n impl Visitor<'tcx> for ClauseDumper<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "0233b68a7ce21c30cac8aa7eb3ea01178806cf25", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -10,7 +10,6 @@ use crate::namespace::Namespace;\n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::ErrorReported;\n use errors::{struct_span_err, Applicability, DiagnosticId};\n-use rustc::hir::intravisit::Visitor;\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n use rustc::traits;\n use rustc::traits::astconv_object_safety_violations;\n@@ -23,6 +22,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::Visitor;\n use rustc_hir::print;\n use rustc_hir::{ExprKind, GenericArg, GenericArgs};\n use rustc_span::symbol::sym;"}, {"sha": "449c2e90ff202cb1d224f51f03eb6d6288eeb5c0", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,5 +1,5 @@\n use errors::{pluralize, struct_span_err, Applicability, DiagnosticId};\n-use rustc::hir::intravisit;\n+use rustc::hir::map::Map;\n use rustc::infer::{self, InferOk};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n use rustc::ty::error::{ExpectedFound, TypeError};\n@@ -9,6 +9,7 @@ use rustc::ty::{self, GenericParamDefKind, TyCtxt};\n use rustc::util::common::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::intravisit;\n use rustc_hir::{GenericParamKind, ImplItemKind, TraitItemKind};\n use rustc_span::Span;\n \n@@ -890,9 +891,10 @@ fn compare_synthetic_generics<'tcx>(\n                                     }\n                                 }\n                             }\n-                            fn nested_visit_map<'this>(\n-                                &'this mut self,\n-                            ) -> intravisit::NestedVisitorMap<'this, 'v>\n+                            type Map = Map<'v>;\n+                            fn nested_visit_map(\n+                                &mut self,\n+                            ) -> intravisit::NestedVisitorMap<'_, Self::Map>\n                             {\n                                 intravisit::NestedVisitorMap::None\n                             }"}, {"sha": "9d8805f225d7e1452816d10dddd764d83d7da4e5", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -4,13 +4,14 @@\n //! types computed here.\n \n use super::FnCtxt;\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::middle::region::{self, YieldData};\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Expr, ExprKind, Pat, PatKind};\n use rustc_span::Span;\n \n@@ -193,7 +194,9 @@ pub fn resolve_interior<'a, 'tcx>(\n // librustc/middle/region.rs since `expr_count` is compared against the results\n // there.\n impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "4f55d9ab70edee3eee10a547bc359668de00b5f8", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -5,8 +5,8 @@ use crate::check::FnCtxt;\n use crate::middle::lang_items::FnOnceTraitLangItem;\n use crate::namespace::Namespace;\n use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n-use rustc::hir::intravisit;\n use rustc::hir::map as hir_map;\n+use rustc::hir::map::Map;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::Obligation;\n use rustc::ty::print::with_crate_prefix;\n@@ -15,6 +15,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::intravisit;\n use rustc_hir::{ExprKind, Node, QPath};\n use rustc_span::{source_map, FileName, Span};\n use syntax::ast;\n@@ -1124,7 +1125,9 @@ impl intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n         }\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::None\n     }\n }"}, {"sha": "f10edc1a468b40cd60a68c091ac278ecdaa23f0c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -91,7 +91,7 @@ use crate::astconv::{AstConv, PathSeg};\n use crate::middle::lang_items;\n use crate::namespace::Namespace;\n use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc::infer::opaque_types::OpaqueTypeDecl;\n@@ -118,6 +118,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{ExprKind, GenericArg, HirIdMap, ItemKind, Node, PatKind, QPath};\n use rustc_index::vec::Idx;\n@@ -1170,7 +1171,9 @@ impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "d746b974727354127f1aec14ee22b46957660a9a", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -330,7 +330,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     Some(\"std::ops::Add\"),\n                                 ),\n                                 hir::BinOpKind::Sub => (\n-                                    format!(\"cannot substract `{}` from `{}`\", rhs_ty, lhs_ty),\n+                                    format!(\"cannot subtract `{}` from `{}`\", rhs_ty, lhs_ty),\n                                     Some(\"std::ops::Sub\"),\n                                 ),\n                                 hir::BinOpKind::Mul => ("}, {"sha": "967741092febe41b6b277a382d2bd506e0739a86", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -76,14 +76,15 @@ use crate::check::dropck;\n use crate::check::FnCtxt;\n use crate::mem_categorization as mc;\n use crate::middle::region;\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::infer::{self, RegionObligation, SuppressRegionErrors};\n use rustc::ty::adjustment;\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::{self, Ty};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::PatKind;\n use rustc_span::Span;\n use std::mem;\n@@ -414,7 +415,9 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n     // hierarchy, and in particular the relationships between free\n     // regions, until regionck, as described in #3238.\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "9b4bd6d78ff28896aacc23bdacec4444b8eac70a", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -35,13 +35,14 @@ use super::FnCtxt;\n use crate::expr_use_visitor as euv;\n use crate::mem_categorization as mc;\n use crate::mem_categorization::PlaceBase;\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::infer::UpvarRegion;\n use rustc::ty::{self, Ty, TyCtxt, UpvarSubsts};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::Span;\n use syntax::ast;\n \n@@ -59,7 +60,9 @@ struct InferBorrowKindVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for InferBorrowKindVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "b4798fb67f80f42ae99ade0af70c0cd4ba44f71b", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -4,7 +4,7 @@\n \n use crate::check::FnCtxt;\n \n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc::infer::InferCtxt;\n use rustc::ty::adjustment::{Adjust, Adjustment, PointerCast};\n@@ -13,6 +13,7 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdSet, DefIndex};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n@@ -242,7 +243,9 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n // traffic in node-ids or update tables in the type context etc.\n \n impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "84f2e186eaa356fb90adc8c0ecde323020873097", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -21,7 +21,7 @@ use crate::lint;\n use crate::middle::resolve_lifetime as rl;\n use crate::middle::weak_lang_items;\n use errors::{struct_span_err, Applicability, StashKey};\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::mir::mono::Linkage;\n use rustc::traits;\n@@ -37,6 +37,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{GenericParamKind, Node, Unsafety};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -104,7 +105,9 @@ pub struct ItemCtxt<'tcx> {\n crate struct PlaceholderHirTyCollector(crate Vec<Span>);\n \n impl<'v> Visitor<'v> for PlaceholderHirTyCollector {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+    type Map = Map<'v>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n     fn visit_ty(&mut self, t: &'v hir::Ty<'v>) {\n@@ -185,7 +188,9 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n }\n \n impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n@@ -885,7 +890,9 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     }\n \n     impl Visitor<'tcx> for LateBoundRegionsDetector<'tcx> {\n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        type Map = Map<'tcx>;\n+\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n \n@@ -1715,7 +1722,9 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     }\n \n     impl<'tcx> intravisit::Visitor<'tcx> for ConstraintLocator<'tcx> {\n-        fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+        type Map = Map<'tcx>;\n+\n+        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n             intravisit::NestedVisitorMap::All(&self.tcx.hir())\n         }\n         fn visit_item(&mut self, it: &'tcx Item<'tcx>) {"}, {"sha": "94e31108901eae8f12ef2a53f2103aad2997c8f6", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,10 +1,10 @@\n-use rustc::hir::intravisit;\n use rustc::hir::map::Map;\n use rustc::session::{self, config, DiagnosticOutput};\n use rustc::util::common::ErrorReported;\n use rustc_data_structures::sync::Lrc;\n use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;\n+use rustc_hir::intravisit;\n use rustc_interface::interface;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::SourceMap;\n@@ -899,7 +899,9 @@ impl<'a, 'hir> HirCollector<'a, 'hir> {\n }\n \n impl<'a, 'hir> intravisit::Visitor<'hir> for HirCollector<'a, 'hir> {\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'hir> {\n+    type Map = Map<'hir>;\n+\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::All(&self.map)\n     }\n "}, {"sha": "a59d7f0263bb0a3b7955d9cb407a3b7b7c34be45", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -227,10 +227,7 @@ impl SocketAddr {\n     /// ```\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n     pub fn is_ipv4(&self) -> bool {\n-        match *self {\n-            SocketAddr::V4(_) => true,\n-            SocketAddr::V6(_) => false,\n-        }\n+        matches!(*self, SocketAddr::V4(_))\n     }\n \n     /// Returns [`true`] if the [IP address] in this `SocketAddr` is an\n@@ -252,10 +249,7 @@ impl SocketAddr {\n     /// ```\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n     pub fn is_ipv6(&self) -> bool {\n-        match *self {\n-            SocketAddr::V4(_) => false,\n-            SocketAddr::V6(_) => true,\n-        }\n+        matches!(*self, SocketAddr::V6(_))\n     }\n }\n "}, {"sha": "6410a4f2b65b3762fd15044a8de4a862990fb69c", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -281,10 +281,7 @@ impl IpAddr {\n     /// ```\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n     pub fn is_ipv4(&self) -> bool {\n-        match self {\n-            IpAddr::V4(_) => true,\n-            IpAddr::V6(_) => false,\n-        }\n+        matches!(self, IpAddr::V4(_))\n     }\n \n     /// Returns [`true`] if this address is an [IPv6 address], and [`false`] otherwise.\n@@ -303,10 +300,7 @@ impl IpAddr {\n     /// ```\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n     pub fn is_ipv6(&self) -> bool {\n-        match self {\n-            IpAddr::V4(_) => false,\n-            IpAddr::V6(_) => true,\n-        }\n+        matches!(self, IpAddr::V6(_))\n     }\n }\n "}, {"sha": "fbbdc1ddac297acc1a7e4c155f7466cc0c586155", "filename": "src/libstd/path.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -224,18 +224,12 @@ impl<'a> Prefix<'a> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_verbatim(&self) -> bool {\n         use self::Prefix::*;\n-        match *self {\n-            Verbatim(_) | VerbatimDisk(_) | VerbatimUNC(..) => true,\n-            _ => false,\n-        }\n+        matches!(*self, Verbatim(_) | VerbatimDisk(_) | VerbatimUNC(..))\n     }\n \n     #[inline]\n     fn is_drive(&self) -> bool {\n-        match *self {\n-            Prefix::Disk(_) => true,\n-            _ => false,\n-        }\n+        matches!(*self, Prefix::Disk(_))\n     }\n \n     #[inline]"}, {"sha": "01314370ce3994842a625c213a233ef3cb3b5414", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -199,10 +199,7 @@ mod tests {\n \n         // At this point, all spawned threads should be blocked,\n         // so we shouldn't get anything from the port\n-        assert!(match rx.try_recv() {\n-            Err(TryRecvError::Empty) => true,\n-            _ => false,\n-        });\n+        assert!(matches!(rx.try_recv(), Err(TryRecvError::Empty)));\n \n         let mut leader_found = barrier.wait().is_leader();\n "}, {"sha": "5b41525e06aaaccaa565945e47bb733e0b83c783", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -118,12 +118,7 @@ impl<T> Packet<T> {\n     // Just tests whether this channel has been sent on or not, this is only\n     // safe to use from the sender.\n     pub fn sent(&self) -> bool {\n-        unsafe {\n-            match *self.upgrade.get() {\n-                NothingSent => false,\n-                _ => true,\n-            }\n-        }\n+        unsafe { !matches!(*self.upgrade.get(), NothingSent) }\n     }\n \n     pub fn recv(&self, deadline: Option<Instant>) -> Result<T, Failure<T>> {"}, {"sha": "d611ec22c38ec09f4452663a47c16c88af7b91d6", "filename": "src/test/mir-opt/const-promotion-extern-static.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -0,0 +1,71 @@\n+extern \"C\" {\n+    static X: i32;\n+}\n+\n+static Y: i32 = 42;\n+\n+static mut BAR: *const &'static i32 = [&Y].as_ptr();\n+\n+static mut FOO: *const &'static i32 = [unsafe { &X }].as_ptr();\n+\n+fn main() {}\n+\n+// END RUST SOURCE\n+// START rustc.FOO.PromoteTemps.before.mir\n+// bb0: {\n+// ...\n+//     _5 = const Scalar(AllocId(1).0x0) : &i32;\n+//     _4 = &(*_5);\n+//     _3 = [move _4];\n+//     _2 = &_3;\n+//     _1 = move _2 as &[&'static i32] (Pointer(Unsize));\n+//     _0 = const core::slice::<impl [&'static i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n+// }\n+// ...\n+// bb2: {\n+//     StorageDead(_5);\n+//     StorageDead(_3);\n+//     return;\n+// }\n+// END rustc.FOO.PromoteTemps.before.mir\n+// START rustc.BAR.PromoteTemps.before.mir\n+// bb0: {\n+// ...\n+//     _5 = const Scalar(AllocId(0).0x0) : &i32;\n+//     _4 = &(*_5);\n+//     _3 = [move _4];\n+//     _2 = &_3;\n+//     _1 = move _2 as &[&'static i32] (Pointer(Unsize));\n+//     _0 = const core::slice::<impl [&'static i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n+// }\n+// ...\n+// bb2: {\n+//     StorageDead(_5);\n+//     StorageDead(_3);\n+//     return;\n+// }\n+// END rustc.BAR.PromoteTemps.before.mir\n+// START rustc.BAR.PromoteTemps.after.mir\n+// bb0: {\n+// ...\n+//     _2 = &(promoted[0]: [&'static i32; 1]);\n+//     _1 = move _2 as &[&'static i32] (Pointer(Unsize));\n+//     _0 = const core::slice::<impl [&'static i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n+// }\n+// ...\n+// bb2: {\n+//     return;\n+// }\n+// END rustc.BAR.PromoteTemps.after.mir\n+// START rustc.FOO.PromoteTemps.after.mir\n+// bb0: {\n+// ...\n+//     _2 = &(promoted[0]: [&'static i32; 1]);\n+//     _1 = move _2 as &[&'static i32] (Pointer(Unsize));\n+//     _0 = const core::slice::<impl [&'static i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n+// }\n+// ...\n+// bb2: {\n+//     return;\n+// }\n+// END rustc.FOO.PromoteTemps.after.mir"}, {"sha": "abb2e93757ed395777406a1ed94805c49b6ec5de", "filename": "src/test/ui-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -8,7 +8,7 @@ extern crate rustc_hir;\n extern crate rustc_span;\n extern crate syntax;\n \n-use rustc::hir::intravisit;\n+use rustc_hir::intravisit;\n use rustc_hir as hir;\n use rustc_hir::Node;\n use rustc::lint::{LateContext, LintPass, LintArray, LateLintPass, LintContext};"}, {"sha": "3a70e7d43c25ef96bc7dd859b2e635aef659af06", "filename": "src/test/ui/associated-const/issue-63496.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -5,9 +5,13 @@ LL |     const C: usize;\n    |     --------------- required by `A::C`\n LL | \n LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n-   |                     ^^^^ cannot infer type\n+   |                     ^^^^\n+   |                     |\n+   |                     cannot infer type\n+   |                     help: use the fully qualified path to an implementation: `<Type as A>::C`\n    |\n    = note: cannot resolve `_: A`\n+   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-63496.rs:4:33\n@@ -16,9 +20,13 @@ LL |     const C: usize;\n    |     --------------- required by `A::C`\n LL | \n LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n-   |                                 ^^^^ cannot infer type\n+   |                                 ^^^^\n+   |                                 |\n+   |                                 cannot infer type\n+   |                                 help: use the fully qualified path to an implementation: `<Type as A>::C`\n    |\n    = note: cannot resolve `_: A`\n+   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ddabd552897a8e79eb25480f014522732e2ead71", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -13,9 +13,13 @@ error[E0283]: type annotations needed\n LL |     const X: usize;\n    |     --------------- required by `Bar::X`\n LL |     fn return_n(&self) -> [u8; Bar::X];\n-   |                                ^^^^^^ cannot infer type\n+   |                                ^^^^^^\n+   |                                |\n+   |                                cannot infer type\n+   |                                help: use the fully qualified path to an implementation: `<Type as Bar>::X`\n    |\n    = note: cannot resolve `_: Bar`\n+   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "232d43679b4840c4b616d66b9db780b00e906f01", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-match.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -0,0 +1,118 @@\n+#![feature(slice_patterns)]\n+\n+fn array() -> [(String, String); 3] {\n+    Default::default()\n+}\n+\n+// Const Index + Const Index\n+\n+fn move_out_from_begin_and_end() {\n+    let a = array();\n+    match a {\n+        [_, _, _x] => {}\n+    }\n+    match a {\n+        [.., _y] => {} //~ ERROR use of moved value\n+    }\n+}\n+\n+fn move_out_from_begin_field_and_end() {\n+    let a = array();\n+    match a {\n+        [_, _, (_x, _)] => {}\n+    }\n+    match a {\n+        [.., _y] => {} //~ ERROR use of moved value\n+    }\n+}\n+\n+fn move_out_from_begin_field_and_end_field() {\n+    let a = array();\n+    match a {\n+        [_, _, (_x, _)] => {}\n+    }\n+    match a {\n+        [.., (_y, _)] => {} //~ ERROR use of moved value\n+    }\n+}\n+\n+// Const Index + Slice\n+\n+fn move_out_by_const_index_and_subslice() {\n+    let a = array();\n+    match a {\n+        [_x, _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_y @ .., _, _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_end_and_subslice() {\n+    let a = array();\n+    match a {\n+        [.., _x] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, _, _y @ ..] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_field_and_subslice() {\n+    let a = array();\n+    match a {\n+        [(_x, _), _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_y @ .., _, _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_end_field_and_subslice() {\n+    let a = array();\n+    match a {\n+        [.., (_x, _)] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, _, _y @ ..] => {}\n+    }\n+}\n+\n+fn move_out_by_subslice_and_const_index_field() {\n+    let a = array();\n+    match a {\n+        [_y @ .., _, _] => {}\n+    }\n+    match a {\n+        [(_x, _), _, _] => {} //~ ERROR use of moved value\n+    }\n+}\n+\n+fn move_out_by_subslice_and_const_index_end_field() {\n+    let a = array();\n+    match a {\n+        [_, _, _y @ ..] => {}\n+    }\n+    match a {\n+        [.., (_x, _)] => {} //~ ERROR use of moved value\n+    }\n+}\n+\n+// Slice + Slice\n+\n+fn move_out_by_subslice_and_subslice() {\n+    let a = array();\n+    match a {\n+        [x @ .., _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, _y @ ..] => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e46a58a8a35007d358b703cb5b891e481bf105e6", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-match.stderr", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -0,0 +1,113 @@\n+error[E0382]: use of moved value: `a[..]`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:15:14\n+   |\n+LL |         [_, _, _x] => {}\n+   |                -- value moved here\n+...\n+LL |         [.., _y] => {}\n+   |              ^^ value used here after move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a[..]`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:25:14\n+   |\n+LL |         [_, _, (_x, _)] => {}\n+   |                 -- value moved here\n+...\n+LL |         [.., _y] => {}\n+   |              ^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a[..].0`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:35:15\n+   |\n+LL |         [_, _, (_x, _)] => {}\n+   |                 -- value moved here\n+...\n+LL |         [.., (_y, _)] => {}\n+   |               ^^ value used here after move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:46:11\n+   |\n+LL |         [_x, _, _] => {}\n+   |          -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:57:11\n+   |\n+LL |         [.., _x] => {}\n+   |              -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:68:11\n+   |\n+LL |         [(_x, _), _, _] => {}\n+   |           -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:79:11\n+   |\n+LL |         [.., (_x, _)] => {}\n+   |               -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a[..].0`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:91:11\n+   |\n+LL |         [_y @ .., _, _] => {}\n+   |          ------- value moved here\n+...\n+LL |         [(_x, _), _, _] => {}\n+   |           ^^ value used here after move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a[..].0`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:101:15\n+   |\n+LL |         [_, _, _y @ ..] => {}\n+   |                ------- value moved here\n+...\n+LL |         [.., (_x, _)] => {}\n+   |               ^^ value used here after move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:112:11\n+   |\n+LL |         [x @ .., _] => {}\n+   |          ------ value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "e5e61697c68c6070145b50bc52569444710d4ae7", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-no-overlap-match.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -0,0 +1,117 @@\n+// Due to #53114, which causes a \"read\" of the `_` patterns,\n+// the borrow-checker refuses this code, while it should probably be allowed.\n+// Once the bug is fixed, the test, which is derived from a\n+// passing test for `let` statements, should become check-pass.\n+\n+#![feature(slice_patterns)]\n+\n+fn array() -> [(String, String); 3] {\n+    Default::default()\n+}\n+\n+// Const Index + Const Index\n+\n+fn move_out_from_begin_and_one_from_end() {\n+    let a = array();\n+    match a {\n+        [_, _, _x] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [.., _y, _] => {}\n+    }\n+}\n+\n+fn move_out_from_begin_field_and_end_field() {\n+    let a = array();\n+    match a {\n+        [_, _, (_x, _)] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [.., (_, _y)] => {}\n+    }\n+}\n+\n+// Const Index + Slice\n+\n+fn move_out_by_const_index_and_subslice() {\n+    let a = array();\n+    match a {\n+        [_x, _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, _y @ ..] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_end_and_subslice() {\n+    let a = array();\n+    match a {\n+        [.., _x] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_y @ .., _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_field_and_subslice() {\n+    let a = array();\n+    match a {\n+        [(_x, _), _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, _y @ ..] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_end_field_and_subslice() {\n+    let a = array();\n+    match a {\n+        [.., (_x, _)] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_y @ .., _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_subslice_and_index_field() {\n+    let a = array();\n+    match a {\n+        [_, _y @ ..] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [(_x, _), _, _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_subslice_and_end_index_field() {\n+    let a = array();\n+    match a {\n+        [_y @ .., _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [.., (_x, _)] => {}\n+    }\n+}\n+\n+// Slice + Slice\n+\n+fn move_out_by_subslice_and_subslice() {\n+    let a = array();\n+    match a {\n+        [x @ .., _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, _y @ ..] => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "72cd4207cce65e6986b171720cb1f9795f9bd4bf", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-no-overlap-match.stderr", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -0,0 +1,102 @@\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:19:11\n+   |\n+LL |         [_, _, _x] => {}\n+   |                -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:30:11\n+   |\n+LL |         [_, _, (_x, _)] => {}\n+   |                 -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:43:11\n+   |\n+LL |         [_x, _, _] => {}\n+   |          -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:54:11\n+   |\n+LL |         [.., _x] => {}\n+   |              -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:65:11\n+   |\n+LL |         [(_x, _), _, _] => {}\n+   |           -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:76:11\n+   |\n+LL |         [.., (_x, _)] => {}\n+   |               -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:87:11\n+   |\n+LL |         [_, _y @ ..] => {}\n+   |             ------- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:98:11\n+   |\n+LL |         [_y @ .., _] => {}\n+   |          ------- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:111:11\n+   |\n+LL |         [x @ .., _, _] => {}\n+   |          ------ value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "1ca3df52ada91c5800a97d071277d84322a62c8e", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-match.rs", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -0,0 +1,152 @@\n+#![feature(slice_patterns)]\n+\n+fn array() -> [(String, String); 3] {\n+    Default::default()\n+}\n+\n+// Const Index + Const Index\n+\n+fn move_out_from_begin_and_end() {\n+    let a = array();\n+    match a {\n+        [_, _, _x] => {}\n+    }\n+    match a {\n+        [.., ref _y] => {} //~ ERROR [E0382]\n+    }\n+}\n+\n+fn move_out_from_begin_field_and_end() {\n+    let a = array();\n+    match a {\n+        [_, _, (_x, _)] => {}\n+    }\n+    match a {\n+        [.., ref _y] => {} //~ ERROR [E0382]\n+    }\n+}\n+\n+fn move_out_from_begin_field_and_end_field() {\n+    let a = array();\n+    match a {\n+        [_, _, (_x, _)] => {}\n+    }\n+    match a {\n+        [.., (ref _y, _)] => {} //~ ERROR [E0382]\n+    }\n+}\n+\n+// Const Index + Slice\n+\n+fn move_out_by_const_index_and_subslice() {\n+    let a = array();\n+    match a {\n+        [_x, _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR [E0382]\n+        [ref _y @ .., _, _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_end_and_subslice() {\n+    let a = array();\n+    match a {\n+        [.., _x] => {}\n+    }\n+    match a {\n+        //~^ ERROR [E0382]\n+        [_, _, ref _y @ ..] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_field_and_subslice() {\n+    let a = array();\n+    match a {\n+        [(_x, _), _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR [E0382]\n+        [ref _y @ .., _, _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_end_field_and_subslice() {\n+    let a = array();\n+    match a {\n+        [.., (_x, _)] => {}\n+    }\n+    match a {\n+        //~^ ERROR [E0382]\n+        [_, _, ref _y @ ..] => {}\n+    }\n+}\n+\n+fn move_out_by_subslice_and_const_index_field() {\n+    let a = array();\n+    match a {\n+        [_y @ .., _, _] => {}\n+    }\n+    match a {\n+        [(ref _x, _), _, _] => {} //~ ERROR [E0382]\n+    }\n+}\n+\n+fn move_out_by_subslice_and_const_index_end_field() {\n+    let a = array();\n+    match a {\n+        [_, _, _y @ ..] => {}\n+    }\n+    match a {\n+        [.., (ref _x, _)] => {} //~ ERROR [E0382]\n+    }\n+}\n+\n+// Slice + Slice\n+\n+fn move_out_by_subslice_and_subslice() {\n+    let a = array();\n+    match a {\n+        [x @ .., _] => {}\n+    }\n+    match a {\n+        //~^ ERROR [E0382]\n+        [_, ref _y @ ..] => {}\n+    }\n+}\n+\n+// Move + Assign\n+\n+fn move_out_and_assign_end() {\n+    let mut a = array();\n+    match a {\n+        [_, _, _x] => {}\n+    }\n+    a[2] = Default::default(); //~ ERROR [E0382]\n+}\n+\n+fn move_out_and_assign_end_field() {\n+    let mut a = array();\n+    match a {\n+        [_, _, (_x, _)] => {}\n+    }\n+    a[2].1 = Default::default(); //~ ERROR [E0382]\n+}\n+\n+fn move_out_slice_and_assign_end() {\n+    let mut a = array();\n+    match a {\n+        [_, _, _x @ ..] => {}\n+    }\n+    a[0] = Default::default(); //~ ERROR [E0382]\n+}\n+\n+fn move_out_slice_and_assign_end_field() {\n+    let mut a = array();\n+    match a {\n+        [_, _, _x @ ..] => {}\n+    }\n+    a[0].1 = Default::default(); //~ ERROR [E0382]\n+}\n+\n+fn main() {}"}, {"sha": "028442a4c07ea227ed50a963cd29668b7c4589fa", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-match.stderr", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -0,0 +1,157 @@\n+error[E0382]: borrow of moved value: `a[..]`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:15:14\n+   |\n+LL |         [_, _, _x] => {}\n+   |                -- value moved here\n+...\n+LL |         [.., ref _y] => {}\n+   |              ^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `a[..]`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:25:14\n+   |\n+LL |         [_, _, (_x, _)] => {}\n+   |                 -- value moved here\n+...\n+LL |         [.., ref _y] => {}\n+   |              ^^^^^^ value borrowed here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `a[..].0`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:35:15\n+   |\n+LL |         [_, _, (_x, _)] => {}\n+   |                 -- value moved here\n+...\n+LL |         [.., (ref _y, _)] => {}\n+   |               ^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:46:11\n+   |\n+LL |         [_x, _, _] => {}\n+   |          -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:57:11\n+   |\n+LL |         [.., _x] => {}\n+   |              -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:68:11\n+   |\n+LL |         [(_x, _), _, _] => {}\n+   |           -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:79:11\n+   |\n+LL |         [.., (_x, _)] => {}\n+   |               -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `a[..]`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:91:11\n+   |\n+LL |         [_y @ .., _, _] => {}\n+   |          ------- value moved here\n+...\n+LL |         [(ref _x, _), _, _] => {}\n+   |           ^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `a[..]`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:101:15\n+   |\n+LL |         [_, _, _y @ ..] => {}\n+   |                ------- value moved here\n+...\n+LL |         [.., (ref _x, _)] => {}\n+   |               ^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:112:11\n+   |\n+LL |         [x @ .., _] => {}\n+   |          ------ value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:125:5\n+   |\n+LL |         [_, _, _x] => {}\n+   |                -- value moved here\n+LL |     }\n+LL |     a[2] = Default::default();\n+   |     ^^^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:133:5\n+   |\n+LL |         [_, _, (_x, _)] => {}\n+   |                 -- value moved here\n+LL |     }\n+LL |     a[2].1 = Default::default();\n+   |     ^^^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:141:5\n+   |\n+LL |         [_, _, _x @ ..] => {}\n+   |                ------- value moved here\n+LL |     }\n+LL |     a[0] = Default::default();\n+   |     ^^^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:149:5\n+   |\n+LL |         [_, _, _x @ ..] => {}\n+   |                ------- value moved here\n+LL |     }\n+LL |     a[0].1 = Default::default();\n+   |     ^^^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error: aborting due to 14 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "79fe593009652e920c5721fd9478c953e897456a", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-no-overlap-match.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -0,0 +1,117 @@\n+// Due to #53114, which causes a \"read\" of the `_` patterns,\n+// the borrow-checker refuses this code, while it should probably be allowed.\n+// Once the bug is fixed, the test, which is derived from a\n+// passing test for `let` statements, should become check-pass.\n+\n+#![feature(slice_patterns)]\n+\n+fn array() -> [(String, String); 3] {\n+    Default::default()\n+}\n+\n+// Const Index + Const Index\n+\n+fn move_out_from_begin_and_one_from_end() {\n+    let a = array();\n+    match a {\n+        [_, _, _x] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [.., ref _y, _] => {}\n+    }\n+}\n+\n+fn move_out_from_begin_field_and_end_field() {\n+    let a = array();\n+    match a {\n+        [_, _, (_x, _)] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [.., (_, ref _y)] => {}\n+    }\n+}\n+\n+// Const Index + Slice\n+\n+fn move_out_by_const_index_and_subslice() {\n+    let a = array();\n+    match a {\n+        [_x, _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, ref _y @ ..] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_end_and_subslice() {\n+    let a = array();\n+    match a {\n+        [.., _x] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [ref _y @ .., _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_field_and_subslice() {\n+    let a = array();\n+    match a {\n+        [(_x, _), _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, ref _y @ ..] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_end_field_and_subslice() {\n+    let a = array();\n+    match a {\n+        [.., (_x, _)] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [ref _y @ .., _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_subslice_and_index_field() {\n+    let a = array();\n+    match a {\n+        [_, _y @ ..] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [(ref _x, _), _, _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_subslice_and_end_index_field() {\n+    let a = array();\n+    match a {\n+        [_y @ .., _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [.., (ref _x, _)] => {}\n+    }\n+}\n+\n+// Slice + Slice\n+\n+fn move_out_by_subslice_and_subslice() {\n+    let a = array();\n+    match a {\n+        [x @ .., _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, ref _y @ ..] => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "43ba2b664a1e1c7e82a4090e61cc03ed8806b473", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-no-overlap-match.stderr", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -0,0 +1,102 @@\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:19:11\n+   |\n+LL |         [_, _, _x] => {}\n+   |                -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:30:11\n+   |\n+LL |         [_, _, (_x, _)] => {}\n+   |                 -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:43:11\n+   |\n+LL |         [_x, _, _] => {}\n+   |          -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:54:11\n+   |\n+LL |         [.., _x] => {}\n+   |              -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:65:11\n+   |\n+LL |         [(_x, _), _, _] => {}\n+   |           -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:76:11\n+   |\n+LL |         [.., (_x, _)] => {}\n+   |               -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:87:11\n+   |\n+LL |         [_, _y @ ..] => {}\n+   |             ------- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:98:11\n+   |\n+LL |         [_y @ .., _] => {}\n+   |          ------- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:111:11\n+   |\n+LL |         [x @ .., _, _] => {}\n+   |          ------ value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "88418e57acddaef394bea355a32b946f511e29df", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -10,7 +10,7 @@ error: internal compiler error: mutable allocation in constant\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:347:17\n+thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:346:17\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n error: internal compiler error: unexpected panic"}, {"sha": "f874b00db0b49b8b1c44458d1ec8a2b60265117a", "filename": "src/test/ui/issues/issue-28837.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fissues%2Fissue-28837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fissues%2Fissue-28837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28837.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -5,7 +5,7 @@ fn main() {\n \n     a + a; //~ ERROR cannot add `A` to `A`\n \n-    a - a; //~ ERROR cannot substract `A` from `A`\n+    a - a; //~ ERROR cannot subtract `A` from `A`\n \n     a * a; //~ ERROR cannot multiply `A` to `A`\n "}, {"sha": "b63e168caf1964a9edebaaecffa991f5e02fbc6c", "filename": "src/test/ui/issues/issue-28837.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fissues%2Fissue-28837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fissues%2Fissue-28837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28837.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -8,7 +8,7 @@ LL |     a + a;\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `A`\n \n-error[E0369]: cannot substract `A` from `A`\n+error[E0369]: cannot subtract `A` from `A`\n   --> $DIR/issue-28837.rs:8:7\n    |\n LL |     a - a;"}, {"sha": "70a7c38b8342582b2930ff035e31b474645add44", "filename": "src/test/ui/issues/issue-58022.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -11,9 +11,13 @@ LL |     const SIZE: usize;\n    |     ------------------ required by `Foo::SIZE`\n LL | \n LL |     fn new(slice: &[u8; Foo::SIZE]) -> Self;\n-   |                         ^^^^^^^^^ cannot infer type\n+   |                         ^^^^^^^^^\n+   |                         |\n+   |                         cannot infer type\n+   |                         help: use the fully qualified path to an implementation: `<Type as Foo>::SIZE`\n    |\n    = note: cannot resolve `_: Foo`\n+   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "13759a2351997c5636c9b1fdaa32474dc0ba5dc2", "filename": "src/test/ui/parse-error-correct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparse-error-correct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparse-error-correct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparse-error-correct.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n // Test that the parser is error correcting missing idents. Despite a parsing\n // error (or two), we still run type checking (and don't get extra errors there).\n "}, {"sha": "c54baf00b27f2c8ef395bd044f30e65f5a90ef67", "filename": "src/test/ui/parse-error-correct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparse-error-correct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparse-error-correct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparse-error-correct.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,17 +1,17 @@\n error: unexpected token: `;`\n-  --> $DIR/parse-error-correct.rs:8:15\n+  --> $DIR/parse-error-correct.rs:6:15\n    |\n LL |     let x = y.;\n    |               ^\n \n error: unexpected token: `(`\n-  --> $DIR/parse-error-correct.rs:9:15\n+  --> $DIR/parse-error-correct.rs:7:15\n    |\n LL |     let x = y.();\n    |               ^\n \n error[E0618]: expected function, found `{integer}`\n-  --> $DIR/parse-error-correct.rs:9:13\n+  --> $DIR/parse-error-correct.rs:7:13\n    |\n LL |     let y = 42;\n    |         - `{integer}` defined here\n@@ -22,7 +22,7 @@ LL |     let x = y.();\n    |             call expression requires function\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n-  --> $DIR/parse-error-correct.rs:11:15\n+  --> $DIR/parse-error-correct.rs:9:15\n    |\n LL |     let x = y.foo;\n    |               ^^^"}, {"sha": "7e26b4f2b6a22273724d741c223fb23be7264856", "filename": "src/test/ui/parser-recovery-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser-recovery-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser-recovery-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser-recovery-1.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n // Test that we can recover from missing braces in the parser.\n \n trait Foo {"}, {"sha": "f56060c3e356f6b41b31e373820f85349db2b503", "filename": "src/test/ui/parser-recovery-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser-recovery-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser-recovery-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser-recovery-1.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,5 +1,5 @@\n error: this file contains an unclosed delimiter\n-  --> $DIR/parser-recovery-1.rs:15:54\n+  --> $DIR/parser-recovery-1.rs:13:54\n    |\n LL | trait Foo {\n    |           - unclosed delimiter\n@@ -13,19 +13,19 @@ LL | }\n    |                                                      ^\n \n error: unexpected token: `;`\n-  --> $DIR/parser-recovery-1.rs:12:15\n+  --> $DIR/parser-recovery-1.rs:10:15\n    |\n LL |     let x = y.;\n    |               ^\n \n error[E0425]: cannot find function `foo` in this scope\n-  --> $DIR/parser-recovery-1.rs:7:17\n+  --> $DIR/parser-recovery-1.rs:5:17\n    |\n LL |         let x = foo();\n    |                 ^^^ not found in this scope\n \n error[E0425]: cannot find value `y` in this scope\n-  --> $DIR/parser-recovery-1.rs:12:13\n+  --> $DIR/parser-recovery-1.rs:10:13\n    |\n LL |     let x = y.;\n    |             ^ not found in this scope"}, {"sha": "48b22afffe7f04ae57a4f6fcc873255716f8f2c7", "filename": "src/test/ui/parser-recovery-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser-recovery-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser-recovery-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser-recovery-2.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n // Test that we can recover from mismatched braces in the parser.\n \n trait Foo {"}, {"sha": "cd3da4c71f0b5685fbffd5d6b189e279c455f42a", "filename": "src/test/ui/parser-recovery-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser-recovery-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser-recovery-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser-recovery-2.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,11 +1,11 @@\n error: unexpected token: `;`\n-  --> $DIR/parser-recovery-2.rs:12:15\n+  --> $DIR/parser-recovery-2.rs:10:15\n    |\n LL |     let x = y.;\n    |               ^\n \n error: mismatched closing delimiter: `)`\n-  --> $DIR/parser-recovery-2.rs:8:5\n+  --> $DIR/parser-recovery-2.rs:6:5\n    |\n LL |     fn bar() {\n    |              - unclosed delimiter\n@@ -14,13 +14,13 @@ LL |     )\n    |     ^ mismatched closing delimiter\n \n error[E0425]: cannot find function `foo` in this scope\n-  --> $DIR/parser-recovery-2.rs:7:17\n+  --> $DIR/parser-recovery-2.rs:5:17\n    |\n LL |         let x = foo();\n    |                 ^^^ not found in this scope\n \n error[E0425]: cannot find value `y` in this scope\n-  --> $DIR/parser-recovery-2.rs:12:13\n+  --> $DIR/parser-recovery-2.rs:10:13\n    |\n LL |     let x = y.;\n    |             ^ not found in this scope"}, {"sha": "20d3edf12517514475b8c8c077918ee1b7c99667", "filename": "src/test/ui/parser/ascii-only-character-escape.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     let x = \"\\x80\"; //~ ERROR may only be used\n     let y = \"\\xff\"; //~ ERROR may only be used"}, {"sha": "cf51b00cdc39aa5aa8356e51e34bbca7b3973380", "filename": "src/test/ui/parser/ascii-only-character-escape.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,17 +1,17 @@\n error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n-  --> $DIR/ascii-only-character-escape.rs:4:14\n+  --> $DIR/ascii-only-character-escape.rs:2:14\n    |\n LL |     let x = \"\\x80\";\n    |              ^^^^\n \n error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n-  --> $DIR/ascii-only-character-escape.rs:5:14\n+  --> $DIR/ascii-only-character-escape.rs:3:14\n    |\n LL |     let y = \"\\xff\";\n    |              ^^^^\n \n error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n-  --> $DIR/ascii-only-character-escape.rs:6:14\n+  --> $DIR/ascii-only-character-escape.rs:4:14\n    |\n LL |     let z = \"\\xe2\";\n    |              ^^^^"}, {"sha": "11696b82bc9ac9b4f566bdb69bfebf8003b0c9d0", "filename": "src/test/ui/parser/bad-char-literals.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,7 +1,6 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n // ignore-tidy-cr\n // ignore-tidy-tab\n+\n fn main() {\n     // these literals are just silly.\n     ''';"}, {"sha": "093978fd84d007851a4adc24459409d19e729a74", "filename": "src/test/ui/parser/bad-char-literals.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,25 +1,25 @@\n error: character constant must be escaped: '\n-  --> $DIR/bad-char-literals.rs:7:6\n+  --> $DIR/bad-char-literals.rs:6:6\n    |\n LL |     ''';\n    |      ^\n \n error: character constant must be escaped: \\n\n-  --> $DIR/bad-char-literals.rs:11:6\n+  --> $DIR/bad-char-literals.rs:10:6\n    |\n LL |       '\n    |  ______^\n LL | | ';\n    | |_\n \n error: character constant must be escaped: \\r\n-  --> $DIR/bad-char-literals.rs:16:6\n+  --> $DIR/bad-char-literals.rs:15:6\n    |\n LL |     '\r';\n    |      ^\n \n error: character constant must be escaped: \\t\n-  --> $DIR/bad-char-literals.rs:19:6\n+  --> $DIR/bad-char-literals.rs:18:6\n    |\n LL |     '    ';\n    |      ^^^^"}, {"sha": "dadf3971220f7054ae75af19ef90c11c6a3578b2", "filename": "src/test/ui/parser/byte-literals.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,6 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n-\n // ignore-tidy-tab\n \n static FOO: u8 = b'\\f';  //~ ERROR unknown byte escape"}, {"sha": "53d50af88d33b84d2a8b75b99a98af06d084452a", "filename": "src/test/ui/parser/byte-literals.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,41 +1,41 @@\n error: unknown byte escape: f\n-  --> $DIR/byte-literals.rs:6:21\n+  --> $DIR/byte-literals.rs:3:21\n    |\n LL | static FOO: u8 = b'\\f';\n    |                     ^ unknown byte escape\n \n error: unknown byte escape: f\n-  --> $DIR/byte-literals.rs:9:8\n+  --> $DIR/byte-literals.rs:6:8\n    |\n LL |     b'\\f';\n    |        ^ unknown byte escape\n \n error: invalid character in numeric character escape: Z\n-  --> $DIR/byte-literals.rs:10:10\n+  --> $DIR/byte-literals.rs:7:10\n    |\n LL |     b'\\x0Z';\n    |          ^\n \n error: byte constant must be escaped: \\t\n-  --> $DIR/byte-literals.rs:11:7\n+  --> $DIR/byte-literals.rs:8:7\n    |\n LL |     b'    ';\n    |       ^^^^\n \n error: byte constant must be escaped: '\n-  --> $DIR/byte-literals.rs:12:7\n+  --> $DIR/byte-literals.rs:9:7\n    |\n LL |     b''';\n    |       ^\n \n error: byte constant must be ASCII. Use a \\xHH escape for a non-ASCII byte\n-  --> $DIR/byte-literals.rs:13:7\n+  --> $DIR/byte-literals.rs:10:7\n    |\n LL |     b'\u00e9';\n    |       ^\n \n error: unterminated byte constant\n-  --> $DIR/byte-literals.rs:14:6\n+  --> $DIR/byte-literals.rs:11:6\n    |\n LL |     b'a\n    |      ^^^^"}, {"sha": "caffd9efbed37f9bcf964a9be40fd9f02bba1949", "filename": "src/test/ui/parser/byte-string-literals.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n static FOO: &'static [u8] = b\"\\f\";  //~ ERROR unknown byte escape\n \n pub fn main() {"}, {"sha": "ca964cd4b8f21e995c1cfc2b1e75af5849b249ac", "filename": "src/test/ui/parser/byte-string-literals.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,29 +1,29 @@\n error: unknown byte escape: f\n-  --> $DIR/byte-string-literals.rs:3:32\n+  --> $DIR/byte-string-literals.rs:1:32\n    |\n LL | static FOO: &'static [u8] = b\"\\f\";\n    |                                ^ unknown byte escape\n \n error: unknown byte escape: f\n-  --> $DIR/byte-string-literals.rs:6:8\n+  --> $DIR/byte-string-literals.rs:4:8\n    |\n LL |     b\"\\f\";\n    |        ^ unknown byte escape\n \n error: invalid character in numeric character escape: Z\n-  --> $DIR/byte-string-literals.rs:7:10\n+  --> $DIR/byte-string-literals.rs:5:10\n    |\n LL |     b\"\\x0Z\";\n    |          ^\n \n error: byte constant must be ASCII. Use a \\xHH escape for a non-ASCII byte\n-  --> $DIR/byte-string-literals.rs:8:7\n+  --> $DIR/byte-string-literals.rs:6:7\n    |\n LL |     b\"\u00e9\";\n    |       ^\n \n error: unterminated double quote byte string\n-  --> $DIR/byte-string-literals.rs:9:6\n+  --> $DIR/byte-string-literals.rs:7:6\n    |\n LL |       b\"a\n    |  ______^"}, {"sha": "270c8b43dfd5e7d8527f67d1810888f9036a208a", "filename": "src/test/ui/parser/impl-parsing.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n impl ! {} // OK\n impl ! where u8: Copy {} // OK\n "}, {"sha": "7c2a7937c5da7c15238467ce3a98f763e5a65028", "filename": "src/test/ui/parser/impl-parsing.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,29 +1,29 @@\n error: missing `for` in a trait impl\n-  --> $DIR/impl-parsing.rs:6:11\n+  --> $DIR/impl-parsing.rs:4:11\n    |\n LL | impl Trait Type {}\n    |           ^ help: add `for` here\n \n error: missing `for` in a trait impl\n-  --> $DIR/impl-parsing.rs:7:11\n+  --> $DIR/impl-parsing.rs:5:11\n    |\n LL | impl Trait .. {}\n    |           ^ help: add `for` here\n \n error: expected a trait, found type\n-  --> $DIR/impl-parsing.rs:8:6\n+  --> $DIR/impl-parsing.rs:6:6\n    |\n LL | impl ?Sized for Type {}\n    |      ^^^^^^\n \n error: expected a trait, found type\n-  --> $DIR/impl-parsing.rs:9:6\n+  --> $DIR/impl-parsing.rs:7:6\n    |\n LL | impl ?Sized for .. {}\n    |      ^^^^^^\n \n error: expected `impl`, found `FAIL`\n-  --> $DIR/impl-parsing.rs:11:16\n+  --> $DIR/impl-parsing.rs:9:16\n    |\n LL | default unsafe FAIL\n    |                ^^^^ expected `impl`"}, {"sha": "ab445a9329426cbc094b868182ae6a9b26d1652e", "filename": "src/test/ui/parser/issue-23620-invalid-escapes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     let _ = b\"\\u{a66e}\";\n     //~^ ERROR unicode escape sequences cannot be used as a byte or in a byte string"}, {"sha": "b391ac75bf8d1129dcf7394f347c2564f8531421", "filename": "src/test/ui/parser/issue-23620-invalid-escapes.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,83 +1,83 @@\n error: unicode escape sequences cannot be used as a byte or in a byte string\n-  --> $DIR/issue-23620-invalid-escapes.rs:4:15\n+  --> $DIR/issue-23620-invalid-escapes.rs:2:15\n    |\n LL |     let _ = b\"\\u{a66e}\";\n    |               ^^^^^^^^\n \n error: unicode escape sequences cannot be used as a byte or in a byte string\n-  --> $DIR/issue-23620-invalid-escapes.rs:7:15\n+  --> $DIR/issue-23620-invalid-escapes.rs:5:15\n    |\n LL |     let _ = b'\\u{a66e}';\n    |               ^^^^^^^^\n \n error: incorrect unicode escape sequence\n-  --> $DIR/issue-23620-invalid-escapes.rs:10:15\n+  --> $DIR/issue-23620-invalid-escapes.rs:8:15\n    |\n LL |     let _ = b'\\u';\n    |               ^^ incorrect unicode escape sequence\n    |\n    = help: format of unicode escape sequences is `\\u{...}`\n \n error: numeric character escape is too short\n-  --> $DIR/issue-23620-invalid-escapes.rs:13:15\n+  --> $DIR/issue-23620-invalid-escapes.rs:11:15\n    |\n LL |     let _ = b'\\x5';\n    |               ^^^\n \n error: invalid character in numeric character escape: x\n-  --> $DIR/issue-23620-invalid-escapes.rs:16:17\n+  --> $DIR/issue-23620-invalid-escapes.rs:14:17\n    |\n LL |     let _ = b'\\xxy';\n    |                 ^\n \n error: numeric character escape is too short\n-  --> $DIR/issue-23620-invalid-escapes.rs:19:14\n+  --> $DIR/issue-23620-invalid-escapes.rs:17:14\n    |\n LL |     let _ = '\\x5';\n    |              ^^^\n \n error: invalid character in numeric character escape: x\n-  --> $DIR/issue-23620-invalid-escapes.rs:22:16\n+  --> $DIR/issue-23620-invalid-escapes.rs:20:16\n    |\n LL |     let _ = '\\xxy';\n    |                ^\n \n error: unicode escape sequences cannot be used as a byte or in a byte string\n-  --> $DIR/issue-23620-invalid-escapes.rs:25:15\n+  --> $DIR/issue-23620-invalid-escapes.rs:23:15\n    |\n LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n    |               ^^^^^^^^\n \n error: invalid character in numeric character escape:  \n-  --> $DIR/issue-23620-invalid-escapes.rs:25:27\n+  --> $DIR/issue-23620-invalid-escapes.rs:23:27\n    |\n LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n    |                           ^\n \n error: incorrect unicode escape sequence\n-  --> $DIR/issue-23620-invalid-escapes.rs:25:28\n+  --> $DIR/issue-23620-invalid-escapes.rs:23:28\n    |\n LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n    |                            ^^ incorrect unicode escape sequence\n    |\n    = help: format of unicode escape sequences is `\\u{...}`\n \n error: invalid character in numeric character escape:  \n-  --> $DIR/issue-23620-invalid-escapes.rs:30:17\n+  --> $DIR/issue-23620-invalid-escapes.rs:28:17\n    |\n LL |     let _ = \"\\xf \\u\";\n    |                 ^\n \n error: incorrect unicode escape sequence\n-  --> $DIR/issue-23620-invalid-escapes.rs:30:18\n+  --> $DIR/issue-23620-invalid-escapes.rs:28:18\n    |\n LL |     let _ = \"\\xf \\u\";\n    |                  ^^ incorrect unicode escape sequence\n    |\n    = help: format of unicode escape sequences is `\\u{...}`\n \n error: incorrect unicode escape sequence\n-  --> $DIR/issue-23620-invalid-escapes.rs:34:14\n+  --> $DIR/issue-23620-invalid-escapes.rs:32:14\n    |\n LL |     let _ = \"\\u8f\";\n    |              ^^--"}, {"sha": "0db06f636c3ec39e63bed76aa829a5179ade2053", "filename": "src/test/ui/parser/issue-62913.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fissue-62913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fissue-62913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62913.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,3 +1,4 @@\n \"\\u\\\\\"\n //~^ ERROR incorrect unicode escape sequence\n //~| ERROR invalid trailing slash in literal\n+//~| ERROR expected item, found `\"\\u\\\\\"`"}, {"sha": "f72174f8929b888b947d62b8d006b83a6d30c734", "filename": "src/test/ui/parser/issue-62913.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fissue-62913.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fissue-62913.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62913.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -12,5 +12,11 @@ error: invalid trailing slash in literal\n LL | \"\\u\\\"\n    |     ^\n \n-error: aborting due to 2 previous errors\n+error: expected item, found `\"\\u\\\"`\n+  --> $DIR/issue-62913.rs:1:1\n+   |\n+LL | \"\\u\\\"\n+   | ^^^^^^ expected item\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "e7951cfd2d20cc2314ef754f690f4342e1aad4d0", "filename": "src/test/ui/parser/lex-bad-char-literals-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,4 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n static c3: char =\n     '\\x1' //~ ERROR: numeric character escape is too short\n ;"}, {"sha": "fcf4802f79bba85a8f853fd83fd1757a49dafbda", "filename": "src/test/ui/parser/lex-bad-char-literals-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,23 +1,23 @@\n error: numeric character escape is too short\n-  --> $DIR/lex-bad-char-literals-1.rs:3:6\n+  --> $DIR/lex-bad-char-literals-1.rs:2:6\n    |\n LL |     '\\x1'\n    |      ^^^\n \n error: numeric character escape is too short\n-  --> $DIR/lex-bad-char-literals-1.rs:7:6\n+  --> $DIR/lex-bad-char-literals-1.rs:6:6\n    |\n LL |     \"\\x1\"\n    |      ^^^\n \n error: unknown character escape: \\u{25cf}\n-  --> $DIR/lex-bad-char-literals-1.rs:11:7\n+  --> $DIR/lex-bad-char-literals-1.rs:10:7\n    |\n LL |     '\\\u25cf'\n    |       ^ unknown character escape\n \n error: unknown character escape: \\u{25cf}\n-  --> $DIR/lex-bad-char-literals-1.rs:15:7\n+  --> $DIR/lex-bad-char-literals-1.rs:14:7\n    |\n LL |     \"\\\u25cf\"\n    |       ^ unknown character escape"}, {"sha": "1580157210e6940c54d47319ff186ab812a6e3ba", "filename": "src/test/ui/parser/lex-bad-char-literals-7.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,4 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n fn main() {\n     let _: char = '';\n     //~^ ERROR: empty character literal"}, {"sha": "ee9aa869352990d480fdc87a6efe5f8b6b34e515", "filename": "src/test/ui/parser/lex-bad-char-literals-7.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,17 +1,17 @@\n error: empty character literal\n-  --> $DIR/lex-bad-char-literals-7.rs:3:20\n+  --> $DIR/lex-bad-char-literals-7.rs:2:20\n    |\n LL |     let _: char = '';\n    |                    ^\n \n error: empty unicode escape (must have at least 1 hex digit)\n-  --> $DIR/lex-bad-char-literals-7.rs:5:20\n+  --> $DIR/lex-bad-char-literals-7.rs:4:20\n    |\n LL |     let _: char = '\\u{}';\n    |                    ^^^^\n \n error: unterminated character literal\n-  --> $DIR/lex-bad-char-literals-7.rs:12:13\n+  --> $DIR/lex-bad-char-literals-7.rs:11:13\n    |\n LL |     let _ = ' hello // here's a comment\n    |             ^^^^^^^^"}, {"sha": "9a9f9c433e1d6f8f9c36593e1e12051f9b7355d3", "filename": "src/test/ui/parser/lex-bare-cr-string-literal-doc-comment.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n // ignore-tidy-cr\n \n /// doc comment with bare CR: '\r'"}, {"sha": "598da6b930730aa90235d3cf8db6074f6803d511", "filename": "src/test/ui/parser/lex-bare-cr-string-literal-doc-comment.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,41 +1,41 @@\n error: bare CR not allowed in doc-comment\n-  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:5:32\n+  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:3:32\n    |\n LL | /// doc comment with bare CR: '\r'\n    |                                ^\n \n error: bare CR not allowed in block doc-comment\n-  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:9:38\n+  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:7:38\n    |\n LL | /** block doc comment with bare CR: '\r' */\n    |                                      ^\n \n error: bare CR not allowed in doc-comment\n-  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:14:36\n+  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:12:36\n    |\n LL |     //! doc comment with bare CR: '\r'\n    |                                    ^\n \n error: bare CR not allowed in block doc-comment\n-  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:17:42\n+  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:15:42\n    |\n LL |     /*! block doc comment with bare CR: '\r' */\n    |                                          ^\n \n error: bare CR not allowed in string, use \\r instead\n-  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:21:18\n+  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:19:18\n    |\n LL |     let _s = \"foo\rbar\";\n    |                  ^\n \n error: bare CR not allowed in raw string\n-  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:24:19\n+  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:22:19\n    |\n LL |     let _s = r\"bar\rfoo\";\n    |                   ^\n \n error: unknown character escape: \\r\n-  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:27:19\n+  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:25:19\n    |\n LL |     let _s = \"foo\\\rbar\";\n    |                   ^ unknown character escape"}, {"sha": "163c8ac66b022ae8eb4aac851d8adc71027e05bb", "filename": "src/test/ui/parser/raw-byte-string-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,5 +1,5 @@\n // ignore-tidy-cr\n-// compile-flags: -Z continue-parse-after-error\n+\n pub fn main() {\n     br\"a\r\"; //~ ERROR bare CR not allowed in raw string\n     br\"\u00e9\";  //~ ERROR raw byte string must be ASCII"}, {"sha": "6a3b2c1c60605ad9274487d2b46385cac5deea0c", "filename": "src/test/ui/parser/type-parameters-in-field-exprs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.rs?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n struct Foo {\n     x: isize,\n     y: isize,"}, {"sha": "306b4754d0d69a6ad46dc9d382359f14dd8a44a8", "filename": "src/test/ui/parser/type-parameters-in-field-exprs.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adc65725004c8aac16392fe4052c3e347181157d/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr?ref=adc65725004c8aac16392fe4052c3e347181157d", "patch": "@@ -1,17 +1,17 @@\n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:13:10\n+  --> $DIR/type-parameters-in-field-exprs.rs:11:10\n    |\n LL |     f.x::<isize>;\n    |          ^^^^^^^\n \n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:15:10\n+  --> $DIR/type-parameters-in-field-exprs.rs:13:10\n    |\n LL |     f.x::<>;\n    |          ^^\n \n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:17:7\n+  --> $DIR/type-parameters-in-field-exprs.rs:15:7\n    |\n LL |     f.x::();\n    |       ^^^^^"}]}