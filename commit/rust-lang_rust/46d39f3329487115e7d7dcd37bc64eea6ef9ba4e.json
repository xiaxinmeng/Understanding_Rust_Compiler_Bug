{"sha": "46d39f3329487115e7d7dcd37bc64eea6ef9ba4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZDM5ZjMzMjk0ODcxMTVlN2Q3ZGNkMzdiYzY0ZWVhNmVmOWJhNGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-27T07:51:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-27T07:51:58Z"}, "message": "Auto merge of #37128 - nrc:depr-attr, r=@alexcrichton\n\nDeprecate no_debug and custom_derive\n\nr? @nikomatsakis", "tree": {"sha": "c3081261a6e717d58bda4b1c04b958c8c1d31713", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3081261a6e717d58bda4b1c04b958c8c1d31713"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e", "html_url": "https://github.com/rust-lang/rust/commit/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc283c9487b4607d0a97635dca8c8812b886047b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc283c9487b4607d0a97635dca8c8812b886047b", "html_url": "https://github.com/rust-lang/rust/commit/bc283c9487b4607d0a97635dca8c8812b886047b"}, {"sha": "8c4a39cd951347b3060b07d2eb6a4ce225c44a8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c4a39cd951347b3060b07d2eb6a4ce225c44a8d", "html_url": "https://github.com/rust-lang/rust/commit/8c4a39cd951347b3060b07d2eb6a4ce225c44a8d"}], "stats": {"total": 250, "additions": 199, "deletions": 51}, "files": [{"sha": "7eea6a2fcf2709cee8cb26d642d5e78254cf4af1", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=46d39f3329487115e7d7dcd37bc64eea6ef9ba4e", "patch": "@@ -314,5 +314,4 @@ pub enum LintSource {\n pub type LevelSource = (Level, LintSource);\n \n pub mod builtin;\n-\n mod context;"}, {"sha": "eee34324a6583a192dadd6b642640271642a1b66", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=46d39f3329487115e7d7dcd37bc64eea6ef9ba4e", "patch": "@@ -39,12 +39,13 @@ use rustc::traits::{self, Reveal};\n use rustc::hir::map as hir_map;\n use util::nodemap::NodeSet;\n use lint::{Level, LateContext, LintContext, LintArray, Lint};\n-use lint::{LintPass, LateLintPass};\n+use lint::{LintPass, LateLintPass, EarlyLintPass, EarlyContext};\n \n use std::collections::HashSet;\n \n use syntax::ast;\n use syntax::attr;\n+use syntax::feature_gate::{AttributeGate, AttributeType, Stability, deprecated_attributes};\n use syntax_pos::Span;\n \n use rustc::hir::{self, PatKind};\n@@ -741,6 +742,54 @@ impl LateLintPass for Deprecated {\n     }\n }\n \n+declare_lint! {\n+    DEPRECATED_ATTR,\n+    Warn,\n+    \"detects use of deprecated attributes\"\n+}\n+\n+/// Checks for use of attributes which have been deprecated.\n+#[derive(Clone)]\n+pub struct DeprecatedAttr {\n+    // This is not free to compute, so we want to keep it around, rather than\n+    // compute it for every attribute.\n+    depr_attrs: Vec<&'static (&'static str, AttributeType, AttributeGate)>,\n+}\n+\n+impl DeprecatedAttr {\n+    pub fn new() -> DeprecatedAttr {\n+        DeprecatedAttr {\n+            depr_attrs: deprecated_attributes(),\n+        }\n+    }\n+}\n+\n+impl LintPass for DeprecatedAttr {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DEPRECATED_ATTR)\n+    }\n+}\n+\n+impl EarlyLintPass for DeprecatedAttr {\n+    fn check_attribute(&mut self, cx: &EarlyContext, attr: &ast::Attribute) {\n+        let name = &*attr.name();\n+        for &&(n, _, ref g) in &self.depr_attrs {\n+            if n == name {\n+                if let &AttributeGate::Gated(Stability::Deprecated(link),\n+                                             ref name,\n+                                             ref reason,\n+                                             _) = g {\n+                    cx.span_lint(DEPRECATED,\n+                                 attr.span,\n+                                 &format!(\"use of deprecated attribute `{}`: {}. See {}\",\n+                                          name, reason, link));\n+                }\n+                return;\n+            }\n+        }\n+    }\n+}\n+\n declare_lint! {\n     pub UNCONDITIONAL_RECURSION,\n     Warn,"}, {"sha": "5fc4952965bda0db235d6b020870da223f609d78", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=46d39f3329487115e7d7dcd37bc64eea6ef9ba4e", "patch": "@@ -37,6 +37,7 @@\n #![feature(rustc_private)]\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n+#![feature(dotdot_in_tuple_patterns)]\n \n #[macro_use]\n extern crate syntax;\n@@ -95,6 +96,14 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             )\n     }\n \n+    macro_rules! add_early_builtin_with_new {\n+        ($sess:ident, $($name:ident),*,) => (\n+            {$(\n+                store.register_early_pass($sess, false, box $name::new());\n+                )*}\n+            )\n+    }\n+\n     macro_rules! add_lint_group {\n         ($sess:ident, $name:expr, $($lint:ident),*) => (\n             store.register_group($sess, false, $name, vec![$(LintId::of($lint)),*]);\n@@ -105,6 +114,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                        UnusedParens,\n                        );\n \n+    add_early_builtin_with_new!(sess,\n+                                DeprecatedAttr,\n+                                );\n+\n     add_builtin!(sess,\n                  HardwiredLints,\n                  WhileTrue,"}, {"sha": "129e4a82338035d6bd8d72cd256291de20f7632d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 116, "deletions": 48, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=46d39f3329487115e7d7dcd37bc64eea6ef9ba4e", "patch": "@@ -374,17 +374,34 @@ pub enum AttributeType {\n pub enum AttributeGate {\n     /// Is gated by a given feature gate, reason\n     /// and function to check if enabled\n-    Gated(&'static str, &'static str, fn(&Features) -> bool),\n+    Gated(Stability, &'static str, &'static str, fn(&Features) -> bool),\n \n     /// Ungated attribute, can be used on all release channels\n     Ungated,\n }\n \n+impl AttributeGate {\n+    fn is_deprecated(&self) -> bool {\n+        match *self {\n+            Gated(Stability::Deprecated(_), ..) => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub enum Stability {\n+    Unstable,\n+    // Argument is tracking issue link.\n+    Deprecated(&'static str),\n+}\n+\n // fn() is not Debug\n impl ::std::fmt::Debug for AttributeGate {\n     fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n         match *self {\n-            Gated(ref name, ref expl, _) => write!(fmt, \"Gated({}, {})\", name, expl),\n+            Gated(ref stab, ref name, ref expl, _) =>\n+                write!(fmt, \"Gated({:?}, {}, {})\", stab, name, expl),\n             Ungated => write!(fmt, \"Ungated\")\n         }\n     }\n@@ -399,6 +416,10 @@ macro_rules! cfg_fn {\n     }}\n }\n \n+pub fn deprecated_attributes() -> Vec<&'static (&'static str, AttributeType, AttributeGate)> {\n+    KNOWN_ATTRIBUTES.iter().filter(|a| a.2.is_deprecated()).collect()\n+}\n+\n // Attributes that have a special meaning to rustc or rustdoc\n pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGate)] = &[\n     // Normal attributes\n@@ -435,158 +456,190 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     (\"macro_escape\", Normal, Ungated),\n \n     // RFC #1445.\n-    (\"structural_match\", Whitelisted, Gated(\"structural_match\",\n+    (\"structural_match\", Whitelisted, Gated(Stability::Unstable,\n+                                            \"structural_match\",\n                                             \"the semantics of constant patterns is \\\n                                              not yet settled\",\n                                             cfg_fn!(structural_match))),\n \n     // Not used any more, but we can't feature gate it\n     (\"no_stack_check\", Normal, Ungated),\n \n-    (\"plugin\", CrateLevel, Gated(\"plugin\",\n+    (\"plugin\", CrateLevel, Gated(Stability::Unstable,\n+                                 \"plugin\",\n                                  \"compiler plugins are experimental \\\n                                   and possibly buggy\",\n                                  cfg_fn!(plugin))),\n \n     (\"no_std\", CrateLevel, Ungated),\n-    (\"no_core\", CrateLevel, Gated(\"no_core\",\n+    (\"no_core\", CrateLevel, Gated(Stability::Unstable,\n+                                  \"no_core\",\n                                   \"no_core is experimental\",\n                                   cfg_fn!(no_core))),\n-    (\"lang\", Normal, Gated(\"lang_items\",\n+    (\"lang\", Normal, Gated(Stability::Unstable,\n+                           \"lang_items\",\n                            \"language items are subject to change\",\n                            cfg_fn!(lang_items))),\n-    (\"linkage\", Whitelisted, Gated(\"linkage\",\n+    (\"linkage\", Whitelisted, Gated(Stability::Unstable,\n+                                   \"linkage\",\n                                    \"the `linkage` attribute is experimental \\\n                                     and not portable across platforms\",\n                                    cfg_fn!(linkage))),\n-    (\"thread_local\", Whitelisted, Gated(\"thread_local\",\n+    (\"thread_local\", Whitelisted, Gated(Stability::Unstable,\n+                                        \"thread_local\",\n                                         \"`#[thread_local]` is an experimental feature, and does \\\n                                          not currently handle destructors. There is no \\\n                                          corresponding `#[task_local]` mapping to the task \\\n                                          model\",\n                                         cfg_fn!(thread_local))),\n \n-    (\"rustc_on_unimplemented\", Normal, Gated(\"on_unimplemented\",\n+    (\"rustc_on_unimplemented\", Normal, Gated(Stability::Unstable,\n+                                             \"on_unimplemented\",\n                                              \"the `#[rustc_on_unimplemented]` attribute \\\n                                               is an experimental feature\",\n                                              cfg_fn!(on_unimplemented))),\n-    (\"allocator\", Whitelisted, Gated(\"allocator\",\n+    (\"allocator\", Whitelisted, Gated(Stability::Unstable,\n+                                     \"allocator\",\n                                      \"the `#[allocator]` attribute is an experimental feature\",\n                                      cfg_fn!(allocator))),\n-    (\"needs_allocator\", Normal, Gated(\"needs_allocator\",\n+    (\"needs_allocator\", Normal, Gated(Stability::Unstable,\n+                                      \"needs_allocator\",\n                                       \"the `#[needs_allocator]` \\\n                                        attribute is an experimental \\\n                                        feature\",\n                                       cfg_fn!(needs_allocator))),\n-    (\"panic_runtime\", Whitelisted, Gated(\"panic_runtime\",\n+    (\"panic_runtime\", Whitelisted, Gated(Stability::Unstable,\n+                                         \"panic_runtime\",\n                                          \"the `#[panic_runtime]` attribute is \\\n                                           an experimental feature\",\n                                          cfg_fn!(panic_runtime))),\n-    (\"needs_panic_runtime\", Whitelisted, Gated(\"needs_panic_runtime\",\n+    (\"needs_panic_runtime\", Whitelisted, Gated(Stability::Unstable,\n+                                               \"needs_panic_runtime\",\n                                                \"the `#[needs_panic_runtime]` \\\n                                                 attribute is an experimental \\\n                                                 feature\",\n                                                cfg_fn!(needs_panic_runtime))),\n-    (\"rustc_variance\", Normal, Gated(\"rustc_attrs\",\n+    (\"rustc_variance\", Normal, Gated(Stability::Unstable,\n+                                     \"rustc_attrs\",\n                                      \"the `#[rustc_variance]` attribute \\\n                                       is just used for rustc unit tests \\\n                                       and will never be stable\",\n                                      cfg_fn!(rustc_attrs))),\n-    (\"rustc_error\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_error\", Whitelisted, Gated(Stability::Unstable,\n+                                       \"rustc_attrs\",\n                                        \"the `#[rustc_error]` attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n                                        cfg_fn!(rustc_attrs))),\n-    (\"rustc_if_this_changed\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_if_this_changed\", Whitelisted, Gated(Stability::Unstable,\n+                                                 \"rustc_attrs\",\n                                                  \"the `#[rustc_if_this_changed]` attribute \\\n                                                   is just used for rustc unit tests \\\n                                                   and will never be stable\",\n                                                  cfg_fn!(rustc_attrs))),\n-    (\"rustc_then_this_would_need\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_then_this_would_need\", Whitelisted, Gated(Stability::Unstable,\n+                                                      \"rustc_attrs\",\n                                                       \"the `#[rustc_if_this_changed]` attribute \\\n                                                        is just used for rustc unit tests \\\n                                                        and will never be stable\",\n                                                       cfg_fn!(rustc_attrs))),\n-    (\"rustc_dirty\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_dirty\", Whitelisted, Gated(Stability::Unstable,\n+                                       \"rustc_attrs\",\n                                        \"the `#[rustc_dirty]` attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n                                        cfg_fn!(rustc_attrs))),\n-    (\"rustc_clean\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_clean\", Whitelisted, Gated(Stability::Unstable,\n+                                       \"rustc_attrs\",\n                                        \"the `#[rustc_clean]` attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n                                        cfg_fn!(rustc_attrs))),\n-    (\"rustc_metadata_dirty\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_metadata_dirty\", Whitelisted, Gated(Stability::Unstable,\n+                                                \"rustc_attrs\",\n                                                 \"the `#[rustc_metadata_dirty]` attribute \\\n                                                  is just used for rustc unit tests \\\n                                                  and will never be stable\",\n                                                  cfg_fn!(rustc_attrs))),\n-    (\"rustc_metadata_clean\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_metadata_clean\", Whitelisted, Gated(Stability::Unstable,\n+                                                \"rustc_attrs\",\n                                                 \"the `#[rustc_metadata_clean]` attribute \\\n                                                  is just used for rustc unit tests \\\n                                                  and will never be stable\",\n                                                  cfg_fn!(rustc_attrs))),\n-    (\"rustc_partition_reused\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_partition_reused\", Whitelisted, Gated(Stability::Unstable,\n+                                                  \"rustc_attrs\",\n                                                   \"this attribute \\\n                                                    is just used for rustc unit tests \\\n                                                    and will never be stable\",\n                                                   cfg_fn!(rustc_attrs))),\n-    (\"rustc_partition_translated\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_partition_translated\", Whitelisted, Gated(Stability::Unstable,\n+                                                      \"rustc_attrs\",\n                                                       \"this attribute \\\n                                                        is just used for rustc unit tests \\\n                                                        and will never be stable\",\n                                                       cfg_fn!(rustc_attrs))),\n-    (\"rustc_symbol_name\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_symbol_name\", Whitelisted, Gated(Stability::Unstable,\n+                                             \"rustc_attrs\",\n                                              \"internal rustc attributes will never be stable\",\n                                              cfg_fn!(rustc_attrs))),\n-    (\"rustc_item_path\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_item_path\", Whitelisted, Gated(Stability::Unstable,\n+                                           \"rustc_attrs\",\n                                            \"internal rustc attributes will never be stable\",\n                                            cfg_fn!(rustc_attrs))),\n-    (\"rustc_move_fragments\", Normal, Gated(\"rustc_attrs\",\n+    (\"rustc_move_fragments\", Normal, Gated(Stability::Unstable,\n+                                           \"rustc_attrs\",\n                                            \"the `#[rustc_move_fragments]` attribute \\\n                                             is just used for rustc unit tests \\\n                                             and will never be stable\",\n                                            cfg_fn!(rustc_attrs))),\n-    (\"rustc_mir\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_mir\", Whitelisted, Gated(Stability::Unstable,\n+                                     \"rustc_attrs\",\n                                      \"the `#[rustc_mir]` attribute \\\n                                       is just used for rustc unit tests \\\n                                       and will never be stable\",\n                                      cfg_fn!(rustc_attrs))),\n-    (\"rustc_inherit_overflow_checks\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_inherit_overflow_checks\", Whitelisted, Gated(Stability::Unstable,\n+                                                         \"rustc_attrs\",\n                                                          \"the `#[rustc_inherit_overflow_checks]` \\\n                                                           attribute is just used to control \\\n                                                           overflow checking behavior of several \\\n                                                           libcore functions that are inlined \\\n                                                           across crates and will never be stable\",\n                                                           cfg_fn!(rustc_attrs))),\n-    (\"compiler_builtins\", Whitelisted, Gated(\"compiler_builtins\",\n+    (\"compiler_builtins\", Whitelisted, Gated(Stability::Unstable,\n+                                             \"compiler_builtins\",\n                                              \"the `#[compiler_builtins]` attribute is used to \\\n                                               identify the `compiler_builtins` crate which \\\n                                               contains compiler-rt intrinsics and will never be \\\n                                               stable\",\n                                           cfg_fn!(compiler_builtins))),\n \n-    (\"allow_internal_unstable\", Normal, Gated(\"allow_internal_unstable\",\n+    (\"allow_internal_unstable\", Normal, Gated(Stability::Unstable,\n+                                              \"allow_internal_unstable\",\n                                               EXPLAIN_ALLOW_INTERNAL_UNSTABLE,\n                                               cfg_fn!(allow_internal_unstable))),\n \n-    (\"fundamental\", Whitelisted, Gated(\"fundamental\",\n+    (\"fundamental\", Whitelisted, Gated(Stability::Unstable,\n+                                       \"fundamental\",\n                                        \"the `#[fundamental]` attribute \\\n                                         is an experimental feature\",\n                                        cfg_fn!(fundamental))),\n \n-    (\"linked_from\", Normal, Gated(\"linked_from\",\n+    (\"linked_from\", Normal, Gated(Stability::Unstable,\n+                                  \"linked_from\",\n                                   \"the `#[linked_from]` attribute \\\n                                    is an experimental feature\",\n                                   cfg_fn!(linked_from))),\n \n-    (\"proc_macro_derive\", Normal, Gated(\"proc_macro\",\n+    (\"proc_macro_derive\", Normal, Gated(Stability::Unstable,\n+                                        \"proc_macro\",\n                                         \"the `#[proc_macro_derive]` attribute \\\n                                          is an experimental feature\",\n                                         cfg_fn!(proc_macro))),\n \n-    (\"rustc_copy_clone_marker\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_copy_clone_marker\", Whitelisted, Gated(Stability::Unstable,\n+                                                   \"rustc_attrs\",\n                                                    \"internal implementation detail\",\n                                                    cfg_fn!(rustc_attrs))),\n \n@@ -596,7 +649,8 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     // FIXME: #14406 these are processed in trans, which happens after the\n     // lint pass\n     (\"cold\", Whitelisted, Ungated),\n-    (\"naked\", Whitelisted, Gated(\"naked_functions\",\n+    (\"naked\", Whitelisted, Gated(Stability::Unstable,\n+                                 \"naked_functions\",\n                                  \"the `#[naked]` attribute \\\n                                   is an experimental feature\",\n                                  cfg_fn!(naked_functions))),\n@@ -607,31 +661,38 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     (\"link_section\", Whitelisted, Ungated),\n     (\"no_builtins\", Whitelisted, Ungated),\n     (\"no_mangle\", Whitelisted, Ungated),\n-    (\"no_debug\", Whitelisted, Gated(\"no_debug\",\n-                                    \"the `#[no_debug]` attribute \\\n-                                     is an experimental feature\",\n-                                    cfg_fn!(no_debug))),\n-    (\"omit_gdb_pretty_printer_section\", Whitelisted, Gated(\"omit_gdb_pretty_printer_section\",\n+    (\"no_debug\", Whitelisted, Gated(\n+        Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/29721\"),\n+        \"no_debug\",\n+        \"the `#[no_debug]` attribute is an experimental feature\",\n+        cfg_fn!(no_debug))),\n+    (\"omit_gdb_pretty_printer_section\", Whitelisted, Gated(Stability::Unstable,\n+                                                       \"omit_gdb_pretty_printer_section\",\n                                                        \"the `#[omit_gdb_pretty_printer_section]` \\\n                                                         attribute is just used for the Rust test \\\n                                                         suite\",\n                                                        cfg_fn!(omit_gdb_pretty_printer_section))),\n     (\"unsafe_destructor_blind_to_params\",\n      Normal,\n-     Gated(\"dropck_parametricity\",\n+     Gated(Stability::Unstable,\n+           \"dropck_parametricity\",\n            \"unsafe_destructor_blind_to_params has unstable semantics \\\n             and may be removed in the future\",\n            cfg_fn!(dropck_parametricity))),\n     (\"may_dangle\",\n      Normal,\n-     Gated(\"dropck_eyepatch\",\n+     Gated(Stability::Unstable,\n+           \"dropck_eyepatch\",\n            \"may_dangle has unstable semantics and may be removed in the future\",\n            cfg_fn!(dropck_eyepatch))),\n-    (\"unwind\", Whitelisted, Gated(\"unwind_attributes\", \"#[unwind] is experimental\",\n+    (\"unwind\", Whitelisted, Gated(Stability::Unstable,\n+                                  \"unwind_attributes\",\n+                                  \"#[unwind] is experimental\",\n                                   cfg_fn!(unwind_attributes))),\n \n     // used in resolve\n-    (\"prelude_import\", Whitelisted, Gated(\"prelude_import\",\n+    (\"prelude_import\", Whitelisted, Gated(Stability::Unstable,\n+                                          \"prelude_import\",\n                                           \"`#[prelude_import]` is for use by rustc only\",\n                                           cfg_fn!(prelude_import))),\n \n@@ -643,10 +704,12 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     (\"unstable\", Whitelisted, Ungated),\n     (\"deprecated\", Normal, Ungated),\n \n-    (\"rustc_paren_sugar\", Normal, Gated(\"unboxed_closures\",\n+    (\"rustc_paren_sugar\", Normal, Gated(Stability::Unstable,\n+                                        \"unboxed_closures\",\n                                         \"unboxed_closures are still evolving\",\n                                         cfg_fn!(unboxed_closures))),\n-    (\"rustc_reflect_like\", Whitelisted, Gated(\"reflect\",\n+    (\"rustc_reflect_like\", Whitelisted, Gated(Stability::Unstable,\n+                                              \"reflect\",\n                                               \"defining reflective traits is still evolving\",\n                                               cfg_fn!(reflect))),\n \n@@ -729,7 +792,7 @@ impl<'a> Context<'a> {\n         let name = &*attr.name();\n         for &(n, ty, ref gateage) in KNOWN_ATTRIBUTES {\n             if n == name {\n-                if let &Gated(ref name, ref desc, ref has_feature) = gateage {\n+                if let &Gated(_, ref name, ref desc, ref has_feature) = gateage {\n                     gate_feature_fn!(self, has_feature, attr.span, name, desc);\n                 }\n                 debug!(\"check_attribute: {:?} is known, {:?}, {:?}\", name, ty, gateage);\n@@ -852,7 +915,12 @@ pub const EXPLAIN_ALLOW_INTERNAL_UNSTABLE: &'static str =\n     \"allow_internal_unstable side-steps feature gating and stability checks\";\n \n pub const EXPLAIN_CUSTOM_DERIVE: &'static str =\n-    \"`#[derive]` for custom traits is not stable enough for use and is subject to change\";\n+    \"`#[derive]` for custom traits is not stable enough for use. It is deprecated and will \\\n+     be removed in v1.15\";\n+\n+pub const EXPLAIN_DEPR_CUSTOM_DERIVE: &'static str =\n+    \"`#[derive]` for custom traits is deprecated and will be removed in v1.15. Prefer using \\\n+     procedural macro custom derive\";\n \n pub const EXPLAIN_DERIVE_UNDERSCORE: &'static str =\n     \"attributes of the form `#[derive_*]` are reserved for the compiler\";"}, {"sha": "b2f2787899301207d4f57fcd1aec34011324fe30", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=46d39f3329487115e7d7dcd37bc64eea6ef9ba4e", "patch": "@@ -34,6 +34,7 @@\n #![cfg_attr(stage0, feature(question_mark))]\n #![feature(rustc_diagnostic_macros)]\n #![feature(specialization)]\n+#![feature(dotdot_in_tuple_patterns)]\n \n extern crate serialize;\n extern crate term;"}, {"sha": "67747173353da028f9a0a462ff826f5f5ef705db", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=46d39f3329487115e7d7dcd37bc64eea6ef9ba4e", "patch": "@@ -175,6 +175,7 @@ pub fn expand_derive(cx: &mut ExtCtxt,\n                                            feature_gate::GateIssue::Language,\n                                            feature_gate::EXPLAIN_CUSTOM_DERIVE);\n         } else {\n+            cx.span_warn(titem.span, feature_gate::EXPLAIN_DEPR_CUSTOM_DERIVE);\n             let name = intern_and_get_ident(&format!(\"derive_{}\", tname));\n             let mitem = cx.meta_word(titem.span, name);\n             new_attributes.push(cx.attribute(mitem.span, mitem));"}, {"sha": "596cc1e7d58163e8af3b843089e08092e1ccc43b", "filename": "src/test/compile-fail/deriving-meta-unknown-trait.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e/src%2Ftest%2Fcompile-fail%2Fderiving-meta-unknown-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e/src%2Ftest%2Fcompile-fail%2Fderiving-meta-unknown-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-meta-unknown-trait.rs?ref=46d39f3329487115e7d7dcd37bc64eea6ef9ba4e", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n+\n #[derive(Eqr)]\n-//~^ ERROR `#[derive]` for custom traits is not stable enough for use and is subject to change\n+//~^ ERROR `#[derive]` for custom traits is not stable enough for use. It is deprecated and will be removed in v1.15 (see issue #29644)\n struct Foo;\n \n pub fn main() {}"}, {"sha": "b663c136ee525bc9f54cac840bbe4d8a3c2d0ca2", "filename": "src/test/compile-fail/feature-gate-no-debug-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e/src%2Ftest%2Fcompile-fail%2Ffeature-gate-no-debug-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d39f3329487115e7d7dcd37bc64eea6ef9ba4e/src%2Ftest%2Fcompile-fail%2Ffeature-gate-no-debug-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-no-debug-2.rs?ref=46d39f3329487115e7d7dcd37bc64eea6ef9ba4e", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(deprecated)]\n+#![feature(no_debug)]\n+\n+#[no_debug] //~ ERROR use of deprecated attribute `no_debug`\n+fn main() {}"}]}