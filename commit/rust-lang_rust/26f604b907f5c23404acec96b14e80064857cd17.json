{"sha": "26f604b907f5c23404acec96b14e80064857cd17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZjYwNGI5MDdmNWMyMzQwNGFjZWM5NmIxNGU4MDA2NDg1N2NkMTc=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-22T13:42:28Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-22T14:02:03Z"}, "message": "Store invocation site for eager macros", "tree": {"sha": "43d0e4e98a00260e72edb5cfd4dc74e73f5c9a02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43d0e4e98a00260e72edb5cfd4dc74e73f5c9a02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26f604b907f5c23404acec96b14e80064857cd17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26f604b907f5c23404acec96b14e80064857cd17", "html_url": "https://github.com/rust-lang/rust/commit/26f604b907f5c23404acec96b14e80064857cd17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26f604b907f5c23404acec96b14e80064857cd17/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b98ee075ee8baa6dc4284f04df4c7012baccda28", "url": "https://api.github.com/repos/rust-lang/rust/commits/b98ee075ee8baa6dc4284f04df4c7012baccda28", "html_url": "https://github.com/rust-lang/rust/commit/b98ee075ee8baa6dc4284f04df4c7012baccda28"}], "stats": {"total": 80, "additions": 52, "deletions": 28}, "files": [{"sha": "6382521fbba1b3fef9faf22e535a283f4705836f", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26f604b907f5c23404acec96b14e80064857cd17/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f604b907f5c23404acec96b14e80064857cd17/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=26f604b907f5c23404acec96b14e80064857cd17", "patch": "@@ -563,14 +563,15 @@ mod tests {\n \n                 let args = macro_call.token_tree().unwrap();\n                 let parsed_args = mbe::ast_to_token_tree(&args).unwrap().0;\n+                let call_id = AstId::new(file_id.into(), ast_id_map.ast_id(&macro_call));\n \n                 let arg_id = db.intern_eager_expansion({\n                     EagerCallLoc {\n                         def,\n                         fragment: FragmentKind::Expr,\n                         subtree: Arc::new(parsed_args.clone()),\n                         krate,\n-                        file_id: file_id.into(),\n+                        call: call_id,\n                     }\n                 });\n \n@@ -580,7 +581,7 @@ mod tests {\n                     fragment,\n                     subtree: Arc::new(subtree),\n                     krate,\n-                    file_id: file_id.into(),\n+                    call: call_id,\n                 };\n \n                 let id: MacroCallId = db.intern_eager_expansion(eager).into();"}, {"sha": "077de37270cf21b82ad981f448c449855218250f", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/26f604b907f5c23404acec96b14e80064857cd17/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f604b907f5c23404acec96b14e80064857cd17/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=26f604b907f5c23404acec96b14e80064857cd17", "patch": "@@ -5,7 +5,7 @@ use std::sync::Arc;\n use base_db::{salsa, SourceDatabase};\n use mbe::{ExpandError, ExpandResult, MacroRules};\n use parser::FragmentKind;\n-use syntax::{algo::diff, AstNode, GreenNode, Parse, SyntaxKind::*, SyntaxNode};\n+use syntax::{algo::diff, ast::NameOwner, AstNode, GreenNode, Parse, SyntaxKind::*, SyntaxNode};\n \n use crate::{\n     ast_id_map::AstIdMap, BuiltinDeriveExpander, BuiltinFnLikeExpander, EagerCallLoc, EagerMacroId,\n@@ -129,19 +129,20 @@ fn ast_id_map(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<(TokenExpander, mbe::TokenMap)>> {\n     match id.kind {\n         MacroDefKind::Declarative => {\n-            let macro_call = match id.ast_id?.to_node(db) {\n+            let macro_rules = match id.ast_id?.to_node(db) {\n                 syntax::ast::Macro::MacroRules(mac) => mac,\n                 syntax::ast::Macro::MacroDef(_) => return None,\n             };\n-            let arg = macro_call.token_tree()?;\n+            let arg = macro_rules.token_tree()?;\n             let (tt, tmap) = mbe::ast_to_token_tree(&arg).or_else(|| {\n                 log::warn!(\"fail on macro_def to token tree: {:#?}\", arg);\n                 None\n             })?;\n             let rules = match MacroRules::parse(&tt) {\n                 Ok(it) => it,\n                 Err(err) => {\n-                    log::warn!(\"fail on macro_def parse: error: {:#?} {:#?}\", err, tt);\n+                    let name = macro_rules.name().map(|n| n.to_string()).unwrap_or_default();\n+                    log::warn!(\"fail on macro_def parse ({}): {:?} {:#?}\", name, err, tt);\n                     return None;\n                 }\n             };"}, {"sha": "6354b090d83cc2bcb32eaa2edf7c5c326e464a25", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26f604b907f5c23404acec96b14e80064857cd17/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f604b907f5c23404acec96b14e80064857cd17/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=26f604b907f5c23404acec96b14e80064857cd17", "patch": "@@ -110,6 +110,9 @@ pub fn expand_eager_macro(\n         || err(\"malformed macro invocation\"),\n     )?;\n \n+    let ast_map = db.ast_id_map(macro_call.file_id);\n+    let call_id = InFile::new(macro_call.file_id, ast_map.ast_id(&macro_call.value));\n+\n     // Note:\n     // When `lazy_expand` is called, its *parent* file must be already exists.\n     // Here we store an eager macro id for the argument expanded subtree here\n@@ -120,7 +123,7 @@ pub fn expand_eager_macro(\n             fragment: FragmentKind::Expr,\n             subtree: Arc::new(parsed_args.clone()),\n             krate,\n-            file_id: macro_call.file_id,\n+            call: call_id,\n         }\n     });\n     let arg_file_id: MacroCallId = arg_id.into();\n@@ -141,13 +144,8 @@ pub fn expand_eager_macro(\n         let res = eager.expand(db, arg_id, &subtree);\n \n         let (subtree, fragment) = diagnostic_sink.expand_result_option(res)?;\n-        let eager = EagerCallLoc {\n-            def,\n-            fragment,\n-            subtree: Arc::new(subtree),\n-            krate,\n-            file_id: macro_call.file_id,\n-        };\n+        let eager =\n+            EagerCallLoc { def, fragment, subtree: Arc::new(subtree), krate, call: call_id };\n \n         Ok(db.intern_eager_expansion(eager))\n     } else {"}, {"sha": "3fa1b1d776f8302c45a1e4de7bd9d8cce114ff52", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/26f604b907f5c23404acec96b14e80064857cd17/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f604b907f5c23404acec96b14e80064857cd17/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=26f604b907f5c23404acec96b14e80064857cd17", "patch": "@@ -83,7 +83,7 @@ impl HirFileId {\n                     }\n                     MacroCallId::EagerMacro(id) => {\n                         let loc = db.lookup_intern_eager_expansion(id);\n-                        loc.file_id\n+                        loc.call.file_id\n                     }\n                 };\n                 file_id.original_file(db)\n@@ -103,7 +103,7 @@ impl HirFileId {\n                 }\n                 MacroCallId::EagerMacro(id) => {\n                     let loc = db.lookup_intern_eager_expansion(id);\n-                    loc.file_id\n+                    loc.call.file_id\n                 }\n             };\n         }\n@@ -114,17 +114,16 @@ impl HirFileId {\n     pub fn call_node(self, db: &dyn db::AstDatabase) -> Option<InFile<SyntaxNode>> {\n         match self.0 {\n             HirFileIdRepr::FileId(_) => None,\n-            HirFileIdRepr::MacroFile(macro_file) => {\n-                let lazy_id = match macro_file.macro_call_id {\n-                    MacroCallId::LazyMacro(id) => id,\n-                    MacroCallId::EagerMacro(_id) => {\n-                        // FIXME: handle call node for eager macro\n-                        return None;\n-                    }\n-                };\n-                let loc = db.lookup_intern_macro(lazy_id);\n-                Some(loc.kind.node(db))\n-            }\n+            HirFileIdRepr::MacroFile(macro_file) => match macro_file.macro_call_id {\n+                MacroCallId::LazyMacro(lazy_id) => {\n+                    let loc: MacroCallLoc = db.lookup_intern_macro(lazy_id);\n+                    Some(loc.kind.node(db))\n+                }\n+                MacroCallId::EagerMacro(id) => {\n+                    let loc: EagerCallLoc = db.lookup_intern_eager_expansion(id);\n+                    Some(loc.call.with_value(loc.call.to_node(db).syntax().clone()))\n+                }\n+            },\n         }\n     }\n \n@@ -304,7 +303,7 @@ pub struct EagerCallLoc {\n     pub(crate) fragment: FragmentKind,\n     pub(crate) subtree: Arc<tt::Subtree>,\n     pub(crate) krate: CrateId,\n-    pub(crate) file_id: HirFileId,\n+    pub(crate) call: AstId<ast::MacroCall>,\n }\n \n /// ExpansionInfo mainly describes how to map text range between src and expanded macro"}, {"sha": "47dd85cebd951495e383abb8e73cda8459980502", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/26f604b907f5c23404acec96b14e80064857cd17/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f604b907f5c23404acec96b14e80064857cd17/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=26f604b907f5c23404acec96b14e80064857cd17", "patch": "@@ -749,6 +749,31 @@ fn test() {\n         );\n     }\n \n+    #[test]\n+    fn goto_through_included_file() {\n+        check(\n+            r#\"\n+//- /main.rs\n+#[rustc_builtin_macro]\n+macro_rules! include {}\n+\n+  include!(\"foo.rs\");\n+//^^^^^^^^^^^^^^^^^^^\n+\n+fn f() {\n+    foo<|>();\n+}\n+\n+mod confuse_index {\n+    pub fn foo() {}\n+}\n+\n+//- /foo.rs\n+fn foo() {}\n+        \"#,\n+        );\n+    }\n+\n     #[test]\n     fn goto_for_type_param() {\n         check("}]}