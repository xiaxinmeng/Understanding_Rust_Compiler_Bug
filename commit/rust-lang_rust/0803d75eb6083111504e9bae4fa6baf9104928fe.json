{"sha": "0803d75eb6083111504e9bae4fa6baf9104928fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MDNkNzVlYjYwODMxMTE1MDRlOWJhZTRmYTZiYWY5MTA0OTI4ZmU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-08T21:53:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-08T22:00:44Z"}, "message": "offer ways to directly construct a Scalar from unsigned integers", "tree": {"sha": "4de75084e4146f58b74700701d687f6646733dcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4de75084e4146f58b74700701d687f6646733dcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0803d75eb6083111504e9bae4fa6baf9104928fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0803d75eb6083111504e9bae4fa6baf9104928fe", "html_url": "https://github.com/rust-lang/rust/commit/0803d75eb6083111504e9bae4fa6baf9104928fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0803d75eb6083111504e9bae4fa6baf9104928fe/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3836573ae4610f75d41d467e35d855efd6b000b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3836573ae4610f75d41d467e35d855efd6b000b5", "html_url": "https://github.com/rust-lang/rust/commit/3836573ae4610f75d41d467e35d855efd6b000b5"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "8d4d61764833a159008e00ef757b659efc2d53ff", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0803d75eb6083111504e9bae4fa6baf9104928fe/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0803d75eb6083111504e9bae4fa6baf9104928fe/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=0803d75eb6083111504e9bae4fa6baf9104928fe", "patch": "@@ -280,6 +280,26 @@ impl<'tcx, Tag> Scalar<Tag> {\n         Scalar::Raw { data: i, size: size.bytes() as u8 }\n     }\n \n+    #[inline]\n+    pub fn from_u8(i: u8) -> Self {\n+        Scalar::Raw { data: i as u128, size: 1 }\n+    }\n+\n+    #[inline]\n+    pub fn from_u16(i: u16) -> Self {\n+        Scalar::Raw { data: i as u128, size: 2 }\n+    }\n+\n+    #[inline]\n+    pub fn from_u32(i: u32) -> Self {\n+        Scalar::Raw { data: i as u128, size: 4 }\n+    }\n+\n+    #[inline]\n+    pub fn from_u64(i: u64) -> Self {\n+        Scalar::Raw { data: i as u128, size: 8 }\n+    }\n+\n     #[inline]\n     pub fn from_int(i: impl Into<i128>, size: Size) -> Self {\n         let i = i.into();\n@@ -294,12 +314,14 @@ impl<'tcx, Tag> Scalar<Tag> {\n \n     #[inline]\n     pub fn from_f32(f: Single) -> Self {\n-        Scalar::Raw { data: f.to_bits() as u128, size: 4 }\n+        // We trust apfloat to give us properly truncated data\n+        Scalar::Raw { data: f.to_bits(), size: 4 }\n     }\n \n     #[inline]\n     pub fn from_f64(f: Double) -> Self {\n-        Scalar::Raw { data: f.to_bits() as u128, size: 8 }\n+        // We trust apfloat to give us properly truncated data\n+        Scalar::Raw { data: f.to_bits(), size: 8 }\n     }\n \n     #[inline]"}]}