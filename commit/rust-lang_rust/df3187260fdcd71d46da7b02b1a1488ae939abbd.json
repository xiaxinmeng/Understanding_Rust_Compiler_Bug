{"sha": "df3187260fdcd71d46da7b02b1a1488ae939abbd", "node_id": "C_kwDOAAsO6NoAKGRmMzE4NzI2MGZkY2Q3MWQ0NmRhN2IwMmIxYTE0ODhhZTkzOWFiYmQ", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-05T19:20:38Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-06T12:10:35Z"}, "message": "Remove one lifetime from `QueryKeyStringBuilder`", "tree": {"sha": "5081863a015b9f728f864871a70c2b1e87336e27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5081863a015b9f728f864871a70c2b1e87336e27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df3187260fdcd71d46da7b02b1a1488ae939abbd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgbSfWKRQb2tiqhuHtakDJeupmrF\nChDbM0msU+PXaBOk8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQCxnISOkiYFR4pkLVNUgrqIYTpWMMbIYRI/o2TOsptxOkorsXs4WXGcfPkd1SHBnOR\nesJJn/TdS0mtQwUy24xwo=\n-----END SSH SIGNATURE-----", "payload": "tree 5081863a015b9f728f864871a70c2b1e87336e27\nparent 88935e0beacb49bb552de1628bdf50b183f7b926\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1667676038 +0100\ncommitter Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1667736635 +0100\n\nRemove one lifetime from `QueryKeyStringBuilder`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df3187260fdcd71d46da7b02b1a1488ae939abbd", "html_url": "https://github.com/rust-lang/rust/commit/df3187260fdcd71d46da7b02b1a1488ae939abbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df3187260fdcd71d46da7b02b1a1488ae939abbd/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88935e0beacb49bb552de1628bdf50b183f7b926", "url": "https://api.github.com/repos/rust-lang/rust/commits/88935e0beacb49bb552de1628bdf50b183f7b926", "html_url": "https://github.com/rust-lang/rust/commit/88935e0beacb49bb552de1628bdf50b183f7b926"}], "stats": {"total": 51, "additions": 15, "deletions": 36}, "files": [{"sha": "81114f2cd82c326dbe9a98aefb7b402b986ded0f", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 15, "deletions": 36, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/df3187260fdcd71d46da7b02b1a1488ae939abbd/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3187260fdcd71d46da7b02b1a1488ae939abbd/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=df3187260fdcd71d46da7b02b1a1488ae939abbd", "patch": "@@ -19,18 +19,18 @@ impl QueryKeyStringCache {\n     }\n }\n \n-struct QueryKeyStringBuilder<'p, 'c, 'tcx> {\n+struct QueryKeyStringBuilder<'p, 'tcx> {\n     profiler: &'p SelfProfiler,\n     tcx: TyCtxt<'tcx>,\n-    string_cache: &'c mut QueryKeyStringCache,\n+    string_cache: &'p mut QueryKeyStringCache,\n }\n \n-impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n+impl<'p, 'tcx> QueryKeyStringBuilder<'p, 'tcx> {\n     fn new(\n         profiler: &'p SelfProfiler,\n         tcx: TyCtxt<'tcx>,\n-        string_cache: &'c mut QueryKeyStringCache,\n-    ) -> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n+        string_cache: &'p mut QueryKeyStringCache,\n+    ) -> QueryKeyStringBuilder<'p, 'tcx> {\n         QueryKeyStringBuilder { profiler, tcx, string_cache }\n     }\n \n@@ -99,7 +99,7 @@ impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n }\n \n trait IntoSelfProfilingString {\n-    fn to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_, '_>) -> StringId;\n+    fn to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_>) -> StringId;\n }\n \n // The default implementation of `IntoSelfProfilingString` just uses `Debug`\n@@ -109,68 +109,50 @@ trait IntoSelfProfilingString {\n impl<T: Debug> IntoSelfProfilingString for T {\n     default fn to_self_profile_string(\n         &self,\n-        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n+        builder: &mut QueryKeyStringBuilder<'_, '_>,\n     ) -> StringId {\n         let s = format!(\"{:?}\", self);\n         builder.profiler.alloc_string(&s[..])\n     }\n }\n \n impl<T: SpecIntoSelfProfilingString> IntoSelfProfilingString for T {\n-    fn to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_, '_>) -> StringId {\n+    fn to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_>) -> StringId {\n         self.spec_to_self_profile_string(builder)\n     }\n }\n \n #[rustc_specialization_trait]\n trait SpecIntoSelfProfilingString: Debug {\n-    fn spec_to_self_profile_string(\n-        &self,\n-        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n-    ) -> StringId;\n+    fn spec_to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_>) -> StringId;\n }\n \n impl SpecIntoSelfProfilingString for DefId {\n-    fn spec_to_self_profile_string(\n-        &self,\n-        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n-    ) -> StringId {\n+    fn spec_to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_>) -> StringId {\n         builder.def_id_to_string_id(*self)\n     }\n }\n \n impl SpecIntoSelfProfilingString for CrateNum {\n-    fn spec_to_self_profile_string(\n-        &self,\n-        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n-    ) -> StringId {\n+    fn spec_to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_>) -> StringId {\n         builder.def_id_to_string_id(self.as_def_id())\n     }\n }\n \n impl SpecIntoSelfProfilingString for DefIndex {\n-    fn spec_to_self_profile_string(\n-        &self,\n-        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n-    ) -> StringId {\n+    fn spec_to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_>) -> StringId {\n         builder.def_id_to_string_id(DefId { krate: LOCAL_CRATE, index: *self })\n     }\n }\n \n impl SpecIntoSelfProfilingString for LocalDefId {\n-    fn spec_to_self_profile_string(\n-        &self,\n-        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n-    ) -> StringId {\n+    fn spec_to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_>) -> StringId {\n         builder.def_id_to_string_id(DefId { krate: LOCAL_CRATE, index: self.local_def_index })\n     }\n }\n \n impl<T: SpecIntoSelfProfilingString> SpecIntoSelfProfilingString for WithOptConstParam<T> {\n-    fn spec_to_self_profile_string(\n-        &self,\n-        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n-    ) -> StringId {\n+    fn spec_to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_>) -> StringId {\n         // We print `WithOptConstParam` values as tuples to make them shorter\n         // and more readable, without losing information:\n         //\n@@ -205,10 +187,7 @@ where\n     T0: SpecIntoSelfProfilingString,\n     T1: SpecIntoSelfProfilingString,\n {\n-    fn spec_to_self_profile_string(\n-        &self,\n-        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n-    ) -> StringId {\n+    fn spec_to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_>) -> StringId {\n         let val0 = self.0.to_self_profile_string(builder);\n         let val1 = self.1.to_self_profile_string(builder);\n "}]}