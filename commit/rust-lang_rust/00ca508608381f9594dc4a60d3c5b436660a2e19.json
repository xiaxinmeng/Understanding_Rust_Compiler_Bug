{"sha": "00ca508608381f9594dc4a60d3c5b436660a2e19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwY2E1MDg2MDgzODFmOTU5NGRjNGE2MGQzYzViNDM2NjYwYTJlMTk=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-05T23:10:18Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-10T11:12:28Z"}, "message": "Move pp::Printer out field to owned String\n\nThis enforces that eof() must be called to get the String out, and\ngenerally is better from an API perspective. No users of pretty printing\npre-allocate the buffer.", "tree": {"sha": "765417a03e822e600e0f0f92c73e829313bfd100", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/765417a03e822e600e0f0f92c73e829313bfd100"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00ca508608381f9594dc4a60d3c5b436660a2e19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00ca508608381f9594dc4a60d3c5b436660a2e19", "html_url": "https://github.com/rust-lang/rust/commit/00ca508608381f9594dc4a60d3c5b436660a2e19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00ca508608381f9594dc4a60d3c5b436660a2e19/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0ffa7c3d2115b9a1d22b6a5de288aa696abf50f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ffa7c3d2115b9a1d22b6a5de288aa696abf50f", "html_url": "https://github.com/rust-lang/rust/commit/e0ffa7c3d2115b9a1d22b6a5de288aa696abf50f"}], "stats": {"total": 81, "additions": 34, "deletions": 47}, "files": [{"sha": "8342331e36099241e30798c16e65a9cd2582363e", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/00ca508608381f9594dc4a60d3c5b436660a2e19/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ca508608381f9594dc4a60d3c5b436660a2e19/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=00ca508608381f9594dc4a60d3c5b436660a2e19", "patch": "@@ -68,13 +68,13 @@ impl PpAnn for hir::Crate {\n }\n \n pub struct State<'a> {\n-    pub s: pp::Printer<'a>,\n+    pub s: pp::Printer,\n     comments: Option<Comments<'a>>,\n     ann: &'a (dyn PpAnn + 'a),\n }\n \n impl<'a> PrintState<'a> for State<'a> {\n-    fn writer(&mut self) -> &mut pp::Printer<'a> {\n+    fn writer(&mut self) -> &mut pp::Printer {\n         &mut self.s\n     }\n \n@@ -94,28 +94,25 @@ pub fn print_crate<'a>(cm: &'a SourceMap,\n                        filename: FileName,\n                        input: String,\n                        ann: &'a dyn PpAnn) -> String {\n-    let mut out = String::new();\n-    let mut s = State::new_from_input(cm, sess, filename, input, &mut out, ann);\n+    let mut s = State::new_from_input(cm, sess, filename, input, ann);\n \n     // When printing the AST, we sometimes need to inject `#[no_std]` here.\n     // Since you can't compile the HIR, it's not necessary.\n \n     s.print_mod(&krate.module, &krate.attrs);\n     s.print_remaining_comments();\n-    s.s.eof();\n-    out\n+    s.s.eof()\n }\n \n impl<'a> State<'a> {\n     pub fn new_from_input(cm: &'a SourceMap,\n                           sess: &ParseSess,\n                           filename: FileName,\n                           input: String,\n-                          out: &'a mut String,\n                           ann: &'a dyn PpAnn)\n                           -> State<'a> {\n         State {\n-            s: pp::mk_printer(out),\n+            s: pp::mk_printer(),\n             comments: Some(Comments::new(cm, sess, filename, input)),\n             ann,\n         }\n@@ -125,17 +122,13 @@ impl<'a> State<'a> {\n pub fn to_string<F>(ann: &dyn PpAnn, f: F) -> String\n     where F: FnOnce(&mut State<'_>)\n {\n-    let mut wr = String::new();\n-    {\n-        let mut printer = State {\n-            s: pp::mk_printer(&mut wr),\n-            comments: None,\n-            ann,\n-        };\n-        f(&mut printer);\n-        printer.s.eof();\n-    }\n-    wr\n+    let mut printer = State {\n+        s: pp::mk_printer(),\n+        comments: None,\n+        ann,\n+    };\n+    f(&mut printer);\n+    printer.s.eof()\n }\n \n pub fn visibility_qualified<S: Into<Cow<'static, str>>>(vis: &hir::Visibility, w: S) -> String {"}, {"sha": "cd38eb695eb5dfbde67c61d8143fed13aa5b7759", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00ca508608381f9594dc4a60d3c5b436660a2e19/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ca508608381f9594dc4a60d3c5b436660a2e19/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=00ca508608381f9594dc4a60d3c5b436660a2e19", "patch": "@@ -814,7 +814,6 @@ pub fn print_after_hir_lowering<'tcx>(\n                                                                          &sess.parse_sess,\n                                                                          src_name,\n                                                                          src,\n-                                                                         out,\n                                                                          annotation.pp_ann());\n                     for node_id in uii.all_matching_node_ids(hir_map) {\n                         let hir_id = tcx.hir().node_to_hir_id(node_id);\n@@ -826,7 +825,7 @@ pub fn print_after_hir_lowering<'tcx>(\n                         pp_state.synth_comment(path);\n                         pp_state.s.hardbreak();\n                     }\n-                    pp_state.s.eof();\n+                    *out = pp_state.s.eof();\n                 })\n             }\n "}, {"sha": "ea90defcd508c10809dd9b84d6f2b8a27c4a7b66", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/00ca508608381f9594dc4a60d3c5b436660a2e19/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ca508608381f9594dc4a60d3c5b436660a2e19/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=00ca508608381f9594dc4a60d3c5b436660a2e19", "patch": "@@ -235,13 +235,13 @@ crate struct PrintStackElem {\n \n const SIZE_INFINITY: isize = 0xffff;\n \n-pub fn mk_printer(out: &mut String) -> Printer<'_> {\n+pub fn mk_printer() -> Printer {\n     let linewidth = 78;\n     // Yes 55, it makes the ring buffers big enough to never fall behind.\n     let n: usize = 55 * linewidth;\n     debug!(\"mk_printer {}\", linewidth);\n     Printer {\n-        out,\n+        out: String::new(),\n         buf_max_len: n,\n         margin: linewidth as isize,\n         space: linewidth as isize,\n@@ -258,8 +258,8 @@ pub fn mk_printer(out: &mut String) -> Printer<'_> {\n     }\n }\n \n-pub struct Printer<'a> {\n-    out: &'a mut String,\n+pub struct Printer {\n+    out: String,\n     buf_max_len: usize,\n     /// Width of lines we're constrained to\n     margin: isize,\n@@ -300,7 +300,7 @@ impl Default for BufEntry {\n     }\n }\n \n-impl<'a> Printer<'a> {\n+impl Printer {\n     pub fn last_token(&mut self) -> Token {\n         self.buf[self.right].token.clone()\n     }\n@@ -629,8 +629,9 @@ impl<'a> Printer<'a> {\n         self.pretty_print_end()\n     }\n \n-    pub fn eof(&mut self) {\n-        self.pretty_print_eof()\n+    pub fn eof(mut self) -> String {\n+        self.pretty_print_eof();\n+        self.out\n     }\n \n     pub fn word<S: Into<Cow<'static, str>>>(&mut self, wrd: S) {"}, {"sha": "54672d9da2e2b8ffffc70366b2befa89b597176d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/00ca508608381f9594dc4a60d3c5b436660a2e19/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ca508608381f9594dc4a60d3c5b436660a2e19/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=00ca508608381f9594dc4a60d3c5b436660a2e19", "patch": "@@ -87,7 +87,7 @@ impl<'a> Comments<'a> {\n }\n \n pub struct State<'a> {\n-    pub s: pp::Printer<'a>,\n+    pub s: pp::Printer,\n     comments: Option<Comments<'a>>,\n     ann: &'a (dyn PpAnn+'a),\n     is_expanded: bool\n@@ -104,9 +104,8 @@ pub fn print_crate<'a>(cm: &'a SourceMap,\n                        input: String,\n                        ann: &'a dyn PpAnn,\n                        is_expanded: bool) -> String {\n-    let mut out = String::new();\n     let mut s = State {\n-        s: pp::mk_printer(&mut out),\n+        s: pp::mk_printer(),\n         comments: Some(Comments::new(cm, sess, filename, input)),\n         ann,\n         is_expanded,\n@@ -133,25 +132,20 @@ pub fn print_crate<'a>(cm: &'a SourceMap,\n \n     s.print_mod(&krate.module, &krate.attrs);\n     s.print_remaining_comments();\n-    s.s.eof();\n-    out\n+    s.s.eof()\n }\n \n pub fn to_string<F>(f: F) -> String where\n     F: FnOnce(&mut State<'_>),\n {\n-    let mut wr = String::new();\n-    {\n-        let mut printer = State {\n-            s: pp::mk_printer(&mut wr),\n-            comments: None,\n-            ann: &NoAnn,\n-            is_expanded: false\n-        };\n-        f(&mut printer);\n-        printer.s.eof();\n-    }\n-    wr\n+    let mut printer = State {\n+        s: pp::mk_printer(),\n+        comments: None,\n+        ann: &NoAnn,\n+        is_expanded: false\n+    };\n+    f(&mut printer);\n+    printer.s.eof()\n }\n \n fn binop_to_string(op: BinOpToken) -> &'static str {\n@@ -439,7 +433,7 @@ fn visibility_qualified(vis: &ast::Visibility, s: &str) -> String {\n }\n \n pub trait PrintState<'a> {\n-    fn writer(&mut self) -> &mut pp::Printer<'a>;\n+    fn writer(&mut self) -> &mut pp::Printer;\n     fn comments(&mut self) -> &mut Option<Comments<'a>>;\n \n     fn word_space<S: Into<Cow<'static, str>>>(&mut self, w: S) {\n@@ -760,7 +754,7 @@ pub trait PrintState<'a> {\n }\n \n impl<'a> PrintState<'a> for State<'a> {\n-    fn writer(&mut self) -> &mut pp::Printer<'a> {\n+    fn writer(&mut self) -> &mut pp::Printer {\n         &mut self.s\n     }\n "}]}