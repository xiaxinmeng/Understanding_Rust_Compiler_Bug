{"sha": "8bbd8b0b9263718b4c0c6c86b5ab2fb038aa3f5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYmQ4YjBiOTI2MzcxOGI0YzBjNmM4NmI1YWIyZmIwMzhhYTNmNWI=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-07T22:24:11Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-07T22:32:43Z"}, "message": "Fix ICE in for_loop with globals", "tree": {"sha": "074c63cb73214c58cc5a187bda18eab4309fbb81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/074c63cb73214c58cc5a187bda18eab4309fbb81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bbd8b0b9263718b4c0c6c86b5ab2fb038aa3f5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bbd8b0b9263718b4c0c6c86b5ab2fb038aa3f5b", "html_url": "https://github.com/rust-lang/rust/commit/8bbd8b0b9263718b4c0c6c86b5ab2fb038aa3f5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bbd8b0b9263718b4c0c6c86b5ab2fb038aa3f5b/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88ac226ac22a234b948fc78dceb953fceff8d6f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/88ac226ac22a234b948fc78dceb953fceff8d6f7", "html_url": "https://github.com/rust-lang/rust/commit/88ac226ac22a234b948fc78dceb953fceff8d6f7"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "462ca7c49f69415d1ccfce76f5fbe3968270dafe", "filename": "src/loops.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8bbd8b0b9263718b4c0c6c86b5ab2fb038aa3f5b/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbd8b0b9263718b4c0c6c86b5ab2fb038aa3f5b/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=8bbd8b0b9263718b4c0c6c86b5ab2fb038aa3f5b", "patch": "@@ -345,9 +345,11 @@ fn check_for_loop_range(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, ex\n                                                        .unwrap_or_else(|| unreachable!() /* len == 1 */);\n \n                 // ensure that the indexed variable was declared before the loop, see #601\n-                let pat_extent = cx.tcx.region_maps.var_scope(pat.id);\n-                if cx.tcx.region_maps.is_subscope_of(indexed_extent, pat_extent) {\n-                    return;\n+                if let Some(indexed_extent) = indexed_extent {\n+                    let pat_extent = cx.tcx.region_maps.var_scope(pat.id);\n+                    if cx.tcx.region_maps.is_subscope_of(indexed_extent, pat_extent) {\n+                        return;\n+                    }\n                 }\n \n                 let starts_at_zero = is_integer_literal(start, 0);\n@@ -669,7 +671,7 @@ fn recover_for_loop(expr: &Expr) -> Option<(&Pat, &Expr, &Expr)> {\n struct VarVisitor<'v, 't: 'v> {\n     cx: &'v LateContext<'v, 't>, // context reference\n     var: Name, // var name to look for as index\n-    indexed: HashMap<Name, CodeExtent>, // indexed variables\n+    indexed: HashMap<Name, Option<CodeExtent>>, // indexed variables, the extent is None for global\n     nonindex: bool, // has the var been used otherwise?\n }\n \n@@ -687,9 +689,18 @@ impl<'v, 't> Visitor<'v> for VarVisitor<'v, 't> {\n                     ], {\n                         let def_map = self.cx.tcx.def_map.borrow();\n                         if let Some(def) = def_map.get(&seqexpr.id) {\n-                            let extent = self.cx.tcx.region_maps.var_scope(def.base_def.var_id());\n-                            self.indexed.insert(seqvar.segments[0].identifier.name, extent);\n-                            return;  // no need to walk further\n+                            match def.base_def {\n+                                Def::Local(..) | Def::Upvar(..) => {\n+                                    let extent = self.cx.tcx.region_maps.var_scope(def.base_def.var_id());\n+                                    self.indexed.insert(seqvar.segments[0].identifier.name, Some(extent));\n+                                    return;  // no need to walk further\n+                                }\n+                                Def::Static(..) | Def::Const(..) => {\n+                                    self.indexed.insert(seqvar.segments[0].identifier.name, None);\n+                                    return;  // no need to walk further\n+                                }\n+                                _ => (),\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "bbdf9d8f1b5dc44d9d86acdce84a7a90e8c6e279", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8bbd8b0b9263718b4c0c6c86b5ab2fb038aa3f5b/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbd8b0b9263718b4c0c6c86b5ab2fb038aa3f5b/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=8bbd8b0b9263718b4c0c6c86b5ab2fb038aa3f5b", "patch": "@@ -3,6 +3,9 @@\n \n use std::collections::*;\n \n+static STATIC: [usize; 4] = [ 0,  1,  8, 16 ];\n+const CONST: [usize; 4] = [ 0,  1,  8, 16 ];\n+\n #[deny(clippy)]\n fn for_loop_over_option_and_result() {\n     let option = Some(1);\n@@ -95,6 +98,18 @@ fn main() {\n         //~^ ERROR `i` is only used to index `vec`. Consider using `for item in &vec`\n         println!(\"{}\", vec[i]);\n     }\n+\n+    // ICE #746\n+    for j in 0..4 {\n+        //~^ ERROR `j` is only used to index `STATIC`\n+        println!(\"{:?}\", STATIC[j]);\n+    }\n+\n+    for j in 0..4 {\n+        //~^ ERROR `j` is only used to index `CONST`\n+        println!(\"{:?}\", CONST[j]);\n+    }\n+\n     for i in 0..vec.len() {\n         //~^ ERROR `i` is used to index `vec`. Consider using `for (i, item) in vec.iter().enumerate()`\n         println!(\"{} {}\", vec[i], i);"}]}