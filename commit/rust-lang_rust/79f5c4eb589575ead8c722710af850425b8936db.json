{"sha": "79f5c4eb589575ead8c722710af850425b8936db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZjVjNGViNTg5NTc1ZWFkOGM3MjI3MTBhZjg1MDQyNWI4OTM2ZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-09T01:48:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-09T01:48:11Z"}, "message": "Auto merge of #43128 - ibabushkin:master, r=eddyb\n\nImplemented `TypeFoldable` for `TypeError`s.\n\nThis is quite handy in some user code, for instance to pull out type errors from an inference context when `fresh_substs_for_item` has been used before.", "tree": {"sha": "e565feb401e44f8c649f9dd043ec692e21ae7fcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e565feb401e44f8c649f9dd043ec692e21ae7fcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79f5c4eb589575ead8c722710af850425b8936db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79f5c4eb589575ead8c722710af850425b8936db", "html_url": "https://github.com/rust-lang/rust/commit/79f5c4eb589575ead8c722710af850425b8936db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79f5c4eb589575ead8c722710af850425b8936db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b7f41a22509d87a26d429185aeeaba0a2d024c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b7f41a22509d87a26d429185aeeaba0a2d024c5", "html_url": "https://github.com/rust-lang/rust/commit/4b7f41a22509d87a26d429185aeeaba0a2d024c5"}, {"sha": "41e62105d61eca96f15d9396c74e280545e3e05e", "url": "https://api.github.com/repos/rust-lang/rust/commits/41e62105d61eca96f15d9396c74e280545e3e05e", "html_url": "https://github.com/rust-lang/rust/commit/41e62105d61eca96f15d9396c74e280545e3e05e"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "c9b3d038c0774fc794f37e45b91c9f509e9268b3", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/79f5c4eb589575ead8c722710af850425b8936db/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f5c4eb589575ead8c722710af850425b8936db/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=79f5c4eb589575ead8c722710af850425b8936db", "patch": "@@ -960,6 +960,20 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::error::ExpectedFoun\n     }\n }\n \n+impl<'tcx> TypeFoldable<'tcx> for type_variable::Default<'tcx> {\n+    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n+        type_variable::Default {\n+            ty: self.ty.fold_with(folder),\n+            origin_span: self.origin_span,\n+            def_id: self.def_id\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.ty.visit_with(visitor)\n+    }\n+}\n+\n impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         self.iter().map(|x| x.fold_with(folder)).collect()\n@@ -969,3 +983,79 @@ impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T>\n         self.iter().any(|t| t.visit_with(visitor))\n     }\n }\n+\n+impl<'tcx> TypeFoldable<'tcx> for ty::error::TypeError<'tcx> {\n+    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n+        use ty::error::TypeError::*;\n+\n+        match *self {\n+            Mismatch => Mismatch,\n+            UnsafetyMismatch(x) => UnsafetyMismatch(x.fold_with(folder)),\n+            AbiMismatch(x) => AbiMismatch(x.fold_with(folder)),\n+            Mutability => Mutability,\n+            TupleSize(x) => TupleSize(x),\n+            FixedArraySize(x) => FixedArraySize(x),\n+            ArgCount => ArgCount,\n+            RegionsDoesNotOutlive(a, b) => {\n+                RegionsDoesNotOutlive(a.fold_with(folder), b.fold_with(folder))\n+            },\n+            RegionsNotSame(a, b) => {\n+                RegionsNotSame(a.fold_with(folder), b.fold_with(folder))\n+            },\n+            RegionsNoOverlap(a, b) => {\n+                RegionsNoOverlap(a.fold_with(folder), b.fold_with(folder))\n+            },\n+            RegionsInsufficientlyPolymorphic(a, b, ref c) => {\n+                let c = c.clone();\n+                RegionsInsufficientlyPolymorphic(a, b.fold_with(folder), c)\n+            },\n+            RegionsOverlyPolymorphic(a, b, ref c) => {\n+                let c = c.clone();\n+                RegionsOverlyPolymorphic(a, b.fold_with(folder), c)\n+            },\n+            IntMismatch(x) => IntMismatch(x),\n+            FloatMismatch(x) => FloatMismatch(x),\n+            Traits(x) => Traits(x),\n+            VariadicMismatch(x) => VariadicMismatch(x),\n+            CyclicTy => CyclicTy,\n+            ProjectionNameMismatched(x) => ProjectionNameMismatched(x),\n+            ProjectionBoundsLength(x) => ProjectionBoundsLength(x),\n+            Sorts(x) => Sorts(x.fold_with(folder)),\n+            TyParamDefaultMismatch(ref x) => TyParamDefaultMismatch(x.fold_with(folder)),\n+            ExistentialMismatch(x) => ExistentialMismatch(x.fold_with(folder)),\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        use ty::error::TypeError::*;\n+\n+        match *self {\n+            UnsafetyMismatch(x) => x.visit_with(visitor),\n+            AbiMismatch(x) => x.visit_with(visitor),\n+            RegionsDoesNotOutlive(a, b) |\n+            RegionsNotSame(a, b) |\n+            RegionsNoOverlap(a, b) => {\n+                a.visit_with(visitor) || b.visit_with(visitor)\n+            },\n+            RegionsInsufficientlyPolymorphic(_, b, _) |\n+            RegionsOverlyPolymorphic(_, b, _) => {\n+                b.visit_with(visitor)\n+            },\n+            Sorts(x) => x.visit_with(visitor),\n+            TyParamDefaultMismatch(ref x) => x.visit_with(visitor),\n+            ExistentialMismatch(x) => x.visit_with(visitor),\n+            Mismatch |\n+            Mutability |\n+            TupleSize(_) |\n+            FixedArraySize(_) |\n+            ArgCount |\n+            IntMismatch(_) |\n+            FloatMismatch(_) |\n+            Traits(_) |\n+            VariadicMismatch(_) |\n+            CyclicTy |\n+            ProjectionNameMismatched(_) |\n+            ProjectionBoundsLength(_) => false,\n+        }\n+    }\n+}"}]}