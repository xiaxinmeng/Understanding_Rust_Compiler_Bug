{"sha": "104131c9d487c943d962f4d88490aa7bcf2fa2de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNDEzMWM5ZDQ4N2M5NDNkOTYyZjRkODg0OTBhYTdiY2YyZmEyZGU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-25T00:49:43Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-02-22T00:28:49Z"}, "message": "Use `Result` instead of `bool` throughout", "tree": {"sha": "37f5536899552c934fd7b82f375463f661a43fcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37f5536899552c934fd7b82f375463f661a43fcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/104131c9d487c943d962f4d88490aa7bcf2fa2de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/104131c9d487c943d962f4d88490aa7bcf2fa2de", "html_url": "https://github.com/rust-lang/rust/commit/104131c9d487c943d962f4d88490aa7bcf2fa2de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/104131c9d487c943d962f4d88490aa7bcf2fa2de/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dff64eb4b6b6a1cd2ae4e122b70a632f52f1dada", "url": "https://api.github.com/repos/rust-lang/rust/commits/dff64eb4b6b6a1cd2ae4e122b70a632f52f1dada", "html_url": "https://github.com/rust-lang/rust/commit/dff64eb4b6b6a1cd2ae4e122b70a632f52f1dada"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "ae8dbfe9c398a9c6c57048f0b9cc7396f9ba7e2c", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/104131c9d487c943d962f4d88490aa7bcf2fa2de/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104131c9d487c943d962f4d88490aa7bcf2fa2de/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=104131c9d487c943d962f4d88490aa7bcf2fa2de", "patch": "@@ -317,10 +317,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n \n         // Prohibit explicit lifetime arguments if late-bound lifetime parameters are present.\n-        let mut reported_late_bound_region_err = false;\n+        let mut explicit_lifetimes = Ok(());\n         if !infer_lifetimes {\n             if let Some(span_late) = def.has_late_bound_regions {\n-                reported_late_bound_region_err = true;\n+                explicit_lifetimes = Err(GenericArgCountMismatch);\n                 let msg = \"cannot specify lifetime arguments explicitly \\\n                            if late bound lifetime parameters are present\";\n                 let note = \"the late bound lifetime parameter is introduced here\";\n@@ -354,7 +354,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // For kinds without defaults (e.g.., lifetimes), `required == permitted`.\n                 // For other kinds (i.e., types), `permitted` may be greater than `required`.\n                 if required <= provided && provided <= permitted {\n-                    return false;\n+                    return Ok(());\n                 }\n \n                 // Unfortunately lifetime and type parameter mismatches are typically styled\n@@ -405,49 +405,49 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 }\n                 err.emit();\n \n-                true\n+                Err(GenericArgCountMismatch)\n             };\n \n-        let mut arg_count_mismatch = reported_late_bound_region_err;\n+        let mut arg_count_correct = explicit_lifetimes;\n         let mut unexpected_spans = vec![];\n \n-        if !reported_late_bound_region_err\n+        if arg_count_correct.is_ok()\n             && (!infer_lifetimes || arg_counts.lifetimes > param_counts.lifetimes)\n         {\n-            arg_count_mismatch |= check_kind_count(\n+            arg_count_correct = arg_count_correct.and(check_kind_count(\n                 \"lifetime\",\n                 param_counts.lifetimes,\n                 param_counts.lifetimes,\n                 arg_counts.lifetimes,\n                 0,\n                 &mut unexpected_spans,\n-            );\n+            ));\n         }\n         // FIXME(const_generics:defaults)\n         if !infer_args || arg_counts.consts > param_counts.consts {\n-            arg_count_mismatch |= check_kind_count(\n+            arg_count_correct = arg_count_correct.and(check_kind_count(\n                 \"const\",\n                 param_counts.consts,\n                 param_counts.consts,\n                 arg_counts.consts,\n                 arg_counts.lifetimes + arg_counts.types,\n                 &mut unexpected_spans,\n-            );\n+            ));\n         }\n         // Note that type errors are currently be emitted *after* const errors.\n         if !infer_args || arg_counts.types > param_counts.types - defaults.types - has_self as usize\n         {\n-            arg_count_mismatch |= check_kind_count(\n+            arg_count_correct = arg_count_correct.and(check_kind_count(\n                 \"type\",\n                 param_counts.types - defaults.types - has_self as usize,\n                 param_counts.types - has_self as usize,\n                 arg_counts.types,\n                 arg_counts.lifetimes,\n                 &mut unexpected_spans,\n-            );\n+            ));\n         }\n \n-        (if arg_count_mismatch { Err(GenericArgCountMismatch) } else { Ok(()) }, unexpected_spans)\n+        (arg_count_correct, unexpected_spans)\n     }\n \n     /// Report an error that a generic argument did not match the generic parameter that was"}]}