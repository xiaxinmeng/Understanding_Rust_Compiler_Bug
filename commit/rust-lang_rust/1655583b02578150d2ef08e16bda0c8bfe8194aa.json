{"sha": "1655583b02578150d2ef08e16bda0c8bfe8194aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NTU1ODNiMDI1NzgxNTBkMmVmMDhlMTZiZGEwYzhiZmU4MTk0YWE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git1984941651981@oli-obk.de", "date": "2015-04-30T11:13:20Z"}, "committer": {"name": "Oliver Schneider", "email": "git1984941651981@oli-obk.de", "date": "2015-05-04T10:50:24Z"}, "message": "handle windows newlines", "tree": {"sha": "debe7b1a1678d6ded43a18eb6ebb19653095a30a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/debe7b1a1678d6ded43a18eb6ebb19653095a30a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1655583b02578150d2ef08e16bda0c8bfe8194aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1655583b02578150d2ef08e16bda0c8bfe8194aa", "html_url": "https://github.com/rust-lang/rust/commit/1655583b02578150d2ef08e16bda0c8bfe8194aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1655583b02578150d2ef08e16bda0c8bfe8194aa/comments", "author": null, "committer": null, "parents": [{"sha": "0ede9ae861070edf4c0b8c76f59d8d1d29cd3fda", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ede9ae861070edf4c0b8c76f59d8d1d29cd3fda", "html_url": "https://github.com/rust-lang/rust/commit/0ede9ae861070edf4c0b8c76f59d8d1d29cd3fda"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "f0aebe7c94f09026384afb92abcba8a92b1512e0", "filename": "src/changes.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1655583b02578150d2ef08e16bda0c8bfe8194aa/src%2Fchanges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1655583b02578150d2ef08e16bda0c8bfe8194aa/src%2Fchanges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchanges.rs?ref=1655583b02578150d2ef08e16bda0c8bfe8194aa", "patch": "@@ -18,8 +18,10 @@ use std::collections::HashMap;\n use syntax::codemap::{CodeMap, Span, BytePos};\n use std::fmt;\n use std::fs::File;\n-use std::io::Write;\n+use std::io::{Write, stdout};\n use WriteMode;\n+use NEWLINE_STYLE;\n+use NewlineStyle;\n \n // This is basically a wrapper around a bunch of Ropes which makes it convenient\n // to work with libsyntax. It is badly named.\n@@ -148,6 +150,28 @@ impl<'a> ChangeSet<'a> {\n                       -> Result<Option<String>, ::std::io::Error> {\n         let text = &self.file_map[filename];\n \n+        // prints all newlines either as `\\n` or as `\\r\\n`\n+        fn write_system_newlines<T>(\n+            mut writer: T,\n+            text: &StringBuffer)\n+            -> Result<(), ::std::io::Error>\n+            where T: Write,\n+        {\n+            match NEWLINE_STYLE {\n+                NewlineStyle::Unix => write!(writer, \"{}\", text),\n+                NewlineStyle::Windows => {\n+                    for (c, _) in text.chars() {\n+                        match c {\n+                            '\\n' => try!(write!(writer, \"\\r\\n\")),\n+                            '\\r' => continue,\n+                            c => try!(write!(writer, \"{}\", c)),\n+                        }\n+                    }\n+                    Ok(())\n+                },\n+            }\n+        }\n+\n         match mode {\n             WriteMode::Overwrite => {\n                 // Do a little dance to make writing safer - write to a temp file\n@@ -157,24 +181,30 @@ impl<'a> ChangeSet<'a> {\n                 let bk_name = filename.to_owned() + \".bk\";\n                 {\n                     // Write text to temp file\n-                    let mut tmp_file = try!(File::create(&tmp_name));\n-                    try!(write!(tmp_file, \"{}\", text));\n+                    let tmp_file = try!(File::create(&tmp_name));\n+                    try!(write_system_newlines(tmp_file, text));\n                 }\n \n                 try!(::std::fs::rename(filename, bk_name));\n                 try!(::std::fs::rename(tmp_name, filename));\n             }\n             WriteMode::NewFile(extn) => {\n                 let filename = filename.to_owned() + \".\" + extn;\n-                let mut file = try!(File::create(&filename));\n-                try!(write!(file, \"{}\", text));\n+                let file = try!(File::create(&filename));\n+                try!(write_system_newlines(file, text));\n             }\n             WriteMode::Display => {\n                 println!(\"{}:\\n\", filename);\n-                println!(\"{}\", text);\n+                let stdout = stdout();\n+                let stdout_lock = stdout.lock();\n+                try!(write_system_newlines(stdout_lock, text));\n             }\n             WriteMode::Return(_) => {\n-                return Ok(Some(text.to_string()));\n+                // io::Write is not implemented for String, working around with Vec<u8>\n+                let mut v = Vec::new();\n+                try!(write_system_newlines(&mut v, text));\n+                // won't panic, we are writing correct utf8\n+                return Ok(Some(String::from_utf8(v).unwrap()));\n             }\n         }\n "}, {"sha": "cf191f04f95d3642567071868c15ce46f48a18bc", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1655583b02578150d2ef08e16bda0c8bfe8194aa/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1655583b02578150d2ef08e16bda0c8bfe8194aa/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1655583b02578150d2ef08e16bda0c8bfe8194aa", "patch": "@@ -59,6 +59,7 @@ const LEEWAY: usize = 5;\n const MAX_WIDTH: usize = 100;\n const MIN_STRING: usize = 10;\n const TAB_SPACES: usize = 4;\n+const NEWLINE_STYLE: NewlineStyle = NewlineStyle::Unix;\n const FN_BRACE_STYLE: BraceStyle = BraceStyle::SameLineWhere;\n const FN_RETURN_INDENT: ReturnIndent = ReturnIndent::WithArgs;\n // When we get scoped annotations, we should have rustfmt::skip.\n@@ -75,6 +76,12 @@ pub enum WriteMode {\n     Return(&'static Fn(HashMap<String, String>)),\n }\n \n+#[derive(Copy, Clone, Eq, PartialEq, Debug)]\n+enum NewlineStyle {\n+    Windows, // \\r\\n\n+    Unix, // \\n\n+}\n+\n #[derive(Copy, Clone, Eq, PartialEq, Debug)]\n enum BraceStyle {\n     AlwaysNextLine,"}]}