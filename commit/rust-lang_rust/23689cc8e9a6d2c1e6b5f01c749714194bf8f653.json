{"sha": "23689cc8e9a6d2c1e6b5f01c749714194bf8f653", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNjg5Y2M4ZTlhNmQyYzFlNmI1ZjAxYzc0OTcxNDE5NGJmOGY2NTM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-05T08:51:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-05T08:51:21Z"}, "message": "Rollup merge of #49496 - glandium:master, r=sfackler\n\nAdd more vec![... ; n] optimizations\n\nvec![0; n], via implementations of SpecFromElem, has an optimization that uses with_capacity_zeroed instead of with_capacity, which will use calloc instead of malloc, and avoid an extra memset.\n\nThis PR adds the same optimization for ptr::null, ptr::null_mut, and None, when their in-memory representation is zeroes.", "tree": {"sha": "22a19854fded32e819ad80b3d430be7e970f5636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22a19854fded32e819ad80b3d430be7e970f5636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23689cc8e9a6d2c1e6b5f01c749714194bf8f653", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaxeOKCRBK7hj4Ov3rIwAAdHIIACHvAwc1ay7oSk29bSnFNlK0\n9rDe0r6uoGDc8KGBkaQucw4JeOU71PHiDr3HmkqtdYexQ+tkpCSZQhtuAS9E8Y0t\nzAysq7exNPnDtAP5IMGpyebIahWxnxi0PyG87PywlHYtlzxAVlFoo8T3qgo4Owzn\nCD2E894D4W3922MbVGsuUKfLIhxvCn+8wz3WsmVZXLePdrGIw8YeNMx6itRLv5b+\n6VvIvJABoACLDmpX4HCbZZMcFzYP/aRE4T8Prhs/vXWql2uTTlgB5uGd6scuCNDq\nQc/arrbDIxm4RD+jYhkZbNAWi4hxDNgyM7nxIVqFXE2GurZChp2m/nNjV92uJkc=\n=PoOQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 22a19854fded32e819ad80b3d430be7e970f5636\nparent 19c69082f5b0e5b44fe660b6bdd73ea8ac60b6b0\nparent 0df837f79289819f9b671b67d4e63dfe5c80d419\nauthor kennytm <kennytm@gmail.com> 1522918281 +0800\ncommitter GitHub <noreply@github.com> 1522918281 +0800\n\nRollup merge of #49496 - glandium:master, r=sfackler\n\nAdd more vec![... ; n] optimizations\n\nvec![0; n], via implementations of SpecFromElem, has an optimization that uses with_capacity_zeroed instead of with_capacity, which will use calloc instead of malloc, and avoid an extra memset.\n\nThis PR adds the same optimization for ptr::null, ptr::null_mut, and None, when their in-memory representation is zeroes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23689cc8e9a6d2c1e6b5f01c749714194bf8f653", "html_url": "https://github.com/rust-lang/rust/commit/23689cc8e9a6d2c1e6b5f01c749714194bf8f653", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23689cc8e9a6d2c1e6b5f01c749714194bf8f653/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19c69082f5b0e5b44fe660b6bdd73ea8ac60b6b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/19c69082f5b0e5b44fe660b6bdd73ea8ac60b6b0", "html_url": "https://github.com/rust-lang/rust/commit/19c69082f5b0e5b44fe660b6bdd73ea8ac60b6b0"}, {"sha": "0df837f79289819f9b671b67d4e63dfe5c80d419", "url": "https://api.github.com/repos/rust-lang/rust/commits/0df837f79289819f9b671b67d4e63dfe5c80d419", "html_url": "https://github.com/rust-lang/rust/commit/0df837f79289819f9b671b67d4e63dfe5c80d419"}], "stats": {"total": 81, "additions": 55, "deletions": 26}, "files": [{"sha": "4b883b5bce79bd48f714b5442340696024eea662", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 55, "deletions": 26, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/23689cc8e9a6d2c1e6b5f01c749714194bf8f653/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23689cc8e9a6d2c1e6b5f01c749714194bf8f653/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=23689cc8e9a6d2c1e6b5f01c749714194bf8f653", "patch": "@@ -1594,40 +1594,69 @@ impl SpecFromElem for u8 {\n     }\n }\n \n-macro_rules! impl_spec_from_elem {\n+impl<T: Clone + IsZero> SpecFromElem for T {\n+    #[inline]\n+    fn from_elem(elem: T, n: usize) -> Vec<T> {\n+        if elem.is_zero() {\n+            return Vec {\n+                buf: RawVec::with_capacity_zeroed(n),\n+                len: n,\n+            }\n+        }\n+        let mut v = Vec::with_capacity(n);\n+        v.extend_with(n, ExtendElement(elem));\n+        v\n+    }\n+}\n+\n+unsafe trait IsZero {\n+    /// Whether this value is zero\n+    fn is_zero(&self) -> bool;\n+}\n+\n+macro_rules! impl_is_zero {\n     ($t: ty, $is_zero: expr) => {\n-        impl SpecFromElem for $t {\n+        unsafe impl IsZero for $t {\n             #[inline]\n-            fn from_elem(elem: $t, n: usize) -> Vec<$t> {\n-                if $is_zero(elem) {\n-                    return Vec {\n-                        buf: RawVec::with_capacity_zeroed(n),\n-                        len: n,\n-                    }\n-                }\n-                let mut v = Vec::with_capacity(n);\n-                v.extend_with(n, ExtendElement(elem));\n-                v\n+            fn is_zero(&self) -> bool {\n+                $is_zero(*self)\n             }\n         }\n-    };\n+    }\n }\n \n-impl_spec_from_elem!(i8, |x| x == 0);\n-impl_spec_from_elem!(i16, |x| x == 0);\n-impl_spec_from_elem!(i32, |x| x == 0);\n-impl_spec_from_elem!(i64, |x| x == 0);\n-impl_spec_from_elem!(i128, |x| x == 0);\n-impl_spec_from_elem!(isize, |x| x == 0);\n+impl_is_zero!(i8, |x| x == 0);\n+impl_is_zero!(i16, |x| x == 0);\n+impl_is_zero!(i32, |x| x == 0);\n+impl_is_zero!(i64, |x| x == 0);\n+impl_is_zero!(i128, |x| x == 0);\n+impl_is_zero!(isize, |x| x == 0);\n+\n+impl_is_zero!(u16, |x| x == 0);\n+impl_is_zero!(u32, |x| x == 0);\n+impl_is_zero!(u64, |x| x == 0);\n+impl_is_zero!(u128, |x| x == 0);\n+impl_is_zero!(usize, |x| x == 0);\n+\n+impl_is_zero!(char, |x| x == '\\0');\n+\n+impl_is_zero!(f32, |x: f32| x.to_bits() == 0);\n+impl_is_zero!(f64, |x: f64| x.to_bits() == 0);\n \n-impl_spec_from_elem!(u16, |x| x == 0);\n-impl_spec_from_elem!(u32, |x| x == 0);\n-impl_spec_from_elem!(u64, |x| x == 0);\n-impl_spec_from_elem!(u128, |x| x == 0);\n-impl_spec_from_elem!(usize, |x| x == 0);\n+unsafe impl<T: ?Sized> IsZero for *const T {\n+    #[inline]\n+    fn is_zero(&self) -> bool {\n+        (*self).is_null()\n+    }\n+}\n+\n+unsafe impl<T: ?Sized> IsZero for *mut T {\n+    #[inline]\n+    fn is_zero(&self) -> bool {\n+        (*self).is_null()\n+    }\n+}\n \n-impl_spec_from_elem!(f32, |x: f32| x.to_bits() == 0);\n-impl_spec_from_elem!(f64, |x: f64| x.to_bits() == 0);\n \n ////////////////////////////////////////////////////////////////////////////////\n // Common trait implementations for Vec"}]}