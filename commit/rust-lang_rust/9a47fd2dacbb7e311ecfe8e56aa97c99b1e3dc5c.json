{"sha": "9a47fd2dacbb7e311ecfe8e56aa97c99b1e3dc5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNDdmZDJkYWNiYjdlMzExZWNmZThlNTZhYTk3Yzk5YjFlM2RjNWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-24T15:28:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-31T16:41:37Z"}, "message": "factor out `pre_defs` field by going backwards", "tree": {"sha": "6715f862574f42f9811e0cf1a2304d56e40bea4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6715f862574f42f9811e0cf1a2304d56e40bea4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a47fd2dacbb7e311ecfe8e56aa97c99b1e3dc5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a47fd2dacbb7e311ecfe8e56aa97c99b1e3dc5c", "html_url": "https://github.com/rust-lang/rust/commit/9a47fd2dacbb7e311ecfe8e56aa97c99b1e3dc5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a47fd2dacbb7e311ecfe8e56aa97c99b1e3dc5c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acc5c4345c42c7558c15ffdf1e10a20126652c73", "url": "https://api.github.com/repos/rust-lang/rust/commits/acc5c4345c42c7558c15ffdf1e10a20126652c73", "html_url": "https://github.com/rust-lang/rust/commit/acc5c4345c42c7558c15ffdf1e10a20126652c73"}], "stats": {"total": 100, "additions": 88, "deletions": 12}, "files": [{"sha": "b9d90051b8511f18e6122e1ea188565e735cfaaa", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9a47fd2dacbb7e311ecfe8e56aa97c99b1e3dc5c/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a47fd2dacbb7e311ecfe8e56aa97c99b1e3dc5c/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=9a47fd2dacbb7e311ecfe8e56aa97c99b1e3dc5c", "patch": "@@ -54,29 +54,72 @@ struct BlockInfo {\n }\n \n struct BlockInfoVisitor {\n-    pre_defs: LocalSet,\n     defs: LocalSet,\n     uses: LocalSet,\n }\n \n+impl BlockInfoVisitor {\n+    fn add_def(&mut self, index: Local) {\n+        // If it was used already in the block, remove that use\n+        // now that we found a definition.\n+        //\n+        // Example:\n+        //\n+        //     // Defs = {X}, Uses = {}\n+        //     X = 5\n+        //     // Defs = {}, Uses = {X}\n+        //     use(X)\n+        self.uses.remove(&index);\n+        self.defs.add(&index);\n+    }\n+\n+    fn add_use(&mut self, index: Local) {\n+        // Inverse of above.\n+        //\n+        // Example:\n+        //\n+        //     // Defs = {}, Uses = {X}\n+        //     use(X)\n+        //     // Defs = {X}, Uses = {}\n+        //     X = 5\n+        //     // Defs = {}, Uses = {X}\n+        //     use(X)\n+        self.defs.remove(&index);\n+        self.uses.add(&index);\n+    }\n+}\n+\n impl<'tcx> Visitor<'tcx> for BlockInfoVisitor {\n     fn visit_local(&mut self,\n                    &local: &Local,\n                    context: LvalueContext<'tcx>,\n                    _: Location) {\n         match context {\n+            ///////////////////////////////////////////////////////////////////////////\n+            // DEFS\n+\n             LvalueContext::Store |\n \n-            // We let Call defined the result in both the success and unwind cases.\n-            // This may not be right.\n+            // We let Call defined the result in both the success and\n+            // unwind cases. This is not really correct, however it\n+            // does not seem to be observable due to the way that we\n+            // generate MIR. See the test case\n+            // `mir-opt/nll/liveness-call-subtlety.rs`. To do things\n+            // properly, we would apply the def in call only to the\n+            // input from the success path and not the unwind\n+            // path. -nmatsakis\n             LvalueContext::Call |\n \n             // Storage live and storage dead aren't proper defines, but we can ignore\n             // values that come before them.\n             LvalueContext::StorageLive |\n             LvalueContext::StorageDead => {\n-                self.defs.add(&local);\n+                self.add_def(local);\n             }\n+\n+            ///////////////////////////////////////////////////////////////////////////\n+            // USES\n+\n             LvalueContext::Projection(..) |\n \n             // Borrows only consider their local used at the point of the borrow.\n@@ -93,29 +136,26 @@ impl<'tcx> Visitor<'tcx> for BlockInfoVisitor {\n             // Drop eloboration should be run before this analysis otherwise\n             // the results might be too pessimistic.\n             LvalueContext::Drop => {\n-                // Ignore uses which are already defined in this block\n-                if !self.pre_defs.contains(&local) {\n-                    self.uses.add(&local);\n-                }\n+                self.add_use(local);\n             }\n         }\n     }\n }\n \n fn block<'tcx>(b: &BasicBlockData<'tcx>, locals: usize) -> BlockInfo {\n     let mut visitor = BlockInfoVisitor {\n-        pre_defs: LocalSet::new_empty(locals),\n         defs: LocalSet::new_empty(locals),\n         uses: LocalSet::new_empty(locals),\n     };\n \n     let dummy_location = Location { block: BasicBlock::new(0), statement_index: 0 };\n \n-    for statement in &b.statements {\n+    // Visit the various parts of the basic block in reverse. If we go\n+    // forward, the logic in `add_def` and `add_use` would be wrong.\n+    visitor.visit_terminator(BasicBlock::new(0), b.terminator(), dummy_location);\n+    for statement in b.statements.iter().rev() {\n         visitor.visit_statement(BasicBlock::new(0), statement, dummy_location);\n-        visitor.pre_defs.union(&visitor.defs);\n     }\n-    visitor.visit_terminator(BasicBlock::new(0), b.terminator(), dummy_location);\n \n     BlockInfo {\n         defs: visitor.defs,"}, {"sha": "2d7aceb558fffc1418049c177e9a1fee1e1dd41d", "filename": "src/test/mir-opt/nll/liveness-drop-intra-block.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9a47fd2dacbb7e311ecfe8e56aa97c99b1e3dc5c/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a47fd2dacbb7e311ecfe8e56aa97c99b1e3dc5c/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs?ref=9a47fd2dacbb7e311ecfe8e56aa97c99b1e3dc5c", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Znll\n+\n+#![allow(warnings)]\n+\n+fn use_x(_: usize) -> bool { true }\n+\n+fn main() {\n+    let mut x = 22;\n+    loop {\n+        // Key point: `x` not live on entry to this basic block.\n+        x = 55;\n+        if use_x(x) { break; }\n+    }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node12.nll.0.mir\n+//    | Variables live on entry to the block bb1:\n+//    bb1: {\n+//        _1 = const 55usize;\n+//        StorageLive(_3);\n+//        StorageLive(_4);\n+//        _4 = _1;\n+//        _3 = const use_x(_4) -> bb2;\n+//    }\n+// END rustc.node12.nll.0.mir"}]}