{"sha": "573e906594fdf7824f49789f24fdadb4496d7368", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3M2U5MDY1OTRmZGY3ODI0ZjQ5Nzg5ZjI0ZmRhZGI0NDk2ZDczNjg=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-20T00:51:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-20T00:51:06Z"}, "message": "Rollup merge of #40281 - jimmycuadra:try-from-from-str, r=aturon\n\nRename TryFrom's associated type and implement str::parse using TryFrom.\n\nPer discussion on the tracking issue, naming `TryFrom`'s associated type `Error` is generally more consistent with similar traits in the Rust ecosystem, and what people seem to assume it should be called. It also helps disambiguate from `Result::Err`, the most common \"Err\".\n\nSee https://github.com/rust-lang/rust/issues/33417#issuecomment-269108968.\n\n`TryFrom<&str>` and `FromStr` are equivalent, so have the latter provide the former to ensure that. Using `TryFrom` in the implementation of `str::parse` means types that implement either trait can use it. When we're ready to stabilize `TryFrom`, we should update `FromStr` to\nsuggest implementing `TryFrom<&str>` instead for new code.\n\nSee https://github.com/rust-lang/rust/issues/33417#issuecomment-277175994\nand https://github.com/rust-lang/rust/issues/33417#issuecomment-277253827.\n\nRefs #33417.", "tree": {"sha": "96298d7b9940982be8fc532c72b0b2c7dcd5e173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96298d7b9940982be8fc532c72b0b2c7dcd5e173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/573e906594fdf7824f49789f24fdadb4496d7368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/573e906594fdf7824f49789f24fdadb4496d7368", "html_url": "https://github.com/rust-lang/rust/commit/573e906594fdf7824f49789f24fdadb4496d7368", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/573e906594fdf7824f49789f24fdadb4496d7368/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5221f93977922090b0370aff1efdbf5c2d12f6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5221f93977922090b0370aff1efdbf5c2d12f6d", "html_url": "https://github.com/rust-lang/rust/commit/e5221f93977922090b0370aff1efdbf5c2d12f6d"}, {"sha": "2561dcddf9e61f5c52a65f1a42641e01bfabe3e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2561dcddf9e61f5c52a65f1a42641e01bfabe3e2", "html_url": "https://github.com/rust-lang/rust/commit/2561dcddf9e61f5c52a65f1a42641e01bfabe3e2"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "649fdf394e422bf3eec8add5b3c1f7d835c0e0c3", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/573e906594fdf7824f49789f24fdadb4496d7368/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/573e906594fdf7824f49789f24fdadb4496d7368/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=573e906594fdf7824f49789f24fdadb4496d7368", "patch": "@@ -209,10 +209,10 @@ impl From<u8> for char {\n \n #[unstable(feature = \"try_from\", issue = \"33417\")]\n impl TryFrom<u32> for char {\n-    type Err = CharTryFromError;\n+    type Error = CharTryFromError;\n \n     #[inline]\n-    fn try_from(i: u32) -> Result<Self, Self::Err> {\n+    fn try_from(i: u32) -> Result<Self, Self::Error> {\n         if (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF) {\n             Err(CharTryFromError(()))\n         } else {"}, {"sha": "0b0f831f093b0ecc761a60ce18a595397d3cce53", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/573e906594fdf7824f49789f24fdadb4496d7368/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/573e906594fdf7824f49789f24fdadb4496d7368/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=573e906594fdf7824f49789f24fdadb4496d7368", "patch": "@@ -48,6 +48,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use str::FromStr;\n+\n /// A cheap, reference-to-reference conversion.\n ///\n /// `AsRef` is very similar to, but different than, [`Borrow`]. See\n@@ -212,20 +214,20 @@ pub trait From<T>: Sized {\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n pub trait TryInto<T>: Sized {\n     /// The type returned in the event of a conversion error.\n-    type Err;\n+    type Error;\n \n     /// Performs the conversion.\n-    fn try_into(self) -> Result<T, Self::Err>;\n+    fn try_into(self) -> Result<T, Self::Error>;\n }\n \n /// Attempt to construct `Self` via a conversion.\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error.\n-    type Err;\n+    type Error;\n \n     /// Performs the conversion.\n-    fn try_from(value: T) -> Result<Self, Self::Err>;\n+    fn try_from(value: T) -> Result<Self, Self::Error>;\n }\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -290,9 +292,9 @@ impl<T> From<T> for T {\n // TryFrom implies TryInto\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n impl<T, U> TryInto<U> for T where U: TryFrom<T> {\n-    type Err = U::Err;\n+    type Error = U::Error;\n \n-    fn try_into(self) -> Result<U, U::Err> {\n+    fn try_into(self) -> Result<U, U::Error> {\n         U::try_from(self)\n     }\n }\n@@ -322,3 +324,13 @@ impl AsRef<str> for str {\n         self\n     }\n }\n+\n+// FromStr implies TryFrom<&str>\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n+impl<'a, T> TryFrom<&'a str> for T where T: FromStr {\n+    type Error = <T as FromStr>::Err;\n+\n+    fn try_from(s: &'a str) -> Result<T, Self::Error> {\n+        FromStr::from_str(s)\n+    }\n+}"}, {"sha": "13fa099c8eb01620c474ad8cd23fb1b694057b5e", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/573e906594fdf7824f49789f24fdadb4496d7368/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/573e906594fdf7824f49789f24fdadb4496d7368/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=573e906594fdf7824f49789f24fdadb4496d7368", "patch": "@@ -2591,7 +2591,7 @@ macro_rules! same_sign_try_from_int_impl {\n     ($storage:ty, $target:ty, $($source:ty),*) => {$(\n         #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$source> for $target {\n-            type Err = TryFromIntError;\n+            type Error = TryFromIntError;\n \n             fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n                 let min = <$target as FromStrRadixHelper>::min_value() as $storage;\n@@ -2623,7 +2623,7 @@ macro_rules! cross_sign_from_int_impl {\n     ($unsigned:ty, $($signed:ty),*) => {$(\n         #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$unsigned> for $signed {\n-            type Err = TryFromIntError;\n+            type Error = TryFromIntError;\n \n             fn try_from(u: $unsigned) -> Result<$signed, TryFromIntError> {\n                 let max = <$signed as FromStrRadixHelper>::max_value() as u128;\n@@ -2637,7 +2637,7 @@ macro_rules! cross_sign_from_int_impl {\n \n         #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$signed> for $unsigned {\n-            type Err = TryFromIntError;\n+            type Error = TryFromIntError;\n \n             fn try_from(u: $signed) -> Result<$unsigned, TryFromIntError> {\n                 let max = <$unsigned as FromStrRadixHelper>::max_value() as u128;"}, {"sha": "cf3e8a684dfab1f1213be7da0ebda3604aaa2d75", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/573e906594fdf7824f49789f24fdadb4496d7368/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/573e906594fdf7824f49789f24fdadb4496d7368/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=573e906594fdf7824f49789f24fdadb4496d7368", "patch": "@@ -18,6 +18,7 @@ use self::pattern::Pattern;\n use self::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n \n use char;\n+use convert::TryFrom;\n use fmt;\n use iter::{Map, Cloned, FusedIterator};\n use mem;\n@@ -1782,7 +1783,7 @@ pub trait StrExt {\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_empty(&self) -> bool;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n-    fn parse<T: FromStr>(&self) -> Result<T, T::Err>;\n+    fn parse<'a, T: TryFrom<&'a str>>(&'a self) -> Result<T, T::Error>;\n }\n \n // truncate `&str` to length at most equal to `max`\n@@ -2081,7 +2082,9 @@ impl StrExt for str {\n     fn is_empty(&self) -> bool { self.len() == 0 }\n \n     #[inline]\n-    fn parse<T: FromStr>(&self) -> Result<T, T::Err> { FromStr::from_str(self) }\n+    fn parse<'a, T>(&'a self) -> Result<T, T::Error> where T: TryFrom<&'a str> {\n+        T::try_from(self)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}