{"sha": "93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZDYzMjhkNDllMDdmOGMwYWQ5OGY1OTI1YzU3NWQ5YzFiMWNjOWI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-09-06T14:00:08Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-09-10T14:25:19Z"}, "message": "debuginfo: Support for namespaces (functions only)", "tree": {"sha": "d22884589d9b884e432e5c78c50b265908222bab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d22884589d9b884e432e5c78c50b265908222bab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "html_url": "https://github.com/rust-lang/rust/commit/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "382cb500be6c9927805bd9cd7af6a0558333dd0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/382cb500be6c9927805bd9cd7af6a0558333dd0f", "html_url": "https://github.com/rust-lang/rust/commit/382cb500be6c9927805bd9cd7af6a0558333dd0f"}], "stats": {"total": 420, "additions": 316, "deletions": 104}, "files": [{"sha": "1caf65e3f3b82dee8f5591e5b254cfc41335380f", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -3021,6 +3021,10 @@ pub fn trans_crate(sess: session::Session,\n                                      link_meta,\n                                      analysis.reachable);\n \n+    if ccx.sess.opts.debuginfo {\n+        debuginfo::initialize(ccx, crate);\n+    }\n+\n     {\n         let _icx = push_ctxt(\"text\");\n         trans_mod(ccx, &crate.module);"}, {"sha": "2c5e77b069ae57feb1aec57df1b1f473034134b8", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 234, "deletions": 26, "changes": 260, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -68,7 +68,7 @@ use std::libc::{c_uint, c_ulonglong, c_longlong};\n use std::ptr;\n use std::vec;\n use syntax::codemap::Span;\n-use syntax::{ast, codemap, ast_util, ast_map, opt_vec};\n+use syntax::{ast, codemap, ast_util, ast_map, opt_vec, visit};\n use syntax::parse::token;\n use syntax::parse::token::special_idents;\n \n@@ -96,9 +96,11 @@ pub struct CrateDebugContext {\n     priv crate_file: ~str,\n     priv llcontext: ContextRef,\n     priv builder: DIBuilderRef,\n-    priv curr_loc: DebugLocation,\n+    priv current_debug_location: DebugLocation,\n     priv created_files: HashMap<~str, DIFile>,\n     priv created_types: HashMap<uint, DIType>,\n+    priv namespace_map: HashMap<ast::NodeId, @NamespaceTree>,\n+    priv function_companion_namespaces: HashMap<ast::NodeId, @NamespaceTree>,\n }\n \n impl CrateDebugContext {\n@@ -111,9 +113,11 @@ impl CrateDebugContext {\n             crate_file: crate,\n             llcontext: llcontext,\n             builder: builder,\n-            curr_loc: UnknownLocation,\n+            current_debug_location: UnknownLocation,\n             created_files: HashMap::new(),\n             created_types: HashMap::new(),\n+            namespace_map: HashMap::new(),\n+            function_companion_namespaces: HashMap::new(),\n         };\n     }\n }\n@@ -178,8 +182,22 @@ enum VariableKind {\n     CapturedVariable,\n }\n \n+pub fn initialize(cx: &mut CrateContext, crate: &ast::Crate) {\n+    if cx.dbg_cx.is_none() {\n+        return;\n+    }\n+\n+    let crate_namespace_ident = token::str_to_ident(cx.link_meta.name);\n+    let mut visitor = NamespaceVisitor::new_crate_visitor(cx, crate_namespace_ident);\n+    visit::walk_crate(&mut visitor, crate, ());\n+}\n+\n /// Create any deferred debug metadata nodes\n pub fn finalize(cx: @mut CrateContext) {\n+    if cx.dbg_cx.is_none() {\n+        return;\n+    }\n+\n     debug!(\"finalize\");\n     compile_unit_metadata(cx);\n     unsafe {\n@@ -573,22 +591,38 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n     };\n \n     // get_template_parameters() will append a `<...>` clause to the function name if necessary.\n-    let mut function_name = cx.sess.str_of(ident).to_owned();\n+    let mut function_name = token::ident_to_str(&ident).to_owned();\n     let template_parameters = if cx.sess.opts.extra_debuginfo {\n         get_template_parameters(cx, generics, param_substs, file_metadata, &mut function_name)\n     } else {\n         ptr::null()\n     };\n \n+    let namespace_node = debug_context(cx).namespace_map.find_copy(&fn_ast_id);\n+    let (linkage_name, containing_scope) = match namespace_node {\n+        Some(namespace_node) => {\n+            (namespace_node.mangled_name_of_contained_item(function_name), namespace_node.scope)\n+        }\n+        None => {\n+            // This branch is only hit when there is a bug in the NamespaceVisitor.\n+            cx.sess.span_warn(span, \"debuginfo: Could not find namespace node for function. \\\n+                                     This is a bug! Try running with RUST_LOG=rustc=1 \\\n+                                     to get further details and report the results \\\n+                                     to github.com/mozilla/rust/issues\");\n+            (function_name.clone(), file_metadata)\n+        }\n+    };\n+\n     let scope_line = get_scope_line(cx, top_level_block, loc.line);\n \n-    let fn_metadata = do function_name.to_c_str().with_ref |function_name| {\n+    let fn_metadata = do function_name.with_c_str |function_name| {\n+                      do linkage_name.with_c_str |linkage_name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreateFunction(\n                 DIB(cx),\n-                file_metadata,\n-                function_name,\n+                containing_scope,\n                 function_name,\n+                linkage_name,\n                 file_metadata,\n                 loc.line as c_uint,\n                 function_type_metadata,\n@@ -601,9 +635,9 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n                 template_parameters,\n                 ptr::null())\n         }\n-    };\n+    }};\n \n-    // Initialize fn debug context (including scope map)\n+    // Initialize fn debug context (including scope map and namespace map)\n     let mut fn_debug_context = ~FunctionDebugContextData {\n         scope_map: HashMap::new(),\n         fn_metadata: fn_metadata,\n@@ -614,6 +648,18 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n     let arg_pats = do fn_decl.inputs.map |arg_ref| { arg_ref.pat };\n     populate_scope_map(cx, arg_pats, top_level_block, fn_metadata, &mut fn_debug_context.scope_map);\n \n+    match top_level_block {\n+        Some(top_level_block) => {\n+            let mut namespace_visitor = NamespaceVisitor::new_function_visitor(cx,\n+                                                                               function_name,\n+                                                                               namespace_node,\n+                                                                               file_metadata,\n+                                                                               span);\n+            visit::walk_block(&mut namespace_visitor, top_level_block, ());\n+        }\n+        _ => { /* nothing to do */}\n+    }\n+\n     return FunctionDebugContext(fn_debug_context);\n \n     fn get_function_signature(cx: &mut CrateContext,\n@@ -644,7 +690,7 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n             }\n         }\n \n-        // arguments types\n+        // Arguments types\n         for arg in fn_decl.inputs.iter() {\n             let arg_type = ty::node_id_to_type(cx.tcx, arg.pat.id);\n             let arg_type = match param_substs {\n@@ -699,7 +745,7 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n \n             let ident = special_idents::type_self;\n \n-            let param_metadata = do cx.sess.str_of(ident).to_c_str().with_ref |name| {\n+            let param_metadata = do token::ident_to_str(&ident).to_c_str().with_ref |name| {\n                 unsafe {\n                     llvm::LLVMDIBuilderCreateTemplateTypeParameter(\n                         DIB(cx),\n@@ -735,7 +781,7 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n                 name_to_append_suffix_to.push_str(\",\");\n             }\n \n-            let param_metadata = do cx.sess.str_of(ident).to_c_str().with_ref |name| {\n+            let param_metadata = do token::ident_to_str(&ident).to_c_str().with_ref |name| {\n                 unsafe {\n                     llvm::LLVMDIBuilderCreateTemplateTypeParameter(\n                         DIB(cx),\n@@ -783,7 +829,7 @@ fn create_DIArray(builder: DIBuilderRef, arr: &[DIDescriptor]) -> DIArray {\n }\n \n fn compile_unit_metadata(cx: @mut CrateContext) {\n-    let dcx = dbg_cx(cx);\n+    let dcx = debug_context(cx);\n     let crate_name: &str = dcx.crate_file;\n \n     debug!(\"compile_unit_metadata: %?\", crate_name);\n@@ -823,7 +869,7 @@ fn declare_local(bcx: @mut Block,\n     let filename = span_start(cx, span).file.name;\n     let file_metadata = file_metadata(cx, filename);\n \n-    let name: &str = cx.sess.str_of(variable_ident);\n+    let name: &str = token::ident_to_str(&variable_ident);\n     let loc = span_start(cx, span);\n     let type_metadata = type_metadata(cx, variable_type, span);\n \n@@ -891,7 +937,7 @@ fn declare_local(bcx: @mut Block,\n }\n \n fn file_metadata(cx: &mut CrateContext, full_path: &str) -> DIFile {\n-    match dbg_cx(cx).created_files.find_equiv(&full_path) {\n+    match debug_context(cx).created_files.find_equiv(&full_path) {\n         Some(file_metadata) => return *file_metadata,\n         None => ()\n     }\n@@ -914,7 +960,7 @@ fn file_metadata(cx: &mut CrateContext, full_path: &str) -> DIFile {\n             }\n         }};\n \n-    dbg_cx(cx).created_files.insert(full_path.to_owned(), file_metadata);\n+    debug_context(cx).created_files.insert(full_path.to_owned(), file_metadata);\n     return file_metadata;\n }\n \n@@ -1017,7 +1063,7 @@ fn struct_metadata(cx: &mut CrateContext,\n         if field.ident.name == special_idents::unnamed_field.name {\n             ~\"\"\n         } else {\n-            cx.sess.str_of(field.ident).to_owned()\n+            token::ident_to_str(&field.ident).to_owned()\n         }\n     };\n     let field_types_metadata = do fields.map |field| {\n@@ -1086,7 +1132,7 @@ fn enum_metadata(cx: &mut CrateContext,\n     let enumerators_metadata: ~[DIDescriptor] = variants\n         .iter()\n         .map(|v| {\n-            let name: &str = cx.sess.str_of(v.name);\n+            let name: &str = token::ident_to_str(&v.name);\n             let discriminant_value = v.disr_val as c_ulonglong;\n \n             do name.with_c_str |name| {\n@@ -1197,7 +1243,7 @@ fn enum_metadata(cx: &mut CrateContext,\n         }.collect();\n \n         let mut arg_names = match variant_info.arg_names {\n-            Some(ref names) => do names.map |ident| { cx.sess.str_of(*ident).to_owned() },\n+            Some(ref names) => do names.map |ident| { token::ident_to_str(ident).to_owned() },\n             None => do variant_info.args.map |_| { ~\"\" }\n         };\n \n@@ -1206,7 +1252,7 @@ fn enum_metadata(cx: &mut CrateContext,\n         }\n \n         let variant_llvm_type = Type::struct_(arg_llvm_types, struct_def.packed);\n-        let variant_name: &str = cx.sess.str_of(variant_info.name);\n+        let variant_name: &str = token::ident_to_str(&variant_info.name);\n \n         return composite_type_metadata(\n             cx,\n@@ -1508,7 +1554,7 @@ fn type_metadata(cx: &mut CrateContext,\n                  span: Span)\n               -> DIType {\n     let type_id = ty::type_id(t);\n-    match dbg_cx(cx).created_types.find(&type_id) {\n+    match debug_context(cx).created_types.find(&type_id) {\n         Some(type_metadata) => return *type_metadata,\n         None => ()\n     }\n@@ -1628,7 +1674,7 @@ fn type_metadata(cx: &mut CrateContext,\n         _ => cx.sess.bug(fmt!(\"debuginfo: unexpected type in type_metadata: %?\", sty))\n     };\n \n-    dbg_cx(cx).created_types.insert(type_id, type_metadata);\n+    debug_context(cx).created_types.insert(type_id, type_metadata);\n     return type_metadata;\n }\n \n@@ -1649,7 +1695,7 @@ impl DebugLocation {\n }\n \n fn set_debug_location(cx: &mut CrateContext, debug_location: DebugLocation) {\n-    if debug_location == dbg_cx(cx).curr_loc {\n+    if debug_location == debug_context(cx).current_debug_location {\n         return;\n     }\n \n@@ -1660,7 +1706,7 @@ fn set_debug_location(cx: &mut CrateContext, debug_location: DebugLocation) {\n             debug!(\"setting debug location to %u %u\", line, col);\n             let elements = [C_i32(line as i32), C_i32(col as i32), scope, ptr::null()];\n             unsafe {\n-                metadata_node = llvm::LLVMMDNodeInContext(dbg_cx(cx).llcontext,\n+                metadata_node = llvm::LLVMMDNodeInContext(debug_context(cx).llcontext,\n                                                           vec::raw::to_ptr(elements),\n                                                           elements.len() as c_uint);\n             }\n@@ -1675,7 +1721,7 @@ fn set_debug_location(cx: &mut CrateContext, debug_location: DebugLocation) {\n         llvm::LLVMSetCurrentDebugLocation(cx.builder.B, metadata_node);\n     }\n \n-    dbg_cx(cx).curr_loc = debug_location;\n+    debug_context(cx).current_debug_location = debug_location;\n }\n \n //=-------------------------------------------------------------------------------------------------\n@@ -1701,7 +1747,7 @@ fn bytes_to_bits(bytes: uint) -> c_ulonglong {\n }\n \n #[inline]\n-fn dbg_cx<'a>(cx: &'a mut CrateContext) -> &'a mut CrateDebugContext {\n+fn debug_context<'a>(cx: &'a mut CrateContext) -> &'a mut CrateDebugContext {\n     cx.dbg_cx.get_mut_ref()\n }\n \n@@ -2179,3 +2225,165 @@ fn populate_scope_map(cx: &mut CrateContext,\n         }\n     }\n }\n+\n+\n+//=-------------------------------------------------------------------------------------------------\n+// Namespace Handling\n+//=-------------------------------------------------------------------------------------------------\n+\n+struct NamespaceTree {\n+    ident: ast::Ident,\n+    scope: DIScope,\n+    parent: Option<@NamespaceTree>,\n+}\n+\n+impl NamespaceTree {\n+    fn mangled_name_of_contained_item(&self, item_name: &str) -> ~str {\n+        let mut name = ~\"_ZN\";\n+        fill_nested(self, &mut name);\n+\n+        name.push_str(fmt!(\"%u%s\", item_name.len(), item_name));\n+        name.push_char('E');\n+\n+        return name;\n+\n+        fn fill_nested(node: &NamespaceTree, output: &mut ~str) {\n+            match node.parent {\n+                Some(parent) => {\n+                    fill_nested(parent, output);\n+                }\n+                None => {}\n+            }\n+            let name = token::ident_to_str(&node.ident);\n+            output.push_str(fmt!(\"%u%s\", name.len(), name));\n+        }\n+    }\n+}\n+\n+struct NamespaceVisitor<'self> {\n+    module_ident: ast::Ident,\n+    scope_stack: ~[@NamespaceTree],\n+    crate_context: &'self mut CrateContext,\n+}\n+\n+impl<'self> NamespaceVisitor<'self> {\n+\n+    fn new_crate_visitor<'a>(cx: &'a mut CrateContext,\n+                             crate_ident: ast::Ident)\n+                          -> NamespaceVisitor<'a> {\n+        NamespaceVisitor {\n+            module_ident: crate_ident,\n+            scope_stack: ~[],\n+            crate_context: cx,\n+        }\n+    }\n+\n+    fn new_function_visitor<'a>(cx: &'a mut CrateContext,\n+                                function_name: &str,\n+                                parent_node: Option<@NamespaceTree>,\n+                                file_metadata: DIFile,\n+                                span: Span)\n+                             -> NamespaceVisitor<'a> {\n+        let companion_name = function_name + \"()\";\n+        let companion_ident = token::str_to_ident(companion_name);\n+        let parent_scope = match parent_node {\n+            Some(parent_node) => parent_node.scope,\n+            None => ptr::null()\n+        };\n+        let line = span_start(cx, span).line as c_uint;\n+\n+        let namespace_metadata = unsafe {\n+            do companion_name.with_c_str |companion_name| {\n+                llvm::LLVMDIBuilderCreateNameSpace(\n+                    DIB(cx),\n+                    parent_scope,\n+                    companion_name,\n+                    file_metadata,\n+                    line)\n+            }\n+        };\n+\n+        let function_node = @NamespaceTree {\n+            scope: namespace_metadata,\n+            ident: companion_ident,\n+            parent: parent_node,\n+        };\n+\n+        return NamespaceVisitor {\n+            module_ident: special_idents::invalid,\n+            scope_stack: ~[function_node],\n+            crate_context: cx,\n+        };\n+    }\n+}\n+\n+// Possible optimization: Only recurse if needed.\n+impl<'self> visit::Visitor<()> for NamespaceVisitor<'self> {\n+\n+    fn visit_mod(&mut self,\n+                 module: &ast::_mod,\n+                 span: Span,\n+                 _: ast::NodeId,\n+                 _: ()) {\n+        let module_name = token::ident_to_str(&self.module_ident);\n+\n+        let (parent_node, parent_scope) = if self.scope_stack.len() > 0 {\n+            let parent_node = *self.scope_stack.last();\n+            (Some(parent_node), parent_node.scope)\n+        } else {\n+            (None, ptr::null())\n+        };\n+\n+        let loc = span_start(self.crate_context, span);\n+        let file_metadata = file_metadata(self.crate_context, loc.file.name);\n+\n+        let namespace_metadata = unsafe {\n+            do module_name.with_c_str |module_name| {\n+                llvm::LLVMDIBuilderCreateNameSpace(\n+                    DIB(self.crate_context),\n+                    parent_scope,\n+                    module_name,\n+                    file_metadata,\n+                    loc.line as c_uint)\n+            }\n+        };\n+\n+        let this_node = @NamespaceTree {\n+            scope: namespace_metadata,\n+            ident: self.module_ident,\n+            parent: parent_node,\n+        };\n+\n+        self.scope_stack.push(this_node);\n+\n+        visit::walk_mod(self, module, ());\n+\n+        self.scope_stack.pop();\n+    }\n+\n+    fn visit_item(&mut self, item: @ast::item, _: ()) {\n+        match item.node {\n+            ast::item_mod(*) => {\n+                // always store the last module ident so visit_mod() has it available\n+                self.module_ident = item.ident;\n+            }\n+            ast::item_fn(*) => { /* handled by visit_fn */ }\n+            _ => {\n+                debug_context(self.crate_context).namespace_map.insert(item.id,\n+                                                                       *self.scope_stack.last());\n+            }\n+        }\n+\n+        visit::walk_item(self, item, ());\n+    }\n+\n+    fn visit_fn(&mut self,\n+                function_kind: &visit::fn_kind,\n+                _: &ast::fn_decl,\n+                block: &ast::Block,\n+                span: Span,\n+                node_id: ast::NodeId,\n+                _: ()) {\n+        debug_context(self.crate_context).namespace_map.insert(node_id, *self.scope_stack.last());\n+    }\n+}"}, {"sha": "84d9c2c66cc6efc06fb8cb5b6103c13700c0bba6", "filename": "src/test/debug-info/basic-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fbasic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fbasic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbasic-types.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -15,7 +15,7 @@\n // its numerical value.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break _zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n // debugger:print b"}, {"sha": "b02b4be2fd9c03c34f3872ab7915763d66f5a6ee", "filename": "src/test/debug-info/borrowed-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fborrowed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fborrowed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-basic.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -12,7 +12,7 @@\n // its numerical value.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n // debugger:print *bool_ref"}, {"sha": "2461eb4887eb5720ac277379bc7e469983ccb44c", "filename": "src/test/debug-info/borrowed-c-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fborrowed-c-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fborrowed-c-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-c-style-enum.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "9a9e71c7068c40e460dee7d64fe7e286fe8e2d22", "filename": "src/test/debug-info/borrowed-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "35a222ffd044214aa1a0eaacae442a8f5935fb2b", "filename": "src/test/debug-info/borrowed-managed-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fborrowed-managed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fborrowed-managed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-managed-basic.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -12,7 +12,7 @@\n // its numerical value.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n // debugger:print *bool_ref"}, {"sha": "42f7ffd8777bc75aaa84ced1d2d3d1955adb81b2", "filename": "src/test/debug-info/borrowed-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-struct.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "bcf73bae5ec439965cc71b9e69b807d86426a162", "filename": "src/test/debug-info/borrowed-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fborrowed-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fborrowed-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-tuple.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "ac295783c9f94146906b2c90bb2002d71a795d76", "filename": "src/test/debug-info/borrowed-unique-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fborrowed-unique-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fborrowed-unique-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-unique-basic.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -12,7 +12,7 @@\n // its numerical value.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n // debugger:print *bool_ref"}, {"sha": "60ff5f789a8fbd4b53b849c2fbacf58fdfa5d1c8", "filename": "src/test/debug-info/box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbox.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break _zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n // debugger:print *a"}, {"sha": "e996b249d369ee434dde633dc902264120579ee9", "filename": "src/test/debug-info/boxed-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "aa2a88afc465a9d5e6c4d22c7a39da4d2a40d2dd", "filename": "src/test/debug-info/boxed-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "45f8c134f2c2ad993ce2df52bf5646dbb9d873dd", "filename": "src/test/debug-info/by-value-non-immediate-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "75e65178546c5e82340c71b0c5ed1643bed1a375", "filename": "src/test/debug-info/by-value-self-argument-in-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fby-value-self-argument-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fby-value-self-argument-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fby-value-self-argument-in-trait-impl.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "d3e27c85b745af044589d162c3551803dcf0c65d", "filename": "src/test/debug-info/c-style-enum-in-composite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "f1bb42ac5f0f4775a781e9f470547a3e302e1106", "filename": "src/test/debug-info/c-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "83a2c456ae69784de3fe5ad601766ed4b407c405", "filename": "src/test/debug-info/closure-in-generic-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fclosure-in-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fclosure-in-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fclosure-in-generic-function.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "49bbb7ed2635a2aee6dc93099450fec71cd1b60d", "filename": "src/test/debug-info/destructured-fn-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "8115d29857030b9849fb9ab99ab0720a633d9fd1", "filename": "src/test/debug-info/destructured-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "a00e1318967d224e550e4c0f2fa5c25b0aeab20d", "filename": "src/test/debug-info/evec-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "6ae7b027075da4f8b45510c70ab49ce3c0d9a00e", "filename": "src/test/debug-info/function-arguments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ffunction-arguments.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n \n@@ -43,4 +43,4 @@ fn fun(x: int, y: bool) -> (int, bool) {\n     (x, y)\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "22f565ceee5e3120e727db1e85b06cec212673c8", "filename": "src/test/debug-info/generic-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fgeneric-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fgeneric-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-function.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "051b2054219796b5a3562a65a46b86a010ae94fe", "filename": "src/test/debug-info/generic-functions-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fgeneric-functions-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fgeneric-functions-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-functions-nested.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "f97a3cea5660d4353987eb5788070b0f02e2e6fd", "filename": "src/test/debug-info/generic-method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-method-on-generic-struct.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STACK BY REF"}, {"sha": "8e82f0f27b9f98affcd128b99be787f5df5c582e", "filename": "src/test/debug-info/generic-static-method-on-struct-and-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fgeneric-static-method-on-struct-and-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fgeneric-static-method-on-struct-and-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-static-method-on-struct-and-enum.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STRUCT"}, {"sha": "81b12fe60ae3d7f5fabb6180d65b1ad1c6055b65", "filename": "src/test/debug-info/generic-struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print union on\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "cf6286e9541e8a2b6276e90dace61f7add838b7f", "filename": "src/test/debug-info/generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fgeneric-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fgeneric-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-struct.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "8523a947aac10ae6cb8f98b78fdd4fc1331ee719", "filename": "src/test/debug-info/generic-trait-generic-static-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -11,7 +11,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "0b9f93505476f6d5069243b482c4b30d24374433", "filename": "src/test/debug-info/generic-tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fgeneric-tuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fgeneric-tuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-tuple-style-enum.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print union on\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "0a2cb953f007cc5930489de8b37cfe4f54ac719a", "filename": "src/test/debug-info/lexical-scope-in-for-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-for-loop.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -11,7 +11,7 @@\n // xfail-win32\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // FIRST ITERATION"}, {"sha": "89fd84daede532c6be9fbcb6fae089e897d552a2", "filename": "src/test/debug-info/lexical-scope-in-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-if.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -11,7 +11,7 @@\n // xfail-win32\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // BEFORE if"}, {"sha": "96da78a9192983cf69aea31f57807d4f48ec1c80", "filename": "src/test/debug-info/lexical-scope-in-managed-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-managed-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-managed-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-managed-closure.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "1216e9fde1e0ae50bd73b8799634e15125c0b0f8", "filename": "src/test/debug-info/lexical-scope-in-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-match.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -11,7 +11,7 @@\n // xfail-win32\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "744c77b27358c197571eed6a5269347b6f597aee", "filename": "src/test/debug-info/lexical-scope-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-stack-closure.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "beb9211cc3291ac4673767658636e9147e6a1d3b", "filename": "src/test/debug-info/lexical-scope-in-unconditional-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unconditional-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unconditional-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unconditional-loop.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // FIRST ITERATION"}, {"sha": "6d8ca457efef5fa00c4a4e6de997b2685d098c92", "filename": "src/test/debug-info/lexical-scope-in-unique-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unique-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unique-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unique-closure.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "80010bdd2628e6b95b502646f027ed3495d24c07", "filename": "src/test/debug-info/lexical-scope-in-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-while.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // FIRST ITERATION"}, {"sha": "9e87eee692dc2b880d29bcf8333d5901e431cca3", "filename": "src/test/debug-info/lexical-scope-with-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-with-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scope-with-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-with-macro.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "652561c6aeffc107ffc07e893fe9860f5f35a522", "filename": "src/test/debug-info/lexical-scopes-in-block-expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scopes-in-block-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Flexical-scopes-in-block-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scopes-in-block-expression.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -11,7 +11,7 @@\n // xfail-win32\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STRUCT EXPRESSION"}, {"sha": "87aa3d1dfc159e8249f941af6fcfea5fd6af8743", "filename": "src/test/debug-info/managed-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "d4ec7094e8c95a2f4ce82dcf5f2081fb2a6bce0b", "filename": "src/test/debug-info/managed-pointer-within-unique-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "9ea713c29823c0725591443d2fe9e12d5e5d065e", "filename": "src/test/debug-info/managed-pointer-within-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "d428d230d45c01486db7087561d0bf007cf840bc", "filename": "src/test/debug-info/method-on-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STACK BY REF"}, {"sha": "63fd6c996ffa0793f0f4168088a1a1ab5434be8c", "filename": "src/test/debug-info/method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmethod-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmethod-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-generic-struct.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STACK BY REF"}, {"sha": "249c3a073a27bd969d17b31e58575c7f5846948f", "filename": "src/test/debug-info/method-on-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmethod-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmethod-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-struct.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STACK BY REF"}, {"sha": "07a29f3ece338e9c0dd11e0291fef48d20fbc3b7", "filename": "src/test/debug-info/method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmethod-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmethod-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-trait.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STACK BY REF"}, {"sha": "d4354709a86eefd14e8dbfd478f4ce81cba3c2cb", "filename": "src/test/debug-info/method-on-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmethod-on-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmethod-on-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-tuple-struct.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STACK BY REF"}, {"sha": "881e2547cfc68df64898ac4f68158bd94d0d92e1", "filename": "src/test/debug-info/multiple-functions-equal-var-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmultiple-functions-equal-var-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmultiple-functions-equal-var-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmultiple-functions-equal-var-names.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "880954ce5316771f5d8538157196013a12014f08", "filename": "src/test/debug-info/multiple-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmultiple-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fmultiple-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmultiple-functions.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "273ca255061c57e48702e9cea67734010f9a5871", "filename": "src/test/debug-info/name-shadowing-and-scope-nesting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fname-shadowing-and-scope-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fname-shadowing-and-scope-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fname-shadowing-and-scope-nesting.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "9dc4edfb1599ba609f967443a566625d12bda59b", "filename": "src/test/debug-info/nil-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fnil-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fnil-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fnil-enum.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "5c0ffe24f0eaa7c818cdf73093dccb0c64ad47aa", "filename": "src/test/debug-info/option-like-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "47e4a26ab4ba29d892c518161256aba0a9263155", "filename": "src/test/debug-info/packed-struct-with-destructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "8d3fc4babb86bfe02bdd0be2674c82f195d80aee", "filename": "src/test/debug-info/packed-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fpacked-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fpacked-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fpacked-struct.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "53b2e9ee21de1692387cba6a6ef2c6a2b55d606e", "filename": "src/test/debug-info/self-in-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fself-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fself-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fself-in-default-method.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STACK BY REF"}, {"sha": "47f589307601f2ed24c334d2c08f8dc27bdd9e06", "filename": "src/test/debug-info/self-in-generic-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fself-in-generic-default-method.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STACK BY REF"}, {"sha": "adc240e40d5a9dd52618b96c943b12b835232043", "filename": "src/test/debug-info/shadowed-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fshadowed-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fshadowed-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fshadowed-argument.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "acc8cf3b654d6ad0fadf548895da507909574a6d", "filename": "src/test/debug-info/shadowed-variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fshadowed-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fshadowed-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fshadowed-variable.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "fbcee4f0ae2d6876e235cb9327b1dc7c7e11ad10", "filename": "src/test/debug-info/simple-lexical-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fsimple-lexical-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fsimple-lexical-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimple-lexical-scope.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "a47472af1efa6eba7304d50d46b7462498c2eb3f", "filename": "src/test/debug-info/simple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "1e4c53427b23a5df672060603697b1ade5379e46", "filename": "src/test/debug-info/simple-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "0d1ce28094a5acff7ce80b02ec65a6d1fc9190c8", "filename": "src/test/debug-info/static-method-on-struct-and-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fstatic-method-on-struct-and-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fstatic-method-on-struct-and-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstatic-method-on-struct-and-enum.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STRUCT"}, {"sha": "a821ce21d50bfa26a1d13d66c714c7cb20c61964", "filename": "src/test/debug-info/struct-in-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print union on\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "f1690fba354f0870905d46b42c6e4ea874306518", "filename": "src/test/debug-info/struct-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fstruct-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fstruct-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-in-struct.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "acd2526a68d6e66e9fa1833087cadd2599f8d38f", "filename": "src/test/debug-info/struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print union on\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "8994a582b58fc7cabd337939d60a6037e1a1aac7", "filename": "src/test/debug-info/struct-with-destructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n // debugger:print simple"}, {"sha": "1f6e6992e2795af4de102bbb8f911f3023816bb0", "filename": "src/test/debug-info/trait-generic-static-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -11,7 +11,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "25a08b3f57a777119d8b403c6f8eb1ab3f0c0c99", "filename": "src/test/debug-info/tuple-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Ftuple-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Ftuple-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-in-struct.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "14dd671bb945e7c7501556690ff7253af581b8e6", "filename": "src/test/debug-info/tuple-in-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Ftuple-in-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Ftuple-in-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-in-tuple.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "63a74ecbe4a0895e9e346971bfd2fb8b78bba83d", "filename": "src/test/debug-info/tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Ftuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Ftuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-struct.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "fef6b449a9bdeea88894c921b062917caabea42c", "filename": "src/test/debug-info/tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print union on\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "0995cec11a3b30a9aed1dfed83dab35f44f42746", "filename": "src/test/debug-info/unique-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Funique-enum.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "b20f40378d3964f7430097adf2313cae94f9a0f6", "filename": "src/test/debug-info/var-captured-in-managed-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fvar-captured-in-managed-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fvar-captured-in-managed-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-managed-closure.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "920052eb80ee70a1cf819b975514ab603dd76b2f", "filename": "src/test/debug-info/var-captured-in-nested-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-nested-closure.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "f113c6ea4be77210d2cab80e39ec1700ed5a4641", "filename": "src/test/debug-info/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "e16539d3396a7663c0f6358c9aa33d0843a5bfa7", "filename": "src/test/debug-info/var-captured-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-stack-closure.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "9e5fb9236db61545c17cb6ecfc756c7875e402e6", "filename": "src/test/debug-info/vec-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fvec-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fvec-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvec-slices.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n // debugger:print empty.size_in_bytes"}, {"sha": "bc10b5ec8b70c3cef3cbbd1273e76106b09cc312", "filename": "src/test/debug-info/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b/src%2Ftest%2Fdebug-info%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvec.rs?ref=93d6328d49e07f8c0ad98f5925c575d9c1b1cc9b", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n // debugger:print a"}]}