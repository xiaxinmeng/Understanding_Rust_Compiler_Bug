{"sha": "9ecda8de85ce893cc3fc748ab06be0b8250147a7", "node_id": "C_kwDOAAsO6NoAKDllY2RhOGRlODVjZTg5M2NjM2ZjNzQ4YWIwNmJlMGI4MjUwMTQ3YTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-30T20:02:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-30T20:02:00Z"}, "message": "Auto merge of #110427 - Nilstrieb:parallel-bootstrap-startup, r=albertlarsan68\n\nParallelize initial Rust download in bootstrap\n\nParallelize the initial download of Rust in `bootstrap.py`\n\n`time ./x.py --help` after `rm -r build`\nBefore: 33s\nAfter: 27s", "tree": {"sha": "07079ca29bfd36b9248499c68c043cf7ef0d929d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07079ca29bfd36b9248499c68c043cf7ef0d929d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ecda8de85ce893cc3fc748ab06be0b8250147a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ecda8de85ce893cc3fc748ab06be0b8250147a7", "html_url": "https://github.com/rust-lang/rust/commit/9ecda8de85ce893cc3fc748ab06be0b8250147a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ecda8de85ce893cc3fc748ab06be0b8250147a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2eb9f85b9b52e6538c3c7fc160725963272d471", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2eb9f85b9b52e6538c3c7fc160725963272d471", "html_url": "https://github.com/rust-lang/rust/commit/f2eb9f85b9b52e6538c3c7fc160725963272d471"}, {"sha": "a98968ee0e03b15ce8656d77f75ae664a0b2d6b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a98968ee0e03b15ce8656d77f75ae664a0b2d6b5", "html_url": "https://github.com/rust-lang/rust/commit/a98968ee0e03b15ce8656d77f75ae664a0b2d6b5"}], "stats": {"total": 101, "additions": 86, "deletions": 15}, "files": [{"sha": "dd0b091a2a31f5aad286e87adf29ad308acf1664", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 86, "deletions": 15, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/9ecda8de85ce893cc3fc748ab06be0b8250147a7/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/9ecda8de85ce893cc3fc748ab06be0b8250147a7/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=9ecda8de85ce893cc3fc748ab06be0b8250147a7", "patch": "@@ -13,6 +13,7 @@\n import tempfile\n \n from time import time\n+from multiprocessing import Pool, cpu_count\n \n try:\n     import lzma\n@@ -406,6 +407,48 @@ def channel(self):\n         return self.version + \"-\" + self.date\n \n \n+class DownloadInfo:\n+    \"\"\"A helper class that can be pickled into a parallel subprocess\"\"\"\n+\n+    def __init__(\n+        self,\n+        base_download_url,\n+        download_path,\n+        bin_root,\n+        tarball_path,\n+        tarball_suffix,\n+        checksums_sha256,\n+        pattern,\n+        verbose,\n+    ):\n+        self.base_download_url = base_download_url\n+        self.download_path = download_path\n+        self.bin_root = bin_root\n+        self.tarball_path = tarball_path\n+        self.tarball_suffix = tarball_suffix\n+        self.checksums_sha256 = checksums_sha256\n+        self.pattern = pattern\n+        self.verbose = verbose\n+\n+def download_component(download_info):\n+    if not os.path.exists(download_info.tarball_path):\n+        get(\n+            download_info.base_download_url,\n+            download_info.download_path,\n+            download_info.tarball_path,\n+            download_info.checksums_sha256,\n+            verbose=download_info.verbose,\n+        )\n+\n+def unpack_component(download_info):\n+    unpack(\n+        download_info.tarball_path,\n+        download_info.tarball_suffix,\n+        download_info.bin_root,\n+        match=download_info.pattern,\n+        verbose=download_info.verbose,\n+    )\n+\n class RustBuild(object):\n     \"\"\"Provide all the methods required to build Rust\"\"\"\n     def __init__(self):\n@@ -460,17 +503,49 @@ def download_toolchain(self):\n                     )\n                     run_powershell([script])\n                 shutil.rmtree(bin_root)\n+\n+            key = self.stage0_compiler.date\n+            cache_dst = os.path.join(self.build_dir, \"cache\")\n+            rustc_cache = os.path.join(cache_dst, key)\n+            if not os.path.exists(rustc_cache):\n+                os.makedirs(rustc_cache)\n+\n             tarball_suffix = '.tar.gz' if lzma is None else '.tar.xz'\n-            filename = \"rust-std-{}-{}{}\".format(\n-                rustc_channel, self.build, tarball_suffix)\n-            pattern = \"rust-std-{}\".format(self.build)\n-            self._download_component_helper(filename, pattern, tarball_suffix)\n-            filename = \"rustc-{}-{}{}\".format(rustc_channel, self.build,\n-                                              tarball_suffix)\n-            self._download_component_helper(filename, \"rustc\", tarball_suffix)\n-            filename = \"cargo-{}-{}{}\".format(rustc_channel, self.build,\n-                                            tarball_suffix)\n-            self._download_component_helper(filename, \"cargo\", tarball_suffix)\n+\n+            toolchain_suffix = \"{}-{}{}\".format(rustc_channel, self.build, tarball_suffix)\n+\n+            tarballs_to_download = [\n+                (\"rust-std-{}\".format(toolchain_suffix), \"rust-std-{}\".format(self.build)),\n+                (\"rustc-{}\".format(toolchain_suffix), \"rustc\"),\n+                (\"cargo-{}\".format(toolchain_suffix), \"cargo\"),\n+            ]\n+\n+            tarballs_download_info = [\n+                DownloadInfo(\n+                    base_download_url=self.download_url,\n+                    download_path=\"dist/{}/{}\".format(self.stage0_compiler.date, filename),\n+                    bin_root=self.bin_root(),\n+                    tarball_path=os.path.join(rustc_cache, filename),\n+                    tarball_suffix=tarball_suffix,\n+                    checksums_sha256=self.checksums_sha256,\n+                    pattern=pattern,\n+                    verbose=self.verbose,\n+                )\n+                for filename, pattern in tarballs_to_download\n+            ]\n+\n+            # Download the components serially to show the progress bars properly.\n+            for download_info in tarballs_download_info:\n+                download_component(download_info)\n+\n+            # Unpack the tarballs in parallle.\n+            # In Python 2.7, Pool cannot be used as a context manager.\n+            p = Pool(min(len(tarballs_download_info), cpu_count()))\n+            try:\n+                p.map(unpack_component, tarballs_download_info)\n+            finally:\n+                p.close()\n+\n             if self.should_fix_bins_and_dylibs():\n                 self.fix_bin_or_dylib(\"{}/bin/cargo\".format(bin_root))\n \n@@ -486,13 +561,9 @@ def download_toolchain(self):\n                 rust_stamp.write(key)\n \n     def _download_component_helper(\n-        self, filename, pattern, tarball_suffix,\n+        self, filename, pattern, tarball_suffix, rustc_cache,\n     ):\n         key = self.stage0_compiler.date\n-        cache_dst = os.path.join(self.build_dir, \"cache\")\n-        rustc_cache = os.path.join(cache_dst, key)\n-        if not os.path.exists(rustc_cache):\n-            os.makedirs(rustc_cache)\n \n         tarball = os.path.join(rustc_cache, filename)\n         if not os.path.exists(tarball):"}]}