{"sha": "fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMGFhNjQ3ZjNhYmFmNjY2N2RjZGU1YjQ0ZTY3M2UxNzJjOGE2M2I=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-07T15:13:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-07T15:13:41Z"}, "message": "rustc: Remove `CrateStore::crates` as a method\n\nThis commit moves the `crates` method to a query and then migrates all callers\nto use a query instead of the now-renamed `crates_untracked` method where\npossible.\n\nCloses #41417", "tree": {"sha": "16f0c7d16b2b022b73538c9ffa71c63d47bde8da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16f0c7d16b2b022b73538c9ffa71c63d47bde8da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "html_url": "https://github.com/rust-lang/rust/commit/fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ee7493b2ae90885fd324f40401f079fb12ff046", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ee7493b2ae90885fd324f40401f079fb12ff046", "html_url": "https://github.com/rust-lang/rust/commit/2ee7493b2ae90885fd324f40401f079fb12ff046"}], "stats": {"total": 70, "additions": 45, "deletions": 25}, "files": [{"sha": "caa912c7c8bafde6fd3588d05be5f77bc40d141e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "patch": "@@ -574,6 +574,7 @@ define_dep_nodes!( <'tcx>\n     [] MaybeUnusedTraitImport(HirId),\n     [] MaybeUnusedExternCrates,\n     [] StabilityIndex,\n+    [] AllCrateNums,\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "a7d874386d1c9c82b4fff0385449a7c1e6ce14e3", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "patch": "@@ -255,7 +255,7 @@ pub trait CrateStore {\n \n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that.\n-    fn crates(&self) -> Vec<CrateNum>;\n+    fn crates_untracked(&self) -> Vec<CrateNum>;\n \n     // utility functions\n     fn encode_metadata<'a, 'tcx>(&self,\n@@ -334,9 +334,7 @@ impl CrateStore for DummyCrateStore {\n     }\n     fn load_macro_untracked(&self, did: DefId, sess: &Session) -> LoadedMacro { bug!(\"load_macro\") }\n \n-    // This is basically a 1-based range of ints, which is a little\n-    // silly - I may fix that.\n-    fn crates(&self) -> Vec<CrateNum> { vec![] }\n+    fn crates_untracked(&self) -> Vec<CrateNum> { vec![] }\n \n     // utility functions\n     fn extern_mod_stmt_cnum_untracked(&self, emod_id: ast::NodeId) -> Option<CrateNum> { None }\n@@ -370,8 +368,9 @@ pub trait CrateLoader {\n // positions.\n pub fn used_crates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              prefer: LinkagePreference) -> Vec<(CrateNum, LibSource)> {\n-    let mut libs = tcx.sess.cstore.crates()\n-        .into_iter()\n+    let mut libs = tcx.crates()\n+        .iter()\n+        .cloned()\n         .filter_map(|cnum| {\n             if tcx.dep_kind(cnum).macros_only() {\n                 return None"}, {"sha": "1c7d0b76a643ea17e8b5a40c4cf02363345155dc", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "patch": "@@ -132,7 +132,7 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             if let Some(v) = attempt_static(tcx) {\n                 return v;\n             }\n-            for cnum in sess.cstore.crates() {\n+            for &cnum in tcx.crates().iter() {\n                 if tcx.dep_kind(cnum).macros_only() { continue }\n                 let src = tcx.used_crate_source(cnum);\n                 if src.rlib.is_some() { continue }\n@@ -165,7 +165,7 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Sweep all crates for found dylibs. Add all dylibs, as well as their\n     // dependencies, ensuring there are no conflicts. The only valid case for a\n     // dependency to be relied upon twice is for both cases to rely on a dylib.\n-    for cnum in sess.cstore.crates() {\n+    for &cnum in tcx.crates().iter() {\n         if tcx.dep_kind(cnum).macros_only() { continue }\n         let name = tcx.crate_name(cnum);\n         let src = tcx.used_crate_source(cnum);\n@@ -181,7 +181,7 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     // Collect what we've got so far in the return vector.\n-    let last_crate = sess.cstore.crates().len();\n+    let last_crate = tcx.crates().len();\n     let mut ret = (1..last_crate+1).map(|cnum| {\n         match formats.get(&CrateNum::new(cnum)) {\n             Some(&RequireDynamic) => Linkage::Dynamic,\n@@ -195,7 +195,7 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     //\n     // If the crate hasn't been included yet and it's not actually required\n     // (e.g. it's an allocator) then we skip it here as well.\n-    for cnum in sess.cstore.crates() {\n+    for &cnum in tcx.crates().iter() {\n         let src = tcx.used_crate_source(cnum);\n         if src.dylib.is_none() &&\n            !formats.contains_key(&cnum) &&\n@@ -281,7 +281,7 @@ fn attempt_static<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<DependencyLis\n \n     // All crates are available in an rlib format, so we're just going to link\n     // everything in explicitly so long as it's actually required.\n-    let last_crate = sess.cstore.crates().len();\n+    let last_crate = tcx.crates().len();\n     let mut ret = (1..last_crate+1).map(|cnum| {\n         if tcx.dep_kind(CrateNum::new(cnum)) == DepKind::Explicit {\n             Linkage::Static"}, {"sha": "cb59d9870faacfd3042e0979c1af4b5258f38153", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "patch": "@@ -208,7 +208,7 @@ pub fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n \n pub fn collect<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> LanguageItems {\n     let mut collector = LanguageItemCollector::new(tcx);\n-    for cnum in tcx.sess.cstore.crates() {\n+    for &cnum in tcx.crates().iter() {\n         for &(index, item_index) in tcx.defined_lang_items(cnum).iter() {\n             let def_id = DefId { krate: cnum, index: index };\n             collector.collect_item(item_index, def_id);"}, {"sha": "50fb584070262f9f5e9c5a58c84486109085f453", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "patch": "@@ -83,7 +83,7 @@ fn verify<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     let mut missing = HashSet::new();\n-    for cnum in tcx.sess.cstore.crates() {\n+    for &cnum in tcx.crates().iter() {\n         for &item in tcx.missing_lang_items(cnum).iter() {\n             missing.insert(item);\n         }"}, {"sha": "18f286ebf55760d312af3c9e05e5f2fa63ad6c67", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "patch": "@@ -994,14 +994,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let interners = CtxtInterners::new(arena);\n         let common_types = CommonTypes::new(&interners);\n         let dep_graph = hir.dep_graph.clone();\n-        let max_cnum = s.cstore.crates().iter().map(|c| c.as_usize()).max().unwrap_or(0);\n+        let max_cnum = s.cstore.crates_untracked().iter().map(|c| c.as_usize()).max().unwrap_or(0);\n         let mut providers = IndexVec::from_elem_n(extern_providers, max_cnum + 1);\n         providers[LOCAL_CRATE] = local_providers;\n \n         let def_path_hash_to_def_id = if s.opts.build_dep_graph() {\n             let upstream_def_path_tables: Vec<(CrateNum, Rc<_>)> = s\n                 .cstore\n-                .crates()\n+                .crates_untracked()\n                 .iter()\n                 .map(|&cnum| (cnum, s.cstore.def_path_table(cnum)))\n                 .collect();\n@@ -1121,6 +1121,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             self.stability_index(LOCAL_CRATE)\n         })\n     }\n+\n+    pub fn crates(self) -> Rc<Vec<CrateNum>> {\n+        self.all_crate_nums(LOCAL_CRATE)\n+    }\n }\n \n impl<'gcx: 'tcx, 'tcx> GlobalCtxt<'gcx> {"}, {"sha": "48b92d101edb3f8e07ed1d3fbfc42e4f619ab217", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "patch": "@@ -754,6 +754,12 @@ impl<'tcx> QueryDescription for queries::stability_index<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::all_crate_nums<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"fetching all foreign CrateNum instances\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1376,6 +1382,7 @@ define_maps! { <'tcx>\n         -> Rc<Vec<(HirId, Span)>>,\n \n     [] fn stability_index: stability_index_node(CrateNum) -> Rc<stability::Index<'tcx>>,\n+    [] fn all_crate_nums: all_crate_nums_node(CrateNum) -> Rc<Vec<CrateNum>>,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {\n@@ -1485,3 +1492,7 @@ fn maybe_unused_extern_crates_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n fn stability_index_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::StabilityIndex\n }\n+\n+fn all_crate_nums_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n+    DepConstructor::AllCrateNums\n+}"}, {"sha": "3aadacfe826fd2ea1a1b8f4a9d475cb873dc3b83", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "patch": "@@ -146,7 +146,7 @@ pub(super) fn trait_impls_of_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Traits defined in the current crate can't have impls in upstream\n     // crates, so we don't bother querying the cstore.\n     if !trait_id.is_local() {\n-        for cnum in tcx.sess.cstore.crates() {\n+        for &cnum in tcx.crates().iter() {\n             let impls = tcx.implementations_of_trait((cnum, trait_id));\n             remote_impls.extend(impls.iter().cloned());\n         }"}, {"sha": "776fd3582900049fbcc7d3218e97374141d1be4f", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "patch": "@@ -281,6 +281,11 @@ pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n             tcx.sess.cstore.extern_mod_stmt_cnum_untracked(id)\n         },\n \n+        all_crate_nums: |tcx, cnum| {\n+            assert_eq!(cnum, LOCAL_CRATE);\n+            Rc::new(tcx.sess.cstore.crates_untracked())\n+        },\n+\n         // Returns a map from a sufficiently visible external item (i.e. an\n         // external item that is visible from at least one local module) to a\n         // sufficiently visible parent (considering modules that re-export the\n@@ -292,7 +297,7 @@ pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n             assert_eq!(cnum, LOCAL_CRATE);\n             let mut visible_parent_map: DefIdMap<DefId> = DefIdMap();\n \n-            for cnum in tcx.sess.cstore.crates() {\n+            for &cnum in tcx.crates().iter() {\n                 // Ignore crates without a corresponding local `extern crate` item.\n                 if tcx.missing_extern_crate_item(cnum) {\n                     continue\n@@ -481,7 +486,7 @@ impl CrateStore for cstore::CStore {\n         })\n     }\n \n-    fn crates(&self) -> Vec<CrateNum>\n+    fn crates_untracked(&self) -> Vec<CrateNum>\n     {\n         let mut result = vec![];\n         self.iter_crate_data(|cnum, _| result.push(cnum));"}, {"sha": "a27a85a63e8a72545635d2e166ab87d88837d3cc", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "patch": "@@ -1288,7 +1288,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n     }\n \n     fn encode_crate_deps(&mut self, _: ()) -> LazySeq<CrateDep> {\n-        let crates = self.tcx.sess.cstore.crates();\n+        let crates = self.tcx.crates();\n \n         let mut deps = crates\n             .iter()"}, {"sha": "3de5fda0d45c102c0f9fd52524c26942fed733c7", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "patch": "@@ -109,7 +109,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     pub fn get_external_crates(&self) -> Vec<ExternalCrateData> {\n         let mut result = Vec::new();\n \n-        for n in self.tcx.sess.cstore.crates() {\n+        for &n in self.tcx.crates().iter() {\n             let span = match *self.tcx.extern_crate(n.as_def_id()) {\n                 Some(ref c) => c.span,\n                 None => {"}, {"sha": "b546059b4c51d1fcbdf7d96eefa0587a2038bcf7", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "patch": "@@ -110,7 +110,7 @@ impl ExportedSymbols {\n         let mut exports = FxHashMap();\n         exports.insert(LOCAL_CRATE, local_crate);\n \n-        for cnum in tcx.sess.cstore.crates() {\n+        for &cnum in tcx.crates().iter() {\n             debug_assert!(cnum != LOCAL_CRATE);\n \n             // If this crate is a plugin and/or a custom derive crate, then"}, {"sha": "6cfde9c7bbc7382db30f3852198eba31ad558d90", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "patch": "@@ -1524,7 +1524,7 @@ impl CrateInfo {\n             used_crate_source: FxHashMap(),\n         };\n \n-        for cnum in tcx.sess.cstore.crates() {\n+        for &cnum in tcx.crates().iter() {\n             info.native_libraries.insert(cnum, tcx.native_libraries(cnum));\n             info.crate_name.insert(cnum, tcx.crate_name(cnum).to_string());\n             info.used_crate_source.insert(cnum, tcx.used_crate_source(cnum));"}, {"sha": "7fa3dd7472db804dbf623914a610d439d943a13b", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "patch": "@@ -559,7 +559,7 @@ pub fn all_traits<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> AllTraits<'a>\n                 _ => {}\n             }\n         }\n-        for cnum in tcx.sess.cstore.crates() {\n+        for &cnum in tcx.crates().iter() {\n             let def_id = DefId {\n                 krate: cnum,\n                 index: CRATE_DEF_INDEX,"}, {"sha": "70563b3d267132762b31352c5fa2f6656d4442f1", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "patch": "@@ -236,7 +236,7 @@ pub fn build_impls(cx: &DocContext, did: DefId) -> Vec<clean::Item> {\n \n     cx.populated_all_crate_impls.set(true);\n \n-    for cnum in tcx.sess.cstore.crates() {\n+    for &cnum in tcx.crates().iter() {\n         for did in tcx.all_trait_implementations(cnum).iter() {\n             build_impl(cx, *did, &mut impls);\n         }"}, {"sha": "3a5786f668919cb8099145f4b697e97dcb0e3f8b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0aa647f3abaf6667dcde5b44e673e172c8a63b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fd0aa647f3abaf6667dcde5b44e673e172c8a63b", "patch": "@@ -131,7 +131,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n         }\n \n         let mut externs = Vec::new();\n-        for cnum in cx.sess().cstore.crates() {\n+        for &cnum in cx.tcx.crates().iter() {\n             externs.push((cnum, cnum.clean(cx)));\n             // Analyze doc-reachability for extern items\n             LibEmbargoVisitor::new(cx).visit_lib(cnum);"}]}