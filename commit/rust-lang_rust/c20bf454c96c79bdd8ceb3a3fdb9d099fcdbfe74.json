{"sha": "c20bf454c96c79bdd8ceb3a3fdb9d099fcdbfe74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMGJmNDU0Yzk2Yzc5YmRkOGNlYjNhM2ZkYjlkMDk5ZmNkYmZlNzQ=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-08-05T04:02:24Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-08-05T04:02:24Z"}, "message": "Add Span field to ChainItem", "tree": {"sha": "64b9e26c02e6567a8b8da9f5765a3d8dad91fe61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64b9e26c02e6567a8b8da9f5765a3d8dad91fe61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c20bf454c96c79bdd8ceb3a3fdb9d099fcdbfe74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c20bf454c96c79bdd8ceb3a3fdb9d099fcdbfe74", "html_url": "https://github.com/rust-lang/rust/commit/c20bf454c96c79bdd8ceb3a3fdb9d099fcdbfe74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c20bf454c96c79bdd8ceb3a3fdb9d099fcdbfe74/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5b36f53ae8ec42daf0c364958cc01c4f0c04063", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5b36f53ae8ec42daf0c364958cc01c4f0c04063", "html_url": "https://github.com/rust-lang/rust/commit/c5b36f53ae8ec42daf0c364958cc01c4f0c04063"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "a1308ee5fc262de494ff05c4b558e51e99bd6a3b", "filename": "src/chains.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c20bf454c96c79bdd8ceb3a3fdb9d099fcdbfe74/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20bf454c96c79bdd8ceb3a3fdb9d099fcdbfe74/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=c20bf454c96c79bdd8ceb3a3fdb9d099fcdbfe74", "patch": "@@ -101,6 +101,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n struct ChainItem {\n     kind: ChainItemKind,\n     tries: usize,\n+    span: Span,\n }\n \n // FIXME: we can't use a reference here because to convert `try!` to `?` we\n@@ -113,7 +114,6 @@ enum ChainItemKind {\n         ast::PathSegment,\n         Vec<ast::GenericArg>,\n         Vec<ptr::P<ast::Expr>>,\n-        Span,\n     ),\n     StructField(ast::Ident),\n     TupleField(ast::Ident, bool),\n@@ -137,7 +137,7 @@ impl ChainItemKind {\n         }\n     }\n \n-    fn from_ast(expr: &ast::Expr) -> ChainItemKind {\n+    fn from_ast(expr: &ast::Expr) -> (ChainItemKind, Span) {\n         match expr.node {\n             ast::ExprKind::MethodCall(ref segment, ref expressions) => {\n                 let types = if let Some(ref generic_args) = segment.args {\n@@ -149,16 +149,18 @@ impl ChainItemKind {\n                 } else {\n                     vec![]\n                 };\n-                ChainItemKind::MethodCall(segment.clone(), types, expressions.clone(), expr.span)\n+                let kind = ChainItemKind::MethodCall(segment.clone(), types, expressions.clone());\n+                (kind, expr.span)\n             }\n             ast::ExprKind::Field(ref nested, field) => {\n-                if Self::is_tup_field_access(expr) {\n+                let kind = if Self::is_tup_field_access(expr) {\n                     ChainItemKind::TupleField(field, Self::is_tup_field_access(nested))\n                 } else {\n                     ChainItemKind::StructField(field)\n-                }\n+                };\n+                (kind, expr.span)\n             }\n-            _ => ChainItemKind::Parent(expr.clone()),\n+            _ => (ChainItemKind::Parent(expr.clone()), expr.span),\n         }\n     }\n }\n@@ -168,8 +170,8 @@ impl Rewrite for ChainItem {\n         let shape = shape.sub_width(self.tries)?;\n         let rewrite = match self.kind {\n             ChainItemKind::Parent(ref expr) => expr.rewrite(context, shape)?,\n-            ChainItemKind::MethodCall(ref segment, ref types, ref exprs, span) => {\n-                Self::rewrite_method_call(segment.ident, types, exprs, span, context, shape)?\n+            ChainItemKind::MethodCall(ref segment, ref types, ref exprs) => {\n+                Self::rewrite_method_call(segment.ident, types, exprs, self.span, context, shape)?\n             }\n             ChainItemKind::StructField(ident) => format!(\".{}\", ident.name),\n             ChainItemKind::TupleField(ident, nested) => {\n@@ -181,6 +183,11 @@ impl Rewrite for ChainItem {\n }\n \n impl ChainItem {\n+    fn new(expr: &ast::Expr, tries: usize) -> ChainItem {\n+        let (kind, span) = ChainItemKind::from_ast(expr);\n+        ChainItem { kind, tries, span }\n+    }\n+\n     fn rewrite_method_call(\n         method_name: ast::Ident,\n         types: &[ast::GenericArg],\n@@ -226,10 +233,7 @@ impl Chain {\n             match subexpr.node {\n                 ast::ExprKind::Try(_) => sub_tries += 1,\n                 _ => {\n-                    children.push(ChainItem {\n-                        kind: ChainItemKind::from_ast(subexpr),\n-                        tries: sub_tries,\n-                    });\n+                    children.push(ChainItem::new(subexpr, sub_tries));\n                     sub_tries = 0;\n                 }\n             }"}]}