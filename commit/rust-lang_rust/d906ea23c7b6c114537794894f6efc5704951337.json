{"sha": "d906ea23c7b6c114537794894f6efc5704951337", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MDZlYTIzYzdiNmMxMTQ1Mzc3OTQ4OTRmNmVmYzU3MDQ5NTEzMzc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-09-18T00:59:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-18T00:59:25Z"}, "message": "Merge pull request #1968 from topecongiro/issue-1967\n\nReorder use items inside blocks", "tree": {"sha": "b274ca91d1ef28a7ea9e92b171e8a848d03bc6df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b274ca91d1ef28a7ea9e92b171e8a848d03bc6df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d906ea23c7b6c114537794894f6efc5704951337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d906ea23c7b6c114537794894f6efc5704951337", "html_url": "https://github.com/rust-lang/rust/commit/d906ea23c7b6c114537794894f6efc5704951337", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d906ea23c7b6c114537794894f6efc5704951337/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cccb7f681e255826d5b6b1d9f3c1a021fde8af01", "url": "https://api.github.com/repos/rust-lang/rust/commits/cccb7f681e255826d5b6b1d9f3c1a021fde8af01", "html_url": "https://github.com/rust-lang/rust/commit/cccb7f681e255826d5b6b1d9f3c1a021fde8af01"}, {"sha": "bb4a6bf66a6bab43662eda96eff03a658c2b717b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb4a6bf66a6bab43662eda96eff03a658c2b717b", "html_url": "https://github.com/rust-lang/rust/commit/bb4a6bf66a6bab43662eda96eff03a658c2b717b"}], "stats": {"total": 110, "additions": 83, "deletions": 27}, "files": [{"sha": "e48b534da18aa00335a3da9de86a50171969f657", "filename": "src/expr.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d906ea23c7b6c114537794894f6efc5704951337/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d906ea23c7b6c114537794894f6efc5704951337/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=d906ea23c7b6c114537794894f6efc5704951337", "patch": "@@ -34,7 +34,7 @@ use string::{rewrite_string, StringFormat};\n use types::{can_be_overflowed_type, rewrite_path, PathContext};\n use utils::{binary_search, colon_spaces, contains_skip, extra_offset, first_line_width,\n             inner_attributes, last_line_extendable, last_line_width, left_most_sub_expr, mk_sp,\n-            outer_attributes, paren_overhead, semicolon_for_stmt, stmt_expr,\n+            outer_attributes, paren_overhead, ptr_vec_to_ref_vec, semicolon_for_stmt, stmt_expr,\n             trimmed_last_line_width, wrap_str};\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n@@ -86,7 +86,7 @@ pub fn format_expr(\n             rewrite_call_with_binary_search(\n                 context,\n                 &**callee,\n-                &args.iter().map(|x| &**x).collect::<Vec<_>>()[..],\n+                &ptr_vec_to_ref_vec(&args),\n                 inner_span,\n                 shape,\n             )\n@@ -114,12 +114,9 @@ pub fn format_expr(\n             expr.span,\n             shape,\n         ),\n-        ast::ExprKind::Tup(ref items) => rewrite_tuple(\n-            context,\n-            &items.iter().map(|x| &**x).collect::<Vec<_>>()[..],\n-            expr.span,\n-            shape,\n-        ),\n+        ast::ExprKind::Tup(ref items) => {\n+            rewrite_tuple(context, &ptr_vec_to_ref_vec(&items), expr.span, shape)\n+        }\n         ast::ExprKind::If(..) |\n         ast::ExprKind::IfLet(..) |\n         ast::ExprKind::ForLoop(..) |\n@@ -2094,7 +2091,7 @@ pub fn rewrite_call(\n     rewrite_call_inner(\n         context,\n         callee,\n-        &args.iter().map(|x| &**x).collect::<Vec<_>>(),\n+        &ptr_vec_to_ref_vec(&args),\n         span,\n         shape,\n         context.config.fn_call_width(),"}, {"sha": "98a57fc112f544ca6f5f2d8b4d1a134f98cc9249", "filename": "src/imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d906ea23c7b6c114537794894f6efc5704951337/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d906ea23c7b6c114537794894f6efc5704951337/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=d906ea23c7b6c114537794894f6efc5704951337", "patch": "@@ -10,7 +10,7 @@\n \n use std::cmp::Ordering;\n \n-use syntax::{ast, ptr};\n+use syntax::ast;\n use syntax::codemap::{BytePos, Span};\n \n use {Shape, Spanned};\n@@ -216,7 +216,7 @@ fn rewrite_import(\n \n fn rewrite_imports(\n     context: &RewriteContext,\n-    use_items: &[ptr::P<ast::Item>],\n+    use_items: &[&ast::Item],\n     shape: Shape,\n     span: Span,\n ) -> Option<String> {\n@@ -275,7 +275,7 @@ fn rewrite_imports(\n }\n \n impl<'a> FmtVisitor<'a> {\n-    pub fn format_imports(&mut self, use_items: &[ptr::P<ast::Item>]) {\n+    pub fn format_imports(&mut self, use_items: &[&ast::Item]) {\n         if use_items.is_empty() {\n             return;\n         }"}, {"sha": "65bcf872bf53342dcbd5e8450beef98fbbe3ba8c", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d906ea23c7b6c114537794894f6efc5704951337/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d906ea23c7b6c114537794894f6efc5704951337/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=d906ea23c7b6c114537794894f6efc5704951337", "patch": "@@ -727,7 +727,7 @@ impl Rewrite for ast::Ty {\n             }\n             ast::TyKind::Tup(ref items) => rewrite_tuple(\n                 context,\n-                &items.iter().map(|x| &**x).collect::<Vec<_>>()[..],\n+                &::utils::ptr_vec_to_ref_vec(&items),\n                 self.span,\n                 shape,\n             ),"}, {"sha": "c0795403a0c7d782e29478715f04e40a1ea4eb7a", "filename": "src/utils.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d906ea23c7b6c114537794894f6efc5704951337/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d906ea23c7b6c114537794894f6efc5704951337/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=d906ea23c7b6c114537794894f6efc5704951337", "patch": "@@ -11,7 +11,7 @@\n use std::borrow::Cow;\n use std::cmp::Ordering;\n \n-use syntax::abi;\n+use syntax::{abi, ptr};\n use syntax::ast::{self, Attribute, MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind,\n                   Path, Visibility};\n use syntax::codemap::{BytePos, Span, NO_EXPANSION};\n@@ -97,6 +97,12 @@ pub fn format_abi(abi: abi::Abi, explicit_abi: bool) -> Cow<'static, str> {\n     }\n }\n \n+#[inline]\n+// Transform `Vec<syntax::ptr::P<T>>` into `Vec<&T>`\n+pub fn ptr_vec_to_ref_vec<T>(vec: &[ptr::P<T>]) -> Vec<&T> {\n+    vec.iter().map(|x| &**x).collect::<Vec<_>>()\n+}\n+\n #[inline]\n pub fn filter_attributes(attrs: &[ast::Attribute], style: ast::AttrStyle) -> Vec<ast::Attribute> {\n     attrs"}, {"sha": "32ab6af282e12d2194c1c1e57c393e2780c4de60", "filename": "src/visitor.rs", "status": "modified", "additions": 42, "deletions": 13, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d906ea23c7b6c114537794894f6efc5704951337/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d906ea23c7b6c114537794894f6efc5704951337/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=d906ea23c7b6c114537794894f6efc5704951337", "patch": "@@ -11,7 +11,7 @@\n use std::cmp;\n \n use strings::string_buffer::StringBuffer;\n-use syntax::{ast, ptr, visit};\n+use syntax::{ast, visit};\n use syntax::attr::HasAttrs;\n use syntax::codemap::{self, BytePos, CodeMap, Pos, Span};\n use syntax::parse::ParseSess;\n@@ -30,7 +30,7 @@ use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, Sepa\n use macros::{rewrite_macro, MacroPosition};\n use regex::Regex;\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{self, contains_skip, inner_attributes, mk_sp};\n+use utils::{self, contains_skip, inner_attributes, mk_sp, ptr_vec_to_ref_vec};\n \n fn is_use_item(item: &ast::Item) -> bool {\n     match item.node {\n@@ -152,9 +152,7 @@ impl<'a> FmtVisitor<'a> {\n             self.visit_attrs(attrs, ast::AttrStyle::Inner);\n         }\n \n-        for stmt in &b.stmts {\n-            self.visit_stmt(stmt)\n-        }\n+        self.walk_block_stmts(b);\n \n         if !b.stmts.is_empty() {\n             if let Some(expr) = utils::stmt_expr(&b.stmts[b.stmts.len() - 1]) {\n@@ -641,12 +639,7 @@ impl<'a> FmtVisitor<'a> {\n         false\n     }\n \n-    fn reorder_items<F>(\n-        &mut self,\n-        items_left: &[ptr::P<ast::Item>],\n-        is_item: &F,\n-        in_group: bool,\n-    ) -> usize\n+    fn reorder_items<F>(&mut self, items_left: &[&ast::Item], is_item: &F, in_group: bool) -> usize\n     where\n         F: Fn(&ast::Item) -> bool,\n     {\n@@ -679,8 +672,7 @@ impl<'a> FmtVisitor<'a> {\n         item_length\n     }\n \n-    fn walk_mod_items(&mut self, m: &ast::Mod) {\n-        let mut items_left: &[ptr::P<ast::Item>] = &m.items;\n+    fn walk_items(&mut self, mut items_left: &[&ast::Item]) {\n         while !items_left.is_empty() {\n             // If the next item is a `use` declaration, then extract it and any subsequent `use`s\n             // to be potentially reordered within `format_imports`. Otherwise, just format the\n@@ -711,6 +703,43 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n+    fn walk_mod_items(&mut self, m: &ast::Mod) {\n+        self.walk_items(&ptr_vec_to_ref_vec(&m.items));\n+    }\n+\n+    fn walk_stmts(&mut self, stmts: &[ast::Stmt]) {\n+        fn to_stmt_item(stmt: &ast::Stmt) -> Option<&ast::Item> {\n+            match stmt.node {\n+                ast::StmtKind::Item(ref item) => Some(&**item),\n+                _ => None,\n+            }\n+        }\n+\n+        if stmts.is_empty() {\n+            return;\n+        }\n+\n+        // Extract leading `use ...;`.\n+        let items: Vec<_> = stmts\n+            .iter()\n+            .take_while(|stmt| to_stmt_item(stmt).is_some())\n+            .filter_map(|stmt| to_stmt_item(stmt))\n+            .take_while(|item| is_use_item(item))\n+            .collect();\n+\n+        if items.is_empty() {\n+            self.visit_stmt(&stmts[0]);\n+            self.walk_stmts(&stmts[1..]);\n+        } else {\n+            self.walk_items(&items);\n+            self.walk_stmts(&stmts[items.len()..]);\n+        }\n+    }\n+\n+    fn walk_block_stmts(&mut self, b: &ast::Block) {\n+        self.walk_stmts(&b.stmts)\n+    }\n+\n     fn format_mod(\n         &mut self,\n         m: &ast::Mod,"}, {"sha": "2a40f6d069f9375ed1f6be508bf3ce34ea87b8e6", "filename": "tests/source/configs-reorder_imports-true.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d906ea23c7b6c114537794894f6efc5704951337/tests%2Fsource%2Fconfigs-reorder_imports-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d906ea23c7b6c114537794894f6efc5704951337/tests%2Fsource%2Fconfigs-reorder_imports-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-reorder_imports-true.rs?ref=d906ea23c7b6c114537794894f6efc5704951337", "patch": "@@ -5,3 +5,15 @@ use lorem;\n use ipsum;\n use dolor;\n use sit;\n+\n+fn foo() {\n+    use C;\n+    use B;\n+    use A;\n+\n+    bar();\n+\n+    use F;\n+    use E;\n+    use D;\n+}"}, {"sha": "e4ff7295fd0be4cb1c558eef995ee2623568b68e", "filename": "tests/target/configs-reorder_imports-true.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d906ea23c7b6c114537794894f6efc5704951337/tests%2Ftarget%2Fconfigs-reorder_imports-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d906ea23c7b6c114537794894f6efc5704951337/tests%2Ftarget%2Fconfigs-reorder_imports-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-reorder_imports-true.rs?ref=d906ea23c7b6c114537794894f6efc5704951337", "patch": "@@ -5,3 +5,15 @@ use dolor;\n use ipsum;\n use lorem;\n use sit;\n+\n+fn foo() {\n+    use A;\n+    use B;\n+    use C;\n+\n+    bar();\n+\n+    use D;\n+    use E;\n+    use F;\n+}"}]}