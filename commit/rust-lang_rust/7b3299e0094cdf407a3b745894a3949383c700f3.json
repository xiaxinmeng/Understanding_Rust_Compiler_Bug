{"sha": "7b3299e0094cdf407a3b745894a3949383c700f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMzI5OWUwMDk0Y2RmNDA3YTNiNzQ1ODk0YTM5NDkzODNjNzAwZjM=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-12T09:00:08Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-12T09:00:08Z"}, "message": "collapsible_if: do not show Debug display of expression\n\nInstead, pretty-print the inner block and use the same style as for\nthe \"single match => if let\" lint.", "tree": {"sha": "e64c8305cb7dfd918bbc1ddbd1112739e4626905", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e64c8305cb7dfd918bbc1ddbd1112739e4626905"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b3299e0094cdf407a3b745894a3949383c700f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3299e0094cdf407a3b745894a3949383c700f3", "html_url": "https://github.com/rust-lang/rust/commit/7b3299e0094cdf407a3b745894a3949383c700f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b3299e0094cdf407a3b745894a3949383c700f3/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcd95aec1ce4f2a328a2b1d4b2a1e44d36e02436", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcd95aec1ce4f2a328a2b1d4b2a1e44d36e02436", "html_url": "https://github.com/rust-lang/rust/commit/bcd95aec1ce4f2a328a2b1d4b2a1e44d36e02436"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "c30acc02a4ef97e77e7e6e5123f5f544e3cf4afc", "filename": "src/collapsible_if.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7b3299e0094cdf407a3b745894a3949383c700f3/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3299e0094cdf407a3b745894a3949383c700f3/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=7b3299e0094cdf407a3b745894a3949383c700f3", "patch": "@@ -18,8 +18,8 @@ use rustc::middle::def::*;\n use syntax::ast::*;\n use syntax::ptr::P;\n use syntax::codemap::{Span, Spanned, ExpnInfo};\n-use syntax::print::pprust::expr_to_string;\n-use utils::{in_macro, span_lint};\n+use syntax::print::pprust::{block_to_string, expr_to_string};\n+use utils::{in_macro, span_help_and_lint};\n \n declare_lint! {\n     pub COLLAPSIBLE_IF,\n@@ -45,11 +45,13 @@ fn check_expr_expd(cx: &Context, e: &Expr, info: Option<&ExpnInfo>) {\n     if in_macro(cx, info) { return; }\n \n     if let ExprIf(ref check, ref then, None) = e.node {\n-        if let Some(&Expr{ node: ExprIf(ref check_inner, _, None), ..}) =\n+        if let Some(&Expr{ node: ExprIf(ref check_inner, ref content, None), ..}) =\n             single_stmt_of_block(then) {\n-                span_lint(cx, COLLAPSIBLE_IF, e.span, &format!(\n-                    \"this if statement can be collapsed. Try: `if {} && {}`\\n{:?}\",\n-                    check_to_string(check), check_to_string(check_inner), e));\n+                span_help_and_lint(cx, COLLAPSIBLE_IF, e.span,\n+                    \"this if statement can be collapsed\",\n+                    &format!(\"try\\nif {} && {} {}\",\n+                             check_to_string(check), check_to_string(check_inner),\n+                             block_to_string(&*content)));\n             }\n     }\n }"}]}