{"sha": "03b258883718af549ca8b1acad3866f2151d0fd3", "node_id": "C_kwDOAAsO6NoAKDAzYjI1ODg4MzcxOGFmNTQ5Y2E4YjFhY2FkMzg2NmYyMTUxZDBmZDM", "commit": {"author": {"name": "liangyongrui", "email": "liangyongrui@kuaishou.com", "date": "2022-04-11T05:35:18Z"}, "committer": {"name": "liangyongrui", "email": "liangyongrui@kuaishou.com", "date": "2022-04-11T05:35:18Z"}, "message": "fix Layout struct member naming style", "tree": {"sha": "9b85db7365a10889d0b7a844373c4a8afa17b247", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b85db7365a10889d0b7a844373c4a8afa17b247"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03b258883718af549ca8b1acad3866f2151d0fd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03b258883718af549ca8b1acad3866f2151d0fd3", "html_url": "https://github.com/rust-lang/rust/commit/03b258883718af549ca8b1acad3866f2151d0fd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03b258883718af549ca8b1acad3866f2151d0fd3/comments", "author": {"login": "liangyongrui", "id": 24314057, "node_id": "MDQ6VXNlcjI0MzE0MDU3", "avatar_url": "https://avatars.githubusercontent.com/u/24314057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liangyongrui", "html_url": "https://github.com/liangyongrui", "followers_url": "https://api.github.com/users/liangyongrui/followers", "following_url": "https://api.github.com/users/liangyongrui/following{/other_user}", "gists_url": "https://api.github.com/users/liangyongrui/gists{/gist_id}", "starred_url": "https://api.github.com/users/liangyongrui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liangyongrui/subscriptions", "organizations_url": "https://api.github.com/users/liangyongrui/orgs", "repos_url": "https://api.github.com/users/liangyongrui/repos", "events_url": "https://api.github.com/users/liangyongrui/events{/privacy}", "received_events_url": "https://api.github.com/users/liangyongrui/received_events", "type": "User", "site_admin": false}, "committer": {"login": "liangyongrui", "id": 24314057, "node_id": "MDQ6VXNlcjI0MzE0MDU3", "avatar_url": "https://avatars.githubusercontent.com/u/24314057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liangyongrui", "html_url": "https://github.com/liangyongrui", "followers_url": "https://api.github.com/users/liangyongrui/followers", "following_url": "https://api.github.com/users/liangyongrui/following{/other_user}", "gists_url": "https://api.github.com/users/liangyongrui/gists{/gist_id}", "starred_url": "https://api.github.com/users/liangyongrui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liangyongrui/subscriptions", "organizations_url": "https://api.github.com/users/liangyongrui/orgs", "repos_url": "https://api.github.com/users/liangyongrui/repos", "events_url": "https://api.github.com/users/liangyongrui/events{/privacy}", "received_events_url": "https://api.github.com/users/liangyongrui/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d12b8578163ac67e5d088550920f7cafd435f52b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d12b8578163ac67e5d088550920f7cafd435f52b", "html_url": "https://github.com/rust-lang/rust/commit/d12b8578163ac67e5d088550920f7cafd435f52b"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "6ec178b7bd5eaea6b455bdffcc60a0e0a7931a93", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/03b258883718af549ca8b1acad3866f2151d0fd3/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b258883718af549ca8b1acad3866f2151d0fd3/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=03b258883718af549ca8b1acad3866f2151d0fd3", "patch": "@@ -30,7 +30,7 @@ const fn size_align<T>() -> (usize, usize) {\n #[lang = \"alloc_layout\"]\n pub struct Layout {\n     // size of the requested block of memory, measured in bytes.\n-    size_: usize,\n+    size: usize,\n \n     // alignment of the requested block of memory, measured in bytes.\n     // we ensure that this is always a power-of-two, because API's\n@@ -39,7 +39,7 @@ pub struct Layout {\n     //\n     // (However, we do not analogously require `align >= sizeof(void*)`,\n     //  even though that is *also* a requirement of `posix_memalign`.)\n-    align_: ValidAlign,\n+    align: ValidAlign,\n }\n \n impl Layout {\n@@ -97,7 +97,7 @@ impl Layout {\n     #[inline]\n     pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n         // SAFETY: the caller must ensure that `align` is a power of two.\n-        Layout { size_: size, align_: unsafe { ValidAlign::new_unchecked(align) } }\n+        Layout { size, align: unsafe { ValidAlign::new_unchecked(align) } }\n     }\n \n     /// The minimum size in bytes for a memory block of this layout.\n@@ -106,7 +106,7 @@ impl Layout {\n     #[must_use]\n     #[inline]\n     pub const fn size(&self) -> usize {\n-        self.size_\n+        self.size\n     }\n \n     /// The minimum byte alignment for a memory block of this layout.\n@@ -116,7 +116,7 @@ impl Layout {\n                   without modifying the layout\"]\n     #[inline]\n     pub const fn align(&self) -> usize {\n-        self.align_.as_nonzero().get()\n+        self.align.as_nonzero().get()\n     }\n \n     /// Constructs a `Layout` suitable for holding a value of type `T`."}, {"sha": "6762c0319e5cf92a561e8e69576103b7f5728fa9", "filename": "library/core/tests/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b258883718af549ca8b1acad3866f2151d0fd3/library%2Fcore%2Ftests%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b258883718af549ca8b1acad3866f2151d0fd3/library%2Fcore%2Ftests%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Falloc.rs?ref=03b258883718af549ca8b1acad3866f2151d0fd3", "patch": "@@ -17,7 +17,7 @@ fn layout_debug_shows_log2_of_alignment() {\n     // `Debug` is not stable, but here's what it does right now\n     let layout = Layout::from_size_align(24576, 8192).unwrap();\n     let s = format!(\"{:?}\", layout);\n-    assert_eq!(s, \"Layout { size_: 24576, align_: 8192 (1 << 13) }\");\n+    assert_eq!(s, \"Layout { size: 24576, align: 8192 (1 << 13) }\");\n }\n \n // Running this normally doesn't do much, but it's also run in Miri, which"}, {"sha": "138eb69971cbbcde5a1dc51da67c116cd7d610e8", "filename": "src/test/ui/consts/std/alloc.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03b258883718af549ca8b1acad3866f2151d0fd3/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b258883718af549ca8b1acad3866f2151d0fd3/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.32bit.stderr?ref=03b258883718af549ca8b1acad3866f2151d0fd3", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/alloc.rs:9:1\n    |\n LL | const LAYOUT_INVALID_ZERO: Layout = unsafe { Layout::from_size_align_unchecked(0x1000, 0x00) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .align_.0.<enum-tag>: encountered 0x00000000, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .align.0.<enum-tag>: encountered 0x00000000, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {\n@@ -13,7 +13,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/alloc.rs:13:1\n    |\n LL | const LAYOUT_INVALID_THREE: Layout = unsafe { Layout::from_size_align_unchecked(9, 3) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .align_.0.<enum-tag>: encountered 0x00000003, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .align.0.<enum-tag>: encountered 0x00000003, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 4) {"}, {"sha": "ecb08c39f3fdd7e1e43c73a356a0c1028c701627", "filename": "src/test/ui/consts/std/alloc.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03b258883718af549ca8b1acad3866f2151d0fd3/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b258883718af549ca8b1acad3866f2151d0fd3/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.64bit.stderr?ref=03b258883718af549ca8b1acad3866f2151d0fd3", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/alloc.rs:9:1\n    |\n LL | const LAYOUT_INVALID_ZERO: Layout = unsafe { Layout::from_size_align_unchecked(0x1000, 0x00) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .align_.0.<enum-tag>: encountered 0x0000000000000000, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .align.0.<enum-tag>: encountered 0x0000000000000000, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {\n@@ -13,7 +13,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/alloc.rs:13:1\n    |\n LL | const LAYOUT_INVALID_THREE: Layout = unsafe { Layout::from_size_align_unchecked(9, 3) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .align_.0.<enum-tag>: encountered 0x0000000000000003, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .align.0.<enum-tag>: encountered 0x0000000000000003, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 16, align: 8) {"}]}