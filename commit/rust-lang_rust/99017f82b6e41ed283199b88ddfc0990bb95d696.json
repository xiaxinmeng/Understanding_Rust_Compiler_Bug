{"sha": "99017f82b6e41ed283199b88ddfc0990bb95d696", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MDE3ZjgyYjZlNDFlZDI4MzE5OWI4OGRkZmMwOTkwYmI5NWQ2OTY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-31T20:45:13Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T21:29:19Z"}, "message": "use assoc types in binop traits", "tree": {"sha": "66cd460eb70ab440425b66bb81651820c1d58469", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66cd460eb70ab440425b66bb81651820c1d58469"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99017f82b6e41ed283199b88ddfc0990bb95d696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99017f82b6e41ed283199b88ddfc0990bb95d696", "html_url": "https://github.com/rust-lang/rust/commit/99017f82b6e41ed283199b88ddfc0990bb95d696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99017f82b6e41ed283199b88ddfc0990bb95d696/comments", "author": null, "committer": null, "parents": [{"sha": "7095dd00702373dd612d61e191eb57fadce00751", "url": "https://api.github.com/repos/rust-lang/rust/commits/7095dd00702373dd612d61e191eb57fadce00751", "html_url": "https://github.com/rust-lang/rust/commit/7095dd00702373dd612d61e191eb57fadce00751"}], "stats": {"total": 531, "additions": 375, "deletions": 156}, "files": [{"sha": "a2899f76dad4c213570256feb699f56494acd6ff", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -462,7 +462,9 @@ impl<T: Ord> Default for BTreeSet<T> {\n }\n \n #[stable]\n-impl<'a, 'b, T: Ord + Clone> Sub<&'b BTreeSet<T>, BTreeSet<T>> for &'a BTreeSet<T> {\n+impl<'a, 'b, T: Ord + Clone> Sub<&'b BTreeSet<T>> for &'a BTreeSet<T> {\n+    type Output = BTreeSet<T>;\n+\n     /// Returns the difference of `self` and `rhs` as a new `BTreeSet<T>`.\n     ///\n     /// # Examples\n@@ -483,7 +485,9 @@ impl<'a, 'b, T: Ord + Clone> Sub<&'b BTreeSet<T>, BTreeSet<T>> for &'a BTreeSet<\n }\n \n #[stable]\n-impl<'a, 'b, T: Ord + Clone> BitXor<&'b BTreeSet<T>, BTreeSet<T>> for &'a BTreeSet<T> {\n+impl<'a, 'b, T: Ord + Clone> BitXor<&'b BTreeSet<T>> for &'a BTreeSet<T> {\n+    type Output = BTreeSet<T>;\n+\n     /// Returns the symmetric difference of `self` and `rhs` as a new `BTreeSet<T>`.\n     ///\n     /// # Examples\n@@ -504,7 +508,9 @@ impl<'a, 'b, T: Ord + Clone> BitXor<&'b BTreeSet<T>, BTreeSet<T>> for &'a BTreeS\n }\n \n #[stable]\n-impl<'a, 'b, T: Ord + Clone> BitAnd<&'b BTreeSet<T>, BTreeSet<T>> for &'a BTreeSet<T> {\n+impl<'a, 'b, T: Ord + Clone> BitAnd<&'b BTreeSet<T>> for &'a BTreeSet<T> {\n+    type Output = BTreeSet<T>;\n+\n     /// Returns the intersection of `self` and `rhs` as a new `BTreeSet<T>`.\n     ///\n     /// # Examples\n@@ -525,7 +531,9 @@ impl<'a, 'b, T: Ord + Clone> BitAnd<&'b BTreeSet<T>, BTreeSet<T>> for &'a BTreeS\n }\n \n #[stable]\n-impl<'a, 'b, T: Ord + Clone> BitOr<&'b BTreeSet<T>, BTreeSet<T>> for &'a BTreeSet<T> {\n+impl<'a, 'b, T: Ord + Clone> BitOr<&'b BTreeSet<T>> for &'a BTreeSet<T> {\n+    type Output = BTreeSet<T>;\n+\n     /// Returns the union of `self` and `rhs` as a new `BTreeSet<T>`.\n     ///\n     /// # Examples"}, {"sha": "81e1541bea0bf70484490fc5e56baa05c812ef4e", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -185,25 +185,33 @@ impl<E:CLike> EnumSet<E> {\n     }\n }\n \n-impl<E:CLike> Sub<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n+impl<E:CLike> Sub for EnumSet<E> {\n+    type Output = EnumSet<E>;\n+\n     fn sub(self, e: EnumSet<E>) -> EnumSet<E> {\n         EnumSet {bits: self.bits & !e.bits}\n     }\n }\n \n-impl<E:CLike> BitOr<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n+impl<E:CLike> BitOr for EnumSet<E> {\n+    type Output = EnumSet<E>;\n+\n     fn bitor(self, e: EnumSet<E>) -> EnumSet<E> {\n         EnumSet {bits: self.bits | e.bits}\n     }\n }\n \n-impl<E:CLike> BitAnd<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n+impl<E:CLike> BitAnd for EnumSet<E> {\n+    type Output = EnumSet<E>;\n+\n     fn bitand(self, e: EnumSet<E>) -> EnumSet<E> {\n         EnumSet {bits: self.bits & e.bits}\n     }\n }\n \n-impl<E:CLike> BitXor<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n+impl<E:CLike> BitXor for EnumSet<E> {\n+    type Output = EnumSet<E>;\n+\n     fn bitxor(self, e: EnumSet<E>) -> EnumSet<E> {\n         EnumSet {bits: self.bits ^ e.bits}\n     }"}, {"sha": "35fa3fb55de23406a805af924092a82a7fe5dec0", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -911,7 +911,9 @@ impl<'a, S: Str> Equiv<S> for String {\n }\n \n #[experimental = \"waiting on Add stabilization\"]\n-impl<'a> Add<&'a str, String> for String {\n+impl<'a> Add<&'a str> for String {\n+    type Output = String;\n+\n     fn add(mut self, other: &str) -> String {\n         self.push_str(other);\n         self"}, {"sha": "39eb37e3dd9a1e701bc32f4082e400c14f331a2b", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -1451,7 +1451,9 @@ impl<T> AsSlice<T> for Vec<T> {\n     }\n }\n \n-impl<'a, T: Clone> Add<&'a [T], Vec<T>> for Vec<T> {\n+impl<'a, T: Clone> Add<&'a [T]> for Vec<T> {\n+    type Output = Vec<T>;\n+\n     #[inline]\n     fn add(mut self, rhs: &[T]) -> Vec<T> {\n         self.push_all(rhs);"}, {"sha": "f65857b37fb2d7ba0fe2c6b8b95e8891de4cd8f4", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -2453,7 +2453,7 @@ pub fn count<A>(start: A, step: A) -> Counter<A> {\n }\n \n #[unstable = \"trait is unstable\"]\n-impl<A: Add<A, A> + Clone> Iterator for Counter<A> {\n+impl<A: Add<Output=A> + Clone> Iterator for Counter<A> {\n     type Item = A;\n \n     #[inline]"}, {"sha": "c642ff0c2e48f9080d300d90f49003d1151afb81", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -35,7 +35,7 @@ use str::{FromStr, from_str, StrExt};\n /// Simultaneous division and remainder\n #[inline]\n #[deprecated = \"use division and remainder directly\"]\n-pub fn div_rem<T: Clone + Div<T, T> + Rem<T, T>>(x: T, y: T) -> (T, T) {\n+pub fn div_rem<T: Clone + Div<Output=T> + Rem<Output=T>>(x: T, y: T) -> (T, T) {\n     (x.clone() / y.clone(), x % y)\n }\n \n@@ -53,17 +53,17 @@ pub trait Int\n     + NumCast\n     + PartialOrd + Ord\n     + PartialEq + Eq\n-    + Add<Self,Self>\n-    + Sub<Self,Self>\n-    + Mul<Self,Self>\n-    + Div<Self,Self>\n-    + Rem<Self,Self>\n+    + Add<Output=Self>\n+    + Sub<Output=Self>\n+    + Mul<Output=Self>\n+    + Div<Output=Self>\n+    + Rem<Output=Self>\n     + Not<Self>\n-    + BitAnd<Self,Self>\n-    + BitOr<Self,Self>\n-    + BitXor<Self,Self>\n-    + Shl<uint,Self>\n-    + Shr<uint,Self>\n+    + BitAnd<Output=Self>\n+    + BitOr<Output=Self>\n+    + BitXor<Output=Self>\n+    + Shl<uint, Output=Self>\n+    + Shr<uint, Output=Self>\n {\n     /// Returns the `0` value of this integer type.\n     // FIXME (#5527): Should be an associated constant\n@@ -1246,11 +1246,11 @@ pub trait Float\n     + PartialOrd\n     + PartialEq\n     + Neg<Self>\n-    + Add<Self,Self>\n-    + Sub<Self,Self>\n-    + Mul<Self,Self>\n-    + Div<Self,Self>\n-    + Rem<Self,Self>\n+    + Add<Output=Self>\n+    + Sub<Output=Self>\n+    + Mul<Output=Self>\n+    + Div<Output=Self>\n+    + Rem<Output=Self>\n {\n     /// Returns the NaN value.\n     fn nan() -> Self;\n@@ -1719,11 +1719,11 @@ macro_rules! trait_impl {\n #[allow(deprecated)]\n pub trait Num: PartialEq + Zero + One\n              + Neg<Self>\n-             + Add<Self,Self>\n-             + Sub<Self,Self>\n-             + Mul<Self,Self>\n-             + Div<Self,Self>\n-             + Rem<Self,Self> {}\n+             + Add<Output=Self>\n+             + Sub<Output=Self>\n+             + Mul<Output=Self>\n+             + Div<Output=Self>\n+             + Rem<Output=Self> {}\n trait_impl! { Num for uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n \n #[deprecated = \"Generalised unsigned numbers are no longer supported\"]\n@@ -1737,7 +1737,7 @@ pub trait Primitive: Copy + Clone + Num + NumCast + PartialOrd {}\n trait_impl! { Primitive for uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n \n #[deprecated = \"The generic `Zero` trait will be removed soon.\"]\n-pub trait Zero: Add<Self, Self> {\n+pub trait Zero: Add<Output=Self> {\n     #[deprecated = \"Use `Int::zero()` or `Float::zero()`.\"]\n     fn zero() -> Self;\n     #[deprecated = \"Use `x == Int::zero()` or `x == Float::zero()`.\"]\n@@ -1768,7 +1768,7 @@ zero_impl! { f32, 0.0f32 }\n zero_impl! { f64, 0.0f64 }\n \n #[deprecated = \"The generic `One` trait will be removed soon.\"]\n-pub trait One: Mul<Self, Self> {\n+pub trait One: Mul<Output=Self> {\n     #[deprecated = \"Use `Int::one()` or `Float::one()`.\"]\n     fn one() -> Self;\n }"}, {"sha": "1bf22d65ffba479295aedcb2a788e18239e2959b", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 131, "deletions": 43, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -25,6 +25,8 @@\n //! demonstrates adding and subtracting two `Point`s.\n //!\n //! ```rust\n+//! #![feature(associated_types)]\n+//!\n //! use std::ops::{Add, Sub};\n //!\n //! #[deriving(Show)]\n@@ -33,13 +35,17 @@\n //!     y: int\n //! }\n //!\n-//! impl Add<Point, Point> for Point {\n+//! impl Add for Point {\n+//!     type Output = Point;\n+//!\n //!     fn add(self, other: Point) -> Point {\n //!         Point {x: self.x + other.x, y: self.y + other.y}\n //!     }\n //! }\n //!\n-//! impl Sub<Point, Point> for Point {\n+//! impl Sub for Point {\n+//!     type Output = Point;\n+//!\n //!     fn sub(self, other: Point) -> Point {\n //!         Point {x: self.x - other.x, y: self.y - other.y}\n //!     }\n@@ -93,12 +99,16 @@ pub trait Drop {\n /// calling `add`, and therefore, `main` prints `Adding!`.\n ///\n /// ```rust\n+/// #![feature(associated_types)]\n+///\n /// use std::ops::Add;\n ///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Add<Foo, Foo> for Foo {\n+/// impl Add for Foo {\n+///     type Output = Foo;\n+///\n ///     fn add(self, _rhs: Foo) -> Foo {\n ///       println!(\"Adding!\");\n ///       self\n@@ -110,14 +120,18 @@ pub trait Drop {\n /// }\n /// ```\n #[lang=\"add\"]\n-pub trait Add<RHS, Result> {\n+pub trait Add<RHS=Self> {\n+    type Output;\n+\n     /// The method for the `+` operator\n-    fn add(self, rhs: RHS) -> Result;\n+    fn add(self, rhs: RHS) -> Self::Output;\n }\n \n macro_rules! add_impl {\n     ($($t:ty)*) => ($(\n-        impl Add<$t, $t> for $t {\n+        impl Add for $t {\n+            type Output = $t;\n+\n             #[inline]\n             fn add(self, other: $t) -> $t { self + other }\n         }\n@@ -134,12 +148,16 @@ add_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// calling `sub`, and therefore, `main` prints `Subtracting!`.\n ///\n /// ```rust\n+/// #![feature(associated_types)]\n+///\n /// use std::ops::Sub;\n ///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Sub<Foo, Foo> for Foo {\n+/// impl Sub for Foo {\n+///     type Output = Foo;\n+///\n ///     fn sub(self, _rhs: Foo) -> Foo {\n ///         println!(\"Subtracting!\");\n ///         self\n@@ -151,14 +169,18 @@ add_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// }\n /// ```\n #[lang=\"sub\"]\n-pub trait Sub<RHS, Result> {\n+pub trait Sub<RHS=Self> {\n+    type Output;\n+\n     /// The method for the `-` operator\n-    fn sub(self, rhs: RHS) -> Result;\n+    fn sub(self, rhs: RHS) -> Self::Output;\n }\n \n macro_rules! sub_impl {\n     ($($t:ty)*) => ($(\n-        impl Sub<$t, $t> for $t {\n+        impl Sub for $t {\n+            type Output = $t;\n+\n             #[inline]\n             fn sub(self, other: $t) -> $t { self - other }\n         }\n@@ -175,12 +197,16 @@ sub_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// calling `mul`, and therefore, `main` prints `Multiplying!`.\n ///\n /// ```rust\n+/// #![feature(associated_types)]\n+///\n /// use std::ops::Mul;\n ///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Mul<Foo, Foo> for Foo {\n+/// impl Mul for Foo {\n+///     type Output = Foo;\n+///\n ///     fn mul(self, _rhs: Foo) -> Foo {\n ///         println!(\"Multiplying!\");\n ///         self\n@@ -192,14 +218,18 @@ sub_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// }\n /// ```\n #[lang=\"mul\"]\n-pub trait Mul<RHS, Result> {\n+pub trait Mul<RHS=Self> {\n+    type Output;\n+\n     /// The method for the `*` operator\n-    fn mul(self, rhs: RHS) -> Result;\n+    fn mul(self, rhs: RHS) -> Self::Output;\n }\n \n macro_rules! mul_impl {\n     ($($t:ty)*) => ($(\n-        impl Mul<$t, $t> for $t {\n+        impl Mul for $t {\n+            type Output = $t;\n+\n             #[inline]\n             fn mul(self, other: $t) -> $t { self * other }\n         }\n@@ -216,12 +246,16 @@ mul_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// calling `div`, and therefore, `main` prints `Dividing!`.\n ///\n /// ```\n+/// #![feature(associated_types)]\n+///\n /// use std::ops::Div;\n ///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Div<Foo, Foo> for Foo {\n+/// impl Div for Foo {\n+///     type Output = Foo;\n+///\n ///     fn div(self, _rhs: Foo) -> Foo {\n ///         println!(\"Dividing!\");\n ///         self\n@@ -233,14 +267,18 @@ mul_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// }\n /// ```\n #[lang=\"div\"]\n-pub trait Div<RHS, Result> {\n+pub trait Div<RHS=Self> {\n+    type Output;\n+\n     /// The method for the `/` operator\n-    fn div(self, rhs: RHS) -> Result;\n+    fn div(self, rhs: RHS) -> Self::Output;\n }\n \n macro_rules! div_impl {\n     ($($t:ty)*) => ($(\n-        impl Div<$t, $t> for $t {\n+        impl Div for $t {\n+            type Output = $t;\n+\n             #[inline]\n             fn div(self, other: $t) -> $t { self / other }\n         }\n@@ -257,12 +295,16 @@ div_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// calling `rem`, and therefore, `main` prints `Remainder-ing!`.\n ///\n /// ```\n+/// #![feature(associated_types)]\n+///\n /// use std::ops::Rem;\n ///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Rem<Foo, Foo> for Foo {\n+/// impl Rem for Foo {\n+///     type Output = Foo;\n+///\n ///     fn rem(self, _rhs: Foo) -> Foo {\n ///         println!(\"Remainder-ing!\");\n ///         self\n@@ -274,14 +316,18 @@ div_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// }\n /// ```\n #[lang=\"rem\"]\n-pub trait Rem<RHS, Result> {\n+pub trait Rem<RHS=Self> {\n+    type Output = Self;\n+\n     /// The method for the `%` operator\n-    fn rem(self, rhs: RHS) -> Result;\n+    fn rem(self, rhs: RHS) -> Self::Output;\n }\n \n macro_rules! rem_impl {\n     ($($t:ty)*) => ($(\n-        impl Rem<$t, $t> for $t {\n+        impl Rem for $t {\n+            type Output = $t;\n+\n             #[inline]\n             fn rem(self, other: $t) -> $t { self % other }\n         }\n@@ -290,7 +336,9 @@ macro_rules! rem_impl {\n \n macro_rules! rem_float_impl {\n     ($t:ty, $fmod:ident) => {\n-        impl Rem<$t, $t> for $t {\n+        impl Rem for $t {\n+            type Output = $t;\n+\n             #[inline]\n             fn rem(self, other: $t) -> $t {\n                 extern { fn $fmod(a: $t, b: $t) -> $t; }\n@@ -412,12 +460,16 @@ not_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `bitand`, and therefore, `main` prints `Bitwise And-ing!`.\n ///\n /// ```\n+/// #![feature(associated_types)]\n+///\n /// use std::ops::BitAnd;\n ///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl BitAnd<Foo, Foo> for Foo {\n+/// impl BitAnd for Foo {\n+///     type Output = Foo;\n+///\n ///     fn bitand(self, _rhs: Foo) -> Foo {\n ///         println!(\"Bitwise And-ing!\");\n ///         self\n@@ -429,14 +481,18 @@ not_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// }\n /// ```\n #[lang=\"bitand\"]\n-pub trait BitAnd<RHS, Result> {\n+pub trait BitAnd<RHS=Self> {\n+    type Output;\n+\n     /// The method for the `&` operator\n-    fn bitand(self, rhs: RHS) -> Result;\n+    fn bitand(self, rhs: RHS) -> Self::Output;\n }\n \n macro_rules! bitand_impl {\n     ($($t:ty)*) => ($(\n-        impl BitAnd<$t, $t> for $t {\n+        impl BitAnd for $t {\n+            type Output = $t;\n+\n             #[inline]\n             fn bitand(self, rhs: $t) -> $t { self & rhs }\n         }\n@@ -453,12 +509,16 @@ bitand_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `bitor`, and therefore, `main` prints `Bitwise Or-ing!`.\n ///\n /// ```\n+/// #![feature(associated_types)]\n+///\n /// use std::ops::BitOr;\n ///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl BitOr<Foo, Foo> for Foo {\n+/// impl BitOr for Foo {\n+///     type Output = Foo;\n+///\n ///     fn bitor(self, _rhs: Foo) -> Foo {\n ///         println!(\"Bitwise Or-ing!\");\n ///         self\n@@ -470,14 +530,18 @@ bitand_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// }\n /// ```\n #[lang=\"bitor\"]\n-pub trait BitOr<RHS, Result> {\n+pub trait BitOr<RHS=Self> {\n+    type Output;\n+\n     /// The method for the `|` operator\n-    fn bitor(self, rhs: RHS) -> Result;\n+    fn bitor(self, rhs: RHS) -> Self::Output;\n }\n \n macro_rules! bitor_impl {\n     ($($t:ty)*) => ($(\n-        impl BitOr<$t,$t> for $t {\n+        impl BitOr for $t {\n+            type Output = $t;\n+\n             #[inline]\n             fn bitor(self, rhs: $t) -> $t { self | rhs }\n         }\n@@ -494,12 +558,16 @@ bitor_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `bitxor`, and therefore, `main` prints `Bitwise Xor-ing!`.\n ///\n /// ```\n+/// #![feature(associated_types)]\n+///\n /// use std::ops::BitXor;\n ///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl BitXor<Foo, Foo> for Foo {\n+/// impl BitXor for Foo {\n+///     type Output = Foo;\n+///\n ///     fn bitxor(self, _rhs: Foo) -> Foo {\n ///         println!(\"Bitwise Xor-ing!\");\n ///         self\n@@ -511,14 +579,18 @@ bitor_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// }\n /// ```\n #[lang=\"bitxor\"]\n-pub trait BitXor<RHS, Result> {\n+pub trait BitXor<RHS=Self> {\n+    type Output;\n+\n     /// The method for the `^` operator\n-    fn bitxor(self, rhs: RHS) -> Result;\n+    fn bitxor(self, rhs: RHS) -> Self::Output;\n }\n \n macro_rules! bitxor_impl {\n     ($($t:ty)*) => ($(\n-        impl BitXor<$t, $t> for $t {\n+        impl BitXor for $t {\n+            type Output = $t;\n+\n             #[inline]\n             fn bitxor(self, other: $t) -> $t { self ^ other }\n         }\n@@ -535,12 +607,16 @@ bitxor_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `shl`, and therefore, `main` prints `Shifting left!`.\n ///\n /// ```\n+/// #![feature(associated_types)]\n+///\n /// use std::ops::Shl;\n ///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Shl<Foo, Foo> for Foo {\n+/// impl Shl<Foo> for Foo {\n+///     type Output = Foo;\n+///\n ///     fn shl(self, _rhs: Foo) -> Foo {\n ///         println!(\"Shifting left!\");\n ///         self\n@@ -552,14 +628,18 @@ bitxor_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// }\n /// ```\n #[lang=\"shl\"]\n-pub trait Shl<RHS, Result> {\n+pub trait Shl<RHS> {\n+    type Output;\n+\n     /// The method for the `<<` operator\n-    fn shl(self, rhs: RHS) -> Result;\n+    fn shl(self, rhs: RHS) -> Self::Output;\n }\n \n macro_rules! shl_impl {\n     ($($t:ty)*) => ($(\n-        impl Shl<uint, $t> for $t {\n+        impl Shl<uint> for $t {\n+            type Output = $t;\n+\n             #[inline]\n             fn shl(self, other: uint) -> $t {\n                 self << other\n@@ -578,12 +658,16 @@ shl_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `shr`, and therefore, `main` prints `Shifting right!`.\n ///\n /// ```\n+/// #![feature(associated_types)]\n+///\n /// use std::ops::Shr;\n ///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n-/// impl Shr<Foo, Foo> for Foo {\n+/// impl Shr<Foo> for Foo {\n+///     type Output = Foo;\n+///\n ///     fn shr(self, _rhs: Foo) -> Foo {\n ///         println!(\"Shifting right!\");\n ///         self\n@@ -595,14 +679,18 @@ shl_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// }\n /// ```\n #[lang=\"shr\"]\n-pub trait Shr<RHS, Result> {\n+pub trait Shr<RHS> {\n+    type Output;\n+\n     /// The method for the `>>` operator\n-    fn shr(self, rhs: RHS) -> Result;\n+    fn shr(self, rhs: RHS) -> Self::Output;\n }\n \n macro_rules! shr_impl {\n     ($($t:ty)*) => ($(\n-        impl Shr<uint, $t> for $t {\n+        impl Shr<uint> for $t {\n+            type Output = $t;\n+\n             #[inline]\n             fn shr(self, other: uint) -> $t { self >> other }\n         }"}, {"sha": "274b4cee3ba1282c948d62f7715d2672a2bf9b6e", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -31,9 +31,9 @@ mod uint;\n /// Helper function for testing numeric operations\n pub fn test_num<T>(ten: T, two: T) where\n     T: PartialEq + NumCast\n-     + Add<T, T> + Sub<T, T>\n-     + Mul<T, T> + Div<T, T>\n-     + Rem<T, T> + Show\n+     + Add<Output=T> + Sub<Output=T>\n+     + Mul<Output=T> + Div<Output=T>\n+     + Rem<Output=T> + Show\n      + Copy\n {\n     assert_eq!(ten.add(two),  cast(12i).unwrap());"}, {"sha": "884255f2127501676edd42b45be7df6b85995f4a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -3240,19 +3240,25 @@ impl TypeContents {\n     }\n }\n \n-impl ops::BitOr<TypeContents,TypeContents> for TypeContents {\n+impl ops::BitOr for TypeContents {\n+    type Output = TypeContents;\n+\n     fn bitor(self, other: TypeContents) -> TypeContents {\n         TypeContents {bits: self.bits | other.bits}\n     }\n }\n \n-impl ops::BitAnd<TypeContents, TypeContents> for TypeContents {\n+impl ops::BitAnd for TypeContents {\n+    type Output = TypeContents;\n+\n     fn bitand(self, other: TypeContents) -> TypeContents {\n         TypeContents {bits: self.bits & other.bits}\n     }\n }\n \n-impl ops::Sub<TypeContents, TypeContents> for TypeContents {\n+impl ops::Sub for TypeContents {\n+    type Output = TypeContents;\n+\n     fn sub(self, other: TypeContents) -> TypeContents {\n         TypeContents {bits: self.bits & !other.bits}\n     }"}, {"sha": "f0feb8de1cefa87ccd05327c75de00cc37bd43d4", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -21,6 +21,7 @@\n #![feature(globs, macro_rules, phase, slicing_syntax)]\n #![feature(unboxed_closures)]\n #![feature(old_orphan_check)]\n+#![feature(associated_types)]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "0d6d7a47c857975758f517089bf91878f487f663", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -41,7 +41,9 @@ pub struct Counts {\n     pub unmarked: uint,\n }\n \n-impl Add<Counts, Counts> for Counts {\n+impl Add for Counts {\n+    type Output = Counts;\n+\n     fn add(self, other: Counts) -> Counts {\n         Counts {\n             deprecated:   self.deprecated   + other.deprecated,"}, {"sha": "a9c74823dde9e99d3fbc32fb91ca72b0bf761bb1", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -209,31 +209,39 @@ macro_rules! bitflags {\n             }\n         }\n \n-        impl ::std::ops::BitOr<$BitFlags, $BitFlags> for $BitFlags {\n+        impl ::std::ops::BitOr for $BitFlags {\n+            type Output = $BitFlags;\n+\n             /// Returns the union of the two sets of flags.\n             #[inline]\n             fn bitor(self, other: $BitFlags) -> $BitFlags {\n                 $BitFlags { bits: self.bits | other.bits }\n             }\n         }\n \n-        impl ::std::ops::BitXor<$BitFlags, $BitFlags> for $BitFlags {\n+        impl ::std::ops::BitXor for $BitFlags {\n+            type Output = $BitFlags;\n+\n             /// Returns the left flags, but with all the right flags toggled.\n             #[inline]\n             fn bitxor(self, other: $BitFlags) -> $BitFlags {\n                 $BitFlags { bits: self.bits ^ other.bits }\n             }\n         }\n \n-        impl ::std::ops::BitAnd<$BitFlags, $BitFlags> for $BitFlags {\n+        impl ::std::ops::BitAnd for $BitFlags {\n+            type Output = $BitFlags;\n+\n             /// Returns the intersection between the two sets of flags.\n             #[inline]\n             fn bitand(self, other: $BitFlags) -> $BitFlags {\n                 $BitFlags { bits: self.bits & other.bits }\n             }\n         }\n \n-        impl ::std::ops::Sub<$BitFlags, $BitFlags> for $BitFlags {\n+        impl ::std::ops::Sub for $BitFlags {\n+            type Output = $BitFlags;\n+\n             /// Returns the set difference of the two sets of flags.\n             #[inline]\n             fn sub(self, other: $BitFlags) -> $BitFlags {"}, {"sha": "4c6a74a78d5106b9a64bea3f1b84d5e33f35b0d4", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -630,7 +630,9 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Default for HashSet<T, H> {\n \n #[stable]\n impl<'a, 'b, T: Eq + Hash<S> + Clone, S, H: Hasher<S> + Default>\n-BitOr<&'b HashSet<T, H>, HashSet<T, H>> for &'a HashSet<T, H> {\n+BitOr<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n+    type Output = HashSet<T, H>;\n+\n     /// Returns the union of `self` and `rhs` as a new `HashSet<T, H>`.\n     ///\n     /// # Examples\n@@ -658,7 +660,9 @@ BitOr<&'b HashSet<T, H>, HashSet<T, H>> for &'a HashSet<T, H> {\n \n #[stable]\n impl<'a, 'b, T: Eq + Hash<S> + Clone, S, H: Hasher<S> + Default>\n-BitAnd<&'b HashSet<T, H>, HashSet<T, H>> for &'a HashSet<T, H> {\n+BitAnd<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n+    type Output = HashSet<T, H>;\n+\n     /// Returns the intersection of `self` and `rhs` as a new `HashSet<T, H>`.\n     ///\n     /// # Examples\n@@ -686,7 +690,9 @@ BitAnd<&'b HashSet<T, H>, HashSet<T, H>> for &'a HashSet<T, H> {\n \n #[stable]\n impl<'a, 'b, T: Eq + Hash<S> + Clone, S, H: Hasher<S> + Default>\n-BitXor<&'b HashSet<T, H>, HashSet<T, H>> for &'a HashSet<T, H> {\n+BitXor<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n+    type Output = HashSet<T, H>;\n+\n     /// Returns the symmetric difference of `self` and `rhs` as a new `HashSet<T, H>`.\n     ///\n     /// # Examples\n@@ -714,7 +720,9 @@ BitXor<&'b HashSet<T, H>, HashSet<T, H>> for &'a HashSet<T, H> {\n \n #[stable]\n impl<'a, 'b, T: Eq + Hash<S> + Clone, S, H: Hasher<S> + Default>\n-Sub<&'b HashSet<T, H>, HashSet<T, H>> for &'a HashSet<T, H> {\n+Sub<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n+    type Output = HashSet<T, H>;\n+\n     /// Returns the difference of `self` and `rhs` as a new `HashSet<T, H>`.\n     ///\n     /// # Examples"}, {"sha": "007d89a942dcca5ca29528e69639fbd63a848818", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -127,9 +127,9 @@ pub fn abs_sub<T: FloatMath>(x: T, y: T) -> T {\n #[cfg(test)]\n pub fn test_num<T>(ten: T, two: T) where\n     T: PartialEq + NumCast\n-     + Add<T, T> + Sub<T, T>\n-     + Mul<T, T> + Div<T, T>\n-     + Rem<T, T> + Show\n+     + Add<Output=T> + Sub<Output=T>\n+     + Mul<Output=T> + Div<Output=T>\n+     + Rem<Output=T> + Show\n      + Copy\n {\n     assert_eq!(ten.add(two),  cast(12i).unwrap());"}, {"sha": "1e148105cc62759de859396de08a13092f900093", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -273,7 +273,9 @@ impl Neg<Duration> for Duration {\n     }\n }\n \n-impl Add<Duration, Duration> for Duration {\n+impl Add for Duration {\n+    type Output = Duration;\n+\n     fn add(self, rhs: Duration) -> Duration {\n         let mut secs = self.secs + rhs.secs;\n         let mut nanos = self.nanos + rhs.nanos;\n@@ -285,7 +287,9 @@ impl Add<Duration, Duration> for Duration {\n     }\n }\n \n-impl Sub<Duration, Duration> for Duration {\n+impl Sub for Duration {\n+    type Output = Duration;\n+\n     fn sub(self, rhs: Duration) -> Duration {\n         let mut secs = self.secs - rhs.secs;\n         let mut nanos = self.nanos - rhs.nanos;\n@@ -297,7 +301,9 @@ impl Sub<Duration, Duration> for Duration {\n     }\n }\n \n-impl Mul<i32, Duration> for Duration {\n+impl Mul<i32> for Duration {\n+    type Output = Duration;\n+\n     fn mul(self, rhs: i32) -> Duration {\n         // Multiply nanoseconds as i64, because it cannot overflow that way.\n         let total_nanos = self.nanos as i64 * rhs as i64;\n@@ -307,7 +313,9 @@ impl Mul<i32, Duration> for Duration {\n     }\n }\n \n-impl Div<i32, Duration> for Duration {\n+impl Div<i32> for Duration {\n+    type Output = Duration;\n+\n     fn div(self, rhs: i32) -> Duration {\n         let mut secs = self.secs / rhs as i64;\n         let carry = self.secs - secs * rhs as i64;"}, {"sha": "eb011faa55dc8e6636da5c47b4ade2fcfe2e6020", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -53,13 +53,17 @@ impl Pos for BytePos {\n     fn to_uint(&self) -> uint { let BytePos(n) = *self; n as uint }\n }\n \n-impl Add<BytePos, BytePos> for BytePos {\n+impl Add for BytePos {\n+    type Output = BytePos;\n+\n     fn add(self, rhs: BytePos) -> BytePos {\n         BytePos((self.to_uint() + rhs.to_uint()) as u32)\n     }\n }\n \n-impl Sub<BytePos, BytePos> for BytePos {\n+impl Sub for BytePos {\n+    type Output = BytePos;\n+\n     fn sub(self, rhs: BytePos) -> BytePos {\n         BytePos((self.to_uint() - rhs.to_uint()) as u32)\n     }\n@@ -70,13 +74,17 @@ impl Pos for CharPos {\n     fn to_uint(&self) -> uint { let CharPos(n) = *self; n }\n }\n \n-impl Add<CharPos, CharPos> for CharPos {\n+impl Add for CharPos {\n+    type Output = CharPos;\n+\n     fn add(self, rhs: CharPos) -> CharPos {\n         CharPos(self.to_uint() + rhs.to_uint())\n     }\n }\n \n-impl Sub<CharPos, CharPos> for CharPos {\n+impl Sub for CharPos {\n+    type Output = CharPos;\n+\n     fn sub(self, rhs: CharPos) -> CharPos {\n         CharPos(self.to_uint() - rhs.to_uint())\n     }"}, {"sha": "8af5e952e9a11096ea416ff75506bd1440290fcc", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -106,7 +106,9 @@ enum LockstepIterSize {\n     LisContradiction(String),\n }\n \n-impl Add<LockstepIterSize, LockstepIterSize> for LockstepIterSize {\n+impl Add for LockstepIterSize {\n+    type Output = LockstepIterSize;\n+\n     fn add(self, other: LockstepIterSize) -> LockstepIterSize {\n         match self {\n             LisUnconstrained => other,"}, {"sha": "7603d84848c9f06abda455d721ee568b24cce4d6", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -24,6 +24,8 @@\n #![allow(unknown_features)]\n #![feature(phase, globs)]\n #![feature(old_orphan_check)]\n+#![feature(associated_types)]\n+#![feature(default_type_params)]\n \n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n \n@@ -100,7 +102,9 @@ impl Timespec {\n     }\n }\n \n-impl Add<Duration, Timespec> for Timespec {\n+impl Add<Duration> for Timespec {\n+    type Output = Timespec;\n+\n     fn add(self, other: Duration) -> Timespec {\n         let d_sec = other.num_seconds();\n         // It is safe to unwrap the nanoseconds, because there cannot be\n@@ -120,7 +124,9 @@ impl Add<Duration, Timespec> for Timespec {\n     }\n }\n \n-impl Sub<Timespec, Duration> for Timespec {\n+impl Sub for Timespec {\n+    type Output = Duration;\n+\n     fn sub(self, other: Timespec) -> Duration {\n         let sec = self.sec - other.sec;\n         let nsec = self.nsec - other.nsec;"}, {"sha": "7394373e9229bb61d5b58befd0b4ea96d590dc51", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -8,26 +8,34 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n use std::cmp::PartialEq;\n use std::ops::{Add, Sub, Mul};\n \n-pub trait MyNum : Add<Self,Self> + Sub<Self,Self> + Mul<Self,Self> + PartialEq + Clone {\n+pub trait MyNum : Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + PartialEq + Clone {\n }\n \n #[derive(Clone, Show)]\n pub struct MyInt {\n     pub val: int\n }\n \n-impl Add<MyInt, MyInt> for MyInt {\n+impl Add for MyInt {\n+    type Output = MyInt;\n+\n     fn add(self, other: MyInt) -> MyInt { mi(self.val + other.val) }\n }\n \n-impl Sub<MyInt, MyInt> for MyInt {\n+impl Sub for MyInt {\n+    type Output = MyInt;\n+\n     fn sub(self, other: MyInt) -> MyInt { mi(self.val - other.val) }\n }\n \n-impl Mul<MyInt, MyInt> for MyInt {\n+impl Mul for MyInt {\n+    type Output = MyInt;\n+\n     fn mul(self, other: MyInt) -> MyInt { mi(self.val * other.val) }\n }\n "}, {"sha": "4bc45caa170e4eee4e1c46d19db61bd01ffa7c7a", "filename": "src/test/auxiliary/unboxed-closures-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -21,7 +21,7 @@ pub fn has_closures() -> uint {\n     f() + g()\n }\n \n-pub fn has_generic_closures<T: Add<T,T> + Copy>(x: T, y: T) -> T {\n+pub fn has_generic_closures<T: Add<Output=T> + Copy>(x: T, y: T) -> T {\n     let mut f = move |&mut:| x;\n     let g = |:| y;\n     f() + g()"}, {"sha": "930000e5f0c3746f3733440e8d301219305e5a44", "filename": "src/test/compile-fail/binop-consume-args.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Fcompile-fail%2Fbinop-consume-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Fcompile-fail%2Fbinop-consume-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-consume-args.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -10,63 +10,65 @@\n \n // Test that binary operators consume their arguments\n \n+#![feature(associated_types, default_type_params)]\n+\n use std::ops::{Add, Sub, Mul, Div, Rem, BitAnd, BitXor, BitOr, Shl, Shr};\n \n-fn add<A: Add<B, ()>, B>(lhs: A, rhs: B) {\n+fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n     lhs + rhs;\n     drop(lhs);  //~ ERROR use of moved value: `lhs`\n     drop(rhs);  //~ ERROR use of moved value: `rhs`\n }\n \n-fn sub<A: Sub<B, ()>, B>(lhs: A, rhs: B) {\n+fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n     lhs - rhs;\n     drop(lhs);  //~ ERROR use of moved value: `lhs`\n     drop(rhs);  //~ ERROR use of moved value: `rhs`\n }\n \n-fn mul<A: Mul<B, ()>, B>(lhs: A, rhs: B) {\n+fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n     lhs * rhs;\n     drop(lhs);  //~ ERROR use of moved value: `lhs`\n     drop(rhs);  //~ ERROR use of moved value: `rhs`\n }\n \n-fn div<A: Div<B, ()>, B>(lhs: A, rhs: B) {\n+fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n     lhs / rhs;\n     drop(lhs);  //~ ERROR use of moved value: `lhs`\n     drop(rhs);  //~ ERROR use of moved value: `rhs`\n }\n \n-fn rem<A: Rem<B, ()>, B>(lhs: A, rhs: B) {\n+fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n     lhs % rhs;\n     drop(lhs);  //~ ERROR use of moved value: `lhs`\n     drop(rhs);  //~ ERROR use of moved value: `rhs`\n }\n \n-fn bitand<A: BitAnd<B, ()>, B>(lhs: A, rhs: B) {\n+fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n     lhs & rhs;\n     drop(lhs);  //~ ERROR use of moved value: `lhs`\n     drop(rhs);  //~ ERROR use of moved value: `rhs`\n }\n \n-fn bitor<A: BitOr<B, ()>, B>(lhs: A, rhs: B) {\n+fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n     lhs | rhs;\n     drop(lhs);  //~ ERROR use of moved value: `lhs`\n     drop(rhs);  //~ ERROR use of moved value: `rhs`\n }\n \n-fn bitxor<A: BitXor<B, ()>, B>(lhs: A, rhs: B) {\n+fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n     lhs ^ rhs;\n     drop(lhs);  //~ ERROR use of moved value: `lhs`\n     drop(rhs);  //~ ERROR use of moved value: `rhs`\n }\n \n-fn shl<A: Shl<B, ()>, B>(lhs: A, rhs: B) {\n+fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n     lhs << rhs;\n     drop(lhs);  //~ ERROR use of moved value: `lhs`\n     drop(rhs);  //~ ERROR use of moved value: `rhs`\n }\n \n-fn shr<A: Shr<B, ()>, B>(lhs: A, rhs: B) {\n+fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n     lhs >> rhs;\n     drop(lhs);  //~ ERROR use of moved value: `lhs`\n     drop(rhs);  //~ ERROR use of moved value: `rhs`"}, {"sha": "e51ca6a70f28b9739c4414b0bf2037aaafa61740", "filename": "src/test/compile-fail/binop-move-semantics.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -10,21 +10,23 @@\n \n // Test that move restrictions are enforced on overloaded binary operations\n \n+#![feature(associated_types, default_type_params)]\n+\n use std::ops::Add;\n \n-fn double_move<T: Add<T, ()>>(x: T) {\n+fn double_move<T: Add<Output=()>>(x: T) {\n     x\n     +\n     x;  //~ ERROR: use of moved value\n }\n \n-fn move_then_borrow<T: Add<T, ()> + Clone>(x: T) {\n+fn move_then_borrow<T: Add<Output=()> + Clone>(x: T) {\n     x\n     +\n     x.clone();  //~ ERROR: use of moved value\n }\n \n-fn move_borrowed<T: Add<T, ()>>(x: T, mut y: T) {\n+fn move_borrowed<T: Add<Output=()>>(x: T, mut y: T) {\n     let m = &x;\n     let n = &mut y;\n \n@@ -33,7 +35,7 @@ fn move_borrowed<T: Add<T, ()>>(x: T, mut y: T) {\n     y;  //~ ERROR: cannot move out of `y` because it is borrowed\n }\n \n-fn illegal_dereference<T: Add<T, ()>>(mut x: T, y: T) {\n+fn illegal_dereference<T: Add<Output=()>>(mut x: T, y: T) {\n     let m = &mut x;\n     let n = &y;\n \n@@ -44,11 +46,15 @@ fn illegal_dereference<T: Add<T, ()>>(mut x: T, y: T) {\n \n struct Foo;\n \n-impl<'a, 'b> Add<&'b Foo, ()> for &'a mut Foo {\n+impl<'a, 'b> Add<&'b Foo> for &'a mut Foo {\n+    type Output = ();\n+\n     fn add(self, _: &Foo) {}\n }\n \n-impl<'a, 'b> Add<&'b mut Foo, ()> for &'a Foo {\n+impl<'a, 'b> Add<&'b mut Foo> for &'a Foo {\n+    type Output = ();\n+\n     fn add(self, _: &mut Foo) {}\n }\n "}, {"sha": "141dd8905bece30cd99e8db1ecc7726d8e18598c", "filename": "src/test/compile-fail/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -8,12 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n use std::ops::Add;\n \n #[derive(Clone)]\n struct foo(Box<uint>);\n \n-impl Add<foo, foo> for foo {\n+impl Add for foo {\n+    type Output = foo;\n+\n     fn add(self, f: foo) -> foo {\n         let foo(box i) = self;\n         let foo(box j) = f;"}, {"sha": "e0a961e5cc5fcd4ac7f2e4fa29fbc6bd4f1d2679", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types, default_type_params)]\n+\n use std::ops::Add;\n \n #[derive(Copy)]\n@@ -16,7 +18,9 @@ struct Point {\n     y: int,\n }\n \n-impl Add<int, int> for Point {\n+impl Add<int> for Point {\n+    type Output = int;\n+\n     fn add(self, z: int) -> int {\n         self.x + self.y + z\n     }"}, {"sha": "b688cafb67459aab05c1701e8eb6968083c9c430", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n trait vec_monad<A> {\n     fn bind<B>(&self, f: |A| -> Vec<B> );\n }"}, {"sha": "7aa6ead89d7e072c87de0ba9b2c7d9fd47dd1c48", "filename": "src/test/compile-fail/wrong-mul-method-signature.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -13,14 +13,18 @@\n // (In this case the mul method should take &f64 and not f64)\n // See: #11450\n \n+#![feature(associated_types, default_type_params)]\n+\n use std::ops::Mul;\n \n struct Vec1 {\n     x: f64\n }\n \n // Expecting value in input signature\n-impl Mul<f64, Vec1> for Vec1 {\n+impl Mul<f64> for Vec1 {\n+    type Output = Vec1;\n+\n     fn mul(self, s: &f64) -> Vec1 {\n     //~^ ERROR: method `mul` has an incompatible type for trait: expected f64, found &-ptr\n         Vec1 {\n@@ -35,7 +39,9 @@ struct Vec2 {\n }\n \n // Wrong type parameter ordering\n-impl Mul<Vec2, f64> for Vec2 {\n+impl Mul<Vec2> for Vec2 {\n+    type Output = f64;\n+\n     fn mul(self, s: f64) -> Vec2 {\n     //~^ ERROR: method `mul` has an incompatible type for trait: expected struct Vec2, found f64\n         Vec2 {\n@@ -52,7 +58,9 @@ struct Vec3 {\n }\n \n // Unexpected return type\n-impl Mul<f64, i32> for Vec3 {\n+impl Mul<f64> for Vec3 {\n+    type Output = i32;\n+\n     fn mul(self, s: f64) -> f64 {\n     //~^ ERROR: method `mul` has an incompatible type for trait: expected i32, found f64\n         s"}, {"sha": "442c330b277863adb57427343e3287b6d68d415f", "filename": "src/test/run-pass/deriving-zero.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-zero.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -8,13 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::ops::Add;\n+#![feature(associated_types)]\n+\n use std::num::Zero;\n+use std::ops::Add;\n \n #[derive(Zero)]\n struct Vector2<T>(T, T);\n \n-impl<T: Add<T, T>> Add<Vector2<T>, Vector2<T>> for Vector2<T> {\n+impl<T: Add<Output=T>> Add for Vector2<T> {\n+    type Output = Vector2<T>;\n+\n     fn add(self, other: Vector2<T>) -> Vector2<T> {\n         match (self, other) {\n             (Vector2(x0, y0), Vector2(x1, y1)) => {\n@@ -29,7 +33,9 @@ struct Vector3<T> {\n     x: T, y: T, z: T,\n }\n \n-impl<T: Add<T, T>> Add<Vector3<T>, Vector3<T>> for Vector3<T> {\n+impl<T: Add<Output=T>> Add for Vector3<T> {\n+    type Output = Vector3<T>;\n+\n     fn add(self, other: Vector3<T>) -> Vector3<T> {\n         Vector3 {\n             x: self.x + other.x,\n@@ -46,7 +52,9 @@ struct Matrix3x2<T> {\n     z: Vector2<T>,\n }\n \n-impl<T: Add<T, T>> Add<Matrix3x2<T>, Matrix3x2<T>> for Matrix3x2<T> {\n+impl<T: Add<Output=T>> Add for Matrix3x2<T> {\n+    type Output = Matrix3x2<T>;\n+\n     fn add(self, other: Matrix3x2<T>) -> Matrix3x2<T> {\n         Matrix3x2 {\n             x: self.x + other.x,"}, {"sha": "741f168482da2b11fd589af018de961b5a4d2e2a", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -10,7 +10,7 @@\n \n // If `Mul` used an associated type for its output, this test would\n // work more smoothly.\n-#![feature(old_orphan_check)]\n+#![feature(associated_types, default_type_params, old_orphan_check)]\n \n use std::ops::Mul;\n \n@@ -33,7 +33,9 @@ impl Vec2 {\n trait RhsOfVec2Mul<Result> { fn mul_vec2_by(&self, lhs: &Vec2) -> Result; }\n \n // Vec2's implementation of Mul \"from the other side\" using the above trait\n-impl<Res, Rhs: RhsOfVec2Mul<Res>> Mul<Rhs,Res> for Vec2 {\n+impl<Res, Rhs: RhsOfVec2Mul<Res>> Mul<Rhs> for Vec2 {\n+    type Output = Res;\n+\n     fn mul(self, rhs: Rhs) -> Res { rhs.mul_vec2_by(&self) }\n }\n "}, {"sha": "180bd292f8433152f5ae77367bb1ba45954d2321", "filename": "src/test/run-pass/issue-3979-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -15,7 +15,7 @@ trait Positioned<S> {\n   fn X(&self) -> S;\n }\n \n-trait Movable<S: Add<S, S>>: Positioned<S> {\n+trait Movable<S: Add<Output=S>>: Positioned<S> {\n   fn translate(&mut self, dx: S) {\n     let x = self.X() + dx;\n     self.SetX(x);"}, {"sha": "882ca00f1dfa6b204af64d32349a7aa35f4854f7", "filename": "src/test/run-pass/issue-7784.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7784.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -12,7 +12,7 @@\n \n use std::ops::Add;\n \n-fn foo<T: Add<T, T> + Clone>([x, y, z]: [T; 3]) -> (T, T, T) {\n+fn foo<T: Add<Output=T> + Clone>([x, y, z]: [T; 3]) -> (T, T, T) {\n     (x.clone(), x.clone() + y.clone(), x + y + z)\n }\n fn bar(a: &'static str, b: &'static str) -> [&'static str; 4] {"}, {"sha": "5999840091967a27f825d80ccf825efdb02329ca", "filename": "src/test/run-pass/operator-multidispatch.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -11,6 +11,8 @@\n // Test that we can overload the `+` operator for points so that two\n // points can be added, and a point can be added to an integer.\n \n+#![feature(associated_types, default_type_params)]\n+\n use std::ops;\n \n #[derive(Show,PartialEq,Eq)]\n@@ -19,13 +21,17 @@ struct Point {\n     y: int\n }\n \n-impl ops::Add<Point,Point> for Point {\n+impl ops::Add for Point {\n+    type Output = Point;\n+\n     fn add(self, other: Point) -> Point {\n         Point {x: self.x + other.x, y: self.y + other.y}\n     }\n }\n \n-impl ops::Add<int,Point> for Point {\n+impl ops::Add<int> for Point {\n+    type Output = Point;\n+\n     fn add(self, other: int) -> Point {\n         Point {x: self.x + other,\n                y: self.y + other}"}, {"sha": "b23133c53daa5f37e0ad656ea292e53d19c69eaf", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n \n use std::cmp;\n use std::ops;\n@@ -18,13 +19,17 @@ struct Point {\n     y: int\n }\n \n-impl ops::Add<Point,Point> for Point {\n+impl ops::Add for Point {\n+    type Output = Point;\n+\n     fn add(self, other: Point) -> Point {\n         Point {x: self.x + other.x, y: self.y + other.y}\n     }\n }\n \n-impl ops::Sub<Point,Point> for Point {\n+impl ops::Sub for Point {\n+    type Output = Point;\n+\n     fn sub(self, other: Point) -> Point {\n         Point {x: self.x - other.x, y: self.y - other.y}\n     }"}, {"sha": "b3c9ec3dc934e3bee2b9a1bd409d9b5262f2f94a", "filename": "src/test/run-pass/overloaded-calls-param-vtables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -10,14 +10,14 @@\n \n // Tests that nested vtables work with overloaded calls.\n \n-#![feature(unboxed_closures)]\n+#![feature(default_type_params, unboxed_closures)]\n \n use std::ops::Fn;\n use std::ops::Add;\n \n struct G<A>;\n \n-impl<'a, A: Add<int, int>> Fn<(A,), int> for G<A> {\n+impl<'a, A: Add<int, Output=int>> Fn<(A,), int> for G<A> {\n     extern \"rust-call\" fn call(&self, (arg,): (A,)) -> int {\n         arg.add(1)\n     }"}, {"sha": "ceb6b790426812b150d8538264946376991a6e5d", "filename": "src/test/run-pass/simd-generics.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-generics.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -9,19 +9,21 @@\n // except according to those terms.\n \n \n-#![feature(simd)]\n+#![feature(associated_types, simd)]\n \n use std::ops;\n \n #[simd] struct f32x4(f32, f32, f32, f32);\n \n impl Copy for f32x4 {}\n \n-fn add<T: ops::Add<T, T>>(lhs: T, rhs: T) -> T {\n+fn add<T: ops::Add<Output=T>>(lhs: T, rhs: T) -> T {\n     lhs + rhs\n }\n \n-impl ops::Add<f32x4, f32x4> for f32x4 {\n+impl ops::Add for f32x4 {\n+    type Output = f32x4;\n+\n     fn add(self, rhs: f32x4) -> f32x4 {\n         self + rhs\n     }"}, {"sha": "f31d9ca186f1efc9bca66703955a433b2359991a", "filename": "src/test/run-pass/supertrait-default-generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Fsupertrait-default-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Fsupertrait-default-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsupertrait-default-generics.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -17,7 +17,7 @@ trait Positioned<S> {\n   fn X(&self) -> S;\n }\n \n-trait Movable<S: Add<S, S>>: Positioned<S> {\n+trait Movable<S: Add<Output=S>>: Positioned<S> {\n   fn translate(&mut self, dx: S) {\n     let x = self.X() + dx;\n     self.SetX(x);\n@@ -35,7 +35,7 @@ impl<S: Clone> Positioned<S> for Point<S> {\n     }\n }\n \n-impl<S: Clone + Add<S, S>> Movable<S> for Point<S> {}\n+impl<S: Clone + Add<Output=S>> Movable<S> for Point<S> {}\n \n pub fn main() {\n     let mut p = Point{ x: 1i, y: 2i};"}, {"sha": "3e8db61b94044badc065d4313a9a3e8586bca117", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99017f82b6e41ed283199b88ddfc0990bb95d696/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=99017f82b6e41ed283199b88ddfc0990bb95d696", "patch": "@@ -8,23 +8,31 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n use std::cmp::PartialEq;\n use std::ops::{Add, Sub, Mul};\n \n-trait MyNum : Add<Self,Self> + Sub<Self,Self> + Mul<Self,Self> + PartialEq + Clone { }\n+trait MyNum : Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + PartialEq + Clone { }\n \n #[derive(Clone, Show)]\n struct MyInt { val: int }\n \n-impl Add<MyInt, MyInt> for MyInt {\n+impl Add for MyInt {\n+    type Output = MyInt;\n+\n     fn add(self, other: MyInt) -> MyInt { mi(self.val + other.val) }\n }\n \n-impl Sub<MyInt, MyInt> for MyInt {\n+impl Sub for MyInt {\n+    type Output = MyInt;\n+\n     fn sub(self, other: MyInt) -> MyInt { mi(self.val - other.val) }\n }\n \n-impl Mul<MyInt, MyInt> for MyInt {\n+impl Mul for MyInt {\n+    type Output = MyInt;\n+\n     fn mul(self, other: MyInt) -> MyInt { mi(self.val * other.val) }\n }\n "}]}