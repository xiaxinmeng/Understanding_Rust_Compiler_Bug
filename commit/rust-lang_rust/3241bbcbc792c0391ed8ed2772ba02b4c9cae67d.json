{"sha": "3241bbcbc792c0391ed8ed2772ba02b4c9cae67d", "node_id": "C_kwDOAAsO6NoAKDMyNDFiYmNiYzc5MmMwMzkxZWQ4ZWQyNzcyYmEwMmI0YzljYWU2N2Q", "commit": {"author": {"name": "Orson Peters", "email": "orsonpeters@gmail.com", "date": "2021-10-30T07:25:04Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-08-15T10:33:00Z"}, "message": "Fixed float next_up/down 32-bit x87 float NaN roundtrip test case.", "tree": {"sha": "179a1dfd7b4daf455f3565cd778985d083d10810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/179a1dfd7b4daf455f3565cd778985d083d10810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3241bbcbc792c0391ed8ed2772ba02b4c9cae67d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3241bbcbc792c0391ed8ed2772ba02b4c9cae67d", "html_url": "https://github.com/rust-lang/rust/commit/3241bbcbc792c0391ed8ed2772ba02b4c9cae67d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3241bbcbc792c0391ed8ed2772ba02b4c9cae67d/comments", "author": {"login": "orlp", "id": 202547, "node_id": "MDQ6VXNlcjIwMjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/202547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orlp", "html_url": "https://github.com/orlp", "followers_url": "https://api.github.com/users/orlp/followers", "following_url": "https://api.github.com/users/orlp/following{/other_user}", "gists_url": "https://api.github.com/users/orlp/gists{/gist_id}", "starred_url": "https://api.github.com/users/orlp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orlp/subscriptions", "organizations_url": "https://api.github.com/users/orlp/orgs", "repos_url": "https://api.github.com/users/orlp/repos", "events_url": "https://api.github.com/users/orlp/events{/privacy}", "received_events_url": "https://api.github.com/users/orlp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04681898f09dad23b2d282a541e1a3b181bed33e", "url": "https://api.github.com/repos/rust-lang/rust/commits/04681898f09dad23b2d282a541e1a3b181bed33e", "html_url": "https://github.com/rust-lang/rust/commit/04681898f09dad23b2d282a541e1a3b181bed33e"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "07b9ff3a7891903272c791eeed61d5aa56a41609", "filename": "library/std/src/f32/tests.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3241bbcbc792c0391ed8ed2772ba02b4c9cae67d/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3241bbcbc792c0391ed8ed2772ba02b4c9cae67d/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs?ref=3241bbcbc792c0391ed8ed2772ba02b4c9cae67d", "patch": "@@ -308,12 +308,12 @@ fn test_next_up() {\n     let smallest_normal = f32::from_bits(0x0080_0000);\n \n     // Check that NaNs roundtrip.\n-    let nan0 = f32::NAN.to_bits();\n-    let nan1 = f32::NAN.to_bits() ^ 0x002a_aaaa;\n-    let nan2 = f32::NAN.to_bits() ^ 0x0055_5555;\n-    assert_eq!(f32::from_bits(nan0).next_up().to_bits(), nan0);\n-    assert_eq!(f32::from_bits(nan1).next_up().to_bits(), nan1);\n-    assert_eq!(f32::from_bits(nan2).next_up().to_bits(), nan2);\n+    let nan0 = f32::NAN;\n+    let nan1 = f32::from_bits(f32::NAN.to_bits() ^ 0x002a_aaaa);\n+    let nan2 = f32::from_bits(f32::NAN.to_bits() ^ 0x0055_5555);\n+    assert_eq!(nan0.next_up().to_bits(), nan0.to_bits());\n+    assert_eq!(nan1.next_up().to_bits(), nan1.to_bits());\n+    assert_eq!(nan2.next_up().to_bits(), nan2.to_bits());\n \n     assert_eq!(f32::NEG_INFINITY.next_up(), f32::MIN);\n     assert_eq!(f32::MIN.next_up(), -max_down);\n@@ -339,12 +339,12 @@ fn test_next_down() {\n     let smallest_normal = f32::from_bits(0x0080_0000);\n \n     // Check that NaNs roundtrip.\n-    let nan0 = f32::NAN.to_bits();\n-    let nan1 = f32::NAN.to_bits() ^ 0x002a_aaaa;\n-    let nan2 = f32::NAN.to_bits() ^ 0x0055_5555;\n-    assert_eq!(f32::from_bits(nan0).next_down().to_bits(), nan0);\n-    assert_eq!(f32::from_bits(nan1).next_down().to_bits(), nan1);\n-    assert_eq!(f32::from_bits(nan2).next_down().to_bits(), nan2);\n+    let nan0 = f32::NAN;\n+    let nan1 = f32::from_bits(f32::NAN.to_bits() ^ 0x002a_aaaa);\n+    let nan2 = f32::from_bits(f32::NAN.to_bits() ^ 0x0055_5555);\n+    assert_eq!(nan0.next_down().to_bits(), nan0.to_bits());\n+    assert_eq!(nan1.next_down().to_bits(), nan1.to_bits());\n+    assert_eq!(nan2.next_down().to_bits(), nan2.to_bits());\n \n     assert_eq!(f32::NEG_INFINITY.next_down(), f32::NEG_INFINITY);\n     assert_eq!(f32::MIN.next_down(), f32::NEG_INFINITY);"}, {"sha": "cf46ffcffcf2e080165c9d1e2d3c6f806bbe8c13", "filename": "library/std/src/f64/tests.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3241bbcbc792c0391ed8ed2772ba02b4c9cae67d/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3241bbcbc792c0391ed8ed2772ba02b4c9cae67d/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs?ref=3241bbcbc792c0391ed8ed2772ba02b4c9cae67d", "patch": "@@ -298,12 +298,12 @@ fn test_next_up() {\n     let smallest_normal = f64::from_bits(0x0010_0000_0000_0000);\n \n     // Check that NaNs roundtrip.\n-    let nan0 = f64::NAN.to_bits();\n-    let nan1 = f64::NAN.to_bits() ^ 0x000a_aaaa_aaaa_aaaa;\n-    let nan2 = f64::NAN.to_bits() ^ 0x0005_5555_5555_5555;\n-    assert_eq!(f64::from_bits(nan0).next_up().to_bits(), nan0);\n-    assert_eq!(f64::from_bits(nan1).next_up().to_bits(), nan1);\n-    assert_eq!(f64::from_bits(nan2).next_up().to_bits(), nan2);\n+    let nan0 = f64::NAN;\n+    let nan1 = f64::from_bits(f64::NAN.to_bits() ^ 0x000a_aaaa_aaaa_aaaa);\n+    let nan2 = f64::from_bits(f64::NAN.to_bits() ^ 0x0005_5555_5555_5555);\n+    assert_eq!(nan0.next_up().to_bits(), nan0.to_bits());\n+    assert_eq!(nan1.next_up().to_bits(), nan1.to_bits());\n+    assert_eq!(nan2.next_up().to_bits(), nan2.to_bits());\n \n     assert_eq!(f64::NEG_INFINITY.next_up(), f64::MIN);\n     assert_eq!(f64::MIN.next_up(), -max_down);\n@@ -329,12 +329,12 @@ fn test_next_down() {\n     let smallest_normal = f64::from_bits(0x0010_0000_0000_0000);\n \n     // Check that NaNs roundtrip.\n-    let nan0 = f64::NAN.to_bits();\n-    let nan1 = f64::NAN.to_bits() ^ 0x000a_aaaa_aaaa_aaaa;\n-    let nan2 = f64::NAN.to_bits() ^ 0x0005_5555_5555_5555;\n-    assert_eq!(f64::from_bits(nan0).next_down().to_bits(), nan0);\n-    assert_eq!(f64::from_bits(nan1).next_down().to_bits(), nan1);\n-    assert_eq!(f64::from_bits(nan2).next_down().to_bits(), nan2);\n+    let nan0 = f64::NAN;\n+    let nan1 = f64::from_bits(f64::NAN.to_bits() ^ 0x000a_aaaa_aaaa_aaaa);\n+    let nan2 = f64::from_bits(f64::NAN.to_bits() ^ 0x0005_5555_5555_5555);\n+    assert_eq!(nan0.next_down().to_bits(), nan0.to_bits());\n+    assert_eq!(nan1.next_down().to_bits(), nan1.to_bits());\n+    assert_eq!(nan2.next_down().to_bits(), nan2.to_bits());\n \n     assert_eq!(f64::NEG_INFINITY.next_down(), f64::NEG_INFINITY);\n     assert_eq!(f64::MIN.next_down(), f64::NEG_INFINITY);"}]}