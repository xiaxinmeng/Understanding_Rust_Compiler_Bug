{"sha": "fe19ed8737fb0270b88adab77787940cc37ac6c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMTllZDg3MzdmYjAyNzBiODhhZGFiNzc3ODc5NDBjYzM3YWM2Yzk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-26T21:28:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-27T10:54:05Z"}, "message": "factor out some common code and make the on-elimination truncation test debug-only", "tree": {"sha": "c4bd5dd7962a9c9ec1ed64315b53c19be2dfddfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4bd5dd7962a9c9ec1ed64315b53c19be2dfddfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe19ed8737fb0270b88adab77787940cc37ac6c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe19ed8737fb0270b88adab77787940cc37ac6c9", "html_url": "https://github.com/rust-lang/rust/commit/fe19ed8737fb0270b88adab77787940cc37ac6c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe19ed8737fb0270b88adab77787940cc37ac6c9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe7b6a943d76c9ea0db296aab601f02749454895", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe7b6a943d76c9ea0db296aab601f02749454895", "html_url": "https://github.com/rust-lang/rust/commit/fe7b6a943d76c9ea0db296aab601f02749454895"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "21792b847db77e2e6fb0319436a0f61868a09d5f", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fe19ed8737fb0270b88adab77787940cc37ac6c9/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe19ed8737fb0270b88adab77787940cc37ac6c9/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=fe19ed8737fb0270b88adab77787940cc37ac6c9", "patch": "@@ -109,12 +109,10 @@ impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for Scalar<Tag, Id> {\n             Scalar::Ptr(ptr) =>\n                 write!(f, \"{:?}\", ptr),\n             &Scalar::Raw { data, size } => {\n+                Scalar::check_data(data, size);\n                 if size == 0 {\n-                    assert_eq!(data, 0, \"ZST value must be 0\");\n                     write!(f, \"<ZST>\")\n                 } else {\n-                    assert_eq!(truncate(data, Size::from_bytes(size as u64)), data,\n-                            \"Scalar value {:#x} exceeds size of {} bytes\", data, size);\n                     // Format as hex number wide enough to fit any value of the given `size`.\n                     // So data=20, size=1 will be \"0x14\", but with size=4 it'll be \"0x00000014\".\n                     write!(f, \"0x{:>0width$x}\", data, width=(size*2) as usize)\n@@ -134,6 +132,12 @@ impl<Tag> fmt::Display for Scalar<Tag> {\n }\n \n impl<'tcx> Scalar<()> {\n+    #[inline(always)]\n+    fn check_data(data: u128, size: u8) {\n+        debug_assert_eq!(truncate(data, Size::from_bytes(size as u64)), data,\n+                         \"Scalar value {:#x} exceeds size of {} bytes\", data, size);\n+    }\n+\n     #[inline]\n     pub fn with_tag<Tag>(self, new_tag: Tag) -> Scalar<Tag> {\n         match self {\n@@ -269,8 +273,10 @@ impl<'tcx, Tag> Scalar<Tag> {\n     #[inline]\n     pub fn from_uint(i: impl Into<u128>, size: Size) -> Self {\n         let i = i.into();\n-        assert_eq!(truncate(i, size), i,\n-                         \"Unsigned value {} does not fit in {} bits\", i, size.bits());\n+        assert_eq!(\n+            truncate(i, size), i,\n+            \"Unsigned value {:#x} does not fit in {} bits\", i, size.bits()\n+        );\n         Scalar::Raw { data: i, size: size.bytes() as u8 }\n     }\n \n@@ -279,8 +285,10 @@ impl<'tcx, Tag> Scalar<Tag> {\n         let i = i.into();\n         // `into` performed sign extension, we have to truncate\n         let truncated = truncate(i as u128, size);\n-        assert_eq!(sign_extend(truncated, size) as i128, i,\n-                         \"Signed value {} does not fit in {} bits\", i, size.bits());\n+        assert_eq!(\n+            sign_extend(truncated, size) as i128, i,\n+            \"Signed value {:#x} does not fit in {} bits\", i, size.bits()\n+        );\n         Scalar::Raw { data: truncated, size: size.bytes() as u8 }\n     }\n \n@@ -303,9 +311,8 @@ impl<'tcx, Tag> Scalar<Tag> {\n         match self {\n             Scalar::Raw { data, size } => {\n                 assert_eq!(target_size.bytes(), size as u64);\n-                assert_ne!(size, 0, \"to_bits cannot be used with zsts\");\n-                assert_eq!(truncate(data, target_size), data,\n-                            \"Scalar value {:#x} exceeds size of {} bytes\", data, size);\n+                assert_ne!(size, 0, \"you should never look at the bits of a ZST\");\n+                Scalar::check_data(data, size);\n                 Ok(data)\n             }\n             Scalar::Ptr(ptr) => {\n@@ -320,9 +327,8 @@ impl<'tcx, Tag> Scalar<Tag> {\n         match self {\n             Scalar::Raw { data, size } => {\n                 assert_eq!(target_size.bytes(), size as u64);\n-                assert_ne!(size, 0, \"to_bits cannot be used with zsts\");\n-                assert_eq!(truncate(data, target_size), data,\n-                            \"Scalar value {:#x} exceeds size of {} bytes\", data, size);\n+                assert_ne!(size, 0, \"you should never look at the bits of a ZST\");\n+                Scalar::check_data(data, size);\n                 Ok(data)\n             }\n             Scalar::Ptr(_) => err!(ReadPointerAsBytes),"}]}