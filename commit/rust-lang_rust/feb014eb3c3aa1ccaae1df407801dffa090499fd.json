{"sha": "feb014eb3c3aa1ccaae1df407801dffa090499fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYjAxNGViM2MzYWExY2NhYWUxZGY0MDc4MDFkZmZhMDkwNDk5ZmQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-07T19:06:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-07T19:24:48Z"}, "message": "rustc: Add an \"ne\" method to the Eq trait, and implement it everywhere", "tree": {"sha": "8ffeec6945de4843f9e0d150720596327530e00f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ffeec6945de4843f9e0d150720596327530e00f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feb014eb3c3aa1ccaae1df407801dffa090499fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feb014eb3c3aa1ccaae1df407801dffa090499fd", "html_url": "https://github.com/rust-lang/rust/commit/feb014eb3c3aa1ccaae1df407801dffa090499fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feb014eb3c3aa1ccaae1df407801dffa090499fd/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac1f84c153a171e641233e5d2d11404a0b520986", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac1f84c153a171e641233e5d2d11404a0b520986", "html_url": "https://github.com/rust-lang/rust/commit/ac1f84c153a171e641233e5d2d11404a0b520986"}], "stats": {"total": 278, "additions": 218, "deletions": 60}, "files": [{"sha": "ac75d132b3e55fe48e6cbe2fb96c4d05746cd699", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -100,6 +100,7 @@ impl mode : cmp::Eq {\n     pure fn eq(&&other: mode) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: mode) -> bool { !self.eq(other) }\n }\n \n fn opts() -> ~[getopts::Opt] {"}, {"sha": "5a8b98cd85771e8b1169c64009b63ee7165e5998", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -6,6 +6,7 @@ impl mode : cmp::Eq {\n     pure fn eq(&&other: mode) -> bool {\n         other as int == self as int\n     }\n+    pure fn ne(&&other: mode) -> bool { !self.eq(other) }\n }\n \n type config = {"}, {"sha": "ea88c5865d5659f6ba85b3f4566115ab4ac031ae", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -12,6 +12,7 @@ impl test_mode : cmp::Eq {\n     pure fn eq(&&other: test_mode) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: test_mode) -> bool { !self.eq(other) }\n }\n \n fn write_file(filename: &Path, content: ~str) {"}, {"sha": "7deb5b30eef8da9203f7cc8f87029b3b2e34a9c4", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -70,9 +70,8 @@ fn all_values(blk: fn(v: bool)) {\n pure fn to_bit(v: bool) -> u8 { if v { 1u8 } else { 0u8 } }\n \n impl bool : cmp::Eq {\n-    pure fn eq(&&other: bool) -> bool {\n-        self == other\n-    }\n+    pure fn eq(&&other: bool) -> bool { self == other }\n+    pure fn ne(&&other: bool) -> bool { self != other }\n }\n \n #[test]"}, {"sha": "8629ffc78e0ab28aff3a0d1335eb9206ad849a16", "filename": "src/libcore/box.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbox.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -15,6 +15,7 @@ pure fn ptr_eq<T>(a: @T, b: @T) -> bool {\n \n impl<T:Eq> @const T : Eq {\n     pure fn eq(&&other: @const T) -> bool { *self == *other }\n+    pure fn ne(&&other: @const T) -> bool { *self != *other }\n }\n \n impl<T:Ord> @const T : Ord {"}, {"sha": "69392d8648f7adeafb61280cccb8d6ab0bec1165", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -191,6 +191,7 @@ pure fn cmp(a: char, b: char) -> int {\n \n impl char: Eq {\n     pure fn eq(&&other: char) -> bool { self == other }\n+    pure fn ne(&&other: char) -> bool { self != other }\n }\n \n #[test]"}, {"sha": "82a830d05cd5a060120572ffca1eadbd5f2a000c", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -26,11 +26,13 @@ trait Ord {\n #[lang=\"eq\"]\n trait Eq {\n     pure fn eq(&&other: self) -> bool;\n+    pure fn ne(&&other: self) -> bool;\n }\n \n #[cfg(test)]\n trait Eq {\n     pure fn eq(&&other: self) -> bool;\n+    pure fn ne(&&other: self) -> bool;\n }\n \n pure fn lt<T: Ord>(v1: &T, v2: &T) -> bool {\n@@ -45,6 +47,10 @@ pure fn eq<T: Eq>(v1: &T, v2: &T) -> bool {\n     v1.eq(v2)\n }\n \n+pure fn ne<T: Eq>(v1: &T, v2: &T) -> bool {\n+    v1.ne(v2)\n+}\n+\n pure fn ge<T: Ord>(v1: &T, v2: &T) -> bool {\n     v1.ge(v2)\n }"}, {"sha": "00706280ebca5d794d79e64eeb08ad66cf20321c", "filename": "src/libcore/either.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -143,6 +143,7 @@ impl<T:Eq,U:Eq> Either<T,U> : Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: Either<T,U>) -> bool { !self.eq(other) }\n }\n \n #[test]"}, {"sha": "731c4a6f457bd4a28f9501795fcbaf7f8df17ad0", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -401,6 +401,7 @@ mod rt {\n                 (pad_float, _) => false\n             }\n         }\n+        pure fn ne(&&other: pad_mode) -> bool { !self.eq(other) }\n     }\n \n     fn pad(cv: conv, &s: ~str, mode: pad_mode) -> ~str {"}, {"sha": "b570f1a14957d0bfa895972a2b4d68b26d44d654", "filename": "src/libcore/float.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -416,6 +416,7 @@ pure fn tan(x: float) -> float { f64::tan(x as f64) as float }\n \n impl float: Eq {\n     pure fn eq(&&other: float) -> bool { self == other }\n+    pure fn ne(&&other: float) -> bool { self != other }\n }\n \n impl float: Ord {"}, {"sha": "e1b592522e6cf8c8d1d81d6132d8479d9fd8edf7", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -76,9 +76,8 @@ impl T: Ord {\n }\n \n impl T: Eq {\n-    pure fn eq(&&other: T) -> bool {\n-        return self == other;\n-    }\n+    pure fn eq(&&other: T) -> bool { return self == other; }\n+    pure fn ne(&&other: T) -> bool { return self != other; }\n }\n \n impl T: num::Num {"}, {"sha": "a9d83194713689fceca874f532787a4fd7b77c29", "filename": "src/libcore/io.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -337,6 +337,7 @@ impl WriterType: Eq {\n             (Screen, _) | (File, _) => false\n         }\n     }\n+    pure fn ne(&&other: WriterType) -> bool { !self.eq(other) }\n }\n \n // FIXME (#2004): Seekable really should be orthogonal."}, {"sha": "4c4e0048f178976c245a31772c44678465c036ee", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -266,6 +266,7 @@ impl<T: Eq> Option<T> : Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: Option<T>) -> bool { !self.eq(other) }\n }\n \n #[test]"}, {"sha": "a9dda62d9502c03389156050191ffe90eb0c16dc", "filename": "src/libcore/path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -69,6 +69,7 @@ impl PosixPath : Eq {\n         return self.is_absolute == other.is_absolute &&\n             self.components == other.components;\n     }\n+    pure fn ne(&&other: PosixPath) -> bool { !self.eq(other) }\n }\n \n impl WindowsPath : Eq {\n@@ -78,6 +79,7 @@ impl WindowsPath : Eq {\n             self.is_absolute == other.is_absolute &&\n             self.components == other.components;\n     }\n+    pure fn ne(&&other: WindowsPath) -> bool { !self.eq(other) }\n }\n \n // FIXME (#3227): when default methods in traits are working, de-duplicate"}, {"sha": "2078b1ed71b75b97138a9fc40d38a97759888421", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -128,6 +128,7 @@ impl State: Eq {\n     pure fn eq(&&other: State) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: State) -> bool { !self.eq(other) }\n }\n \n struct BufferHeader {"}, {"sha": "6e8a2bb36116e6a4d2efda896413fa717e79fa48", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -188,6 +188,7 @@ impl<T> *const T : Eq {\n         let b: uint = unsafe::reinterpret_cast(&other);\n         return a == b;\n     }\n+    pure fn ne(&&other: *const T) -> bool { !self.eq(other) }\n }\n \n // Comparison for pointers\n@@ -216,9 +217,8 @@ impl<T> *const T : Ord {\n \n // Equality for region pointers\n impl<T:Eq> &const T : Eq {\n-    pure fn eq(&&other: &const T) -> bool {\n-        return *self == *other;\n-    }\n+    pure fn eq(&&other: &const T) -> bool { return *self == *other; }\n+    pure fn ne(&&other: &const T) -> bool { return *self != *other; }\n }\n \n // Comparison for region pointers"}, {"sha": "e4028a466e0f3b914dd0908c21d80280c780578f", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -373,6 +373,7 @@ impl<T:Eq,U:Eq> Result<T,U> : Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: Result<T,U>) -> bool { !self.eq(other) }\n }\n \n #[cfg(test)]"}, {"sha": "b83ef1064fd5577115d568bb93e0159002cb95da", "filename": "src/libcore/str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -780,20 +780,26 @@ impl &str: Eq {\n     pure fn eq(&&other: &str) -> bool {\n         eq_slice(self, other)\n     }\n+    #[inline(always)]\n+    pure fn ne(&&other: &str) -> bool { !self.eq(other) }\n }\n \n impl ~str: Eq {\n     #[inline(always)]\n     pure fn eq(&&other: ~str) -> bool {\n         eq_slice(self, other)\n     }\n+    #[inline(always)]\n+    pure fn ne(&&other: ~str) -> bool { !self.eq(other) }\n }\n \n impl @str: Eq {\n     #[inline(always)]\n     pure fn eq(&&other: @str) -> bool {\n         eq_slice(self, other)\n     }\n+    #[inline(always)]\n+    pure fn ne(&&other: @str) -> bool { !self.eq(other) }\n }\n \n impl ~str : Ord {"}, {"sha": "f4514ecd3677a760f4c946adca29dd265c79e89b", "filename": "src/libcore/task.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -85,9 +85,8 @@ enum Task {\n }\n \n impl Task : cmp::Eq {\n-    pure fn eq(&&other: Task) -> bool {\n-        *self == *other\n-    }\n+    pure fn eq(&&other: Task) -> bool { *self == *other }\n+    pure fn ne(&&other: Task) -> bool { !self.eq(other) }\n }\n \n /**\n@@ -113,6 +112,7 @@ impl TaskResult: Eq {\n             (Success, _) | (Failure, _) => false\n         }\n     }\n+    pure fn ne(&&other: TaskResult) -> bool { !self.eq(other) }\n }\n \n /// A message type for notifying of task lifecycle events\n@@ -131,6 +131,7 @@ impl Notification : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: Notification) -> bool { !self.eq(other) }\n }\n \n /// Scheduler modes\n@@ -1324,6 +1325,7 @@ impl LocalData: Eq {\n         let ptr_b: (uint, uint) = unsafe::reinterpret_cast(&other);\n         return ptr_a == ptr_b;\n     }\n+    pure fn ne(&&other: LocalData) -> bool { !self.eq(other) }\n }\n \n // We use dvec because it's the best data structure in core. If TLS is used"}, {"sha": "2ab8af78b8a000e289cc91a8850f74e88e7b8215", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -81,6 +81,7 @@ impl<A: Eq, B: Eq> (A, B): Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: (A, B)) -> bool { !self.eq(other) }\n }\n \n impl<A: Ord, B: Ord> (A, B): Ord {\n@@ -119,6 +120,7 @@ impl<A: Eq, B: Eq, C: Eq> (A, B, C): Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: (A, B, C)) -> bool { !self.eq(other) }\n }\n \n impl<A: Ord, B: Ord, C: Ord> (A, B, C): Ord {"}, {"sha": "01668edf3b6528f786ecda103c085aa1f4f3321c", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -69,9 +69,8 @@ impl T: Ord {\n }\n \n impl T: Eq {\n-    pure fn eq(&&other: T) -> bool {\n-        return self == other;\n-    }\n+    pure fn eq(&&other: T) -> bool { return self == other; }\n+    pure fn ne(&&other: T) -> bool { return self != other; }\n }\n \n impl T: num::Num {"}, {"sha": "7a9aa71d1991e8cb8de7661f16a960333e45ffd4", "filename": "src/libcore/uniq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funiq.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -4,6 +4,7 @@ use cmp::{Eq, Ord};\n \n impl<T:Eq> ~const T : Eq {\n     pure fn eq(&&other: ~const T) -> bool { *self == *other }\n+    pure fn ne(&&other: ~const T) -> bool { *self != *other }\n }\n \n impl<T:Ord> ~const T : Ord {"}, {"sha": "2b09425f7520947a061c30d644bd201f4667345d", "filename": "src/libcore/unit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funit.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -6,6 +6,7 @@ use cmp::{Eq, Ord};\n \n impl () : Eq {\n     pure fn eq(&&_other: ()) -> bool { true }\n+    pure fn ne(&&_other: ()) -> bool { false }\n }\n \n impl () : Ord {"}, {"sha": "4dedde8e1778fa27e55146eb390eec0c38ab2936", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -1406,23 +1406,23 @@ pure fn eq<T: Eq>(a: &[T], b: &[T]) -> bool {\n \n impl<T: Eq> &[T]: Eq {\n     #[inline(always)]\n-    pure fn eq(&&other: &[T]) -> bool {\n-        eq(self, other)\n-    }\n+    pure fn eq(&&other: &[T]) -> bool { eq(self, other) }\n+    #[inline(always)]\n+    pure fn ne(&&other: &[T]) -> bool { !self.eq(other) }\n }\n \n impl<T: Eq> ~[T]: Eq {\n     #[inline(always)]\n-    pure fn eq(&&other: ~[T]) -> bool {\n-        eq(self, other)\n-    }\n+    pure fn eq(&&other: ~[T]) -> bool { eq(self, other) }\n+    #[inline(always)]\n+    pure fn ne(&&other: ~[T]) -> bool { !self.eq(other) }\n }\n \n impl<T: Eq> @[T]: Eq {\n     #[inline(always)]\n-    pure fn eq(&&other: @[T]) -> bool {\n-        eq(self, other)\n-    }\n+    pure fn eq(&&other: @[T]) -> bool { eq(self, other) }\n+    #[inline(always)]\n+    pure fn ne(&&other: @[T]) -> bool { !self.eq(other) }\n }\n \n // Lexicographical comparison"}, {"sha": "092bf5cfd78e38b50d3b4f830cf129c34d290fb2", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -124,12 +124,14 @@ impl Name : Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: Name) -> bool { !self.eq(other) }\n }\n \n impl Occur : Eq {\n     pure fn eq(&&other: Occur) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: Occur) -> bool { !self.eq(other) }\n }\n \n /// Create an option that is required and takes an argument\n@@ -449,6 +451,7 @@ impl FailType : Eq {\n     pure fn eq(&&other: FailType) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: FailType) -> bool { !self.eq(other) }\n }\n \n #[cfg(test)]"}, {"sha": "f2207f2a913b8bd460ff60f0c66d4f598fd9737b", "filename": "src/libstd/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -609,12 +609,12 @@ impl Error : Eq {\n         self.col == other.col &&\n         self.msg == other.msg\n     }\n+    pure fn ne(&&other: Error) -> bool { !self.eq(other) }\n }\n \n impl Json : Eq {\n-    pure fn eq(&&other: Json) -> bool {\n-        eq(self, other)\n-    }\n+    pure fn eq(&&other: Json) -> bool { eq(self, other) }\n+    pure fn ne(&&other: Json) -> bool { !self.eq(other) }\n }\n \n trait ToJson { fn to_json() -> Json; }"}, {"sha": "71b820b40224ef5065f6d1ac8211f5a760d8c0b1", "filename": "src/libstd/list.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -165,6 +165,7 @@ impl<T:Eq> List<T> : Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: List<T>) -> bool { !self.eq(other) }\n }\n \n #[cfg(test)]"}, {"sha": "a8872e13f0b006d6fe79249a18059e83bcc80894", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -320,6 +320,7 @@ impl UserInfo : Eq {\n     pure fn eq(&&other: UserInfo) -> bool {\n         self.user == other.user && self.pass == other.pass\n     }\n+    pure fn ne(&&other: UserInfo) -> bool { !self.eq(other) }\n }\n \n fn query_from_str(rawquery: &str) -> Query {\n@@ -386,6 +387,7 @@ impl Input: Eq {\n             (Unreserved, _) => false\n         }\n     }\n+    pure fn ne(&&other: Input) -> bool { !self.eq(other) }\n }\n \n // returns userinfo, host, port, and unparsed part, or an error"}, {"sha": "db8af371cec0c18947989d1fab684e99d445e2c5", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -96,6 +96,7 @@ impl TestResult : Eq {\n     pure fn eq(&&other: TestResult) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: TestResult) -> bool { !self.eq(other) }\n }\n \n type ConsoleTestState ="}, {"sha": "c012ac8fa05472719a021a86ab681c2f0de4c6c1", "filename": "src/libstd/time.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -40,6 +40,7 @@ impl Timespec : Eq {\n     pure fn eq(&&other: Timespec) -> bool {\n         self.sec == other.sec && self.nsec == other.nsec\n     }\n+    pure fn ne(&&other: Timespec) -> bool { !self.eq(other) }\n }\n \n /**\n@@ -105,16 +106,16 @@ impl Tm_ : Eq {\n         self.tm_zone == other.tm_zone &&\n         self.tm_nsec == other.tm_nsec\n     }\n+    pure fn ne(&&other: Tm_) -> bool { !self.eq(other) }\n }\n \n enum Tm {\n     Tm_(Tm_)\n }\n \n impl Tm : Eq {\n-    pure fn eq(&&other: Tm) -> bool {\n-        *self == *other\n-    }\n+    pure fn eq(&&other: Tm) -> bool { *self == *other }\n+    pure fn ne(&&other: Tm) -> bool { *self != *other }\n }\n \n fn empty_tm() -> Tm {"}, {"sha": "03106f97bc74b76bd375cd756a5ac68ef45566b2", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -81,6 +81,7 @@ impl def_id: cmp::Eq {\n     pure fn eq(&&other: def_id) -> bool {\n         self.crate == other.crate && self.node == other.node\n     }\n+    pure fn ne(&&other: def_id) -> bool { !self.eq(other) }\n }\n \n const local_crate: crate_num = 0;\n@@ -244,6 +245,7 @@ impl def : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: def) -> bool { !self.eq(other) }\n }\n \n // The set of meta_items that define the compilation environment of the crate,\n@@ -337,6 +339,7 @@ impl binding_mode : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: binding_mode) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]\n@@ -368,6 +371,7 @@ impl mutability: cmp::Eq {\n     pure fn eq(&&other: mutability) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: mutability) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]\n@@ -420,6 +424,7 @@ impl binop : cmp::Eq {\n     pure fn eq(&&other: binop) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: binop) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]\n@@ -454,6 +459,7 @@ impl<T:cmp::Eq> inferable<T> : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: inferable<T>) -> bool { !self.eq(other) }\n }\n \n // \"resolved\" mode: the real modes.\n@@ -464,6 +470,7 @@ impl rmode : cmp::Eq {\n     pure fn eq(&&other: rmode) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: rmode) -> bool { !self.eq(other) }\n }\n \n // inferable mode.\n@@ -504,6 +511,7 @@ impl init_op : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: init_op) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]\n@@ -547,6 +555,7 @@ impl blk_check_mode : cmp::Eq {\n             (unsafe_blk, _) => false,\n         }\n     }\n+    pure fn ne(&&other: blk_check_mode) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]\n@@ -781,6 +790,7 @@ impl ast::lit_: cmp::Eq {\n             (lit_bool(_), _) => false\n         }\n     }\n+    pure fn ne(&&other: ast::lit_) -> bool { !self.eq(other) }\n }\n \n // NB: If you change this, you'll probably want to change the corresponding\n@@ -828,6 +838,7 @@ impl int_ty: cmp::Eq {\n             (ty_i64, _) => false,\n         }\n     }\n+    pure fn ne(&&other: int_ty) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]\n@@ -848,6 +859,7 @@ impl uint_ty: cmp::Eq {\n             (ty_u64, _) => false\n         }\n     }\n+    pure fn ne(&&other: uint_ty) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]\n@@ -860,6 +872,7 @@ impl float_ty: cmp::Eq {\n             (ty_f, _) | (ty_f32, _) | (ty_f64, _) => false\n         }\n     }\n+    pure fn ne(&&other: float_ty) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]\n@@ -910,6 +923,7 @@ impl prim_ty : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: prim_ty) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]\n@@ -960,6 +974,7 @@ impl purity : cmp::Eq {\n     pure fn eq(&&other: purity) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: purity) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]\n@@ -978,6 +993,7 @@ impl ret_style : cmp::Eq {\n             (return_val, _) => false,\n         }\n     }\n+    pure fn ne(&&other: ret_style) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]\n@@ -1031,6 +1047,7 @@ impl self_ty_ : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: self_ty_) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]\n@@ -1061,6 +1078,7 @@ impl foreign_mod_sort : cmp::Eq {\n     pure fn eq(&&other: foreign_mod_sort) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: foreign_mod_sort) -> bool { !self.eq(other) }\n }\n \n impl foreign_abi : cmp::Eq {\n@@ -1074,6 +1092,7 @@ impl foreign_abi : cmp::Eq {\n             (foreign_abi_stdcall, _) => false,\n         }\n     }\n+    pure fn ne(&&other: foreign_abi) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]\n@@ -1115,6 +1134,7 @@ impl namespace : cmp::Eq {\n     pure fn eq(&&other: namespace) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: namespace) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]\n@@ -1162,6 +1182,7 @@ impl attr_style : cmp::Eq {\n     pure fn eq(&&other: attr_style) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: attr_style) -> bool { !self.eq(other) }\n }\n \n // doc-comments are promoted to attributes that have is_sugared_doc = true\n@@ -1194,6 +1215,7 @@ impl visibility : cmp::Eq {\n             (inherited, _) => false,\n         }\n     }\n+    pure fn ne(&&other: visibility) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]\n@@ -1262,6 +1284,7 @@ impl class_mutability : cmp::Eq {\n             (class_immutable, _) => false,\n         }\n     }\n+    pure fn ne(&&other: class_mutability) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]"}, {"sha": "e02856944604aa283f679e2175bde53b87fa8eda", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -28,6 +28,7 @@ impl path_elt : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: path_elt) -> bool { !self.eq(other) }\n }\n \n type path = ~[path_elt];"}, {"sha": "2e3c556084f89e1fb005eb52eeb775d25a7f9af3", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -36,6 +36,7 @@ impl file_pos: cmp::Eq {\n     pure fn eq(&&other: file_pos) -> bool {\n         self.ch == other.ch && self.byte == other.byte\n     }\n+    pure fn ne(&&other: file_pos) -> bool { !self.eq(other) }\n }\n \n /* A codemap is a thing that maps uints to file/line/column positions\n@@ -174,6 +175,7 @@ impl span : cmp::Eq {\n     pure fn eq(&&other: span) -> bool {\n         return self.lo == other.lo && self.hi == other.hi;\n     }\n+    pure fn ne(&&other: span) -> bool { !self.eq(other) }\n }\n \n fn span_to_str_no_adj(sp: span, cm: codemap) -> ~str {"}, {"sha": "99296f72eb7a03541454dc4f983bdcfa04f6fb73", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -150,6 +150,7 @@ impl level : cmp::Eq {\n     pure fn eq(&&other: level) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: level) -> bool { !self.eq(other) }\n }\n \n fn diagnosticstr(lvl: level) -> ~str {"}, {"sha": "d207a65a169051a094beb7d2997f476948b1a1fa", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -14,6 +14,7 @@ impl direction : cmp::Eq {\n             (recv, _) => false,\n         }\n     }\n+    pure fn ne(&&other: direction) -> bool { !self.eq(other) }\n }\n \n impl direction: ToStr {"}, {"sha": "633ace5e253068330d9f55b210252f59940c2d42", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -3626,6 +3626,7 @@ impl restriction : cmp::Eq {\n     pure fn eq(&&other: restriction) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: restriction) -> bool { !self.eq(other) }\n }\n \n //"}, {"sha": "73e4039513e0b4d6d3db5548fb41808d83451c2c", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -440,6 +440,7 @@ impl binop : cmp::Eq {\n     pure fn eq(&&other: binop) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: binop) -> bool { !self.eq(other) }\n }\n \n impl token : cmp::Eq {\n@@ -705,6 +706,7 @@ impl token : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: token) -> bool { !self.eq(other) }\n }\n \n // Local Variables:"}, {"sha": "71eabb410bbff54d848ac91e11ee6f0820955c0f", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -64,6 +64,7 @@ impl breaks : cmp::Eq {\n             (inconsistent, _) => false,\n         }\n     }\n+    pure fn ne(&&other: breaks) -> bool { !self.eq(other) }\n }\n \n type break_t = {offset: int, blank_space: int};"}, {"sha": "afd94e4f437865d2d411715eb1169e3152a806eb", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -30,6 +30,7 @@ impl output_type : cmp::Eq {\n     pure fn eq(&&other: output_type) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: output_type) -> bool { !self.eq(other) }\n }\n \n fn llvm_err(sess: session, msg: ~str) -> ! unsafe {"}, {"sha": "ecdd02b46974f3f462197d6fdd3f5fad50b7893a", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -140,6 +140,7 @@ impl compile_upto : cmp::Eq {\n     pure fn eq(&&other: compile_upto) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: compile_upto) -> bool { !self.eq(other) }\n }\n \n fn compile_upto(sess: session, cfg: ast::crate_cfg,"}, {"sha": "3c0e4d0f9e155c3a9c995b22dcfff9eb5565b1d4", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -209,6 +209,7 @@ impl monitor_msg : cmp::Eq {\n     pure fn eq(&&other: monitor_msg) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: monitor_msg) -> bool { !self.eq(other) }\n }\n \n /*"}, {"sha": "66544d72db51aad05594bedd253d981d70fea842", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -16,6 +16,7 @@ impl os : cmp::Eq {\n     pure fn eq(&&other: os) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: os) -> bool { !self.eq(other) }\n }\n \n enum arch { arch_x86, arch_x86_64, arch_arm, }\n@@ -24,6 +25,7 @@ impl arch: cmp::Eq {\n     pure fn eq(&&other: arch) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: arch) -> bool { !self.eq(other) }\n }\n \n enum crate_type { bin_crate, lib_crate, unknown_crate, }\n@@ -95,6 +97,7 @@ impl OptLevel : cmp::Eq {\n     pure fn eq(&&other: OptLevel) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: OptLevel) -> bool { !self.eq(other) }\n }\n \n type options ="}, {"sha": "a6d82e14ea5f73ca63e1efa65d63d47b3e1a2c2b", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -165,6 +165,7 @@ impl TypeKind : cmp::Eq {\n             (X86_MMX, _) => false,\n         }\n     }\n+    pure fn ne(&&other: TypeKind) -> bool { !self.eq(other) }\n }\n \n enum AtomicBinOp {"}, {"sha": "1ea6f2bcd61c5853e624d5925b006e97f3b25cbe", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -133,6 +133,7 @@ impl Family : cmp::Eq {\n     pure fn eq(&&other: Family) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: Family) -> bool { !self.eq(other) }\n }\n \n fn item_family(item: ebml::Doc) -> Family {"}, {"sha": "785665b42bfc4ad5776374349c39b4498acc97d9", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -365,6 +365,7 @@ impl bckerr_code : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: bckerr_code) -> bool { !self.eq(other) }\n }\n \n // Combination of an error code and the categorization of the expression\n@@ -375,6 +376,7 @@ impl bckerr : cmp::Eq {\n     pure fn eq(&&other: bckerr) -> bool {\n         self.cmt == other.cmt && self.code == other.code\n     }\n+    pure fn ne(&&other: bckerr) -> bool { !self.eq(other) }\n }\n \n // shorthand for something that fails with `bckerr` or succeeds with `T`"}, {"sha": "0a13ee2ae1ec7845c18353f1204fd4d5a1428348", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -53,6 +53,7 @@ impl purity_cause : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: purity_cause) -> bool { !self.eq(other) }\n }\n \n fn check_loans(bccx: borrowck_ctxt,"}, {"sha": "364cd4890ab89a2a9d5acdcb41f1adbf71b1aec9", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -138,6 +138,7 @@ impl ctor: cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: ctor) -> bool { !self.eq(other) }\n }\n \n // Algorithm from http://moscova.inria.fr/~maranget/papers/warn/index.html"}, {"sha": "beceec4cfd3d9977f4a8125d99e3a76cc785e85d", "filename": "src/rustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fconst_eval.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -201,6 +201,7 @@ impl const_val: cmp::Eq {\n             (const_str(_), _) | (const_bool(_), _) => false\n         }\n     }\n+    pure fn ne(&&other: const_val) -> bool { !self.eq(other) }\n }\n \n // FIXME: issue #1417"}, {"sha": "51210870b418c24e9fcc7366eefc7d6e74907f94", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -68,6 +68,7 @@ impl lint : cmp::Eq {\n     pure fn eq(&&other: lint) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: lint) -> bool { !self.eq(other) }\n }\n \n fn level_to_str(lv: level) -> ~str {\n@@ -87,6 +88,7 @@ impl level : cmp::Eq {\n     pure fn eq(&&other: level) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: level) -> bool { !self.eq(other) }\n }\n \n type lint_spec = @{lint: lint,"}, {"sha": "ed7f793197d46e71ab22b573f6546fd101f959e6", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -128,15 +128,13 @@ enum Variable = uint;\n enum LiveNode = uint;\n \n impl Variable : cmp::Eq {\n-    pure fn eq(&&other: Variable) -> bool {\n-        *self == *other\n-    }\n+    pure fn eq(&&other: Variable) -> bool { *self == *other }\n+    pure fn ne(&&other: Variable) -> bool { *self != *other }\n }\n \n impl LiveNode : cmp::Eq {\n-    pure fn eq(&&other: LiveNode) -> bool {\n-        *self == *other\n-    }\n+    pure fn eq(&&other: LiveNode) -> bool { *self == *other }\n+    pure fn ne(&&other: LiveNode) -> bool { *self != *other }\n }\n \n enum LiveNodeKind {\n@@ -175,6 +173,7 @@ impl LiveNodeKind : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: LiveNodeKind) -> bool { !self.eq(other) }\n }\n \n fn check_crate(tcx: ty::ctxt,"}, {"sha": "77e234770e6e0518f184c24c0df1ef37dcb872c6", "filename": "src/rustc/middle/mem_categorization.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmem_categorization.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -115,6 +115,7 @@ impl categorization : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: categorization) -> bool { !self.eq(other) }\n }\n \n // different kinds of pointers:\n@@ -154,6 +155,7 @@ impl ptr_kind : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: ptr_kind) -> bool { !self.eq(other) }\n }\n \n // I am coining the term \"components\" to mean \"pieces of a data\n@@ -196,6 +198,7 @@ impl comp_kind : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: comp_kind) -> bool { !self.eq(other) }\n }\n \n // different kinds of expressions we might evaluate\n@@ -210,6 +213,7 @@ impl special_kind : cmp::Eq {\n     pure fn eq(&&other: special_kind) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: special_kind) -> bool { !self.eq(other) }\n }\n \n // a complete categorization of a value indicating where it originated\n@@ -233,6 +237,7 @@ impl cmt_ : cmp::Eq {\n         self.mutbl == other.mutbl &&\n         self.ty == other.ty\n     }\n+    pure fn ne(&&other: cmt_) -> bool { !self.eq(other) }\n }\n \n // a loan path is like a category, but it exists only when the data is\n@@ -274,6 +279,7 @@ impl loan_path : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: loan_path) -> bool { !self.eq(other) }\n }\n \n // We pun on *T to mean both actual deref of a ptr as well"}, {"sha": "514a816a63a41ca35bb7bb08a1c9a9e79bd44860", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -378,6 +378,7 @@ impl region_dep: cmp::Eq {\n     pure fn eq(&&other: region_dep) -> bool {\n         self.ambient_variance == other.ambient_variance && self.id == other.id\n     }\n+    pure fn ne(&&other: region_dep) -> bool { !self.eq(other) }\n }\n \n type determine_rp_ctxt_ = {"}, {"sha": "4bea8e7c508f3ef39abd4b6b59a49b630bf88b62", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -114,6 +114,7 @@ impl PatternBindingMode : cmp::Eq {\n     pure fn eq(&&other: PatternBindingMode) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: PatternBindingMode) -> bool { !self.eq(other) }\n }\n \n \n@@ -154,6 +155,7 @@ impl Mutability : cmp::Eq {\n     pure fn eq(&&other: Mutability) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: Mutability) -> bool { !self.eq(other) }\n }\n \n enum SelfBinding {\n@@ -188,6 +190,7 @@ impl ImportDirectiveNS : cmp::Eq {\n     pure fn eq(&&other: ImportDirectiveNS) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: ImportDirectiveNS) -> bool { !self.eq(other) }\n }\n \n /// Contains data for specific types of import directives.\n@@ -274,6 +277,7 @@ impl XrayFlag : cmp::Eq {\n     pure fn eq(&&other: XrayFlag) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: XrayFlag) -> bool { !self.eq(other) }\n }\n \n enum AllowCapturingSelfFlag {\n@@ -285,6 +289,7 @@ impl AllowCapturingSelfFlag : cmp::Eq {\n     pure fn eq(&&other: AllowCapturingSelfFlag) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: AllowCapturingSelfFlag) -> bool { !self.eq(other) }\n }\n \n enum EnumVariantOrConstResolution {\n@@ -483,6 +488,7 @@ impl Privacy : cmp::Eq {\n     pure fn eq(&&other: Privacy) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: Privacy) -> bool { !self.eq(other) }\n }\n \n // Records a possibly-private definition."}, {"sha": "6884bc48d624fd3b835951836cedbb13af5111bc", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -424,6 +424,7 @@ impl branch_kind : cmp::Eq {\n     pure fn eq(&&other: branch_kind) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: branch_kind) -> bool { !self.eq(other) }\n }\n \n fn compile_submatch(bcx: block, m: match_, vals: ~[ValueRef],"}, {"sha": "9445efe41fa90afa2dd5871b4392084e41da6f0c", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -288,6 +288,7 @@ impl cleantype : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: cleantype) -> bool { !self.eq(other) }\n }\n \n // Used to remember and reuse existing cleanup paths\n@@ -1114,12 +1115,14 @@ impl mono_param_id: cmp::Eq {\n             (mono_repr(*), _) => false\n         }\n     }\n+    pure fn ne(&&other: mono_param_id) -> bool { !self.eq(other) }\n }\n \n impl mono_id_: cmp::Eq {\n     pure fn eq(&&other: mono_id_) -> bool {\n         return self.def == other.def && self.params == other.params;\n     }\n+    pure fn ne(&&other: mono_id_) -> bool { !self.eq(other) }\n }\n \n pure fn hash_mono_id(mi: &mono_id) -> uint {"}, {"sha": "f2525ce90b084b42e6c5211c2353f48da53d2bc6", "filename": "src/rustc/middle/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -748,4 +748,5 @@ impl CopyAction : cmp::Eq {\n             (DROP_EXISTING, _) => false,\n         }\n     }\n+    pure fn ne(&&other: CopyAction) -> bool { !self.eq(other) }\n }"}, {"sha": "b1ee870dbb58924280004f42af125cf5c57fdb93", "filename": "src/rustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -157,6 +157,7 @@ impl Dest : cmp::Eq {\n             (Ignore, _) => false,\n         }\n     }\n+    pure fn ne(&&other: Dest) -> bool { !self.eq(other) }\n }\n \n fn trans_to_appropriate_llval(bcx: block,\n@@ -1265,6 +1266,7 @@ impl cast_kind : cmp::Eq {\n             (cast_other, _) => false,\n         }\n     }\n+    pure fn ne(&&other: cast_kind) -> bool { !self.eq(other) }\n }\n \n fn cast_type_kind(t: ty::t) -> cast_kind {\n@@ -1381,4 +1383,4 @@ fn trans_assign_op(bcx: block,\n \n fn shorten(+x: ~str) -> ~str {\n     if x.len() > 60 { x.substr(0, 60) } else { x }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c5cb5ee300bac0f4a64f381a66a8462bf366719b", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -44,6 +44,7 @@ impl x86_64_reg_class: cmp::Eq {\n     pure fn eq(&&other: x86_64_reg_class) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: x86_64_reg_class) -> bool { !self.eq(other) }\n }\n \n fn is_sse(++c: x86_64_reg_class) -> bool {"}, {"sha": "fa2f021c9b2a80870fc45166d77856a275dbb0b6", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -234,6 +234,7 @@ impl intern_key: cmp::Eq {\n     pure fn eq(&&other: intern_key) -> bool {\n         self.struct == other.struct && self.o_def_id == other.o_def_id\n     }\n+    pure fn ne(&&other: intern_key) -> bool { !self.eq(other) }\n }\n \n enum ast_ty_to_ty_cache_entry {\n@@ -258,6 +259,7 @@ impl region_variance: cmp::Eq {\n             (rv_contravariant, _) => false\n         }\n     }\n+    pure fn ne(&&other: region_variance) -> bool { !self.eq(other) }\n }\n \n // N.B.: Borrows from inlined content are not accurately deserialized.  This\n@@ -272,6 +274,7 @@ impl borrow : cmp::Eq {\n     pure fn eq(&&other: borrow) -> bool {\n         self.region == other.region && self.mutbl == other.mutbl\n     }\n+    pure fn ne(&&other: borrow) -> bool { !self.eq(other) }\n }\n \n type ctxt =\n@@ -367,6 +370,7 @@ impl closure_kind : cmp::Eq {\n     pure fn eq(&&other: closure_kind) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: closure_kind) -> bool { !self.eq(other) }\n }\n \n enum fn_proto {\n@@ -391,6 +395,7 @@ impl fn_proto : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: fn_proto) -> bool { !self.eq(other) }\n }\n \n /**\n@@ -436,6 +441,7 @@ impl param_ty: cmp::Eq {\n     pure fn eq(&&other: param_ty) -> bool {\n         self.idx == other.idx && self.def_id == other.def_id\n     }\n+    pure fn ne(&&other: param_ty) -> bool { !self.eq(other) }\n }\n \n /// Representation of regions:\n@@ -3709,18 +3715,21 @@ impl mt : cmp::Eq {\n     pure fn eq(&&other: mt) -> bool {\n         self.ty == other.ty && self.mutbl == other.mutbl\n     }\n+    pure fn ne(&&other: mt) -> bool { !self.eq(other) }\n }\n \n impl arg : cmp::Eq {\n     pure fn eq(&&other: arg) -> bool {\n         self.mode == other.mode && self.ty == other.ty\n     }\n+    pure fn ne(&&other: arg) -> bool { !self.eq(other) }\n }\n \n impl field : cmp::Eq {\n     pure fn eq(&&other: field) -> bool {\n         self.ident == other.ident && self.mt == other.mt\n     }\n+    pure fn ne(&&other: field) -> bool { !self.eq(other) }\n }\n \n impl vstore : cmp::Eq {\n@@ -3752,6 +3761,7 @@ impl vstore : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: vstore) -> bool { !self.eq(other) }\n }\n \n impl FnMeta : cmp::Eq {\n@@ -3761,43 +3771,43 @@ impl FnMeta : cmp::Eq {\n         self.bounds == other.bounds &&\n         self.ret_style == other.ret_style\n     }\n+    pure fn ne(&&other: FnMeta) -> bool { !self.eq(other) }\n }\n \n impl FnSig : cmp::Eq {\n     pure fn eq(&&other: FnSig) -> bool {\n         self.inputs == other.inputs &&\n         self.output == other.output\n     }\n+    pure fn ne(&&other: FnSig) -> bool { !self.eq(other) }\n+    \n }\n \n impl<M: cmp::Eq> FnTyBase<M> : cmp::Eq {\n     pure fn eq(&&other: FnTyBase<M>) -> bool {\n         self.meta == other.meta && self.sig == other.sig\n     }\n+    pure fn ne(&&other: FnTyBase<M>) -> bool { !self.eq(other) }\n }\n \n impl TyVid: cmp::Eq {\n-    pure fn eq(&&other: TyVid) -> bool {\n-        *self == *other\n-    }\n+    pure fn eq(&&other: TyVid) -> bool { *self == *other }\n+    pure fn ne(&&other: TyVid) -> bool { *self != *other }\n }\n \n impl IntVid: cmp::Eq {\n-    pure fn eq(&&other: IntVid) -> bool {\n-        *self == *other\n-    }\n+    pure fn eq(&&other: IntVid) -> bool { *self == *other }\n+    pure fn ne(&&other: IntVid) -> bool { *self != *other }\n }\n \n impl FnVid: cmp::Eq {\n-    pure fn eq(&&other: FnVid) -> bool {\n-        *self == *other\n-    }\n+    pure fn eq(&&other: FnVid) -> bool { *self == *other }\n+    pure fn ne(&&other: FnVid) -> bool { *self != *other }\n }\n \n impl RegionVid: cmp::Eq {\n-    pure fn eq(&&other: RegionVid) -> bool {\n-        *self == *other\n-    }\n+    pure fn eq(&&other: RegionVid) -> bool { *self == *other }\n+    pure fn ne(&&other: RegionVid) -> bool { *self != *other }\n }\n \n impl region : cmp::Eq {\n@@ -3835,6 +3845,7 @@ impl region : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: region) -> bool { !self.eq(other) }\n }\n \n impl bound_region : cmp::Eq {\n@@ -3866,6 +3877,7 @@ impl bound_region : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: bound_region) -> bool { !self.eq(other) }\n }\n \n impl substs : cmp::Eq {\n@@ -3874,12 +3886,14 @@ impl substs : cmp::Eq {\n         self.self_ty == other.self_ty &&\n         self.tps == other.tps\n     }\n+    pure fn ne(&&other: substs) -> bool { !self.eq(other) }\n }\n \n impl InferTy : cmp::Eq {\n     pure fn eq(&&other: InferTy) -> bool {\n         self.to_hash() == other.to_hash()\n     }\n+    pure fn ne(&&other: InferTy) -> bool { !self.eq(other) }\n }\n \n impl sty : cmp::Eq {\n@@ -4038,6 +4052,7 @@ impl sty : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: sty) -> bool { !self.eq(other) }\n }\n \n impl param_bound : cmp::Eq {\n@@ -4075,12 +4090,12 @@ impl param_bound : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: param_bound) -> bool { !self.eq(other) }\n }\n \n impl kind : cmp::Eq {\n-    pure fn eq(&&other: kind) -> bool {\n-        *self == *other\n-    }\n+    pure fn eq(&&other: kind) -> bool { *self == *other }\n+    pure fn ne(&&other: kind) -> bool { *self != *other }\n }\n \n "}, {"sha": "96d0cf9c110751b2540d31f1d4800e28cb395085", "filename": "src/rustc/middle/typeck/infer/region_var_bindings.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -346,6 +346,7 @@ impl Constraint: cmp::Eq {\n             (ConstrainVarSubReg(*), _) => false\n         }\n     }\n+    pure fn ne(&&other: Constraint) -> bool { !self.eq(other) }\n }\n \n struct TwoRegions {\n@@ -357,6 +358,7 @@ impl TwoRegions: cmp::Eq {\n     pure fn eq(&&other: TwoRegions) -> bool {\n         self.a == other.a && self.b == other.b\n     }\n+    pure fn ne(&&other: TwoRegions) -> bool { !self.eq(other) }\n }\n \n enum UndoLogEntry {\n@@ -753,6 +755,7 @@ impl Direction : cmp::Eq {\n     pure fn eq(&&other: Direction) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: Direction) -> bool { !self.eq(other) }\n }\n \n enum Classification { Expanding, Contracting }\n@@ -761,6 +764,7 @@ impl Classification : cmp::Eq {\n     pure fn eq(&&other: Classification) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: Classification) -> bool { !self.eq(other) }\n }\n \n enum GraphNodeValue { NoValue, Value(region), ErrorValue }"}, {"sha": "b0c01025320baf72c37df997d2389a558637793c", "filename": "src/rustdoc/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fconfig.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -22,6 +22,7 @@ impl output_format : cmp::Eq {\n     pure fn eq(&&other: output_format) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: output_format) -> bool { !self.eq(other) }\n }\n \n /// How to organize the output\n@@ -36,6 +37,7 @@ impl output_style : cmp::Eq {\n     pure fn eq(&&other: output_style) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: output_style) -> bool { !self.eq(other) }\n }\n \n /// The configuration for a rustdoc session"}, {"sha": "5161fdff270aa43ca364af5d37a89106fb3d197c", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -10,16 +10,16 @@ impl doc_ : cmp::Eq {\n     pure fn eq(&&other: doc_) -> bool {\n         self.pages == other.pages\n     }\n+    pure fn ne(&&other: doc_) -> bool { !self.eq(other) }\n }\n \n enum doc {\n     doc_(doc_)\n }\n \n impl doc : cmp::Eq {\n-    pure fn eq(&&other: doc) -> bool {\n-        *self == *other\n-    }\n+    pure fn eq(&&other: doc) -> bool { *self == *other }\n+    pure fn ne(&&other: doc) -> bool { *self != *other }\n }\n \n enum page {\n@@ -44,6 +44,7 @@ impl page : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: page) -> bool { !self.eq(other) }\n }\n \n enum implementation {\n@@ -55,6 +56,7 @@ impl implementation : cmp::Eq {\n     pure fn eq(&&other: implementation) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: implementation) -> bool { !self.eq(other) }\n }\n \n \n@@ -71,6 +73,7 @@ impl section : cmp::Eq {\n     pure fn eq(&&other: section) -> bool {\n         self.header == other.header && self.body == other.body\n     }\n+    pure fn ne(&&other: section) -> bool { !self.eq(other) }\n }\n \n // FIXME (#2596): We currently give topmod the name of the crate.  There\n@@ -84,6 +87,7 @@ impl cratedoc : cmp::Eq {\n     pure fn eq(&&other: cratedoc) -> bool {\n         self.topmod == other.topmod\n     }\n+    pure fn ne(&&other: cratedoc) -> bool { !self.eq(other) }\n }\n \n enum itemtag {\n@@ -150,6 +154,7 @@ impl itemtag : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: itemtag) -> bool { !self.eq(other) }\n }\n \n type itemdoc = {\n@@ -173,6 +178,7 @@ impl itemdoc : cmp::Eq {\n         self.sections == other.sections &&\n         self.reexport == other.reexport\n     }\n+    pure fn ne(&&other: itemdoc) -> bool { !self.eq(other) }\n }\n \n type simpleitemdoc = {\n@@ -184,6 +190,7 @@ impl simpleitemdoc : cmp::Eq {\n     pure fn eq(&&other: simpleitemdoc) -> bool {\n         self.item == other.item && self.sig == other.sig\n     }\n+    pure fn ne(&&other: simpleitemdoc) -> bool { !self.eq(other) }\n }\n \n type moddoc_ = {\n@@ -198,16 +205,16 @@ impl moddoc_ : cmp::Eq {\n         self.items == other.items &&\n         self.index == other.index\n     }\n+    pure fn ne(&&other: moddoc_) -> bool { !self.eq(other) }\n }\n \n enum moddoc {\n     moddoc_(moddoc_)\n }\n \n impl moddoc : cmp::Eq {\n-    pure fn eq(&&other: moddoc) -> bool {\n-        *self == *other\n-    }\n+    pure fn eq(&&other: moddoc) -> bool { *self == *other }\n+    pure fn ne(&&other: moddoc) -> bool { *self != *other }\n }\n \n type nmoddoc = {\n@@ -222,6 +229,7 @@ impl nmoddoc : cmp::Eq {\n         self.fns == other.fns &&\n         self.index == other.index\n     }\n+    pure fn ne(&&other: nmoddoc) -> bool { !self.eq(other) }\n }\n \n type constdoc = simpleitemdoc;\n@@ -237,6 +245,7 @@ impl enumdoc : cmp::Eq {\n     pure fn eq(&&other: enumdoc) -> bool {\n         self.item == other.item && self.variants == other.variants\n     }\n+    pure fn ne(&&other: enumdoc) -> bool { !self.eq(other) }\n }\n \n type variantdoc = {\n@@ -251,6 +260,7 @@ impl variantdoc : cmp::Eq {\n         self.desc == other.desc &&\n         self.sig == other.sig\n     }\n+    pure fn ne(&&other: variantdoc) -> bool { !self.eq(other) }\n }\n \n type traitdoc = {\n@@ -262,6 +272,7 @@ impl traitdoc : cmp::Eq {\n     pure fn eq(&&other: traitdoc) -> bool {\n         self.item == other.item && self.methods == other.methods\n     }\n+    pure fn ne(&&other: traitdoc) -> bool { !self.eq(other) }\n }\n \n type methoddoc = {\n@@ -282,6 +293,7 @@ impl methoddoc : cmp::Eq {\n         self.sig == other.sig &&\n         self.implementation == other.implementation\n     }\n+    pure fn ne(&&other: methoddoc) -> bool { !self.eq(other) }\n }\n \n type impldoc = {\n@@ -298,6 +310,7 @@ impl impldoc : cmp::Eq {\n         self.self_ty == other.self_ty &&\n         self.methods == other.methods\n     }\n+    pure fn ne(&&other: impldoc) -> bool { !self.eq(other) }\n }\n \n type tydoc = simpleitemdoc;\n@@ -310,6 +323,7 @@ impl index : cmp::Eq {\n     pure fn eq(&&other: index) -> bool {\n         self.entries == other.entries\n     }\n+    pure fn ne(&&other: index) -> bool { !self.eq(other) }\n }\n \n /**\n@@ -336,6 +350,7 @@ impl index_entry : cmp::Eq {\n         self.brief == other.brief &&\n         self.link == other.link\n     }\n+    pure fn ne(&&other: index_entry) -> bool { !self.eq(other) }\n }\n \n impl doc {"}, {"sha": "0599a6657e60fc4f328c61ab7c7e4689f34e45a3", "filename": "src/test/run-pass/auto_serialize.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto_serialize.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -46,13 +46,14 @@ impl an_enum : cmp::Eq {\n     pure fn eq(&&other: an_enum) -> bool {\n         self.v == other.v\n     }\n+    pure fn ne(&&other: an_enum) -> bool { !self.eq(other) }\n }\n \n impl point : cmp::Eq {\n     pure fn eq(&&other: point) -> bool {\n-        self.x == other.x &&\n-            self.y == other.y\n+        self.x == other.x && self.y == other.y\n     }\n+    pure fn ne(&&other: point) -> bool { !self.eq(other) }\n }\n \n impl<T:cmp::Eq> quark<T> : cmp::Eq {\n@@ -68,13 +69,15 @@ impl<T:cmp::Eq> quark<T> : cmp::Eq {\n           }\n         }\n     }\n+    pure fn ne(&&other: quark<T>) -> bool { !self.eq(other) }\n }\n \n \n impl c_like : cmp::Eq {\n     pure fn eq(&&other: c_like) -> bool {\n         self as int == other as int\n     }\n+    pure fn ne(&&other: c_like) -> bool { !self.eq(other) }\n }\n \n impl expr : cmp::Eq {\n@@ -100,6 +103,7 @@ impl expr : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: expr) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]\n@@ -109,6 +113,7 @@ impl<T:cmp::Eq> spanned<T> : cmp::Eq {\n     pure fn eq(&&other: spanned<T>) -> bool {\n         self.lo == other.lo && self.hi == other.hi && self.node.eq(other.node)\n     }\n+    pure fn ne(&&other: spanned<T>) -> bool { !self.eq(other) }\n }\n \n #[auto_serialize]"}, {"sha": "88391d952593a7edd1320ff2f7200152dbf2b81e", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -93,6 +93,7 @@ impl p : cmp::Eq {\n     pure fn eq(&&other: p) -> bool {\n         self.x == other.x && self.y == other.y\n     }\n+    pure fn ne(&&other: p) -> bool { !self.eq(other) }\n }\n \n fn test_class() {"}, {"sha": "ba878327d9b9130589f3eba45e1cc8b229de5cf7", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -7,6 +7,7 @@ impl cat_type : cmp::Eq {\n     pure fn eq(&&other: cat_type) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: cat_type) -> bool { !self.eq(other) }\n }\n \n // Very silly -- this just returns the value of the name field"}, {"sha": "f69c8782c9ae567d9fe0810aa1b5fbf9f33c6ba4", "filename": "src/test/run-pass/coherence-impl-in-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -2,5 +2,6 @@ fn main() {\n     enum x { foo }\n     impl x : core::cmp::Eq {\n         pure fn eq(&&other: x) -> bool { self as int == other as int }\n+        pure fn ne(&&other: x) -> bool { !self.eq(other) }\n     }\n }"}, {"sha": "653150e68f7d7239fbb98ece3d90f7ba284b853b", "filename": "src/test/run-pass/const-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-struct.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -5,6 +5,7 @@ impl foo : cmp::Eq {\n     pure fn eq(&&other: foo) -> bool {\n         self.a == other.a && self.b == other.b && self.c == other.c\n     }\n+    pure fn ne(&&other: foo) -> bool { !self.eq(other) }\n }\n \n const x : foo = foo { a:1, b:2, c: 3 };"}, {"sha": "0b736be2168ca2f8678633cb0145ef313f188517", "filename": "src/test/run-pass/empty-tag.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-tag.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -4,6 +4,7 @@ impl chan : cmp::Eq {\n     pure fn eq(&&other: chan) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: chan) -> bool { !self.eq(other) }\n }\n \n fn wrapper3(i: chan) {"}, {"sha": "3d634fa55a518a0e403b06ba796b1d6e4853ff7d", "filename": "src/test/run-pass/export-unexported-dep.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -12,6 +12,7 @@ mod foo {\n         pure fn eq(&&other: t) -> bool {\n             (self as uint) == (other as uint)\n         }\n+        pure fn ne(&&other: t) -> bool { !self.eq(other) }\n     }\n \n     fn f() -> t { return t1; }"}, {"sha": "c4d50c33139e0cb837fc3c8bac1b36eb28d1b22e", "filename": "src/test/run-pass/expr-alt-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -14,6 +14,7 @@ impl mood : cmp::Eq {\n     pure fn eq(&&other: mood) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: mood) -> bool { !self.eq(other) }\n }\n \n fn test_tag() {"}, {"sha": "62fc904a82c09bef510290275607642fd1c82a5e", "filename": "src/test/run-pass/expr-if-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -14,6 +14,7 @@ impl mood : cmp::Eq {\n     pure fn eq(&&other: mood) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: mood) -> bool { !self.eq(other) }\n }\n \n fn test_tag() {"}, {"sha": "8508d251b64ca785766ab1e286fd0430abf3aa2d", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -12,6 +12,7 @@ mod pipes {\n         pure fn eq(&&other: state) -> bool {\n             (self as uint) == (other as uint)\n         }\n+        pure fn ne(&&other: state) -> bool { !self.eq(other) }\n     }\n \n     type packet<T: send> = {"}, {"sha": "37e249b6cf083fee74ca30b54f63078ff8a8d63a", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -31,6 +31,7 @@ impl Point : cmp::Eq {\n     pure fn eq(&&other: Point) -> bool {\n         self.x == other.x && self.y == other.y\n     }\n+    pure fn ne(&&other: Point) -> bool { !self.eq(other) }\n }\n \n fn main() {"}, {"sha": "06b3cb3c3f6de410511a7631c9b51fb5ea1b503c", "filename": "src/test/run-pass/structured-compare.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructured-compare.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -6,6 +6,7 @@ impl foo : cmp::Eq {\n     pure fn eq(&&other: foo) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: foo) -> bool { !self.eq(other) }\n }\n \n fn main() {"}, {"sha": "f0dce1f624705c2bed2be98f37ff527a40950336", "filename": "src/test/run-pass/tag-variant-disr-val.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -13,6 +13,7 @@ impl color : cmp::Eq {\n     pure fn eq(&&other: color) -> bool {\n         (self as uint) == (other as uint)\n     }\n+    pure fn ne(&&other: color) -> bool { !self.eq(other) }\n }\n \n fn main() {"}, {"sha": "defa0de79a11e3ddbfe8bb9de6209275e6bb9f3b", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb014eb3c3aa1ccaae1df407801dffa090499fd/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=feb014eb3c3aa1ccaae1df407801dffa090499fd", "patch": "@@ -71,6 +71,7 @@ impl t : cmp::Eq {\n             }\n         }\n     }\n+    pure fn ne(&&other: t) -> bool { !self.eq(other) }\n }\n \n fn test_tag() {"}]}