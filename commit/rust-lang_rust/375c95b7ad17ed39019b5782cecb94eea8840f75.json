{"sha": "375c95b7ad17ed39019b5782cecb94eea8840f75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NWM5NWI3YWQxN2VkMzkwMTliNTc4MmNlY2I5NGVlYTg4NDBmNzU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-09-10T22:35:21Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-09-17T04:53:20Z"}, "message": "move std_inject to libsyntax", "tree": {"sha": "1056207b9e422e1ff45fb73806ab63d2084d7ad2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1056207b9e422e1ff45fb73806ab63d2084d7ad2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/375c95b7ad17ed39019b5782cecb94eea8840f75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/375c95b7ad17ed39019b5782cecb94eea8840f75", "html_url": "https://github.com/rust-lang/rust/commit/375c95b7ad17ed39019b5782cecb94eea8840f75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/375c95b7ad17ed39019b5782cecb94eea8840f75/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "520671f1500885ffc2c5096e9150a665b63c2e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/520671f1500885ffc2c5096e9150a665b63c2e0d", "html_url": "https://github.com/rust-lang/rust/commit/520671f1500885ffc2c5096e9150a665b63c2e0d"}], "stats": {"total": 66, "additions": 35, "deletions": 31}, "files": [{"sha": "4c6bb2de180608f0dbd7fb6ebea875590e1eff3f", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/375c95b7ad17ed39019b5782cecb94eea8840f75/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375c95b7ad17ed39019b5782cecb94eea8840f75/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=375c95b7ad17ed39019b5782cecb94eea8840f75", "patch": "@@ -197,8 +197,14 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     time(time_passes, \"gated feature checking\", (), |_|\n          front::feature_gate::check_crate(sess, &krate));\n \n+    let any_exe = sess.crate_types.borrow().iter().any(|ty| {\n+        *ty == config::CrateTypeExecutable\n+    });\n+\n     krate = time(time_passes, \"crate injection\", krate, |krate|\n-                 front::std_inject::maybe_inject_crates_ref(sess, krate));\n+                 syntax::std_inject::maybe_inject_crates_ref(krate,\n+                                                             sess.opts.alt_std_name.clone(),\n+                                                             any_exe));\n \n     // strip before expansion to allow macros to depend on\n     // configuration variables e.g/ in\n@@ -299,7 +305,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n                                                   sess.diagnostic()));\n \n     krate = time(time_passes, \"prelude injection\", krate, |krate|\n-                 front::std_inject::maybe_inject_prelude(sess, krate));\n+                 syntax::std_inject::maybe_inject_prelude(krate));\n \n     time(time_passes, \"checking that all macro invocations are gone\", &krate, |krate|\n          syntax::ext::expand::check_for_macros(&sess.parse_sess, krate));"}, {"sha": "e1a82d1db7c529bbf225ec55a4edf8451a079612", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/375c95b7ad17ed39019b5782cecb94eea8840f75/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375c95b7ad17ed39019b5782cecb94eea8840f75/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=375c95b7ad17ed39019b5782cecb94eea8840f75", "patch": "@@ -117,7 +117,6 @@ pub mod middle {\n }\n \n pub mod front {\n-    pub mod std_inject;\n     pub mod feature_gate;\n }\n "}, {"sha": "8122aa1dcc21c671d9ec827a680aeed5cbe7dfef", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/375c95b7ad17ed39019b5782cecb94eea8840f75/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375c95b7ad17ed39019b5782cecb94eea8840f75/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=375c95b7ad17ed39019b5782cecb94eea8840f75", "patch": "@@ -67,6 +67,7 @@ pub mod owned_slice;\n pub mod parse;\n pub mod ptr;\n pub mod show_span;\n+pub mod std_inject;\n pub mod test;\n pub mod visit;\n "}, {"sha": "8a7e14643c1a7a1bcdb7e1e680a0db02bae090df", "filename": "src/libsyntax/std_inject.rs", "status": "renamed", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/375c95b7ad17ed39019b5782cecb94eea8840f75/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375c95b7ad17ed39019b5782cecb94eea8840f75/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=375c95b7ad17ed39019b5782cecb94eea8840f75", "patch": "@@ -8,36 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use driver::config;\n-use driver::session::Session;\n-\n-use syntax::ast;\n-use syntax::attr;\n-use syntax::codemap::DUMMY_SP;\n-use syntax::codemap;\n-use syntax::fold::Folder;\n-use syntax::fold;\n-use syntax::owned_slice::OwnedSlice;\n-use syntax::parse::token::InternedString;\n-use syntax::parse::token::special_idents;\n-use syntax::parse::token;\n-use syntax::ptr::P;\n-use syntax::util::small_vector::SmallVector;\n+use ast;\n+use attr;\n+use codemap::DUMMY_SP;\n+use codemap;\n+use fold::Folder;\n+use fold;\n+use owned_slice::OwnedSlice;\n+use parse::token::InternedString;\n+use parse::token::special_idents;\n+use parse::token;\n+use ptr::P;\n+use util::small_vector::SmallVector;\n \n use std::mem;\n \n-pub fn maybe_inject_crates_ref(sess: &Session, krate: ast::Crate)\n+pub fn maybe_inject_crates_ref(krate: ast::Crate, alt_std_name: Option<String>, any_exe: bool)\n                                -> ast::Crate {\n     if use_std(&krate) {\n-        inject_crates_ref(sess, krate)\n+        inject_crates_ref(krate, alt_std_name, any_exe)\n     } else {\n         krate\n     }\n }\n \n-pub fn maybe_inject_prelude(sess: &Session, krate: ast::Crate) -> ast::Crate {\n+pub fn maybe_inject_prelude(krate: ast::Crate) -> ast::Crate {\n     if use_std(&krate) {\n-        inject_prelude(sess, krate)\n+        inject_prelude(krate)\n     } else {\n         krate\n     }\n@@ -56,14 +53,15 @@ fn no_prelude(attrs: &[ast::Attribute]) -> bool {\n }\n \n struct StandardLibraryInjector<'a> {\n-    sess: &'a Session,\n+    alt_std_name: Option<String>,\n+    any_exe: bool,\n }\n \n impl<'a> fold::Folder for StandardLibraryInjector<'a> {\n     fn fold_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n \n         // The name to use in `extern crate \"name\" as std;`\n-        let actual_crate_name = match self.sess.opts.alt_std_name {\n+        let actual_crate_name = match self.alt_std_name {\n             Some(ref s) => token::intern_and_get_ident(s.as_slice()),\n             None => token::intern_and_get_ident(\"std\"),\n         };\n@@ -83,10 +81,7 @@ impl<'a> fold::Folder for StandardLibraryInjector<'a> {\n             span: DUMMY_SP\n         });\n \n-        let any_exe = self.sess.crate_types.borrow().iter().any(|ty| {\n-            *ty == config::CrateTypeExecutable\n-        });\n-        if use_start(&krate) && any_exe {\n+        if use_start(&krate) && self.any_exe {\n             let visible_rt_name = \"rt\";\n             let actual_rt_name = \"native\";\n             // Gensym the ident so it can't be named\n@@ -124,9 +119,12 @@ impl<'a> fold::Folder for StandardLibraryInjector<'a> {\n     }\n }\n \n-fn inject_crates_ref(sess: &Session, krate: ast::Crate) -> ast::Crate {\n+fn inject_crates_ref(krate: ast::Crate,\n+                     alt_std_name: Option<String>,\n+                     any_exe: bool) -> ast::Crate {\n     let mut fold = StandardLibraryInjector {\n-        sess: sess,\n+        alt_std_name: alt_std_name,\n+        any_exe: any_exe,\n     };\n     fold.fold_crate(krate)\n }\n@@ -231,7 +229,7 @@ impl<'a> fold::Folder for PreludeInjector<'a> {\n     }\n }\n \n-fn inject_prelude(_: &Session, krate: ast::Crate) -> ast::Crate {\n+fn inject_prelude(krate: ast::Crate) -> ast::Crate {\n     let mut fold = PreludeInjector;\n     fold.fold_crate(krate)\n }", "previous_filename": "src/librustc/front/std_inject.rs"}]}