{"sha": "be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "node_id": "C_kwDOAAsO6NoAKGJlOGU1YmExNTdhNGFlNDk0ZjliNDIxOWIzYjg0OGU0NGVhNWU4ZDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-04T11:08:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-04T11:08:23Z"}, "message": "Auto merge of #109917 - compiler-errors:remove-relation-methods, r=oli-obk\n\nRemove `intercrate` and `mark_ambiguous` from `TypeRelation`\n\nFixes #109863\n\nPulls this logic into `super_combine_tys`, which has access to `InferCtxt` and takes a `ObligationEmittingRelation` -- both of which simplify the logic here.\n\nr? `@oli-obk` `@aliemjay`", "tree": {"sha": "79d87ac62c6eae1a1e65510b01910ee189d2d84b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79d87ac62c6eae1a1e65510b01910ee189d2d84b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "html_url": "https://github.com/rust-lang/rust/commit/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c96e40da81165beef4f273f44e96eeef5a1bd30", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c96e40da81165beef4f273f44e96eeef5a1bd30", "html_url": "https://github.com/rust-lang/rust/commit/7c96e40da81165beef4f273f44e96eeef5a1bd30"}, {"sha": "a368316905a6c8d4b7a0100c92f6f0186c7c2db8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a368316905a6c8d4b7a0100c92f6f0186c7c2db8", "html_url": "https://github.com/rust-lang/rust/commit/a368316905a6c8d4b7a0100c92f6f0186c7c2db8"}], "stats": {"total": 155, "additions": 22, "deletions": 133}, "files": [{"sha": "111bf5e545552ce22bd9b4b1f8d410d2ad86f35c", "filename": "compiler/rustc_hir_analysis/src/check/dropck.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs?ref=be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "patch": "@@ -253,10 +253,6 @@ impl<'tcx> TypeRelation<'tcx> for SimpleEqRelation<'tcx> {\n         self.tcx\n     }\n \n-    fn intercrate(&self) -> bool {\n-        false\n-    }\n-\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         self.param_env\n     }\n@@ -269,10 +265,6 @@ impl<'tcx> TypeRelation<'tcx> for SimpleEqRelation<'tcx> {\n         true\n     }\n \n-    fn mark_ambiguous(&mut self) {\n-        bug!()\n-    }\n-\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         _: ty::Variance,"}, {"sha": "fe45b5ebe61b1106b0df57fbe4faff6753e1732d", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "patch": "@@ -137,6 +137,18 @@ impl<'tcx> InferCtxt<'tcx> {\n                 Err(TypeError::Sorts(ty::relate::expected_found(relation, a, b)))\n             }\n \n+            // During coherence, opaque types should be treated as *possibly*\n+            // equal to each other, even if their generic params differ, as\n+            // they could resolve to the same hidden type, even for different\n+            // generic params.\n+            (\n+                &ty::Alias(ty::Opaque, ty::AliasTy { def_id: a_def_id, .. }),\n+                &ty::Alias(ty::Opaque, ty::AliasTy { def_id: b_def_id, .. }),\n+            ) if self.intercrate && a_def_id == b_def_id => {\n+                relation.register_predicates([ty::Binder::dummy(ty::PredicateKind::Ambiguous)]);\n+                Ok(a)\n+            }\n+\n             _ => ty::relate::super_relate_tys(relation, a, b),\n         }\n     }\n@@ -505,10 +517,6 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n             Obligation::new(self.infcx.tcx, self.trace.cause.clone(), self.param_env, to_pred)\n         }))\n     }\n-\n-    pub fn mark_ambiguous(&mut self) {\n-        self.register_predicates([ty::Binder::dummy(ty::PredicateKind::Ambiguous)]);\n-    }\n }\n \n struct Generalizer<'cx, 'tcx> {\n@@ -581,10 +589,6 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    fn intercrate(&self) -> bool {\n-        self.infcx.intercrate\n-    }\n-\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         self.param_env\n     }\n@@ -597,10 +601,6 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n         true\n     }\n \n-    fn mark_ambiguous(&mut self) {\n-        span_bug!(self.cause.span, \"opaque types are handled in `tys`\");\n-    }\n-\n     fn binders<T>(\n         &mut self,\n         a: ty::Binder<'tcx, T>,"}, {"sha": "fe4a2dd3800733b3da3c33320bb36f46bba30879", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "patch": "@@ -35,10 +35,6 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n         self.fields.tcx()\n     }\n \n-    fn intercrate(&self) -> bool {\n-        self.fields.infcx.intercrate\n-    }\n-\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         self.fields.param_env\n     }\n@@ -47,10 +43,6 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n         self.a_is_expected\n     }\n \n-    fn mark_ambiguous(&mut self) {\n-        self.fields.mark_ambiguous();\n-    }\n-\n     fn relate_item_substs(\n         &mut self,\n         _item_def_id: DefId,"}, {"sha": "c9956b60a56dbe790534c16019566dac74c6874a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "patch": "@@ -2697,11 +2697,6 @@ impl<'tcx> TypeRelation<'tcx> for SameTypeModuloInfer<'_, 'tcx> {\n         self.0.tcx\n     }\n \n-    fn intercrate(&self) -> bool {\n-        assert!(!self.0.intercrate);\n-        false\n-    }\n-\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         // Unused, only for consts which we treat as always equal\n         ty::ParamEnv::empty()\n@@ -2715,10 +2710,6 @@ impl<'tcx> TypeRelation<'tcx> for SameTypeModuloInfer<'_, 'tcx> {\n         true\n     }\n \n-    fn mark_ambiguous(&mut self) {\n-        bug!()\n-    }\n-\n     fn relate_with_variance<T: relate::Relate<'tcx>>(\n         &mut self,\n         _variance: ty::Variance,"}, {"sha": "2f659d9a665273e58344fc90d7a23f017e672808", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "patch": "@@ -29,11 +29,6 @@ impl<'tcx> TypeRelation<'tcx> for Glb<'_, '_, 'tcx> {\n         \"Glb\"\n     }\n \n-    fn intercrate(&self) -> bool {\n-        assert!(!self.fields.infcx.intercrate);\n-        false\n-    }\n-\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.fields.tcx()\n     }\n@@ -46,10 +41,6 @@ impl<'tcx> TypeRelation<'tcx> for Glb<'_, '_, 'tcx> {\n         self.a_is_expected\n     }\n \n-    fn mark_ambiguous(&mut self) {\n-        bug!(\"mark_ambiguous used outside of coherence\");\n-    }\n-\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         variance: ty::Variance,"}, {"sha": "e41ec7e6c0105b76299109ceccdb53d9963df7a3", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "patch": "@@ -29,11 +29,6 @@ impl<'tcx> TypeRelation<'tcx> for Lub<'_, '_, 'tcx> {\n         \"Lub\"\n     }\n \n-    fn intercrate(&self) -> bool {\n-        assert!(!self.fields.infcx.intercrate);\n-        false\n-    }\n-\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.fields.tcx()\n     }\n@@ -46,10 +41,6 @@ impl<'tcx> TypeRelation<'tcx> for Lub<'_, '_, 'tcx> {\n         self.a_is_expected\n     }\n \n-    fn mark_ambiguous(&mut self) {\n-        bug!(\"mark_ambiguous used outside of coherence\");\n-    }\n-\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         variance: ty::Variance,"}, {"sha": "7616a996da106b9f1cf71b1df24ecc71ed80824b", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "patch": "@@ -443,10 +443,6 @@ where\n         self.infcx.tcx\n     }\n \n-    fn intercrate(&self) -> bool {\n-        self.infcx.intercrate\n-    }\n-\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         self.delegate.param_env()\n     }\n@@ -459,17 +455,6 @@ where\n         true\n     }\n \n-    fn mark_ambiguous(&mut self) {\n-        let cause = ObligationCause::dummy_with_span(self.delegate.span());\n-        let param_env = self.delegate.param_env();\n-        self.delegate.register_obligations(vec![Obligation::new(\n-            self.tcx(),\n-            cause,\n-            param_env,\n-            ty::Binder::dummy(ty::PredicateKind::Ambiguous),\n-        )]);\n-    }\n-\n     #[instrument(skip(self, info), level = \"trace\", ret)]\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n@@ -834,11 +819,6 @@ where\n         self.infcx.tcx\n     }\n \n-    fn intercrate(&self) -> bool {\n-        assert!(!self.infcx.intercrate);\n-        false\n-    }\n-\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         self.delegate.param_env()\n     }\n@@ -851,10 +831,6 @@ where\n         true\n     }\n \n-    fn mark_ambiguous(&mut self) {\n-        bug!()\n-    }\n-\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         variance: ty::Variance,"}, {"sha": "01f900f050ee9f801113de4c99ec6f86ac5924ac", "filename": "compiler/rustc_infer/src/infer/outlives/test_type_match.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs?ref=be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "patch": "@@ -137,10 +137,6 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n         \"Match\"\n     }\n \n-    fn intercrate(&self) -> bool {\n-        false\n-    }\n-\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -151,10 +147,6 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n         true\n     } // irrelevant\n \n-    fn mark_ambiguous(&mut self) {\n-        bug!()\n-    }\n-\n     #[instrument(level = \"trace\", skip(self))]\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,"}, {"sha": "0dd73a6e999eefa64b093a279ad15cc02d880107", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "patch": "@@ -35,10 +35,6 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n         \"Sub\"\n     }\n \n-    fn intercrate(&self) -> bool {\n-        self.fields.infcx.intercrate\n-    }\n-\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.fields.infcx.tcx\n     }\n@@ -51,10 +47,6 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n         self.a_is_expected\n     }\n \n-    fn mark_ambiguous(&mut self) {\n-        self.fields.mark_ambiguous()\n-    }\n-\n     fn with_cause<F, R>(&mut self, cause: Cause, f: F) -> R\n     where\n         F: FnOnce(&mut Self) -> R,"}, {"sha": "468c2c818b247cad88d1798ddd108feac3223601", "filename": "compiler/rustc_middle/src/ty/_match.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs?ref=be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "patch": "@@ -37,21 +37,13 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n         self.tcx\n     }\n \n-    fn intercrate(&self) -> bool {\n-        false\n-    }\n-\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         self.param_env\n     }\n     fn a_is_expected(&self) -> bool {\n         true\n     } // irrelevant\n \n-    fn mark_ambiguous(&mut self) {\n-        bug!()\n-    }\n-\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         _: ty::Variance,"}, {"sha": "46c931d61dc993a04dbcb89da658ac8c22421126", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "patch": "@@ -22,8 +22,6 @@ pub enum Cause {\n pub trait TypeRelation<'tcx>: Sized {\n     fn tcx(&self) -> TyCtxt<'tcx>;\n \n-    fn intercrate(&self) -> bool;\n-\n     fn param_env(&self) -> ty::ParamEnv<'tcx>;\n \n     /// Returns a static string we can use for printouts.\n@@ -33,9 +31,6 @@ pub trait TypeRelation<'tcx>: Sized {\n     /// relation. Just affects error messages.\n     fn a_is_expected(&self) -> bool;\n \n-    /// Used during coherence. If called, must emit an always-ambiguous obligation.\n-    fn mark_ambiguous(&mut self);\n-\n     fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R\n     where\n         F: FnOnce(&mut Self) -> R,\n@@ -559,23 +554,16 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n             &ty::Alias(ty::Opaque, ty::AliasTy { def_id: a_def_id, substs: a_substs, .. }),\n             &ty::Alias(ty::Opaque, ty::AliasTy { def_id: b_def_id, substs: b_substs, .. }),\n         ) if a_def_id == b_def_id => {\n-            if relation.intercrate() {\n-                // During coherence, opaque types should be treated as equal to each other, even if their generic params\n-                // differ, as they could resolve to the same hidden type, even for different generic params.\n-                relation.mark_ambiguous();\n-                Ok(a)\n-            } else {\n-                let opt_variances = tcx.variances_of(a_def_id);\n-                let substs = relate_substs_with_variances(\n-                    relation,\n-                    a_def_id,\n-                    opt_variances,\n-                    a_substs,\n-                    b_substs,\n-                    false, // do not fetch `type_of(a_def_id)`, as it will cause a cycle\n-                )?;\n-                Ok(tcx.mk_opaque(a_def_id, substs))\n-            }\n+            let opt_variances = tcx.variances_of(a_def_id);\n+            let substs = relate_substs_with_variances(\n+                relation,\n+                a_def_id,\n+                opt_variances,\n+                a_substs,\n+                b_substs,\n+                false, // do not fetch `type_of(a_def_id)`, as it will cause a cycle\n+            )?;\n+            Ok(tcx.mk_opaque(a_def_id, substs))\n         }\n \n         _ => Err(TypeError::Sorts(expected_found(relation, a, b))),"}, {"sha": "7e1dba4ed2626da668a5b97471ac9858477ec44e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/method_chain.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs?ref=be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "patch": "@@ -21,10 +21,6 @@ impl<'a, 'tcx> TypeRelation<'tcx> for CollectAllMismatches<'a, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    fn intercrate(&self) -> bool {\n-        false\n-    }\n-\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         self.param_env\n     }\n@@ -33,10 +29,6 @@ impl<'a, 'tcx> TypeRelation<'tcx> for CollectAllMismatches<'a, 'tcx> {\n         true\n     }\n \n-    fn mark_ambiguous(&mut self) {\n-        bug!()\n-    }\n-\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         _: ty::Variance,"}]}