{"sha": "b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzY2I4ZjY4Y2M1NGUyYjNkODFjMWQyMzViY2NjNGEyYjE1NDJmYjc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-14T21:51:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-10-05T09:22:26Z"}, "message": "Turn compatibility lint `match_of_unit_variant_via_paren_dotdot` into a hard error", "tree": {"sha": "7bfa8aa01f2a95cf4b4d6193b53cdf2df37da47a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bfa8aa01f2a95cf4b4d6193b53cdf2df37da47a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7", "html_url": "https://github.com/rust-lang/rust/commit/b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "165a03d98376622024b87bfc2d37d40fd6370a90", "url": "https://api.github.com/repos/rust-lang/rust/commits/165a03d98376622024b87bfc2d37d40fd6370a90", "html_url": "https://github.com/rust-lang/rust/commit/165a03d98376622024b87bfc2d37d40fd6370a90"}], "stats": {"total": 116, "additions": 21, "deletions": 95}, "files": [{"sha": "bca3ed93812026b062645a37c57658c85e95ed73", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7", "patch": "@@ -44,9 +44,8 @@ use hir;\n use hir::map::Definitions;\n use hir::map::definitions::DefPathData;\n use hir::def_id::{DefIndex, DefId};\n-use hir::def::{Def, CtorKind, PathResolution};\n+use hir::def::{Def, PathResolution};\n use session::Session;\n-use lint;\n \n use std::collections::BTreeMap;\n use std::iter;\n@@ -857,22 +856,8 @@ impl<'a> LoweringContext<'a> {\n                 }\n                 PatKind::Lit(ref e) => hir::PatKind::Lit(self.lower_expr(e)),\n                 PatKind::TupleStruct(ref path, ref pats, ddpos) => {\n-                    match self.resolver.get_resolution(p.id).map(|d| d.base_def) {\n-                        Some(def @ Def::StructCtor(_, CtorKind::Const)) |\n-                        Some(def @ Def::VariantCtor(_, CtorKind::Const)) => {\n-                            // Temporarily lower `UnitVariant(..)` into `UnitVariant`\n-                            // for backward compatibility.\n-                            let msg = format!(\"expected tuple struct/variant, found {} `{}`\",\n-                                            def.kind_name(), path);\n-                            self.sess.add_lint(\n-                                lint::builtin::MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n-                                p.id, p.span, msg\n-                            );\n-                            hir::PatKind::Path(None, self.lower_path(path))\n-                        }\n-                        _ => hir::PatKind::TupleStruct(self.lower_path(path),\n+                    hir::PatKind::TupleStruct(self.lower_path(path),\n                                         pats.iter().map(|x| self.lower_pat(x)).collect(), ddpos)\n-                    }\n                 }\n                 PatKind::Path(ref opt_qself, ref path) => {\n                     let opt_qself = opt_qself.as_ref().map(|qself| {"}, {"sha": "7fc3f638979ff4a671608a6ba2a66205f265d908", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7", "patch": "@@ -143,12 +143,6 @@ declare_lint! {\n      the struct or enum has `#[derive(PartialEq, Eq)]`\"\n }\n \n-declare_lint! {\n-    pub MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n-    Deny,\n-    \"unit struct or enum variant erroneously allowed to match via path::ident(..)\"\n-}\n-\n declare_lint! {\n     pub RAW_POINTER_DERIVE,\n     Warn,\n@@ -226,7 +220,6 @@ impl LintPass for HardwiredLints {\n             INVALID_TYPE_PARAM_DEFAULT,\n             ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN,\n             ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN,\n-            MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n             CONST_ERR,\n             RAW_POINTER_DERIVE,\n             TRANSMUTE_FROM_FN_ITEM_TYPES,"}, {"sha": "47d248fe2f2416ab7e74b415cbf98b17e4aa9bae", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7", "patch": "@@ -172,11 +172,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(SUPER_OR_SELF_IN_GLOBAL_PATH),\n             reference: \"PR #32403 <https://github.com/rust-lang/rust/pull/32403>\",\n         },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT),\n-            reference: \"RFC 218 <https://github.com/rust-lang/rfcs/blob/\\\n-                        master/text/0218-empty-struct-with-braces.md>\",\n-        },\n         FutureIncompatibleInfo {\n             id: LintId::of(TRANSMUTE_FROM_FN_ITEM_TYPES),\n             reference: \"issue #19925 <https://github.com/rust-lang/rust/issues/19925>\","}, {"sha": "b573a78d3b327c5e862b175e3c0bc9c030a8246f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7", "patch": "@@ -2412,15 +2412,11 @@ impl<'a> Resolver<'a> {\n                     self.record_def(pat.id, resolution);\n                 }\n \n-                PatKind::TupleStruct(ref path, ref pats, ddpos) => {\n+                PatKind::TupleStruct(ref path, ..) => {\n                     self.resolve_pattern_path(pat.id, None, path, ValueNS, |def| {\n                         match def {\n                             Def::StructCtor(_, CtorKind::Fn) |\n                             Def::VariantCtor(_, CtorKind::Fn) => true,\n-                            // `UnitVariant(..)` is accepted for backward compatibility.\n-                            Def::StructCtor(_, CtorKind::Const) |\n-                            Def::VariantCtor(_, CtorKind::Const)\n-                                if pats.is_empty() && ddpos.is_some() => true,\n                             _ => false,\n                         }\n                     }, \"tuple struct/variant\");"}, {"sha": "993f10e08067b2375582332a1359a9020a83faad", "filename": "src/test/compile-fail/empty-struct-unit-pat-2.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/165a03d98376622024b87bfc2d37d40fd6370a90/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/165a03d98376622024b87bfc2d37d40fd6370a90/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat-2.rs?ref=165a03d98376622024b87bfc2d37d40fd6370a90", "patch": "@@ -1,50 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Can't use unit struct as enum pattern\n-\n-// aux-build:empty-struct.rs\n-\n-#![feature(relaxed_adts)]\n-\n-extern crate empty_struct;\n-use empty_struct::*;\n-\n-struct Empty2;\n-\n-enum E {\n-    Empty4\n-}\n-\n-fn main() {\n-    let e2 = Empty2;\n-    let e4 = E::Empty4;\n-    let xe2 = XEmpty2;\n-    let xe4 = XE::XEmpty4;\n-\n-    match e2 {\n-        Empty2() => ()\n-        //~^ ERROR expected tuple struct/variant, found unit struct `Empty2`\n-    }\n-    match xe2 {\n-        XEmpty2() => ()\n-        //~^ ERROR expected tuple struct/variant, found unit struct `XEmpty2`\n-    }\n-\n-    match e4 {\n-        E::Empty4() => ()\n-        //~^ ERROR expected tuple struct/variant, found unit variant `E::Empty4`\n-    }\n-    match xe4 {\n-        XE::XEmpty4() => (),\n-        //~^ ERROR expected tuple struct/variant, found unit variant `XE::XEmpty4`\n-        _ => {},\n-    }\n-}"}, {"sha": "90f6ae5755f81403f0ae45380bca414796f262f2", "filename": "src/test/compile-fail/empty-struct-unit-pat.rs", "status": "renamed", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs?ref=b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Can't use unit struct as enum pattern\n+// Can't use unit struct as tuple struct pattern\n \n // aux-build:empty-struct.rs\n \n@@ -23,30 +23,39 @@ enum E {\n     Empty4\n }\n \n-// remove attribute after warning cycle and promoting warnings to errors\n fn main() {\n     let e2 = Empty2;\n     let e4 = E::Empty4;\n     let xe2 = XEmpty2;\n     let xe4 = XE::XEmpty4;\n \n+    match e2 {\n+        Empty2() => () //~ ERROR expected tuple struct/variant, found unit struct `Empty2`\n+    }\n+    match xe2 {\n+        XEmpty2() => () //~ ERROR expected tuple struct/variant, found unit struct `XEmpty2`\n+    }\n     match e2 {\n         Empty2(..) => () //~ ERROR expected tuple struct/variant, found unit struct `Empty2`\n-            //~^ WARNING hard error\n     }\n     match xe2 {\n         XEmpty2(..) => () //~ ERROR expected tuple struct/variant, found unit struct `XEmpty2`\n-            //~^ WARNING hard error\n     }\n \n+    match e4 {\n+        E::Empty4() => () //~ ERROR expected tuple struct/variant, found unit variant `E::Empty4`\n+    }\n+    match xe4 {\n+        XE::XEmpty4() => (),\n+        //~^ ERROR expected tuple struct/variant, found unit variant `XE::XEmpty4`\n+        _ => {},\n+    }\n     match e4 {\n         E::Empty4(..) => () //~ ERROR expected tuple struct/variant, found unit variant `E::Empty4`\n-            //~^ WARNING hard error\n     }\n     match xe4 {\n         XE::XEmpty4(..) => (),\n-            //~^ ERROR expected tuple struct/variant, found unit variant `XE::XEmpty4`\n-            //~| WARNING hard error\n+        //~^ ERROR expected tuple struct/variant, found unit variant `XE::XEmpty4`\n         _ => {},\n     }\n }", "previous_filename": "src/test/compile-fail/empty-struct-unit-pat-1.rs"}, {"sha": "b60c537e1e6f78217cbcd820457de0268fca4939", "filename": "src/test/compile-fail/issue-pr29383.rs", "status": "renamed", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7/src%2Ftest%2Fcompile-fail%2Fissue-pr29383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7/src%2Ftest%2Fcompile-fail%2Fissue-pr29383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-pr29383.rs?ref=b3cb8f68cc54e2b3d81c1d235bccc4a2b1542fb7", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(match_of_unit_variant_via_paren_dotdot)]\n-\n enum E {\n     A,\n     B,\n@@ -18,7 +16,7 @@ enum E {\n fn main() {\n     match None {\n         None => {}\n-        Some(E::A(..)) => {}\n-        Some(E::B(..)) => {}\n+        Some(E::A(..)) => {} //~ ERROR expected tuple struct/variant, found unit variant `E::A`\n+        Some(E::B(..)) => {} //~ ERROR expected tuple struct/variant, found unit variant `E::B`\n     }\n }", "previous_filename": "src/test/run-pass/issue-pr29383.rs"}]}