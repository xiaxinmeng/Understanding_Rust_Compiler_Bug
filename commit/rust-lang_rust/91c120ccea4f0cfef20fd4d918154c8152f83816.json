{"sha": "91c120ccea4f0cfef20fd4d918154c8152f83816", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYzEyMGNjZWE0ZjBjZmVmMjBmZDRkOTE4MTU0YzgxNTJmODM4MTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-10T23:34:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T15:28:51Z"}, "message": "introduce Source struct", "tree": {"sha": "f175e9308486f8594618236d63737042f546b37a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f175e9308486f8594618236d63737042f546b37a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91c120ccea4f0cfef20fd4d918154c8152f83816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91c120ccea4f0cfef20fd4d918154c8152f83816", "html_url": "https://github.com/rust-lang/rust/commit/91c120ccea4f0cfef20fd4d918154c8152f83816", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91c120ccea4f0cfef20fd4d918154c8152f83816/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e505fe9d7b96f3454711e923c70d763c5cee5f47", "url": "https://api.github.com/repos/rust-lang/rust/commits/e505fe9d7b96f3454711e923c70d763c5cee5f47", "html_url": "https://github.com/rust-lang/rust/commit/e505fe9d7b96f3454711e923c70d763c5cee5f47"}], "stats": {"total": 62, "additions": 36, "deletions": 26}, "files": [{"sha": "36679e99b031d347bb5bae19fe4aedd9e237b382", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91c120ccea4f0cfef20fd4d918154c8152f83816/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c120ccea4f0cfef20fd4d918154c8152f83816/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=91c120ccea4f0cfef20fd4d918154c8152f83816", "patch": "@@ -59,8 +59,8 @@ impl StructData {\n         db: &(impl DefDatabase + AstDatabase),\n         struct_: Struct,\n     ) -> Arc<StructData> {\n-        let (_, struct_def) = struct_.source(db);\n-        Arc::new(StructData::new(&*struct_def))\n+        let src = struct_.source(db);\n+        Arc::new(StructData::new(&*src.ast))\n     }\n }\n \n@@ -211,9 +211,8 @@ impl StructField {\n         let es;\n         let (file_id, struct_kind) = match self.parent {\n             VariantDef::Struct(s) => {\n-                let (file_id, source) = s.source(db);\n-                ss = source;\n-                (file_id, ss.kind())\n+                ss = s.source(db);\n+                (ss.file_id, ss.ast.kind())\n             }\n             VariantDef::EnumVariant(e) => {\n                 let (file_id, source) = e.source(db);"}, {"sha": "3469da18a60685d0223d825881a94c9ead27c7ba", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/91c120ccea4f0cfef20fd4d918154c8152f83816/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c120ccea4f0cfef20fd4d918154c8152f83816/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=91c120ccea4f0cfef20fd4d918154c8152f83816", "patch": "@@ -20,6 +20,17 @@ use crate::{\n     type_ref::Mutability,\n };\n \n+pub struct Source<T> {\n+    pub file_id: HirFileId,\n+    pub ast: T,\n+}\n+\n+impl<T> From<(HirFileId, T)> for Source<T> {\n+    fn from((file_id, ast): (HirFileId, T)) -> Self {\n+        Source { file_id, ast }\n+    }\n+}\n+\n /// hir::Crate describes a single crate. It's the main interface with which\n /// a crate's dependencies interact. Mostly, it should be just a proxy for the\n /// root module.\n@@ -354,11 +365,8 @@ pub struct Struct {\n }\n \n impl Struct {\n-    pub fn source(\n-        self,\n-        db: &(impl DefDatabase + AstDatabase),\n-    ) -> (HirFileId, TreeArc<ast::StructDef>) {\n-        self.id.source(db)\n+    pub fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::StructDef>> {\n+        self.id.source(db).into()\n     }\n \n     pub fn module(self, db: &impl HirDatabase) -> Module {"}, {"sha": "edd937901ad2e58485b1047709fcab9858b53410", "filename": "crates/ra_hir/src/docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91c120ccea4f0cfef20fd4d918154c8152f83816/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c120ccea4f0cfef20fd4d918154c8152f83816/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdocs.rs?ref=91c120ccea4f0cfef20fd4d918154c8152f83816", "patch": "@@ -76,7 +76,7 @@ pub(crate) fn documentation_query(\n             FieldSource::Named(named) => docs_from_ast(&*named),\n             FieldSource::Pos(..) => return None,\n         },\n-        DocDef::Struct(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Struct(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::Enum(it) => docs_from_ast(&*it.source(db).1),\n         DocDef::EnumVariant(it) => docs_from_ast(&*it.source(db).1),\n         DocDef::Static(it) => docs_from_ast(&*it.source(db).1),"}, {"sha": "294a007216891b602ec4653f184b05c3fd2bd37b", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91c120ccea4f0cfef20fd4d918154c8152f83816/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c120ccea4f0cfef20fd4d918154c8152f83816/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=91c120ccea4f0cfef20fd4d918154c8152f83816", "patch": "@@ -69,7 +69,7 @@ impl GenericParams {\n         let start = generics.parent_params.as_ref().map(|p| p.params.len()).unwrap_or(0) as u32;\n         match def {\n             GenericDef::Function(it) => generics.fill(&*it.source(db).1, start),\n-            GenericDef::Struct(it) => generics.fill(&*it.source(db).1, start),\n+            GenericDef::Struct(it) => generics.fill(&*it.source(db).ast, start),\n             GenericDef::Union(it) => generics.fill(&*it.source(db).1, start),\n             GenericDef::Enum(it) => generics.fill(&*it.source(db).1, start),\n             GenericDef::Trait(it) => {"}, {"sha": "c02bc005b15bfc98cda1ec128d5c6d321bc1c229", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/91c120ccea4f0cfef20fd4d918154c8152f83816/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c120ccea4f0cfef20fd4d918154c8152f83816/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=91c120ccea4f0cfef20fd4d918154c8152f83816", "patch": "@@ -189,12 +189,12 @@ impl NavigationTarget {\n     pub(crate) fn from_adt_def(db: &RootDatabase, adt_def: hir::AdtDef) -> NavigationTarget {\n         match adt_def {\n             hir::AdtDef::Struct(s) => {\n-                let (file_id, node) = s.source(db);\n+                let src = s.source(db);\n                 NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                    node.doc_comment_text(),\n-                    node.short_label(),\n+                    src.file_id.original_file(db),\n+                    &*src.ast,\n+                    src.ast.doc_comment_text(),\n+                    src.ast.short_label(),\n                 )\n             }\n             hir::AdtDef::Union(s) => {\n@@ -226,12 +226,12 @@ impl NavigationTarget {\n             hir::ModuleDef::Module(module) => NavigationTarget::from_module(db, module),\n             hir::ModuleDef::Function(func) => NavigationTarget::from_function(db, func),\n             hir::ModuleDef::Struct(s) => {\n-                let (file_id, node) = s.source(db);\n+                let src = s.source(db);\n                 NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                    node.doc_comment_text(),\n-                    node.short_label(),\n+                    src.file_id.original_file(db),\n+                    &*src.ast,\n+                    src.ast.doc_comment_text(),\n+                    src.ast.short_label(),\n                 )\n             }\n             hir::ModuleDef::Union(s) => {"}, {"sha": "80445761ce7f769e3860eae9e398322fb9cd14ee", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/91c120ccea4f0cfef20fd4d918154c8152f83816/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c120ccea4f0cfef20fd4d918154c8152f83816/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=91c120ccea4f0cfef20fd4d918154c8152f83816", "patch": "@@ -136,8 +136,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                         res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n                     }\n                     hir::ModuleDef::Struct(it) => {\n-                        let it = it.source(db).1;\n-                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                        let src = it.source(db);\n+                        res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n                     }\n                     hir::ModuleDef::Union(it) => {\n                         let it = it.source(db).1;\n@@ -176,8 +176,11 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                 if let Some((adt_def, _)) = ty.as_adt() {\n                     match adt_def {\n                         hir::AdtDef::Struct(it) => {\n-                            let it = it.source(db).1;\n-                            res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                            let src = it.source(db);\n+                            res.extend(hover_text(\n+                                src.ast.doc_comment_text(),\n+                                src.ast.short_label(),\n+                            ))\n                         }\n                         hir::AdtDef::Union(it) => {\n                             let it = it.source(db).1;"}]}