{"sha": "45aadf7ae627752dd7c0e8709fa8ff592c2d075e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YWFkZjdhZTYyNzc1MmRkN2MwZTg3MDlmYThmZjU5MmMyZDA3NWU=", "commit": {"author": {"name": "Mikhail Babenko", "email": "misha-babenko@yandex.ru", "date": "2019-11-22T04:34:10Z"}, "committer": {"name": "Mikhail Babenko", "email": "misha-babenko@yandex.ru", "date": "2019-11-25T15:05:56Z"}, "message": "add `enclosing_scope` param to `rustc_on_unimplmented`\n\nadd ui test\n\ncompute enclosing_scope_span on demand\n\nadd scope test\n\nmake tidy happy\n\nstylistic and typo fixes", "tree": {"sha": "0591e561b2629ed9550bd971a5b66b63f694edc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0591e561b2629ed9550bd971a5b66b63f694edc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45aadf7ae627752dd7c0e8709fa8ff592c2d075e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45aadf7ae627752dd7c0e8709fa8ff592c2d075e", "html_url": "https://github.com/rust-lang/rust/commit/45aadf7ae627752dd7c0e8709fa8ff592c2d075e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45aadf7ae627752dd7c0e8709fa8ff592c2d075e/comments", "author": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "582a4eaee6b3674a34aeefaa5ecad0207bac9b4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/582a4eaee6b3674a34aeefaa5ecad0207bac9b4b", "html_url": "https://github.com/rust-lang/rust/commit/582a4eaee6b3674a34aeefaa5ecad0207bac9b4b"}], "stats": {"total": 157, "additions": 143, "deletions": 14}, "files": [{"sha": "40c7db71f52f296a3f096040516c0c6ce96bc351", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/45aadf7ae627752dd7c0e8709fa8ff592c2d075e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45aadf7ae627752dd7c0e8709fa8ff592c2d075e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=45aadf7ae627752dd7c0e8709fa8ff592c2d075e", "patch": "@@ -519,7 +519,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         ) {\n             command.evaluate(self.tcx, trait_ref, &flags[..])\n         } else {\n-            OnUnimplementedNote::empty()\n+            OnUnimplementedNote::default()\n         }\n     }\n \n@@ -695,6 +695,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         fallback_has_occurred: bool,\n         points_at_arg: bool,\n     ) {\n+        let tcx = self.tcx;\n         let span = obligation.cause.span;\n \n         let mut err = match *error {\n@@ -730,6 +731,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             message,\n                             label,\n                             note,\n+                            enclosing_scope,\n                         } = self.on_unimplemented_note(trait_ref, obligation);\n                         let have_alt_message = message.is_some() || label.is_some();\n                         let is_try = self.tcx.sess.source_map().span_to_snippet(span)\n@@ -794,6 +796,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             // If it has a custom `#[rustc_on_unimplemented]` note, let's display it\n                             err.note(s.as_str());\n                         }\n+                        if let Some(ref s) = enclosing_scope {\n+                            let enclosing_scope_span = tcx.def_span(\n+                                tcx.hir()\n+                                    .opt_local_def_id(obligation.cause.body_id)\n+                                    .unwrap_or_else(|| {\n+                                        tcx.hir().body_owner_def_id(hir::BodyId {\n+                                            hir_id: obligation.cause.body_id,\n+                                        })\n+                                    }),\n+                            );\n+\n+                            err.span_label(enclosing_scope_span, s.as_str());\n+                        }\n \n                         self.suggest_borrow_on_unsized_slice(&obligation.cause.code, &mut err);\n                         self.suggest_fn_call(&obligation, &mut err, &trait_ref, points_at_arg);"}, {"sha": "604f39dcf293b3503a82355461208a10251be27b", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/45aadf7ae627752dd7c0e8709fa8ff592c2d075e/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45aadf7ae627752dd7c0e8709fa8ff592c2d075e/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=45aadf7ae627752dd7c0e8709fa8ff592c2d075e", "patch": "@@ -22,18 +22,15 @@ pub struct OnUnimplementedDirective {\n     pub message: Option<OnUnimplementedFormatString>,\n     pub label: Option<OnUnimplementedFormatString>,\n     pub note: Option<OnUnimplementedFormatString>,\n+    pub enclosing_scope: Option<OnUnimplementedFormatString>,\n }\n \n+#[derive(Default)]\n pub struct OnUnimplementedNote {\n     pub message: Option<String>,\n     pub label: Option<String>,\n     pub note: Option<String>,\n-}\n-\n-impl OnUnimplementedNote {\n-    pub fn empty() -> Self {\n-        OnUnimplementedNote { message: None, label: None, note: None }\n-    }\n+    pub enclosing_scope: Option<String>,\n }\n \n fn parse_error(\n@@ -85,24 +82,33 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut message = None;\n         let mut label = None;\n         let mut note = None;\n+        let mut enclosing_scope = None;\n         let mut subcommands = vec![];\n+\n+        let parse_value = |value_str| {\n+                OnUnimplementedFormatString::try_parse(tcx, trait_def_id, value_str, span)\n+                    .map(Some)\n+            };\n+\n         for item in item_iter {\n             if item.check_name(sym::message) && message.is_none() {\n                 if let Some(message_) = item.value_str() {\n-                    message = Some(OnUnimplementedFormatString::try_parse(\n-                        tcx, trait_def_id, message_, span)?);\n+                    message = parse_value(message_)?;\n                     continue;\n                 }\n             } else if item.check_name(sym::label) && label.is_none() {\n                 if let Some(label_) = item.value_str() {\n-                    label = Some(OnUnimplementedFormatString::try_parse(\n-                        tcx, trait_def_id, label_, span)?);\n+                    label = parse_value(label_)?;\n                     continue;\n                 }\n             } else if item.check_name(sym::note) && note.is_none() {\n                 if let Some(note_) = item.value_str() {\n-                    note = Some(OnUnimplementedFormatString::try_parse(\n-                        tcx, trait_def_id, note_, span)?);\n+                    note = parse_value(note_)?;\n+                    continue;\n+                }\n+            } else if item.check_name(sym::enclosing_scope) && enclosing_scope.is_none() {\n+                if let Some(enclosing_scope_) = item.value_str() {\n+                    enclosing_scope = parse_value(enclosing_scope_)?;\n                     continue;\n                 }\n             } else if item.check_name(sym::on) && is_root &&\n@@ -130,7 +136,14 @@ impl<'tcx> OnUnimplementedDirective {\n         if errored {\n             Err(ErrorReported)\n         } else {\n-            Ok(OnUnimplementedDirective { condition, message, label, subcommands, note })\n+            Ok(OnUnimplementedDirective {\n+                condition,\n+                subcommands,\n+                message,\n+                label,\n+                note,\n+                enclosing_scope\n+            })\n         }\n     }\n \n@@ -157,6 +170,7 @@ impl<'tcx> OnUnimplementedDirective {\n                 label: Some(OnUnimplementedFormatString::try_parse(\n                     tcx, trait_def_id, value, attr.span)?),\n                 note: None,\n+                enclosing_scope: None,\n             }))\n         } else {\n             return Err(ErrorReported);\n@@ -174,6 +188,7 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut message = None;\n         let mut label = None;\n         let mut note = None;\n+        let mut enclosing_scope = None;\n         info!(\"evaluate({:?}, trait_ref={:?}, options={:?})\", self, trait_ref, options);\n \n         for command in self.subcommands.iter().chain(Some(self)).rev() {\n@@ -202,6 +217,10 @@ impl<'tcx> OnUnimplementedDirective {\n             if let Some(ref note_) = command.note {\n                 note = Some(note_.clone());\n             }\n+\n+            if let Some(ref enclosing_scope_) = command.enclosing_scope {\n+                enclosing_scope = Some(enclosing_scope_.clone());\n+            }\n         }\n \n         let options: FxHashMap<Symbol, String> = options.into_iter()\n@@ -211,6 +230,7 @@ impl<'tcx> OnUnimplementedDirective {\n             label: label.map(|l| l.format(tcx, trait_ref, &options)),\n             message: message.map(|m| m.format(tcx, trait_ref, &options)),\n             note: note.map(|n| n.format(tcx, trait_ref, &options)),\n+            enclosing_scope: enclosing_scope.map(|e_s| e_s.format(tcx, trait_ref, &options)),\n         }\n     }\n }"}, {"sha": "3e122c0906e28921c1d3079c913a719465eabed5", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45aadf7ae627752dd7c0e8709fa8ff592c2d075e/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45aadf7ae627752dd7c0e8709fa8ff592c2d075e/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=45aadf7ae627752dd7c0e8709fa8ff592c2d075e", "patch": "@@ -279,6 +279,7 @@ symbols! {\n         Err,\n         Eq,\n         Equal,\n+        enclosing_scope,\n         except,\n         exclusive_range_pattern,\n         exhaustive_integer_patterns,"}, {"sha": "881bff63f5f63974cebc462cf46fc7e6eafae95e", "filename": "src/test/ui/on-unimplemented/enclosing-scope.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/45aadf7ae627752dd7c0e8709fa8ff592c2d075e/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45aadf7ae627752dd7c0e8709fa8ff592c2d075e/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.rs?ref=45aadf7ae627752dd7c0e8709fa8ff592c2d075e", "patch": "@@ -0,0 +1,27 @@\n+// Test scope annotations from `enclosing_scope` parameter\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_on_unimplemented(enclosing_scope=\"in this scope\")]\n+trait Trait{}\n+\n+struct Foo;\n+\n+fn f<T: Trait>(x: T) {}\n+\n+fn main() {\n+    let x = || {\n+        f(Foo{}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n+        let y = || {\n+            f(Foo{}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n+        };\n+    };\n+\n+    {\n+        {\n+            f(Foo{}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n+        }\n+    }\n+\n+    f(Foo{}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n+}"}, {"sha": "092e560330b4c55b40bd48da96989a528212ed80", "filename": "src/test/ui/on-unimplemented/enclosing-scope.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/45aadf7ae627752dd7c0e8709fa8ff592c2d075e/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45aadf7ae627752dd7c0e8709fa8ff592c2d075e/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr?ref=45aadf7ae627752dd7c0e8709fa8ff592c2d075e", "patch": "@@ -0,0 +1,66 @@\n+error[E0277]: the trait bound `Foo: Trait` is not satisfied\n+  --> $DIR/enclosing-scope.rs:14:11\n+   |\n+LL |   fn f<T: Trait>(x: T) {}\n+   |      -    ----- required by this bound in `f`\n+...\n+LL |       let x = || {\n+   |  _____________-\n+LL | |         f(Foo{});\n+   | |           ^^^^^ the trait `Trait` is not implemented for `Foo`\n+LL | |         let y = || {\n+LL | |             f(Foo{});\n+LL | |         };\n+LL | |     };\n+   | |_____- in this scope\n+\n+error[E0277]: the trait bound `Foo: Trait` is not satisfied\n+  --> $DIR/enclosing-scope.rs:16:15\n+   |\n+LL |   fn f<T: Trait>(x: T) {}\n+   |      -    ----- required by this bound in `f`\n+...\n+LL |           let y = || {\n+   |  _________________-\n+LL | |             f(Foo{});\n+   | |               ^^^^^ the trait `Trait` is not implemented for `Foo`\n+LL | |         };\n+   | |_________- in this scope\n+\n+error[E0277]: the trait bound `Foo: Trait` is not satisfied\n+  --> $DIR/enclosing-scope.rs:22:15\n+   |\n+LL |   fn f<T: Trait>(x: T) {}\n+   |      -    ----- required by this bound in `f`\n+LL | \n+LL | / fn main() {\n+LL | |     let x = || {\n+LL | |         f(Foo{});\n+LL | |         let y = || {\n+...  |\n+LL | |             f(Foo{});\n+   | |               ^^^^^ the trait `Trait` is not implemented for `Foo`\n+...  |\n+LL | |     f(Foo{});\n+LL | | }\n+   | |_- in this scope\n+\n+error[E0277]: the trait bound `Foo: Trait` is not satisfied\n+  --> $DIR/enclosing-scope.rs:26:7\n+   |\n+LL |   fn f<T: Trait>(x: T) {}\n+   |      -    ----- required by this bound in `f`\n+LL | \n+LL | / fn main() {\n+LL | |     let x = || {\n+LL | |         f(Foo{});\n+LL | |         let y = || {\n+...  |\n+LL | |     f(Foo{});\n+   | |       ^^^^^ the trait `Trait` is not implemented for `Foo`\n+LL | | }\n+   | |_- in this scope\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}