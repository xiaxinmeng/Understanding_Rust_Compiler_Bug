{"sha": "ef6100e846f215b92f0d3b951557ed2528000f61", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNjEwMGU4NDZmMjE1YjkyZjBkM2I5NTE1NTdlZDI1MjgwMDBmNjE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-08-06T08:48:36Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-08T14:39:12Z"}, "message": "convert to future compat lint", "tree": {"sha": "005011785b815ab46cc56f37a8027734a9ef3533", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/005011785b815ab46cc56f37a8027734a9ef3533"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef6100e846f215b92f0d3b951557ed2528000f61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6100e846f215b92f0d3b951557ed2528000f61", "html_url": "https://github.com/rust-lang/rust/commit/ef6100e846f215b92f0d3b951557ed2528000f61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef6100e846f215b92f0d3b951557ed2528000f61/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c81935e6dfd3877db266f0a01d9323f203f92eda", "url": "https://api.github.com/repos/rust-lang/rust/commits/c81935e6dfd3877db266f0a01d9323f203f92eda", "html_url": "https://github.com/rust-lang/rust/commit/c81935e6dfd3877db266f0a01d9323f203f92eda"}], "stats": {"total": 104, "additions": 65, "deletions": 39}, "files": [{"sha": "66497df66cad50b205380aa1c09eb70e856720b6", "filename": "compiler/rustc_session/src/lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ef6100e846f215b92f0d3b951557ed2528000f61/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6100e846f215b92f0d3b951557ed2528000f61/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs?ref=ef6100e846f215b92f0d3b951557ed2528000f61", "patch": "@@ -539,6 +539,16 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    pub CONST_EVALUATABLE_UNCHECKED,\n+    Warn,\n+    \"detects a generic constant is used in a type without a emitting a warning\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"TODO\",\n+        edition: None,\n+    };\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -612,6 +622,7 @@ declare_lint_pass! {\n         UNSAFE_OP_IN_UNSAFE_FN,\n         INCOMPLETE_INCLUDE,\n         CENUM_IMPL_DROP_CAST,\n+        CONST_EVALUATABLE_UNCHECKED,\n     ]\n }\n "}, {"sha": "87762cc43a199e76c5ad5ce20803262e25e90a26", "filename": "src/librustc_trait_selection/traits/const_evaluatable.rs", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ef6100e846f215b92f0d3b951557ed2528000f61/src%2Flibrustc_trait_selection%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6100e846f215b92f0d3b951557ed2528000f61/src%2Flibrustc_trait_selection%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fconst_evaluatable.rs?ref=ef6100e846f215b92f0d3b951557ed2528000f61", "patch": "@@ -1,19 +1,43 @@\n-use rustc_middle::ty::{self, TypeFoldable};\n+use rustc_hir::def::DefKind;\n use rustc_infer::infer::InferCtxt;\n+use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_span::Span;\n+use rustc_middle::ty::{self, TypeFoldable};\n+use rustc_session::lint;\n use rustc_span::def_id::DefId;\n-use rustc_middle::mir::interpret::ErrorHandled;\n-use rustc_hir::def::DefKind;\n+use rustc_span::Span;\n \n pub fn is_const_evaluatable<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n     def: ty::WithOptConstParam<DefId>,\n     substs: SubstsRef<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     span: Span,\n-) -> Result<(), ErrorHandled>\n-{\n+) -> Result<(), ErrorHandled> {\n+    let future_compat_lint = || {\n+        if let Some(local_def_id) = def.did.as_local() {\n+            infcx.tcx.struct_span_lint_hir(\n+                lint::builtin::CONST_EVALUATABLE_UNCHECKED,\n+                infcx.tcx.hir().as_local_hir_id(local_def_id),\n+                span,\n+                |err| {\n+                    err.build(\"cannot use constants which depend on generic parameters in types\")\n+                        .emit();\n+                },\n+            );\n+        }\n+    };\n+\n+    // FIXME: We should only try to evaluate a given constant here if it is fully concrete\n+    // as we don't want to allow things like `[u8; std::mem::size_of::<*mut T>()]`.\n+    //\n+    // We previously did not check this, so we only emit a future compat warning if\n+    // const evaluation succeeds and the given constant is still polymorphic for now\n+    // and hopefully soon change this to an error.\n+    //\n+    // See #74595 for more details about this.\n+    let concrete = infcx.const_eval_resolve(param_env, def, substs, None, Some(span));\n+\n     let def_kind = infcx.tcx.def_kind(def.did);\n     match def_kind {\n         DefKind::AnonConst => {\n@@ -22,33 +46,16 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n             } else {\n                 infcx.tcx.optimized_mir(def.did)\n             };\n-            if mir_body.is_polymorphic {\n-                return Err(ErrorHandled::TooGeneric);\n+            if mir_body.is_polymorphic && concrete.is_ok() {\n+                future_compat_lint();\n             }\n         }\n         _ => {\n-            if substs.has_param_types_or_consts() {\n-                return Err(ErrorHandled::TooGeneric);\n+            if substs.has_param_types_or_consts() && concrete.is_ok() {\n+                future_compat_lint();\n             }\n         }\n     }\n \n-    match infcx.const_eval_resolve(\n-        param_env,\n-        def,\n-        substs,\n-        None,\n-        Some(span),\n-    ) {\n-        Ok(_) => Ok(()),\n-        Err(err) => {\n-            if matches!(err, ErrorHandled::TooGeneric) {\n-                infcx.tcx.sess.delay_span_bug(\n-                    span,\n-                    &format!(\"ConstEvaluatable too generic: {:?}, {:?}, {:?}\", def, substs, param_env),\n-                );\n-            }\n-            Err(err)\n-        }\n-    }\n-}\n\\ No newline at end of file\n+    concrete.map(drop)\n+}"}, {"sha": "cdc1db4c0b48203e3adfad7d21c1b263147db072", "filename": "src/test/ui/enum-discriminant/issue-70453-polymorphic-ctfe.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef6100e846f215b92f0d3b951557ed2528000f61/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6100e846f215b92f0d3b951557ed2528000f61/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs?ref=ef6100e846f215b92f0d3b951557ed2528000f61", "patch": "@@ -1,3 +1,4 @@\n+// run-pass\n #![feature(arbitrary_enum_discriminant, core_intrinsics)]\n \n extern crate core;\n@@ -7,7 +8,8 @@ use core::intrinsics::discriminant_value;\n enum MyWeirdOption<T> {\n     None = 0,\n     Some(T) = core::mem::size_of::<*mut T>(),\n-    //~^ ERROR constant expression depends on a generic parameter\n+    //~^ WARN cannot use constants which depend on generic parameters in types\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n fn main() {"}, {"sha": "2aeb1b32bcb0a7c41b47dbb1239181ac86bbafe2", "filename": "src/test/ui/enum-discriminant/issue-70453-polymorphic-ctfe.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef6100e846f215b92f0d3b951557ed2528000f61/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6100e846f215b92f0d3b951557ed2528000f61/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr?ref=ef6100e846f215b92f0d3b951557ed2528000f61", "patch": "@@ -1,10 +1,12 @@\n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-70453-polymorphic-ctfe.rs:9:15\n+warning: cannot use constants which depend on generic parameters in types\n+  --> $DIR/issue-70453-polymorphic-ctfe.rs:10:15\n    |\n LL |     Some(T) = core::mem::size_of::<*mut T>(),\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this may fail depending on what value the parameter takes\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see TODO\n \n-error: aborting due to previous error\n+warning: 1 warning emitted\n "}, {"sha": "e10040652c78d36dbce7febd3c60b08c3f11d699", "filename": "src/test/ui/lazy_normalization_consts/issue-73980.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef6100e846f215b92f0d3b951557ed2528000f61/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6100e846f215b92f0d3b951557ed2528000f61/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.rs?ref=ef6100e846f215b92f0d3b951557ed2528000f61", "patch": "@@ -1,3 +1,4 @@\n+// check-pass\n #![feature(lazy_normalization_consts)]\n #![allow(incomplete_features)]\n \n@@ -9,6 +10,7 @@ impl<T: ?Sized> L<T> {\n }\n \n impl<T> X<T, [u8; L::<T>::S]> {}\n-//~^ ERROR constant expression depends on a generic parameter\n+//~^ WARN cannot use constants which depend on generic parameters\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {}"}, {"sha": "8636407a3a102dc9bdc4519c17886994c165dbe2", "filename": "src/test/ui/lazy_normalization_consts/issue-73980.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef6100e846f215b92f0d3b951557ed2528000f61/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6100e846f215b92f0d3b951557ed2528000f61/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.stderr?ref=ef6100e846f215b92f0d3b951557ed2528000f61", "patch": "@@ -1,10 +1,12 @@\n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-73980.rs:11:9\n+warning: cannot use constants which depend on generic parameters in types\n+  --> $DIR/issue-73980.rs:12:9\n    |\n LL | impl<T> X<T, [u8; L::<T>::S]> {}\n    |         ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this may fail depending on what value the parameter takes\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see TODO\n \n-error: aborting due to previous error\n+warning: 1 warning emitted\n "}]}