{"sha": "1644b174a73658b211ed700b3dad4223c9c937b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NDRiMTc0YTczNjU4YjIxMWVkNzAwYjNkYWQ0MjIzYzljOTM3Yjk=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-03-28T15:01:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-28T15:01:16Z"}, "message": "Merge pull request #2557 from topecongiro/vertical-layout-complex-attrs\n\nUse vertical layout for complex attributes", "tree": {"sha": "8b1cb2af05834ea1d5fb41273d817a964355fdf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b1cb2af05834ea1d5fb41273d817a964355fdf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1644b174a73658b211ed700b3dad4223c9c937b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJau648CRBK7hj4Ov3rIwAAdHIIAB1PXPD9d3gpy7clmO2qKIy8\nxl9N6d4iFS+bkdDhQFiFVhsdS6tVgOctsFDn4fCrgxEVkMx2k95XDmwIj58iTpu7\nIpxImDdG2IyOHm4DjQnFAeHYaVUMhCwME6s29hNvWQ7SukmAE2yAbcV0OiF8sKqr\naCx1sckcSVJB9RqeWwcvNNfrIWC1PBIMAr5FDbdrwiBT1HfqygGs1PACAVTDgtlQ\nwGx3Hlb3FhguXOX59+0lkXeCZQPBsWlgQA938tERkpJf5cyOsOeWYa+RiMUa96oz\n1TUuY2IEEZ6eDxojT6JU1OX78pCk2bZUgvos3a0Kwm3tkNPUJyCo6B4DJmw1j8I=\n=tANU\n-----END PGP SIGNATURE-----\n", "payload": "tree 8b1cb2af05834ea1d5fb41273d817a964355fdf7\nparent 8dd08ddd92f49daab1a4d60a42fc7682fd4d2770\nparent e5b403c944203bc6fd9383b3df1a21d00867a07c\nauthor Nick Cameron <nrc@ncameron.org> 1522249276 +0200\ncommitter GitHub <noreply@github.com> 1522249276 +0200\n\nMerge pull request #2557 from topecongiro/vertical-layout-complex-attrs\n\nUse vertical layout for complex attributes"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1644b174a73658b211ed700b3dad4223c9c937b9", "html_url": "https://github.com/rust-lang/rust/commit/1644b174a73658b211ed700b3dad4223c9c937b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1644b174a73658b211ed700b3dad4223c9c937b9/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dd08ddd92f49daab1a4d60a42fc7682fd4d2770", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd08ddd92f49daab1a4d60a42fc7682fd4d2770", "html_url": "https://github.com/rust-lang/rust/commit/8dd08ddd92f49daab1a4d60a42fc7682fd4d2770"}, {"sha": "e5b403c944203bc6fd9383b3df1a21d00867a07c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b403c944203bc6fd9383b3df1a21d00867a07c", "html_url": "https://github.com/rust-lang/rust/commit/e5b403c944203bc6fd9383b3df1a21d00867a07c"}], "stats": {"total": 74, "additions": 64, "deletions": 10}, "files": [{"sha": "3c4cc390e78d67700480bc30232201fd4adae966", "filename": "src/attr.rs", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/1644b174a73658b211ed700b3dad4223c9c937b9/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1644b174a73658b211ed700b3dad4223c9c937b9/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=1644b174a73658b211ed700b3dad4223c9c937b9", "patch": "@@ -10,6 +10,7 @@\n \n //! Format attributes and meta items.\n \n+use config::IndentStyle;\n use config::lists::*;\n use syntax::ast;\n use syntax::codemap::Span;\n@@ -183,17 +184,35 @@ fn has_newlines_before_after_comment(comment: &str) -> (&str, &str) {\n     (if mlb { \"\\n\" } else { \"\" }, if mla { \"\\n\" } else { \"\" })\n }\n \n+fn allow_mixed_tactic_for_nested_metaitem_list(list: &[ast::NestedMetaItem]) -> bool {\n+    list.iter().all(|nested_metaitem| {\n+        if let ast::NestedMetaItemKind::MetaItem(ref inner_metaitem) = nested_metaitem.node {\n+            match inner_metaitem.node {\n+                ast::MetaItemKind::List(..) | ast::MetaItemKind::NameValue(..) => false,\n+                _ => true,\n+            }\n+        } else {\n+            true\n+        }\n+    })\n+}\n+\n impl Rewrite for ast::MetaItem {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         Some(match self.node {\n             ast::MetaItemKind::Word => String::from(&*self.name.as_str()),\n             ast::MetaItemKind::List(ref list) => {\n                 let name = self.name.as_str();\n-                // 1 = `(`, 2 = `]` and `)`\n-                let item_shape = shape\n-                    .visual_indent(0)\n-                    .shrink_left(name.len() + 1)\n-                    .and_then(|s| s.sub_width(2))?;\n+                let item_shape = match context.config.indent_style() {\n+                    IndentStyle::Block => shape\n+                        .block_indent(context.config.tab_spaces())\n+                        .with_max_width(context.config),\n+                    // 1 = `(`, 2 = `]` and `)`\n+                    IndentStyle::Visual => shape\n+                        .visual_indent(0)\n+                        .shrink_left(name.len() + 1)\n+                        .and_then(|s| s.sub_width(2))?,\n+                };\n                 let items = itemize_list(\n                     context.snippet_provider,\n                     list.iter(),\n@@ -207,8 +226,18 @@ impl Rewrite for ast::MetaItem {\n                     false,\n                 );\n                 let item_vec = items.collect::<Vec<_>>();\n+                let tactic = if allow_mixed_tactic_for_nested_metaitem_list(list) {\n+                    DefinitiveListTactic::Mixed\n+                } else {\n+                    ::lists::definitive_tactic(\n+                        &item_vec,\n+                        ListTactic::HorizontalVertical,\n+                        ::lists::Separator::Comma,\n+                        item_shape.width,\n+                    )\n+                };\n                 let fmt = ListFormatting {\n-                    tactic: DefinitiveListTactic::Mixed,\n+                    tactic,\n                     separator: \",\",\n                     trailing_separator: SeparatorTactic::Never,\n                     separator_place: SeparatorPlace::Back,\n@@ -217,7 +246,17 @@ impl Rewrite for ast::MetaItem {\n                     preserve_newline: false,\n                     config: context.config,\n                 };\n-                format!(\"{}({})\", name, write_list(&item_vec, &fmt)?)\n+                let item_str = write_list(&item_vec, &fmt)?;\n+                let one_line_budget = shape.offset_left(name.len())?.sub_width(2)?.width;\n+                if context.config.indent_style() == IndentStyle::Visual\n+                    || (!item_str.contains('\\n') && item_str.len() <= one_line_budget)\n+                {\n+                    format!(\"{}({})\", name, item_str)\n+                } else {\n+                    let indent = shape.indent.to_string_with_newline(context.config);\n+                    let nested_indent = item_shape.indent.to_string_with_newline(context.config);\n+                    format!(\"{}({}{}{})\", name, nested_indent, item_str, indent)\n+                }\n             }\n             ast::MetaItemKind::NameValue(ref literal) => {\n                 let name = self.name.as_str();"}, {"sha": "552dd2b94429cf6320eb45906aefce7d7aba7487", "filename": "tests/source/attrib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1644b174a73658b211ed700b3dad4223c9c937b9/tests%2Fsource%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1644b174a73658b211ed700b3dad4223c9c937b9/tests%2Fsource%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fattrib.rs?ref=1644b174a73658b211ed700b3dad4223c9c937b9", "patch": "@@ -1,5 +1,9 @@\n // rustfmt-wrap_comments: true\n // Test attributes and doc comments are preserved.\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       html_playground_url = \"https://play.rust-lang.org/\", test(attr(deny(warnings))))]\n \n //! Doc comment\n "}, {"sha": "13ba8bd64db0eba8108b289e5d70a7a5c616aaae", "filename": "tests/target/attrib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1644b174a73658b211ed700b3dad4223c9c937b9/tests%2Ftarget%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1644b174a73658b211ed700b3dad4223c9c937b9/tests%2Ftarget%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fattrib.rs?ref=1644b174a73658b211ed700b3dad4223c9c937b9", "patch": "@@ -1,5 +1,12 @@\n // rustfmt-wrap_comments: true\n // Test attributes and doc comments are preserved.\n+#![doc(\n+    html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+    html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+    html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+    html_playground_url = \"https://play.rust-lang.org/\",\n+    test(attr(deny(warnings)))\n+)]\n \n //! Doc comment\n "}, {"sha": "4b79d0d8c7b6ac69e3aed49229a1370592c4dad7", "filename": "tests/target/enum.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1644b174a73658b211ed700b3dad4223c9c937b9/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1644b174a73658b211ed700b3dad4223c9c937b9/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=1644b174a73658b211ed700b3dad4223c9c937b9", "patch": "@@ -156,8 +156,10 @@ pub enum Bencoding<'i> {\n pub enum CoreResourceMsg {\n     SetCookieForUrl(\n         ServoUrl,\n-        #[serde(deserialize_with = \"::hyper_serde::deserialize\",\n-                serialize_with = \"::hyper_serde::serialize\")]\n+        #[serde(\n+            deserialize_with = \"::hyper_serde::deserialize\",\n+            serialize_with = \"::hyper_serde::serialize\"\n+        )]\n         Cookie,\n         CookieSource,\n     ),\n@@ -221,7 +223,9 @@ enum State {\n // #2190\n #[derive(Debug, Fail)]\n enum AnError {\n-    #[fail(display = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")]\n+    #[fail(\n+        display = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+    )]\n     UnexpectedSingleToken { token: syn::Token },\n }\n "}]}