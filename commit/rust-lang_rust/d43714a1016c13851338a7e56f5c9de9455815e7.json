{"sha": "d43714a1016c13851338a7e56f5c9de9455815e7", "node_id": "C_kwDOAAsO6NoAKGQ0MzcxNGExMDE2YzEzODUxMzM4YTdlNTZmNWM5ZGU5NDU1ODE1ZTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T16:38:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T16:38:50Z"}, "message": "Auto merge of #10573 - Alexendoo:print-literal-file-macro, r=Jarcho\n\nIgnore `file!()` macro in `print_literal`, `write_literal`\n\nchangelog: [`print_literal`], [`write_literal`]: Ignore the `file!()` macro\n\n`file!()` expands to a string literal with its span set to that of the `file!()` callsite, but isn't marked as coming from an expansion. To fix this we make sure we actually find a string/char literal instead of assuming it's one and slicing\n\nIt would also ignore any other macros that result in the same situation, but that shouldn't be common as `proc_macro::Span::call_site()` returns a span that is marked as from expansion\n\nFixes #10544", "tree": {"sha": "47c40ac0c4bfb363de7563705ad864dfd9409e28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47c40ac0c4bfb363de7563705ad864dfd9409e28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d43714a1016c13851338a7e56f5c9de9455815e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d43714a1016c13851338a7e56f5c9de9455815e7", "html_url": "https://github.com/rust-lang/rust/commit/d43714a1016c13851338a7e56f5c9de9455815e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d43714a1016c13851338a7e56f5c9de9455815e7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "html_url": "https://github.com/rust-lang/rust/commit/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6"}, {"sha": "17f80456d18c954cd82a1232807ae8c5bc1cb5cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/17f80456d18c954cd82a1232807ae8c5bc1cb5cb", "html_url": "https://github.com/rust-lang/rust/commit/17f80456d18c954cd82a1232807ae8c5bc1cb5cb"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "d7c94b909bdc5ea386ae48e314e83d136fb21961", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d43714a1016c13851338a7e56f5c9de9455815e7/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43714a1016c13851338a7e56f5c9de9455815e7/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=d43714a1016c13851338a7e56f5c9de9455815e7", "patch": "@@ -463,12 +463,18 @@ fn check_literal(cx: &LateContext<'_>, format_args: &FormatArgs, name: &str) {\n             && let Some(value_string) = snippet_opt(cx, arg.expr.span)\n     {\n             let (replacement, replace_raw) = match lit.kind {\n-                LitKind::Str | LitKind::StrRaw(_)  => extract_str_literal(&value_string),\n+                LitKind::Str | LitKind::StrRaw(_)  => match extract_str_literal(&value_string) {\n+                    Some(extracted) => extracted,\n+                    None => return,\n+                },\n                 LitKind::Char => (\n                     match lit.symbol.as_str() {\n                         \"\\\"\" => \"\\\\\\\"\",\n                         \"\\\\'\" => \"'\",\n-                        _ => &value_string[1..value_string.len() - 1],\n+                        _ => match value_string.strip_prefix('\\'').and_then(|s| s.strip_suffix('\\'')) {\n+                            Some(stripped) => stripped,\n+                            None => return,\n+                        },\n                     }\n                     .to_string(),\n                     false,\n@@ -533,13 +539,13 @@ fn check_literal(cx: &LateContext<'_>, format_args: &FormatArgs, name: &str) {\n /// `r#\"a\"#` -> (`a`, true)\n ///\n /// `\"b\"` -> (`b`, false)\n-fn extract_str_literal(literal: &str) -> (String, bool) {\n+fn extract_str_literal(literal: &str) -> Option<(String, bool)> {\n     let (literal, raw) = match literal.strip_prefix('r') {\n         Some(stripped) => (stripped.trim_matches('#'), true),\n         None => (literal, false),\n     };\n \n-    (literal[1..literal.len() - 1].to_string(), raw)\n+    Some((literal.strip_prefix('\"')?.strip_suffix('\"')?.to_string(), raw))\n }\n \n enum UnescapeErr {"}, {"sha": "3d5beab1eff1ce1c6f0cd394270c9634c17bcd47", "filename": "tests/ui/auxiliary/proc_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43714a1016c13851338a7e56f5c9de9455815e7/tests%2Fui%2Fauxiliary%2Fproc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43714a1016c13851338a7e56f5c9de9455815e7/tests%2Fui%2Fauxiliary%2Fproc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macros.rs?ref=d43714a1016c13851338a7e56f5c9de9455815e7", "patch": "@@ -63,7 +63,7 @@ fn group_with_span(delimiter: Delimiter, stream: TokenStream, span: Span) -> Gro\n /// Token used to escape the following token from the macro's span rules.\n const ESCAPE_CHAR: char = '$';\n \n-/// Takes a single token followed by a sequence tokens. Returns the sequence of tokens with their\n+/// Takes a single token followed by a sequence of tokens. Returns the sequence of tokens with their\n /// span set to that of the first token. Tokens may be escaped with either `#ident` or `#(tokens)`.\n #[proc_macro]\n pub fn with_span(input: TokenStream) -> TokenStream {"}, {"sha": "538513e9156f8851fe0f76b6cf9999937994c395", "filename": "tests/ui/print_literal.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d43714a1016c13851338a7e56f5c9de9455815e7/tests%2Fui%2Fprint_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43714a1016c13851338a7e56f5c9de9455815e7/tests%2Fui%2Fprint_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.rs?ref=d43714a1016c13851338a7e56f5c9de9455815e7", "patch": "@@ -38,4 +38,8 @@ fn main() {\n     // named args shouldn't change anything either\n     println!(\"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n     println!(\"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n+\n+    // The string literal from `file!()` has a callsite span that isn't marked as coming from an\n+    // expansion\n+    println!(\"file: {}\", file!());\n }"}]}