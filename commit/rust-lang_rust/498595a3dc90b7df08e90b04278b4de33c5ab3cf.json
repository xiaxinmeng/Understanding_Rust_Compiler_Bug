{"sha": "498595a3dc90b7df08e90b04278b4de33c5ab3cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ODU5NWEzZGM5MGI3ZGYwOGU5MGIwNDI3OGI0ZGUzM2M1YWIzY2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-03T11:12:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-03T16:55:45Z"}, "message": "Teach project to unify the return type even if a precise match is not\npossible.  There is some amount of duplication as a result (similar to\nselect) -- I am not happy about this but not sure how to fix it\nwithout deeper rewrites.", "tree": {"sha": "9cb3d8a2361408a06f323cf75a3014f28b9d9e04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cb3d8a2361408a06f323cf75a3014f28b9d9e04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/498595a3dc90b7df08e90b04278b4de33c5ab3cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/498595a3dc90b7df08e90b04278b4de33c5ab3cf", "html_url": "https://github.com/rust-lang/rust/commit/498595a3dc90b7df08e90b04278b4de33c5ab3cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/498595a3dc90b7df08e90b04278b4de33c5ab3cf/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9e1c445dbcbfc9c938488a79ef12595e0f99c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e1c445dbcbfc9c938488a79ef12595e0f99c8d", "html_url": "https://github.com/rust-lang/rust/commit/c9e1c445dbcbfc9c938488a79ef12595e0f99c8d"}], "stats": {"total": 88, "additions": 60, "deletions": 28}, "files": [{"sha": "c2a451b405bb5008018d635a94662460178a746c", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 54, "deletions": 21, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/498595a3dc90b7df08e90b04278b4de33c5ab3cf/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498595a3dc90b7df08e90b04278b4de33c5ab3cf/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=498595a3dc90b7df08e90b04278b4de33c5ab3cf", "patch": "@@ -80,37 +80,23 @@ pub fn poly_project_and_unify_type<'cx,'tcx>(\n            obligation.repr(selcx.tcx()));\n \n     let infcx = selcx.infcx();\n-    let result = infcx.try(|snapshot| {\n+    infcx.try(|snapshot| {\n         let (skol_predicate, skol_map) =\n             infcx.skolemize_late_bound_regions(&obligation.predicate, snapshot);\n \n         let skol_obligation = obligation.with(skol_predicate);\n         match project_and_unify_type(selcx, &skol_obligation) {\n-            Ok(Some(obligations)) => {\n+            Ok(result) => {\n                 match infcx.leak_check(&skol_map, snapshot) {\n-                    Ok(()) => Ok(infcx.plug_leaks(skol_map, snapshot, &obligations)),\n-                    Err(e) => Err(Some(MismatchedProjectionTypes { err: e })),\n+                    Ok(()) => Ok(infcx.plug_leaks(skol_map, snapshot, &result)),\n+                    Err(e) => Err(MismatchedProjectionTypes { err: e }),\n                 }\n             }\n-            Ok(None) => {\n-                // Signal ambiguity using Err just so that infcx.try()\n-                // rolls back the snapshot. We adapt below.\n-                Err(None)\n-            }\n             Err(e) => {\n-                Err(Some(e))\n+                Err(e)\n             }\n         }\n-    });\n-\n-    // Above, we use Err(None) to signal ambiguity so that the\n-    // snapshot will be rolled back. But here, we want to translate to\n-    // Ok(None). Kind of weird.\n-    match result {\n-        Ok(obligations) => Ok(Some(obligations)),\n-        Err(None) => Ok(None),\n-        Err(Some(e)) => Err(e),\n-    }\n+    })\n }\n \n /// Evaluates constraints of the form:\n@@ -132,7 +118,10 @@ fn project_and_unify_type<'cx,'tcx>(\n                                             obligation.cause.clone(),\n                                             obligation.recursion_depth) {\n             Some(n) => n,\n-            None => { return Ok(None); }\n+            None => {\n+                consider_unification_despite_ambiguity(selcx, obligation);\n+                return Ok(None);\n+            }\n         };\n \n     debug!(\"project_and_unify_type: normalized_ty={} obligations={}\",\n@@ -147,6 +136,50 @@ fn project_and_unify_type<'cx,'tcx>(\n     }\n }\n \n+fn consider_unification_despite_ambiguity<'cx,'tcx>(selcx: &mut SelectionContext<'cx,'tcx>,\n+                                                    obligation: &ProjectionObligation<'tcx>) {\n+    debug!(\"consider_unification_despite_ambiguity(obligation={})\",\n+           obligation.repr(selcx.tcx()));\n+\n+    let def_id = obligation.predicate.projection_ty.trait_ref.def_id;\n+    match selcx.tcx().lang_items.fn_trait_kind(def_id) {\n+        Some(_) => { }\n+        None => { return; }\n+    }\n+\n+    let infcx = selcx.infcx();\n+    let self_ty = obligation.predicate.projection_ty.trait_ref.self_ty();\n+    let self_ty = infcx.shallow_resolve(self_ty);\n+    debug!(\"consider_unification_despite_ambiguity: self_ty.sty={:?}\",\n+           self_ty.sty);\n+    match self_ty.sty {\n+        ty::ty_closure(closure_def_id, _, substs) => {\n+            let closure_typer = selcx.closure_typer();\n+            let closure_type = closure_typer.closure_type(closure_def_id, substs);\n+            let ty::Binder((_, ret_type)) =\n+                util::closure_trait_ref_and_return_type(infcx.tcx,\n+                                                        def_id,\n+                                                        self_ty,\n+                                                        &closure_type.sig,\n+                                                        util::TupleArgumentsFlag::No);\n+            let (ret_type, _) =\n+                infcx.replace_late_bound_regions_with_fresh_var(\n+                    obligation.cause.span,\n+                    infer::AssocTypeProjection(obligation.predicate.projection_ty.item_name),\n+                    &ty::Binder(ret_type));\n+            debug!(\"consider_unification_despite_ambiguity: ret_type={:?}\",\n+                   ret_type.repr(selcx.tcx()));\n+            let origin = infer::RelateOutputImplTypes(obligation.cause.span);\n+            let obligation_ty = obligation.predicate.ty;\n+            match infer::mk_eqty(infcx, true, origin, obligation_ty, ret_type) {\n+                Ok(()) => { }\n+                Err(_) => { /* ignore errors */ }\n+            }\n+        }\n+        _ => { }\n+    }\n+}\n+\n /// Normalizes any associated type projections in `value`, replacing\n /// them with a fully resolved type where possible. The return value\n /// combines the normalized result and any additional obligations that"}, {"sha": "b8af91add9efb56d6485cfcf145d88b39e873d85", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/498595a3dc90b7df08e90b04278b4de33c5ab3cf/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498595a3dc90b7df08e90b04278b4de33c5ab3cf/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=498595a3dc90b7df08e90b04278b4de33c5ab3cf", "patch": "@@ -277,8 +277,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// the argument types can only be helpful to the user, because\n     /// once they patch up the kind of closure that is expected, the\n     /// argment types won't really change.\n-    fn consider_unification_despite_ambiguity(&mut self, obligation: &TraitObligation<'tcx>)\n-    {\n+    fn consider_unification_despite_ambiguity(&mut self, obligation: &TraitObligation<'tcx>) {\n         // Is this a `C : FnFoo(...)` trait reference for some trait binding `FnFoo`?\n         match self.tcx().lang_items.fn_trait_kind(obligation.predicate.0.def_id()) {\n             Some(_) => { }"}, {"sha": "3bd0273216de31e352315a0d7dd93e9dfa7272b5", "filename": "src/test/run-pass/closure-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/498595a3dc90b7df08e90b04278b4de33c5ab3cf/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498595a3dc90b7df08e90b04278b4de33c5ab3cf/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference.rs?ref=498595a3dc90b7df08e90b04278b4de33c5ab3cf", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn foo(i: int) -> int { i + 1 }\n+fn foo(i: isize) -> isize { i + 1 }\n \n fn apply<A, F>(f: F, v: A) -> A where F: FnOnce(A) -> A { f(v) }\n "}, {"sha": "0cd8c13a4e10a60644ec0c80d887de9f236d1919", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/498595a3dc90b7df08e90b04278b4de33c5ab3cf/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498595a3dc90b7df08e90b04278b4de33c5ab3cf/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=498595a3dc90b7df08e90b04278b4de33c5ab3cf", "patch": "@@ -14,9 +14,9 @@\n #![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n-struct A { a: Box<int> }\n+struct A { a: Box<isize> }\n \n-fn foo() -> Box<FnMut() -> int + 'static> {\n+fn foo() -> Box<FnMut() -> isize + 'static> {\n     let k = box 22;\n     let _u = A {a: k.clone()};\n     let result  = |&mut:| 22;"}, {"sha": "8e3d44df798a7679333ad85536e334b4d73c906c", "filename": "src/test/run-pass/unboxed-closures-zero-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/498595a3dc90b7df08e90b04278b4de33c5ab3cf/src%2Ftest%2Frun-pass%2Funboxed-closures-zero-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498595a3dc90b7df08e90b04278b4de33c5ab3cf/src%2Ftest%2Frun-pass%2Funboxed-closures-zero-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-zero-args.rs?ref=498595a3dc90b7df08e90b04278b4de33c5ab3cf", "patch": "@@ -11,7 +11,7 @@\n #![feature(unboxed_closures)]\n \n fn main() {\n-    let mut zero = |&mut:| {};\n-    let () = zero.call_mut(());\n+    let mut zero = || {};\n+    let () = zero();\n }\n "}]}