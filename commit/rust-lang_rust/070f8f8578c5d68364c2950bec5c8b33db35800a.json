{"sha": "070f8f8578c5d68364c2950bec5c8b33db35800a", "node_id": "C_kwDOAAsO6NoAKDA3MGY4Zjg1NzhjNWQ2ODM2NGMyOTUwYmVjNWM4YjMzZGIzNTgwMGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-10T10:12:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-10T10:12:15Z"}, "message": "Auto merge of #14313 - Veykril:notifs, r=Veykril\n\nMake project loading errors less intrusive\n\ncc https://github.com/rust-lang/rust-analyzer/issues/14193 closes https://github.com/rust-lang/rust-analyzer/issues/9909\n\n![image](https://user-images.githubusercontent.com/3757771/224274817-a5a8cb0c-7bda-454d-9772-5f839f360b9a.png)", "tree": {"sha": "ee9f8a10b5470260561698707a076cf1b562eb10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee9f8a10b5470260561698707a076cf1b562eb10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/070f8f8578c5d68364c2950bec5c8b33db35800a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/070f8f8578c5d68364c2950bec5c8b33db35800a", "html_url": "https://github.com/rust-lang/rust/commit/070f8f8578c5d68364c2950bec5c8b33db35800a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/070f8f8578c5d68364c2950bec5c8b33db35800a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b5bba45354f639fc55c82c8267902ad79cde6ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5bba45354f639fc55c82c8267902ad79cde6ca", "html_url": "https://github.com/rust-lang/rust/commit/1b5bba45354f639fc55c82c8267902ad79cde6ca"}, {"sha": "c03775e4779bd48a2607cbd04fb0e9d4fa5b92cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c03775e4779bd48a2607cbd04fb0e9d4fa5b92cb", "html_url": "https://github.com/rust-lang/rust/commit/c03775e4779bd48a2607cbd04fb0e9d4fa5b92cb"}], "stats": {"total": 113, "additions": 68, "deletions": 45}, "files": [{"sha": "dd0804b4398a9599eeb21e146eb79f8f5536fdd2", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/070f8f8578c5d68364c2950bec5c8b33db35800a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070f8f8578c5d68364c2950bec5c8b33db35800a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=070f8f8578c5d68364c2950bec5c8b33db35800a", "patch": "@@ -111,12 +111,7 @@ impl fmt::Debug for Event {\n \n impl GlobalState {\n     fn run(mut self, inbox: Receiver<lsp_server::Message>) -> Result<()> {\n-        if self.config.linked_projects().is_empty()\n-            && self.config.detached_files().is_empty()\n-            && self.config.notifications().cargo_toml_not_found\n-        {\n-            self.show_and_log_error(\"rust-analyzer failed to discover workspace\".to_string(), None);\n-        };\n+        self.update_status_or_notify();\n \n         if self.config.did_save_text_document_dynamic_registration() {\n             let save_registration_options = lsp_types::TextDocumentSaveRegistrationOptions {\n@@ -394,25 +389,28 @@ impl GlobalState {\n             });\n         }\n \n+        self.update_status_or_notify();\n+\n+        let loop_duration = loop_start.elapsed();\n+        if loop_duration > Duration::from_millis(100) && was_quiescent {\n+            tracing::warn!(\"overly long loop turn: {:?}\", loop_duration);\n+            self.poke_rust_analyzer_developer(format!(\"overly long loop turn: {loop_duration:?}\"));\n+        }\n+        Ok(())\n+    }\n+\n+    fn update_status_or_notify(&mut self) {\n         let status = self.current_status();\n         if self.last_reported_status.as_ref() != Some(&status) {\n             self.last_reported_status = Some(status.clone());\n \n             if self.config.server_status_notification() {\n                 self.send_notification::<lsp_ext::ServerStatusNotification>(status);\n-            } else {\n-                if let (lsp_ext::Health::Error, Some(message)) = (status.health, &status.message) {\n-                    self.show_message(lsp_types::MessageType::ERROR, message.clone());\n-                }\n+            } else if let (lsp_ext::Health::Error, Some(message)) = (status.health, &status.message)\n+            {\n+                self.show_and_log_error(message.clone(), None);\n             }\n         }\n-\n-        let loop_duration = loop_start.elapsed();\n-        if loop_duration > Duration::from_millis(100) && was_quiescent {\n-            tracing::warn!(\"overly long loop turn: {:?}\", loop_duration);\n-            self.poke_rust_analyzer_developer(format!(\"overly long loop turn: {loop_duration:?}\"));\n-        }\n-        Ok(())\n     }\n \n     fn handle_task(&mut self, prime_caches_progress: &mut Vec<PrimeCachesProgress>, task: Task) {\n@@ -445,6 +443,9 @@ impl GlobalState {\n                     ProjectWorkspaceProgress::Report(msg) => (Progress::Report, Some(msg)),\n                     ProjectWorkspaceProgress::End(workspaces) => {\n                         self.fetch_workspaces_queue.op_completed(Some(workspaces));\n+                        if let Err(e) = self.fetch_workspace_error() {\n+                            tracing::error!(\"FetchWorkspaceError:\\n{e}\");\n+                        }\n \n                         let old = Arc::clone(&self.workspaces);\n                         self.switch_workspaces(\"fetched workspace\".to_string());\n@@ -466,6 +467,9 @@ impl GlobalState {\n                     BuildDataProgress::Report(msg) => (Some(Progress::Report), Some(msg)),\n                     BuildDataProgress::End(build_data_result) => {\n                         self.fetch_build_data_queue.op_completed(build_data_result);\n+                        if let Err(e) = self.fetch_build_data_error() {\n+                            tracing::error!(\"FetchBuildDataError:\\n{e}\");\n+                        }\n \n                         self.switch_workspaces(\"fetched build data\".to_string());\n \n@@ -498,6 +502,7 @@ impl GlobalState {\n                 self.vfs_progress_n_total = n_total;\n                 self.vfs_progress_n_done = n_done;\n \n+                // if n_total != 0 {\n                 let state = if n_done == 0 {\n                     Progress::Begin\n                 } else if n_done < n_total {\n@@ -512,7 +517,8 @@ impl GlobalState {\n                     Some(format!(\"{n_done}/{n_total}\")),\n                     Some(Progress::fraction(n_done, n_total)),\n                     None,\n-                )\n+                );\n+                // }\n             }\n         }\n     }\n@@ -554,7 +560,10 @@ impl GlobalState {\n                     flycheck::Progress::DidCheckCrate(target) => (Progress::Report, Some(target)),\n                     flycheck::Progress::DidCancel => (Progress::End, None),\n                     flycheck::Progress::DidFailToRestart(err) => {\n-                        self.show_and_log_error(\"cargo check failed\".to_string(), Some(err));\n+                        self.show_and_log_error(\n+                            \"cargo check failed to start\".to_string(),\n+                            Some(err),\n+                        );\n                         return;\n                     }\n                     flycheck::Progress::DidFinish(result) => {"}, {"sha": "fca242d91fd4e378d4c2b7208b2869ea62d4af3e", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/070f8f8578c5d68364c2950bec5c8b33db35800a/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070f8f8578c5d68364c2950bec5c8b33db35800a/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=070f8f8578c5d68364c2950bec5c8b33db35800a", "patch": "@@ -56,7 +56,8 @@ pub(crate) enum BuildDataProgress {\n \n impl GlobalState {\n     pub(crate) fn is_quiescent(&self) -> bool {\n-        !(self.fetch_workspaces_queue.op_in_progress()\n+        !(self.last_reported_status.is_none()\n+            || self.fetch_workspaces_queue.op_in_progress()\n             || self.fetch_build_data_queue.op_in_progress()\n             || self.vfs_progress_config_version < self.vfs_config_version\n             || self.vfs_progress_n_done < self.vfs_progress_n_total)\n@@ -108,18 +109,19 @@ impl GlobalState {\n             status.message = Some(\"Workspace reload required\".to_string())\n         }\n \n-        if let Err(error) = self.fetch_workspace_error() {\n+        if let Err(_) = self.fetch_workspace_error() {\n             status.health = lsp_ext::Health::Error;\n-            status.message = Some(error)\n+            status.message = Some(\"Failed to load workspaces\".to_string())\n         }\n \n         if self.config.linked_projects().is_empty()\n             && self.config.detached_files().is_empty()\n             && self.config.notifications().cargo_toml_not_found\n         {\n             status.health = lsp_ext::Health::Warning;\n-            status.message = Some(\"Workspace reload required\".to_string())\n+            status.message = Some(\"Failed to discover workspace\".to_string())\n         }\n+\n         status\n     }\n \n@@ -201,21 +203,14 @@ impl GlobalState {\n         let _p = profile::span(\"GlobalState::switch_workspaces\");\n         tracing::info!(%cause, \"will switch workspaces\");\n \n-        if let Err(error_message) = self.fetch_workspace_error() {\n-            if !self.config.server_status_notification() {\n-                self.show_and_log_error(error_message, None);\n-            }\n+        if let Err(_) = self.fetch_workspace_error() {\n             if !self.workspaces.is_empty() {\n                 // It only makes sense to switch to a partially broken workspace\n                 // if we don't have any workspace at all yet.\n                 return;\n             }\n         }\n \n-        if let Err(error) = self.fetch_build_data_error() {\n-            self.show_and_log_error(\"failed to run build scripts\".to_string(), Some(error));\n-        }\n-\n         let Some(workspaces) = self.fetch_workspaces_queue.last_op_result() else { return; };\n         let workspaces =\n             workspaces.iter().filter_map(|res| res.as_ref().ok().cloned()).collect::<Vec<_>>();\n@@ -394,7 +389,7 @@ impl GlobalState {\n         tracing::info!(\"did switch workspaces\");\n     }\n \n-    fn fetch_workspace_error(&self) -> Result<(), String> {\n+    pub(super) fn fetch_workspace_error(&self) -> Result<(), String> {\n         let mut buf = String::new();\n \n         let Some(last_op_result) = self.fetch_workspaces_queue.last_op_result() else { return Ok(()) };\n@@ -415,7 +410,7 @@ impl GlobalState {\n         Err(buf)\n     }\n \n-    fn fetch_build_data_error(&self) -> Result<(), String> {\n+    pub(super) fn fetch_build_data_error(&self) -> Result<(), String> {\n         let mut buf = String::new();\n \n         for ws in &self.fetch_build_data_queue.last_op_result().1 {"}, {"sha": "f4a4579a92c9b4d348a08f028f88bfb04024b546", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/070f8f8578c5d68364c2950bec5c8b33db35800a/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/070f8f8578c5d68364c2950bec5c8b33db35800a/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=070f8f8578c5d68364c2950bec5c8b33db35800a", "patch": "@@ -93,6 +93,14 @@ export function triggerParameterHints(_: CtxInit): Cmd {\n     };\n }\n \n+export function openLogs(ctx: CtxInit): Cmd {\n+    return async () => {\n+        if (ctx.client.outputChannel) {\n+            ctx.client.outputChannel.show();\n+        }\n+    };\n+}\n+\n export function matchingBrace(ctx: CtxInit): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;"}, {"sha": "1708d47cee77da95246ae2f8546470c8274b272e", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/070f8f8578c5d68364c2950bec5c8b33db35800a/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/070f8f8578c5d68364c2950bec5c8b33db35800a/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=070f8f8578c5d68364c2950bec5c8b33db35800a", "patch": "@@ -282,41 +282,51 @@ export class Ctx {\n     setServerStatus(status: ServerStatusParams | { health: \"stopped\" }) {\n         let icon = \"\";\n         const statusBar = this.statusBar;\n+        statusBar.tooltip = new vscode.MarkdownString(\"\", true);\n+        statusBar.tooltip.isTrusted = true;\n         switch (status.health) {\n             case \"ok\":\n-                statusBar.tooltip = (status.message ?? \"Ready\") + \"\\nClick to stop server.\";\n-                statusBar.command = \"rust-analyzer.stopServer\";\n+                statusBar.tooltip.appendText(status.message ?? \"Ready\");\n                 statusBar.color = undefined;\n                 statusBar.backgroundColor = undefined;\n                 break;\n             case \"warning\":\n-                statusBar.tooltip =\n-                    (status.message ? status.message + \"\\n\" : \"\") + \"Click to reload.\";\n-\n-                statusBar.command = \"rust-analyzer.reloadWorkspace\";\n+                if (status.message) {\n+                    statusBar.tooltip.appendText(status.message);\n+                }\n                 statusBar.color = new vscode.ThemeColor(\"statusBarItem.warningForeground\");\n                 statusBar.backgroundColor = new vscode.ThemeColor(\n                     \"statusBarItem.warningBackground\"\n                 );\n                 icon = \"$(warning) \";\n                 break;\n             case \"error\":\n-                statusBar.tooltip =\n-                    (status.message ? status.message + \"\\n\" : \"\") + \"Click to reload.\";\n-\n-                statusBar.command = \"rust-analyzer.reloadWorkspace\";\n+                if (status.message) {\n+                    statusBar.tooltip.appendText(status.message);\n+                }\n                 statusBar.color = new vscode.ThemeColor(\"statusBarItem.errorForeground\");\n                 statusBar.backgroundColor = new vscode.ThemeColor(\"statusBarItem.errorBackground\");\n                 icon = \"$(error) \";\n                 break;\n             case \"stopped\":\n-                statusBar.tooltip = \"Server is stopped.\\nClick to start.\";\n-                statusBar.command = \"rust-analyzer.startServer\";\n+                statusBar.tooltip.appendText(\"Server is stopped\");\n+                statusBar.tooltip.appendMarkdown(\n+                    \"\\n\\n[Start server](command:rust-analyzer.startServer)\"\n+                );\n                 statusBar.color = undefined;\n                 statusBar.backgroundColor = undefined;\n                 statusBar.text = `$(stop-circle) rust-analyzer`;\n                 return;\n         }\n+        if (statusBar.tooltip.value) {\n+            statusBar.tooltip.appendText(\"\\n\\n\");\n+        }\n+        statusBar.tooltip.appendMarkdown(\"[Stop server](command:rust-analyzer.stopServer)\");\n+        statusBar.tooltip.appendMarkdown(\n+            \"\\n\\n[Reload Workspace](command:rust-analyzer.reloadWorkspace)\"\n+        );\n+        statusBar.tooltip.appendMarkdown(\"\\n\\n[Restart server](command:rust-analyzer.startServer)\");\n+        statusBar.tooltip.appendMarkdown(\"\\n\\n[Open logs](command:rust-analyzer.openLogs)\");\n         if (!status.quiescent) icon = \"$(sync~spin) \";\n         statusBar.text = `${icon}rust-analyzer`;\n     }"}, {"sha": "8a2412af849cd2e31a7932a95e0b202d8fa2753b", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/070f8f8578c5d68364c2950bec5c8b33db35800a/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/070f8f8578c5d68364c2950bec5c8b33db35800a/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=070f8f8578c5d68364c2950bec5c8b33db35800a", "patch": "@@ -188,5 +188,6 @@ function createCommands(): Record<string, CommandFactory> {\n         runSingle: { enabled: commands.runSingle },\n         showReferences: { enabled: commands.showReferences },\n         triggerParameterHints: { enabled: commands.triggerParameterHints },\n+        openLogs: { enabled: commands.openLogs },\n     };\n }"}]}