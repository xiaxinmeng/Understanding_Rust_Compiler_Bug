{"sha": "eb04beb00558fd25499541e7caa49f95a9beb243", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMDRiZWIwMDU1OGZkMjU0OTk1NDFlN2NhYTQ5Zjk1YTliZWIyNDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-02T11:31:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-02T11:31:43Z"}, "message": "Auto merge of #6791 - TaKO8Ki:iter-count, r=matthiaskrgr\n\nNew lint: `iter_count`\n\nThis pull request adds a new lint named `iter_count`.\n\n---\n\ncloses https://github.com/rust-lang/rust-clippy/issues/6262\n\nchangelog: new lint `iter_count`", "tree": {"sha": "171073ad5e68a570fd54881bdca42c4482352967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/171073ad5e68a570fd54881bdca42c4482352967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb04beb00558fd25499541e7caa49f95a9beb243", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb04beb00558fd25499541e7caa49f95a9beb243", "html_url": "https://github.com/rust-lang/rust/commit/eb04beb00558fd25499541e7caa49f95a9beb243", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb04beb00558fd25499541e7caa49f95a9beb243/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cd6ca051ce5d2f7182df68eeccebfb0b830525c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd6ca051ce5d2f7182df68eeccebfb0b830525c", "html_url": "https://github.com/rust-lang/rust/commit/3cd6ca051ce5d2f7182df68eeccebfb0b830525c"}, {"sha": "6041365f4bae6482467210ea1b60e18101ba6fd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6041365f4bae6482467210ea1b60e18101ba6fd0", "html_url": "https://github.com/rust-lang/rust/commit/6041365f4bae6482467210ea1b60e18101ba6fd0"}], "stats": {"total": 416, "additions": 414, "deletions": 2}, "files": [{"sha": "41c334c68169b98e3cb73305bdd2e5a844ad7fba", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb04beb00558fd25499541e7caa49f95a9beb243/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/eb04beb00558fd25499541e7caa49f95a9beb243/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=eb04beb00558fd25499541e7caa49f95a9beb243", "patch": "@@ -2135,6 +2135,7 @@ Released 2018-09-13\n [`invisible_characters`]: https://rust-lang.github.io/rust-clippy/master/index.html#invisible_characters\n [`items_after_statements`]: https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements\n [`iter_cloned_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_cloned_collect\n+[`iter_count`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_count\n [`iter_next_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_loop\n [`iter_next_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_slice\n [`iter_nth`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth"}, {"sha": "1ace4c8a10c91bc7e5bb6c72b83c2152ee62842e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb04beb00558fd25499541e7caa49f95a9beb243/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb04beb00558fd25499541e7caa49f95a9beb243/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=eb04beb00558fd25499541e7caa49f95a9beb243", "patch": "@@ -775,6 +775,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::INTO_ITER_ON_REF,\n         &methods::ITERATOR_STEP_BY_ZERO,\n         &methods::ITER_CLONED_COLLECT,\n+        &methods::ITER_COUNT,\n         &methods::ITER_NEXT_SLICE,\n         &methods::ITER_NTH,\n         &methods::ITER_NTH_ZERO,\n@@ -1577,6 +1578,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::INTO_ITER_ON_REF),\n         LintId::of(&methods::ITERATOR_STEP_BY_ZERO),\n         LintId::of(&methods::ITER_CLONED_COLLECT),\n+        LintId::of(&methods::ITER_COUNT),\n         LintId::of(&methods::ITER_NEXT_SLICE),\n         LintId::of(&methods::ITER_NTH),\n         LintId::of(&methods::ITER_NTH_ZERO),\n@@ -1881,6 +1883,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::FILTER_NEXT),\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n         LintId::of(&methods::INSPECT_FOR_EACH),\n+        LintId::of(&methods::ITER_COUNT),\n         LintId::of(&methods::MANUAL_FILTER_MAP),\n         LintId::of(&methods::MANUAL_FIND_MAP),\n         LintId::of(&methods::OPTION_AS_REF_DEREF),"}, {"sha": "1b99bacc3f1c2c9f70b059afcfa1b6303059c617", "filename": "clippy_lints/src/methods/iter_count.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/eb04beb00558fd25499541e7caa49f95a9beb243/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb04beb00558fd25499541e7caa49f95a9beb243/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs?ref=eb04beb00558fd25499541e7caa49f95a9beb243", "patch": "@@ -0,0 +1,47 @@\n+use crate::methods::derefs_to_slice;\n+use crate::utils::{is_type_diagnostic_item, match_type, paths, snippet_with_applicability, span_lint_and_sugg};\n+\n+use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+use super::ITER_COUNT;\n+\n+pub(crate) fn lints<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, iter_args: &'tcx [Expr<'tcx>], iter_method: &str) {\n+    let ty = cx.typeck_results().expr_ty(&iter_args[0]);\n+    let caller_type = if derefs_to_slice(cx, &iter_args[0], ty).is_some() {\n+        \"slice\"\n+    } else if is_type_diagnostic_item(cx, ty, sym::vec_type) {\n+        \"Vec\"\n+    } else if is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) {\n+        \"VecDeque\"\n+    } else if is_type_diagnostic_item(cx, ty, sym!(hashset_type)) {\n+        \"HashSet\"\n+    } else if is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) {\n+        \"HashMap\"\n+    } else if match_type(cx, ty, &paths::BTREEMAP) {\n+        \"BTreeMap\"\n+    } else if match_type(cx, ty, &paths::BTREESET) {\n+        \"BTreeSet\"\n+    } else if match_type(cx, ty, &paths::LINKED_LIST) {\n+        \"LinkedList\"\n+    } else if match_type(cx, ty, &paths::BINARY_HEAP) {\n+        \"BinaryHeap\"\n+    } else {\n+        return;\n+    };\n+    let mut applicability = Applicability::MachineApplicable;\n+    span_lint_and_sugg(\n+        cx,\n+        ITER_COUNT,\n+        expr.span,\n+        &format!(\"called `.{}().count()` on a `{}`\", iter_method, caller_type),\n+        \"try\",\n+        format!(\n+            \"{}.len()\",\n+            snippet_with_applicability(cx, iter_args[0].span, \"..\", &mut applicability),\n+        ),\n+        applicability,\n+    );\n+}"}, {"sha": "cc8dcacb1ebe41743cc6a992755f4bd9cd12bbea", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/eb04beb00558fd25499541e7caa49f95a9beb243/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb04beb00558fd25499541e7caa49f95a9beb243/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=eb04beb00558fd25499541e7caa49f95a9beb243", "patch": "@@ -4,6 +4,7 @@ mod filter_map_identity;\n mod implicit_clone;\n mod inefficient_to_string;\n mod inspect_for_each;\n+mod iter_count;\n mod manual_saturating_arithmetic;\n mod option_map_unwrap_or;\n mod unnecessary_filter_map;\n@@ -1540,6 +1541,32 @@ declare_clippy_lint! {\n     \"implicitly cloning a value by invoking a function on its dereferenced type\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for the use of `.iter().count()`.\n+    ///\n+    /// **Why is this bad?** `.len()` is more efficient and more\n+    /// readable.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // Bad\n+    /// let some_vec = vec![0, 1, 2, 3];\n+    /// let _ = some_vec.iter().count();\n+    /// let _ = &some_vec[..].iter().count();\n+    ///\n+    /// // Good\n+    /// let some_vec = vec![0, 1, 2, 3];\n+    /// let _ = some_vec.len();\n+    /// let _ = &some_vec[..].len();\n+    /// ```\n+    pub ITER_COUNT,\n+    complexity,\n+    \"replace `.iter().count()` with `.len()`\"\n+}\n+\n pub struct Methods {\n     msrv: Option<RustcVersion>,\n }\n@@ -1585,6 +1612,7 @@ impl_lint_pass!(Methods => [\n     MAP_FLATTEN,\n     ITERATOR_STEP_BY_ZERO,\n     ITER_NEXT_SLICE,\n+    ITER_COUNT,\n     ITER_NTH,\n     ITER_NTH_ZERO,\n     BYTES_NTH,\n@@ -1664,6 +1692,9 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 lint_search_is_some(cx, expr, \"rposition\", arg_lists[1], arg_lists[0], method_spans[1])\n             },\n             [\"extend\", ..] => lint_extend(cx, expr, arg_lists[0]),\n+            [\"count\", \"into_iter\"] => iter_count::lints(cx, expr, &arg_lists[1], \"into_iter\"),\n+            [\"count\", \"iter\"] => iter_count::lints(cx, expr, &arg_lists[1], \"iter\"),\n+            [\"count\", \"iter_mut\"] => iter_count::lints(cx, expr, &arg_lists[1], \"iter_mut\"),\n             [\"nth\", \"iter\"] => lint_iter_nth(cx, expr, &arg_lists, false),\n             [\"nth\", \"iter_mut\"] => lint_iter_nth(cx, expr, &arg_lists, true),\n             [\"nth\", \"bytes\"] => bytes_nth::lints(cx, expr, &arg_lists[1]),"}, {"sha": "7dc3f4ebd4d4681d47b4af94635ee7644f3a2452", "filename": "tests/ui/auxiliary/option_helpers.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb04beb00558fd25499541e7caa49f95a9beb243/tests%2Fui%2Fauxiliary%2Foption_helpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb04beb00558fd25499541e7caa49f95a9beb243/tests%2Fui%2Fauxiliary%2Foption_helpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Foption_helpers.rs?ref=eb04beb00558fd25499541e7caa49f95a9beb243", "patch": "@@ -48,4 +48,8 @@ impl IteratorFalsePositives {\n     pub fn skip_while(self) -> IteratorFalsePositives {\n         self\n     }\n+\n+    pub fn count(self) -> usize {\n+        self.foo as usize\n+    }\n }"}, {"sha": "b11dadda6c24ed753f23663492f5a675a6f82702", "filename": "tests/ui/iter_count.fixed", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/eb04beb00558fd25499541e7caa49f95a9beb243/tests%2Fui%2Fiter_count.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/eb04beb00558fd25499541e7caa49f95a9beb243/tests%2Fui%2Fiter_count.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_count.fixed?ref=eb04beb00558fd25499541e7caa49f95a9beb243", "patch": "@@ -0,0 +1,86 @@\n+// run-rustfix\n+// aux-build:option_helpers.rs\n+\n+#![warn(clippy::iter_count)]\n+#![allow(\n+    unused_variables,\n+    array_into_iter,\n+    unused_mut,\n+    clippy::into_iter_on_ref,\n+    clippy::unnecessary_operation\n+)]\n+\n+extern crate option_helpers;\n+\n+use option_helpers::IteratorFalsePositives;\n+use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, LinkedList, VecDeque};\n+\n+/// Struct to generate false positives for things with `.iter()`.\n+#[derive(Copy, Clone)]\n+struct HasIter;\n+\n+impl HasIter {\n+    fn iter(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+\n+    fn iter_mut(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+\n+    fn into_iter(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+}\n+\n+fn main() {\n+    let mut vec = vec![0, 1, 2, 3];\n+    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n+    let mut vec_deque: VecDeque<_> = vec.iter().cloned().collect();\n+    let mut hash_set = HashSet::new();\n+    let mut hash_map = HashMap::new();\n+    let mut b_tree_map = BTreeMap::new();\n+    let mut b_tree_set = BTreeSet::new();\n+    let mut linked_list = LinkedList::new();\n+    let mut binary_heap = BinaryHeap::new();\n+    hash_set.insert(1);\n+    hash_map.insert(1, 2);\n+    b_tree_map.insert(1, 2);\n+    b_tree_set.insert(1);\n+    linked_list.push_back(1);\n+    binary_heap.push(1);\n+\n+    &vec[..].len();\n+    vec.len();\n+    boxed_slice.len();\n+    vec_deque.len();\n+    hash_set.len();\n+    hash_map.len();\n+    b_tree_map.len();\n+    b_tree_set.len();\n+    linked_list.len();\n+    binary_heap.len();\n+\n+    vec.len();\n+    &vec[..].len();\n+    vec_deque.len();\n+    hash_map.len();\n+    b_tree_map.len();\n+    linked_list.len();\n+\n+    &vec[..].len();\n+    vec.len();\n+    vec_deque.len();\n+    hash_set.len();\n+    hash_map.len();\n+    b_tree_map.len();\n+    b_tree_set.len();\n+    linked_list.len();\n+    binary_heap.len();\n+\n+    // Make sure we don't lint for non-relevant types.\n+    let false_positive = HasIter;\n+    false_positive.iter().count();\n+    false_positive.iter_mut().count();\n+    false_positive.into_iter().count();\n+}"}, {"sha": "7d49c6a3dbbb939d90144b60e51123e85293d620", "filename": "tests/ui/iter_count.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/eb04beb00558fd25499541e7caa49f95a9beb243/tests%2Fui%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb04beb00558fd25499541e7caa49f95a9beb243/tests%2Fui%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_count.rs?ref=eb04beb00558fd25499541e7caa49f95a9beb243", "patch": "@@ -0,0 +1,86 @@\n+// run-rustfix\n+// aux-build:option_helpers.rs\n+\n+#![warn(clippy::iter_count)]\n+#![allow(\n+    unused_variables,\n+    array_into_iter,\n+    unused_mut,\n+    clippy::into_iter_on_ref,\n+    clippy::unnecessary_operation\n+)]\n+\n+extern crate option_helpers;\n+\n+use option_helpers::IteratorFalsePositives;\n+use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, LinkedList, VecDeque};\n+\n+/// Struct to generate false positives for things with `.iter()`.\n+#[derive(Copy, Clone)]\n+struct HasIter;\n+\n+impl HasIter {\n+    fn iter(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+\n+    fn iter_mut(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+\n+    fn into_iter(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+}\n+\n+fn main() {\n+    let mut vec = vec![0, 1, 2, 3];\n+    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n+    let mut vec_deque: VecDeque<_> = vec.iter().cloned().collect();\n+    let mut hash_set = HashSet::new();\n+    let mut hash_map = HashMap::new();\n+    let mut b_tree_map = BTreeMap::new();\n+    let mut b_tree_set = BTreeSet::new();\n+    let mut linked_list = LinkedList::new();\n+    let mut binary_heap = BinaryHeap::new();\n+    hash_set.insert(1);\n+    hash_map.insert(1, 2);\n+    b_tree_map.insert(1, 2);\n+    b_tree_set.insert(1);\n+    linked_list.push_back(1);\n+    binary_heap.push(1);\n+\n+    &vec[..].iter().count();\n+    vec.iter().count();\n+    boxed_slice.iter().count();\n+    vec_deque.iter().count();\n+    hash_set.iter().count();\n+    hash_map.iter().count();\n+    b_tree_map.iter().count();\n+    b_tree_set.iter().count();\n+    linked_list.iter().count();\n+    binary_heap.iter().count();\n+\n+    vec.iter_mut().count();\n+    &vec[..].iter_mut().count();\n+    vec_deque.iter_mut().count();\n+    hash_map.iter_mut().count();\n+    b_tree_map.iter_mut().count();\n+    linked_list.iter_mut().count();\n+\n+    &vec[..].into_iter().count();\n+    vec.into_iter().count();\n+    vec_deque.into_iter().count();\n+    hash_set.into_iter().count();\n+    hash_map.into_iter().count();\n+    b_tree_map.into_iter().count();\n+    b_tree_set.into_iter().count();\n+    linked_list.into_iter().count();\n+    binary_heap.into_iter().count();\n+\n+    // Make sure we don't lint for non-relevant types.\n+    let false_positive = HasIter;\n+    false_positive.iter().count();\n+    false_positive.iter_mut().count();\n+    false_positive.into_iter().count();\n+}"}, {"sha": "f3fb98e65b9906aa35381897f64948aa21635d42", "filename": "tests/ui/iter_count.stderr", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/eb04beb00558fd25499541e7caa49f95a9beb243/tests%2Fui%2Fiter_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb04beb00558fd25499541e7caa49f95a9beb243/tests%2Fui%2Fiter_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_count.stderr?ref=eb04beb00558fd25499541e7caa49f95a9beb243", "patch": "@@ -0,0 +1,154 @@\n+error: called `.iter().count()` on a `slice`\n+  --> $DIR/iter_count.rs:53:6\n+   |\n+LL |     &vec[..].iter().count();\n+   |      ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n+   |\n+   = note: `-D clippy::iter-count` implied by `-D warnings`\n+\n+error: called `.iter().count()` on a `Vec`\n+  --> $DIR/iter_count.rs:54:5\n+   |\n+LL |     vec.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n+\n+error: called `.iter().count()` on a `slice`\n+  --> $DIR/iter_count.rs:55:5\n+   |\n+LL |     boxed_slice.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `boxed_slice.len()`\n+\n+error: called `.iter().count()` on a `VecDeque`\n+  --> $DIR/iter_count.rs:56:5\n+   |\n+LL |     vec_deque.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n+\n+error: called `.iter().count()` on a `HashSet`\n+  --> $DIR/iter_count.rs:57:5\n+   |\n+LL |     hash_set.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_set.len()`\n+\n+error: called `.iter().count()` on a `HashMap`\n+  --> $DIR/iter_count.rs:58:5\n+   |\n+LL |     hash_map.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_map.len()`\n+\n+error: called `.iter().count()` on a `BTreeMap`\n+  --> $DIR/iter_count.rs:59:5\n+   |\n+LL |     b_tree_map.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_map.len()`\n+\n+error: called `.iter().count()` on a `BTreeSet`\n+  --> $DIR/iter_count.rs:60:5\n+   |\n+LL |     b_tree_set.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_set.len()`\n+\n+error: called `.iter().count()` on a `LinkedList`\n+  --> $DIR/iter_count.rs:61:5\n+   |\n+LL |     linked_list.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `linked_list.len()`\n+\n+error: called `.iter().count()` on a `BinaryHeap`\n+  --> $DIR/iter_count.rs:62:5\n+   |\n+LL |     binary_heap.iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `binary_heap.len()`\n+\n+error: called `.iter_mut().count()` on a `Vec`\n+  --> $DIR/iter_count.rs:64:5\n+   |\n+LL |     vec.iter_mut().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n+\n+error: called `.iter_mut().count()` on a `slice`\n+  --> $DIR/iter_count.rs:65:6\n+   |\n+LL |     &vec[..].iter_mut().count();\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n+\n+error: called `.iter_mut().count()` on a `VecDeque`\n+  --> $DIR/iter_count.rs:66:5\n+   |\n+LL |     vec_deque.iter_mut().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n+\n+error: called `.iter_mut().count()` on a `HashMap`\n+  --> $DIR/iter_count.rs:67:5\n+   |\n+LL |     hash_map.iter_mut().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_map.len()`\n+\n+error: called `.iter_mut().count()` on a `BTreeMap`\n+  --> $DIR/iter_count.rs:68:5\n+   |\n+LL |     b_tree_map.iter_mut().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_map.len()`\n+\n+error: called `.iter_mut().count()` on a `LinkedList`\n+  --> $DIR/iter_count.rs:69:5\n+   |\n+LL |     linked_list.iter_mut().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `linked_list.len()`\n+\n+error: called `.into_iter().count()` on a `slice`\n+  --> $DIR/iter_count.rs:71:6\n+   |\n+LL |     &vec[..].into_iter().count();\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n+\n+error: called `.into_iter().count()` on a `Vec`\n+  --> $DIR/iter_count.rs:72:5\n+   |\n+LL |     vec.into_iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n+\n+error: called `.into_iter().count()` on a `VecDeque`\n+  --> $DIR/iter_count.rs:73:5\n+   |\n+LL |     vec_deque.into_iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n+\n+error: called `.into_iter().count()` on a `HashSet`\n+  --> $DIR/iter_count.rs:74:5\n+   |\n+LL |     hash_set.into_iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_set.len()`\n+\n+error: called `.into_iter().count()` on a `HashMap`\n+  --> $DIR/iter_count.rs:75:5\n+   |\n+LL |     hash_map.into_iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_map.len()`\n+\n+error: called `.into_iter().count()` on a `BTreeMap`\n+  --> $DIR/iter_count.rs:76:5\n+   |\n+LL |     b_tree_map.into_iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_map.len()`\n+\n+error: called `.into_iter().count()` on a `BTreeSet`\n+  --> $DIR/iter_count.rs:77:5\n+   |\n+LL |     b_tree_set.into_iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_set.len()`\n+\n+error: called `.into_iter().count()` on a `LinkedList`\n+  --> $DIR/iter_count.rs:78:5\n+   |\n+LL |     linked_list.into_iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `linked_list.len()`\n+\n+error: called `.into_iter().count()` on a `BinaryHeap`\n+  --> $DIR/iter_count.rs:79:5\n+   |\n+LL |     binary_heap.into_iter().count();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `binary_heap.len()`\n+\n+error: aborting due to 25 previous errors\n+"}, {"sha": "af6c7bf15ea6cae887be6438d552479692858860", "filename": "tests/ui/needless_collect.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb04beb00558fd25499541e7caa49f95a9beb243/tests%2Fui%2Fneedless_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/eb04beb00558fd25499541e7caa49f95a9beb243/tests%2Fui%2Fneedless_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.fixed?ref=eb04beb00558fd25499541e7caa49f95a9beb243", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused, clippy::suspicious_map)]\n+#![allow(unused, clippy::suspicious_map, clippy::iter_count)]\n \n use std::collections::{BTreeSet, HashMap, HashSet};\n "}, {"sha": "6ae14f370b14b540c1d1a38eecc47a9aca3b1463", "filename": "tests/ui/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb04beb00558fd25499541e7caa49f95a9beb243/tests%2Fui%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb04beb00558fd25499541e7caa49f95a9beb243/tests%2Fui%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.rs?ref=eb04beb00558fd25499541e7caa49f95a9beb243", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused, clippy::suspicious_map)]\n+#![allow(unused, clippy::suspicious_map, clippy::iter_count)]\n \n use std::collections::{BTreeSet, HashMap, HashSet};\n "}]}