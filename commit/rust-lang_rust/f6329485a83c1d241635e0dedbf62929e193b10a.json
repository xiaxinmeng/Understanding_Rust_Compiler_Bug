{"sha": "f6329485a83c1d241635e0dedbf62929e193b10a", "node_id": "C_kwDOAAsO6NoAKGY2MzI5NDg1YTgzYzFkMjQxNjM1ZTBkZWRiZjYyOTI5ZTE5M2IxMGE", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2022-08-20T12:39:21Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2022-08-20T12:39:21Z"}, "message": "rmeta/query cache: don't write string values of preinterned symbols", "tree": {"sha": "9c4655f630fb967b4a34e4a3c3ced3cb884a5bfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c4655f630fb967b4a34e4a3c3ced3cb884a5bfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6329485a83c1d241635e0dedbf62929e193b10a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6329485a83c1d241635e0dedbf62929e193b10a", "html_url": "https://github.com/rust-lang/rust/commit/f6329485a83c1d241635e0dedbf62929e193b10a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6329485a83c1d241635e0dedbf62929e193b10a/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0016356f2b8b9c5e5dc99204175957b30470fb7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0016356f2b8b9c5e5dc99204175957b30470fb7f", "html_url": "https://github.com/rust-lang/rust/commit/0016356f2b8b9c5e5dc99204175957b30470fb7f"}], "stats": {"total": 73, "additions": 51, "deletions": 22}, "files": [{"sha": "d0e0aa91480c917eb56c5243795c9c5ef5c3c1f3", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6329485a83c1d241635e0dedbf62929e193b10a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6329485a83c1d241635e0dedbf62929e193b10a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=f6329485a83c1d241635e0dedbf62929e193b10a", "patch": "@@ -631,6 +631,10 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Symbol {\n \n                 sym\n             }\n+            SYMBOL_PREINTERNED => {\n+                let symbol_index = d.read_u32();\n+                Symbol::new_from_decoded(symbol_index)\n+            }\n             _ => unreachable!(),\n         }\n     }"}, {"sha": "cd5da40150d4e15ba1fb896c5fe1af6fdb7d7f90", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f6329485a83c1d241635e0dedbf62929e193b10a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6329485a83c1d241635e0dedbf62929e193b10a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f6329485a83c1d241635e0dedbf62929e193b10a", "patch": "@@ -317,17 +317,24 @@ impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Span {\n \n impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Symbol {\n     fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) {\n-        match s.symbol_table.entry(*self) {\n-            Entry::Vacant(o) => {\n-                s.opaque.emit_u8(SYMBOL_STR);\n-                let pos = s.opaque.position();\n-                o.insert(pos);\n-                s.emit_str(self.as_str());\n-            }\n-            Entry::Occupied(o) => {\n-                let x = o.get().clone();\n-                s.emit_u8(SYMBOL_OFFSET);\n-                s.emit_usize(x);\n+        // if symbol preinterned, emit tag and symbol index\n+        if self.is_preinterned() {\n+            s.opaque.emit_u8(SYMBOL_PREINTERNED);\n+            s.opaque.emit_u32(self.as_u32());\n+        } else {\n+            // otherwise write it as string or as offset to it\n+            match s.symbol_table.entry(*self) {\n+                Entry::Vacant(o) => {\n+                    s.opaque.emit_u8(SYMBOL_STR);\n+                    let pos = s.opaque.position();\n+                    o.insert(pos);\n+                    s.emit_str(self.as_str());\n+                }\n+                Entry::Occupied(o) => {\n+                    let x = o.get().clone();\n+                    s.emit_u8(SYMBOL_OFFSET);\n+                    s.emit_usize(x);\n+                }\n             }\n         }\n     }"}, {"sha": "e6cceaf29d51f08172195392ca89b90d79a6bced", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6329485a83c1d241635e0dedbf62929e193b10a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6329485a83c1d241635e0dedbf62929e193b10a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=f6329485a83c1d241635e0dedbf62929e193b10a", "patch": "@@ -448,6 +448,7 @@ const TAG_PARTIAL_SPAN: u8 = 2;\n // Tags for encoding Symbol's\n const SYMBOL_STR: u8 = 0;\n const SYMBOL_OFFSET: u8 = 1;\n+const SYMBOL_PREINTERNED: u8 = 2;\n \n pub fn provide(providers: &mut Providers) {\n     encoder::provide(providers);"}, {"sha": "5ef95911f562d851a91bf09e623c7de6cf84b6b7", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f6329485a83c1d241635e0dedbf62929e193b10a/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6329485a83c1d241635e0dedbf62929e193b10a/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=f6329485a83c1d241635e0dedbf62929e193b10a", "patch": "@@ -42,6 +42,7 @@ const TAG_EXPN_DATA: u8 = 1;\n // Tags for encoding Symbol's\n const SYMBOL_STR: u8 = 0;\n const SYMBOL_OFFSET: u8 = 1;\n+const SYMBOL_PREINTERNED: u8 = 2;\n \n /// Provides an interface to incremental compilation data cached from the\n /// previous compilation session. This data will eventually include the results\n@@ -745,6 +746,10 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for Symbol {\n \n                 sym\n             }\n+            SYMBOL_PREINTERNED => {\n+                let symbol_index = d.read_u32();\n+                Symbol::new_from_decoded(symbol_index)\n+            }\n             _ => unreachable!(),\n         }\n     }\n@@ -939,17 +944,24 @@ impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for Span {\n // copy&paste impl from rustc_metadata\n impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for Symbol {\n     fn encode(&self, s: &mut CacheEncoder<'a, 'tcx>) {\n-        match s.symbol_table.entry(*self) {\n-            Entry::Vacant(o) => {\n-                s.encoder.emit_u8(SYMBOL_STR);\n-                let pos = s.encoder.position();\n-                o.insert(pos);\n-                s.emit_str(self.as_str());\n-            }\n-            Entry::Occupied(o) => {\n-                let x = o.get().clone();\n-                s.emit_u8(SYMBOL_OFFSET);\n-                s.emit_usize(x);\n+        // if symbol preinterned, emit tag and symbol index\n+        if self.is_preinterned() {\n+            s.encoder.emit_u8(SYMBOL_PREINTERNED);\n+            s.encoder.emit_u32(self.as_u32());\n+        } else {\n+            // otherwise write it as string or as offset to it\n+            match s.symbol_table.entry(*self) {\n+                Entry::Vacant(o) => {\n+                    s.encoder.emit_u8(SYMBOL_STR);\n+                    let pos = s.encoder.position();\n+                    o.insert(pos);\n+                    s.emit_str(self.as_str());\n+                }\n+                Entry::Occupied(o) => {\n+                    let x = o.get().clone();\n+                    s.emit_u8(SYMBOL_OFFSET);\n+                    s.emit_usize(x);\n+                }\n             }\n         }\n     }"}, {"sha": "ac166e09843df45b4bd4fd017a018ba0634f9349", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6329485a83c1d241635e0dedbf62929e193b10a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6329485a83c1d241635e0dedbf62929e193b10a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=f6329485a83c1d241635e0dedbf62929e193b10a", "patch": "@@ -1803,6 +1803,11 @@ impl Symbol {\n         Symbol(SymbolIndex::from_u32(n))\n     }\n \n+    /// for use in Decoder only\n+    pub fn new_from_decoded(n: u32) -> Self {\n+        Self::new(n)\n+    }\n+\n     /// Maps a string to its interned representation.\n     pub fn intern(string: &str) -> Self {\n         with_session_globals(|session_globals| session_globals.symbol_interner.intern(string))"}]}