{"sha": "1fa0ff88c03284421d99662909a4c24a8651d47d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYTBmZjg4YzAzMjg0NDIxZDk5NjYyOTA5YTRjMjRhODY1MWQ0N2Q=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-30T09:41:01Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-30T09:41:01Z"}, "message": "fix nits", "tree": {"sha": "ef42e24f95564ef1518f12c3bcac8de5e14d5ab6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef42e24f95564ef1518f12c3bcac8de5e14d5ab6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fa0ff88c03284421d99662909a4c24a8651d47d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fa0ff88c03284421d99662909a4c24a8651d47d", "html_url": "https://github.com/rust-lang/rust/commit/1fa0ff88c03284421d99662909a4c24a8651d47d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fa0ff88c03284421d99662909a4c24a8651d47d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c9552260c03f72f1de840de092775fd03ed05b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c9552260c03f72f1de840de092775fd03ed05b5", "html_url": "https://github.com/rust-lang/rust/commit/9c9552260c03f72f1de840de092775fd03ed05b5"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "9e3f49ac9fd32d36ec977d3dfc2f8ca00cf5107d", "filename": "src/fn_call.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1fa0ff88c03284421d99662909a4c24a8651d47d/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa0ff88c03284421d99662909a4c24a8651d47d/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=1fa0ff88c03284421d99662909a4c24a8651d47d", "patch": "@@ -150,10 +150,14 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n                 if !align.is_power_of_two() {\n                     return err!(HeapAllocNonPowerOfTwoAlignment(align));\n                 }\n-                let ptr = self.memory_mut().allocate(Size::from_bytes(size),\n-                                               Align::from_bytes(align, align).unwrap(),\n-                                               MiriMemoryKind::Rust.into())?;\n-                self.write_scalar(Scalar::Ptr(ptr.with_default_tag()), dest)?;\n+                let ptr = self.memory_mut()\n+                    .allocate(\n+                        Size::from_bytes(size),\n+                        Align::from_bytes(align, align).unwrap(),\n+                        MiriMemoryKind::Rust.into()\n+                    )?\n+                    .with_default_tag();\n+                self.write_scalar(Scalar::Ptr(ptr), dest)?;\n             }\n             \"__rust_alloc_zeroed\" => {\n                 let size = self.read_scalar(args[0])?.to_usize(&self)?;\n@@ -164,11 +168,13 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n                 if !align.is_power_of_two() {\n                     return err!(HeapAllocNonPowerOfTwoAlignment(align));\n                 }\n-                let ptr = self.memory_mut().allocate(\n+                let ptr = self.memory_mut()\n+                    .allocate(\n                         Size::from_bytes(size),\n                         Align::from_bytes(align, align).unwrap(),\n                         MiriMemoryKind::Rust.into()\n-                    )?.with_default_tag();\n+                    )?\n+                    .with_default_tag();\n                 self.memory_mut().write_repeat(ptr.into(), 0, Size::from_bytes(size))?;\n                 self.write_scalar(Scalar::Ptr(ptr), dest)?;\n             }"}, {"sha": "a569ed4e55513b20edb1c9dc5385af412da94931", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1fa0ff88c03284421d99662909a4c24a8651d47d/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa0ff88c03284421d99662909a4c24a8651d47d/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=1fa0ff88c03284421d99662909a4c24a8651d47d", "patch": "@@ -251,7 +251,7 @@ impl<'tcx> Stack {\n impl State {\n     fn increment_clock(&self) -> Timestamp {\n         let val = self.clock.get();\n-        self.clock.set(val+1);\n+        self.clock.set(val + 1);\n         val\n     }\n }\n@@ -322,13 +322,13 @@ impl<'tcx> Stacks {\n     /// Pushes the first borrow to the stacks, must be a mutable one.\n     pub fn first_borrow(\n         &mut self,\n-        r#mut: Mut,\n+        mut_borrow: Mut,\n         size: Size\n     ) {\n         for stack in self.stacks.get_mut().iter_mut(Size::ZERO, size) {\n             assert!(stack.borrows.len() == 1 && stack.frozen_since.is_none());\n             assert_eq!(stack.borrows.pop().unwrap(), BorStackItem::Mut(Mut::Raw));\n-            stack.borrows.push(BorStackItem::Mut(r#mut));\n+            stack.borrows.push(BorStackItem::Mut(mut_borrow));\n         }\n     }\n }\n@@ -489,7 +489,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n         id: AllocId,\n         kind: MemoryKind<MiriMemoryKind>,\n     ) -> Borrow {\n-        let r#mut = match kind {\n+        let mut_borrow = match kind {\n             MemoryKind::Stack => {\n                 // New unique borrow\n                 let time = self.machine.stacked_borrows.increment_clock();\n@@ -503,7 +503,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n         // Make this the active borrow for this allocation\n         let alloc = self.memory_mut().get_mut(id).expect(\"This is a new allocation, it must still exist\");\n         let size = Size::from_bytes(alloc.bytes.len() as u64);\n-        alloc.extra.first_borrow(r#mut, size);\n-        Borrow::Mut(r#mut)\n+        alloc.extra.first_borrow(mut_borrow, size);\n+        Borrow::Mut(mut_borrow)\n     }\n }"}, {"sha": "094a38951974bc2ac524156a1443477ddf595258", "filename": "tests/compile-fail/stacked_borrows/illegal_write4.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fa0ff88c03284421d99662909a4c24a8651d47d/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa0ff88c03284421d99662909a4c24a8651d47d/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write4.rs?ref=1fa0ff88c03284421d99662909a4c24a8651d47d", "patch": "@@ -11,8 +11,8 @@ fn main() {\n     let target = 42;\n     // Make sure a cannot use a raw-tagged `&mut` pointing to a frozen location, not\n     // even to create a raw.\n-    let r#ref = &target; // freeze\n-    let ptr = r#ref as *const _ as *mut i32; // raw ptr, with raw tag\n+    let reference = &target; // freeze\n+    let ptr = reference as *const _ as *mut i32; // raw ptr, with raw tag\n     let mut_ref: &mut i32 = unsafe { mem::transmute(ptr) }; // &mut, with raw tag\n     // Now we have an &mut to a frozen location, but that is completely normal:\n     // We'd just unfreeze the location if we used it.\n@@ -23,9 +23,9 @@ fn main() {\n     // turns a raw into a `&mut`.  Next, we create a raw ref to a frozen location\n     // from a `Raw` tag, which can happen legitimately when interior mutability\n     // is involved.\n-    let _val = *r#ref; // Make sure it is still frozen.\n+    let _val = *reference; // Make sure it is still frozen.\n \n     // We only actually unfreeze once we muteate through the bad pointer.\n     unsafe { *bad_ptr = 42 }; //~ ERROR does not exist on the stack\n-    let _val = *r#ref;\n+    let _val = *reference;\n }"}]}