{"sha": "7daaddb2ac281dcad3ac99496b1cf3f06840887d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYWFkZGIyYWMyODFkY2FkM2FjOTk0OTZiMWNmM2YwNjg0MDg4N2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-08T10:15:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-08T10:15:01Z"}, "message": "Some abstraction around workers", "tree": {"sha": "3a6c9ac35c0f198c782591b50eb50225769955bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a6c9ac35c0f198c782591b50eb50225769955bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7daaddb2ac281dcad3ac99496b1cf3f06840887d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7daaddb2ac281dcad3ac99496b1cf3f06840887d", "html_url": "https://github.com/rust-lang/rust/commit/7daaddb2ac281dcad3ac99496b1cf3f06840887d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7daaddb2ac281dcad3ac99496b1cf3f06840887d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "326ffcefe09906560a03d3184a2ce76841448702", "url": "https://api.github.com/repos/rust-lang/rust/commits/326ffcefe09906560a03d3184a2ce76841448702", "html_url": "https://github.com/rust-lang/rust/commit/326ffcefe09906560a03d3184a2ce76841448702"}], "stats": {"total": 166, "additions": 92, "deletions": 74}, "files": [{"sha": "f1297ee48fbd554c231d1ddda71cd1293229c7a3", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7daaddb2ac281dcad3ac99496b1cf3f06840887d/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7daaddb2ac281dcad3ac99496b1cf3f06840887d/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=7daaddb2ac281dcad3ac99496b1cf3f06840887d", "patch": "@@ -23,6 +23,7 @@ use {\n     server_world::{ServerWorldState, ServerWorld},\n     main_loop::subscriptions::{Subscriptions},\n     project_model::{CargoWorkspace, workspace_loader},\n+    thread_watcher::Worker,\n };\n \n #[derive(Debug)]\n@@ -43,8 +44,8 @@ pub fn main_loop(\n         .build()\n         .unwrap();\n     let (task_sender, task_receiver) = unbounded::<Task>();\n-    let ((fs_sender, fs_receiver), fs_watcher) = vfs::roots_loader();\n-    let ((ws_sender, ws_receiver), ws_watcher) = workspace_loader();\n+    let (fs_worker, fs_watcher) = vfs::roots_loader();\n+    let (ws_worker, ws_watcher) = workspace_loader();\n \n     info!(\"server initialized, serving requests\");\n     let mut state = ServerWorldState::new();\n@@ -59,10 +60,8 @@ pub fn main_loop(\n         msg_receriver,\n         task_sender,\n         task_receiver.clone(),\n-        fs_sender,\n-        fs_receiver,\n-        ws_sender,\n-        ws_receiver,\n+        fs_worker,\n+        ws_worker,\n         &mut state,\n         &mut pending_requests,\n         &mut subs,\n@@ -93,17 +92,15 @@ fn main_loop_inner(\n     msg_receiver: &mut Receiver<RawMessage>,\n     task_sender: Sender<Task>,\n     task_receiver: Receiver<Task>,\n-    fs_sender: Sender<PathBuf>,\n-    fs_receiver: Receiver<(PathBuf, Vec<FileEvent>)>,\n-    ws_sender: Sender<PathBuf>,\n-    ws_receiver: Receiver<Result<CargoWorkspace>>,\n+    fs_worker: Worker<PathBuf, (PathBuf, Vec<FileEvent>)>,\n+    ws_worker: Worker<PathBuf, Result<CargoWorkspace>>,\n     state: &mut ServerWorldState,\n     pending_requests: &mut HashMap<u64, JobHandle>,\n     subs: &mut Subscriptions,\n ) -> Result<()> {\n     let (libdata_sender, libdata_receiver) = unbounded();\n-    ws_sender.send(ws_root.clone());\n-    fs_sender.send(ws_root.clone());\n+    ws_worker.send(ws_root.clone());\n+    fs_worker.send(ws_root.clone());\n     loop {\n         #[derive(Debug)]\n         enum Event {\n@@ -120,11 +117,11 @@ fn main_loop_inner(\n                 None => bail!(\"client exited without shutdown\"),\n             },\n             recv(task_receiver, task) => Event::Task(task.unwrap()),\n-            recv(fs_receiver, events) => match events {\n+            recv(fs_worker.out, events) => match events {\n                 None => bail!(\"roots watcher died\"),\n                 Some((pb, events)) => Event::Fs(pb, events),\n             }\n-            recv(ws_receiver, ws) => match ws {\n+            recv(ws_worker.out, ws) => match ws {\n                 None => bail!(\"workspace watcher died\"),\n                 Some(ws) => Event::Ws(ws),\n             }\n@@ -158,8 +155,7 @@ fn main_loop_inner(\n                         for ws in workspaces.iter() {\n                             for pkg in ws.packages().filter(|pkg| !pkg.is_member(ws)) {\n                                 debug!(\"sending root, {}\", pkg.root(ws).to_path_buf().display());\n-                                // deadlocky :-(\n-                                fs_sender.send(pkg.root(ws).to_path_buf());\n+                                fs_worker.send(pkg.root(ws).to_path_buf());\n                             }\n                         }\n                         state.set_workspaces(workspaces);"}, {"sha": "359cf787d6645bf1fe3754a9d16cf874c9e4a13a", "filename": "crates/server/src/project_model.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7daaddb2ac281dcad3ac99496b1cf3f06840887d/crates%2Fserver%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7daaddb2ac281dcad3ac99496b1cf3f06840887d/crates%2Fserver%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fproject_model.rs?ref=7daaddb2ac281dcad3ac99496b1cf3f06840887d", "patch": "@@ -3,12 +3,11 @@ use std::{\n     path::{Path, PathBuf},\n };\n use cargo_metadata::{metadata_run, CargoOpt};\n-use crossbeam_channel::{Sender, Receiver};\n use libsyntax2::SmolStr;\n \n use {\n     Result,\n-    thread_watcher::{ThreadWatcher, worker_chan},\n+    thread_watcher::{Worker, ThreadWatcher},\n };\n \n #[derive(Debug, Clone)]\n@@ -162,14 +161,15 @@ impl TargetKind {\n     }\n }\n \n-pub fn workspace_loader() -> ((Sender<PathBuf>, Receiver<Result<CargoWorkspace>>), ThreadWatcher) {\n-    let (interface, input_receiver, output_sender) = worker_chan::<PathBuf, Result<CargoWorkspace>>(1);\n-    let thread = ThreadWatcher::spawn(\"workspace loader\", move || {\n-        input_receiver\n-            .into_iter()\n-            .map(|path| CargoWorkspace::from_cargo_metadata(path.as_path()))\n-            .for_each(|it| output_sender.send(it))\n-    });\n-\n-    (interface, thread)\n+pub fn workspace_loader() -> (Worker<PathBuf, Result<CargoWorkspace>>, ThreadWatcher) {\n+    Worker::<PathBuf, Result<CargoWorkspace>>::spawn(\n+        \"workspace loader\",\n+        1,\n+        |input_receiver, output_sender| {\n+            input_receiver\n+                .into_iter()\n+                .map(|path| CargoWorkspace::from_cargo_metadata(path.as_path()))\n+                .for_each(|it| output_sender.send(it))\n+        }\n+    )\n }"}, {"sha": "86a3a91e071c8c2292eb901f29f8dbd91d9f865e", "filename": "crates/server/src/thread_watcher.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7daaddb2ac281dcad3ac99496b1cf3f06840887d/crates%2Fserver%2Fsrc%2Fthread_watcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7daaddb2ac281dcad3ac99496b1cf3f06840887d/crates%2Fserver%2Fsrc%2Fthread_watcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fthread_watcher.rs?ref=7daaddb2ac281dcad3ac99496b1cf3f06840887d", "patch": "@@ -3,14 +3,41 @@ use crossbeam_channel::{bounded, unbounded, Sender, Receiver};\n use drop_bomb::DropBomb;\n use Result;\n \n+pub struct Worker<I, O> {\n+    pub inp: Sender<I>,\n+    pub out: Receiver<O>,\n+}\n+\n+impl<I, O> Worker<I, O> {\n+    pub fn spawn<F>(name: &'static str, buf: usize, f: F) -> (Self, ThreadWatcher)\n+    where\n+        F: FnOnce(Receiver<I>, Sender<O>) + Send + 'static,\n+        I: Send + 'static,\n+        O: Send + 'static,\n+    {\n+        let ((inp, out), inp_r, out_s) = worker_chan(buf);\n+        let worker = Worker { inp, out };\n+        let watcher = ThreadWatcher::spawn(name, move || f(inp_r, out_s));\n+        (worker, watcher)\n+    }\n+\n+    pub fn stop(self) -> Receiver<O> {\n+        self.out\n+    }\n+\n+    pub fn send(&self, item: I) {\n+        self.inp.send(item)\n+    }\n+}\n+\n pub struct ThreadWatcher {\n     name: &'static str,\n     thread: thread::JoinHandle<()>,\n     bomb: DropBomb,\n }\n \n impl ThreadWatcher {\n-    pub fn spawn(name: &'static str, f: impl FnOnce() + Send + 'static) -> ThreadWatcher {\n+    fn spawn(name: &'static str, f: impl FnOnce() + Send + 'static) -> ThreadWatcher {\n         let thread = thread::spawn(f);\n         ThreadWatcher {\n             name,\n@@ -36,7 +63,7 @@ impl ThreadWatcher {\n /// Sets up worker channels in a deadlock-avoind way.\n /// If one sets both input and output buffers to a fixed size,\n /// a worker might get stuck.\n-pub fn worker_chan<I, O>(buf: usize) -> ((Sender<I>, Receiver<O>), Receiver<I>, Sender<O>) {\n+fn worker_chan<I, O>(buf: usize) -> ((Sender<I>, Receiver<O>), Receiver<I>, Sender<O>) {\n     let (input_sender, input_receiver) = bounded::<I>(buf);\n     let (output_sender, output_receiver) = unbounded::<O>();\n     ((input_sender, output_receiver), input_receiver, output_sender)"}, {"sha": "a1c1783f206b7851457e7680f9781ec5702fae97", "filename": "crates/server/src/vfs.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7daaddb2ac281dcad3ac99496b1cf3f06840887d/crates%2Fserver%2Fsrc%2Fvfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7daaddb2ac281dcad3ac99496b1cf3f06840887d/crates%2Fserver%2Fsrc%2Fvfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fvfs.rs?ref=7daaddb2ac281dcad3ac99496b1cf3f06840887d", "patch": "@@ -3,11 +3,10 @@ use std::{\n     fs,\n };\n \n-use crossbeam_channel::{Sender, Receiver};\n use walkdir::WalkDir;\n \n use {\n-    thread_watcher::{ThreadWatcher, worker_chan},\n+    thread_watcher::{Worker, ThreadWatcher},\n };\n \n \n@@ -22,22 +21,21 @@ pub enum FileEventKind {\n     Add(String),\n }\n \n-pub fn roots_loader() -> ((Sender<PathBuf>, Receiver<(PathBuf, Vec<FileEvent>)>), ThreadWatcher) {\n-    let (interface, input_receiver, output_sender) =\n-        worker_chan::<PathBuf, (PathBuf, Vec<FileEvent>)>(128);\n-    let thread = ThreadWatcher::spawn(\"roots loader\", move || {\n-        input_receiver\n-            .into_iter()\n-            .map(|path| {\n-                debug!(\"loading {} ...\", path.as_path().display());\n-                let events = load_root(path.as_path());\n-                debug!(\"... loaded {}\", path.as_path().display());\n-                (path, events)\n-            })\n-            .for_each(|it| output_sender.send(it))\n-    });\n-\n-    (interface, thread)\n+pub fn roots_loader() -> (Worker<PathBuf, (PathBuf, Vec<FileEvent>)>, ThreadWatcher) {\n+    Worker::<PathBuf, (PathBuf, Vec<FileEvent>)>::spawn(\n+        \"roots loader\",\n+        128, |input_receiver, output_sender| {\n+            input_receiver\n+                .into_iter()\n+                .map(|path| {\n+                    debug!(\"loading {} ...\", path.as_path().display());\n+                    let events = load_root(path.as_path());\n+                    debug!(\"... loaded {}\", path.as_path().display());\n+                    (path, events)\n+                })\n+                .for_each(|it| output_sender.send(it))\n+        }\n+    )\n }\n \n fn load_root(path: &Path) -> Vec<FileEvent> {"}, {"sha": "35591403308ea0e1d86e9b9aa6f6140da2388c29", "filename": "crates/server/tests/heavy_tests/support.rs", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7daaddb2ac281dcad3ac99496b1cf3f06840887d/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7daaddb2ac281dcad3ac99496b1cf3f06840887d/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=7daaddb2ac281dcad3ac99496b1cf3f06840887d", "patch": "@@ -1,14 +1,13 @@\n use std::{\n     fs,\n-    thread,\n     cell::{Cell, RefCell},\n     path::PathBuf,\n     time::Duration,\n     sync::Once,\n };\n \n use tempdir::TempDir;\n-use crossbeam_channel::{after, Sender, Receiver};\n+use crossbeam_channel::{after, Receiver};\n use flexi_logger::Logger;\n use languageserver_types::{\n     Url,\n@@ -22,7 +21,7 @@ use serde::Serialize;\n use serde_json::{Value, from_str, to_string_pretty};\n use gen_lsp_server::{RawMessage, RawRequest, RawNotification};\n \n-use m::{Result, main_loop, req, thread_watcher::worker_chan};\n+use m::{main_loop, req, thread_watcher::{ThreadWatcher, Worker}};\n \n pub fn project(fixture: &str) -> Server {\n     static INIT: Once = Once::new();\n@@ -61,28 +60,27 @@ pub struct Server {\n     req_id: Cell<u64>,\n     messages: RefCell<Vec<RawMessage>>,\n     dir: TempDir,\n-    sender: Option<Sender<RawMessage>>,\n-    receiver: Receiver<RawMessage>,\n-    server: Option<thread::JoinHandle<Result<()>>>,\n+    worker: Option<Worker<RawMessage, RawMessage>>,\n+    watcher: Option<ThreadWatcher>,\n }\n \n impl Server {\n     fn new(dir: TempDir, files: Vec<(PathBuf, String)>) -> Server {\n         let path = dir.path().to_path_buf();\n-        let ((msg_sender, msg_receiver), server) = {\n-            let (api, mut msg_receiver, mut msg_sender) = worker_chan::<RawMessage, RawMessage>(128);\n-            let server = thread::spawn(move || {\n+        let (worker, watcher) = Worker::<RawMessage, RawMessage>::spawn(\n+            \"test server\",\n+            128,\n+            move |mut msg_receiver, mut msg_sender| {\n                 main_loop(true, path, &mut msg_receiver, &mut msg_sender)\n-            });\n-            (api, server)\n-        };\n+                    .unwrap()\n+            }\n+        );\n         let res = Server {\n             req_id: Cell::new(1),\n             dir,\n             messages: Default::default(),\n-            sender: Some(msg_sender),\n-            receiver: msg_receiver,\n-            server: Some(server),\n+            worker: Some(worker),\n+            watcher: Some(watcher),\n         };\n \n         for (path, text) in files {\n@@ -140,7 +138,7 @@ impl Server {\n     fn send_request_(&self, r: RawRequest) -> Value\n     {\n         let id = r.id;\n-        self.sender.as_ref()\n+        self.worker.as_ref()\n             .unwrap()\n             .send(RawMessage::Request(r));\n         while let Some(msg) = self.recv() {\n@@ -183,31 +181,30 @@ impl Server {\n         }\n     }\n     fn recv(&self) -> Option<RawMessage> {\n-        recv_timeout(&self.receiver)\n+        recv_timeout(&self.worker.as_ref().unwrap().out)\n             .map(|msg| {\n                 self.messages.borrow_mut().push(msg.clone());\n                 msg\n             })\n     }\n     fn send_notification(&self, not: RawNotification) {\n-        self.sender.as_ref()\n+        self.worker.as_ref()\n             .unwrap()\n             .send(RawMessage::Notification(not));\n     }\n }\n \n impl Drop for Server {\n     fn drop(&mut self) {\n-        {\n-            self.send_request::<Shutdown>(666, ());\n-            drop(self.sender.take().unwrap());\n-            while let Some(msg) = recv_timeout(&self.receiver) {\n-                drop(msg);\n-            }\n+        self.send_request::<Shutdown>(666, ());\n+        let receiver = self.worker.take().unwrap().stop();\n+        while let Some(msg) = recv_timeout(&receiver) {\n+            drop(msg);\n         }\n-        self.server.take()\n+        self.watcher.take()\n             .unwrap()\n-            .join().unwrap().unwrap();\n+            .stop()\n+            .unwrap();\n     }\n }\n "}]}