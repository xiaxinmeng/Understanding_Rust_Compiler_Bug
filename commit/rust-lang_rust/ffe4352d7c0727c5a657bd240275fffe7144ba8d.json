{"sha": "ffe4352d7c0727c5a657bd240275fffe7144ba8d", "node_id": "C_kwDOAAsO6NoAKGZmZTQzNTJkN2MwNzI3YzVhNjU3YmQyNDAyNzVmZmZlNzE0NGJhOGQ", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-14T18:53:28Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-14T18:53:28Z"}, "message": "styling fixes", "tree": {"sha": "39541c629b8210a2ee7a9ecc76358e1768e786ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39541c629b8210a2ee7a9ecc76358e1768e786ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffe4352d7c0727c5a657bd240275fffe7144ba8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmHhxqgACgkQeO9fUvOM\nSb0mIAv/ak66z3o8Apmon7SgagJ7Oa2xHH/7E27sGf22yDQzARdzRO6cci2y35w/\nPpphbedx4AlXJqv+z5x+S6DxapIWNsdcDHtRptVw/sB/FZs8/HJHIO48RRTc8qc2\nCcrmQSYmkNae4fzuOcLim/B4St37OwfG1UttfmSQNTaeFTIsYR6iij6Es4cKr23v\nORxitbql6/yVYJx5xfB0+w40Tr7W+vJ2WfYJFJjErVL+n23zXLaycgo+HXB5Ho/N\nDq/moHmg1zli0izs1A4aGjxQv0cGq1Xetr3tHkX95ic9LnjtR2WY0hszLAibD9M1\nfAAg1qVrm+LAtcRGhjG2fr3RX6+GIkkvfX2r1Aedajx/k/2Dsncr3TH4PiYjQDYp\nyE2rUg3gs2eywXaqxtN2oaVFnqwQ9fMLcVYyGqe2JlNRz2Xwc0U5lEuveAf5XJ3S\nFzxIB2dgnOWC2xI1fRXgipMLm5UyqKSWjql19H9il5Wb4d7+4lrcYnV49RhBLN2x\n3u0cuAna\n=4/eU\n-----END PGP SIGNATURE-----", "payload": "tree 39541c629b8210a2ee7a9ecc76358e1768e786ff\nparent 683de877ce49d0abd472777a94d3038eee1ee060\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1642186408 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1642186408 +0000\n\nstyling fixes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffe4352d7c0727c5a657bd240275fffe7144ba8d", "html_url": "https://github.com/rust-lang/rust/commit/ffe4352d7c0727c5a657bd240275fffe7144ba8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffe4352d7c0727c5a657bd240275fffe7144ba8d/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "683de877ce49d0abd472777a94d3038eee1ee060", "url": "https://api.github.com/repos/rust-lang/rust/commits/683de877ce49d0abd472777a94d3038eee1ee060", "html_url": "https://github.com/rust-lang/rust/commit/683de877ce49d0abd472777a94d3038eee1ee060"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "622ead81f105ba325b20a3992f5da7dea36b6665", "filename": "crates/ide_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ffe4352d7c0727c5a657bd240275fffe7144ba8d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe4352d7c0727c5a657bd240275fffe7144ba8d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=ffe4352d7c0727c5a657bd240275fffe7144ba8d", "patch": "@@ -2,7 +2,7 @@ use hir::TypeInfo;\n use std::{collections::HashMap, iter::successors};\n use syntax::{\n     algo::neighbor,\n-    ast::{self, AstNode, HasName, MatchArm, Pat},\n+    ast::{self, AstNode, HasName},\n     Direction,\n };\n \n@@ -90,7 +90,7 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n     )\n }\n \n-fn contains_placeholder(a: &MatchArm) -> bool {\n+fn contains_placeholder(a: &ast::MatchArm) -> bool {\n     matches!(a.pat(), Some(ast::Pat::WildcardPat(..)))\n }\n \n@@ -101,54 +101,55 @@ fn are_same_types(\n ) -> bool {\n     let arm_types = get_arm_types(&ctx, &arm);\n     for (other_arm_type_name, other_arm_type) in arm_types {\n-        if let (Some(Some(current_arm_type)), Some(other_arm_type)) =\n-            (current_arm_types.get(&other_arm_type_name), other_arm_type)\n-        {\n-            if other_arm_type.original != current_arm_type.original {\n-                return false;\n+        match (current_arm_types.get(&other_arm_type_name), other_arm_type) {\n+            (Some(Some(current_arm_type)), Some(other_arm_type))\n+                if other_arm_type.original == current_arm_type.original =>\n+            {\n+                ()\n             }\n-        } else {\n-            // No corresponding field found\n-            return false;\n+            _ => return false,\n         }\n     }\n \n-    return true;\n+    true\n }\n \n-fn get_arm_types(context: &AssistContext, arm: &MatchArm) -> HashMap<String, Option<TypeInfo>> {\n+fn get_arm_types(\n+    context: &AssistContext,\n+    arm: &ast::MatchArm,\n+) -> HashMap<String, Option<TypeInfo>> {\n     let mut mapping: HashMap<String, Option<TypeInfo>> = HashMap::new();\n \n     fn recurse(\n-        pat: &Option<Pat>,\n         map: &mut HashMap<String, Option<TypeInfo>>,\n         ctx: &AssistContext,\n+        pat: &Option<ast::Pat>,\n     ) {\n         if let Some(local_pat) = pat {\n             match pat {\n                 Some(ast::Pat::TupleStructPat(tuple)) => {\n                     for field in tuple.fields() {\n-                        recurse(&Some(field), map, ctx);\n+                        recurse(map, ctx, &Some(field));\n                     }\n                 }\n                 Some(ast::Pat::TuplePat(tuple)) => {\n                     for field in tuple.fields() {\n-                        recurse(&Some(field), map, ctx);\n+                        recurse(map, ctx, &Some(field));\n                     }\n                 }\n                 Some(ast::Pat::RecordPat(record)) => {\n                     if let Some(field_list) = record.record_pat_field_list() {\n                         for field in field_list.fields() {\n-                            recurse(&field.pat(), map, ctx);\n+                            recurse(map, ctx, &field.pat());\n                         }\n                     }\n                 }\n                 Some(ast::Pat::ParenPat(parentheses)) => {\n-                    recurse(&parentheses.pat(), map, ctx);\n+                    recurse(map, ctx, &parentheses.pat());\n                 }\n                 Some(ast::Pat::SlicePat(slice)) => {\n                     for slice_pat in slice.pats() {\n-                        recurse(&Some(slice_pat), map, ctx);\n+                        recurse(map, ctx, &Some(slice_pat));\n                     }\n                 }\n                 Some(ast::Pat::IdentPat(ident_pat)) => {\n@@ -162,8 +163,8 @@ fn get_arm_types(context: &AssistContext, arm: &MatchArm) -> HashMap<String, Opt\n         }\n     }\n \n-    recurse(&arm.pat(), &mut mapping, &context);\n-    return mapping;\n+    recurse(&mut mapping, &context, &arm.pat());\n+    mapping\n }\n \n #[cfg(test)]\n@@ -327,7 +328,8 @@ fn main() {\n     fn merge_match_arms_different_type() {\n         check_assist_not_applicable(\n             merge_match_arms,\n-            r#\"//- minicore: result\n+            r#\"\n+//- minicore: result\n fn func() {\n     match Result::<f64, f32>::Ok(0f64) {\n         Ok(x) => $0x.classify(),\n@@ -342,7 +344,8 @@ fn func() {\n     fn merge_match_arms_different_type_multiple_fields() {\n         check_assist_not_applicable(\n             merge_match_arms,\n-            r#\"//- minicore: result\n+            r#\"\n+//- minicore: result\n fn func() {\n     match Result::<(f64, f64), (f32, f32)>::Ok((0f64, 0f64)) {\n         Ok(x) => $0x.1.classify(),\n@@ -357,7 +360,8 @@ fn func() {\n     fn merge_match_arms_same_type_multiple_fields() {\n         check_assist(\n             merge_match_arms,\n-            r#\"//- minicore: result\n+            r#\"\n+//- minicore: result\n fn func() {\n     match Result::<(f64, f64), (f64, f64)>::Ok((0f64, 0f64)) {\n         Ok(x) => $0x.1.classify(),\n@@ -437,7 +441,8 @@ fn func(e: MyEnum) {\n     fn merge_match_arms_same_type_different_number_of_fields() {\n         check_assist_not_applicable(\n             merge_match_arms,\n-            r#\"//- minicore: result\n+            r#\"\n+//- minicore: result\n fn func() {\n     match Result::<(f64, f64, f64), (f64, f64)>::Ok((0f64, 0f64, 0f64)) {\n         Ok(x) => $0x.1.classify(),"}]}