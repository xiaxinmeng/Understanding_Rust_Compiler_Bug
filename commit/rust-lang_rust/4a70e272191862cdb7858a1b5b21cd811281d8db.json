{"sha": "4a70e272191862cdb7858a1b5b21cd811281d8db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNzBlMjcyMTkxODYyY2RiNzg1OGExYjViMjFjZDgxMTI4MWQ4ZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-26T09:41:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-26T09:41:33Z"}, "message": "Auto merge of #48082 - jseyfried:improve_struct_field_hygiene, r=petrochenkov\n\nmacros: improve struct constructor field hygiene, fix span bug\n\nFixes #47311.\nr? @nrc", "tree": {"sha": "5d13f39690eaa8efbfc2cb4b88794713d954a5b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d13f39690eaa8efbfc2cb4b88794713d954a5b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a70e272191862cdb7858a1b5b21cd811281d8db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a70e272191862cdb7858a1b5b21cd811281d8db", "html_url": "https://github.com/rust-lang/rust/commit/4a70e272191862cdb7858a1b5b21cd811281d8db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a70e272191862cdb7858a1b5b21cd811281d8db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "322d7f7b97f1672bade31e1c43d5753e0e45a1a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/322d7f7b97f1672bade31e1c43d5753e0e45a1a8", "html_url": "https://github.com/rust-lang/rust/commit/322d7f7b97f1672bade31e1c43d5753e0e45a1a8"}, {"sha": "1e037f4172d60cdd7ad734d20bd7de392c27d31e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e037f4172d60cdd7ad734d20bd7de392c27d31e", "html_url": "https://github.com/rust-lang/rust/commit/1e037f4172d60cdd7ad734d20bd7de392c27d31e"}], "stats": {"total": 86, "additions": 62, "deletions": 24}, "files": [{"sha": "2ddee0fc08da78dacde7cdf4b7a58e11dc7a49cc", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=4a70e272191862cdb7858a1b5b21cd811281d8db", "patch": "@@ -34,6 +34,7 @@ use rustc::util::nodemap::NodeSet;\n use syntax::ast::{self, CRATE_NODE_ID, Ident};\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n+use syntax_pos::hygiene::SyntaxContext;\n \n use std::cmp;\n use std::mem::replace;\n@@ -491,9 +492,13 @@ struct NamePrivacyVisitor<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> NamePrivacyVisitor<'a, 'tcx> {\n-    // Checks that a field is accessible.\n-    fn check_field(&mut self, span: Span, def: &'tcx ty::AdtDef, field: &'tcx ty::FieldDef) {\n-        let ident = Ident { ctxt: span.ctxt().modern(), ..keywords::Invalid.ident() };\n+    // Checks that a field in a struct constructor (expression or pattern) is accessible.\n+    fn check_field(&mut self,\n+                   use_ctxt: SyntaxContext, // Syntax context of the field name at the use site\n+                   span: Span, // Span of the field pattern, e.g. `x: 0`\n+                   def: &'tcx ty::AdtDef, // Definition of the struct or enum\n+                   field: &'tcx ty::FieldDef) { // Definition of the field\n+        let ident = Ident { ctxt: use_ctxt.modern(), ..keywords::Invalid.ident() };\n         let def_id = self.tcx.adjust_ident(ident, def.did, self.current_item).1;\n         if !def.is_enum() && !field.vis.is_accessible_from(def_id, self.tcx) {\n             struct_span_err!(self.tcx.sess, span, E0451, \"field `{}` of {} `{}` is private\",\n@@ -566,12 +571,17 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n                     // unmentioned fields, just check them all.\n                     for variant_field in &variant.fields {\n                         let field = fields.iter().find(|f| f.name.node == variant_field.name);\n-                        let span = if let Some(f) = field { f.span } else { base.span };\n-                        self.check_field(span, adt, variant_field);\n+                        let (use_ctxt, span) = match field {\n+                            Some(field) => (field.name.node.to_ident().ctxt, field.span),\n+                            None => (base.span.ctxt(), base.span),\n+                        };\n+                        self.check_field(use_ctxt, span, adt, variant_field);\n                     }\n                 } else {\n                     for field in fields {\n-                        self.check_field(field.span, adt, variant.field_named(field.name.node));\n+                        let use_ctxt = field.name.node.to_ident().ctxt;\n+                        let field_def = variant.field_named(field.name.node);\n+                        self.check_field(use_ctxt, field.span, adt, field_def);\n                     }\n                 }\n             }\n@@ -588,7 +598,9 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n                 let adt = self.tables.pat_ty(pat).ty_adt_def().unwrap();\n                 let variant = adt.variant_of_def(def);\n                 for field in fields {\n-                    self.check_field(field.span, adt, variant.field_named(field.node.name));\n+                    let use_ctxt = field.node.name.to_ident().ctxt;\n+                    let field_def = variant.field_named(field.node.name);\n+                    self.check_field(use_ctxt, field.span, adt, field_def);\n                 }\n             }\n             _ => {}"}, {"sha": "09dd00fa5fa3a2953b54bd8a7af1994e3579439b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4a70e272191862cdb7858a1b5b21cd811281d8db", "patch": "@@ -2125,8 +2125,8 @@ impl<'a> Parser<'a> {\n         // Check if a colon exists one ahead. This means we're parsing a fieldname.\n         let (fieldname, expr, is_shorthand) = if self.look_ahead(1, |t| t == &token::Colon) {\n             let fieldname = self.parse_field_name()?;\n-            self.bump();\n             hi = self.prev_span;\n+            self.bump();\n             (fieldname, self.parse_expr()?, false)\n         } else {\n             let fieldname = self.parse_ident_common(false)?;"}, {"sha": "3b6890cdce63bf1a1cec52841d502cbfb6453cbf", "filename": "src/test/run-pass/hygiene/issue-47311.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Frun-pass%2Fhygiene%2Fissue-47311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Frun-pass%2Fhygiene%2Fissue-47311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Fissue-47311.rs?ref=4a70e272191862cdb7858a1b5b21cd811281d8db", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-pretty pretty-printing is unhygienic\n+\n+#![feature(decl_macro)]\n+#![allow(unused)]\n+\n+macro m($S:ident, $x:ident) {\n+    $S { $x: 0 }\n+}\n+\n+mod foo {\n+    struct S { x: i32 }\n+\n+    fn f() { ::m!(S, x); }\n+}\n+\n+fn main() {}"}, {"sha": "2c7701e9965dbcffae4196ead40112e5e9209ea8", "filename": "src/test/ui/did_you_mean/issue-42599_available_fields_note.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr?ref=4a70e272191862cdb7858a1b5b21cd811281d8db", "patch": "@@ -2,13 +2,13 @@ error[E0560]: struct `submodule::Demo` has no field named `inocently_mispellable\n   --> $DIR/issue-42599_available_fields_note.rs:26:39\n    |\n 26 |             Self { secret_integer: 2, inocently_mispellable: () }\n-   |                                       ^^^^^^^^^^^^^^^^^^^^^^ field does not exist - did you mean `innocently_misspellable`?\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^ field does not exist - did you mean `innocently_misspellable`?\n \n error[E0560]: struct `submodule::Demo` has no field named `egregiously_nonexistent_field`\n   --> $DIR/issue-42599_available_fields_note.rs:31:39\n    |\n 31 |             Self { secret_integer: 3, egregiously_nonexistent_field: () }\n-   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `submodule::Demo` does not have this field\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `submodule::Demo` does not have this field\n    |\n    = note: available fields are: `favorite_integer`, `secret_integer`, `innocently_misspellable`, `another_field`, `yet_another_field` ... and 2 others\n "}, {"sha": "462ee2ac50d83d17634d77fcde2dfdb39f6a027a", "filename": "src/test/ui/error-codes/E0062.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Ferror-codes%2FE0062.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Ferror-codes%2FE0062.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0062.stderr?ref=4a70e272191862cdb7858a1b5b21cd811281d8db", "patch": "@@ -4,7 +4,7 @@ error[E0062]: field `x` specified more than once\n 17 |         x: 0,\n    |         ---- first use of `x`\n 18 |         x: 0,\n-   |         ^^ used more than once\n+   |         ^ used more than once\n \n error: aborting due to previous error\n "}, {"sha": "0bdf104ec6b2dba06ad0c71ad4977d10c69d7a8a", "filename": "src/test/ui/error-codes/E0559.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Ferror-codes%2FE0559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Ferror-codes%2FE0559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0559.stderr?ref=4a70e272191862cdb7858a1b5b21cd811281d8db", "patch": "@@ -2,7 +2,7 @@ error[E0559]: variant `Field::Fool` has no field named `joke`\n   --> $DIR/E0559.rs:16:27\n    |\n 16 |     let s = Field::Fool { joke: 0 };\n-   |                           ^^^^^ `Field::Fool` does not have this field\n+   |                           ^^^^ `Field::Fool` does not have this field\n    |\n    = note: available fields are: `x`\n "}, {"sha": "aedd2d59142a1858c604187d3ddbd7ebd005b599", "filename": "src/test/ui/error-codes/E0560.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Ferror-codes%2FE0560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Ferror-codes%2FE0560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0560.stderr?ref=4a70e272191862cdb7858a1b5b21cd811281d8db", "patch": "@@ -2,7 +2,7 @@ error[E0560]: struct `Simba` has no field named `father`\n   --> $DIR/E0560.rs:16:32\n    |\n 16 |     let s = Simba { mother: 1, father: 0 };\n-   |                                ^^^^^^^ `Simba` does not have this field\n+   |                                ^^^^^^ `Simba` does not have this field\n    |\n    = note: available fields are: `mother`\n "}, {"sha": "035901abac668c4ca1b2b335ecfee0094e884098", "filename": "src/test/ui/issue-19922.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Fissue-19922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Fissue-19922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19922.stderr?ref=4a70e272191862cdb7858a1b5b21cd811281d8db", "patch": "@@ -2,7 +2,7 @@ error[E0559]: variant `Homura::Akemi` has no field named `kaname`\n   --> $DIR/issue-19922.rs:16:34\n    |\n 16 |     let homura = Homura::Akemi { kaname: () };\n-   |                                  ^^^^^^^ `Homura::Akemi` does not have this field\n+   |                                  ^^^^^^ `Homura::Akemi` does not have this field\n    |\n    = note: available fields are: `madoka`\n "}, {"sha": "8261e9034a69b00f2cc705ccf5c48cc8e9b6c442", "filename": "src/test/ui/numeric-fields.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Fnumeric-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Fnumeric-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric-fields.stderr?ref=4a70e272191862cdb7858a1b5b21cd811281d8db", "patch": "@@ -2,7 +2,7 @@ error[E0560]: struct `S` has no field named `0b1`\n   --> $DIR/numeric-fields.rs:14:15\n    |\n 14 |     let s = S{0b1: 10, 0: 11};\n-   |               ^^^^ `S` does not have this field\n+   |               ^^^ `S` does not have this field\n    |\n    = note: available fields are: `0`, `1`\n "}, {"sha": "0de22d1a84f7f7254b88c43cbf6bee9c66eb71c5", "filename": "src/test/ui/struct-fields-hints-no-dupe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Fstruct-fields-hints-no-dupe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Fstruct-fields-hints-no-dupe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-fields-hints-no-dupe.stderr?ref=4a70e272191862cdb7858a1b5b21cd811281d8db", "patch": "@@ -2,7 +2,7 @@ error[E0560]: struct `A` has no field named `bar`\n   --> $DIR/struct-fields-hints-no-dupe.rs:20:9\n    |\n 20 |         bar : 42,\n-   |         ^^^^^ field does not exist - did you mean `barr`?\n+   |         ^^^ field does not exist - did you mean `barr`?\n \n error: aborting due to previous error\n "}, {"sha": "f602f398acd1c1568fa738ff362cfd0b181c3d1f", "filename": "src/test/ui/struct-fields-hints.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Fstruct-fields-hints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Fstruct-fields-hints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-fields-hints.stderr?ref=4a70e272191862cdb7858a1b5b21cd811281d8db", "patch": "@@ -2,7 +2,7 @@ error[E0560]: struct `A` has no field named `bar`\n   --> $DIR/struct-fields-hints.rs:20:9\n    |\n 20 |         bar : 42,\n-   |         ^^^^^ field does not exist - did you mean `car`?\n+   |         ^^^ field does not exist - did you mean `car`?\n \n error: aborting due to previous error\n "}, {"sha": "d61dd8da6ece370a9fb8cea10970944125c07043", "filename": "src/test/ui/struct-fields-too-many.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Fstruct-fields-too-many.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Fstruct-fields-too-many.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-fields-too-many.stderr?ref=4a70e272191862cdb7858a1b5b21cd811281d8db", "patch": "@@ -2,7 +2,7 @@ error[E0560]: struct `BuildData` has no field named `bar`\n   --> $DIR/struct-fields-too-many.rs:18:9\n    |\n 18 |         bar: 0\n-   |         ^^^^ `BuildData` does not have this field\n+   |         ^^^ `BuildData` does not have this field\n    |\n    = note: available fields are: `foo`\n "}, {"sha": "a451f9c8fe7d2e311bcc1f1ed1b030a46e286c45", "filename": "src/test/ui/suggest-private-fields.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Fsuggest-private-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Fsuggest-private-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggest-private-fields.stderr?ref=4a70e272191862cdb7858a1b5b21cd811281d8db", "patch": "@@ -2,27 +2,27 @@ error[E0560]: struct `xc::B` has no field named `aa`\n   --> $DIR/suggest-private-fields.rs:25:9\n    |\n 25 |         aa: 20,\n-   |         ^^^ field does not exist - did you mean `a`?\n+   |         ^^ field does not exist - did you mean `a`?\n \n error[E0560]: struct `xc::B` has no field named `bb`\n   --> $DIR/suggest-private-fields.rs:27:9\n    |\n 27 |         bb: 20,\n-   |         ^^^ `xc::B` does not have this field\n+   |         ^^ `xc::B` does not have this field\n    |\n    = note: available fields are: `a`\n \n error[E0560]: struct `A` has no field named `aa`\n   --> $DIR/suggest-private-fields.rs:32:9\n    |\n 32 |         aa: 20,\n-   |         ^^^ field does not exist - did you mean `a`?\n+   |         ^^ field does not exist - did you mean `a`?\n \n error[E0560]: struct `A` has no field named `bb`\n   --> $DIR/suggest-private-fields.rs:34:9\n    |\n 34 |         bb: 20,\n-   |         ^^^ field does not exist - did you mean `b`?\n+   |         ^^ field does not exist - did you mean `b`?\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d66ebaa2187ebc94e793c7898615f09960f07a9d", "filename": "src/test/ui/union/union-fields-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Funion%2Funion-fields-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Funion%2Funion-fields-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-2.stderr?ref=4a70e272191862cdb7858a1b5b21cd811281d8db", "patch": "@@ -14,7 +14,7 @@ error[E0560]: union `U` has no field named `c`\n   --> $DIR/union-fields-2.rs:20:29\n    |\n 20 |     let u = U { a: 0, b: 1, c: 2 }; //~ ERROR union expressions should have exactly one field\n-   |                             ^^ `U` does not have this field\n+   |                             ^ `U` does not have this field\n    |\n    = note: available fields are: `a`, `b`\n "}, {"sha": "e3cb52270ddd6b1f7d6627f3791337f679b6ba60", "filename": "src/test/ui/union/union-suggest-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a70e272191862cdb7858a1b5b21cd811281d8db/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr?ref=4a70e272191862cdb7858a1b5b21cd811281d8db", "patch": "@@ -2,7 +2,7 @@ error[E0560]: union `U` has no field named `principle`\n   --> $DIR/union-suggest-field.rs:20:17\n    |\n 20 |     let u = U { principle: 0 };\n-   |                 ^^^^^^^^^^ field does not exist - did you mean `principal`?\n+   |                 ^^^^^^^^^ field does not exist - did you mean `principal`?\n \n error[E0609]: no field `principial` on type `U`\n   --> $DIR/union-suggest-field.rs:22:15"}]}