{"sha": "c74c854adc83eb311aef722e64c0af81ea09f1a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NGM4NTRhZGM4M2ViMzExYWVmNzIyZTY0YzBhZjgxZWEwOWYxYTE=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-01-11T21:29:46Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-01-13T18:45:34Z"}, "message": "Better error message for semicolon on the last line of a function\n\ncloses #8005", "tree": {"sha": "560ac48cc67b2b3732e71465af02258f3679139b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/560ac48cc67b2b3732e71465af02258f3679139b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c74c854adc83eb311aef722e64c0af81ea09f1a1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c74c854adc83eb311aef722e64c0af81ea09f1a1", "html_url": "https://github.com/rust-lang/rust/commit/c74c854adc83eb311aef722e64c0af81ea09f1a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c74c854adc83eb311aef722e64c0af81ea09f1a1/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caf316a31e7de9536b6db834996c67c74c32f53b", "url": "https://api.github.com/repos/rust-lang/rust/commits/caf316a31e7de9536b6db834996c67c74c32f53b", "html_url": "https://github.com/rust-lang/rust/commit/caf316a31e7de9536b6db834996c67c74c32f53b"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "8d6e2b6f6b34c6fabb4c0e59c5121c9b21fd2787", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c74c854adc83eb311aef722e64c0af81ea09f1a1/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74c854adc83eb311aef722e64c0af81ea09f1a1/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=c74c854adc83eb311aef722e64c0af81ea09f1a1", "patch": "@@ -439,7 +439,7 @@ fn visit_fn(v: &mut LivenessVisitor,\n \n     // check for various error conditions\n     lsets.visit_block(body, ());\n-    lsets.check_ret(id, sp, fk, entry_ln);\n+    lsets.check_ret(id, sp, fk, entry_ln, body);\n     lsets.warn_about_unused_args(decl, entry_ln);\n }\n \n@@ -1575,7 +1575,8 @@ impl Liveness {\n                      id: NodeId,\n                      sp: Span,\n                      _fk: &FnKind,\n-                     entry_ln: LiveNode) {\n+                     entry_ln: LiveNode,\n+                     body: &Block) {\n         if self.live_on_entry(entry_ln, self.s.no_ret_var).is_some() {\n             // if no_ret_var is live, then we fall off the end of the\n             // function without any kind of return expression:\n@@ -1588,9 +1589,30 @@ impl Liveness {\n                 self.tcx.sess.span_err(\n                     sp, \"some control paths may return\");\n             } else {\n+                let ends_with_stmt = match body.expr {\n+                    None if body.stmts.len() > 0 =>\n+                        match body.stmts.last().node {\n+                            StmtSemi(e, _) => {\n+                                let t_stmt = ty::expr_ty(self.tcx, e);\n+                                ty::get(t_stmt).sty == ty::get(t_ret).sty\n+                            },\n+                            _ => false\n+                        },\n+                    _ => false\n+                };\n+                if ends_with_stmt {\n+                    let last_stmt = body.stmts.last();\n+                    let span_semicolon = Span {\n+                        lo: last_stmt.span.hi,\n+                        hi: last_stmt.span.hi,\n+                        expn_info: last_stmt.span.expn_info\n+                    };\n+                    self.tcx.sess.span_note(\n+                        span_semicolon, \"consider removing this semicolon:\");\n+                }\n                 self.tcx.sess.span_err(\n                     sp, \"not all control paths return a value\");\n-            }\n+           }\n         }\n     }\n "}, {"sha": "dc131698b90653afc33c06ed37743459483a1a55", "filename": "src/test/compile-fail/liveness-return-last-stmt-semi.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c74c854adc83eb311aef722e64c0af81ea09f1a1/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74c854adc83eb311aef722e64c0af81ea09f1a1/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs?ref=c74c854adc83eb311aef722e64c0af81ea09f1a1", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// regression test for #8005\n+\n+#[feature(macro_rules)];\n+\n+macro_rules! test ( () => { fn foo() -> int { 1i; } } ) //~ ERROR  not all control paths return a value\n+                                             //~^ NOTE consider removing this semicolon\n+\n+fn no_return() -> int {} //~ ERROR  not all control paths return a value\n+\n+fn bar(x: u32) -> u32 { //~ ERROR  not all control paths return a value\n+    x * 2; //~ NOTE consider removing this semicolon\n+}\n+\n+fn baz(x: u64) -> u32 { //~ ERROR  not all control paths return a value\n+    x * 2;\n+}\n+\n+fn main() {\n+    test!();\n+}"}]}