{"sha": "e7adf64155abb3bdc2dcb6bb52ee24ed87206eff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YWRmNjQxNTVhYmIzYmRjMmRjYjZiYjUyZWUyNGVkODcyMDZlZmY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-24T23:03:26Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-25T05:07:55Z"}, "message": "Format structs", "tree": {"sha": "6a908b645ba344ff537671e3235db6cf733e2bc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a908b645ba344ff537671e3235db6cf733e2bc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff", "html_url": "https://github.com/rust-lang/rust/commit/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3856880f6c40649d3bb9a330c65de79db6c56a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3856880f6c40649d3bb9a330c65de79db6c56a4", "html_url": "https://github.com/rust-lang/rust/commit/c3856880f6c40649d3bb9a330c65de79db6c56a4"}], "stats": {"total": 183, "additions": 174, "deletions": 9}, "files": [{"sha": "3b87ac7eb0387b9c0445b99fddb98089d4571fd4", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=e7adf64155abb3bdc2dcb6bb52ee24ed87206eff", "patch": "@@ -24,8 +24,8 @@ fn main() {\n     let mut def_config = String::new();\n     def_config_file.read_to_string(&mut def_config).unwrap();\n \n-    //run(args, WriteMode::Display, &def_config);\n-    run(args, WriteMode::Overwrite, &def_config);\n+    run(args, WriteMode::Display, &def_config);\n+    //run(args, WriteMode::Overwrite, &def_config);\n \n     std::env::set_exit_status(0);\n "}, {"sha": "080926b03a2cba6db3a4c46b1f9be51c1ee197e3", "filename": "src/config.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=e7adf64155abb3bdc2dcb6bb52ee24ed87206eff", "patch": "@@ -23,7 +23,6 @@ pub struct Config {\n \n impl Config {\n     fn from_toml(toml: &str) -> Config {\n-        println!(\"About to parse: {}\", toml);\n         let parsed = toml.parse().unwrap();\n         toml::decode(parsed).unwrap()\n     }"}, {"sha": "a2027d89b888ef271c4b111d93c9bca2a7dea1b0", "filename": "src/items.rs", "status": "renamed", "additions": 123, "deletions": 3, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=e7adf64155abb3bdc2dcb6bb52ee24ed87206eff", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Formatting top-level items - functions, structs, enums, traits, impls.\n+\n use {ReturnIndent, BraceStyle};\n use utils::make_indent;\n use lists::{write_list, ListFormatting, SeparatorTactic, ListTactic};\n@@ -123,7 +125,7 @@ impl<'a> FmtVisitor<'a> {\n         let generics_indent = indent + result.len();\n         result.push_str(&self.rewrite_generics(generics,\n                                                generics_indent,\n-                                               span_for_return(&fd.output)));\n+                                               span_for_return(&fd.output).lo));\n \n         let ret_str = self.rewrite_return(&fd.output);\n \n@@ -388,7 +390,125 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    fn rewrite_generics(&self, generics: &ast::Generics, indent: usize, ret_span: Span) -> String {\n+    pub fn visit_struct(&mut self,\n+                        ident: ast::Ident,\n+                        vis: ast::Visibility,\n+                        struct_def: &ast::StructDef,\n+                        generics: &ast::Generics,\n+                        span: Span)\n+    {\n+        let header_str = self.struct_header(ident, vis);\n+        self.changes.push_str_span(span, &header_str);\n+\n+        if struct_def.fields.len() == 0 {\n+            assert!(generics.where_clause.predicates.len() == 0,\n+                    \"No-field struct with where clause?\");\n+            assert!(generics.lifetimes.len() == 0, \"No-field struct with generics?\");\n+            assert!(generics.ty_params.len() == 0, \"No-field struct with generics?\");\n+\n+            self.changes.push_str_span(span, \";\");\n+            return;\n+        }\n+\n+        let mut generics_buf = String::new();\n+        let generics_str = self.rewrite_generics(generics, self.block_indent, struct_def.fields[0].span.lo);\n+        generics_buf.push_str(&generics_str);\n+\n+        if generics.where_clause.predicates.len() > 0 {\n+            generics_buf.push_str(&self.rewrite_where_clause(&generics.where_clause,\n+                                                             self.block_indent,\n+                                                             struct_def.fields[0].span.lo));\n+            generics_buf.push_str(&make_indent(self.block_indent));\n+            generics_buf.push_str(\"\\n{\");\n+\n+        } else {\n+            generics_buf.push_str(\" {\");\n+        }\n+        self.changes.push_str_span(span, &generics_buf);\n+\n+        let struct_snippet = self.snippet(span);\n+        // FIXME this will give incorrect results if there is a { in a commet.\n+        self.last_pos = span.lo + BytePos(struct_snippet.find('{').unwrap() as u32 + 1);\n+\n+        self.block_indent += config!(tab_spaces);\n+        for f in &struct_def.fields {\n+            self.visit_field(f, span.lo, &struct_snippet);\n+        }\n+        self.block_indent -= config!(tab_spaces);\n+\n+        self.format_missing_with_indent(span.lo + BytePos(struct_snippet.rfind('}').unwrap() as u32));\n+        self.changes.push_str_span(span, \"}\");\n+    }\n+\n+    fn struct_header(&self,\n+                     ident: ast::Ident,\n+                     vis: ast::Visibility)\n+        -> String\n+    {\n+        let vis = if vis == ast::Visibility::Public {\n+            \"pub \"\n+        } else {\n+            \"\"\n+        };\n+\n+        format!(\"{}struct {}\", vis, &token::get_ident(ident))\n+    }\n+\n+    // Field of a struct\n+    fn visit_field(&mut self,\n+                   field: &ast::StructField,\n+                   // These two args are for missing spans hacks.\n+                   struct_start: BytePos,\n+                   struct_snippet: &str)\n+    {\n+        if self.visit_attrs(&field.node.attrs) {\n+            return;\n+        }\n+        self.format_missing_with_indent(field.span.lo);\n+\n+        let name = match field.node.kind {\n+            ast::StructFieldKind::NamedField(ident, _) => Some(token::get_ident(ident)),\n+            ast::StructFieldKind::UnnamedField(_) => None,\n+        };\n+        let vis = match field.node.kind {\n+            ast::StructFieldKind::NamedField(_, vis) |\n+            ast::StructFieldKind::UnnamedField(vis) => if vis == ast::Visibility::Public {\n+                \"pub \"\n+            } else {\n+                \"\"\n+            }\n+        };\n+        let typ = pprust::ty_to_string(&field.node.ty);\n+\n+        let field_str = match name {\n+            Some(name) => {\n+                let budget = config!(ideal_width) - self.block_indent;\n+                if self.block_indent + vis.len() + name.len() + typ.len() + 3 > budget {\n+                    format!(\"{}{}:\\n{}{},\",\n+                            vis,\n+                            name,\n+                            &make_indent(self.block_indent + config!(tab_spaces)),\n+                            typ)\n+                } else {\n+                    format!(\"{}{}: {},\", vis, name, typ)\n+                }\n+            }\n+            None => format!(\"{}{},\", vis, typ),\n+        };\n+        self.changes.push_str_span(field.span, &field_str);\n+\n+        // This hack makes sure we only add comments etc. after the comma, and\n+        // makes sure we don't repeat any commas.\n+        let hi = field.span.hi;\n+        // FIXME a comma in a comment will break this hack.\n+        let comma_pos = match struct_snippet[(hi.0 - struct_start.0) as usize..].find(',') {\n+            Some(i) => i,\n+            None => 0,\n+        };\n+        self.last_pos = hi + BytePos(comma_pos as u32 + 1);\n+    }\n+\n+    fn rewrite_generics(&self, generics: &ast::Generics, indent: usize, span_end: BytePos) -> String {\n         // FIXME convert bounds to where clauses where they get too big or if\n         // there is a where clause at all.\n         let mut result = String::new();\n@@ -422,7 +542,7 @@ impl<'a> FmtVisitor<'a> {\n                                                    \">\",\n                                                    |sp| sp.lo,\n                                                    |sp| sp.hi,\n-                                                   ret_span.lo);\n+                                                   span_end);\n \n         // If there are // comments, keep them multi-line.\n         let mut list_tactic = ListTactic::HorizontalVertical;", "previous_filename": "src/functions.rs"}, {"sha": "1a690b4945aeee6dd3e4d109803b6d289b737530", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e7adf64155abb3bdc2dcb6bb52ee24ed87206eff", "patch": "@@ -50,7 +50,7 @@ use visitor::FmtVisitor;\n mod config;\n mod changes;\n mod visitor;\n-mod functions;\n+mod items;\n mod missed_spans;\n mod lists;\n mod utils;"}, {"sha": "256c1e6e13230557cce28f068472db2f1b5d368f", "filename": "src/visitor.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=e7adf64155abb3bdc2dcb6bb52ee24ed87206eff", "patch": "@@ -180,6 +180,15 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 self.changes.push_str_span(item.span, &new_str);\n                 self.last_pos = item.span.hi;\n             }\n+            ast::Item_::ItemStruct(ref def, ref generics) => {\n+                self.format_missing_with_indent(item.span.lo);\n+                self.visit_struct(item.ident,\n+                                  item.vis,\n+                                  def,\n+                                  generics,\n+                                  item.span);\n+                self.last_pos = item.span.hi;\n+            }\n             _ => {\n                 visit::walk_item(self, item);\n             }\n@@ -252,7 +261,7 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     // Returns true if we should skip the following item.\n-    fn visit_attrs(&mut self, attrs: &[ast::Attribute]) -> bool {\n+    pub fn visit_attrs(&mut self, attrs: &[ast::Attribute]) -> bool {\n         if attrs.len() == 0 {\n             return false;\n         }"}, {"sha": "50329b258d14ca907568e995ac11f5a2b10ad69b", "filename": "tests/idem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff/tests%2Fidem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff/tests%2Fidem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fidem.rs?ref=e7adf64155abb3bdc2dcb6bb52ee24ed87206eff", "patch": "@@ -57,7 +57,7 @@ fn idempotent_tests() {\n \n // Compare output to input.\n fn print_mismatches(result: HashMap<String, String>) {\n-    for (file_name, fmt_text) in result {\n+    for (_, fmt_text) in result {\n         println!(\"{}\", fmt_text);\n     }\n }"}, {"sha": "0852b5c31990adbdbf9e4f98528a5d5bfc51be92", "filename": "tests/idem/structs.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff/tests%2Fidem%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7adf64155abb3bdc2dcb6bb52ee24ed87206eff/tests%2Fidem%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fidem%2Fstructs.rs?ref=e7adf64155abb3bdc2dcb6bb52ee24ed87206eff", "patch": "@@ -0,0 +1,37 @@\n+\n+/// A Doc comment\n+#[AnAttribute]\n+pub struct Foo {\n+    #[rustfmt_skip]\n+    f :   SomeType, // Comment beside a field\n+    f: SomeType, // Comment beside a field\n+    // Comment on a field\n+    #[AnAttribute]\n+    g: SomeOtherType,\n+    /// A doc comment on a field\n+    h: AThirdType,\n+}\n+\n+struct Bar;\n+\n+// With a where clause and generics.\n+pub struct Foo<'a, Y: Baz>\n+    where X: Whatever\n+{\n+    f: SomeType, // Comment beside a field\n+}\n+\n+struct Baz {\n+    a: A, // Comment A\n+    b: B, // Comment B\n+    c: C, // Comment C\n+}\n+\n+struct Baz {\n+    // Comment A\n+    a: A,\n+    // Comment B\n+    b: B,\n+    // Comment C\n+    c: C,\n+}"}]}