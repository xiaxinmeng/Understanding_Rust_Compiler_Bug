{"sha": "6be972770e75db5ec9f9ae2504786a9d7e957e4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZTk3Mjc3MGU3NWRiNWVjOWY5YWUyNTA0Nzg2YTlkN2U5NTdlNGE=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-14T12:32:32Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-14T23:26:03Z"}, "message": "diagnostics cli, iterate over members", "tree": {"sha": "11275f10ad2a8c609b80f0fd7bac6a5d1b80064a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11275f10ad2a8c609b80f0fd7bac6a5d1b80064a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6be972770e75db5ec9f9ae2504786a9d7e957e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6be972770e75db5ec9f9ae2504786a9d7e957e4a", "html_url": "https://github.com/rust-lang/rust/commit/6be972770e75db5ec9f9ae2504786a9d7e957e4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6be972770e75db5ec9f9ae2504786a9d7e957e4a/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9701efbe706e8569a41847d76c4b914f479df32", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9701efbe706e8569a41847d76c4b914f479df32", "html_url": "https://github.com/rust-lang/rust/commit/f9701efbe706e8569a41847d76c4b914f479df32"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "3801fce23aeb5222d071d3b7630617fc74acfa06", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6be972770e75db5ec9f9ae2504786a9d7e957e4a/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be972770e75db5ec9f9ae2504786a9d7e957e4a/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=6be972770e75db5ec9f9ae2504786a9d7e957e4a", "patch": "@@ -25,7 +25,7 @@ use hir_ty::{\n     autoderef, display::HirFormatter, expr::ExprValidator, method_resolution, ApplicationTy,\n     Canonical, InEnvironment, Substs, TraitEnvironment, Ty, TyDefId, TypeCtor,\n };\n-use ra_db::{CrateId, Edition, FileId};\n+use ra_db::{CrateId, CrateName, Edition, FileId};\n use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, AttrsOwner, NameOwner},\n@@ -91,6 +91,10 @@ impl Crate {\n         db.crate_graph()[self.id].edition\n     }\n \n+    pub fn display_name(self, db: &dyn HirDatabase) -> Option<CrateName> {\n+        db.crate_graph()[self.id].display_name.as_ref().cloned()\n+    }\n+\n     pub fn all(db: &dyn HirDatabase) -> Vec<Crate> {\n         db.crate_graph().iter().map(|id| Crate { id }).collect()\n     }"}, {"sha": "92664b415b4de73c37959bfc969c58268f3dddf2", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6be972770e75db5ec9f9ae2504786a9d7e957e4a/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be972770e75db5ec9f9ae2504786a9d7e957e4a/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=6be972770e75db5ec9f9ae2504786a9d7e957e4a", "patch": "@@ -2,7 +2,7 @@\n //! code if any errors are found.\n \n use anyhow::anyhow;\n-use ra_db::{SourceDatabase, SourceDatabaseExt};\n+use ra_db::SourceDatabaseExt;\n use ra_ide::Severity;\n use std::{collections::HashSet, path::Path};\n \n@@ -28,28 +28,32 @@ pub fn diagnostics(path: &Path, load_output_dirs: bool, all: bool) -> Result<()>\n \n     let mut found_error = false;\n     let mut visited_files = HashSet::new();\n-    let crate_graph = db.crate_graph();\n-    for crate_id in crate_graph.iter() {\n-        let krate = &crate_graph[crate_id];\n-        if let Some(crate_name) = &krate.display_name {\n-            println!(\"processing crate: {}\", crate_name);\n-        } else {\n-            println!(\"processing crate: unknown\");\n-        }\n-        for file_id in db.source_root(db.file_source_root(krate.root_file_id)).walk() {\n+    for source_root_id in members {\n+        for file_id in db.source_root(source_root_id).walk() {\n             // Filter out files which are not actually modules (unless `--all` flag is\n             // passed). In the rust-analyzer repository this filters out the parser test files.\n             if semantics.to_module_def(file_id).is_some() || all {\n                 if !visited_files.contains(&file_id) {\n-                    if members.contains(&db.file_source_root(file_id)) {\n-                        println!(\"processing module: {}\", db.file_relative_path(file_id));\n-                        for diagnostic in analysis.diagnostics(file_id).unwrap() {\n-                            if matches!(diagnostic.severity, Severity::Error) {\n-                                found_error = true;\n-                            }\n-\n-                            println!(\"{:?}\", diagnostic);\n+                    let crate_name = if let Some(module) = semantics.to_module_def(file_id) {\n+                        if let Some(name) = module.krate().display_name(db) {\n+                            format!(\"{}\", name)\n+                        } else {\n+                            String::from(\"unknown\")\n                         }\n+                    } else {\n+                        String::from(\"unknown\")\n+                    };\n+                    println!(\n+                        \"processing crate: {}, module: {}\",\n+                        crate_name,\n+                        db.file_relative_path(file_id)\n+                    );\n+                    for diagnostic in analysis.diagnostics(file_id).unwrap() {\n+                        if matches!(diagnostic.severity, Severity::Error) {\n+                            found_error = true;\n+                        }\n+\n+                        println!(\"{:?}\", diagnostic);\n                     }\n \n                     visited_files.insert(file_id);"}]}