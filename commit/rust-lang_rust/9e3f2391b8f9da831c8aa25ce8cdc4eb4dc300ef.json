{"sha": "9e3f2391b8f9da831c8aa25ce8cdc4eb4dc300ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllM2YyMzkxYjhmOWRhODMxYzhhYTI1Y2U4Y2RjNGViNGRjMzAwZWY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-27T15:52:57Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-29T09:03:55Z"}, "message": "Emulate compare simd intrinsics", "tree": {"sha": "b7ea540e18177670a5a2eae70194d9b0cfd6e1b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7ea540e18177670a5a2eae70194d9b0cfd6e1b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e3f2391b8f9da831c8aa25ce8cdc4eb4dc300ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e3f2391b8f9da831c8aa25ce8cdc4eb4dc300ef", "html_url": "https://github.com/rust-lang/rust/commit/9e3f2391b8f9da831c8aa25ce8cdc4eb4dc300ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e3f2391b8f9da831c8aa25ce8cdc4eb4dc300ef/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fdd058c609e9cc727b44a63fd4d9d1ad3cef206", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fdd058c609e9cc727b44a63fd4d9d1ad3cef206", "html_url": "https://github.com/rust-lang/rust/commit/7fdd058c609e9cc727b44a63fd4d9d1ad3cef206"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "3fd1d5fd6d45ee8ccb99910f6edea8e22ecedc0e", "filename": "src/intrinsics.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9e3f2391b8f9da831c8aa25ce8cdc4eb4dc300ef/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3f2391b8f9da831c8aa25ce8cdc4eb4dc300ef/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=9e3f2391b8f9da831c8aa25ce8cdc4eb4dc300ef", "patch": "@@ -156,6 +156,25 @@ fn simd_for_each_lane<'tcx, B: Backend>(\n }\n \n macro_rules! simd_binop {\n+    ($fx:expr, $intrinsic:expr, icmp($cc:ident, $x:ident, $y:ident) -> $ret:ident) => {\n+        simd_for_each_lane($fx, $intrinsic, $x, $y, $ret, |fx, _lane_layout, ret_lane_layout, x_lane, y_lane| {\n+            let res_lane = fx.bcx.ins().icmp(IntCC::$cc, x_lane, y_lane);\n+            let res_lane = fx.bcx.ins().bint(types::I8, res_lane);\n+            CValue::by_val(res_lane, ret_lane_layout)\n+        });\n+    };\n+    ($fx:expr, $intrinsic:expr, icmp($cc_u:ident|$cc_s:ident, $x:ident, $y:ident) -> $ret:ident) => {\n+        simd_for_each_lane($fx, $intrinsic, $x, $y, $ret, |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n+            let res_lane = match lane_layout.ty.sty {\n+                ty::Uint(_) => fx.bcx.ins().icmp(IntCC::$cc_u, x_lane, y_lane),\n+                ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc_s, x_lane, y_lane),\n+                _ => unreachable!(\"{:?}\", lane_layout.ty),\n+            };\n+            let res_lane = fx.bcx.ins().bint(types::I8, res_lane);\n+            CValue::by_val(res_lane, ret_lane_layout)\n+        });\n+    };\n+\n     ($fx:expr, $intrinsic:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) => {\n         simd_for_each_lane($fx, $intrinsic, $x, $y, $ret, |fx, _lane_layout, ret_lane_layout, x_lane, y_lane| {\n             let res_lane = fx.bcx.ins().$op(x_lane, y_lane);\n@@ -753,6 +772,25 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             ret.write_cvalue(fx, x.unchecked_cast_to(ret.layout()));\n         };\n \n+        simd_eq, (c x, c y) {\n+            simd_binop!(fx, intrinsic, icmp(Equal, x, y) -> ret);\n+        };\n+        simd_ne, (c x, c y) {\n+            simd_binop!(fx, intrinsic, icmp(NotEqual, x, y) -> ret);\n+        };\n+        simd_lt, (c x, c y) {\n+            simd_binop!(fx, intrinsic, icmp(UnsignedLessThan|SignedLessThan, x, y) -> ret);\n+        };\n+        simd_le, (c x, c y) {\n+            simd_binop!(fx, intrinsic, icmp(UnsignedLessThanOrEqual|SignedLessThanOrEqual, x, y) -> ret);\n+        };\n+        simd_gt, (c x, c y) {\n+            simd_binop!(fx, intrinsic, icmp(UnsignedGreaterThan|SignedGreaterThan, x, y) -> ret);\n+        };\n+        simd_ge, (c x, c y) {\n+            simd_binop!(fx, intrinsic, icmp(UnsignedGreaterThanOrEqual|SignedGreaterThanOrEqual, x, y) -> ret);\n+        };\n+\n         simd_add, (c x, c y) {\n             simd_binop!(fx, intrinsic, iadd(x, y) -> ret);\n         };"}]}