{"sha": "cac238e4a3a838f9379b4c07d7463226929cf424", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYzIzOGU0YTNhODM4ZjkzNzliNGMwN2Q3NDYzMjI2OTI5Y2Y0MjQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-24T16:41:21Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-27T09:05:06Z"}, "message": "More cleanup", "tree": {"sha": "150120398aca29727c06e93bea0e0d64558ab584", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/150120398aca29727c06e93bea0e0d64558ab584"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cac238e4a3a838f9379b4c07d7463226929cf424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cac238e4a3a838f9379b4c07d7463226929cf424", "html_url": "https://github.com/rust-lang/rust/commit/cac238e4a3a838f9379b4c07d7463226929cf424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cac238e4a3a838f9379b4c07d7463226929cf424/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a64180f0d51de5cb4aa3fe8b3f3d14be5ee103c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a64180f0d51de5cb4aa3fe8b3f3d14be5ee103c", "html_url": "https://github.com/rust-lang/rust/commit/9a64180f0d51de5cb4aa3fe8b3f3d14be5ee103c"}], "stats": {"total": 48, "additions": 18, "deletions": 30}, "files": [{"sha": "7b5abc0335e278d8f89f6c4c17d1007b918ff287", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cac238e4a3a838f9379b4c07d7463226929cf424/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac238e4a3a838f9379b4c07d7463226929cf424/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=cac238e4a3a838f9379b4c07d7463226929cf424", "patch": "@@ -1307,18 +1307,15 @@ crate enum TypeKind {\n crate trait GetDefId {\n     /// Use this method to get the [`DefId`] of a [`clean`] AST node.\n     /// This will return [`None`] when called on a primitive [`clean::Type`].\n-    /// Use [`Self::def_id_full`] if you are calling it on a primitive [`clean::Type`].\n+    /// Use [`Self::def_id_full`] if you want to include primitives.\n     ///\n     /// [`clean`]: crate::clean\n-    /// [`clean::Type`]: Type\n+    // FIXME: get rid of this function and always use `def_id_full`\n     fn def_id(&self) -> Option<DefId>;\n \n-    /// Use this method to get the [`DefId`] of a [`clean`] AST node that may be\n-    /// a primitive [`clean::Type`].\n+    /// Use this method to get the [DefId] of a [clean] AST node, including [PrimitiveType]s.\n     ///\n     /// See [`Self::def_id`] for more.\n-    ///\n-    /// [`clean::Type`]: Type\n     fn def_id_full(&self, cache: &Cache) -> Option<DefId>;\n }\n \n@@ -1419,31 +1416,28 @@ impl Type {\n \n impl Type {\n     fn inner_def_id(&self, cache: Option<&Cache>) -> Option<DefId> {\n-        let t: &dyn GetDefId = match *self {\n+        let t: PrimitiveType = match *self {\n             ResolvedPath { did, .. } => return Some(did),\n             Primitive(p) => return cache.and_then(|c| c.primitive_locations.get(&p).cloned()),\n-            BorrowedRef { type_: box Generic(..), .. } => &Primitive(PrimitiveType::Reference),\n+            BorrowedRef { type_: box Generic(..), .. } => PrimitiveType::Reference,\n             BorrowedRef { ref type_, .. } => return type_.inner_def_id(cache),\n             Tuple(ref tys) => {\n                 if tys.is_empty() {\n-                    &Primitive(PrimitiveType::Unit)\n+                    PrimitiveType::Unit\n                 } else {\n-                    &Primitive(PrimitiveType::Tuple)\n+                    PrimitiveType::Tuple\n                 }\n             }\n-            BareFunction(..) => &Primitive(PrimitiveType::Fn),\n-            Never => &Primitive(PrimitiveType::Never),\n-            Slice(..) => &Primitive(PrimitiveType::Slice),\n-            Array(..) => &Primitive(PrimitiveType::Array),\n-            RawPointer(..) => &Primitive(PrimitiveType::RawPointer),\n+            BareFunction(..) => PrimitiveType::Fn,\n+            Never => PrimitiveType::Never,\n+            Slice(..) => PrimitiveType::Slice,\n+            Array(..) => PrimitiveType::Array,\n+            RawPointer(..) => PrimitiveType::RawPointer,\n             QPath { ref self_type, .. } => return self_type.inner_def_id(cache),\n             // FIXME: remove this wildcard\n             _ => return None,\n         };\n-        match cache {\n-            Some(c) => t.def_id_full(c),\n-            None => t.def_id(),\n-        }\n+        cache.and_then(|c| Primitive(t).def_id_full(c))\n     }\n }\n "}, {"sha": "bb9a7be590e87f0d71750a28c453f619e0b743ff", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cac238e4a3a838f9379b4c07d7463226929cf424/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac238e4a3a838f9379b4c07d7463226929cf424/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=cac238e4a3a838f9379b4c07d7463226929cf424", "patch": "@@ -2587,11 +2587,8 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         );\n \n         if !t.generics.where_predicates.is_empty() {\n-            write!(\n-                w,\n-                \"{}\",\n-                WhereClause { gens: &t.generics, indent: 0, end_newline: true }.print(cx.cache())\n-            );\n+            let where_ = WhereClause { gens: &t.generics, indent: 0, end_newline: true };\n+            write!(w, \"{}\", where_.print(cx.cache()));\n         } else {\n             write!(w, \" \");\n         }"}, {"sha": "a8a4b74b818b617c9d60de33ce44e931efc3c708", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cac238e4a3a838f9379b4c07d7463226929cf424/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac238e4a3a838f9379b4c07d7463226929cf424/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=cac238e4a3a838f9379b4c07d7463226929cf424", "patch": "@@ -41,8 +41,7 @@ impl JsonRenderer<'_> {\n     }\n \n     fn get_trait_implementors(&mut self, id: rustc_span::def_id::DefId) -> Vec<types::Id> {\n-        self.cache\n-            .clone()\n+        Rc::clone(&self.cache)\n             .implementors\n             .get(&id)\n             .map(|implementors| {\n@@ -59,8 +58,7 @@ impl JsonRenderer<'_> {\n     }\n \n     fn get_impls(&mut self, id: rustc_span::def_id::DefId) -> Vec<types::Id> {\n-        self.cache\n-            .clone()\n+        Rc::clone(&self.cache)\n             .impls\n             .get(&id)\n             .map(|impls| {\n@@ -81,8 +79,7 @@ impl JsonRenderer<'_> {\n     }\n \n     fn get_trait_items(&mut self) -> Vec<(types::Id, types::Item)> {\n-        self.cache\n-            .clone()\n+        Rc::clone(&self.cache)\n             .traits\n             .iter()\n             .filter_map(|(&id, trait_item)| {"}]}