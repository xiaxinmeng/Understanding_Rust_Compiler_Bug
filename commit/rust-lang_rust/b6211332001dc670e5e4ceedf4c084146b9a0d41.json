{"sha": "b6211332001dc670e5e4ceedf4c084146b9a0d41", "node_id": "C_kwDOAAsO6NoAKGI2MjExMzMyMDAxZGM2NzBlNWU0Y2VlZGY0YzA4NDE0NmI5YTBkNDE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-31T16:54:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-11-30T21:55:07Z"}, "message": "Simplify lowering.", "tree": {"sha": "c48eb80f5cf8470e6b9338c5c64e44d10850e6b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c48eb80f5cf8470e6b9338c5c64e44d10850e6b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6211332001dc670e5e4ceedf4c084146b9a0d41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6211332001dc670e5e4ceedf4c084146b9a0d41", "html_url": "https://github.com/rust-lang/rust/commit/b6211332001dc670e5e4ceedf4c084146b9a0d41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6211332001dc670e5e4ceedf4c084146b9a0d41/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "html_url": "https://github.com/rust-lang/rust/commit/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd"}], "stats": {"total": 68, "additions": 31, "deletions": 37}, "files": [{"sha": "cf0ee4fc28fe28ff7ba8759c2e79cb91d404cbe0", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 31, "deletions": 37, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b6211332001dc670e5e4ceedf4c084146b9a0d41/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6211332001dc670e5e4ceedf4c084146b9a0d41/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=b6211332001dc670e5e4ceedf4c084146b9a0d41", "patch": "@@ -268,7 +268,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         let has_lifetimes =\n             generic_args.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)));\n-        if !generic_args.parenthesized && !has_lifetimes {\n+        if !generic_args.parenthesized && !has_lifetimes && expected_lifetimes > 0 {\n             // Note: these spans are used for diagnostics when they can't be inferred.\n             // See rustc_resolve::late::lifetimes::LifetimeContext::add_missing_lifetime_specifiers_label\n             let elided_lifetime_span = if generic_args.span.is_empty() {\n@@ -286,49 +286,43 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 .map(GenericArg::Lifetime)\n                 .chain(generic_args.args.into_iter())\n                 .collect();\n-            if expected_lifetimes > 0 && param_mode == ParamMode::Explicit {\n+            // In create-parameter mode we error here because we don't want to support\n+            // deprecated impl elision in new features like impl elision and `async fn`,\n+            // both of which work using the `CreateParameter` mode:\n+            //\n+            //     impl Foo for std::cell::Ref<u32> // note lack of '_\n+            //     async fn foo(_: std::cell::Ref<u32>) { ... }\n+            if let (ParamMode::Explicit, AnonymousLifetimeMode::CreateParameter) =\n+                (param_mode, self.anonymous_lifetime_mode)\n+            {\n                 let anon_lt_suggestion = vec![\"'_\"; expected_lifetimes].join(\", \");\n                 let no_non_lt_args = generic_args.args.len() == expected_lifetimes;\n                 let no_bindings = generic_args.bindings.is_empty();\n-                let (incl_angl_brckt, insertion_sp, suggestion) = if no_non_lt_args && no_bindings {\n+                let (incl_angl_brckt, suggestion) = if no_non_lt_args && no_bindings {\n                     // If there are no generic args, our suggestion can include the angle brackets.\n-                    (true, path_span.shrink_to_hi(), format!(\"<{}>\", anon_lt_suggestion))\n+                    (true, format!(\"<{}>\", anon_lt_suggestion))\n                 } else {\n                     // Otherwise we'll insert a `'_, ` right after the opening bracket.\n-                    let span = generic_args\n-                        .span\n-                        .with_lo(generic_args.span.lo() + BytePos(1))\n-                        .shrink_to_lo();\n-                    (false, span, format!(\"{}, \", anon_lt_suggestion))\n+                    (false, format!(\"{}, \", anon_lt_suggestion))\n                 };\n-                match self.anonymous_lifetime_mode {\n-                    // In create-parameter mode we error here because we don't want to support\n-                    // deprecated impl elision in new features like impl elision and `async fn`,\n-                    // both of which work using the `CreateParameter` mode:\n-                    //\n-                    //     impl Foo for std::cell::Ref<u32> // note lack of '_\n-                    //     async fn foo(_: std::cell::Ref<u32>) { ... }\n-                    AnonymousLifetimeMode::CreateParameter => {\n-                        let mut err = struct_span_err!(\n-                            self.sess,\n-                            path_span,\n-                            E0726,\n-                            \"implicit elided lifetime not allowed here\"\n-                        );\n-                        rustc_errors::add_elided_lifetime_in_path_suggestion(\n-                            &self.sess.source_map(),\n-                            &mut err,\n-                            expected_lifetimes,\n-                            path_span,\n-                            incl_angl_brckt,\n-                            insertion_sp,\n-                            suggestion,\n-                        );\n-                        err.note(\"assuming a `'static` lifetime...\");\n-                        err.emit();\n-                    }\n-                    AnonymousLifetimeMode::PassThrough | AnonymousLifetimeMode::ReportError => {}\n-                }\n+                let insertion_sp = elided_lifetime_span.shrink_to_hi();\n+                let mut err = struct_span_err!(\n+                    self.sess,\n+                    path_span,\n+                    E0726,\n+                    \"implicit elided lifetime not allowed here\"\n+                );\n+                rustc_errors::add_elided_lifetime_in_path_suggestion(\n+                    &self.sess.source_map(),\n+                    &mut err,\n+                    expected_lifetimes,\n+                    path_span,\n+                    incl_angl_brckt,\n+                    insertion_sp,\n+                    suggestion,\n+                );\n+                err.note(\"assuming a `'static` lifetime...\");\n+                err.emit();\n             }\n         }\n "}]}