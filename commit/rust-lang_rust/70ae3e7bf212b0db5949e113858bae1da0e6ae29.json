{"sha": "70ae3e7bf212b0db5949e113858bae1da0e6ae29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYWUzZTdiZjIxMmIwZGI1OTQ5ZTExMzg1OGJhZTFkYTBlNmFlMjk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-28T21:55:31Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-28T21:55:43Z"}, "message": "De-export std::{bitv, cell, timer}. Part of #3583.", "tree": {"sha": "6ad1ae76eb930a44e835a590d3762a1ebfb86220", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ad1ae76eb930a44e835a590d3762a1ebfb86220"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70ae3e7bf212b0db5949e113858bae1da0e6ae29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70ae3e7bf212b0db5949e113858bae1da0e6ae29", "html_url": "https://github.com/rust-lang/rust/commit/70ae3e7bf212b0db5949e113858bae1da0e6ae29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70ae3e7bf212b0db5949e113858bae1da0e6ae29/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94f7bf98f96a14fa14c45723a9e40f348ab9d655", "url": "https://api.github.com/repos/rust-lang/rust/commits/94f7bf98f96a14fa14c45723a9e40f348ab9d655", "html_url": "https://github.com/rust-lang/rust/commit/94f7bf98f96a14fa14c45723a9e40f348ab9d655"}], "stats": {"total": 31, "additions": 12, "deletions": 19}, "files": [{"sha": "370c5ddb566a4a387328bd51b2c592797bf8d769", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70ae3e7bf212b0db5949e113858bae1da0e6ae29/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ae3e7bf212b0db5949e113858bae1da0e6ae29/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=70ae3e7bf212b0db5949e113858bae1da0e6ae29", "patch": "@@ -2,8 +2,6 @@\n \n use vec::{to_mut, from_elem};\n \n-export Bitv, from_bytes, from_bools, from_fn;\n-\n struct SmallBitv {\n     /// only the lowest nbits of this value are used. the rest is undefined.\n     mut bits: u32\n@@ -209,12 +207,12 @@ enum BitvVariant { Big(~BigBitv), Small(~SmallBitv) }\n enum Op {Union, Intersect, Assign, Difference}\n \n // The bitvector type\n-struct Bitv {\n+pub struct Bitv {\n     rep: BitvVariant,\n     nbits: uint\n }\n \n-fn Bitv (nbits: uint, init: bool) -> Bitv {\n+pub fn Bitv (nbits: uint, init: bool) -> Bitv {\n     let rep = if nbits <= 32 {\n         Small(~SmallBitv(if init {!0} else {0}))\n     }\n@@ -519,7 +517,7 @@ impl Bitv {\n  * with the most significant bits of each byte coming first. Each\n  * bit becomes true if equal to 1 or false if equal to 0.\n  */\n-fn from_bytes(bytes: &[u8]) -> Bitv {\n+pub fn from_bytes(bytes: &[u8]) -> Bitv {\n     from_fn(bytes.len() * 8, |i| {\n         let b = bytes[i / 8] as uint;\n         let offset = i % 8;\n@@ -530,15 +528,15 @@ fn from_bytes(bytes: &[u8]) -> Bitv {\n /**\n  * Transform a [bool] into a bitv by converting each bool into a bit.\n  */\n-fn from_bools(bools: &[bool]) -> Bitv {\n+pub fn from_bools(bools: &[bool]) -> Bitv {\n     from_fn(bools.len(), |i| bools[i])\n }\n \n /**\n  * Create a bitv of the specified length where the value at each\n  * index is f(index).\n  */\n-fn from_fn(len: uint, f: fn(index: uint) -> bool) -> Bitv {\n+pub fn from_fn(len: uint, f: fn(index: uint) -> bool) -> Bitv {\n     let bitv = Bitv(len, false);\n     for uint::range(0, len) |i| {\n         bitv.set(i, f(i));"}, {"sha": "43e47e1e1a9f9d753394cfaee80e6c78d081493e", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70ae3e7bf212b0db5949e113858bae1da0e6ae29/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ae3e7bf212b0db5949e113858bae1da0e6ae29/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=70ae3e7bf212b0db5949e113858bae1da0e6ae29", "patch": "@@ -3,16 +3,16 @@\n ///\n /// Similar to a mutable option type, but friendlier.\n \n-struct Cell<T> {\n+pub struct Cell<T> {\n     mut value: Option<T>\n }\n \n /// Creates a new full cell with the given value.\n-fn Cell<T>(+value: T) -> Cell<T> {\n+pub fn Cell<T>(+value: T) -> Cell<T> {\n     Cell { value: Some(move value) }\n }\n \n-fn empty_cell<T>() -> Cell<T> {\n+pub fn empty_cell<T>() -> Cell<T> {\n     Cell { value: None }\n }\n "}, {"sha": "13f7b967723838fe95d2ef009564100f7ee92469", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70ae3e7bf212b0db5949e113858bae1da0e6ae29/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/70ae3e7bf212b0db5949e113858bae1da0e6ae29/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=70ae3e7bf212b0db5949e113858bae1da0e6ae29", "patch": "@@ -69,9 +69,7 @@ mod uv_global_loop;\n \n #[legacy_exports]\n mod c_vec;\n-#[legacy_exports]\n mod timer;\n-#[legacy_exports]\n mod cell;\n \n // Concurrency\n@@ -85,7 +83,6 @@ mod comm;\n \n // Collections\n \n-#[legacy_exports]\n mod bitv;\n #[legacy_exports]\n mod deque;"}, {"sha": "a2f9796f89ea973e6840a247b7c0849f24bb29d6", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70ae3e7bf212b0db5949e113858bae1da0e6ae29/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ae3e7bf212b0db5949e113858bae1da0e6ae29/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=70ae3e7bf212b0db5949e113858bae1da0e6ae29", "patch": "@@ -7,8 +7,6 @@ use uv::iotask;\n use iotask::IoTask;\n use comm = core::comm;\n \n-export delayed_send, sleep, recv_timeout;\n-\n /**\n  * Wait for timeout period then send provided value over a channel\n  *\n@@ -25,8 +23,8 @@ export delayed_send, sleep, recv_timeout;\n  * * ch - a channel of type T to send a `val` on\n  * * val - a value of type T to send over the provided `ch`\n  */\n-fn delayed_send<T: Copy Send>(iotask: IoTask,\n-                              msecs: uint, ch: comm::Chan<T>, +val: T) {\n+pub fn delayed_send<T: Copy Send>(iotask: IoTask,\n+                                  msecs: uint, ch: comm::Chan<T>, +val: T) {\n         unsafe {\n             let timer_done_po = core::comm::Port::<()>();\n             let timer_done_ch = core::comm::Chan(timer_done_po);\n@@ -74,7 +72,7 @@ fn delayed_send<T: Copy Send>(iotask: IoTask,\n  * * `iotask` - a `uv::iotask` that the tcp request will run on\n  * * msecs - an amount of time, in milliseconds, for the current task to block\n  */\n-fn sleep(iotask: IoTask, msecs: uint) {\n+pub fn sleep(iotask: IoTask, msecs: uint) {\n     let exit_po = core::comm::Port::<()>();\n     let exit_ch = core::comm::Chan(exit_po);\n     delayed_send(iotask, msecs, exit_ch, ());\n@@ -101,7 +99,7 @@ fn sleep(iotask: IoTask, msecs: uint) {\n  * on the provided port in the allotted timeout period, then the result will\n  * be a `some(T)`. If not, then `none` will be returned.\n  */\n-fn recv_timeout<T: Copy Send>(iotask: IoTask,\n+pub fn recv_timeout<T: Copy Send>(iotask: IoTask,\n                               msecs: uint,\n                               wait_po: comm::Port<T>) -> Option<T> {\n     let timeout_po = comm::Port::<()>();"}]}