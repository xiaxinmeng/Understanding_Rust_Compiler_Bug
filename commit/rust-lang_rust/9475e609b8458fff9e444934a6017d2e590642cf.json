{"sha": "9475e609b8458fff9e444934a6017d2e590642cf", "node_id": "C_kwDOAAsO6NoAKDk0NzVlNjA5Yjg0NThmZmY5ZTQ0NDkzNGE2MDE3ZDJlNTkwNjQyY2Y", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-12T09:43:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-12T09:43:37Z"}, "message": "Auto merge of #89770 - jkugelman:must-use-from-and-into, r=joshtriplett\n\nAdd #[must_use] to From::from and Into::into\n\nRisk of churn: **High**\nMagic 8-Ball says: **Outlook not so good**\n\nI figured I'd put this out there. If we don't do it now maybe we save it for a rainy day.\n\nParent issue: #89692\n\nr? `@joshtriplett`", "tree": {"sha": "1ec40410ba915330cb3dcfae42d0dd5dfe489e76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ec40410ba915330cb3dcfae42d0dd5dfe489e76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9475e609b8458fff9e444934a6017d2e590642cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9475e609b8458fff9e444934a6017d2e590642cf", "html_url": "https://github.com/rust-lang/rust/commit/9475e609b8458fff9e444934a6017d2e590642cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9475e609b8458fff9e444934a6017d2e590642cf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f2b31e61390b09c1012379c70b7d0bc0f65df9", "url": "https://api.github.com/repos/rust-lang/rust/commits/02f2b31e61390b09c1012379c70b7d0bc0f65df9", "html_url": "https://github.com/rust-lang/rust/commit/02f2b31e61390b09c1012379c70b7d0bc0f65df9"}, {"sha": "f9692b561988b73ccaf5505e6636a2dac1a0906f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9692b561988b73ccaf5505e6636a2dac1a0906f", "html_url": "https://github.com/rust-lang/rust/commit/f9692b561988b73ccaf5505e6636a2dac1a0906f"}], "stats": {"total": 305, "additions": 154, "deletions": 151}, "files": [{"sha": "83a73d9cbe506de1e602abbd3e51983fd6223216", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9475e609b8458fff9e444934a6017d2e590642cf/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9475e609b8458fff9e444934a6017d2e590642cf/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=9475e609b8458fff9e444934a6017d2e590642cf", "patch": "@@ -273,6 +273,7 @@ pub trait AsMut<T: ?Sized> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n     /// Performs the conversion.\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn into(self) -> T;\n }\n@@ -367,6 +368,7 @@ pub trait Into<T>: Sized {\n pub trait From<T>: Sized {\n     /// Performs the conversion.\n     #[lang = \"from\"]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from(_: T) -> Self;\n }"}, {"sha": "614cdff1f80222fd553404239db09f1c36b02e27", "filename": "src/test/ui/never_type/never-value-fallback-issue-66757.nofallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9475e609b8458fff9e444934a6017d2e590642cf/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9475e609b8458fff9e444934a6017d2e590642cf/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr?ref=9475e609b8458fff9e444934a6017d2e590642cf", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `E: From<()>` is not satisfied\n-  --> $DIR/never-value-fallback-issue-66757.rs:27:5\n+  --> $DIR/never-value-fallback-issue-66757.rs:28:5\n    |\n LL |     <E as From<_>>::from(never);\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `From<()>` is not implemented for `E`"}, {"sha": "fc6fe6eb5cc021ff518de2696855804d700a9e20", "filename": "src/test/ui/never_type/never-value-fallback-issue-66757.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9475e609b8458fff9e444934a6017d2e590642cf/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9475e609b8458fff9e444934a6017d2e590642cf/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.rs?ref=9475e609b8458fff9e444934a6017d2e590642cf", "patch": "@@ -22,6 +22,7 @@ impl From<!> for E {\n \n #[allow(unreachable_code)]\n #[allow(dead_code)]\n+#[allow(unused_must_use)]\n fn foo(never: !) {\n     <E as From<!>>::from(never);  // Ok\n     <E as From<_>>::from(never);  //[nofallback]~ ERROR trait bound `E: From<()>` is not satisfied"}, {"sha": "32a9c1c4ae1afee87c8c70a4dde3691d2a58d3fa", "filename": "src/tools/clippy/tests/ui/cast_lossless_float.fixed", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9475e609b8458fff9e444934a6017d2e590642cf/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_float.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9475e609b8458fff9e444934a6017d2e590642cf/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_float.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_float.fixed?ref=9475e609b8458fff9e444934a6017d2e590642cf", "patch": "@@ -6,24 +6,24 @@\n fn main() {\n     // Test clippy::cast_lossless with casts to floating-point types\n     let x0 = 1i8;\n-    f32::from(x0);\n-    f64::from(x0);\n+    let _ = f32::from(x0);\n+    let _ = f64::from(x0);\n     let x1 = 1u8;\n-    f32::from(x1);\n-    f64::from(x1);\n+    let _ = f32::from(x1);\n+    let _ = f64::from(x1);\n     let x2 = 1i16;\n-    f32::from(x2);\n-    f64::from(x2);\n+    let _ = f32::from(x2);\n+    let _ = f64::from(x2);\n     let x3 = 1u16;\n-    f32::from(x3);\n-    f64::from(x3);\n+    let _ = f32::from(x3);\n+    let _ = f64::from(x3);\n     let x4 = 1i32;\n-    f64::from(x4);\n+    let _ = f64::from(x4);\n     let x5 = 1u32;\n-    f64::from(x5);\n+    let _ = f64::from(x5);\n \n     // Test with casts from floating-point types\n-    f64::from(1.0f32);\n+    let _ = f64::from(1.0f32);\n }\n \n // The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,"}, {"sha": "6f5ddcfe09c8a7e48b73f7e3b0625768522c1737", "filename": "src/tools/clippy/tests/ui/cast_lossless_float.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9475e609b8458fff9e444934a6017d2e590642cf/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9475e609b8458fff9e444934a6017d2e590642cf/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_float.rs?ref=9475e609b8458fff9e444934a6017d2e590642cf", "patch": "@@ -6,24 +6,24 @@\n fn main() {\n     // Test clippy::cast_lossless with casts to floating-point types\n     let x0 = 1i8;\n-    x0 as f32;\n-    x0 as f64;\n+    let _ = x0 as f32;\n+    let _ = x0 as f64;\n     let x1 = 1u8;\n-    x1 as f32;\n-    x1 as f64;\n+    let _ = x1 as f32;\n+    let _ = x1 as f64;\n     let x2 = 1i16;\n-    x2 as f32;\n-    x2 as f64;\n+    let _ = x2 as f32;\n+    let _ = x2 as f64;\n     let x3 = 1u16;\n-    x3 as f32;\n-    x3 as f64;\n+    let _ = x3 as f32;\n+    let _ = x3 as f64;\n     let x4 = 1i32;\n-    x4 as f64;\n+    let _ = x4 as f64;\n     let x5 = 1u32;\n-    x5 as f64;\n+    let _ = x5 as f64;\n \n     // Test with casts from floating-point types\n-    1.0f32 as f64;\n+    let _ = 1.0f32 as f64;\n }\n \n // The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,"}, {"sha": "8326d40be7165285635d228e03ba4b8b4b0125d4", "filename": "src/tools/clippy/tests/ui/cast_lossless_float.stderr", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9475e609b8458fff9e444934a6017d2e590642cf/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9475e609b8458fff9e444934a6017d2e590642cf/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_float.stderr?ref=9475e609b8458fff9e444934a6017d2e590642cf", "patch": "@@ -1,70 +1,70 @@\n error: casting `i8` to `f32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:9:5\n+  --> $DIR/cast_lossless_float.rs:9:13\n    |\n-LL |     x0 as f32;\n-   |     ^^^^^^^^^ help: try: `f32::from(x0)`\n+LL |     let _ = x0 as f32;\n+   |             ^^^^^^^^^ help: try: `f32::from(x0)`\n    |\n    = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n error: casting `i8` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:10:5\n+  --> $DIR/cast_lossless_float.rs:10:13\n    |\n-LL |     x0 as f64;\n-   |     ^^^^^^^^^ help: try: `f64::from(x0)`\n+LL |     let _ = x0 as f64;\n+   |             ^^^^^^^^^ help: try: `f64::from(x0)`\n \n error: casting `u8` to `f32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:12:5\n+  --> $DIR/cast_lossless_float.rs:12:13\n    |\n-LL |     x1 as f32;\n-   |     ^^^^^^^^^ help: try: `f32::from(x1)`\n+LL |     let _ = x1 as f32;\n+   |             ^^^^^^^^^ help: try: `f32::from(x1)`\n \n error: casting `u8` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:13:5\n+  --> $DIR/cast_lossless_float.rs:13:13\n    |\n-LL |     x1 as f64;\n-   |     ^^^^^^^^^ help: try: `f64::from(x1)`\n+LL |     let _ = x1 as f64;\n+   |             ^^^^^^^^^ help: try: `f64::from(x1)`\n \n error: casting `i16` to `f32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:15:5\n+  --> $DIR/cast_lossless_float.rs:15:13\n    |\n-LL |     x2 as f32;\n-   |     ^^^^^^^^^ help: try: `f32::from(x2)`\n+LL |     let _ = x2 as f32;\n+   |             ^^^^^^^^^ help: try: `f32::from(x2)`\n \n error: casting `i16` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:16:5\n+  --> $DIR/cast_lossless_float.rs:16:13\n    |\n-LL |     x2 as f64;\n-   |     ^^^^^^^^^ help: try: `f64::from(x2)`\n+LL |     let _ = x2 as f64;\n+   |             ^^^^^^^^^ help: try: `f64::from(x2)`\n \n error: casting `u16` to `f32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:18:5\n+  --> $DIR/cast_lossless_float.rs:18:13\n    |\n-LL |     x3 as f32;\n-   |     ^^^^^^^^^ help: try: `f32::from(x3)`\n+LL |     let _ = x3 as f32;\n+   |             ^^^^^^^^^ help: try: `f32::from(x3)`\n \n error: casting `u16` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:19:5\n+  --> $DIR/cast_lossless_float.rs:19:13\n    |\n-LL |     x3 as f64;\n-   |     ^^^^^^^^^ help: try: `f64::from(x3)`\n+LL |     let _ = x3 as f64;\n+   |             ^^^^^^^^^ help: try: `f64::from(x3)`\n \n error: casting `i32` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:21:5\n+  --> $DIR/cast_lossless_float.rs:21:13\n    |\n-LL |     x4 as f64;\n-   |     ^^^^^^^^^ help: try: `f64::from(x4)`\n+LL |     let _ = x4 as f64;\n+   |             ^^^^^^^^^ help: try: `f64::from(x4)`\n \n error: casting `u32` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:23:5\n+  --> $DIR/cast_lossless_float.rs:23:13\n    |\n-LL |     x5 as f64;\n-   |     ^^^^^^^^^ help: try: `f64::from(x5)`\n+LL |     let _ = x5 as f64;\n+   |             ^^^^^^^^^ help: try: `f64::from(x5)`\n \n error: casting `f32` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:26:5\n+  --> $DIR/cast_lossless_float.rs:26:13\n    |\n-LL |     1.0f32 as f64;\n-   |     ^^^^^^^^^^^^^ help: try: `f64::from(1.0f32)`\n+LL |     let _ = 1.0f32 as f64;\n+   |             ^^^^^^^^^^^^^ help: try: `f64::from(1.0f32)`\n \n error: aborting due to 11 previous errors\n "}, {"sha": "72a708b40737b3932688127ec9b1905901bacb86", "filename": "src/tools/clippy/tests/ui/cast_lossless_integer.fixed", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9475e609b8458fff9e444934a6017d2e590642cf/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_integer.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9475e609b8458fff9e444934a6017d2e590642cf/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_integer.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_integer.fixed?ref=9475e609b8458fff9e444934a6017d2e590642cf", "patch": "@@ -5,27 +5,27 @@\n \n fn main() {\n     // Test clippy::cast_lossless with casts to integer types\n-    i16::from(1i8);\n-    i32::from(1i8);\n-    i64::from(1i8);\n-    i16::from(1u8);\n-    i32::from(1u8);\n-    i64::from(1u8);\n-    u16::from(1u8);\n-    u32::from(1u8);\n-    u64::from(1u8);\n-    i32::from(1i16);\n-    i64::from(1i16);\n-    i32::from(1u16);\n-    i64::from(1u16);\n-    u32::from(1u16);\n-    u64::from(1u16);\n-    i64::from(1i32);\n-    i64::from(1u32);\n-    u64::from(1u32);\n+    let _ = i16::from(1i8);\n+    let _ = i32::from(1i8);\n+    let _ = i64::from(1i8);\n+    let _ = i16::from(1u8);\n+    let _ = i32::from(1u8);\n+    let _ = i64::from(1u8);\n+    let _ = u16::from(1u8);\n+    let _ = u32::from(1u8);\n+    let _ = u64::from(1u8);\n+    let _ = i32::from(1i16);\n+    let _ = i64::from(1i16);\n+    let _ = i32::from(1u16);\n+    let _ = i64::from(1u16);\n+    let _ = u32::from(1u16);\n+    let _ = u64::from(1u16);\n+    let _ = i64::from(1i32);\n+    let _ = i64::from(1u32);\n+    let _ = u64::from(1u32);\n \n     // Test with an expression wrapped in parens\n-    u16::from(1u8 + 1u8);\n+    let _ = u16::from(1u8 + 1u8);\n }\n \n // The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,"}, {"sha": "34bb47181e69deffcf1bfe283ed4557b68d08c4e", "filename": "src/tools/clippy/tests/ui/cast_lossless_integer.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9475e609b8458fff9e444934a6017d2e590642cf/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9475e609b8458fff9e444934a6017d2e590642cf/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_integer.rs?ref=9475e609b8458fff9e444934a6017d2e590642cf", "patch": "@@ -5,27 +5,27 @@\n \n fn main() {\n     // Test clippy::cast_lossless with casts to integer types\n-    1i8 as i16;\n-    1i8 as i32;\n-    1i8 as i64;\n-    1u8 as i16;\n-    1u8 as i32;\n-    1u8 as i64;\n-    1u8 as u16;\n-    1u8 as u32;\n-    1u8 as u64;\n-    1i16 as i32;\n-    1i16 as i64;\n-    1u16 as i32;\n-    1u16 as i64;\n-    1u16 as u32;\n-    1u16 as u64;\n-    1i32 as i64;\n-    1u32 as i64;\n-    1u32 as u64;\n+    let _ = 1i8 as i16;\n+    let _ = 1i8 as i32;\n+    let _ = 1i8 as i64;\n+    let _ = 1u8 as i16;\n+    let _ = 1u8 as i32;\n+    let _ = 1u8 as i64;\n+    let _ = 1u8 as u16;\n+    let _ = 1u8 as u32;\n+    let _ = 1u8 as u64;\n+    let _ = 1i16 as i32;\n+    let _ = 1i16 as i64;\n+    let _ = 1u16 as i32;\n+    let _ = 1u16 as i64;\n+    let _ = 1u16 as u32;\n+    let _ = 1u16 as u64;\n+    let _ = 1i32 as i64;\n+    let _ = 1u32 as i64;\n+    let _ = 1u32 as u64;\n \n     // Test with an expression wrapped in parens\n-    (1u8 + 1u8) as u16;\n+    let _ = (1u8 + 1u8) as u16;\n }\n \n // The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,"}, {"sha": "721b94876cb2c6c5305b81c91f2dc3424fa6a2fe", "filename": "src/tools/clippy/tests/ui/cast_lossless_integer.stderr", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/9475e609b8458fff9e444934a6017d2e590642cf/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_integer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9475e609b8458fff9e444934a6017d2e590642cf/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_integer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_lossless_integer.stderr?ref=9475e609b8458fff9e444934a6017d2e590642cf", "patch": "@@ -1,118 +1,118 @@\n error: casting `i8` to `i16` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:8:5\n+  --> $DIR/cast_lossless_integer.rs:8:13\n    |\n-LL |     1i8 as i16;\n-   |     ^^^^^^^^^^ help: try: `i16::from(1i8)`\n+LL |     let _ = 1i8 as i16;\n+   |             ^^^^^^^^^^ help: try: `i16::from(1i8)`\n    |\n    = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n error: casting `i8` to `i32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:9:5\n+  --> $DIR/cast_lossless_integer.rs:9:13\n    |\n-LL |     1i8 as i32;\n-   |     ^^^^^^^^^^ help: try: `i32::from(1i8)`\n+LL |     let _ = 1i8 as i32;\n+   |             ^^^^^^^^^^ help: try: `i32::from(1i8)`\n \n error: casting `i8` to `i64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:10:5\n+  --> $DIR/cast_lossless_integer.rs:10:13\n    |\n-LL |     1i8 as i64;\n-   |     ^^^^^^^^^^ help: try: `i64::from(1i8)`\n+LL |     let _ = 1i8 as i64;\n+   |             ^^^^^^^^^^ help: try: `i64::from(1i8)`\n \n error: casting `u8` to `i16` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:11:5\n+  --> $DIR/cast_lossless_integer.rs:11:13\n    |\n-LL |     1u8 as i16;\n-   |     ^^^^^^^^^^ help: try: `i16::from(1u8)`\n+LL |     let _ = 1u8 as i16;\n+   |             ^^^^^^^^^^ help: try: `i16::from(1u8)`\n \n error: casting `u8` to `i32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:12:5\n+  --> $DIR/cast_lossless_integer.rs:12:13\n    |\n-LL |     1u8 as i32;\n-   |     ^^^^^^^^^^ help: try: `i32::from(1u8)`\n+LL |     let _ = 1u8 as i32;\n+   |             ^^^^^^^^^^ help: try: `i32::from(1u8)`\n \n error: casting `u8` to `i64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:13:5\n+  --> $DIR/cast_lossless_integer.rs:13:13\n    |\n-LL |     1u8 as i64;\n-   |     ^^^^^^^^^^ help: try: `i64::from(1u8)`\n+LL |     let _ = 1u8 as i64;\n+   |             ^^^^^^^^^^ help: try: `i64::from(1u8)`\n \n error: casting `u8` to `u16` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:14:5\n+  --> $DIR/cast_lossless_integer.rs:14:13\n    |\n-LL |     1u8 as u16;\n-   |     ^^^^^^^^^^ help: try: `u16::from(1u8)`\n+LL |     let _ = 1u8 as u16;\n+   |             ^^^^^^^^^^ help: try: `u16::from(1u8)`\n \n error: casting `u8` to `u32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:15:5\n+  --> $DIR/cast_lossless_integer.rs:15:13\n    |\n-LL |     1u8 as u32;\n-   |     ^^^^^^^^^^ help: try: `u32::from(1u8)`\n+LL |     let _ = 1u8 as u32;\n+   |             ^^^^^^^^^^ help: try: `u32::from(1u8)`\n \n error: casting `u8` to `u64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:16:5\n+  --> $DIR/cast_lossless_integer.rs:16:13\n    |\n-LL |     1u8 as u64;\n-   |     ^^^^^^^^^^ help: try: `u64::from(1u8)`\n+LL |     let _ = 1u8 as u64;\n+   |             ^^^^^^^^^^ help: try: `u64::from(1u8)`\n \n error: casting `i16` to `i32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:17:5\n+  --> $DIR/cast_lossless_integer.rs:17:13\n    |\n-LL |     1i16 as i32;\n-   |     ^^^^^^^^^^^ help: try: `i32::from(1i16)`\n+LL |     let _ = 1i16 as i32;\n+   |             ^^^^^^^^^^^ help: try: `i32::from(1i16)`\n \n error: casting `i16` to `i64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:18:5\n+  --> $DIR/cast_lossless_integer.rs:18:13\n    |\n-LL |     1i16 as i64;\n-   |     ^^^^^^^^^^^ help: try: `i64::from(1i16)`\n+LL |     let _ = 1i16 as i64;\n+   |             ^^^^^^^^^^^ help: try: `i64::from(1i16)`\n \n error: casting `u16` to `i32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:19:5\n+  --> $DIR/cast_lossless_integer.rs:19:13\n    |\n-LL |     1u16 as i32;\n-   |     ^^^^^^^^^^^ help: try: `i32::from(1u16)`\n+LL |     let _ = 1u16 as i32;\n+   |             ^^^^^^^^^^^ help: try: `i32::from(1u16)`\n \n error: casting `u16` to `i64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:20:5\n+  --> $DIR/cast_lossless_integer.rs:20:13\n    |\n-LL |     1u16 as i64;\n-   |     ^^^^^^^^^^^ help: try: `i64::from(1u16)`\n+LL |     let _ = 1u16 as i64;\n+   |             ^^^^^^^^^^^ help: try: `i64::from(1u16)`\n \n error: casting `u16` to `u32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:21:5\n+  --> $DIR/cast_lossless_integer.rs:21:13\n    |\n-LL |     1u16 as u32;\n-   |     ^^^^^^^^^^^ help: try: `u32::from(1u16)`\n+LL |     let _ = 1u16 as u32;\n+   |             ^^^^^^^^^^^ help: try: `u32::from(1u16)`\n \n error: casting `u16` to `u64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:22:5\n+  --> $DIR/cast_lossless_integer.rs:22:13\n    |\n-LL |     1u16 as u64;\n-   |     ^^^^^^^^^^^ help: try: `u64::from(1u16)`\n+LL |     let _ = 1u16 as u64;\n+   |             ^^^^^^^^^^^ help: try: `u64::from(1u16)`\n \n error: casting `i32` to `i64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:23:5\n+  --> $DIR/cast_lossless_integer.rs:23:13\n    |\n-LL |     1i32 as i64;\n-   |     ^^^^^^^^^^^ help: try: `i64::from(1i32)`\n+LL |     let _ = 1i32 as i64;\n+   |             ^^^^^^^^^^^ help: try: `i64::from(1i32)`\n \n error: casting `u32` to `i64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:24:5\n+  --> $DIR/cast_lossless_integer.rs:24:13\n    |\n-LL |     1u32 as i64;\n-   |     ^^^^^^^^^^^ help: try: `i64::from(1u32)`\n+LL |     let _ = 1u32 as i64;\n+   |             ^^^^^^^^^^^ help: try: `i64::from(1u32)`\n \n error: casting `u32` to `u64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:25:5\n+  --> $DIR/cast_lossless_integer.rs:25:13\n    |\n-LL |     1u32 as u64;\n-   |     ^^^^^^^^^^^ help: try: `u64::from(1u32)`\n+LL |     let _ = 1u32 as u64;\n+   |             ^^^^^^^^^^^ help: try: `u64::from(1u32)`\n \n error: casting `u8` to `u16` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:28:5\n+  --> $DIR/cast_lossless_integer.rs:28:13\n    |\n-LL |     (1u8 + 1u8) as u16;\n-   |     ^^^^^^^^^^^^^^^^^^ help: try: `u16::from(1u8 + 1u8)`\n+LL |     let _ = (1u8 + 1u8) as u16;\n+   |             ^^^^^^^^^^^^^^^^^^ help: try: `u16::from(1u8 + 1u8)`\n \n error: aborting due to 19 previous errors\n "}]}