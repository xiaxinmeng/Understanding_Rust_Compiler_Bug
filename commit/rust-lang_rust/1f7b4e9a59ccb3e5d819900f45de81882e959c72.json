{"sha": "1f7b4e9a59ccb3e5d819900f45de81882e959c72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmN2I0ZTlhNTljY2IzZTVkODE5OTAwZjQ1ZGU4MTg4MmU5NTljNzI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-02T03:53:12Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-04T18:03:27Z"}, "message": "extract Export, ExportMap from hir::def", "tree": {"sha": "ac8058d2cf12f2258017930fa61384a57fe5f735", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac8058d2cf12f2258017930fa61384a57fe5f735"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f7b4e9a59ccb3e5d819900f45de81882e959c72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f7b4e9a59ccb3e5d819900f45de81882e959c72", "html_url": "https://github.com/rust-lang/rust/commit/1f7b4e9a59ccb3e5d819900f45de81882e959c72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f7b4e9a59ccb3e5d819900f45de81882e959c72/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "702b2d736a8c6235bdf8a3a3db86f64b566049b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/702b2d736a8c6235bdf8a3a3db86f64b566049b9", "html_url": "https://github.com/rust-lang/rust/commit/702b2d736a8c6235bdf8a3a3db86f64b566049b9"}], "stats": {"total": 140, "additions": 75, "deletions": 65}, "files": [{"sha": "ae19d82387d494b0b412f0356dd5070dc3240415", "filename": "src/librustc/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir.rs?ref=1f7b4e9a59ccb3e5d819900f45de81882e959c72", "patch": "@@ -4,6 +4,7 @@\n \n pub mod check_attr;\n pub mod def;\n+pub mod exports;\n pub use rustc_hir::def_id;\n pub use rustc_hir::hir_id::*;\n pub mod intravisit;"}, {"sha": "71ece0aadd34fa6acaf1b2a39288b09d38ca0188", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=1f7b4e9a59ccb3e5d819900f45de81882e959c72", "patch": "@@ -1,10 +1,8 @@\n use crate::hir;\n-use crate::hir::def_id::{DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use crate::ty;\n+use crate::hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n \n use rustc_macros::HashStable;\n use rustc_span::hygiene::MacroKind;\n-use rustc_span::Span;\n use syntax::ast;\n use syntax::ast::NodeId;\n \n@@ -293,29 +291,6 @@ impl<T> PerNS<Option<T>> {\n     }\n }\n \n-/// This is the replacement export map. It maps a module to all of the exports\n-/// within.\n-pub type ExportMap<Id> = DefIdMap<Vec<Export<Id>>>;\n-\n-#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n-pub struct Export<Id> {\n-    /// The name of the target.\n-    pub ident: ast::Ident,\n-    /// The resolution of the target.\n-    pub res: Res<Id>,\n-    /// The span of the target.\n-    pub span: Span,\n-    /// The visibility of the export.\n-    /// We include non-`pub` exports for hygienic macros that get used from extern crates.\n-    pub vis: ty::Visibility,\n-}\n-\n-impl<Id> Export<Id> {\n-    pub fn map_id<R>(self, map: impl FnMut(Id) -> R) -> Export<R> {\n-        Export { ident: self.ident, res: self.res.map_id(map), span: self.span, vis: self.vis }\n-    }\n-}\n-\n impl CtorKind {\n     pub fn from_ast(vdata: &ast::VariantData) -> CtorKind {\n         match *vdata {"}, {"sha": "a2e885f2a6a7e2066b7c99fbffe4d5f4bd0d37c6", "filename": "src/librustc/hir/exports.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc%2Fhir%2Fexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc%2Fhir%2Fexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fexports.rs?ref=1f7b4e9a59ccb3e5d819900f45de81882e959c72", "patch": "@@ -0,0 +1,32 @@\n+use crate::hir::def::Res;\n+use crate::hir::def_id::DefIdMap;\n+use crate::ty;\n+\n+use rustc_macros::HashStable;\n+use rustc_span::Span;\n+use syntax::ast;\n+\n+use std::fmt::Debug;\n+\n+/// This is the replacement export map. It maps a module to all of the exports\n+/// within.\n+pub type ExportMap<Id> = DefIdMap<Vec<Export<Id>>>;\n+\n+#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+pub struct Export<Id> {\n+    /// The name of the target.\n+    pub ident: ast::Ident,\n+    /// The resolution of the target.\n+    pub res: Res<Id>,\n+    /// The span of the target.\n+    pub span: Span,\n+    /// The visibility of the export.\n+    /// We include non-`pub` exports for hygienic macros that get used from extern crates.\n+    pub vis: ty::Visibility,\n+}\n+\n+impl<Id> Export<Id> {\n+    pub fn map_id<R>(self, map: impl FnMut(Id) -> R) -> Export<R> {\n+        Export { ident: self.ident, res: self.res.map_id(map), span: self.span, vis: self.vis }\n+    }\n+}"}, {"sha": "86042d86b939c12b7e95d42e81e64a389be9f792", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=1f7b4e9a59ccb3e5d819900f45de81882e959c72", "patch": "@@ -3,8 +3,9 @@\n use crate::arena::Arena;\n use crate::dep_graph::DepGraph;\n use crate::dep_graph::{self, DepConstructor, DepNode};\n-use crate::hir::def::{DefKind, Export, Res};\n+use crate::hir::def::{DefKind, Res};\n use crate::hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex, LOCAL_CRATE};\n+use crate::hir::exports::Export;\n use crate::hir::map as hir_map;\n use crate::hir::map::DefPathHash;\n use crate::hir::{self, HirId, Node, TraitCandidate};"}, {"sha": "1ce74a61c0e42bced56e1d761fd6cbb375158b73", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1f7b4e9a59ccb3e5d819900f45de81882e959c72", "patch": "@@ -6,8 +6,9 @@ pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n pub use self::Variance::*;\n \n-use crate::hir::def::{CtorKind, CtorOf, DefKind, ExportMap, Res};\n+use crate::hir::def::{CtorKind, CtorOf, DefKind, Res};\n use crate::hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use crate::hir::exports::ExportMap;\n use crate::hir::Node;\n use crate::hir::{map as hir_map, GlobMap, TraitMap};\n use crate::ich::Fingerprint;"}, {"sha": "0ec3874e6a117396fef5c06ccb43d8f049ea7e6e", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=1f7b4e9a59ccb3e5d819900f45de81882e959c72", "patch": "@@ -1,6 +1,7 @@\n use crate::dep_graph::{self, DepNode};\n-use crate::hir::def::{DefKind, Export};\n+use crate::hir::def::DefKind;\n use crate::hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex};\n+use crate::hir::exports::Export;\n use crate::hir::{self, HirIdSet, ItemLocalId, TraitCandidate};\n use crate::infer::canonical::{self, Canonical};\n use crate::lint;"}, {"sha": "1ed6b748d873a133d5553565bb1137e26291cf41", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=1f7b4e9a59ccb3e5d819900f45de81882e959c72", "patch": "@@ -5,8 +5,9 @@ use crate::rmeta::*;\n \n use rustc::dep_graph::{self, DepNodeIndex};\n use rustc::hir;\n-use rustc::hir::def::{self, CtorKind, CtorOf, DefKind, Res};\n+use rustc::hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::hir::exports::Export;\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc::middle::cstore::{CrateSource, ExternCrate};\n@@ -930,7 +931,7 @@ impl<'a, 'tcx> CrateMetadata {\n     /// Iterates over each child of the given item.\n     fn each_child_of_item<F>(&self, id: DefIndex, mut callback: F, sess: &Session)\n     where\n-        F: FnMut(def::Export<hir::HirId>),\n+        F: FnMut(Export<hir::HirId>),\n     {\n         if let Some(proc_macros_ids) = self.root.proc_macro_data.map(|d| d.decode(self)) {\n             /* If we are loading as a proc macro, we want to return the view of this crate\n@@ -944,12 +945,7 @@ impl<'a, 'tcx> CrateMetadata {\n                         self.local_def_id(def_index),\n                     );\n                     let ident = Ident::from_str(raw_macro.name());\n-                    callback(def::Export {\n-                        ident: ident,\n-                        res: res,\n-                        vis: ty::Visibility::Public,\n-                        span: DUMMY_SP,\n-                    });\n+                    callback(Export { ident, res, vis: ty::Visibility::Public, span: DUMMY_SP });\n                 }\n             }\n             return;\n@@ -989,7 +985,7 @@ impl<'a, 'tcx> CrateMetadata {\n                             .unwrap_or(Lazy::empty());\n                         for child_index in child_children.decode((self, sess)) {\n                             if let Some(kind) = self.def_kind(child_index) {\n-                                callback(def::Export {\n+                                callback(Export {\n                                     res: Res::Def(kind, self.local_def_id(child_index)),\n                                     ident: Ident::with_dummy_span(self.item_name(child_index)),\n                                     vis: self.get_visibility(child_index),\n@@ -1019,7 +1015,7 @@ impl<'a, 'tcx> CrateMetadata {\n                     let vis = self.get_visibility(child_index);\n                     let def_id = self.local_def_id(child_index);\n                     let res = Res::Def(kind, def_id);\n-                    callback(def::Export { res, ident, vis, span });\n+                    callback(Export { res, ident, vis, span });\n                     // For non-re-export structs and variants add their constructors to children.\n                     // Re-export lists automatically contain constructors when necessary.\n                     match kind {\n@@ -1029,7 +1025,7 @@ impl<'a, 'tcx> CrateMetadata {\n                                 let ctor_res =\n                                     Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);\n                                 let vis = self.get_visibility(ctor_def_id.index);\n-                                callback(def::Export { res: ctor_res, vis, ident, span });\n+                                callback(Export { res: ctor_res, vis, ident, span });\n                             }\n                         }\n                         DefKind::Variant => {\n@@ -1053,7 +1049,7 @@ impl<'a, 'tcx> CrateMetadata {\n                                     vis = ty::Visibility::Restricted(crate_def_id);\n                                 }\n                             }\n-                            callback(def::Export { res: ctor_res, ident, vis, span });\n+                            callback(Export { res: ctor_res, ident, vis, span });\n                         }\n                         _ => {}\n                     }"}, {"sha": "5d5fcf406898714c6b74cb61841b3977b325b4b9", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=1f7b4e9a59ccb3e5d819900f45de81882e959c72", "patch": "@@ -5,8 +5,8 @@ use crate::native_libs;\n use crate::rmeta::{self, encoder};\n \n use rustc::hir;\n-use rustc::hir::def;\n use rustc::hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::hir::exports::Export;\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::hir::map::{DefKey, DefPath, DefPathHash};\n use rustc::middle::cstore::{CrateSource, CrateStore, DepKind, EncodedMetadata, NativeLibraryKind};\n@@ -342,29 +342,28 @@ pub fn provide(providers: &mut Providers<'_>) {\n             // (restrict scope of mutable-borrow of `visible_parent_map`)\n             {\n                 let visible_parent_map = &mut visible_parent_map;\n-                let mut add_child = |bfs_queue: &mut VecDeque<_>,\n-                                     child: &def::Export<hir::HirId>,\n-                                     parent: DefId| {\n-                    if child.vis != ty::Visibility::Public {\n-                        return;\n-                    }\n+                let mut add_child =\n+                    |bfs_queue: &mut VecDeque<_>, child: &Export<hir::HirId>, parent: DefId| {\n+                        if child.vis != ty::Visibility::Public {\n+                            return;\n+                        }\n \n-                    if let Some(child) = child.res.opt_def_id() {\n-                        match visible_parent_map.entry(child) {\n-                            Entry::Occupied(mut entry) => {\n-                                // If `child` is defined in crate `cnum`, ensure\n-                                // that it is mapped to a parent in `cnum`.\n-                                if child.krate == cnum && entry.get().krate != cnum {\n+                        if let Some(child) = child.res.opt_def_id() {\n+                            match visible_parent_map.entry(child) {\n+                                Entry::Occupied(mut entry) => {\n+                                    // If `child` is defined in crate `cnum`, ensure\n+                                    // that it is mapped to a parent in `cnum`.\n+                                    if child.krate == cnum && entry.get().krate != cnum {\n+                                        entry.insert(parent);\n+                                    }\n+                                }\n+                                Entry::Vacant(entry) => {\n                                     entry.insert(parent);\n+                                    bfs_queue.push_back(child);\n                                 }\n                             }\n-                            Entry::Vacant(entry) => {\n-                                entry.insert(parent);\n-                                bfs_queue.push_back(child);\n-                            }\n                         }\n-                    }\n-                };\n+                    };\n \n                 while let Some(def) = bfs_queue.pop_front() {\n                     for child in tcx.item_children(def).iter() {\n@@ -410,7 +409,7 @@ impl CStore {\n         &self,\n         def_id: DefId,\n         sess: &Session,\n-    ) -> Vec<def::Export<hir::HirId>> {\n+    ) -> Vec<Export<hir::HirId>> {\n         let mut result = vec![];\n         self.get_crate_data(def_id.krate).each_child_of_item(\n             def_id.index,"}, {"sha": "4ef978c21e06db239eae590a373adb41eec8f0be", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=1f7b4e9a59ccb3e5d819900f45de81882e959c72", "patch": "@@ -2,8 +2,9 @@ use decoder::Metadata;\n use table::{Table, TableBuilder};\n \n use rustc::hir;\n-use rustc::hir::def::{self, CtorKind};\n+use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{DefId, DefIndex};\n+use rustc::hir::exports::Export;\n use rustc::middle::cstore::{DepKind, ForeignModule, LinkagePreference, NativeLibrary};\n use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc::middle::lang_items;\n@@ -317,7 +318,7 @@ struct RenderedConst(String);\n \n #[derive(RustcEncodable, RustcDecodable)]\n struct ModData {\n-    reexports: Lazy<[def::Export<hir::HirId>]>,\n+    reexports: Lazy<[Export<hir::HirId>]>,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]"}, {"sha": "0ed4aab6b3e2173ab36c5e6d872765d154d53412", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=1f7b4e9a59ccb3e5d819900f45de81882e959c72", "patch": "@@ -19,6 +19,7 @@ use crate::{Module, ModuleData, ModuleKind, NameBinding, NameBindingKind, Segmen\n use rustc::bug;\n use rustc::hir::def::{self, *};\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::hir::exports::Export;\n use rustc::middle::cstore::CrateStore;\n use rustc::ty;\n use rustc_metadata::creader::LoadedMacro;"}, {"sha": "cc35b7748ef44510c475dfe82b307fa78128c816", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=1f7b4e9a59ccb3e5d819900f45de81882e959c72", "patch": "@@ -13,8 +13,9 @@ use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBindin\n \n use errors::{pluralize, Applicability};\n \n-use rustc::hir::def::{self, Export, PartialRes};\n+use rustc::hir::def::{self, PartialRes};\n use rustc::hir::def_id::DefId;\n+use rustc::hir::exports::Export;\n use rustc::lint::builtin::BuiltinLintDiagnostics;\n use rustc::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n use rustc::session::DiagnosticMessageId;"}, {"sha": "72e0dc32c21036fe1fae228b20c47d0f6117d90f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7b4e9a59ccb3e5d819900f45de81882e959c72/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1f7b4e9a59ccb3e5d819900f45de81882e959c72", "patch": "@@ -22,8 +22,9 @@ use Determinacy::*;\n \n use errors::{Applicability, DiagnosticBuilder};\n use rustc::hir::def::Namespace::*;\n-use rustc::hir::def::{self, CtorKind, CtorOf, DefKind, ExportMap, NonMacroAttrKind, PartialRes};\n+use rustc::hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n use rustc::hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::hir::exports::ExportMap;\n use rustc::hir::map::Definitions;\n use rustc::hir::{Bool, Char, Float, Int, PrimTy, Str, Uint};\n use rustc::hir::{GlobMap, TraitMap};"}]}