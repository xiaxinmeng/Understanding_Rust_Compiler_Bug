{"sha": "d57383855eb56dc530deb18f0ab8ce39ac71a6ae", "node_id": "C_kwDOAAsO6NoAKGQ1NzM4Mzg1NWViNTZkYzUzMGRlYjE4ZjBhYjhjZTM5YWM3MWE2YWU", "commit": {"author": {"name": "Mu001999", "email": "mu001999@outlook.com", "date": "2023-05-19T15:11:02Z"}, "committer": {"name": "Mu001999", "email": "mu001999@outlook.com", "date": "2023-05-19T15:11:02Z"}, "message": "Avoid redundant to_string", "tree": {"sha": "638c3395b6a6516bb373a2af0379464137ee5350", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/638c3395b6a6516bb373a2af0379464137ee5350"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d57383855eb56dc530deb18f0ab8ce39ac71a6ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d57383855eb56dc530deb18f0ab8ce39ac71a6ae", "html_url": "https://github.com/rust-lang/rust/commit/d57383855eb56dc530deb18f0ab8ce39ac71a6ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d57383855eb56dc530deb18f0ab8ce39ac71a6ae/comments", "author": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9528a28f2629c9ba34808a80c35cf03466334d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9528a28f2629c9ba34808a80c35cf03466334d4", "html_url": "https://github.com/rust-lang/rust/commit/a9528a28f2629c9ba34808a80c35cf03466334d4"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "17364509844db802d6baf24764314c3a6f8a1f34", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d57383855eb56dc530deb18f0ab8ce39ac71a6ae/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d57383855eb56dc530deb18f0ab8ce39ac71a6ae/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=d57383855eb56dc530deb18f0ab8ce39ac71a6ae", "patch": "@@ -288,8 +288,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mode = no_match_data.mode;\n         let tcx = self.tcx;\n         let rcvr_ty = self.resolve_vars_if_possible(rcvr_ty);\n-        let (mut ty_str, ty_file) = tcx.short_ty_string(rcvr_ty);\n-        let mut short_ty_str = with_forced_trimmed_paths!(rcvr_ty.to_string());\n+        let ((mut ty_str, ty_file), short_ty_str) = if trait_missing_method\n+            && let ty::Dynamic(predicates, _, _) = rcvr_ty.kind() {\n+                ((predicates.to_string(), None), with_forced_trimmed_paths!(predicates.to_string()))\n+            } else {\n+                (tcx.short_ty_string(rcvr_ty), with_forced_trimmed_paths!(rcvr_ty.to_string()))\n+            };\n         let is_method = mode == Mode::MethodCall;\n         let unsatisfied_predicates = &no_match_data.unsatisfied_predicates;\n         let similar_candidate = no_match_data.similar_candidate;\n@@ -328,11 +332,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         span = item_name.span;\n \n-        if trait_missing_method && let ty::Dynamic(predicates, _, _) = rcvr_ty.kind() {\n-            ty_str = predicates.to_string();\n-            short_ty_str = with_forced_trimmed_paths!(predicates.to_string());\n-        }\n-\n         // Don't show generic arguments when the method can't be found in any implementation (#81576).\n         let mut ty_str_reported = ty_str.clone();\n         if let ty::Adt(_, generics) = rcvr_ty.kind() {"}]}