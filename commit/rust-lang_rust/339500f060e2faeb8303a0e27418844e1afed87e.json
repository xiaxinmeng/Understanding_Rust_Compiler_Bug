{"sha": "339500f060e2faeb8303a0e27418844e1afed87e", "node_id": "C_kwDOAAsO6NoAKDMzOTUwMGYwNjBlMmZhZWI4MzAzYTBlMjc0MTg4NDRlMWFmZWQ4N2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-18T13:13:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-18T13:13:21Z"}, "message": "Auto merge of #2493 - RalfJung:android, r=RalfJung\n\nadd very basic Android support\n\nThis is just enough to print to stdout. I won't push this any further, but having these basics should hopefully make it easier for others to do so.\n\nAlso slightly improve threading support on FreeBSD while we are at it.\n\nPartially based on https://github.com/rust-lang/miri/pull/2011.\nFixes https://github.com/rust-lang/miri/issues/2010.", "tree": {"sha": "1b276c194e977ff7c6a3ec8872c036d4889d3e67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b276c194e977ff7c6a3ec8872c036d4889d3e67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/339500f060e2faeb8303a0e27418844e1afed87e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/339500f060e2faeb8303a0e27418844e1afed87e", "html_url": "https://github.com/rust-lang/rust/commit/339500f060e2faeb8303a0e27418844e1afed87e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/339500f060e2faeb8303a0e27418844e1afed87e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af033ea428bd469c027d771a9c9fa34485ac495c", "url": "https://api.github.com/repos/rust-lang/rust/commits/af033ea428bd469c027d771a9c9fa34485ac495c", "html_url": "https://github.com/rust-lang/rust/commit/af033ea428bd469c027d771a9c9fa34485ac495c"}, {"sha": "5e10f14584f20f8b0b7716916a0d08e836696ef4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e10f14584f20f8b0b7716916a0d08e836696ef4", "html_url": "https://github.com/rust-lang/rust/commit/5e10f14584f20f8b0b7716916a0d08e836696ef4"}], "stats": {"total": 183, "additions": 160, "deletions": 23}, "files": [{"sha": "d70feec66f26843128c1beee7021dba4ffae1bf0", "filename": "ci.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/339500f060e2faeb8303a0e27418844e1afed87e/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/339500f060e2faeb8303a0e27418844e1afed87e/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=339500f060e2faeb8303a0e27418844e1afed87e", "patch": "@@ -83,7 +83,8 @@ case $HOST_TARGET in\n     MIRI_TEST_TARGET=i686-unknown-linux-gnu run_tests\n     MIRI_TEST_TARGET=aarch64-apple-darwin run_tests\n     MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n-    MIRI_TEST_TARGET=x86_64-unknown-freebsd run_tests_minimal hello integer vec data_race env/var\n+    MIRI_TEST_TARGET=x86_64-unknown-freebsd run_tests_minimal hello integer vec panic/panic concurrency/simple atomic data_race env/var\n+    MIRI_TEST_TARGET=aarch64-linux-android run_tests_minimal hello integer vec panic/panic\n     MIRI_TEST_TARGET=thumbv7em-none-eabihf MIRI_NO_STD=1 run_tests_minimal no_std # no_std embedded architecture\n     ;;\n   x86_64-apple-darwin)"}, {"sha": "45dbb37c86acc47bcbf216671be330ef072ce56d", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/339500f060e2faeb8303a0e27418844e1afed87e/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/339500f060e2faeb8303a0e27418844e1afed87e/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=339500f060e2faeb8303a0e27418844e1afed87e", "patch": "@@ -1 +1 @@\n-8556e6620e4866526b3cea767ad8c20ae877a569\n+9c20b2a8cc7588decb6de25ac6a7912dcef24d65"}, {"sha": "d63bf97ad51ddfcb57a4d42933ddc393d7129b03", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=339500f060e2faeb8303a0e27418844e1afed87e", "patch": "@@ -954,5 +954,5 @@ pub fn get_local_crates(tcx: TyCtxt<'_>) -> Vec<CrateNum> {\n /// Helper function used inside the shims of foreign functions to check that\n /// `target_os` is a supported UNIX OS.\n pub fn target_os_is_unix(target_os: &str) -> bool {\n-    matches!(target_os, \"linux\" | \"macos\" | \"freebsd\")\n+    matches!(target_os, \"linux\" | \"macos\" | \"freebsd\" | \"android\")\n }"}, {"sha": "2c30ee06c0573d5aa3c2e991b1a87a460c15b7b5", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/339500f060e2faeb8303a0e27418844e1afed87e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339500f060e2faeb8303a0e27418844e1afed87e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=339500f060e2faeb8303a0e27418844e1afed87e", "patch": "@@ -24,6 +24,7 @@\n     clippy::derive_hash_xor_eq,\n     clippy::too_many_arguments,\n     clippy::type_complexity,\n+    clippy::single_element_loop,\n     // We are not implementing queries here so it's fine\n     rustc::potential_query_instability\n )]"}, {"sha": "d45f5de381f35a825a39441ce34fb88f6e783964", "filename": "src/machine.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=339500f060e2faeb8303a0e27418844e1afed87e", "patch": "@@ -232,13 +232,15 @@ pub struct PrimitiveLayouts<'tcx> {\n     pub u32: TyAndLayout<'tcx>,\n     pub usize: TyAndLayout<'tcx>,\n     pub bool: TyAndLayout<'tcx>,\n-    pub mut_raw_ptr: TyAndLayout<'tcx>,\n+    pub mut_raw_ptr: TyAndLayout<'tcx>,   // *mut ()\n+    pub const_raw_ptr: TyAndLayout<'tcx>, // *const ()\n }\n \n impl<'mir, 'tcx: 'mir> PrimitiveLayouts<'tcx> {\n     fn new(layout_cx: LayoutCx<'tcx, TyCtxt<'tcx>>) -> Result<Self, LayoutError<'tcx>> {\n         let tcx = layout_cx.tcx;\n         let mut_raw_ptr = tcx.mk_ptr(TypeAndMut { ty: tcx.types.unit, mutbl: Mutability::Mut });\n+        let const_raw_ptr = tcx.mk_ptr(TypeAndMut { ty: tcx.types.unit, mutbl: Mutability::Not });\n         Ok(Self {\n             unit: layout_cx.layout_of(tcx.mk_unit())?,\n             i8: layout_cx.layout_of(tcx.types.i8)?,\n@@ -251,6 +253,7 @@ impl<'mir, 'tcx: 'mir> PrimitiveLayouts<'tcx> {\n             usize: layout_cx.layout_of(tcx.types.usize)?,\n             bool: layout_cx.layout_of(tcx.types.bool)?,\n             mut_raw_ptr: layout_cx.layout_of(mut_raw_ptr)?,\n+            const_raw_ptr: layout_cx.layout_of(const_raw_ptr)?,\n         })\n     }\n }\n@@ -431,6 +434,17 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n         this.machine.extern_statics.try_insert(Symbol::intern(name), ptr).unwrap();\n     }\n \n+    fn alloc_extern_static(\n+        this: &mut MiriEvalContext<'mir, 'tcx>,\n+        name: &str,\n+        val: ImmTy<'tcx, Provenance>,\n+    ) -> InterpResult<'tcx> {\n+        let place = this.allocate(val.layout, MiriMemoryKind::ExternStatic.into())?;\n+        this.write_immediate(*val, &place.into())?;\n+        Self::add_extern_static(this, name, place.ptr);\n+        Ok(())\n+    }\n+\n     /// Sets up the \"extern statics\" for this machine.\n     fn init_extern_statics(this: &mut MiriEvalContext<'mir, 'tcx>) -> InterpResult<'tcx> {\n         match this.tcx.sess.target.os.as_ref() {\n@@ -447,10 +461,8 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n                 // syscall that we do support).\n                 for name in &[\"__cxa_thread_atexit_impl\", \"getrandom\", \"statx\", \"__clock_gettime64\"]\n                 {\n-                    let layout = this.machine.layouts.usize;\n-                    let place = this.allocate(layout, MiriMemoryKind::ExternStatic.into())?;\n-                    this.write_scalar(Scalar::from_machine_usize(0, this), &place.into())?;\n-                    Self::add_extern_static(this, name, place.ptr);\n+                    let val = ImmTy::from_int(0, this.machine.layouts.usize);\n+                    Self::alloc_extern_static(this, name, val)?;\n                 }\n             }\n             \"freebsd\" => {\n@@ -461,13 +473,27 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n                     this.machine.env_vars.environ.unwrap().ptr,\n                 );\n             }\n+            \"android\" => {\n+                // \"signal\"\n+                let layout = this.machine.layouts.const_raw_ptr;\n+                let dlsym = Dlsym::from_str(\"signal\".as_bytes(), &this.tcx.sess.target.os)?\n+                    .expect(\"`signal` must be an actual dlsym on android\");\n+                let ptr = this.create_fn_alloc_ptr(FnVal::Other(dlsym));\n+                let val = ImmTy::from_scalar(Scalar::from_pointer(ptr, this), layout);\n+                Self::alloc_extern_static(this, \"signal\", val)?;\n+                // A couple zero-initialized pointer-sized extern statics.\n+                // Most of them are for weak symbols, which we all set to null (indicating that the\n+                // symbol is not supported, and triggering fallback code.)\n+                for name in &[\"bsd_signal\"] {\n+                    let val = ImmTy::from_int(0, this.machine.layouts.usize);\n+                    Self::alloc_extern_static(this, name, val)?;\n+                }\n+            }\n             \"windows\" => {\n                 // \"_tls_used\"\n                 // This is some obscure hack that is part of the Windows TLS story. It's a `u8`.\n-                let layout = this.machine.layouts.u8;\n-                let place = this.allocate(layout, MiriMemoryKind::ExternStatic.into())?;\n-                this.write_scalar(Scalar::from_u8(0), &place.into())?;\n-                Self::add_extern_static(this, \"_tls_used\", place.ptr);\n+                let val = ImmTy::from_int(0, this.machine.layouts.u8);\n+                Self::alloc_extern_static(this, \"_tls_used\", val)?;\n             }\n             _ => {} // No \"extern statics\" supported on this target\n         }"}, {"sha": "28941a3de4eccab98f559e41578768739bbc80d0", "filename": "src/shims/unix/android/dlsym.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Fandroid%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Fandroid%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fandroid%2Fdlsym.rs?ref=339500f060e2faeb8303a0e27418844e1afed87e", "patch": "@@ -0,0 +1,54 @@\n+use rustc_middle::mir;\n+\n+use crate::helpers::check_arg_count;\n+use crate::*;\n+\n+#[derive(Debug, Copy, Clone)]\n+#[allow(non_camel_case_types)]\n+pub enum Dlsym {\n+    signal,\n+}\n+\n+impl Dlsym {\n+    // Returns an error for unsupported symbols, and None if this symbol\n+    // should become a NULL pointer (pretend it does not exist).\n+    pub fn from_str<'tcx>(name: &str) -> InterpResult<'tcx, Option<Dlsym>> {\n+        Ok(match name {\n+            \"signal\" => Some(Dlsym::signal),\n+            \"android_set_abort_message\" => None,\n+            _ => throw_unsup_format!(\"unsupported Android dlsym: {}\", name),\n+        })\n+    }\n+}\n+\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn call_dlsym(\n+        &mut self,\n+        dlsym: Dlsym,\n+        args: &[OpTy<'tcx, Provenance>],\n+        dest: &PlaceTy<'tcx, Provenance>,\n+        ret: Option<mir::BasicBlock>,\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        let ret = ret.expect(\"we don't support any diverging dlsym\");\n+        assert!(this.tcx.sess.target.os == \"android\");\n+\n+        match dlsym {\n+            Dlsym::signal => {\n+                if !this.frame_in_std() {\n+                    throw_unsup_format!(\n+                        \"`signal` support is crude and just enough for libstd to work\"\n+                    );\n+                }\n+\n+                let &[ref _sig, ref _func] = check_arg_count(args)?;\n+                this.write_null(dest)?;\n+            }\n+        }\n+\n+        log::trace!(\"{:?}\", this.dump_place(**dest));\n+        this.go_to_block(ret);\n+        Ok(())\n+    }\n+}"}, {"sha": "9c12736887fa02ee6f0f93b410acecf2c1c1f9c8", "filename": "src/shims/unix/android/foreign_items.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Fandroid%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Fandroid%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fandroid%2Fforeign_items.rs?ref=339500f060e2faeb8303a0e27418844e1afed87e", "patch": "@@ -0,0 +1,26 @@\n+use rustc_span::Symbol;\n+use rustc_target::spec::abi::Abi;\n+\n+use crate::*;\n+use shims::foreign_items::EmulateByNameResult;\n+\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn emulate_foreign_item_by_name(\n+        &mut self,\n+        link_name: Symbol,\n+        _abi: Abi,\n+        _args: &[OpTy<'tcx, Provenance>],\n+        _dest: &PlaceTy<'tcx, Provenance>,\n+    ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n+        let _this = self.eval_context_mut();\n+        #[allow(clippy::match_single_binding)]\n+        match link_name.as_str() {\n+            _ => return Ok(EmulateByNameResult::NotSupported),\n+        }\n+\n+        #[allow(unreachable_code)]\n+        Ok(EmulateByNameResult::NeedsJumping)\n+    }\n+}"}, {"sha": "434f5f30b5a5689206655f20e623d99789556bb6", "filename": "src/shims/unix/android/mod.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Fandroid%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Fandroid%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fandroid%2Fmod.rs?ref=339500f060e2faeb8303a0e27418844e1afed87e", "patch": "@@ -0,0 +1,2 @@\n+pub mod dlsym;\n+pub mod foreign_items;"}, {"sha": "fee128229179248b5646fc0e78ab2e3d0daae73c", "filename": "src/shims/unix/dlsym.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fdlsym.rs?ref=339500f060e2faeb8303a0e27418844e1afed87e", "patch": "@@ -2,26 +2,29 @@ use rustc_middle::mir;\n use rustc_target::spec::abi::Abi;\n \n use crate::*;\n+use shims::unix::android::dlsym as android;\n use shims::unix::freebsd::dlsym as freebsd;\n use shims::unix::linux::dlsym as linux;\n use shims::unix::macos::dlsym as macos;\n \n #[derive(Debug, Copy, Clone)]\n pub enum Dlsym {\n+    Android(android::Dlsym),\n+    FreeBsd(freebsd::Dlsym),\n     Linux(linux::Dlsym),\n     MacOs(macos::Dlsym),\n-    FreeBsd(freebsd::Dlsym),\n }\n \n impl Dlsym {\n     // Returns an error for unsupported symbols, and None if this symbol\n     // should become a NULL pointer (pretend it does not exist).\n     pub fn from_str<'tcx>(name: &str, target_os: &str) -> InterpResult<'tcx, Option<Dlsym>> {\n         Ok(match target_os {\n+            \"android\" => android::Dlsym::from_str(name)?.map(Dlsym::Android),\n+            \"freebsd\" => freebsd::Dlsym::from_str(name)?.map(Dlsym::FreeBsd),\n             \"linux\" => linux::Dlsym::from_str(name)?.map(Dlsym::Linux),\n             \"macos\" => macos::Dlsym::from_str(name)?.map(Dlsym::MacOs),\n-            \"freebsd\" => freebsd::Dlsym::from_str(name)?.map(Dlsym::FreeBsd),\n-            _ => unreachable!(),\n+            _ => panic!(\"unsupported Unix OS {target_os}\"),\n         })\n     }\n }\n@@ -41,10 +44,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.check_abi(abi, Abi::C { unwind: false })?;\n \n         match dlsym {\n-            Dlsym::Linux(dlsym) => linux::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret),\n-            Dlsym::MacOs(dlsym) => macos::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret),\n+            Dlsym::Android(dlsym) =>\n+                android::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret),\n             Dlsym::FreeBsd(dlsym) =>\n                 freebsd::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret),\n+            Dlsym::Linux(dlsym) => linux::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret),\n+            Dlsym::MacOs(dlsym) => macos::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret),\n         }\n     }\n }"}, {"sha": "58b0997c6c0172c1087e082d4d948a90ca85440e", "filename": "src/shims/unix/foreign_items.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fforeign_items.rs?ref=339500f060e2faeb8303a0e27418844e1afed87e", "patch": "@@ -24,6 +24,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n \n+        #[rustfmt::skip]\n         match link_name.as_str() {\n             // Environment related shims\n             \"getenv\" => {\n@@ -588,11 +589,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Platform-specific shims\n             _ => {\n-                match this.tcx.sess.target.os.as_ref() {\n+                let target_os = &*this.tcx.sess.target.os;\n+                match target_os {\n+                    \"android\" => return shims::unix::android::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n+                    \"freebsd\" => return shims::unix::freebsd::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n                     \"linux\" => return shims::unix::linux::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n                     \"macos\" => return shims::unix::macos::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n-                    \"freebsd\" => return shims::unix::freebsd::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n-                    _ => unreachable!(),\n+                    _ => panic!(\"unsupported Unix OS {target_os}\"),\n                 }\n             }\n         };"}, {"sha": "ebc1998f1b57933bd22a4e68e27dd08fc8e754ad", "filename": "src/shims/unix/freebsd/dlsym.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Ffreebsd%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Ffreebsd%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffreebsd%2Fdlsym.rs?ref=339500f060e2faeb8303a0e27418844e1afed87e", "patch": "@@ -28,5 +28,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         assert!(this.tcx.sess.target.os == \"freebsd\");\n \n         match dlsym {}\n+\n+        //trace!(\"{:?}\", this.dump_place(**dest));\n+        //this.go_to_block(ret);\n+        //Ok(())\n     }\n }"}, {"sha": "92e76ff09dcb582ea7a0ba4438197399ed4ad4a0", "filename": "src/shims/unix/freebsd/foreign_items.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs?ref=339500f060e2faeb8303a0e27418844e1afed87e", "patch": "@@ -3,6 +3,7 @@ use rustc_target::spec::abi::Abi;\n \n use crate::*;\n use shims::foreign_items::EmulateByNameResult;\n+use shims::unix::thread::EvalContextExt as _;\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n \n@@ -16,12 +17,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n         match link_name.as_str() {\n-            // Linux's `pthread_getattr_np` equivalent\n+            // Threading\n             \"pthread_attr_get_np\" if this.frame_in_std() => {\n                 let [_thread, _attr] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.write_null(dest)?;\n             }\n+            \"pthread_set_name_np\" => {\n+                let [thread, name] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let res = this.pthread_setname_np(\n+                    this.read_scalar(thread)?.check_init()?,\n+                    this.read_scalar(name)?.check_init()?,\n+                )?;\n+                this.write_scalar(res, dest)?;\n+            }\n \n             // errno\n             \"__error\" => {"}, {"sha": "f5cf1e0071a9da5b6862b3bf05bfa4837dc6b6a4", "filename": "src/shims/unix/linux/dlsym.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Flinux%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Flinux%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fdlsym.rs?ref=339500f060e2faeb8303a0e27418844e1afed87e", "patch": "@@ -32,5 +32,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         assert!(this.tcx.sess.target.os == \"linux\");\n \n         match dlsym {}\n+\n+        //trace!(\"{:?}\", this.dump_place(**dest));\n+        //this.go_to_block(ret);\n+        //Ok(())\n     }\n }"}, {"sha": "6fefb054f3c046c5b1fb202cd3febc3a7d7a05fa", "filename": "src/shims/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmod.rs?ref=339500f060e2faeb8303a0e27418844e1afed87e", "patch": "@@ -5,6 +5,7 @@ mod fs;\n mod sync;\n mod thread;\n \n+mod android;\n mod freebsd;\n mod linux;\n mod macos;"}, {"sha": "e14c2a86b09cc08314226a738b9168cf74ebf513", "filename": "src/shims/windows/dlsym.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339500f060e2faeb8303a0e27418844e1afed87e/src%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fdlsym.rs?ref=339500f060e2faeb8303a0e27418844e1afed87e", "patch": "@@ -45,7 +45,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             Dlsym::NtWriteFile => {\n                 if !this.frame_in_std() {\n                     throw_unsup_format!(\n-                        \"NtWriteFile support is crude and just enough for stdout to work\"\n+                        \"`NtWriteFile` support is crude and just enough for stdout to work\"\n                     );\n                 }\n \n@@ -68,7 +68,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 if byte_offset != 0 {\n                     throw_unsup_format!(\n-                        \"NtWriteFile ByteOffset paremeter is non-null, which is unsupported\"\n+                        \"`NtWriteFile` `ByteOffset` paremeter is non-null, which is unsupported\"\n                     );\n                 }\n "}]}