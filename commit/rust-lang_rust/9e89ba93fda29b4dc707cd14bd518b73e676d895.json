{"sha": "9e89ba93fda29b4dc707cd14bd518b73e676d895", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllODliYTkzZmRhMjliNGRjNzA3Y2QxNGJkNTE4YjczZTY3NmQ4OTU=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-05-31T13:09:58Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-06-01T17:09:58Z"}, "message": "Add doc for checking if type defines certain method", "tree": {"sha": "1d62e6ca8a5dbdb80c6ae6e29fc5469b0207d226", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d62e6ca8a5dbdb80c6ae6e29fc5469b0207d226"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e89ba93fda29b4dc707cd14bd518b73e676d895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e89ba93fda29b4dc707cd14bd518b73e676d895", "html_url": "https://github.com/rust-lang/rust/commit/9e89ba93fda29b4dc707cd14bd518b73e676d895", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e89ba93fda29b4dc707cd14bd518b73e676d895/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bee0608fadc1d10f525171d0986ada74024beb83", "url": "https://api.github.com/repos/rust-lang/rust/commits/bee0608fadc1d10f525171d0986ada74024beb83", "html_url": "https://github.com/rust-lang/rust/commit/bee0608fadc1d10f525171d0986ada74024beb83"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "dbc434505947d4e39d05b8fcd753bb8e78cc76d2", "filename": "doc/common_tools_writing_lints.md", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9e89ba93fda29b4dc707cd14bd518b73e676d895/doc%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/9e89ba93fda29b4dc707cd14bd518b73e676d895/doc%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcommon_tools_writing_lints.md?ref=9e89ba93fda29b4dc707cd14bd518b73e676d895", "patch": "@@ -4,7 +4,9 @@ You may need following tooltips to catch up with common operations.\n \n - [Common tools for writing lints](#common-tools-for-writing-lints)\n   - [Retrieving the type of an expression](#retrieving-the-type-of-an-expression)\n+  - [Checking if an expression is calling a specific method](#checking-if-an-expr-is-calling-a-specific-method)\n   - [Checking if a type implements a specific trait](#checking-if-a-type-implements-a-specific-trait)\n+  - [Checking if a type defines a method](#checking-if-a-type-defines-a-method)\n   - [Dealing with macros](#dealing-with-macros)\n \n Useful Rustc dev guide links:\n@@ -49,6 +51,26 @@ Two noticeable items here:\n - `tables` is [`TypeckTables`][TypeckTables] and is created by type checking step, \n   it includes useful information such as types of expressions, ways to resolve methods and so on.\n \n+# Checking if an expr is calling a specific method\n+\n+Starting with an `expr`, you can check whether it is calling a specific method `some_method`:\n+\n+```rust\n+impl LateLintPass<'_, '_> for MyStructLint {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if_chain! {\n+            // Check our expr is calling a method\n+            if let hir::ExprKind::MethodCall(path, _, _args) = &expr.kind;\n+            // Check the name of this method is `some_method`\n+            if path.ident.name == sym!(some_method);\n+            then {\n+                // ...\n+            }\n+        }\n+    }\n+}\n+```\n+\n # Checking if a type implements a specific trait\n \n There are two ways to do this, depending if the target trait is part of lang items.\n@@ -83,6 +105,32 @@ A list of defined paths for Clippy can be found in [paths.rs][paths]\n \n We access lang items through the type context `tcx`. `tcx` is of type [`TyCtxt`][TyCtxt] and is defined in the `rustc_middle` crate.\n \n+# Checking if a type defines a specific method\n+\n+To check if our type defines a method called `some_method`:\n+\n+```rust\n+use crate::utils::{is_type_diagnostic_item, return_ty};\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MyTypeImpl {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx ImplItem<'_>) {\n+        if_chain! {\n+            // Check if item is a method/function\n+            if let ImplItemKind::Fn(ref signature, _) = impl_item.kind;\n+            // Check the method is named `some_method`\n+            if impl_item.ident.name == sym!(some_method);\n+            // We can also check it has a parameter `self`\n+            if signature.decl.implicit_self.has_implicit_self();\n+            // We can go further and even check if its return type is `String`\n+            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym!(string_type));\n+            then {\n+                // ...\n+            }\n+        }\n+    }\n+}\n+```\n+\n # Dealing with macros\n \n There are several helpers in Clippy's utils to deal with macros:"}]}