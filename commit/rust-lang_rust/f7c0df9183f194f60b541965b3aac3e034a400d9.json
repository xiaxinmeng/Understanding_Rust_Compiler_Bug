{"sha": "f7c0df9183f194f60b541965b3aac3e034a400d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YzBkZjkxODNmMTk0ZjYwYjU0MTk2NWIzYWFjM2UwMzRhNDAwZDk=", "commit": {"author": {"name": "Grzegorz", "email": "grzegorz.bartoszek@thaumatec.com", "date": "2019-02-10T20:23:04Z"}, "committer": {"name": "Grzegorz", "email": "grzegorz.bartoszek@thaumatec.com", "date": "2019-02-10T20:23:04Z"}, "message": "test formatting", "tree": {"sha": "0b3ebb3e493f89abfb54d159c781988f3067bffb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b3ebb3e493f89abfb54d159c781988f3067bffb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7c0df9183f194f60b541965b3aac3e034a400d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7c0df9183f194f60b541965b3aac3e034a400d9", "html_url": "https://github.com/rust-lang/rust/commit/f7c0df9183f194f60b541965b3aac3e034a400d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7c0df9183f194f60b541965b3aac3e034a400d9/comments", "author": null, "committer": null, "parents": [{"sha": "16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1", "html_url": "https://github.com/rust-lang/rust/commit/16881390e1f1d7cbf2737e0d78560d4eaa3bb8c1"}], "stats": {"total": 80, "additions": 44, "deletions": 36}, "files": [{"sha": "6eeb093eae992cd01d45328743aaed6bde79abab", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f7c0df9183f194f60b541965b3aac3e034a400d9/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7c0df9183f194f60b541965b3aac3e034a400d9/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=f7c0df9183f194f60b541965b3aac3e034a400d9", "patch": "@@ -28,7 +28,6 @@ fn main() {\n     // See #515\n     let a: Option<Box<::std::ops::Deref<Target = [i32]>>> =\n         Some(vec![1i32, 2]).map(|v| -> Box<::std::ops::Deref<Target = [i32]>> { Box::new(v) });\n-\n }\n \n trait TestTrait {\n@@ -37,48 +36,58 @@ trait TestTrait {\n }\n \n struct TestStruct<'a> {\n-    some_ref: &'a i32\n+    some_ref: &'a i32,\n }\n \n impl<'a> TestStruct<'a> {\n-    fn foo(self) -> bool { false }\n-    unsafe fn foo_unsafe(self) -> bool { true }\n+    fn foo(self) -> bool {\n+        false\n+    }\n+    unsafe fn foo_unsafe(self) -> bool {\n+        true\n+    }\n }\n \n impl<'a> TestTrait for TestStruct<'a> {\n-    fn trait_foo(self) -> bool { false }\n-    fn trait_foo_ref(&self) -> bool { false }\n+    fn trait_foo(self) -> bool {\n+        false\n+    }\n+    fn trait_foo_ref(&self) -> bool {\n+        false\n+    }\n }\n \n impl<'a> std::ops::Deref for TestStruct<'a> {\n     type Target = char;\n-    fn deref(&self) -> &char { &'a' }\n+    fn deref(&self) -> &char {\n+        &'a'\n+    }\n }\n \n fn test_redundant_closures_containing_method_calls() {\n     let i = 10;\n-    let e = Some(TestStruct{some_ref: &i}).map(|a| a.foo());\n-    let e = Some(TestStruct{some_ref: &i}).map(TestStruct::foo);\n-    let e = Some(TestStruct{some_ref: &i}).map(|a| a.trait_foo());\n-    let e = Some(TestStruct{some_ref: &i}).map(|a| a.trait_foo_ref());\n-    let e = Some(TestStruct{some_ref: &i}).map(TestTrait::trait_foo);\n-    let e = Some(&mut vec!(1,2,3)).map(|v| v.clear());\n-    let e = Some(&mut vec!(1,2,3)).map(std::vec::Vec::clear);\n+    let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo());\n+    let e = Some(TestStruct { some_ref: &i }).map(TestStruct::foo);\n+    let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo());\n+    let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo_ref());\n+    let e = Some(TestStruct { some_ref: &i }).map(TestTrait::trait_foo);\n+    let e = Some(&mut vec![1, 2, 3]).map(|v| v.clear());\n+    let e = Some(&mut vec![1, 2, 3]).map(std::vec::Vec::clear);\n     unsafe {\n-        let e = Some(TestStruct{some_ref: &i}).map(|a| a.foo_unsafe());\n+        let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo_unsafe());\n     }\n     let e = Some(\"str\").map(|s| s.to_string());\n     let e = Some(\"str\").map(str::to_string);\n     let e = Some('a').map(|s| s.to_uppercase());\n     let e = Some('a').map(char::to_uppercase);\n-    let e: std::vec::Vec<usize> = vec!('a','b','c').iter().map(|c| c.len_utf8()).collect();\n-    let e: std::vec::Vec<char> = vec!('a','b','c').iter().map(|c| c.to_ascii_uppercase()).collect();\n-    let e: std::vec::Vec<char> = vec!('a','b','c').iter().map(char::to_ascii_uppercase).collect();\n+    let e: std::vec::Vec<usize> = vec!['a', 'b', 'c'].iter().map(|c| c.len_utf8()).collect();\n+    let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n+    let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(char::to_ascii_uppercase).collect();\n     let p = Some(PathBuf::new());\n     let e = p.as_ref().and_then(|s| s.to_str());\n-    //let e = p.as_ref().and_then(std::path::Path::to_str);\n-    let c = Some(TestStruct{some_ref: &i}).as_ref().map(|c| c.to_ascii_uppercase());\n-    //let c = Some(TestStruct{some_ref: &i}).as_ref().map(char::to_ascii_uppercase);\n+    let c = Some(TestStruct { some_ref: &i })\n+        .as_ref()\n+        .map(|c| c.to_ascii_uppercase());\n }\n \n fn meta<F>(f: F)\n@@ -114,4 +123,3 @@ fn divergent(_: u8) -> ! {\n fn generic<T>(_: T) -> u8 {\n     0\n }\n-"}, {"sha": "5f56cd7912a7ba92018f8402303255533fa1e3a9", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f7c0df9183f194f60b541965b3aac3e034a400d9/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7c0df9183f194f60b541965b3aac3e034a400d9/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=f7c0df9183f194f60b541965b3aac3e034a400d9", "patch": "@@ -33,40 +33,40 @@ LL |     let e = Some(1u8).map(|a| generic(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `generic`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:60:48\n+  --> $DIR/eta.rs:69:51\n    |\n-LL |     let e = Some(TestStruct{some_ref: &i}).map(|a| a.foo());\n-   |                                                ^^^^^^^^^^^ help: remove closure as shown: `TestStruct::foo`\n+LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo());\n+   |                                                   ^^^^^^^^^^^ help: remove closure as shown: `TestStruct::foo`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:62:48\n+  --> $DIR/eta.rs:71:51\n    |\n-LL |     let e = Some(TestStruct{some_ref: &i}).map(|a| a.trait_foo());\n-   |                                                ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `TestTrait::trait_foo`\n+LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo());\n+   |                                                   ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `TestTrait::trait_foo`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:65:40\n+  --> $DIR/eta.rs:74:42\n    |\n-LL |     let e = Some(&mut vec!(1,2,3)).map(|v| v.clear());\n-   |                                        ^^^^^^^^^^^^^ help: remove closure as shown: `std::vec::Vec::clear`\n+LL |     let e = Some(&mut vec![1, 2, 3]).map(|v| v.clear());\n+   |                                          ^^^^^^^^^^^^^ help: remove closure as shown: `std::vec::Vec::clear`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:70:29\n+  --> $DIR/eta.rs:79:29\n    |\n LL |     let e = Some(\"str\").map(|s| s.to_string());\n    |                             ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `std::string::ToString::to_string`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:72:27\n+  --> $DIR/eta.rs:81:27\n    |\n LL |     let e = Some('a').map(|s| s.to_uppercase());\n    |                           ^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_uppercase`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:75:63\n+  --> $DIR/eta.rs:84:65\n    |\n-LL |     let e: std::vec::Vec<char> = vec!('a','b','c').iter().map(|c| c.to_ascii_uppercase()).collect();\n-   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_ascii_uppercase`\n+LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n+   |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_ascii_uppercase`\n \n error: aborting due to 11 previous errors\n "}]}