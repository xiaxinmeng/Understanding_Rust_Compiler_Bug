{"sha": "7fd62bb2b57e71899748bdb9fed24b5fc5474a67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZDYyYmIyYjU3ZTcxODk5NzQ4YmRiOWZlZDI0YjVmYzU0NzRhNjc=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-23T00:57:35Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-28T17:02:49Z"}, "message": "Made matching machine types equal to float, int, uint (fixes #1376)", "tree": {"sha": "b4b9a27116265524e7b993ba8c77a59c10dff910", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4b9a27116265524e7b993ba8c77a59c10dff910"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fd62bb2b57e71899748bdb9fed24b5fc5474a67", "comment_count": 3, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fd62bb2b57e71899748bdb9fed24b5fc5474a67", "html_url": "https://github.com/rust-lang/rust/commit/7fd62bb2b57e71899748bdb9fed24b5fc5474a67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fd62bb2b57e71899748bdb9fed24b5fc5474a67/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9b9b3e5705bc6cad760538441a5b3654dd55e58", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b9b3e5705bc6cad760538441a5b3654dd55e58", "html_url": "https://github.com/rust-lang/rust/commit/b9b9b3e5705bc6cad760538441a5b3654dd55e58"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "f8e079dc8004c319331afc1c6cfb2e8d486e65ec", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7fd62bb2b57e71899748bdb9fed24b5fc5474a67/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fd62bb2b57e71899748bdb9fed24b5fc5474a67/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=7fd62bb2b57e71899748bdb9fed24b5fc5474a67", "patch": "@@ -626,6 +626,25 @@ pure fn struct(cx: ctxt, typ: t) -> sty {\n     }\n }\n \n+// Returns struact(cx, typ) but replaces all occurences of platform\n+// dependent primitive types with their machine type equivalent\n+pure fn mach_struct(cx: ctxt, cfg: @session::config, typ: t) -> sty {\n+    alt interner::get(*cx.ts, typ).struct {\n+      ty_named(t, _) { mach_struct(cx, cfg, t) }\n+      s { mach_sty(cfg, s) }\n+    }\n+}\n+\n+// Converts s to its machine type equivalent\n+pure fn mach_sty(cfg: @session::config, s: sty) -> sty {\n+    alt s {\n+      ty_int(ast::ty_i.) { ty_int(cfg.int_type) }\n+      ty_uint(ast::ty_u.) { ty_uint(cfg.uint_type) }\n+      ty_float(ast::ty_f.) { ty_float(cfg.float_type) }\n+      s { s }\n+    }\n+}\n+\n pure fn ty_name(cx: ctxt, typ: t) -> option::t<@str> {\n     alt interner::get(*cx.ts, typ).struct {\n       ty_named(_, n) { some(n) }\n@@ -1752,7 +1771,9 @@ mod unify {\n \n     // Simple structural type comparison.\n     fn struct_cmp(cx: @ctxt, expected: t, actual: t) -> result {\n-        if struct(cx.tcx, expected) == struct(cx.tcx, actual) {\n+        let tcx = cx.tcx;\n+        let cfg = tcx.sess.get_targ_cfg();\n+        if mach_struct(tcx, cfg, expected) == mach_struct(tcx, cfg, actual) {\n             ret ures_ok(expected);\n         }\n         ret ures_err(terr_mismatch);"}]}