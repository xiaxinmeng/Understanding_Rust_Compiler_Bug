{"sha": "cc2936b93ebeadceb1dfd0b3aa6194d95a5cb5a6", "node_id": "C_kwDOAAsO6NoAKGNjMjkzNmI5M2ViZWFkY2ViMWRmZDBiM2FhNjE5NGQ5NWE1Y2I1YTY", "commit": {"author": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T22:10:35Z"}, "committer": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T22:10:35Z"}, "message": "Use size field", "tree": {"sha": "15593a922240a82878625316cd2c2678916dadf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15593a922240a82878625316cd2c2678916dadf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc2936b93ebeadceb1dfd0b3aa6194d95a5cb5a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2936b93ebeadceb1dfd0b3aa6194d95a5cb5a6", "html_url": "https://github.com/rust-lang/rust/commit/cc2936b93ebeadceb1dfd0b3aa6194d95a5cb5a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc2936b93ebeadceb1dfd0b3aa6194d95a5cb5a6/comments", "author": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "510050ecdc5d7eede55533246e713fe847038af8", "url": "https://api.github.com/repos/rust-lang/rust/commits/510050ecdc5d7eede55533246e713fe847038af8", "html_url": "https://github.com/rust-lang/rust/commit/510050ecdc5d7eede55533246e713fe847038af8"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "b29717e0a7b152e3022770bcdb830ea0e4f75f74", "filename": "lib/line-index/src/lib.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cc2936b93ebeadceb1dfd0b3aa6194d95a5cb5a6/lib%2Fline-index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2936b93ebeadceb1dfd0b3aa6194d95a5cb5a6/lib%2Fline-index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fline-index%2Fsrc%2Flib.rs?ref=cc2936b93ebeadceb1dfd0b3aa6194d95a5cb5a6", "patch": "@@ -84,11 +84,11 @@ impl WideChar {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct LineIndex {\n     /// Offset the beginning of each line (except the first, which always has offset 0).\n-    ///\n-    /// Invariant: Always non-empty and the last element holds the length of the original text.\n     newlines: Box<[TextSize]>,\n     /// List of non-ASCII characters on each line.\n     line_wide_chars: IntMap<u32, Box<[WideChar]>>,\n+    /// The size of the entire text.\n+    size: TextSize,\n }\n \n impl LineIndex {\n@@ -127,14 +127,16 @@ impl LineIndex {\n             cur_col += c_len;\n         }\n \n-        newlines.push(TextSize::of(text));\n-\n         // Save any wide characters seen in the last line\n         if !wide_chars.is_empty() {\n             line_wide_chars.insert(line, wide_chars.into_boxed_slice());\n         }\n \n-        LineIndex { newlines: newlines.into_boxed_slice(), line_wide_chars }\n+        LineIndex {\n+            newlines: newlines.into_boxed_slice(),\n+            line_wide_chars,\n+            size: TextSize::of(text),\n+        }\n     }\n \n     /// Transforms the `TextSize` into a `LineCol`.\n@@ -150,7 +152,7 @@ impl LineIndex {\n     /// e.g. if it extends past the end of the text or points to the middle of a multi-byte\n     /// character.\n     pub fn try_line_col(&self, offset: TextSize) -> Option<LineCol> {\n-        if offset > *self.newlines.last().unwrap() {\n+        if offset > self.size {\n             return None;\n         }\n         let line = self.newlines.partition_point(|&it| it <= offset);"}]}