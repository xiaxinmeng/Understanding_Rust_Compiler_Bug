{"sha": "819c4f2f0890baea055d80d3f68a776328d1f5fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxOWM0ZjJmMDg5MGJhZWEwNTVkODBkM2Y2OGE3NzYzMjhkMWY1ZmI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T01:01:05Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T02:01:39Z"}, "message": "typeck/expr.rs: move some check_return_expr here.", "tree": {"sha": "25fe704c0d7fc2a6e6b9a4ef9bb94cfd57eec43a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25fe704c0d7fc2a6e6b9a4ef9bb94cfd57eec43a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/819c4f2f0890baea055d80d3f68a776328d1f5fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/819c4f2f0890baea055d80d3f68a776328d1f5fb", "html_url": "https://github.com/rust-lang/rust/commit/819c4f2f0890baea055d80d3f68a776328d1f5fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/819c4f2f0890baea055d80d3f68a776328d1f5fb/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18edf3ed08b5d7827cdd440801d70d1d5703d8c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/18edf3ed08b5d7827cdd440801d70d1d5703d8c8", "html_url": "https://github.com/rust-lang/rust/commit/18edf3ed08b5d7827cdd440801d70d1d5703d8c8"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "7aa47a1a3a1fb60a7ca366121fc25dc61f949122", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/819c4f2f0890baea055d80d3f68a776328d1f5fb/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/819c4f2f0890baea055d80d3f68a776328d1f5fb/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=819c4f2f0890baea055d80d3f68a776328d1f5fb", "patch": "@@ -633,6 +633,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.tcx.types.never\n     }\n \n+    pub(super) fn check_return_expr(&self, return_expr: &'tcx hir::Expr) {\n+        let ret_coercion =\n+            self.ret_coercion\n+                .as_ref()\n+                .unwrap_or_else(|| span_bug!(return_expr.span,\n+                                             \"check_return_expr called outside fn body\"));\n+\n+        let ret_ty = ret_coercion.borrow().expected_ty();\n+        let return_expr_ty = self.check_expr_with_hint(return_expr, ret_ty.clone());\n+        ret_coercion.borrow_mut()\n+                    .coerce(self,\n+                            &self.cause(return_expr.span,\n+                                        ObligationCauseCode::ReturnType(return_expr.hir_id)),\n+                            return_expr,\n+                            return_expr_ty);\n+    }\n+\n     /// Type check assignment expression `expr` of form `lhs = rhs`.\n     /// The expected type is `()` and is passsed to the function for the purposes of diagnostics.\n     fn check_expr_assign("}, {"sha": "0cc86744cc9ebf05ce9b82a3921030a780dba0f2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/819c4f2f0890baea055d80d3f68a776328d1f5fb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/819c4f2f0890baea055d80d3f68a776328d1f5fb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=819c4f2f0890baea055d80d3f68a776328d1f5fb", "patch": "@@ -3312,23 +3312,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                          expected)\n     }\n \n-    fn check_return_expr(&self, return_expr: &'tcx hir::Expr) {\n-        let ret_coercion =\n-            self.ret_coercion\n-                .as_ref()\n-                .unwrap_or_else(|| span_bug!(return_expr.span,\n-                                             \"check_return_expr called outside fn body\"));\n-\n-        let ret_ty = ret_coercion.borrow().expected_ty();\n-        let return_expr_ty = self.check_expr_with_hint(return_expr, ret_ty.clone());\n-        ret_coercion.borrow_mut()\n-                    .coerce(self,\n-                            &self.cause(return_expr.span,\n-                                        ObligationCauseCode::ReturnType(return_expr.hir_id)),\n-                            return_expr,\n-                            return_expr_ty);\n-    }\n-\n     // Check field access expressions\n     fn check_field(\n         &self,"}]}