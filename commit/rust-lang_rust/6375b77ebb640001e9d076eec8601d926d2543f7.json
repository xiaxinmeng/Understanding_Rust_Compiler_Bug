{"sha": "6375b77ebb640001e9d076eec8601d926d2543f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNzViNzdlYmI2NDAwMDFlOWQwNzZlZWM4NjAxZDkyNmQyNTQzZjc=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-27T04:37:35Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-28T15:43:35Z"}, "message": "Add Span to ast::WhereClause", "tree": {"sha": "7d481a420e01fa0b6170635ca1c8a72fbaa91fdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d481a420e01fa0b6170635ca1c8a72fbaa91fdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6375b77ebb640001e9d076eec8601d926d2543f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6375b77ebb640001e9d076eec8601d926d2543f7", "html_url": "https://github.com/rust-lang/rust/commit/6375b77ebb640001e9d076eec8601d926d2543f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6375b77ebb640001e9d076eec8601d926d2543f7/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a42ff482367afa83b6cdb1fbfad2ee69f836f97", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a42ff482367afa83b6cdb1fbfad2ee69f836f97", "html_url": "https://github.com/rust-lang/rust/commit/4a42ff482367afa83b6cdb1fbfad2ee69f836f97"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "ff9266fb0cbaee7ee4e8663eb913aa9c57b410dd", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6375b77ebb640001e9d076eec8601d926d2543f7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6375b77ebb640001e9d076eec8601d926d2543f7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=6375b77ebb640001e9d076eec8601d926d2543f7", "patch": "@@ -321,6 +321,7 @@ impl Default for Generics {\n             where_clause: WhereClause {\n                 id: DUMMY_NODE_ID,\n                 predicates: Vec::new(),\n+                span: DUMMY_SP,\n             },\n             span: DUMMY_SP,\n         }\n@@ -332,6 +333,7 @@ impl Default for Generics {\n pub struct WhereClause {\n     pub id: NodeId,\n     pub predicates: Vec<WherePredicate>,\n+    pub span: Span,\n }\n \n /// A single predicate in a `where` clause"}, {"sha": "714f02969ec4ba780a68db7fa3ab7209b3231e49", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6375b77ebb640001e9d076eec8601d926d2543f7/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6375b77ebb640001e9d076eec8601d926d2543f7/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=6375b77ebb640001e9d076eec8601d926d2543f7", "patch": "@@ -736,14 +736,15 @@ pub fn noop_fold_generics<T: Folder>(Generics {ty_params, lifetimes, where_claus\n }\n \n pub fn noop_fold_where_clause<T: Folder>(\n-                              WhereClause {id, predicates}: WhereClause,\n+                              WhereClause {id, predicates, span}: WhereClause,\n                               fld: &mut T)\n                               -> WhereClause {\n     WhereClause {\n         id: fld.new_id(id),\n         predicates: predicates.move_map(|predicate| {\n             fld.fold_where_predicate(predicate)\n-        })\n+        }),\n+        span: span,\n     }\n }\n "}, {"sha": "3c44ca7f332247740ad6eda2a5b9ef44fd12a077", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6375b77ebb640001e9d076eec8601d926d2543f7/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6375b77ebb640001e9d076eec8601d926d2543f7/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=6375b77ebb640001e9d076eec8601d926d2543f7", "patch": "@@ -885,6 +885,7 @@ mod tests {\n                                         where_clause: ast::WhereClause {\n                                             id: ast::DUMMY_NODE_ID,\n                                             predicates: Vec::new(),\n+                                            span: syntax_pos::DUMMY_SP,\n                                         },\n                                         span: syntax_pos::DUMMY_SP,\n                                     },"}, {"sha": "9fb4f4813e9500fccb6dc93febcd29db9460f20b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6375b77ebb640001e9d076eec8601d926d2543f7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6375b77ebb640001e9d076eec8601d926d2543f7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6375b77ebb640001e9d076eec8601d926d2543f7", "patch": "@@ -4373,6 +4373,7 @@ impl<'a> Parser<'a> {\n                 where_clause: WhereClause {\n                     id: ast::DUMMY_NODE_ID,\n                     predicates: Vec::new(),\n+                    span: syntax_pos::DUMMY_SP,\n                 },\n                 span: span_lo.to(self.prev_span),\n             })\n@@ -4440,11 +4441,13 @@ impl<'a> Parser<'a> {\n         let mut where_clause = WhereClause {\n             id: ast::DUMMY_NODE_ID,\n             predicates: Vec::new(),\n+            span: syntax_pos::DUMMY_SP,\n         };\n \n         if !self.eat_keyword(keywords::Where) {\n             return Ok(where_clause);\n         }\n+        let lo = self.prev_span;\n \n         // This is a temporary future proofing.\n         //\n@@ -4522,6 +4525,7 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n+        where_clause.span = lo.to(self.prev_span);\n         Ok(where_clause)\n     }\n "}, {"sha": "e9d11e73837aa7d32c0f9c21fad8207e6741b616", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6375b77ebb640001e9d076eec8601d926d2543f7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6375b77ebb640001e9d076eec8601d926d2543f7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=6375b77ebb640001e9d076eec8601d926d2543f7", "patch": "@@ -1041,6 +1041,7 @@ impl<'a> State<'a> {\n                     where_clause: ast::WhereClause {\n                         id: ast::DUMMY_NODE_ID,\n                         predicates: Vec::new(),\n+                        span: syntax_pos::DUMMY_SP,\n                     },\n                     span: syntax_pos::DUMMY_SP,\n                 };\n@@ -2983,6 +2984,7 @@ impl<'a> State<'a> {\n             where_clause: ast::WhereClause {\n                 id: ast::DUMMY_NODE_ID,\n                 predicates: Vec::new(),\n+                span: syntax_pos::DUMMY_SP,\n             },\n             span: syntax_pos::DUMMY_SP,\n         };"}, {"sha": "f5ac1743920c11874eabf7164b7458840d868ec2", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6375b77ebb640001e9d076eec8601d926d2543f7/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6375b77ebb640001e9d076eec8601d926d2543f7/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=6375b77ebb640001e9d076eec8601d926d2543f7", "patch": "@@ -216,6 +216,7 @@ fn mk_generics(lifetimes: Vec<ast::LifetimeDef>, ty_params: Vec<ast::TyParam>, s\n         where_clause: ast::WhereClause {\n             id: ast::DUMMY_NODE_ID,\n             predicates: Vec::new(),\n+            span: span,\n         },\n         span: span,\n     }"}]}