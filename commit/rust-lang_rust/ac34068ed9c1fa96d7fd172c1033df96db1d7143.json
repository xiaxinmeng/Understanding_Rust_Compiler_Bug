{"sha": "ac34068ed9c1fa96d7fd172c1033df96db1d7143", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMzQwNjhlZDljMWZhOTZkN2ZkMTcyYzEwMzNkZjk2ZGIxZDcxNDM=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-09-24T13:26:39Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:34:26Z"}, "message": "Generalized base:maybe_create_entry_wrapper", "tree": {"sha": "ac59e74c6ef1de98682866ae2cb7c68ae3dcf831", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac59e74c6ef1de98682866ae2cb7c68ae3dcf831"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac34068ed9c1fa96d7fd172c1033df96db1d7143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac34068ed9c1fa96d7fd172c1033df96db1d7143", "html_url": "https://github.com/rust-lang/rust/commit/ac34068ed9c1fa96d7fd172c1033df96db1d7143", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac34068ed9c1fa96d7fd172c1033df96db1d7143/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b14f3e54906b9e0e8906affd406923bb8fc12b1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b14f3e54906b9e0e8906affd406923bb8fc12b1e", "html_url": "https://github.com/rust-lang/rust/commit/b14f3e54906b9e0e8906affd406923bb8fc12b1e"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "0648f0d7802c7c1d7e36ac30c7f0eea7e293a852", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ac34068ed9c1fa96d7fd172c1033df96db1d7143/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac34068ed9c1fa96d7fd172c1033df96db1d7143/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=ac34068ed9c1fa96d7fd172c1033df96db1d7143", "patch": "@@ -30,7 +30,7 @@ use super::CachedModuleCodegen;\n \n use abi;\n use back::write::{self, OngoingCodegen};\n-use llvm::{self, get_param};\n+use llvm;\n use metadata;\n use rustc::dep_graph::cgu_reuse_tracker::CguReuse;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -50,7 +50,6 @@ use rustc::session::Session;\n use rustc_incremental;\n use allocator;\n use mir::place::PlaceRef;\n-use attributes;\n use builder::{Builder, MemFlags};\n use callee;\n use rustc_mir::monomorphize::item::DefPathBasedNames;\n@@ -495,48 +494,50 @@ pub fn set_link_section(llval: &Value, attrs: &CodegenFnAttrs) {\n \n /// Create the `main` function which will initialize the rust runtime and call\n /// users main function.\n-fn maybe_create_entry_wrapper(cx: &CodegenCx) {\n+fn maybe_create_entry_wrapper<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+    cx: &'a Bx::CodegenCx\n+) {\n     let (main_def_id, span) = match *cx.sess().entry_fn.borrow() {\n         Some((id, span, _)) => {\n-            (cx.tcx.hir.local_def_id(id), span)\n+            (cx.tcx().hir.local_def_id(id), span)\n         }\n         None => return,\n     };\n \n-    let instance = Instance::mono(cx.tcx, main_def_id);\n+    let instance = Instance::mono(cx.tcx(), main_def_id);\n \n-    if !cx.codegen_unit.contains_item(&MonoItem::Fn(instance)) {\n+    if !cx.codegen_unit().contains_item(&MonoItem::Fn(instance)) {\n         // We want to create the wrapper in the same codegen unit as Rust's main\n         // function.\n         return;\n     }\n \n-    let main_llfn = callee::get_fn(cx, instance);\n+    let main_llfn = cx.get_fn(instance);\n \n     let et = cx.sess().entry_fn.get().map(|e| e.2);\n     match et {\n-        Some(EntryFnType::Main) => create_entry_fn(cx, span, main_llfn, main_def_id, true),\n-        Some(EntryFnType::Start) => create_entry_fn(cx, span, main_llfn, main_def_id, false),\n+        Some(EntryFnType::Main) => create_entry_fn::<Bx>(cx, span, main_llfn, main_def_id, true),\n+        Some(EntryFnType::Start) => create_entry_fn::<Bx>(cx, span, main_llfn, main_def_id, false),\n         None => {}    // Do nothing.\n     }\n \n-    fn create_entry_fn(\n-        cx: &CodegenCx<'ll, '_>,\n+    fn create_entry_fn<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+        cx: &'a Bx::CodegenCx,\n         sp: Span,\n-        rust_main: &'ll Value,\n+        rust_main: Bx::Value,\n         rust_main_def_id: DefId,\n         use_start_lang_item: bool,\n     ) {\n         let llfty =\n             cx.type_func(&[cx.type_int(), cx.type_ptr_to(cx.type_i8p())], cx.type_int());\n \n-        let main_ret_ty = cx.tcx.fn_sig(rust_main_def_id).output();\n+        let main_ret_ty = cx.tcx().fn_sig(rust_main_def_id).output();\n         // Given that `main()` has no arguments,\n         // then its return type cannot have\n         // late-bound regions, since late-bound\n         // regions must appear in the argument\n         // listing.\n-        let main_ret_ty = cx.tcx.erase_regions(\n+        let main_ret_ty = cx.tcx().erase_regions(\n             &main_ret_ty.no_bound_vars().unwrap(),\n         );\n \n@@ -551,25 +552,25 @@ fn maybe_create_entry_wrapper(cx: &CodegenCx) {\n         let llfn = cx.declare_cfn(\"main\", llfty);\n \n         // `main` should respect same config for frame pointer elimination as rest of code\n-        attributes::set_frame_pointer_elimination(cx, llfn);\n-        attributes::apply_target_cpu_attr(cx, llfn);\n+        cx.set_frame_pointer_elimination(llfn);\n+        cx.apply_target_cpu_attr(llfn);\n \n-        let bx = Builder::new_block(cx, llfn, \"top\");\n+        let bx = Bx::new_block(&cx, llfn, \"top\");\n \n-        debuginfo::gdb::insert_reference_to_gdb_debug_scripts_section_global(&bx);\n+        bx.insert_reference_to_gdb_debug_scripts_section_global();\n \n         // Params from native main() used as args for rust start function\n-        let param_argc = get_param(llfn, 0);\n-        let param_argv = get_param(llfn, 1);\n-        let arg_argc = bx.intcast(param_argc, cx.isize_ty, true);\n+        let param_argc = cx.get_param(llfn, 0);\n+        let param_argv = cx.get_param(llfn, 1);\n+        let arg_argc = bx.intcast(param_argc, cx.type_isize(), true);\n         let arg_argv = param_argv;\n \n         let (start_fn, args) = if use_start_lang_item {\n-            let start_def_id = cx.tcx.require_lang_item(StartFnLangItem);\n+            let start_def_id = cx.tcx().require_lang_item(StartFnLangItem);\n             let start_fn = callee::resolve_and_get_fn(\n                 cx,\n                 start_def_id,\n-                cx.tcx.intern_substs(&[main_ret_ty.into()]),\n+                cx.tcx().intern_substs(&[main_ret_ty.into()]),\n             );\n             (start_fn, vec![bx.pointercast(rust_main, cx.type_ptr_to(cx.type_i8p())),\n                             arg_argc, arg_argv])\n@@ -1112,7 +1113,7 @@ fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             // If this codegen unit contains the main function, also create the\n             // wrapper here\n-            maybe_create_entry_wrapper(&cx);\n+            maybe_create_entry_wrapper::<Builder<&Value>>(&cx);\n \n             // Run replace-all-uses-with for statics that need it\n             for &(old_g, new_g) in cx.statics_to_rauw.borrow().iter() {"}, {"sha": "39955c07c09eaa81d32a28c3e72b31f327587cd0", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac34068ed9c1fa96d7fd172c1033df96db1d7143/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac34068ed9c1fa96d7fd172c1033df96db1d7143/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=ac34068ed9c1fa96d7fd172c1033df96db1d7143", "patch": "@@ -425,6 +425,14 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn codegen_unit(&self) -> &Arc<CodegenUnit<'tcx>> {\n         &self.codegen_unit\n     }\n+\n+    fn set_frame_pointer_elimination(&self, llfn: &'ll Value) {\n+        attributes::set_frame_pointer_elimination(self, llfn)\n+    }\n+\n+    fn apply_target_cpu_attr(&self, llfn: &'ll Value) {\n+        attributes::apply_target_cpu_attr(self, llfn)\n+    }\n }\n \n impl IntrinsicDeclarationMethods<'tcx> for CodegenCx<'b, 'tcx> {"}, {"sha": "81a889b513456fa6e8ec9878f292674baaf4d003", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac34068ed9c1fa96d7fd172c1033df96db1d7143/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac34068ed9c1fa96d7fd172c1033df96db1d7143/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=ac34068ed9c1fa96d7fd172c1033df96db1d7143", "patch": "@@ -279,6 +279,9 @@ impl DebugInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n     ) {\n         set_source_location(debug_context, &self, scope, span)\n     }\n+    fn insert_reference_to_gdb_debug_scripts_section_global(&self) {\n+        gdb::insert_reference_to_gdb_debug_scripts_section_global(self)\n+    }\n }\n \n impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {"}, {"sha": "773c035939c7da87086369563c0a818302c1b6e0", "filename": "src/librustc_codegen_llvm/interfaces/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac34068ed9c1fa96d7fd172c1033df96db1d7143/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac34068ed9c1fa96d7fd172c1033df96db1d7143/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdebuginfo.rs?ref=ac34068ed9c1fa96d7fd172c1033df96db1d7143", "patch": "@@ -58,4 +58,5 @@ pub trait DebugInfoBuilderMethods<'tcx>: HasCodegen<'tcx> {\n         scope: Option<Self::DIScope>,\n         span: Span,\n     );\n+    fn insert_reference_to_gdb_debug_scripts_section_global(&self);\n }"}, {"sha": "7c5108500f13318bd2d15857b0a914346d6dfbe1", "filename": "src/librustc_codegen_llvm/interfaces/misc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac34068ed9c1fa96d7fd172c1033df96db1d7143/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac34068ed9c1fa96d7fd172c1033df96db1d7143/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmisc.rs?ref=ac34068ed9c1fa96d7fd172c1033df96db1d7143", "patch": "@@ -31,4 +31,6 @@ pub trait MiscMethods<'tcx>: Backend<'tcx> {\n     fn sess(&self) -> &Session;\n     fn stats(&self) -> &RefCell<Stats>;\n     fn codegen_unit(&self) -> &Arc<CodegenUnit<'tcx>>;\n+    fn set_frame_pointer_elimination(&self, llfn: Self::Value);\n+    fn apply_target_cpu_attr(&self, llfn: Self::Value);\n }"}]}