{"sha": "6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "node_id": "C_kwDOAAsO6NoAKDZkODUwZDkzNmJhZTk3NDViNjhiMDhjNmUxZDYyYTFiMWNjNmJjODQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-30T05:10:28Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-05T04:20:25Z"}, "message": "Make `hir::PathSegment::res` non-optional.", "tree": {"sha": "3865708cbf3c8b65fc779965ac3db424ce267792", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3865708cbf3c8b65fc779965ac3db424ce267792"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "html_url": "https://github.com/rust-lang/rust/commit/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee244bf1961cec6279bd4a91f9bcdc1339f74c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee244bf1961cec6279bd4a91f9bcdc1339f74c97", "html_url": "https://github.com/rust-lang/rust/commit/ee244bf1961cec6279bd4a91f9bcdc1339f74c97"}], "stats": {"total": 141, "additions": 65, "deletions": 76}, "files": [{"sha": "a41d4b01e0e33fb21843e5cab7edcc65725d39de", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -1776,12 +1776,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         binding: hir::HirId,\n         attrs: AttrVec,\n     ) -> hir::Expr<'hir> {\n+        let res = Res::Local(binding);\n         let expr_path = hir::ExprKind::Path(hir::QPath::Resolved(\n             None,\n             self.arena.alloc(hir::Path {\n                 span: self.lower_span(span),\n-                res: Res::Local(binding),\n-                segments: arena_vec![self; hir::PathSegment::from_ident(ident)],\n+                res,\n+                segments: arena_vec![self; hir::PathSegment::from_ident(ident, res)],\n             }),\n         ));\n "}, {"sha": "e3f02968d4d7ea5c7456a63519487022e681cd79", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -1431,10 +1431,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             GenericParamKind::Const { .. } => None,\n             GenericParamKind::Type { .. } => {\n                 let def_id = self.local_def_id(id).to_def_id();\n+                let res = Res::Def(DefKind::TyParam, def_id);\n                 let ty_path = self.arena.alloc(hir::Path {\n                     span: param_span,\n-                    res: Res::Def(DefKind::TyParam, def_id),\n-                    segments: self.arena.alloc_from_iter([hir::PathSegment::from_ident(ident)]),\n+                    res,\n+                    segments: self\n+                        .arena\n+                        .alloc_from_iter([hir::PathSegment::from_ident(ident, res)]),\n                 });\n                 let ty_id = self.next_id();\n                 let bounded_ty ="}, {"sha": "bc183c6e31350b773e5f3147b547a69567fc1c2a", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -1267,7 +1267,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     self.arena.alloc(hir::Path {\n                         res,\n                         segments: arena_vec![self; hir::PathSegment::from_ident(\n-                            Ident::with_dummy_span(kw::SelfUpper)\n+                            Ident::with_dummy_span(kw::SelfUpper),\n+                            res\n                         )],\n                         span: self.lower_span(t.span),\n                     }),\n@@ -2193,12 +2194,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             hir::PredicateOrigin::ImplTrait,\n         );\n \n+        let res = Res::Def(DefKind::TyParam, def_id.to_def_id());\n         let ty = hir::TyKind::Path(hir::QPath::Resolved(\n             None,\n             self.arena.alloc(hir::Path {\n                 span: self.lower_span(span),\n-                res: Res::Def(DefKind::TyParam, def_id.to_def_id()),\n-                segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident))],\n+                res,\n+                segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident), res)],\n             }),\n         ));\n "}, {"sha": "61c32816e17182899fe2cbdc3637092d706933d8", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -254,14 +254,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     lower_sub(self),\n                 )\n             }\n-            Some(res) => hir::PatKind::Path(hir::QPath::Resolved(\n-                None,\n-                self.arena.alloc(hir::Path {\n-                    span: self.lower_span(ident.span),\n-                    res: self.lower_res(res),\n-                    segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident))],\n-                }),\n-            )),\n+            Some(res) => {\n+                let res = self.lower_res(res);\n+                hir::PatKind::Path(hir::QPath::Resolved(\n+                    None,\n+                    self.arena.alloc(hir::Path {\n+                        span: self.lower_span(ident.span),\n+                        res,\n+                        segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident), res)],\n+                    }),\n+            ))\n+            }\n         }\n     }\n "}, {"sha": "6ec8bcbc1e571891dd0e58b3d3c2e405b493011a", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -259,7 +259,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::PathSegment {\n             ident: self.lower_ident(segment.ident),\n             hir_id: Some(id),\n-            res: Some(self.lower_res(res)),\n+            res: self.lower_res(res),\n             infer_args,\n             args: if generic_args.is_empty() && generic_args.span.is_empty() {\n                 None"}, {"sha": "bd53e7670a6e9b2ceec7b6411246e9990a8b81d8", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -202,13 +202,10 @@ impl Path<'_> {\n pub struct PathSegment<'hir> {\n     /// The identifier portion of this path segment.\n     pub ident: Ident,\n-    // `id` and `res` are optional. We currently only use these in save-analysis,\n-    // any path segments without these will not have save-analysis info and\n-    // therefore will not have 'jump to def' in IDEs, but otherwise will not be\n-    // affected. (In general, we don't bother to get the defs for synthesized\n-    // segments, only for segments which have come from the AST).\n+\n     pub hir_id: Option<HirId>,\n-    pub res: Option<Res>,\n+\n+    pub res: Res,\n \n     /// Type/lifetime parameters attached to this path. They come in\n     /// two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that\n@@ -226,12 +223,12 @@ pub struct PathSegment<'hir> {\n \n impl<'hir> PathSegment<'hir> {\n     /// Converts an identifier to the corresponding segment.\n-    pub fn from_ident(ident: Ident) -> PathSegment<'hir> {\n-        PathSegment { ident, hir_id: None, res: None, infer_args: true, args: None }\n+    pub fn from_ident(ident: Ident, res: Res) -> PathSegment<'hir> {\n+        PathSegment { ident, hir_id: None, res, infer_args: true, args: None }\n     }\n \n     pub fn invalid() -> Self {\n-        Self::from_ident(Ident::empty())\n+        Self::from_ident(Ident::empty(), Res::Err)\n     }\n \n     pub fn args(&self) -> &GenericArgs<'hir> {"}, {"sha": "a20bcd93045fe9d5af649416ae279133ca67bf55", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -957,7 +957,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n         path.segments\n             .iter()\n             .filter_map(move |segment| {\n-                let res = segment.res?;\n+                let res = segment.res;\n                 let generics_def_id = tcx.res_generics_def_id(res)?;\n                 let generics = tcx.generics_of(generics_def_id);\n                 if generics.has_impl_trait() {"}, {"sha": "a6a39d062d51dadc9a0f2e173af676f563e4bdb7", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -154,16 +154,11 @@ impl<'tcx> Visitor<'tcx> for TypeParamSpanVisitor<'tcx> {\n             }\n             hir::TyKind::Path(hir::QPath::Resolved(None, path)) => match &path.segments {\n                 [segment]\n-                    if segment\n-                        .res\n-                        .map(|res| {\n-                            matches!(\n-                                res,\n-                                Res::SelfTy { trait_: _, alias_to: _ }\n-                                    | Res::Def(hir::def::DefKind::TyParam, _)\n-                            )\n-                        })\n-                        .unwrap_or(false) =>\n+                    if matches!(\n+                        segment.res,\n+                        Res::SelfTy { trait_: _, alias_to: _ }\n+                            | Res::Def(hir::def::DefKind::TyParam, _)\n+                    ) =>\n                 {\n                     self.types.push(path.span);\n                 }"}, {"sha": "4a41b345d3baa7dc179c6c44fc35e7233259ffcd", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -118,8 +118,7 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n         _: rustc_hir::HirId,\n     ) {\n         if let Some(segment) = path.segments.iter().nth_back(1)\n-        && let Some(res) = &segment.res\n-        && lint_ty_kind_usage(cx, res)\n+        && lint_ty_kind_usage(cx, &segment.res)\n         {\n             let span = path.span.with_hi(\n                 segment.args.map_or(segment.ident.span, |a| a.span_ext).hi()"}, {"sha": "a24b191aebfc17db2de53d27992b0ce5fc2e82c5", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -832,7 +832,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                 // added, such as `core::intrinsics::transmute`\n                 let parents = path.segments.iter().rev().skip(1);\n                 for path_segment in parents {\n-                    if let Some(def_id) = path_segment.res.as_ref().and_then(Res::opt_def_id) {\n+                    if let Some(def_id) = path_segment.res.opt_def_id() {\n                         // use `None` for id to prevent deprecation check\n                         self.tcx.check_stability_allow_unstable(\n                             def_id,"}, {"sha": "769d3243d584ac861a9b4636f5e327fd7ee946e4", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -912,7 +912,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     _,\n                 )\n                 | Res::SelfTy { .. } => {\n-                    self.dump_path_segment_ref(id, &hir::PathSegment::from_ident(ident));\n+                    self.dump_path_segment_ref(id, &hir::PathSegment::from_ident(ident, Res::Err));\n                 }\n                 def => {\n                     error!(\"unexpected definition kind when processing collected idents: {:?}\", def)"}, {"sha": "4b110b824e00ab1bf506fe8a1620c06aa7b5bcc0", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -596,13 +596,14 @@ impl<'tcx> SaveContext<'tcx> {\n             Node::TraitRef(tr) => tr.path.res,\n \n             Node::Item(&hir::Item { kind: hir::ItemKind::Use(path, _), .. }) => path.res,\n-            Node::PathSegment(seg) => match seg.res {\n-                Some(res) if res != Res::Err => res,\n-                _ => {\n+            Node::PathSegment(seg) => {\n+                if seg.res != Res::Err {\n+                    seg.res\n+                } else {\n                     let parent_node = self.tcx.hir().get_parent_node(hir_id);\n                     self.get_path_res(parent_node)\n                 }\n-            },\n+            }\n \n             Node::Expr(&hir::Expr { kind: hir::ExprKind::Struct(ref qpath, ..), .. }) => {\n                 self.typeck_results().qpath_res(qpath, hir_id)"}, {"sha": "9b8bb9e36201c4b72dc9f857660a37cee7bcf64b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -2210,12 +2210,12 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         && let [\n                             ..,\n                             trait_path_segment @ hir::PathSegment {\n-                                res: Some(rustc_hir::def::Res::Def(rustc_hir::def::DefKind::Trait, trait_id)),\n+                                res: rustc_hir::def::Res::Def(rustc_hir::def::DefKind::Trait, trait_id),\n                                 ..\n                             },\n                             hir::PathSegment {\n                                 ident: assoc_item_name,\n-                                res: Some(rustc_hir::def::Res::Def(_, item_id)),\n+                                res: rustc_hir::def::Res::Def(_, item_id),\n                                 ..\n                             }\n                         ] = path.segments"}, {"sha": "a49244d16d04d55b9b779eff28ed788d07f7dd16", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -1114,7 +1114,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let item_segment = hir::PathSegment {\n                 ident,\n                 hir_id: Some(binding.hir_id),\n-                res: None,\n+                res: Res::Err,\n                 args: Some(binding.gen_args),\n                 infer_args: false,\n             };\n@@ -1845,7 +1845,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                     [.., hir::PathSegment {\n                                         ident,\n                                         args,\n-                                        res: Some(Res::Def(DefKind::Enum, _)),\n+                                        res: Res::Def(DefKind::Enum, _),\n                                         ..\n                                     }, _] => (\n                                         // We need to include the `::` in `Type::Variant::<Args>`\n@@ -2127,24 +2127,22 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let types_and_spans: Vec<_> = segments\n                 .clone()\n                 .flat_map(|segment| {\n-                    segment.res.and_then(|res| {\n-                        if segment.args().args.is_empty() {\n-                            None\n-                        } else {\n-                            Some((\n-                            match res {\n-                                Res::PrimTy(ty) => format!(\"{} `{}`\", res.descr(), ty.name()),\n+                    if segment.args().args.is_empty() {\n+                        None\n+                    } else {\n+                        Some((\n+                            match segment.res {\n+                                Res::PrimTy(ty) => format!(\"{} `{}`\", segment.res.descr(), ty.name()),\n                                 Res::Def(_, def_id)\n                                 if let Some(name) = self.tcx().opt_item_name(def_id) => {\n-                                    format!(\"{} `{name}`\", res.descr())\n+                                    format!(\"{} `{name}`\", segment.res.descr())\n                                 }\n                                 Res::Err => \"this type\".to_string(),\n-                                _ => res.descr().to_string(),\n+                                _ => segment.res.descr().to_string(),\n                             },\n                             segment.ident.span,\n                         ))\n-                        }\n-                    })\n+                    }\n                 })\n                 .collect();\n             let this_type = match &types_and_spans[..] {"}, {"sha": "46135caa9bce83fdf46aaaaab4f7030ee74db78a", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -610,12 +610,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n         fn visit_ty(&mut self, arg: &'tcx hir::Ty<'tcx>) {\n             match arg.kind {\n                 hir::TyKind::Path(hir::QPath::Resolved(None, path)) => match &path.segments {\n-                    [\n-                        PathSegment {\n-                            res: Some(Res::SelfTy { trait_: _, alias_to: impl_ref }),\n-                            ..\n-                        },\n-                    ] => {\n+                    [PathSegment { res: Res::SelfTy { trait_: _, alias_to: impl_ref }, .. }] => {\n                         let impl_ty_name =\n                             impl_ref.map(|(def_id, _)| self.tcx.def_path_str(def_id));\n                         self.selftys.push((path.span, impl_ty_name));"}, {"sha": "5c6c8aca173466902557d2094aca2ec48f109bfd", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -768,7 +768,7 @@ impl<'tcx> TypeVisitor<'tcx> for GATSubstCollector<'tcx> {\n fn could_be_self(trait_def_id: LocalDefId, ty: &hir::Ty<'_>) -> bool {\n     match ty.kind {\n         hir::TyKind::TraitObject([trait_ref], ..) => match trait_ref.trait_ref.path.segments {\n-            [s] => s.res.and_then(|r| r.opt_def_id()) == Some(trait_def_id.to_def_id()),\n+            [s] => s.res.opt_def_id() == Some(trait_def_id.to_def_id()),\n             _ => false,\n         },\n         _ => false,"}, {"sha": "d7c93af5fddc0aba243d12e1fd30e9c9e26d915b", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -1,6 +1,5 @@\n use rustc_errors::{Applicability, StashKey};\n use rustc_hir as hir;\n-use rustc_hir::def::Res;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit;\n use rustc_hir::intravisit::Visitor;\n@@ -179,15 +178,12 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                 return None;\n             };\n \n-            // Try to use the segment resolution if it is valid, otherwise we\n-            // default to the path resolution.\n-            let res = segment.res.filter(|&r| r != Res::Err).unwrap_or(path.res);\n-            let generics = match tcx.res_generics_def_id(res) {\n+            let generics = match tcx.res_generics_def_id(segment.res) {\n                 Some(def_id) => tcx.generics_of(def_id),\n                 None => {\n                     tcx.sess.delay_span_bug(\n                         tcx.def_span(def_id),\n-                        &format!(\"unexpected anon const res {:?} in path: {:?}\", res, path),\n+                        &format!(\"unexpected anon const res {:?} in path: {:?}\", segment.res, path),\n                     );\n                     return None;\n                 }"}, {"sha": "1085e608944154beed10801798f9aa684a3fe643", "filename": "src/tools/clippy/clippy_lints/src/operators/op_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fop_ref.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -185,7 +185,7 @@ fn in_impl<'tcx>(\n         if let ItemKind::Impl(item) = &item.kind;\n         if let Some(of_trait) = &item.of_trait;\n         if let Some(seg) = of_trait.path.segments.last();\n-        if let Some(Res::Def(_, trait_id)) = seg.res;\n+        if let Res::Def(_, trait_id) = seg.res;\n         if trait_id == bin_op;\n         if let Some(generic_args) = seg.args;\n         if let Some(GenericArg::Type(other_ty)) = generic_args.args.last();"}, {"sha": "42514f861be1c25f33bcca47ef88ac7a2cef5b47", "filename": "src/tools/clippy/clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -43,8 +43,7 @@ impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n             if mut_ty.mutbl == Mutability::Not;\n             if let TyKind::Path(ref qpath) = &mut_ty.ty.kind;\n             let last = last_path_segment(qpath);\n-            if let Some(res) = last.res;\n-            if let Some(def_id) = res.opt_def_id();\n+            if let Some(def_id) = last.res.opt_def_id();\n \n             if cx.tcx.is_diagnostic_item(sym::Option, def_id);\n             if let Some(params) = last_path_segment(qpath).args ;"}, {"sha": "a25be93b8d61696f3f803e48ae294b5f02ef24fc", "filename": "src/tools/clippy/clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "patch": "@@ -128,7 +128,7 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n                 if !bound_predicate.span.from_expansion();\n                 if let TyKind::Path(QPath::Resolved(_, Path { segments, .. })) = bound_predicate.bounded_ty.kind;\n                 if let Some(PathSegment {\n-                    res: Some(Res::SelfTy{ trait_: Some(def_id), alias_to: _ }), ..\n+                    res: Res::SelfTy{ trait_: Some(def_id), alias_to: _ }, ..\n                 }) = segments.first();\n                 if let Some(\n                     Node::Item("}]}