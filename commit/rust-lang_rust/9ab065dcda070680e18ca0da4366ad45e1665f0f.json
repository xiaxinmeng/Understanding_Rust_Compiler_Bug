{"sha": "9ab065dcda070680e18ca0da4366ad45e1665f0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYjA2NWRjZGEwNzA2ODBlMThjYTBkYTQzNjZhZDQ1ZTE2NjVmMGY=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-11-11T16:45:52Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-12-06T04:50:26Z"}, "message": "Implement #[track_caller] in const.", "tree": {"sha": "13850e8539c3ac4904d560570415133d06a60f89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13850e8539c3ac4904d560570415133d06a60f89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ab065dcda070680e18ca0da4366ad45e1665f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab065dcda070680e18ca0da4366ad45e1665f0f", "html_url": "https://github.com/rust-lang/rust/commit/9ab065dcda070680e18ca0da4366ad45e1665f0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ab065dcda070680e18ca0da4366ad45e1665f0f/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "234c9f21d9930e4ae804d00b191d0780959cfcbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/234c9f21d9930e4ae804d00b191d0780959cfcbe", "html_url": "https://github.com/rust-lang/rust/commit/234c9f21d9930e4ae804d00b191d0780959cfcbe"}], "stats": {"total": 76, "additions": 63, "deletions": 13}, "files": [{"sha": "366951bc9f494d325ab0cd4cc0ac7718825c62f2", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9ab065dcda070680e18ca0da4366ad45e1665f0f/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab065dcda070680e18ca0da4366ad45e1665f0f/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=9ab065dcda070680e18ca0da4366ad45e1665f0f", "patch": "@@ -116,6 +116,10 @@ impl<'tcx> InstanceDef<'tcx> {\n         }\n         tcx.codegen_fn_attrs(self.def_id()).requests_inline()\n     }\n+\n+    pub fn requires_caller_location(&self, tcx: TyCtxt<'_>) -> bool {\n+        tcx.codegen_fn_attrs(self.def_id()).flags.contains(CodegenFnAttrFlags::TRACK_CALLER)\n+    }\n }\n \n impl<'tcx> fmt::Display for Instance<'tcx> {\n@@ -255,11 +259,8 @@ impl<'tcx> Instance<'tcx> {\n     ) -> Option<Instance<'tcx>> {\n         debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n         Instance::resolve(tcx, param_env, def_id, substs).map(|mut resolved| {\n-            let has_track_caller = |def| tcx.codegen_fn_attrs(def).flags\n-                .contains(CodegenFnAttrFlags::TRACK_CALLER);\n-\n             match resolved.def {\n-                InstanceDef::Item(def_id) if has_track_caller(def_id) => {\n+                InstanceDef::Item(def_id) if resolved.def.requires_caller_location(tcx) => {\n                     debug!(\" => fn pointer created for function with #[track_caller]\");\n                     resolved.def = InstanceDef::ReifyShim(def_id);\n                 }"}, {"sha": "20f1a1d7c48448d4abfe139fba8d2f43fdd96ecb", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ab065dcda070680e18ca0da4366ad45e1665f0f/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab065dcda070680e18ca0da4366ad45e1665f0f/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=9ab065dcda070680e18ca0da4366ad45e1665f0f", "patch": "@@ -112,6 +112,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // `src/librustc/ty/constness.rs`\n         match intrinsic_name {\n             sym::caller_location => {\n+                let span = self.find_closest_untracked_caller_location(span);\n                 let location = self.alloc_caller_location_for_span(span);\n                 self.write_scalar(location.ptr, dest)?;\n             }"}, {"sha": "391c0c30bdeccfbdcc99ef46b24c30a9f82b52f8", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9ab065dcda070680e18ca0da4366ad45e1665f0f/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab065dcda070680e18ca0da4366ad45e1665f0f/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=9ab065dcda070680e18ca0da4366ad45e1665f0f", "patch": "@@ -6,6 +6,28 @@ use syntax_pos::{Symbol, Span};\n use crate::interpret::{Scalar, MemoryKind, MPlaceTy, intrinsics::{InterpCx, Machine}};\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n+    /// Walks up the callstack from the intrinsic's callsite, searching for the first frame which is\n+    /// not `#[track_caller]`. Returns the (passed) span of the intrinsic's callsite if the first\n+    /// frame in the stack is untracked so that we can display the callsite of the intrinsic within\n+    /// that function.\n+    crate fn find_closest_untracked_caller_location(\n+        &self,\n+        intrinsic_loc: Span,\n+    ) -> Span {\n+        debug!(\"finding closest untracked caller relative to {:?}\", intrinsic_loc);\n+\n+        let mut caller_span = intrinsic_loc;\n+        for next_caller in self.stack.iter().rev() {\n+            if !next_caller.instance.def.requires_caller_location(*self.tcx) {\n+                return caller_span;\n+            }\n+            caller_span = next_caller.span;\n+        }\n+\n+        intrinsic_loc\n+    }\n+\n+    /// Allocate a `const core::panic::Location` with the provided filename and line/column numbers.\n     crate fn alloc_caller_location(\n         &mut self,\n         filename: Symbol,"}, {"sha": "e36790505e8821c3ed075c1c18881b0cc6df8664", "filename": "src/test/ui/consts/const-eval/const_caller_location.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9ab065dcda070680e18ca0da4366ad45e1665f0f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_caller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab065dcda070680e18ca0da4366ad45e1665f0f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_caller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_caller_location.rs?ref=9ab065dcda070680e18ca0da4366ad45e1665f0f", "patch": "@@ -1,23 +1,41 @@\n // run-pass\n \n-#![feature(const_fn, core_intrinsics)]\n+#![feature(const_fn, core_intrinsics, track_caller)]\n \n use std::{intrinsics::caller_location, panic::Location};\n \n const LOCATION: &Location = caller_location();\n-const NESTED: &Location = {\n-    const fn nested_location() -> &'static Location<'static> {\n-        caller_location()\n-    };\n-    nested_location()\n-};\n+\n+const TRACKED: &Location = tracked();\n+#[track_caller]\n+const fn tracked() -> &'static Location <'static> {\n+    caller_location()\n+}\n+\n+const NESTED: &Location = nested_location();\n+const fn nested_location() -> &'static Location<'static> {\n+    caller_location()\n+}\n+\n+const CONTAINED: &Location = contained();\n+const fn contained() -> &'static Location<'static> {\n+    tracked()\n+}\n \n fn main() {\n     assert_eq!(LOCATION.file(), file!());\n     assert_eq!(LOCATION.line(), 7);\n     assert_eq!(LOCATION.column(), 29);\n \n+    assert_eq!(TRACKED.file(), file!());\n+    assert_eq!(TRACKED.line(), 9);\n+    assert_eq!(TRACKED.column(), 28);\n+\n     assert_eq!(NESTED.file(), file!());\n-    assert_eq!(NESTED.line(), 10);\n-    assert_eq!(NESTED.column(), 9);\n+    assert_eq!(NESTED.line(), 17);\n+    assert_eq!(NESTED.column(), 5);\n+\n+    assert_eq!(CONTAINED.file(), file!());\n+    assert_eq!(CONTAINED.line(), 22);\n+    assert_eq!(CONTAINED.column(), 5);\n }"}, {"sha": "01a00dd28fda3c76469216040cb2a5c9a1fe55c5", "filename": "src/test/ui/rfc-2091-track-caller/const_caller_location.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ab065dcda070680e18ca0da4366ad45e1665f0f/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fconst_caller_location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ab065dcda070680e18ca0da4366ad45e1665f0f/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fconst_caller_location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fconst_caller_location.stderr?ref=9ab065dcda070680e18ca0da4366ad45e1665f0f", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n+  --> $DIR/const_caller_location.rs:3:39\n+   |\n+LL | #![feature(const_fn, core_intrinsics, track_caller)]\n+   |                                       ^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}]}