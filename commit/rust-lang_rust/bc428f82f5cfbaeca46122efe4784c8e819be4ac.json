{"sha": "bc428f82f5cfbaeca46122efe4784c8e819be4ac", "node_id": "C_kwDOAAsO6NoAKGJjNDI4ZjgyZjVjZmJhZWNhNDYxMjJlZmU0Nzg0YzhlODE5YmU0YWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-27T17:50:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-27T17:50:37Z"}, "message": "Auto merge of #111006 - Mark-Simulacrum:relnotes, r=Mark-Simulacrum\n\n1.70.0 release notes\n\nr? `@cuviper` `@rust-lang/release`", "tree": {"sha": "bd62c4ac298d0af9b09246ad45a8c9589d32baec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd62c4ac298d0af9b09246ad45a8c9589d32baec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc428f82f5cfbaeca46122efe4784c8e819be4ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc428f82f5cfbaeca46122efe4784c8e819be4ac", "html_url": "https://github.com/rust-lang/rust/commit/bc428f82f5cfbaeca46122efe4784c8e819be4ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc428f82f5cfbaeca46122efe4784c8e819be4ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f91b634643de14ab5156b0c084d80bd6845fb0ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/f91b634643de14ab5156b0c084d80bd6845fb0ae", "html_url": "https://github.com/rust-lang/rust/commit/f91b634643de14ab5156b0c084d80bd6845fb0ae"}, {"sha": "89b9b25cfab50a34612c5156309e8682fb65517e", "url": "https://api.github.com/repos/rust-lang/rust/commits/89b9b25cfab50a34612c5156309e8682fb65517e", "html_url": "https://github.com/rust-lang/rust/commit/89b9b25cfab50a34612c5156309e8682fb65517e"}], "stats": {"total": 136, "additions": 136, "deletions": 0}, "files": [{"sha": "fa95df685aaa4bbd6a8e70e531ce380b2403303d", "filename": "RELEASES.md", "status": "modified", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/bc428f82f5cfbaeca46122efe4784c8e819be4ac/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/bc428f82f5cfbaeca46122efe4784c8e819be4ac/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=bc428f82f5cfbaeca46122efe4784c8e819be4ac", "patch": "@@ -1,3 +1,139 @@\n+Version 1.70.0 (2023-06-01)\n+==========================\n+\n+<a id=\"1.70.0-Language\"></a>\n+\n+Language\n+--------\n+- [Relax ordering rules for `asm!` operands](https://github.com/rust-lang/rust/pull/105798/)\n+- [Properly allow macro expanded `format_args` invocations to uses captures](https://github.com/rust-lang/rust/pull/106505/)\n+- [Lint ambiguous glob re-exports](https://github.com/rust-lang/rust/pull/107880/)\n+- [Perform const and unsafe checking for expressions in `let _ = expr` position.](https://github.com/rust-lang/rust/pull/102256/)\n+\n+<a id=\"1.70.0-Compiler\"></a>\n+\n+Compiler\n+--------\n+- [Extend -Cdebuginfo with new options and named aliases](https://github.com/rust-lang/rust/pull/109808/)\n+  This provides a smaller version of debuginfo for cases that only need line number information\n+  (`-Cdebuginfo=line-tables-only`), which may eventually become the default for `-Cdebuginfo=1`.\n+- [Make `unused_allocation` lint against `Box::new` too](https://github.com/rust-lang/rust/pull/104363/)\n+- [Detect uninhabited types early in const eval](https://github.com/rust-lang/rust/pull/109435/)\n+- [Switch to LLD as default linker for {arm,thumb}v4t-none-eabi](https://github.com/rust-lang/rust/pull/109721/)\n+- [Add tier 3 target `loongarch64-unknown-linux-gnu`](https://github.com/rust-lang/rust/pull/96971)\n+- [Add tier 3 target for `i586-pc-nto-qnx700` (QNX Neutrino RTOS, version 7.0)](https://github.com/rust-lang/rust/pull/109173/), \n+- [Insert alignment checks for pointer dereferences as debug assertions](https://github.com/rust-lang/rust/pull/98112)\n+  This catches undefined behavior at runtime, and may cause existing code to fail.\n+\n+Refer to Rust's [platform support page][platform-support-doc]\n+for more information on Rust's tiered platform support.\n+\n+<a id=\"1.70.0-Libraries\"></a>\n+\n+Libraries\n+---------\n+- [Document NonZeroXxx layout guarantees](https://github.com/rust-lang/rust/pull/94786/)\n+- [Windows: make `Command` prefer non-verbatim paths](https://github.com/rust-lang/rust/pull/96391/)\n+- [Implement Default for some alloc/core iterators](https://github.com/rust-lang/rust/pull/99929/)\n+- [Fix handling of trailing bare CR in str::lines](https://github.com/rust-lang/rust/pull/100311/)\n+- [allow negative numeric literals in `concat!`](https://github.com/rust-lang/rust/pull/106844/)\n+- [Add documentation about the memory layout of `Cell`](https://github.com/rust-lang/rust/pull/106921/)\n+- [Use `partial_cmp` to implement tuple `lt`/`le`/`ge`/`gt`](https://github.com/rust-lang/rust/pull/108157/)\n+- [Stabilize `atomic_as_ptr`](https://github.com/rust-lang/rust/pull/108419/)\n+- [Stabilize `nonnull_slice_from_raw_parts`](https://github.com/rust-lang/rust/pull/97506/)\n+- [Partial stabilization of `once_cell`](https://github.com/rust-lang/rust/pull/105587/)\n+- [Stabilize `nonzero_min_max`](https://github.com/rust-lang/rust/pull/106633/)\n+- [Flatten/inline format_args!() and (string and int) literal arguments into format_args!()](https://github.com/rust-lang/rust/pull/106824/)\n+- [Stabilize movbe target feature](https://github.com/rust-lang/rust/pull/107711/)\n+- [don't splice from files into pipes in io::copy](https://github.com/rust-lang/rust/pull/108283/)\n+- [Add a builtin unstable `FnPtr` trait that is implemented for all function pointers](https://github.com/rust-lang/rust/pull/108080/)\n+  This extends `Debug`, `Pointer`, `Hash`, `PartialEq`, `Eq`, `PartialOrd`, and `Ord`\n+  implementations for function pointers with all ABIs.\n+\n+<a id=\"1.70.0-Stabilized-APIs\"></a>\n+\n+Stabilized APIs\n+---------------\n+\n+- [`NonZero*::MIN/MAX`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroI8.html#associatedconstant.MIN)\n+- [`BinaryHeap::retain`](https://doc.rust-lang.org/stable/std/collections/struct.BinaryHeap.html#method.retain)\n+- [`Default for std::collections::binary_heap::IntoIter`](https://doc.rust-lang.org/stable/std/collections/binary_heap/struct.IntoIter.html)\n+- [`Default for std::collections::btree_map::{IntoIter, Iter, IterMut}`](https://doc.rust-lang.org/stable/std/collections/btree_map/struct.IntoIter.html)\n+- [`Default for std::collections::btree_map::{IntoKeys, Keys}`](https://doc.rust-lang.org/stable/std/collections/btree_map/struct.IntoKeys.html)\n+- [`Default for std::collections::btree_map::{IntoValues, Values}`](https://doc.rust-lang.org/stable/std/collections/btree_map/struct.IntoKeys.html)\n+- [`Default for std::collections::btree_map::Range`](https://doc.rust-lang.org/stable/std/collections/btree_map/struct.Range.html)\n+- [`Default for std::collections::btree_set::{IntoIter, Iter}`](https://doc.rust-lang.org/stable/std/collections/btree_set/struct.IntoIter.html)\n+- [`Default for std::collections::btree_set::Range`](https://doc.rust-lang.org/stable/std/collections/btree_set/struct.Range.html)\n+- [`Default for std::collections::linked_list::{IntoIter, Iter, IterMut}`](https://doc.rust-lang.org/stable/alloc/collections/linked_list/struct.IntoIter.html)\n+- [`Default for std::vec::IntoIter`](https://doc.rust-lang.org/stable/alloc/vec/struct.IntoIter.html#impl-Default-for-IntoIter%3CT,+A%3E)\n+- [`Default for std::iter::Chain`](https://doc.rust-lang.org/stable/std/iter/struct.Chain.html)\n+- [`Default for std::iter::Cloned`](https://doc.rust-lang.org/stable/std/iter/struct.Cloned.html)\n+- [`Default for std::iter::Copied`](https://doc.rust-lang.org/stable/std/iter/struct.Copied.html)\n+- [`Default for std::iter::Enumerate`](https://doc.rust-lang.org/stable/std/iter/struct.Enumerate.html)\n+- [`Default for std::iter::Flatten`](https://doc.rust-lang.org/stable/std/iter/struct.Flatten.html)\n+- [`Default for std::iter::Fuse`](https://doc.rust-lang.org/stable/std/iter/struct.Fuse.html)\n+- [`Default for std::iter::Rev`](https://doc.rust-lang.org/stable/std/iter/struct.Rev.html)\n+- [`Default for std::slice::Iter`](https://doc.rust-lang.org/stable/std/slice/struct.Iter.html)\n+- [`Default for std::slice::IterMut`](https://doc.rust-lang.org/stable/std/slice/struct.IterMut.html)\n+- [`Rc::into_inner`](https://doc.rust-lang.org/stable/alloc/rc/struct.Rc.html#method.into_inner)\n+- [`Arc::into_inner`](https://doc.rust-lang.org/stable/alloc/sync/struct.Arc.html#method.into_inner)\n+- [`std::cell::OnceCell`](https://doc.rust-lang.org/stable/std/cell/struct.OnceCell.html)\n+- [`Option::is_some_and`](https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.is_some_and)\n+- [`NonNull::slice_from_raw_parts`](https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.slice_from_raw_parts)\n+- [`Result::is_ok_and`](https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.is_ok_and)\n+- [`Result::is_err_and`](https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.is_err_and)\n+- [`std::sync::atomic::Atomic*::as_ptr`](https://doc.rust-lang.org/stable/std/sync/atomic/struct.AtomicU8.html#method.as_ptr)\n+- [`std::io::IsTerminal`](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html)\n+- [`std::os::linux::net::SocketAddrExt`](https://doc.rust-lang.org/stable/std/os/linux/net/trait.SocketAddrExt.html)\n+- [`std::os::unix::net::UnixDatagram::bind_addr`](https://doc.rust-lang.org/stable/std/os/unix/net/struct.UnixDatagram.html#method.bind_addr)\n+- [`std::os::unix::net::UnixDatagram::connect_addr`](https://doc.rust-lang.org/stable/std/os/unix/net/struct.UnixDatagram.html#method.connect_addr)\n+- [`std::os::unix::net::UnixDatagram::send_to_addr`](https://doc.rust-lang.org/stable/std/os/unix/net/struct.UnixDatagram.html#method.send_to_addr)\n+- [`std::os::unix::net::UnixListener::bind_addr`](https://doc.rust-lang.org/stable/std/os/unix/net/struct.UnixListener.html#method.bind_addr)\n+- [`std::path::Path::as_mut_os_str`](https://doc.rust-lang.org/stable/std/path/struct.Path.html#method.as_mut_os_str)\n+- [`std::sync::OnceLock`](https://doc.rust-lang.org/stable/std/sync/struct.OnceLock.html)\n+\n+<a id=\"1.70.0-Cargo\"></a>\n+\n+Cargo\n+-----\n+\n+- [Add `CARGO_PKG_README`](https://github.com/rust-lang/cargo/pull/11645/)\n+- [Make `sparse` the default protocol for crates.io](https://github.com/rust-lang/cargo/pull/11791/)\n+- [Accurately show status when downgrading dependencies](https://github.com/rust-lang/cargo/pull/11839/)\n+- [Use registry.default for login/logout](https://github.com/rust-lang/cargo/pull/11949/)\n+- [Stabilize `cargo logout`](https://github.com/rust-lang/cargo/pull/11950/)\n+\n+<a id=\"1.70.0-Misc\"></a>\n+\n+Misc\n+----\n+\n+- [Stabilize rustdoc `--test-run-directory`](https://github.com/rust-lang/rust/pull/103682/)\n+\n+<a id=\"1.70.0-Compatibility-Notes\"></a>\n+\n+Compatibility Notes\n+-------------------\n+\n+- [Prevent stable `libtest` from supporting `-Zunstable-options`](https://github.com/rust-lang/rust/pull/109044/)\n+- [Perform const and unsafe checking for expressions in `let _ = expr` position.](https://github.com/rust-lang/rust/pull/102256/)\n+- [WebAssembly targets enable `sign-ext` and `mutable-globals` features in codegen](https://github.com/rust-lang/rust/issues/109807)\n+  This may cause incompatibility with older execution environments.\n+- [Insert alignment checks for pointer dereferences as debug assertions](https://github.com/rust-lang/rust/pull/98112)\n+  This catches undefined behavior at runtime, and may cause existing code to fail.\n+\n+<a id=\"1.70.0-Internal-Changes\"></a>\n+\n+Internal Changes\n+----------------\n+\n+These changes do not affect any public interfaces of Rust, but they represent\n+significant improvements to the performance or internals of rustc and related\n+tools.\n+\n+- [Upgrade to LLVM 16](https://github.com/rust-lang/rust/pull/109474/)\n+- [Use SipHash-1-3 instead of SipHash-2-4 for StableHasher](https://github.com/rust-lang/rust/pull/107925/)\n+\n Version 1.69.0 (2023-04-20)\n ==========================\n "}]}