{"sha": "2fc1f41d0d235d3387ebd0a1fc5a6838b29918c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYzFmNDFkMGQyMzVkMzM4N2ViZDBhMWZjNWE2ODM4YjI5OTE4Yzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-10T01:28:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-10T01:28:04Z"}, "message": "auto merge of #4827 : mcpherrinm/rust/master, r=catamorphism\n\nIt seems to me the library needs more work to be done, but having a non-compilable sample program seems like bad news.", "tree": {"sha": "61ead59529140929cae0f95683bf2f18e84481c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61ead59529140929cae0f95683bf2f18e84481c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fc1f41d0d235d3387ebd0a1fc5a6838b29918c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc1f41d0d235d3387ebd0a1fc5a6838b29918c8", "html_url": "https://github.com/rust-lang/rust/commit/2fc1f41d0d235d3387ebd0a1fc5a6838b29918c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fc1f41d0d235d3387ebd0a1fc5a6838b29918c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6442e97a50561e8b42e145c2761d9e14233c4c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6442e97a50561e8b42e145c2761d9e14233c4c1", "html_url": "https://github.com/rust-lang/rust/commit/d6442e97a50561e8b42e145c2761d9e14233c4c1"}, {"sha": "0a062b50f11ffba17675912cf9ea475fdbdfa0f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a062b50f11ffba17675912cf9ea475fdbdfa0f5", "html_url": "https://github.com/rust-lang/rust/commit/0a062b50f11ffba17675912cf9ea475fdbdfa0f5"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "a778649f6f4b0372857deebf2d75dc544eb548d4", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/2fc1f41d0d235d3387ebd0a1fc5a6838b29918c8/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc1f41d0d235d3387ebd0a1fc5a6838b29918c8/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=2fc1f41d0d235d3387ebd0a1fc5a6838b29918c8", "patch": "@@ -29,48 +29,50 @@\n  * The following example shows simple command line parsing for an application\n  * that requires an input file to be specified, accepts an optional output\n  * file name following -o, and accepts both -h and --help as optional flags.\n+ * extern mod std;\n+ * use std::getopts::*;\n  *\n- *     use std;\n- *     import std::getopts::{optopt,optflag,getopts,opt_present,opt_maybe_str,\n- *         fail_str};\n+ *    fn do_work(in: &str, out: Option<~str>) {\n+ *      io::println(in);\n+ *      io::println(match out {\n+ *        Some(move x) => x,\n+ *        None => ~\"No Output\"\n+ *      });\n+ *    }\n  *\n- *     fn do_work(in: str, out: Option<str>) {\n- *         // ...\n- *     }\n+ *    fn print_usage(program: &str, _opts: &[std::getopts::Opt]) {\n+ *      io::println(fmt!(\"Usage: %s [options]\", program));\n+ *      io::println(\"-o\\t\\tOutput\");\n+ *      io::println(\"-h --help\\tUsage\");\n+ *    }\n  *\n- *     fn print_usage(program: str) {\n- *         io::println(\"Usage: \" + program + \" [options]\");\n- *         io::println(\"-o\\t\\tOutput\");\n- *         io::println(\"-h --help\\tUsage\");\n- *     }\n+ *    fn main() {\n+ *        let args = os::args();\n  *\n- *     fn main(args: ~[str]) {\n- *         check !args.is_empty()\n+ *        let program = copy args[0];\n  *\n- *         let program : str = vec::head(args);\n- *\n- *         let opts = ~[\n- *             optopt(\"o\"),\n- *             optflag(\"h\"),\n- *             optflag(\"help\")\n- *         ];\n- *         let matches = match getopts(vec::tail(args), opts) {\n- *             result::ok(m) { m }\n- *             result::err(f) { die!(fail_str(f)) }\n- *         };\n- *         if opt_present(matches, \"h\") || opt_present(matches, \"help\") {\n- *             print_usage(program);\n- *             return;\n- *         }\n- *         let output = opt_maybe_str(matches, \"o\");\n- *         let input = if !matches.free.is_empty() {\n- *             matches.free[0]\n- *         } else {\n- *             print_usage(program);\n- *             return;\n- *         };\n- *         do_work(input, output);\n- *     }\n+ *        let opts = ~[\n+ *            optopt(\"o\"),\n+ *            optflag(\"h\"),\n+ *            optflag(\"help\")\n+ *        ];\n+ *        let matches = match getopts(vec::tail(args), opts) {\n+ *            result::Ok(m) => { m }\n+ *            result::Err(f) => { fail fail_str(f) }\n+ *        };\n+ *        if opt_present(&matches, \"h\") || opt_present(&matches, \"help\") {\n+ *            print_usage(program, opts);\n+ *            return;\n+ *        }\n+ *        let output = opt_maybe_str(&matches, \"o\");\n+ *        let input: &str = if !matches.free.is_empty() {\n+ *            matches.free[0]\n+ *        } else {\n+ *            print_usage(program, opts);\n+ *            return;\n+ *        };\n+ *        do_work(input, output);\n+ *    }\n  */\n \n use core::cmp::Eq;"}]}