{"sha": "7292d5ff60a914b61077764e1b10362b6cd1842b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOTJkNWZmNjBhOTE0YjYxMDc3NzY0ZTFiMTAzNjJiNmNkMTg0MmI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-02-17T19:37:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-17T19:37:57Z"}, "message": "Rollup merge of #82105 - nagisa:nagisa/ensure-removed, r=petrochenkov\n\nDon't fail to remove files if they are missing\n\nIn the backend we may want to remove certain temporary files, but in\ncertain other situations these files might not be produced in the first\nplace. We don't exactly care about that, and the intent is really that\nthese files are gone after a certain point in the backend.\n\nHere we unify the backend file removing calls to use `ensure_removed`\nwhich will attempt to delete a file, but will not fail if it does not\nexist (anymore).\n\nThe tradeoff to this approach is, of course, that we may miss instances\nwere we are attempting to remove files at wrong paths due to some bug \u2013\ncompilation would silently succeed but the temporary files would remain\nthere somewhere.", "tree": {"sha": "dfa2d82bf2734fd9b17c56f2f708ae255427a304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfa2d82bf2734fd9b17c56f2f708ae255427a304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7292d5ff60a914b61077764e1b10362b6cd1842b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLXCVCRBK7hj4Ov3rIwAAdHIIAAdY27TbUB8L7ubCZepJD9ig\niF8TrF4A696B4Vn3r719iAS2PbnYbfl/7Mk/xgvZdiJitoCzXjkUdK8GeKNY9CLf\nqt6gehe0SWoFmuJADVX/4+OEBrEgVq4r6y8fMwOJ0BeP4Els2TqWw6nwCOt+9obk\nCOiyxuTCoydkRf+YTTB3bwCcVPbvImqc0Yw/I81GamIk4sJ/pAbnuPW104jBFwPI\nA44G7b2kppo5GBwPajOeeFki9Sf8AhXvgUuMZw6hdFENsyeVGwCQ3waQDtH/xj9K\nByUKdaQ3WG/QyZO2GsS/P5VLM2nZKnpbNWlYBI5QUOVJQaw3GA927jsswYhPWz8=\n=Sw8y\n-----END PGP SIGNATURE-----\n", "payload": "tree dfa2d82bf2734fd9b17c56f2f708ae255427a304\nparent 253631d73fdb310a437edff1134caee904e28b94\nparent fa3621b468263828b5e1a1b1563e0b9cb7209e96\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1613590677 +0100\ncommitter GitHub <noreply@github.com> 1613590677 +0100\n\nRollup merge of #82105 - nagisa:nagisa/ensure-removed, r=petrochenkov\n\nDon't fail to remove files if they are missing\n\nIn the backend we may want to remove certain temporary files, but in\ncertain other situations these files might not be produced in the first\nplace. We don't exactly care about that, and the intent is really that\nthese files are gone after a certain point in the backend.\n\nHere we unify the backend file removing calls to use `ensure_removed`\nwhich will attempt to delete a file, but will not fail if it does not\nexist (anymore).\n\nThe tradeoff to this approach is, of course, that we may miss instances\nwere we are attempting to remove files at wrong paths due to some bug \u2013\ncompilation would silently succeed but the temporary files would remain\nthere somewhere.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7292d5ff60a914b61077764e1b10362b6cd1842b", "html_url": "https://github.com/rust-lang/rust/commit/7292d5ff60a914b61077764e1b10362b6cd1842b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7292d5ff60a914b61077764e1b10362b6cd1842b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "253631d73fdb310a437edff1134caee904e28b94", "url": "https://api.github.com/repos/rust-lang/rust/commits/253631d73fdb310a437edff1134caee904e28b94", "html_url": "https://github.com/rust-lang/rust/commit/253631d73fdb310a437edff1134caee904e28b94"}, {"sha": "fa3621b468263828b5e1a1b1563e0b9cb7209e96", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa3621b468263828b5e1a1b1563e0b9cb7209e96", "html_url": "https://github.com/rust-lang/rust/commit/fa3621b468263828b5e1a1b1563e0b9cb7209e96"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "5f8a11ab94e666798184c3b3f9c51f04649a3028", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7292d5ff60a914b61077764e1b10362b6cd1842b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7292d5ff60a914b61077764e1b10362b6cd1842b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=7292d5ff60a914b61077764e1b10362b6cd1842b", "patch": "@@ -11,6 +11,7 @@ use crate::llvm_util;\n use crate::type_::Type;\n use crate::LlvmCodegenBackend;\n use crate::ModuleLlvm;\n+use rustc_codegen_ssa::back::link::ensure_removed;\n use rustc_codegen_ssa::back::write::{\n     BitcodeSection, CodegenContext, EmitObj, ModuleConfig, TargetMachineFactoryConfig,\n     TargetMachineFactoryFn,\n@@ -879,9 +880,7 @@ pub(crate) unsafe fn codegen(\n \n                 if !config.emit_bc {\n                     debug!(\"removing_bitcode {:?}\", bc_out);\n-                    if let Err(e) = fs::remove_file(&bc_out) {\n-                        diag_handler.err(&format!(\"failed to remove bitcode: {}\", e));\n-                    }\n+                    ensure_removed(diag_handler, &bc_out);\n                 }\n             }\n "}, {"sha": "972b9bbfe1caff56a00a5c271ebaa9fb52827c9a", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7292d5ff60a914b61077764e1b10362b6cd1842b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7292d5ff60a914b61077764e1b10362b6cd1842b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=7292d5ff60a914b61077764e1b10362b6cd1842b", "patch": "@@ -1,5 +1,6 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::temp_dir::MaybeTempDir;\n+use rustc_errors::Handler;\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n use rustc_middle::middle::cstore::{EncodedMetadata, LibSource};\n@@ -34,9 +35,11 @@ use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n use std::{ascii, char, env, fmt, fs, io, mem, str};\n \n-pub fn remove(sess: &Session, path: &Path) {\n+pub fn ensure_removed(diag_handler: &Handler, path: &Path) {\n     if let Err(e) = fs::remove_file(path) {\n-        sess.err(&format!(\"failed to remove {}: {}\", path.display(), e));\n+        if e.kind() != io::ErrorKind::NotFound {\n+            diag_handler.err(&format!(\"failed to remove {}: {}\", path.display(), e));\n+        }\n     }\n }\n \n@@ -112,11 +115,11 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n         if !sess.opts.cg.save_temps {\n             let remove_temps_from_module = |module: &CompiledModule| {\n                 if let Some(ref obj) = module.object {\n-                    remove(sess, obj);\n+                    ensure_removed(sess.diagnostic(), obj);\n                 }\n \n                 if let Some(ref obj) = module.dwarf_object {\n-                    remove(sess, obj);\n+                    ensure_removed(sess.diagnostic(), obj);\n                 }\n             };\n "}, {"sha": "b0aed812460071fc4712268e0a527d6512e99d4d", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7292d5ff60a914b61077764e1b10362b6cd1842b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7292d5ff60a914b61077764e1b10362b6cd1842b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=7292d5ff60a914b61077764e1b10362b6cd1842b", "patch": "@@ -1,4 +1,4 @@\n-use super::link::{self, remove};\n+use super::link::{self, ensure_removed};\n use super::linker::LinkerInfo;\n use super::lto::{self, SerializedModule};\n use super::symbol_export::symbol_name_for_instance_in_crate;\n@@ -543,7 +543,7 @@ fn produce_final_output_artifacts(\n             copy_gracefully(&path, &crate_output.path(output_type));\n             if !sess.opts.cg.save_temps && !keep_numbered {\n                 // The user just wants `foo.x`, not `foo.#module-name#.x`.\n-                remove(sess, &path);\n+                ensure_removed(sess.diagnostic(), &path);\n             }\n         } else {\n             let ext = crate_output\n@@ -642,33 +642,33 @@ fn produce_final_output_artifacts(\n         for module in compiled_modules.modules.iter() {\n             if let Some(ref path) = module.object {\n                 if !keep_numbered_objects {\n-                    remove(sess, path);\n+                    ensure_removed(sess.diagnostic(), path);\n                 }\n             }\n \n             if let Some(ref path) = module.dwarf_object {\n                 if !keep_numbered_objects {\n-                    remove(sess, path);\n+                    ensure_removed(sess.diagnostic(), path);\n                 }\n             }\n \n             if let Some(ref path) = module.bytecode {\n                 if !keep_numbered_bitcode {\n-                    remove(sess, path);\n+                    ensure_removed(sess.diagnostic(), path);\n                 }\n             }\n         }\n \n         if !user_wants_bitcode {\n             if let Some(ref metadata_module) = compiled_modules.metadata_module {\n                 if let Some(ref path) = metadata_module.bytecode {\n-                    remove(sess, &path);\n+                    ensure_removed(sess.diagnostic(), &path);\n                 }\n             }\n \n             if let Some(ref allocator_module) = compiled_modules.allocator_module {\n                 if let Some(ref path) = allocator_module.bytecode {\n-                    remove(sess, path);\n+                    ensure_removed(sess.diagnostic(), path);\n                 }\n             }\n         }"}, {"sha": "043011b3316a7c195f3e8817df0de3fc73f8e45a", "filename": "src/test/ui/debuginfo-emit-llvm-ir-and-split-debuginfo.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7292d5ff60a914b61077764e1b10362b6cd1842b/src%2Ftest%2Fui%2Fdebuginfo-emit-llvm-ir-and-split-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7292d5ff60a914b61077764e1b10362b6cd1842b/src%2Ftest%2Fui%2Fdebuginfo-emit-llvm-ir-and-split-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdebuginfo-emit-llvm-ir-and-split-debuginfo.rs?ref=7292d5ff60a914b61077764e1b10362b6cd1842b", "patch": "@@ -0,0 +1,7 @@\n+// build-pass\n+//\n+// compile-flags: -g --emit=llvm-ir -Zunstable-options -Csplit-debuginfo=unpacked\n+//\n+// Make sure that we don't explode with an error if we don't actually end up emitting any `dwo`s,\n+// as would be the case if we don't actually codegen anything.\n+#![crate_type=\"rlib\"]"}]}