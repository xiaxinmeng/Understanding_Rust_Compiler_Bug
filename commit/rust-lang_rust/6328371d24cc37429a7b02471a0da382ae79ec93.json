{"sha": "6328371d24cc37429a7b02471a0da382ae79ec93", "node_id": "C_kwDOAAsO6NoAKDYzMjgzNzFkMjRjYzM3NDI5YTdiMDI0NzFhMGRhMzgyYWU3OWVjOTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-23T09:50:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-23T09:50:16Z"}, "message": "Auto merge of #10681 - J-ZhengLi:issue10529, r=flip1995\n\nmake [`len_zero`] lint not spanning over parenthesis\n\nsorry it should be a quick fix but I was caught up by other stuffs last couple weeks :man_facepalming:\n\n---\n\nfixes: #10529\n\nchangelog: make [`len_zero`] lint not spanning over parenthesis", "tree": {"sha": "bbd602d366747686515a60b603b0f7098f08c17a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbd602d366747686515a60b603b0f7098f08c17a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6328371d24cc37429a7b02471a0da382ae79ec93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6328371d24cc37429a7b02471a0da382ae79ec93", "html_url": "https://github.com/rust-lang/rust/commit/6328371d24cc37429a7b02471a0da382ae79ec93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6328371d24cc37429a7b02471a0da382ae79ec93/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "982423473ad72c449b67fd363de4c6aad5ba4217", "url": "https://api.github.com/repos/rust-lang/rust/commits/982423473ad72c449b67fd363de4c6aad5ba4217", "html_url": "https://github.com/rust-lang/rust/commit/982423473ad72c449b67fd363de4c6aad5ba4217"}, {"sha": "b8d6964bcef97da4641d19be59d30814e2a38b9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8d6964bcef97da4641d19be59d30814e2a38b9c", "html_url": "https://github.com/rust-lang/rust/commit/b8d6964bcef97da4641d19be59d30814e2a38b9c"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "fec9c6f626c60cf89568866b896dd4f823efddbb", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6328371d24cc37429a7b02471a0da382ae79ec93/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6328371d24cc37429a7b02471a0da382ae79ec93/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=6328371d24cc37429a7b02471a0da382ae79ec93", "patch": "@@ -168,25 +168,27 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n         }\n \n         if let ExprKind::Binary(Spanned { node: cmp, .. }, left, right) = expr.kind {\n+            // expr.span might contains parenthesis, see issue #10529\n+            let actual_span = left.span.with_hi(right.span.hi());\n             match cmp {\n                 BinOpKind::Eq => {\n-                    check_cmp(cx, expr.span, left, right, \"\", 0); // len == 0\n-                    check_cmp(cx, expr.span, right, left, \"\", 0); // 0 == len\n+                    check_cmp(cx, actual_span, left, right, \"\", 0); // len == 0\n+                    check_cmp(cx, actual_span, right, left, \"\", 0); // 0 == len\n                 },\n                 BinOpKind::Ne => {\n-                    check_cmp(cx, expr.span, left, right, \"!\", 0); // len != 0\n-                    check_cmp(cx, expr.span, right, left, \"!\", 0); // 0 != len\n+                    check_cmp(cx, actual_span, left, right, \"!\", 0); // len != 0\n+                    check_cmp(cx, actual_span, right, left, \"!\", 0); // 0 != len\n                 },\n                 BinOpKind::Gt => {\n-                    check_cmp(cx, expr.span, left, right, \"!\", 0); // len > 0\n-                    check_cmp(cx, expr.span, right, left, \"\", 1); // 1 > len\n+                    check_cmp(cx, actual_span, left, right, \"!\", 0); // len > 0\n+                    check_cmp(cx, actual_span, right, left, \"\", 1); // 1 > len\n                 },\n                 BinOpKind::Lt => {\n-                    check_cmp(cx, expr.span, left, right, \"\", 1); // len < 1\n-                    check_cmp(cx, expr.span, right, left, \"!\", 0); // 0 < len\n+                    check_cmp(cx, actual_span, left, right, \"\", 1); // len < 1\n+                    check_cmp(cx, actual_span, right, left, \"!\", 0); // 0 < len\n                 },\n-                BinOpKind::Ge => check_cmp(cx, expr.span, left, right, \"!\", 1), // len >= 1\n-                BinOpKind::Le => check_cmp(cx, expr.span, right, left, \"!\", 1), // 1 <= len\n+                BinOpKind::Ge => check_cmp(cx, actual_span, left, right, \"!\", 1), // len >= 1\n+                BinOpKind::Le => check_cmp(cx, actual_span, right, left, \"!\", 1), // 1 <= len\n                 _ => (),\n             }\n         }"}, {"sha": "2c22abd7e4b144050a0dddb1e9dc603579c68734", "filename": "tests/ui/len_zero.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6328371d24cc37429a7b02471a0da382ae79ec93/tests%2Fui%2Flen_zero.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6328371d24cc37429a7b02471a0da382ae79ec93/tests%2Fui%2Flen_zero.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.fixed?ref=6328371d24cc37429a7b02471a0da382ae79ec93", "patch": "@@ -176,6 +176,10 @@ fn main() {\n         // No error; `HasWrongIsEmpty` does not have `.is_empty()`.\n         println!(\"Or this!\");\n     }\n+\n+    // issue #10529\n+    (!has_is_empty.is_empty()).then(|| println!(\"This can happen.\"));\n+    (has_is_empty.is_empty()).then(|| println!(\"Or this!\"));\n }\n \n fn test_slice(b: &[u8]) {"}, {"sha": "a011ff976448b6f87286f645222f8504e54347e0", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6328371d24cc37429a7b02471a0da382ae79ec93/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6328371d24cc37429a7b02471a0da382ae79ec93/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=6328371d24cc37429a7b02471a0da382ae79ec93", "patch": "@@ -176,6 +176,10 @@ fn main() {\n         // No error; `HasWrongIsEmpty` does not have `.is_empty()`.\n         println!(\"Or this!\");\n     }\n+\n+    // issue #10529\n+    (has_is_empty.len() > 0).then(|| println!(\"This can happen.\"));\n+    (has_is_empty.len() == 0).then(|| println!(\"Or this!\"));\n }\n \n fn test_slice(b: &[u8]) {"}, {"sha": "396cfb75fb620a0fb3646d4c549dd55bcb50fc0a", "filename": "tests/ui/len_zero.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6328371d24cc37429a7b02471a0da382ae79ec93/tests%2Fui%2Flen_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6328371d24cc37429a7b02471a0da382ae79ec93/tests%2Fui%2Flen_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.stderr?ref=6328371d24cc37429a7b02471a0da382ae79ec93", "patch": "@@ -123,10 +123,22 @@ LL |     if with_is_empty.len() == 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `with_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:182:8\n+  --> $DIR/len_zero.rs:181:6\n+   |\n+LL |     (has_is_empty.len() > 0).then(|| println!(\"This can happen.\"));\n+   |      ^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n+\n+error: length comparison to zero\n+  --> $DIR/len_zero.rs:182:6\n+   |\n+LL |     (has_is_empty.len() == 0).then(|| println!(\"Or this!\"));\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n+\n+error: length comparison to zero\n+  --> $DIR/len_zero.rs:186:8\n    |\n LL |     if b.len() != 0 {}\n    |        ^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!b.is_empty()`\n \n-error: aborting due to 21 previous errors\n+error: aborting due to 23 previous errors\n "}]}