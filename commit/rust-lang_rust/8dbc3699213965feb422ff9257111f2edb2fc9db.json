{"sha": "8dbc3699213965feb422ff9257111f2edb2fc9db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYmMzNjk5MjEzOTY1ZmViNDIyZmY5MjU3MTExZjJlZGIyZmM5ZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-19T01:08:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-19T01:08:54Z"}, "message": "Auto merge of #25441 - alexcrichton:debug-panic-neg, r=aturon\n\nDebug overflow checks for arithmetic negation landed in #24500, at which time\r\nthe `abs` method on signed integers was changed to using `wrapping_neg` to\r\nensure that the function never panicked. This implied that `abs` of `INT_MIN`\r\nwould return `INT_MIN`, another negative value. When this change was back-ported\r\nto beta, however, in #24708, the `wrapping_neg` function had not yet been\r\nbackported, so the implementation was changed in #24785 to `!self + 1`. This\r\nchange had the unintended side effect of enabling debug overflow checks for the\r\n`abs` function. Consequently, the current state of affairs is that the beta\r\nbranch checks for overflow in debug mode for `abs` and the nightly branch does\r\nnot.\r\n\r\nThis commit alters the behavior of nightly to have `abs` always check for\r\noverflow in debug mode. This change is more consistent with the way the standard\r\nlibrary treats overflow as well, and it is also not a breaking change as it's\r\nwhat the beta branch currently does (albeit if by accident).\r\n\r\ncc #25378", "tree": {"sha": "c01d8f12a8ea69bf3a5743a00e4245513214c606", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c01d8f12a8ea69bf3a5743a00e4245513214c606"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dbc3699213965feb422ff9257111f2edb2fc9db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dbc3699213965feb422ff9257111f2edb2fc9db", "html_url": "https://github.com/rust-lang/rust/commit/8dbc3699213965feb422ff9257111f2edb2fc9db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dbc3699213965feb422ff9257111f2edb2fc9db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e7d7bc05db986b9747c7e8b2a766165ab5faeab", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7d7bc05db986b9747c7e8b2a766165ab5faeab", "html_url": "https://github.com/rust-lang/rust/commit/2e7d7bc05db986b9747c7e8b2a766165ab5faeab"}, {"sha": "5f39ceb729e3bb209e9cf52701fe4424e7431ca0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f39ceb729e3bb209e9cf52701fe4424e7431ca0", "html_url": "https://github.com/rust-lang/rust/commit/5f39ceb729e3bb209e9cf52701fe4424e7431ca0"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "bd7286dfa3fa5cd09dd168a974c5b71eeae71f38", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8dbc3699213965feb422ff9257111f2edb2fc9db/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dbc3699213965feb422ff9257111f2edb2fc9db/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=8dbc3699213965feb422ff9257111f2edb2fc9db", "patch": "@@ -563,13 +563,22 @@ macro_rules! int_impl {\n             acc\n         }\n \n-        /// Computes the absolute value of `self`. `Int::min_value()` will be\n-        /// returned if the number is `Int::min_value()`.\n+        /// Computes the absolute value of `self`.\n+        ///\n+        /// # Overflow behavior\n+        ///\n+        /// The absolute value of `i32::min_value()` cannot be represented as an\n+        /// `i32`, and attempting to calculate it will cause an overflow. This\n+        /// means that code in debug mode will trigger a panic on this case and\n+        /// optimized code will return `i32::min_value()` without a panic.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub fn abs(self) -> $T {\n             if self.is_negative() {\n-                self.wrapping_neg()\n+                // Note that the #[inline] above means that the overflow\n+                // semantics of this negation depend on the crate we're being\n+                // inlined into.\n+                -self\n             } else {\n                 self\n             }"}, {"sha": "3f50a7d6c02983da66145b3ab26c230c44013ce0", "filename": "src/test/run-pass/int-abs-overflow.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8dbc3699213965feb422ff9257111f2edb2fc9db/src%2Ftest%2Frun-pass%2Fint-abs-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dbc3699213965feb422ff9257111f2edb2fc9db/src%2Ftest%2Frun-pass%2Fint-abs-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fint-abs-overflow.rs?ref=8dbc3699213965feb422ff9257111f2edb2fc9db", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z force-overflow-checks=on\n+\n+use std::thread;\n+\n+fn main() {\n+    assert!(thread::spawn(|| i8::min_value().abs()).join().is_err());\n+    assert!(thread::spawn(|| i16::min_value().abs()).join().is_err());\n+    assert!(thread::spawn(|| i32::min_value().abs()).join().is_err());\n+    assert!(thread::spawn(|| i64::min_value().abs()).join().is_err());\n+    assert!(thread::spawn(|| isize::min_value().abs()).join().is_err());\n+}"}]}