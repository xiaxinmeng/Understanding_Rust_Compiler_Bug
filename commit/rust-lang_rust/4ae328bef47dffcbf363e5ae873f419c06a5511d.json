{"sha": "4ae328bef47dffcbf363e5ae873f419c06a5511d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZTMyOGJlZjQ3ZGZmY2JmMzYzZTVhZTg3M2Y0MTljMDZhNTUxMWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-28T07:48:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-28T07:48:56Z"}, "message": "Auto merge of #78296 - Aaron1011:fix/stmt-tokens, r=petrochenkov\n\nProperly handle attributes on statements\n\nWe now collect tokens for the underlying node wrapped by `StmtKind`\nnstead of storing tokens directly in `Stmt`.\n\n`LazyTokenStream` now supports capturing a trailing semicolon after it\nis initially constructed. This allows us to avoid refactoring statement\nparsing to wrap the parsing of the semicolon in `parse_tokens`.\n\nAttributes on item statements\n(e.g. `fn foo() { #[bar] struct MyStruct; }`) are now treated as\nitem attributes, not statement attributes, which is consistent with how\nwe handle attributes on other kinds of statements. The feature-gating\ncode is adjusted so that proc-macro attributes are still allowed on item\nstatements on stable.\n\nTwo built-in macros (`#[global_allocator]` and `#[test]`) needed to be\nadjusted to support being passed `Annotatable::Stmt`.", "tree": {"sha": "a4638ba9c7a64bae7fa30ec681219ef1a00dc3d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4638ba9c7a64bae7fa30ec681219ef1a00dc3d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ae328bef47dffcbf363e5ae873f419c06a5511d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae328bef47dffcbf363e5ae873f419c06a5511d", "html_url": "https://github.com/rust-lang/rust/commit/4ae328bef47dffcbf363e5ae873f419c06a5511d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ae328bef47dffcbf363e5ae873f419c06a5511d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8e5209a21c698398a0f8c04af55e2ad6cbd113c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e5209a21c698398a0f8c04af55e2ad6cbd113c", "html_url": "https://github.com/rust-lang/rust/commit/f8e5209a21c698398a0f8c04af55e2ad6cbd113c"}, {"sha": "92bfa05b07090be1b3bf32af0c8947a0f0b387e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/92bfa05b07090be1b3bf32af0c8947a0f0b387e8", "html_url": "https://github.com/rust-lang/rust/commit/92bfa05b07090be1b3bf32af0c8947a0f0b387e8"}], "stats": {"total": 857, "additions": 602, "deletions": 255}, "files": [{"sha": "9d6ee65049ab258589456471bbf3fe90ace3ab68", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -901,29 +901,65 @@ pub struct Stmt {\n     pub id: NodeId,\n     pub kind: StmtKind,\n     pub span: Span,\n-    pub tokens: Option<LazyTokenStream>,\n }\n \n impl Stmt {\n+    pub fn tokens(&self) -> Option<&LazyTokenStream> {\n+        match self.kind {\n+            StmtKind::Local(ref local) => local.tokens.as_ref(),\n+            StmtKind::Item(ref item) => item.tokens.as_ref(),\n+            StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => expr.tokens.as_ref(),\n+            StmtKind::Empty => None,\n+            StmtKind::MacCall(ref mac) => mac.tokens.as_ref(),\n+        }\n+    }\n+\n+    pub fn tokens_mut(&mut self) -> Option<&mut LazyTokenStream> {\n+        match self.kind {\n+            StmtKind::Local(ref mut local) => local.tokens.as_mut(),\n+            StmtKind::Item(ref mut item) => item.tokens.as_mut(),\n+            StmtKind::Expr(ref mut expr) | StmtKind::Semi(ref mut expr) => expr.tokens.as_mut(),\n+            StmtKind::Empty => None,\n+            StmtKind::MacCall(ref mut mac) => mac.tokens.as_mut(),\n+        }\n+    }\n+\n+    pub fn set_tokens(&mut self, tokens: Option<LazyTokenStream>) {\n+        match self.kind {\n+            StmtKind::Local(ref mut local) => local.tokens = tokens,\n+            StmtKind::Item(ref mut item) => item.tokens = tokens,\n+            StmtKind::Expr(ref mut expr) | StmtKind::Semi(ref mut expr) => expr.tokens = tokens,\n+            StmtKind::Empty => {}\n+            StmtKind::MacCall(ref mut mac) => mac.tokens = tokens,\n+        }\n+    }\n+\n     pub fn has_trailing_semicolon(&self) -> bool {\n         match &self.kind {\n             StmtKind::Semi(_) => true,\n             StmtKind::MacCall(mac) => matches!(mac.style, MacStmtStyle::Semicolon),\n             _ => false,\n         }\n     }\n+\n+    /// Converts a parsed `Stmt` to a `Stmt` with\n+    /// a trailing semicolon.\n+    ///\n+    /// This only modifies the parsed AST struct, not the attached\n+    /// `LazyTokenStream`. The parser is responsible for calling\n+    /// `CreateTokenStream::add_trailing_semi` when there is actually\n+    /// a semicolon in the tokenstream.\n     pub fn add_trailing_semicolon(mut self) -> Self {\n         self.kind = match self.kind {\n             StmtKind::Expr(expr) => StmtKind::Semi(expr),\n             StmtKind::MacCall(mac) => {\n-                StmtKind::MacCall(mac.map(|MacCallStmt { mac, style: _, attrs }| MacCallStmt {\n-                    mac,\n-                    style: MacStmtStyle::Semicolon,\n-                    attrs,\n+                StmtKind::MacCall(mac.map(|MacCallStmt { mac, style: _, attrs, tokens }| {\n+                    MacCallStmt { mac, style: MacStmtStyle::Semicolon, attrs, tokens }\n                 }))\n             }\n             kind => kind,\n         };\n+\n         self\n     }\n \n@@ -963,6 +999,7 @@ pub struct MacCallStmt {\n     pub mac: MacCall,\n     pub style: MacStmtStyle,\n     pub attrs: AttrVec,\n+    pub tokens: Option<LazyTokenStream>,\n }\n \n #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug)]\n@@ -988,6 +1025,7 @@ pub struct Local {\n     pub init: Option<P<Expr>>,\n     pub span: Span,\n     pub attrs: AttrVec,\n+    pub tokens: Option<LazyTokenStream>,\n }\n \n /// An arm of a 'match'."}, {"sha": "c4e92a9f6d17fd12cb83d36382c70605f8de255c", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -579,13 +579,14 @@ pub fn noop_visit_parenthesized_parameter_data<T: MutVisitor>(\n }\n \n pub fn noop_visit_local<T: MutVisitor>(local: &mut P<Local>, vis: &mut T) {\n-    let Local { id, pat, ty, init, span, attrs } = local.deref_mut();\n+    let Local { id, pat, ty, init, span, attrs, tokens } = local.deref_mut();\n     vis.visit_id(id);\n     vis.visit_pat(pat);\n     visit_opt(ty, |ty| vis.visit_ty(ty));\n     visit_opt(init, |init| vis.visit_expr(init));\n     vis.visit_span(span);\n     visit_thin_attrs(attrs, vis);\n+    visit_lazy_tts(tokens, vis);\n }\n \n pub fn noop_visit_attribute<T: MutVisitor>(attr: &mut Attribute, vis: &mut T) {\n@@ -1328,16 +1329,12 @@ pub fn noop_filter_map_expr<T: MutVisitor>(mut e: P<Expr>, vis: &mut T) -> Optio\n }\n \n pub fn noop_flat_map_stmt<T: MutVisitor>(\n-    Stmt { kind, mut span, mut id, mut tokens }: Stmt,\n+    Stmt { kind, mut span, mut id }: Stmt,\n     vis: &mut T,\n ) -> SmallVec<[Stmt; 1]> {\n     vis.visit_id(&mut id);\n     vis.visit_span(&mut span);\n-    visit_lazy_tts(&mut tokens, vis);\n-    noop_flat_map_stmt_kind(kind, vis)\n-        .into_iter()\n-        .map(|kind| Stmt { id, kind, span, tokens: tokens.clone() })\n-        .collect()\n+    noop_flat_map_stmt_kind(kind, vis).into_iter().map(|kind| Stmt { id, kind, span }).collect()\n }\n \n pub fn noop_flat_map_stmt_kind<T: MutVisitor>(\n@@ -1354,9 +1351,10 @@ pub fn noop_flat_map_stmt_kind<T: MutVisitor>(\n         StmtKind::Semi(expr) => vis.filter_map_expr(expr).into_iter().map(StmtKind::Semi).collect(),\n         StmtKind::Empty => smallvec![StmtKind::Empty],\n         StmtKind::MacCall(mut mac) => {\n-            let MacCallStmt { mac: mac_, style: _, attrs } = mac.deref_mut();\n+            let MacCallStmt { mac: mac_, style: _, attrs, tokens } = mac.deref_mut();\n             vis.visit_mac_call(mac_);\n             visit_thin_attrs(attrs, vis);\n+            visit_lazy_tts(tokens, vis);\n             smallvec![StmtKind::MacCall(mac)]\n         }\n     }"}, {"sha": "b2207f22816205f0c11dc16fa5ae7c21da3a65aa", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -121,10 +121,14 @@ where\n }\n \n pub trait CreateTokenStream: sync::Send + sync::Sync {\n+    fn add_trailing_semi(&self) -> Box<dyn CreateTokenStream>;\n     fn create_token_stream(&self) -> TokenStream;\n }\n \n impl CreateTokenStream for TokenStream {\n+    fn add_trailing_semi(&self) -> Box<dyn CreateTokenStream> {\n+        panic!(\"Cannot call `add_trailing_semi` on a `TokenStream`!\");\n+    }\n     fn create_token_stream(&self) -> TokenStream {\n         self.clone()\n     }\n@@ -141,6 +145,13 @@ impl LazyTokenStream {\n         LazyTokenStream(Lrc::new(Box::new(inner)))\n     }\n \n+    /// Extends the captured stream by one token,\n+    /// which must be a trailing semicolon. This\n+    /// affects the `TokenStream` created by `make_tokenstream`.\n+    pub fn add_trailing_semi(&self) -> LazyTokenStream {\n+        LazyTokenStream(Lrc::new(self.0.add_trailing_semi()))\n+    }\n+\n     pub fn create_token_stream(&self) -> TokenStream {\n         self.0.create_token_stream()\n     }"}, {"sha": "61426a838deec62326e70bd3a3f3cc803d924774", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -689,7 +689,7 @@ pub fn walk_stmt<'a, V: Visitor<'a>>(visitor: &mut V, statement: &'a Stmt) {\n         StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => visitor.visit_expr(expr),\n         StmtKind::Empty => {}\n         StmtKind::MacCall(ref mac) => {\n-            let MacCallStmt { ref mac, style: _, ref attrs } = **mac;\n+            let MacCallStmt { ref mac, style: _, ref attrs, tokens: _ } = **mac;\n             visitor.visit_mac_call(mac);\n             for attr in attrs.iter() {\n                 visitor.visit_attribute(attr);"}, {"sha": "7487421e709a763705cae3a16866564056395e5a", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -6,6 +6,7 @@\n \n #![feature(bindings_after_at)]\n #![feature(iter_is_partitioned)]\n+#![recursion_limit = \"256\"]\n \n pub mod ast_validation;\n pub mod feature_gate;"}, {"sha": "5c21329069bfc7a35fd3b24949bc47de20700931", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -132,6 +132,7 @@ fn stmt_let_underscore(cx: &mut ExtCtxt<'_>, sp: Span, expr: P<ast::Expr>) -> as\n         id: ast::DUMMY_NODE_ID,\n         span: sp,\n         attrs: ast::AttrVec::new(),\n+        tokens: None,\n     });\n-    ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span: sp, tokens: None }\n+    ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span: sp }\n }"}, {"sha": "1651180817b9ddbfa2a2ea3edc94e46658e77151", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -64,7 +64,6 @@ impl MultiItemModifier for BuiltinDerive {\n                             id: ast::DUMMY_NODE_ID,\n                             kind: ast::StmtKind::Item(a.expect_item()),\n                             span,\n-                            tokens: None,\n                         })));\n                     });\n                 } else {"}, {"sha": "e59832a8eed5f2ceb53b5f40a5b0fc46fa049d51", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -451,7 +451,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             Inhabited,\n             ZeroValid,\n             UninitValid,\n-        };\n+        }\n         let panic_intrinsic = intrinsic.and_then(|i| match i {\n             sym::assert_inhabited => Some(AssertIntrinsic::Inhabited),\n             sym::assert_zero_valid => Some(AssertIntrinsic::ZeroValid),"}, {"sha": "b1071bf4308512772669c8ac357495938bf15f9d", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -374,7 +374,6 @@ macro_rules! make_stmts_default {\n                 id: ast::DUMMY_NODE_ID,\n                 span: e.span,\n                 kind: ast::StmtKind::Expr(e),\n-                tokens: None\n             }]\n         })\n     };\n@@ -617,7 +616,6 @@ impl MacResult for DummyResult {\n             id: ast::DUMMY_NODE_ID,\n             kind: ast::StmtKind::Expr(DummyResult::raw_expr(self.span, self.is_error)),\n             span: self.span,\n-            tokens: None\n         }])\n     }\n "}, {"sha": "fe67b401fccf9c4372e7b4d5ed4d9af4a1e61edd", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -140,12 +140,7 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     pub fn stmt_expr(&self, expr: P<ast::Expr>) -> ast::Stmt {\n-        ast::Stmt {\n-            id: ast::DUMMY_NODE_ID,\n-            span: expr.span,\n-            kind: ast::StmtKind::Expr(expr),\n-            tokens: None,\n-        }\n+        ast::Stmt { id: ast::DUMMY_NODE_ID, span: expr.span, kind: ast::StmtKind::Expr(expr) }\n     }\n \n     pub fn stmt_let(&self, sp: Span, mutbl: bool, ident: Ident, ex: P<ast::Expr>) -> ast::Stmt {\n@@ -162,13 +157,9 @@ impl<'a> ExtCtxt<'a> {\n             id: ast::DUMMY_NODE_ID,\n             span: sp,\n             attrs: AttrVec::new(),\n-        });\n-        ast::Stmt {\n-            id: ast::DUMMY_NODE_ID,\n-            kind: ast::StmtKind::Local(local),\n-            span: sp,\n             tokens: None,\n-        }\n+        });\n+        ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span: sp }\n     }\n \n     // Generates `let _: Type;`, which is usually used for type assertions.\n@@ -180,17 +171,13 @@ impl<'a> ExtCtxt<'a> {\n             id: ast::DUMMY_NODE_ID,\n             span,\n             attrs: AttrVec::new(),\n+            tokens: None,\n         });\n-        ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span, tokens: None }\n+        ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span }\n     }\n \n     pub fn stmt_item(&self, sp: Span, item: P<ast::Item>) -> ast::Stmt {\n-        ast::Stmt {\n-            id: ast::DUMMY_NODE_ID,\n-            kind: ast::StmtKind::Item(item),\n-            span: sp,\n-            tokens: None,\n-        }\n+        ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Item(item), span: sp }\n     }\n \n     pub fn block_expr(&self, expr: P<ast::Expr>) -> P<ast::Block> {\n@@ -200,7 +187,6 @@ impl<'a> ExtCtxt<'a> {\n                 id: ast::DUMMY_NODE_ID,\n                 span: expr.span,\n                 kind: ast::StmtKind::Expr(expr),\n-                tokens: None,\n             }],\n         )\n     }"}, {"sha": "4ba75c21cf058a202d29800c5e801a7d57b334e3", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -1274,12 +1274,6 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         // we'll expand attributes on expressions separately\n         if !stmt.is_expr() {\n             let attr = if stmt.is_item() {\n-                // FIXME: Implement proper token collection for statements\n-                if let StmtKind::Item(item) = &mut stmt.kind {\n-                    stmt.tokens = item.tokens.take()\n-                } else {\n-                    unreachable!()\n-                };\n                 self.take_first_attr(&mut stmt)\n             } else {\n                 // Ignore derives on non-item statements for backwards compatibility.\n@@ -1295,7 +1289,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         if let StmtKind::MacCall(mac) = stmt.kind {\n-            let MacCallStmt { mac, style, attrs } = mac.into_inner();\n+            let MacCallStmt { mac, style, attrs, tokens: _ } = mac.into_inner();\n             self.check_attributes(&attrs);\n             let mut placeholder =\n                 self.collect_bang(mac, stmt.span, AstFragmentKind::Stmts).make_stmts();\n@@ -1312,10 +1306,10 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         // The placeholder expander gives ids to statements, so we avoid folding the id here.\n-        let ast::Stmt { id, kind, span, tokens } = stmt;\n+        let ast::Stmt { id, kind, span } = stmt;\n         noop_flat_map_stmt_kind(kind, self)\n             .into_iter()\n-            .map(|kind| ast::Stmt { id, kind, span, tokens: tokens.clone() })\n+            .map(|kind| ast::Stmt { id, kind, span })\n             .collect()\n     }\n "}, {"sha": "ce19e813bb3a69f507490029da48ea25ee67ffca", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -104,8 +104,9 @@ pub fn placeholder(\n                 mac: mac_placeholder(),\n                 style: ast::MacStmtStyle::Braces,\n                 attrs: ast::AttrVec::new(),\n+                tokens: None,\n             });\n-            ast::Stmt { id, span, kind: ast::StmtKind::MacCall(mac), tokens: None }\n+            ast::Stmt { id, span, kind: ast::StmtKind::MacCall(mac) }\n         }]),\n         AstFragmentKind::Arms => AstFragment::Arms(smallvec![ast::Arm {\n             attrs: Default::default(),\n@@ -331,12 +332,8 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n \n             // FIXME: We will need to preserve the original semicolon token and\n             // span as part of #15701\n-            let empty_stmt = ast::Stmt {\n-                id: ast::DUMMY_NODE_ID,\n-                kind: ast::StmtKind::Empty,\n-                span: DUMMY_SP,\n-                tokens: None,\n-            };\n+            let empty_stmt =\n+                ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Empty, span: DUMMY_SP };\n \n             if let Some(stmt) = stmts.pop() {\n                 if stmt.has_trailing_semicolon() {"}, {"sha": "f34990a1a103757c820f7c19aa7aa18b0a0eb137", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -810,7 +810,6 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n                 id: resolver.next_node_id(),\n                 kind: ast::StmtKind::Expr(expr),\n                 span: rustc_span::DUMMY_SP,\n-                tokens: None,\n             }\n         }\n \n@@ -827,7 +826,6 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n             id: self.resolver.next_node_id(),\n             span: rustc_span::DUMMY_SP,\n             kind: ast::StmtKind::Expr(loop_expr),\n-            tokens: None,\n         };\n \n         if self.within_static_or_const {"}, {"sha": "676c85e4afdceda21bd13b190a4895f9b472e545", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -2345,7 +2345,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n         enum InitKind {\n             Zeroed,\n             Uninit,\n-        };\n+        }\n \n         /// Information about why a type cannot be initialized this way.\n         /// Contains an error message and optionally a span to point at."}, {"sha": "428198cae8917377ee7ea648b37cae10b037b207", "filename": "compiler/rustc_lint/src/redundant_semicolon.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_lint%2Fsrc%2Fredundant_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_lint%2Fsrc%2Fredundant_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fredundant_semicolon.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -28,25 +28,40 @@ declare_lint_pass!(RedundantSemicolons => [REDUNDANT_SEMICOLONS]);\n \n impl EarlyLintPass for RedundantSemicolons {\n     fn check_block(&mut self, cx: &EarlyContext<'_>, block: &Block) {\n+        let mut after_item_stmt = false;\n         let mut seq = None;\n         for stmt in block.stmts.iter() {\n             match (&stmt.kind, &mut seq) {\n                 (StmtKind::Empty, None) => seq = Some((stmt.span, false)),\n                 (StmtKind::Empty, Some(seq)) => *seq = (seq.0.to(stmt.span), true),\n-                (_, seq) => maybe_lint_redundant_semis(cx, seq),\n+                (_, seq) => {\n+                    maybe_lint_redundant_semis(cx, seq, after_item_stmt);\n+                    after_item_stmt = matches!(stmt.kind, StmtKind::Item(_));\n+                }\n             }\n         }\n-        maybe_lint_redundant_semis(cx, &mut seq);\n+        maybe_lint_redundant_semis(cx, &mut seq, after_item_stmt);\n     }\n }\n \n-fn maybe_lint_redundant_semis(cx: &EarlyContext<'_>, seq: &mut Option<(Span, bool)>) {\n+fn maybe_lint_redundant_semis(\n+    cx: &EarlyContext<'_>,\n+    seq: &mut Option<(Span, bool)>,\n+    after_item_stmt: bool,\n+) {\n     if let Some((span, multiple)) = seq.take() {\n         // FIXME: Find a better way of ignoring the trailing\n         // semicolon from macro expansion\n         if span == rustc_span::DUMMY_SP {\n             return;\n         }\n+\n+        // FIXME: Lint on semicolons after item statements\n+        // once doing so doesn't break bootstrapping\n+        if after_item_stmt {\n+            return;\n+        }\n+\n         cx.struct_span_lint(REDUNDANT_SEMICOLONS, span, |lint| {\n             let (msg, rem) = if multiple {\n                 (\"unnecessary trailing semicolons\", \"remove these semicolons\")"}, {"sha": "9ad9d53cd0db3512205bde954f4fe049029d5718", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -1131,7 +1131,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n         struct ProhibitOpaqueTypes<'a, 'tcx> {\n             cx: &'a LateContext<'tcx>,\n-        };\n+        }\n \n         impl<'a, 'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'a, 'tcx> {\n             type BreakTy = Ty<'tcx>;"}, {"sha": "7538818b8afc33cb85ab0ab0b9f73f06273d36c0", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -254,7 +254,7 @@ macro_rules! make_mir_visitor {\n                 macro_rules! basic_blocks {\n                     (mut) => (body.basic_blocks_mut().iter_enumerated_mut());\n                     () => (body.basic_blocks().iter_enumerated());\n-                };\n+                }\n                 for (bb, data) in basic_blocks!($($mutability)?) {\n                     self.visit_basic_block_data(bb, data);\n                 }\n@@ -275,7 +275,7 @@ macro_rules! make_mir_visitor {\n                 macro_rules! type_annotations {\n                     (mut) => (body.user_type_annotations.iter_enumerated_mut());\n                     () => (body.user_type_annotations.iter_enumerated());\n-                };\n+                }\n \n                 for (index, annotation) in type_annotations!($($mutability)?) {\n                     self.visit_user_type_annotation(\n@@ -909,7 +909,7 @@ macro_rules! make_mir_visitor {\n                 macro_rules! basic_blocks {\n                     (mut) => (body.basic_blocks_mut());\n                     () => (body.basic_blocks());\n-                };\n+                }\n                 let basic_block = & $($mutability)? basic_blocks!($($mutability)?)[location.block];\n                 if basic_block.statements.len() == location.statement_index {\n                     if let Some(ref $($mutability)? terminator) = basic_block.terminator {"}, {"sha": "413c9cca589d9097107c0ebb0cce9f775e1e960c", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -540,7 +540,7 @@ fn polymorphize<'tcx>(\n \n     struct PolymorphizationFolder<'tcx> {\n         tcx: TyCtxt<'tcx>,\n-    };\n+    }\n \n     impl ty::TypeFolder<'tcx> for PolymorphizationFolder<'tcx> {\n         fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {"}, {"sha": "ec90f063a55240fb4afcca9094b010bcbbd77eae", "filename": "compiler/rustc_mir/src/interpret/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -15,7 +15,7 @@ where\n \n     struct UsedParamsNeedSubstVisitor<'tcx> {\n         tcx: TyCtxt<'tcx>,\n-    };\n+    }\n \n     impl<'tcx> TypeVisitor<'tcx> for UsedParamsNeedSubstVisitor<'tcx> {\n         type BreakTy = ();"}, {"sha": "44999c9b63ab6c2c428475f38ec6fe9fd3c2b232", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -6,6 +6,7 @@\n #![feature(or_patterns)]\n \n use rustc_ast as ast;\n+use rustc_ast::attr::HasAttrs;\n use rustc_ast::token::{self, DelimToken, Nonterminal, Token, TokenKind};\n use rustc_ast::tokenstream::{self, LazyTokenStream, TokenStream, TokenTree};\n use rustc_ast_pretty::pprust;\n@@ -251,29 +252,23 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n     // before we fall back to the stringification.\n \n     let convert_tokens =\n-        |tokens: &Option<LazyTokenStream>| tokens.as_ref().map(|t| t.create_token_stream());\n+        |tokens: Option<&LazyTokenStream>| tokens.as_ref().map(|t| t.create_token_stream());\n \n     let tokens = match *nt {\n         Nonterminal::NtItem(ref item) => prepend_attrs(&item.attrs, item.tokens.as_ref()),\n-        Nonterminal::NtBlock(ref block) => convert_tokens(&block.tokens),\n-        Nonterminal::NtStmt(ref stmt) => {\n-            // FIXME: We currently only collect tokens for `:stmt`\n-            // matchers in `macro_rules!` macros. When we start collecting\n-            // tokens for attributes on statements, we will need to prepend\n-            // attributes here\n-            convert_tokens(&stmt.tokens)\n-        }\n-        Nonterminal::NtPat(ref pat) => convert_tokens(&pat.tokens),\n-        Nonterminal::NtTy(ref ty) => convert_tokens(&ty.tokens),\n+        Nonterminal::NtBlock(ref block) => convert_tokens(block.tokens.as_ref()),\n+        Nonterminal::NtStmt(ref stmt) => prepend_attrs(stmt.attrs(), stmt.tokens()),\n+        Nonterminal::NtPat(ref pat) => convert_tokens(pat.tokens.as_ref()),\n+        Nonterminal::NtTy(ref ty) => convert_tokens(ty.tokens.as_ref()),\n         Nonterminal::NtIdent(ident, is_raw) => {\n             Some(tokenstream::TokenTree::token(token::Ident(ident.name, is_raw), ident.span).into())\n         }\n         Nonterminal::NtLifetime(ident) => {\n             Some(tokenstream::TokenTree::token(token::Lifetime(ident.name), ident.span).into())\n         }\n-        Nonterminal::NtMeta(ref attr) => convert_tokens(&attr.tokens),\n-        Nonterminal::NtPath(ref path) => convert_tokens(&path.tokens),\n-        Nonterminal::NtVis(ref vis) => convert_tokens(&vis.tokens),\n+        Nonterminal::NtMeta(ref attr) => convert_tokens(attr.tokens.as_ref()),\n+        Nonterminal::NtPath(ref path) => convert_tokens(path.tokens.as_ref()),\n+        Nonterminal::NtVis(ref vis) => convert_tokens(vis.tokens.as_ref()),\n         Nonterminal::NtTT(ref tt) => Some(tt.clone().into()),\n         Nonterminal::NtExpr(ref expr) | Nonterminal::NtLiteral(ref expr) => {\n             if expr.tokens.is_none() {"}, {"sha": "2a779c37b89627a10ae897b7c544e1797a919c74", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -1213,39 +1213,54 @@ impl<'a> Parser<'a> {\n         //\n         // This also makes `Parser` very cheap to clone, since\n         // there is no intermediate collection buffer to clone.\n+        #[derive(Clone)]\n         struct LazyTokenStreamImpl {\n             start_token: (Token, Spacing),\n             cursor_snapshot: TokenCursor,\n             num_calls: usize,\n             desugar_doc_comments: bool,\n+            trailing_semi: bool,\n         }\n         impl CreateTokenStream for LazyTokenStreamImpl {\n             fn create_token_stream(&self) -> TokenStream {\n+                let mut num_calls = self.num_calls;\n+                if self.trailing_semi {\n+                    num_calls += 1;\n+                }\n                 // The token produced by the final call to `next` or `next_desugared`\n                 // was not actually consumed by the callback. The combination\n                 // of chaining the initial token and using `take` produces the desired\n                 // result - we produce an empty `TokenStream` if no calls were made,\n                 // and omit the final token otherwise.\n                 let mut cursor_snapshot = self.cursor_snapshot.clone();\n                 let tokens = std::iter::once(self.start_token.clone())\n-                    .chain((0..self.num_calls).map(|_| {\n+                    .chain((0..num_calls).map(|_| {\n                         if self.desugar_doc_comments {\n                             cursor_snapshot.next_desugared()\n                         } else {\n                             cursor_snapshot.next()\n                         }\n                     }))\n-                    .take(self.num_calls);\n+                    .take(num_calls);\n \n                 make_token_stream(tokens)\n             }\n+            fn add_trailing_semi(&self) -> Box<dyn CreateTokenStream> {\n+                if self.trailing_semi {\n+                    panic!(\"Called `add_trailing_semi` twice!\");\n+                }\n+                let mut new = self.clone();\n+                new.trailing_semi = true;\n+                Box::new(new)\n+            }\n         }\n \n         let lazy_impl = LazyTokenStreamImpl {\n             start_token,\n             num_calls: self.token_cursor.num_next_calls - cursor_snapshot.num_next_calls,\n             cursor_snapshot,\n             desugar_doc_comments: self.desugar_doc_comments,\n+            trailing_semi: false,\n         };\n         Ok((ret, Some(LazyTokenStream::new(lazy_impl))))\n     }"}, {"sha": "c007f96a79800cb9b3b8055dc54998748b7ab618", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -117,8 +117,8 @@ impl<'a> Parser<'a> {\n                 let (stmt, tokens) = self.collect_tokens(|this| this.parse_stmt())?;\n                 match stmt {\n                     Some(mut s) => {\n-                        if s.tokens.is_none() {\n-                            s.tokens = tokens;\n+                        if s.tokens().is_none() {\n+                            s.set_tokens(tokens);\n                         }\n                         token::NtStmt(s)\n                     }"}, {"sha": "e974556f43a49eb7f30306f177665efa5eaf8302", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 84, "deletions": 40, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -7,8 +7,10 @@ use super::{BlockMode, Parser, Restrictions, SemiColonMode};\n use crate::maybe_whole;\n \n use rustc_ast as ast;\n+use rustc_ast::attr::HasAttrs;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, TokenKind};\n+use rustc_ast::tokenstream::LazyTokenStream;\n use rustc_ast::util::classify;\n use rustc_ast::{AttrStyle, AttrVec, Attribute, MacCall, MacCallStmt, MacStmtStyle};\n use rustc_ast::{Block, BlockCheckMode, Expr, ExprKind, Local, Stmt, StmtKind, DUMMY_NODE_ID};\n@@ -31,45 +33,75 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_stmt_without_recovery(&mut self) -> PResult<'a, Option<Stmt>> {\n-        maybe_whole!(self, NtStmt, |x| Some(x));\n-\n-        let attrs = self.parse_outer_attributes()?;\n+        let mut attrs = self.parse_outer_attributes()?;\n+        let has_attrs = !attrs.is_empty();\n         let lo = self.token.span;\n \n-        let stmt = if self.eat_keyword(kw::Let) {\n-            self.parse_local_mk(lo, attrs.into())?\n-        } else if self.is_kw_followed_by_ident(kw::Mut) {\n-            self.recover_stmt_local(lo, attrs.into(), \"missing keyword\", \"let mut\")?\n-        } else if self.is_kw_followed_by_ident(kw::Auto) {\n-            self.bump(); // `auto`\n-            let msg = \"write `let` instead of `auto` to introduce a new variable\";\n-            self.recover_stmt_local(lo, attrs.into(), msg, \"let\")?\n-        } else if self.is_kw_followed_by_ident(sym::var) {\n-            self.bump(); // `var`\n-            let msg = \"write `let` instead of `var` to introduce a new variable\";\n-            self.recover_stmt_local(lo, attrs.into(), msg, \"let\")?\n-        } else if self.check_path() && !self.token.is_qpath_start() && !self.is_path_start_item() {\n-            // We have avoided contextual keywords like `union`, items with `crate` visibility,\n-            // or `auto trait` items. We aim to parse an arbitrary path `a::b` but not something\n-            // that starts like a path (1 token), but it fact not a path.\n-            // Also, we avoid stealing syntax from `parse_item_`.\n-            self.parse_stmt_path_start(lo, attrs)?\n-        } else if let Some(item) = self.parse_item_common(attrs.clone(), false, true, |_| true)? {\n-            // FIXME: Bad copy of attrs\n-            self.mk_stmt(lo.to(item.span), StmtKind::Item(P(item)))\n-        } else if self.eat(&token::Semi) {\n-            // Do not attempt to parse an expression if we're done here.\n-            self.error_outer_attrs(&attrs);\n-            self.mk_stmt(lo, StmtKind::Empty)\n-        } else if self.token != token::CloseDelim(token::Brace) {\n-            // Remainder are line-expr stmts.\n-            let e = self.parse_expr_res(Restrictions::STMT_EXPR, Some(attrs.into()))?;\n-            self.mk_stmt(lo.to(e.span), StmtKind::Expr(e))\n+        maybe_whole!(self, NtStmt, |stmt| {\n+            let mut stmt = stmt;\n+            stmt.visit_attrs(|stmt_attrs| {\n+                mem::swap(stmt_attrs, &mut attrs);\n+                stmt_attrs.extend(attrs);\n+            });\n+            Some(stmt)\n+        });\n+\n+        let parse_stmt_inner = |this: &mut Self| {\n+            let stmt = if this.eat_keyword(kw::Let) {\n+                this.parse_local_mk(lo, attrs.into())?\n+            } else if this.is_kw_followed_by_ident(kw::Mut) {\n+                this.recover_stmt_local(lo, attrs.into(), \"missing keyword\", \"let mut\")?\n+            } else if this.is_kw_followed_by_ident(kw::Auto) {\n+                this.bump(); // `auto`\n+                let msg = \"write `let` instead of `auto` to introduce a new variable\";\n+                this.recover_stmt_local(lo, attrs.into(), msg, \"let\")?\n+            } else if this.is_kw_followed_by_ident(sym::var) {\n+                this.bump(); // `var`\n+                let msg = \"write `let` instead of `var` to introduce a new variable\";\n+                this.recover_stmt_local(lo, attrs.into(), msg, \"let\")?\n+            } else if this.check_path()\n+                && !this.token.is_qpath_start()\n+                && !this.is_path_start_item()\n+            {\n+                // We have avoided contextual keywords like `union`, items with `crate` visibility,\n+                // or `auto trait` items. We aim to parse an arbitrary path `a::b` but not something\n+                // that starts like a path (1 token), but it fact not a path.\n+                // Also, we avoid stealing syntax from `parse_item_`.\n+                this.parse_stmt_path_start(lo, attrs)?\n+            } else if let Some(item) =\n+                this.parse_item_common(attrs.clone(), false, true, |_| true)?\n+            {\n+                // FIXME: Bad copy of attrs\n+                this.mk_stmt(lo.to(item.span), StmtKind::Item(P(item)))\n+            } else if this.eat(&token::Semi) {\n+                // Do not attempt to parse an expression if we're done here.\n+                this.error_outer_attrs(&attrs);\n+                this.mk_stmt(lo, StmtKind::Empty)\n+            } else if this.token != token::CloseDelim(token::Brace) {\n+                // Remainder are line-expr stmts.\n+                let e = this.parse_expr_res(Restrictions::STMT_EXPR, Some(attrs.into()))?;\n+                this.mk_stmt(lo.to(e.span), StmtKind::Expr(e))\n+            } else {\n+                this.error_outer_attrs(&attrs);\n+                return Ok(None);\n+            };\n+            Ok(Some(stmt))\n+        };\n+\n+        let stmt = if has_attrs {\n+            let (mut stmt, tokens) = self.collect_tokens(parse_stmt_inner)?;\n+            if let Some(stmt) = &mut stmt {\n+                // If we already have tokens (e.g. due to encounting an `NtStmt`),\n+                // use those instead.\n+                if stmt.tokens().is_none() {\n+                    stmt.set_tokens(tokens);\n+                }\n+            }\n+            stmt\n         } else {\n-            self.error_outer_attrs(&attrs);\n-            return Ok(None);\n+            parse_stmt_inner(self)?\n         };\n-        Ok(Some(stmt))\n+        Ok(stmt)\n     }\n \n     fn parse_stmt_path_start(&mut self, lo: Span, attrs: Vec<Attribute>) -> PResult<'a, Stmt> {\n@@ -107,7 +139,7 @@ impl<'a> Parser<'a> {\n \n         let kind = if delim == token::Brace || self.token == token::Semi || self.token == token::Eof\n         {\n-            StmtKind::MacCall(P(MacCallStmt { mac, style, attrs }))\n+            StmtKind::MacCall(P(MacCallStmt { mac, style, attrs, tokens: None }))\n         } else {\n             // Since none of the above applied, this is an expression statement macro.\n             let e = self.mk_expr(lo.to(hi), ExprKind::MacCall(mac), AttrVec::new());\n@@ -219,7 +251,7 @@ impl<'a> Parser<'a> {\n             }\n         };\n         let hi = if self.token == token::Semi { self.token.span } else { self.prev_token.span };\n-        Ok(P(ast::Local { ty, pat, init, id: DUMMY_NODE_ID, span: lo.to(hi), attrs }))\n+        Ok(P(ast::Local { ty, pat, init, id: DUMMY_NODE_ID, span: lo.to(hi), attrs, tokens: None }))\n     }\n \n     /// Parses the RHS of a local variable declaration (e.g., '= 14;').\n@@ -376,6 +408,12 @@ impl<'a> Parser<'a> {\n             None => return Ok(None),\n         };\n \n+        let add_semi_token = |tokens: Option<&mut LazyTokenStream>| {\n+            if let Some(tokens) = tokens {\n+                *tokens = tokens.add_trailing_semi();\n+            }\n+        };\n+\n         let mut eat_semi = true;\n         match stmt.kind {\n             // Expression without semicolon.\n@@ -417,6 +455,7 @@ impl<'a> Parser<'a> {\n                     *expr = self.mk_expr_err(sp);\n                 }\n             }\n+            StmtKind::Expr(_) | StmtKind::MacCall(_) => {}\n             StmtKind::Local(ref mut local) => {\n                 if let Err(e) = self.expect_semi() {\n                     // We might be at the `,` in `let x = foo<bar, baz>;`. Try to recover.\n@@ -430,13 +469,18 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n                 eat_semi = false;\n+                // We just checked that there's a semicolon in the tokenstream,\n+                // so capture it\n+                add_semi_token(local.tokens.as_mut());\n             }\n-            StmtKind::Empty => eat_semi = false,\n-            _ => {}\n+            StmtKind::Empty | StmtKind::Item(_) | StmtKind::Semi(_) => eat_semi = false,\n         }\n \n         if eat_semi && self.eat(&token::Semi) {\n             stmt = stmt.add_trailing_semicolon();\n+            // We just checked that we have a semicolon in the tokenstream,\n+            // so capture it\n+            add_semi_token(stmt.tokens_mut());\n         }\n         stmt.span = stmt.span.to(self.prev_token.span);\n         Ok(Some(stmt))\n@@ -447,7 +491,7 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn mk_stmt(&self, span: Span, kind: StmtKind) -> Stmt {\n-        Stmt { id: DUMMY_NODE_ID, kind, span, tokens: None }\n+        Stmt { id: DUMMY_NODE_ID, kind, span }\n     }\n \n     pub(super) fn mk_stmt_err(&self, span: Span) -> Stmt {"}, {"sha": "aa1de6d51cba2c3b47f7ddcbdaadc8ef8490bec6", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -309,7 +309,7 @@ fn well_formed_types_in_env<'tcx>(\n         InherentImpl,\n         Fn,\n         Other,\n-    };\n+    }\n \n     let node_kind = match node {\n         Node::TraitItem(item) => match item.kind {"}, {"sha": "55c815b21ad206a13d9b27910d80275890dd5a50", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -477,7 +477,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n     struct ProhibitOpaqueVisitor<'tcx> {\n         opaque_identity_ty: Ty<'tcx>,\n         generics: &'tcx ty::Generics,\n-    };\n+    }\n \n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n         type BreakTy = Option<Ty<'tcx>>;"}, {"sha": "e19406d7a069737a2019de90db0003bad46d6952", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -919,7 +919,7 @@ fn test_from_iter_partially_drained_in_place_specialization() {\n \n #[test]\n fn test_from_iter_specialization_with_iterator_adapters() {\n-    fn assert_in_place_trait<T: InPlaceIterable>(_: &T) {};\n+    fn assert_in_place_trait<T: InPlaceIterable>(_: &T) {}\n     let src: Vec<usize> = vec![0usize; 256];\n     let srcptr = src.as_ptr();\n     let iter = src\n@@ -1198,7 +1198,7 @@ fn drain_filter_consumed_panic() {\n     struct Check {\n         index: usize,\n         drop_counts: Rc<Mutex<Vec<usize>>>,\n-    };\n+    }\n \n     impl Drop for Check {\n         fn drop(&mut self) {\n@@ -1250,7 +1250,7 @@ fn drain_filter_unconsumed_panic() {\n     struct Check {\n         index: usize,\n         drop_counts: Rc<Mutex<Vec<usize>>>,\n-    };\n+    }\n \n     impl Drop for Check {\n         fn drop(&mut self) {"}, {"sha": "23e8d1d856a30aaa4e2c7b844baea43d19b87b88", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -1182,7 +1182,7 @@ impl<'a> Formatter<'a> {\n     /// ```\n     /// use std::fmt;\n     ///\n-    /// struct Foo { nb: i32 };\n+    /// struct Foo { nb: i32 }\n     ///\n     /// impl Foo {\n     ///     fn new(nb: i32) -> Foo {"}, {"sha": "af63e1bb097b8c18e4bd2dd8507bc5947fb34b1f", "filename": "library/core/src/future/poll_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -21,7 +21,7 @@ use crate::task::{Context, Poll};\n ///\n /// let read_future = poll_fn(read_line);\n /// assert_eq!(read_future.await, \"Hello, World!\".to_owned());\n-/// # };\n+/// # }\n /// ```\n #[unstable(feature = \"future_poll_fn\", issue = \"72302\")]\n pub fn poll_fn<T, F>(f: F) -> PollFn<F>"}, {"sha": "1924720b949f84f479b9650db260c06ebb77b047", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -348,7 +348,7 @@ impl<T> MaybeUninit<T> {\n     /// ```rust,no_run\n     /// use std::mem::MaybeUninit;\n     ///\n-    /// enum NotZero { One = 1, Two = 2 };\n+    /// enum NotZero { One = 1, Two = 2 }\n     ///\n     /// let x = MaybeUninit::<(u8, NotZero)>::zeroed();\n     /// let x = unsafe { x.assume_init() };"}, {"sha": "1970b17e2672147e474554b80227c3ca805de8d4", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -18,7 +18,7 @@ fn test() {\n         struct Pair {\n             fst: isize,\n             snd: isize,\n-        };\n+        }\n         let mut p = Pair { fst: 10, snd: 20 };\n         let pptr: *mut Pair = &mut p;\n         let iptr: *mut isize = pptr as *mut isize;"}, {"sha": "5c12a54eef1208e83fcbc63fae0ab31712d4b568", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -265,14 +265,14 @@ where\n             running_tests.remove(test);\n         }\n         timed_out\n-    };\n+    }\n \n     fn calc_timeout(running_tests: &TestMap) -> Option<Duration> {\n         running_tests.values().min().map(|next_timeout| {\n             let now = Instant::now();\n             if *next_timeout >= now { *next_timeout - now } else { Duration::new(0, 0) }\n         })\n-    };\n+    }\n \n     if concurrency == 1 {\n         while !remaining.is_empty() {"}, {"sha": "a8d00803a534a3c6cd892e202f2fca42f19cc5e5", "filename": "src/test/ui/associated-type-bounds/dyn-impl-trait-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-impl-trait-type.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -30,7 +30,7 @@ fn def_et3() -> Et3 {\n     impl Tr1 for A {\n         type As1 = core::ops::Range<u8>;\n         fn mk(&self) -> Self::As1 { 0..10 }\n-    };\n+    }\n     Box::new(A)\n }\n pub fn use_et3() {"}, {"sha": "b7869e22b4a14c585a0596f60f0104284743cbb9", "filename": "src/test/ui/associated-type-bounds/dyn-lcsit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -33,7 +33,7 @@ const cdef_et3: &dyn Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>>\n     impl Tr1 for A {\n         type As1 = core::ops::Range<u8>;\n         fn mk(&self) -> Self::As1 { 0..10 }\n-    };\n+    }\n     &A\n };\n pub fn use_et3() {"}, {"sha": "08f965452ef48a30e5b3941bf34f7559fc03edeb", "filename": "src/test/ui/associated-type-bounds/dyn-rpit-and-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-rpit-and-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-rpit-and-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-rpit-and-let.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -35,7 +35,7 @@ fn def_et3() -> Box<dyn Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>\n     impl Tr1 for A {\n         type As1 = core::ops::Range<u8>;\n         fn mk(&self) -> Self::As1 { 0..10 }\n-    };\n+    }\n     let x /* : Box<dyn Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>>> */\n         = Box::new(A);\n     x"}, {"sha": "5364f25f89a1154061fc7b9b51183e3b03dfeada", "filename": "src/test/ui/associated-type-bounds/lcsit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -39,7 +39,7 @@ const cdef_et3: impl Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>>\n     impl Tr1 for A {\n         type As1 = core::ops::Range<u8>;\n         fn mk(&self) -> Self::As1 { 0..10 }\n-    };\n+    }\n     let x: impl Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>> = A;\n     x\n };"}, {"sha": "47cadf3310bd8612c448661d189fb5b36b16915b", "filename": "src/test/ui/associated-type-bounds/rpit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Frpit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Frpit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Frpit.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -27,7 +27,7 @@ fn def_et3() -> impl Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>>\n     impl Tr1 for A {\n         type As1 = core::ops::Range<u8>;\n         fn mk(self) -> Self::As1 { 0..10 }\n-    };\n+    }\n     A\n }\n "}, {"sha": "025540ce20070b21be2ab627008b0436f022e818", "filename": "src/test/ui/associated-type-bounds/trait-alias-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -31,7 +31,7 @@ fn def_et3() -> Et3 {\n     impl Tr1 for A {\n         type As1 = core::ops::Range<u8>;\n         fn mk(self) -> Self::As1 { 0..10 }\n-    };\n+    }\n     A\n }\n pub fn use_et3() {"}, {"sha": "575fbd33572f094f5a284faf76ab9bb5499a68fa", "filename": "src/test/ui/const-generics/min_const_generics/macro.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -15,22 +15,22 @@ impl<const N: usize> Marker<N> for Example<N> {}\n \n fn make_marker() -> impl Marker<{\n     #[macro_export]\n-    macro_rules! const_macro { () => {{ 3 }} }; inline!()\n+    macro_rules! const_macro { () => {{ 3 }} } inline!()\n }> {\n   Example::<{ const_macro!() }>\n }\n \n fn from_marker(_: impl Marker<{\n     #[macro_export]\n-    macro_rules! inline { () => {{ 3 }} }; inline!()\n+    macro_rules! inline { () => {{ 3 }} } inline!()\n }>) {}\n \n fn main() {\n   let _ok = Example::<{\n     #[macro_export]\n     macro_rules! gimme_a_const {\n       ($rusty: ident) => {{ let $rusty = 3; *&$rusty }}\n-    };\n+    }\n     gimme_a_const!(run)\n   }>;\n \n@@ -42,13 +42,13 @@ fn main() {\n \n   let _ok: [u8; {\n     #[macro_export]\n-    macro_rules! const_two { () => {{ 2 }} };\n+    macro_rules! const_two { () => {{ 2 }} }\n     const_two!()\n   }];\n \n   let _ok = [0; {\n     #[macro_export]\n-    macro_rules! const_three { () => {{ 3 }} };\n+    macro_rules! const_three { () => {{ 3 }} }\n     const_three!()\n   }];\n   let _ok = [0; const_three!()];"}, {"sha": "f40815fdbdbc5626ad3ccb166cf28d2c867523eb", "filename": "src/test/ui/issues/issue-10767.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fissues%2Fissue-10767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fissues%2Fissue-10767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10767.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -5,6 +5,6 @@\n \n pub fn main() {\n     fn f() {\n-    };\n+    }\n     let _: Box<fn()> = box (f as fn());\n }"}, {"sha": "a6bea38580477303c0cd61d328232d10d76fd505", "filename": "src/test/ui/issues/issue-2074.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fissues%2Fissue-2074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fissues%2Fissue-2074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2074.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -5,11 +5,11 @@\n \n pub fn main() {\n     let one = || {\n-        enum r { a };\n+        enum r { a }\n         r::a as usize\n     };\n     let two = || {\n-        enum r { a };\n+        enum r { a }\n         r::a as usize\n     };\n     one(); two();"}, {"sha": "4592bc31a39769cabd0fa86892ce296c66a8c0fd", "filename": "src/test/ui/lint/redundant-semicolon/item-stmt-semi.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fitem-stmt-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fitem-stmt-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fitem-stmt-semi.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+// This test should stop compiling\n+// we decide to enable this lint for item statements.\n+\n+#![deny(redundant_semicolons)]\n+\n+fn main() {\n+    fn inner() {};\n+    struct Bar {};\n+}"}, {"sha": "a315981b6a69fdda98d50d7152a990088a598012", "filename": "src/test/ui/macros/macro-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fmacros%2Fmacro-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fmacros%2Fmacro-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-2.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -3,7 +3,7 @@ pub fn main() {\n \n     macro_rules! mylambda_tt {\n         ($x:ident, $body:expr) => ({\n-            fn f($x: isize) -> isize { return $body; };\n+            fn f($x: isize) -> isize { return $body; }\n             f\n         })\n     }"}, {"sha": "6c011c897da50ffd7e6c397ff74a334aa3ddc83d", "filename": "src/test/ui/macros/macro-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fmacros%2Fmacro-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fmacros%2Fmacro-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -8,7 +8,7 @@ mod m {\n \n macro_rules! foo {\n     ($p:path) => ({\n-        fn f() -> $p { 10 };\n+        fn f() -> $p { 10 }\n         f()\n     })\n }"}, {"sha": "25243aeef3b446569ea6edef513d9bb6e7ad3bdd", "filename": "src/test/ui/proc-macro/allowed-attr-stmt-expr.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -13,19 +13,28 @@ extern crate std;\n \n extern crate attr_stmt_expr;\n extern crate test_macros;\n-use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr};\n+use attr_stmt_expr::{expect_let, expect_my_macro_stmt, expect_expr, expect_my_macro_expr};\n use test_macros::print_attr;\n-use std::println;\n+\n+// We don't use `std::println` so that we avoid loading hygiene\n+// information from libstd, which would affect the SyntaxContext ids\n+macro_rules! my_macro {\n+    ($($tt:tt)*) => { () }\n+}\n+\n \n fn print_str(string: &'static str) {\n     // macros are handled a bit differently\n-    #[expect_print_expr]\n-    println!(\"{}\", string)\n+    #[expect_my_macro_expr]\n+    my_macro!(\"{}\", string)\n }\n \n macro_rules! make_stmt {\n     ($stmt:stmt) => {\n-        $stmt\n+        #[print_attr]\n+        #[rustc_dummy]\n+        $stmt; // This semicolon is *not* passed to the macro,\n+               // since `$stmt` is already a statement.\n     }\n }\n \n@@ -35,6 +44,10 @@ macro_rules! second_make_stmt {\n     }\n }\n \n+// The macro will see a semicolon here\n+#[print_attr]\n+struct ItemWithSemi;\n+\n \n fn main() {\n     make_stmt!(struct Foo {});\n@@ -44,8 +57,8 @@ fn main() {\n     let string = \"Hello, world!\";\n \n     #[print_attr]\n-    #[expect_print_stmt]\n-    println!(\"{}\", string);\n+    #[expect_my_macro_stmt]\n+    my_macro!(\"{}\", string);\n \n     #[print_attr]\n     second_make_stmt!(#[allow(dead_code)] struct Bar {});\n@@ -54,6 +67,12 @@ fn main() {\n     #[rustc_dummy]\n     struct Other {};\n \n+    // The macro also sees a semicolon,\n+    // for consistency with the `ItemWithSemi` case above.\n+    #[print_attr]\n+    #[rustc_dummy]\n+    struct NonBracedStruct;\n+\n     #[expect_expr]\n     print_str(\"string\")\n }"}, {"sha": "6cf864f35908583ae531beea9d791b92bd5684f6", "filename": "src/test/ui/proc-macro/allowed-attr-stmt-expr.stdout", "status": "modified", "additions": 173, "deletions": 39, "changes": 212, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -1,70 +1,117 @@\n+PRINT-ATTR INPUT (DISPLAY): struct ItemWithSemi ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:49:1: 49:7 (#0),\n+    },\n+    Ident {\n+        ident: \"ItemWithSemi\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:49:8: 49:20 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:49:20: 49:21 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Foo { }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:35:9: 35:10 (#11),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"rustc_dummy\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:35:11: 35:22 (#11),\n+            },\n+        ],\n+        span: $DIR/allowed-attr-stmt-expr.rs:35:10: 35:23 (#11),\n+    },\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:53:16: 53:22 (#0),\n+    },\n+    Ident {\n+        ident: \"Foo\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:53:23: 53:26 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [],\n+        span: $DIR/allowed-attr-stmt-expr.rs:53:27: 53:29 (#0),\n+    },\n+]\n PRINT-ATTR INPUT (DISPLAY): #[expect_let] let string = \"Hello, world!\" ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:56:5: 56:6 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"expect_let\",\n-                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:56:7: 56:17 (#0),\n             },\n         ],\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:56:6: 56:18 (#0),\n     },\n     Ident {\n         ident: \"let\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:57:5: 57:8 (#0),\n     },\n     Ident {\n         ident: \"string\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:57:9: 57:15 (#0),\n     },\n     Punct {\n         ch: '=',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:57:16: 57:17 (#0),\n     },\n     Literal {\n         kind: Str,\n         symbol: \"Hello, world!\",\n         suffix: None,\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:57:18: 57:33 (#0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:57:33: 57:34 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): #[expect_print_stmt] println ! (\"{}\", string) ;\n+PRINT-ATTR INPUT (DISPLAY): #[expect_my_macro_stmt] my_macro ! (\"{}\", string) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:60:5: 60:6 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n-                ident: \"expect_print_stmt\",\n-                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                ident: \"expect_my_macro_stmt\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:60:7: 60:27 (#0),\n             },\n         ],\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:60:6: 60:28 (#0),\n     },\n     Ident {\n-        ident: \"println\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        ident: \"my_macro\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:61:5: 61:13 (#0),\n     },\n     Punct {\n         ch: '!',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:61:13: 61:14 (#0),\n     },\n     Group {\n         delimiter: Parenthesis,\n@@ -73,115 +120,202 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n                 kind: Str,\n                 symbol: \"{}\",\n                 suffix: None,\n-                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:61:15: 61:19 (#0),\n             },\n             Punct {\n                 ch: ',',\n                 spacing: Alone,\n-                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:61:19: 61:20 (#0),\n             },\n             Ident {\n                 ident: \"string\",\n-                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:61:21: 61:27 (#0),\n             },\n         ],\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:61:14: 61:28 (#0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:61:28: 61:29 (#0),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): second_make_stmt ! (#[allow(dead_code)] struct Bar { }) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"second_make_stmt\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:5: 64:21 (#0),\n     },\n     Punct {\n         ch: '!',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:21: 64:22 (#0),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Punct {\n                 ch: '#',\n                 spacing: Alone,\n-                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:64:23: 64:24 (#0),\n             },\n             Group {\n                 delimiter: Bracket,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"allow\",\n-                        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                        span: $DIR/allowed-attr-stmt-expr.rs:64:25: 64:30 (#0),\n                     },\n                     Group {\n                         delimiter: Parenthesis,\n                         stream: TokenStream [\n                             Ident {\n                                 ident: \"dead_code\",\n-                                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                                span: $DIR/allowed-attr-stmt-expr.rs:64:31: 64:40 (#0),\n                             },\n                         ],\n-                        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                        span: $DIR/allowed-attr-stmt-expr.rs:64:30: 64:41 (#0),\n                     },\n                 ],\n-                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:64:24: 64:42 (#0),\n             },\n             Ident {\n                 ident: \"struct\",\n-                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:64:43: 64:49 (#0),\n             },\n             Ident {\n                 ident: \"Bar\",\n-                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:64:50: 64:53 (#0),\n             },\n             Group {\n                 delimiter: Brace,\n                 stream: TokenStream [],\n-                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:64:54: 64:56 (#0),\n             },\n         ],\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:22: 64:57 (#0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:57: 64:58 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] #[allow(dead_code)] struct Bar { }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:35:9: 35:10 (#32),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"rustc_dummy\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:35:11: 35:22 (#32),\n+            },\n+        ],\n+        span: $DIR/allowed-attr-stmt-expr.rs:35:10: 35:23 (#32),\n+    },\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:23: 64:24 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"allow\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:64:25: 64:30 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"dead_code\",\n+                        span: $DIR/allowed-attr-stmt-expr.rs:64:31: 64:40 (#0),\n+                    },\n+                ],\n+                span: $DIR/allowed-attr-stmt-expr.rs:64:30: 64:41 (#0),\n+            },\n+        ],\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:24: 64:42 (#0),\n+    },\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:43: 64:49 (#0),\n+    },\n+    Ident {\n+        ident: \"Bar\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:50: 64:53 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [],\n+        span: $DIR/allowed-attr-stmt-expr.rs:64:54: 64:56 (#0),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Other { }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:67:5: 67:6 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"rustc_dummy\",\n-                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/allowed-attr-stmt-expr.rs:67:7: 67:18 (#0),\n             },\n         ],\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:67:6: 67:19 (#0),\n     },\n     Ident {\n         ident: \"struct\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:68:5: 68:11 (#0),\n     },\n     Ident {\n         ident: \"Other\",\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:68:12: 68:17 (#0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [],\n-        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/allowed-attr-stmt-expr.rs:68:18: 68:20 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct NonBracedStruct ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:73:5: 73:6 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"rustc_dummy\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:73:7: 73:18 (#0),\n+            },\n+        ],\n+        span: $DIR/allowed-attr-stmt-expr.rs:73:6: 73:19 (#0),\n+    },\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:74:5: 74:11 (#0),\n+    },\n+    Ident {\n+        ident: \"NonBracedStruct\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:74:12: 74:27 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:74:27: 74:28 (#0),\n     },\n ]"}, {"sha": "0403684cda004febfbb194321e846782b051a6a5", "filename": "src/test/ui/proc-macro/attr-stmt-expr.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -11,19 +11,26 @@ extern crate test_macros;\n extern crate attr_stmt_expr;\n \n use test_macros::print_attr;\n-use std::println;\n-use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr};\n+use attr_stmt_expr::{expect_let, expect_my_macro_stmt, expect_expr, expect_my_macro_expr};\n+\n+// We don't use `std::println` so that we avoid loading hygiene\n+// information from libstd, which would affect the SyntaxContext ids\n+macro_rules! my_macro {\n+    ($($tt:tt)*) => { () }\n+}\n \n fn print_str(string: &'static str) {\n     // macros are handled a bit differently\n-    #[expect_print_expr]\n+    #[expect_my_macro_expr]\n     //~^ ERROR attributes on expressions are experimental\n     //~| HELP add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n-    println!(\"{}\", string)\n+    my_macro!(\"{}\", string)\n }\n \n macro_rules! make_stmt {\n     ($stmt:stmt) => {\n+        #[print_attr]\n+        #[rustc_dummy]\n         $stmt\n     }\n }\n@@ -42,8 +49,8 @@ fn main() {\n     let string = \"Hello, world!\";\n \n     #[print_attr]\n-    #[expect_print_stmt]\n-    println!(\"{}\", string);\n+    #[expect_my_macro_stmt]\n+    my_macro!(\"{}\", string);\n \n     #[print_attr]\n     second_make_stmt!(#[allow(dead_code)] struct Bar {});"}, {"sha": "56178259d4352ff6502b2a652308c6de9bbe6674", "filename": "src/test/ui/proc-macro/attr-stmt-expr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -1,14 +1,14 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/attr-stmt-expr.rs:19:5\n+  --> $DIR/attr-stmt-expr.rs:24:5\n    |\n-LL |     #[expect_print_expr]\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+LL |     #[expect_my_macro_expr]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/attr-stmt-expr.rs:55:5\n+  --> $DIR/attr-stmt-expr.rs:62:5\n    |\n LL |     #[expect_expr]\n    |     ^^^^^^^^^^^^^^"}, {"sha": "f75309e6872f96b305d6ff48a88b2c96fe2af5c9", "filename": "src/test/ui/proc-macro/attr-stmt-expr.stdout", "status": "modified", "additions": 126, "deletions": 39, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -1,70 +1,101 @@\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Foo { }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:33:9: 33:10 (#8),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"rustc_dummy\",\n+                span: $DIR/attr-stmt-expr.rs:33:11: 33:22 (#8),\n+            },\n+        ],\n+        span: $DIR/attr-stmt-expr.rs:33:10: 33:23 (#8),\n+    },\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/attr-stmt-expr.rs:45:16: 45:22 (#0),\n+    },\n+    Ident {\n+        ident: \"Foo\",\n+        span: $DIR/attr-stmt-expr.rs:45:23: 45:26 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [],\n+        span: $DIR/attr-stmt-expr.rs:45:27: 45:29 (#0),\n+    },\n+]\n PRINT-ATTR INPUT (DISPLAY): #[expect_let] let string = \"Hello, world!\" ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:48:5: 48:6 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"expect_let\",\n-                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/attr-stmt-expr.rs:48:7: 48:17 (#0),\n             },\n         ],\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:48:6: 48:18 (#0),\n     },\n     Ident {\n         ident: \"let\",\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:49:5: 49:8 (#0),\n     },\n     Ident {\n         ident: \"string\",\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:49:9: 49:15 (#0),\n     },\n     Punct {\n         ch: '=',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:49:16: 49:17 (#0),\n     },\n     Literal {\n         kind: Str,\n         symbol: \"Hello, world!\",\n         suffix: None,\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:49:18: 49:33 (#0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:49:33: 49:34 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): #[expect_print_stmt] println ! (\"{}\", string) ;\n+PRINT-ATTR INPUT (DISPLAY): #[expect_my_macro_stmt] my_macro ! (\"{}\", string) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:52:5: 52:6 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n-                ident: \"expect_print_stmt\",\n-                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                ident: \"expect_my_macro_stmt\",\n+                span: $DIR/attr-stmt-expr.rs:52:7: 52:27 (#0),\n             },\n         ],\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:52:6: 52:28 (#0),\n     },\n     Ident {\n-        ident: \"println\",\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        ident: \"my_macro\",\n+        span: $DIR/attr-stmt-expr.rs:53:5: 53:13 (#0),\n     },\n     Punct {\n         ch: '!',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:53:13: 53:14 (#0),\n     },\n     Group {\n         delimiter: Parenthesis,\n@@ -73,115 +104,171 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n                 kind: Str,\n                 symbol: \"{}\",\n                 suffix: None,\n-                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/attr-stmt-expr.rs:53:15: 53:19 (#0),\n             },\n             Punct {\n                 ch: ',',\n                 spacing: Alone,\n-                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/attr-stmt-expr.rs:53:19: 53:20 (#0),\n             },\n             Ident {\n                 ident: \"string\",\n-                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/attr-stmt-expr.rs:53:21: 53:27 (#0),\n             },\n         ],\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:53:14: 53:28 (#0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:53:28: 53:29 (#0),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): second_make_stmt ! (#[allow(dead_code)] struct Bar { }) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"second_make_stmt\",\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:56:5: 56:21 (#0),\n     },\n     Punct {\n         ch: '!',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:56:21: 56:22 (#0),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Punct {\n                 ch: '#',\n                 spacing: Alone,\n-                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/attr-stmt-expr.rs:56:23: 56:24 (#0),\n             },\n             Group {\n                 delimiter: Bracket,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"allow\",\n-                        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                        span: $DIR/attr-stmt-expr.rs:56:25: 56:30 (#0),\n                     },\n                     Group {\n                         delimiter: Parenthesis,\n                         stream: TokenStream [\n                             Ident {\n                                 ident: \"dead_code\",\n-                                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                                span: $DIR/attr-stmt-expr.rs:56:31: 56:40 (#0),\n                             },\n                         ],\n-                        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                        span: $DIR/attr-stmt-expr.rs:56:30: 56:41 (#0),\n                     },\n                 ],\n-                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/attr-stmt-expr.rs:56:24: 56:42 (#0),\n             },\n             Ident {\n                 ident: \"struct\",\n-                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/attr-stmt-expr.rs:56:43: 56:49 (#0),\n             },\n             Ident {\n                 ident: \"Bar\",\n-                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/attr-stmt-expr.rs:56:50: 56:53 (#0),\n             },\n             Group {\n                 delimiter: Brace,\n                 stream: TokenStream [],\n-                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/attr-stmt-expr.rs:56:54: 56:56 (#0),\n             },\n         ],\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:56:22: 56:57 (#0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:56:57: 56:58 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] #[allow(dead_code)] struct Bar { }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:33:9: 33:10 (#29),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"rustc_dummy\",\n+                span: $DIR/attr-stmt-expr.rs:33:11: 33:22 (#29),\n+            },\n+        ],\n+        span: $DIR/attr-stmt-expr.rs:33:10: 33:23 (#29),\n+    },\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:56:23: 56:24 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"allow\",\n+                span: $DIR/attr-stmt-expr.rs:56:25: 56:30 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"dead_code\",\n+                        span: $DIR/attr-stmt-expr.rs:56:31: 56:40 (#0),\n+                    },\n+                ],\n+                span: $DIR/attr-stmt-expr.rs:56:30: 56:41 (#0),\n+            },\n+        ],\n+        span: $DIR/attr-stmt-expr.rs:56:24: 56:42 (#0),\n+    },\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/attr-stmt-expr.rs:56:43: 56:49 (#0),\n+    },\n+    Ident {\n+        ident: \"Bar\",\n+        span: $DIR/attr-stmt-expr.rs:56:50: 56:53 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [],\n+        span: $DIR/attr-stmt-expr.rs:56:54: 56:56 (#0),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Other { }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:59:5: 59:6 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"rustc_dummy\",\n-                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                span: $DIR/attr-stmt-expr.rs:59:7: 59:18 (#0),\n             },\n         ],\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:59:6: 59:19 (#0),\n     },\n     Ident {\n         ident: \"struct\",\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:60:5: 60:11 (#0),\n     },\n     Ident {\n         ident: \"Other\",\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:60:12: 60:17 (#0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [],\n-        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+        span: $DIR/attr-stmt-expr.rs:60:18: 60:20 (#0),\n     },\n ]"}, {"sha": "19183c616516acf316149b15d89531adcddbc873", "filename": "src/test/ui/proc-macro/auxiliary/attr-stmt-expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -15,9 +15,9 @@ pub fn expect_let(attr: TokenStream, item: TokenStream) -> TokenStream {\n }\n \n #[proc_macro_attribute]\n-pub fn expect_print_stmt(attr: TokenStream, item: TokenStream) -> TokenStream {\n+pub fn expect_my_macro_stmt(attr: TokenStream, item: TokenStream) -> TokenStream {\n     assert!(attr.to_string().is_empty());\n-    assert_eq!(item.to_string(), \"println ! (\\\"{}\\\", string) ;\");\n+    assert_eq!(item.to_string(), \"my_macro ! (\\\"{}\\\", string) ;\");\n     item\n }\n \n@@ -29,9 +29,9 @@ pub fn expect_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n }\n \n #[proc_macro_attribute]\n-pub fn expect_print_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n+pub fn expect_my_macro_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n     assert!(attr.to_string().is_empty());\n-    assert_eq!(item.to_string(), \"println ! (\\\"{}\\\", string)\");\n+    assert_eq!(item.to_string(), \"my_macro ! (\\\"{}\\\", string)\");\n     item\n }\n "}, {"sha": "111b9ba94773fb2913dc100785a436d976226d16", "filename": "src/test/ui/structs-enums/nested-enum-same-names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fstructs-enums%2Fnested-enum-same-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fstructs-enums%2Fnested-enum-same-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fnested-enum-same-names.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -17,10 +17,10 @@ as it does not include the method name in the symbol name.\n pub struct Foo;\n impl Foo {\n     pub fn foo() {\n-        enum Panic { Common };\n+        enum Panic { Common }\n     }\n     pub fn bar() {\n-        enum Panic { Common };\n+        enum Panic { Common }\n     }\n }\n "}, {"sha": "90f56d5fa71d164324e220f0647dda9216a189d0", "filename": "src/test/ui/try-is-identifier-edition2015.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Ftry-is-identifier-edition2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Ftry-is-identifier-edition2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-is-identifier-edition2015.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -5,7 +5,7 @@\n \n fn main() {\n     let try = 2;\n-    struct try { try: u32 };\n+    struct try { try: u32 }\n     let try: try = try { try };\n     assert_eq!(try.try, 2);\n }"}, {"sha": "fb87d8ea0ba7f0a52df9e639785492a6205f2289", "filename": "src/test/ui/zero-sized/zero-size-type-destructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fzero-sized%2Fzero-size-type-destructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae328bef47dffcbf363e5ae873f419c06a5511d/src%2Ftest%2Fui%2Fzero-sized%2Fzero-size-type-destructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fzero-sized%2Fzero-size-type-destructors.rs?ref=4ae328bef47dffcbf363e5ae873f419c06a5511d", "patch": "@@ -10,7 +10,7 @@ pub fn foo() {\n         fn drop(&mut self) {\n           unsafe { destructions -= 1 };\n         }\n-    };\n+    }\n \n     let _x = [Foo, Foo, Foo];\n }"}]}