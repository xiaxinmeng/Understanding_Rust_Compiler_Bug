{"sha": "1a0dfb399cb803ca2e36688fb32f8a74bc903d8e", "node_id": "C_kwDOAAsO6NoAKDFhMGRmYjM5OWNiODAzY2EyZTM2Njg4ZmIzMmY4YTc0YmM5MDNkOGU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-23T15:44:39Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-23T15:44:39Z"}, "message": "Add a jobserver based concurrency limiter", "tree": {"sha": "834b588c6a3cca12afb902f285b2c02129eaaa5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/834b588c6a3cca12afb902f285b2c02129eaaa5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a0dfb399cb803ca2e36688fb32f8a74bc903d8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a0dfb399cb803ca2e36688fb32f8a74bc903d8e", "html_url": "https://github.com/rust-lang/rust/commit/1a0dfb399cb803ca2e36688fb32f8a74bc903d8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a0dfb399cb803ca2e36688fb32f8a74bc903d8e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5896e5cdfaab217e7948a3d91a39d2644e866e85", "url": "https://api.github.com/repos/rust-lang/rust/commits/5896e5cdfaab217e7948a3d91a39d2644e866e85", "html_url": "https://github.com/rust-lang/rust/commit/5896e5cdfaab217e7948a3d91a39d2644e866e85"}], "stats": {"total": 155, "additions": 155, "deletions": 0}, "files": [{"sha": "eaf3a61f40394ed3aaa0172255bbfccadd46b72b", "filename": "src/concurrency_limiter.rs", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/1a0dfb399cb803ca2e36688fb32f8a74bc903d8e/src%2Fconcurrency_limiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0dfb399cb803ca2e36688fb32f8a74bc903d8e/src%2Fconcurrency_limiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency_limiter.rs?ref=1a0dfb399cb803ca2e36688fb32f8a74bc903d8e", "patch": "@@ -0,0 +1,153 @@\n+use std::sync::{Arc, Condvar, Mutex};\n+\n+use rustc_session::Session;\n+\n+use jobserver::HelperThread;\n+\n+pub(super) struct ConcurrencyLimiter {\n+    helper_thread: Option<HelperThread>,\n+    state: Arc<Mutex<state::ConcurrencyLimiterState>>,\n+    available_token_condvar: Arc<Condvar>,\n+}\n+\n+impl ConcurrencyLimiter {\n+    pub(super) fn new(sess: &Session, pending_jobs: usize) -> Self {\n+        let state = Arc::new(Mutex::new(state::ConcurrencyLimiterState::new(pending_jobs)));\n+        let available_token_condvar = Arc::new(Condvar::new());\n+\n+        let state_helper = state.clone();\n+        let available_token_condvar_helper = available_token_condvar.clone();\n+        let helper_thread = sess\n+            .jobserver\n+            .clone()\n+            .into_helper_thread(move |token| {\n+                let mut state = state_helper.lock().unwrap();\n+                state.add_new_token(token.unwrap());\n+                available_token_condvar_helper.notify_one();\n+            })\n+            .unwrap();\n+        ConcurrencyLimiter {\n+            helper_thread: Some(helper_thread),\n+            state,\n+            available_token_condvar: Arc::new(Condvar::new()),\n+        }\n+    }\n+\n+    pub(super) fn acquire(&mut self) -> ConcurrencyLimiterToken {\n+        let mut state = self.state.lock().unwrap();\n+        loop {\n+            state.assert_invariants();\n+\n+            if state.try_start_job() {\n+                return ConcurrencyLimiterToken {\n+                    state: self.state.clone(),\n+                    available_token_condvar: self.available_token_condvar.clone(),\n+                };\n+            }\n+\n+            self.helper_thread.as_mut().unwrap().request_token();\n+            state = self.available_token_condvar.wait(state).unwrap();\n+        }\n+    }\n+}\n+\n+impl Drop for ConcurrencyLimiter {\n+    fn drop(&mut self) {\n+        //\n+        self.helper_thread.take();\n+\n+        // Assert that all jobs have finished\n+        let state = Mutex::get_mut(Arc::get_mut(&mut self.state).unwrap()).unwrap();\n+        state.assert_done();\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub(super) struct ConcurrencyLimiterToken {\n+    state: Arc<Mutex<state::ConcurrencyLimiterState>>,\n+    available_token_condvar: Arc<Condvar>,\n+}\n+\n+impl Drop for ConcurrencyLimiterToken {\n+    fn drop(&mut self) {\n+        let mut state = self.state.lock().unwrap();\n+        state.job_finished();\n+        self.available_token_condvar.notify_one();\n+    }\n+}\n+\n+mod state {\n+    use jobserver::Acquired;\n+\n+    #[derive(Debug)]\n+    pub(super) struct ConcurrencyLimiterState {\n+        pending_jobs: usize,\n+        active_jobs: usize,\n+\n+        // None is used to represent the implicit token, Some to represent explicit tokens\n+        tokens: Vec<Option<Acquired>>,\n+    }\n+\n+    impl ConcurrencyLimiterState {\n+        pub(super) fn new(pending_jobs: usize) -> Self {\n+            ConcurrencyLimiterState { pending_jobs, active_jobs: 0, tokens: vec![None] }\n+        }\n+\n+        pub(super) fn assert_invariants(&self) {\n+            // There must be no excess active jobs\n+            assert!(self.active_jobs <= self.pending_jobs);\n+\n+            // There may not be more active jobs than there are tokens\n+            assert!(self.active_jobs <= self.tokens.len());\n+        }\n+\n+        pub(super) fn assert_done(&self) {\n+            assert_eq!(self.pending_jobs, 0);\n+            assert_eq!(self.active_jobs, 0);\n+        }\n+\n+        pub(super) fn add_new_token(&mut self, token: Acquired) {\n+            self.tokens.push(Some(token));\n+            self.drop_excess_capacity();\n+        }\n+\n+        pub(super) fn try_start_job(&mut self) -> bool {\n+            if self.active_jobs < self.tokens.len() {\n+                // Using existing token\n+                self.job_started();\n+                return true;\n+            }\n+\n+            false\n+        }\n+\n+        pub(super) fn job_started(&mut self) {\n+            self.assert_invariants();\n+            self.active_jobs += 1;\n+            self.drop_excess_capacity();\n+            self.assert_invariants();\n+        }\n+\n+        pub(super) fn job_finished(&mut self) {\n+            self.assert_invariants();\n+            self.pending_jobs -= 1;\n+            self.active_jobs -= 1;\n+            self.assert_invariants();\n+            self.drop_excess_capacity();\n+            self.assert_invariants();\n+        }\n+\n+        fn drop_excess_capacity(&mut self) {\n+            self.assert_invariants();\n+            if self.active_jobs == self.pending_jobs {\n+                // Drop all excess tokens\n+                self.tokens.truncate(std::cmp::max(self.active_jobs, 1));\n+            } else {\n+                // Keep some excess tokens to satisfy requests faster\n+                const MAX_EXTRA_CAPACITY: usize = 2;\n+                self.tokens.truncate(std::cmp::max(self.active_jobs + MAX_EXTRA_CAPACITY, 1));\n+            }\n+            self.assert_invariants();\n+        }\n+    }\n+}"}, {"sha": "913414e7618213d99adb63a711ef18412e747695", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a0dfb399cb803ca2e36688fb32f8a74bc903d8e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0dfb399cb803ca2e36688fb32f8a74bc903d8e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1a0dfb399cb803ca2e36688fb32f8a74bc903d8e", "patch": "@@ -4,6 +4,7 @@\n #![warn(unused_lifetimes)]\n #![warn(unreachable_pub)]\n \n+extern crate jobserver;\n #[macro_use]\n extern crate rustc_middle;\n extern crate rustc_ast;\n@@ -53,6 +54,7 @@ mod cast;\n mod codegen_i128;\n mod common;\n mod compiler_builtins;\n+mod concurrency_limiter;\n mod config;\n mod constant;\n mod debuginfo;"}]}