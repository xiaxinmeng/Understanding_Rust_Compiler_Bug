{"sha": "b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2Y2JjMWUxNDc5ZDFhYzVlNjY1NjVkM2IzZTJjYzU0Zjc2N2QyYTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-27T13:01:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-27T13:01:48Z"}, "message": "Auto merge of #52648 - davidtwco:issue-52533, r=nikomatsakis\n\n[nll] improve the \"fully elaborated type\" case in region errors\n\nFixes #52533.\n\nr? @nikomatsakis", "tree": {"sha": "5f1edc4fd5141ec935c2155ea94b4a6a2c4d99b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f1edc4fd5141ec935c2155ea94b4a6a2c4d99b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "html_url": "https://github.com/rust-lang/rust/commit/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6998b369faf3daf849f538d636bac9eda659fa5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6998b369faf3daf849f538d636bac9eda659fa5a", "html_url": "https://github.com/rust-lang/rust/commit/6998b369faf3daf849f538d636bac9eda659fa5a"}, {"sha": "2e4224a9983cacf6ef1a2787c0084d743abb27e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e4224a9983cacf6ef1a2787c0084d743abb27e1", "html_url": "https://github.com/rust-lang/rust/commit/2e4224a9983cacf6ef1a2787c0084d743abb27e1"}], "stats": {"total": 477, "additions": 328, "deletions": 149}, "files": [{"sha": "693219ec4b03f518e4d2c39429364f95bc8e2bff", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n \n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n-    fn extract_type_name(&self, ty: &'a Ty<'tcx>) -> String {\n+    pub fn extract_type_name(&self, ty: &'a Ty<'tcx>) -> String {\n         if let ty::TyInfer(ty::TyVar(ty_vid)) = (*ty).sty {\n             let ty_vars = self.type_variables.borrow();\n             if let TypeVariableOrigin::TypeParameterDefinition(_, name) ="}, {"sha": "15b5edaa3d5d75d91d08c7d36fbcc42bb14754c4", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -19,7 +19,7 @@ use ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyFnDef, TyFnPtr};\n use ty::{TyParam, TyRawPtr, TyRef, TyNever, TyTuple};\n use ty::{TyClosure, TyGenerator, TyGeneratorWitness, TyForeign, TyProjection, TyAnon};\n use ty::{TyDynamic, TyInt, TyUint, TyInfer};\n-use ty::{self, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind};\n+use ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind};\n use util::nodemap::FxHashSet;\n \n use std::cell::Cell;\n@@ -32,6 +32,12 @@ use syntax::ast::CRATE_NODE_ID;\n use syntax::symbol::{Symbol, InternedString};\n use hir;\n \n+thread_local! {\n+    /// Mechanism for highlighting of specific regions for display in NLL region inference errors.\n+    /// Contains region to highlight and counter for number to use when highlighting.\n+    static HIGHLIGHT_REGION: Cell<Option<(RegionVid, usize)>> = Cell::new(None)\n+}\n+\n macro_rules! gen_display_debug_body {\n     ( $with:path ) => {\n         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -562,6 +568,19 @@ pub fn parameterized<F: fmt::Write>(f: &mut F,\n     PrintContext::new().parameterized(f, substs, did, projections)\n }\n \n+fn get_highlight_region() -> Option<(RegionVid, usize)> {\n+    HIGHLIGHT_REGION.with(|hr| hr.get())\n+}\n+\n+pub fn with_highlight_region<R>(r: RegionVid, counter: usize, op: impl FnOnce() -> R) -> R {\n+    HIGHLIGHT_REGION.with(|hr| {\n+        assert_eq!(hr.get(), None);\n+        hr.set(Some((r, counter)));\n+        let r = op();\n+        hr.set(None);\n+        r\n+    })\n+}\n \n impl<'a, T: Print> Print for &'a T {\n     fn print<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintContext) -> fmt::Result {\n@@ -733,7 +752,7 @@ define_print! {\n define_print! {\n     () ty::RegionKind, (self, f, cx) {\n         display {\n-            if cx.is_verbose {\n+            if cx.is_verbose || get_highlight_region().is_some() {\n                 return self.print_debug(f, cx);\n             }\n \n@@ -905,6 +924,15 @@ impl fmt::Debug for ty::FloatVid {\n \n impl fmt::Debug for ty::RegionVid {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if let Some((region, counter)) = get_highlight_region() {\n+            debug!(\"RegionVid.fmt: region={:?} self={:?} counter={:?}\", region, self, counter);\n+            return if *self == region {\n+                write!(f, \"'{:?}\", counter)\n+            } else {\n+                write!(f, \"'_\")\n+            }\n+        }\n+\n         write!(f, \"'_#{}r\", self.index())\n     }\n }\n@@ -1022,9 +1050,11 @@ define_print! {\n                 TyRef(r, ty, mutbl) => {\n                     write!(f, \"&\")?;\n                     let s = r.print_to_string(cx);\n-                    write!(f, \"{}\", s)?;\n-                    if !s.is_empty() {\n-                        write!(f, \" \")?;\n+                    if s != \"'_\" {\n+                        write!(f, \"{}\", s)?;\n+                        if !s.is_empty() {\n+                            write!(f, \" \")?;\n+                        }\n                     }\n                     ty::TypeAndMut { ty, mutbl }.print(f, cx)\n                 }"}, {"sha": "c2c5c6771b01fd76d0524ac9adb314869dc9e8ea", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 62, "deletions": 80, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -31,26 +31,21 @@ mod var_name;\n enum ConstraintCategory {\n     Cast,\n     Assignment,\n-    AssignmentToUpvar,\n     Return,\n-    CallArgumentToUpvar,\n     CallArgument,\n     Other,\n     Boring,\n }\n \n impl fmt::Display for ConstraintCategory {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        // Must end with a space. Allows for empty names to be provided.\n         match self {\n-            ConstraintCategory::Assignment | ConstraintCategory::AssignmentToUpvar => {\n-                write!(f, \"assignment\")\n-            }\n-            ConstraintCategory::Return => write!(f, \"return\"),\n-            ConstraintCategory::Cast => write!(f, \"cast\"),\n-            ConstraintCategory::CallArgument | ConstraintCategory::CallArgumentToUpvar => {\n-                write!(f, \"argument\")\n-            }\n-            _ => write!(f, \"free region\"),\n+            ConstraintCategory::Assignment => write!(f, \"assignment \"),\n+            ConstraintCategory::Return => write!(f, \"return \"),\n+            ConstraintCategory::Cast => write!(f, \"cast \"),\n+            ConstraintCategory::CallArgument => write!(f, \"argument \"),\n+            _ => write!(f, \"\"),\n         }\n     }\n }\n@@ -224,10 +219,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             \"constraint_is_interesting: locations={:?} constraint={:?}\",\n             constraint.locations, constraint\n         );\n-        if let Locations::Interesting(_) = constraint.locations {\n-            true\n-        } else {\n-            false\n+\n+        match constraint.locations {\n+            Locations::Interesting(_) | Locations::All => true,\n+            _ => false,\n         }\n     }\n \n@@ -320,45 +315,26 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n         }\n \n-        let category = match (\n-            category,\n+        let (fr_is_local, outlived_fr_is_local): (bool, bool) = (\n             self.universal_regions.is_local_free_region(fr),\n             self.universal_regions.is_local_free_region(outlived_fr),\n-        ) {\n-            (ConstraintCategory::Assignment, true, false) => ConstraintCategory::AssignmentToUpvar,\n-            (ConstraintCategory::CallArgument, true, false) => {\n-                ConstraintCategory::CallArgumentToUpvar\n-            }\n-            (category, _, _) => category,\n+        );\n+        debug!(\"report_error: fr_is_local={:?} outlived_fr_is_local={:?} category={:?}\",\n+               fr_is_local, outlived_fr_is_local, category);\n+\n+        match (category, fr_is_local, outlived_fr_is_local) {\n+            (ConstraintCategory::Assignment, true, false) |\n+            (ConstraintCategory::CallArgument, true, false) =>\n+                self.report_escaping_data_error(mir, infcx, mir_def_id, fr, outlived_fr,\n+                                                category, span, errors_buffer),\n+            _ =>\n+                self.report_general_error(mir, infcx, mir_def_id, fr, fr_is_local,\n+                                          outlived_fr, outlived_fr_is_local,\n+                                          category, span, errors_buffer),\n         };\n-\n-        debug!(\"report_error: category={:?}\", category);\n-        match category {\n-            ConstraintCategory::AssignmentToUpvar | ConstraintCategory::CallArgumentToUpvar => self\n-                .report_closure_error(\n-                    mir,\n-                    infcx,\n-                    mir_def_id,\n-                    fr,\n-                    outlived_fr,\n-                    category,\n-                    span,\n-                    errors_buffer,\n-                ),\n-            _ => self.report_general_error(\n-                mir,\n-                infcx,\n-                mir_def_id,\n-                fr,\n-                outlived_fr,\n-                category,\n-                span,\n-                errors_buffer,\n-            ),\n-        }\n     }\n \n-    fn report_closure_error(\n+    fn report_escaping_data_error(\n         &self,\n         mir: &Mir<'tcx>,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n@@ -373,29 +349,23 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let outlived_fr_name_and_span =\n             self.get_var_name_and_span_for_region(infcx.tcx, mir, outlived_fr);\n \n+        let escapes_from = if infcx.tcx.is_closure(mir_def_id) { \"closure\" } else { \"function\" };\n+\n         if fr_name_and_span.is_none() && outlived_fr_name_and_span.is_none() {\n-            return self.report_general_error(\n-                mir,\n-                infcx,\n-                mir_def_id,\n-                fr,\n-                outlived_fr,\n-                category,\n-                span,\n-                errors_buffer,\n-            );\n+            return self.report_general_error(mir, infcx, mir_def_id,\n+                                             fr, true, outlived_fr, false,\n+                                             category, span, errors_buffer);\n         }\n \n-        let mut diag = infcx\n-            .tcx\n-            .sess\n-            .struct_span_err(span, &format!(\"borrowed data escapes outside of closure\"));\n+        let mut diag = infcx.tcx.sess.struct_span_err(\n+            span, &format!(\"borrowed data escapes outside of {}\", escapes_from),\n+        );\n \n         if let Some((outlived_fr_name, outlived_fr_span)) = outlived_fr_name_and_span {\n             if let Some(name) = outlived_fr_name {\n                 diag.span_label(\n                     outlived_fr_span,\n-                    format!(\"`{}` is declared here, outside of the closure body\", name),\n+                    format!(\"`{}` is declared here, outside of the {} body\", name, escapes_from),\n                 );\n             }\n         }\n@@ -404,13 +374,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             if let Some(name) = fr_name {\n                 diag.span_label(\n                     fr_span,\n-                    format!(\n-                        \"`{}` is a reference that is only valid in the closure body\",\n-                        name\n-                    ),\n+                    format!(\"`{}` is a reference that is only valid in the {} body\",\n+                            name, escapes_from),\n                 );\n \n-                diag.span_label(span, format!(\"`{}` escapes the closure body here\", name));\n+                diag.span_label(span, format!(\"`{}` escapes the {} body here\",\n+                                               name, escapes_from));\n             }\n         }\n \n@@ -423,7 +392,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n         mir_def_id: DefId,\n         fr: RegionVid,\n+        fr_is_local: bool,\n         outlived_fr: RegionVid,\n+        outlived_fr_is_local: bool,\n         category: ConstraintCategory,\n         span: Span,\n         errors_buffer: &mut Vec<Diagnostic>,\n@@ -434,17 +405,28 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         );\n \n         let counter = &mut 1;\n-        let fr_name = self.give_region_a_name(infcx.tcx, mir, mir_def_id, fr, counter, &mut diag);\n-        let outlived_fr_name =\n-            self.give_region_a_name(infcx.tcx, mir, mir_def_id, outlived_fr, counter, &mut diag);\n-\n-        diag.span_label(\n-            span,\n-            format!(\n-                \"{} requires that `{}` must outlive `{}`\",\n-                category, fr_name, outlived_fr_name,\n-            ),\n-        );\n+        let fr_name = self.give_region_a_name(\n+            infcx, mir, mir_def_id, fr, counter, &mut diag);\n+        let outlived_fr_name = self.give_region_a_name(\n+            infcx, mir, mir_def_id, outlived_fr, counter, &mut diag);\n+\n+        let mir_def_name = if infcx.tcx.is_closure(mir_def_id) { \"closure\" } else { \"function\" };\n+\n+        match (category, outlived_fr_is_local, fr_is_local) {\n+            (ConstraintCategory::Return, true, _) => {\n+                diag.span_label(span, format!(\n+                    \"{} was supposed to return data with lifetime `{}` but it is returning \\\n+                    data with lifetime `{}`\",\n+                    mir_def_name, fr_name, outlived_fr_name,\n+                ));\n+            },\n+            _ => {\n+                diag.span_label(span, format!(\n+                    \"{}requires that `{}` must outlive `{}`\",\n+                    category, fr_name, outlived_fr_name,\n+                ));\n+            },\n+        }\n \n         diag.buffer(errors_buffer);\n     }"}, {"sha": "8505d8e1ef39c4cca816f36fa3e7398b54f7c74b", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 68, "deletions": 13, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -12,9 +12,11 @@ use borrow_check::nll::region_infer::RegionInferenceContext;\n use borrow_check::nll::ToRegionVid;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n+use rustc::infer::InferCtxt;\n use rustc::mir::Mir;\n use rustc::ty::subst::{Substs, UnpackedKind};\n use rustc::ty::{self, RegionVid, Ty, TyCtxt};\n+use rustc::util::ppaux::with_highlight_region;\n use rustc_errors::DiagnosticBuilder;\n use syntax::ast::Name;\n use syntax::symbol::keywords;\n@@ -48,7 +50,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// and then return the name `'1` for us to use.\n     crate fn give_region_a_name(\n         &self,\n-        tcx: TyCtxt<'_, '_, 'tcx>,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n         mir: &Mir<'tcx>,\n         mir_def_id: DefId,\n         fr: RegionVid,\n@@ -59,17 +61,18 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         assert!(self.universal_regions.is_universal_region(fr));\n \n-        self.give_name_from_error_region(tcx, mir_def_id, fr, counter, diag)\n+        self.give_name_from_error_region(infcx.tcx, mir_def_id, fr, counter, diag)\n             .or_else(|| {\n                 self.give_name_if_anonymous_region_appears_in_arguments(\n-                    tcx, mir, mir_def_id, fr, counter, diag)\n+                    infcx, mir, mir_def_id, fr, counter, diag)\n             })\n             .or_else(|| {\n                 self.give_name_if_anonymous_region_appears_in_upvars(\n-                    tcx, mir, fr, counter, diag)\n+                    infcx.tcx, mir, fr, counter, diag)\n             })\n             .or_else(|| {\n-                self.give_name_if_anonymous_region_appears_in_output(tcx, mir, fr, counter, diag)\n+                self.give_name_if_anonymous_region_appears_in_output(\n+                    infcx.tcx, mir, fr, counter, diag)\n             })\n             .unwrap_or_else(|| span_bug!(mir.span, \"can't make a name for free region {:?}\", fr))\n     }\n@@ -130,20 +133,21 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// ```\n     fn give_name_if_anonymous_region_appears_in_arguments(\n         &self,\n-        tcx: TyCtxt<'_, '_, 'tcx>,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n         mir: &Mir<'tcx>,\n         mir_def_id: DefId,\n         fr: RegionVid,\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder<'_>,\n     ) -> Option<InternedString> {\n         let implicit_inputs = self.universal_regions.defining_ty.implicit_inputs();\n-        let argument_index = self.get_argument_index_for_region(tcx, fr)?;\n+        let argument_index = self.get_argument_index_for_region(infcx.tcx, fr)?;\n \n         let arg_ty =\n             self.universal_regions.unnormalized_input_tys[implicit_inputs + argument_index];\n         if let Some(region_name) = self.give_name_if_we_can_match_hir_ty_from_argument(\n-            tcx,\n+            infcx,\n+            mir,\n             mir_def_id,\n             fr,\n             arg_ty,\n@@ -169,25 +173,33 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n     fn give_name_if_we_can_match_hir_ty_from_argument(\n         &self,\n-        tcx: TyCtxt<'_, '_, 'tcx>,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n+        mir: &Mir<'tcx>,\n         mir_def_id: DefId,\n         needle_fr: RegionVid,\n         argument_ty: Ty<'tcx>,\n         argument_index: usize,\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder<'_>,\n     ) -> Option<InternedString> {\n-        let mir_node_id = tcx.hir.as_local_node_id(mir_def_id)?;\n-        let fn_decl = tcx.hir.fn_decl(mir_node_id)?;\n+        let mir_node_id = infcx.tcx.hir.as_local_node_id(mir_def_id)?;\n+        let fn_decl = infcx.tcx.hir.fn_decl(mir_node_id)?;\n         let argument_hir_ty: &hir::Ty = &fn_decl.inputs[argument_index];\n         match argument_hir_ty.node {\n             // This indicates a variable with no type annotation, like\n             // `|x|`... in that case, we can't highlight the type but\n             // must highlight the variable.\n-            hir::TyKind::Infer => None,\n+            hir::TyKind::Infer => self.give_name_if_we_cannot_match_hir_ty(\n+                infcx,\n+                mir,\n+                needle_fr,\n+                argument_ty,\n+                counter,\n+                diag,\n+            ),\n \n             _ => self.give_name_if_we_can_match_hir_ty(\n-                tcx,\n+                infcx.tcx,\n                 needle_fr,\n                 argument_ty,\n                 argument_hir_ty,\n@@ -197,6 +209,49 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         }\n     }\n \n+    /// Attempts to highlight the specific part of a type in an argument\n+    /// that has no type annotation.\n+    /// For example, we might produce an annotation like this:\n+    ///\n+    /// ```\n+    ///  |     foo(|a, b| b)\n+    ///  |          -  -\n+    ///  |          |  |\n+    ///  |          |  has type `&'1 u32`\n+    ///  |          has type `&'2 u32`\n+    /// ```\n+    fn give_name_if_we_cannot_match_hir_ty(\n+        &self,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n+        mir: &Mir<'tcx>,\n+        needle_fr: RegionVid,\n+        argument_ty: Ty<'tcx>,\n+        counter: &mut usize,\n+        diag: &mut DiagnosticBuilder<'_>,\n+    ) -> Option<InternedString> {\n+        let type_name = with_highlight_region(needle_fr, *counter, || {\n+            infcx.extract_type_name(&argument_ty)\n+        });\n+\n+        debug!(\"give_name_if_we_cannot_match_hir_ty: type_name={:?} needle_fr={:?}\",\n+               type_name, needle_fr);\n+        let assigned_region_name = if type_name.find(&format!(\"'{}\", counter)).is_some() {\n+            // Only add a label if we can confirm that a region was labelled.\n+            let argument_index = self.get_argument_index_for_region(infcx.tcx, needle_fr)?;\n+            let (_, span) = self.get_argument_name_and_span_for_region(mir, argument_index);\n+            diag.span_label(span, format!(\"has type `{}`\", type_name));\n+\n+            // This counter value will already have been used, so this function will increment it\n+            // so the next value will be used next and return the region name that would have been\n+            // used.\n+            Some(self.synthesize_region_name(counter))\n+        } else {\n+            None\n+        };\n+\n+        assigned_region_name\n+    }\n+\n     /// Attempts to highlight the specific part of a type annotation\n     /// that contains the anonymous reference we want to give a name\n     /// to. For example, we might produce an annotation like this:"}, {"sha": "0ac295c54bccbb34ae8206916228d87fbd2e51f0", "filename": "src/test/ui/error-codes/E0621-does-not-trigger-for-closures.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -10,8 +10,8 @@ error: unsatisfied lifetime constraints\n LL |     invoke(&x, |a, b| if a > b { a } else { b }); //~ ERROR E0495\n    |                ----------^^^^^-----------------\n    |                |   |     |\n-   |                |   |     free region requires that `'1` must outlive `'2`\n-   |                |   lifetime `'1` appears in this argument\n+   |                |   |     requires that `'1` must outlive `'2`\n+   |                |   has type `&'1 i32`\n    |                lifetime `'2` appears in return type\n \n error: aborting due to previous error"}, {"sha": "bbc63e6fecaf5c7b790f1c9bf64e2a0720d98e61", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -10,21 +10,19 @@ warning: not reporting region error due to nll\n LL |         self.x.iter().map(|a| a.0)\n    |                ^^^^\n \n-error: borrowed data escapes outside of closure\n+error: unsatisfied lifetime constraints\n   --> $DIR/static-return-lifetime-infered.rs:17:9\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                         ----- `self` is a reference that is only valid in the closure body\n+   |                         - let's call the lifetime of this reference `'1`\n LL |         self.x.iter().map(|a| a.0)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ `self` escapes the closure body here\n+   |         ^^^^^^^^^^^^^ requires that `'1` must outlive `'static`\n \n-error: borrowed data escapes outside of closure\n+error: unsatisfied lifetime constraints\n   --> $DIR/static-return-lifetime-infered.rs:21:9\n    |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                        -------- `self` is a reference that is only valid in the closure body\n LL |         self.x.iter().map(|a| a.0)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ `self` escapes the closure body here\n+   |         ^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f5d98e04ad804009fdef311814c7c8eaaa86076c", "filename": "src/test/ui/in-band-lifetimes/impl/dyn-trait.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -4,13 +4,13 @@ warning: not reporting region error due to nll\n LL |     static_val(x); //~ ERROR cannot infer\n    |                ^\n \n-error: borrowed data escapes outside of closure\n+error: borrowed data escapes outside of function\n   --> $DIR/dyn-trait.rs:32:5\n    |\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n-   |                              - `x` is a reference that is only valid in the closure body\n+   |                              - `x` is a reference that is only valid in the function body\n LL |     static_val(x); //~ ERROR cannot infer\n-   |     ^^^^^^^^^^^^^ `x` escapes the closure body here\n+   |     ^^^^^^^^^^^^^ `x` escapes the function body here\n \n error: aborting due to previous error\n "}, {"sha": "6de00ffd48cc1ddd230c715d4c922ed6cae74491", "filename": "src/test/ui/issue-10291.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-10291.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-10291.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-10291.nll.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -8,7 +8,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/issue-10291.rs:12:5\n    |\n LL |     drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ free region requires that `'x` must outlive `'static`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'x` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "890bb426441e2182b569952ec8dfcbaa4c1805db", "filename": "src/test/ui/issue-16683.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-16683.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-16683.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-16683.nll.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -10,13 +10,13 @@ warning: not reporting region error due to nll\n LL |         self.a(); //~ ERROR cannot infer\n    |              ^\n \n-error: borrowed data escapes outside of closure\n+error: borrowed data escapes outside of function\n   --> $DIR/issue-16683.rs:14:9\n    |\n LL |     fn b(&self) {\n-   |          ----- `self` is a reference that is only valid in the closure body\n+   |          ----- `self` is a reference that is only valid in the function body\n LL |         self.a(); //~ ERROR cannot infer\n-   |         ^^^^^^^^ `self` escapes the closure body here\n+   |         ^^^^^^^^ `self` escapes the function body here\n \n error: aborting due to previous error\n "}, {"sha": "c51a72f885d6c83487eab1d2cbb8c07375e06403", "filename": "src/test/ui/issue-17758.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-17758.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-17758.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17758.nll.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -10,13 +10,13 @@ warning: not reporting region error due to nll\n LL |         self.foo();\n    |              ^^^\n \n-error: borrowed data escapes outside of closure\n+error: borrowed data escapes outside of function\n   --> $DIR/issue-17758.rs:17:9\n    |\n LL |     fn bar(&self) {\n-   |            ----- `self` is a reference that is only valid in the closure body\n+   |            ----- `self` is a reference that is only valid in the function body\n LL |         self.foo();\n-   |         ^^^^^^^^^^ `self` escapes the closure body here\n+   |         ^^^^^^^^^^ `self` escapes the function body here\n \n error: aborting due to previous error\n "}, {"sha": "312ec6e742e9164b4e276828cb51a247f2441a1f", "filename": "src/test/ui/issue-40510-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-40510-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-40510-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40510-1.nll.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -6,7 +6,7 @@ LL |        || {\n    |  |_____|\n    | ||\n LL | ||         &mut x\n-   | ||         ^^^^^^ free region requires that `'1` must outlive `'2`\n+   | ||         ^^^^^^ return requires that `'1` must outlive `'2`\n LL | ||     };\n    | ||     -\n    | ||_____|"}, {"sha": "eb44850e639abbf3d683bd1fde79402f3a51b942", "filename": "src/test/ui/issue-40510-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-40510-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-40510-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40510-3.nll.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -9,7 +9,7 @@ LL |  ||         || {\n    |  ||_________^\n LL | |||             x.push(())\n LL | |||         }\n-   | |||_________^ free region requires that `'1` must outlive `'2`\n+   | |||_________^ requires that `'1` must outlive `'2`\n LL |  ||     };\n    |  ||     -\n    |  ||_____|"}, {"sha": "7dd513d1b712c2e31fd8a016664b021fb3ff114c", "filename": "src/test/ui/issue-52213.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-52213.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-52213.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52213.nll.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -8,7 +8,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/issue-52213.rs:13:11\n    |\n LL |         ((u,),) => u,\n-   |           ^ free region requires that `'a` must outlive `'b`\n+   |           ^ requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "87fda1dd99c2e6bb286aeb12523111413f6a0f80", "filename": "src/test/ui/issue-52533-1.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-52533-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-52533-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52533-1.nll.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to nll\n+  --> $DIR/issue-52533-1.rs:19:18\n+   |\n+LL |     gimme(|x, y| y)\n+   |                  ^\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/issue-52533-1.rs:19:18\n+   |\n+LL |     gimme(|x, y| y)\n+   |            -  -  ^ closure was supposed to return data with lifetime `'1` but it is returning data with lifetime `'2`\n+   |            |  |\n+   |            |  has type `&Foo<'_, '1, u32>`\n+   |            has type `&Foo<'_, '2, u32>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "22af5a86702571cab335b8501b559d846d13b91b", "filename": "src/test/ui/issue-52533-1.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-52533-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-52533-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52533-1.rs?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(warnings)]\n+\n+struct Foo<'a, 'b, T: 'a + 'b> { x: &'a T, y: &'b T }\n+\n+fn gimme(_: impl for<'a, 'b, 'c> FnOnce(&'a Foo<'a, 'b, u32>,\n+                                        &'a Foo<'a, 'c, u32>) -> &'a Foo<'a, 'b, u32>) { }\n+\n+fn main() {\n+    gimme(|x, y| y)\n+    //~^ ERROR mismatched types [E0308]\n+}"}, {"sha": "38deb7d66de082525c32ec4086c88b130281dd09", "filename": "src/test/ui/issue-52533-1.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-52533-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-52533-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52533-1.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-52533-1.rs:19:18\n+   |\n+LL |     gimme(|x, y| y)\n+   |                  ^ lifetime mismatch\n+   |\n+   = note: expected type `&Foo<'_, '_, u32>`\n+              found type `&Foo<'_, '_, u32>`\n+note: the anonymous lifetime #4 defined on the body at 19:11...\n+  --> $DIR/issue-52533-1.rs:19:11\n+   |\n+LL |     gimme(|x, y| y)\n+   |           ^^^^^^^^\n+note: ...does not necessarily outlive the anonymous lifetime #3 defined on the body at 19:11\n+  --> $DIR/issue-52533-1.rs:19:11\n+   |\n+LL |     gimme(|x, y| y)\n+   |           ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "a13b06e320483789749413e0c5640ae792aa1517", "filename": "src/test/ui/issue-52533.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-52533.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-52533.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52533.nll.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to nll\n+  --> $DIR/issue-52533.rs:15:16\n+   |\n+LL |     foo(|a, b| b)\n+   |                ^\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/issue-52533.rs:15:16\n+   |\n+LL |     foo(|a, b| b)\n+   |          -  -  ^ closure was supposed to return data with lifetime `'1` but it is returning data with lifetime `'2`\n+   |          |  |\n+   |          |  has type `&'1 u32`\n+   |          has type `&'2 u32`\n+\n+error: aborting due to previous error\n+"}, {"sha": "08f2805cefd6d72105643c92d3623af4dd56f5c0", "filename": "src/test/ui/issue-52533.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-52533.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-52533.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52533.rs?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(_: impl for<'a> FnOnce(&'a u32, &u32) -> &'a u32) {\n+}\n+\n+fn main() {\n+    foo(|a, b| b)\n+    //~^ ERROR lifetime of reference outlives lifetime of borrowed content...\n+}"}, {"sha": "76a2470a2e03e3268d8ed8dd26ac4fb569101dba", "filename": "src/test/ui/issue-52533.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-52533.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fissue-52533.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52533.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -0,0 +1,20 @@\n+error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+  --> $DIR/issue-52533.rs:15:16\n+   |\n+LL |     foo(|a, b| b)\n+   |                ^\n+   |\n+note: ...the reference is valid for the anonymous lifetime #2 defined on the body at 15:9...\n+  --> $DIR/issue-52533.rs:15:9\n+   |\n+LL |     foo(|a, b| b)\n+   |         ^^^^^^^^\n+note: ...but the borrowed content is only valid for the anonymous lifetime #3 defined on the body at 15:9\n+  --> $DIR/issue-52533.rs:15:9\n+   |\n+LL |     foo(|a, b| b)\n+   |         ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "ccf116e640d429ec4fed4e09a447664a93a65af5", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -8,10 +8,10 @@ error: unsatisfied lifetime constraints\n   --> $DIR/escape-argument-callee.rs:36:45\n    |\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n-   |                                       -  -  ^^^^^^ free region requires that `'1` must outlive `'2`\n+   |                                       -  -  ^^^^^^ requires that `'1` must outlive `'2`\n    |                                       |  |\n-   |                                       |  lifetime `'1` appears in this argument\n-   |                                       lifetime `'2` appears in this argument\n+   |                                       |  has type `&'1 i32`\n+   |                                       has type `&mut &'2 i32`\n \n note: No external requirements\n   --> $DIR/escape-argument-callee.rs:36:38"}, {"sha": "b4508824901952cf390beed9727c9cc355285330", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -8,9 +8,9 @@ error: unsatisfied lifetime constraints\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:57:13\n    |\n LL |         |_outlives1, _outlives2, _outlives3, x, y| {\n-   |          ----------              ---------- lifetime `'2` appears in this argument\n+   |          ----------              ---------- has type `std::cell::Cell<&'2 &u32>`\n    |          |\n-   |          lifetime `'1` appears in this argument\n+   |          has type `std::cell::Cell<&&'1 u32>`\n ...\n LL |             demand_y(x, y, p) //~ ERROR\n    |             ^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`"}, {"sha": "33e4240736f5bfdd7c8ad17cf6bb0218ac0cddaa", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -23,18 +23,18 @@ LL | |     });\n    = note: number of external vids: 2\n    = note: where '_#1r: '_#0r\n \n-error: borrowed data escapes outside of closure\n+error: borrowed data escapes outside of function\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:45:5\n    |\n LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |                     ------ `cell_a` is a reference that is only valid in the closure body\n+   |                     ------ `cell_a` is a reference that is only valid in the function body\n LL | /     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n LL | |         //~^ ERROR\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get()) //~ WARNING not reporting region error due to nll\n LL | |     });\n-   | |______^ `cell_a` escapes the closure body here\n+   | |______^ `cell_a` escapes the function body here\n \n note: No external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:44:1"}, {"sha": "5f98a0fd36d7989414fb691283e84b221add3b04", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -23,18 +23,18 @@ LL | |     });\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#0r\n \n-error: borrowed data escapes outside of closure\n+error: borrowed data escapes outside of function\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:48:5\n    |\n LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |                     ------ `cell_a` is a reference that is only valid in the closure body\n+   |                     ------ `cell_a` is a reference that is only valid in the function body\n LL | /     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n LL | |         //~^ ERROR\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |         //~^ WARNING not reporting region error due to nll\n LL | |     });\n-   | |______^ `cell_a` escapes the closure body here\n+   | |______^ `cell_a` escapes the function body here\n \n note: No external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:47:1"}, {"sha": "40ebda4419b2a09aa07d3d7331692ea47c501feb", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -8,9 +8,9 @@ error: unsatisfied lifetime constraints\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:47:9\n    |\n LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-   |                                                ---------  - lifetime `'1` appears in this argument\n+   |                                                ---------  - has type `&std::cell::Cell<&'1 u32>`\n    |                                                |\n-   |                                                lifetime `'2` appears in this argument\n+   |                                                has type `&std::cell::Cell<&'2 &u32>`\n LL |         // Only works if 'x: 'y:\n LL |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`"}, {"sha": "37ea610397696823dc08c790414d86326b211735", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -8,9 +8,9 @@ error: unsatisfied lifetime constraints\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:51:9\n    |\n LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |                                                ----------  ---------- lifetime `'2` appears in this argument\n+   |                                                ----------  ---------- has type `&std::cell::Cell<&'2 &u32>`\n    |                                                |\n-   |                                                lifetime `'1` appears in this argument\n+   |                                                has type `&std::cell::Cell<&'1 &u32>`\n LL |         // Only works if 'x: 'y:\n LL |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`"}, {"sha": "b0562711627387d59157493727b9bfe0681f784d", "filename": "src/test/ui/nll/closure-requirements/region-lbr-named-does-not-outlive-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -8,7 +8,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/region-lbr-named-does-not-outlive-static.rs:19:5\n    |\n LL |     &*x\n-   |     ^^^ free region requires that `'a` must outlive `'static`\n+   |     ^^^ requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "d6d1645ceeacc755a3b727c34dd40171d4a0019b", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -8,10 +8,10 @@ error: unsatisfied lifetime constraints\n   --> $DIR/return-wrong-bound-region.rs:21:23\n    |\n LL |     expect_sig(|a, b| b); // ought to return `a`\n-   |                 -  -  ^ free region requires that `'1` must outlive `'2`\n+   |                 -  -  ^ closure was supposed to return data with lifetime `'1` but it is returning data with lifetime `'2`\n    |                 |  |\n-   |                 |  lifetime `'1` appears in this argument\n-   |                 lifetime `'2` appears in this argument\n+   |                 |  has type `&'1 i32`\n+   |                 has type `&'2 i32`\n \n note: No external requirements\n   --> $DIR/return-wrong-bound-region.rs:21:16"}, {"sha": "f12ab9b4f9602f8f9f326e088a5297933ab2b9b8", "filename": "src/test/ui/nll/issue-50716.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -1,11 +1,11 @@\n-error: borrowed data escapes outside of closure\n+error: borrowed data escapes outside of function\n   --> $DIR/issue-50716.rs:25:14\n    |\n LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n-   |                        - `s` is a reference that is only valid in the closure body\n+   |                        - `s` is a reference that is only valid in the function body\n ...\n LL |     let _x = *s; //~ ERROR\n-   |              ^^ `s` escapes the closure body here\n+   |              ^^ `s` escapes the function body here\n \n error: aborting due to previous error\n "}, {"sha": "d8f186a22324bbc06fc6d1d3155d3997633ca82d", "filename": "src/test/ui/nll/mir_check_cast_reify.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -4,14 +4,14 @@ warning: not reporting region error due to nll\n LL |     let f: fn(_) -> _ = foo;\n    |                         ^^^\n \n-error: borrowed data escapes outside of closure\n+error: borrowed data escapes outside of function\n   --> $DIR/mir_check_cast_reify.rs:48:5\n    |\n LL | fn bar<'a>(x: &'a u32) -> &'static u32 {\n-   |            - `x` is a reference that is only valid in the closure body\n+   |            - `x` is a reference that is only valid in the function body\n ...\n LL |     f(x)\n-   |     ^^^^ `x` escapes the closure body here\n+   |     ^^^^ `x` escapes the function body here\n \n error: aborting due to previous error\n "}, {"sha": "98c03e378147a7890bc55dae34df7c2f8a4903c7", "filename": "src/test/ui/nll/mir_check_cast_unsafe_fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr?ref=b6cbc1e1479d1ac5e66565d3b3e2cc54f767d2a0", "patch": "@@ -4,14 +4,14 @@ warning: not reporting region error due to nll\n LL |     let g: unsafe fn(_) -> _ = f;\n    |                                ^\n \n-error: borrowed data escapes outside of closure\n+error: borrowed data escapes outside of function\n   --> $DIR/mir_check_cast_unsafe_fn.rs:20:14\n    |\n LL | fn bar<'a>(input: &'a u32, f: fn(&'a u32) -> &'a u32) -> &'static u32 {\n-   |            ----- `input` is a reference that is only valid in the closure body\n+   |            ----- `input` is a reference that is only valid in the function body\n ...\n LL |     unsafe { g(input) }\n-   |              ^^^^^^^^ `input` escapes the closure body here\n+   |              ^^^^^^^^ `input` escapes the function body here\n \n error: aborting due to previous error\n "}]}