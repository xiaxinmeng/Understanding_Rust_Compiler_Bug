{"sha": "a199fb23196f25bc7de7504835185b26e6f75512", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOTlmYjIzMTk2ZjI1YmM3ZGU3NTA0ODM1MTg1YjI2ZTZmNzU1MTI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-15T21:38:11Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-15T21:38:11Z"}, "message": "Rollup merge of #49037 - estebank:coherence-tweaks, r=nikomatsakis\n\nCoherence diagnostic tweaks", "tree": {"sha": "63b5aeda346f3a25a61baf6fd314f651ea7c0d25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63b5aeda346f3a25a61baf6fd314f651ea7c0d25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a199fb23196f25bc7de7504835185b26e6f75512", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlqq58MACgkQ/vbIBR0O\nATxD5A//dEHl/FqBEuT2v8+shmfcAskc415UcYW8CKZc3hgu9RdHQJjpRLZ68P7e\nQ18iXXScxxU5Z+MqsYVDddnOXULJNgEHcdRS2ar6fXnsmWYpxvonT1uwpK+mup86\nZcelhNG3IvU3vCpm+YLn5nPid8nz4T17V+/YfJRZZFo7F7xwn0wbC2O51mrVVwcz\nRVPFSIM344LAJUZ7XKscRaEQnqPnBDyNRuLir1wtJq9mMdgIOQDTqXPtRfQeFDBa\nBvV+gc4lZcal+Bq3dZ8xQRv6FOm0NOJ9DLqD5EFJ2/dnql3VrAxqHlVPZQ9vD2x8\nv5J+Z+v7w1+MO8nBGZoZIadFAwY2RpkC8fRoKiBCPFcm3KZ+Z7WpV8COJsxG+k5/\ninh1SmZaRoauwGViTZ9txh+5arBBldXn+GQUw4W2MDyUHb2wBjLIJ53Z7ogDFdRp\neekyQqF8Bmhf6e3NDf2P0j2hWQF6CIr41BoXx18d3RLHKOT5PbzLB7n8xKzYPQFu\nr38Bmu3zMCIzHtdTyeVlwSvLTPHdScxLYj++Sd/b6XQ3V6jQvM5MKQXOMqjFq8X9\nIqXaKhQiBU6BOAeE+WY8GVtk9Xt7y9ATwvNc/enUPocKTwyljXNGONRtHRHuPQ2u\nXqmSdfR/E2l3Q7cftSje9JHkj7hju5SlB6E5YdeRMBgFPTaJJxs=\n=9uqR\n-----END PGP SIGNATURE-----", "payload": "tree 63b5aeda346f3a25a61baf6fd314f651ea7c0d25\nparent 64490ff883009dc498953e6d8784d05575e82713\nparent 4d5cd21a0db601636d88f4c95f50435b04bf71df\nauthor kennytm <kennytm@gmail.com> 1521149891 +0800\ncommitter kennytm <kennytm@gmail.com> 1521149891 +0800\n\nRollup merge of #49037 - estebank:coherence-tweaks, r=nikomatsakis\n\nCoherence diagnostic tweaks\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a199fb23196f25bc7de7504835185b26e6f75512", "html_url": "https://github.com/rust-lang/rust/commit/a199fb23196f25bc7de7504835185b26e6f75512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a199fb23196f25bc7de7504835185b26e6f75512/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64490ff883009dc498953e6d8784d05575e82713", "url": "https://api.github.com/repos/rust-lang/rust/commits/64490ff883009dc498953e6d8784d05575e82713", "html_url": "https://github.com/rust-lang/rust/commit/64490ff883009dc498953e6d8784d05575e82713"}, {"sha": "4d5cd21a0db601636d88f4c95f50435b04bf71df", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d5cd21a0db601636d88f4c95f50435b04bf71df", "html_url": "https://github.com/rust-lang/rust/commit/4d5cd21a0db601636d88f4c95f50435b04bf71df"}], "stats": {"total": 156, "additions": 104, "deletions": 52}, "files": [{"sha": "07b7c600b9f308b61a6873622c03d73a0dc7cf96", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a199fb23196f25bc7de7504835185b26e6f75512/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a199fb23196f25bc7de7504835185b26e6f75512/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=a199fb23196f25bc7de7504835185b26e6f75512", "patch": "@@ -52,10 +52,10 @@ fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {\n fn enforce_trait_manually_implementable(tcx: TyCtxt, impl_def_id: DefId, trait_def_id: DefId) {\n     let did = Some(trait_def_id);\n     let li = tcx.lang_items();\n+    let span = tcx.sess.codemap().def_span(tcx.span_of_impl(impl_def_id).unwrap());\n \n     // Disallow *all* explicit impls of `Sized` and `Unsize` for now.\n     if did == li.sized_trait() {\n-        let span = tcx.span_of_impl(impl_def_id).unwrap();\n         struct_span_err!(tcx.sess,\n                          span,\n                          E0322,\n@@ -66,11 +66,12 @@ fn enforce_trait_manually_implementable(tcx: TyCtxt, impl_def_id: DefId, trait_d\n     }\n \n     if did == li.unsize_trait() {\n-        let span = tcx.span_of_impl(impl_def_id).unwrap();\n-        span_err!(tcx.sess,\n-                  span,\n-                  E0328,\n-                  \"explicit impls for the `Unsize` trait are not permitted\");\n+        struct_span_err!(tcx.sess,\n+                         span,\n+                         E0328,\n+                         \"explicit impls for the `Unsize` trait are not permitted\")\n+            .span_label(span, \"impl of `Unsize` not allowed\")\n+            .emit();\n         return;\n     }\n \n@@ -88,14 +89,14 @@ fn enforce_trait_manually_implementable(tcx: TyCtxt, impl_def_id: DefId, trait_d\n     } else {\n         return; // everything OK\n     };\n-    let mut err = struct_span_err!(tcx.sess,\n-                                   tcx.span_of_impl(impl_def_id).unwrap(),\n-                                   E0183,\n-                                   \"manual implementations of `{}` are experimental\",\n-                                   trait_name);\n-    help!(&mut err,\n-          \"add `#![feature(unboxed_closures)]` to the crate attributes to enable\");\n-    err.emit();\n+    struct_span_err!(tcx.sess,\n+                     span,\n+                     E0183,\n+                     \"manual implementations of `{}` are experimental\",\n+                     trait_name)\n+        .span_label(span, format!(\"manual implementations of `{}` are experimental\", trait_name))\n+        .help(\"add `#![feature(unboxed_closures)]` to the crate attributes to enable\")\n+        .emit();\n }\n \n pub fn provide(providers: &mut Providers) {\n@@ -168,13 +169,17 @@ fn check_impl_overlap<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeI\n                 traits::supertrait_def_ids(tcx,\n                                            data.principal().unwrap().def_id());\n             if supertrait_def_ids.any(|d| d == trait_def_id) {\n-                span_err!(tcx.sess,\n-                          tcx.span_of_impl(impl_def_id).unwrap(),\n-                          E0371,\n-                          \"the object type `{}` automatically \\\n-                           implements the trait `{}`\",\n-                          trait_ref.self_ty(),\n-                          tcx.item_path_str(trait_def_id));\n+                let sp = tcx.sess.codemap().def_span(tcx.span_of_impl(impl_def_id).unwrap());\n+                struct_span_err!(tcx.sess,\n+                                 sp,\n+                                 E0371,\n+                                 \"the object type `{}` automatically implements the trait `{}`\",\n+                                 trait_ref.self_ty(),\n+                                 tcx.item_path_str(trait_def_id))\n+                    .span_label(sp, format!(\"`{}` automatically implements trait `{}`\",\n+                                            trait_ref.self_ty(),\n+                                            tcx.item_path_str(trait_def_id)))\n+                    .emit();\n             }\n         }\n     }"}, {"sha": "6d6594e55437d5928a9993c9dca681dd15ab93f2", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a199fb23196f25bc7de7504835185b26e6f75512/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a199fb23196f25bc7de7504835185b26e6f75512/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=a199fb23196f25bc7de7504835185b26e6f75512", "patch": "@@ -40,29 +40,36 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n                        self.tcx.hir.node_to_string(item.id));\n                 let trait_ref = self.tcx.impl_trait_ref(def_id).unwrap();\n                 let trait_def_id = trait_ref.def_id;\n+                let cm = self.tcx.sess.codemap();\n+                let sp = cm.def_span(item.span);\n                 match traits::orphan_check(self.tcx, def_id) {\n                     Ok(()) => {}\n                     Err(traits::OrphanCheckErr::NoLocalInputType) => {\n                         struct_span_err!(self.tcx.sess,\n-                                         item.span,\n+                                         sp,\n                                          E0117,\n                                          \"only traits defined in the current crate can be \\\n                                           implemented for arbitrary types\")\n-                            .span_label(item.span, \"impl doesn't use types inside crate\")\n-                            .note(&format!(\"the impl does not reference any types defined in \\\n-                                            this crate\"))\n+                            .span_label(sp, \"impl doesn't use types inside crate\")\n+                            .note(\"the impl does not reference any types defined in this crate\")\n                             .note(\"define and implement a trait or new type instead\")\n                             .emit();\n                         return;\n                     }\n                     Err(traits::OrphanCheckErr::UncoveredTy(param_ty)) => {\n-                        span_err!(self.tcx.sess,\n-                                  item.span,\n-                                  E0210,\n-                                  \"type parameter `{}` must be used as the type parameter for \\\n-                                   some local type (e.g. `MyStruct<T>`); only traits defined in \\\n-                                   the current crate can be implemented for a type parameter\",\n-                                  param_ty);\n+                        struct_span_err!(self.tcx.sess,\n+                                         sp,\n+                                         E0210,\n+                                         \"type parameter `{}` must be used as the type parameter \\\n+                                          for some local type (e.g. `MyStruct<{}>`)\",\n+                                         param_ty,\n+                                         param_ty)\n+                            .span_label(sp,\n+                                        format!(\"type parameter `{}` must be used as the type \\\n+                                                 parameter for some local type\", param_ty))\n+                            .note(\"only traits defined in the current crate can be implemented \\\n+                                   for a type parameter\")\n+                            .emit();\n                         return;\n                     }\n                 }\n@@ -121,22 +128,29 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n                             if self_def_id.is_local() {\n                                 None\n                             } else {\n-                                Some(format!(\"cross-crate traits with a default impl, like `{}`, \\\n-                                              can only be implemented for a struct/enum type \\\n-                                              defined in the current crate\",\n-                                             self.tcx.item_path_str(trait_def_id)))\n+                                Some((\n+                                    format!(\"cross-crate traits with a default impl, like `{}`, \\\n+                                             can only be implemented for a struct/enum type \\\n+                                             defined in the current crate\",\n+                                            self.tcx.item_path_str(trait_def_id)),\n+                                    \"can't implement cross-crate trait for type in another crate\"\n+                                ))\n                             }\n                         }\n                         _ => {\n-                            Some(format!(\"cross-crate traits with a default impl, like `{}`, can \\\n-                                          only be implemented for a struct/enum type, not `{}`\",\n-                                         self.tcx.item_path_str(trait_def_id),\n-                                         self_ty))\n+                            Some((format!(\"cross-crate traits with a default impl, like `{}`, can \\\n+                                           only be implemented for a struct/enum type, not `{}`\",\n+                                          self.tcx.item_path_str(trait_def_id),\n+                                          self_ty),\n+                                  \"can't implement cross-crate trait with a default impl for \\\n+                                   non-struct/enum type\"))\n                         }\n                     };\n \n-                    if let Some(msg) = msg {\n-                        span_err!(self.tcx.sess, item.span, E0321, \"{}\", msg);\n+                    if let Some((msg, label)) = msg {\n+                        struct_span_err!(self.tcx.sess, sp, E0321, \"{}\", msg)\n+                            .span_label(sp, label)\n+                            .emit();\n                         return;\n                     }\n                 }"}, {"sha": "9383bfc92a8705ae266cf1d438bcce8b0b72ef8c", "filename": "src/test/ui/codemap_tests/empty_span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a199fb23196f25bc7de7504835185b26e6f75512/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a199fb23196f25bc7de7504835185b26e6f75512/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr?ref=a199fb23196f25bc7de7504835185b26e6f75512", "patch": "@@ -2,7 +2,7 @@ error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`,\n   --> $DIR/empty_span.rs:17:5\n    |\n LL |     unsafe impl Send for &'static Foo { } //~ ERROR cross-crate traits with a default impl\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n error: aborting due to previous error\n "}, {"sha": "5f9b0c62df2b804b2f4cc57dc6504dce52e8dec7", "filename": "src/test/ui/coherence-impls-copy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a199fb23196f25bc7de7504835185b26e6f75512/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a199fb23196f25bc7de7504835185b26e6f75512/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr?ref=a199fb23196f25bc7de7504835185b26e6f75512", "patch": "@@ -32,7 +32,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-copy.rs:33:1\n    |\n LL | impl Copy for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n    = note: define and implement a trait or new type instead\n@@ -41,7 +41,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-copy.rs:40:1\n    |\n LL | impl Copy for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n    = note: define and implement a trait or new type instead\n@@ -50,7 +50,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-copy.rs:44:1\n    |\n LL | impl Copy for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n    = note: define and implement a trait or new type instead"}, {"sha": "1fc4c28d67c5d915ffe56548120ead49b9d28702", "filename": "src/test/ui/e0119/complex-impl.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a199fb23196f25bc7de7504835185b26e6f75512/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a199fb23196f25bc7de7504835185b26e6f75512/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr?ref=a199fb23196f25bc7de7504835185b26e6f75512", "patch": "@@ -8,11 +8,13 @@ LL | impl<R> External for (Q, R) {} //~ ERROR must be used\n            - impl<'a, 'b, 'c, T, U, V, W> complex_impl_support::External for (T, complex_impl_support::M<'a, 'b, 'c, std::boxed::Box<U>, V, W>)\n              where <U as std::ops::FnOnce<(T,)>>::Output == V, <V as std::iter::Iterator>::Item == T, 'b : 'a, T : 'a, U: std::ops::FnOnce<(T,)>, U : 'static, V: std::iter::Iterator, V: std::clone::Clone, W: std::ops::Add, <W as std::ops::Add>::Output: std::marker::Copy;\n \n-error[E0210]: type parameter `R` must be used as the type parameter for some local type (e.g. `MyStruct<T>`); only traits defined in the current crate can be implemented for a type parameter\n+error[E0210]: type parameter `R` must be used as the type parameter for some local type (e.g. `MyStruct<R>`)\n   --> $DIR/complex-impl.rs:19:1\n    |\n LL | impl<R> External for (Q, R) {} //~ ERROR must be used\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `R` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to 2 previous errors\n "}, {"sha": "afcbab4a5c6c0949348b2a9052fb54f5a2bc7e94", "filename": "src/test/ui/e0119/issue-28981.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a199fb23196f25bc7de7504835185b26e6f75512/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a199fb23196f25bc7de7504835185b26e6f75512/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr?ref=a199fb23196f25bc7de7504835185b26e6f75512", "patch": "@@ -8,11 +8,13 @@ LL | impl<Foo> Deref for Foo { } //~ ERROR must be used\n            - impl<'a, T> std::ops::Deref for &'a T\n              where T: ?Sized;\n \n-error[E0210]: type parameter `Foo` must be used as the type parameter for some local type (e.g. `MyStruct<T>`); only traits defined in the current crate can be implemented for a type parameter\n+error[E0210]: type parameter `Foo` must be used as the type parameter for some local type (e.g. `MyStruct<Foo>`)\n   --> $DIR/issue-28981.rs:15:1\n    |\n LL | impl<Foo> Deref for Foo { } //~ ERROR must be used\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ type parameter `Foo` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to 2 previous errors\n "}, {"sha": "045ae700955d41334eb599010a44f81d173284d4", "filename": "src/test/ui/error-codes/E0117.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a199fb23196f25bc7de7504835185b26e6f75512/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a199fb23196f25bc7de7504835185b26e6f75512/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr?ref=a199fb23196f25bc7de7504835185b26e6f75512", "patch": "@@ -8,7 +8,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/E0117.rs:11:1\n    |\n LL | impl Drop for u32 {} //~ ERROR E0117\n-   | ^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n    = note: define and implement a trait or new type instead"}, {"sha": "bbc0da2248f6eb46431a38e0789890d8b1f41433", "filename": "src/test/ui/error-codes/E0206.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a199fb23196f25bc7de7504835185b26e6f75512/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a199fb23196f25bc7de7504835185b26e6f75512/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr?ref=a199fb23196f25bc7de7504835185b26e6f75512", "patch": "@@ -14,7 +14,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/E0206.rs:13:1\n    |\n LL | impl Copy for Foo { }\n-   | ^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n    = note: define and implement a trait or new type instead"}, {"sha": "e08532b02491f433ef9306bde2a319c1d2f882d8", "filename": "src/test/ui/error-codes/E0328.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a199fb23196f25bc7de7504835185b26e6f75512/src%2Ftest%2Fui%2Ferror-codes%2FE0328.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a199fb23196f25bc7de7504835185b26e6f75512/src%2Ftest%2Fui%2Ferror-codes%2FE0328.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0328.rs?ref=a199fb23196f25bc7de7504835185b26e6f75512", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsize)]\n+\n+use std::marker::Unsize;\n+\n+pub struct MyType;\n+\n+impl<T> Unsize<T> for MyType {}\n+//~^ ERROR explicit impls for the `Unsize` trait are not permitted [E0328]\n+\n+fn main() {}"}, {"sha": "ad3a224279ce5edfdd388946fef26444001c34f0", "filename": "src/test/ui/error-codes/E0328.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a199fb23196f25bc7de7504835185b26e6f75512/src%2Ftest%2Fui%2Ferror-codes%2FE0328.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a199fb23196f25bc7de7504835185b26e6f75512/src%2Ftest%2Fui%2Ferror-codes%2FE0328.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0328.stderr?ref=a199fb23196f25bc7de7504835185b26e6f75512", "patch": "@@ -0,0 +1,9 @@\n+error[E0328]: explicit impls for the `Unsize` trait are not permitted\n+  --> $DIR/E0328.rs:17:1\n+   |\n+LL | impl<T> Unsize<T> for MyType {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of `Unsize` not allowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0328`."}]}