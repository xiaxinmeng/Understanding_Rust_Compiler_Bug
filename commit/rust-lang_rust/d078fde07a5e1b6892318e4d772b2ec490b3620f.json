{"sha": "d078fde07a5e1b6892318e4d772b2ec490b3620f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNzhmZGUwN2E1ZTFiNjg5MjMxOGU0ZDc3MmIyZWM0OTBiMzYyMGY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-05-25T10:30:21Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-05-25T10:30:21Z"}, "message": "Rustup to rustc 1.36.0-nightly (dec4c5201 2019-05-24)", "tree": {"sha": "469aab69bd18e58fa54ab28cceba3352516609cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/469aab69bd18e58fa54ab28cceba3352516609cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d078fde07a5e1b6892318e4d772b2ec490b3620f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d078fde07a5e1b6892318e4d772b2ec490b3620f", "html_url": "https://github.com/rust-lang/rust/commit/d078fde07a5e1b6892318e4d772b2ec490b3620f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d078fde07a5e1b6892318e4d772b2ec490b3620f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff6febdbf89d44e445be4094e97cc8b58b21a04", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff6febdbf89d44e445be4094e97cc8b58b21a04", "html_url": "https://github.com/rust-lang/rust/commit/8ff6febdbf89d44e445be4094e97cc8b58b21a04"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "b9f8370872f5ba7ed523c6b374ff460c8802c256", "filename": "src/lib.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d078fde07a5e1b6892318e4d772b2ec490b3620f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d078fde07a5e1b6892318e4d772b2ec490b3620f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d078fde07a5e1b6892318e4d772b2ec490b3620f", "patch": "@@ -184,7 +184,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         rustc_codegen_utils::symbol_names::provide(providers);\n         rustc_codegen_ssa::back::symbol_export::provide(providers);\n \n-        providers.target_features_whitelist = |_tcx, _cnum| Lrc::new(Default::default());\n+        providers.target_features_whitelist = |tcx, _cnum| tcx.arena.alloc(FxHashMap::default());\n     }\n     fn provide_extern(&self, providers: &mut Providers) {\n         rustc_codegen_ssa::back::symbol_export::provide_extern(providers);\n@@ -226,6 +226,17 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     }\n }\n \n+fn target_triple(sess: &Session) -> target_lexicon::Triple {\n+    let mut target = &*sess.target.target.llvm_target;\n+\n+    // FIXME add support for x86_64-apple-macosx10.7.0 to target-lexicon\n+    if target.starts_with(\"x86_64-apple-macosx\") {\n+        target = \"x86_64-apple-darwin\";\n+    }\n+\n+    target.parse().unwrap()\n+}\n+\n fn build_isa(sess: &Session) -> Box<isa::TargetIsa + 'static> {\n     let mut flags_builder = settings::builder();\n     flags_builder.enable(\"is_pic\").unwrap();\n@@ -252,8 +263,9 @@ fn build_isa(sess: &Session) -> Box<isa::TargetIsa + 'static> {\n         }\n     }*/\n \n+    let target_triple = target_triple(sess);\n     let flags = settings::Flags::new(flags_builder);\n-    cranelift::codegen::isa::lookup(sess.target.target.llvm_target.parse().unwrap())\n+    cranelift::codegen::isa::lookup(target_triple)\n         .unwrap()\n         .finish(flags)\n }"}, {"sha": "47524c59b16e164abd9ac5657e53924cf6e0884c", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d078fde07a5e1b6892318e4d772b2ec490b3620f/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d078fde07a5e1b6892318e4d772b2ec490b3620f/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=d078fde07a5e1b6892318e4d772b2ec490b3620f", "patch": "@@ -226,8 +226,7 @@ pub fn write_clif_file<'a, 'tcx: 'a>(\n \n     match ::std::fs::File::create(clif_file_name) {\n         Ok(mut file) => {\n-            let target_triple: ::target_lexicon::Triple =\n-                tcx.sess.target.target.llvm_target.parse().unwrap();\n+            let target_triple = crate::target_triple(tcx.sess);\n             writeln!(file, \"test compile\").unwrap();\n             writeln!(file, \"set is_pic\").unwrap();\n             writeln!(file, \"target {}\", target_triple).unwrap();"}]}