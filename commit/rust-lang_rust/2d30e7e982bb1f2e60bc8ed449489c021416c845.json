{"sha": "2d30e7e982bb1f2e60bc8ed449489c021416c845", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMzBlN2U5ODJiYjFmMmU2MGJjOGVkNDQ5NDg5YzAyMTQxNmM4NDU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-08-11T02:24:25Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-08-11T02:24:25Z"}, "message": "Fix merge of scope.rs", "tree": {"sha": "46ef2510a525188637ce63418f1a2e276d0824f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46ef2510a525188637ce63418f1a2e276d0824f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d30e7e982bb1f2e60bc8ed449489c021416c845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d30e7e982bb1f2e60bc8ed449489c021416c845", "html_url": "https://github.com/rust-lang/rust/commit/2d30e7e982bb1f2e60bc8ed449489c021416c845", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d30e7e982bb1f2e60bc8ed449489c021416c845/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8aa595e6d159bfb5e0293659b69e0edc457a468", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8aa595e6d159bfb5e0293659b69e0edc457a468", "html_url": "https://github.com/rust-lang/rust/commit/b8aa595e6d159bfb5e0293659b69e0edc457a468"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "cb7b13f1e614c54cea349e2eec89cd80957b79d3", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2d30e7e982bb1f2e60bc8ed449489c021416c845/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d30e7e982bb1f2e60bc8ed449489c021416c845/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=2d30e7e982bb1f2e60bc8ed449489c021416c845", "patch": "@@ -875,15 +875,13 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n                 // for us to diverge into in case the drop panics.\n                 let on_diverge = iter.peek().iter().filter_map(|dd| {\n                     match dd.kind {\n-                        DropKind::Value {\n-                            cached_block: CachedBlock {\n-                                unwind: None,\n-                                generator_drop: None,\n+                        DropKind::Value { cached_block } => {\n+                            let result = cached_block.get(generator_drop);\n+                            if result.is_none() {\n+                                span_bug!(drop_data.span, \"cached block not present?\")\n                             }\n-                        } => {\n-                            span_bug!(drop_data.span, \"cached block not present?\")\n-                        }\n-                        DropKind::Value { cached_block } => cached_block.get(generator_drop),\n+                            result\n+                        },\n                         DropKind::Storage => None\n                     }\n                 }).next();\n@@ -903,6 +901,11 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n             DropKind::Storage => {}\n         }\n \n+        // We do not need to emit StorageDead for generator drops\n+        if generator_drop {\n+            continue\n+        }\n+\n         // Drop the storage for both value and storage drops.\n         // Only temps and vars need their storage dead.\n         match drop_data.location {"}]}