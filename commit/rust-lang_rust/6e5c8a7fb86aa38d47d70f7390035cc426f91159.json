{"sha": "6e5c8a7fb86aa38d47d70f7390035cc426f91159", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNWM4YTdmYjg2YWEzOGQ0N2Q3MGY3MzkwMDM1Y2M0MjZmOTExNTk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-05-03T21:11:54Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-05-03T21:11:54Z"}, "message": "More shape fixes for evecs.", "tree": {"sha": "e9b157de0a53e056ebd63db17557e4af1ac17ef1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9b157de0a53e056ebd63db17557e4af1ac17ef1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e5c8a7fb86aa38d47d70f7390035cc426f91159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5c8a7fb86aa38d47d70f7390035cc426f91159", "html_url": "https://github.com/rust-lang/rust/commit/6e5c8a7fb86aa38d47d70f7390035cc426f91159", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e5c8a7fb86aa38d47d70f7390035cc426f91159/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11a5d10bf2958c642ae6a7c4afff8e181aa2167d", "url": "https://api.github.com/repos/rust-lang/rust/commits/11a5d10bf2958c642ae6a7c4afff8e181aa2167d", "html_url": "https://github.com/rust-lang/rust/commit/11a5d10bf2958c642ae6a7c4afff8e181aa2167d"}], "stats": {"total": 130, "additions": 103, "deletions": 27}, "files": [{"sha": "15ec71eeb05d0cab62fbf9cf73b0c32ba77cd1de", "filename": "src/rt/rust_box_annihilator.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e5c8a7fb86aa38d47d70f7390035cc426f91159/src%2Frt%2Frust_box_annihilator.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6e5c8a7fb86aa38d47d70f7390035cc426f91159/src%2Frt%2Frust_box_annihilator.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_box_annihilator.cpp?ref=6e5c8a7fb86aa38d47d70f7390035cc426f91159", "patch": "@@ -49,8 +49,8 @@ class annihilator : public shape::data<annihilator,shape::ptr> {\n         task->kernel->free(vec);\n     }\n \n-    void walk_fixedvec2(uint16_t sz, bool is_pod) {\n-        walk_vec2(is_pod, get_fixedvec_data_range(sz, dp));\n+    void walk_fixedvec2(uint16_t n_elts, size_t elt_sz, bool is_pod) {\n+        walk_vec2(is_pod, get_fixedvec_data_range(n_elts, elt_sz, dp));\n     }\n \n     void walk_vec2(bool is_pod,"}, {"sha": "66f044b8ce9b0f350205add102475f3855377073", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e5c8a7fb86aa38d47d70f7390035cc426f91159/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6e5c8a7fb86aa38d47d70f7390035cc426f91159/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=6e5c8a7fb86aa38d47d70f7390035cc426f91159", "patch": "@@ -100,8 +100,8 @@ class irc : public shape::data<irc,shape::ptr> {\n         walk_vec2(is_pod, get_slice_data_range(is_str, dp));\n     }\n \n-    void walk_fixedvec2(uint16_t sz, bool is_pod) {\n-        walk_vec2(is_pod, get_fixedvec_data_range(sz, dp));\n+    void walk_fixedvec2(uint16_t n_elts, size_t elt_sz, bool is_pod) {\n+        walk_vec2(is_pod, get_fixedvec_data_range(n_elts, elt_sz, dp));\n     }\n \n     void walk_tag2(shape::tag_info &tinfo, uint32_t tag_variant) {\n@@ -356,8 +356,8 @@ class mark : public shape::data<mark,shape::ptr> {\n         walk_vec2(is_pod, get_slice_data_range(is_str, dp));\n     }\n \n-    void walk_fixedvec2(uint16_t sz, bool is_pod) {\n-        walk_vec2(is_pod, get_fixedvec_data_range(sz, dp));\n+    void walk_fixedvec2(uint16_t n_elts, size_t elt_sz, bool is_pod) {\n+        walk_vec2(is_pod, get_fixedvec_data_range(n_elts, elt_sz, dp));\n     }\n \n     void walk_tag2(shape::tag_info &tinfo, uint32_t tag_variant) {"}, {"sha": "c5f6a39b6c8bc36493aca74fc5f9509cc70b7adb", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e5c8a7fb86aa38d47d70f7390035cc426f91159/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6e5c8a7fb86aa38d47d70f7390035cc426f91159/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=6e5c8a7fb86aa38d47d70f7390035cc426f91159", "patch": "@@ -355,9 +355,9 @@ class cmp : public data<cmp,ptr_pair> {\n         walk_vec2(is_pod, get_slice_data_range(is_str, dp));\n     }\n \n-    void walk_fixedvec2(uint16_t sz, bool is_pod) {\n+    void walk_fixedvec2(uint16_t n_elts, size_t elt_sz, bool is_pod) {\n         // Fixedvecs compare just like vecs.\n-        walk_vec2(is_pod, get_fixedvec_data_range(sz, dp));\n+        walk_vec2(is_pod, get_fixedvec_data_range(n_elts, elt_sz, dp));\n     }\n \n     void walk_box2() {"}, {"sha": "c6817b23a6e3c9ca9b7aa600003688380632c443", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6e5c8a7fb86aa38d47d70f7390035cc426f91159/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/6e5c8a7fb86aa38d47d70f7390035cc426f91159/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=6e5c8a7fb86aa38d47d70f7390035cc426f91159", "patch": "@@ -524,12 +524,12 @@ ctxt<T>::walk_rptr0() {\n template<typename T>\n void\n ctxt<T>::walk_fixedvec0() {\n-    uint16_t vec_size = get_u16_bump(sp);\n+    uint16_t n_elts = get_u16_bump(sp);\n     bool is_pod = *sp++;\n     uint16_t sp_size = get_u16_bump(sp);\n     const uint8_t *end_sp = sp + sp_size;\n \n-    static_cast<T *>(this)->walk_fixedvec1(vec_size, is_pod);\n+    static_cast<T *>(this)->walk_fixedvec1(n_elts, is_pod);\n \n     sp = end_sp;\n }\n@@ -629,8 +629,8 @@ class print : public ctxt<print> {\n     void walk_rptr1() {\n         DPRINT(\"&<\"); walk(); DPRINT(\">\");\n     }\n-    void walk_fixedvec1(uint16_t sz, bool is_pod) {\n-      DPRINT(\"fixedvec<%u, \", sz); walk(); DPRINT(\">\");\n+    void walk_fixedvec1(uint16_t n_elts, bool is_pod) {\n+      DPRINT(\"fixedvec<%u, \", n_elts); walk(); DPRINT(\">\");\n     }\n     void walk_slice1(bool is_pod, bool is_str) {\n       DPRINT(\"slice<\"); walk(); DPRINT(\">\");\n@@ -721,10 +721,10 @@ class size_of : public ctxt<size_of> {\n         abort();    // TODO\n     }\n \n-    void walk_fixedvec1(uint16_t sz, bool is_pod) {\n+    void walk_fixedvec1(uint16_t n_elts, bool is_pod) {\n         size_of sub(*this);\n         sub.walk();\n-        sa.set(sub.sa.size * sz, sub.sa.alignment);\n+        sa.set(sub.sa.size * n_elts, sub.sa.alignment);\n     }\n \n     template<typename T>\n@@ -959,9 +959,9 @@ class data : public ctxt< data<T,U> > {\n                                                              ptr_pair &dp);\n \n     static std::pair<uint8_t *,uint8_t *>\n-        get_fixedvec_data_range(uint16_t sz, ptr dp);\n+        get_fixedvec_data_range(uint16_t n_elts, size_t elt_sz, ptr dp);\n     static std::pair<ptr_pair,ptr_pair>\n-        get_fixedvec_data_range(uint16_t sz, ptr_pair &dp);\n+        get_fixedvec_data_range(uint16_t n_elts, size_t elt_sz, ptr_pair &dp);\n \n public:\n     data(rust_task *in_task,\n@@ -989,10 +989,10 @@ class data : public ctxt< data<T,U> > {\n         DATA_SIMPLE(void *, walk_slice2(is_pod, is_str));\n     }\n \n-    void walk_fixedvec1(uint16_t sz, bool is_pod) {\n+    void walk_fixedvec1(uint16_t n_elts, bool is_pod) {\n         size_align sa = size_of::get(*this);\n         ALIGN_TO(sa.alignment);\n-        static_cast<T *>(this)->walk_fixedvec2(sz, is_pod);\n+        static_cast<T *>(this)->walk_fixedvec2(n_elts, sa.size, is_pod);\n     }\n \n     void walk_box1() { DATA_SIMPLE(void *, walk_box2()); }\n@@ -1132,16 +1132,19 @@ data<T,U>::get_slice_data_range(bool is_str, ptr_pair &dp) {\n \n template<typename T,typename U>\n std::pair<uint8_t *,uint8_t *>\n-data<T,U>::get_fixedvec_data_range(uint16_t sz, ptr dp) {\n+data<T,U>::get_fixedvec_data_range(uint16_t n_elts, size_t elt_sz, ptr dp) {\n     uint8_t* ptr = (uint8_t*)(dp);\n-    return std::make_pair(ptr, ptr + sz);\n+    return std::make_pair(ptr, ptr + (((size_t)n_elts) * elt_sz));\n }\n \n template<typename T,typename U>\n std::pair<ptr_pair,ptr_pair>\n-data<T,U>::get_fixedvec_data_range(uint16_t sz, ptr_pair &dp) {\n-    std::pair<uint8_t *,uint8_t *> fst = get_fixedvec_data_range(sz, dp.fst);\n-    std::pair<uint8_t *,uint8_t *> snd = get_fixedvec_data_range(sz, dp.snd);\n+data<T,U>::get_fixedvec_data_range(uint16_t n_elts, size_t elt_sz,\n+                                   ptr_pair &dp) {\n+    std::pair<uint8_t *,uint8_t *> fst =\n+        get_fixedvec_data_range(n_elts, elt_sz, dp.fst);\n+    std::pair<uint8_t *,uint8_t *> snd =\n+        get_fixedvec_data_range(n_elts, elt_sz, dp.snd);\n     ptr_pair start(fst.first, snd.first);\n     ptr_pair end(fst.second, snd.second);\n     return std::make_pair(start, end);\n@@ -1248,13 +1251,13 @@ class log : public data<log,ptr> {\n     }\n \n     void walk_slice2(bool is_pod, bool is_str) {\n-        walk_vec2(is_pod, get_slice_data_range(dp, is_str));\n+        walk_vec2(is_pod, get_slice_data_range(is_str, dp));\n         out << \"/&\";\n     }\n \n-    void walk_fixedvec2(uint16_t sz, bool is_pod) {\n-        walk_vec2(is_pod, get_fixedvec_data_range(sz, dp));\n-        out << \"/\" << sz;\n+    void walk_fixedvec2(uint16_t n_elts, size_t elt_sz, bool is_pod) {\n+        walk_vec2(is_pod, get_fixedvec_data_range(n_elts, elt_sz, dp));\n+        out << \"/\" << n_elts;\n     }\n \n     void walk_tag2(tag_info &tinfo, tag_variant_t tag_variant) {"}, {"sha": "1dc99b082cd338a3c45762589f8eb21b90af4908", "filename": "src/test/run-pass/estr-internal.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e5c8a7fb86aa38d47d70f7390035cc426f91159/src%2Ftest%2Frun-pass%2Festr-internal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5c8a7fb86aa38d47d70f7390035cc426f91159/src%2Ftest%2Frun-pass%2Festr-internal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-internal.rs?ref=6e5c8a7fb86aa38d47d70f7390035cc426f91159", "patch": "@@ -20,6 +20,12 @@ fn main() {\n \n     log(debug, b);\n \n+    assert b < c;\n+    assert b <= c;\n+    assert b != c;\n+    assert c >= b;\n+    assert c > b;\n+\n     assert a < c;\n     assert a <= c;\n     assert a != c;"}, {"sha": "4f3bd10e4def33c2f6a055a9a8dae5470e818d82", "filename": "src/test/run-pass/evec-internal.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6e5c8a7fb86aa38d47d70f7390035cc426f91159/src%2Ftest%2Frun-pass%2Fevec-internal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5c8a7fb86aa38d47d70f7390035cc426f91159/src%2Ftest%2Frun-pass%2Fevec-internal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-internal.rs?ref=6e5c8a7fb86aa38d47d70f7390035cc426f91159", "patch": "@@ -5,4 +5,34 @@ fn main() {\n     z = x;\n     assert z[0] == 1;\n     assert z[4] == 5;\n+\n+    let a : [int]/5 = [1,1,1,1,1]/_;\n+    let b : [int]/5 = [2,2,2,2,2]/_;\n+    let c : [int]/5 = [2,2,2,2,3]/_;\n+\n+    log(debug, a);\n+\n+    assert a < b;\n+    assert a <= b;\n+    assert a != b;\n+    assert b >= a;\n+    assert b > a;\n+\n+    log(debug, b);\n+\n+    assert b < c;\n+    assert b <= c;\n+    assert b != c;\n+    assert c >= b;\n+    assert c > b;\n+\n+    assert a < c;\n+    assert a <= c;\n+    assert a != c;\n+    assert c >= a;\n+    assert c > a;\n+\n+    log(debug, c);\n+\n+\n }"}, {"sha": "8073a9be95fb6baaf324c0a71094f597a2b07565", "filename": "src/test/run-pass/evec-slice.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6e5c8a7fb86aa38d47d70f7390035cc426f91159/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5c8a7fb86aa38d47d70f7390035cc426f91159/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-slice.rs?ref=6e5c8a7fb86aa38d47d70f7390035cc426f91159", "patch": "@@ -4,4 +4,41 @@ fn main() {\n     z = x;\n     assert z[0] == 1;\n     assert z[4] == 5;\n+\n+    let a : [int]/& = [1,1,1,1,1]/&;\n+    let b : [int]/& = [2,2,2,2,2]/&;\n+    let c : [int]/& = [2,2,2,2,3]/&;\n+    let cc : [int]/& = [2,2,2,2,2,2]/&;\n+\n+    log(debug, a);\n+\n+    assert a < b;\n+    assert a <= b;\n+    assert a != b;\n+    assert b >= a;\n+    assert b > a;\n+\n+    log(debug, b);\n+\n+    assert b < c;\n+    assert b <= c;\n+    assert b != c;\n+    assert c >= b;\n+    assert c > b;\n+\n+    assert a < c;\n+    assert a <= c;\n+    assert a != c;\n+    assert c >= a;\n+    assert c > a;\n+\n+    log(debug, c);\n+\n+    assert a < cc;\n+    assert a <= cc;\n+    assert a != cc;\n+    assert cc >= a;\n+    assert cc > a;\n+\n+    log(debug, cc);\n }"}]}