{"sha": "551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MWRkN2M3YTJhZTFmYTk0ZWZmOTUzZmQ0MThiNWJjNjY0ZWI5YTc=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-02T15:10:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-02T15:10:42Z"}, "message": "Rollup merge of #42225 - brson:vs2017, r=alexcrichton\n\nSupport VS 2017\n\nFixes #38584\n\nThis replaces all the MSVC linker logic with that from the 'gcc' crate. The code looks the same, but there could be regressions.\n\nI've only tested this with x86_64.\n\nr? @alexcrichton\ncc @vadimcn @retep998", "tree": {"sha": "779519620faaf69c39c1960e3a302717444d91e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/779519620faaf69c39c1960e3a302717444d91e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7", "html_url": "https://github.com/rust-lang/rust/commit/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32f418f60a1dc924a14ce8d1a6bf71c1794782cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/32f418f60a1dc924a14ce8d1a6bf71c1794782cc", "html_url": "https://github.com/rust-lang/rust/commit/32f418f60a1dc924a14ce8d1a6bf71c1794782cc"}, {"sha": "da100fe0bb7ba77dbcc346018068dbfdba053f6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/da100fe0bb7ba77dbcc346018068dbfdba053f6b", "html_url": "https://github.com/rust-lang/rust/commit/da100fe0bb7ba77dbcc346018068dbfdba053f6b"}], "stats": {"total": 596, "additions": 63, "deletions": 533}, "files": [{"sha": "3e39893c3bdb750bf6fdecfa7d01648c38ff695d", "filename": "src/Cargo.lock", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7", "patch": "@@ -44,7 +44,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n ]\n \n@@ -84,7 +84,7 @@ name = \"backtrace-sys\"\n version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -110,7 +110,7 @@ dependencies = [\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -239,7 +239,7 @@ name = \"cmake\"\n version = \"0.1.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -257,7 +257,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -308,7 +308,7 @@ name = \"curl-sys\"\n version = \"0.3.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -411,7 +411,7 @@ name = \"flate\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -444,7 +444,7 @@ dependencies = [\n \n [[package]]\n name = \"gcc\"\n-version = \"0.3.46\"\n+version = \"0.3.50\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -605,7 +605,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"curl-sys 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -630,7 +630,7 @@ name = \"libz-sys\"\n version = \"1.0.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -650,7 +650,7 @@ version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -697,7 +697,7 @@ name = \"miniz-sys\"\n version = \"0.1.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -830,7 +830,7 @@ name = \"openssl-sys\"\n version = \"0.9.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gdi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1248,7 +1248,7 @@ name = \"rustc_llvm\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_bitflags 0.0.0\",\n ]\n \n@@ -1375,6 +1375,7 @@ name = \"rustc_trans\"\n version = \"0.0.0\"\n dependencies = [\n  \"flate 0.0.0\",\n+ \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n@@ -1425,7 +1426,7 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n@@ -1577,7 +1578,7 @@ dependencies = [\n  \"collections 0.0.0\",\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n@@ -2042,7 +2043,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36df0166e856739905cd3d7e0b210fe818592211a008862599845e012d8d304c\"\n \"checksum foreign-types 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e4056b9bd47f8ac5ba12be771f77a0dae796d1bbaaf5fd0b9c2d38b69b8a29d\"\n \"checksum fs2 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34edaee07555859dc13ca387e6ae05686bb4d0364c95d649b6dab959511f4baf\"\n-\"checksum gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\" = \"181e3cebba1d663bd92eb90e2da787e10597e027eb00de8d742b260a7850948f\"\n+\"checksum gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5f837c392f2ea61cb1576eac188653df828c861b7137d74ea4a5caa89621f9e6\"\n \"checksum gdi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0912515a8ff24ba900422ecda800b52f4016a56251922d397c576bf92c690518\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n \"checksum git2 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9de9df4358c17e448a778d90cd0272e1dab5eae30244502333fa2001c4e24357\""}, {"sha": "8842dce0257dd064f53544446176d4f1cf54e1e8", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7", "patch": "@@ -36,5 +36,5 @@ num_cpus = \"1.0\"\n toml = \"0.1\"\n getopts = \"0.2\"\n rustc-serialize = \"0.3\"\n-gcc = \"0.3.46\"\n+gcc = \"0.3.50\"\n libc = \"0.2\""}, {"sha": "49e5baad74dda4322d93ee395ba63a3999fa3f00", "filename": "src/liballoc_jemalloc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Fliballoc_jemalloc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Fliballoc_jemalloc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2FCargo.toml?ref=551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7", "patch": "@@ -17,7 +17,7 @@ libc = { path = \"../rustc/libc_shim\" }\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }\n-gcc = \"0.3.27\"\n+gcc = \"0.3.50\"\n \n [features]\n debug = []"}, {"sha": "2c9cee5e7a0937cf3644a712095f375b212fa8dd", "filename": "src/libcompiler_builtins/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Flibcompiler_builtins%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Flibcompiler_builtins%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2FCargo.toml?ref=551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7", "patch": "@@ -16,4 +16,4 @@ core = { path = \"../libcore\" }\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }\n-gcc = \"0.3.27\"\n+gcc = \"0.3.50\""}, {"sha": "e5c611460f73897ee3986277a60f9f8dd43974e5", "filename": "src/libflate/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Flibflate%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Flibflate%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2FCargo.toml?ref=551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7", "patch": "@@ -11,4 +11,4 @@ crate-type = [\"dylib\"]\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }\n-gcc = \"0.3.27\"\n+gcc = \"0.3.50\""}, {"sha": "f2eea014dd3020244ec026004bd96dc780ff69b1", "filename": "src/librustc_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Flibrustc_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Flibrustc_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2FCargo.toml?ref=551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7", "patch": "@@ -17,4 +17,4 @@ rustc_bitflags = { path = \"../librustc_bitflags\" }\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }\n-gcc = \"0.3.27\"\n+gcc = \"0.3.50\""}, {"sha": "7355b399360a30485c08670cb4b88d0b3edb3352", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7", "patch": "@@ -25,3 +25,6 @@ rustc_platform_intrinsics = { path = \"../librustc_platform_intrinsics\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+\n+[target.\"cfg(windows)\".dependencies]\n+gcc = \"0.3.50\""}, {"sha": "ee92a4b4a2dfeaf170998eabe3dd56fb523de8b1", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7", "patch": "@@ -12,7 +12,6 @@ use super::archive::{ArchiveBuilder, ArchiveConfig};\n use super::linker::Linker;\n use super::rpath::RPathConfig;\n use super::rpath;\n-use super::msvc;\n use metadata::METADATA_FILENAME;\n use rustc::session::config::{self, NoDebugInfo, OutputFilenames, Input, OutputType};\n use rustc::session::filesearch;\n@@ -142,20 +141,41 @@ pub fn build_link_meta(incremental_hashes_map: &IncrementalHashesMap) -> LinkMet\n     return r;\n }\n \n-// The third parameter is for an extra path to add to PATH for MSVC\n-// cross linkers for host toolchain DLL dependencies\n-pub fn get_linker(sess: &Session) -> (String, Command, Option<PathBuf>) {\n+// The third parameter is for an env vars, used to set up the path for MSVC\n+// to find its DLLs\n+pub fn get_linker(sess: &Session) -> (String, Command, Vec<(OsString, OsString)>) {\n     if let Some(ref linker) = sess.opts.cg.linker {\n-        (linker.clone(), Command::new(linker), None)\n+        (linker.clone(), Command::new(linker), vec![])\n     } else if sess.target.target.options.is_like_msvc {\n-        let (cmd, host) = msvc::link_exe_cmd(sess);\n-        (\"link.exe\".to_string(), cmd, host)\n+        let (cmd, envs) = msvc_link_exe_cmd(sess);\n+        (\"link.exe\".to_string(), cmd, envs)\n     } else {\n         (sess.target.target.options.linker.clone(),\n-         Command::new(&sess.target.target.options.linker), None)\n+         Command::new(&sess.target.target.options.linker), vec![])\n     }\n }\n \n+#[cfg(windows)]\n+pub fn msvc_link_exe_cmd(sess: &Session) -> (Command, Vec<(OsString, OsString)>) {\n+    use gcc::windows_registry;\n+\n+    let target = &sess.opts.target_triple;\n+    let tool = windows_registry::find_tool(target, \"link.exe\");\n+\n+    if let Some(tool) = tool {\n+        let envs = tool.env().to_vec();\n+        (tool.to_command(), envs)\n+    } else {\n+        debug!(\"Failed to locate linker.\");\n+        (Command::new(\"link.exe\"), vec![])\n+    }\n+}\n+\n+#[cfg(not(windows))]\n+pub fn msvc_link_exe_cmd(_sess: &Session) -> (Command, Vec<(OsString, OsString)>) {\n+    (Command::new(\"link.exe\"), vec![])\n+}\n+\n pub fn get_ar_prog(sess: &Session) -> String {\n     sess.opts.cg.ar.clone().unwrap_or_else(|| {\n         sess.target.target.options.ar.clone()\n@@ -706,8 +726,9 @@ fn link_natively(sess: &Session,\n     let flavor = sess.linker_flavor();\n \n     // The invocations of cc share some flags across platforms\n-    let (pname, mut cmd, extra) = get_linker(sess);\n-    cmd.env(\"PATH\", command_path(sess, extra));\n+    let (pname, mut cmd, envs) = get_linker(sess);\n+    // This will set PATH on MSVC\n+    cmd.envs(envs);\n \n     let root = sess.target_filesearch(PathKind::Native).get_lib_path();\n     if let Some(args) = sess.target.target.options.pre_link_args.get(&flavor) {"}, {"sha": "c10312a8e17103f1d147367224e4c6e07db49df4", "filename": "src/librustc_trans/back/msvc/arch.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/32f418f60a1dc924a14ce8d1a6bf71c1794782cc/src%2Flibrustc_trans%2Fback%2Fmsvc%2Farch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f418f60a1dc924a14ce8d1a6bf71c1794782cc/src%2Flibrustc_trans%2Fback%2Fmsvc%2Farch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fmsvc%2Farch.rs?ref=32f418f60a1dc924a14ce8d1a6bf71c1794782cc", "patch": "@@ -1,56 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(non_camel_case_types, non_snake_case)]\n-\n-use libc::c_void;\n-use std::mem;\n-\n-type DWORD = u32;\n-type WORD = u16;\n-type LPVOID = *mut c_void;\n-type DWORD_PTR = usize;\n-\n-const PROCESSOR_ARCHITECTURE_INTEL: WORD = 0;\n-const PROCESSOR_ARCHITECTURE_AMD64: WORD = 9;\n-\n-#[repr(C)]\n-struct SYSTEM_INFO {\n-    wProcessorArchitecture: WORD,\n-    _wReserved: WORD,\n-    _dwPageSize: DWORD,\n-    _lpMinimumApplicationAddress: LPVOID,\n-    _lpMaximumApplicationAddress: LPVOID,\n-    _dwActiveProcessorMask: DWORD_PTR,\n-    _dwNumberOfProcessors: DWORD,\n-    _dwProcessorType: DWORD,\n-    _dwAllocationGranularity: DWORD,\n-    _wProcessorLevel: WORD,\n-    _wProcessorRevision: WORD,\n-}\n-\n-extern \"system\" {\n-    fn GetNativeSystemInfo(lpSystemInfo: *mut SYSTEM_INFO);\n-}\n-\n-pub enum Arch {\n-    X86,\n-    Amd64,\n-}\n-\n-pub fn host_arch() -> Option<Arch> {\n-    let mut info = unsafe { mem::zeroed() };\n-    unsafe { GetNativeSystemInfo(&mut info) };\n-    match info.wProcessorArchitecture {\n-        PROCESSOR_ARCHITECTURE_INTEL => Some(Arch::X86),\n-        PROCESSOR_ARCHITECTURE_AMD64 => Some(Arch::Amd64),\n-        _ => None,\n-    }\n-}"}, {"sha": "97648888fa9b95bebc3362964c64c3598a2fac42", "filename": "src/librustc_trans/back/msvc/mod.rs", "status": "removed", "additions": 0, "deletions": 305, "changes": 305, "blob_url": "https://github.com/rust-lang/rust/blob/32f418f60a1dc924a14ce8d1a6bf71c1794782cc/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f418f60a1dc924a14ce8d1a6bf71c1794782cc/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fmod.rs?ref=32f418f60a1dc924a14ce8d1a6bf71c1794782cc", "patch": "@@ -1,305 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! MSVC-specific logic for linkers and such.\n-//!\n-//! This module contains a cross-platform interface but has a blank unix\n-//! implementation. The Windows implementation builds on top of Windows native\n-//! libraries (reading registry keys), so it otherwise wouldn't link on unix.\n-//!\n-//! Note that we don't have much special logic for finding the system linker on\n-//! any other platforms, so it may seem a little odd to single out MSVC to have\n-//! a good deal of code just to find the linker. Unlike Unix systems, however,\n-//! the MSVC linker is not in the system PATH by default. It also additionally\n-//! needs a few environment variables or command line flags to be able to link\n-//! against system libraries.\n-//!\n-//! In order to have a nice smooth experience on Windows, the logic in this file\n-//! is here to find the MSVC linker and set it up in the default configuration\n-//! one would need to set up anyway. This means that the Rust compiler can be\n-//! run not only in the developer shells of MSVC but also the standard cmd.exe\n-//! shell or MSYS shells.\n-//!\n-//! As a high-level note, all logic in this module for looking up various\n-//! paths/files is based on Microsoft's logic in their vcvars bat files, but\n-//! comments can also be found below leading through the various code paths.\n-\n-// A simple macro to make this option mess easier to read\n-#[cfg(windows)]\n-macro_rules! otry {\n-    ($expr:expr) => (match $expr {\n-        Some(val) => val,\n-        None => return None,\n-    })\n-}\n-\n-#[cfg(windows)]\n-mod registry;\n-#[cfg(windows)]\n-mod arch;\n-\n-#[cfg(windows)]\n-mod platform {\n-    use std::env;\n-    use std::ffi::OsString;\n-    use std::fs;\n-    use std::path::{Path, PathBuf};\n-    use std::process::Command;\n-    use rustc::session::Session;\n-    use super::arch::{host_arch, Arch};\n-    use super::registry::LOCAL_MACHINE;\n-\n-    // First we need to figure out whether the environment is already correctly\n-    // configured by vcvars. We do this by looking at the environment variable\n-    // `VCINSTALLDIR` which is always set by vcvars, and unlikely to be set\n-    // otherwise. If it is defined, then we find `link.exe` in `PATH and trust\n-    // that everything else is configured correctly.\n-    //\n-    // If `VCINSTALLDIR` wasn't defined (or we couldn't find the linker where\n-    // it claimed it should be), then we resort to finding everything\n-    // ourselves. First we find where the latest version of MSVC is installed\n-    // and what version it is. Then based on the version we find the\n-    // appropriate SDKs.\n-    //\n-    // If despite our best efforts we are still unable to find MSVC then we\n-    // just blindly call `link.exe` and hope for the best.\n-    //\n-    // This code only supports VC 11 through 15. For versions older than that\n-    // the user will need to manually execute the appropriate vcvars bat file\n-    // and it should hopefully work.\n-    //\n-    // The second member of the tuple we return is the directory for the host\n-    // linker toolchain, which is necessary when using the cross linkers.\n-    pub fn link_exe_cmd(sess: &Session) -> (Command, Option<PathBuf>) {\n-        let arch = &sess.target.target.arch;\n-        env::var_os(\"VCINSTALLDIR\").and_then(|_| {\n-            debug!(\"Detected that vcvars was already run.\");\n-            let path = otry!(env::var_os(\"PATH\"));\n-            // Mingw has its own link which is not the link we want so we\n-            // look for `cl.exe` too as a precaution.\n-            env::split_paths(&path).find(|path| {\n-                path.join(\"cl.exe\").is_file()\n-                    && path.join(\"link.exe\").is_file()\n-            }).map(|path| {\n-                (Command::new(path.join(\"link.exe\")), None)\n-            })\n-        }).or_else(|| {\n-            None.or_else(|| {\n-                find_msvc_latest(arch, \"15.0\")\n-            }).or_else(|| {\n-                find_msvc_latest(arch, \"14.0\")\n-            }).or_else(|| {\n-                find_msvc_12(arch)\n-            }).or_else(|| {\n-                find_msvc_11(arch)\n-            }).map(|(cmd, path)| (cmd, Some(path)))\n-        }).unwrap_or_else(|| {\n-            debug!(\"Failed to locate linker.\");\n-            (Command::new(\"link.exe\"), None)\n-        })\n-    }\n-\n-    // For MSVC 14 or newer we need to find the Universal CRT as well as either\n-    // the Windows 10 SDK or Windows 8.1 SDK.\n-    fn find_msvc_latest(arch: &str, ver: &str) -> Option<(Command, PathBuf)> {\n-        let vcdir = otry!(get_vc_dir(ver));\n-        let (mut cmd, host) = otry!(get_linker(&vcdir, arch));\n-        let sub = otry!(lib_subdir(arch));\n-        let ucrt = otry!(get_ucrt_dir());\n-        debug!(\"Found Universal CRT {:?}\", ucrt);\n-        add_lib(&mut cmd, &ucrt.join(\"ucrt\").join(sub));\n-        if let Some(dir) = get_sdk10_dir() {\n-            debug!(\"Found Win10 SDK {:?}\", dir);\n-            add_lib(&mut cmd, &dir.join(\"um\").join(sub));\n-        } else if let Some(dir) = get_sdk81_dir() {\n-            debug!(\"Found Win8.1 SDK {:?}\", dir);\n-            add_lib(&mut cmd, &dir.join(\"um\").join(sub));\n-        } else {\n-            return None\n-        }\n-        Some((cmd, host))\n-    }\n-\n-    // For MSVC 12 we need to find the Windows 8.1 SDK.\n-    fn find_msvc_12(arch: &str) -> Option<(Command, PathBuf)> {\n-        let vcdir = otry!(get_vc_dir(\"12.0\"));\n-        let (mut cmd, host) = otry!(get_linker(&vcdir, arch));\n-        let sub = otry!(lib_subdir(arch));\n-        let sdk81 = otry!(get_sdk81_dir());\n-        debug!(\"Found Win8.1 SDK {:?}\", sdk81);\n-        add_lib(&mut cmd, &sdk81.join(\"um\").join(sub));\n-        Some((cmd, host))\n-    }\n-\n-    // For MSVC 11 we need to find the Windows 8 SDK.\n-    fn find_msvc_11(arch: &str) -> Option<(Command, PathBuf)> {\n-        let vcdir = otry!(get_vc_dir(\"11.0\"));\n-        let (mut cmd, host) = otry!(get_linker(&vcdir, arch));\n-        let sub = otry!(lib_subdir(arch));\n-        let sdk8 = otry!(get_sdk8_dir());\n-        debug!(\"Found Win8 SDK {:?}\", sdk8);\n-        add_lib(&mut cmd, &sdk8.join(\"um\").join(sub));\n-        Some((cmd, host))\n-    }\n-\n-    // A convenience function to append library paths.\n-    fn add_lib(cmd: &mut Command, lib: &Path) {\n-        let mut arg: OsString = \"/LIBPATH:\".into();\n-        arg.push(lib);\n-        cmd.arg(arg);\n-    }\n-\n-    // Given a possible MSVC installation directory, we look for the linker and\n-    // then add the MSVC library path.\n-    fn get_linker(path: &Path, arch: &str) -> Option<(Command, PathBuf)> {\n-        debug!(\"Looking for linker in {:?}\", path);\n-        bin_subdir(arch).into_iter().map(|(sub, host)| {\n-            (path.join(\"bin\").join(sub).join(\"link.exe\"),\n-             path.join(\"bin\").join(host))\n-        }).filter(|&(ref path, _)| {\n-            path.is_file()\n-        }).map(|(path, host)| {\n-            (Command::new(path), host)\n-        }).filter_map(|(mut cmd, host)| {\n-            let sub = otry!(vc_lib_subdir(arch));\n-            add_lib(&mut cmd, &path.join(\"lib\").join(sub));\n-            Some((cmd, host))\n-        }).next()\n-    }\n-\n-    // To find MSVC we look in a specific registry key for the version we are\n-    // trying to find.\n-    fn get_vc_dir(ver: &str) -> Option<PathBuf> {\n-        let key = otry!(LOCAL_MACHINE\n-            .open(r\"SOFTWARE\\Microsoft\\VisualStudio\\SxS\\VC7\".as_ref()).ok());\n-        let path = otry!(key.query_str(ver).ok());\n-        Some(path.into())\n-    }\n-\n-    // To find the Universal CRT we look in a specific registry key for where\n-    // all the Universal CRTs are located and then sort them asciibetically to\n-    // find the newest version. While this sort of sorting isn't ideal,  it is\n-    // what vcvars does so that's good enough for us.\n-    fn get_ucrt_dir() -> Option<PathBuf> {\n-        let key = otry!(LOCAL_MACHINE\n-            .open(r\"SOFTWARE\\Microsoft\\Windows Kits\\Installed Roots\".as_ref()).ok());\n-        let root = otry!(key.query_str(\"KitsRoot10\").ok());\n-        let readdir = otry!(fs::read_dir(Path::new(&root).join(\"lib\")).ok());\n-        readdir.filter_map(|dir| {\n-            dir.ok()\n-        }).map(|dir| {\n-            dir.path()\n-        }).filter(|dir| {\n-            dir.components().last().and_then(|c| {\n-                c.as_os_str().to_str()\n-            }).map(|c| {\n-                c.starts_with(\"10.\") && dir.join(\"ucrt\").is_dir()\n-            }).unwrap_or(false)\n-        }).max()\n-    }\n-\n-    // Vcvars finds the correct version of the Windows 10 SDK by looking\n-    // for the include `um\\Windows.h` because sometimes a given version will\n-    // only have UCRT bits without the rest of the SDK. Since we only care about\n-    // libraries and not includes, we instead look for `um\\x64\\kernel32.lib`.\n-    // Since the 32-bit and 64-bit libraries are always installed together we\n-    // only need to bother checking x64, making this code a tiny bit simpler.\n-    // Like we do for the Universal CRT, we sort the possibilities\n-    // asciibetically to find the newest one as that is what vcvars does.\n-    fn get_sdk10_dir() -> Option<PathBuf> {\n-        let key = otry!(LOCAL_MACHINE\n-            .open(r\"SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v10.0\".as_ref()).ok());\n-        let root = otry!(key.query_str(\"InstallationFolder\").ok());\n-        let readdir = otry!(fs::read_dir(Path::new(&root).join(\"lib\")).ok());\n-        let mut dirs: Vec<_> = readdir.filter_map(|dir| dir.ok())\n-            .map(|dir| dir.path()).collect();\n-        dirs.sort();\n-        dirs.into_iter().rev().filter(|dir| {\n-            dir.join(\"um\").join(\"x64\").join(\"kernel32.lib\").is_file()\n-        }).next()\n-    }\n-\n-    // Interestingly there are several subdirectories, `win7` `win8` and\n-    // `winv6.3`. Vcvars seems to only care about `winv6.3` though, so the same\n-    // applies to us. Note that if we were targetting kernel mode drivers\n-    // instead of user mode applications, we would care.\n-    fn get_sdk81_dir() -> Option<PathBuf> {\n-        let key = otry!(LOCAL_MACHINE\n-            .open(r\"SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.1\".as_ref()).ok());\n-        let root = otry!(key.query_str(\"InstallationFolder\").ok());\n-        Some(Path::new(&root).join(\"lib\").join(\"winv6.3\"))\n-    }\n-\n-    fn get_sdk8_dir() -> Option<PathBuf> {\n-        let key = otry!(LOCAL_MACHINE\n-            .open(r\"SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0\".as_ref()).ok());\n-        let root = otry!(key.query_str(\"InstallationFolder\").ok());\n-        Some(Path::new(&root).join(\"lib\").join(\"win8\"))\n-    }\n-\n-    // When choosing the linker toolchain to use, we have to choose the one\n-    // which matches the host architecture. Otherwise we end up in situations\n-    // where someone on 32-bit Windows is trying to cross compile to 64-bit and\n-    // it tries to invoke the native 64-bit linker which won't work.\n-    //\n-    // For the return value of this function, the first member of the tuple is\n-    // the folder of the linker we will be invoking, while the second member\n-    // is the folder of the host toolchain for that linker which is essential\n-    // when using a cross linker. We return a Vec since on x64 there are often\n-    // two linkers that can target the architecture we desire. The 64-bit host\n-    // linker is preferred, and hence first, due to 64-bit allowing it more\n-    // address space to work with and potentially being faster.\n-    //\n-    // FIXME - Figure out what happens when the host architecture is arm.\n-    fn bin_subdir(arch: &str) -> Vec<(&'static str, &'static str)> {\n-        match (arch, host_arch()) {\n-            (\"x86\", Some(Arch::X86)) => vec![(\"\", \"\")],\n-            (\"x86\", Some(Arch::Amd64)) => vec![(\"amd64_x86\", \"amd64\"), (\"\", \"\")],\n-            (\"x86_64\", Some(Arch::X86)) => vec![(\"x86_amd64\", \"\")],\n-            (\"x86_64\", Some(Arch::Amd64)) => vec![(\"amd64\", \"amd64\"), (\"x86_amd64\", \"\")],\n-            (\"arm\", Some(Arch::X86)) => vec![(\"x86_arm\", \"\")],\n-            (\"arm\", Some(Arch::Amd64)) => vec![(\"amd64_arm\", \"amd64\"), (\"x86_arm\", \"\")],\n-            _ => vec![],\n-        }\n-    }\n-\n-    fn lib_subdir(arch: &str) -> Option<&'static str> {\n-        match arch {\n-            \"x86\" => Some(\"x86\"),\n-            \"x86_64\" => Some(\"x64\"),\n-            \"arm\" => Some(\"arm\"),\n-            _ => None,\n-        }\n-    }\n-\n-    // MSVC's x86 libraries are not in a subfolder\n-    fn vc_lib_subdir(arch: &str) -> Option<&'static str> {\n-        match arch {\n-            \"x86\" => Some(\"\"),\n-            \"x86_64\" => Some(\"amd64\"),\n-            \"arm\" => Some(\"arm\"),\n-            _ => None,\n-        }\n-    }\n-}\n-\n-// If we're not on Windows, then there's no registry to search through and MSVC\n-// wouldn't be able to run, so we just call `link.exe` and hope for the best.\n-#[cfg(not(windows))]\n-mod platform {\n-    use std::path::PathBuf;\n-    use std::process::Command;\n-    use rustc::session::Session;\n-    pub fn link_exe_cmd(_sess: &Session) -> (Command, Option<PathBuf>) {\n-        (Command::new(\"link.exe\"), None)\n-    }\n-}\n-\n-pub use self::platform::*;"}, {"sha": "8242f53896afc6c762a3ff2ef84edf62295456de", "filename": "src/librustc_trans/back/msvc/registry.rs", "status": "removed", "additions": 0, "deletions": 136, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/32f418f60a1dc924a14ce8d1a6bf71c1794782cc/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f418f60a1dc924a14ce8d1a6bf71c1794782cc/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs?ref=32f418f60a1dc924a14ce8d1a6bf71c1794782cc", "patch": "@@ -1,136 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::io;\n-use std::ffi::{OsString, OsStr};\n-use std::os::windows::prelude::*;\n-use std::ptr;\n-use libc::c_long;\n-\n-pub type DWORD = u32;\n-type LPCWSTR = *const u16;\n-type LONG = c_long;\n-type LPDWORD = *mut DWORD;\n-type LPBYTE = *mut u8;\n-\n-\n-const HKEY_LOCAL_MACHINE: HKEY = 0x80000002 as HKEY;\n-const KEY_WOW64_32KEY: REGSAM = 0x0200;\n-const KEY_READ: REGSAM = (STANDARD_RIGTS_READ | KEY_QUERY_VALUE |\n-                          KEY_ENUMERATE_SUB_KEYS | KEY_NOTIFY) & !SYNCHRONIZE;\n-const STANDARD_RIGTS_READ: REGSAM = READ_CONTROL;\n-const READ_CONTROL: REGSAM = 0x00020000;\n-const KEY_QUERY_VALUE: REGSAM = 0x0001;\n-const KEY_ENUMERATE_SUB_KEYS: REGSAM = 0x0008;\n-const KEY_NOTIFY: REGSAM = 0x0010;\n-const SYNCHRONIZE: REGSAM = 0x00100000;\n-const REG_SZ: DWORD = 1;\n-const ERROR_SUCCESS: i32 = 0;\n-\n-pub enum __HKEY__ {}\n-pub type HKEY = *mut __HKEY__;\n-pub type PHKEY = *mut HKEY;\n-pub type REGSAM = DWORD;\n-\n-#[link(name = \"advapi32\")]\n-extern \"system\" {\n-    fn RegOpenKeyExW(hKey: HKEY,\n-                     lpSubKey: LPCWSTR,\n-                     ulOptions: DWORD,\n-                     samDesired: REGSAM,\n-                     phkResult: PHKEY) -> LONG;\n-    fn RegQueryValueExW(hKey: HKEY,\n-                        lpValueName: LPCWSTR,\n-                        lpReserved: LPDWORD,\n-                        lpType: LPDWORD,\n-                        lpData: LPBYTE,\n-                        lpcbData: LPDWORD) -> LONG;\n-    fn RegCloseKey(hKey: HKEY) -> LONG;\n-}\n-\n-pub struct RegistryKey(Repr);\n-\n-struct OwnedKey(HKEY);\n-\n-enum Repr {\n-    Const(HKEY),\n-    Owned(OwnedKey),\n-}\n-\n-unsafe impl Sync for RegistryKey {}\n-unsafe impl Send for RegistryKey {}\n-\n-pub static LOCAL_MACHINE: RegistryKey = RegistryKey(Repr::Const(HKEY_LOCAL_MACHINE));\n-\n-impl RegistryKey {\n-    fn raw(&self) -> HKEY {\n-        match self.0 {\n-            Repr::Const(val) => val,\n-            Repr::Owned(ref val) => val.0,\n-        }\n-    }\n-\n-    pub fn open(&self, key: &OsStr) -> io::Result<RegistryKey> {\n-        let key = key.encode_wide().chain(Some(0)).collect::<Vec<_>>();\n-        let mut ret = ptr::null_mut();\n-        let err = unsafe {\n-            RegOpenKeyExW(self.raw(), key.as_ptr(), 0,\n-                          KEY_READ | KEY_WOW64_32KEY, &mut ret)\n-        };\n-        if err == ERROR_SUCCESS {\n-            Ok(RegistryKey(Repr::Owned(OwnedKey(ret))))\n-        } else {\n-            Err(io::Error::from_raw_os_error(err as i32))\n-        }\n-    }\n-\n-    pub fn query_str(&self, name: &str) -> io::Result<OsString> {\n-        let name: &OsStr = name.as_ref();\n-        let name = name.encode_wide().chain(Some(0)).collect::<Vec<_>>();\n-        let mut len = 0;\n-        let mut kind = 0;\n-        unsafe {\n-            let err = RegQueryValueExW(self.raw(), name.as_ptr(), ptr::null_mut(),\n-                                       &mut kind, ptr::null_mut(), &mut len);\n-            if err != ERROR_SUCCESS {\n-                return Err(io::Error::from_raw_os_error(err as i32))\n-            }\n-            if kind != REG_SZ {\n-                return Err(io::Error::new(io::ErrorKind::Other,\n-                                          \"registry key wasn't a string\"))\n-            }\n-\n-            // The length here is the length in bytes, but we're using wide\n-            // characters so we need to be sure to halve it for the capacity\n-            // passed in.\n-            let mut v = Vec::with_capacity(len as usize / 2);\n-            let err = RegQueryValueExW(self.raw(), name.as_ptr(), ptr::null_mut(),\n-                                       ptr::null_mut(), v.as_mut_ptr() as *mut _,\n-                                       &mut len);\n-            if err != ERROR_SUCCESS {\n-                return Err(io::Error::from_raw_os_error(err as i32))\n-            }\n-            v.set_len(len as usize / 2);\n-\n-            // Some registry keys may have a terminating nul character, but\n-            // we're not interested in that, so chop it off if it's there.\n-            if v[v.len() - 1] == 0 {\n-                v.pop();\n-            }\n-            Ok(OsString::from_wide(&v))\n-        }\n-    }\n-}\n-\n-impl Drop for OwnedKey {\n-    fn drop(&mut self) {\n-        unsafe { RegCloseKey(self.0); }\n-    }\n-}"}, {"sha": "71fb2e5fb202a232302192bd475e4d68096a6b7b", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7", "patch": "@@ -35,6 +35,7 @@\n #![feature(slice_patterns)]\n #![feature(unicode)]\n #![feature(conservative_impl_trait)]\n+#![feature(command_envs)]\n \n #![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n #![cfg_attr(stage0, feature(rustc_private))]\n@@ -62,6 +63,8 @@ extern crate rustc_bitflags;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;\n extern crate serialize;\n+#[cfg(windows)]\n+extern crate gcc; // Used to locate MSVC, not gcc :)\n \n pub use base::trans_crate;\n pub use back::symbol_names::provide;\n@@ -77,8 +80,7 @@ pub mod back {\n     pub(crate) mod symbol_export;\n     pub(crate) mod symbol_names;\n     pub mod write;\n-    mod msvc;\n-    mod rpath;\n+    pub mod rpath;\n }\n \n mod diagnostics;"}, {"sha": "68f03d32e83cf267237be23ea61b8ad83f5077dd", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7", "patch": "@@ -30,4 +30,4 @@ pulldown-cmark = { version = \"0.0.14\", default-features = false }\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }\n-gcc = \"0.3.27\"\n+gcc = \"0.3.50\""}, {"sha": "e17918506fe5aa62868b1028a28fe4e648facb3c", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7", "patch": "@@ -35,7 +35,7 @@ rustc_tsan = { path = \"../librustc_tsan\" }\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }\n-gcc = \"0.3.27\"\n+gcc = \"0.3.50\"\n \n [features]\n backtrace = []"}]}