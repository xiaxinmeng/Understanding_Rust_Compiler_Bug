{"sha": "cc1f0027c73f2728fa20867a4dfdbdcfad77847f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMWYwMDI3YzczZjI3MjhmYTIwODY3YTRkZmRiZGNmYWQ3Nzg0N2Y=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-02T05:15:03Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-02T06:50:14Z"}, "message": "repr: add support for trait objects\n\nCloses #8916", "tree": {"sha": "4c96e668fbe4089b1b0b07226043e09308fde184", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c96e668fbe4089b1b0b07226043e09308fde184"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc1f0027c73f2728fa20867a4dfdbdcfad77847f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc1f0027c73f2728fa20867a4dfdbdcfad77847f", "html_url": "https://github.com/rust-lang/rust/commit/cc1f0027c73f2728fa20867a4dfdbdcfad77847f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc1f0027c73f2728fa20867a4dfdbdcfad77847f/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a52154d78ff85fe87647685885e9958a50cb42e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a52154d78ff85fe87647685885e9958a50cb42e", "html_url": "https://github.com/rust-lang/rust/commit/7a52154d78ff85fe87647685885e9958a50cb42e"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "e57b845567a4e4e70148e1c1fd1d47cbfeef79f1", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc1f0027c73f2728fa20867a4dfdbdcfad77847f/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1f0027c73f2728fa20867a4dfdbdcfad77847f/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=cc1f0027c73f2728fa20867a4dfdbdcfad77847f", "patch": "@@ -146,6 +146,7 @@ impl Reflector {\n     // Entrypoint\n     pub fn visit_ty(&mut self, t: ty::t) {\n         let bcx = self.bcx;\n+        let tcx = bcx.ccx().tcx;\n         debug!(\"reflect::visit_ty %s\", ty_to_str(bcx.ccx().tcx, t));\n \n         match ty::get(t).sty {\n@@ -248,8 +249,6 @@ impl Reflector {\n           }\n \n           ty::ty_struct(did, ref substs) => {\n-              let bcx = self.bcx;\n-              let tcx = bcx.ccx().tcx;\n               let fields = ty::struct_fields(tcx, did, substs);\n \n               let extra = ~[self.c_slice(ty_to_str(tcx, t).to_managed()),\n@@ -270,7 +269,6 @@ impl Reflector {\n           // let the visitor tell us if it wants to visit only a particular\n           // variant?\n           ty::ty_enum(did, ref substs) => {\n-            let bcx = self.bcx;\n             let ccx = bcx.ccx();\n             let repr = adt::represent_type(bcx.ccx(), t);\n             let variants = ty::substd_enum_variants(ccx.tcx, did, substs);\n@@ -336,8 +334,12 @@ impl Reflector {\n             }\n           }\n \n-          // Miscallaneous extra types\n-          ty::ty_trait(_, _, _, _, _) => self.leaf(\"trait\"),\n+          ty::ty_trait(_, _, _, _, _) => {\n+              let extra = [self.c_slice(ty_to_str(tcx, t).to_managed())];\n+              self.visit(\"trait\", extra);\n+          }\n+\n+          // Miscellaneous extra types\n           ty::ty_infer(_) => self.leaf(\"infer\"),\n           ty::ty_err => self.leaf(\"err\"),\n           ty::ty_param(ref p) => {"}, {"sha": "6bef4402bf165d087c40a93a2fb95da4575c65a4", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc1f0027c73f2728fa20867a4dfdbdcfad77847f/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1f0027c73f2728fa20867a4dfdbdcfad77847f/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=cc1f0027c73f2728fa20867a4dfdbdcfad77847f", "patch": "@@ -450,9 +450,9 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n-    fn visit_trait(&mut self) -> bool {\n+    fn visit_trait(&mut self, name: &str) -> bool {\n         self.align_to::<@TyVisitor>();\n-        if ! self.inner.visit_trait() { return false; }\n+        if ! self.inner.visit_trait(name) { return false; }\n         self.bump_past::<@TyVisitor>();\n         true\n     }"}, {"sha": "63a1416e48abe298ec2c4bfb8fee301807b43d0d", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc1f0027c73f2728fa20867a4dfdbdcfad77847f/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1f0027c73f2728fa20867a4dfdbdcfad77847f/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=cc1f0027c73f2728fa20867a4dfdbdcfad77847f", "patch": "@@ -571,7 +571,11 @@ impl<'self> TyVisitor for ReprVisitor<'self> {\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n \n \n-    fn visit_trait(&mut self) -> bool { true }\n+    fn visit_trait(&mut self, name: &str) -> bool {\n+        self.writer.write(name.as_bytes());\n+        true\n+    }\n+\n     fn visit_param(&mut self, _i: uint) -> bool { true }\n     fn visit_self(&mut self) -> bool { true }\n     fn visit_type(&mut self) -> bool { true }\n@@ -661,6 +665,7 @@ fn test_repr() {\n                \"(10u64, ~\\\"hello\\\")\");\n \n     exact_test(&(&println), \"&fn()\");\n+    exact_test(&(~5 as ~ToStr), \"~to_str::ToStr:Send\");\n \n     struct Foo;\n     exact_test(&(~[Foo, Foo]), \"~[repr::test_repr::Foo, repr::test_repr::Foo]\");"}, {"sha": "1726d144df16ccb5a053221f2ceb64237905d5ee", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc1f0027c73f2728fa20867a4dfdbdcfad77847f/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1f0027c73f2728fa20867a4dfdbdcfad77847f/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=cc1f0027c73f2728fa20867a4dfdbdcfad77847f", "patch": "@@ -256,7 +256,7 @@ pub trait TyVisitor {\n     fn visit_leave_fn(&mut self, purity: uint, proto: uint,\n                       n_inputs: uint, retstyle: uint) -> bool;\n \n-    fn visit_trait(&mut self) -> bool;\n+    fn visit_trait(&mut self, name: &str) -> bool;\n     fn visit_param(&mut self, i: uint) -> bool;\n     fn visit_self(&mut self) -> bool;\n     fn visit_type(&mut self) -> bool;"}, {"sha": "e088cb1b45da59e0b3559e98a905b1a564da24d9", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc1f0027c73f2728fa20867a4dfdbdcfad77847f/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1f0027c73f2728fa20867a4dfdbdcfad77847f/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=cc1f0027c73f2728fa20867a4dfdbdcfad77847f", "patch": "@@ -428,9 +428,9 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n         true\n     }\n \n-    fn visit_trait(&mut self) -> bool {\n+    fn visit_trait(&mut self, name: &str) -> bool {\n         self.align_to::<@TyVisitor>();\n-        if ! self.inner.visit_trait() { return false; }\n+        if ! self.inner.visit_trait(name) { return false; }\n         self.bump_past::<@TyVisitor>();\n         true\n     }\n@@ -616,7 +616,7 @@ impl TyVisitor for my_visitor {\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n \n \n-    fn visit_trait(&mut self) -> bool { true }\n+    fn visit_trait(&mut self, _name: &str) -> bool { true }\n     fn visit_param(&mut self, _i: uint) -> bool { true }\n     fn visit_self(&mut self) -> bool { true }\n     fn visit_type(&mut self) -> bool { true }"}, {"sha": "53aef472aaf71c35811eef80db532b4ece4652aa", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc1f0027c73f2728fa20867a4dfdbdcfad77847f/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1f0027c73f2728fa20867a4dfdbdcfad77847f/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=cc1f0027c73f2728fa20867a4dfdbdcfad77847f", "patch": "@@ -139,7 +139,7 @@ impl TyVisitor for MyVisitor {\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n \n \n-    fn visit_trait(&mut self) -> bool { true }\n+    fn visit_trait(&mut self, _name: &str) -> bool { true }\n     fn visit_param(&mut self, _i: uint) -> bool { true }\n     fn visit_self(&mut self) -> bool { true }\n     fn visit_type(&mut self) -> bool { true }"}]}