{"sha": "a41505f4f4a93bf94f4f7439d41afd826ab20b94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MTUwNWY0ZjRhOTNiZjk0ZjRmNzQzOWQ0MWFmZDgyNmFiMjBiOTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-19T09:53:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-19T09:53:42Z"}, "message": "Auto merge of #37259 - GuillaumeGomez:fix_io_urls, r=frewsxcv\n\nAdd more io urls\n\nr? @steveklabnik", "tree": {"sha": "011a8679281313416d0a7c08cfc0ac7021e88a4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/011a8679281313416d0a7c08cfc0ac7021e88a4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a41505f4f4a93bf94f4f7439d41afd826ab20b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a41505f4f4a93bf94f4f7439d41afd826ab20b94", "html_url": "https://github.com/rust-lang/rust/commit/a41505f4f4a93bf94f4f7439d41afd826ab20b94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a41505f4f4a93bf94f4f7439d41afd826ab20b94/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c429872a32c3005cf2b347025163361218634a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c429872a32c3005cf2b347025163361218634a4", "html_url": "https://github.com/rust-lang/rust/commit/0c429872a32c3005cf2b347025163361218634a4"}, {"sha": "b12f63b17a11520c6d8d358485d85ad99a43bb6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b12f63b17a11520c6d8d358485d85ad99a43bb6f", "html_url": "https://github.com/rust-lang/rust/commit/b12f63b17a11520c6d8d358485d85ad99a43bb6f"}], "stats": {"total": 93, "additions": 52, "deletions": 41}, "files": [{"sha": "37c3f70d54dda7df4236b5adf418f8ffa0d11cbc", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 52, "deletions": 41, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/a41505f4f4a93bf94f4f7439d41afd826ab20b94/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41505f4f4a93bf94f4f7439d41afd826ab20b94/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=a41505f4f4a93bf94f4f7439d41afd826ab20b94", "patch": "@@ -1154,10 +1154,7 @@ fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)\n ///\n /// For example, reading line-by-line is inefficient without using a buffer, so\n /// if you want to read by line, you'll need `BufRead`, which includes a\n-/// [`read_line()`][readline] method as well as a [`lines()`][lines] iterator.\n-///\n-/// [readline]: #method.read_line\n-/// [lines]: #method.lines\n+/// [`read_line()`] method as well as a [`lines()`] iterator.\n ///\n /// # Examples\n ///\n@@ -1173,14 +1170,17 @@ fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)\n /// }\n /// ```\n ///\n-/// If you have something that implements `Read`, you can use the [`BufReader`\n-/// type][bufreader] to turn it into a `BufRead`.\n+/// If you have something that implements [`Read`], you can use the [`BufReader`\n+/// type][`BufReader`] to turn it into a `BufRead`.\n ///\n-/// For example, [`File`][file] implements `Read`, but not `BufRead`.\n-/// `BufReader` to the rescue!\n+/// For example, [`File`] implements [`Read`], but not `BufRead`.\n+/// [`BufReader`] to the rescue!\n ///\n-/// [bufreader]: struct.BufReader.html\n-/// [file]: ../fs/struct.File.html\n+/// [`BufReader`]: struct.BufReader.html\n+/// [`File`]: ../fs/struct.File.html\n+/// [`read_line()`]: #method.read_line\n+/// [`lines()`]: #method.lines\n+/// [`Read`]: trait.Read.html\n ///\n /// ```\n /// use std::io::{self, BufReader};\n@@ -1204,13 +1204,13 @@ pub trait BufRead: Read {\n     /// Fills the internal buffer of this object, returning the buffer contents.\n     ///\n     /// This function is a lower-level call. It needs to be paired with the\n-    /// [`consume`][consume] method to function properly. When calling this\n+    /// [`consume()`] method to function properly. When calling this\n     /// method, none of the contents will be \"read\" in the sense that later\n-    /// calling `read` may return the same contents. As such, `consume` must be\n-    /// called with the number of bytes that are consumed from this buffer to\n+    /// calling `read` may return the same contents. As such, [`consume()`] must\n+    /// be called with the number of bytes that are consumed from this buffer to\n     /// ensure that the bytes are never returned twice.\n     ///\n-    /// [consume]: #tymethod.consume\n+    /// [`consume()`]: #tymethod.consume\n     ///\n     /// An empty buffer returned indicates that the stream has reached EOF.\n     ///\n@@ -1251,21 +1251,21 @@ pub trait BufRead: Read {\n     /// so they should no longer be returned in calls to `read`.\n     ///\n     /// This function is a lower-level call. It needs to be paired with the\n-    /// [`fill_buf`][fillbuf] method to function properly. This function does\n+    /// [`fill_buf()`] method to function properly. This function does\n     /// not perform any I/O, it simply informs this object that some amount of\n-    /// its buffer, returned from `fill_buf`, has been consumed and should no\n-    /// longer be returned. As such, this function may do odd things if\n-    /// `fill_buf` isn't called before calling it.\n-    ///\n-    /// [fillbuf]: #tymethod.fill_buf\n+    /// its buffer, returned from [`fill_buf()`], has been consumed and should\n+    /// no longer be returned. As such, this function may do odd things if\n+    /// [`fill_buf()`] isn't called before calling it.\n     ///\n     /// The `amt` must be `<=` the number of bytes in the buffer returned by\n-    /// `fill_buf`.\n+    /// [`fill_buf()`].\n     ///\n     /// # Examples\n     ///\n-    /// Since `consume()` is meant to be used with [`fill_buf()`][fillbuf],\n+    /// Since `consume()` is meant to be used with [`fill_buf()`],\n     /// that method's example includes an example of `consume()`.\n+    ///\n+    /// [`fill_buf()`]: #tymethod.fill_buf\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn consume(&mut self, amt: usize);\n \n@@ -1279,8 +1279,8 @@ pub trait BufRead: Read {\n     ///\n     /// # Errors\n     ///\n-    /// This function will ignore all instances of `ErrorKind::Interrupted` and\n-    /// will otherwise return any errors returned by `fill_buf`.\n+    /// This function will ignore all instances of [`ErrorKind::Interrupted`] and\n+    /// will otherwise return any errors returned by [`fill_buf()`].\n     ///\n     /// If an I/O error is encountered then all bytes read so far will be\n     /// present in `buf` and its length will have been adjusted appropriately.\n@@ -1290,6 +1290,9 @@ pub trait BufRead: Read {\n     /// A locked standard input implements `BufRead`. In this example, we'll\n     /// read from standard input until we see an `a` byte.\n     ///\n+    /// [`fill_buf()`]: #tymethod.fill_buf\n+    /// [`ErrorKind::Interrupted`]: enum.ErrorKind.html#variant.Interrupted\n+    ///\n     /// ```\n     /// use std::io;\n     /// use std::io::prelude::*;\n@@ -1322,19 +1325,20 @@ pub trait BufRead: Read {\n     ///\n     /// # Errors\n     ///\n-    /// This function has the same error semantics as `read_until` and will also\n-    /// return an error if the read bytes are not valid UTF-8. If an I/O error\n-    /// is encountered then `buf` may contain some bytes already read in the\n-    /// event that all data read so far was valid UTF-8.\n+    /// This function has the same error semantics as [`read_until()`] and will\n+    /// also return an error if the read bytes are not valid UTF-8. If an I/O\n+    /// error is encountered then `buf` may contain some bytes already read in\n+    /// the event that all data read so far was valid UTF-8.\n     ///\n     /// # Examples\n     ///\n     /// A locked standard input implements `BufRead`. In this example, we'll\n     /// read all of the lines from standard input. If we were to do this in\n-    /// an actual project, the [`lines()`][lines] method would be easier, of\n+    /// an actual project, the [`lines()`] method would be easier, of\n     /// course.\n     ///\n-    /// [lines]: #method.lines\n+    /// [`lines()`]: #method.lines\n+    /// [`read_until()`]: #method.read_until\n     ///\n     /// ```\n     /// use std::io;\n@@ -1363,17 +1367,21 @@ pub trait BufRead: Read {\n     /// `byte`.\n     ///\n     /// The iterator returned from this function will return instances of\n-    /// `io::Result<Vec<u8>>`. Each vector returned will *not* have the\n-    /// delimiter byte at the end.\n+    /// [`io::Result`]`<`[`Vec<u8>`]`>`. Each vector returned will *not* have\n+    /// the delimiter byte at the end.\n     ///\n-    /// This function will yield errors whenever `read_until` would have also\n-    /// yielded an error.\n+    /// This function will yield errors whenever [`read_until()`] would have\n+    /// also yielded an error.\n     ///\n     /// # Examples\n     ///\n     /// A locked standard input implements `BufRead`. In this example, we'll\n     /// read some input from standard input, splitting on commas.\n     ///\n+    /// [`io::Result`]: type.Result.html\n+    /// [`Vec<u8>`]: ../vec/struct.Vec.html\n+    /// [`read_until()`]: #method.read_until\n+    ///\n     /// ```\n     /// use std::io;\n     /// use std::io::prelude::*;\n@@ -1392,9 +1400,12 @@ pub trait BufRead: Read {\n     /// Returns an iterator over the lines of this reader.\n     ///\n     /// The iterator returned from this function will yield instances of\n-    /// `io::Result<String>`. Each string returned will *not* have a newline\n+    /// [`io::Result`]`<`[`String`]`>`. Each string returned will *not* have a newline\n     /// byte (the 0xA byte) or CRLF (0xD, 0xA bytes) at the end.\n     ///\n+    /// [`io::Result`]: type.Result.html\n+    /// [`String`]: ../string/struct.String.html\n+    ///\n     /// # Examples\n     ///\n     /// A locked standard input implements `BufRead`:\n@@ -1417,10 +1428,10 @@ pub trait BufRead: Read {\n \n /// Adaptor to chain together two readers.\n ///\n-/// This struct is generally created by calling [`chain()`][chain] on a reader.\n-/// Please see the documentation of `chain()` for more details.\n+/// This struct is generally created by calling [`chain()`] on a reader.\n+/// Please see the documentation of [`chain()`] for more details.\n ///\n-/// [chain]: trait.Read.html#method.chain\n+/// [`chain()`]: trait.Read.html#method.chain\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chain<T, U> {\n     first: T,\n@@ -1581,10 +1592,10 @@ fn read_one_byte(reader: &mut Read) -> Option<Result<u8>> {\n \n /// An iterator over `u8` values of a reader.\n ///\n-/// This struct is generally created by calling [`bytes()`][bytes] on a reader.\n-/// Please see the documentation of `bytes()` for more details.\n+/// This struct is generally created by calling [`bytes()`] on a reader.\n+/// Please see the documentation of [`bytes()`] for more details.\n ///\n-/// [bytes]: trait.Read.html#method.bytes\n+/// [`bytes()`]: trait.Read.html#method.bytes\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Bytes<R> {\n     inner: R,"}]}