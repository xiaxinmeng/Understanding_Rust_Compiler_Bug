{"sha": "5c720b256f5d73434250072cc65fead746250d87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNzIwYjI1NmY1ZDczNDM0MjUwMDcyY2M2NWZlYWQ3NDYyNTBkODc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-14T06:58:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-14T06:58:39Z"}, "message": "Move parse_path to Expander", "tree": {"sha": "a3e7407ddbf0a5f398824eb7749b700d13eca587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3e7407ddbf0a5f398824eb7749b700d13eca587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c720b256f5d73434250072cc65fead746250d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c720b256f5d73434250072cc65fead746250d87", "html_url": "https://github.com/rust-lang/rust/commit/5c720b256f5d73434250072cc65fead746250d87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c720b256f5d73434250072cc65fead746250d87/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7880db1d0f75c639ee561b586219648bd05c21c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7880db1d0f75c639ee561b586219648bd05c21c", "html_url": "https://github.com/rust-lang/rust/commit/e7880db1d0f75c639ee561b586219648bd05c21c"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "afceeb8dee82f6c38b8b20a72cd312f9b03dd041", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c720b256f5d73434250072cc65fead746250d87/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c720b256f5d73434250072cc65fead746250d87/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=5c720b256f5d73434250072cc65fead746250d87", "patch": "@@ -59,6 +59,10 @@ impl Expander {\n         Source { file_id: self.current_file_id, ast }\n     }\n \n+    fn parse_path(&mut self, path: ast::Path) -> Option<Path> {\n+        Path::from_src(path, &self.hygiene)\n+    }\n+\n     fn resolve_path_as_macro(&self, db: &impl DefDatabase2, path: &Path) -> Option<MacroDefId> {\n         self.crate_def_map.resolve_path(db, self.module.module_id, path).0.get_macros()\n     }"}, {"sha": "29c1ec2a19d46627bca770df944a9e5f2eba4fba", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c720b256f5d73434250072cc65fead746250d87/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c720b256f5d73434250072cc65fead746250d87/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=5c720b256f5d73434250072cc65fead746250d87", "patch": "@@ -262,7 +262,7 @@ where\n             ast::Expr::PathExpr(e) => {\n                 let path = e\n                     .path()\n-                    .and_then(|path| self.parse_path(path))\n+                    .and_then(|path| self.expander.parse_path(path))\n                     .map(Expr::Path)\n                     .unwrap_or(Expr::Missing);\n                 self.alloc_expr(path, syntax_ptr)\n@@ -286,7 +286,7 @@ where\n                 self.alloc_expr(Expr::Return { expr }, syntax_ptr)\n             }\n             ast::Expr::RecordLit(e) => {\n-                let path = e.path().and_then(|path| self.parse_path(path));\n+                let path = e.path().and_then(|path| self.expander.parse_path(path));\n                 let mut field_ptrs = Vec::new();\n                 let record_lit = if let Some(nfl) = e.record_field_list() {\n                     let fields = nfl\n@@ -439,7 +439,7 @@ where\n                     self.db.ast_id_map(self.expander.current_file_id).ast_id(&e),\n                 );\n \n-                if let Some(path) = e.path().and_then(|path| self.parse_path(path)) {\n+                if let Some(path) = e.path().and_then(|path| self.expander.parse_path(path)) {\n                     if let Some(def) = self.expander.resolve_path_as_macro(self.db, &path) {\n                         let call_id = self.db.intern_macro(MacroCallLoc { def, ast_id });\n                         let file_id = call_id.as_file(MacroFileKind::Expr);\n@@ -508,7 +508,7 @@ where\n                 Pat::Bind { name, mode: annotation, subpat }\n             }\n             ast::Pat::TupleStructPat(p) => {\n-                let path = p.path().and_then(|path| self.parse_path(path));\n+                let path = p.path().and_then(|path| self.expander.parse_path(path));\n                 let args = p.args().map(|p| self.collect_pat(p)).collect();\n                 Pat::TupleStruct { path, args }\n             }\n@@ -518,7 +518,7 @@ where\n                 Pat::Ref { pat, mutability }\n             }\n             ast::Pat::PathPat(p) => {\n-                let path = p.path().and_then(|path| self.parse_path(path));\n+                let path = p.path().and_then(|path| self.expander.parse_path(path));\n                 path.map(Pat::Path).unwrap_or(Pat::Missing)\n             }\n             ast::Pat::TuplePat(p) => {\n@@ -527,7 +527,7 @@ where\n             }\n             ast::Pat::PlaceholderPat(_) => Pat::Wild,\n             ast::Pat::RecordPat(p) => {\n-                let path = p.path().and_then(|path| self.parse_path(path));\n+                let path = p.path().and_then(|path| self.expander.parse_path(path));\n                 let record_field_pat_list =\n                     p.record_field_pat_list().expect(\"every struct should have a field list\");\n                 let mut fields: Vec<_> = record_field_pat_list\n@@ -568,10 +568,6 @@ where\n             self.missing_pat()\n         }\n     }\n-\n-    fn parse_path(&mut self, path: ast::Path) -> Option<Path> {\n-        Path::from_src(path, &self.expander.hygiene)\n-    }\n }\n \n impl From<ast::BinOp> for BinaryOp {"}]}