{"sha": "7723506d13a03e3191d407aaf3709f157bf75193", "node_id": "C_kwDOAAsO6NoAKDc3MjM1MDZkMTNhMDNlMzE5MWQ0MDdhYWYzNzA5ZjE1N2JmNzUxOTM", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-02-09T00:33:15Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-03-07T16:47:15Z"}, "message": "Stabilize const_fn_fn_ptr_basics and const_fn_trait_bound", "tree": {"sha": "27b21886269f4e03c155a2639c4f30dc1717fe49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27b21886269f4e03c155a2639c4f30dc1717fe49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7723506d13a03e3191d407aaf3709f157bf75193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7723506d13a03e3191d407aaf3709f157bf75193", "html_url": "https://github.com/rust-lang/rust/commit/7723506d13a03e3191d407aaf3709f157bf75193", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7723506d13a03e3191d407aaf3709f157bf75193/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d137c3a7bd3b180317044f8ccb9a8b4b3bb07db3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d137c3a7bd3b180317044f8ccb9a8b4b3bb07db3", "html_url": "https://github.com/rust-lang/rust/commit/d137c3a7bd3b180317044f8ccb9a8b4b3bb07db3"}], "stats": {"total": 173, "additions": 16, "deletions": 157}, "files": [{"sha": "e5d7560e34944ab939aa0f0fd1899432e9cf6298", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7723506d13a03e3191d407aaf3709f157bf75193/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7723506d13a03e3191d407aaf3709f157bf75193/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=7723506d13a03e3191d407aaf3709f157bf75193", "patch": "@@ -359,7 +359,6 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n             match *ty.kind() {\n                 ty::Ref(_, _, hir::Mutability::Mut) => self.check_op(ops::ty::MutRef(kind)),\n                 ty::Opaque(..) => self.check_op(ops::ty::ImplTrait),\n-                ty::FnPtr(..) => self.check_op(ops::ty::FnPtr(kind)),\n \n                 ty::Dynamic(preds, _) => {\n                     for pred in preds.iter() {\n@@ -395,6 +394,7 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n                     | ty::PredicateKind::Projection(_)\n                     | ty::PredicateKind::ConstEvaluatable(..)\n                     | ty::PredicateKind::ConstEquate(..)\n+                    | ty::PredicateKind::Trait(..)\n                     | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n                     ty::PredicateKind::ObjectSafe(_) => {\n                         bug!(\"object safe predicate on function: {:#?}\", predicate)\n@@ -405,27 +405,6 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n                     ty::PredicateKind::Subtype(_) | ty::PredicateKind::Coerce(_) => {\n                         bug!(\"subtype/coerce predicate on function: {:#?}\", predicate)\n                     }\n-                    ty::PredicateKind::Trait(pred) => {\n-                        if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n-                            continue;\n-                        }\n-                        match pred.self_ty().kind() {\n-                            ty::Param(p) => {\n-                                let generics = tcx.generics_of(current);\n-                                let def = generics.type_param(p, tcx);\n-                                let span = tcx.def_span(def.def_id);\n-\n-                                // These are part of the function signature, so treat them like\n-                                // arguments when determining importance.\n-                                let kind = LocalKind::Arg;\n-\n-                                self.check_op_spanned(ops::ty::TraitBound(kind), span);\n-                            }\n-                            // other kinds of bounds are either tautologies\n-                            // or cause errors in other passes\n-                            _ => continue,\n-                        }\n-                    }\n                 }\n             }\n             match predicates.parent {\n@@ -613,7 +592,9 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 ),\n                 _,\n                 _,\n-            ) => self.check_op(ops::FnPtrCast),\n+            ) => {\n+                // Nothing to do here. Function pointer casts are allowed now.\n+            }\n \n             Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), _, _) => {\n                 // Nothing to check here (`check_local_or_return_ty` ensures no trait objects occur"}, {"sha": "be6a54c05b7d912a1622b6940e30998a64c2fbcb", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/7723506d13a03e3191d407aaf3709f157bf75193/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7723506d13a03e3191d407aaf3709f157bf75193/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=7723506d13a03e3191d407aaf3709f157bf75193", "patch": "@@ -355,31 +355,6 @@ impl<'tcx> NonConstOp<'tcx> for FnCallUnstable {\n     }\n }\n \n-#[derive(Debug)]\n-pub struct FnPtrCast;\n-impl<'tcx> NonConstOp<'tcx> for FnPtrCast {\n-    fn status_in_item(&self, ccx: &ConstCx<'_, 'tcx>) -> Status {\n-        if ccx.const_kind() != hir::ConstContext::ConstFn {\n-            Status::Allowed\n-        } else {\n-            Status::Unstable(sym::const_fn_fn_ptr_basics)\n-        }\n-    }\n-\n-    fn build_error(\n-        &self,\n-        ccx: &ConstCx<'_, 'tcx>,\n-        span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_fn_fn_ptr_basics,\n-            span,\n-            &format!(\"function pointer casts are not allowed in {}s\", ccx.const_kind()),\n-        )\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct Generator(pub hir::GeneratorKind);\n impl<'tcx> NonConstOp<'tcx> for Generator {\n@@ -821,40 +796,6 @@ pub mod ty {\n         }\n     }\n \n-    #[derive(Debug)]\n-    pub struct FnPtr(pub mir::LocalKind);\n-    impl<'tcx> NonConstOp<'tcx> for FnPtr {\n-        fn importance(&self) -> DiagnosticImportance {\n-            match self.0 {\n-                mir::LocalKind::Var | mir::LocalKind::Temp => DiagnosticImportance::Secondary,\n-                mir::LocalKind::ReturnPointer | mir::LocalKind::Arg => {\n-                    DiagnosticImportance::Primary\n-                }\n-            }\n-        }\n-\n-        fn status_in_item(&self, ccx: &ConstCx<'_, 'tcx>) -> Status {\n-            if ccx.const_kind() != hir::ConstContext::ConstFn {\n-                Status::Allowed\n-            } else {\n-                Status::Unstable(sym::const_fn_fn_ptr_basics)\n-            }\n-        }\n-\n-        fn build_error(\n-            &self,\n-            ccx: &ConstCx<'_, 'tcx>,\n-            span: Span,\n-        ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-            feature_err(\n-                &ccx.tcx.sess.parse_sess,\n-                sym::const_fn_fn_ptr_basics,\n-                span,\n-                &format!(\"function pointers cannot appear in {}s\", ccx.const_kind()),\n-            )\n-        }\n-    }\n-\n     #[derive(Debug)]\n     pub struct ImplTrait;\n     impl<'tcx> NonConstOp<'tcx> for ImplTrait {\n@@ -876,49 +817,6 @@ pub mod ty {\n         }\n     }\n \n-    #[derive(Debug)]\n-    pub struct TraitBound(pub mir::LocalKind);\n-    impl<'tcx> NonConstOp<'tcx> for TraitBound {\n-        fn importance(&self) -> DiagnosticImportance {\n-            match self.0 {\n-                mir::LocalKind::Var | mir::LocalKind::Temp => DiagnosticImportance::Secondary,\n-                mir::LocalKind::ReturnPointer | mir::LocalKind::Arg => {\n-                    DiagnosticImportance::Primary\n-                }\n-            }\n-        }\n-\n-        fn status_in_item(&self, ccx: &ConstCx<'_, 'tcx>) -> Status {\n-            if ccx.const_kind() != hir::ConstContext::ConstFn {\n-                Status::Allowed\n-            } else {\n-                Status::Unstable(sym::const_fn_trait_bound)\n-            }\n-        }\n-\n-        fn build_error(\n-            &self,\n-            ccx: &ConstCx<'_, 'tcx>,\n-            span: Span,\n-        ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-            let mut err = feature_err(\n-                &ccx.tcx.sess.parse_sess,\n-                sym::const_fn_trait_bound,\n-                span,\n-                \"trait bounds other than `Sized` on const fn parameters are unstable\",\n-            );\n-\n-            match ccx.fn_sig() {\n-                Some(fn_sig) if !fn_sig.span.contains(span) => {\n-                    err.span_label(fn_sig.span, \"function declared as const here\");\n-                }\n-                _ => {}\n-            }\n-\n-            err\n-        }\n-    }\n-\n     #[derive(Debug)]\n     pub struct DynTrait(pub mir::LocalKind);\n     impl<'tcx> NonConstOp<'tcx> for DynTrait {"}, {"sha": "b649a548750ad299e3a18d5dfeb5417930ab62b6", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7723506d13a03e3191d407aaf3709f157bf75193/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7723506d13a03e3191d407aaf3709f157bf75193/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=7723506d13a03e3191d407aaf3709f157bf75193", "patch": "@@ -86,6 +86,10 @@ declare_features! (\n     (accepted, conservative_impl_trait, \"1.26.0\", Some(34511), None),\n     /// Allows calling constructor functions in `const fn`.\n     (accepted, const_constructor, \"1.40.0\", Some(61456), None),\n+    /// Allows using and casting function pointers in a `const fn`.\n+    (accepted, const_fn_fn_ptr_basics, \"1.60.0\", Some(57563), None),\n+    /// Allows trait bounds in `const fn`.\n+    (accepted, const_fn_trait_bound, \"1.60.0\", Some(93706), None),\n     /// Allows calling `transmute` in const fn\n     (accepted, const_fn_transmute, \"1.56.0\", Some(53605), None),\n     /// Allows accessing fields of unions inside `const` functions."}, {"sha": "e48039148d9e3003e0e97747b3988d04699e94d0", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7723506d13a03e3191d407aaf3709f157bf75193/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7723506d13a03e3191d407aaf3709f157bf75193/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=7723506d13a03e3191d407aaf3709f157bf75193", "patch": "@@ -338,10 +338,6 @@ declare_features! (\n     (active, const_extern_fn, \"1.40.0\", Some(64926), None),\n     /// Allows basic arithmetic on floating point types in a `const fn`.\n     (active, const_fn_floating_point_arithmetic, \"1.48.0\", Some(57241), None),\n-    /// Allows using and casting function pointers in a `const fn`.\n-    (active, const_fn_fn_ptr_basics, \"1.48.0\", Some(57563), None),\n-    /// Allows trait bounds in `const fn`.\n-    (active, const_fn_trait_bound, \"1.53.0\", Some(93706), None),\n     /// Allows `for _ in _` loops in const contexts.\n     (active, const_for, \"1.56.0\", Some(87575), None),\n     /// Allows argument and return position `impl Trait` in a `const fn`."}, {"sha": "0a180b83355e0d7c8f8a843c4504dd04c6b527f2", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7723506d13a03e3191d407aaf3709f157bf75193/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7723506d13a03e3191d407aaf3709f157bf75193/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=7723506d13a03e3191d407aaf3709f157bf75193", "patch": "@@ -140,7 +140,7 @@\n #![feature(box_syntax)]\n #![feature(cfg_sanitize)]\n #![feature(const_deref)]\n-#![feature(const_fn_trait_bound)]\n+#![cfg_attr(bootstrap, feature(const_fn_trait_bound))]\n #![feature(const_mut_refs)]\n #![feature(const_ptr_write)]\n #![feature(const_precise_live_drops)]"}, {"sha": "d337592d5f03a159394c3bb2aa30f994d6aaebc3", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7723506d13a03e3191d407aaf3709f157bf75193/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7723506d13a03e3191d407aaf3709f157bf75193/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=7723506d13a03e3191d407aaf3709f157bf75193", "patch": "@@ -158,8 +158,8 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_has_atomic_equal_alignment)]\n #![feature(const_fn_floating_point_arithmetic)]\n-#![feature(const_fn_fn_ptr_basics)]\n-#![feature(const_fn_trait_bound)]\n+#![cfg_attr(bootstrap, feature(const_fn_fn_ptr_basics))]\n+#![cfg_attr(bootstrap, feature(const_fn_trait_bound))]\n #![feature(const_impl_trait)]\n #![feature(const_mut_refs)]\n #![feature(const_precise_live_drops)]"}, {"sha": "31900912df4683a1dec2a7e61b5d63d43d8bd85f", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7723506d13a03e3191d407aaf3709f157bf75193/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7723506d13a03e3191d407aaf3709f157bf75193/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=7723506d13a03e3191d407aaf3709f157bf75193", "patch": "@@ -20,8 +20,8 @@\n #![feature(rustc_allow_const_fn_unstable)]\n #![feature(nll)]\n #![feature(staged_api)]\n-#![feature(const_fn_trait_bound)]\n-#![feature(const_fn_fn_ptr_basics)]\n+#![cfg_attr(bootstrap, feature(const_fn_trait_bound))]\n+#![cfg_attr(bootstrap, feature(const_fn_fn_ptr_basics))]\n #![feature(allow_internal_unstable)]\n #![feature(decl_macro)]\n #![feature(extern_types)]"}, {"sha": "5b02e711aab2d8243ca5f70c532794808152b528", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7723506d13a03e3191d407aaf3709f157bf75193/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7723506d13a03e3191d407aaf3709f157bf75193/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=7723506d13a03e3191d407aaf3709f157bf75193", "patch": "@@ -242,8 +242,8 @@\n #![feature(char_internals)]\n #![feature(concat_bytes)]\n #![feature(concat_idents)]\n-#![feature(const_fn_fn_ptr_basics)]\n-#![feature(const_fn_trait_bound)]\n+#![cfg_attr(bootstrap, feature(const_fn_fn_ptr_basics))]\n+#![cfg_attr(bootstrap, feature(const_fn_trait_bound))]\n #![feature(const_format_args)]\n #![feature(const_io_structs)]\n #![feature(const_ip)]"}, {"sha": "891531951c1a03c0f6f5a3947544a04297151fcf", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7723506d13a03e3191d407aaf3709f157bf75193/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7723506d13a03e3191d407aaf3709f157bf75193/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=7723506d13a03e3191d407aaf3709f157bf75193", "patch": "@@ -32,32 +32,12 @@ pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv:\n                 | ty::PredicateKind::Projection(_)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n+                | ty::PredicateKind::Trait(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n                 ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::Coerce(_) => panic!(\"coerce predicate on function: {:#?}\", predicate),\n-                ty::PredicateKind::Trait(pred) => {\n-                    if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n-                        continue;\n-                    }\n-                    match pred.self_ty().kind() {\n-                        ty::Param(ref p) => {\n-                            let generics = tcx.generics_of(current);\n-                            let def = generics.type_param(p, tcx);\n-                            let span = tcx.def_span(def.def_id);\n-                            return Err((\n-                                span,\n-                                \"trait bounds other than `Sized` \\\n-                                 on const fn parameters are unstable\"\n-                                    .into(),\n-                            ));\n-                        },\n-                        // other kinds of bounds are either tautologies\n-                        // or cause errors in other passes\n-                        _ => continue,\n-                    }\n-                },\n             }\n         }\n         match predicates.parent {"}]}