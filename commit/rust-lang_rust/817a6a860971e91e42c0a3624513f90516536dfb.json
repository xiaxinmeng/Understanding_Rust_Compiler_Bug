{"sha": "817a6a860971e91e42c0a3624513f90516536dfb", "node_id": "C_kwDOAAsO6NoAKDgxN2E2YTg2MDk3MWU5MWU0MmMwYTM2MjQ1MTNmOTA1MTY1MzZkZmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-20T14:01:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-20T14:01:16Z"}, "message": "Auto merge of #12966 - OleStrohm:master, r=Veykril\n\nfeat: Display the value of enum variant on hover\n\nfixes #12955\n\nThis PR adds const eval support for enums, as well as showing their value on hover, just as consts currently have.\n\nI developed these two things at the same time, but I've realized now that they are separate. However since the hover is just a 10 line change (not including tests), I figured I may as well put them in the same PR. Though if you want them split up into \"enum const eval support\"  and \"show enum variant value on hover\", I think that's reasonable too.\n\nSince this adds const eval support for enums this also allows consts that reference enums to have their values computed now too.\n\nThe const evaluation itself is quite rudimentary, it doesn't keep track of the actual type of the enum, but it turns out that Rust doesn't actually either, and `E::A as u8` is valid regardless of the `repr` on `E`.\n\nIt also doesn't really care about what expression the enum variant contains, it could for example be a string, despite that not being allowed, but I guess it's up to the `cargo check` diagnostics to inform of such issues anyway?", "tree": {"sha": "a8f0a65eae24800d754c4f13fd748cf17405c4b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8f0a65eae24800d754c4f13fd748cf17405c4b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/817a6a860971e91e42c0a3624513f90516536dfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/817a6a860971e91e42c0a3624513f90516536dfb", "html_url": "https://github.com/rust-lang/rust/commit/817a6a860971e91e42c0a3624513f90516536dfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/817a6a860971e91e42c0a3624513f90516536dfb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09600a3a5b85aba1e51b41a2561841bbb67e3528", "url": "https://api.github.com/repos/rust-lang/rust/commits/09600a3a5b85aba1e51b41a2561841bbb67e3528", "html_url": "https://github.com/rust-lang/rust/commit/09600a3a5b85aba1e51b41a2561841bbb67e3528"}, {"sha": "f87ad8df055a53fff4f8b59922ccaf233211e334", "url": "https://api.github.com/repos/rust-lang/rust/commits/f87ad8df055a53fff4f8b59922ccaf233211e334", "html_url": "https://github.com/rust-lang/rust/commit/f87ad8df055a53fff4f8b59922ccaf233211e334"}], "stats": {"total": 382, "additions": 366, "deletions": 16}, "files": [{"sha": "2dc7714bbb540597c2cbcf881b9acdf2fba8dc74", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=817a6a860971e91e42c0a3624513f90516536dfb", "patch": "@@ -27,7 +27,7 @@ use crate::{\n     macro_id_to_def_id,\n     nameres::DefMap,\n     path::{ModPath, Path},\n-    src::HasSource,\n+    src::{HasChildSource, HasSource},\n     AsMacroCall, BlockId, DefWithBodyId, HasModule, LocalModuleId, Lookup, MacroId, ModuleId,\n     UnresolvedMacro,\n };\n@@ -324,6 +324,12 @@ impl Body {\n                 let src = s.source(db);\n                 (src.file_id, s.module(db), src.value.body())\n             }\n+            DefWithBodyId::VariantId(v) => {\n+                let e = v.parent.lookup(db);\n+                let src = v.parent.child_source(db);\n+                let variant = &src.value[v.local_id];\n+                (src.file_id, e.container, variant.expr())\n+            }\n         };\n         let expander = Expander::new(db, file_id, module);\n         let (mut body, source_map) = Body::new(db, expander, params, body);"}, {"sha": "9121fb50fd6302c57313fe18068ad62d471d039e", "filename": "crates/hir-def/src/body/pretty.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs?ref=817a6a860971e91e42c0a3624513f90516536dfb", "patch": "@@ -2,6 +2,8 @@\n \n use std::fmt::{self, Write};\n \n+use syntax::ast::HasName;\n+\n use crate::{\n     expr::{Array, BindingAnnotation, Literal, Statement},\n     pretty::{print_generic_args, print_path, print_type_ref},\n@@ -32,6 +34,16 @@ pub(super) fn print_body_hir(db: &dyn DefDatabase, body: &Body, owner: DefWithBo\n             };\n             format!(\"const {} = \", name)\n         }\n+        DefWithBodyId::VariantId(it) => {\n+            needs_semi = false;\n+            let src = it.parent.child_source(db);\n+            let variant = &src.value[it.local_id];\n+            let name = match &variant.name() {\n+                Some(name) => name.to_string(),\n+                None => \"_\".to_string(),\n+            };\n+            format!(\"{}\", name)\n+        }\n     };\n \n     let mut p = Printer { body, buf: header, indent_level: 0, needs_indent: false };"}, {"sha": "4c44840e861df33c3cd91c11d6f46559a005d41d", "filename": "crates/hir-def/src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flib.rs?ref=817a6a860971e91e42c0a3624513f90516536dfb", "patch": "@@ -474,16 +474,25 @@ pub enum DefWithBodyId {\n     FunctionId(FunctionId),\n     StaticId(StaticId),\n     ConstId(ConstId),\n+    VariantId(EnumVariantId),\n }\n \n impl_from!(FunctionId, ConstId, StaticId for DefWithBodyId);\n \n+// FIXME: Rename EnumVariantId to VariantId so that the macro above can be used\n+impl From<EnumVariantId> for DefWithBodyId {\n+    fn from(id: EnumVariantId) -> Self {\n+        DefWithBodyId::VariantId(id)\n+    }\n+}\n+\n impl DefWithBodyId {\n     pub fn as_generic_def_id(self) -> Option<GenericDefId> {\n         match self {\n             DefWithBodyId::FunctionId(f) => Some(f.into()),\n             DefWithBodyId::StaticId(_) => None,\n             DefWithBodyId::ConstId(c) => Some(c.into()),\n+            DefWithBodyId::VariantId(c) => Some(c.into()),\n         }\n     }\n }\n@@ -681,6 +690,7 @@ impl HasModule for DefWithBodyId {\n             DefWithBodyId::FunctionId(it) => it.lookup(db).module(db),\n             DefWithBodyId::StaticId(it) => it.lookup(db).module(db),\n             DefWithBodyId::ConstId(it) => it.lookup(db).module(db),\n+            DefWithBodyId::VariantId(it) => it.parent.lookup(db).container,\n         }\n     }\n }\n@@ -691,6 +701,7 @@ impl DefWithBodyId {\n             DefWithBodyId::FunctionId(it) => it.lookup(db).id.value.into(),\n             DefWithBodyId::StaticId(it) => it.lookup(db).id.value.into(),\n             DefWithBodyId::ConstId(it) => it.lookup(db).id.value.into(),\n+            DefWithBodyId::VariantId(it) => it.parent.lookup(db).id.value.into(),\n         }\n     }\n }"}, {"sha": "070f6837133a3b645eb16bb37282d13515d9e798", "filename": "crates/hir-def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fresolver.rs?ref=817a6a860971e91e42c0a3624513f90516536dfb", "patch": "@@ -839,6 +839,7 @@ impl HasResolver for DefWithBodyId {\n             DefWithBodyId::ConstId(c) => c.resolver(db),\n             DefWithBodyId::FunctionId(f) => f.resolver(db),\n             DefWithBodyId::StaticId(s) => s.resolver(db),\n+            DefWithBodyId::VariantId(v) => v.parent.resolver(db),\n         }\n     }\n }"}, {"sha": "965bf3f2c5b84fdad49e7e6ddc2f6113a08643c5", "filename": "crates/hir-ty/src/consteval.rs", "status": "modified", "additions": 82, "deletions": 3, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs?ref=817a6a860971e91e42c0a3624513f90516536dfb", "patch": "@@ -7,14 +7,17 @@ use std::{\n \n use chalk_ir::{BoundVar, DebruijnIndex, GenericArgData, IntTy, Scalar};\n use hir_def::{\n+    builtin_type::BuiltinInt,\n     expr::{ArithOp, BinaryOp, Expr, ExprId, Literal, Pat, PatId},\n     path::ModPath,\n     resolver::{resolver_for_expr, ResolveValueResult, Resolver, ValueNs},\n+    src::HasChildSource,\n     type_ref::ConstScalar,\n-    ConstId, DefWithBodyId,\n+    ConstId, DefWithBodyId, EnumVariantId, Lookup,\n };\n-use la_arena::{Arena, Idx};\n+use la_arena::{Arena, Idx, RawIdx};\n use stdx::never;\n+use syntax::ast::HasName;\n \n use crate::{\n     db::HirDatabase, infer::InferenceContext, lower::ParamLoweringMode, to_placeholder_idx,\n@@ -77,6 +80,7 @@ pub enum ConstEvalError {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum ComputedExpr {\n     Literal(Literal),\n+    Enum(String, EnumVariantId, Literal),\n     Tuple(Box<[ComputedExpr]>),\n }\n \n@@ -104,6 +108,7 @@ impl Display for ComputedExpr {\n                 Literal::String(x) => std::fmt::Debug::fmt(x, f),\n                 Literal::ByteString(x) => std::fmt::Debug::fmt(x, f),\n             },\n+            ComputedExpr::Enum(name, _, _) => name.fmt(f),\n             ComputedExpr::Tuple(t) => {\n                 f.write_char('(')?;\n                 for x in &**t {\n@@ -148,13 +153,47 @@ fn is_valid(scalar: &Scalar, value: i128) -> bool {\n     }\n }\n \n+fn get_name(variant: EnumVariantId, ctx: &mut ConstEvalCtx<'_>) -> String {\n+    let loc = variant.parent.lookup(ctx.db.upcast());\n+    let children = variant.parent.child_source(ctx.db.upcast());\n+    let item_tree = loc.id.item_tree(ctx.db.upcast());\n+\n+    let variant_name = children.value[variant.local_id].name();\n+    let enum_name = item_tree[loc.id.value].name.to_string();\n+    enum_name + \"::\" + &variant_name.unwrap().to_string()\n+}\n+\n pub fn eval_const(\n     expr_id: ExprId,\n     ctx: &mut ConstEvalCtx<'_>,\n ) -> Result<ComputedExpr, ConstEvalError> {\n     let expr = &ctx.exprs[expr_id];\n     match expr {\n-        Expr::Missing => Err(ConstEvalError::IncompleteExpr),\n+        Expr::Missing => match ctx.owner {\n+            DefWithBodyId::VariantId(variant) => {\n+                let prev_idx: u32 = variant.local_id.into_raw().into();\n+                let prev_idx = prev_idx.checked_sub(1).map(|idx| Idx::from_raw(RawIdx::from(idx)));\n+                let value = match prev_idx {\n+                    Some(prev) => {\n+                        let prev_variant = EnumVariantId { local_id: prev, ..variant };\n+                        1 + match ctx.db.const_eval_variant(prev_variant)? {\n+                            ComputedExpr::Literal(Literal::Int(v, _)) => v,\n+                            ComputedExpr::Literal(Literal::Uint(v, _)) => v\n+                                .try_into()\n+                                .map_err(|_| ConstEvalError::NotSupported(\"too big u128\"))?,\n+                            _ => {\n+                                return Err(ConstEvalError::NotSupported(\n+                                    \"Enum can't contain this kind of value\",\n+                                ))\n+                            }\n+                        }\n+                    }\n+                    _ => 0,\n+                };\n+                Ok(ComputedExpr::Literal(Literal::Int(value, Some(BuiltinInt::I128))))\n+            }\n+            _ => Err(ConstEvalError::IncompleteExpr),\n+        },\n         Expr::Literal(l) => Ok(ComputedExpr::Literal(l.clone())),\n         &Expr::UnaryOp { expr, op } => {\n             let ty = &ctx.expr_ty(expr);\n@@ -339,9 +378,21 @@ pub fn eval_const(\n                 ValueNs::GenericParam(_) => {\n                     Err(ConstEvalError::NotSupported(\"const generic without substitution\"))\n                 }\n+                ValueNs::EnumVariantId(id) => match ctx.db.const_eval_variant(id)? {\n+                    ComputedExpr::Literal(lit) => {\n+                        Ok(ComputedExpr::Enum(get_name(id, ctx), id, lit))\n+                    }\n+                    _ => Err(ConstEvalError::NotSupported(\n+                        \"Enums can't evalute to anything but numbers\",\n+                    )),\n+                },\n                 _ => Err(ConstEvalError::NotSupported(\"path that are not const or local\")),\n             }\n         }\n+        &Expr::Cast { expr, .. } => match eval_const(expr, ctx)? {\n+            ComputedExpr::Enum(_, _, lit) => Ok(ComputedExpr::Literal(lit)),\n+            _ => Err(ConstEvalError::NotSupported(\"Can't cast these types\")),\n+        },\n         _ => Err(ConstEvalError::NotSupported(\"This kind of expression\")),\n     }\n }\n@@ -412,6 +463,14 @@ pub(crate) fn const_eval_recover(\n     Err(ConstEvalError::Loop)\n }\n \n+pub(crate) fn const_eval_recover_variant(\n+    _: &dyn HirDatabase,\n+    _: &[String],\n+    _: &EnumVariantId,\n+) -> Result<ComputedExpr, ConstEvalError> {\n+    Err(ConstEvalError::Loop)\n+}\n+\n pub(crate) fn const_eval_query(\n     db: &dyn HirDatabase,\n     const_id: ConstId,\n@@ -433,6 +492,26 @@ pub(crate) fn const_eval_query(\n     result\n }\n \n+pub(crate) fn const_eval_query_variant(\n+    db: &dyn HirDatabase,\n+    variant_id: EnumVariantId,\n+) -> Result<ComputedExpr, ConstEvalError> {\n+    let def = variant_id.into();\n+    let body = db.body(def);\n+    let infer = &db.infer(def);\n+    eval_const(\n+        body.body_expr,\n+        &mut ConstEvalCtx {\n+            db,\n+            owner: def,\n+            exprs: &body.exprs,\n+            pats: &body.pats,\n+            local_data: HashMap::default(),\n+            infer,\n+        },\n+    )\n+}\n+\n pub(crate) fn eval_to_const<'a>(\n     expr: Idx<Expr>,\n     mode: ParamLoweringMode,"}, {"sha": "b76506f6ebc2c867f3b19dcdfcaf31886f60527e", "filename": "crates/hir-ty/src/consteval/tests.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs?ref=817a6a860971e91e42c0a3624513f90516536dfb", "patch": "@@ -87,6 +87,49 @@ fn consts() {\n     );\n }\n \n+#[test]\n+fn enums() {\n+    check_number(\n+        r#\"\n+    enum E {\n+        F1 = 1,\n+        F2 = 2 * E::F1 as u8,\n+        F3 = 3 * E::F2 as u8,\n+    }\n+    const GOAL: i32 = E::F3 as u8;\n+    \"#,\n+        6,\n+    );\n+    check_number(\n+        r#\"\n+    enum E { F1 = 1, F2, }\n+    const GOAL: i32 = E::F2 as u8;\n+    \"#,\n+        2,\n+    );\n+    check_number(\n+        r#\"\n+    enum E { F1, }\n+    const GOAL: i32 = E::F1 as u8;\n+    \"#,\n+        0,\n+    );\n+    let r = eval_goal(\n+        r#\"\n+        enum E { A = 1, }\n+        const GOAL: E = E::A;\n+        \"#,\n+    )\n+    .unwrap();\n+    match r {\n+        ComputedExpr::Enum(name, _, Literal::Uint(val, _)) => {\n+            assert_eq!(name, \"E::A\");\n+            assert_eq!(val, 1);\n+        }\n+        x => panic!(\"Expected enum but found {:?}\", x),\n+    }\n+}\n+\n #[test]\n fn const_loop() {\n     check_fail("}, {"sha": "e16530ecc15536cab37b7838b14bc4bc6bcbe15f", "filename": "crates/hir-ty/src/db.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdb.rs?ref=817a6a860971e91e42c0a3624513f90516536dfb", "patch": "@@ -6,8 +6,9 @@ use std::sync::Arc;\n use arrayvec::ArrayVec;\n use base_db::{impl_intern_key, salsa, CrateId, Upcast};\n use hir_def::{\n-    db::DefDatabase, expr::ExprId, BlockId, ConstId, ConstParamId, DefWithBodyId, FunctionId,\n-    GenericDefId, ImplId, LifetimeParamId, LocalFieldId, TypeOrConstParamId, VariantId,\n+    db::DefDatabase, expr::ExprId, BlockId, ConstId, ConstParamId, DefWithBodyId, EnumVariantId,\n+    FunctionId, GenericDefId, ImplId, LifetimeParamId, LocalFieldId, Lookup, TypeOrConstParamId,\n+    VariantId,\n };\n use la_arena::ArenaMap;\n \n@@ -47,6 +48,10 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::cycle(crate::consteval::const_eval_recover)]\n     fn const_eval(&self, def: ConstId) -> Result<ComputedExpr, ConstEvalError>;\n \n+    #[salsa::invoke(crate::consteval::const_eval_query_variant)]\n+    #[salsa::cycle(crate::consteval::const_eval_recover_variant)]\n+    fn const_eval_variant(&self, def: EnumVariantId) -> Result<ComputedExpr, ConstEvalError>;\n+\n     #[salsa::invoke(crate::lower::impl_trait_query)]\n     fn impl_trait(&self, def: ImplId) -> Option<Binders<TraitRef>>;\n \n@@ -188,6 +193,13 @@ fn infer_wait(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult>\n         DefWithBodyId::ConstId(it) => {\n             db.const_data(it).name.clone().unwrap_or_else(Name::missing).to_string()\n         }\n+        DefWithBodyId::VariantId(it) => {\n+            let up_db: &dyn DefDatabase = db.upcast();\n+            let loc = it.parent.lookup(up_db);\n+            let item_tree = loc.id.item_tree(up_db);\n+            let konst = &item_tree[loc.id.value];\n+            konst.name.to_string()\n+        }\n     });\n     db.infer_query(def)\n }"}, {"sha": "431ab949b46243ae2f8b0621454fe76614212334", "filename": "crates/hir-ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=817a6a860971e91e42c0a3624513f90516536dfb", "patch": "@@ -18,7 +18,9 @@ pub fn missing_unsafe(db: &dyn HirDatabase, def: DefWithBodyId) -> Vec<ExprId> {\n \n     let is_unsafe = match def {\n         DefWithBodyId::FunctionId(it) => db.function_data(it).has_unsafe_kw(),\n-        DefWithBodyId::StaticId(_) | DefWithBodyId::ConstId(_) => false,\n+        DefWithBodyId::StaticId(_) | DefWithBodyId::ConstId(_) | DefWithBodyId::VariantId(_) => {\n+            false\n+        }\n     };\n     if is_unsafe {\n         return res;"}, {"sha": "7d1c98207586df7db355205b7f4837bc95b08ca9", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=817a6a860971e91e42c0a3624513f90516536dfb", "patch": "@@ -67,6 +67,10 @@ pub(crate) fn infer_query(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<Infer\n         DefWithBodyId::ConstId(c) => ctx.collect_const(&db.const_data(c)),\n         DefWithBodyId::FunctionId(f) => ctx.collect_fn(f),\n         DefWithBodyId::StaticId(s) => ctx.collect_static(&db.static_data(s)),\n+        DefWithBodyId::VariantId(v) => {\n+            // FIXME: This should return the `repr(...)` type of the enum\n+            ctx.return_ty = TyBuilder::def_ty(db, v.parent.into()).fill_with_unknown().build()\n+        }\n     }\n \n     ctx.infer_body();"}, {"sha": "be5ece9c5c5000aa482897130d3646f67e24afd6", "filename": "crates/hir-ty/src/tests.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests.rs?ref=817a6a860971e91e42c0a3624513f90516536dfb", "patch": "@@ -16,7 +16,7 @@ use base_db::{fixture::WithFixture, FileRange, SourceDatabaseExt};\n use expect_test::Expect;\n use hir_def::{\n     body::{Body, BodySourceMap, SyntheticSyntax},\n-    db::DefDatabase,\n+    db::{DefDatabase, InternDatabase},\n     expr::{ExprId, PatId},\n     item_scope::ItemScope,\n     nameres::DefMap,\n@@ -135,6 +135,10 @@ fn check_impl(ra_fixture: &str, allow_none: bool, only_types: bool, display_sour\n             let loc = it.lookup(&db);\n             loc.source(&db).value.syntax().text_range().start()\n         }\n+        DefWithBodyId::VariantId(it) => {\n+            let loc = db.lookup_intern_enum(it.parent);\n+            loc.source(&db).value.syntax().text_range().start()\n+        }\n     });\n     let mut unexpected_type_mismatches = String::new();\n     for def in defs {\n@@ -388,6 +392,10 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n             let loc = it.lookup(&db);\n             loc.source(&db).value.syntax().text_range().start()\n         }\n+        DefWithBodyId::VariantId(it) => {\n+            let loc = db.lookup_intern_enum(it.parent);\n+            loc.source(&db).value.syntax().text_range().start()\n+        }\n     });\n     for def in defs {\n         let (_body, source_map) = db.body_with_source_map(def);"}, {"sha": "f825a72c0f58a63998d2cc32aca59b4727b02dba", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=817a6a860971e91e42c0a3624513f90516536dfb", "patch": "@@ -140,6 +140,7 @@ impl From<DefWithBody> for DefWithBodyId {\n             DefWithBody::Function(it) => DefWithBodyId::FunctionId(it.id),\n             DefWithBody::Static(it) => DefWithBodyId::StaticId(it.id),\n             DefWithBody::Const(it) => DefWithBodyId::ConstId(it.id),\n+            DefWithBody::Variant(it) => DefWithBodyId::VariantId(it.into()),\n         }\n     }\n }\n@@ -150,6 +151,7 @@ impl From<DefWithBodyId> for DefWithBody {\n             DefWithBodyId::FunctionId(it) => DefWithBody::Function(it.into()),\n             DefWithBodyId::StaticId(it) => DefWithBody::Static(it.into()),\n             DefWithBodyId::ConstId(it) => DefWithBody::Const(it.into()),\n+            DefWithBodyId::VariantId(it) => DefWithBody::Variant(it.into()),\n         }\n     }\n }\n@@ -172,9 +174,7 @@ impl From<GenericDef> for GenericDefId {\n             GenericDef::Trait(it) => GenericDefId::TraitId(it.id),\n             GenericDef::TypeAlias(it) => GenericDefId::TypeAliasId(it.id),\n             GenericDef::Impl(it) => GenericDefId::ImplId(it.id),\n-            GenericDef::Variant(it) => {\n-                GenericDefId::EnumVariantId(EnumVariantId { parent: it.parent.id, local_id: it.id })\n-            }\n+            GenericDef::Variant(it) => GenericDefId::EnumVariantId(it.into()),\n             GenericDef::Const(it) => GenericDefId::ConstId(it.id),\n         }\n     }\n@@ -188,9 +188,7 @@ impl From<GenericDefId> for GenericDef {\n             GenericDefId::TraitId(it) => GenericDef::Trait(it.into()),\n             GenericDefId::TypeAliasId(it) => GenericDef::TypeAlias(it.into()),\n             GenericDefId::ImplId(it) => GenericDef::Impl(it.into()),\n-            GenericDefId::EnumVariantId(it) => {\n-                GenericDef::Variant(Variant { parent: it.parent.into(), id: it.local_id })\n-            }\n+            GenericDefId::EnumVariantId(it) => GenericDef::Variant(it.into()),\n             GenericDefId::ConstId(it) => GenericDef::Const(it.into()),\n         }\n     }"}, {"sha": "389e07db336aceb3bdf32e64e08650556d5d16e9", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=817a6a860971e91e42c0a3624513f90516536dfb", "patch": "@@ -73,7 +73,7 @@ use once_cell::unsync::Lazy;\n use rustc_hash::FxHashSet;\n use stdx::{impl_from, never};\n use syntax::{\n-    ast::{self, HasAttrs as _, HasDocComments, HasName},\n+    ast::{self, Expr, HasAttrs as _, HasDocComments, HasName},\n     AstNode, AstPtr, SmolStr, SyntaxNodePtr, TextRange, T,\n };\n \n@@ -952,6 +952,10 @@ impl Enum {\n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n         Type::from_def(db, self.id)\n     }\n+\n+    pub fn is_data_carrying(self, db: &dyn HirDatabase) -> bool {\n+        self.variants(db).iter().any(|v| !matches!(v.kind(db), StructKind::Unit))\n+    }\n }\n \n impl HasVisibility for Enum {\n@@ -960,6 +964,12 @@ impl HasVisibility for Enum {\n     }\n }\n \n+impl From<&Variant> for DefWithBodyId {\n+    fn from(&v: &Variant) -> Self {\n+        DefWithBodyId::VariantId(v.into())\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Variant {\n     pub(crate) parent: Enum,\n@@ -994,6 +1004,14 @@ impl Variant {\n     pub(crate) fn variant_data(self, db: &dyn HirDatabase) -> Arc<VariantData> {\n         db.enum_data(self.parent.id).variants[self.id].variant_data.clone()\n     }\n+\n+    pub fn value(self, db: &dyn HirDatabase) -> Option<Expr> {\n+        self.source(db)?.value.expr()\n+    }\n+\n+    pub fn eval(self, db: &dyn HirDatabase) -> Result<ComputedExpr, ConstEvalError> {\n+        db.const_eval_variant(self.into())\n+    }\n }\n \n /// Variants inherit visibility from the parent enum.\n@@ -1129,6 +1147,7 @@ pub enum DefWithBody {\n     Function(Function),\n     Static(Static),\n     Const(Const),\n+    Variant(Variant),\n }\n impl_from!(Function, Const, Static for DefWithBody);\n \n@@ -1138,6 +1157,7 @@ impl DefWithBody {\n             DefWithBody::Const(c) => c.module(db),\n             DefWithBody::Function(f) => f.module(db),\n             DefWithBody::Static(s) => s.module(db),\n+            DefWithBody::Variant(v) => v.module(db),\n         }\n     }\n \n@@ -1146,6 +1166,7 @@ impl DefWithBody {\n             DefWithBody::Function(f) => Some(f.name(db)),\n             DefWithBody::Static(s) => Some(s.name(db)),\n             DefWithBody::Const(c) => c.name(db),\n+            DefWithBody::Variant(v) => Some(v.name(db)),\n         }\n     }\n \n@@ -1155,6 +1176,7 @@ impl DefWithBody {\n             DefWithBody::Function(it) => it.ret_type(db),\n             DefWithBody::Static(it) => it.ty(db),\n             DefWithBody::Const(it) => it.ty(db),\n+            DefWithBody::Variant(it) => it.parent.ty(db),\n         }\n     }\n \n@@ -1163,6 +1185,7 @@ impl DefWithBody {\n             DefWithBody::Function(it) => it.id.into(),\n             DefWithBody::Static(it) => it.id.into(),\n             DefWithBody::Const(it) => it.id.into(),\n+            DefWithBody::Variant(it) => it.into(),\n         }\n     }\n \n@@ -1379,6 +1402,7 @@ impl DefWithBody {\n             DefWithBody::Function(it) => it.into(),\n             DefWithBody::Static(it) => it.into(),\n             DefWithBody::Const(it) => it.into(),\n+            DefWithBody::Variant(it) => it.into(),\n         };\n         for diag in hir_ty::diagnostics::incorrect_case(db, krate, def.into()) {\n             acc.push(diag.into())"}, {"sha": "fd78decda4e648b4373d86d2a6c2de5233d4de76", "filename": "crates/hir/src/symbols.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fhir%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsymbols.rs?ref=817a6a860971e91e42c0a3624513f90516536dfb", "patch": "@@ -244,6 +244,10 @@ impl<'a> SymbolCollector<'a> {\n             DefWithBodyId::ConstId(id) => Some(\n                 id.lookup(self.db.upcast()).source(self.db.upcast()).value.name()?.text().into(),\n             ),\n+            DefWithBodyId::VariantId(id) => Some({\n+                let db = self.db.upcast();\n+                id.parent.lookup(db).source(db).value.name()?.text().into()\n+            }),\n         }\n     }\n "}, {"sha": "82b85f2fa5edd58ed58c59aa172c1599bb7c994d", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=817a6a860971e91e42c0a3624513f90516536dfb", "patch": "@@ -239,6 +239,7 @@ impl Definition {\n                 DefWithBody::Function(f) => f.source(db).map(|src| src.syntax().cloned()),\n                 DefWithBody::Const(c) => c.source(db).map(|src| src.syntax().cloned()),\n                 DefWithBody::Static(s) => s.source(db).map(|src| src.syntax().cloned()),\n+                DefWithBody::Variant(v) => v.source(db).map(|src| src.syntax().cloned()),\n             };\n             return match def {\n                 Some(def) => SearchScope::file_range(def.as_ref().original_file_range(db)),"}, {"sha": "d109c0769194fbdb376da4f55c2f56e49278261e", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=817a6a860971e91e42c0a3624513f90516536dfb", "patch": "@@ -346,7 +346,16 @@ pub(super) fn definition(\n         Definition::Module(it) => label_and_docs(db, it),\n         Definition::Function(it) => label_and_docs(db, it),\n         Definition::Adt(it) => label_and_docs(db, it),\n-        Definition::Variant(it) => label_and_docs(db, it),\n+        Definition::Variant(it) => label_value_and_docs(db, it, |&it| {\n+            if !it.parent_enum(db).is_data_carrying(db) {\n+                match it.eval(db) {\n+                    Ok(x) => Some(format!(\"{}\", x)),\n+                    Err(_) => it.value(db).map(|x| format!(\"{:?}\", x)),\n+                }\n+            } else {\n+                None\n+            }\n+        }),\n         Definition::Const(it) => label_value_and_docs(db, it, |it| {\n             let body = it.eval(db);\n             match body {"}, {"sha": "eb997e6fef83022f726dec8a2ff0e5cbcd6fdc86", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a6a860971e91e42c0a3624513f90516536dfb/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=817a6a860971e91e42c0a3624513f90516536dfb", "patch": "@@ -698,6 +698,7 @@ fn hover_enum_variant() {\n     check(\n         r#\"\n enum Option<T> {\n+    Some(T)\n     /// The None variant\n     Non$0e\n }\n@@ -3527,6 +3528,112 @@ impl<const LEN: usize> Foo<LEN$0> {}\n     );\n }\n \n+#[test]\n+fn hover_const_eval_variant() {\n+    // show hex for <10\n+    check(\n+        r#\"\n+#[repr(u8)]\n+enum E {\n+    /// This is a doc\n+    A$0 = 1 << 3,\n+}\n+\"#,\n+        expect![[r#\"\n+            *A*\n+\n+            ```rust\n+            test::E\n+            ```\n+\n+            ```rust\n+            A = 8\n+            ```\n+\n+            ---\n+\n+            This is a doc\n+        \"#]],\n+    );\n+    // show hex for >10\n+    check(\n+        r#\"\n+#[repr(u8)]\n+enum E {\n+    /// This is a doc\n+    A$0 = (1 << 3) + (1 << 2),\n+}\n+\"#,\n+        expect![[r#\"\n+            *A*\n+\n+            ```rust\n+            test::E\n+            ```\n+\n+            ```rust\n+            A = 12 (0xC)\n+            ```\n+\n+            ---\n+\n+            This is a doc\n+        \"#]],\n+    );\n+    // enums in const eval\n+    check(\n+        r#\"\n+#[repr(u8)]\n+enum E {\n+    A = 1,\n+    /// This is a doc\n+    B$0 = E::A as u8 + 1,\n+}\n+\"#,\n+        expect![[r#\"\n+            *B*\n+\n+            ```rust\n+            test::E\n+            ```\n+\n+            ```rust\n+            B = 2\n+            ```\n+\n+            ---\n+\n+            This is a doc\n+        \"#]],\n+    );\n+    // unspecified variant should increment by one\n+    check(\n+        r#\"\n+#[repr(u8)]\n+enum E {\n+    A = 4,\n+    /// This is a doc\n+    B$0,\n+}\n+\"#,\n+        expect![[r#\"\n+            *B*\n+\n+            ```rust\n+            test::E\n+            ```\n+\n+            ```rust\n+            B = 5\n+            ```\n+\n+            ---\n+\n+            This is a doc\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn hover_const_eval() {\n     // show hex for <10\n@@ -3820,6 +3927,35 @@ fn foo() {\n \n             ---\n \n+            This is a doc\n+        \"#]],\n+    );\n+    check(\n+        r#\"\n+enum E {\n+    /// This is a doc\n+    A = 3,\n+}\n+fn foo(e: E) {\n+    match e {\n+        E::A$0 => (),\n+        _ => ()\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            *A*\n+\n+            ```rust\n+            test::E\n+            ```\n+\n+            ```rust\n+            A = 3\n+            ```\n+\n+            ---\n+\n             This is a doc\n         \"#]],\n     );"}]}