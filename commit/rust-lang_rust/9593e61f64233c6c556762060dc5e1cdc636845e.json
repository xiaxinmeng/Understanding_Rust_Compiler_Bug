{"sha": "9593e61f64233c6c556762060dc5e1cdc636845e", "node_id": "C_kwDOAAsO6NoAKDk1OTNlNjFmNjQyMzNjNmM1NTY3NjIwNjBkYzVlMWNkYzYzNjg0NWU", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-01T06:41:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-01T06:41:05Z"}, "message": "Rollup merge of #88838 - FabianWolff:issue-88472, r=estebank\n\nDo not suggest importing inaccessible items\n\nFixes #88472. For this example:\n```rust\nmod a {\n    struct Foo;\n}\n\nmod b {\n    type Bar = Foo;\n}\n```\nrustc currently emits:\n```\nerror[E0412]: cannot find type `Foo` in this scope\n --> test.rs:6:16\n  |\n6 |     type Bar = Foo;\n  |                ^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n6 |     use a::Foo;\n  |\n```\nthis is incorrect, as applying this suggestion leads to\n```\nerror[E0603]: struct `Foo` is private\n --> test.rs:6:12\n  |\n6 |     use a::Foo;\n  |            ^^^ private struct\n  |\nnote: the struct `Foo` is defined here\n --> test.rs:2:5\n  |\n2 |     struct Foo;\n  |     ^^^^^^^^^^^\n```\nWith my changes, I get:\n```\nerror[E0412]: cannot find type `Foo` in this scope\n --> test.rs:6:16\n  |\n6 |     type Bar = Foo;\n  |                ^^^ not found in this scope\n  |\n  = note: this struct exists but is inaccessible:\n          a::Foo\n```\nAs for the wildcard mentioned in #88472, I would argue that the warning is actually correct, since the import _is_ unused. I think the real issue is the wrong suggestion, which I have fixed here.", "tree": {"sha": "4c6ef110c0e5beb87abcb3120a202de0df44818b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c6ef110c0e5beb87abcb3120a202de0df44818b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9593e61f64233c6c556762060dc5e1cdc636845e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVq2CCRBK7hj4Ov3rIwAAzY0IAGtkvSBYeij1rOveUGtptX73\nmVOqrW0Qhnnp8krUkVuhkDk060INABNqpJ+7Uex9RqyDkb/eQcDz2jrAhsOrrEmL\nJWMpDYj62fIRg3sB7gAgW217vm5l4Cg0Rc28iV6mVNxOXeTHQKb+NveRG0idBtki\nHVwllWJgXVWkGPu07rABux0MORmEA2AJ44JWckZ5uOFCqdw2z2CW1FPh243llCbg\nqym7D3HiY6Ezuu3gCl8sYQSZc5aoSdbuLuDBe6Bd1az/D3oEP1PG8SAXfzSVl4bF\nCElt30xJEuYLUijaLwuey2aDWlavCmvPe2H/3U7p2QUGdaTbLiCfAdqZ/wFtjGo=\n=sqX3\n-----END PGP SIGNATURE-----\n", "payload": "tree 4c6ef110c0e5beb87abcb3120a202de0df44818b\nparent 598d89bf142823b5d84e2eb0f0f9e418ee966a4b\nparent 750018e16eb34f8b37477689fbd231bb720c8aaa\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633070465 -0700\ncommitter GitHub <noreply@github.com> 1633070465 -0700\n\nRollup merge of #88838 - FabianWolff:issue-88472, r=estebank\n\nDo not suggest importing inaccessible items\n\nFixes #88472. For this example:\n```rust\nmod a {\n    struct Foo;\n}\n\nmod b {\n    type Bar = Foo;\n}\n```\nrustc currently emits:\n```\nerror[E0412]: cannot find type `Foo` in this scope\n --> test.rs:6:16\n  |\n6 |     type Bar = Foo;\n  |                ^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n6 |     use a::Foo;\n  |\n```\nthis is incorrect, as applying this suggestion leads to\n```\nerror[E0603]: struct `Foo` is private\n --> test.rs:6:12\n  |\n6 |     use a::Foo;\n  |            ^^^ private struct\n  |\nnote: the struct `Foo` is defined here\n --> test.rs:2:5\n  |\n2 |     struct Foo;\n  |     ^^^^^^^^^^^\n```\nWith my changes, I get:\n```\nerror[E0412]: cannot find type `Foo` in this scope\n --> test.rs:6:16\n  |\n6 |     type Bar = Foo;\n  |                ^^^ not found in this scope\n  |\n  = note: this struct exists but is inaccessible:\n          a::Foo\n```\nAs for the wildcard mentioned in #88472, I would argue that the warning is actually correct, since the import _is_ unused. I think the real issue is the wrong suggestion, which I have fixed here.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9593e61f64233c6c556762060dc5e1cdc636845e", "html_url": "https://github.com/rust-lang/rust/commit/9593e61f64233c6c556762060dc5e1cdc636845e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9593e61f64233c6c556762060dc5e1cdc636845e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "html_url": "https://github.com/rust-lang/rust/commit/598d89bf142823b5d84e2eb0f0f9e418ee966a4b"}, {"sha": "750018e16eb34f8b37477689fbd231bb720c8aaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/750018e16eb34f8b37477689fbd231bb720c8aaa", "html_url": "https://github.com/rust-lang/rust/commit/750018e16eb34f8b37477689fbd231bb720c8aaa"}], "stats": {"total": 376, "additions": 264, "deletions": 112}, "files": [{"sha": "ab1f47c81db975129f9827786f8d0da7e9c05c62", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 109, "deletions": 31, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/9593e61f64233c6c556762060dc5e1cdc636845e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9593e61f64233c6c556762060dc5e1cdc636845e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=9593e61f64233c6c556762060dc5e1cdc636845e", "patch": "@@ -973,7 +973,15 @@ impl<'a> Resolver<'a> {\n \n         let import_suggestions =\n             self.lookup_import_candidates(ident, Namespace::MacroNS, parent_scope, is_expected);\n-        show_candidates(err, None, &import_suggestions, false, true);\n+        show_candidates(\n+            &self.definitions,\n+            self.session,\n+            err,\n+            None,\n+            &import_suggestions,\n+            false,\n+            true,\n+        );\n \n         if macro_kind == MacroKind::Derive && (ident.name == sym::Send || ident.name == sym::Sync) {\n             let msg = format!(\"unsafe traits like `{}` should be implemented explicitly\", ident);\n@@ -1713,6 +1721,8 @@ fn find_span_immediately_after_crate_name(\n /// entities with that name in all crates. This method allows outputting the\n /// results of this search in a programmer-friendly way\n crate fn show_candidates(\n+    definitions: &rustc_hir::definitions::Definitions,\n+    session: &Session,\n     err: &mut DiagnosticBuilder<'_>,\n     // This is `None` if all placement locations are inside expansions\n     use_placement_span: Option<Span>,\n@@ -1724,43 +1734,111 @@ crate fn show_candidates(\n         return;\n     }\n \n+    let mut accessible_path_strings: Vec<(String, &str, Option<DefId>)> = Vec::new();\n+    let mut inaccessible_path_strings: Vec<(String, &str, Option<DefId>)> = Vec::new();\n+\n+    candidates.iter().for_each(|c| {\n+        (if c.accessible { &mut accessible_path_strings } else { &mut inaccessible_path_strings })\n+            .push((path_names_to_string(&c.path), c.descr, c.did))\n+    });\n+\n     // we want consistent results across executions, but candidates are produced\n     // by iterating through a hash map, so make sure they are ordered:\n-    let mut path_strings: Vec<_> =\n-        candidates.iter().map(|c| path_names_to_string(&c.path)).collect();\n+    for path_strings in [&mut accessible_path_strings, &mut inaccessible_path_strings] {\n+        path_strings.sort_by(|a, b| a.0.cmp(&b.0));\n+        let core_path_strings =\n+            path_strings.drain_filter(|p| p.0.starts_with(\"core::\")).collect::<Vec<_>>();\n+        path_strings.extend(core_path_strings);\n+        path_strings.dedup_by(|a, b| a.0 == b.0);\n+    }\n+\n+    if !accessible_path_strings.is_empty() {\n+        let (determiner, kind) = if accessible_path_strings.len() == 1 {\n+            (\"this\", accessible_path_strings[0].1)\n+        } else {\n+            (\"one of these\", \"items\")\n+        };\n \n-    path_strings.sort();\n-    let core_path_strings =\n-        path_strings.drain_filter(|p| p.starts_with(\"core::\")).collect::<Vec<String>>();\n-    path_strings.extend(core_path_strings);\n-    path_strings.dedup();\n+        let instead = if instead { \" instead\" } else { \"\" };\n+        let mut msg = format!(\"consider importing {} {}{}\", determiner, kind, instead);\n \n-    let (determiner, kind) = if candidates.len() == 1 {\n-        (\"this\", candidates[0].descr)\n-    } else {\n-        (\"one of these\", \"items\")\n-    };\n-\n-    let instead = if instead { \" instead\" } else { \"\" };\n-    let mut msg = format!(\"consider importing {} {}{}\", determiner, kind, instead);\n-\n-    if let Some(span) = use_placement_span {\n-        for candidate in &mut path_strings {\n-            // produce an additional newline to separate the new use statement\n-            // from the directly following item.\n-            let additional_newline = if found_use { \"\" } else { \"\\n\" };\n-            *candidate = format!(\"use {};\\n{}\", candidate, additional_newline);\n-        }\n+        if let Some(span) = use_placement_span {\n+            for candidate in &mut accessible_path_strings {\n+                // produce an additional newline to separate the new use statement\n+                // from the directly following item.\n+                let additional_newline = if found_use { \"\" } else { \"\\n\" };\n+                candidate.0 = format!(\"use {};\\n{}\", &candidate.0, additional_newline);\n+            }\n \n-        err.span_suggestions(span, &msg, path_strings.into_iter(), Applicability::Unspecified);\n-    } else {\n-        msg.push(':');\n+            err.span_suggestions(\n+                span,\n+                &msg,\n+                accessible_path_strings.into_iter().map(|a| a.0),\n+                Applicability::Unspecified,\n+            );\n+        } else {\n+            msg.push(':');\n \n-        for candidate in path_strings {\n-            msg.push('\\n');\n-            msg.push_str(&candidate);\n+            for candidate in accessible_path_strings {\n+                msg.push('\\n');\n+                msg.push_str(&candidate.0);\n+            }\n+\n+            err.note(&msg);\n         }\n+    } else {\n+        assert!(!inaccessible_path_strings.is_empty());\n+\n+        if inaccessible_path_strings.len() == 1 {\n+            let (name, descr, def_id) = &inaccessible_path_strings[0];\n+            let msg = format!(\"{} `{}` exists but is inaccessible\", descr, name);\n+\n+            if let Some(local_def_id) = def_id.and_then(|did| did.as_local()) {\n+                let span = definitions.def_span(local_def_id);\n+                let span = session.source_map().guess_head_span(span);\n+                let mut multi_span = MultiSpan::from_span(span);\n+                multi_span.push_span_label(span, \"not accessible\".to_string());\n+                err.span_note(multi_span, &msg);\n+            } else {\n+                err.note(&msg);\n+            }\n+        } else {\n+            let (_, descr_first, _) = &inaccessible_path_strings[0];\n+            let descr = if inaccessible_path_strings\n+                .iter()\n+                .skip(1)\n+                .all(|(_, descr, _)| descr == descr_first)\n+            {\n+                format!(\"{}\", descr_first)\n+            } else {\n+                \"item\".to_string()\n+            };\n+\n+            let mut msg = format!(\"these {}s exist but are inaccessible\", descr);\n+            let mut has_colon = false;\n \n-        err.note(&msg);\n+            let mut spans = Vec::new();\n+            for (name, _, def_id) in &inaccessible_path_strings {\n+                if let Some(local_def_id) = def_id.and_then(|did| did.as_local()) {\n+                    let span = definitions.def_span(local_def_id);\n+                    let span = session.source_map().guess_head_span(span);\n+                    spans.push((name, span));\n+                } else {\n+                    if !has_colon {\n+                        msg.push(':');\n+                        has_colon = true;\n+                    }\n+                    msg.push('\\n');\n+                    msg.push_str(name);\n+                }\n+            }\n+\n+            let mut multi_span = MultiSpan::from_spans(spans.iter().map(|(_, sp)| *sp).collect());\n+            for (name, span) in spans {\n+                multi_span.push_span_label(span, format!(\"`{}`: not accessible\", name));\n+            }\n+\n+            err.span_note(multi_span, &msg);\n+        }\n     }\n }"}, {"sha": "ff7f465dbc6d7769cde1e56e29c4686085810878", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9593e61f64233c6c556762060dc5e1cdc636845e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9593e61f64233c6c556762060dc5e1cdc636845e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=9593e61f64233c6c556762060dc5e1cdc636845e", "patch": "@@ -2969,7 +2969,15 @@ impl<'a> Resolver<'a> {\n                 (None, false)\n             };\n             if !candidates.is_empty() {\n-                diagnostics::show_candidates(&mut err, span, &candidates, instead, found_use);\n+                diagnostics::show_candidates(\n+                    &self.definitions,\n+                    self.session,\n+                    &mut err,\n+                    span,\n+                    &candidates,\n+                    instead,\n+                    found_use,\n+                );\n             } else if let Some((span, msg, sugg, appl)) = suggestion {\n                 err.span_suggestion(span, msg, sugg, appl);\n             }"}, {"sha": "6c8b707b8e2f14d7d6db5109bf6bc3e759c36640", "filename": "src/test/ui/hygiene/globs.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr?ref=9593e61f64233c6c556762060dc5e1cdc636845e", "patch": "@@ -4,7 +4,7 @@ error[E0425]: cannot find function `f` in this scope\n LL |         f();\n    |         ^ not found in this scope\n    |\n-help: consider importing one of these items\n+help: consider importing this function\n    |\n LL | use foo::f;\n    |\n@@ -37,7 +37,7 @@ LL | n!(f);\n LL |         n!(f);\n    |            ^ not found in this scope\n    |\n-   = note: consider importing one of these items:\n+   = note: consider importing this function:\n            foo::f\n    = note: this error originates in the macro `n` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -50,7 +50,7 @@ LL | n!(f);\n LL |                 f\n    |                 ^ not found in this scope\n    |\n-   = note: consider importing one of these items:\n+   = note: consider importing this function:\n            foo::f\n    = note: this error originates in the macro `n` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "3b66a5e3150502600768bc6a95f71873983ef991", "filename": "src/test/ui/imports/glob-resolve1.stderr", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.stderr?ref=9593e61f64233c6c556762060dc5e1cdc636845e", "patch": "@@ -4,21 +4,23 @@ error[E0425]: cannot find function `fpriv` in this scope\n LL |     fpriv();\n    |     ^^^^^ not found in this scope\n    |\n-help: consider importing this function\n-   |\n-LL | use bar::fpriv;\n+note: function `bar::fpriv` exists but is inaccessible\n+  --> $DIR/glob-resolve1.rs:7:5\n    |\n+LL |     fn fpriv() {}\n+   |     ^^^^^^^^^^ not accessible\n \n error[E0425]: cannot find function `epriv` in this scope\n   --> $DIR/glob-resolve1.rs:27:5\n    |\n LL |     epriv();\n    |     ^^^^^ not found in this scope\n    |\n-help: consider importing this function\n-   |\n-LL | use bar::epriv;\n+note: function `bar::epriv` exists but is inaccessible\n+  --> $DIR/glob-resolve1.rs:9:9\n    |\n+LL |         fn epriv();\n+   |         ^^^^^^^^^^^ not accessible\n \n error[E0423]: expected value, found enum `B`\n   --> $DIR/glob-resolve1.rs:28:5\n@@ -44,10 +46,11 @@ error[E0425]: cannot find value `C` in this scope\n LL |     C;\n    |     ^ not found in this scope\n    |\n-help: consider importing this unit struct\n-   |\n-LL | use bar::C;\n+note: unit struct `bar::C` exists but is inaccessible\n+  --> $DIR/glob-resolve1.rs:18:5\n    |\n+LL |     struct C;\n+   |     ^^^^^^^^^ not accessible\n \n error[E0425]: cannot find function `import` in this scope\n   --> $DIR/glob-resolve1.rs:30:5\n@@ -67,16 +70,13 @@ LL |     pub enum B {\n    |     ---------- similarly named enum `B` defined here\n ...\n LL |     foo::<A>();\n-   |           ^\n-   |\n-help: an enum with a similar name exists\n+   |           ^ help: an enum with a similar name exists: `B`\n    |\n-LL |     foo::<B>();\n-   |           ~\n-help: consider importing this enum\n-   |\n-LL | use bar::A;\n+note: enum `bar::A` exists but is inaccessible\n+  --> $DIR/glob-resolve1.rs:11:5\n    |\n+LL |     enum A {\n+   |     ^^^^^^ not accessible\n \n error[E0412]: cannot find type `C` in this scope\n   --> $DIR/glob-resolve1.rs:33:11\n@@ -85,16 +85,13 @@ LL |     pub enum B {\n    |     ---------- similarly named enum `B` defined here\n ...\n LL |     foo::<C>();\n-   |           ^\n-   |\n-help: an enum with a similar name exists\n-   |\n-LL |     foo::<B>();\n-   |           ~\n-help: consider importing this struct\n+   |           ^ help: an enum with a similar name exists: `B`\n    |\n-LL | use bar::C;\n+note: struct `bar::C` exists but is inaccessible\n+  --> $DIR/glob-resolve1.rs:18:5\n    |\n+LL |     struct C;\n+   |     ^^^^^^^^^ not accessible\n \n error[E0412]: cannot find type `D` in this scope\n   --> $DIR/glob-resolve1.rs:34:11\n@@ -103,16 +100,13 @@ LL |     pub enum B {\n    |     ---------- similarly named enum `B` defined here\n ...\n LL |     foo::<D>();\n-   |           ^\n-   |\n-help: an enum with a similar name exists\n-   |\n-LL |     foo::<B>();\n-   |           ~\n-help: consider importing this type alias\n+   |           ^ help: an enum with a similar name exists: `B`\n    |\n-LL | use bar::D;\n+note: type alias `bar::D` exists but is inaccessible\n+  --> $DIR/glob-resolve1.rs:20:5\n    |\n+LL |     type D = isize;\n+   |     ^^^^^^^^^^^^^^^ not accessible\n \n error: aborting due to 8 previous errors\n "}, {"sha": "4c94634ee60f7d459959efe76f13adcfbfe5042c", "filename": "src/test/ui/imports/issue-4366-2.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fimports%2Fissue-4366-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fimports%2Fissue-4366-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-4366-2.stderr?ref=9593e61f64233c6c556762060dc5e1cdc636845e", "patch": "@@ -4,10 +4,11 @@ error[E0412]: cannot find type `Bar` in this scope\n LL |         fn sub() -> Bar { 1 }\n    |                     ^^^ not found in this scope\n    |\n-help: consider importing this type alias\n-   |\n-LL |         use a::b::Bar;\n+note: type alias `a::b::Bar` exists but is inaccessible\n+  --> $DIR/issue-4366-2.rs:11:9\n    |\n+LL |         type Bar = isize;\n+   |         ^^^^^^^^^^^^^^^^^ not accessible\n \n error[E0423]: expected function, found module `foo`\n   --> $DIR/issue-4366-2.rs:25:5"}, {"sha": "cad3ccc4a0ef836883eaa23f32a77506ab70f843", "filename": "src/test/ui/resolve/issue-42944.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.stderr?ref=9593e61f64233c6c556762060dc5e1cdc636845e", "patch": "@@ -16,10 +16,11 @@ error[E0425]: cannot find function, tuple struct or tuple variant `Bx` in this s\n LL |         Bx(());\n    |         ^^ not found in this scope\n    |\n-help: consider importing this tuple struct\n-   |\n-LL |     use foo::Bx;\n+note: tuple struct `foo::Bx` exists but is inaccessible\n+  --> $DIR/issue-42944.rs:2:5\n    |\n+LL |     pub struct Bx(());\n+   |     ^^^^^^^^^^^^^^^^^^ not accessible\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6bf7caeddbfcd97b3e4d7691c1bb877c384335d4", "filename": "src/test/ui/resolve/issue-88472.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.rs?ref=9593e61f64233c6c556762060dc5e1cdc636845e", "patch": "@@ -0,0 +1,38 @@\n+// Regression test for #88472, where a suggestion was issued to\n+// import an inaccessible struct.\n+\n+#![warn(unused_imports)]\n+//~^ NOTE: the lint level is defined here\n+\n+mod a {\n+    struct Foo;\n+    //~^ NOTE: struct `a::Foo` exists but is inaccessible\n+    //~| NOTE: not accessible\n+}\n+\n+mod b {\n+    use crate::a::*;\n+    //~^ WARNING: unused import\n+    type Bar = Foo;\n+    //~^ ERROR: cannot find type `Foo` in this scope [E0412]\n+    //~| NOTE: not found in this scope\n+}\n+\n+mod c {\n+    enum Eee {}\n+    //~^ NOTE: these enums exist but are inaccessible\n+    //~| NOTE: `c::Eee`: not accessible\n+\n+    mod d {\n+        enum Eee {}\n+        //~^ NOTE: `c::d::Eee`: not accessible\n+    }\n+}\n+\n+mod e {\n+    type Baz = Eee;\n+    //~^ ERROR: cannot find type `Eee` in this scope [E0412]\n+    //~| NOTE: not found in this scope\n+}\n+\n+fn main() {}"}, {"sha": "8431fc97766f7a15311d87abe047c0f4045e4bd6", "filename": "src/test/ui/resolve/issue-88472.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.stderr?ref=9593e61f64233c6c556762060dc5e1cdc636845e", "patch": "@@ -0,0 +1,42 @@\n+error[E0412]: cannot find type `Foo` in this scope\n+  --> $DIR/issue-88472.rs:16:16\n+   |\n+LL |     type Bar = Foo;\n+   |                ^^^ not found in this scope\n+   |\n+note: struct `a::Foo` exists but is inaccessible\n+  --> $DIR/issue-88472.rs:8:5\n+   |\n+LL |     struct Foo;\n+   |     ^^^^^^^^^^^ not accessible\n+\n+error[E0412]: cannot find type `Eee` in this scope\n+  --> $DIR/issue-88472.rs:33:16\n+   |\n+LL |     type Baz = Eee;\n+   |                ^^^ not found in this scope\n+   |\n+note: these enums exist but are inaccessible\n+  --> $DIR/issue-88472.rs:22:5\n+   |\n+LL |     enum Eee {}\n+   |     ^^^^^^^^ `c::Eee`: not accessible\n+...\n+LL |         enum Eee {}\n+   |         ^^^^^^^^ `c::d::Eee`: not accessible\n+\n+warning: unused import: `crate::a::*`\n+  --> $DIR/issue-88472.rs:14:9\n+   |\n+LL |     use crate::a::*;\n+   |         ^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-88472.rs:4:9\n+   |\n+LL | #![warn(unused_imports)]\n+   |         ^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "ff72b0b563ab176fc361e0b13a117f173fe00f8f", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=9593e61f64233c6c556762060dc5e1cdc636845e", "patch": "@@ -169,16 +169,13 @@ LL |     pub enum E {\n    |     ---------- similarly named enum `E` defined here\n ...\n LL |     let _: Z = m::n::Z;\n-   |            ^\n+   |            ^ help: an enum with a similar name exists: `E`\n    |\n-help: an enum with a similar name exists\n-   |\n-LL |     let _: E = m::n::Z;\n-   |            ~\n-help: consider importing this enum\n-   |\n-LL | use m::Z;\n+note: enum `m::Z` exists but is inaccessible\n+  --> $DIR/privacy-enum-ctor.rs:11:9\n    |\n+LL |         pub(in m) enum Z {\n+   |         ^^^^^^^^^^^^^^^^ not accessible\n \n error[E0423]: expected value, found enum `m::n::Z`\n   --> $DIR/privacy-enum-ctor.rs:57:16\n@@ -215,16 +212,13 @@ LL |     pub enum E {\n    |     ---------- similarly named enum `E` defined here\n ...\n LL |     let _: Z = m::n::Z::Fn;\n-   |            ^\n+   |            ^ help: an enum with a similar name exists: `E`\n    |\n-help: an enum with a similar name exists\n-   |\n-LL |     let _: E = m::n::Z::Fn;\n-   |            ~\n-help: consider importing this enum\n-   |\n-LL | use m::Z;\n+note: enum `m::Z` exists but is inaccessible\n+  --> $DIR/privacy-enum-ctor.rs:11:9\n    |\n+LL |         pub(in m) enum Z {\n+   |         ^^^^^^^^^^^^^^^^ not accessible\n \n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:64:12\n@@ -233,16 +227,13 @@ LL |     pub enum E {\n    |     ---------- similarly named enum `E` defined here\n ...\n LL |     let _: Z = m::n::Z::Struct;\n-   |            ^\n+   |            ^ help: an enum with a similar name exists: `E`\n    |\n-help: an enum with a similar name exists\n-   |\n-LL |     let _: E = m::n::Z::Struct;\n-   |            ~\n-help: consider importing this enum\n-   |\n-LL | use m::Z;\n+note: enum `m::Z` exists but is inaccessible\n+  --> $DIR/privacy-enum-ctor.rs:11:9\n    |\n+LL |         pub(in m) enum Z {\n+   |         ^^^^^^^^^^^^^^^^ not accessible\n \n error[E0423]: expected value, found struct variant `m::n::Z::Struct`\n   --> $DIR/privacy-enum-ctor.rs:64:16\n@@ -262,16 +253,13 @@ LL |     pub enum E {\n    |     ---------- similarly named enum `E` defined here\n ...\n LL |     let _: Z = m::n::Z::Unit {};\n-   |            ^\n+   |            ^ help: an enum with a similar name exists: `E`\n    |\n-help: an enum with a similar name exists\n-   |\n-LL |     let _: E = m::n::Z::Unit {};\n-   |            ~\n-help: consider importing this enum\n-   |\n-LL | use m::Z;\n+note: enum `m::Z` exists but is inaccessible\n+  --> $DIR/privacy-enum-ctor.rs:11:9\n    |\n+LL |         pub(in m) enum Z {\n+   |         ^^^^^^^^^^^^^^^^ not accessible\n \n error[E0603]: enum `Z` is private\n   --> $DIR/privacy-enum-ctor.rs:57:22"}, {"sha": "ada053014ef5eb38e064fcf7c2c7c54ab94d6d09", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=9593e61f64233c6c556762060dc5e1cdc636845e", "patch": "@@ -33,10 +33,11 @@ error[E0423]: expected value, found struct `xcrate::S`\n LL |     xcrate::S;\n    |     ^^^^^^^^^ constructor is not visible here due to private fields\n    |\n-help: consider importing this tuple struct instead\n-   |\n-LL | use m::S;\n+note: tuple struct `m::S` exists but is inaccessible\n+  --> $DIR/privacy-struct-ctor.rs:6:5\n    |\n+LL |     pub struct S(u8);\n+   |     ^^^^^^^^^^^^^^^^^ not accessible\n \n error[E0603]: tuple struct constructor `Z` is private\n   --> $DIR/privacy-struct-ctor.rs:18:12"}, {"sha": "aca08d81163fd7428a4b590705222f26b27fd500", "filename": "src/test/ui/self/self_type_keyword.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9593e61f64233c6c556762060dc5e1cdc636845e/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr?ref=9593e61f64233c6c556762060dc5e1cdc636845e", "patch": "@@ -66,10 +66,11 @@ error[E0531]: cannot find unit struct, unit variant or constant `Self` in this s\n LL |         mut Self => (),\n    |             ^^^^ not found in this scope\n    |\n-help: consider importing this unit struct\n-   |\n-LL | use foo::Self;\n+note: unit struct `foo::Self` exists but is inaccessible\n+  --> $DIR/self_type_keyword.rs:2:3\n    |\n+LL |   struct Self;\n+   |   ^^^^^^^^^^^^ not accessible\n \n error[E0392]: parameter `'Self` is never used\n   --> $DIR/self_type_keyword.rs:6:12"}]}