{"sha": "eaa0ae503fd952c7296d8787d70460fe96ccf9ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYTBhZTUwM2ZkOTUyYzcyOTZkODc4N2Q3MDQ2MGZlOTZjY2Y5ZWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T22:10:10Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T23:35:20Z"}, "message": "parse: nix new_sub_parser_from_file", "tree": {"sha": "f92746697bffa1028daba2b3dff6335a0adc5c46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f92746697bffa1028daba2b3dff6335a0adc5c46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaa0ae503fd952c7296d8787d70460fe96ccf9ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaa0ae503fd952c7296d8787d70460fe96ccf9ee", "html_url": "https://github.com/rust-lang/rust/commit/eaa0ae503fd952c7296d8787d70460fe96ccf9ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaa0ae503fd952c7296d8787d70460fe96ccf9ee/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d18ed205c9032003e2f3b3227a40bdc8f8763c9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d18ed205c9032003e2f3b3227a40bdc8f8763c9b", "html_url": "https://github.com/rust-lang/rust/commit/d18ed205c9032003e2f3b3227a40bdc8f8763c9b"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "51a15f9df1bc79b57c9f35cc97bd0867eb2408a0", "filename": "src/librustc_builtin_macros/source_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaa0ae503fd952c7296d8787d70460fe96ccf9ee/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa0ae503fd952c7296d8787d70460fe96ccf9ee/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fsource_util.rs?ref=eaa0ae503fd952c7296d8787d70460fe96ccf9ee", "patch": "@@ -6,7 +6,7 @@ use rustc_ast_pretty::pprust;\n use rustc_expand::base::{self, *};\n use rustc_expand::module::DirectoryOwnership;\n use rustc_expand::panictry;\n-use rustc_parse::{self, new_sub_parser_from_file, parser::Parser};\n+use rustc_parse::{self, new_parser_from_file, parser::Parser};\n use rustc_session::lint::builtin::INCOMPLETE_INCLUDE;\n use rustc_span::symbol::Symbol;\n use rustc_span::{self, Pos, Span};\n@@ -110,7 +110,7 @@ pub fn expand_include<'cx>(\n             return DummyResult::any(sp);\n         }\n     };\n-    let p = new_sub_parser_from_file(cx.parse_sess(), &file, sp);\n+    let p = new_parser_from_file(cx.parse_sess(), &file, Some(sp));\n \n     // If in the included file we have e.g., `mod bar;`,\n     // then the path of `bar.rs` should be relative to the directory of `file`."}, {"sha": "aad92a09743b3d53ef9b78da039dff62f8e175bc", "filename": "src/librustc_expand/module.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaa0ae503fd952c7296d8787d70460fe96ccf9ee/src%2Flibrustc_expand%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa0ae503fd952c7296d8787d70460fe96ccf9ee/src%2Flibrustc_expand%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmodule.rs?ref=eaa0ae503fd952c7296d8787d70460fe96ccf9ee", "patch": "@@ -1,7 +1,7 @@\n use rustc_ast::ast::{self, Attribute, Ident, Mod};\n use rustc_ast::{attr, token};\n use rustc_errors::{struct_span_err, PResult};\n-use rustc_parse::new_sub_parser_from_file;\n+use rustc_parse::new_parser_from_file;\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{FileName, Span};\n use rustc_span::symbol::sym;\n@@ -60,7 +60,7 @@ crate fn parse_external_mod(\n         drop(included_mod_stack);\n \n         // Actually parse the external file as a module.\n-        let mut module = new_sub_parser_from_file(sess, &mp.path, span).parse_mod(&token::Eof)?;\n+        let mut module = new_parser_from_file(sess, &mp.path, Some(span)).parse_mod(&token::Eof)?;\n         module.0.inline = false;\n         module\n     };"}, {"sha": "13fb85db84779eeb9d1afb02016deef7b4a29b17", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eaa0ae503fd952c7296d8787d70460fe96ccf9ee/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa0ae503fd952c7296d8787d70460fe96ccf9ee/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=eaa0ae503fd952c7296d8787d70460fe96ccf9ee", "patch": "@@ -50,15 +50,15 @@ macro_rules! panictry_buffer {\n }\n \n pub fn parse_crate_from_file<'a>(input: &Path, sess: &'a ParseSess) -> PResult<'a, ast::Crate> {\n-    let mut parser = new_parser_from_file(sess, input);\n+    let mut parser = new_parser_from_file(sess, input, None);\n     parser.parse_crate_mod()\n }\n \n pub fn parse_crate_attrs_from_file<'a>(\n     input: &Path,\n     sess: &'a ParseSess,\n ) -> PResult<'a, Vec<ast::Attribute>> {\n-    let mut parser = new_parser_from_file(sess, input);\n+    let mut parser = new_parser_from_file(sess, input, None);\n     parser.parse_inner_attributes()\n }\n \n@@ -106,8 +106,9 @@ pub fn maybe_new_parser_from_source_str(\n }\n \n /// Creates a new parser, handling errors as appropriate if the file doesn't exist.\n-pub fn new_parser_from_file<'a>(sess: &'a ParseSess, path: &Path) -> Parser<'a> {\n-    source_file_to_parser(sess, file_to_source_file(sess, path, None))\n+/// If a span is given, that is used on an error as the as the source of the problem.\n+pub fn new_parser_from_file<'a>(sess: &'a ParseSess, path: &Path, sp: Option<Span>) -> Parser<'a> {\n+    source_file_to_parser(sess, file_to_source_file(sess, path, sp))\n }\n \n /// Creates a new parser, returning buffered diagnostics if the file doesn't exist,\n@@ -120,13 +121,6 @@ pub fn maybe_new_parser_from_file<'a>(\n     maybe_source_file_to_parser(sess, file)\n }\n \n-/// Given a session, a path, and a span,\n-/// add the file at the given path to the `source_map`, and returns a parser.\n-/// On an error, uses the given span as the source of the problem.\n-pub fn new_sub_parser_from_file<'a>(sess: &'a ParseSess, path: &Path, sp: Span) -> Parser<'a> {\n-    source_file_to_parser(sess, file_to_source_file(sess, path, Some(sp)))\n-}\n-\n /// Given a `source_file` and config, returns a parser.\n fn source_file_to_parser(sess: &ParseSess, source_file: Lrc<SourceFile>) -> Parser<'_> {\n     panictry_buffer!(&sess.span_diagnostic, maybe_source_file_to_parser(sess, source_file))"}, {"sha": "3c5738f574c265abd9f33348b2b06cbdb8c6ab2d", "filename": "src/test/ui-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaa0ae503fd952c7296d8787d70460fe96ccf9ee/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa0ae503fd952c7296d8787d70460fe96ccf9ee/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=eaa0ae503fd952c7296d8787d70460fe96ccf9ee", "patch": "@@ -28,6 +28,6 @@ fn parse() {\n \n     let path = Path::new(file!());\n     let path = path.canonicalize().unwrap();\n-    let mut parser = new_parser_from_file(&parse_session, &path);\n+    let mut parser = new_parser_from_file(&parse_session, &path, None);\n     let _ = parser.parse_crate_mod();\n }"}]}