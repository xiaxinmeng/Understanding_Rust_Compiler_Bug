{"sha": "7ce71c362be9a89e7897ac066aba6e3e6f747800", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZTcxYzM2MmJlOWE4OWU3ODk3YWMwNjZhYmE2ZTNlNmY3NDc4MDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-23T04:02:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-23T04:02:41Z"}, "message": "Auto merge of #73526 - cuviper:rust-llvm11, r=nikic\n\nUpgrade to LLVM 11 (rc2)\n\nThis builds on #73525 to try actually moving rust-lang/llvm-project to LLVM 11.", "tree": {"sha": "e14ccee8f5ffc23d8e2287c5343b85670118771f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e14ccee8f5ffc23d8e2287c5343b85670118771f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ce71c362be9a89e7897ac066aba6e3e6f747800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ce71c362be9a89e7897ac066aba6e3e6f747800", "html_url": "https://github.com/rust-lang/rust/commit/7ce71c362be9a89e7897ac066aba6e3e6f747800", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ce71c362be9a89e7897ac066aba6e3e6f747800/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e482c86b9de32c6392cb83aa97d72e22425163f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e482c86b9de32c6392cb83aa97d72e22425163f9", "html_url": "https://github.com/rust-lang/rust/commit/e482c86b9de32c6392cb83aa97d72e22425163f9"}, {"sha": "b450c0c86ccdc836272feeac6e1312c1a168b343", "url": "https://api.github.com/repos/rust-lang/rust/commits/b450c0c86ccdc836272feeac6e1312c1a168b343", "html_url": "https://github.com/rust-lang/rust/commit/b450c0c86ccdc836272feeac6e1312c1a168b343"}], "stats": {"total": 70, "additions": 32, "deletions": 38}, "files": [{"sha": "8f4d3768c21e8601b31becfa0a2fda7ba75ced69", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ce71c362be9a89e7897ac066aba6e3e6f747800/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/7ce71c362be9a89e7897ac066aba6e3e6f747800/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=7ce71c362be9a89e7897ac066aba6e3e6f747800", "patch": "@@ -37,7 +37,7 @@\n [submodule \"src/llvm-project\"]\n \tpath = src/llvm-project\n \turl = https://github.com/rust-lang/llvm-project.git\n-\tbranch = rustc/10.0-2020-05-05\n+\tbranch = rustc/11.0-2020-08-20\n [submodule \"src/doc/embedded-book\"]\n \tpath = src/doc/embedded-book\n \turl = https://github.com/rust-embedded/book.git"}, {"sha": "d6ce2806e390f62849ce8e3ee69da0a5dc8d9418", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/build-clang.sh", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ce71c362be9a89e7897ac066aba6e3e6f747800/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-clang.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7ce71c362be9a89e7897ac066aba6e3e6f747800/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-clang.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-clang.sh?ref=7ce71c362be9a89e7897ac066aba6e3e6f747800", "patch": "@@ -18,17 +18,7 @@ cd clang-build\n # For whatever reason the default set of include paths for clang is different\n # than that of gcc. As a result we need to manually include our sysroot's\n # include path, /rustroot/include, to clang's default include path.\n-#\n-# Alsow there's this weird oddity with gcc where there's an 'include-fixed'\n-# directory that it generates. It turns out [1] that Centos 5's headers are so\n-# old that they're incompatible with modern C semantics. While gcc automatically\n-# fixes that clang doesn't account for this. Tell clang to manually include the\n-# fixed headers so we can successfully compile code later on.\n-#\n-# [1]: https://sourceware.org/ml/crossgcc/2008-11/msg00028.html\n-INC=\"/rustroot/include\"\n-INC=\"$INC:/rustroot/lib/gcc/x86_64-unknown-linux-gnu/5.5.0/include-fixed\"\n-INC=\"$INC:/usr/include\"\n+INC=\"/rustroot/include:/usr/include\"\n \n hide_output \\\n     cmake ../llvm \\"}, {"sha": "45790d79496be37fbce6ec57abad5af8fa7a34d7", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=7ce71c362be9a89e7897ac066aba6e3e6f747800", "patch": "@@ -1 +1 @@\n-Subproject commit 86b120e6f302d39cd6973b6391fb299d7bc22122\n+Subproject commit 45790d79496be37fbce6ec57abad5af8fa7a34d7"}, {"sha": "81aba0cbf7d42a8a0da5f41f3855f9c42a329522", "filename": "src/rustllvm/CoverageMappingWrapper.cpp", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7ce71c362be9a89e7897ac066aba6e3e6f747800/src%2Frustllvm%2FCoverageMappingWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7ce71c362be9a89e7897ac066aba6e3e6f747800/src%2Frustllvm%2FCoverageMappingWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FCoverageMappingWrapper.cpp?ref=7ce71c362be9a89e7897ac066aba6e3e6f747800", "patch": "@@ -3,6 +3,7 @@\n #include \"llvm/ProfileData/Coverage/CoverageMappingWriter.h\"\n #include \"llvm/ProfileData/InstrProf.h\"\n #include \"llvm/ADT/ArrayRef.h\"\n+#include \"llvm/Support/LEB128.h\"\n \n #include <iostream>\n \n@@ -12,14 +13,15 @@ extern \"C\" void LLVMRustCoverageWriteFilenamesSectionToBuffer(\n     const char* const Filenames[],\n     size_t FilenamesLen,\n     RustStringRef BufferOut) {\n-  SmallVector<StringRef,32> FilenameRefs;\n+  // LLVM 11's CoverageFilenamesSectionWriter uses its new `Version4` format,\n+  // so we're manually writing the `Version3` format ourselves.\n+  RawRustStringOstream OS(BufferOut);\n+  encodeULEB128(FilenamesLen, OS);\n   for (size_t i = 0; i < FilenamesLen; i++) {\n-    FilenameRefs.push_back(StringRef(Filenames[i]));\n+    StringRef Filename(Filenames[i]);\n+    encodeULEB128(Filename.size(), OS);\n+    OS << Filename;\n   }\n-  auto FilenamesWriter = coverage::CoverageFilenamesSectionWriter(\n-    makeArrayRef(FilenameRefs));\n-  RawRustStringOstream OS(BufferOut);\n-  FilenamesWriter.write(OS);\n }\n \n extern \"C\" void LLVMRustCoverageWriteMappingToBuffer(\n@@ -64,5 +66,5 @@ extern \"C\" void LLVMRustCoverageWriteMappingVarNameToString(RustStringRef Str) {\n }\n \n extern \"C\" uint32_t LLVMRustCoverageMappingVersion() {\n-  return coverage::CovMapVersion::CurrentVersion;\n+  return coverage::CovMapVersion::Version3;\n }"}, {"sha": "67dda1024fc248568f8a3eebecb39261b160f138", "filename": "src/test/assembly/asm/riscv-types.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7ce71c362be9a89e7897ac066aba6e3e6f747800/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce71c362be9a89e7897ac066aba6e3e6f747800/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs?ref=7ce71c362be9a89e7897ac066aba6e3e6f747800", "patch": "@@ -55,7 +55,8 @@ pub unsafe fn sym_fn() {\n \n // CHECK-LABEL: sym_static:\n // CHECK: #APP\n-// CHECK: lb t0, extern_static\n+// CHECK: auipc t0, %pcrel_hi(extern_static)\n+// CHECK: lb t0, %pcrel_lo(.Lpcrel_hi0)(t0)\n // CHECK: #NO_APP\n #[no_mangle]\n pub unsafe fn sym_static() {\n@@ -98,45 +99,45 @@ macro_rules! check_reg {\n \n // CHECK-LABEL: reg_i8:\n // CHECK: #APP\n-// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n // CHECK: #NO_APP\n check!(reg_i8 i8 reg \"mv\");\n \n // CHECK-LABEL: reg_i16:\n // CHECK: #APP\n-// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n // CHECK: #NO_APP\n check!(reg_i16 i16 reg \"mv\");\n \n // CHECK-LABEL: reg_i32:\n // CHECK: #APP\n-// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n // CHECK: #NO_APP\n check!(reg_i32 i32 reg \"mv\");\n \n // CHECK-LABEL: reg_f32:\n // CHECK: #APP\n-// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n // CHECK: #NO_APP\n check!(reg_f32 f32 reg \"mv\");\n \n // riscv64-LABEL: reg_i64:\n // riscv64: #APP\n-// riscv64: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// riscv64: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n // riscv64: #NO_APP\n #[cfg(riscv64)]\n check!(reg_i64 i64 reg \"mv\");\n \n // riscv64-LABEL: reg_f64:\n // riscv64: #APP\n-// riscv64: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// riscv64: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n // riscv64: #NO_APP\n #[cfg(riscv64)]\n check!(reg_f64 f64 reg \"mv\");\n \n // CHECK-LABEL: reg_ptr:\n // CHECK: #APP\n-// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n // CHECK: #NO_APP\n check!(reg_ptr ptr reg \"mv\");\n \n@@ -154,45 +155,45 @@ check!(freg_f64 f64 freg \"fmv.d\");\n \n // CHECK-LABEL: a0_i8:\n // CHECK: #APP\n-// CHECK: mv a0, a0\n+// CHECK: add a0, zero, a0\n // CHECK: #NO_APP\n check_reg!(a0_i8 i8 \"a0\" \"mv\");\n \n // CHECK-LABEL: a0_i16:\n // CHECK: #APP\n-// CHECK: mv a0, a0\n+// CHECK: add a0, zero, a0\n // CHECK: #NO_APP\n check_reg!(a0_i16 i16 \"a0\" \"mv\");\n \n // CHECK-LABEL: a0_i32:\n // CHECK: #APP\n-// CHECK: mv a0, a0\n+// CHECK: add a0, zero, a0\n // CHECK: #NO_APP\n check_reg!(a0_i32 i32 \"a0\" \"mv\");\n \n // CHECK-LABEL: a0_f32:\n // CHECK: #APP\n-// CHECK: mv a0, a0\n+// CHECK: add a0, zero, a0\n // CHECK: #NO_APP\n check_reg!(a0_f32 f32 \"a0\" \"mv\");\n \n // riscv64-LABEL: a0_i64:\n // riscv64: #APP\n-// riscv64: mv a0, a0\n+// riscv64: add a0, zero, a0\n // riscv64: #NO_APP\n #[cfg(riscv64)]\n check_reg!(a0_i64 i64 \"a0\" \"mv\");\n \n // riscv64-LABEL: a0_f64:\n // riscv64: #APP\n-// riscv64: mv a0, a0\n+// riscv64: add a0, zero, a0\n // riscv64: #NO_APP\n #[cfg(riscv64)]\n check_reg!(a0_f64 f64 \"a0\" \"mv\");\n \n // CHECK-LABEL: a0_ptr:\n // CHECK: #APP\n-// CHECK: mv a0, a0\n+// CHECK: add a0, zero, a0\n // CHECK: #NO_APP\n check_reg!(a0_ptr ptr \"a0\" \"mv\");\n "}, {"sha": "4704c8ad797d8a5a3fc347073c522009948e6925", "filename": "src/test/codegen/scalar-pair-bool.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ce71c362be9a89e7897ac066aba6e3e6f747800/src%2Ftest%2Fcodegen%2Fscalar-pair-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce71c362be9a89e7897ac066aba6e3e6f747800/src%2Ftest%2Fcodegen%2Fscalar-pair-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fscalar-pair-bool.rs?ref=7ce71c362be9a89e7897ac066aba6e3e6f747800", "patch": "@@ -24,8 +24,9 @@ pub fn pair_i32_bool(pair: (i32, bool)) -> (i32, bool) {\n #[no_mangle]\n pub fn pair_and_or((a, b): (bool, bool)) -> (bool, bool) {\n     // Make sure it can operate directly on the unpacked args\n-    // CHECK: and i1 %_1.0, %_1.1\n-    // CHECK: or i1 %_1.0, %_1.1\n+    // (but it might not be using simple and/or instructions)\n+    // CHECK-DAG: %_1.0\n+    // CHECK-DAG: %_1.1\n     (a && b, a || b)\n }\n "}, {"sha": "75bec80bdf8864a12540aaa863cbbec986302ce6", "filename": "src/test/run-make-fulldeps/instrument-coverage/expected_export_coverage.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ce71c362be9a89e7897ac066aba6e3e6f747800/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage%2Fexpected_export_coverage.json", "raw_url": "https://github.com/rust-lang/rust/raw/7ce71c362be9a89e7897ac066aba6e3e6f747800/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage%2Fexpected_export_coverage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage%2Fexpected_export_coverage.json?ref=7ce71c362be9a89e7897ac066aba6e3e6f747800", "patch": "@@ -55,5 +55,5 @@\n     }\n   ],\n   \"type\": \"llvm.coverage.json.export\",\n-  \"version\": \"2.0.0\"\n+  \"version\": \"2.0.1\"\n }"}]}