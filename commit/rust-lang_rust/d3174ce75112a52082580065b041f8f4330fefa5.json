{"sha": "d3174ce75112a52082580065b041f8f4330fefa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMTc0Y2U3NTExMmE1MjA4MjU4MDA2NWIwNDFmOGY0MzMwZmVmYTU=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-01-26T20:31:33Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-01-26T23:04:03Z"}, "message": "collections: Hash VecDeque in its slice parts\n\nUse .as_slices() for a more efficient code path in VecDeque's Hash impl.\n\nThis still hashes the elements in the same order.\n\nBefore/after timing of VecDeque hashing 1024 elements of u8 and\nu64 shows that the vecdeque now can match the Vec\n(test_hashing_vec_of_u64 is the Vec run).\n\nbefore\n\ntest test_hashing_u64        ... bench:  14,031 ns/iter (+/- 236) = 583 MB/s\ntest test_hashing_u8         ... bench:   7,887 ns/iter (+/- 65) = 129 MB/s\ntest test_hashing_vec_of_u64 ... bench:   6,578 ns/iter (+/- 76) = 1245 MB/s\n\nafter\n\nrunning 5 tests\ntest test_hashing_u64        ... bench:   6,495 ns/iter (+/- 52) = 1261 MB/s\ntest test_hashing_u8         ... bench:     851 ns/iter (+/- 16) = 1203 MB/s\ntest test_hashing_vec_of_u64 ... bench:   6,499 ns/iter (+/- 59) = 1260 MB/s", "tree": {"sha": "8d1b67b2f22503d4f5371de304bd1ca6bd5954e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d1b67b2f22503d4f5371de304bd1ca6bd5954e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3174ce75112a52082580065b041f8f4330fefa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3174ce75112a52082580065b041f8f4330fefa5", "html_url": "https://github.com/rust-lang/rust/commit/d3174ce75112a52082580065b041f8f4330fefa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3174ce75112a52082580065b041f8f4330fefa5/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46dcffd05b46e62c27629f4231fc794e94e614a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/46dcffd05b46e62c27629f4231fc794e94e614a8", "html_url": "https://github.com/rust-lang/rust/commit/46dcffd05b46e62c27629f4231fc794e94e614a8"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "f434053390e54de05cbaf11cd8b9347af65e33b5", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3174ce75112a52082580065b041f8f4330fefa5/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3174ce75112a52082580065b041f8f4330fefa5/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=d3174ce75112a52082580065b041f8f4330fefa5", "patch": "@@ -1994,9 +1994,9 @@ impl<A: Ord> Ord for VecDeque<A> {\n impl<A: Hash> Hash for VecDeque<A> {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n         self.len().hash(state);\n-        for elt in self {\n-            elt.hash(state);\n-        }\n+        let (a, b) = self.as_slices();\n+        Hash::hash_slice(a, state);\n+        Hash::hash_slice(b, state);\n     }\n }\n "}, {"sha": "a50886bfdf303f18c79a60118fc97d7fcd15ec53", "filename": "src/libcollectionstest/vec_deque.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d3174ce75112a52082580065b041f8f4330fefa5/src%2Flibcollectionstest%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3174ce75112a52082580065b041f8f4330fefa5/src%2Flibcollectionstest%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec_deque.rs?ref=d3174ce75112a52082580065b041f8f4330fefa5", "patch": "@@ -605,6 +605,25 @@ fn test_hash() {\n   assert!(::hash(&x) == ::hash(&y));\n }\n \n+#[test]\n+fn test_hash_after_rotation() {\n+    // test that two deques hash equal even if elements are laid out differently\n+    let len = 28;\n+    let mut ring: VecDeque<i32> = (0..len as i32).collect();\n+    let orig = ring.clone();\n+    for _ in 0..ring.capacity() {\n+        // shift values 1 step to the right by pop, sub one, push\n+        ring.pop_front();\n+        for elt in &mut ring {\n+            *elt -= 1;\n+        }\n+        ring.push_back(len - 1);\n+        assert_eq!(::hash(&orig), ::hash(&ring));\n+        assert_eq!(orig, ring);\n+        assert_eq!(ring, orig);\n+    }\n+}\n+\n #[test]\n fn test_ord() {\n     let x = VecDeque::new();"}]}