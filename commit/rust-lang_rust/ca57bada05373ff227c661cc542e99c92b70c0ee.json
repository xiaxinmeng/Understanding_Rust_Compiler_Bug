{"sha": "ca57bada05373ff227c661cc542e99c92b70c0ee", "node_id": "C_kwDOAAsO6NoAKGNhNTdiYWRhMDUzNzNmZjIyN2M2NjFjYzU0MmU5OWM5MmI3MGMwZWU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-06T14:44:48Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-17T09:03:34Z"}, "message": "Bless tests.", "tree": {"sha": "d39b8cce411cc824f562a7bd769d1b733438713a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d39b8cce411cc824f562a7bd769d1b733438713a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca57bada05373ff227c661cc542e99c92b70c0ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca57bada05373ff227c661cc542e99c92b70c0ee", "html_url": "https://github.com/rust-lang/rust/commit/ca57bada05373ff227c661cc542e99c92b70c0ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca57bada05373ff227c661cc542e99c92b70c0ee/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc9f25531a3681f0644267eb954d51f4b22ff5b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9f25531a3681f0644267eb954d51f4b22ff5b7", "html_url": "https://github.com/rust-lang/rust/commit/fc9f25531a3681f0644267eb954d51f4b22ff5b7"}], "stats": {"total": 685, "additions": 527, "deletions": 158}, "files": [{"sha": "1792d8db292c47ee798f144a1973477bcb6c1297", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path-undeclared-lifetime.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -2,9 +2,17 @@ error[E0261]: use of undeclared lifetime name `'x`\n   --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:8:35\n    |\n LL |   fn _f(arg : Box<dyn for<'a> X<Y<'x> = &'a [u32]>>) {}\n-   |        -                          ^^ undeclared lifetime\n-   |        |\n-   |        help: consider introducing lifetime `'x` here: `<'x>`\n+   |                                   ^^ undeclared lifetime\n+   |\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the bound lifetime-generic with a new `'x` lifetime\n+   |\n+LL |   fn _f(arg : Box<dyn for<'x, 'a> X<Y<'x> = &'a [u32]>>) {}\n+   |                           +++\n+help: consider introducing lifetime `'x` here\n+   |\n+LL |   fn _f<'x>(arg : Box<dyn for<'a> X<Y<'x> = &'a [u32]>>) {}\n+   |        ++++\n \n error[E0582]: binding for associated type `Y` references lifetime `'a`, which does not appear in the trait input types\n   --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:8:33"}, {"sha": "a4bb361900fe166f61a1adbc88d2d8af4f7160cb", "filename": "src/test/ui/generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -4,14 +4,19 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |         + Deref<Target = Self::Item<'b>>;\n    |                                     ^^ undeclared lifetime\n    |\n-help: consider introducing lifetime `'b` here\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the bound lifetime-generic with a new `'b` lifetime\n    |\n-LL | trait Iterable<'b> {\n-   |               ++++\n+LL |         + for<'b> Deref<Target = Self::Item<'b>>;\n+   |           +++++++\n help: consider introducing lifetime `'b` here\n    |\n LL |     type Iter<'b, 'a>: Iterator<Item = Self::Item<'a>>\n    |               +++\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | trait Iterable<'b> {\n+   |               ++++\n \n error[E0261]: use of undeclared lifetime name `'undeclared`\n   --> $DIR/generic_associated_type_undeclared_lifetimes.rs:11:41\n@@ -21,12 +26,12 @@ LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n    |\n help: consider introducing lifetime `'undeclared` here\n    |\n-LL | trait Iterable<'undeclared> {\n-   |               +++++++++++++\n-help: consider introducing lifetime `'undeclared` here\n-   |\n LL |     fn iter<'undeclared, 'a>(&'a self) -> Self::Iter<'undeclared>;\n    |             ++++++++++++\n+help: consider introducing lifetime `'undeclared` here\n+   |\n+LL | trait Iterable<'undeclared> {\n+   |               +++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5725b660ab2342505f0e8aead790ab2081be77e4", "filename": "src/test/ui/generic-associated-types/issue-67510.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.rs?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -4,9 +4,9 @@ trait X {\n     type Y<'a>;\n }\n \n-fn f(x: Box<dyn X<Y<'a>=&'a ()>>) {}\n-  //~^ ERROR: use of undeclared lifetime name `'a`\n-  //~| ERROR: use of undeclared lifetime name `'a`\n-\n+fn f(x: Box<dyn X<Y<'a> = &'a ()>>) {}\n+//~^ ERROR: use of undeclared lifetime name `'a`\n+//~| ERROR: use of undeclared lifetime name `'a`\n+//~| ERROR: the trait `X` cannot be made into an object [E0038]\n \n fn main() {}"}, {"sha": "8aeda22bad75ffc1a853a844c88ccc78409a6916", "filename": "src/test/ui/generic-associated-types/issue-67510.stderr", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -1,19 +1,50 @@\n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/issue-67510.rs:7:21\n    |\n-LL | fn f(x: Box<dyn X<Y<'a>=&'a ()>>) {}\n-   |     -               ^^ undeclared lifetime\n-   |     |\n-   |     help: consider introducing lifetime `'a` here: `<'a>`\n+LL | fn f(x: Box<dyn X<Y<'a> = &'a ()>>) {}\n+   |                     ^^ undeclared lifetime\n+   |\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the bound lifetime-generic with a new `'a` lifetime\n+   |\n+LL | fn f(x: Box<dyn for<'a> X<Y<'a> = &'a ()>>) {}\n+   |                 +++++++\n+help: consider introducing lifetime `'a` here\n+   |\n+LL | fn f<'a>(x: Box<dyn X<Y<'a> = &'a ()>>) {}\n+   |     ++++\n \n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/issue-67510.rs:7:26\n+  --> $DIR/issue-67510.rs:7:28\n+   |\n+LL | fn f(x: Box<dyn X<Y<'a> = &'a ()>>) {}\n+   |                            ^^ undeclared lifetime\n+   |\n+help: consider making the bound lifetime-generic with a new `'a` lifetime\n+   |\n+LL | fn f(x: Box<dyn for<'a> X<Y<'a> = &'a ()>>) {}\n+   |                 +++++++\n+help: consider introducing lifetime `'a` here\n+   |\n+LL | fn f<'a>(x: Box<dyn X<Y<'a> = &'a ()>>) {}\n+   |     ++++\n+\n+error[E0038]: the trait `X` cannot be made into an object\n+  --> $DIR/issue-67510.rs:7:13\n+   |\n+LL | fn f(x: Box<dyn X<Y<'a> = &'a ()>>) {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^ `X` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-67510.rs:4:10\n    |\n-LL | fn f(x: Box<dyn X<Y<'a>=&'a ()>>) {}\n-   |     -                    ^^ undeclared lifetime\n-   |     |\n-   |     help: consider introducing lifetime `'a` here: `<'a>`\n+LL | trait X {\n+   |       - this trait cannot be made into an object...\n+LL |     type Y<'a>;\n+   |          ^ ...because it contains the generic associated type `Y`\n+   = help: consider moving `Y` to another trait\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0261`.\n+Some errors have detailed explanations: E0038, E0261.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "448d7ec2873955bb67aaf6b7da37d509c59e3b01", "filename": "src/test/ui/generic-associated-types/issue-70304.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.rs?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -12,13 +12,10 @@ impl Document for DocumentImpl {\n     type Cursor<'a> = DocCursorImpl<'a>;\n \n     fn cursor(&self) -> Self::Cursor<'_> {\n-        DocCursorImpl {\n-            document: &self,\n-        }\n+        DocCursorImpl { document: &self }\n     }\n }\n \n-\n trait DocCursor<'a> {}\n \n struct DocCursorImpl<'a> {\n@@ -35,7 +32,6 @@ where\n     _phantom: std::marker::PhantomData<&'d ()>,\n }\n \n-\n impl<'d, Cursor> Lexer<'d, Cursor>\n where\n     Cursor: DocCursor<'d>,\n@@ -44,15 +40,12 @@ where\n     where\n         Doc: Document<Cursor<'d> = Cursor>,\n     {\n-        Lexer {\n-            cursor: document.cursor(),\n-            _phantom: std::marker::PhantomData,\n-        }\n+        Lexer { cursor: document.cursor(), _phantom: std::marker::PhantomData }\n     }\n }\n \n fn create_doc() -> impl Document<Cursor<'_> = DocCursorImpl<'_>> {\n-                                       //~^ ERROR: missing lifetime specifier\n+    //~^ ERROR: missing lifetime specifier\n     DocumentImpl {}\n }\n "}, {"sha": "c5f59a24057d24747704ea38c570f0d2950ecd87", "filename": "src/test/ui/generic-associated-types/issue-70304.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -1,5 +1,5 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-70304.rs:54:41\n+  --> $DIR/issue-70304.rs:47:41\n    |\n LL | fn create_doc() -> impl Document<Cursor<'_> = DocCursorImpl<'_>> {\n    |                                         ^^ expected named lifetime parameter"}, {"sha": "33332e760f5823f3ec4ac018cb8f55426a43f2cb", "filename": "src/test/ui/generics/generic-extern-lifetime.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.stderr?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -2,7 +2,9 @@ error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/generic-extern-lifetime.rs:6:26\n    |\n LL |     pub fn life2<'b>(x: &'a i32, y: &'b i32);\n-   |                          ^^ undeclared lifetime\n+   |                  -       ^^ undeclared lifetime\n+   |                  |\n+   |                  help: consider introducing lifetime `'a` here: `'a,`\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/generic-extern-lifetime.rs:8:37\n@@ -13,20 +15,27 @@ LL |     pub fn life4<'b>(x: for<'c> fn(&'a i32));\n    = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n help: consider making the type lifetime-generic with a new `'a` lifetime\n    |\n-LL |     pub fn life4<'b>(x: for<'c, 'a> fn(&'a i32));\n-   |                               ++++\n+LL |     pub fn life4<'b>(x: for<'a, 'c> fn(&'a i32));\n+   |                             +++\n+help: consider introducing lifetime `'a` here\n+   |\n+LL |     pub fn life4<'a, 'b>(x: for<'c> fn(&'a i32));\n+   |                  +++\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/generic-extern-lifetime.rs:11:39\n    |\n LL |     pub fn life7<'b>() -> for<'c> fn(&'a i32);\n    |                                       ^^ undeclared lifetime\n    |\n-   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n help: consider making the type lifetime-generic with a new `'a` lifetime\n    |\n-LL |     pub fn life7<'b>() -> for<'c, 'a> fn(&'a i32);\n-   |                                 ++++\n+LL |     pub fn life7<'b>() -> for<'a, 'c> fn(&'a i32);\n+   |                               +++\n+help: consider introducing lifetime `'a` here\n+   |\n+LL |     pub fn life7<'a, 'b>() -> for<'c> fn(&'a i32);\n+   |                  +++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c3e76d9cb5a030d3a5fa557df3ae1d6dfdb061ff", "filename": "src/test/ui/impl-header-lifetime-elision/trait-elided.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.rs?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -1,9 +1,8 @@\n #![allow(warnings)]\n \n-trait MyTrait<'a> { }\n+trait MyTrait<'a> {}\n \n-impl MyTrait for u32 {\n-    //~^ ERROR implicit elided lifetime not allowed here\n-}\n+impl MyTrait for u32 {}\n+//~^ ERROR implicit elided lifetime not allowed here\n \n fn main() {}"}, {"sha": "be918d0a30ce81bf83441dd9db7d7e666962130a", "filename": "src/test/ui/impl-header-lifetime-elision/trait-elided.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.stderr?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -1,7 +1,7 @@\n error[E0726]: implicit elided lifetime not allowed here\n   --> $DIR/trait-elided.rs:5:6\n    |\n-LL | impl MyTrait for u32 {\n+LL | impl MyTrait for u32 {}\n    |      ^^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n    |\n    = note: assuming a `'static` lifetime..."}, {"sha": "0de170161b514a06b0a3576a2ab9c309be34c7a3", "filename": "src/test/ui/issues/issue-10412.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fissues%2Fissue-10412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fissues%2Fissue-10412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10412.rs?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -1,16 +1,20 @@\n-trait Serializable<'self, T> { //~ ERROR lifetimes cannot use keyword names\n-    fn serialize(val : &'self T) -> Vec<u8>; //~ ERROR lifetimes cannot use keyword names\n-    fn deserialize(repr : &[u8]) -> &'self T; //~ ERROR lifetimes cannot use keyword names\n+trait Serializable<'self, T> {\n+    //~^ ERROR lifetimes cannot use keyword names\n+    fn serialize(val: &'self T) -> Vec<u8>; //~ ERROR lifetimes cannot use keyword names\n+    fn deserialize(repr: &[u8]) -> &'self T; //~ ERROR lifetimes cannot use keyword names\n }\n \n-impl<'self> Serializable<str> for &'self str { //~ ERROR lifetimes cannot use keyword names\n+impl<'self> Serializable<str> for &'self str {\n     //~^ ERROR lifetimes cannot use keyword names\n+    //~| ERROR lifetimes cannot use keyword names\n     //~| ERROR implicit elided lifetime not allowed here\n-    //~| ERROR the size for values of type `str` cannot be known at compilation time\n-    fn serialize(val : &'self str) -> Vec<u8> { //~ ERROR lifetimes cannot use keyword names\n+    //~| ERROR the size for values of type `str` cannot be known at compilation time [E0277]\n+    fn serialize(val: &'self str) -> Vec<u8> {\n+        //~^ ERROR lifetimes cannot use keyword names\n         vec![1]\n     }\n-    fn deserialize(repr: &[u8]) -> &'self str { //~ ERROR lifetimes cannot use keyword names\n+    fn deserialize(repr: &[u8]) -> &'self str {\n+        //~^ ERROR lifetimes cannot use keyword names\n         \"hi\"\n     }\n }"}, {"sha": "a65005fd72d09ac1c59e6bbb721a1795332e17fe", "filename": "src/test/ui/issues/issue-10412.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -5,51 +5,51 @@ LL | trait Serializable<'self, T> {\n    |                    ^^^^^\n \n error: lifetimes cannot use keyword names\n-  --> $DIR/issue-10412.rs:2:25\n+  --> $DIR/issue-10412.rs:3:24\n    |\n-LL |     fn serialize(val : &'self T) -> Vec<u8>;\n-   |                         ^^^^^\n+LL |     fn serialize(val: &'self T) -> Vec<u8>;\n+   |                        ^^^^^\n \n error: lifetimes cannot use keyword names\n-  --> $DIR/issue-10412.rs:3:38\n+  --> $DIR/issue-10412.rs:4:37\n    |\n-LL |     fn deserialize(repr : &[u8]) -> &'self T;\n-   |                                      ^^^^^\n+LL |     fn deserialize(repr: &[u8]) -> &'self T;\n+   |                                     ^^^^^\n \n error: lifetimes cannot use keyword names\n-  --> $DIR/issue-10412.rs:6:6\n+  --> $DIR/issue-10412.rs:7:6\n    |\n LL | impl<'self> Serializable<str> for &'self str {\n    |      ^^^^^\n \n error: lifetimes cannot use keyword names\n-  --> $DIR/issue-10412.rs:6:36\n+  --> $DIR/issue-10412.rs:7:36\n    |\n LL | impl<'self> Serializable<str> for &'self str {\n    |                                    ^^^^^\n \n error: lifetimes cannot use keyword names\n-  --> $DIR/issue-10412.rs:10:25\n+  --> $DIR/issue-10412.rs:12:24\n    |\n-LL |     fn serialize(val : &'self str) -> Vec<u8> {\n-   |                         ^^^^^\n+LL |     fn serialize(val: &'self str) -> Vec<u8> {\n+   |                        ^^^^^\n \n error: lifetimes cannot use keyword names\n-  --> $DIR/issue-10412.rs:13:37\n+  --> $DIR/issue-10412.rs:16:37\n    |\n LL |     fn deserialize(repr: &[u8]) -> &'self str {\n    |                                     ^^^^^\n \n error[E0726]: implicit elided lifetime not allowed here\n-  --> $DIR/issue-10412.rs:6:13\n+  --> $DIR/issue-10412.rs:7:13\n    |\n LL | impl<'self> Serializable<str> for &'self str {\n    |             ^^^^^^^^^^^^^^^^^ help: indicate the anonymous lifetime: `Serializable<'_, str>`\n    |\n    = note: assuming a `'static` lifetime...\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/issue-10412.rs:6:13\n+  --> $DIR/issue-10412.rs:7:13\n    |\n LL | impl<'self> Serializable<str> for &'self str {\n    |             ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "0d6ade41511fdcbd8766581e7b922090d1c75079", "filename": "src/test/ui/lifetimes/undeclared-lifetime-used-in-debug-macro-issue-70152.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.stderr?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -9,6 +9,8 @@ LL |     a: &'b str,\n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/undeclared-lifetime-used-in-debug-macro-issue-70152.rs:3:9\n    |\n+LL | #[derive(Eq, PartialEq)]\n+   |          -- lifetime `'b` is missing in item created through this procedural macro\n LL | struct Test {\n    |            - help: consider introducing lifetime `'b` here: `<'b>`\n LL |     a: &'b str,\n@@ -22,12 +24,12 @@ LL |     fn foo(&'b self) {}\n    |\n help: consider introducing lifetime `'b` here\n    |\n-LL | impl<'b> T for Test {\n-   |     ++++\n-help: consider introducing lifetime `'b` here\n-   |\n LL |     fn foo<'b>(&'b self) {}\n    |           ++++\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | impl<'b> T for Test {\n+   |     ++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ba7231070a0f428697d74e17a9b7bf1eda0a0a3e", "filename": "src/test/ui/methods/method-call-lifetime-args-unresolved.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.rs?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -1,3 +1,6 @@\n fn main() {\n-    0.clone::<'a>(); //~ ERROR use of undeclared lifetime name `'a`\n+    0.clone::<'a>();\n+    //~^ ERROR use of undeclared lifetime name `'a`\n+    //~| WARN cannot specify lifetime arguments explicitly if late bound\n+    //~| WARN this was previously accepted by the compiler\n }"}, {"sha": "78af19586a1b7751168243c4883e2bdf735310a2", "filename": "src/test/ui/methods/method-call-lifetime-args-unresolved.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -6,6 +6,21 @@ LL | fn main() {\n LL |     0.clone::<'a>();\n    |               ^^ undeclared lifetime\n \n-error: aborting due to previous error\n+warning: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/method-call-lifetime-args-unresolved.rs:2:15\n+   |\n+LL |     0.clone::<'a>();\n+   |               ^^\n+   |\n+  ::: $SRC_DIR/core/src/clone.rs:LL:COL\n+   |\n+LL |     fn clone(&self) -> Self;\n+   |              - the late bound lifetime parameter is introduced here\n+   |\n+   = note: `#[warn(late_bound_lifetime_arguments)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>\n+\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0261`."}, {"sha": "da316c6ef5e435c82b61b25b19bfa1ebb9505e08", "filename": "src/test/ui/regions/regions-name-static.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fregions%2Fregions-name-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fregions%2Fregions-name-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-name-static.rs?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -1,5 +1,6 @@\n-struct Foo<'static> { //~ ERROR invalid lifetime parameter name: `'static`\n-    x: &'static isize\n+struct Foo<'static> {\n+    //~^ ERROR invalid lifetime parameter name: `'static`\n+    x: &'static isize,\n }\n \n fn main() {}"}, {"sha": "7b6ede19341b4953f141faa58f48252bc3f6d3c2", "filename": "src/test/ui/regions/regions-name-undeclared.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.rs?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -23,14 +23,14 @@ fn bar<'a>(x: &'a isize) {\n     let y: &'a isize = x;\n \n     // &'a is not visible to *items*:\n-    type X = Option<&'a isize>; //~ ERROR undeclared lifetime\n+    type X = Option<&'a isize>; //~ ERROR can't use generic parameters from outer item\n     enum E {\n-        E1(&'a isize) //~ ERROR undeclared lifetime\n+        E1(&'a isize) //~ ERROR can't use generic parameters from outer item\n     }\n     struct S {\n-        f: &'a isize //~ ERROR undeclared lifetime\n+        f: &'a isize //~ ERROR can't use generic parameters from outer item\n     }\n-    fn f(a: &'a isize) { } //~ ERROR undeclared lifetime\n+    fn f(a: &'a isize) { } //~ ERROR can't use generic parameters from outer item\n \n     // &'a CAN be declared on functions and used then:\n     fn g<'a>(a: &'a isize) { } // OK"}, {"sha": "532603de5f783f2b8d4939b2977d9f09be01fff7", "filename": "src/test/ui/regions/regions-name-undeclared.stderr", "status": "modified", "additions": 58, "deletions": 46, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -1,19 +1,3 @@\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/regions-name-undeclared.rs:28:13\n-   |\n-LL |     enum E {\n-   |           - help: consider introducing lifetime `'a` here: `<'a>`\n-LL |         E1(&'a isize)\n-   |             ^^ undeclared lifetime\n-\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/regions-name-undeclared.rs:31:13\n-   |\n-LL |     struct S {\n-   |             - help: consider introducing lifetime `'a` here: `<'a>`\n-LL |         f: &'a isize\n-   |             ^^ undeclared lifetime\n-\n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/regions-name-undeclared.rs:16:24\n    |\n@@ -22,12 +6,12 @@ LL |     fn m4(&self, arg: &'b isize) { }\n    |\n help: consider introducing lifetime `'b` here\n    |\n-LL | impl<'b, 'a> Foo<'a> {\n-   |      +++\n-help: consider introducing lifetime `'b` here\n-   |\n LL |     fn m4<'b>(&self, arg: &'b isize) { }\n    |          ++++\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | impl<'b, 'a> Foo<'a> {\n+   |      +++\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/regions-name-undeclared.rs:17:12\n@@ -37,12 +21,12 @@ LL |     fn m5(&'b self) { }\n    |\n help: consider introducing lifetime `'b` here\n    |\n-LL | impl<'b, 'a> Foo<'a> {\n-   |      +++\n-help: consider introducing lifetime `'b` here\n-   |\n LL |     fn m5<'b>(&'b self) { }\n    |          ++++\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | impl<'b, 'a> Foo<'a> {\n+   |      +++\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/regions-name-undeclared.rs:18:27\n@@ -52,26 +36,54 @@ LL |     fn m6(&self, arg: Foo<'b>) { }\n    |\n help: consider introducing lifetime `'b` here\n    |\n-LL | impl<'b, 'a> Foo<'a> {\n-   |      +++\n-help: consider introducing lifetime `'b` here\n-   |\n LL |     fn m6<'b>(&self, arg: Foo<'b>) { }\n    |          ++++\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | impl<'b, 'a> Foo<'a> {\n+   |      +++\n \n-error[E0261]: use of undeclared lifetime name `'a`\n+error[E0401]: can't use generic parameters from outer item\n   --> $DIR/regions-name-undeclared.rs:26:22\n    |\n+LL | fn bar<'a>(x: &'a isize) {\n+   |        -- lifetime parameter from outer item\n+...\n LL |     type X = Option<&'a isize>;\n-   |           -          ^^ undeclared lifetime\n+   |           -          ^^ use of generic parameter from outer item\n    |           |\n    |           help: consider introducing lifetime `'a` here: `<'a>`\n \n-error[E0261]: use of undeclared lifetime name `'a`\n+error[E0401]: can't use generic parameters from outer item\n+  --> $DIR/regions-name-undeclared.rs:28:13\n+   |\n+LL | fn bar<'a>(x: &'a isize) {\n+   |        -- lifetime parameter from outer item\n+...\n+LL |     enum E {\n+   |           - help: consider introducing lifetime `'a` here: `<'a>`\n+LL |         E1(&'a isize)\n+   |             ^^ use of generic parameter from outer item\n+\n+error[E0401]: can't use generic parameters from outer item\n+  --> $DIR/regions-name-undeclared.rs:31:13\n+   |\n+LL | fn bar<'a>(x: &'a isize) {\n+   |        -- lifetime parameter from outer item\n+...\n+LL |     struct S {\n+   |             - help: consider introducing lifetime `'a` here: `<'a>`\n+LL |         f: &'a isize\n+   |             ^^ use of generic parameter from outer item\n+\n+error[E0401]: can't use generic parameters from outer item\n   --> $DIR/regions-name-undeclared.rs:33:14\n    |\n+LL | fn bar<'a>(x: &'a isize) {\n+   |        -- lifetime parameter from outer item\n+...\n LL |     fn f(a: &'a isize) { }\n-   |         -    ^^ undeclared lifetime\n+   |         -    ^^ use of generic parameter from outer item\n    |         |\n    |         help: consider introducing lifetime `'a` here: `<'a>`\n \n@@ -90,30 +102,29 @@ LL | ...                   &'b isize,\n    |                        ^^ undeclared lifetime\n    |\n    = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the bound lifetime-generic with a new `'b` lifetime\n+   |\n+LL |             b: Box<dyn for<'b, 'a> FnOnce(&'a isize,\n+   |                            +++\n help: consider introducing lifetime `'b` here\n    |\n LL | fn fn_types<'b>(a: &'a isize,\n    |            ++++\n-help: consider making the bound lifetime-generic with a new `'b` lifetime\n-   |\n-LL |             b: Box<dyn for<'a, 'b> FnOnce(&'a isize,\n-   |                              ++++\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/regions-name-undeclared.rs:46:36\n    |\n LL | ...                   &'b isize)>,\n    |                        ^^ undeclared lifetime\n    |\n-   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the bound lifetime-generic with a new `'b` lifetime\n+   |\n+LL |             b: Box<dyn for<'b, 'a> FnOnce(&'a isize,\n+   |                            +++\n help: consider introducing lifetime `'b` here\n    |\n LL | fn fn_types<'b>(a: &'a isize,\n    |            ++++\n-help: consider making the bound lifetime-generic with a new `'b` lifetime\n-   |\n-LL |             b: Box<dyn for<'a, 'b> FnOnce(&'a isize,\n-   |                              ++++\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:47:17\n@@ -132,13 +143,14 @@ LL |     async fn buggy(&self) -> &'a str {\n    |\n help: consider introducing lifetime `'a` here\n    |\n-LL | impl<'a> Bug {\n-   |     ++++\n-help: consider introducing lifetime `'a` here\n-   |\n LL |     async fn buggy<'a>(&self) -> &'a str {\n    |                   ++++\n+help: consider introducing lifetime `'a` here\n+   |\n+LL | impl<'a> Bug {\n+   |     ++++\n \n error: aborting due to 12 previous errors\n \n-For more information about this error, try `rustc --explain E0261`.\n+Some errors have detailed explanations: E0261, E0401.\n+For more information about an error, try `rustc --explain E0261`."}, {"sha": "a761ec5916745d5a5df8bcdd450159165eed0abb", "filename": "src/test/ui/suggestions/fn-missing-lifetime-in-item.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -5,14 +5,14 @@ LL | struct S1<F: Fn(&i32, &i32) -> &'a i32>(F);\n    |                                 ^^ undeclared lifetime\n    |\n    = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n-help: consider introducing lifetime `'a` here\n-   |\n-LL | struct S1<'a, F: Fn(&i32, &i32) -> &'a i32>(F);\n-   |           +++\n help: consider making the bound lifetime-generic with a new `'a` lifetime\n    |\n LL | struct S1<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n    |              +++++++\n+help: consider introducing lifetime `'a` here\n+   |\n+LL | struct S1<'a, F: Fn(&i32, &i32) -> &'a i32>(F);\n+   |           +++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/fn-missing-lifetime-in-item.rs:2:32"}, {"sha": "647b343fe06947c43727e39ec7b84c87a1ad5e73", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -14,28 +14,31 @@ impl Get<usize> for Foo {\n \n fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n where\n-    G: Get<T>\n+    G: Get<T>,\n {\n     move || {\n+        //~^ ERROR hidden type for `impl Trait` captures lifetime\n         *dest = g.get();\n     }\n }\n \n // After applying suggestion for `foo`:\n fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+//~^ ERROR the parameter type `G` may not live long enough\n where\n-    G: Get<T>\n+    G: Get<T>,\n {\n+    //~^ ERROR the parameter type `G` may not live long enough\n     move || {\n         *dest = g.get();\n     }\n }\n \n-\n // After applying suggestion for `bar`:\n-fn baz<G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ //~ ERROR undeclared lifetime\n+fn baz<G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+//~^ ERROR undeclared lifetime name `'a`\n where\n-    G: Get<T>\n+    G: Get<T>,\n {\n     move || {\n         *dest = g.get();\n@@ -44,9 +47,11 @@ where\n \n // After applying suggestion for `baz`:\n fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+//~^ ERROR the parameter type `G` may not live long enough\n where\n-    G: Get<T>\n+    G: Get<T>,\n {\n+    //~^ ERROR the parameter type `G` may not live long enough\n     move || {\n         *dest = g.get();\n     }\n@@ -55,6 +60,8 @@ where\n // Same as above, but show that we pay attention to lifetime names from parent item\n impl<'a> Foo {\n     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+        //~^ ERROR the parameter type `G` may not live long enough\n+        //~| ERROR the parameter type `G` may not live long enough\n         move || {\n             *dest = g.get();\n         }\n@@ -63,8 +70,9 @@ impl<'a> Foo {\n \n // After applying suggestion for `qux`:\n fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n+//~^ ERROR explicit lifetime required in the type of `dest`\n where\n-    G: Get<T>\n+    G: Get<T>,\n {\n     move || {\n         *dest = g.get();\n@@ -73,19 +81,20 @@ where\n \n // Potential incorrect attempt:\n fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n+//~^ ERROR the parameter type `G` may not live long enough\n where\n-    G: Get<T>\n+    G: Get<T>,\n {\n+    //~^ ERROR the parameter type `G` may not live long enough\n     move || {\n         *dest = g.get();\n     }\n }\n \n-\n // We need to tie the lifetime of `G` with the lifetime of `&mut T` and the returned closure:\n fn ok<'a, G: 'a, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n where\n-    G: Get<T>\n+    G: Get<T>,\n {\n     move || {\n         *dest = g.get();\n@@ -95,7 +104,7 @@ where\n // This also works. The `'_` isn't necessary but it's where we arrive to following the suggestions:\n fn ok2<'a, G: 'a, T>(g: G, dest: &'a mut T) -> impl FnOnce() + '_ + 'a\n where\n-    G: Get<T>\n+    G: Get<T>,\n {\n     move || {\n         *dest = g.get();"}, {"sha": "6d538dfd609a80b47df0c180df5646e31308b387", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 226, "deletions": 3, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -1,11 +1,234 @@\n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/missing-lifetimes-in-signature.rs:36:11\n+  --> $DIR/missing-lifetimes-in-signature.rs:38:11\n    |\n LL | fn baz<G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |        -  ^^ undeclared lifetime\n    |        |\n    |        help: consider introducing lifetime `'a` here: `'a,`\n \n-error: aborting due to previous error\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:19:5\n+   |\n+LL |   fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n+   |                            ------ hidden type `[closure@$DIR/missing-lifetimes-in-signature.rs:19:5: 22:6]` captures the anonymous lifetime defined here\n+...\n+LL | /     move || {\n+LL | |\n+LL | |         *dest = g.get();\n+LL | |     }\n+   | |_____^\n+   |\n+help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n+   |\n+LL | fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                                                   ++++\n+\n+error[E0311]: the parameter type `G` may not live long enough\n+  --> $DIR/missing-lifetimes-in-signature.rs:26:37\n+   |\n+LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                                     ^^^^^^^^^^^^^^^^^^\n+   |\n+note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/missing-lifetimes-in-signature.rs:26:26\n+   |\n+LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                          ^^^^^^\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:32:5: 34:6]` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:26:37\n+   |\n+LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                                     ^^^^^^^^^^^^^^^^^^\n+help: consider introducing an explicit lifetime bound\n+   |\n+LL | fn bar<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n+   |        ~~~~~                                                   ++++\n+\n+error[E0311]: the parameter type `G` may not live long enough\n+  --> $DIR/missing-lifetimes-in-signature.rs:30:1\n+   |\n+LL | / {\n+LL | |\n+LL | |     move || {\n+LL | |         *dest = g.get();\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/missing-lifetimes-in-signature.rs:26:26\n+   |\n+LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                          ^^^^^^\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:32:5: 34:6]` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:30:1\n+   |\n+LL | / {\n+LL | |\n+LL | |     move || {\n+LL | |         *dest = g.get();\n+LL | |     }\n+LL | | }\n+   | |_^\n+help: consider introducing an explicit lifetime bound\n+   |\n+LL ~ fn bar<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+LL |\n+LL | where\n+LL |     G: Get<T>,\n+LL | {\n+LL |\n+ ...\n+\n+error[E0311]: the parameter type `G` may not live long enough\n+  --> $DIR/missing-lifetimes-in-signature.rs:49:45\n+   |\n+LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                                             ^^^^^^^^^^^^^^^^^^\n+   |\n+note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/missing-lifetimes-in-signature.rs:49:34\n+   |\n+LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                                  ^^^^^^\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:55:5: 57:6]` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:49:45\n+   |\n+LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                                             ^^^^^^^^^^^^^^^^^^\n+help: consider introducing an explicit lifetime bound\n+   |\n+LL | fn qux<'b, 'a, G: 'b + 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'b\n+   |        +++     ~~~~~~~                                                  ++++\n+\n+error[E0311]: the parameter type `G` may not live long enough\n+  --> $DIR/missing-lifetimes-in-signature.rs:53:1\n+   |\n+LL | / {\n+LL | |\n+LL | |     move || {\n+LL | |         *dest = g.get();\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/missing-lifetimes-in-signature.rs:49:34\n+   |\n+LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                                  ^^^^^^\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:55:5: 57:6]` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:53:1\n+   |\n+LL | / {\n+LL | |\n+LL | |     move || {\n+LL | |         *dest = g.get();\n+LL | |     }\n+LL | | }\n+   | |_^\n+help: consider introducing an explicit lifetime bound\n+   |\n+LL ~ fn qux<'b, 'a, G: 'b + 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+LL |\n+LL | where\n+LL |     G: Get<T>,\n+LL | {\n+LL |\n+ ...\n+\n+error[E0311]: the parameter type `G` may not live long enough\n+  --> $DIR/missing-lifetimes-in-signature.rs:62:58\n+   |\n+LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+   |                                                          ^^^^^^^^^^^^^^^^^^\n+   |\n+note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/missing-lifetimes-in-signature.rs:62:47\n+   |\n+LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+   |                                               ^^^^^^\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:65:9: 67:10]` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:62:58\n+   |\n+LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+   |                                                          ^^^^^^^^^^^^^^^^^^\n+help: consider introducing an explicit lifetime bound\n+   |\n+LL |     fn qux<'c, 'b, G: 'c + Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'c {\n+   |            +++     ~~~~~~~                                                           ++++\n+\n+error[E0311]: the parameter type `G` may not live long enough\n+  --> $DIR/missing-lifetimes-in-signature.rs:62:77\n+   |\n+LL |       fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+   |  _____________________________________________________________________________^\n+LL | |\n+LL | |\n+LL | |         move || {\n+LL | |             *dest = g.get();\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+   |\n+note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/missing-lifetimes-in-signature.rs:62:47\n+   |\n+LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+   |                                               ^^^^^^\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:65:9: 67:10]` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:62:77\n+   |\n+LL |       fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+   |  _____________________________________________________________________________^\n+LL | |\n+LL | |\n+LL | |         move || {\n+LL | |             *dest = g.get();\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+help: consider introducing an explicit lifetime bound\n+   |\n+LL ~     fn qux<'c, 'b, G: 'c + Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+LL |\n+LL |\n+LL |         move || {\n+LL |             *dest = g.get();\n+LL |         }\n+ ...\n+\n+error[E0621]: explicit lifetime required in the type of `dest`\n+  --> $DIR/missing-lifetimes-in-signature.rs:72:45\n+   |\n+LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n+   |                                  ------     ^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required\n+   |                                  |\n+   |                                  help: add explicit lifetime `'a` to the type of `dest`: `&'a mut T`\n+\n+error[E0309]: the parameter type `G` may not live long enough\n+  --> $DIR/missing-lifetimes-in-signature.rs:83:44\n+   |\n+LL | fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n+   |            -                               ^^^^^^^^^^^^^^^^^^ ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:89:5: 91:6]` will meet its required lifetime bounds\n+   |            |\n+   |            help: consider adding an explicit lifetime bound...: `G: 'a`\n+\n+error[E0309]: the parameter type `G` may not live long enough\n+  --> $DIR/missing-lifetimes-in-signature.rs:87:1\n+   |\n+LL |   fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n+   |              - help: consider adding an explicit lifetime bound...: `G: 'a`\n+...\n+LL | / {\n+LL | |\n+LL | |     move || {\n+LL | |         *dest = g.get();\n+LL | |     }\n+LL | | }\n+   | |_^ ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:89:5: 91:6]` will meet its required lifetime bounds\n+\n+error: aborting due to 11 previous errors\n \n-For more information about this error, try `rustc --explain E0261`.\n+Some errors have detailed explanations: E0261, E0309, E0621, E0700.\n+For more information about an error, try `rustc --explain E0261`."}, {"sha": "b0de8bf6aa4f267d578e319fff1bf448dac14d9d", "filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-error.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.rs?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -18,5 +18,7 @@ type Return<A> = impl WithAssoc<A, AssocType = impl SomeTrait + 'a>;\n //~^ ERROR use of undeclared lifetime name `'a`\n \n fn my_fun() -> Return<()> {}\n+//~^ ERROR non-defining opaque type use in defining scope\n+//~| ERROR non-defining opaque type use in defining scope\n \n fn main() {}"}, {"sha": "d038fbbe1b40a191fc35a9da4cccccc9f95293f7", "filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-error.stderr", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.stderr?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -2,10 +2,42 @@ error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:17:65\n    |\n LL | type Return<A> = impl WithAssoc<A, AssocType = impl SomeTrait + 'a>;\n-   |             -                                                   ^^ undeclared lifetime\n-   |             |\n-   |             help: consider introducing lifetime `'a` here: `'a,`\n+   |                                                                 ^^ undeclared lifetime\n+   |\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the bound lifetime-generic with a new `'a` lifetime\n+   |\n+LL | type Return<A> = impl for<'a> WithAssoc<A, AssocType = impl SomeTrait + 'a>;\n+   |                       +++++++\n+help: consider introducing lifetime `'a` here\n+   |\n+LL | type Return<'a, A> = impl WithAssoc<A, AssocType = impl SomeTrait + 'a>;\n+   |             +++\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:20:27\n+   |\n+LL | fn my_fun() -> Return<()> {}\n+   |                           ^^\n+   |\n+note: used non-generic type `()` for generic parameter\n+  --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:17:13\n+   |\n+LL | type Return<A> = impl WithAssoc<A, AssocType = impl SomeTrait + 'a>;\n+   |             ^\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:20:27\n+   |\n+LL | fn my_fun() -> Return<()> {}\n+   |                           ^^\n+   |\n+note: used non-generic type `()` for generic parameter\n+  --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:17:13\n+   |\n+LL | type Return<A> = impl WithAssoc<A, AssocType = impl SomeTrait + 'a>;\n+   |             ^\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0261`."}, {"sha": "74dc331b00a5ce797c70091012def3c127f39ea9", "filename": "src/test/ui/underscore-lifetime/in-binder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.rs?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -10,22 +10,22 @@ impl<'_> IceCube<'_> {}\n //~^ ERROR `'_` cannot be used here\n \n struct Struct<'_> {\n-//~^ ERROR `'_` cannot be used here\n+    //~^ ERROR `'_` cannot be used here\n     v: Vec<&'static char>\n }\n \n enum Enum<'_> {\n-//~^ ERROR `'_` cannot be used here\n+    //~^ ERROR `'_` cannot be used here\n     Variant\n }\n \n union Union<'_> {\n-//~^ ERROR `'_` cannot be used here\n+    //~^ ERROR `'_` cannot be used here\n     a: u32\n }\n \n trait Trait<'_> {\n-//~^ ERROR `'_` cannot be used here\n+    //~^ ERROR `'_` cannot be used here\n }\n \n fn foo<'_>() {"}, {"sha": "e8df02fbad62f3590c792544a85d29c697414904", "filename": "src/test/ui/where-clauses/where-lifetime-resolution.stderr", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca57bada05373ff227c661cc542e99c92b70c0ee/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr?ref=ca57bada05373ff227c661cc542e99c92b70c0ee", "patch": "@@ -1,20 +1,41 @@\n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/where-lifetime-resolution.rs:6:38\n    |\n-LL | fn f() where\n-   |     - help: consider introducing lifetime `'a` here: `<'a>`\n-LL |     for<'a> dyn Trait1<'a>: Trait1<'a>, // OK\n LL |     (dyn for<'a> Trait1<'a>): Trait1<'a>,\n    |                                      ^^ undeclared lifetime\n+   |\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the bound lifetime-generic with a new `'a` lifetime\n+   |\n+LL |     (dyn for<'a> Trait1<'a>): for<'a> Trait1<'a>,\n+   |                               +++++++\n+help: consider making the bound lifetime-generic with a new `'a` lifetime\n+   |\n+LL |     for<'a> (dyn for<'a> Trait1<'a>): Trait1<'a>,\n+   |     +++++++\n+help: consider introducing lifetime `'a` here\n+   |\n+LL | fn f<'a>() where\n+   |     ++++\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/where-lifetime-resolution.rs:8:52\n    |\n-LL | fn f() where\n-   |     - help: consider introducing lifetime `'b` here: `<'b>`\n-...\n LL |     for<'a> dyn for<'b> Trait2<'a, 'b>: Trait2<'a, 'b>,\n    |                                                    ^^ undeclared lifetime\n+   |\n+help: consider making the bound lifetime-generic with a new `'b` lifetime\n+   |\n+LL |     for<'a> dyn for<'b> Trait2<'a, 'b>: for<'b> Trait2<'a, 'b>,\n+   |                                         +++++++\n+help: consider making the bound lifetime-generic with a new `'b` lifetime\n+   |\n+LL |     for<'b, 'a> dyn for<'b> Trait2<'a, 'b>: Trait2<'a, 'b>,\n+   |         +++\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | fn f<'b>() where\n+   |     ++++\n \n error: aborting due to 2 previous errors\n "}]}