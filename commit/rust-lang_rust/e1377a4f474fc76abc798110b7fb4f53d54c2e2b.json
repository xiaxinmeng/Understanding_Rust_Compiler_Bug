{"sha": "e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMzc3YTRmNDc0ZmM3NmFiYzc5ODExMGI3ZmI0ZjUzZDU0YzJlMmI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-04-19T22:58:12Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-04-22T18:00:50Z"}, "message": "avoid calling `mk_region` unnecessarily\n\nthis improves typeck & trans performance by 1%. This looked hotter on\ncallgrind than it is on a CPU.", "tree": {"sha": "8b9be2d0c057a3d9eb2ffae6310f1ea4c109409c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b9be2d0c057a3d9eb2ffae6310f1ea4c109409c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "html_url": "https://github.com/rust-lang/rust/commit/e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bf00450cb9413b3c8e1e52fb7dfeaf31eb93b83", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf00450cb9413b3c8e1e52fb7dfeaf31eb93b83", "html_url": "https://github.com/rust-lang/rust/commit/3bf00450cb9413b3c8e1e52fb7dfeaf31eb93b83"}], "stats": {"total": 140, "additions": 85, "deletions": 55}, "files": [{"sha": "922842136dc9f398464b422bd2437400e13de105", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n             ty::ReEmpty |\n             ty::ReErased => {\n                 // replace all free regions with 'erased\n-                self.tcx().mk_region(ty::ReErased)\n+                self.tcx().types.re_erased\n             }\n         }\n     }"}, {"sha": "fa6775737b57df93f167f176f2d8c8dd6bc0e4ac", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -948,7 +948,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n                 } else {\n                     // otherwise, we don't know what the free region is,\n                     // so we must conservatively say the LUB is static:\n-                    self.tcx.mk_region(ReStatic)\n+                    self.tcx.types.re_static\n                 }\n             }\n \n@@ -971,7 +971,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n                 if a == b {\n                     a\n                 } else {\n-                    self.tcx.mk_region(ReStatic)\n+                    self.tcx.types.re_static\n                 }\n             }\n         }\n@@ -1018,7 +1018,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n \n     fn construct_var_data(&self) -> Vec<VarValue<'tcx>> {\n         (0..self.num_vars() as usize)\n-            .map(|_| Value(self.tcx.mk_region(ty::ReEmpty)))\n+            .map(|_| Value(self.tcx.types.re_empty))\n             .collect()\n     }\n \n@@ -1493,7 +1493,7 @@ fn lookup<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                           -> &'tcx ty::Region {\n     match values[rid.index as usize] {\n         Value(r) => r,\n-        ErrorValue => tcx.mk_region(ReStatic), // Previously reported error.\n+        ErrorValue => tcx.types.re_static, // Previously reported error.\n     }\n }\n "}, {"sha": "8b26315915826ce41723cc3f27afd06c183aa900", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -426,7 +426,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n \n             hir::ExprMatch(ref discr, ref arms, _) => {\n                 let discr_cmt = return_if_err!(self.mc.cat_expr(&discr));\n-                let r = self.tcx().mk_region(ty::ReEmpty);\n+                let r = self.tcx().types.re_empty;\n                 self.borrow_expr(&discr, r, ty::ImmBorrow, MatchDiscriminant);\n \n                 // treatment of the discriminant is handled while walking the arms."}, {"sha": "188fcc9141492447de66d14cf6486ef4f5ea7136", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -871,8 +871,8 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         // we can promote to a constant, otherwise equal to enclosing temp\n         // lifetime.\n         let (re, old_re) = if promotable {\n-            (self.tcx().mk_region(ty::ReStatic),\n-             self.tcx().mk_region(ty::ReStatic))\n+            (self.tcx().types.re_static,\n+             self.tcx().types.re_static)\n         } else {\n             self.temporary_scope(id)\n         };"}, {"sha": "908bb337fa18e1b3b9cd57bac62262e675204b7c", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -443,7 +443,7 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n                         // Otherwise, we have something of the form\n                         // `for<'a> T: 'a where 'a not in T`, which we can treat as `T: 'static`.\n                         Some(t_a) => {\n-                            let r_static = selcx.tcx().mk_region(ty::ReStatic);\n+                            let r_static = selcx.tcx().types.re_static;\n                             register_region_obligation(t_a, r_static,\n                                                        obligation.cause.clone(),\n                                                        region_obligations);"}, {"sha": "281c1e253798cd080383731626b90d98cfb0d6cc", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -629,7 +629,7 @@ pub fn get_vtable_methods<'a, 'tcx>(\n             // the method may have some early-bound lifetimes, add\n             // regions for those\n             let substs = Substs::for_item(tcx, def_id,\n-                                          |_, _| tcx.mk_region(ty::ReErased),\n+                                          |_, _| tcx.types.re_erased,\n                                           |def, _| trait_ref.substs().type_for_def(def));\n \n             // the trait type may have higher-ranked lifetimes in it;"}, {"sha": "b20ac8ddbfc8a925bd85ea1c0dcff79facae0486", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -190,6 +190,10 @@ pub struct CommonTypes<'tcx> {\n     pub f64: Ty<'tcx>,\n     pub never: Ty<'tcx>,\n     pub err: Ty<'tcx>,\n+\n+    pub re_empty: &'tcx Region,\n+    pub re_static: &'tcx Region,\n+    pub re_erased: &'tcx Region,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n@@ -360,6 +364,14 @@ impl<'tcx> TypeckTables<'tcx> {\n impl<'tcx> CommonTypes<'tcx> {\n     fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {\n         let mk = |sty| interners.intern_ty(sty, None);\n+        let mk_region = |r| {\n+            if let Some(r) = interners.region.borrow().get(&r) {\n+                return r.0;\n+            }\n+            let r = interners.arena.alloc(r);\n+            interners.region.borrow_mut().insert(Interned(r));\n+            &*r\n+        };\n         CommonTypes {\n             bool: mk(TyBool),\n             char: mk(TyChar),\n@@ -379,6 +391,10 @@ impl<'tcx> CommonTypes<'tcx> {\n             u128: mk(TyUint(ast::UintTy::U128)),\n             f32: mk(TyFloat(ast::FloatTy::F32)),\n             f64: mk(TyFloat(ast::FloatTy::F64)),\n+\n+            re_empty: mk_region(Region::ReEmpty),\n+            re_static: mk_region(Region::ReStatic),\n+            re_erased: mk_region(Region::ReErased),\n         }\n     }\n }\n@@ -1232,7 +1248,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn mk_static_str(self) -> Ty<'tcx> {\n-        self.mk_imm_ref(self.mk_region(ty::ReStatic), self.mk_str())\n+        self.mk_imm_ref(self.types.re_static, self.mk_str())\n     }\n \n     pub fn mk_adt(self, def: &'tcx AdtDef, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {"}, {"sha": "969d040e7a6e8f94e92fdd724be49dbce6769907", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -410,7 +410,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn erase_late_bound_regions<T>(self, value: &Binder<T>) -> T\n         where T : TypeFoldable<'tcx>\n     {\n-        self.replace_late_bound_regions(value, |_| self.mk_region(ty::ReErased)).0\n+        self.replace_late_bound_regions(value, |_| self.types.re_erased).0\n     }\n \n     /// Rewrite any late-bound regions so that they are anonymous.  Region numbers are\n@@ -538,7 +538,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 // whenever a substitution occurs.\n                 match *r {\n                     ty::ReLateBound(..) => r,\n-                    _ => self.tcx().mk_region(ty::ReErased)\n+                    _ => self.tcx().types.re_erased\n                 }\n             }\n         }\n@@ -565,6 +565,22 @@ pub fn shift_region(region: ty::Region, amount: u32) -> ty::Region {\n     }\n }\n \n+pub fn shift_region_ref<'a, 'gcx, 'tcx>(\n+    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+    region: &'tcx ty::Region,\n+    amount: u32)\n+    -> &'tcx ty::Region\n+{\n+    match region {\n+        &ty::ReLateBound(debruijn, br) if amount > 0 => {\n+            tcx.mk_region(ty::ReLateBound(debruijn.shifted(amount), br))\n+        }\n+        _ => {\n+            region\n+        }\n+    }\n+}\n+\n pub fn shift_regions<'a, 'gcx, 'tcx, T>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                         amount: u32, value: &T) -> T\n     where T: TypeFoldable<'tcx>\n@@ -573,7 +589,7 @@ pub fn shift_regions<'a, 'gcx, 'tcx, T>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n            value, amount);\n \n     value.fold_with(&mut RegionFolder::new(tcx, &mut false, &mut |region, _current_depth| {\n-        tcx.mk_region(shift_region(*region, amount))\n+        shift_region_ref(tcx, region, amount)\n     }))\n }\n "}, {"sha": "e355b69d6e612958ba82a488d31911247665a5fc", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -2499,15 +2499,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Construct a parameter environment suitable for static contexts or other contexts where there\n     /// are no free type/lifetime parameters in scope.\n     pub fn empty_parameter_environment(self) -> ParameterEnvironment<'tcx> {\n-\n-        // for an empty parameter environment, there ARE no free\n-        // regions, so it shouldn't matter what we use for the free id\n-        let free_id_outlive = self.region_maps.node_extent(ast::DUMMY_NODE_ID);\n         ty::ParameterEnvironment {\n             free_substs: self.intern_substs(&[]),\n             caller_bounds: Vec::new(),\n-            implicit_region_bound: self.mk_region(ty::ReEmpty),\n-            free_id_outlive: free_id_outlive,\n+            implicit_region_bound: self.types.re_empty,\n+            // for an empty parameter environment, there ARE no free\n+            // regions, so it shouldn't matter what we use for the free id\n+            free_id_outlive: ROOT_CODE_EXTENT,\n             is_copy_cache: RefCell::new(FxHashMap()),\n             is_sized_cache: RefCell::new(FxHashMap()),\n             is_freeze_cache: RefCell::new(FxHashMap()),\n@@ -2760,4 +2758,3 @@ pub fn provide_extern(providers: &mut ty::maps::Providers) {\n pub struct CrateInherentImpls {\n     pub inherent_impls: DefIdMap<Rc<Vec<DefId>>>,\n }\n-"}, {"sha": "14aebdf8418fe58c1565847c12d69a0e82d9c5fd", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -539,6 +539,9 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n     }\n \n     fn shift_region_through_binders(&self, region: &'tcx ty::Region) -> &'tcx ty::Region {\n+        if self.region_binders_passed == 0 || !region.has_escaping_regions() {\n+            return region;\n+        }\n         self.tcx().mk_region(ty::fold::shift_region(*region, self.region_binders_passed))\n     }\n }"}, {"sha": "cdf3cf00b24eee94ffda1dcb72e5b4f21932e409", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -412,7 +412,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// a suitable \"empty substs\" for it.\n     pub fn empty_substs_for_def_id(self, item_def_id: DefId) -> &'tcx ty::Substs<'tcx> {\n         ty::Substs::for_item(self, item_def_id,\n-                             |_, _| self.mk_region(ty::ReErased),\n+                             |_, _| self.types.re_erased,\n                              |_, _| {\n             bug!(\"empty_substs_for_def_id: {:?} has type parameters\", item_def_id)\n         })"}, {"sha": "b921678b495c2803c0e6063184bd02d0960e398f", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n             }\n             Categorization::StaticItem |\n             Categorization::Deref(.., mc::UnsafePtr(..)) => {\n-                self.bccx.tcx.mk_region(ty::ReStatic)\n+                self.bccx.tcx.types.re_static\n             }\n             Categorization::Deref(.., mc::BorrowedPtr(_, r)) |\n             Categorization::Deref(.., mc::Implicit(_, r)) => {"}, {"sha": "147d6558e19cc31a12842f4af039d9d046e77c81", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -343,12 +343,12 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn t_rptr_static(&self) -> Ty<'tcx> {\n-        self.infcx.tcx.mk_imm_ref(self.infcx.tcx.mk_region(ty::ReStatic),\n+        self.infcx.tcx.mk_imm_ref(self.infcx.tcx.types.re_static,\n                                   self.tcx().types.isize)\n     }\n \n     pub fn t_rptr_empty(&self) -> Ty<'tcx> {\n-        self.infcx.tcx.mk_imm_ref(self.infcx.tcx.mk_region(ty::ReEmpty),\n+        self.infcx.tcx.mk_imm_ref(self.infcx.tcx.types.re_empty,\n                                   self.tcx().types.isize)\n     }\n "}, {"sha": "0833342927fec9dbbb31bab1164aa70a44080b58", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -280,7 +280,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     assert!(ty.is_slice());\n \n                     let array_ty = tcx.mk_array(tcx.types.u8, bytes.len());\n-                    let array_ref = tcx.mk_imm_ref(tcx.mk_region(ty::ReStatic), array_ty);\n+                    let array_ref = tcx.mk_imm_ref(tcx.types.re_static, array_ty);\n                     let array = self.literal_operand(test.span, array_ref, Literal::Value {\n                         value: value.clone()\n                     });"}, {"sha": "7f7377e5ffe3f78a2d9c4cf7f7f161dcef2bb6b8", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -308,10 +308,9 @@ fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n         Adjustment::Deref => Operand::Consume(rcvr_l.deref()),\n         Adjustment::RefMut => {\n             // let rcvr = &mut rcvr;\n-            let re_erased = tcx.mk_region(ty::ReErased);\n             let ref_rcvr = local_decls.push(temp_decl(\n                 Mutability::Not,\n-                tcx.mk_ref(re_erased, ty::TypeAndMut {\n+                tcx.mk_ref(tcx.types.re_erased, ty::TypeAndMut {\n                     ty: sig.inputs()[0],\n                     mutbl: hir::Mutability::MutMutable\n                 }),\n@@ -321,7 +320,7 @@ fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n                 source_info: source_info,\n                 kind: StatementKind::Assign(\n                     Lvalue::Local(ref_rcvr),\n-                    Rvalue::Ref(re_erased, BorrowKind::Mut, rcvr_l)\n+                    Rvalue::Ref(tcx.types.re_erased, BorrowKind::Mut, rcvr_l)\n                 )\n             });\n             Operand::Consume(Lvalue::Local(ref_rcvr))"}, {"sha": "5cc5cf297936d3606a90a5f62bd4e7155608c860", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -13,7 +13,7 @@\n //! care erasing regions all over the place.\n \n use rustc::ty::subst::Substs;\n-use rustc::ty::{Ty, TyCtxt, ReErased, ClosureSubsts};\n+use rustc::ty::{Ty, TyCtxt, ClosureSubsts};\n use rustc::mir::*;\n use rustc::mir::visit::MutVisitor;\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n@@ -43,7 +43,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n     fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) {\n         match *rvalue {\n             Rvalue::Ref(ref mut r, _, _) => {\n-                *r = self.tcx.mk_region(ReErased);\n+                *r = self.tcx.types.re_erased;\n             }\n             Rvalue::Use(..) |\n             Rvalue::Repeat(..) |"}, {"sha": "45bdff9195c4f10924987830f7f12e6810f778f6", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -497,7 +497,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 let dest = if dest_needs_borrow(&destination.0) {\n                     debug!(\"Creating temp for return destination\");\n                     let dest = Rvalue::Ref(\n-                        self.tcx.mk_region(ty::ReErased),\n+                        self.tcx.types.re_erased,\n                         BorrowKind::Mut,\n                         destination.0);\n \n@@ -582,7 +582,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n     fn cast_box_free_arg(&self, arg: Lvalue<'tcx>, ptr_ty: Ty<'tcx>,\n                          callsite: &CallSite<'tcx>, caller_mir: &mut Mir<'tcx>) -> Operand<'tcx> {\n         let arg = Rvalue::Ref(\n-            self.tcx.mk_region(ty::ReErased),\n+            self.tcx.types.re_erased,\n             BorrowKind::Mut,\n             arg.deref());\n "}, {"sha": "9d7c7ec63cfc57afbc32eccfa5dfb5cee46185c2", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -506,8 +506,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         let ty = self.lvalue_ty(self.lvalue);\n         let substs = tcx.mk_substs(iter::once(Kind::from(ty)));\n \n-        let re_erased = tcx.mk_region(ty::ReErased);\n-        let ref_ty = tcx.mk_ref(re_erased, ty::TypeAndMut {\n+        let ref_ty = tcx.mk_ref(tcx.types.re_erased, ty::TypeAndMut {\n             ty: ty,\n             mutbl: hir::Mutability::MutMutable\n         });\n@@ -519,7 +518,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                 source_info: self.source_info,\n                 kind: StatementKind::Assign(\n                     Lvalue::Local(ref_lvalue),\n-                    Rvalue::Ref(re_erased, BorrowKind::Mut, self.lvalue.clone())\n+                    Rvalue::Ref(tcx.types.re_erased, BorrowKind::Mut, self.lvalue.clone())\n                 )\n             }],\n             terminator: Some(Terminator {"}, {"sha": "e938913a3f11774ed74d664595c2ba4d6a811363", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -708,7 +708,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                 let tr_lvalue = self.const_lvalue(lvalue, span)?;\n \n                 let ty = tr_lvalue.ty;\n-                let ref_ty = tcx.mk_ref(tcx.mk_region(ty::ReErased),\n+                let ref_ty = tcx.mk_ref(tcx.types.re_erased,\n                     ty::TypeAndMut { ty: ty, mutbl: bk.to_mutbl_lossy() });\n \n                 let base = match tr_lvalue.base {"}, {"sha": "b8e9a490b0e7cffa36b0ce40812131c19ebd8382", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -329,7 +329,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n \n                 let ty = tr_lvalue.ty.to_ty(bcx.tcx());\n                 let ref_ty = bcx.tcx().mk_ref(\n-                    bcx.tcx().mk_region(ty::ReErased),\n+                    bcx.tcx().types.re_erased,\n                     ty::TypeAndMut { ty: ty, mutbl: bk.to_mutbl_lossy() }\n                 );\n "}, {"sha": "5137ae6ff42227f20cbb7dc21a14b7d925a54403", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -109,7 +109,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let tcx = self.tcx();\n         let r = match tcx.named_region_map.defs.get(&lifetime.id) {\n             Some(&rl::Region::Static) => {\n-                tcx.mk_region(ty::ReStatic)\n+                tcx.types.re_static\n             }\n \n             Some(&rl::Region::LateBound(debruijn, id)) => {\n@@ -171,7 +171,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                     .emit();\n \n                 return Substs::for_item(tcx, def_id, |_, _| {\n-                    tcx.mk_region(ty::ReStatic)\n+                    tcx.types.re_static\n                 }, |_, _| {\n                     tcx.types.err\n                 });\n@@ -254,7 +254,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             if let Some(lifetime) = lifetimes.get(i) {\n                 self.ast_region_to_region(lifetime, Some(def))\n             } else {\n-                tcx.mk_region(ty::ReStatic)\n+                tcx.types.re_static\n             }\n         }, |def, substs| {\n             let i = def.index as usize;\n@@ -715,7 +715,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                         span_err!(tcx.sess, span, E0228,\n                                   \"the lifetime bound for this object type cannot be deduced \\\n                                    from context; please supply an explicit bound\");\n-                        tcx.mk_region(ty::ReStatic)\n+                        tcx.types.re_static\n                     })\n                 }\n             })\n@@ -1357,7 +1357,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         // If any of the derived region bounds are 'static, that is always\n         // the best choice.\n         if derived_region_bounds.iter().any(|&r| ty::ReStatic == *r) {\n-            return Some(tcx.mk_region(ty::ReStatic));\n+            return Some(tcx.types.re_static);\n         }\n \n         // Determine whether there is exactly one unique region in the set"}, {"sha": "1086773041c9351624a7fa86d249781634872bcc", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         let expected_ty = self.structurally_resolved_type(pat.span, expected);\n                         if let ty::TyRef(_, mt) = expected_ty.sty {\n                             if let ty::TySlice(_) = mt.ty.sty {\n-                                pat_ty = tcx.mk_imm_ref(tcx.mk_region(ty::ReStatic),\n+                                pat_ty = tcx.mk_imm_ref(tcx.types.re_static,\n                                                          tcx.mk_slice(tcx.types.u8))\n                             }\n                         }"}, {"sha": "09bfe45f5404bd77515bcb5b233bf7eb5c982c7d", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -626,7 +626,7 @@ fn revise_self_ty<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n             let impl_self_orig = self_substs.region_for_def(def);\n             let r = if let ty::Region::ReEarlyBound(ref ebr) = *impl_self_orig {\n                 if impl_bindings.region_param(ebr).pure_wrt_drop {\n-                    tcx.mk_region(ty::ReStatic)\n+                    tcx.types.re_static\n                 } else {\n                     r_orig\n                 }"}, {"sha": "bf7649242fa71c918b35bd782469c3bb21984b48", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -36,7 +36,7 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let def_id = tcx.hir.local_def_id(it.id);\n \n     let substs = Substs::for_item(tcx, def_id,\n-                                  |_, _| tcx.mk_region(ty::ReErased),\n+                                  |_, _| tcx.types.re_erased,\n                                   |def, _| tcx.mk_param_from_def(def));\n \n     let fty = tcx.mk_fn_def(def_id, substs, ty::Binder(tcx.mk_fn_sig("}, {"sha": "80f9372eb54c40e76d12ba6741c23e209d52b363", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -1063,7 +1063,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n         // In general, during probing we erase regions. See\n         // `impl_self_ty()` for an explanation.\n-        let region = tcx.mk_region(ty::ReErased);\n+        let region = tcx.types.re_erased;\n \n         // Search through mutabilities in order to find one where pick works:\n         [hir::MutImmutable, hir::MutMutable]\n@@ -1325,7 +1325,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 } else {\n                     // In general, during probe we erase regions. See\n                     // `impl_self_ty()` for an explanation.\n-                    self.tcx.mk_region(ty::ReErased)\n+                    self.tcx.types.re_erased\n                 }\n             }, |def, cur_substs| {\n                 let i = def.index as usize;\n@@ -1345,7 +1345,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n         let substs = Substs::for_item(self.tcx,\n                                       impl_def_id,\n-                                      |_, _| self.tcx.mk_region(ty::ReErased),\n+                                      |_, _| self.tcx.types.re_erased,\n                                       |_, _| self.next_ty_var(\n                                         TypeVariableOrigin::SubstitutionPlaceholder(\n                                             self.tcx.def_span(impl_def_id))));"}, {"sha": "098e8c53a52c12c89582022d77d05da0afcaebd4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -1954,7 +1954,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         //\n         // FIXME(#27579) all uses of this should be migrated to register_wf_obligation eventually\n         let cause = traits::ObligationCause::new(span, self.body_id, code);\n-        self.register_region_obligation(ty, self.tcx.mk_region(ty::ReEmpty), cause);\n+        self.register_region_obligation(ty, self.tcx.types.re_empty, cause);\n     }\n \n     /// Registers obligations that all types appearing in `substs` are well-formed.\n@@ -2513,7 +2513,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match lit.node {\n             ast::LitKind::Str(..) => tcx.mk_static_str(),\n             ast::LitKind::ByteStr(ref v) => {\n-                tcx.mk_imm_ref(tcx.mk_region(ty::ReStatic),\n+                tcx.mk_imm_ref(tcx.types.re_static,\n                                 tcx.mk_array(tcx.types.u8, v.len()))\n             }\n             ast::LitKind::Byte(_) => tcx.types.u8,"}, {"sha": "35b2e8f8afcb8eabce30c843e995b83a8f7b449f", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1377a4f474fc76abc798110b7fb4f53d54c2e2b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "patch": "@@ -288,8 +288,8 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n             let outside_ty = gcx.fold_regions(&inside_ty, &mut false, |r, _| {\n                 match *r {\n                     // 'static is valid everywhere.\n-                    ty::ReStatic |\n-                    ty::ReEmpty => gcx.mk_region(*r),\n+                    ty::ReStatic => gcx.types.re_static,\n+                    ty::ReEmpty => gcx.types.re_empty,\n \n                     // Free regions that come from early-bound regions are valid.\n                     ty::ReFree(ty::FreeRegion {\n@@ -307,7 +307,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                         span_err!(self.tcx().sess, span, E0564,\n                                   \"only named lifetimes are allowed in `impl Trait`, \\\n                                    but `{}` was found in the type `{}`\", r, inside_ty);\n-                        gcx.mk_region(ty::ReStatic)\n+                        gcx.types.re_static\n                     }\n \n                     ty::ReVar(_) |\n@@ -526,7 +526,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Resolver<'cx, 'gcx, 'tcx> {\n         match self.infcx.fully_resolve(&r) {\n             Ok(r) => r,\n             Err(_) => {\n-                self.tcx.mk_region(ty::ReStatic)\n+                self.tcx.types.re_static\n             }\n         }\n     }"}]}