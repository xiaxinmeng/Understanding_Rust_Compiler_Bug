{"sha": "aa4c19b6abb86d93077fa63d3f0f893f8a3cb355", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNGMxOWI2YWJiODZkOTMwNzdmYTYzZDNmMGY4OTNmOGEzY2IzNTU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-13T05:39:32Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-14T03:07:11Z"}, "message": "librustc: Allow path-qualified constants in patterns", "tree": {"sha": "7208ef50da168e1f7d8eb126cc305f3b3759eb9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7208ef50da168e1f7d8eb126cc305f3b3759eb9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa4c19b6abb86d93077fa63d3f0f893f8a3cb355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4c19b6abb86d93077fa63d3f0f893f8a3cb355", "html_url": "https://github.com/rust-lang/rust/commit/aa4c19b6abb86d93077fa63d3f0f893f8a3cb355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa4c19b6abb86d93077fa63d3f0f893f8a3cb355/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ccc6e0a57660aaf84c70208bb98c5eb4285de3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ccc6e0a57660aaf84c70208bb98c5eb4285de3a", "html_url": "https://github.com/rust-lang/rust/commit/2ccc6e0a57660aaf84c70208bb98c5eb4285de3a"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "16f3db6a00ebcfab45e735205ada7a7a018a727b", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/aa4c19b6abb86d93077fa63d3f0f893f8a3cb355/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa4c19b6abb86d93077fa63d3f0f893f8a3cb355/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=aa4c19b6abb86d93077fa63d3f0f893f8a3cb355", "patch": "@@ -4290,17 +4290,24 @@ pub impl Resolver {\n                     }\n                 }\n \n-                pat_ident(_, path, _) | pat_enum(path, _) => {\n-                    // These two must be enum variants or structs.\n+                pat_ident(binding_mode, path, _) => {\n+                    // This must be an enum variant, struct, or constant.\n                     match self.resolve_path(path, ValueNS, false, visitor) {\n                         Some(def @ def_variant(*)) |\n                                 Some(def @ def_struct(*)) => {\n                             self.record_def(pattern.id, def);\n                         }\n+                        Some(def @ def_const(*)) => {\n+                            self.enforce_default_binding_mode(\n+                                pattern,\n+                                binding_mode,\n+                                \"a constant\");\n+                            self.record_def(pattern.id, def);\n+                        }\n                         Some(_) => {\n                             self.session.span_err(\n                                 path.span,\n-                                fmt!(\"not an enum variant: %s\",\n+                                fmt!(\"not an enum variant or constant: %s\",\n                                      *self.session.str_of(\n                                          *path.idents.last())));\n                         }\n@@ -4316,6 +4323,33 @@ pub impl Resolver {\n                     }\n                 }\n \n+                pat_enum(path, _) => {\n+                    // This must be an enum variant or struct.\n+                    match self.resolve_path(path, ValueNS, false, visitor) {\n+                        Some(def @ def_variant(*)) |\n+                                Some(def @ def_struct(*)) => {\n+                            self.record_def(pattern.id, def);\n+                        }\n+                        Some(_) => {\n+                            self.session.span_err(\n+                                path.span,\n+                                fmt!(\"not an enum variant or struct: %s\",\n+                                     *self.session.str_of(\n+                                         *path.idents.last())));\n+                        }\n+                        None => {\n+                            self.session.span_err(path.span,\n+                                                  ~\"unresolved enum variant \\\n+                                                    or struct\");\n+                        }\n+                    }\n+\n+                    // Check the types in the path pattern.\n+                    for path.types.each |ty| {\n+                        self.resolve_type(*ty, visitor);\n+                    }\n+                }\n+\n                 pat_lit(expr) => {\n                     self.resolve_expr(expr, visitor);\n                 }"}]}