{"sha": "c9b21b0ea22d6caa1d0caa9e68ee22f72729229d", "node_id": "C_kwDOAAsO6NoAKGM5YjIxYjBlYTIyZDZjYWExZDBjYWE5ZTY4ZWUyMmY3MjcyOTIyOWQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-28T15:30:39Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-28T15:35:27Z"}, "message": "orphan check: remove const generics fixme", "tree": {"sha": "4c0e6e9764f6f12f0f14165649004af604d7877e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c0e6e9764f6f12f0f14165649004af604d7877e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9b21b0ea22d6caa1d0caa9e68ee22f72729229d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b21b0ea22d6caa1d0caa9e68ee22f72729229d", "html_url": "https://github.com/rust-lang/rust/commit/c9b21b0ea22d6caa1d0caa9e68ee22f72729229d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9b21b0ea22d6caa1d0caa9e68ee22f72729229d/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05e678ccca974a8d0c26991083fb4cf8fff84e74", "url": "https://api.github.com/repos/rust-lang/rust/commits/05e678ccca974a8d0c26991083fb4cf8fff84e74", "html_url": "https://github.com/rust-lang/rust/commit/05e678ccca974a8d0c26991083fb4cf8fff84e74"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "da17a9c3da6b513a292417fee46c4c95347624d5", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9b21b0ea22d6caa1d0caa9e68ee22f72729229d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b21b0ea22d6caa1d0caa9e68ee22f72729229d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=c9b21b0ea22d6caa1d0caa9e68ee22f72729229d", "patch": "@@ -746,8 +746,17 @@ impl<'tcx> TypeVisitor<'tcx> for OrphanChecker<'tcx> {\n         result\n     }\n \n-    // FIXME: Constants should participate in orphan checking.\n     fn visit_const(&mut self, _c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        // All possible values for a constant parameter already exist\n+        // in the crate defining the trait, so they are always non-local.\n+        //\n+        // Because there's no way to have an impl where the first local\n+        // generic argument is a constant, we also don't have to fail\n+        // the orphan check when encountering a parameter or a generic constant.\n+        //\n+        // This means that we can completely ignore constants during the orphan check.\n+        //\n+        // See `src/test/ui/coherence/const-generics-orphan-check-ok.rs` for examples.\n         ControlFlow::CONTINUE\n     }\n }"}, {"sha": "a44eb14f8e4cf53dd74bb184c25a63827f9a7dc8", "filename": "src/test/ui/coherence/auxiliary/trait-with-const-param.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9b21b0ea22d6caa1d0caa9e68ee22f72729229d/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Ftrait-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b21b0ea22d6caa1d0caa9e68ee22f72729229d/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Ftrait-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Ftrait-with-const-param.rs?ref=c9b21b0ea22d6caa1d0caa9e68ee22f72729229d", "patch": "@@ -0,0 +1 @@\n+pub trait Trait<const N: usize, T> {}"}, {"sha": "217e8aed234b11efee6c131ec050d16d8f42eca9", "filename": "src/test/ui/coherence/const-generics-orphan-check-ok.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c9b21b0ea22d6caa1d0caa9e68ee22f72729229d/src%2Ftest%2Fui%2Fcoherence%2Fconst-generics-orphan-check-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b21b0ea22d6caa1d0caa9e68ee22f72729229d/src%2Ftest%2Fui%2Fcoherence%2Fconst-generics-orphan-check-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fconst-generics-orphan-check-ok.rs?ref=c9b21b0ea22d6caa1d0caa9e68ee22f72729229d", "patch": "@@ -0,0 +1,28 @@\n+// check-pass\n+// aux-build:trait-with-const-param.rs\n+extern crate trait_with_const_param;\n+use trait_with_const_param::*;\n+\n+// Trivial case, const param after local type.\n+struct Local1;\n+impl<const N: usize, T> Trait<N, T> for Local1 {}\n+\n+// Concrete consts behave the same as foreign types,\n+// so this also trivially works.\n+impl Trait<3, Local1> for i32 {}\n+\n+// This case isn't as trivial as we would forbid type\n+// parameters here, we do allow const parameters though.\n+//\n+// The reason that type parameters are forbidden for\n+// `impl<T> Trait<T, LocalInA> for i32 {}` is that another\n+// downstream crate can add `impl<T> Trait<LocalInB, T> for i32`.\n+// As these two impls would overlap we forbid any impls which\n+// have a type parameter in front of a local type.\n+//\n+// With const parameters this issue does not exist as there are no\n+// constants local to another downstream crate.\n+struct Local2;\n+impl<const N: usize> Trait<N, Local2> for i32 {}\n+\n+fn main() {}"}]}