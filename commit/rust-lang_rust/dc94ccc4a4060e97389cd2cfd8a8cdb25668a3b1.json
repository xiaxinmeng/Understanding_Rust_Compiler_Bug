{"sha": "dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjOTRjY2M0YTQwNjBlOTczODljZDJjZmQ4YThjZGIyNTY2OGEzYjE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-08T20:26:06Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-08T20:26:15Z"}, "message": "More work on reflect, only missing enum and class substructures.", "tree": {"sha": "92330428401a84979b04a4baac03837157f99002", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92330428401a84979b04a4baac03837157f99002"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1", "html_url": "https://github.com/rust-lang/rust/commit/dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a74545e9717ab0e85ab154e06810007b1de602f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a74545e9717ab0e85ab154e06810007b1de602f", "html_url": "https://github.com/rust-lang/rust/commit/7a74545e9717ab0e85ab154e06810007b1de602f"}], "stats": {"total": 192, "additions": 183, "deletions": 9}, "files": [{"sha": "cac3b4f5416bb176279dd797dc5e0abed135d4fa", "filename": "src/rustc/front/intrinsic.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1/src%2Frustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1/src%2Frustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fintrinsic.rs?ref=dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1", "patch": "@@ -54,6 +54,43 @@ mod intrinsic {\n         fn visit_leave_evec_slice(mtbl: uint) -> bool;\n         fn visit_enter_evec_fixed(mtbl: uint, sz: uint) -> bool;\n         fn visit_leave_evec_fixed(mtbl: uint, sz: uint) -> bool;\n+\n+        fn visit_enter_rec(n_fields: uint) -> bool;\n+        fn visit_enter_rec_field(mtbl: uint, i: uint\n+                                 /*, name: str/& */) -> bool;\n+        fn visit_leave_rec_field(mtbl: uint, i: uint\n+                                 /*, name: str/& */) -> bool;\n+        fn visit_leave_rec(n_fields: uint) -> bool;\n+\n+        fn visit_enter_tup(n_fields: uint) -> bool;\n+        fn visit_enter_tup_field(i: uint) -> bool;\n+        fn visit_leave_tup_field(i: uint) -> bool;\n+        fn visit_leave_tup(n_fields: uint) -> bool;\n+\n+        fn visit_enter_fn(purity: uint, proto: uint,\n+                          n_inputs: uint, retstyle: uint) -> bool;\n+        fn visit_enter_fn_input(i: uint, mode: uint) -> bool;\n+        fn visit_leave_fn_input(i: uint, mode: uint) -> bool;\n+        fn visit_enter_fn_output(retstyle: uint) -> bool;\n+        fn visit_leave_fn_output(retstyle: uint) -> bool;\n+        fn visit_leave_fn(purity: uint, proto: uint,\n+                          n_inputs: uint, retstyle: uint) -> bool;\n+\n+        fn visit_class() -> bool;\n+        fn visit_enum() -> bool;\n+\n+        fn visit_iface() -> bool;\n+        fn visit_enter_res() -> bool;\n+        fn visit_leave_res() -> bool;\n+        fn visit_var() -> bool;\n+        fn visit_var_integral() -> bool;\n+        fn visit_param(i: uint) -> bool;\n+        fn visit_self() -> bool;\n+        fn visit_type() -> bool;\n+        fn visit_opaque_box() -> bool;\n+        fn visit_enter_constr() -> bool;\n+        fn visit_leave_constr() -> bool;\n+        fn visit_closure_ptr(ck: uint) -> bool;\n     }\n \n     #[abi = \"rust-intrinsic\"]"}, {"sha": "da650eea7927d287dc1072374fe5760f80ea5f3d", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1", "patch": "@@ -815,6 +815,11 @@ fn C_cstr(cx: @crate_ctxt, s: str) -> ValueRef {\n     ret g;\n }\n \n+fn C_estr_slice(cx: @crate_ctxt, s: str) -> ValueRef {\n+    let cs = llvm::LLVMConstPointerCast(C_cstr(cx, s), T_ptr(T_i8()));\n+    C_struct([cs, C_uint(cx, str::len(s) + 1u /* +1 for null */)])\n+}\n+\n // Returns a Plain Old LLVM String:\n fn C_postr(s: str) -> ValueRef {\n     ret str::as_c_str(s) {|buf|"}, {"sha": "12b1d28dbc90fd47e540d1dcdb4bd96e93cdbd15", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 103, "deletions": 7, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1", "patch": "@@ -42,12 +42,15 @@ impl methods for reflector {\n                              abi::tydesc_field_visit_glue);\n     }\n \n+    fn bracketed_t(bracket_name: str, t: ty::t, extra: [ValueRef]) {\n+        self.visit(\"enter_\" + bracket_name, extra);\n+        self.visit_tydesc(t);\n+        self.visit(\"leave_\" + bracket_name, extra);\n+    }\n+\n     fn bracketed_mt(bracket_name: str, mt: ty::mt, extra: [ValueRef]) {\n-        self.visit(\"enter_\" + bracket_name,\n-                   [self.c_uint(mt.mutbl as uint)] + extra);\n-        self.visit_tydesc(mt.ty);\n-        self.visit(\"leave_\" + bracket_name,\n-                   [self.c_uint(mt.mutbl as uint)] + extra);\n+        self.bracketed_t(bracket_name, mt.ty,\n+                         [self.c_uint(mt.mutbl as uint)] + extra);\n     }\n \n     fn vstore_name_and_extra(vstore: ty::vstore,\n@@ -67,6 +70,10 @@ impl methods for reflector {\n     // Entrypoint\n     fn visit_ty(t: ty::t) {\n \n+        let bcx = self.bcx;\n+        #debug(\"reflect::visit_ty %s\",\n+               ty_to_str(bcx.ccx().tcx, t));\n+\n         alt ty::get(t).struct {\n           ty::ty_bot { self.leaf(\"bot\") }\n           ty::ty_nil { self.leaf(\"nil\") }\n@@ -103,8 +110,97 @@ impl methods for reflector {\n           ty::ty_ptr(mt) { self.bracketed_mt(\"ptr\", mt, []) }\n           ty::ty_rptr(_, mt) { self.bracketed_mt(\"rptr\", mt, []) }\n \n-          // FIXME: finish these.\n-          _ { self.visit(\"bot\", []) }\n+          ty::ty_rec(fields) {\n+            self.visit(\"enter_rec\", [self.c_uint(vec::len(fields))]);\n+            for fields.eachi {|i, field|\n+                self.bracketed_mt(\"rec_field\", field.mt,\n+                                  [self.c_uint(i)\n+                                   /*\n+                                   FIXME: doesn't work presently.\n+                                   C_estr_slice(self.bcx.ccx(),\n+                                                field.ident)\n+                                   */\n+                                  ]);\n+            }\n+            self.visit(\"leave_rec\", [self.c_uint(vec::len(fields))]);\n+          }\n+\n+          ty::ty_tup(tys) {\n+            self.visit(\"enter_tup\", [self.c_uint(vec::len(tys))]);\n+            for tys.eachi {|i, t|\n+                self.bracketed_t(\"tup_field\", t, [self.c_uint(i)]);\n+            }\n+            self.visit(\"leave_tup\", [self.c_uint(vec::len(tys))]);\n+          }\n+\n+          // FIXME: fetch constants out of intrinsic:: for the numbers.\n+          ty::ty_fn(fty) {\n+            let pureval = alt fty.purity {\n+              ast::pure_fn { 0u }\n+              ast::unsafe_fn { 1u }\n+              ast::impure_fn { 2u }\n+              ast::crust_fn { 3u }\n+            };\n+            let protoval = alt fty.proto {\n+              ast::proto_bare { 0u }\n+              ast::proto_any { 1u }\n+              ast::proto_uniq { 2u }\n+              ast::proto_box { 3u }\n+              ast::proto_block { 4u }\n+            };\n+            let retval = alt fty.ret_style {\n+              ast::noreturn { 0u }\n+              ast::return_val { 1u }\n+            };\n+            let extra = [self.c_uint(pureval),\n+                         self.c_uint(protoval),\n+                         self.c_uint(vec::len(fty.inputs)),\n+                         self.c_uint(retval)];\n+            self.visit(\"enter_fn\", extra);\n+            for fty.inputs.eachi {|i, arg|\n+                let modeval = alt arg.mode {\n+                  ast::infer(_) { 0u }\n+                  ast::expl(e) {\n+                    alt e {\n+                      ast::by_ref { 1u }\n+                      ast::by_val { 2u }\n+                      ast::by_mutbl_ref { 3u }\n+                      ast::by_move { 4u }\n+                      ast::by_copy { 5u }\n+                    }\n+                  }\n+                };\n+                self.bracketed_t(\"fn_input\", arg.ty,\n+                                 [self.c_uint(i),\n+                                  self.c_uint(modeval)]);\n+            }\n+            self.bracketed_t(\"fn_output\", fty.output,\n+                             [self.c_uint(retval)]);\n+            self.visit(\"leave_fn\", extra);\n+          }\n+\n+          // FIXME: these need substructure-walks\n+          ty::ty_class(_, _) { self.leaf(\"class\") }\n+          ty::ty_enum(_, _) { self.leaf(\"enum\") }\n+\n+          // Miscallaneous extra types\n+          ty::ty_iface(_, _) { self.leaf(\"iface\") }\n+          ty::ty_res(_, t, _) { self.bracketed_t(\"res\", t, []) }\n+          ty::ty_var(_) { self.leaf(\"var\") }\n+          ty::ty_var_integral(_) { self.leaf(\"var_integral\") }\n+          ty::ty_param(n, _) { self.visit(\"param\", [self.c_uint(n)]) }\n+          ty::ty_self { self.leaf(\"self\") }\n+          ty::ty_type { self.leaf(\"type\") }\n+          ty::ty_opaque_box { self.leaf(\"opaque_box\") }\n+          ty::ty_constr(t, _) { self.bracketed_t(\"constr\", t, []) }\n+          ty::ty_opaque_closure_ptr(ck) {\n+            let ckval = alt ck {\n+              ty::ck_block { 0u }\n+              ty::ck_box { 1u }\n+              ty::ck_uniq { 2u }\n+            };\n+            self.visit(\"closure_ptr\", [self.c_uint(ckval)])\n+          }\n         }\n     }\n }"}, {"sha": "fa21927d743283cc0e13fdddba9f294e451628d9", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1", "patch": "@@ -276,8 +276,7 @@ fn trans_estr(bcx: block, s: str, vstore: ast::vstore,\n       ast::vstore_slice(_) {\n         // \"hello\"  =>  (*i8, 6u) in llvm\n         #debug(\"trans_estr: slice '%s'\", s);\n-        let cs = PointerCast(bcx, C_cstr(ccx, s), T_ptr(T_i8()));\n-        C_struct([cs, C_uint(ccx, str::len(s) + 1u /* +1 for null */)])\n+        C_estr_slice(ccx, s)\n       }\n \n       ast::vstore_uniq {"}, {"sha": "599e8fd99b7d81269e3be6b639d1cc0fc047a8cf", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=dc94ccc4a4060e97389cd2cfd8a8cdb25668a3b1", "patch": "@@ -79,6 +79,43 @@ impl of intrinsic::ty_visitor for my_visitor {\n     fn visit_leave_evec_slice(_mtbl: uint) -> bool { true }\n     fn visit_enter_evec_fixed(_mtbl: uint, _sz: uint) -> bool { true }\n     fn visit_leave_evec_fixed(_mtbl: uint, _sz: uint) -> bool { true }\n+\n+    fn visit_enter_rec(_n_fields: uint) -> bool { true }\n+    fn visit_enter_rec_field(_mtbl: uint, _i: uint\n+                             /*,name: str/&*/) -> bool { true }\n+    fn visit_leave_rec_field(_mtbl: uint, _i: uint\n+                             /*,name: str/&*/) -> bool { true }\n+    fn visit_leave_rec(_n_fields: uint) -> bool { true }\n+\n+    fn visit_enter_tup(_n_fields: uint) -> bool { true }\n+    fn visit_enter_tup_field(_i: uint) -> bool { true }\n+    fn visit_leave_tup_field(_i: uint) -> bool { true }\n+    fn visit_leave_tup(_n_fields: uint) -> bool { true }\n+\n+    fn visit_enter_fn(_purity: uint, _proto: uint,\n+                      _n_inputs: uint, _retstyle: uint) -> bool { true }\n+    fn visit_enter_fn_input(_i: uint, _mode: uint) -> bool { true }\n+    fn visit_leave_fn_input(_i: uint, _mode: uint) -> bool { true }\n+    fn visit_enter_fn_output(_retstyle: uint) -> bool { true }\n+    fn visit_leave_fn_output(_retstyle: uint) -> bool { true }\n+    fn visit_leave_fn(_purity: uint, _proto: uint,\n+                      _n_inputs: uint, _retstyle: uint) -> bool { true }\n+\n+    fn visit_class() -> bool { true }\n+    fn visit_enum() -> bool { true }\n+\n+    fn visit_iface() -> bool { true }\n+    fn visit_enter_res() -> bool { true }\n+    fn visit_leave_res() -> bool { true }\n+    fn visit_var() -> bool { true }\n+    fn visit_var_integral() -> bool { true }\n+    fn visit_param(_i: uint) -> bool { true }\n+    fn visit_self() -> bool { true }\n+    fn visit_type() -> bool { true }\n+    fn visit_opaque_box() -> bool { true }\n+    fn visit_enter_constr() -> bool { true }\n+    fn visit_leave_constr() -> bool { true }\n+    fn visit_closure_ptr(_ck: uint) -> bool { true }\n }\n \n fn main() {"}]}