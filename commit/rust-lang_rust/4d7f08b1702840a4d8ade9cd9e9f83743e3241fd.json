{"sha": "4d7f08b1702840a4d8ade9cd9e9f83743e3241fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkN2YwOGIxNzAyODQwYTRkOGFkZTljZDllOWY4Mzc0M2UzMjQxZmQ=", "commit": {"author": {"name": "Levente Kurusa", "email": "lkurusa@acm.org", "date": "2018-10-14T22:00:53Z"}, "committer": {"name": "Levente Kurusa", "email": "lkurusa@acm.org", "date": "2018-10-17T05:40:44Z"}, "message": "rustc: improve E0669 span\n\nE0669 refers to a constraint that cannot be coerced into a single LLVM\nvalue, unfortunately right now this uses the Span for the entire inline\nassembly statement, which is less than ideal.\n\nThis commit preserves the Span from HIR, which lets us emit the error\nusing the Span for the operand itself in MIR.\n\nSigned-off-by: Levente Kurusa <lkurusa@acm.org>", "tree": {"sha": "0d806e1cba57888518f95bcac5903bb328bf8f31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d806e1cba57888518f95bcac5903bb328bf8f31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE9aWNXk3bBSVLHV6MKNaxXmtJEmkFAlvGy14ACgkQKNaxXmtJ\nEmnXDwf+PoFG0UlEt1rTp/y7k+0x0b6K0q91gGnq3NQWTyRMz62TAz9aXub7P6mr\niAODKHyGOQyuXadFCyf4J6UMG8R/+6idOJfk5RHtQNM4uNptT7AUqkF/447WLZuh\n80OaMT4A0FbPq55uIaEhwoqqYON8YJlN/UcrZ6caOqlzKqceTRJQE5eYVU7faKwo\nsXm7u8PdI/vkyQ9gokZ4pKoSjrAX2dl6bdKiCJlNRx//NrE2pXAn6eiZBkjIJZ8f\nBH8pPQfjkIpJMFkJP9Ro1nAbWakfZ+wMTUWYDj01+6fnHdDFkeBJ5C8mcLWzVT7A\nKmqTpK3+vrsEPB/AJp4Ipe6BgMhzew==\n=/HpC\n-----END PGP SIGNATURE-----", "payload": "tree 0d806e1cba57888518f95bcac5903bb328bf8f31\nparent 567557f630693d47fd21151ff1fdbc430e330a13\nauthor Levente Kurusa <lkurusa@acm.org> 1539554453 +0200\ncommitter Levente Kurusa <lkurusa@acm.org> 1539754844 +0200\n\nrustc: improve E0669 span\n\nE0669 refers to a constraint that cannot be coerced into a single LLVM\nvalue, unfortunately right now this uses the Span for the entire inline\nassembly statement, which is less than ideal.\n\nThis commit preserves the Span from HIR, which lets us emit the error\nusing the Span for the operand itself in MIR.\n\nSigned-off-by: Levente Kurusa <lkurusa@acm.org>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd", "html_url": "https://github.com/rust-lang/rust/commit/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd/comments", "author": {"login": "levex", "id": 849140, "node_id": "MDQ6VXNlcjg0OTE0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/849140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/levex", "html_url": "https://github.com/levex", "followers_url": "https://api.github.com/users/levex/followers", "following_url": "https://api.github.com/users/levex/following{/other_user}", "gists_url": "https://api.github.com/users/levex/gists{/gist_id}", "starred_url": "https://api.github.com/users/levex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/levex/subscriptions", "organizations_url": "https://api.github.com/users/levex/orgs", "repos_url": "https://api.github.com/users/levex/repos", "events_url": "https://api.github.com/users/levex/events{/privacy}", "received_events_url": "https://api.github.com/users/levex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "levex", "id": 849140, "node_id": "MDQ6VXNlcjg0OTE0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/849140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/levex", "html_url": "https://github.com/levex", "followers_url": "https://api.github.com/users/levex/followers", "following_url": "https://api.github.com/users/levex/following{/other_user}", "gists_url": "https://api.github.com/users/levex/gists{/gist_id}", "starred_url": "https://api.github.com/users/levex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/levex/subscriptions", "organizations_url": "https://api.github.com/users/levex/orgs", "repos_url": "https://api.github.com/users/levex/repos", "events_url": "https://api.github.com/users/levex/events{/privacy}", "received_events_url": "https://api.github.com/users/levex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "567557f630693d47fd21151ff1fdbc430e330a13", "url": "https://api.github.com/repos/rust-lang/rust/commits/567557f630693d47fd21151ff1fdbc430e330a13", "html_url": "https://github.com/rust-lang/rust/commit/567557f630693d47fd21151ff1fdbc430e330a13"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "7f6c5b1a9cecd3fa925f300e184964845c4e8dc5", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4d7f08b1702840a4d8ade9cd9e9f83743e3241fd", "patch": "@@ -1713,7 +1713,7 @@ pub enum StatementKind<'tcx> {\n     InlineAsm {\n         asm: Box<InlineAsm>,\n         outputs: Box<[Place<'tcx>]>,\n-        inputs: Box<[Operand<'tcx>]>,\n+        inputs: Box<[(Span, Operand<'tcx>)]>,\n     },\n \n     /// Assert the given places to be valid inhabitants of their type.  These statements are"}, {"sha": "b9d23caf71c0a9b13a2d89c5f8ca20db2d5fe760", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=4d7f08b1702840a4d8ade9cd9e9f83743e3241fd", "patch": "@@ -383,7 +383,8 @@ macro_rules! make_mir_visitor {\n                         for output in & $($mutability)* outputs[..] {\n                             self.visit_place(output, PlaceContext::AsmOutput, location);\n                         }\n-                        for input in & $($mutability)* inputs[..] {\n+                        for (span, input) in & $($mutability)* inputs[..] {\n+                            self.visit_span(span);\n                             self.visit_operand(input, location);\n                         }\n                     }"}, {"sha": "2a873fb4cbb16d9f2a5948542e13f5d7c30ef56c", "filename": "src/librustc_codegen_llvm/mir/statement.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs?ref=4d7f08b1702840a4d8ade9cd9e9f83743e3241fd", "patch": "@@ -84,18 +84,18 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                 }).collect();\n \n                 let input_vals = inputs.iter()\n-                    .try_fold(Vec::with_capacity(inputs.len()), |mut acc, input| {\n+                    .try_fold(Vec::with_capacity(inputs.len()), |mut acc, (span, input)| {\n                         let op = self.codegen_operand(&bx, input);\n                         if let OperandValue::Immediate(_) = op.val {\n                             acc.push(op.immediate());\n                             Ok(acc)\n                         } else {\n-                            Err(op)\n+                            Err(span)\n                         }\n                 });\n \n-                if input_vals.is_err() {\n-                   span_err!(bx.sess(), statement.source_info.span, E0669,\n+                if let Err(span) = input_vals {\n+                    span_err!(bx.sess(), span.to_owned(), E0669,\n                              \"invalid value for constraint in inline assembly\");\n                 } else {\n                     let input_vals = input_vals.unwrap();"}, {"sha": "ec05f9be1fc7e8dc26031545435672704b72437a", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=4d7f08b1702840a4d8ade9cd9e9f83743e3241fd", "patch": "@@ -565,7 +565,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                         );\n                     }\n                 }\n-                for input in inputs.iter() {\n+                for (_, input) in inputs.iter() {\n                     self.consume_operand(context, (input, span), flow_state);\n                 }\n             }"}, {"sha": "5c2d4788a4cb798367179edbdcfcd486cd6026fb", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=4d7f08b1702840a4d8ade9cd9e9f83743e3241fd", "patch": "@@ -128,7 +128,7 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                         );\n                     }\n                 }\n-                for input in inputs.iter() {\n+                for (_, input) in inputs.iter() {\n                     self.consume_operand(context, input);\n                 }\n             }"}, {"sha": "8f52499124ab7580cb60f7c4fc71c3139fc96840", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=4d7f08b1702840a4d8ade9cd9e9f83743e3241fd", "patch": "@@ -167,8 +167,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     .into_boxed_slice();\n                 let inputs = inputs\n                     .into_iter()\n-                    .map(|input| unpack!(block = this.as_local_operand(block, input)))\n-                    .collect::<Vec<_>>()\n+                    .map(|input| {\n+                        (\n+                            input.span(),\n+                            unpack!(block = this.as_local_operand(block, input)),\n+                        )\n+                    }).collect::<Vec<_>>()\n                     .into_boxed_slice();\n                 this.cfg.push(\n                     block,"}, {"sha": "c64ebb0771f41d741c9b5569308b5f26f1b5543d", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=4d7f08b1702840a4d8ade9cd9e9f83743e3241fd", "patch": "@@ -290,7 +290,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                         self.gather_init(output, InitKind::Deep);\n                     }\n                 }\n-                for input in inputs.iter() {\n+                for (_, input) in inputs.iter() {\n                     self.gather_operand(input);\n                 }\n             }"}, {"sha": "ceef990d1818615f9a46be36ebf7916d149926c0", "filename": "src/test/ui/inline-asm-bad-operand.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr?ref=4d7f08b1702840a4d8ade9cd9e9f83743e3241fd", "patch": "@@ -1,32 +1,32 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:28:9\n+  --> $DIR/inline-asm-bad-operand.rs:28:24\n    |\n LL |         asm!(\"\" :: \"r\"(\"\")); //~ ERROR E0669\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:33:9\n+  --> $DIR/inline-asm-bad-operand.rs:33:32\n    |\n LL |         asm!(\"ret\" : : \"{rdi}\"(target)); //~ ERROR E0669\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                ^^^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:40:14\n+  --> $DIR/inline-asm-bad-operand.rs:40:29\n    |\n LL |     unsafe { asm!(\"\" :: \"i\"(hello)) }; //~ ERROR E0669\n-   |              ^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:48:9\n+  --> $DIR/inline-asm-bad-operand.rs:48:38\n    |\n LL |         asm!(\"movups $1, %xmm0\"::\"m\"(arr)); //~ ERROR E0669\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                      ^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:55:9\n+  --> $DIR/inline-asm-bad-operand.rs:55:32\n    |\n LL |         asm!(\"mov sp, $0\"::\"r\"(addr)); //~ ERROR E0669\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                ^^^^\n \n error: aborting due to 5 previous errors\n "}]}