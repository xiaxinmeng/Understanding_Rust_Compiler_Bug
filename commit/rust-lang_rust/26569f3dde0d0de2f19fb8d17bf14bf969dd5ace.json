{"sha": "26569f3dde0d0de2f19fb8d17bf14bf969dd5ace", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NTY5ZjNkZGUwZDBkZTJmMTlmYjhkMTdiZjE0YmY5NjlkZDVhY2U=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-10-30T20:21:23Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-11-02T06:18:56Z"}, "message": "UI test cleanup: Extract expect_fun_call tests\n\nNote that the new stderr file does not include a `shadow-unrelated`\nerror, because the new UI test file does not use `#![warn(clippy::all)]`", "tree": {"sha": "64cdbde669eba3110dd098ed7150f402ef98cd33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64cdbde669eba3110dd098ed7150f402ef98cd33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26569f3dde0d0de2f19fb8d17bf14bf969dd5ace", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlvb7FAACgkQtvoGpuDi\nZlu2AQ/+NFmhncqwHwoHIot1MF9pbUAoSrd1VpUwNTi4CenbyUBvJv79Mhe/3/+P\nGhYUKCahTksjFOmz+ndMp1hbKOKxr3kZk/+Ej5/R9iG1HFv2x1xt54j8ITuCgyR9\nHvX/io6XH8n1/BzL8MdwPX/sTpKVexRdFgL7MH4C6L5fuuHojQeeFfXqH2Yl8lsz\n/4fzhzYY2wjq4X0N0vYHe72oUUJVCEk8e+14fiwFUZErDOBlpyYirid6PMzCRh2s\nJ16bpxYjwIRaWWcqqZ1tR3irjmrgTFryrlXS/tGcSiFL8e9GhKcSYbJDrAhPAYmV\nPneNXJuSltBvuH4GlSGbJPFyiN8tZcpdOpW/U0sbEiVDF9IyNKSxT43R89Sv/1Sj\nIE4mMB5NpBsWe+5u/epysmvbVfIx+YsXTnnTQX7DQyzx7tZBfVgaEeBK2MbSCnIs\nEh2LbIWa2gIjICoDxJour2X8FvVcQhchYLm122yju9/WZGrPRJHXgwbO6f4rYPqO\ng8xdS5u+FwrugB9/b8kA7sPCQ5dFrnrjViijSeASf0QKpbaXpQq13z0LfaHnxcqD\nzwKk2m+bBNGlxJYmpe3CmOR2kNye0jWp+x6VQGKRDtjFs+gSBNiK1DaFHqiwyTcZ\nArSi9s5upv2elECxAbtlksnCJIt7gH9FgpWakS5kt1P2UVbyEsc=\n=I/Sr\n-----END PGP SIGNATURE-----", "payload": "tree 64cdbde669eba3110dd098ed7150f402ef98cd33\nparent 5172271e70173122bde3018ba455dfa97850c7f6\nauthor Philipp Hansch <dev@phansch.net> 1540930883 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1541139536 +0100\n\nUI test cleanup: Extract expect_fun_call tests\n\nNote that the new stderr file does not include a `shadow-unrelated`\nerror, because the new UI test file does not use `#![warn(clippy::all)]`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26569f3dde0d0de2f19fb8d17bf14bf969dd5ace", "html_url": "https://github.com/rust-lang/rust/commit/26569f3dde0d0de2f19fb8d17bf14bf969dd5ace", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26569f3dde0d0de2f19fb8d17bf14bf969dd5ace/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5172271e70173122bde3018ba455dfa97850c7f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5172271e70173122bde3018ba455dfa97850c7f6", "html_url": "https://github.com/rust-lang/rust/commit/5172271e70173122bde3018ba455dfa97850c7f6"}], "stats": {"total": 270, "additions": 134, "deletions": 136}, "files": [{"sha": "cf764c43694a101c4a6f37e088df07b1cd695854", "filename": "tests/ui/expect_fun_call.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/26569f3dde0d0de2f19fb8d17bf14bf969dd5ace/tests%2Fui%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26569f3dde0d0de2f19fb8d17bf14bf969dd5ace/tests%2Fui%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.rs?ref=26569f3dde0d0de2f19fb8d17bf14bf969dd5ace", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![warn(clippy::expect_fun_call)]\n+#![allow(clippy::useless_format)]\n+\n+/// Checks implementation of the `EXPECT_FUN_CALL` lint\n+\n+fn expect_fun_call() {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn new() -> Self { Foo }\n+\n+        fn expect(&self, msg: &str) {\n+            panic!(\"{}\", msg)\n+        }\n+    }\n+\n+    let with_some = Some(\"value\");\n+    with_some.expect(\"error\");\n+\n+    let with_none: Option<i32> = None;\n+    with_none.expect(\"error\");\n+\n+    let error_code = 123_i32;\n+    let with_none_and_format: Option<i32> = None;\n+    with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n+\n+    let with_none_and_as_str: Option<i32> = None;\n+    with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n+\n+    let with_ok: Result<(), ()> = Ok(());\n+    with_ok.expect(\"error\");\n+\n+    let with_err: Result<(), ()> = Err(());\n+    with_err.expect(\"error\");\n+\n+    let error_code = 123_i32;\n+    let with_err_and_format: Result<(), ()> = Err(());\n+    with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n+\n+    let with_err_and_as_str: Result<(), ()> = Err(());\n+    with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n+\n+    let with_dummy_type = Foo::new();\n+    with_dummy_type.expect(\"another test string\");\n+\n+    let with_dummy_type_and_format = Foo::new();\n+    with_dummy_type_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n+\n+    let with_dummy_type_and_as_str = Foo::new();\n+    with_dummy_type_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n+\n+    //Issue #2979 - this should not lint\n+    let msg = \"bar\";\n+    Some(\"foo\").expect(msg);\n+\n+    Some(\"foo\").expect({ &format!(\"error\") });\n+    Some(\"foo\").expect(format!(\"error\").as_ref());\n+}\n+\n+fn main() {}"}, {"sha": "6b1550b21956052fc3fd7b5d09a7c17afc64db25", "filename": "tests/ui/expect_fun_call.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/26569f3dde0d0de2f19fb8d17bf14bf969dd5ace/tests%2Fui%2Fexpect_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26569f3dde0d0de2f19fb8d17bf14bf969dd5ace/tests%2Fui%2Fexpect_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.stderr?ref=26569f3dde0d0de2f19fb8d17bf14bf969dd5ace", "patch": "@@ -0,0 +1,40 @@\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:34:26\n+   |\n+34 |     with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n+   |\n+   = note: `-D clippy::expect-fun-call` implied by `-D warnings`\n+\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:37:26\n+   |\n+37 |     with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n+\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:47:25\n+   |\n+47 |     with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n+\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:50:25\n+   |\n+50 |     with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n+\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:65:17\n+   |\n+65 |     Some(\"foo\").expect({ &format!(\"error\") });\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { let msg = { &format!(\"error\") }; panic!(msg) }))`\n+\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:66:17\n+   |\n+66 |     Some(\"foo\").expect(format!(\"error\").as_ref());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"error\"))`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "03bd7e1f084909f2b3fd620e6ee9881701f02c35", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/26569f3dde0d0de2f19fb8d17bf14bf969dd5ace/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26569f3dde0d0de2f19fb8d17bf14bf969dd5ace/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=26569f3dde0d0de2f19fb8d17bf14bf969dd5ace", "patch": "@@ -353,61 +353,6 @@ fn or_fun_call() {\n     let _ = stringy.unwrap_or(\"\".to_owned());\n }\n \n-/// Checks implementation of the `EXPECT_FUN_CALL` lint\n-fn expect_fun_call() {\n-    struct Foo;\n-\n-    impl Foo {\n-        fn new() -> Self { Foo }\n-\n-        fn expect(&self, msg: &str) {\n-            panic!(\"{}\", msg)\n-        }\n-    }\n-\n-    let with_some = Some(\"value\");\n-    with_some.expect(\"error\");\n-\n-    let with_none: Option<i32> = None;\n-    with_none.expect(\"error\");\n-\n-    let error_code = 123_i32;\n-    let with_none_and_format: Option<i32> = None;\n-    with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n-\n-    let with_none_and_as_str: Option<i32> = None;\n-    with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n-\n-    let with_ok: Result<(), ()> = Ok(());\n-    with_ok.expect(\"error\");\n-\n-    let with_err: Result<(), ()> = Err(());\n-    with_err.expect(\"error\");\n-\n-    let error_code = 123_i32;\n-    let with_err_and_format: Result<(), ()> = Err(());\n-    with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n-\n-    let with_err_and_as_str: Result<(), ()> = Err(());\n-    with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n-\n-    let with_dummy_type = Foo::new();\n-    with_dummy_type.expect(\"another test string\");\n-\n-    let with_dummy_type_and_format = Foo::new();\n-    with_dummy_type_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n-\n-    let with_dummy_type_and_as_str = Foo::new();\n-    with_dummy_type_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n-\n-    //Issue #2979 - this should not lint\n-    let msg = \"bar\";\n-    Some(\"foo\").expect(msg);\n-\n-    Some(\"foo\").expect({ &format!(\"error\") });\n-    Some(\"foo\").expect(format!(\"error\").as_ref());\n-}\n-\n /// Checks implementation of `ITER_NTH` lint\n fn iter_nth() {\n     let mut some_vec = vec![0, 1, 2, 3];"}, {"sha": "985070f37540d7dd60f3fd5e6413fb615bbad122", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 25, "deletions": 81, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/26569f3dde0d0de2f19fb8d17bf14bf969dd5ace/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26569f3dde0d0de2f19fb8d17bf14bf969dd5ace/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=26569f3dde0d0de2f19fb8d17bf14bf969dd5ace", "patch": "@@ -323,139 +323,83 @@ error: use of `unwrap_or` followed by a function call\n 353 |     let _ = stringy.unwrap_or(\"\".to_owned());\n     |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n-error: `error_code` is shadowed by `123_i32`\n-   --> $DIR/methods.rs:387:9\n-    |\n-387 |     let error_code = 123_i32;\n-    |         ^^^^^^^^^^\n-    |\n-    = note: `-D clippy::shadow-unrelated` implied by `-D warnings`\n-note: initialization happens here\n-   --> $DIR/methods.rs:387:22\n-    |\n-387 |     let error_code = 123_i32;\n-    |                      ^^^^^^^\n-note: previous binding is here\n-   --> $DIR/methods.rs:374:9\n-    |\n-374 |     let error_code = 123_i32;\n-    |         ^^^^^^^^^^\n-\n-error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:376:26\n-    |\n-376 |     with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n-    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n-    |\n-    = note: `-D clippy::expect-fun-call` implied by `-D warnings`\n-\n-error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:379:26\n-    |\n-379 |     with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n-    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n-\n-error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:389:25\n-    |\n-389 |     with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n-    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n-\n-error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:392:25\n-    |\n-392 |     with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n-    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n-\n-error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:407:17\n-    |\n-407 |     Some(\"foo\").expect({ &format!(\"error\") });\n-    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { let msg = { &format!(\"error\") }; panic!(msg) }))`\n-\n-error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:408:17\n-    |\n-408 |     Some(\"foo\").expect(format!(\"error\").as_ref());\n-    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"error\"))`\n-\n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:419:23\n+   --> $DIR/methods.rs:364:23\n     |\n-419 |         let bad_vec = some_vec.iter().nth(3);\n+364 |         let bad_vec = some_vec.iter().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D clippy::iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:420:26\n+   --> $DIR/methods.rs:365:26\n     |\n-420 |         let bad_slice = &some_vec[..].iter().nth(3);\n+365 |         let bad_slice = &some_vec[..].iter().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:421:31\n+   --> $DIR/methods.rs:366:31\n     |\n-421 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+366 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:422:29\n+   --> $DIR/methods.rs:367:29\n     |\n-422 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+367 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:427:23\n+   --> $DIR/methods.rs:372:23\n     |\n-427 |         let bad_vec = some_vec.iter_mut().nth(3);\n+372 |         let bad_vec = some_vec.iter_mut().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:430:26\n+   --> $DIR/methods.rs:375:26\n     |\n-430 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+375 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:433:29\n+   --> $DIR/methods.rs:378:29\n     |\n-433 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+378 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:445:13\n+   --> $DIR/methods.rs:390:13\n     |\n-445 |     let _ = some_vec.iter().skip(42).next();\n+390 |     let _ = some_vec.iter().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D clippy::iter-skip-next` implied by `-D warnings`\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:446:13\n+   --> $DIR/methods.rs:391:13\n     |\n-446 |     let _ = some_vec.iter().cycle().skip(42).next();\n+391 |     let _ = some_vec.iter().cycle().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:447:13\n+   --> $DIR/methods.rs:392:13\n     |\n-447 |     let _ = (1..10).skip(10).next();\n+392 |     let _ = (1..10).skip(10).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:448:14\n+   --> $DIR/methods.rs:393:14\n     |\n-448 |     let _ = &some_vec[..].iter().skip(3).next();\n+393 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:457:13\n+   --> $DIR/methods.rs:402:13\n     |\n-457 |     let _ = opt.unwrap();\n+402 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n \n-error: aborting due to 57 previous errors\n+error: aborting due to 50 previous errors\n "}]}