{"sha": "d584f5a386c4d06afbe1d7375bfe43c08b19549d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ODRmNWEzODZjNGQwNmFmYmUxZDczNzViZmU0M2MwOGIxOTU0OWQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-29T00:32:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-29T00:32:17Z"}, "message": "Rollup merge of #69937 - TyPR124:osstr_ascii, r=dtolnay\n\nASCII methods on OsStr\n\nWould close #69566\n\nI don't know enough about encodings to know if this is a valid change, however the comment on the issue suggests it could be.\n\nThis does two things:\n\n1. Makes ASCII methods available on OsStr\n\n2. Makes it possible to obtain a `&mut OsStr`. This is necessary to actually use `OsStr::make_ascii_*case` methods since they modify the underlying value. As far as I can tell, the only way to modify a `&mut OsStr` is via the methods I just added.\n\nMy original hope was to have these methods on `OsStrExt` for Windows, since the standard library already assumes `make_ascii_uppercase` is valid in Windows (see the change I made to windows/process.rs). If it is found these are not valid changes on non-Windows platforms, I can move the methods to the ext trait instead.", "tree": {"sha": "7fff9bd42b3c207677c158326f96780ccb917501", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fff9bd42b3c207677c158326f96780ccb917501"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d584f5a386c4d06afbe1d7375bfe43c08b19549d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJef+yRCRBK7hj4Ov3rIwAAdHIIADk6HL9holL8SQH0tubW6iJu\nwTg9ggVJ5trlyroAptGmFoHUmlIuqcDV/AK2wdQGgPGvuljWTtyHZrAPr1k/SX+m\nEWnKixMRz6NEfL+pxX/24gtoj7e7ELyyPwT4Magj0hL7RJXN5iPONrCY2Hyle7rB\nn3AZ3KwueYTNTpaJ/Rqkpg0lk/zpdZV+mDcMDbicUeAvuc9t4nJQkZPwh7Xw3O//\nQkW1OjjFrBt4l3G8Y40YBPkaPcmVlFfpth3D+Pw9pygXnYpDSCy/oI7KeJ3k8R1W\ntTlJVPpEF4mHXPODQr4CxHr3Ecm6aVxkl8f6dwtgajK6mP4yvozwylKqA15ncSo=\n=53r5\n-----END PGP SIGNATURE-----\n", "payload": "tree 7fff9bd42b3c207677c158326f96780ccb917501\nparent 77621317d643cc5d13da60b26ab68b057668e688\nparent 271d43b158f71422df2239764d4d54734d4ebcfb\nauthor Dylan DPC <dylan.dpc@gmail.com> 1585441937 +0100\ncommitter GitHub <noreply@github.com> 1585441937 +0100\n\nRollup merge of #69937 - TyPR124:osstr_ascii, r=dtolnay\n\nASCII methods on OsStr\n\nWould close #69566\n\nI don't know enough about encodings to know if this is a valid change, however the comment on the issue suggests it could be.\n\nThis does two things:\n\n1. Makes ASCII methods available on OsStr\n\n2. Makes it possible to obtain a `&mut OsStr`. This is necessary to actually use `OsStr::make_ascii_*case` methods since they modify the underlying value. As far as I can tell, the only way to modify a `&mut OsStr` is via the methods I just added.\n\nMy original hope was to have these methods on `OsStrExt` for Windows, since the standard library already assumes `make_ascii_uppercase` is valid in Windows (see the change I made to windows/process.rs). If it is found these are not valid changes on non-Windows platforms, I can move the methods to the ext trait instead.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d584f5a386c4d06afbe1d7375bfe43c08b19549d", "html_url": "https://github.com/rust-lang/rust/commit/d584f5a386c4d06afbe1d7375bfe43c08b19549d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d584f5a386c4d06afbe1d7375bfe43c08b19549d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77621317d643cc5d13da60b26ab68b057668e688", "url": "https://api.github.com/repos/rust-lang/rust/commits/77621317d643cc5d13da60b26ab68b057668e688", "html_url": "https://github.com/rust-lang/rust/commit/77621317d643cc5d13da60b26ab68b057668e688"}, {"sha": "271d43b158f71422df2239764d4d54734d4ebcfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/271d43b158f71422df2239764d4d54734d4ebcfb", "html_url": "https://github.com/rust-lang/rust/commit/271d43b158f71422df2239764d4d54734d4ebcfb"}], "stats": {"total": 246, "additions": 235, "deletions": 11}, "files": [{"sha": "5e686946f8e9a609bbda671c303e45d5b0af8ed2", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/d584f5a386c4d06afbe1d7375bfe43c08b19549d/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d584f5a386c4d06afbe1d7375bfe43c08b19549d/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=d584f5a386c4d06afbe1d7375bfe43c08b19549d", "patch": "@@ -698,6 +698,147 @@ impl OsStr {\n     fn bytes(&self) -> &[u8] {\n         unsafe { &*(&self.inner as *const _ as *const [u8]) }\n     }\n+\n+    /// Converts this string to its ASCII lower case equivalent in-place.\n+    ///\n+    /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n+    /// but non-ASCII letters are unchanged.\n+    ///\n+    /// To return a new lowercased value without modifying the existing one, use\n+    /// [`to_ascii_lowercase`].\n+    ///\n+    /// [`to_ascii_lowercase`]: #method.to_ascii_lowercase\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(osstring_ascii)]\n+    /// use std::ffi::OsString;\n+    ///\n+    /// let mut s = OsString::from(\"GR\u00dc\u00dfE, J\u00dcRGEN \u2764\");\n+    ///\n+    /// s.make_ascii_lowercase();\n+    ///\n+    /// assert_eq!(\"gr\u00dc\u00dfe, j\u00dcrgen \u2764\", s);\n+    /// ```\n+    #[unstable(feature = \"osstring_ascii\", issue = \"70516\")]\n+    pub fn make_ascii_lowercase(&mut self) {\n+        self.inner.make_ascii_lowercase()\n+    }\n+\n+    /// Converts this string to its ASCII upper case equivalent in-place.\n+    ///\n+    /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n+    /// but non-ASCII letters are unchanged.\n+    ///\n+    /// To return a new uppercased value without modifying the existing one, use\n+    /// [`to_ascii_uppercase`].\n+    ///\n+    /// [`to_ascii_uppercase`]: #method.to_ascii_uppercase\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(osstring_ascii)]\n+    /// use std::ffi::OsString;\n+    ///\n+    /// let mut s = OsString::from(\"Gr\u00fc\u00dfe, J\u00fcrgen \u2764\");\n+    ///\n+    /// s.make_ascii_uppercase();\n+    ///\n+    /// assert_eq!(\"GR\u00fc\u00dfE, J\u00fcRGEN \u2764\", s);\n+    /// ```\n+    #[unstable(feature = \"osstring_ascii\", issue = \"70516\")]\n+    pub fn make_ascii_uppercase(&mut self) {\n+        self.inner.make_ascii_uppercase()\n+    }\n+\n+    /// Returns a copy of this string where each character is mapped to its\n+    /// ASCII lower case equivalent.\n+    ///\n+    /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n+    /// but non-ASCII letters are unchanged.\n+    ///\n+    /// To lowercase the value in-place, use [`make_ascii_lowercase`].\n+    ///\n+    /// [`make_ascii_lowercase`]: #method.make_ascii_lowercase\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(osstring_ascii)]\n+    /// use std::ffi::OsString;\n+    /// let s = OsString::from(\"Gr\u00fc\u00dfe, J\u00fcrgen \u2764\");\n+    ///\n+    /// assert_eq!(\"gr\u00fc\u00dfe, j\u00fcrgen \u2764\", s.to_ascii_lowercase());\n+    /// ```\n+    #[unstable(feature = \"osstring_ascii\", issue = \"70516\")]\n+    pub fn to_ascii_lowercase(&self) -> OsString {\n+        OsString::from_inner(self.inner.to_ascii_lowercase())\n+    }\n+\n+    /// Returns a copy of this string where each character is mapped to its\n+    /// ASCII upper case equivalent.\n+    ///\n+    /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n+    /// but non-ASCII letters are unchanged.\n+    ///\n+    /// To uppercase the value in-place, use [`make_ascii_uppercase`].\n+    ///\n+    /// [`make_ascii_uppercase`]: #method.make_ascii_uppercase\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(osstring_ascii)]\n+    /// use std::ffi::OsString;\n+    /// let s = OsString::from(\"Gr\u00fc\u00dfe, J\u00fcrgen \u2764\");\n+    ///\n+    /// assert_eq!(\"GR\u00fc\u00dfE, J\u00fcRGEN \u2764\", s.to_ascii_uppercase());\n+    /// ```\n+    #[unstable(feature = \"osstring_ascii\", issue = \"70516\")]\n+    pub fn to_ascii_uppercase(&self) -> OsString {\n+        OsString::from_inner(self.inner.to_ascii_uppercase())\n+    }\n+\n+    /// Checks if all characters in this string are within the ASCII range.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(osstring_ascii)]\n+    /// use std::ffi::OsString;\n+    ///\n+    /// let ascii = OsString::from(\"hello!\\n\");\n+    /// let non_ascii = OsString::from(\"Gr\u00fc\u00dfe, J\u00fcrgen \u2764\");\n+    ///\n+    /// assert!(ascii.is_ascii());\n+    /// assert!(!non_ascii.is_ascii());\n+    /// ```\n+    #[unstable(feature = \"osstring_ascii\", issue = \"70516\")]\n+    pub fn is_ascii(&self) -> bool {\n+        self.inner.is_ascii()\n+    }\n+\n+    /// Checks that two strings are an ASCII case-insensitive match.\n+    ///\n+    /// Same as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\n+    /// but without allocating and copying temporaries.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(osstring_ascii)]\n+    /// use std::ffi::OsString;\n+    ///\n+    /// assert!(OsString::from(\"Ferris\").eq_ignore_ascii_case(\"FERRIS\"));\n+    /// assert!(OsString::from(\"Ferr\u00f6s\").eq_ignore_ascii_case(\"FERR\u00f6S\"));\n+    /// assert!(!OsString::from(\"Ferr\u00f6s\").eq_ignore_ascii_case(\"FERR\u00d6S\"));\n+    /// ```\n+    #[unstable(feature = \"osstring_ascii\", issue = \"70516\")]\n+    pub fn eq_ignore_ascii_case<S: ?Sized + AsRef<OsStr>>(&self, other: &S) -> bool {\n+        self.inner.eq_ignore_ascii_case(&other.as_ref().inner)\n+    }\n }\n \n #[stable(feature = \"box_from_os_str\", since = \"1.17.0\")]"}, {"sha": "6aab028873e07442d7c3ed778bc3542bd2f0e608", "filename": "src/libstd/sys/windows/os_str.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d584f5a386c4d06afbe1d7375bfe43c08b19549d/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d584f5a386c4d06afbe1d7375bfe43c08b19549d/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs?ref=d584f5a386c4d06afbe1d7375bfe43c08b19549d", "patch": "@@ -179,4 +179,34 @@ impl Slice {\n         let rc = self.inner.into_rc();\n         unsafe { Rc::from_raw(Rc::into_raw(rc) as *const Slice) }\n     }\n+\n+    #[inline]\n+    pub fn make_ascii_lowercase(&mut self) {\n+        self.inner.make_ascii_lowercase()\n+    }\n+\n+    #[inline]\n+    pub fn make_ascii_uppercase(&mut self) {\n+        self.inner.make_ascii_uppercase()\n+    }\n+\n+    #[inline]\n+    pub fn to_ascii_lowercase(&self) -> Buf {\n+        Buf { inner: self.inner.to_ascii_lowercase() }\n+    }\n+\n+    #[inline]\n+    pub fn to_ascii_uppercase(&self) -> Buf {\n+        Buf { inner: self.inner.to_ascii_uppercase() }\n+    }\n+\n+    #[inline]\n+    pub fn is_ascii(&self) -> bool {\n+        self.inner.is_ascii()\n+    }\n+\n+    #[inline]\n+    pub fn eq_ignore_ascii_case(&self, other: &Self) -> bool {\n+        self.inner.eq_ignore_ascii_case(&other.inner)\n+    }\n }"}, {"sha": "77f9a5c9dc7b9c9378c292c50c6e713cdb3c4d66", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d584f5a386c4d06afbe1d7375bfe43c08b19549d/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d584f5a386c4d06afbe1d7375bfe43c08b19549d/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=d584f5a386c4d06afbe1d7375bfe43c08b19549d", "patch": "@@ -20,7 +20,7 @@ use crate::sys::mutex::Mutex;\n use crate::sys::pipe::{self, AnonPipe};\n use crate::sys::stdio;\n use crate::sys_common::process::CommandEnv;\n-use crate::sys_common::{AsInner, FromInner, IntoInner};\n+use crate::sys_common::AsInner;\n \n use libc::{c_void, EXIT_FAILURE, EXIT_SUCCESS};\n \n@@ -33,10 +33,9 @@ use libc::{c_void, EXIT_FAILURE, EXIT_SUCCESS};\n pub struct EnvKey(OsString);\n \n impl From<OsString> for EnvKey {\n-    fn from(k: OsString) -> Self {\n-        let mut buf = k.into_inner().into_inner();\n-        buf.make_ascii_uppercase();\n-        EnvKey(FromInner::from_inner(FromInner::from_inner(buf)))\n+    fn from(mut k: OsString) -> Self {\n+        k.make_ascii_uppercase();\n+        EnvKey(k)\n     }\n }\n "}, {"sha": "aa6cc33d831e0f8870a1956388ef457118f0ecd2", "filename": "src/libstd/sys_common/os_str_bytes.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d584f5a386c4d06afbe1d7375bfe43c08b19549d/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d584f5a386c4d06afbe1d7375bfe43c08b19549d/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs?ref=d584f5a386c4d06afbe1d7375bfe43c08b19549d", "patch": "@@ -195,6 +195,36 @@ impl Slice {\n         let rc: Rc<[u8]> = Rc::from(&self.inner);\n         unsafe { Rc::from_raw(Rc::into_raw(rc) as *const Slice) }\n     }\n+\n+    #[inline]\n+    pub fn make_ascii_lowercase(&mut self) {\n+        self.inner.make_ascii_lowercase()\n+    }\n+\n+    #[inline]\n+    pub fn make_ascii_uppercase(&mut self) {\n+        self.inner.make_ascii_uppercase()\n+    }\n+\n+    #[inline]\n+    pub fn to_ascii_lowercase(&self) -> Buf {\n+        Buf { inner: self.inner.to_ascii_lowercase() }\n+    }\n+\n+    #[inline]\n+    pub fn to_ascii_uppercase(&self) -> Buf {\n+        Buf { inner: self.inner.to_ascii_uppercase() }\n+    }\n+\n+    #[inline]\n+    pub fn is_ascii(&self) -> bool {\n+        self.inner.is_ascii()\n+    }\n+\n+    #[inline]\n+    pub fn eq_ignore_ascii_case(&self, other: &Self) -> bool {\n+        self.inner.eq_ignore_ascii_case(&other.inner)\n+    }\n }\n \n /// Platform-specific extensions to [`OsString`]."}, {"sha": "fc6614552a92da11e9cad1f4adabc592e463e6cd", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d584f5a386c4d06afbe1d7375bfe43c08b19549d/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d584f5a386c4d06afbe1d7375bfe43c08b19549d/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=d584f5a386c4d06afbe1d7375bfe43c08b19549d", "patch": "@@ -637,6 +637,36 @@ impl Wtf8 {\n         let rc: Rc<[u8]> = Rc::from(&self.bytes);\n         unsafe { Rc::from_raw(Rc::into_raw(rc) as *const Wtf8) }\n     }\n+\n+    #[inline]\n+    pub fn make_ascii_lowercase(&mut self) {\n+        self.bytes.make_ascii_lowercase()\n+    }\n+\n+    #[inline]\n+    pub fn make_ascii_uppercase(&mut self) {\n+        self.bytes.make_ascii_uppercase()\n+    }\n+\n+    #[inline]\n+    pub fn to_ascii_lowercase(&self) -> Wtf8Buf {\n+        Wtf8Buf { bytes: self.bytes.to_ascii_lowercase() }\n+    }\n+\n+    #[inline]\n+    pub fn to_ascii_uppercase(&self) -> Wtf8Buf {\n+        Wtf8Buf { bytes: self.bytes.to_ascii_uppercase() }\n+    }\n+\n+    #[inline]\n+    pub fn is_ascii(&self) -> bool {\n+        self.bytes.is_ascii()\n+    }\n+\n+    #[inline]\n+    pub fn eq_ignore_ascii_case(&self, other: &Self) -> bool {\n+        self.bytes.eq_ignore_ascii_case(&other.bytes)\n+    }\n }\n \n /// Returns a slice of the given string for the byte range [`begin`..`end`).\n@@ -837,12 +867,6 @@ impl Hash for Wtf8 {\n     }\n }\n \n-impl Wtf8 {\n-    pub fn make_ascii_uppercase(&mut self) {\n-        self.bytes.make_ascii_uppercase()\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}]}