{"sha": "cfb6114b2a20e04e3212ed030bc68d23faf8048f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYjYxMTRiMmEyMGUwNGUzMjEyZWQwMzBiYzY4ZDIzZmFmODA0OGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-24T13:58:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-24T13:58:36Z"}, "message": "Auto merge of #74676 - lcnr:generics-no-sort, r=varkor\n\ncorrectly deal with unsorted generic parameters\n\nWe now stop sorting generic params and instead correctly handle unsorted params in the rest of the compiler.\n\nWe still restrict const params to come after type params though, so this PR does not change anything which\nis visible to users.\n\nThis might slightly influence perf, so let's prevent any unintentional rollups. @bors rollup=never\n\nr? @varkor", "tree": {"sha": "795b20e848c334ca2038a30bfbfd2036791073e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/795b20e848c334ca2038a30bfbfd2036791073e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfb6114b2a20e04e3212ed030bc68d23faf8048f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb6114b2a20e04e3212ed030bc68d23faf8048f", "html_url": "https://github.com/rust-lang/rust/commit/cfb6114b2a20e04e3212ed030bc68d23faf8048f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfb6114b2a20e04e3212ed030bc68d23faf8048f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "900869371e13cead086f4f9809419daa6a63cfaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/900869371e13cead086f4f9809419daa6a63cfaf", "html_url": "https://github.com/rust-lang/rust/commit/900869371e13cead086f4f9809419daa6a63cfaf"}, {"sha": "5f1eea93a9340d5f2243c5467b4234bd0c14e7a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1eea93a9340d5f2243c5467b4234bd0c14e7a5", "html_url": "https://github.com/rust-lang/rust/commit/5f1eea93a9340d5f2243c5467b4234bd0c14e7a5"}], "stats": {"total": 103, "additions": 62, "deletions": 41}, "files": [{"sha": "1c70eef3bf5e32259b5387ab81c510498818792a", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6114b2a20e04e3212ed030bc68d23faf8048f/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6114b2a20e04e3212ed030bc68d23faf8048f/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=cfb6114b2a20e04e3212ed030bc68d23faf8048f", "patch": "@@ -936,20 +936,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 })\n             });\n \n-        let mut lowered_params: Vec<_> =\n-            lowered_generics.params.into_iter().chain(in_band_defs).collect();\n-\n-        // FIXME(const_generics): the compiler doesn't always cope with\n-        // unsorted generic parameters at the moment, so we make sure\n-        // that they're ordered correctly here for now. (When we chain\n-        // the `in_band_defs`, we might make the order unsorted.)\n-        lowered_params.sort_by_key(|param| match param.kind {\n-            hir::GenericParamKind::Lifetime { .. } => ParamKindOrd::Lifetime,\n-            hir::GenericParamKind::Type { .. } => ParamKindOrd::Type,\n-            hir::GenericParamKind::Const { .. } => ParamKindOrd::Const,\n-        });\n-\n-        lowered_generics.params = lowered_params.into();\n+        lowered_generics.params.extend(in_band_defs);\n \n         let lowered_generics = lowered_generics.into_generics(self.arena);\n         (lowered_generics, res)"}, {"sha": "3fbb42ece47a0f904c8060e92ff1baefae69210e", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6114b2a20e04e3212ed030bc68d23faf8048f/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6114b2a20e04e3212ed030bc68d23faf8048f/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=cfb6114b2a20e04e3212ed030bc68d23faf8048f", "patch": "@@ -1298,7 +1298,10 @@ fn object_lifetime_defaults_for_item(\n             }\n             GenericParamKind::Const { .. } => {\n                 // Generic consts don't impose any constraints.\n-                None\n+                //\n+                // We still store a dummy value here to allow generic parameters\n+                // in an arbitrary order.\n+                Some(Set1::Empty)\n             }\n         })\n         .collect()"}, {"sha": "acf68be1176ddbf0df08563401f8f948359067e8", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6114b2a20e04e3212ed030bc68d23faf8048f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6114b2a20e04e3212ed030bc68d23faf8048f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=cfb6114b2a20e04e3212ed030bc68d23faf8048f", "patch": "@@ -1362,13 +1362,9 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n     let type_start = own_start - has_self as u32 + params.len() as u32;\n     let mut i = 0;\n \n-    // FIXME(const_generics): a few places in the compiler expect generic params\n-    // to be in the order lifetimes, then type params, then const params.\n-    //\n-    // To prevent internal errors in case const parameters are supplied before\n-    // type parameters we first add all type params, then all const params.\n-    params.extend(ast_generics.params.iter().filter_map(|param| {\n-        if let GenericParamKind::Type { ref default, synthetic, .. } = param.kind {\n+    params.extend(ast_generics.params.iter().filter_map(|param| match param.kind {\n+        GenericParamKind::Lifetime { .. } => None,\n+        GenericParamKind::Type { ref default, synthetic, .. } => {\n             if !allow_defaults && default.is_some() {\n                 if !tcx.features().default_type_parameter_fallback {\n                     tcx.struct_span_lint_hir(\n@@ -1378,7 +1374,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                         |lint| {\n                             lint.build(\n                                 \"defaults for type parameters are only allowed in \\\n-                                        `struct`, `enum`, `type`, or `trait` definitions.\",\n+                                 `struct`, `enum`, `type`, or `trait` definitions.\",\n                             )\n                             .emit();\n                         },\n@@ -1403,13 +1399,8 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             };\n             i += 1;\n             Some(param_def)\n-        } else {\n-            None\n         }\n-    }));\n-\n-    params.extend(ast_generics.params.iter().filter_map(|param| {\n-        if let GenericParamKind::Const { .. } = param.kind {\n+        GenericParamKind::Const { .. } => {\n             let param_def = ty::GenericParamDef {\n                 index: type_start + i as u32,\n                 name: param.name.ident().name,\n@@ -1419,8 +1410,6 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             };\n             i += 1;\n             Some(param_def)\n-        } else {\n-            None\n         }\n     }));\n \n@@ -1899,14 +1888,24 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n     // Collect the predicates that were written inline by the user on each\n     // type parameter (e.g., `<T: Foo>`).\n     for param in ast_generics.params {\n-        if let GenericParamKind::Type { .. } = param.kind {\n-            let name = param.name.ident().name;\n-            let param_ty = ty::ParamTy::new(index, name).to_ty(tcx);\n-            index += 1;\n-\n-            let sized = SizedByDefault::Yes;\n-            let bounds = AstConv::compute_bounds(&icx, param_ty, &param.bounds, sized, param.span);\n-            predicates.extend(bounds.predicates(tcx, param_ty));\n+        match param.kind {\n+            // We already dealt with early bound lifetimes above.\n+            GenericParamKind::Lifetime { .. } => (),\n+            GenericParamKind::Type { .. } => {\n+                let name = param.name.ident().name;\n+                let param_ty = ty::ParamTy::new(index, name).to_ty(tcx);\n+                index += 1;\n+\n+                let sized = SizedByDefault::Yes;\n+                let bounds =\n+                    AstConv::compute_bounds(&icx, param_ty, &param.bounds, sized, param.span);\n+                predicates.extend(bounds.predicates(tcx, param_ty));\n+            }\n+            GenericParamKind::Const { .. } => {\n+                // Bounds on const parameters are currently not possible.\n+                debug_assert!(param.bounds.is_empty());\n+                index += 1;\n+            }\n         }\n     }\n "}, {"sha": "1d1adf39434712bd879cdfbe5f3c40dc9c66e029", "filename": "src/test/ui/const-generics/argument_order.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6114b2a20e04e3212ed030bc68d23faf8048f/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6114b2a20e04e3212ed030bc68d23faf8048f/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs?ref=cfb6114b2a20e04e3212ed030bc68d23faf8048f", "patch": "@@ -6,4 +6,14 @@ struct Bad<const N: usize, T> { //~ ERROR type parameters must be declared prior\n     another: T,\n }\n \n-fn main() { }\n+struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n+    //~^ ERROR type parameters must be declared prior\n+    //~| ERROR lifetime parameters must be declared prior\n+    a: &'a T,\n+    b: &'b U,\n+}\n+\n+fn main() {\n+    let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n+    //~^ ERROR lifetime provided when a type was expected\n+ }"}, {"sha": "19e895b8eb886d2621f31b9dd1a66bee24ecd245", "filename": "src/test/ui/const-generics/argument_order.stderr", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6114b2a20e04e3212ed030bc68d23faf8048f/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6114b2a20e04e3212ed030bc68d23faf8048f/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr?ref=cfb6114b2a20e04e3212ed030bc68d23faf8048f", "patch": "@@ -4,6 +4,18 @@ error: type parameters must be declared prior to const parameters\n LL | struct Bad<const N: usize, T> {\n    |           -----------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const N: usize>`\n \n+error: lifetime parameters must be declared prior to const parameters\n+  --> $DIR/argument_order.rs:9:32\n+   |\n+LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n+   |               -----------------^^-----^^-------------------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T, U, const N: usize, const M: usize>`\n+\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/argument_order.rs:9:36\n+   |\n+LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n+   |               ---------------------^----------------------^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T, U, const N: usize, const M: usize>`\n+\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/argument_order.rs:1:12\n    |\n@@ -13,5 +25,15 @@ LL | #![feature(const_generics)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-error: aborting due to previous error; 1 warning emitted\n+error[E0747]: lifetime provided when a type was expected\n+  --> $DIR/argument_order.rs:17:23\n+   |\n+LL |     let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n+   |                       ^^^^^^^\n+   |\n+   = note: lifetime arguments must be provided before type arguments\n+   = help: reorder the arguments: lifetimes, then types, then consts: `<'a, 'b, T, U, N, M>`\n+\n+error: aborting due to 4 previous errors; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0747`."}]}