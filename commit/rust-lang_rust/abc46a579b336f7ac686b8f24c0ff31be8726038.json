{"sha": "abc46a579b336f7ac686b8f24c0ff31be8726038", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYzQ2YTU3OWIzMzZmN2FjNjg2YjhmMjRjMGZmMzFiZTg3MjYwMzg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-22T07:55:01Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T23:59:38Z"}, "message": "parse: harden `default` test.", "tree": {"sha": "840617c8861ef76e08c26d3111c1d77021ed8f66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/840617c8861ef76e08c26d3111c1d77021ed8f66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abc46a579b336f7ac686b8f24c0ff31be8726038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abc46a579b336f7ac686b8f24c0ff31be8726038", "html_url": "https://github.com/rust-lang/rust/commit/abc46a579b336f7ac686b8f24c0ff31be8726038", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abc46a579b336f7ac686b8f24c0ff31be8726038/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3b08294141bb209f9cd6a0d0b9bf56890edc742", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b08294141bb209f9cd6a0d0b9bf56890edc742", "html_url": "https://github.com/rust-lang/rust/commit/a3b08294141bb209f9cd6a0d0b9bf56890edc742"}], "stats": {"total": 152, "additions": 96, "deletions": 56}, "files": [{"sha": "0951af1579bbcbb7edd0ef981eef1b177115d254", "filename": "src/test/ui/parser/default-on-wrong-item-kind.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abc46a579b336f7ac686b8f24c0ff31be8726038/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc46a579b336f7ac686b8f24c0ff31be8726038/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs?ref=abc46a579b336f7ac686b8f24c0ff31be8726038", "patch": "@@ -22,6 +22,8 @@ mod free_items {\n     default impl foo {}\n     default!();\n     default::foo::bar!();\n+    default default!(); //~ ERROR item cannot be `default`\n+    default default::foo::bar!(); //~ ERROR item cannot be `default`\n     default macro foo {} //~ ERROR item cannot be `default`\n     default macro_rules! foo {} //~ ERROR item cannot be `default`\n }\n@@ -55,6 +57,8 @@ extern \"C\" {\n     //~^ ERROR item kind not supported in `extern` block\n     default!();\n     default::foo::bar!();\n+    default default!(); //~ ERROR item cannot be `default`\n+    default default::foo::bar!(); //~ ERROR item cannot be `default`\n     default macro foo {} //~ ERROR item cannot be `default`\n     //~^ ERROR item kind not supported in `extern` block\n     default macro_rules! foo {} //~ ERROR item cannot be `default`\n@@ -90,6 +94,8 @@ impl S {\n     //~^ ERROR item kind not supported in `trait` or `impl`\n     default!();\n     default::foo::bar!();\n+    default default!();\n+    default default::foo::bar!();\n     default macro foo {}\n     //~^ ERROR item kind not supported in `trait` or `impl`\n     default macro_rules! foo {}\n@@ -125,6 +131,8 @@ trait T {\n     //~^ ERROR item kind not supported in `trait` or `impl`\n     default!();\n     default::foo::bar!();\n+    default default!();\n+    default default::foo::bar!();\n     default macro foo {}\n     //~^ ERROR item kind not supported in `trait` or `impl`\n     default macro_rules! foo {}"}, {"sha": "6c4c108a28f7c36f65cc5a40d60f20a217697add", "filename": "src/test/ui/parser/default-on-wrong-item-kind.stderr", "status": "modified", "additions": 88, "deletions": 56, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/abc46a579b336f7ac686b8f24c0ff31be8726038/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abc46a579b336f7ac686b8f24c0ff31be8726038/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr?ref=abc46a579b336f7ac686b8f24c0ff31be8726038", "patch": "@@ -105,65 +105,81 @@ LL |     default trait foo = Ord;\n error: item cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:25:5\n    |\n-LL |     default macro foo {}\n+LL |     default default!();\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:26:5\n    |\n+LL |     default default::foo::bar!();\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:27:5\n+   |\n+LL |     default macro foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:28:5\n+   |\n LL |     default macro_rules! foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:31:5\n+  --> $DIR/default-on-wrong-item-kind.rs:33:5\n    |\n LL |     default extern crate foo;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item kind not supported in `extern` block\n-  --> $DIR/default-on-wrong-item-kind.rs:31:5\n+  --> $DIR/default-on-wrong-item-kind.rs:33:5\n    |\n LL |     default extern crate foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:33:5\n+  --> $DIR/default-on-wrong-item-kind.rs:35:5\n    |\n LL |     default use foo;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item kind not supported in `extern` block\n-  --> $DIR/default-on-wrong-item-kind.rs:33:5\n+  --> $DIR/default-on-wrong-item-kind.rs:35:5\n    |\n LL |     default use foo;\n    |     ^^^^^^^^^^^^^^^^\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:35:5\n+  --> $DIR/default-on-wrong-item-kind.rs:37:5\n    |\n LL |     default static foo: u8;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:36:5\n+  --> $DIR/default-on-wrong-item-kind.rs:38:5\n    |\n LL |     default const foo: u8;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: extern items cannot be `const`\n-  --> $DIR/default-on-wrong-item-kind.rs:36:19\n+  --> $DIR/default-on-wrong-item-kind.rs:38:19\n    |\n LL |     default const foo: u8;\n    |     --------------^^^\n@@ -173,308 +189,324 @@ LL |     default const foo: u8;\n    = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:38:5\n+  --> $DIR/default-on-wrong-item-kind.rs:40:5\n    |\n LL |     default fn foo();\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:39:5\n+  --> $DIR/default-on-wrong-item-kind.rs:41:5\n    |\n LL |     default mod foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item kind not supported in `extern` block\n-  --> $DIR/default-on-wrong-item-kind.rs:39:5\n+  --> $DIR/default-on-wrong-item-kind.rs:41:5\n    |\n LL |     default mod foo {}\n    |     ^^^^^^^^^^^^^^^\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:41:5\n+  --> $DIR/default-on-wrong-item-kind.rs:43:5\n    |\n LL |     default extern \"C\" {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item kind not supported in `extern` block\n-  --> $DIR/default-on-wrong-item-kind.rs:41:5\n+  --> $DIR/default-on-wrong-item-kind.rs:43:5\n    |\n LL |     default extern \"C\" {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:43:5\n+  --> $DIR/default-on-wrong-item-kind.rs:45:5\n    |\n LL |     default type foo = u8;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:44:5\n+  --> $DIR/default-on-wrong-item-kind.rs:46:5\n    |\n LL |     default enum foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item kind not supported in `extern` block\n-  --> $DIR/default-on-wrong-item-kind.rs:44:5\n+  --> $DIR/default-on-wrong-item-kind.rs:46:5\n    |\n LL |     default enum foo {}\n    |     ^^^^^^^^^^^^^^^^\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:46:5\n+  --> $DIR/default-on-wrong-item-kind.rs:48:5\n    |\n LL |     default struct foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item kind not supported in `extern` block\n-  --> $DIR/default-on-wrong-item-kind.rs:46:5\n+  --> $DIR/default-on-wrong-item-kind.rs:48:5\n    |\n LL |     default struct foo {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:48:5\n+  --> $DIR/default-on-wrong-item-kind.rs:50:5\n    |\n LL |     default union foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item kind not supported in `extern` block\n-  --> $DIR/default-on-wrong-item-kind.rs:48:5\n+  --> $DIR/default-on-wrong-item-kind.rs:50:5\n    |\n LL |     default union foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:50:5\n+  --> $DIR/default-on-wrong-item-kind.rs:52:5\n    |\n LL |     default trait foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item kind not supported in `extern` block\n-  --> $DIR/default-on-wrong-item-kind.rs:50:5\n+  --> $DIR/default-on-wrong-item-kind.rs:52:5\n    |\n LL |     default trait foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:52:5\n+  --> $DIR/default-on-wrong-item-kind.rs:54:5\n    |\n LL |     default trait foo = Ord;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item kind not supported in `extern` block\n-  --> $DIR/default-on-wrong-item-kind.rs:52:5\n+  --> $DIR/default-on-wrong-item-kind.rs:54:5\n    |\n LL |     default trait foo = Ord;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `extern` block\n-  --> $DIR/default-on-wrong-item-kind.rs:54:5\n+  --> $DIR/default-on-wrong-item-kind.rs:56:5\n    |\n LL |     default impl foo {}\n    |     ^^^^^^^^^^^^^^^^\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:58:5\n+  --> $DIR/default-on-wrong-item-kind.rs:60:5\n+   |\n+LL |     default default!();\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:61:5\n+   |\n+LL |     default default::foo::bar!();\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:62:5\n    |\n LL |     default macro foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item kind not supported in `extern` block\n-  --> $DIR/default-on-wrong-item-kind.rs:58:5\n+  --> $DIR/default-on-wrong-item-kind.rs:62:5\n    |\n LL |     default macro foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:60:5\n+  --> $DIR/default-on-wrong-item-kind.rs:64:5\n    |\n LL |     default macro_rules! foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item kind not supported in `extern` block\n-  --> $DIR/default-on-wrong-item-kind.rs:60:5\n+  --> $DIR/default-on-wrong-item-kind.rs:64:5\n    |\n LL |     default macro_rules! foo {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:66:5\n+  --> $DIR/default-on-wrong-item-kind.rs:70:5\n    |\n LL |     default extern crate foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:68:5\n+  --> $DIR/default-on-wrong-item-kind.rs:72:5\n    |\n LL |     default use foo;\n    |     ^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/default-on-wrong-item-kind.rs:70:5\n+  --> $DIR/default-on-wrong-item-kind.rs:74:5\n    |\n LL |     default static foo: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:74:5\n+  --> $DIR/default-on-wrong-item-kind.rs:78:5\n    |\n LL |     default mod foo {}\n    |     ^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:76:5\n+  --> $DIR/default-on-wrong-item-kind.rs:80:5\n    |\n LL |     default extern \"C\" {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:79:5\n+  --> $DIR/default-on-wrong-item-kind.rs:83:5\n    |\n LL |     default enum foo {}\n    |     ^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:81:5\n+  --> $DIR/default-on-wrong-item-kind.rs:85:5\n    |\n LL |     default struct foo {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:83:5\n+  --> $DIR/default-on-wrong-item-kind.rs:87:5\n    |\n LL |     default union foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:85:5\n+  --> $DIR/default-on-wrong-item-kind.rs:89:5\n    |\n LL |     default trait foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:87:5\n+  --> $DIR/default-on-wrong-item-kind.rs:91:5\n    |\n LL |     default trait foo = Ord;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:89:5\n+  --> $DIR/default-on-wrong-item-kind.rs:93:5\n    |\n LL |     default impl foo {}\n    |     ^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:93:5\n+  --> $DIR/default-on-wrong-item-kind.rs:99:5\n    |\n LL |     default macro foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:95:5\n+  --> $DIR/default-on-wrong-item-kind.rs:101:5\n    |\n LL |     default macro_rules! foo {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:101:5\n+  --> $DIR/default-on-wrong-item-kind.rs:107:5\n    |\n LL |     default extern crate foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:103:5\n+  --> $DIR/default-on-wrong-item-kind.rs:109:5\n    |\n LL |     default use foo;\n    |     ^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/default-on-wrong-item-kind.rs:105:5\n+  --> $DIR/default-on-wrong-item-kind.rs:111:5\n    |\n LL |     default static foo: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:109:5\n+  --> $DIR/default-on-wrong-item-kind.rs:115:5\n    |\n LL |     default mod foo {}\n    |     ^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:111:5\n+  --> $DIR/default-on-wrong-item-kind.rs:117:5\n    |\n LL |     default extern \"C\" {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:114:5\n+  --> $DIR/default-on-wrong-item-kind.rs:120:5\n    |\n LL |     default enum foo {}\n    |     ^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:116:5\n+  --> $DIR/default-on-wrong-item-kind.rs:122:5\n    |\n LL |     default struct foo {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:118:5\n+  --> $DIR/default-on-wrong-item-kind.rs:124:5\n    |\n LL |     default union foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:120:5\n+  --> $DIR/default-on-wrong-item-kind.rs:126:5\n    |\n LL |     default trait foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:122:5\n+  --> $DIR/default-on-wrong-item-kind.rs:128:5\n    |\n LL |     default trait foo = Ord;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:124:5\n+  --> $DIR/default-on-wrong-item-kind.rs:130:5\n    |\n LL |     default impl foo {}\n    |     ^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:128:5\n+  --> $DIR/default-on-wrong-item-kind.rs:136:5\n    |\n LL |     default macro foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n error: item kind not supported in `trait` or `impl`\n-  --> $DIR/default-on-wrong-item-kind.rs:130:5\n+  --> $DIR/default-on-wrong-item-kind.rs:138:5\n    |\n LL |     default macro_rules! foo {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 69 previous errors\n+error: aborting due to 73 previous errors\n "}]}