{"sha": "f122ad08a57d3e250f0c8c5036327eaa320dd4eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMjJhZDA4YTU3ZDNlMjUwZjBjOGM1MDM2MzI3ZWFhMzIwZGQ0ZWI=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-05-19T17:33:26Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-05-23T05:24:56Z"}, "message": "rustc: middle: ty: use doc comments for the tcx", "tree": {"sha": "0a9aba6fd3702311fbbf87184ecde01cc8106e51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a9aba6fd3702311fbbf87184ecde01cc8106e51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f122ad08a57d3e250f0c8c5036327eaa320dd4eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f122ad08a57d3e250f0c8c5036327eaa320dd4eb", "html_url": "https://github.com/rust-lang/rust/commit/f122ad08a57d3e250f0c8c5036327eaa320dd4eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f122ad08a57d3e250f0c8c5036327eaa320dd4eb/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f8cc1683bc08d15986c617bced79a1f3eb197d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f8cc1683bc08d15986c617bced79a1f3eb197d2", "html_url": "https://github.com/rust-lang/rust/commit/3f8cc1683bc08d15986c617bced79a1f3eb197d2"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "62679fa222bf6121c930015c352ede5eb10f438d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f122ad08a57d3e250f0c8c5036327eaa320dd4eb/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f122ad08a57d3e250f0c8c5036327eaa320dd4eb/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=f122ad08a57d3e250f0c8c5036327eaa320dd4eb", "patch": "@@ -237,8 +237,8 @@ pub enum AutoRef {\n /// generates so that so that it can be reused and doesn't have to be redone\n /// later on.\n pub struct ctxt {\n-    // Specifically use a speedy hash algorithm for this hash map, it's used\n-    // quite often.\n+    /// Specifically use a speedy hash algorithm for this hash map, it's used\n+    /// quite often.\n     pub interner: RefCell<FnvHashMap<intern_key, Box<t_box_>>>,\n     pub next_id: Cell<uint>,\n     pub sess: Session,\n@@ -248,24 +248,24 @@ pub struct ctxt {\n \n     pub region_maps: middle::region::RegionMaps,\n \n-    // Stores the types for various nodes in the AST.  Note that this table\n-    // is not guaranteed to be populated until after typeck.  See\n-    // typeck::check::fn_ctxt for details.\n+    /// Stores the types for various nodes in the AST.  Note that this table\n+    /// is not guaranteed to be populated until after typeck.  See\n+    /// typeck::check::fn_ctxt for details.\n     pub node_types: node_type_table,\n \n-    // Stores the type parameters which were substituted to obtain the type\n-    // of this node.  This only applies to nodes that refer to entities\n-    // param<eterized by type parameters, such as generic fns, types, or\n-    // other items.\n+    /// Stores the type parameters which were substituted to obtain the type\n+    /// of this node.  This only applies to nodes that refer to entities\n+    /// param<eterized by type parameters, such as generic fns, types, or\n+    /// other items.\n     pub item_substs: RefCell<NodeMap<ItemSubsts>>,\n \n-    // Maps from a method to the method \"descriptor\"\n+    /// Maps from a method to the method \"descriptor\"\n     pub methods: RefCell<DefIdMap<Rc<Method>>>,\n \n-    // Maps from a trait def-id to a list of the def-ids of its methods\n+    /// Maps from a trait def-id to a list of the def-ids of its methods\n     pub trait_method_def_ids: RefCell<DefIdMap<Rc<Vec<DefId>>>>,\n \n-    // A cache for the trait_methods() routine\n+    /// A cache for the trait_methods() routine\n     pub trait_methods_cache: RefCell<DefIdMap<Rc<Vec<Rc<Method>>>>>,\n \n     pub impl_trait_cache: RefCell<DefIdMap<Option<Rc<ty::TraitRef>>>>,\n@@ -287,64 +287,64 @@ pub struct ctxt {\n     pub adjustments: RefCell<NodeMap<AutoAdjustment>>,\n     pub normalized_cache: RefCell<HashMap<t, t>>,\n     pub lang_items: middle::lang_items::LanguageItems,\n-    // A mapping of fake provided method def_ids to the default implementation\n+    /// A mapping of fake provided method def_ids to the default implementation\n     pub provided_method_sources: RefCell<DefIdMap<ast::DefId>>,\n     pub supertraits: RefCell<DefIdMap<Rc<Vec<Rc<TraitRef>>>>>,\n     pub superstructs: RefCell<DefIdMap<Option<ast::DefId>>>,\n     pub struct_fields: RefCell<DefIdMap<Rc<Vec<field_ty>>>>,\n \n-    // Maps from def-id of a type or region parameter to its\n-    // (inferred) variance.\n+    /// Maps from def-id of a type or region parameter to its\n+    /// (inferred) variance.\n     pub item_variance_map: RefCell<DefIdMap<Rc<ItemVariances>>>,\n \n-    // A mapping from the def ID of an enum or struct type to the def ID\n-    // of the method that implements its destructor. If the type is not\n-    // present in this map, it does not have a destructor. This map is\n-    // populated during the coherence phase of typechecking.\n+    /// A mapping from the def ID of an enum or struct type to the def ID\n+    /// of the method that implements its destructor. If the type is not\n+    /// present in this map, it does not have a destructor. This map is\n+    /// populated during the coherence phase of typechecking.\n     pub destructor_for_type: RefCell<DefIdMap<ast::DefId>>,\n \n-    // A method will be in this list if and only if it is a destructor.\n+    /// A method will be in this list if and only if it is a destructor.\n     pub destructors: RefCell<DefIdSet>,\n \n-    // Maps a trait onto a list of impls of that trait.\n+    /// Maps a trait onto a list of impls of that trait.\n     pub trait_impls: RefCell<DefIdMap<Rc<RefCell<Vec<ast::DefId>>>>>,\n \n-    // Maps a DefId of a type to a list of its inherent impls.\n-    // Contains implementations of methods that are inherent to a type.\n-    // Methods in these implementations don't need to be exported.\n+    /// Maps a DefId of a type to a list of its inherent impls.\n+    /// Contains implementations of methods that are inherent to a type.\n+    /// Methods in these implementations don't need to be exported.\n     pub inherent_impls: RefCell<DefIdMap<Rc<RefCell<Vec<ast::DefId>>>>>,\n \n-    // Maps a DefId of an impl to a list of its methods.\n-    // Note that this contains all of the impls that we know about,\n-    // including ones in other crates. It's not clear that this is the best\n-    // way to do it.\n+    /// Maps a DefId of an impl to a list of its methods.\n+    /// Note that this contains all of the impls that we know about,\n+    /// including ones in other crates. It's not clear that this is the best\n+    /// way to do it.\n     pub impl_methods: RefCell<DefIdMap<Vec<ast::DefId>>>,\n \n-    // Set of used unsafe nodes (functions or blocks). Unsafe nodes not\n-    // present in this set can be warned about.\n+    /// Set of used unsafe nodes (functions or blocks). Unsafe nodes not\n+    /// present in this set can be warned about.\n     pub used_unsafe: RefCell<NodeSet>,\n \n-    // Set of nodes which mark locals as mutable which end up getting used at\n-    // some point. Local variable definitions not in this set can be warned\n-    // about.\n+    /// Set of nodes which mark locals as mutable which end up getting used at\n+    /// some point. Local variable definitions not in this set can be warned\n+    /// about.\n     pub used_mut_nodes: RefCell<NodeSet>,\n \n-    // vtable resolution information for impl declarations\n+    /// vtable resolution information for impl declarations\n     pub impl_vtables: typeck::impl_vtable_map,\n \n-    // The set of external nominal types whose implementations have been read.\n-    // This is used for lazy resolution of methods.\n+    /// The set of external nominal types whose implementations have been read.\n+    /// This is used for lazy resolution of methods.\n     pub populated_external_types: RefCell<DefIdSet>,\n \n-    // The set of external traits whose implementations have been read. This\n-    // is used for lazy resolution of traits.\n+    /// The set of external traits whose implementations have been read. This\n+    /// is used for lazy resolution of traits.\n     pub populated_external_traits: RefCell<DefIdSet>,\n \n-    // Borrows\n+    /// Borrows\n     pub upvar_borrow_map: RefCell<UpvarBorrowMap>,\n \n-    // These two caches are used by const_eval when decoding external statics\n-    // and variants that are found.\n+    /// These two caches are used by const_eval when decoding external statics\n+    /// and variants that are found.\n     pub extern_const_statics: RefCell<DefIdMap<Option<@ast::Expr>>>,\n     pub extern_const_variants: RefCell<DefIdMap<Option<@ast::Expr>>>,\n "}]}