{"sha": "1e4269cb83a14f53851460c4780ff06d0a9f1d50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNDI2OWNiODNhMTRmNTM4NTE0NjBjNDc4MGZmMDZkMGE5ZjFkNTA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-05-26T12:12:38Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-05-26T12:20:23Z"}, "message": "Add `Ident::as_str` helper", "tree": {"sha": "d0de1096bf6562f34c4291b51d150e7ebb629783", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0de1096bf6562f34c4291b51d150e7ebb629783"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e4269cb83a14f53851460c4780ff06d0a9f1d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e4269cb83a14f53851460c4780ff06d0a9f1d50", "html_url": "https://github.com/rust-lang/rust/commit/1e4269cb83a14f53851460c4780ff06d0a9f1d50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e4269cb83a14f53851460c4780ff06d0a9f1d50/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "189c0a1297f9341fd25f4c0a0f09c47610cdcbf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/189c0a1297f9341fd25f4c0a0f09c47610cdcbf1", "html_url": "https://github.com/rust-lang/rust/commit/189c0a1297f9341fd25f4c0a0f09c47610cdcbf1"}], "stats": {"total": 96, "additions": 50, "deletions": 46}, "files": [{"sha": "2f645cf0470c0bc7488aaf394286ce8d89fb5107", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -208,7 +208,7 @@ impl LintPass for Pass {\n \n impl EarlyLintPass for Pass {\n     fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n-        if it.ident.name.as_str() == \"lintme\" {\n+        if it.ident.as_str() == \"lintme\" {\n             cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n         }\n     }"}, {"sha": "0229bad6973261f9a7c65862a83d365174689864", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -1214,14 +1214,14 @@ impl TokenTree {\n             SingleQuote => op!('\\''),\n \n             Ident(ident, false) => {\n-                tt!(self::Ident::new(&ident.name.as_str(), Span(span)))\n+                tt!(self::Ident::new(&ident.as_str(), Span(span)))\n             }\n             Ident(ident, true) => {\n-                tt!(self::Ident::new_raw(&ident.name.as_str(), Span(span)))\n+                tt!(self::Ident::new_raw(&ident.as_str(), Span(span)))\n             }\n             Lifetime(ident) => {\n                 let ident = ident.without_first_quote();\n-                stack.push(tt!(self::Ident::new(&ident.name.as_str(), Span(span))));\n+                stack.push(tt!(self::Ident::new(&ident.as_str(), Span(span))));\n                 tt!(Punct::new('\\'', Spacing::Joint))\n             }\n             Literal(lit, suffix) => tt!(self::Literal { lit, suffix, span: Span(span) }),"}, {"sha": "ebc59964172ac340fb21a79375ab2df9f3c60727", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -1983,7 +1983,7 @@ pub struct StructField {\n impl StructField {\n     // Still necessary in couple of places\n     pub fn is_positional(&self) -> bool {\n-        let first = self.ident.name.as_str().as_bytes()[0];\n+        let first = self.ident.as_str().as_bytes()[0];\n         first >= b'0' && first <= b'9'\n     }\n }"}, {"sha": "4bee4f9add025136d7a8a8268ba5e03ab07d2776", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -1565,7 +1565,7 @@ impl<'a> State<'a> {\n         if ident.is_raw_guess() {\n             self.s.word(&format!(\"r#{}\", ident.name))?;\n         } else {\n-            self.s.word(&ident.name.as_str())?;\n+            self.s.word(&ident.as_str())?;\n         }\n         self.ann.post(self, NodeName(&ident.name))\n     }"}, {"sha": "d35884ec78a82b5a37a4289ecc22eddc7fd1c377", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -1774,7 +1774,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             CtorKind::Fictive => {\n                                 let mut struct_fmt = fmt.debug_struct(\"\");\n                                 for (field, place) in variant_def.fields.iter().zip(places) {\n-                                    struct_fmt.field(&field.ident.name.as_str(), place);\n+                                    struct_fmt.field(&field.ident.as_str(), place);\n                                 }\n                                 struct_fmt.finish()\n                             }"}, {"sha": "123816c1f97dfc8ef9fa000ee81a23ff19d40dfd", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -363,7 +363,7 @@ impl SymbolPathBuffer {\n             result: String::with_capacity(64),\n             temp_buf: String::with_capacity(16),\n         };\n-        result.result.push_str(&symbol.name.as_str());\n+        result.result.push_str(&symbol.as_str());\n         result\n     }\n "}, {"sha": "dbf756f80ca3853bb492549b8213171dd29139bb", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -324,7 +324,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n                         _: &hir::Generics,\n                         _: ast::NodeId) {\n         for sf in s.fields() {\n-            self.check_snake_case(cx, \"structure field\", &sf.ident.name.as_str(), Some(sf.span));\n+            self.check_snake_case(cx, \"structure field\", &sf.ident.as_str(), Some(sf.span));\n         }\n     }\n }"}, {"sha": "f83ea6fa13b5284b1fb1cb349f181d2f987fe127", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -772,7 +772,7 @@ fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             debug!(\"CodegenUnit {}:\", cgu.name());\n \n             for (mono_item, linkage) in cgu.items() {\n-                let symbol_name = mono_item.symbol_name(tcx).name.as_str();\n+                let symbol_name = mono_item.symbol_name(tcx).as_str();\n                 let symbol_hash_start = symbol_name.rfind('h');\n                 let symbol_hash = symbol_hash_start.map(|i| &symbol_name[i ..])\n                                                    .unwrap_or(\"<no hash>\");"}, {"sha": "41b44f717c944bf8e4e541bb44f243662d82a33f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -1060,7 +1060,7 @@ impl<'a> ModuleData<'a> {\n     fn for_each_child_stable<F: FnMut(Ident, Namespace, &'a NameBinding<'a>)>(&self, mut f: F) {\n         let resolutions = self.resolutions.borrow();\n         let mut resolutions = resolutions.iter().collect::<Vec<_>>();\n-        resolutions.sort_by_cached_key(|&(&(ident, ns), _)| (ident.name.as_str(), ns));\n+        resolutions.sort_by_cached_key(|&(&(ident, ns), _)| (ident.as_str(), ns));\n         for &(&(ident, ns), &resolution) in resolutions.iter() {\n             resolution.borrow().binding.map(|binding| f(ident, ns, binding));\n         }\n@@ -2608,7 +2608,7 @@ impl<'a> Resolver<'a> {\n                     self,\n                     ident.span,\n                     ResolutionError::IdentifierBoundMoreThanOnceInSamePattern(\n-                        &ident.name.as_str())\n+                        &ident.as_str())\n                 );\n             }\n             Some(..) if pat_src == PatternSource::FnParam => {\n@@ -2617,7 +2617,7 @@ impl<'a> Resolver<'a> {\n                     self,\n                     ident.span,\n                     ResolutionError::IdentifierBoundMoreThanOnceInParameterList(\n-                        &ident.name.as_str())\n+                        &ident.as_str())\n                 );\n             }\n             Some(..) if pat_src == PatternSource::Match ||\n@@ -3765,12 +3765,12 @@ impl<'a> Resolver<'a> {\n                         // the closest match\n                         let close_match = self.search_label(label.ident, |rib, ident| {\n                             let names = rib.bindings.iter().map(|(id, _)| &id.name);\n-                            find_best_match_for_name(names, &*ident.name.as_str(), None)\n+                            find_best_match_for_name(names, &*ident.as_str(), None)\n                         });\n                         self.record_def(expr.id, err_path_resolution());\n                         resolve_error(self,\n                                       label.ident.span,\n-                                      ResolutionError::UndeclaredLabel(&label.ident.name.as_str(),\n+                                      ResolutionError::UndeclaredLabel(&label.ident.as_str(),\n                                                                        close_match));\n                     }\n                     Some(Def::Label(id)) => {\n@@ -4380,7 +4380,7 @@ fn names_to_string(idents: &[Ident]) -> String {\n         if i > 0 {\n             result.push_str(\"::\");\n         }\n-        result.push_str(&ident.name.as_str());\n+        result.push_str(&ident.as_str());\n     }\n     result\n }"}, {"sha": "297c42f961599c9d2712330520c4a5daf79b0e85", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -649,7 +649,7 @@ impl<'a> Resolver<'a> {\n                             format!(\"cannot find derive macro `{}` in this scope\", ident),\n                     };\n                     let mut err = self.session.struct_span_err(span, &msg);\n-                    self.suggest_macro_name(&ident.name.as_str(), kind, &mut err, span);\n+                    self.suggest_macro_name(&ident.as_str(), kind, &mut err, span);\n                     err.emit();\n                 },\n                 _ => {},"}, {"sha": "34f84597adfc52fed487351dcd4ec0614f4fa28b", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -831,7 +831,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                     }\n                 });\n                 let lev_suggestion =\n-                    match find_best_match_for_name(names, &ident.name.as_str(), None) {\n+                    match find_best_match_for_name(names, &ident.as_str(), None) {\n                         Some(name) => format!(\". Did you mean to use `{}`?\", name),\n                         None => \"\".to_owned(),\n                     };"}, {"sha": "9a994e0e1de8b2afbc1849fd60eddc82cad5a03c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -3076,7 +3076,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 }\n                 ty::TyTuple(ref tys) => {\n-                    let fstr = field.name.as_str();\n+                    let fstr = field.as_str();\n                     if let Ok(index) = fstr.parse::<usize>() {\n                         if fstr == index.to_string() {\n                             if let Some(field_ty) = tys.get(index) {\n@@ -3123,7 +3123,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     ty::TyAdt(def, _) if !def.is_enum() => {\n                         if let Some(suggested_field_name) =\n                             Self::suggest_field_name(def.non_enum_variant(),\n-                                                     &field.name.as_str(), vec![]) {\n+                                                     &field.as_str(), vec![]) {\n                                 err.span_label(field.span,\n                                                format!(\"did you mean `{}`?\", suggested_field_name));\n                             } else {\n@@ -3161,7 +3161,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                           -> Option<Symbol> {\n         let names = variant.fields.iter().filter_map(|field| {\n             // ignore already set fields and private fields from non-local crates\n-            if skip.iter().any(|x| *x == field.ident.name.as_str()) ||\n+            if skip.iter().any(|x| *x == field.ident.as_str()) ||\n                (variant.did.krate != LOCAL_CRATE && field.vis != Visibility::Public) {\n                 None\n             } else {\n@@ -3223,9 +3223,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             },\n             ty);\n         // prevent all specified fields from being suggested\n-        let skip_fields = skip_fields.iter().map(|ref x| x.ident.name.as_str());\n+        let skip_fields = skip_fields.iter().map(|ref x| x.ident.as_str());\n         if let Some(field_name) = Self::suggest_field_name(variant,\n-                                                           &field.ident.name.as_str(),\n+                                                           &field.ident.as_str(),\n                                                            skip_fields.collect()) {\n             err.span_label(field.ident.span,\n                            format!(\"field does not exist - did you mean `{}`?\", field_name));\n@@ -3334,7 +3334,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n             let mut displayable_field_names = remaining_fields\n                                               .keys()\n-                                              .map(|ident| ident.name.as_str())\n+                                              .map(|ident| ident.as_str())\n                                               .collect::<Vec<_>>();\n \n             displayable_field_names.sort();"}, {"sha": "5939d5341e324a5cc28f3d222b021c1a2607eacf", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -324,7 +324,7 @@ impl<'a> Classifier<'a> {\n \n             // Keywords are also included in the identifier set.\n             token::Ident(ident, is_raw) => {\n-                match &*ident.name.as_str() {\n+                match &*ident.as_str() {\n                     \"ref\" | \"mut\" if !is_raw => Class::RefKeyWord,\n \n                     \"self\" | \"Self\" => Class::Self_,"}, {"sha": "ca0293aca6e77ad0e22631172568c78247c14c4b", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -162,7 +162,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n         ecx.parse_sess.registered_diagnostics.with_lock(|diagnostics| {\n             if let Err(e) = output_metadata(ecx,\n                                             &target_triple,\n-                                            &crate_name.name.as_str(),\n+                                            &crate_name.as_str(),\n                                             diagnostics) {\n                 ecx.span_bug(span, &format!(\n                     \"error writing metadata for triple `{}` and crate `{}`, error: {}, \\"}, {"sha": "667105a534aa3b704805de078d20376d1d4b6162", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -178,7 +178,7 @@ fn macro_bang_format(path: &ast::Path) -> ExpnFormat {\n         if segment.ident.name != keywords::CrateRoot.name() &&\n             segment.ident.name != keywords::DollarCrate.name()\n         {\n-            path_str.push_str(&segment.ident.name.as_str())\n+            path_str.push_str(&segment.ident.as_str())\n         }\n     }\n \n@@ -1266,7 +1266,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                             DirectoryOwnership::Owned { relative: None };\n                         module.directory.push(&*path.as_str());\n                     } else {\n-                        module.directory.push(&*item.ident.name.as_str());\n+                        module.directory.push(&*item.ident.as_str());\n                     }\n                 } else {\n                     let path = self.cx.parse_sess.codemap().span_to_unmapped_path(inner);"}, {"sha": "058317e05c7f7faab0b0abe5ddb297f1dca612f9", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -573,7 +573,7 @@ fn inner_parse_loop<'a>(\n                 TokenTree::MetaVarDecl(_, _, id) => {\n                     // Built-in nonterminals never start with these tokens,\n                     // so we can eliminate them from consideration.\n-                    if may_begin_with(&*id.name.as_str(), token) {\n+                    if may_begin_with(&*id.as_str(), token) {\n                         bb_items.push(item);\n                     }\n                 }\n@@ -742,7 +742,7 @@ pub fn parse(\n                 let match_cur = item.match_cur;\n                 item.push_match(\n                     match_cur,\n-                    MatchedNonterminal(Rc::new(parse_nt(&mut parser, span, &ident.name.as_str()))),\n+                    MatchedNonterminal(Rc::new(parse_nt(&mut parser, span, &ident.as_str()))),\n                 );\n                 item.idx += 1;\n                 item.match_cur += 1;"}, {"sha": "2e6d590c333cf562ae1bbc187258012e6ffb2a05", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -148,7 +148,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                 };\n                 let mut p = Parser::new(cx.parse_sess(), tts, Some(directory), true, false);\n                 p.root_module_name = cx.current_expansion.module.mod_path.last()\n-                    .map(|id| id.name.as_str().to_string());\n+                    .map(|id| id.as_str().to_string());\n \n                 p.process_potential_macro_variable();\n                 // Let the context choose how to interpret the result.\n@@ -730,7 +730,7 @@ fn check_matcher_core(sess: &ParseSess,\n         'each_last: for token in &last.tokens {\n             if let TokenTree::MetaVarDecl(_, ref name, ref frag_spec) = *token {\n                 for next_token in &suffix_first.tokens {\n-                    match is_in_follow(next_token, &frag_spec.name.as_str()) {\n+                    match is_in_follow(next_token, &frag_spec.as_str()) {\n                         Err((msg, help)) => {\n                             sess.span_diagnostic.struct_span_err(next_token.span(), &msg)\n                                 .help(help).emit();\n@@ -768,7 +768,7 @@ fn check_matcher_core(sess: &ParseSess,\n \n fn token_can_be_followed_by_any(tok: &quoted::TokenTree) -> bool {\n     if let quoted::TokenTree::MetaVarDecl(_, _, frag_spec) = *tok {\n-        frag_can_be_followed_by_any(&frag_spec.name.as_str())\n+        frag_can_be_followed_by_any(&frag_spec.as_str())\n     } else {\n         // (Non NT's can always be followed by anthing in matchers.)\n         true\n@@ -893,7 +893,7 @@ fn has_legal_fragment_specifier(sess: &ParseSess,\n                                 tok: &quoted::TokenTree) -> Result<(), String> {\n     debug!(\"has_legal_fragment_specifier({:?})\", tok);\n     if let quoted::TokenTree::MetaVarDecl(_, _, ref frag_spec) = *tok {\n-        let frag_name = frag_spec.name.as_str();\n+        let frag_name = frag_spec.as_str();\n         let frag_span = tok.span();\n         if !is_legal_fragment_specifier(sess, features, attrs, &frag_name, frag_span) {\n             return Err(frag_name.to_string());"}, {"sha": "4d38d29287662ae27aa008daa1c16703dacb5604", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -6054,7 +6054,7 @@ impl<'a> Parser<'a> {\n             self.directory.path.to_mut().push(&path.as_str());\n             self.directory.ownership = DirectoryOwnership::Owned { relative: None };\n         } else {\n-            self.directory.path.to_mut().push(&id.name.as_str());\n+            self.directory.path.to_mut().push(&id.as_str());\n         }\n     }\n \n@@ -6075,7 +6075,7 @@ impl<'a> Parser<'a> {\n         // `./<id>.rs` and `./<id>/mod.rs`.\n         let relative_prefix_string;\n         let relative_prefix = if let Some(ident) = relative {\n-            relative_prefix_string = format!(\"{}{}\", ident.name.as_str(), path::MAIN_SEPARATOR);\n+            relative_prefix_string = format!(\"{}{}\", ident.as_str(), path::MAIN_SEPARATOR);\n             &relative_prefix_string\n         } else {\n             \"\""}, {"sha": "9770fbca8f86cfab0e8500d4933bc5c2208e7be7", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -341,7 +341,7 @@ impl Token {\n     /// string slice.\n     pub fn is_ident_named(&self, name: &str) -> bool {\n         match self.ident() {\n-            Some((ident, _)) => ident.name.as_str() == name,\n+            Some((ident, _)) => ident.as_str() == name,\n             None => false\n         }\n     }"}, {"sha": "d8e70a9045c9d483d7d1baa9bdf5c184623bb14e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -724,7 +724,7 @@ pub trait PrintState<'a> {\n             if segment.ident.name != keywords::CrateRoot.name() &&\n                segment.ident.name != keywords::DollarCrate.name()\n             {\n-                self.writer().word(&segment.ident.name.as_str())?;\n+                self.writer().word(&segment.ident.as_str())?;\n             } else if segment.ident.name == keywords::DollarCrate.name() {\n                 self.print_dollar_crate(segment.ident.span.ctxt())?;\n             }\n@@ -2373,7 +2373,7 @@ impl<'a> State<'a> {\n         if ident.is_raw_guess() {\n             self.s.word(&format!(\"r#{}\", ident))?;\n         } else {\n-            self.s.word(&ident.name.as_str())?;\n+            self.s.word(&ident.as_str())?;\n         }\n         self.ann.post(self, NodeIdent(&ident))\n     }"}, {"sha": "e63a3d47a828fdfde53e4e649b0c61e43e7261b3", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -647,7 +647,7 @@ fn path_name_i(idents: &[Ident]) -> String {\n     let mut path_name = \"\".to_string();\n     let mut idents_iter = idents.iter().peekable();\n     while let Some(ident) = idents_iter.next() {\n-        path_name.push_str(&ident.name.as_str());\n+        path_name.push_str(&ident.as_str());\n         if let Some(_) = idents_iter.peek() {\n             path_name.push_str(\"::\")\n         }"}, {"sha": "828c24708416732e2708a77c8e5284b4fa2be032", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -49,7 +49,7 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,\n         } else {\n             match *e {\n                 TokenTree::Token(_, token::Ident(ident, _)) =>\n-                    res_str.push_str(&ident.name.as_str()),\n+                    res_str.push_str(&ident.as_str()),\n                 _ => {\n                     cx.span_err(sp, \"concat_idents! requires ident args.\");\n                     return DummyResult::expr(sp);"}, {"sha": "a5b348a661a78a5ed78e2f7f24022a945d79753a", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -136,7 +136,7 @@ fn hygienic_type_parameter(item: &Annotatable, base: &str) -> String {\n             ast::ItemKind::Enum(_, ast::Generics { ref params, .. }) => {\n                 for param in params.iter() {\n                     if let ast::GenericParam::Type(ref ty) = *param{\n-                        typaram.push_str(&ty.ident.name.as_str());\n+                        typaram.push_str(&ty.ident.as_str());\n                     }\n                 }\n             }"}, {"sha": "4bf764b1101fa6f1ffae26c15a65f5aaff2a31c7", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -166,7 +166,7 @@ fn parse_args(ecx: &mut ExtCtxt,\n                     return None;\n                 }\n             };\n-            let name: &str = &ident.name.as_str();\n+            let name: &str = &ident.as_str();\n \n             panictry!(p.expect(&token::Eq));\n             let e = panictry!(p.parse_expr());"}, {"sha": "a4b2d9de932a71194994202cfa4fc548b29dcce1", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4269cb83a14f53851460c4780ff06d0a9f1d50/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=1e4269cb83a14f53851460c4780ff06d0a9f1d50", "patch": "@@ -56,7 +56,7 @@ impl Ident {\n     }\n \n     pub fn without_first_quote(self) -> Ident {\n-        Ident::new(Symbol::intern(self.name.as_str().trim_left_matches('\\'')), self.span)\n+        Ident::new(Symbol::intern(self.as_str().trim_left_matches('\\'')), self.span)\n     }\n \n     pub fn modern(self) -> Ident {\n@@ -66,6 +66,10 @@ impl Ident {\n     pub fn gensym(self) -> Ident {\n         Ident::new(self.name.gensymed(), self.span)\n     }\n+\n+    pub fn as_str(self) -> LocalInternedString {\n+        self.name.as_str()\n+    }\n }\n \n impl PartialEq for Ident {\n@@ -96,10 +100,10 @@ impl fmt::Display for Ident {\n impl Encodable for Ident {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         if self.span.ctxt().modern() == SyntaxContext::empty() {\n-            s.emit_str(&self.name.as_str())\n+            s.emit_str(&self.as_str())\n         } else { // FIXME(jseyfried) intercrate hygiene\n             let mut string = \"#\".to_owned();\n-            string.push_str(&self.name.as_str());\n+            string.push_str(&self.as_str());\n             s.emit_str(&string)\n         }\n     }"}]}