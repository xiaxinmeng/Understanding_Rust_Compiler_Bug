{"sha": "df886468288c78300079bd49b3b6f9f14f5a5617", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmODg2NDY4Mjg4Yzc4MzAwMDc5YmQ0OWIzYjZmOWYxNGY1YTU2MTc=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-06-22T23:20:44Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-07-03T03:22:34Z"}, "message": "librustc: Don't schedule redundant cleanups.", "tree": {"sha": "49fa1aff75fde462ea6de828de3219393e0844a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49fa1aff75fde462ea6de828de3219393e0844a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df886468288c78300079bd49b3b6f9f14f5a5617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df886468288c78300079bd49b3b6f9f14f5a5617", "html_url": "https://github.com/rust-lang/rust/commit/df886468288c78300079bd49b3b6f9f14f5a5617", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df886468288c78300079bd49b3b6f9f14f5a5617/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bedc41b257d3d575c00a86c52597e6f1e0fb3e2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bedc41b257d3d575c00a86c52597e6f1e0fb3e2e", "html_url": "https://github.com/rust-lang/rust/commit/bedc41b257d3d575c00a86c52597e6f1e0fb3e2e"}], "stats": {"total": 27, "additions": 5, "deletions": 22}, "files": [{"sha": "091cfc706de6e385f5609c10caa105e1ac6677c9", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/df886468288c78300079bd49b3b6f9f14f5a5617/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df886468288c78300079bd49b3b6f9f14f5a5617/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=df886468288c78300079bd49b3b6f9f14f5a5617", "patch": "@@ -1255,16 +1255,13 @@ fn compare_values<'a>(\n }\n \n fn insert_lllocals<'a>(mut bcx: &'a Block<'a>,\n-                       bindings_map: &BindingsMap,\n-                       cleanup_scope: cleanup::ScopeId)\n+                       bindings_map: &BindingsMap)\n                        -> &'a Block<'a> {\n     /*!\n      * For each binding in `data.bindings_map`, adds an appropriate entry into\n-     * the `fcx.lllocals` map, scheduling cleanup in `cleanup_scope`.\n+     * the `fcx.lllocals` map\n      */\n \n-    let fcx = bcx.fcx;\n-\n     for (&ident, &binding_info) in bindings_map.iter() {\n         let llval = match binding_info.trmode {\n             // By value mut binding for a copy type: load from the ptr\n@@ -1285,7 +1282,6 @@ fn insert_lllocals<'a>(mut bcx: &'a Block<'a>,\n         };\n \n         let datum = Datum::new(llval, binding_info.ty, Lvalue);\n-        fcx.schedule_drop_mem(cleanup_scope, llval, binding_info.ty);\n \n         debug!(\"binding {:?} to {}\",\n                binding_info.id,\n@@ -1317,21 +1313,11 @@ fn compile_guard<'a, 'b>(\n            vec_map_to_str(vals, |v| bcx.val_to_str(*v)));\n     let _indenter = indenter();\n \n-    // Lest the guard itself should fail, introduce a temporary cleanup\n-    // scope for any non-ref bindings we create.\n-    let temp_scope = bcx.fcx.push_custom_cleanup_scope();\n-\n-    let mut bcx = insert_lllocals(bcx, &data.bindings_map,\n-                                  cleanup::CustomScope(temp_scope));\n+    let mut bcx = insert_lllocals(bcx, &data.bindings_map);\n \n     let val = unpack_datum!(bcx, expr::trans(bcx, guard_expr));\n     let val = val.to_llbool(bcx);\n \n-    // Cancel cleanups now that the guard successfully executed.  If\n-    // the guard was false, we will drop the values explicitly\n-    // below. Otherwise, we'll add lvalue cleanups at the end.\n-    bcx.fcx.pop_custom_cleanup_scope(temp_scope);\n-\n     return with_cond(bcx, Not(bcx, val), |bcx| {\n         // Guard does not match: remove all bindings from the lllocals table\n         for (_, &binding_info) in data.bindings_map.iter() {\n@@ -1884,12 +1870,9 @@ fn trans_match_inner<'a>(scope_cx: &'a Block<'a>,\n     for arm_data in arm_datas.iter() {\n         let mut bcx = arm_data.bodycx;\n \n-        // insert bindings into the lllocals map and add cleanups\n-        let cleanup_scope = fcx.push_custom_cleanup_scope();\n-        bcx = insert_lllocals(bcx, &arm_data.bindings_map,\n-                              cleanup::CustomScope(cleanup_scope));\n+        // insert bindings into the lllocals map\n+        bcx = insert_lllocals(bcx, &arm_data.bindings_map);\n         bcx = expr::trans_into(bcx, &*arm_data.arm.body, dest);\n-        bcx = fcx.pop_and_trans_custom_cleanup_scope(bcx, cleanup_scope);\n         arm_cxs.push(bcx);\n     }\n "}]}