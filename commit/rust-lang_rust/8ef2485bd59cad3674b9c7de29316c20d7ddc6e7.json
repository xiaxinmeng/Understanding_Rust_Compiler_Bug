{"sha": "8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "node_id": "C_kwDOAAsO6NoAKDhlZjI0ODViZDU5Y2FkMzY3NGI5YzdkZTI5MzE2YzIwZDdkZGM2ZTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-12T14:30:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-12T14:30:34Z"}, "message": "Auto merge of #103812 - clubby789:improve-include-bytes, r=petrochenkov\n\nDelay `include_bytes` to AST lowering\n\nHopefully addresses #65818.\nThis PR introduces a new `ExprKind::IncludedBytes` which stores the path and bytes of a file included with `include_bytes!()`. We can then create a literal from the bytes during AST lowering, which means we don't need to escape the bytes into valid UTF8 which is the cause of most of the overhead of embedding large binary blobs.", "tree": {"sha": "0f5a468b9b61a80e457f3181a048e05d40a6a7e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f5a468b9b61a80e457f3181a048e05d40a6a7e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "html_url": "https://github.com/rust-lang/rust/commit/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa05f99001924004757ebd44b54bb6a4dd30c8bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa05f99001924004757ebd44b54bb6a4dd30c8bd", "html_url": "https://github.com/rust-lang/rust/commit/aa05f99001924004757ebd44b54bb6a4dd30c8bd"}, {"sha": "b2da155a9aae875e6c2f5df52d8f87e734c88be7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2da155a9aae875e6c2f5df52d8f87e734c88be7", "html_url": "https://github.com/rust-lang/rust/commit/b2da155a9aae875e6c2f5df52d8f87e734c88be7"}], "stats": {"total": 93, "additions": 78, "deletions": 15}, "files": [{"sha": "c999b06b0ab2d5b3cc247bb63c94f1596bc061b9", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -1208,7 +1208,7 @@ impl Expr {\n             ExprKind::Tup(_) => ExprPrecedence::Tup,\n             ExprKind::Binary(op, ..) => ExprPrecedence::Binary(op.node),\n             ExprKind::Unary(..) => ExprPrecedence::Unary,\n-            ExprKind::Lit(_) => ExprPrecedence::Lit,\n+            ExprKind::Lit(_) | ExprKind::IncludedBytes(..) => ExprPrecedence::Lit,\n             ExprKind::Type(..) | ExprKind::Cast(..) => ExprPrecedence::Cast,\n             ExprKind::Let(..) => ExprPrecedence::Let,\n             ExprKind::If(..) => ExprPrecedence::If,\n@@ -1446,6 +1446,12 @@ pub enum ExprKind {\n     /// with an optional value to be returned.\n     Yeet(Option<P<Expr>>),\n \n+    /// Bytes included via `include_bytes!`\n+    /// Added for optimization purposes to avoid the need to escape\n+    /// large binary blobs - should always behave like [`ExprKind::Lit`]\n+    /// with a `ByteStr` literal.\n+    IncludedBytes(Lrc<[u8]>),\n+\n     /// Placeholder for an expression that wasn't syntactically well formed in some way.\n     Err,\n }"}, {"sha": "3ab8267263d116506ba99ab75cc0e7096675dfc6", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -1428,7 +1428,7 @@ pub fn noop_visit_expr<T: MutVisitor>(\n         }\n         ExprKind::Try(expr) => vis.visit_expr(expr),\n         ExprKind::TryBlock(body) => vis.visit_block(body),\n-        ExprKind::Lit(_) | ExprKind::Err => {}\n+        ExprKind::Lit(_) | ExprKind::IncludedBytes(..) | ExprKind::Err => {}\n     }\n     vis.visit_id(id);\n     vis.visit_span(span);"}, {"sha": "e267f8cd10027d349f8dacb4a8d808cc88df76f9", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -2,6 +2,7 @@\n \n use crate::ast::{self, Lit, LitKind};\n use crate::token::{self, Token};\n+use rustc_data_structures::sync::Lrc;\n use rustc_lexer::unescape::{byte_from_char, unescape_byte, unescape_char, unescape_literal, Mode};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n@@ -231,6 +232,13 @@ impl Lit {\n         Lit { token_lit: kind.to_token_lit(), kind, span }\n     }\n \n+    /// Recovers an AST literal from a string of bytes produced by `include_bytes!`.\n+    /// This requires ASCII-escaping the string, which can result in poor performance\n+    /// for very large strings of bytes.\n+    pub fn from_included_bytes(bytes: &Lrc<[u8]>, span: Span) -> Lit {\n+        Self::from_lit_kind(LitKind::ByteStr(bytes.clone()), span)\n+    }\n+\n     /// Losslessly convert an AST literal into a token.\n     pub fn to_token(&self) -> Token {\n         let kind = match self.token_lit.kind {"}, {"sha": "9053a5a1d64aa0344a330bbf2d847762f9d9a8b1", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -901,7 +901,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         }\n         ExprKind::Try(ref subexpression) => visitor.visit_expr(subexpression),\n         ExprKind::TryBlock(ref body) => visitor.visit_block(body),\n-        ExprKind::Lit(_) | ExprKind::Err => {}\n+        ExprKind::Lit(_) | ExprKind::IncludedBytes(..) | ExprKind::Err => {}\n     }\n \n     visitor.visit_expr_post(expression)"}, {"sha": "a4ae493af86bf6a23fc3b0df42d6138c6454e85d", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -87,6 +87,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ExprKind::Lit(ref l) => {\n                     hir::ExprKind::Lit(respan(self.lower_span(l.span), l.kind.clone()))\n                 }\n+                ExprKind::IncludedBytes(ref bytes) => hir::ExprKind::Lit(respan(\n+                    self.lower_span(e.span),\n+                    LitKind::ByteStr(bytes.clone()),\n+                )),\n                 ExprKind::Cast(ref expr, ref ty) => {\n                     let expr = self.lower_expr(expr);\n                     let ty ="}, {"sha": "7fdfc79164b48fba2142824f1b829ace1af07094", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -323,7 +323,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     // ```\n     fn lower_expr_within_pat(&mut self, expr: &Expr, allow_paths: bool) -> &'hir hir::Expr<'hir> {\n         match expr.kind {\n-            ExprKind::Lit(..) | ExprKind::ConstBlock(..) | ExprKind::Err => {}\n+            ExprKind::Lit(..)\n+            | ExprKind::ConstBlock(..)\n+            | ExprKind::IncludedBytes(..)\n+            | ExprKind::Err => {}\n             ExprKind::Path(..) if allow_paths => {}\n             ExprKind::Unary(UnOp::Neg, ref inner) if matches!(inner.kind, ExprKind::Lit(_)) => {}\n             _ => {"}, {"sha": "930276242c3c361f9e72f525348ff09335ba5031", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -322,6 +322,10 @@ impl<'a> State<'a> {\n             ast::ExprKind::Lit(ref lit) => {\n                 self.print_literal(lit);\n             }\n+            ast::ExprKind::IncludedBytes(ref bytes) => {\n+                let lit = ast::Lit::from_included_bytes(bytes, expr.span);\n+                self.print_literal(&lit)\n+            }\n             ast::ExprKind::Cast(ref expr, ref ty) => {\n                 let prec = AssocOp::As.precedence() as i8;\n                 self.print_expr_maybe_paren(expr, prec);"}, {"sha": "f72cd14bea0436e574a7a0f90ee26af58552fe72", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -303,6 +303,7 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             | ExprKind::Field(_, _)\n             | ExprKind::ForLoop(_, _, _, _)\n             | ExprKind::If(_, _, _)\n+            | ExprKind::IncludedBytes(..)\n             | ExprKind::InlineAsm(_)\n             | ExprKind::Let(_, _, _)\n             | ExprKind::Lit(_)"}, {"sha": "01454d0e98e699cc14096654cc5c50ebd780f0d9", "filename": "compiler/rustc_builtin_macros/src/concat.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -43,6 +43,9 @@ pub fn expand_concat(\n                     has_errors = true;\n                 }\n             },\n+            ast::ExprKind::IncludedBytes(..) => {\n+                cx.span_err(e.span, \"cannot concatenate a byte string literal\")\n+            }\n             ast::ExprKind::Err => {\n                 has_errors = true;\n             }"}, {"sha": "4886ca786a588bc5de61de819a1f49e4884bb25e", "filename": "compiler/rustc_builtin_macros/src/concat_bytes.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -108,6 +108,16 @@ fn handle_array_element(\n                 None\n             }\n         },\n+        ast::ExprKind::IncludedBytes(..) => {\n+            if !*has_errors {\n+                cx.struct_span_err(expr.span, \"cannot concatenate doubly nested array\")\n+                    .note(\"byte strings are treated as arrays of bytes\")\n+                    .help(\"try flattening the array\")\n+                    .emit();\n+            }\n+            *has_errors = true;\n+            None\n+        }\n         _ => {\n             missing_literals.push(expr.span);\n             None\n@@ -167,6 +177,9 @@ pub fn expand_concat_bytes(\n                     has_errors = true;\n                 }\n             },\n+            ast::ExprKind::IncludedBytes(ref bytes) => {\n+                accumulator.extend_from_slice(bytes);\n+            }\n             ast::ExprKind::Err => {\n                 has_errors = true;\n             }"}, {"sha": "3411bd40c9de553ec6e192aafb8350f0d55f6282", "filename": "compiler/rustc_builtin_macros/src/source_util.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -216,7 +216,10 @@ pub fn expand_include_bytes(\n         }\n     };\n     match cx.source_map().load_binary_file(&file) {\n-        Ok(bytes) => base::MacEager::expr(cx.expr_byte_str(sp, bytes)),\n+        Ok(bytes) => {\n+            let expr = cx.expr(sp, ast::ExprKind::IncludedBytes(bytes.into()));\n+            base::MacEager::expr(expr)\n+        }\n         Err(e) => {\n             cx.span_err(sp, &format!(\"couldn't read {}: {}\", file.display(), e));\n             DummyResult::any(sp)"}, {"sha": "a929f6cb0a5df6d6db89b433c8f133412711e260", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -525,6 +525,13 @@ impl server::TokenStream for Rustc<'_, '_> {\n             ast::ExprKind::Lit(l) => {\n                 Ok(tokenstream::TokenStream::token_alone(token::Literal(l.token_lit), l.span))\n             }\n+            ast::ExprKind::IncludedBytes(bytes) => {\n+                let lit = ast::Lit::from_included_bytes(bytes, expr.span);\n+                Ok(tokenstream::TokenStream::token_alone(\n+                    token::TokenKind::Literal(lit.token_lit),\n+                    expr.span,\n+                ))\n+            }\n             ast::ExprKind::Unary(ast::UnOp::Neg, e) => match &e.kind {\n                 ast::ExprKind::Lit(l) => match l.token_lit {\n                     token::Lit { kind: token::Integer | token::Float, .. } => {"}, {"sha": "d46565dea893119d48736a56d5ac8190ac79285a", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -631,7 +631,9 @@ impl<'a> Parser<'a> {\n     /// - A single-segment path.\n     pub(super) fn expr_is_valid_const_arg(&self, expr: &P<rustc_ast::Expr>) -> bool {\n         match &expr.kind {\n-            ast::ExprKind::Block(_, _) | ast::ExprKind::Lit(_) => true,\n+            ast::ExprKind::Block(_, _)\n+            | ast::ExprKind::Lit(_)\n+            | ast::ExprKind::IncludedBytes(..) => true,\n             ast::ExprKind::Unary(ast::UnOp::Neg, expr) => {\n                 matches!(expr.kind, ast::ExprKind::Lit(_))\n             }"}, {"sha": "140f02c046a66c3b48d82f9a3f28acc42b3e24a5", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -560,13 +560,14 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_expr(&mut self, e: &'v ast::Expr) {\n+        #[rustfmt::skip]\n         record_variants!(\n             (self, e, e.kind, Id::None, ast, Expr, ExprKind),\n             [\n                 Box, Array, ConstBlock, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type, Let,\n                 If, While, ForLoop, Loop, Match, Closure, Block, Async, Await, TryBlock, Assign,\n                 AssignOp, Field, Index, Range, Underscore, Path, AddrOf, Break, Continue, Ret,\n-                InlineAsm, MacCall, Struct, Repeat, Paren, Try, Yield, Yeet, Err\n+                InlineAsm, MacCall, Struct, Repeat, Paren, Try, Yield, Yeet, IncludedBytes, Err\n             ]\n         );\n         ast_visit::walk_expr(self, e)"}, {"sha": "8d51b7e17185b585411384795256ef5c84bae9b0", "filename": "src/test/ui/proc-macro/expand-expr.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-expr.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -1,5 +1,5 @@\n // aux-build:expand-expr.rs\n-\n+#![feature(concat_bytes)]\n extern crate expand_expr;\n \n use expand_expr::{\n@@ -23,6 +23,11 @@ expand_expr_is!(\n     concat!(\"contents: \", include_str!(\"auxiliary/included-file.txt\"))\n );\n \n+expand_expr_is!(\n+    b\"contents: Included file contents\\n\",\n+    concat_bytes!(b\"contents: \", include_bytes!(\"auxiliary/included-file.txt\"))\n+);\n+\n // Correct value is checked for multiple sources.\n check_expand_expr_file!(file!());\n "}, {"sha": "c6c4695fd9c43ee3093272a895cd3ff6f70b74af", "filename": "src/test/ui/proc-macro/expand-expr.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-expr.stderr?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -1,29 +1,29 @@\n error: expected one of `.`, `?`, or an operator, found `;`\n-  --> $DIR/expand-expr.rs:101:27\n+  --> $DIR/expand-expr.rs:106:27\n    |\n LL | expand_expr_fail!(\"string\"; hello);\n    |                           ^ expected one of `.`, `?`, or an operator\n \n error: expected expression, found `$`\n-  --> $DIR/expand-expr.rs:104:19\n+  --> $DIR/expand-expr.rs:109:19\n    |\n LL | expand_expr_fail!($);\n    |                   ^ expected expression\n \n error: expected expression, found `$`\n-  --> $DIR/expand-expr.rs:33:23\n+  --> $DIR/expand-expr.rs:38:23\n    |\n LL |     ($($t:tt)*) => { $($t)* };\n    |                       ^^^^ expected expression\n \n error: expected expression, found `$`\n-  --> $DIR/expand-expr.rs:106:28\n+  --> $DIR/expand-expr.rs:111:28\n    |\n LL | expand_expr_fail!(echo_pm!($));\n    |                            ^ expected expression\n \n error: macro expansion ignores token `hello` and any following\n-  --> $DIR/expand-expr.rs:110:47\n+  --> $DIR/expand-expr.rs:115:47\n    |\n LL | expand_expr_is!(\"string\", echo_tts!(\"string\"; hello));\n    |                           --------------------^^^^^-- help: you might be missing a semicolon here: `;`\n@@ -33,7 +33,7 @@ LL | expand_expr_is!(\"string\", echo_tts!(\"string\"; hello));\n    = note: the usage of `echo_tts!` is likely invalid in expression context\n \n error: macro expansion ignores token `;` and any following\n-  --> $DIR/expand-expr.rs:111:44\n+  --> $DIR/expand-expr.rs:116:44\n    |\n LL | expand_expr_is!(\"string\", echo_pm!(\"string\"; hello));\n    |                           -----------------^-------- help: you might be missing a semicolon here: `;`\n@@ -43,7 +43,7 @@ LL | expand_expr_is!(\"string\", echo_pm!(\"string\"; hello));\n    = note: the usage of `echo_pm!` is likely invalid in expression context\n \n error: recursion limit reached while expanding `recursive_expand!`\n-  --> $DIR/expand-expr.rs:119:16\n+  --> $DIR/expand-expr.rs:124:16\n    |\n LL | const _: u32 = recursive_expand!();\n    |                ^^^^^^^^^^^^^^^^^^^"}, {"sha": "eefba8cd29c41268c3abb3dcb252e7f0b426ae10", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -207,6 +207,7 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::InlineAsm(..)\n             | ast::ExprKind::ConstBlock(..)\n             | ast::ExprKind::Lit(..)\n+            | ast::ExprKind::IncludedBytes(..)\n             | ast::ExprKind::Loop(..)\n             | ast::ExprKind::MacCall(..)\n             | ast::ExprKind::MethodCall(..)"}, {"sha": "7750df0fff3afb124e133f245d22e8dbf635ee44", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -399,6 +399,7 @@ pub(crate) fn format_expr(\n             }\n         }\n         ast::ExprKind::Underscore => Some(\"_\".to_owned()),\n+        ast::ExprKind::IncludedBytes(..) => unreachable!(),\n         ast::ExprKind::Err => None,\n     };\n "}, {"sha": "c47b3b314dd4b31873405c3875aec1b698881032", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef2485bd59cad3674b9c7de29316c20d7ddc6e7/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=8ef2485bd59cad3674b9c7de29316c20d7ddc6e7", "patch": "@@ -496,6 +496,7 @@ pub(crate) fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr\n         | ast::ExprKind::Continue(..)\n         | ast::ExprKind::Err\n         | ast::ExprKind::Field(..)\n+        | ast::ExprKind::IncludedBytes(..)\n         | ast::ExprKind::InlineAsm(..)\n         | ast::ExprKind::Let(..)\n         | ast::ExprKind::Path(..)"}]}