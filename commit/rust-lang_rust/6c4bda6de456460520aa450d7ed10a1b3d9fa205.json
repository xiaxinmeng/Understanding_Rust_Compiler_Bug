{"sha": "6c4bda6de456460520aa450d7ed10a1b3d9fa205", "node_id": "C_kwDOAAsO6NoAKDZjNGJkYTZkZTQ1NjQ2MDUyMGFhNDUwZDdlZDEwYTFiM2Q5ZmEyMDU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-31T12:29:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-31T12:29:51Z"}, "message": "Rollup merge of #100730 - CleanCut:diagnostics-rustc_monomorphize, r=davidtwco\n\nMigrate rustc_monomorphize to use SessionDiagnostic\n\n### Description\n\n- Migrates diagnostics in `rustc_monomorphize` to use `SessionDiagnostic`\n- Adds an `impl IntoDiagnosticArg for PathBuf`\n\n### TODO / Help!\n- [x] I'm having trouble figuring out how to apply an optional note. \ud83d\ude15  Help!?\n  - Resolved. It was bad docs. Fixed in https://github.com/rust-lang/rustc-dev-guide/pull/1437/files\n- [x] `errors:RecursionLimit` should be `#[fatal ...]`, but that doesn't exist so it's `#[error ...]` at the moment.\n  - Maybe I can switch after this is merged in? --> https://github.com/rust-lang/rust/pull/100694\n  - Or maybe I need to manually implement `SessionDiagnostic` instead of deriving it?\n- [x] How does one go about converting an error inside of [a call to struct_span_lint_hir](https://github.com/rust-lang/rust/blob/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/compiler/rustc_monomorphize/src/collector.rs#L917-L927)?\n- [x] ~What placeholder do you use in the fluent template to refer to the value in a vector? It seems like [this code](https://github.com/rust-lang/rust/blob/0b79f758c9aa6646606662a6d623a0752286cd17/compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs#L83-L114) ought to have the answer (or something near it)...but I can't figure it out.~ You can't. Punted.", "tree": {"sha": "0e0cba4b4179f0f1b600a34412a28005ca1a7eb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e0cba4b4179f0f1b600a34412a28005ca1a7eb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c4bda6de456460520aa450d7ed10a1b3d9fa205", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjD1Q/CRBK7hj4Ov3rIwAAsG8IAHJjg0MN2l6v9WegM53YuaIN\nt7G0Jj7H7Ki4yB9Z0NnmNkUY2jmf65poNmULLcuidW7TvJiwNR+fpeY+B3YiPyH+\ns4FsDK8WaLBmBJme+xXgBVaJQwfZAKj36GukqiZkjOke3y0Y4YcpmtcA8EiK9PFa\ngCsu2Hw6unwoeI0rvpEB/KLk9Ux0U9L6sQbc362IueBBFbJXyrimsTcqvk6RbRkk\nrRSzQ7yZzxWpE0Hdoni6IH/YtHzCETYz/AqE9u6tBJHyER5XEirlv0ds4smNNr8+\nfDWu8971BP8GUyad/tIUGTgdrfdGnNXYcCoph5uzeKTtkCplXDFhjHZu4sP0ci4=\n=DVqv\n-----END PGP SIGNATURE-----\n", "payload": "tree 0e0cba4b4179f0f1b600a34412a28005ca1a7eb3\nparent 775e96970fa5c4af239becc16c78c8a37e8b25e9\nparent 845d56759c71391a23c73a328bea71b9342d7933\nauthor Ralf Jung <post@ralfj.de> 1661948991 +0200\ncommitter GitHub <noreply@github.com> 1661948991 +0200\n\nRollup merge of #100730 - CleanCut:diagnostics-rustc_monomorphize, r=davidtwco\n\nMigrate rustc_monomorphize to use SessionDiagnostic\n\n### Description\n\n- Migrates diagnostics in `rustc_monomorphize` to use `SessionDiagnostic`\n- Adds an `impl IntoDiagnosticArg for PathBuf`\n\n### TODO / Help!\n- [x] I'm having trouble figuring out how to apply an optional note. \ud83d\ude15  Help!?\n  - Resolved. It was bad docs. Fixed in https://github.com/rust-lang/rustc-dev-guide/pull/1437/files\n- [x] `errors:RecursionLimit` should be `#[fatal ...]`, but that doesn't exist so it's `#[error ...]` at the moment.\n  - Maybe I can switch after this is merged in? --> https://github.com/rust-lang/rust/pull/100694\n  - Or maybe I need to manually implement `SessionDiagnostic` instead of deriving it?\n- [x] How does one go about converting an error inside of [a call to struct_span_lint_hir](https://github.com/rust-lang/rust/blob/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/compiler/rustc_monomorphize/src/collector.rs#L917-L927)?\n- [x] ~What placeholder do you use in the fluent template to refer to the value in a vector? It seems like [this code](https://github.com/rust-lang/rust/blob/0b79f758c9aa6646606662a6d623a0752286cd17/compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs#L83-L114) ought to have the answer (or something near it)...but I can't figure it out.~ You can't. Punted.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4bda6de456460520aa450d7ed10a1b3d9fa205", "html_url": "https://github.com/rust-lang/rust/commit/6c4bda6de456460520aa450d7ed10a1b3d9fa205", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c4bda6de456460520aa450d7ed10a1b3d9fa205/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "775e96970fa5c4af239becc16c78c8a37e8b25e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/775e96970fa5c4af239becc16c78c8a37e8b25e9", "html_url": "https://github.com/rust-lang/rust/commit/775e96970fa5c4af239becc16c78c8a37e8b25e9"}, {"sha": "845d56759c71391a23c73a328bea71b9342d7933", "url": "https://api.github.com/repos/rust-lang/rust/commits/845d56759c71391a23c73a328bea71b9342d7933", "html_url": "https://github.com/rust-lang/rust/commit/845d56759c71391a23c73a328bea71b9342d7933"}], "stats": {"total": 248, "additions": 196, "deletions": 52}, "files": [{"sha": "4aa7ee206dcd4c9a5bb0d0b548e61d02871f83bb", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c4bda6de456460520aa450d7ed10a1b3d9fa205/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6c4bda6de456460520aa450d7ed10a1b3d9fa205/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6c4bda6de456460520aa450d7ed10a1b3d9fa205", "patch": "@@ -3905,8 +3905,10 @@ name = \"rustc_monomorphize\"\n version = \"0.0.0\"\n dependencies = [\n  \"rustc_data_structures\",\n+ \"rustc_errors\",\n  \"rustc_hir\",\n  \"rustc_index\",\n+ \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_session\",\n  \"rustc_span\","}, {"sha": "c412e451a033e9619f2630e5362b5e0c12b4e08c", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=6c4bda6de456460520aa450d7ed10a1b3d9fa205", "patch": "@@ -925,8 +925,11 @@ pub(crate) fn codegen_panic_inner<'tcx>(\n     args: &[Value],\n     span: Span,\n ) {\n-    let def_id =\n-        fx.tcx.lang_items().require(lang_item).unwrap_or_else(|s| fx.tcx.sess.span_fatal(span, &s));\n+    let def_id = fx\n+        .tcx\n+        .lang_items()\n+        .require(lang_item)\n+        .unwrap_or_else(|e| fx.tcx.sess.span_fatal(span, e.to_string()));\n \n     let instance = Instance::mono(fx.tcx, def_id).polymorphize(fx.tcx);\n     let symbol_name = fx.tcx.symbol_name(instance).name;"}, {"sha": "42c84fdd2d14be92a8ff43dbb3f3768f3a291222", "filename": "compiler/rustc_error_messages/locales/en-US/monomorphize.ftl", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl?ref=6c4bda6de456460520aa450d7ed10a1b3d9fa205", "patch": "@@ -0,0 +1,26 @@\n+monomorphize_recursion_limit =\n+    reached the recursion limit while instantiating `{$shrunk}`\n+    .note = `{$def_path_str}` defined here\n+\n+monomorphize_written_to_path = the full type name has been written to '{$path}'\n+\n+monomorphize_type_length_limit = reached the type-length limit while instantiating `{$shrunk}`\n+\n+monomorphize_consider_type_length_limit =\n+    consider adding a `#![type_length_limit=\"{$type_length}\"]` attribute to your crate\n+\n+monomorphize_fatal_error = {$error_message}\n+\n+monomorphize_unknown_partition_strategy = unknown partitioning strategy\n+\n+monomorphize_symbol_already_defined = symbol `{$symbol}` is already defined\n+\n+monomorphize_unused_generic_params = item has unused generic parameters\n+\n+monomorphize_large_assignments =\n+    moving {$size} bytes\n+    .label = value moved from here\n+    .note = The current maximum size is {$limit}, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n+\n+monomorphize_requires_lang_item =\n+    requires `{$lang_item}` lang_item"}, {"sha": "9ed9f58de2eb02895edc646ac8bd578df3a91202", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=6c4bda6de456460520aa450d7ed10a1b3d9fa205", "patch": "@@ -44,6 +44,7 @@ fluent_messages! {\n     interface => \"../locales/en-US/interface.ftl\",\n     infer => \"../locales/en-US/infer.ftl\",\n     lint => \"../locales/en-US/lint.ftl\",\n+    monomorphize => \"../locales/en-US/monomorphize.ftl\",\n     parser => \"../locales/en-US/parser.ftl\",\n     passes => \"../locales/en-US/passes.ftl\",\n     plugin_impl => \"../locales/en-US/plugin_impl.ftl\","}, {"sha": "e593ed1044a5818e1f4cdb7765bd9bd75cb393d9", "filename": "compiler/rustc_hir/src/errors.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_hir%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_hir%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ferrors.rs?ref=6c4bda6de456460520aa450d7ed10a1b3d9fa205", "patch": "@@ -0,0 +1,10 @@\n+use crate::LangItem;\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable)]\n+pub struct LangItemError(pub LangItem);\n+\n+impl ToString for LangItemError {\n+    fn to_string(&self) -> String {\n+        format!(\"requires `{}` lang_item\", self.0.name())\n+    }\n+}"}, {"sha": "0c01326d0032ac61842af06569cf493b714d7ed5", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=6c4bda6de456460520aa450d7ed10a1b3d9fa205", "patch": "@@ -8,6 +8,7 @@\n //! * Functions called by the compiler itself.\n \n use crate::def_id::DefId;\n+use crate::errors::LangItemError;\n use crate::{MethodKind, Target};\n \n use rustc_ast as ast;\n@@ -115,9 +116,9 @@ macro_rules! language_item_table {\n \n             /// Requires that a given `LangItem` was bound and returns the corresponding `DefId`.\n             /// If it wasn't bound, e.g. due to a missing `#[lang = \"<it.name()>\"]`,\n-            /// returns an error message as a string.\n-            pub fn require(&self, it: LangItem) -> Result<DefId, String> {\n-                self.items[it as usize].ok_or_else(|| format!(\"requires `{}` lang_item\", it.name()))\n+            /// returns an error encapsulating the `LangItem`.\n+            pub fn require(&self, it: LangItem) -> Result<DefId, LangItemError> {\n+                self.items[it as usize].ok_or_else(|| LangItemError(it))\n             }\n \n             /// Returns the [`DefId`]s of all lang items in a group."}, {"sha": "092029ef09ec80e6cab087b6b63838e94ed25f4e", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=6c4bda6de456460520aa450d7ed10a1b3d9fa205", "patch": "@@ -27,6 +27,7 @@ pub mod def;\n pub mod def_path_hash_map;\n pub mod definitions;\n pub mod diagnostic_items;\n+pub mod errors;\n pub use rustc_span::def_id;\n mod hir;\n pub mod hir_id;"}, {"sha": "31c20fa14aaf5e819c23f6537fe6298ac2cba740", "filename": "compiler/rustc_middle/src/middle/lang_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs?ref=6c4bda6de456460520aa450d7ed10a1b3d9fa205", "patch": "@@ -18,11 +18,11 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns the `DefId` for a given `LangItem`.\n     /// If not found, fatally aborts compilation.\n     pub fn require_lang_item(self, lang_item: LangItem, span: Option<Span>) -> DefId {\n-        self.lang_items().require(lang_item).unwrap_or_else(|msg| {\n+        self.lang_items().require(lang_item).unwrap_or_else(|err| {\n             if let Some(span) = span {\n-                self.sess.span_fatal(span, &msg)\n+                self.sess.span_fatal(span, err.to_string())\n             } else {\n-                self.sess.fatal(&msg)\n+                self.sess.fatal(err.to_string())\n             }\n         })\n     }"}, {"sha": "59ca04ec868d159d32a2d62d65cfd8c67a196ace", "filename": "compiler/rustc_monomorphize/Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_monomorphize%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_monomorphize%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2FCargo.toml?ref=6c4bda6de456460520aa450d7ed10a1b3d9fa205", "patch": "@@ -7,11 +7,13 @@ edition = \"2021\"\n doctest = false\n \n [dependencies]\n-smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.8.1\", features = [ \"union\", \"may_dangle\" ] }\n tracing = \"0.1\"\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_errors = { path = \"../rustc_errors\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n+rustc_macros = { path = \"../rustc_macros\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }"}, {"sha": "170616d4b42ce76e62a6f12021907822b351e32c", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 39, "deletions": 28, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=6c4bda6de456460520aa450d7ed10a1b3d9fa205", "patch": "@@ -207,6 +207,8 @@ use std::iter;\n use std::ops::Range;\n use std::path::PathBuf;\n \n+use crate::errors::{LargeAssignmentsLint, RecursionLimit, RequiresLangItem, TypeLengthLimit};\n+\n #[derive(PartialEq)]\n pub enum MonoItemCollectionMode {\n     Eager,\n@@ -604,17 +606,24 @@ fn check_recursion_limit<'tcx>(\n     // more than the recursion limit is assumed to be causing an\n     // infinite expansion.\n     if !recursion_limit.value_within_limit(adjusted_recursion_depth) {\n+        let def_span = tcx.def_span(def_id);\n+        let def_path_str = tcx.def_path_str(def_id);\n         let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance, 32, 32);\n-        let error = format!(\"reached the recursion limit while instantiating `{}`\", shrunk);\n-        let mut err = tcx.sess.struct_span_fatal(span, &error);\n-        err.span_note(\n-            tcx.def_span(def_id),\n-            &format!(\"`{}` defined here\", tcx.def_path_str(def_id)),\n-        );\n-        if let Some(path) = written_to_path {\n-            err.note(&format!(\"the full type name has been written to '{}'\", path.display()));\n-        }\n-        err.emit()\n+        let mut path = PathBuf::new();\n+        let was_written = if written_to_path.is_some() {\n+            path = written_to_path.unwrap();\n+            Some(())\n+        } else {\n+            None\n+        };\n+        tcx.sess.emit_fatal(RecursionLimit {\n+            span,\n+            shrunk,\n+            def_span,\n+            def_path_str,\n+            was_written,\n+            path,\n+        });\n     }\n \n     recursion_depths.insert(def_id, recursion_depth + 1);\n@@ -642,16 +651,15 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) {\n     // Bail out in these cases to avoid that bad user experience.\n     if !tcx.type_length_limit().value_within_limit(type_length) {\n         let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance, 32, 32);\n-        let msg = format!(\"reached the type-length limit while instantiating `{}`\", shrunk);\n-        let mut diag = tcx.sess.struct_span_fatal(tcx.def_span(instance.def_id()), &msg);\n-        if let Some(path) = written_to_path {\n-            diag.note(&format!(\"the full type name has been written to '{}'\", path.display()));\n-        }\n-        diag.help(&format!(\n-            \"consider adding a `#![type_length_limit=\\\"{}\\\"]` attribute to your crate\",\n-            type_length\n-        ));\n-        diag.emit()\n+        let span = tcx.def_span(instance.def_id());\n+        let mut path = PathBuf::new();\n+        let was_written = if written_to_path.is_some() {\n+            path = written_to_path.unwrap();\n+            Some(())\n+        } else {\n+            None\n+        };\n+        tcx.sess.emit_fatal(TypeLengthLimit { span, shrunk, was_written, path, type_length });\n     }\n }\n \n@@ -914,17 +922,16 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     // but correct span? This would make the lint at least accept crate-level lint attributes.\n                     return;\n                 };\n-                self.tcx.struct_span_lint_hir(\n+                self.tcx.emit_spanned_lint(\n                     LARGE_ASSIGNMENTS,\n                     lint_root,\n                     source_info.span,\n-                    |lint| {\n-                        let mut err = lint.build(&format!(\"moving {} bytes\", layout.size.bytes()));\n-                        err.span_label(source_info.span, \"value moved from here\");\n-                        err.note(&format!(r#\"The current maximum size is {}, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\"#, limit.bytes()));\n-                        err.emit();\n+                    LargeAssignmentsLint {\n+                        span: source_info.span,\n+                        size: layout.size.bytes(),\n+                        limit: limit.bytes(),\n                     },\n-                );\n+                )\n             }\n         }\n     }\n@@ -1321,7 +1328,11 @@ impl<'v> RootCollector<'_, 'v> {\n \n         let start_def_id = match self.tcx.lang_items().require(LangItem::Start) {\n             Ok(s) => s,\n-            Err(err) => self.tcx.sess.fatal(&err),\n+            Err(lang_item_err) => {\n+                self.tcx\n+                    .sess\n+                    .emit_fatal(RequiresLangItem { lang_item: lang_item_err.0.name().to_string() });\n+            }\n         };\n         let main_ret_ty = self.tcx.fn_sig(main_def_id).output();\n "}, {"sha": "77b6cfa1f69f897822cf65c12146561830a29132", "filename": "compiler/rustc_monomorphize/src/errors.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs?ref=6c4bda6de456460520aa450d7ed10a1b3d9fa205", "patch": "@@ -0,0 +1,84 @@\n+use std::path::PathBuf;\n+\n+use rustc_errors::ErrorGuaranteed;\n+use rustc_macros::{LintDiagnostic, SessionDiagnostic};\n+use rustc_session::SessionDiagnostic;\n+use rustc_span::Span;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(monomorphize::recursion_limit)]\n+pub struct RecursionLimit {\n+    #[primary_span]\n+    pub span: Span,\n+    pub shrunk: String,\n+    #[note]\n+    pub def_span: Span,\n+    pub def_path_str: String,\n+    #[note(monomorphize::written_to_path)]\n+    pub was_written: Option<()>,\n+    pub path: PathBuf,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(monomorphize::type_length_limit)]\n+#[help(monomorphize::consider_type_length_limit)]\n+pub struct TypeLengthLimit {\n+    #[primary_span]\n+    pub span: Span,\n+    pub shrunk: String,\n+    #[note(monomorphize::written_to_path)]\n+    pub was_written: Option<()>,\n+    pub path: PathBuf,\n+    pub type_length: usize,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(monomorphize::requires_lang_item)]\n+pub struct RequiresLangItem {\n+    pub lang_item: String,\n+}\n+\n+pub struct UnusedGenericParams {\n+    pub span: Span,\n+    pub param_spans: Vec<Span>,\n+    pub param_names: Vec<String>,\n+}\n+\n+impl SessionDiagnostic<'_> for UnusedGenericParams {\n+    fn into_diagnostic(\n+        self,\n+        sess: &'_ rustc_session::parse::ParseSess,\n+    ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let mut diag = sess.struct_err(rustc_errors::fluent::monomorphize::unused_generic_params);\n+        diag.set_span(self.span);\n+        for (span, name) in self.param_spans.into_iter().zip(self.param_names) {\n+            // FIXME: I can figure out how to do a label with a fluent string with a fixed message,\n+            // or a label with a dynamic value in a hard-coded string, but I haven't figured out\n+            // how to combine the two. \ud83d\ude22\n+            diag.span_label(span, format!(\"generic parameter `{}` is unused\", name));\n+        }\n+        diag\n+    }\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(monomorphize::large_assignments)]\n+#[note]\n+pub struct LargeAssignmentsLint {\n+    #[label]\n+    pub span: Span,\n+    pub size: u64,\n+    pub limit: u64,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(monomorphize::unknown_partition_strategy)]\n+pub struct UnknownPartitionStrategy;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(monomorphize::symbol_already_defined)]\n+pub struct SymbolAlreadyDefined {\n+    #[primary_span]\n+    pub span: Option<Span>,\n+    pub symbol: String,\n+}"}, {"sha": "d64de44705bb2eaf7ea037a87af7516da3fac17c", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=6c4bda6de456460520aa450d7ed10a1b3d9fa205", "patch": "@@ -3,6 +3,8 @@\n #![feature(let_else)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate tracing;\n@@ -16,6 +18,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n mod collector;\n+mod errors;\n mod partitioning;\n mod polymorphize;\n mod util;"}, {"sha": "932edc6675f5900cb6dd04d9678d7847345f0f9b", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=6c4bda6de456460520aa450d7ed10a1b3d9fa205", "patch": "@@ -108,6 +108,7 @@ use rustc_span::symbol::Symbol;\n \n use crate::collector::InliningMap;\n use crate::collector::{self, MonoItemCollectionMode};\n+use crate::errors::{SymbolAlreadyDefined, UnknownPartitionStrategy};\n \n pub struct PartitioningCx<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n@@ -149,7 +150,9 @@ fn get_partitioner<'tcx>(tcx: TyCtxt<'tcx>) -> Box<dyn Partitioner<'tcx>> {\n \n     match strategy {\n         \"default\" => Box::new(default::DefaultPartitioning),\n-        _ => tcx.sess.fatal(\"unknown partitioning strategy\"),\n+        _ => {\n+            tcx.sess.emit_fatal(UnknownPartitionStrategy);\n+        }\n     }\n }\n \n@@ -331,13 +334,7 @@ where\n                 (span1, span2) => span1.or(span2),\n             };\n \n-            let error_message = format!(\"symbol `{}` is already defined\", sym1);\n-\n-            if let Some(span) = span {\n-                tcx.sess.span_fatal(span, &error_message)\n-            } else {\n-                tcx.sess.fatal(&error_message)\n-            }\n+            tcx.sess.emit_fatal(SymbolAlreadyDefined { span, symbol: sym1.to_string() });\n         }\n     }\n }"}, {"sha": "6e4ab2a35c3375e0c43b274ae285bf7fbd22f28d", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=6c4bda6de456460520aa450d7ed10a1b3d9fa205", "patch": "@@ -22,6 +22,8 @@ use rustc_span::symbol::sym;\n use std::convert::TryInto;\n use std::ops::ControlFlow;\n \n+use crate::errors::UnusedGenericParams;\n+\n /// Provide implementations of queries relating to polymorphization analysis.\n pub fn provide(providers: &mut Providers) {\n     providers.unused_generic_params = unused_generic_params;\n@@ -206,22 +208,23 @@ fn emit_unused_generic_params_error<'tcx>(\n         _ => tcx.def_span(def_id),\n     };\n \n-    let mut err = tcx.sess.struct_span_err(fn_span, \"item has unused generic parameters\");\n-\n+    let mut param_spans = Vec::new();\n+    let mut param_names = Vec::new();\n     let mut next_generics = Some(generics);\n     while let Some(generics) = next_generics {\n         for param in &generics.params {\n             if unused_parameters.contains(param.index).unwrap_or(false) {\n                 debug!(?param);\n                 let def_span = tcx.def_span(param.def_id);\n-                err.span_label(def_span, &format!(\"generic parameter `{}` is unused\", param.name));\n+                param_spans.push(def_span);\n+                param_names.push(param.name.to_string());\n             }\n         }\n \n         next_generics = generics.parent.map(|did| tcx.generics_of(did));\n     }\n \n-    err.emit();\n+    tcx.sess.emit_err(UnusedGenericParams { span: fn_span, param_spans, param_names });\n }\n \n /// Visitor used to aggregate generic parameter uses."}, {"sha": "d08c0d4dbb72a6b5d12db254d92945dbca97d6bb", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4bda6de456460520aa450d7ed10a1b3d9fa205/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=6c4bda6de456460520aa450d7ed10a1b3d9fa205", "patch": "@@ -359,7 +359,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n     let coerce_unsized_trait = tcx.require_lang_item(LangItem::CoerceUnsized, Some(span));\n \n     let unsize_trait = tcx.lang_items().require(LangItem::Unsize).unwrap_or_else(|err| {\n-        tcx.sess.fatal(&format!(\"`CoerceUnsized` implementation {}\", err));\n+        tcx.sess.fatal(&format!(\"`CoerceUnsized` implementation {}\", err.to_string()));\n     });\n \n     let source = tcx.type_of(impl_did);"}, {"sha": "84ac48b1e77b4ae610b45c204a22901536c97ddc", "filename": "src/test/ui/type_length_limit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c4bda6de456460520aa450d7ed10a1b3d9fa205/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c4bda6de456460520aa450d7ed10a1b3d9fa205/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.stderr?ref=6c4bda6de456460520aa450d7ed10a1b3d9fa205", "patch": "@@ -4,17 +4,17 @@ error: reached the type-length limit while instantiating `std::mem::drop::<Optio\n LL | pub fn drop<T>(_x: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n    = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n \n error: reached the type-length limit while instantiating `<[closure@std::rt::lang_start<()...e<()>>::call_once - shim(vtable)`\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n LL |     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n    = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n \n error: aborting due to 2 previous errors\n "}]}