{"sha": "36b8554cf1553a3d1e5a86f876efdc0b847c40e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2Yjg1NTRjZjE1NTNhM2QxZTVhODZmODc2ZWZkYzBiODQ3YzQwZTU=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-02-12T12:53:30Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-02-12T12:53:30Z"}, "message": "add notes for immutable inputs", "tree": {"sha": "7e15f31118790da331223c17c08ca9419919106f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e15f31118790da331223c17c08ca9419919106f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36b8554cf1553a3d1e5a86f876efdc0b847c40e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36b8554cf1553a3d1e5a86f876efdc0b847c40e5", "html_url": "https://github.com/rust-lang/rust/commit/36b8554cf1553a3d1e5a86f876efdc0b847c40e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36b8554cf1553a3d1e5a86f876efdc0b847c40e5/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad01fa9b57a0d30358e5ab74e0ecbc565e005f7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad01fa9b57a0d30358e5ab74e0ecbc565e005f7d", "html_url": "https://github.com/rust-lang/rust/commit/ad01fa9b57a0d30358e5ab74e0ecbc565e005f7d"}], "stats": {"total": 79, "additions": 32, "deletions": 47}, "files": [{"sha": "4b7b72f0c797a3d8ee4e2a2b9748911e4dcbecbc", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36b8554cf1553a3d1e5a86f876efdc0b847c40e5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b8554cf1553a3d1e5a86f876efdc0b847c40e5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=36b8554cf1553a3d1e5a86f876efdc0b847c40e5", "patch": "@@ -15,6 +15,7 @@\n #![allow(needless_lifetimes)]\n \n extern crate syntax;\n+extern crate syntax_pos;\n #[macro_use]\n extern crate rustc;\n extern crate rustc_data_structures;"}, {"sha": "9ea6d18a87815eab3ebaa1dcc16abbabf290ed67", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/36b8554cf1553a3d1e5a86f876efdc0b847c40e5/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b8554cf1553a3d1e5a86f876efdc0b847c40e5/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=36b8554cf1553a3d1e5a86f876efdc0b847c40e5", "patch": "@@ -5,7 +5,9 @@ use rustc::hir::map::NodeItem;\n use rustc::lint::*;\n use rustc::ty;\n use syntax::ast::NodeId;\n-use utils::{match_path, match_type, paths, span_lint};\n+use syntax::codemap::Span;\n+use syntax_pos::MultiSpan;\n+use utils::{match_path, match_type, paths, span_lint, span_lint_and_then};\n \n /// **What it does:** This lint checks for function arguments of type `&String` or `&Vec` unless\n /// the references are mutable.\n@@ -132,29 +134,31 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId) {\n     }\n \n     if let FunctionRetTy::Return(ref ty) = decl.output {\n-        if let Some((out, MutMutable)) = get_rptr_lm(ty) {\n-            if let Some(MutImmutable) =\n-                decl.inputs\n-                    .iter()\n-                    .filter_map(|ty| get_rptr_lm(ty))\n-                    .filter(|&(lt, _)| lt.name == out.name)\n-                    .fold(None, |x, (_, m)| match (x, m) {\n-                        (Some(MutMutable), _) |\n-                        (_, MutMutable) => Some(MutMutable),\n-                        (_, m) => Some(m),\n-                    }) {\n-                span_lint(cx,\n-                          MUT_FROM_REF,\n-                          ty.span,\n-                          \"this function takes an immutable ref to return a mutable one\");\n+        if let Some((out, MutMutable, _)) = get_rptr_lm(ty) {\n+            let mut immutables = vec![];\n+            for (_, ref mutbl, ref argspan) in decl.inputs\n+                          .iter()\n+                          .filter_map(|ty| get_rptr_lm(ty))\n+                          .filter(|&(lt, _, _)| lt.name == out.name) {\n+                if *mutbl == MutMutable { return; }\n+                immutables.push(*argspan);\n             }\n+            if immutables.is_empty() { return; }\n+            span_lint_and_then(cx,\n+                               MUT_FROM_REF,\n+                               ty.span,\n+                               \"mutable borrow from immutable input(s)\",\n+                               |db| {\n+                                    let ms = MultiSpan::from_spans(immutables);\n+                                    db.span_note(ms, \"immutable borrow here\");\n+                               });\n         }\n     }\n }\n \n-fn get_rptr_lm(ty: &Ty) -> Option<(&Lifetime, Mutability)> {\n+fn get_rptr_lm(ty: &Ty) -> Option<(&Lifetime, Mutability, Span)> {\n     if let Ty_::TyRptr(ref lt, ref m) = ty.node {\n-        Some((lt, m.mutbl))\n+        Some((lt, m.mutbl, ty.span))\n     } else {\n         None\n     }"}, {"sha": "1bb6bea66f614eeb55a36dc0d1c9f16e50c8cae4", "filename": "tests/ui/mut_from_ref.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36b8554cf1553a3d1e5a86f876efdc0b847c40e5/tests%2Fui%2Fmut_from_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b8554cf1553a3d1e5a86f876efdc0b847c40e5/tests%2Fui%2Fmut_from_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.rs?ref=36b8554cf1553a3d1e5a86f876efdc0b847c40e5", "patch": "@@ -29,6 +29,10 @@ fn fail_lifetime<'a>(x: &'a u32, y: &mut u32) -> &'a mut u32 {\n     unimplemented!()\n }\n \n+fn fail_double<'a>(x: &'a u32, y: &'a u32, z: &'b mut u32) -> &'a mut u32 {\n+    unimplemented!()\n+}\n+\n // this is OK, because the result borrows y\n fn works<'a>(x: &u32, y: &'a mut u32) -> &'a mut u32 {\n     unimplemented!()"}, {"sha": "5f9cee2af0d4680627d8ee7ce61633ee3383cb5a", "filename": "tests/ui/mut_from_ref.stderr", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/36b8554cf1553a3d1e5a86f876efdc0b847c40e5/tests%2Fui%2Fmut_from_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b8554cf1553a3d1e5a86f876efdc0b847c40e5/tests%2Fui%2Fmut_from_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.stderr?ref=36b8554cf1553a3d1e5a86f876efdc0b847c40e5", "patch": "@@ -1,32 +1,8 @@\n-error: this function takes an immutable ref to return a mutable one\n- --> $DIR/mut_from_ref.rs:9:39\n-  |\n-9 |     fn this_wont_hurt_a_bit(&self) -> &mut Foo {\n-  |                                       ^^^^^^^^\n-  |\n-note: lint level defined here\n- --> $DIR/mut_from_ref.rs:4:9\n-  |\n-4 | #![deny(mut_from_ref)]\n-  |         ^^^^^^^^^^^^\n-\n-error: this function takes an immutable ref to return a mutable one\n-  --> $DIR/mut_from_ref.rs:15:25\n-   |\n-15 |     fn ouch(x: &Foo) -> &mut Foo;\n-   |                         ^^^^^^^^\n-\n-error: this function takes an immutable ref to return a mutable one\n-  --> $DIR/mut_from_ref.rs:24:21\n-   |\n-24 | fn fail(x: &u32) -> &mut u16 {\n-   |                     ^^^^^^^^\n-\n-error: this function takes an immutable ref to return a mutable one\n-  --> $DIR/mut_from_ref.rs:28:50\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/mut_from_ref.rs:32:48\n    |\n-28 | fn fail_lifetime<'a>(x: &'a u32, y: &mut u32) -> &'a mut u32 {\n-   |                                                  ^^^^^^^^^^^\n+32 | fn fail_double<'a>(x: &'a u32, y: &'a u32, z: &'b mut u32) -> &'a mut u32 {\n+   |                                                ^^ undeclared lifetime\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n "}]}