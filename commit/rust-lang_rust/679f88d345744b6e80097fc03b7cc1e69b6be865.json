{"sha": "679f88d345744b6e80097fc03b7cc1e69b6be865", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3OWY4OGQzNDU3NDRiNmU4MDA5N2ZjMDNiN2NjMWU2OWI2YmU4NjU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-29T09:57:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-29T09:57:53Z"}, "message": "Rollup merge of #34258 - durka:patch-25, r=steveklabnik\n\nbook/ffi: nullable pointer cleanup\n\nExpand the \"nullable pointer optimization\" section with a code example. Fixes #34250.\n\nI also noticed that many of the examples use the libc crate just for types such as `c_char` and `c_int`, which are now available through `std::os::raw`. I changed the ones that don't need to rely on libc. I'm glad to revert that part of the commit if it's unwanted churn.", "tree": {"sha": "024b7f842842d39c95c26037a839d966960870de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/024b7f842842d39c95c26037a839d966960870de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/679f88d345744b6e80097fc03b7cc1e69b6be865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/679f88d345744b6e80097fc03b7cc1e69b6be865", "html_url": "https://github.com/rust-lang/rust/commit/679f88d345744b6e80097fc03b7cc1e69b6be865", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/679f88d345744b6e80097fc03b7cc1e69b6be865/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9a911d236cbecb47775276ba51a5f9111bdbc9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a911d236cbecb47775276ba51a5f9111bdbc9c", "html_url": "https://github.com/rust-lang/rust/commit/d9a911d236cbecb47775276ba51a5f9111bdbc9c"}, {"sha": "29546dd06d733d065fc497902bbcecbbb06ce621", "url": "https://api.github.com/repos/rust-lang/rust/commits/29546dd06d733d065fc497902bbcecbbb06ce621", "html_url": "https://github.com/rust-lang/rust/commit/29546dd06d733d065fc497902bbcecbbb06ce621"}], "stats": {"total": 73, "additions": 63, "deletions": 10}, "files": [{"sha": "ca104ff29ace3377c7ccb9efb5d53b7c350963a8", "filename": "src/doc/book/ffi.md", "status": "modified", "additions": 63, "deletions": 10, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/679f88d345744b6e80097fc03b7cc1e69b6be865/src%2Fdoc%2Fbook%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/679f88d345744b6e80097fc03b7cc1e69b6be865/src%2Fdoc%2Fbook%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fffi.md?ref=679f88d345744b6e80097fc03b7cc1e69b6be865", "patch": "@@ -575,16 +575,69 @@ against `libc` and `libm` by default.\n \n # The \"nullable pointer optimization\"\n \n-Certain types are defined to not be NULL. This includes references (`&T`,\n-`&mut T`), boxes (`Box<T>`), and function pointers (`extern \"abi\" fn()`).\n-When interfacing with C, pointers that might be NULL are often used.\n-As a special case, a generic `enum` that contains exactly two variants, one of\n-which contains no data and the other containing a single field, is eligible\n-for the \"nullable pointer optimization\". When such an enum is instantiated\n-with one of the non-nullable types, it is represented as a single pointer,\n-and the non-data variant is represented as the NULL pointer. So\n-`Option<extern \"C\" fn(c_int) -> c_int>` is how one represents a nullable\n-function pointer using the C ABI.\n+Certain Rust types are defined to never be `null`. This includes references (`&T`,\n+`&mut T`), boxes (`Box<T>`), and function pointers (`extern \"abi\" fn()`). When\n+interfacing with C, pointers that might be `null` are often used, which would seem to\n+require some messy `transmute`s and/or unsafe code to handle conversions to/from Rust types.\n+However, the language provides a workaround.\n+\n+As a special case, an `enum` is eligible for the \"nullable pointer optimization\" if it contains\n+exactly two variants, one of which contains no data and the other contains a field of one of the\n+non-nullable types listed above.  This means no extra space is required for a discriminant; rather,\n+the empty variant is represented by putting a `null` value into the non-nullable field. This is\n+called an \"optimization\", but unlike other optimizations it is guaranteed to apply to eligible\n+types.\n+\n+The most common type that takes advantage of the nullable pointer optimization is `Option<T>`,\n+where `None` corresponds to `null`. So `Option<extern \"C\" fn(c_int) -> c_int>` is a correct way\n+to represent a nullable function pointer using the C ABI (corresponding to the C type\n+`int (*)(int)`).\n+\n+Here is a contrived example. Let's say some C library has a facility for registering a\n+callback, which gets called in certain situations. The callback is passed a function pointer\n+and an integer and it is supposed to run the function with the integer as a parameter. So\n+we have function pointers flying across the FFI boundary in both directions.\n+\n+```rust\n+# #![feature(libc)]\n+extern crate libc;\n+use libc::c_int;\n+\n+# #[cfg(hidden)]\n+extern \"C\" {\n+    /// Register the callback.\n+    fn register(cb: Option<extern \"C\" fn(Option<extern \"C\" fn(c_int) -> c_int>, c_int) -> c_int>);\n+}\n+# unsafe fn register(_: Option<extern \"C\" fn(Option<extern \"C\" fn(c_int) -> c_int>,\n+#                                            c_int) -> c_int>)\n+# {}\n+\n+/// This fairly useless function receives a function pointer and an integer\n+/// from C, and returns the result of calling the function with the integer.\n+/// In case no function is provided, it squares the integer by default.\n+extern \"C\" fn apply(process: Option<extern \"C\" fn(c_int) -> c_int>, int: c_int) -> c_int {\n+    match process {\n+        Some(f) => f(int),\n+        None    => int * int\n+    }\n+}\n+\n+fn main() {\n+    unsafe {\n+        register(Some(apply));\n+    }\n+}\n+```\n+\n+And the code on the C side looks like this:\n+\n+```c\n+void register(void (*f)(void (*)(int), int)) {\n+    ...\n+}\n+```\n+\n+No `transmute` required!\n \n # Calling Rust code from C\n "}]}