{"sha": "a4d4a372e0d5beaa521cfca693057c7fc3eae87a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZDRhMzcyZTBkNWJlYWE1MjFjZmNhNjkzMDU3YzdmYzNlYWU4N2E=", "commit": {"author": {"name": "d-dorazio", "email": "d.dorazio96@gmail.com", "date": "2016-10-08T13:16:00Z"}, "committer": {"name": "d-dorazio", "email": "d.dorazio96@gmail.com", "date": "2016-10-08T14:29:19Z"}, "message": "Avoid redundant multiple pattern suggested when one pattern is _", "tree": {"sha": "60290300346343f2fdf334ef1e43f553c931de40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60290300346343f2fdf334ef1e43f553c931de40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4d4a372e0d5beaa521cfca693057c7fc3eae87a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d4a372e0d5beaa521cfca693057c7fc3eae87a", "html_url": "https://github.com/rust-lang/rust/commit/a4d4a372e0d5beaa521cfca693057c7fc3eae87a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4d4a372e0d5beaa521cfca693057c7fc3eae87a/comments", "author": {"login": "d-dorazio", "id": 6960399, "node_id": "MDQ6VXNlcjY5NjAzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/6960399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-dorazio", "html_url": "https://github.com/d-dorazio", "followers_url": "https://api.github.com/users/d-dorazio/followers", "following_url": "https://api.github.com/users/d-dorazio/following{/other_user}", "gists_url": "https://api.github.com/users/d-dorazio/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-dorazio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-dorazio/subscriptions", "organizations_url": "https://api.github.com/users/d-dorazio/orgs", "repos_url": "https://api.github.com/users/d-dorazio/repos", "events_url": "https://api.github.com/users/d-dorazio/events{/privacy}", "received_events_url": "https://api.github.com/users/d-dorazio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "d-dorazio", "id": 6960399, "node_id": "MDQ6VXNlcjY5NjAzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/6960399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-dorazio", "html_url": "https://github.com/d-dorazio", "followers_url": "https://api.github.com/users/d-dorazio/followers", "following_url": "https://api.github.com/users/d-dorazio/following{/other_user}", "gists_url": "https://api.github.com/users/d-dorazio/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-dorazio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-dorazio/subscriptions", "organizations_url": "https://api.github.com/users/d-dorazio/orgs", "repos_url": "https://api.github.com/users/d-dorazio/repos", "events_url": "https://api.github.com/users/d-dorazio/events{/privacy}", "received_events_url": "https://api.github.com/users/d-dorazio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e03c969322797cb0241cba4b312badb8c52db3f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e03c969322797cb0241cba4b312badb8c52db3f2", "html_url": "https://github.com/rust-lang/rust/commit/e03c969322797cb0241cba4b312badb8c52db3f2"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "1245ec97051c39d40d0433048cb4f40282c25896", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a4d4a372e0d5beaa521cfca693057c7fc3eae87a/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d4a372e0d5beaa521cfca693057c7fc3eae87a/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=a4d4a372e0d5beaa521cfca693057c7fc3eae87a", "patch": "@@ -201,7 +201,14 @@ fn lint_match_arms(cx: &LateContext, expr: &Expr) {\n                 if i.pats.len() == 1 && j.pats.len() == 1 {\n                     let lhs = snippet(cx, i.pats[0].span, \"<pat1>\");\n                     let rhs = snippet(cx, j.pats[0].span, \"<pat2>\");\n-                    db.span_note(i.body.span, &format!(\"consider refactoring into `{} | {}`\", lhs, rhs));\n+\n+                    if let PatKind::Wild = j.pats[0].node {\n+                        // if the last arm is _, then i could be integrated into _\n+                        // note that i.pats[0] cannot be _, because that would mean that we're hiding all the subsequent arms, and rust won't compile\n+                        db.span_note(i.body.span, &format!(\"`{}` has the same arm body as the `_` wildcard, consider removing it`\", lhs));\n+                    } else {\n+                        db.span_note(i.body.span, &format!(\"consider refactoring into `{} | {}`\", lhs, rhs));\n+                    }\n                 }\n             });\n         }"}, {"sha": "d9eb842d680decae42d8309a126c1330110dc549", "filename": "tests/compile-fail/copies.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a4d4a372e0d5beaa521cfca693057c7fc3eae87a/tests%2Fcompile-fail%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d4a372e0d5beaa521cfca693057c7fc3eae87a/tests%2Fcompile-fail%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopies.rs?ref=a4d4a372e0d5beaa521cfca693057c7fc3eae87a", "patch": "@@ -18,6 +18,12 @@ struct Foo {\n     bar: u8,\n }\n \n+pub enum Abc {\n+    A,\n+    B,\n+    C,\n+}\n+\n #[deny(if_same_then_else)]\n #[deny(match_same_arms)]\n fn if_same_then_else() -> Result<&'static str, ()> {\n@@ -73,7 +79,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     let _ = match 42 {\n         42 => {\n             //~^ NOTE same as this\n-            //~| NOTE refactoring\n+            //~| NOTE removing\n             foo();\n             let mut a = 42 + [23].len() as i32;\n             if true {\n@@ -93,6 +99,14 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         }\n     };\n \n+    let _ = match Abc::A {\n+        Abc::A => 0,\n+        //~^ NOTE same as this\n+        //~| NOTE removing\n+        Abc::B => 1,\n+        _ => 0, //~ERROR this `match` has identical arm bodies\n+    };\n+\n     if true {\n         foo();\n     }"}]}