{"sha": "77427b6ead79c54648c47f5048953590a59615bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NDI3YjZlYWQ3OWM1NDY0OGM0N2Y1MDQ4OTUzNTkwYTU5NjE1YmI=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@cs.washington.edu", "date": "2016-04-21T02:24:31Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@cs.washington.edu", "date": "2016-04-21T02:24:31Z"}, "message": "Limited mem_forget error to only Drop types (fails)", "tree": {"sha": "ad0e2ce6d9e2dfa1754815cc22afe03d0c06d255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad0e2ce6d9e2dfa1754815cc22afe03d0c06d255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77427b6ead79c54648c47f5048953590a59615bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77427b6ead79c54648c47f5048953590a59615bb", "html_url": "https://github.com/rust-lang/rust/commit/77427b6ead79c54648c47f5048953590a59615bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77427b6ead79c54648c47f5048953590a59615bb/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5158a08c5b048a5e9ce094d4999db8cb6f13ab44", "url": "https://api.github.com/repos/rust-lang/rust/commits/5158a08c5b048a5e9ce094d4999db8cb6f13ab44", "html_url": "https://github.com/rust-lang/rust/commit/5158a08c5b048a5e9ce094d4999db8cb6f13ab44"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "0568e70023a704a52669a86a618c4370a357147c", "filename": "src/mem_forget.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/77427b6ead79c54648c47f5048953590a59615bb/src%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77427b6ead79c54648c47f5048953590a59615bb/src%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmem_forget.rs?ref=77427b6ead79c54648c47f5048953590a59615bb", "patch": "@@ -1,18 +1,18 @@\n use rustc::lint::*;\n use rustc::hir::{Expr, ExprCall, ExprPath};\n-use utils::{match_def_path, paths, span_lint};\n+use utils::{get_trait_def_id, implements_trait, match_def_path, paths, span_lint};\n \n-/// **What it does:** This lint checks for usage of `std::mem::forget(_)`.\n+/// **What it does:** This lint checks for usage of `std::mem::forget(t)` where `t` is `Drop`.\n ///\n /// **Why is this bad?** `std::mem::forget(t)` prevents `t` from running its destructor, possibly causing leaks\n ///\n /// **Known problems:** None.\n ///\n-/// **Example:** `mem::forget(_))`\n+/// **Example:** `mem::forget(Rc::new(55)))`\n declare_lint! {\n     pub MEM_FORGET,\n     Allow,\n-    \"`mem::forget` usage is likely to cause memory leaks\"\n+    \"`mem::forget` usage on `Drop` types is likely to cause memory leaks\"\n }\n \n pub struct MemForget;\n@@ -25,12 +25,17 @@ impl LintPass for MemForget {\n \n impl LateLintPass for MemForget {\n     fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n-        if let ExprCall(ref path_expr, _) = e.node {\n+        if let ExprCall(ref path_expr, ref args) = e.node {\n             if let ExprPath(None, _) = path_expr.node {\n                 let def_id = cx.tcx.def_map.borrow()[&path_expr.id].def_id();\n-\n                 if match_def_path(cx, def_id, &paths::MEM_FORGET) {\n-                    span_lint(cx, MEM_FORGET, e.span, \"usage of mem::forget\");\n+                    if let Some(drop_trait_id) = get_trait_def_id(cx, &paths::DROP) {\n+                        let forgot_ty = cx.tcx.expr_ty(&args[0]);\n+\n+                        if implements_trait(cx, forgot_ty, drop_trait_id, Vec::new()) {\n+                            span_lint(cx, MEM_FORGET, e.span, \"usage of mem::forget on Drop type\");\n+                        }\n+                    }\n                 }\n             }\n         }"}, {"sha": "c8cebcb2a42dca72b1ebffc7b359672434fd958e", "filename": "tests/compile-fail/mem_forget.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/77427b6ead79c54648c47f5048953590a59615bb/tests%2Fcompile-fail%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77427b6ead79c54648c47f5048953590a59615bb/tests%2Fcompile-fail%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmem_forget.rs?ref=77427b6ead79c54648c47f5048953590a59615bb", "patch": "@@ -2,6 +2,7 @@\n #![plugin(clippy)]\n \n use std::sync::Arc;\n+use std::rc::Rc;\n \n use std::mem::forget as forgetSomething;\n use std::mem as memstuff;\n@@ -10,12 +11,18 @@ use std::mem as memstuff;\n fn main() {\n     let five: i32 = 5;\n     forgetSomething(five);\n-    //~^ ERROR usage of mem::forget\n \n     let six: Arc<i32> = Arc::new(6);\n     memstuff::forget(six);\n-    //~^ ERROR usage of mem::forget\n+    //~^ ERROR usage of mem::forget on Drop type\n+\n+    let seven: Rc<i32> = Rc::new(7);\n+    std::mem::forget(seven);\n+    //~^ ERROR usage of mem::forget on Drop type\n+\n+    let eight: Vec<i32> = vec![8];\n+    forgetSomething(eight);\n+    //~^ ERROR usage of mem::forget on Drop type\n \n     std::mem::forget(7);\n-    //~^ ERROR usage of mem::forget\n }"}]}