{"sha": "ad2169c095b190afd76a5e32865410502a8bcfdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMjE2OWMwOTViMTkwYWZkNzZhNWUzMjg2NTQxMDUwMmE4YmNmZGQ=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-08-04T23:29:47Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-08-31T18:29:10Z"}, "message": "use cfg(rustdoc) instead of cfg(dox) in std and friends", "tree": {"sha": "d74803449ce17016396c6d115f6e5925202f7edb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d74803449ce17016396c6d115f6e5925202f7edb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad2169c095b190afd76a5e32865410502a8bcfdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad2169c095b190afd76a5e32865410502a8bcfdd", "html_url": "https://github.com/rust-lang/rust/commit/ad2169c095b190afd76a5e32865410502a8bcfdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad2169c095b190afd76a5e32865410502a8bcfdd/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7e496f4424cc0fef686abdc738a8421825c9c50", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7e496f4424cc0fef686abdc738a8421825c9c50", "html_url": "https://github.com/rust-lang/rust/commit/d7e496f4424cc0fef686abdc738a8421825c9c50"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "bb5a21e3e405fd034f35d33373006369333bfc21", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2169c095b190afd76a5e32865410502a8bcfdd/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2169c095b190afd76a5e32865410502a8bcfdd/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=ad2169c095b190afd76a5e32865410502a8bcfdd", "patch": "@@ -37,6 +37,8 @@ fn main() {\n     let mut dylib_path = bootstrap::util::dylib_path();\n     dylib_path.insert(0, PathBuf::from(libdir.clone()));\n \n+    //FIXME(misdreavus): once stdsimd uses cfg(rustdoc) instead of cfg(dox), remove the `--cfg dox`\n+    //arguments here\n     let mut cmd = Command::new(rustdoc);\n     cmd.args(&args)\n         .arg(\"--cfg\")"}, {"sha": "0032bedc7ed1de518390c363f30171a5900cc274", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2169c095b190afd76a5e32865410502a8bcfdd/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2169c095b190afd76a5e32865410502a8bcfdd/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=ad2169c095b190afd76a5e32865410502a8bcfdd", "patch": "@@ -541,7 +541,7 @@ macro_rules! unimplemented {\n /// into libsyntax itself.\n ///\n /// For more information, see documentation for `std`'s macros.\n-#[cfg(dox)]\n+#[cfg(rustdoc)]\n mod builtin {\n \n     /// Unconditionally causes compilation to fail with the given error message when encountered."}, {"sha": "b649ec2340e93df33e87121b1143dff8c780e840", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2169c095b190afd76a5e32865410502a8bcfdd/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2169c095b190afd76a5e32865410502a8bcfdd/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=ad2169c095b190afd76a5e32865410502a8bcfdd", "patch": "@@ -309,7 +309,7 @@ macro_rules! assert_approx_eq {\n /// These macros do not have any corresponding definition with a `macro_rules!`\n /// macro, but are documented here. Their implementations can be found hardcoded\n /// into libsyntax itself.\n-#[cfg(dox)]\n+#[cfg(rustdoc)]\n mod builtin {\n \n     /// Unconditionally causes compilation to fail with the given error message when encountered."}, {"sha": "6bc186e79666665b8c2c48bd60d7a67de4dc8a7b", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2169c095b190afd76a5e32865410502a8bcfdd/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2169c095b190afd76a5e32865410502a8bcfdd/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=ad2169c095b190afd76a5e32865410502a8bcfdd", "patch": "@@ -14,7 +14,7 @@\n #![allow(missing_docs, bad_style, missing_debug_implementations)]\n \n cfg_if! {\n-    if #[cfg(dox)] {\n+    if #[cfg(rustdoc)] {\n \n         // When documenting libstd we want to show unix/windows/linux modules as\n         // these are the \"main modules\" that are used across platforms. This"}, {"sha": "61e4ce66eec0fe636e911d6a00f10f5aa3d82f9a", "filename": "src/libstd/sys/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad2169c095b190afd76a5e32865410502a8bcfdd/src%2Flibstd%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2169c095b190afd76a5e32865410502a8bcfdd/src%2Flibstd%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fmod.rs?ref=ad2169c095b190afd76a5e32865410502a8bcfdd", "patch": "@@ -57,7 +57,7 @@ cfg_if! {\n // then later used in the `std::os` module when documenting, for example,\n // Windows when we're compiling for Linux.\n \n-#[cfg(dox)]\n+#[cfg(rustdoc)]\n cfg_if! {\n     if #[cfg(any(unix, target_os = \"redox\"))] {\n         // On unix we'll document what's already available\n@@ -77,7 +77,7 @@ cfg_if! {\n     }\n }\n \n-#[cfg(dox)]\n+#[cfg(rustdoc)]\n cfg_if! {\n     if #[cfg(windows)] {\n         // On windows we'll just be documenting what's already available"}, {"sha": "a631ef5ec5cbd5b8536df426938dcfa1c0f607a6", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ad2169c095b190afd76a5e32865410502a8bcfdd/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2169c095b190afd76a5e32865410502a8bcfdd/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=ad2169c095b190afd76a5e32865410502a8bcfdd", "patch": "@@ -13,22 +13,22 @@\n use io::{self, ErrorKind};\n use libc;\n \n-#[cfg(any(dox, target_os = \"linux\"))] pub use os::linux as platform;\n-\n-#[cfg(all(not(dox), target_os = \"android\"))]   pub use os::android as platform;\n-#[cfg(all(not(dox), target_os = \"bitrig\"))]    pub use os::bitrig as platform;\n-#[cfg(all(not(dox), target_os = \"dragonfly\"))] pub use os::dragonfly as platform;\n-#[cfg(all(not(dox), target_os = \"freebsd\"))]   pub use os::freebsd as platform;\n-#[cfg(all(not(dox), target_os = \"haiku\"))]     pub use os::haiku as platform;\n-#[cfg(all(not(dox), target_os = \"ios\"))]       pub use os::ios as platform;\n-#[cfg(all(not(dox), target_os = \"macos\"))]     pub use os::macos as platform;\n-#[cfg(all(not(dox), target_os = \"netbsd\"))]    pub use os::netbsd as platform;\n-#[cfg(all(not(dox), target_os = \"openbsd\"))]   pub use os::openbsd as platform;\n-#[cfg(all(not(dox), target_os = \"solaris\"))]   pub use os::solaris as platform;\n-#[cfg(all(not(dox), target_os = \"emscripten\"))] pub use os::emscripten as platform;\n-#[cfg(all(not(dox), target_os = \"fuchsia\"))]   pub use os::fuchsia as platform;\n-#[cfg(all(not(dox), target_os = \"l4re\"))]      pub use os::linux as platform;\n-#[cfg(all(not(dox), target_os = \"hermit\"))]    pub use os::hermit as platform;\n+#[cfg(any(rustdoc, target_os = \"linux\"))] pub use os::linux as platform;\n+\n+#[cfg(all(not(rustdoc), target_os = \"android\"))]   pub use os::android as platform;\n+#[cfg(all(not(rustdoc), target_os = \"bitrig\"))]    pub use os::bitrig as platform;\n+#[cfg(all(not(rustdoc), target_os = \"dragonfly\"))] pub use os::dragonfly as platform;\n+#[cfg(all(not(rustdoc), target_os = \"freebsd\"))]   pub use os::freebsd as platform;\n+#[cfg(all(not(rustdoc), target_os = \"haiku\"))]     pub use os::haiku as platform;\n+#[cfg(all(not(rustdoc), target_os = \"ios\"))]       pub use os::ios as platform;\n+#[cfg(all(not(rustdoc), target_os = \"macos\"))]     pub use os::macos as platform;\n+#[cfg(all(not(rustdoc), target_os = \"netbsd\"))]    pub use os::netbsd as platform;\n+#[cfg(all(not(rustdoc), target_os = \"openbsd\"))]   pub use os::openbsd as platform;\n+#[cfg(all(not(rustdoc), target_os = \"solaris\"))]   pub use os::solaris as platform;\n+#[cfg(all(not(rustdoc), target_os = \"emscripten\"))] pub use os::emscripten as platform;\n+#[cfg(all(not(rustdoc), target_os = \"fuchsia\"))]   pub use os::fuchsia as platform;\n+#[cfg(all(not(rustdoc), target_os = \"l4re\"))]      pub use os::linux as platform;\n+#[cfg(all(not(rustdoc), target_os = \"hermit\"))]    pub use os::hermit as platform;\n \n pub use self::rand::hashmap_random_keys;\n pub use libc::strlen;"}, {"sha": "10f48c3c308a7437a5cd62ebafc0c7cf9bbad71b", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2169c095b190afd76a5e32865410502a8bcfdd/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2169c095b190afd76a5e32865410502a8bcfdd/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=ad2169c095b190afd76a5e32865410502a8bcfdd", "patch": "@@ -794,7 +794,7 @@ pub struct FLOATING_SAVE_AREA {\n // will not appear in the final documentation. This should be also defined for\n // other architectures supported by Windows such as ARM, and for historical\n // interest, maybe MIPS and PowerPC as well.\n-#[cfg(all(dox, not(any(target_arch = \"x86_64\", target_arch = \"x86\", target_arch = \"aarch64\"))))]\n+#[cfg(all(rustdoc, not(any(target_arch = \"x86_64\", target_arch = \"x86\", target_arch = \"aarch64\"))))]\n pub enum CONTEXT {}\n \n #[cfg(target_arch = \"aarch64\")]"}]}