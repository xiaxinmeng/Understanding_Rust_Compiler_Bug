{"sha": "b15423e72e48125a40a3192c2d49a48e54b5c314", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNTQyM2U3MmU0ODEyNWE0MGEzMTkyYzJkNDlhNDhlNTRiNWMzMTQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-26T20:44:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-26T20:44:02Z"}, "message": "Rollup merge of #70384 - nnethercote:refactor-object-file-handling, r=alexcrichton\n\nRefactor object file handling\n\nSome preliminary clean-ups that grease the path to #66961.\n\nr? @alexcrichton", "tree": {"sha": "725261bda9e658628eaf547101c73a8e18806687", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/725261bda9e658628eaf547101c73a8e18806687"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b15423e72e48125a40a3192c2d49a48e54b5c314", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJefRQSCRBK7hj4Ov3rIwAAdHIIADoRjTV7+yCtJEbVIz87bqCT\nAzDhRlqDVw5irXvZeojD5dpSD5wFL3O44AL02LgQKO68lVKbgz9xAP8QwFZtPHV7\nuzwTAvWCQc+Ob5SdCJxiTffyQkH3AFcEedyLmMS4ObgTqiANjwHNpYQeO6s6kuCO\nuvZOiJ8MVoxh3oyR7o9HusoMDXLhS2dzq4IDHGAMdXJVY0ACCUN5b0n5WQooLt8d\nwyls7eYgq+zq5O1h1Ckag7AawudZX1Ht/1cEuEg8AZXxk235Z/s5oE6/6Hy/kWlZ\nPr3syzquedVtnGh3ValQ/Pci5TLBkgwtjkv5nTUtteVIFekae02wfbhyjWmDFgQ=\n=xyF7\n-----END PGP SIGNATURE-----\n", "payload": "tree 725261bda9e658628eaf547101c73a8e18806687\nparent 2fbb07525e2f07a815e780a4268b11916248b5a9\nparent a50cca920d06b831ce0a54e958d1e4e4dfcc350b\nauthor Dylan DPC <dylan.dpc@gmail.com> 1585255442 +0100\ncommitter GitHub <noreply@github.com> 1585255442 +0100\n\nRollup merge of #70384 - nnethercote:refactor-object-file-handling, r=alexcrichton\n\nRefactor object file handling\n\nSome preliminary clean-ups that grease the path to #66961.\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b15423e72e48125a40a3192c2d49a48e54b5c314", "html_url": "https://github.com/rust-lang/rust/commit/b15423e72e48125a40a3192c2d49a48e54b5c314", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b15423e72e48125a40a3192c2d49a48e54b5c314/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fbb07525e2f07a815e780a4268b11916248b5a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbb07525e2f07a815e780a4268b11916248b5a9", "html_url": "https://github.com/rust-lang/rust/commit/2fbb07525e2f07a815e780a4268b11916248b5a9"}, {"sha": "a50cca920d06b831ce0a54e958d1e4e4dfcc350b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a50cca920d06b831ce0a54e958d1e4e4dfcc350b", "html_url": "https://github.com/rust-lang/rust/commit/a50cca920d06b831ce0a54e958d1e4e4dfcc350b"}], "stats": {"total": 175, "additions": 96, "deletions": 79}, "files": [{"sha": "1557630fc7afdaeb5cde12d33a9ee5536497f04e", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 47, "deletions": 40, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/b15423e72e48125a40a3192c2d49a48e54b5c314/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15423e72e48125a40a3192c2d49a48e54b5c314/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=b15423e72e48125a40a3192c2d49a48e54b5c314", "patch": "@@ -16,7 +16,9 @@ use crate::ModuleLlvm;\n use log::debug;\n use rustc::bug;\n use rustc::ty::TyCtxt;\n-use rustc_codegen_ssa::back::write::{run_assembler, CodegenContext, EmbedBitcode, ModuleConfig};\n+use rustc_codegen_ssa::back::write::{\n+    run_assembler, BitcodeSection, CodegenContext, EmitObj, ModuleConfig,\n+};\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::{CompiledModule, ModuleCodegen, RLIB_BYTECODE_EXTENSION};\n use rustc_data_structures::small_c_str::SmallCStr;\n@@ -651,7 +653,7 @@ pub(crate) unsafe fn codegen(\n             let thin = ThinBuffer::new(llmod);\n             let data = thin.data();\n \n-            if config.emit_bc || config.obj_is_bitcode {\n+            if config.emit_bc || config.emit_obj == EmitObj::Bitcode {\n                 let _timer = cgcx.prof.generic_activity_with_arg(\n                     \"LLVM_module_codegen_emit_bitcode\",\n                     &module.name[..],\n@@ -662,7 +664,7 @@ pub(crate) unsafe fn codegen(\n                 }\n             }\n \n-            if config.embed_bitcode == EmbedBitcode::Full {\n+            if config.emit_obj == EmitObj::ObjectCode(BitcodeSection::Full) {\n                 let _timer = cgcx.prof.generic_activity_with_arg(\n                     \"LLVM_module_codegen_embed_bitcode\",\n                     &module.name[..],\n@@ -682,7 +684,7 @@ pub(crate) unsafe fn codegen(\n                     diag_handler.err(&msg);\n                 }\n             }\n-        } else if config.embed_bitcode == EmbedBitcode::Marker {\n+        } else if config.emit_obj == EmitObj::ObjectCode(BitcodeSection::Marker) {\n             embed_bitcode(cgcx, llcx, llmod, None);\n         }\n \n@@ -732,9 +734,9 @@ pub(crate) unsafe fn codegen(\n             })?;\n         }\n \n-        let config_emit_normal_obj = config.emit_obj && !config.obj_is_bitcode;\n+        let config_emit_object_code = matches!(config.emit_obj, EmitObj::ObjectCode(_));\n \n-        if config.emit_asm || (config_emit_normal_obj && config.no_integrated_as) {\n+        if config.emit_asm || (config_emit_object_code && config.no_integrated_as) {\n             let _timer = cgcx\n                 .prof\n                 .generic_activity_with_arg(\"LLVM_module_codegen_emit_asm\", &module.name[..]);\n@@ -743,60 +745,65 @@ pub(crate) unsafe fn codegen(\n             // We can't use the same module for asm and binary output, because that triggers\n             // various errors like invalid IR or broken binaries, so we might have to clone the\n             // module to produce the asm output\n-            let llmod = if config.emit_obj { llvm::LLVMCloneModule(llmod) } else { llmod };\n+            let llmod = if config_emit_object_code { llvm::LLVMCloneModule(llmod) } else { llmod };\n             with_codegen(tm, llmod, config.no_builtins, |cpm| {\n                 write_output_file(diag_handler, tm, cpm, llmod, &path, llvm::FileType::AssemblyFile)\n             })?;\n         }\n \n-        if config_emit_normal_obj {\n-            if !config.no_integrated_as {\n-                let _timer = cgcx\n-                    .prof\n-                    .generic_activity_with_arg(\"LLVM_module_codegen_emit_obj\", &module.name[..]);\n-                with_codegen(tm, llmod, config.no_builtins, |cpm| {\n-                    write_output_file(\n-                        diag_handler,\n-                        tm,\n-                        cpm,\n-                        llmod,\n-                        &obj_out,\n-                        llvm::FileType::ObjectFile,\n-                    )\n-                })?;\n-            } else {\n-                let _timer = cgcx\n-                    .prof\n-                    .generic_activity_with_arg(\"LLVM_module_codegen_asm_to_obj\", &module.name[..]);\n-                let assembly = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n-                run_assembler(cgcx, diag_handler, &assembly, &obj_out);\n-\n-                if !config.emit_asm && !cgcx.save_temps {\n-                    drop(fs::remove_file(&assembly));\n+        match config.emit_obj {\n+            EmitObj::ObjectCode(_) => {\n+                if !config.no_integrated_as {\n+                    let _timer = cgcx.prof.generic_activity_with_arg(\n+                        \"LLVM_module_codegen_emit_obj\",\n+                        &module.name[..],\n+                    );\n+                    with_codegen(tm, llmod, config.no_builtins, |cpm| {\n+                        write_output_file(\n+                            diag_handler,\n+                            tm,\n+                            cpm,\n+                            llmod,\n+                            &obj_out,\n+                            llvm::FileType::ObjectFile,\n+                        )\n+                    })?;\n+                } else {\n+                    let _timer = cgcx.prof.generic_activity_with_arg(\n+                        \"LLVM_module_codegen_asm_to_obj\",\n+                        &module.name[..],\n+                    );\n+                    let assembly =\n+                        cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n+                    run_assembler(cgcx, diag_handler, &assembly, &obj_out);\n+\n+                    if !config.emit_asm && !cgcx.save_temps {\n+                        drop(fs::remove_file(&assembly));\n+                    }\n                 }\n             }\n-        }\n \n-        if config.obj_is_bitcode {\n-            if config.emit_obj {\n+            EmitObj::Bitcode => {\n                 debug!(\"copying bitcode {:?} to obj {:?}\", bc_out, obj_out);\n                 if let Err(e) = link_or_copy(&bc_out, &obj_out) {\n                     diag_handler.err(&format!(\"failed to copy bitcode to object file: {}\", e));\n                 }\n-            }\n \n-            if !config.emit_bc {\n-                debug!(\"removing_bitcode {:?}\", bc_out);\n-                if let Err(e) = fs::remove_file(&bc_out) {\n-                    diag_handler.err(&format!(\"failed to remove bitcode: {}\", e));\n+                if !config.emit_bc {\n+                    debug!(\"removing_bitcode {:?}\", bc_out);\n+                    if let Err(e) = fs::remove_file(&bc_out) {\n+                        diag_handler.err(&format!(\"failed to remove bitcode: {}\", e));\n+                    }\n                 }\n             }\n+\n+            EmitObj::None => {}\n         }\n \n         drop(handlers);\n     }\n     Ok(module.into_compiled_module(\n-        config.emit_obj,\n+        config.emit_obj != EmitObj::None,\n         config.emit_bc,\n         config.emit_bc_compressed,\n         &cgcx.output_filenames,"}, {"sha": "e9b3bf026b2ba5499977e91bbc8ddc1c99372129", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 49, "deletions": 33, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b15423e72e48125a40a3192c2d49a48e54b5c314/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15423e72e48125a40a3192c2d49a48e54b5c314/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=b15423e72e48125a40a3192c2d49a48e54b5c314", "patch": "@@ -51,11 +51,31 @@ use std::thread;\n \n const PRE_LTO_BC_EXT: &str = \"pre-lto.bc\";\n \n-/// The kind of bitcode to embed in object files.\n-#[derive(PartialEq)]\n-pub enum EmbedBitcode {\n+/// What kind of object file to emit.\n+#[derive(Clone, Copy, PartialEq)]\n+pub enum EmitObj {\n+    // No object file.\n     None,\n+\n+    // Just uncompressed llvm bitcode. Provides easy compatibility with\n+    // emscripten's ecc compiler, when used as the linker.\n+    Bitcode,\n+\n+    // Object code, possibly augmented with a bitcode section.\n+    ObjectCode(BitcodeSection),\n+}\n+\n+/// What kind of llvm bitcode section to embed in an object file.\n+#[derive(Clone, Copy, PartialEq)]\n+pub enum BitcodeSection {\n+    // No bitcode section.\n+    None,\n+\n+    // An empty bitcode section (to placate tools such as the iOS linker that\n+    // require this section even if they don't use it).\n     Marker,\n+\n+    // A full, uncompressed bitcode section.\n     Full,\n }\n \n@@ -84,7 +104,7 @@ pub struct ModuleConfig {\n     pub emit_bc_compressed: bool,\n     pub emit_ir: bool,\n     pub emit_asm: bool,\n-    pub emit_obj: bool,\n+    pub emit_obj: EmitObj,\n     // Miscellaneous flags.  These are mostly copied from command-line\n     // options.\n     pub verify_llvm_ir: bool,\n@@ -96,12 +116,7 @@ pub struct ModuleConfig {\n     pub merge_functions: bool,\n     pub inline_threshold: Option<usize>,\n     pub new_llvm_pass_manager: Option<bool>,\n-    // Instead of creating an object file by doing LLVM codegen, just\n-    // make the object file bitcode. Provides easy compatibility with\n-    // emscripten's ecc compiler, when used as the linker.\n-    pub obj_is_bitcode: bool,\n     pub no_integrated_as: bool,\n-    pub embed_bitcode: EmbedBitcode,\n }\n \n impl ModuleConfig {\n@@ -124,9 +139,7 @@ impl ModuleConfig {\n             emit_bc_compressed: false,\n             emit_ir: false,\n             emit_asm: false,\n-            emit_obj: false,\n-            obj_is_bitcode: false,\n-            embed_bitcode: EmbedBitcode::None,\n+            emit_obj: EmitObj::None,\n             no_integrated_as: false,\n \n             verify_llvm_ir: false,\n@@ -147,17 +160,6 @@ impl ModuleConfig {\n         self.no_builtins = no_builtins || sess.target.target.options.no_builtins;\n         self.inline_threshold = sess.opts.cg.inline_threshold;\n         self.new_llvm_pass_manager = sess.opts.debugging_opts.new_llvm_pass_manager;\n-        self.obj_is_bitcode =\n-            sess.target.target.options.obj_is_bitcode || sess.opts.cg.linker_plugin_lto.enabled();\n-        self.embed_bitcode =\n-            if sess.target.target.options.embed_bitcode || sess.opts.debugging_opts.embed_bitcode {\n-                match sess.opts.optimize {\n-                    config::OptLevel::No | config::OptLevel::Less => EmbedBitcode::Marker,\n-                    _ => EmbedBitcode::Full,\n-                }\n-            } else {\n-                EmbedBitcode::None\n-            };\n \n         // Copy what clang does by turning on loop vectorization at O2 and\n         // slp vectorization at O3. Otherwise configure other optimization aspects\n@@ -194,9 +196,9 @@ impl ModuleConfig {\n \n     pub fn bitcode_needed(&self) -> bool {\n         self.emit_bc\n-            || self.obj_is_bitcode\n             || self.emit_bc_compressed\n-            || self.embed_bitcode == EmbedBitcode::Full\n+            || self.emit_obj == EmitObj::Bitcode\n+            || self.emit_obj == EmitObj::ObjectCode(BitcodeSection::Full)\n     }\n }\n \n@@ -397,6 +399,20 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n         allocator_config.emit_bc_compressed = true;\n     }\n \n+    let emit_obj =\n+        if sess.target.target.options.obj_is_bitcode || sess.opts.cg.linker_plugin_lto.enabled() {\n+            EmitObj::Bitcode\n+        } else if sess.opts.debugging_opts.embed_bitcode {\n+            match sess.opts.optimize {\n+                config::OptLevel::No | config::OptLevel::Less => {\n+                    EmitObj::ObjectCode(BitcodeSection::Marker)\n+                }\n+                _ => EmitObj::ObjectCode(BitcodeSection::Full),\n+            }\n+        } else {\n+            EmitObj::ObjectCode(BitcodeSection::None)\n+        };\n+\n     modules_config.emit_pre_lto_bc = need_pre_lto_bitcode_for_incr_comp(sess);\n \n     modules_config.no_integrated_as =\n@@ -416,20 +432,20 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n                 // could be invoked specially with output_type_assembly, so\n                 // in this case we still want the metadata object file.\n                 if !sess.opts.output_types.contains_key(&OutputType::Assembly) {\n-                    metadata_config.emit_obj = true;\n-                    allocator_config.emit_obj = true;\n+                    metadata_config.emit_obj = emit_obj;\n+                    allocator_config.emit_obj = emit_obj;\n                 }\n             }\n             OutputType::Object => {\n-                modules_config.emit_obj = true;\n+                modules_config.emit_obj = emit_obj;\n             }\n             OutputType::Metadata => {\n-                metadata_config.emit_obj = true;\n+                metadata_config.emit_obj = emit_obj;\n             }\n             OutputType::Exe => {\n-                modules_config.emit_obj = true;\n-                metadata_config.emit_obj = true;\n-                allocator_config.emit_obj = true;\n+                modules_config.emit_obj = emit_obj;\n+                metadata_config.emit_obj = emit_obj;\n+                allocator_config.emit_obj = emit_obj;\n             }\n             OutputType::Mir => {}\n             OutputType::DepInfo => {}\n@@ -880,7 +896,7 @@ fn execute_copy_from_cache_work_item<B: ExtraBackendMethods>(\n         }\n     }\n \n-    assert_eq!(object.is_some(), module_config.emit_obj);\n+    assert_eq!(object.is_some(), module_config.emit_obj != EmitObj::None);\n     assert_eq!(bytecode.is_some(), module_config.emit_bc);\n     assert_eq!(bytecode_compressed.is_some(), module_config.emit_bc_compressed);\n "}, {"sha": "6d688c12977e3acf4ba43db0258bb0263cb8bc15", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b15423e72e48125a40a3192c2d49a48e54b5c314/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15423e72e48125a40a3192c2d49a48e54b5c314/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=b15423e72e48125a40a3192c2d49a48e54b5c314", "patch": "@@ -771,9 +771,6 @@ pub struct TargetOptions {\n     /// rather than \"default\"\n     pub default_hidden_visibility: bool,\n \n-    /// Whether or not bitcode is embedded in object files\n-    pub embed_bitcode: bool,\n-\n     /// Whether a .debug_gdb_scripts section will be added to the output object file\n     pub emit_debug_gdb_scripts: bool,\n \n@@ -893,7 +890,6 @@ impl Default for TargetOptions {\n             no_builtins: false,\n             codegen_backend: \"llvm\".to_string(),\n             default_hidden_visibility: false,\n-            embed_bitcode: false,\n             emit_debug_gdb_scripts: true,\n             requires_uwtable: false,\n             simd_types_indirect: true,\n@@ -1208,7 +1204,6 @@ impl Target {\n         key!(no_builtins, bool);\n         key!(codegen_backend);\n         key!(default_hidden_visibility, bool);\n-        key!(embed_bitcode, bool);\n         key!(emit_debug_gdb_scripts, bool);\n         key!(requires_uwtable, bool);\n         key!(simd_types_indirect, bool);\n@@ -1437,7 +1432,6 @@ impl ToJson for Target {\n         target_option_val!(no_builtins);\n         target_option_val!(codegen_backend);\n         target_option_val!(default_hidden_visibility);\n-        target_option_val!(embed_bitcode);\n         target_option_val!(emit_debug_gdb_scripts);\n         target_option_val!(requires_uwtable);\n         target_option_val!(simd_types_indirect);"}]}