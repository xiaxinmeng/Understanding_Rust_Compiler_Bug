{"sha": "c5a766f13379e543d2721b610c8eb6f3beb2af69", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1YTc2NmYxMzM3OWU1NDNkMjcyMWI2MTBjOGViNmYzYmViMmFmNjk=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-10T20:56:55Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-11T21:58:39Z"}, "message": "Fix two invalid import cases we were not detecting:\n* If an import was unused we would never print any errors for it.\n* We would keep the existing environment in scope when descending 'foo.bar'\n  and would find 'bar' in the global environment if there was no 'bar' in\n  'foo'.", "tree": {"sha": "4e0857ddd4bd08c32a37470e4ee64c5b193b970c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e0857ddd4bd08c32a37470e4ee64c5b193b970c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5a766f13379e543d2721b610c8eb6f3beb2af69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a766f13379e543d2721b610c8eb6f3beb2af69", "html_url": "https://github.com/rust-lang/rust/commit/c5a766f13379e543d2721b610c8eb6f3beb2af69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5a766f13379e543d2721b610c8eb6f3beb2af69/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8eeec1dbd7e06bc811e55c641b6c282807997a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8eeec1dbd7e06bc811e55c641b6c282807997a5", "html_url": "https://github.com/rust-lang/rust/commit/a8eeec1dbd7e06bc811e55c641b6c282807997a5"}], "stats": {"total": 78, "additions": 61, "deletions": 17}, "files": [{"sha": "2909882ec7760561d2b0a11d7ae138f405d39c0b", "filename": "src/Makefile", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5a766f13379e543d2721b610c8eb6f3beb2af69/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c5a766f13379e543d2721b610c8eb6f3beb2af69/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=c5a766f13379e543d2721b610c8eb6f3beb2af69", "patch": "@@ -402,6 +402,8 @@ TEST_XFAILS_BOOT :=  $(TASK_XFAILS) \\\n                     test/run-pass/vec-slice.rs \\\n                     test/run-pass/while-and-do-while.rs \\\n                     test/run-fail/task-comm-14.rs \\\n+                    test/compile-fail/import.rs \\\n+                    test/compile-fail/import2.rs \\\n                     test/compile-fail/bad-recv.rs \\\n                     test/compile-fail/bad-send.rs \\\n                     test/compile-fail/infinite-vec-type-recursion.rs \\\n@@ -477,6 +479,8 @@ TEST_XFAILS_RUSTC := $(filter-out \\\n                       $(addprefix test/compile-fail/, \\\n                         arg-count-mismatch.rs \\\n                         arg-type-mismatch.rs \\\n+                        import.rs \\\n+                        import2.rs \\\n                         while-type-error.rs \\\n                         ), \\\n                       $(wildcard test/*/*.rs test/*/*.rc))"}, {"sha": "cf148c4ba557f74e33e6025d4ea01089cbf469b2", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c5a766f13379e543d2721b610c8eb6f3beb2af69/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a766f13379e543d2721b610c8eb6f3beb2af69/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=c5a766f13379e543d2721b610c8eb6f3beb2af69", "patch": "@@ -66,23 +66,26 @@ fn unwrap_def(option.t[def_wrap] d_) -> option.t[def] {\n \n // Follow the path of an import and return what it ultimately points to.\n \n-fn find_final_def(&env e, vec[ident] idents) -> option.t[def_wrap] {\n+fn find_final_def(&env e, &span sp, vec[ident] idents) -> option.t[def_wrap] {\n     auto len = _vec.len[ident](idents);\n     auto first = idents.(0);\n+    auto d_ = lookup_name(e, first);\n     if (len == 1u) {\n-        ret lookup_name(e, first);\n+        ret d_;\n     }\n-    auto d_ = lookup_name(e, first);\n     alt (d_) {\n         case (none[def_wrap]) {\n+            e.sess.span_err(sp, \"unresolved name: \" + first);\n             ret d_;\n         }\n         case (some[def_wrap](?d)) {\n-            alt(d) {\n+            alt (d) {\n                 case (def_wrap_mod(?i)) {\n-                    auto new_env = update_env_for_item(e, i);\n                     auto new_idents = _vec.slice[ident](idents, 1u, len);\n-                    ret find_final_def(new_env, new_idents);\n+                    auto tmp_e = rec(scopes = nil[scope],\n+                                     sess = e.sess);\n+                    auto new_e = update_env_for_item(tmp_e, i);\n+                    ret find_final_def(new_e, sp, new_idents);\n                 }\n             }\n         }\n@@ -140,12 +143,7 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def_wrap] {\n                 ret some[def_wrap](def_wrap_use(i));\n             }\n             case (ast.view_item_import(?idents,_)) {\n-                auto d = find_final_def(e, idents);\n-                alt (d) {\n-                    case (some[def_wrap](_)) {\n-                        ret d;\n-                    }\n-                }\n+                ret find_final_def(e, i.span, idents);\n             }\n         }\n         fail;\n@@ -296,6 +294,24 @@ fn fold_expr_name(&env e, &span sp, &ast.name n,\n     ret @fold.respan[ast.expr_](sp, ast.expr_name(n, d_, a));\n }\n \n+fn fold_view_item_import(&env e, &span sp, vec[ident] is,\n+                         ast.def_id id) -> @ast.view_item {\n+    // Produce errors for invalid imports\n+    auto len = _vec.len[ast.ident](is);\n+    auto last_id = is.(len - 1u);\n+    auto d = lookup_name(e, last_id);\n+    alt (d) {\n+        case (none[def_wrap]) {\n+            e.sess.span_err(sp, \"unresolved name: \" + last_id);\n+        }\n+        case (some[def_wrap](_)) {\n+        }\n+    }\n+\n+    ret @fold.respan[ast.view_item_](sp, ast.view_item_import(is, id));\n+}\n+\n+\n fn fold_ty_path(&env e, &span sp, ast.path p,\n                 &option.t[def] d) -> @ast.ty {\n \n@@ -347,6 +363,7 @@ fn resolve_crate(session.session sess, @ast.crate crate) -> @ast.crate {\n \n     fld = @rec( fold_pat_tag = bind fold_pat_tag(_,_,_,_,_,_),\n                 fold_expr_name = bind fold_expr_name(_,_,_,_,_),\n+                fold_view_item_import = bind fold_view_item_import(_,_,_,_),\n                 fold_ty_path = bind fold_ty_path(_,_,_,_),\n                 update_env_for_crate = bind update_env_for_crate(_,_),\n                 update_env_for_item = bind update_env_for_item(_,_),"}, {"sha": "71ef0dec9c584e4f08f141c36e10620be2e91cd0", "filename": "src/test/compile-fail/import.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5a766f13379e543d2721b610c8eb6f3beb2af69/src%2Ftest%2Fcompile-fail%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a766f13379e543d2721b610c8eb6f3beb2af69/src%2Ftest%2Fcompile-fail%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport.rs?ref=c5a766f13379e543d2721b610c8eb6f3beb2af69", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern: unresolved name: baz\n+import zed.bar;\n+import zed.baz;\n+mod zed {\n+  fn bar() {\n+    log \"bar\";\n+  }\n+}\n+fn main(vec[str] args) {\n+   bar();\n+}"}, {"sha": "5a9ddcbd81513669fdaf57ba6de9f6cdf7eb9bb1", "filename": "src/test/compile-fail/import2.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5a766f13379e543d2721b610c8eb6f3beb2af69/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a766f13379e543d2721b610c8eb6f3beb2af69/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=c5a766f13379e543d2721b610c8eb6f3beb2af69", "patch": "@@ -0,0 +1,12 @@\n+// error-pattern: unresolved name: zed\n+import baz.zed.bar;\n+mod baz {\n+}\n+mod zed {\n+  fn bar() {\n+    log \"bar3\";\n+  }\n+}\n+fn main(vec[str] args) {\n+  bar();\n+}"}, {"sha": "ac46061c40f78d2187f8a9840fbe4b1af483907e", "filename": "src/test/run-pass/use.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5a766f13379e543d2721b610c8eb6f3beb2af69/src%2Ftest%2Frun-pass%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a766f13379e543d2721b610c8eb6f3beb2af69/src%2Ftest%2Frun-pass%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse.rs?ref=c5a766f13379e543d2721b610c8eb6f3beb2af69", "patch": "@@ -3,18 +3,18 @@ use libc();\n use zed(name = \"std\");\n use bar(name = \"std\", ver = \"0.0.1\");\n \n-import std._str;\n-import x = std._str;\n-\n+// FIXME: commented out since resolve doesn't know how to handle crates yet.\n+// import std._str;\n+// import x = std._str;\n \n mod baz {\n   use std;\n   use libc();\n   use zed(name = \"std\");\n   use bar(name = \"std\", ver = \"0.0.1\");\n \n-  import std._str;\n-  import x = std._str;\n+  // import std._str;\n+  // import x = std._str;\n }\n \n fn main() {"}]}