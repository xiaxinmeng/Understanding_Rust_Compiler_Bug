{"sha": "68910d2f341ddd7635265c3847712cc7e44ef75e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OTEwZDJmMzQxZGRkNzYzNTI2NWMzODQ3NzEyY2M3ZTQ0ZWY3NWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-29T19:07:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-29T19:07:04Z"}, "message": "Merge #6670\n\n6670: Allow renaming between self and first param with owned parameters r=matklad a=Veykril\n\nThis fixes renaming owned SelfParams turning the parameter into a reference, as in, for a type `Foo`, `fn foo(self) {}` became `fn foo(renamed_name: &Foo) {}` prior to this.\r\n\r\nSimilarly for the other way around, we now support renaming non-ref parameters to `self`. Additionally we do more checks now than before. We check:\r\n- that the function has an impl block\r\n- that we are renaming the first parameter(prior we ignored which parameter was renamed and always picked the first nevertheless)\r\n- that the parameter's type aligns with the impl block(minus one level of reference abstraction to account for `&self`/`&mut self`)\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "ffc3bbff43cb941700faca0e2b6d645eab36fdc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffc3bbff43cb941700faca0e2b6d645eab36fdc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68910d2f341ddd7635265c3847712cc7e44ef75e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfw/FYCRBK7hj4Ov3rIwAAdHIIADMzivdps74baphOg3dMTj06\nw1WbD/tPLZJKkLv+fAsNnhgAAVfDMcBMc7Sc6ttYMNni9xuuwc1p7oUP+vyR89Y+\n6yDTD+54WIwl8TrBJTQjJjrvMTed+inYY51lf4LsdKl1nTub45ZzEFiyTByh88TM\nrnkeub3YqBZhgScQcK8vg5woXDSTnecxsRN/xFV1wJWRKXRZFpbJybO+FVcWp+Xw\nxjk0B/cXBltYjooJ9lwEdly2OxOWFav5SG/Rav0HyXNe/py5eB797i96CilL2rwg\n1Tl3XQK4DK5e9ZsjFQmADKtf16FU6jmaZ8zcvhp7ACSscZDTnQjPrOnxIsxY0GQ=\n=PWp6\n-----END PGP SIGNATURE-----\n", "payload": "tree ffc3bbff43cb941700faca0e2b6d645eab36fdc4\nparent 65a789368a55416099a8b9d866abb5142273984e\nparent 4c33ae33e96a0087f9f8451fc100b8681237d05f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606676824 +0000\ncommitter GitHub <noreply@github.com> 1606676824 +0000\n\nMerge #6670\n\n6670: Allow renaming between self and first param with owned parameters r=matklad a=Veykril\n\nThis fixes renaming owned SelfParams turning the parameter into a reference, as in, for a type `Foo`, `fn foo(self) {}` became `fn foo(renamed_name: &Foo) {}` prior to this.\r\n\r\nSimilarly for the other way around, we now support renaming non-ref parameters to `self`. Additionally we do more checks now than before. We check:\r\n- that the function has an impl block\r\n- that we are renaming the first parameter(prior we ignored which parameter was renamed and always picked the first nevertheless)\r\n- that the parameter's type aligns with the impl block(minus one level of reference abstraction to account for `&self`/`&mut self`)\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68910d2f341ddd7635265c3847712cc7e44ef75e", "html_url": "https://github.com/rust-lang/rust/commit/68910d2f341ddd7635265c3847712cc7e44ef75e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68910d2f341ddd7635265c3847712cc7e44ef75e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65a789368a55416099a8b9d866abb5142273984e", "url": "https://api.github.com/repos/rust-lang/rust/commits/65a789368a55416099a8b9d866abb5142273984e", "html_url": "https://github.com/rust-lang/rust/commit/65a789368a55416099a8b9d866abb5142273984e"}, {"sha": "4c33ae33e96a0087f9f8451fc100b8681237d05f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c33ae33e96a0087f9f8451fc100b8681237d05f", "html_url": "https://github.com/rust-lang/rust/commit/4c33ae33e96a0087f9f8451fc100b8681237d05f"}], "stats": {"total": 166, "additions": 152, "deletions": 14}, "files": [{"sha": "73145769679b07e38464020adf57c2412a7c76e1", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 152, "deletions": 14, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/68910d2f341ddd7635265c3847712cc7e44ef75e/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68910d2f341ddd7635265c3847712cc7e44ef75e/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=68910d2f341ddd7635265c3847712cc7e44ef75e", "patch": "@@ -221,24 +221,47 @@ fn rename_to_self(\n     let source_file = sema.parse(position.file_id);\n     let syn = source_file.syntax();\n \n-    let fn_def = find_node_at_offset::<ast::Fn>(syn, position.offset)\n+    let (fn_def, fn_ast) = find_node_at_offset::<ast::Fn>(syn, position.offset)\n+        .and_then(|fn_ast| sema.to_def(&fn_ast).zip(Some(fn_ast)))\n         .ok_or_else(|| RenameError(\"No surrounding method declaration found\".to_string()))?;\n-    let params =\n-        fn_def.param_list().ok_or_else(|| RenameError(\"Method has no parameters\".to_string()))?;\n-    if params.self_param().is_some() {\n+    let param_range = fn_ast\n+        .param_list()\n+        .and_then(|p| p.params().next())\n+        .ok_or_else(|| RenameError(\"Method has no parameters\".to_string()))?\n+        .syntax()\n+        .text_range();\n+    if !param_range.contains(position.offset) {\n+        return Err(RenameError(\"Only the first parameter can be self\".to_string()));\n+    }\n+\n+    let impl_block = find_node_at_offset::<ast::Impl>(syn, position.offset)\n+        .and_then(|def| sema.to_def(&def))\n+        .ok_or_else(|| RenameError(\"No impl block found for function\".to_string()))?;\n+    if fn_def.self_param(sema.db).is_some() {\n         return Err(RenameError(\"Method already has a self parameter\".to_string()));\n     }\n+\n+    let params = fn_def.params(sema.db);\n     let first_param =\n-        params.params().next().ok_or_else(|| RenameError(\"Method has no parameters\".into()))?;\n-    let mutable = match first_param.ty() {\n-        Some(ast::Type::RefType(rt)) => rt.mut_token().is_some(),\n-        _ => return Err(RenameError(\"Not renaming other types\".to_string())),\n+        params.first().ok_or_else(|| RenameError(\"Method has no parameters\".into()))?;\n+    let first_param_ty = first_param.ty();\n+    let impl_ty = impl_block.target_ty(sema.db);\n+    let (ty, self_param) = if impl_ty.remove_ref().is_some() {\n+        // if the impl is a ref to the type we can just match the `&T` with self directly\n+        (first_param_ty.clone(), \"self\")\n+    } else {\n+        first_param_ty.remove_ref().map_or((first_param_ty.clone(), \"self\"), |ty| {\n+            (ty, if first_param_ty.is_mutable_reference() { \"&mut self\" } else { \"&self\" })\n+        })\n     };\n \n+    if ty != impl_ty {\n+        return Err(RenameError(\"Parameter type differs from impl block type\".to_string()));\n+    }\n+\n     let RangeInfo { range, info: refs } = find_all_refs(sema, position, None)\n         .ok_or_else(|| RenameError(\"No reference found at position\".to_string()))?;\n \n-    let param_range = first_param.syntax().text_range();\n     let (param_ref, usages): (Vec<Reference>, Vec<Reference>) = refs\n         .into_iter()\n         .partition(|reference| param_range.intersect(reference.file_range.range).is_some());\n@@ -254,10 +277,7 @@ fn rename_to_self(\n \n     edits.push(SourceFileEdit {\n         file_id: position.file_id,\n-        edit: TextEdit::replace(\n-            param_range,\n-            String::from(if mutable { \"&mut self\" } else { \"&self\" }),\n-        ),\n+        edit: TextEdit::replace(param_range, String::from(self_param)),\n     });\n \n     Ok(RangeInfo::new(range, SourceChange::from(edits)))\n@@ -280,7 +300,11 @@ fn text_edit_from_self_param(\n \n     let mut replacement_text = String::from(new_name);\n     replacement_text.push_str(\": \");\n-    replacement_text.push_str(self_param.mut_token().map_or(\"&\", |_| \"&mut \"));\n+    match (self_param.amp_token(), self_param.mut_token()) {\n+        (None, None) => (),\n+        (Some(_), None) => replacement_text.push('&'),\n+        (_, Some(_)) => replacement_text.push_str(\"&mut \"),\n+    };\n     replacement_text.push_str(type_name.as_str());\n \n     Some(TextEdit::replace(self_param.syntax().text_range(), replacement_text))\n@@ -1080,6 +1104,95 @@ impl Foo {\n         self.i\n     }\n }\n+\"#,\n+        );\n+        check(\n+            \"self\",\n+            r#\"\n+struct Foo { i: i32 }\n+\n+impl Foo {\n+    fn f(foo<|>: Foo) -> i32 {\n+        foo.i\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Foo { i: i32 }\n+\n+impl Foo {\n+    fn f(self) -> i32 {\n+        self.i\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_parameter_to_self_error_no_impl() {\n+        check(\n+            \"self\",\n+            r#\"\n+struct Foo { i: i32 }\n+\n+fn f(foo<|>: &mut Foo) -> i32 {\n+    foo.i\n+}\n+\"#,\n+            \"error: No impl block found for function\",\n+        );\n+        check(\n+            \"self\",\n+            r#\"\n+struct Foo { i: i32 }\n+struct Bar;\n+\n+impl Bar {\n+    fn f(foo<|>: &mut Foo) -> i32 {\n+        foo.i\n+    }\n+}\n+\"#,\n+            \"error: Parameter type differs from impl block type\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_parameter_to_self_error_not_first() {\n+        check(\n+            \"self\",\n+            r#\"\n+struct Foo { i: i32 }\n+impl Foo {\n+    fn f(x: (), foo<|>: &mut Foo) -> i32 {\n+        foo.i\n+    }\n+}\n+\"#,\n+            \"error: Only the first parameter can be self\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_parameter_to_self_impl_ref() {\n+        check(\n+            \"self\",\n+            r#\"\n+struct Foo { i: i32 }\n+impl &Foo {\n+    fn f(foo<|>: &Foo) -> i32 {\n+        foo.i\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Foo { i: i32 }\n+impl &Foo {\n+    fn f(self) -> i32 {\n+        self.i\n+    }\n+}\n \"#,\n         );\n     }\n@@ -1109,6 +1222,31 @@ impl Foo {\n         );\n     }\n \n+    #[test]\n+    fn test_owned_self_to_parameter() {\n+        check(\n+            \"foo\",\n+            r#\"\n+struct Foo { i: i32 }\n+\n+impl Foo {\n+    fn f(<|>self) -> i32 {\n+        self.i\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Foo { i: i32 }\n+\n+impl Foo {\n+    fn f(foo: Foo) -> i32 {\n+        foo.i\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_self_in_path_to_parameter() {\n         check("}]}