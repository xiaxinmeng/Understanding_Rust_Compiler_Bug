{"sha": "50517d58a2f43779c27478baf77f938c0b3ebba0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNTE3ZDU4YTJmNDM3NzljMjc0NzhiYWY3N2Y5MzhjMGIzZWJiYTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-02T09:41:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-02T09:41:39Z"}, "message": "Auto merge of #41488 - estebank:closure-args, r=arielb1\n\nClean up callable type mismatch errors\n\n```rust\nerror[E0593]: closure takes 1 argument but 2 arguments are required here\n  --> ../../src/test/ui/mismatched_types/closure-arg-count.rs:13:15\n   |\n13 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n   |               ^^^^^^^ -------------------------- takes 1 argument\n   |               |\n   |               expected closure that takes 2 arguments\n```\n\ninstead of\n\n```rust\nerror[E0281]: type mismatch: the type `[closure@../../src/test/ui/mismatched_types/closure-arg-count.rs:13:23: 13:49]` implements the trait `for<'r> std::ops::FnMut<(&'r {integer},)>`, but the trait `for<'r, 'r> std::ops::FnMut<(&'r {integer}, &'r {integer})>` is required (expected a tuple with 2 elements, found one with 1 elements)\n  --> ../../src/test/ui/mismatched_types/closure-arg-count.rs:13:15\n   |\n13 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n   |               ^^^^^^^\n```\n\nFix #21857, re #24680.", "tree": {"sha": "17b4c23fd04ca5324a0f00b06a024a4ff8b264ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17b4c23fd04ca5324a0f00b06a024a4ff8b264ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50517d58a2f43779c27478baf77f938c0b3ebba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50517d58a2f43779c27478baf77f938c0b3ebba0", "html_url": "https://github.com/rust-lang/rust/commit/50517d58a2f43779c27478baf77f938c0b3ebba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50517d58a2f43779c27478baf77f938c0b3ebba0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33535afda497e1de8a831e8270ae8099434f662b", "url": "https://api.github.com/repos/rust-lang/rust/commits/33535afda497e1de8a831e8270ae8099434f662b", "html_url": "https://github.com/rust-lang/rust/commit/33535afda497e1de8a831e8270ae8099434f662b"}, {"sha": "b10e2933d939a8412b1358c235f39cb87ae1a450", "url": "https://api.github.com/repos/rust-lang/rust/commits/b10e2933d939a8412b1358c235f39cb87ae1a450", "html_url": "https://github.com/rust-lang/rust/commit/b10e2933d939a8412b1358c235f39cb87ae1a450"}], "stats": {"total": 423, "additions": 399, "deletions": 24}, "files": [{"sha": "8ef42826faca5cc2d00043951c4a785f67c5f886", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=50517d58a2f43779c27478baf77f938c0b3ebba0", "patch": "@@ -1049,18 +1049,19 @@ which expected that trait. This error typically occurs when working with\n `Fn`-based types. Erroneous code example:\n \n ```compile_fail,E0281\n-fn foo<F: Fn()>(x: F) { }\n+fn foo<F: Fn(usize)>(x: F) { }\n \n fn main() {\n-    // type mismatch: the type ... implements the trait `core::ops::Fn<(_,)>`,\n-    // but the trait `core::ops::Fn<()>` is required (expected (), found tuple\n+    // type mismatch: ... implements the trait `core::ops::Fn<(String,)>`,\n+    // but the trait `core::ops::Fn<(usize,)>` is required\n     // [E0281]\n-    foo(|y| { });\n+    foo(|y: String| { });\n }\n ```\n \n-The issue in this case is that `foo` is defined as accepting a `Fn` with no\n-arguments, but the closure we attempted to pass to it requires one argument.\n+The issue in this case is that `foo` is defined as accepting a `Fn` with one\n+argument of type `String`, but the closure we attempted to pass to it requires\n+one arguments of type `usize`.\n \"##,\n \n E0282: r##\"\n@@ -1807,6 +1808,20 @@ makes a difference in practice.)\n [rfc401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n \"##,\n \n+E0593: r##\"\n+You tried to supply an `Fn`-based type with an incorrect number of arguments\n+than what was expected. Erroneous code example:\n+\n+```compile_fail,E0593\n+fn foo<F: Fn()>(x: F) { }\n+\n+fn main() {\n+    // [E0593] closure takes 1 argument but 0 arguments are required\n+    foo(|y| { });\n+}\n+```\n+\"##,\n+\n }\n \n "}, {"sha": "e846d74febfb7af6f7a83fe6710ce9d8abd2f30e", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 103, "deletions": 8, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=50517d58a2f43779c27478baf77f938c0b3ebba0", "patch": "@@ -35,7 +35,7 @@ use rustc::lint::builtin::EXTRA_REQUIREMENT_IN_IMPL;\n use std::fmt;\n use syntax::ast::{self, NodeId};\n use ty::{self, AdtKind, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable, TyInfer, TyVar};\n-use ty::error::ExpectedFound;\n+use ty::error::{ExpectedFound, TypeError};\n use ty::fast_reject;\n use ty::fold::TypeFolder;\n use ty::subst::Subst;\n@@ -663,13 +663,54 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 if actual_trait_ref.self_ty().references_error() {\n                     return;\n                 }\n-                struct_span_err!(self.tcx.sess, span, E0281,\n-                    \"type mismatch: the type `{}` implements the trait `{}`, \\\n-                     but the trait `{}` is required ({})\",\n-                    expected_trait_ref.self_ty(),\n-                    expected_trait_ref,\n-                    actual_trait_ref,\n-                    e)\n+                let expected_trait_ty = expected_trait_ref.self_ty();\n+                let found_span = expected_trait_ty.ty_to_def_id().and_then(|did| {\n+                    self.tcx.hir.span_if_local(did)\n+                });\n+\n+                if let &TypeError::TupleSize(ref expected_found) = e {\n+                    // Expected `|x| { }`, found `|x, y| { }`\n+                    self.report_arg_count_mismatch(span,\n+                                                   found_span,\n+                                                   expected_found.expected,\n+                                                   expected_found.found,\n+                                                   expected_trait_ty.is_closure())\n+                } else if let &TypeError::Sorts(ref expected_found) = e {\n+                    let expected = if let ty::TyTuple(tys, _) = expected_found.expected.sty {\n+                        tys.len()\n+                    } else {\n+                        1\n+                    };\n+                    let found = if let ty::TyTuple(tys, _) = expected_found.found.sty {\n+                        tys.len()\n+                    } else {\n+                        1\n+                    };\n+\n+                    if expected != found {\n+                        // Expected `|| { }`, found `|x, y| { }`\n+                        // Expected `fn(x) -> ()`, found `|| { }`\n+                        self.report_arg_count_mismatch(span,\n+                                                       found_span,\n+                                                       expected,\n+                                                       found,\n+                                                       expected_trait_ty.is_closure())\n+                    } else {\n+                        self.report_type_argument_mismatch(span,\n+                                                            found_span,\n+                                                            expected_trait_ty,\n+                                                            expected_trait_ref,\n+                                                            actual_trait_ref,\n+                                                            e)\n+                    }\n+                } else {\n+                    self.report_type_argument_mismatch(span,\n+                                                        found_span,\n+                                                        expected_trait_ty,\n+                                                        expected_trait_ref,\n+                                                        actual_trait_ref,\n+                                                        e)\n+                }\n             }\n \n             TraitNotObjectSafe(did) => {\n@@ -681,6 +722,60 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.note_obligation_cause(&mut err, obligation);\n         err.emit();\n     }\n+\n+    fn report_type_argument_mismatch(&self,\n+                                      span: Span,\n+                                      found_span: Option<Span>,\n+                                      expected_ty: Ty<'tcx>,\n+                                      expected_ref: ty::PolyTraitRef<'tcx>,\n+                                      found_ref: ty::PolyTraitRef<'tcx>,\n+                                      type_error: &TypeError<'tcx>)\n+        -> DiagnosticBuilder<'tcx>\n+    {\n+        let mut err = struct_span_err!(self.tcx.sess, span, E0281,\n+            \"type mismatch: `{}` implements the trait `{}`, but the trait `{}` is required\",\n+            expected_ty,\n+            expected_ref,\n+            found_ref);\n+\n+        err.span_label(span, &format!(\"{}\", type_error));\n+\n+        if let Some(sp) = found_span {\n+            err.span_label(span, &format!(\"requires `{}`\", found_ref));\n+            err.span_label(sp, &format!(\"implements `{}`\", expected_ref));\n+        }\n+\n+        err\n+    }\n+\n+    fn report_arg_count_mismatch(&self,\n+                                 span: Span,\n+                                 found_span: Option<Span>,\n+                                 expected: usize,\n+                                 found: usize,\n+                                 is_closure: bool)\n+        -> DiagnosticBuilder<'tcx>\n+    {\n+        let mut err = struct_span_err!(self.tcx.sess, span, E0593,\n+            \"{} takes {} argument{} but {} argument{} {} required\",\n+            if is_closure { \"closure\" } else { \"function\" },\n+            found,\n+            if found == 1 { \"\" } else { \"s\" },\n+            expected,\n+            if expected == 1 { \"\" } else { \"s\" },\n+            if expected == 1 { \"is\" } else { \"are\" });\n+\n+        err.span_label(span, &format!(\"expected {} that takes {} argument{}\",\n+                                      if is_closure { \"closure\" } else { \"function\" },\n+                                      expected,\n+                                      if expected == 1 { \"\" } else { \"s\" }));\n+        if let Some(span) = found_span {\n+            err.span_label(span, &format!(\"takes {} argument{}\",\n+                                          found,\n+                                          if found == 1 { \"\" } else { \"s\" }));\n+        }\n+        err\n+    }\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {"}, {"sha": "e41202771ccbf3a8c610d80ccc45430f048f5148", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=50517d58a2f43779c27478baf77f938c0b3ebba0", "patch": "@@ -117,12 +117,16 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                 write!(f, \"lifetimes do not intersect\")\n             }\n             RegionsInsufficientlyPolymorphic(br, _, _) => {\n-                write!(f, \"expected bound lifetime parameter {}, \\\n-                           found concrete lifetime\", br)\n+                write!(f,\n+                       \"expected bound lifetime parameter{}{}, found concrete lifetime\",\n+                       if br.is_named() { \" \" } else { \"\" },\n+                       br)\n             }\n             RegionsOverlyPolymorphic(br, _, _) => {\n-                write!(f, \"expected concrete lifetime, \\\n-                           found bound lifetime parameter {}\", br)\n+                write!(f,\n+                       \"expected concrete lifetime, found bound lifetime parameter{}{}\",\n+                       if br.is_named() { \" \" } else { \"\" },\n+                       br)\n             }\n             Sorts(values) => ty::tls::with(|tcx| {\n                 report_maybe_different(f, values.expected.sort_string(tcx),"}, {"sha": "b82e2dc0c8dd5094d336e252e36f6d09a198657b", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=50517d58a2f43779c27478baf77f938c0b3ebba0", "patch": "@@ -68,6 +68,15 @@ pub enum BoundRegion {\n     BrEnv,\n }\n \n+impl BoundRegion {\n+    pub fn is_named(&self) -> bool {\n+        match *self {\n+            BoundRegion::BrNamed(..) => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n /// When a region changed from late-bound to early-bound when #32330\n /// was fixed, its `RegionParameterDef` will have one of these\n /// structures that we can use to give nicer errors.\n@@ -1193,6 +1202,13 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    pub fn is_closure(&self) -> bool {\n+        match self.sty {\n+            TyClosure(..) => true,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn is_integral(&self) -> bool {\n         match self.sty {\n             TyInfer(IntVar(_)) | TyInt(_) | TyUint(_) => true,"}, {"sha": "abb66c99fab9c6d8eb5c831e7fa6b309c3f642e5", "filename": "src/test/ui/mismatched_types/E0281.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2FE0281.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2FE0281.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0281.rs?ref=50517d58a2f43779c27478baf77f938c0b3ebba0", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo<F: Fn(usize)>(x: F) { }\n+\n+fn main() {\n+    foo(|y: String| { });\n+    //~^ ERROR E0281\n+    //~| ERROR E0281\n+    //~| NOTE implements\n+    //~| NOTE implements\n+    //~| NOTE requires\n+    //~| NOTE requires\n+    //~| NOTE expected usize, found struct `std::string::String`\n+    //~| NOTE expected usize, found struct `std::string::String`\n+    //~| NOTE required by `foo`\n+    //~| NOTE required by `foo`\n+}"}, {"sha": "28a649d4c91a471acb22e8c8e1220fe5ecd71da2", "filename": "src/test/ui/mismatched_types/E0281.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2FE0281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2FE0281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0281.stderr?ref=50517d58a2f43779c27478baf77f938c0b3ebba0", "patch": "@@ -0,0 +1,24 @@\n+error[E0281]: type mismatch: `[closure@$DIR/E0281.rs:14:9: 14:24]` implements the trait `std::ops::Fn<(std::string::String,)>`, but the trait `std::ops::Fn<(usize,)>` is required\n+  --> $DIR/E0281.rs:14:5\n+   |\n+14 |     foo(|y: String| { });\n+   |     ^^^ --------------- implements `std::ops::Fn<(std::string::String,)>`\n+   |     |\n+   |     requires `std::ops::Fn<(usize,)>`\n+   |     expected usize, found struct `std::string::String`\n+   |\n+   = note: required by `foo`\n+\n+error[E0281]: type mismatch: `[closure@$DIR/E0281.rs:14:9: 14:24]` implements the trait `std::ops::FnOnce<(std::string::String,)>`, but the trait `std::ops::FnOnce<(usize,)>` is required\n+  --> $DIR/E0281.rs:14:5\n+   |\n+14 |     foo(|y: String| { });\n+   |     ^^^ --------------- implements `std::ops::FnOnce<(std::string::String,)>`\n+   |     |\n+   |     requires `std::ops::FnOnce<(usize,)>`\n+   |     expected usize, found struct `std::string::String`\n+   |\n+   = note: required by `foo`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "284f82d86eb921e5d496f22cb4f56e794cf8a1be", "filename": "src/test/ui/mismatched_types/closure-arg-count.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs?ref=50517d58a2f43779c27478baf77f938c0b3ebba0", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    [1, 2, 3].sort_by(|| panic!());\n+    [1, 2, 3].sort_by(|tuple| panic!());\n+    [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n+}"}, {"sha": "c1b880b6162734e5a720e3452086e4a222831800", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=50517d58a2f43779c27478baf77f938c0b3ebba0", "patch": "@@ -0,0 +1,59 @@\n+error[E0593]: closure takes 0 arguments but 2 arguments are required\n+  --> $DIR/closure-arg-count.rs:12:15\n+   |\n+12 |     [1, 2, 3].sort_by(|| panic!());\n+   |               ^^^^^^^ ----------- takes 0 arguments\n+   |               |\n+   |               expected closure that takes 2 arguments\n+\n+error[E0593]: closure takes 0 arguments but 2 arguments are required\n+  --> $DIR/closure-arg-count.rs:12:15\n+   |\n+12 |     [1, 2, 3].sort_by(|| panic!());\n+   |               ^^^^^^^ ----------- takes 0 arguments\n+   |               |\n+   |               expected closure that takes 2 arguments\n+\n+error[E0593]: closure takes 1 argument but 2 arguments are required\n+  --> $DIR/closure-arg-count.rs:13:15\n+   |\n+13 |     [1, 2, 3].sort_by(|tuple| panic!());\n+   |               ^^^^^^^ ---------------- takes 1 argument\n+   |               |\n+   |               expected closure that takes 2 arguments\n+\n+error[E0593]: closure takes 1 argument but 2 arguments are required\n+  --> $DIR/closure-arg-count.rs:13:15\n+   |\n+13 |     [1, 2, 3].sort_by(|tuple| panic!());\n+   |               ^^^^^^^ ---------------- takes 1 argument\n+   |               |\n+   |               expected closure that takes 2 arguments\n+\n+error[E0308]: mismatched types\n+  --> $DIR/closure-arg-count.rs:14:24\n+   |\n+14 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n+   |                        ^^^^^^^^^^^^^^^ expected &{integer}, found tuple\n+   |\n+   = note: expected type `&{integer}`\n+              found type `(_, _)`\n+\n+error[E0593]: closure takes 1 argument but 2 arguments are required\n+  --> $DIR/closure-arg-count.rs:14:15\n+   |\n+14 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n+   |               ^^^^^^^ -------------------------- takes 1 argument\n+   |               |\n+   |               expected closure that takes 2 arguments\n+\n+error[E0593]: closure takes 1 argument but 2 arguments are required\n+  --> $DIR/closure-arg-count.rs:14:15\n+   |\n+14 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n+   |               ^^^^^^^ -------------------------- takes 1 argument\n+   |               |\n+   |               expected closure that takes 2 arguments\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "91298cb2bbd52a29f564f1c45f3313e9e1087599", "filename": "src/test/ui/mismatched_types/closure-mismatch.rs", "status": "renamed", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs?ref=50517d58a2f43779c27478baf77f938c0b3ebba0", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo<F: Fn()>(x: F) { }\n+trait Foo {}\n+\n+impl<T: Fn(&())> Foo for T {}\n+\n+fn baz<T: Foo>(_: T) {}\n \n fn main() {\n-    foo(|y| { }); //~ ERROR E0281\n-                  //~^ ERROR E0281\n+    baz(|_| ());\n }", "previous_filename": "src/test/compile-fail/E0281.rs"}, {"sha": "5b3eb5931896aee60c50c0e36b8efa0c97379607", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=50517d58a2f43779c27478baf77f938c0b3ebba0", "patch": "@@ -0,0 +1,24 @@\n+error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/closure-mismatch.rs:18:9: 18:15] as std::ops::FnOnce<(&'r (),)>>::Output == ()`\n+  --> $DIR/closure-mismatch.rs:18:5\n+   |\n+18 |     baz(|_| ());\n+   |     ^^^ expected bound lifetime parameter, found concrete lifetime\n+   |\n+   = note: concrete lifetime that was found is lifetime '_#0r\n+   = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]`\n+   = note: required by `baz`\n+\n+error[E0281]: type mismatch: `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]` implements the trait `std::ops::Fn<(_,)>`, but the trait `for<'r> std::ops::Fn<(&'r (),)>` is required\n+  --> $DIR/closure-mismatch.rs:18:5\n+   |\n+18 |     baz(|_| ());\n+   |     ^^^ ------ implements `std::ops::Fn<(_,)>`\n+   |     |\n+   |     requires `for<'r> std::ops::Fn<(&'r (),)>`\n+   |     expected concrete lifetime, found bound lifetime parameter\n+   |\n+   = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]`\n+   = note: required by `baz`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "4bea8177b7c5e354e64815a68085787044985ace", "filename": "src/test/ui/mismatched_types/fn-variance-1.rs", "status": "renamed", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.rs?ref=50517d58a2f43779c27478baf77f938c0b3ebba0", "patch": "@@ -19,9 +19,13 @@ fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n fn main() {\n     apply(&3, takes_imm);\n     apply(&3, takes_mut);\n-    //~^ ERROR (types differ in mutability)\n+    //~^ ERROR type mismatch\n+    //~| NOTE types differ in mutability\n+    //~| NOTE required by `apply`\n \n     apply(&mut 3, takes_mut);\n     apply(&mut 3, takes_imm);\n-    //~^ ERROR (types differ in mutability)\n+    //~^ ERROR type mismatch\n+    //~| NOTE types differ in mutability\n+    //~| NOTE required by `apply`\n }", "previous_filename": "src/test/compile-fail/fn-variance-1.rs"}, {"sha": "120fb87cdc89820ea2264348dea853e069c8d105", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=50517d58a2f43779c27478baf77f938c0b3ebba0", "patch": "@@ -0,0 +1,18 @@\n+error[E0281]: type mismatch: `fn(&mut isize) {takes_mut}` implements the trait `for<'r> std::ops::FnOnce<(&'r mut isize,)>`, but the trait `std::ops::FnOnce<(&{integer},)>` is required\n+  --> $DIR/fn-variance-1.rs:21:5\n+   |\n+21 |     apply(&3, takes_mut);\n+   |     ^^^^^ types differ in mutability\n+   |\n+   = note: required by `apply`\n+\n+error[E0281]: type mismatch: `fn(&isize) {takes_imm}` implements the trait `for<'r> std::ops::FnOnce<(&'r isize,)>`, but the trait `std::ops::FnOnce<(&mut {integer},)>` is required\n+  --> $DIR/fn-variance-1.rs:27:5\n+   |\n+27 |     apply(&mut 3, takes_imm);\n+   |     ^^^^^ types differ in mutability\n+   |\n+   = note: required by `apply`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7e489621e21027857fbacb0a562e16d3bf65f292", "filename": "src/test/ui/mismatched_types/issue-36053-2.rs", "status": "renamed", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs?ref=50517d58a2f43779c27478baf77f938c0b3ebba0", "patch": "@@ -18,4 +18,11 @@ fn main() {\n     //~^ ERROR no method named `count`\n     //~| ERROR E0281\n     //~| ERROR E0281\n+    //~| NOTE expected &str, found str\n+    //~| NOTE expected &str, found str\n+    //~| NOTE implements\n+    //~| NOTE implements\n+    //~| NOTE requires\n+    //~| NOTE requires\n+    //~| NOTE the method `count` exists but the following trait bounds\n }", "previous_filename": "src/test/compile-fail/issue-36053-2.rs"}, {"sha": "adc229aaacc54d77955283f760e5509e737aaf53", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=50517d58a2f43779c27478baf77f938c0b3ebba0", "patch": "@@ -0,0 +1,28 @@\n+error: no method named `count` found for type `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:17:39: 17:53]>` in the current scope\n+  --> $DIR/issue-36053-2.rs:17:55\n+   |\n+17 |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n+   |                                                       ^^^^^\n+   |\n+   = note: the method `count` exists but the following trait bounds were not satisfied: `[closure@$DIR/issue-36053-2.rs:17:39: 17:53] : std::ops::FnMut<(&_,)>`, `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:17:39: 17:53]> : std::iter::Iterator`\n+\n+error[E0281]: type mismatch: `[closure@$DIR/issue-36053-2.rs:17:39: 17:53]` implements the trait `for<'r> std::ops::FnMut<(&'r str,)>`, but the trait `for<'r> std::ops::FnMut<(&'r &str,)>` is required\n+  --> $DIR/issue-36053-2.rs:17:32\n+   |\n+17 |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n+   |                                ^^^^^^ -------------- implements `for<'r> std::ops::FnMut<(&'r str,)>`\n+   |                                |\n+   |                                requires `for<'r> std::ops::FnMut<(&'r &str,)>`\n+   |                                expected &str, found str\n+\n+error[E0281]: type mismatch: `[closure@$DIR/issue-36053-2.rs:17:39: 17:53]` implements the trait `for<'r> std::ops::FnOnce<(&'r str,)>`, but the trait `for<'r> std::ops::FnOnce<(&'r &str,)>` is required\n+  --> $DIR/issue-36053-2.rs:17:32\n+   |\n+17 |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n+   |                                ^^^^^^ -------------- implements `for<'r> std::ops::FnOnce<(&'r str,)>`\n+   |                                |\n+   |                                requires `for<'r> std::ops::FnOnce<(&'r &str,)>`\n+   |                                expected &str, found str\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "7400a27fb6bc14c5ec842e164bee284ba64b5aef", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.rs", "status": "renamed", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs?ref=50517d58a2f43779c27478baf77f938c0b3ebba0", "patch": "@@ -20,8 +20,16 @@ fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n \n pub fn main() {\n     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n+    //~^ NOTE implements\n+    //~| NOTE implements\n     let z = call_it(3, f);\n     //~^ ERROR type mismatch\n     //~| ERROR type mismatch\n+    //~| NOTE expected isize, found usize\n+    //~| NOTE expected isize, found usize\n+    //~| NOTE requires\n+    //~| NOTE requires\n+    //~| NOTE required by `call_it`\n+    //~| NOTE required by `call_it`\n     println!(\"{}\", z);\n }", "previous_filename": "src/test/compile-fail/unboxed-closures-vtable-mismatch.rs"}, {"sha": "e100520e561f579a25819bdf2d45476275506f40", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50517d58a2f43779c27478baf77f938c0b3ebba0/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=50517d58a2f43779c27478baf77f938c0b3ebba0", "patch": "@@ -0,0 +1,30 @@\n+error[E0281]: type mismatch: `[closure@$DIR/unboxed-closures-vtable-mismatch.rs:22:23: 22:73]` implements the trait `std::ops::FnMut<(usize, isize)>`, but the trait `std::ops::FnMut<(isize, isize)>` is required\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:25:13\n+   |\n+22 |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n+   |                       -------------------------------------------------- implements `std::ops::FnMut<(usize, isize)>`\n+...\n+25 |     let z = call_it(3, f);\n+   |             ^^^^^^^\n+   |             |\n+   |             requires `std::ops::FnMut<(isize, isize)>`\n+   |             expected isize, found usize\n+   |\n+   = note: required by `call_it`\n+\n+error[E0281]: type mismatch: `[closure@$DIR/unboxed-closures-vtable-mismatch.rs:22:23: 22:73]` implements the trait `std::ops::FnOnce<(usize, isize)>`, but the trait `std::ops::FnOnce<(isize, isize)>` is required\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:25:13\n+   |\n+22 |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n+   |                       -------------------------------------------------- implements `std::ops::FnOnce<(usize, isize)>`\n+...\n+25 |     let z = call_it(3, f);\n+   |             ^^^^^^^\n+   |             |\n+   |             requires `std::ops::FnOnce<(isize, isize)>`\n+   |             expected isize, found usize\n+   |\n+   = note: required by `call_it`\n+\n+error: aborting due to 2 previous errors\n+"}]}