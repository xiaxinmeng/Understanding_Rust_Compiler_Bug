{"sha": "7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkOGEzYWQxMjgzODFiYmFiYjE4Zjk3NTEzMGNmZDdhOTJjMWNlY2E=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-24T11:14:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-24T11:14:19Z"}, "message": "Rollup merge of #71235 - estebank:lt-sugg-2, r=ecstatic-morse\n\nTweak `'static` suggestion code\n\nFix #71196.", "tree": {"sha": "48c374d86740c79d489970198fb61c1687e5794c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48c374d86740c79d489970198fb61c1687e5794c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeosoLCRBK7hj4Ov3rIwAAdHIIAIj7MpH12IsQPYyXFKXn8AXg\niMWtcHInUoBxZOd6GkyEsr+aQKQ7gcosvjkIBZrx973ZWC65ZknRp7OPstUhzzPo\nok/+2J663AeMGNPeNsS4rqC30x/keG5xz/UIUwci2cE5EP7P3obTIEnEokf5ZjXK\nj1EOpR/84gb3deh+m8d5XX3Ka1nj2qdEvs1ysqEqsAYiCQ9qxmgKNkSHlaSf3ScW\n5iV1oaXliWs58G83OFc7/yJuVafmJKW0InHK3Q098f13lVl/jarzY0SSUVrTRlBQ\nkZQgcB8t83csDkzKrkG4jWNmlT7uAz6mNlX6uCmBuWgVdjyEzefqXWyPOxERMaQ=\n=1kXb\n-----END PGP SIGNATURE-----\n", "payload": "tree 48c374d86740c79d489970198fb61c1687e5794c\nparent 5a59527516a917738c2e5f5d9f5e9a3533a6a5bc\nparent 25f8966b5a93dcd4a1f7e06907a63f7547ef2a96\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587726859 +0200\ncommitter GitHub <noreply@github.com> 1587726859 +0200\n\nRollup merge of #71235 - estebank:lt-sugg-2, r=ecstatic-morse\n\nTweak `'static` suggestion code\n\nFix #71196.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "html_url": "https://github.com/rust-lang/rust/commit/7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a59527516a917738c2e5f5d9f5e9a3533a6a5bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a59527516a917738c2e5f5d9f5e9a3533a6a5bc", "html_url": "https://github.com/rust-lang/rust/commit/5a59527516a917738c2e5f5d9f5e9a3533a6a5bc"}, {"sha": "25f8966b5a93dcd4a1f7e06907a63f7547ef2a96", "url": "https://api.github.com/repos/rust-lang/rust/commits/25f8966b5a93dcd4a1f7e06907a63f7547ef2a96", "html_url": "https://github.com/rust-lang/rust/commit/25f8966b5a93dcd4a1f7e06907a63f7547ef2a96"}], "stats": {"total": 742, "additions": 572, "deletions": 170}, "files": [{"sha": "cf6dde813096bf73014ed97405380a4990eef762", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -273,7 +273,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .next();\n         if !generic_args.parenthesized && !has_lifetimes {\n             generic_args.args = self\n-                .elided_path_lifetimes(path_span, expected_lifetimes)\n+                .elided_path_lifetimes(\n+                    first_generic_span.map(|s| s.shrink_to_lo()).unwrap_or(segment.ident.span),\n+                    expected_lifetimes,\n+                )\n                 .map(GenericArg::Lifetime)\n                 .chain(generic_args.args.into_iter())\n                 .collect();"}, {"sha": "c25a3524dc1087f4c6f92003d3a443fdd2e0116c", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 111, "deletions": 87, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -1034,101 +1034,125 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         lifetime_names: &FxHashSet<ast::Ident>,\n         params: &[ElisionFailureInfo],\n     ) {\n-        if count > 1 {\n-            err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n-        } else {\n-            let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok();\n-            let suggest_existing = |err: &mut DiagnosticBuilder<'_>, sugg| {\n-                err.span_suggestion(\n-                    span,\n-                    \"consider using the named lifetime\",\n-                    sugg,\n-                    Applicability::MaybeIncorrect,\n-                );\n-            };\n-            let suggest_new = |err: &mut DiagnosticBuilder<'_>, sugg: &str| {\n-                err.span_label(span, \"expected named lifetime parameter\");\n+        let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok();\n \n-                for missing in self.missing_named_lifetime_spots.iter().rev() {\n-                    let mut introduce_suggestion = vec![];\n-                    let msg;\n-                    let should_break;\n-                    introduce_suggestion.push(match missing {\n-                        MissingLifetimeSpot::Generics(generics) => {\n-                            msg = \"consider introducing a named lifetime parameter\".to_string();\n-                            should_break = true;\n-                            if let Some(param) = generics.params.iter().find(|p| match p.kind {\n-                                hir::GenericParamKind::Type {\n-                                    synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                                    ..\n-                                } => false,\n-                                _ => true,\n-                            }) {\n-                                (param.span.shrink_to_lo(), \"'a, \".to_string())\n-                            } else {\n-                                (generics.span, \"<'a>\".to_string())\n-                            }\n-                        }\n-                        MissingLifetimeSpot::HigherRanked { span, span_type } => {\n-                            msg = format!(\n-                                \"consider making the {} lifetime-generic with a new `'a` lifetime\",\n-                                span_type.descr(),\n-                            );\n-                            should_break = false;\n-                            err.note(\n-                                \"for more information on higher-ranked polymorphism, visit \\\n-                             https://doc.rust-lang.org/nomicon/hrtb.html\",\n-                            );\n-                            (*span, span_type.suggestion(\"'a\"))\n-                        }\n-                    });\n-                    for param in params {\n-                        if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(param.span)\n-                        {\n-                            if snippet.starts_with('&') && !snippet.starts_with(\"&'\") {\n-                                introduce_suggestion\n-                                    .push((param.span, format!(\"&'a {}\", &snippet[1..])));\n-                            } else if snippet.starts_with(\"&'_ \") {\n-                                introduce_suggestion\n-                                    .push((param.span, format!(\"&'a {}\", &snippet[4..])));\n-                            }\n+        err.span_label(\n+            span,\n+            &format!(\n+                \"expected {} lifetime parameter{}\",\n+                if count == 1 { \"named\".to_string() } else { count.to_string() },\n+                pluralize!(count)\n+            ),\n+        );\n+\n+        let suggest_existing = |err: &mut DiagnosticBuilder<'_>, sugg| {\n+            err.span_suggestion_verbose(\n+                span,\n+                &format!(\"consider using the `{}` lifetime\", lifetime_names.iter().next().unwrap()),\n+                sugg,\n+                Applicability::MaybeIncorrect,\n+            );\n+        };\n+        let suggest_new = |err: &mut DiagnosticBuilder<'_>, sugg: &str| {\n+            for missing in self.missing_named_lifetime_spots.iter().rev() {\n+                let mut introduce_suggestion = vec![];\n+                let msg;\n+                let should_break;\n+                introduce_suggestion.push(match missing {\n+                    MissingLifetimeSpot::Generics(generics) => {\n+                        msg = \"consider introducing a named lifetime parameter\".to_string();\n+                        should_break = true;\n+                        if let Some(param) = generics.params.iter().find(|p| match p.kind {\n+                            hir::GenericParamKind::Type {\n+                                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n+                                ..\n+                            } => false,\n+                            _ => true,\n+                        }) {\n+                            (param.span.shrink_to_lo(), \"'a, \".to_string())\n+                        } else {\n+                            (generics.span, \"<'a>\".to_string())\n                         }\n                     }\n-                    introduce_suggestion.push((span, sugg.to_string()));\n-                    err.multipart_suggestion(\n-                        &msg,\n-                        introduce_suggestion,\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                    if should_break {\n-                        break;\n+                    MissingLifetimeSpot::HigherRanked { span, span_type } => {\n+                        msg = format!(\n+                            \"consider making the {} lifetime-generic with a new `'a` lifetime\",\n+                            span_type.descr(),\n+                        );\n+                        should_break = false;\n+                        err.note(\n+                            \"for more information on higher-ranked polymorphism, visit \\\n+                            https://doc.rust-lang.org/nomicon/hrtb.html\",\n+                        );\n+                        (*span, span_type.suggestion(\"'a\"))\n+                    }\n+                });\n+                for param in params {\n+                    if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(param.span) {\n+                        if snippet.starts_with('&') && !snippet.starts_with(\"&'\") {\n+                            introduce_suggestion\n+                                .push((param.span, format!(\"&'a {}\", &snippet[1..])));\n+                        } else if snippet.starts_with(\"&'_ \") {\n+                            introduce_suggestion\n+                                .push((param.span, format!(\"&'a {}\", &snippet[4..])));\n+                        }\n                     }\n                 }\n-            };\n-\n-            match (lifetime_names.len(), lifetime_names.iter().next(), snippet.as_deref()) {\n-                (1, Some(name), Some(\"&\")) => {\n-                    suggest_existing(err, format!(\"&{} \", name));\n-                }\n-                (1, Some(name), Some(\"'_\")) => {\n-                    suggest_existing(err, name.to_string());\n-                }\n-                (1, Some(name), Some(snippet)) if !snippet.ends_with('>') => {\n-                    suggest_existing(err, format!(\"{}<{}>\", snippet, name));\n-                }\n-                (0, _, Some(\"&\")) => {\n-                    suggest_new(err, \"&'a \");\n-                }\n-                (0, _, Some(\"'_\")) => {\n-                    suggest_new(err, \"'a\");\n-                }\n-                (0, _, Some(snippet)) if !snippet.ends_with('>') => {\n-                    suggest_new(err, &format!(\"{}<'a>\", snippet));\n+                introduce_suggestion.push((span, sugg.to_string()));\n+                err.multipart_suggestion(&msg, introduce_suggestion, Applicability::MaybeIncorrect);\n+                if should_break {\n+                    break;\n                 }\n-                _ => {\n-                    err.span_label(span, \"expected lifetime parameter\");\n+            }\n+        };\n+\n+        match (lifetime_names.len(), lifetime_names.iter().next(), snippet.as_deref()) {\n+            (1, Some(name), Some(\"&\")) => {\n+                suggest_existing(err, format!(\"&{} \", name));\n+            }\n+            (1, Some(name), Some(\"'_\")) => {\n+                suggest_existing(err, name.to_string());\n+            }\n+            (1, Some(name), Some(\"\")) => {\n+                suggest_existing(err, format!(\"{}, \", name).repeat(count));\n+            }\n+            (1, Some(name), Some(snippet)) if !snippet.ends_with('>') => {\n+                suggest_existing(\n+                    err,\n+                    format!(\n+                        \"{}<{}>\",\n+                        snippet,\n+                        std::iter::repeat(name.to_string())\n+                            .take(count)\n+                            .collect::<Vec<_>>()\n+                            .join(\", \")\n+                    ),\n+                );\n+            }\n+            (0, _, Some(\"&\")) if count == 1 => {\n+                suggest_new(err, \"&'a \");\n+            }\n+            (0, _, Some(\"'_\")) if count == 1 => {\n+                suggest_new(err, \"'a\");\n+            }\n+            (0, _, Some(snippet)) if !snippet.ends_with('>') && count == 1 => {\n+                suggest_new(err, &format!(\"{}<'a>\", snippet));\n+            }\n+            (n, ..) if n > 1 => {\n+                let spans: Vec<Span> = lifetime_names.iter().map(|lt| lt.span).collect();\n+                err.span_note(spans, \"these named lifetimes are available to use\");\n+                if Some(\"\") == snippet.as_deref() {\n+                    // This happens when we have `Foo<T>` where we point at the space before `T`,\n+                    // but this can be confusing so we give a suggestion with placeholders.\n+                    err.span_suggestion_verbose(\n+                        span,\n+                        \"consider using one of the available lifetimes here\",\n+                        \"'lifetime, \".repeat(count),\n+                        Applicability::HasPlaceholders,\n+                    );\n                 }\n             }\n+            _ => {}\n         }\n     }\n }"}, {"sha": "0deb0af448e7bb69ece3042ab23fd47e218846a6", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 15, "deletions": 40, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -2393,52 +2393,28 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         };\n \n         let mut err = self.report_missing_lifetime_specifiers(span, lifetime_refs.len());\n-        let mut add_label = true;\n \n         if let Some(params) = error {\n-            if lifetime_refs.len() == 1 {\n-                add_label = add_label && self.report_elision_failure(&mut err, params, span);\n+            // If there's no lifetime available, suggest `'static`.\n+            if self.report_elision_failure(&mut err, params) && lifetime_names.is_empty() {\n+                lifetime_names.insert(ast::Ident::from_str(\"'static\"));\n             }\n         }\n-        if add_label {\n-            self.add_missing_lifetime_specifiers_label(\n-                &mut err,\n-                span,\n-                lifetime_refs.len(),\n-                &lifetime_names,\n-                error.map(|p| &p[..]).unwrap_or(&[]),\n-            );\n-        }\n-\n+        self.add_missing_lifetime_specifiers_label(\n+            &mut err,\n+            span,\n+            lifetime_refs.len(),\n+            &lifetime_names,\n+            error.map(|p| &p[..]).unwrap_or(&[]),\n+        );\n         err.emit();\n     }\n \n-    fn suggest_lifetime(&self, db: &mut DiagnosticBuilder<'_>, span: Span, msg: &str) -> bool {\n-        match self.tcx.sess.source_map().span_to_snippet(span) {\n-            Ok(ref snippet) => {\n-                let (sugg, applicability) = if snippet == \"&\" {\n-                    (\"&'static \".to_owned(), Applicability::MachineApplicable)\n-                } else if snippet == \"'_\" {\n-                    (\"'static\".to_owned(), Applicability::MachineApplicable)\n-                } else {\n-                    (format!(\"{} + 'static\", snippet), Applicability::MaybeIncorrect)\n-                };\n-                db.span_suggestion(span, msg, sugg, applicability);\n-                false\n-            }\n-            Err(_) => {\n-                db.help(msg);\n-                true\n-            }\n-        }\n-    }\n-\n     fn report_elision_failure(\n         &mut self,\n         db: &mut DiagnosticBuilder<'_>,\n         params: &[ElisionFailureInfo],\n-        span: Span,\n-    ) -> bool {\n+    ) -> bool /* add `'static` lifetime to lifetime list */ {\n         let mut m = String::new();\n         let len = params.len();\n \n@@ -2487,29 +2463,28 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 \"this function's return type contains a borrowed value, \\\n                  but there is no value for it to be borrowed from\",\n             );\n-            self.suggest_lifetime(db, span, \"consider giving it a 'static lifetime\")\n+            true\n         } else if elided_len == 0 {\n             db.help(\n                 \"this function's return type contains a borrowed value with \\\n                  an elided lifetime, but the lifetime cannot be derived from \\\n                  the arguments\",\n             );\n-            let msg = \"consider giving it an explicit bounded or 'static lifetime\";\n-            self.suggest_lifetime(db, span, msg)\n+            true\n         } else if elided_len == 1 {\n             db.help(&format!(\n                 \"this function's return type contains a borrowed value, \\\n                  but the signature does not say which {} it is borrowed from\",\n                 m\n             ));\n-            true\n+            false\n         } else {\n             db.help(&format!(\n                 \"this function's return type contains a borrowed value, \\\n                  but the signature does not say whether it is borrowed from {}\",\n                 m\n             ));\n-            true\n+            false\n         }\n     }\n "}, {"sha": "e8252d96350dbf1de05583dda8bb51051a83aeef", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -657,7 +657,8 @@ impl MultiSpan {\n         MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }\n     }\n \n-    pub fn from_spans(vec: Vec<Span>) -> MultiSpan {\n+    pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {\n+        vec.sort();\n         MultiSpan { primary_spans: vec, span_labels: vec![] }\n     }\n "}, {"sha": "706dca999fa32de762a2e21f8aa84fa56aa5fdf0", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -1017,18 +1017,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         self.prohibit_generics(trait_ref.path.segments.split_last().unwrap().1);\n \n-        let path_span = if let [segment] = &trait_ref.path.segments[..] {\n-            // FIXME: `trait_ref.path.span` can point to a full path with multiple\n-            // segments, even though `trait_ref.path.segments` is of length `1`. Work\n-            // around that bug here, even though it should be fixed elsewhere.\n-            // This would otherwise cause an invalid suggestion. For an example, look at\n-            // `src/test/ui/issues/issue-28344.rs`.\n-            segment.ident.span\n-        } else {\n-            trait_ref.path.span\n-        };\n         let (substs, assoc_bindings, arg_count_correct) = self.create_substs_for_ast_trait_ref(\n-            path_span,\n+            trait_ref.path.span,\n             trait_def_id,\n             self_ty,\n             trait_ref.path.segments.last().unwrap(),\n@@ -1729,6 +1719,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     self.ast_region_to_region(lifetime, None)\n                 } else {\n                     self.re_infer(None, span).unwrap_or_else(|| {\n+                        // FIXME: these can be redundant with E0106, but not always.\n                         struct_span_err!(\n                             tcx.sess,\n                             span,"}, {"sha": "00f44129cc8b72126cc4f02f48e0179db6bff23d", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.elision.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/bound-lifetime-in-binding-only.rs:52:23\n    |\n LL | fn elision<T: Fn() -> &i32>() {\n-   |                       ^ help: consider giving it a 'static lifetime: `&'static`\n+   |                       ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL | fn elision<T: Fn() -> &'static i32>() {\n+   |                       ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a5242707c7105b1a83cb9018764e18cc87679587", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.elision.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/bound-lifetime-in-return-only.rs:34:23\n    |\n LL | fn elision(_: fn() -> &i32) {\n-   |                       ^ help: consider giving it a 'static lifetime: `&'static`\n+   |                       ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL | fn elision(_: fn() -> &'static i32) {\n+   |                       ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ca42263dfed7b0622a542acfb79ab7a77dd42c09", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -4,9 +4,13 @@ error[E0106]: missing lifetime specifier\n LL |         foo: &dyn Foo, bar: &'a dyn Foo\n    |              --------       -----------\n LL |     ) -> &dyn Foo\n-   |          ^ help: consider using the named lifetime: `&'a`\n+   |          ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `foo` or `bar`\n+help: consider using the `'a` lifetime\n+   |\n+LL |     ) -> &'a dyn Foo\n+   |          ^^^\n \n error: aborting due to previous error\n "}, {"sha": "4626a4bc2dcff84d7599d26c4aed6369f37af457", "filename": "src/test/ui/c-variadic/variadic-ffi-6.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-6.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/variadic-ffi-6.rs:7:6\n    |\n LL | ) -> &usize {\n-   |      ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n+   |      ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the `'static` lifetime\n+   |\n+LL | ) -> &'static usize {\n+   |      ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "feecb6d80e771ee8f88446d934a7c96f7a22fcd4", "filename": "src/test/ui/foreign-fn-return-lifetime.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/foreign-fn-return-lifetime.rs:5:19\n    |\n LL |     pub fn f() -> &u8;\n-   |                   ^ help: consider giving it a 'static lifetime: `&'static`\n+   |                   ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     pub fn f() -> &'static u8;\n+   |                   ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1106a067822809242f77551d939a532a6643b37f", "filename": "src/test/ui/generics/issue-65285-incorrect-explicit-lifetime-name-needed.stderr", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -5,16 +5,33 @@ LL | fn should_error<T>() where T : Into<&u32> {}\n    |                                     ^ explicit lifetime name needed here\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-65285-incorrect-explicit-lifetime-name-needed.rs:9:19\n+  --> $DIR/issue-65285-incorrect-explicit-lifetime-name-needed.rs:9:21\n    |\n LL |     fn foo<'b, L: X<&'b Nested<K>>>();\n-   |                   ^^^^^^^^^^^^^^^^ expected lifetime parameter\n+   |                     ^ expected named lifetime parameter\n+   |\n+note: these named lifetimes are available to use\n+  --> $DIR/issue-65285-incorrect-explicit-lifetime-name-needed.rs:8:9\n+   |\n+LL | trait X<'a, K: 'a> {\n+   |         ^^\n+LL |     fn foo<'b, L: X<&'b Nested<K>>>();\n+   |            ^^\n+help: consider using one of the available lifetimes here\n+   |\n+LL |     fn foo<'b, L: X<'lifetime, &'b Nested<K>>>();\n+   |                     ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-65285-incorrect-explicit-lifetime-name-needed.rs:13:15\n+  --> $DIR/issue-65285-incorrect-explicit-lifetime-name-needed.rs:13:17\n    |\n LL | fn bar<'b, L: X<&'b Nested<i32>>>(){}\n-   |               ^^^^^^^^^^^^^^^^^^ expected lifetime parameter\n+   |                 ^ expected named lifetime parameter\n+   |\n+help: consider using the `'b` lifetime\n+   |\n+LL | fn bar<'b, L: X<'b, &'b Nested<i32>>>(){}\n+   |                 ^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a231f73d06729bc5dc9d22dfc238c62d08e4d4a3", "filename": "src/test/ui/issues/issue-13497.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-13497.rs:2:5\n    |\n LL |     &str\n-   |     ^ help: consider giving it a 'static lifetime: `&'static`\n+   |     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     &'static str\n+   |     ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3df58d66d1f8e34a94edd61b741c60260dd99c68", "filename": "src/test/ui/issues/issue-26638.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -14,17 +14,25 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:4:40\n    |\n LL | fn parse_type_2(iter: fn(&u8)->&u8) -> &str { iter() }\n-   |                                        ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n+   |                                        ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the `'static` lifetime\n+   |\n+LL | fn parse_type_2(iter: fn(&u8)->&u8) -> &'static str { iter() }\n+   |                                        ^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:7:22\n    |\n LL | fn parse_type_3() -> &str { unimplemented!() }\n-   |                      ^ help: consider giving it a 'static lifetime: `&'static`\n+   |                      ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL | fn parse_type_3() -> &'static str { unimplemented!() }\n+   |                      ^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5809b5bd661e0e7c195bc971973459f90d630c7b", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:2:11\n    |\n LL | fn f() -> &isize {\n-   |           ^ help: consider giving it a 'static lifetime: `&'static`\n+   |           ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL | fn f() -> &'static isize {\n+   |           ^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:7:33\n@@ -34,25 +38,37 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:21:20\n    |\n LL | fn i(_x: isize) -> &isize {\n-   |                    ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n+   |                    ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the `'static` lifetime\n+   |\n+LL | fn i(_x: isize) -> &'static isize {\n+   |                    ^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:34:24\n    |\n LL | fn j(_x: StaticStr) -> &isize {\n-   |                        ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n+   |                        ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the `'static` lifetime\n+   |\n+LL | fn j(_x: StaticStr) -> &'static isize {\n+   |                        ^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:40:49\n    |\n LL | fn k<'a, T: WithLifetime<'a>>(_x: T::Output) -> &isize {\n-   |                                                 ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n+   |                                                 ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the `'a` lifetime\n+   |\n+LL | fn k<'a, T: WithLifetime<'a>>(_x: T::Output) -> &'a isize {\n+   |                                                 ^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "254eaf51a646b8e7a396a9354f11b0d0edb1ea86", "filename": "src/test/ui/specialization/defaultimpl/validation.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -25,13 +25,13 @@ LL | default impl !Send for Z {}\n    | default because of this\n \n error[E0750]: negative impls cannot be default impls\n-  --> $DIR/validation.rs:10:14\n+  --> $DIR/validation.rs:10:1\n    |\n LL | default impl !Send for Z {}\n    | ^^^^^^^      ^\n \n error[E0750]: negative impls cannot be default impls\n-  --> $DIR/validation.rs:14:14\n+  --> $DIR/validation.rs:14:1\n    |\n LL | default impl !Tr for S {}\n    | ^^^^^^^      ^"}, {"sha": "b09c1879d701599092a3fa1e5e1d96817a317f85", "filename": "src/test/ui/suggestions/missing-lifetime-specifier.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -0,0 +1,65 @@\n+#![allow(bare_trait_objects)]\n+use std::collections::HashMap;\n+use std::cell::RefCell;\n+\n+pub union Foo<'t, 'k> {\n+    i: &'t i64,\n+    f: &'k f64,\n+}\n+trait Bar<'t, 'k> {}\n+\n+pub union Qux<'t, 'k, I> {\n+    i: &'t I,\n+    f: &'k I,\n+}\n+trait Tar<'t, 'k, I> {}\n+\n+thread_local! {\n+    static a: RefCell<HashMap<i32, Vec<Vec<Foo>>>> = RefCell::new(HashMap::new());\n+    //~^ ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+}\n+thread_local! {\n+    static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n+    //~^ ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+    //~| ERROR the lifetime bound for this object type cannot be deduced from context\n+    //~| ERROR the lifetime bound for this object type cannot be deduced from context\n+}\n+thread_local! {\n+    static c: RefCell<HashMap<i32, Vec<Vec<Qux<i32>>>>> = RefCell::new(HashMap::new());\n+    //~^ ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+}\n+thread_local! {\n+    static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n+    //~^ ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+    //~| ERROR the lifetime bound for this object type cannot be deduced from context\n+    //~| ERROR the lifetime bound for this object type cannot be deduced from context\n+}\n+\n+thread_local! {\n+    static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n+    //~^ ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n+}\n+thread_local! {\n+    static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+    //~^ ERROR the lifetime bound for this object type cannot be deduced from context\n+    //~| ERROR the lifetime bound for this object type cannot be deduced from context\n+    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~| ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+}\n+\n+fn main() {}"}, {"sha": "f5ff54cc916cb364748c68c77919e3dd39d5bfa0", "filename": "src/test/ui/suggestions/missing-lifetime-specifier.stderr", "status": "added", "additions": 256, "deletions": 0, "changes": 256, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -0,0 +1,256 @@\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/missing-lifetime-specifier.rs:18:44\n+   |\n+LL |     static a: RefCell<HashMap<i32, Vec<Vec<Foo>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^ expected 2 lifetime parameters\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     static a: RefCell<HashMap<i32, Vec<Vec<Foo<'static, 'static>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/missing-lifetime-specifier.rs:18:44\n+   |\n+LL |     static a: RefCell<HashMap<i32, Vec<Vec<Foo>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^ expected 2 lifetime parameters\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     static a: RefCell<HashMap<i32, Vec<Vec<Foo<'static, 'static>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetime-specifier.rs:23:44\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n+   |                                            ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&'static Bar>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/missing-lifetime-specifier.rs:23:45\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^ expected 2 lifetime parameters\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar<'static, 'static>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetime-specifier.rs:23:44\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n+   |                                            ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&'static Bar>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/missing-lifetime-specifier.rs:23:45\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^ expected 2 lifetime parameters\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar<'static, 'static>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/missing-lifetime-specifier.rs:32:48\n+   |\n+LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                ^ expected 2 lifetime parameters\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                ^^^^^^^^^^^^^^^^^\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/missing-lifetime-specifier.rs:32:48\n+   |\n+LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                ^ expected 2 lifetime parameters\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                ^^^^^^^^^^^^^^^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetime-specifier.rs:37:44\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&'static Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/missing-lifetime-specifier.rs:37:49\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                 ^ expected 2 lifetime parameters\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                 ^^^^^^^^^^^^^^^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetime-specifier.rs:37:44\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&'static Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/missing-lifetime-specifier.rs:37:49\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                 ^ expected 2 lifetime parameters\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                 ^^^^^^^^^^^^^^^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetime-specifier.rs:54:44\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&'static Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetime-specifier.rs:54:44\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&'static Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^\n+\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/missing-lifetime-specifier.rs:23:45\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^\n+\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/missing-lifetime-specifier.rs:23:45\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^\n+\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/missing-lifetime-specifier.rs:37:45\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^^^^^^\n+\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/missing-lifetime-specifier.rs:37:45\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^^^^^^\n+\n+error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+  --> $DIR/missing-lifetime-specifier.rs:47:44\n+   |\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+\n+error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+  --> $DIR/missing-lifetime-specifier.rs:47:44\n+   |\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+\n+error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+  --> $DIR/missing-lifetime-specifier.rs:47:44\n+   |\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+\n+error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+  --> $DIR/missing-lifetime-specifier.rs:47:44\n+   |\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+\n+error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+  --> $DIR/missing-lifetime-specifier.rs:54:45\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+\n+error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+  --> $DIR/missing-lifetime-specifier.rs:54:45\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/missing-lifetime-specifier.rs:54:45\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^^^^^^^^^^^^^^^\n+\n+error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+  --> $DIR/missing-lifetime-specifier.rs:54:45\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/missing-lifetime-specifier.rs:54:45\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^^^^^^^^^^^^^^^\n+\n+error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+  --> $DIR/missing-lifetime-specifier.rs:54:45\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+\n+error: aborting due to 28 previous errors\n+\n+Some errors have detailed explanations: E0106, E0107.\n+For more information about an error, try `rustc --explain E0106`."}, {"sha": "2a237d61f50fe4d56fe6043468a62cdd9e52c5bd", "filename": "src/test/ui/suggestions/return-without-lifetime.stderr", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -2,23 +2,36 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/return-without-lifetime.rs:2:16\n    |\n LL | struct Foo<'a>(&usize);\n-   |                ^ help: consider using the named lifetime: `&'a`\n+   |                ^ expected named lifetime parameter\n+   |\n+help: consider using the `'a` lifetime\n+   |\n+LL | struct Foo<'a>(&'a usize);\n+   |                ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-without-lifetime.rs:5:34\n    |\n LL | fn func1<'a>(_arg: &'a Thing) -> &() { unimplemented!() }\n-   |                    ---------     ^ help: consider using the named lifetime: `&'a`\n+   |                    ---------     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n+help: consider using the `'a` lifetime\n+   |\n+LL | fn func1<'a>(_arg: &'a Thing) -> &'a () { unimplemented!() }\n+   |                                  ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-without-lifetime.rs:7:35\n    |\n LL | fn func2<'a>(_arg: &Thing<'a>) -> &() { unimplemented!() }\n-   |                    ----------     ^ help: consider using the named lifetime: `&'a`\n+   |                    ----------     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n+help: consider using the `'a` lifetime\n+   |\n+LL | fn func2<'a>(_arg: &Thing<'a>) -> &'a () { unimplemented!() }\n+   |                                   ^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a70bbe6b948d1ce1ac5079523e7fff352e619fb1", "filename": "src/test/ui/traits/negative-impls/negative-default-impls.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -1,5 +1,5 @@\n error[E0750]: negative impls cannot be default impls\n-  --> $DIR/negative-default-impls.rs:8:14\n+  --> $DIR/negative-default-impls.rs:8:1\n    |\n LL | default impl !MyTrait for u32 {}\n    | ^^^^^^^      ^"}, {"sha": "b824d160d716006d2a969d4b40072f2f567a5e3f", "filename": "src/test/ui/unboxed-closures/unboxed-closure-feature-gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-feature-gate.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -2,7 +2,7 @@ error[E0658]: parenthetical notation is only stable when used with `Fn`-family t\n   --> $DIR/unboxed-closure-feature-gate.rs:13:20\n    |\n LL |     let x: Box<dyn Foo(isize)>;\n-   |                    ^^^\n+   |                    ^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable"}, {"sha": "9da36906d55420cd9175e234a0652ecba91761ae", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-not-used-on-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-not-used-on-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-not-used-on-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-not-used-on-fn.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -2,7 +2,7 @@ error[E0658]: the precise format of `Fn`-family traits' type parameters is subje\n   --> $DIR/unboxed-closure-sugar-not-used-on-fn.rs:3:17\n    |\n LL | fn bar1(x: &dyn Fn<(), Output=()>) {\n-   |                 ^^ help: use parenthetical notation instead: `Fn() -> ()`\n+   |                 ^^^^^^^^^^^^^^^^^ help: use parenthetical notation instead: `Fn() -> ()`\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n@@ -11,7 +11,7 @@ error[E0658]: the precise format of `Fn`-family traits' type parameters is subje\n   --> $DIR/unboxed-closure-sugar-not-used-on-fn.rs:7:28\n    |\n LL | fn bar2<T>(x: &T) where T: Fn<()> {\n-   |                            ^^ help: use parenthetical notation instead: `Fn() -> ()`\n+   |                            ^^^^^^ help: use parenthetical notation instead: `Fn() -> ()`\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable"}, {"sha": "e9d51983a7a483f077daec9897419acad1e03a15", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -2,7 +2,7 @@ error[E0107]: wrong number of lifetime arguments: expected 1, found 0\n   --> $DIR/unboxed-closure-sugar-region.rs:30:51\n    |\n LL | fn test2(x: &dyn Foo<(isize,),Output=()>, y: &dyn Foo(isize)) {\n-   |                                                   ^^^ expected 1 lifetime argument\n+   |                                                   ^^^^^^^^^^ expected 1 lifetime argument\n \n error: aborting due to previous error\n "}, {"sha": "f42ac38d370d57e2b73ca6e66ed65746f5e501fe", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -2,7 +2,7 @@ error[E0107]: wrong number of type arguments: expected 3, found 1\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:5:16\n    |\n LL | fn foo(_: &dyn Three())\n-   |                ^^^^^ expected 3 type arguments\n+   |                ^^^^^^^ expected 3 type arguments\n \n error[E0220]: associated type `Output` not found for `Three<(), [type error], [type error]>`\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:5:16"}, {"sha": "594cdd245b3ec9875d9e44c2f7e370974b8cc27e", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -14,15 +14,24 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:2:17\n    |\n LL | struct Baz<'a>(&'_ &'a u8);\n-   |                 ^^ help: consider using the named lifetime: `'a`\n+   |                 ^^ expected named lifetime parameter\n+   |\n+help: consider using the `'a` lifetime\n+   |\n+LL | struct Baz<'a>(&'a &'a u8);\n+   |                 ^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:10:33\n    |\n LL | fn meh() -> Box<dyn for<'_> Meh<'_>>\n-   |                                 ^^ help: consider giving it a 'static lifetime: `'static`\n+   |                                 ^^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL | fn meh() -> Box<dyn for<'_> Meh<'static>>\n+   |                                 ^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:16:35"}, {"sha": "9310b3d7ede004bacaf0e4b47768c5fd07a90a82", "filename": "src/test/ui/unspecified-self-in-trait-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8a3ad128381bbabb18f975130cfd7a92c1ceca/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr?ref=7d8a3ad128381bbabb18f975130cfd7a92c1ceca", "patch": "@@ -31,7 +31,7 @@ LL | | }\n    | |_- type parameter `A` must be specified for this\n ...\n LL |       let e = Bar::<usize>::lol();\n-   |               ^^^ missing reference to `A`\n+   |               ^^^^^^^^^^^^^^^^^ missing reference to `A`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n "}]}