{"sha": "da630de3bdcefc487de795e124d3309901cffc55", "node_id": "C_kwDOAAsO6NoAKGRhNjMwZGUzYmRjZWZjNDg3ZGU3OTVlMTI0ZDMzMDk5MDFjZmZjNTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-04T21:11:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-04T21:11:09Z"}, "message": "Rollup merge of #98782 - compiler-errors:specialization-error-span, r=oli-obk\n\nImprove spans for specialization error\n\nFixes #98777", "tree": {"sha": "71485160e009677fa432cd6b941df27b264a966f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71485160e009677fa432cd6b941df27b264a966f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da630de3bdcefc487de795e124d3309901cffc55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiw1duCRBK7hj4Ov3rIwAAMJAIAGak9Fc9SQJQbQn6ZXDZC4FE\nkxM78RRMD4vi7qHMVGh9P3lRz568YpG9XEJ8E0mx8wq0X4KTicyIrOMJcjv2Ka88\nhNv0rSx34eEQU+Ki2ioqAoGZjzU9o7MTWliOj40BzzDz+fBSIya2XtVBRQ87BBjV\nW7jsTYpZz743MK1Y3FLqdGofzAT+QUinKc5tx5lFqvPigzjw0KbTW8gKMRz+be0C\nZA9IgyLimpAUcL4EGDVV9sHZvL5el0USRZfcVh8QiMxFIqUITr0hqrflWMw7pTLC\ncb6W+MgNGuzXQ7XbrF43mDextNVZ3L9rihhqp3PG1RbDWnuRdkkfjz8V0KQsPuw=\n=VZ83\n-----END PGP SIGNATURE-----\n", "payload": "tree 71485160e009677fa432cd6b941df27b264a966f\nparent 82660a25250d7922a2d7fb279dfc8a1e7ae0b705\nparent a368830d1088f4f1ee4b2bd42b064f241106552c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1656969069 +0200\ncommitter GitHub <noreply@github.com> 1656969069 +0200\n\nRollup merge of #98782 - compiler-errors:specialization-error-span, r=oli-obk\n\nImprove spans for specialization error\n\nFixes #98777\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da630de3bdcefc487de795e124d3309901cffc55", "html_url": "https://github.com/rust-lang/rust/commit/da630de3bdcefc487de795e124d3309901cffc55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da630de3bdcefc487de795e124d3309901cffc55/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82660a25250d7922a2d7fb279dfc8a1e7ae0b705", "url": "https://api.github.com/repos/rust-lang/rust/commits/82660a25250d7922a2d7fb279dfc8a1e7ae0b705", "html_url": "https://github.com/rust-lang/rust/commit/82660a25250d7922a2d7fb279dfc8a1e7ae0b705"}, {"sha": "a368830d1088f4f1ee4b2bd42b064f241106552c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a368830d1088f4f1ee4b2bd42b064f241106552c", "html_url": "https://github.com/rust-lang/rust/commit/a368830d1088f4f1ee4b2bd42b064f241106552c"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "4d22e168bb64ca35bc9ac09fbe97938308f4acf2", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/da630de3bdcefc487de795e124d3309901cffc55/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da630de3bdcefc487de795e124d3309901cffc55/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=da630de3bdcefc487de795e124d3309901cffc55", "patch": "@@ -279,11 +279,16 @@ fn check_predicates<'tcx>(\n     span: Span,\n ) {\n     let tcx = infcx.tcx;\n-    let impl1_predicates: Vec<_> = traits::elaborate_predicates(\n+    let instantiated = tcx.predicates_of(impl1_def_id).instantiate(tcx, impl1_substs);\n+    let impl1_predicates: Vec<_> = traits::elaborate_predicates_with_span(\n         tcx,\n-        tcx.predicates_of(impl1_def_id).instantiate(tcx, impl1_substs).predicates.into_iter(),\n+        std::iter::zip(\n+            instantiated.predicates,\n+            // Don't drop predicates (unsound!) because `spans` is too short\n+            instantiated.spans.into_iter().chain(std::iter::repeat(span)),\n+        ),\n     )\n-    .map(|obligation| obligation.predicate)\n+    .map(|obligation| (obligation.predicate, obligation.cause.span))\n     .collect();\n \n     let mut impl2_predicates = if impl2_node.is_from_trait() {\n@@ -321,7 +326,7 @@ fn check_predicates<'tcx>(\n     // which is sound because we forbid impls like the following\n     //\n     // impl<D: Debug> AlwaysApplicable for D { }\n-    let always_applicable_traits = impl1_predicates.iter().copied().filter(|&predicate| {\n+    let always_applicable_traits = impl1_predicates.iter().copied().filter(|&(predicate, _)| {\n         matches!(\n             trait_predicate_kind(tcx, predicate),\n             Some(TraitSpecializationKind::AlwaysApplicable)\n@@ -345,11 +350,11 @@ fn check_predicates<'tcx>(\n         }\n     }\n     impl2_predicates.extend(\n-        traits::elaborate_predicates(tcx, always_applicable_traits)\n+        traits::elaborate_predicates_with_span(tcx, always_applicable_traits)\n             .map(|obligation| obligation.predicate),\n     );\n \n-    for predicate in impl1_predicates {\n+    for (predicate, span) in impl1_predicates {\n         if !impl2_predicates.contains(&predicate) {\n             check_specialization_on(tcx, predicate, span)\n         }\n@@ -384,9 +389,17 @@ fn check_specialization_on<'tcx>(tcx: TyCtxt<'tcx>, predicate: ty::Predicate<'tc\n                     .emit();\n             }\n         }\n+        ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {\n+            tcx.sess\n+                .struct_span_err(\n+                    span,\n+                    &format!(\"cannot specialize on associated type `{projection_ty} == {term}`\",),\n+                )\n+                .emit();\n+        }\n         _ => {\n             tcx.sess\n-                .struct_span_err(span, &format!(\"cannot specialize on `{:?}`\", predicate))\n+                .struct_span_err(span, &format!(\"cannot specialize on predicate `{}`\", predicate))\n                 .emit();\n         }\n     }"}, {"sha": "a751ba793472e6aae0459c3746f5a8f7c619c301", "filename": "src/test/ui/specialization/min_specialization/repeated_projection_type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da630de3bdcefc487de795e124d3309901cffc55/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Frepeated_projection_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da630de3bdcefc487de795e124d3309901cffc55/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Frepeated_projection_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Frepeated_projection_type.stderr?ref=da630de3bdcefc487de795e124d3309901cffc55", "patch": "@@ -1,8 +1,8 @@\n-error: cannot specialize on `Binder(ProjectionPredicate(ProjectionTy { substs: [V], item_def_id: DefId(0:6 ~ repeated_projection_type[54ea]::Id::This) }, Ty((I,))), [])`\n-  --> $DIR/repeated_projection_type.rs:19:1\n+error: cannot specialize on associated type `<V as Id>::This == (I,)`\n+  --> $DIR/repeated_projection_type.rs:19:15\n    |\n LL | impl<I, V: Id<This = (I,)>> X for V {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ba9d6bbe300117b42622512c7d3ef2d5b83cc94c", "filename": "src/test/ui/specialization/min_specialization/spec-marker-supertraits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da630de3bdcefc487de795e124d3309901cffc55/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da630de3bdcefc487de795e124d3309901cffc55/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.stderr?ref=da630de3bdcefc487de795e124d3309901cffc55", "patch": "@@ -1,8 +1,8 @@\n error: cannot specialize on trait `HasMethod`\n-  --> $DIR/spec-marker-supertraits.rs:22:1\n+  --> $DIR/spec-marker-supertraits.rs:22:9\n    |\n LL | impl<T: Marker> Spec for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e935786624b4bb87463e7b4795340e2e4c3d5502", "filename": "src/test/ui/specialization/min_specialization/specialization_super_trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da630de3bdcefc487de795e124d3309901cffc55/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialization_super_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da630de3bdcefc487de795e124d3309901cffc55/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialization_super_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialization_super_trait.stderr?ref=da630de3bdcefc487de795e124d3309901cffc55", "patch": "@@ -1,8 +1,8 @@\n error: cannot specialize on trait `Default`\n-  --> $DIR/specialization_super_trait.rs:13:1\n+  --> $DIR/specialization_super_trait.rs:13:9\n    |\n LL | impl<T: Default> SpecMarker for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bc87ae0f8b847f32ef31e4861ee9b93fa59f6a7c", "filename": "src/test/ui/specialization/min_specialization/specialization_trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da630de3bdcefc487de795e124d3309901cffc55/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialization_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da630de3bdcefc487de795e124d3309901cffc55/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialization_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialization_trait.stderr?ref=da630de3bdcefc487de795e124d3309901cffc55", "patch": "@@ -11,10 +11,10 @@ LL | impl<T> SpecMarker for (T, T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cannot specialize on trait `Clone`\n-  --> $DIR/specialization_trait.rs:21:1\n+  --> $DIR/specialization_trait.rs:21:9\n    |\n LL | impl<T: Clone> SpecMarker for [T] {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7b79c7eb4ad1c3672b637e49a199978b7d71c86c", "filename": "src/test/ui/specialization/min_specialization/specialize_on_trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da630de3bdcefc487de795e124d3309901cffc55/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_on_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da630de3bdcefc487de795e124d3309901cffc55/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_on_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_on_trait.stderr?ref=da630de3bdcefc487de795e124d3309901cffc55", "patch": "@@ -1,8 +1,8 @@\n error: cannot specialize on trait `SpecMarker`\n-  --> $DIR/specialize_on_trait.rs:15:1\n+  --> $DIR/specialize_on_trait.rs:15:9\n    |\n LL | impl<T: SpecMarker> X for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}