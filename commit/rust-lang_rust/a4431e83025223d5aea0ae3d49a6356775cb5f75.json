{"sha": "a4431e83025223d5aea0ae3d49a6356775cb5f75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NDMxZTgzMDI1MjIzZDVhZWEwYWUzZDQ5YTYzNTY3NzVjYjVmNzU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-06T17:50:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-06T17:50:11Z"}, "message": "Merge #3038\n\n3038: Minor rename r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ac72b45b25756f1ef95a552053a88285d2f2b4f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac72b45b25756f1ef95a552053a88285d2f2b4f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4431e83025223d5aea0ae3d49a6356775cb5f75", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJePFHTCRBK7hj4Ov3rIwAAdHIIAGTOpcdbhPacskwllxkSDD/0\nGYKi8DwkxdITAuTRxuOzgzkCxlkDLiTxrD694HyXX5Vf7i25+E84c1vCigbDFdN+\ngt57Rip+KmwgZQqNSEUhcmmCbDASrGk0IXs5Tlz348vlVQ8/tMSBpF5Epov6KNTc\n9Px15F/JixMbqXc3yYwcF6bgtH1WMx4u2B0h7s4g+ve84dDloTmuVMNIefvZM80k\nwn4dx/U9wxCZ5z8yeG+9jXd/EsNBZeMw3TkuPp/Ql/DaCSSzeBhlQw/3xeOGiyTw\nDe3160wGyujlQ9xoToqkE78rgRkhiJtEGrbGSlZtAeoRYQ96NyxOL00uWJohsa8=\n=Xq1n\n-----END PGP SIGNATURE-----\n", "payload": "tree ac72b45b25756f1ef95a552053a88285d2f2b4f5\nparent 918115c32e9a3882d1dd65f2403bd109fc64c798\nparent 7e73b7a5f8d594a85627786a13e76d9d70163770\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581011411 +0000\ncommitter GitHub <noreply@github.com> 1581011411 +0000\n\nMerge #3038\n\n3038: Minor rename r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4431e83025223d5aea0ae3d49a6356775cb5f75", "html_url": "https://github.com/rust-lang/rust/commit/a4431e83025223d5aea0ae3d49a6356775cb5f75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4431e83025223d5aea0ae3d49a6356775cb5f75/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "918115c32e9a3882d1dd65f2403bd109fc64c798", "url": "https://api.github.com/repos/rust-lang/rust/commits/918115c32e9a3882d1dd65f2403bd109fc64c798", "html_url": "https://github.com/rust-lang/rust/commit/918115c32e9a3882d1dd65f2403bd109fc64c798"}, {"sha": "7e73b7a5f8d594a85627786a13e76d9d70163770", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e73b7a5f8d594a85627786a13e76d9d70163770", "html_url": "https://github.com/rust-lang/rust/commit/7e73b7a5f8d594a85627786a13e76d9d70163770"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "ae0e5605c170cb9b190e264aec8d74fae9ec5aa2", "filename": "crates/ra_assists/src/doc_tests.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4431e83025223d5aea0ae3d49a6356775cb5f75/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4431e83025223d5aea0ae3d49a6356775cb5f75/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs?ref=a4431e83025223d5aea0ae3d49a6356775cb5f75", "patch": "@@ -8,19 +8,21 @@ mod generated;\n use ra_db::FileRange;\n use test_utils::{assert_eq_text, extract_range_or_offset};\n \n+use crate::resolved_assists;\n+\n fn check(assist_id: &str, before: &str, after: &str) {\n     let (selection, before) = extract_range_or_offset(before);\n     let (db, file_id) = crate::helpers::with_single_file(&before);\n     let frange = FileRange { file_id, range: selection.into() };\n \n-    let assist = crate::assists(&db, frange)\n+    let assist = resolved_assists(&db, frange)\n         .into_iter()\n         .find(|assist| assist.label.id.0 == assist_id)\n         .unwrap_or_else(|| {\n             panic!(\n                 \"\\n\\nAssist is not applicable: {}\\nAvailable assists: {}\",\n                 assist_id,\n-                crate::assists(&db, frange)\n+                resolved_assists(&db, frange)\n                     .into_iter()\n                     .map(|assist| assist.label.id.0)\n                     .collect::<Vec<_>>()"}, {"sha": "3f3df3f969bd85af368fe2c3bacbec05b08d2437", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a4431e83025223d5aea0ae3d49a6356775cb5f75/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4431e83025223d5aea0ae3d49a6356775cb5f75/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=a4431e83025223d5aea0ae3d49a6356775cb5f75", "patch": "@@ -59,7 +59,7 @@ impl ResolvedAssist {\n ///\n /// Assists are returned in the \"unresolved\" state, that is only labels are\n /// returned, without actual edits.\n-pub fn applicable_assists(db: &RootDatabase, range: FileRange) -> Vec<AssistLabel> {\n+pub fn unresolved_assists(db: &RootDatabase, range: FileRange) -> Vec<AssistLabel> {\n     AssistCtx::with_ctx(db, range, false, |ctx| {\n         assists::all()\n             .iter()\n@@ -76,7 +76,7 @@ pub fn applicable_assists(db: &RootDatabase, range: FileRange) -> Vec<AssistLabe\n ///\n /// Assists are returned in the \"resolved\" state, that is with edit fully\n /// computed.\n-pub fn assists(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssist> {\n+pub fn resolved_assists(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssist> {\n     AssistCtx::with_ctx(db, range, true, |ctx| {\n         let mut a = assists::all()\n             .iter()\n@@ -301,7 +301,7 @@ mod tests {\n     use ra_syntax::TextRange;\n     use test_utils::{extract_offset, extract_range};\n \n-    use crate::helpers;\n+    use crate::{helpers, resolved_assists};\n \n     #[test]\n     fn assist_order_field_struct() {\n@@ -310,7 +310,7 @@ mod tests {\n         let (db, file_id) = helpers::with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n-        let assists = super::assists(&db, frange);\n+        let assists = resolved_assists(&db, frange);\n         let mut assists = assists.iter();\n \n         assert_eq!(\n@@ -333,7 +333,7 @@ mod tests {\n         let (range, before) = extract_range(before);\n         let (db, file_id) = helpers::with_single_file(&before);\n         let frange = FileRange { file_id, range };\n-        let assists = super::assists(&db, frange);\n+        let assists = resolved_assists(&db, frange);\n         let mut assists = assists.iter();\n \n         assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Extract into variable\");"}, {"sha": "b60b1a60d61c8cd7941845f32a7e1902ff08d515", "filename": "crates/ra_ide/src/assists.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4431e83025223d5aea0ae3d49a6356775cb5f75/crates%2Fra_ide%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4431e83025223d5aea0ae3d49a6356775cb5f75/crates%2Fra_ide%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fassists.rs?ref=a4431e83025223d5aea0ae3d49a6356775cb5f75", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use either::Either;\n-use ra_assists::{AssistAction, AssistLabel};\n+use ra_assists::{resolved_assists, AssistAction, AssistLabel};\n use ra_db::{FilePosition, FileRange};\n use ra_ide_db::RootDatabase;\n \n@@ -17,7 +17,7 @@ pub struct Assist {\n }\n \n pub(crate) fn assists(db: &RootDatabase, frange: FileRange) -> Vec<Assist> {\n-    ra_assists::assists(db, frange)\n+    resolved_assists(db, frange)\n         .into_iter()\n         .map(|assist| {\n             let file_id = frange.file_id;"}]}