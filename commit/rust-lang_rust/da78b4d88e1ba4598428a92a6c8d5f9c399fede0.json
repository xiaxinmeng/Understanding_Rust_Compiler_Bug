{"sha": "da78b4d88e1ba4598428a92a6c8d5f9c399fede0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNzhiNGQ4OGUxYmE0NTk4NDI4YTkyYTZjOGQ1ZjljMzk5ZmVkZTA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-06-16T17:34:17Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-06-16T19:15:06Z"}, "message": "Review comments\n\n- exhaustive match\n- rename method to `check_expr_meets_expectation_or_error`\n- formatting\n- add `delay_span_bug`\n- add test", "tree": {"sha": "4a0013d4424c574e22157ced62126d2762beeb9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a0013d4424c574e22157ced62126d2762beeb9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da78b4d88e1ba4598428a92a6c8d5f9c399fede0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da78b4d88e1ba4598428a92a6c8d5f9c399fede0", "html_url": "https://github.com/rust-lang/rust/commit/da78b4d88e1ba4598428a92a6c8d5f9c399fede0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da78b4d88e1ba4598428a92a6c8d5f9c399fede0/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "028b5f94e3aef435c626131e5b571272f2d3d52c", "url": "https://api.github.com/repos/rust-lang/rust/commits/028b5f94e3aef435c626131e5b571272f2d3d52c", "html_url": "https://github.com/rust-lang/rust/commit/028b5f94e3aef435c626131e5b571272f2d3d52c"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "bdd8169b84fe7ffcdf58726dee2875c8356fb1c2", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da78b4d88e1ba4598428a92a6c8d5f9c399fede0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da78b4d88e1ba4598428a92a6c8d5f9c399fede0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=da78b4d88e1ba4598428a92a6c8d5f9c399fede0", "patch": "@@ -413,7 +413,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // discriminant. This is sort of a workaround, see note (*) in\n             // `check_pat` for some details.\n             discrim_ty = self.next_ty_var(TypeVariableOrigin::TypeInference(discrim.span));\n-            self.check_expr_has_type(discrim, discrim_ty);\n+            self.check_expr_has_type_or_error(discrim, discrim_ty);\n         };\n \n         // If the discriminant diverges, the match is pointless (e.g.,\n@@ -480,7 +480,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         for (i, (arm, pats_diverge)) in arms.iter().zip(all_arm_pats_diverge).enumerate() {\n             if let Some(ref e) = arm.guard {\n                 self.diverges.set(pats_diverge);\n-                self.check_expr_has_type(e, tcx.types.bool);\n+                self.check_expr_has_type_or_error(e, tcx.types.bool);\n             }\n \n             self.diverges.set(pats_diverge);"}, {"sha": "1b6f96cf65137f3fcda3d25d2822d2a4c7986a6f", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da78b4d88e1ba4598428a92a6c8d5f9c399fede0/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da78b4d88e1ba4598428a92a6c8d5f9c399fede0/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=da78b4d88e1ba4598428a92a6c8d5f9c399fede0", "patch": "@@ -29,7 +29,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.demand_suptype_diag(sp, expected, actual).map(|mut e| e.emit());\n     }\n \n-    pub fn demand_suptype_diag(&self, sp: Span,\n+    pub fn demand_suptype_diag(&self,\n+                               sp: Span,\n                                expected: Ty<'tcx>,\n                                actual: Ty<'tcx>) -> Option<DiagnosticBuilder<'tcx>> {\n         let cause = &self.misc(sp);"}, {"sha": "d663d8f0d2b5aa2e6297f1351ed4391a51d60bd4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/da78b4d88e1ba4598428a92a6c8d5f9c399fede0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da78b4d88e1ba4598428a92a6c8d5f9c399fede0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=da78b4d88e1ba4598428a92a6c8d5f9c399fede0", "patch": "@@ -345,7 +345,7 @@ impl<'a, 'gcx, 'tcx> Expectation<'tcx> {\n         match self.resolve(fcx) {\n             ExpectHasType(ty) => Some(ty),\n             ExpectIfCondition => Some(fcx.tcx.types.bool),\n-            _ => None\n+            NoExpectation | ExpectCastableToType(_) | ExpectRvalueLikeUnsized(_) => None,\n         }\n     }\n \n@@ -2647,15 +2647,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.demand_eqtype(expr.span, expected, ty);\n     }\n \n-    pub fn check_expr_has_type(&self,\n-                               expr: &'gcx hir::Expr,\n-                               expected: Ty<'tcx>) -> Ty<'tcx> {\n-        self.check_expr_expect_type(expr, ExpectHasType(expected))\n+    pub fn check_expr_has_type_or_error(&self,\n+                                        expr: &'gcx hir::Expr,\n+                                        expected: Ty<'tcx>) -> Ty<'tcx> {\n+        self.check_expr_meets_expectation_or_error(expr, ExpectHasType(expected))\n     }\n \n-    fn check_expr_expect_type(&self,\n-                              expr: &'gcx hir::Expr,\n-                              expected: Expectation<'tcx>) -> Ty<'tcx> {\n+    fn check_expr_meets_expectation_or_error(&self,\n+                                             expr: &'gcx hir::Expr,\n+                                             expected: Expectation<'tcx>) -> Ty<'tcx> {\n         let expected_ty = expected.to_option(&self).unwrap_or(self.tcx.types.bool);\n         let mut ty = self.check_expr_with_expectation(expr, expected);\n \n@@ -2865,7 +2865,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                        opt_else_expr: Option<&'gcx hir::Expr>,\n                        sp: Span,\n                        expected: Expectation<'tcx>) -> Ty<'tcx> {\n-        let cond_ty = self.check_expr_expect_type(cond_expr, ExpectIfCondition);\n+        let cond_ty = self.check_expr_meets_expectation_or_error(cond_expr, ExpectIfCondition);\n         let cond_diverges = self.diverges.get();\n         self.diverges.set(Diverges::Maybe);\n \n@@ -3352,7 +3352,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.check_expr_struct_fields(struct_ty, expected, expr.id, path_span, variant, fields,\n                                       base_expr.is_none());\n         if let &Some(ref base_expr) = base_expr {\n-            self.check_expr_has_type(base_expr, struct_ty);\n+            self.check_expr_has_type_or_error(base_expr, struct_ty);\n             match struct_ty.sty {\n                 ty::TyAdt(adt, substs) if adt.is_struct() => {\n                     let fru_field_types = adt.struct_variant().fields.iter().map(|f| {\n@@ -3668,7 +3668,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let rhs_ty = self.check_expr_coercable_to_type(&rhs, lhs_ty);\n \n             match expected {\n-                ExpectIfCondition => (),\n+                ExpectIfCondition => {\n+                    self.tcx.sess.delay_span_bug(lhs.span, \"invalid lhs expression in if;\\\n+                                                            expected error elsehwere\");\n+                }\n                 _ => {\n                     // Only check this if not in an `if` condition, as the\n                     // mistyped comparison help is more appropriate.\n@@ -3704,7 +3707,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n               };\n \n               self.with_breakable_ctxt(expr.id, ctxt, || {\n-                  self.check_expr_has_type(&cond, tcx.types.bool);\n+                  self.check_expr_has_type_or_error(&cond, tcx.types.bool);\n                   let cond_diverging = self.diverges.get();\n                   self.check_block_no_value(&body);\n \n@@ -3842,7 +3845,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 None => {\n                     let t: Ty = self.next_ty_var(TypeVariableOrigin::MiscVariable(element.span));\n-                    let element_ty = self.check_expr_has_type(&element, t);\n+                    let element_ty = self.check_expr_has_type_or_error(&element, t);\n                     (element_ty, t)\n                 }\n             };\n@@ -4097,7 +4100,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n             hir::StmtExpr(ref expr, _) => {\n                 // Check with expected type of ()\n-                self.check_expr_has_type(&expr, self.tcx.mk_nil());\n+                self.check_expr_has_type_or_error(&expr, self.tcx.mk_nil());\n             }\n             hir::StmtSemi(ref expr, _) => {\n                 self.check_expr(&expr);"}, {"sha": "98dc55c666303fa65c03f565e7ff1214985a7931", "filename": "src/test/ui/type-check/assignment-in-if.rs", "status": "renamed", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da78b4d88e1ba4598428a92a6c8d5f9c399fede0/src%2Ftest%2Fui%2Ftype-check%2Fassignment-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da78b4d88e1ba4598428a92a6c8d5f9c399fede0/src%2Ftest%2Fui%2Ftype-check%2Fassignment-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fassignment-in-if.rs?ref=da78b4d88e1ba4598428a92a6c8d5f9c399fede0", "patch": "@@ -45,4 +45,8 @@ fn main() {\n         //~| HELP did you mean to compare equality?\n         println!(\"{}\", x);\n     }\n+    if (if true { x = 4 } else { x = 5 }) {\n+        //~^ ERROR mismatched types\n+        println!(\"{}\", x);\n+    }\n }", "previous_filename": "src/test/ui/type-check/issue-17283.rs"}, {"sha": "294399992732233a541ce4899456667b22e00fc1", "filename": "src/test/ui/type-check/assignment-in-if.stderr", "status": "renamed", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/da78b4d88e1ba4598428a92a6c8d5f9c399fede0/src%2Ftest%2Fui%2Ftype-check%2Fassignment-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da78b4d88e1ba4598428a92a6c8d5f9c399fede0/src%2Ftest%2Fui%2Ftype-check%2Fassignment-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fassignment-in-if.stderr?ref=da78b4d88e1ba4598428a92a6c8d5f9c399fede0", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-17283.rs:25:8\n+  --> $DIR/assignment-in-if.rs:25:8\n    |\n 25 |     if x = x {\n    |        ^^^^^\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-17283.rs:31:8\n+  --> $DIR/assignment-in-if.rs:31:8\n    |\n 31 |     if (x = x) {\n    |        ^^^^^^^\n@@ -23,7 +23,7 @@ error[E0308]: mismatched types\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-17283.rs:37:8\n+  --> $DIR/assignment-in-if.rs:37:8\n    |\n 37 |     if y = (Foo { foo: x }) {\n    |        ^^^^^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ error[E0308]: mismatched types\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-17283.rs:43:8\n+  --> $DIR/assignment-in-if.rs:43:8\n    |\n 43 |     if 3 = x {\n    |        ^^^^^\n@@ -46,5 +46,14 @@ error[E0308]: mismatched types\n    = note: expected type `bool`\n               found type `()`\n \n+error[E0308]: mismatched types\n+  --> $DIR/assignment-in-if.rs:48:8\n+   |\n+48 |     if (if true { x = 4 } else { x = 5 }) {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found ()\n+   |\n+   = note: expected type `bool`\n+              found type `()`\n+\n error: aborting due to previous error(s)\n ", "previous_filename": "src/test/ui/type-check/issue-17283.stderr"}]}