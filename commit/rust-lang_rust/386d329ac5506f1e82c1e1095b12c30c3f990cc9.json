{"sha": "386d329ac5506f1e82c1e1095b12c30c3f990cc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NmQzMjlhYzU1MDZmMWU4MmMxZTEwOTViMTJjMzBjM2Y5OTBjYzk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T22:31:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T22:31:59Z"}, "message": "rollup merge of #22437: dotdash/fix_array_type\n\nIn trans_slice_vec we currently use arrayalloca, which gives us a\npointer to the element type with enough memory allocated for the\nrequested number of elements.  This works, but everywhere else we use\nthe [n x T] type for fixed size arrays and so we have to bitcast the\npointer here. Let's directly use the proper type for the allocation and\nremove some code duplication along the way.", "tree": {"sha": "02419e508348e92e1581b23fd44ee50053492eda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02419e508348e92e1581b23fd44ee50053492eda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/386d329ac5506f1e82c1e1095b12c30c3f990cc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/386d329ac5506f1e82c1e1095b12c30c3f990cc9", "html_url": "https://github.com/rust-lang/rust/commit/386d329ac5506f1e82c1e1095b12c30c3f990cc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/386d329ac5506f1e82c1e1095b12c30c3f990cc9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "754db0f7ac35edcddeb3e6a27969a7c3a380f936", "url": "https://api.github.com/repos/rust-lang/rust/commits/754db0f7ac35edcddeb3e6a27969a7c3a380f936", "html_url": "https://github.com/rust-lang/rust/commit/754db0f7ac35edcddeb3e6a27969a7c3a380f936"}, {"sha": "0fe880bdb788032100b9cd1633770b56393784f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fe880bdb788032100b9cd1633770b56393784f6", "html_url": "https://github.com/rust-lang/rust/commit/0fe880bdb788032100b9cd1633770b56393784f6"}], "stats": {"total": 41, "additions": 11, "deletions": 30}, "files": [{"sha": "b299f6f897176cb66d0b8b0bd59f5d66a7f786d1", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/386d329ac5506f1e82c1e1095b12c30c3f990cc9/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/386d329ac5506f1e82c1e1095b12c30c3f990cc9/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=386d329ac5506f1e82c1e1095b12c30c3f990cc9", "patch": "@@ -1219,19 +1219,6 @@ pub fn alloca_zeroed<'blk, 'tcx>(cx: Block<'blk, 'tcx>, ty: Ty<'tcx>,\n     p\n }\n \n-pub fn arrayalloca(cx: Block, ty: Type, v: ValueRef) -> ValueRef {\n-    let _icx = push_ctxt(\"arrayalloca\");\n-    if cx.unreachable.get() {\n-        unsafe {\n-            return llvm::LLVMGetUndef(ty.to_ref());\n-        }\n-    }\n-    debuginfo::clear_source_location(cx.fcx);\n-    let p = ArrayAlloca(cx, ty, v);\n-    call_lifetime_start(cx, p);\n-    p\n-}\n-\n // Creates the alloca slot which holds the pointer to the slot for the final return value\n pub fn make_return_slot_pointer<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n                                           output_type: Ty<'tcx>) -> ValueRef {"}, {"sha": "bf94a2e23daf2a441031a62ea45245d27d02e1fa", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/386d329ac5506f1e82c1e1095b12c30c3f990cc9/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/386d329ac5506f1e82c1e1095b12c30c3f990cc9/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=386d329ac5506f1e82c1e1095b12c30c3f990cc9", "patch": "@@ -171,33 +171,27 @@ pub fn trans_slice_vec<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let vt = vec_types_from_expr(bcx, content_expr);\n     let count = elements_required(bcx, content_expr);\n     debug!(\"    vt={}, count={}\", vt.to_string(ccx), count);\n-    let llcount = C_uint(ccx, count);\n \n     let fixed_ty = ty::mk_vec(bcx.tcx(),\n                               vt.unit_ty,\n                               Some(count));\n-    let llfixed_ty = type_of::type_of(bcx.ccx(), fixed_ty).ptr_to();\n+    let llfixed_ty = type_of::type_of(bcx.ccx(), fixed_ty);\n \n-    let llfixed = if count == 0 {\n-        // Just create a zero-sized alloca to preserve\n-        // the non-null invariant of the inner slice ptr\n-        let llfixed = base::arrayalloca(bcx, vt.llunit_ty, llcount);\n-        BitCast(bcx, llfixed, llfixed_ty)\n-    } else {\n-        // Make a fixed-length backing array and allocate it on the stack.\n-        let llfixed = base::arrayalloca(bcx, vt.llunit_ty, llcount);\n+    // Always create an alloca even if zero-sized, to preserve\n+    // the non-null invariant of the inner slice ptr\n+    let llfixed = base::alloca(bcx, llfixed_ty, \"\");\n \n+    if count > 0 {\n         // Arrange for the backing array to be cleaned up.\n-        let llfixed_casted = BitCast(bcx, llfixed, llfixed_ty);\n         let cleanup_scope = cleanup::temporary_scope(bcx.tcx(), content_expr.id);\n-        fcx.schedule_lifetime_end(cleanup_scope, llfixed_casted);\n-        fcx.schedule_drop_mem(cleanup_scope, llfixed_casted, fixed_ty);\n+        fcx.schedule_lifetime_end(cleanup_scope, llfixed);\n+        fcx.schedule_drop_mem(cleanup_scope, llfixed, fixed_ty);\n \n         // Generate the content into the backing array.\n-        bcx = write_content(bcx, &vt, slice_expr,\n-                            content_expr, SaveIn(llfixed));\n-\n-        llfixed_casted\n+        // llfixed has type *[T x N], but we want the type *T,\n+        // so use GEP to convert\n+        bcx = write_content(bcx, &vt, slice_expr, content_expr,\n+                            SaveIn(GEPi(bcx, llfixed, &[0, 0])));\n     };\n \n     immediate_rvalue_bcx(bcx, llfixed, vec_ty).to_expr_datumblock()"}]}