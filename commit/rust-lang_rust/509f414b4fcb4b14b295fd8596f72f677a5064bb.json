{"sha": "509f414b4fcb4b14b295fd8596f72f677a5064bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOWY0MTRiNGZjYjRiMTRiMjk1ZmQ4NTk2ZjcyZjY3N2E1MDY0YmI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-26T15:39:31Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-27T06:22:35Z"}, "message": "Ensure every unstable feature has a tracking issue.", "tree": {"sha": "8cd259b139f726e1fc8929c59bb8f2e330181de4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cd259b139f726e1fc8929c59bb8f2e330181de4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/509f414b4fcb4b14b295fd8596f72f677a5064bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlsKTqwACgkQ/vbIBR0O\nATywLQ/+IMDzryS9tmFA0gtSzYZXNMXsOWb80L/q9k3QHPy1sH64Ngz17fgf0vN7\ncWP8Wo4Hx7o1LniWWvQ5FPEGBqHIUxmGT/Ccjs27SPb2GIOSlKF7eekYcb8DqW2L\nki7ytPPT/VkiqM5iBPX/PTdzOSFUg6/FgdLkcWdXxBxnLA6HMIf9jG+05Hg6OLhf\nYnwF08qsjAKY6PBEPsFbUq2Nf+IrTZ2UNnrQaSvA/IkeC7UBN/0i0ihTBkAkwD95\nuTBGXvHtXnJVHLYdYLdS0Z9hXQnBNlIGwFPOaj944n0eNnfocZs6XTRW3LsItVj4\nEyaok43xAmawCkUi0ly43n5QUC5/zROOBdRwlmvAP+KrjYCOsuCAYu5M+W9mXKjg\nF3HQ5H6MboIae2yVYrZCo1K1iKIR7elyoDcCbfDurZn2Y83fiZ1eYfR/muMlTtG0\ngrASDG7LMQgAipyoiv2xEu/DXsLF0Kay/eUinYyIg4yI0fSfI9h09DPE4CgXhRUm\nvQCSVof4Cy7VPzhDT8eC4Dz1Loh5xNHV3X+DFtkvFinal+P5Ep/PVeIM1ZY3BNfh\na3ungO7ZExmdEinkXiAmnIuOJp2hv1Cs60joTUvAJVoDrVBqGmohmhMRPoBOUa/l\n61kSRKXZGhBs08N/ucABF9TQP6GDeyt/RsfaUUfMiQfF4CEZZts=\n=GuoN\n-----END PGP SIGNATURE-----", "payload": "tree 8cd259b139f726e1fc8929c59bb8f2e330181de4\nparent 1a6bda68cd9d5072f56783f22f7468c19289a020\nauthor kennytm <kennytm@gmail.com> 1527349171 +0800\ncommitter kennytm <kennytm@gmail.com> 1527402155 +0800\n\nEnsure every unstable feature has a tracking issue.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/509f414b4fcb4b14b295fd8596f72f677a5064bb", "html_url": "https://github.com/rust-lang/rust/commit/509f414b4fcb4b14b295fd8596f72f677a5064bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/509f414b4fcb4b14b295fd8596f72f677a5064bb/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a6bda68cd9d5072f56783f22f7468c19289a020", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6bda68cd9d5072f56783f22f7468c19289a020", "html_url": "https://github.com/rust-lang/rust/commit/1a6bda68cd9d5072f56783f22f7468c19289a020"}], "stats": {"total": 109, "additions": 67, "deletions": 42}, "files": [{"sha": "9b84713b0f90f28d3ff607a87ba952e92e3d04e0", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=509f414b4fcb4b14b295fd8596f72f677a5064bb", "patch": "@@ -235,7 +235,7 @@ declare_features! (\n     (active, platform_intrinsics, \"1.4.0\", Some(27731), None),\n \n     // allow `#[unwind(..)]`\n-    // rust runtime internal\n+    // rustc internal for rust runtime\n     (active, unwind_attributes, \"1.4.0\", None, None),\n \n     // allow the use of `#[naked]` on functions.\n@@ -276,7 +276,7 @@ declare_features! (\n     (active, never_type, \"1.13.0\", Some(35121), None),\n \n     // Allows exhaustive pattern matching on types that contain uninhabited types.\n-    (active, exhaustive_patterns, \"1.13.0\", None, None),\n+    (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n \n     // Allows all literals in attribute lists and values of key-value pairs.\n     (active, attr_literals, \"1.13.0\", Some(34981), None),\n@@ -294,12 +294,13 @@ declare_features! (\n     (active, use_extern_macros, \"1.15.0\", Some(35896), None),\n \n     // `extern \"ptx-*\" fn()`\n-    (active, abi_ptx, \"1.15.0\", None, None),\n+    (active, abi_ptx, \"1.15.0\", Some(38788), None),\n \n     // The `repr(i128)` annotation for enums\n     (active, repr128, \"1.16.0\", Some(35118), None),\n \n     // The `unadjusted` ABI. Perma unstable.\n+    // rustc internal\n     (active, abi_unadjusted, \"1.16.0\", None, None),\n \n     // Procedural macros 2.0.\n@@ -351,13 +352,14 @@ declare_features! (\n     (active, unsized_tuple_coercion, \"1.20.0\", Some(42877), None),\n \n     // Generators\n-    (active, generators, \"1.21.0\", None, None),\n+    (active, generators, \"1.21.0\", Some(43122), None),\n \n     // Trait aliases\n     (active, trait_alias, \"1.24.0\", Some(41517), None),\n \n     // global allocators and their internals\n-    (active, global_allocator, \"1.20.0\", None, None),\n+    (active, global_allocator, \"1.20.0\", Some(27389), None),\n+    // rustc internal\n     (active, allocator_internals, \"1.20.0\", None, None),\n \n     // #[doc(cfg(...))]\n@@ -415,7 +417,7 @@ declare_features! (\n     (active, if_while_or_patterns, \"1.26.0\", Some(48215), None),\n \n     // Parentheses in patterns\n-    (active, pattern_parentheses, \"1.26.0\", None, None),\n+    (active, pattern_parentheses, \"1.26.0\", Some(51087), None),\n \n     // Allows `#[repr(packed)]` attribute on structs\n     (active, repr_packed, \"1.26.0\", Some(33158), None),\n@@ -424,10 +426,10 @@ declare_features! (\n     (active, underscore_imports, \"1.26.0\", Some(48216), None),\n \n     // The #[wasm_custom_section] attribute\n-    (active, wasm_custom_section, \"1.26.0\", None, None),\n+    (active, wasm_custom_section, \"1.26.0\", Some(51088), None),\n \n     // The #![wasm_import_module] attribute\n-    (active, wasm_import_module, \"1.26.0\", None, None),\n+    (active, wasm_import_module, \"1.26.0\", Some(51088), None),\n \n     // Allows keywords to be escaped for use as identifiers\n     (active, raw_identifiers, \"1.26.0\", Some(48589), None),\n@@ -436,25 +438,25 @@ declare_features! (\n     (active, macros_in_extern, \"1.27.0\", Some(49476), None),\n \n     // unstable #[target_feature] directives\n-    (active, arm_target_feature, \"1.27.0\", None, None),\n-    (active, aarch64_target_feature, \"1.27.0\", None, None),\n-    (active, hexagon_target_feature, \"1.27.0\", None, None),\n-    (active, powerpc_target_feature, \"1.27.0\", None, None),\n-    (active, mips_target_feature, \"1.27.0\", None, None),\n-    (active, avx512_target_feature, \"1.27.0\", None, None),\n-    (active, mmx_target_feature, \"1.27.0\", None, None),\n-    (active, sse4a_target_feature, \"1.27.0\", None, None),\n-    (active, tbm_target_feature, \"1.27.0\", None, None),\n+    (active, arm_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, aarch64_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, hexagon_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, powerpc_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, mips_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, avx512_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, mmx_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, sse4a_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, tbm_target_feature, \"1.27.0\", Some(44839), None),\n \n     // Allows macro invocations of the form `#[foo::bar]`\n-    (active, proc_macro_path_invoc, \"1.27.0\", None, None),\n+    (active, proc_macro_path_invoc, \"1.27.0\", Some(38356), None),\n \n     // Allows macro invocations on modules expressions and statements and\n     // procedural macros to expand to non-items.\n-    (active, proc_macro_mod, \"1.27.0\", None, None),\n-    (active, proc_macro_expr, \"1.27.0\", None, None),\n-    (active, proc_macro_non_items, \"1.27.0\", None, None),\n-    (active, proc_macro_gen, \"1.27.0\", None, None),\n+    (active, proc_macro_mod, \"1.27.0\", Some(38356), None),\n+    (active, proc_macro_expr, \"1.27.0\", Some(38356), None),\n+    (active, proc_macro_non_items, \"1.27.0\", Some(38356), None),\n+    (active, proc_macro_gen, \"1.27.0\", Some(38356), None),\n \n     // #[doc(alias = \"...\")]\n     (active, doc_alias, \"1.27.0\", Some(50146), None),"}, {"sha": "6ae1cc54021964524ecf86c34f44624555f4a9da", "filename": "src/test/ui/feature-gate-abi.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftest%2Fui%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftest%2Fui%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-abi.stderr?ref=509f414b4fcb4b14b295fd8596f72f677a5064bb", "patch": "@@ -38,7 +38,7 @@ LL | extern \"msp430-interrupt\" fn f5() {} //~ ERROR msp430-interrupt ABI is expe\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error[E0658]: PTX ABIs are experimental and subject to change\n+error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n   --> $DIR/feature-gate-abi.rs:24:1\n    |\n LL | extern \"ptx-kernel\" fn f6() {} //~ ERROR PTX ABIs are experimental and subject to change\n@@ -102,7 +102,7 @@ LL |     extern \"msp430-interrupt\" fn m5(); //~ ERROR msp430-interrupt ABI is ex\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error[E0658]: PTX ABIs are experimental and subject to change\n+error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n   --> $DIR/feature-gate-abi.rs:35:5\n    |\n LL |     extern \"ptx-kernel\" fn m6(); //~ ERROR PTX ABIs are experimental and subject to change\n@@ -166,7 +166,7 @@ LL |     extern \"msp430-interrupt\" fn dm5() {} //~ ERROR msp430-interrupt ABI is\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error[E0658]: PTX ABIs are experimental and subject to change\n+error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n   --> $DIR/feature-gate-abi.rs:44:5\n    |\n LL |     extern \"ptx-kernel\" fn dm6() {} //~ ERROR PTX ABIs are experimental and subject to change\n@@ -230,7 +230,7 @@ LL |     extern \"msp430-interrupt\" fn m5() {} //~ ERROR msp430-interrupt ABI is\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error[E0658]: PTX ABIs are experimental and subject to change\n+error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n   --> $DIR/feature-gate-abi.rs:58:5\n    |\n LL |     extern \"ptx-kernel\" fn m6() {} //~ ERROR PTX ABIs are experimental and subject to change\n@@ -294,7 +294,7 @@ LL |     extern \"msp430-interrupt\" fn im5() {} //~ ERROR msp430-interrupt ABI is\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error[E0658]: PTX ABIs are experimental and subject to change\n+error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n   --> $DIR/feature-gate-abi.rs:70:5\n    |\n LL |     extern \"ptx-kernel\" fn im6() {} //~ ERROR PTX ABIs are experimental and subject to change\n@@ -358,7 +358,7 @@ LL | type A5 = extern \"msp430-interrupt\" fn(); //~ ERROR msp430-interrupt ABI is\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error[E0658]: PTX ABIs are experimental and subject to change\n+error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n   --> $DIR/feature-gate-abi.rs:81:11\n    |\n LL | type A6 = extern \"ptx-kernel\" fn (); //~ ERROR PTX ABIs are experimental and subject to change\n@@ -422,7 +422,7 @@ LL | extern \"msp430-interrupt\" {} //~ ERROR msp430-interrupt ABI is experimental\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error[E0658]: PTX ABIs are experimental and subject to change\n+error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n   --> $DIR/feature-gate-abi.rs:91:1\n    |\n LL | extern \"ptx-kernel\" {} //~ ERROR PTX ABIs are experimental and subject to change"}, {"sha": "0c2337e27a70052581d8808ae525b26a1b75d6ae", "filename": "src/test/ui/feature-gate-generators.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftest%2Fui%2Ffeature-gate-generators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftest%2Fui%2Ffeature-gate-generators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-generators.stderr?ref=509f414b4fcb4b14b295fd8596f72f677a5064bb", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: yield syntax is experimental\n+error[E0658]: yield syntax is experimental (see issue #43122)\n   --> $DIR/feature-gate-generators.rs:12:5\n    |\n LL |     yield true; //~ ERROR yield syntax is experimental"}, {"sha": "9f8b98ede09f164efa9602b1b8591f2749f24783", "filename": "src/test/ui/feature-gate-global_allocator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftest%2Fui%2Ffeature-gate-global_allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftest%2Fui%2Ffeature-gate-global_allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-global_allocator.stderr?ref=509f414b4fcb4b14b295fd8596f72f677a5064bb", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: the `#[global_allocator]` attribute is an experimental feature\n+error[E0658]: the `#[global_allocator]` attribute is an experimental feature (see issue #27389)\n   --> $DIR/feature-gate-global_allocator.rs:11:1\n    |\n LL | #[global_allocator] //~ ERROR: attribute is an experimental feature"}, {"sha": "4268d27ebec991a3d32e90f4950ac91e6b330cc2", "filename": "src/test/ui/feature-gate-pattern_parentheses.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftest%2Fui%2Ffeature-gate-pattern_parentheses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftest%2Fui%2Ffeature-gate-pattern_parentheses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-pattern_parentheses.stderr?ref=509f414b4fcb4b14b295fd8596f72f677a5064bb", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: parentheses in patterns are unstable\n+error[E0658]: parentheses in patterns are unstable (see issue #51087)\n   --> $DIR/feature-gate-pattern_parentheses.rs:13:9\n    |\n LL |         (pat) => {} //~ ERROR parentheses in patterns are unstable"}, {"sha": "91f75d6817f957b2a98513c1f781773eed738ca6", "filename": "src/test/ui/feature-gate-wasm_custom_section.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftest%2Fui%2Ffeature-gate-wasm_custom_section.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftest%2Fui%2Ffeature-gate-wasm_custom_section.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-wasm_custom_section.stderr?ref=509f414b4fcb4b14b295fd8596f72f677a5064bb", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: attribute is currently unstable\n+error[E0658]: attribute is currently unstable (see issue #51088)\n   --> $DIR/feature-gate-wasm_custom_section.rs:11:1\n    |\n LL | #[wasm_custom_section = \"foo\"] //~ ERROR: attribute is currently unstable"}, {"sha": "02830a49f530fa41f033de8e2d72094ba119d8c4", "filename": "src/test/ui/feature-gate-wasm_import_module.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_module.stderr?ref=509f414b4fcb4b14b295fd8596f72f677a5064bb", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: experimental attribute\n+error[E0658]: experimental attribute (see issue #51088)\n   --> $DIR/feature-gate-wasm_import_module.rs:11:1\n    |\n LL | #[wasm_import_module = \"test\"] //~ ERROR: experimental"}, {"sha": "a6f794a1a1ab2660fbefe671baf1224a7869eaac", "filename": "src/test/ui/target-feature-gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr?ref=509f414b4fcb4b14b295fd8596f72f677a5064bb", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: the target feature `avx512bw` is currently unstable\n+error[E0658]: the target feature `avx512bw` is currently unstable (see issue #44839)\n   --> $DIR/target-feature-gate.rs:26:18\n    |\n LL | #[target_feature(enable = \"avx512bw\")]"}, {"sha": "4c0db993809f93239df640fd413bb52a27a6f80e", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=509f414b4fcb4b14b295fd8596f72f677a5064bb", "patch": "@@ -81,7 +81,7 @@ impl Feature {\n pub type Features = HashMap<String, Feature>;\n \n pub fn check(path: &Path, bad: &mut bool, quiet: bool) {\n-    let mut features = collect_lang_features(path);\n+    let mut features = collect_lang_features(path, bad);\n     assert!(!features.is_empty());\n \n     let lib_features = get_and_check_lib_features(path, bad, &features);\n@@ -214,14 +214,27 @@ fn test_filen_gate(filen_underscore: &str, features: &mut Features) -> bool {\n     return false;\n }\n \n-pub fn collect_lang_features(base_src_path: &Path) -> Features {\n+pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n     let mut contents = String::new();\n     let path = base_src_path.join(\"libsyntax/feature_gate.rs\");\n     t!(t!(File::open(path)).read_to_string(&mut contents));\n \n-    contents.lines()\n-        .filter_map(|line| {\n-            let mut parts = line.trim().split(\",\");\n+    // we allow rustc-internal features to omit a tracking issue.\n+    // these features must be marked with `// rustc internal` in its own group.\n+    let mut next_feature_is_rustc_internal = false;\n+\n+    contents.lines().zip(1..)\n+        .filter_map(|(line, line_number)| {\n+            let line = line.trim();\n+            if line.starts_with(\"// rustc internal\") {\n+                next_feature_is_rustc_internal = true;\n+                return None;\n+            } else if line.is_empty() {\n+                next_feature_is_rustc_internal = false;\n+                return None;\n+            }\n+\n+            let mut parts = line.split(',');\n             let level = match parts.next().map(|l| l.trim().trim_left_matches('(')) {\n                 Some(\"active\") => Status::Unstable,\n                 Some(\"removed\") => Status::Removed,\n@@ -232,8 +245,18 @@ pub fn collect_lang_features(base_src_path: &Path) -> Features {\n             let since = parts.next().unwrap().trim().trim_matches('\"');\n             let issue_str = parts.next().unwrap().trim();\n             let tracking_issue = if issue_str.starts_with(\"None\") {\n+                if level == Status::Unstable && !next_feature_is_rustc_internal {\n+                    *bad = true;\n+                    tidy_error!(\n+                        bad,\n+                        \"libsyntax/feature_gate.rs:{}: no tracking issue for feature {}\",\n+                        line_number,\n+                        name,\n+                    );\n+                }\n                 None\n             } else {\n+                next_feature_is_rustc_internal = false;\n                 let s = issue_str.split(\"(\").nth(1).unwrap().split(\")\").nth(0).unwrap();\n                 Some(s.parse().unwrap())\n             };"}, {"sha": "6b573908de9025b9da5b90d9964145baeb05e22a", "filename": "src/tools/tidy/src/unstable_book.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs?ref=509f414b4fcb4b14b295fd8596f72f677a5064bb", "patch": "@@ -86,7 +86,7 @@ pub fn check(path: &path::Path, bad: &mut bool) {\n \n     // Library features\n \n-    let lang_features = collect_lang_features(path);\n+    let lang_features = collect_lang_features(path, bad);\n     let lib_features = collect_lib_features(path).into_iter().filter(|&(ref name, _)| {\n         !lang_features.contains_key(name)\n     }).collect();"}, {"sha": "b97137d7d6498321069a78608d764b9e0aaa1306", "filename": "src/tools/unstable-book-gen/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509f414b4fcb4b14b295fd8596f72f677a5064bb/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs?ref=509f414b4fcb4b14b295fd8596f72f677a5064bb", "patch": "@@ -131,7 +131,7 @@ fn main() {\n     let src_path = Path::new(&src_path_str);\n     let dest_path = Path::new(&dest_path_str).join(\"src\");\n \n-    let lang_features = collect_lang_features(src_path);\n+    let lang_features = collect_lang_features(src_path, &mut false);\n     let lib_features = collect_lib_features(src_path).into_iter().filter(|&(ref name, _)| {\n         !lang_features.contains_key(name)\n     }).collect();"}]}