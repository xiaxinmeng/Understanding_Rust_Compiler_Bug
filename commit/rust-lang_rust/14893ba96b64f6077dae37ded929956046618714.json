{"sha": "14893ba96b64f6077dae37ded929956046618714", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ODkzYmE5NmI2NGY2MDc3ZGFlMzdkZWQ5Mjk5NTYwNDY2MTg3MTQ=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-11T10:59:17Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-16T13:09:16Z"}, "message": "DeclKind", "tree": {"sha": "00bef10caee6714d5cb3ade3a7a7bddc6c7180f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00bef10caee6714d5cb3ade3a7a7bddc6c7180f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14893ba96b64f6077dae37ded929956046618714", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14893ba96b64f6077dae37ded929956046618714", "html_url": "https://github.com/rust-lang/rust/commit/14893ba96b64f6077dae37ded929956046618714", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14893ba96b64f6077dae37ded929956046618714/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "url": "https://api.github.com/repos/rust-lang/rust/commits/114314c92037d0e3e1320e9c7e4147f5b3bc2c63", "html_url": "https://github.com/rust-lang/rust/commit/114314c92037d0e3e1320e9c7e4147f5b3bc2c63"}], "stats": {"total": 73, "additions": 36, "deletions": 37}, "files": [{"sha": "e4b9ec89bc5632ee30aaa501bc1477ec4d29b961", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=14893ba96b64f6077dae37ded929956046618714", "patch": "@@ -126,12 +126,12 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n \n     fn decl(&mut self, decl: &hir::Decl, pred: CFGIndex) -> CFGIndex {\n         match decl.node {\n-            hir::DeclLocal(ref local) => {\n+            hir::DeclKind::Local(ref local) => {\n                 let init_exit = self.opt_expr(&local.init, pred);\n                 self.pat(&local.pat, init_exit)\n             }\n \n-            hir::DeclItem(_) => pred,\n+            hir::DeclKind::Item(_) => pred,\n         }\n     }\n "}, {"sha": "01c318ca17c3b259e25df0cf7a1af6d9d38c8d6c", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=14893ba96b64f6077dae37ded929956046618714", "patch": "@@ -949,8 +949,8 @@ pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt) {\n \n pub fn walk_decl<'v, V: Visitor<'v>>(visitor: &mut V, declaration: &'v Decl) {\n     match declaration.node {\n-        DeclLocal(ref local) => visitor.visit_local(local),\n-        DeclItem(item) => visitor.visit_nested_item(item),\n+        DeclKind::Local(ref local) => visitor.visit_local(local),\n+        DeclKind::Item(item) => visitor.visit_nested_item(item),\n     }\n }\n "}, {"sha": "4bdf6e1e96b5af5620f5a43d87c9bd8cefc095d5", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=14893ba96b64f6077dae37ded929956046618714", "patch": "@@ -4248,7 +4248,7 @@ impl<'a> LoweringContext<'a> {\n             StmtKind::Local(ref l) => Spanned {\n                 node: hir::StmtKind::Decl(\n                     P(Spanned {\n-                        node: hir::DeclLocal(self.lower_local(l)),\n+                        node: hir::DeclKind::Local(self.lower_local(l)),\n                         span: s.span,\n                     }),\n                     self.lower_node_id(s.id).node_id,\n@@ -4263,7 +4263,7 @@ impl<'a> LoweringContext<'a> {\n                     .map(|item_id| Spanned {\n                         node: hir::StmtKind::Decl(\n                             P(Spanned {\n-                                node: hir::DeclItem(item_id),\n+                                node: hir::DeclKind::Item(item_id),\n                                 span: s.span,\n                             }),\n                             id.take()\n@@ -4493,7 +4493,7 @@ impl<'a> LoweringContext<'a> {\n             attrs: ThinVec::new(),\n             source,\n         });\n-        let decl = respan(sp, hir::DeclLocal(local));\n+        let decl = respan(sp, hir::DeclKind::Local(local));\n         respan(sp, hir::StmtKind::Decl(P(decl), self.next_id().node_id))\n     }\n "}, {"sha": "6e413416100a8bd54d5140481676d16500e5b8bc", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=14893ba96b64f6077dae37ded929956046618714", "patch": "@@ -12,8 +12,7 @@\n \n pub use self::BlockCheckMode::*;\n pub use self::CaptureClause::*;\n-pub use self::Decl_::*;\n-pub use self::Expr_::*;\n+pub use self::ExprKind::*;\n pub use self::FunctionRetTy::*;\n pub use self::ForeignItem_::*;\n pub use self::Item_::*;\n@@ -1158,27 +1157,27 @@ pub struct Local {\n     pub source: LocalSource,\n }\n \n-pub type Decl = Spanned<Decl_>;\n+pub type Decl = Spanned<DeclKind>;\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub enum Decl_ {\n+pub enum DeclKind {\n     /// A local (let) binding:\n-    DeclLocal(P<Local>),\n+    Local(P<Local>),\n     /// An item binding:\n-    DeclItem(ItemId),\n+    Item(ItemId),\n }\n \n-impl Decl_ {\n+impl DeclKind {\n     pub fn attrs(&self) -> &[Attribute] {\n         match *self {\n-            DeclLocal(ref l) => &l.attrs,\n-            DeclItem(_) => &[]\n+            DeclKind::Local(ref l) => &l.attrs,\n+            DeclKind::Item(_) => &[]\n         }\n     }\n \n     pub fn is_local(&self) -> bool {\n         match *self {\n-            Decl_::DeclLocal(_) => true,\n+            DeclKind::Local(_) => true,\n             _ => false,\n         }\n     }"}, {"sha": "7fe0647884491cba43280963ed21d23f0f714e20", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=14893ba96b64f6077dae37ded929956046618714", "patch": "@@ -1575,7 +1575,7 @@ impl<'a> State<'a> {\n     pub fn print_decl(&mut self, decl: &hir::Decl) -> io::Result<()> {\n         self.maybe_print_comment(decl.span.lo())?;\n         match decl.node {\n-            hir::DeclLocal(ref loc) => {\n+            hir::DeclKind::Local(ref loc) => {\n                 self.space_if_not_bol()?;\n                 self.ibox(indent_unit)?;\n                 self.word_nbsp(\"let\")?;\n@@ -1590,7 +1590,7 @@ impl<'a> State<'a> {\n                 }\n                 self.end()\n             }\n-            hir::DeclItem(item) => {\n+            hir::DeclKind::Item(item) => {\n                 self.ann.nested(self, Nested::Item(item))\n             }\n         }\n@@ -2400,8 +2400,8 @@ fn stmt_ends_with_semi(stmt: &hir::StmtKind) -> bool {\n     match *stmt {\n         hir::StmtKind::Decl(ref d, _) => {\n             match d.node {\n-                hir::DeclLocal(_) => true,\n-                hir::DeclItem(_) => false,\n+                hir::DeclKind::Local(_) => true,\n+                hir::DeclKind::Item(_) => false,\n             }\n         }\n         hir::StmtKind::Expr(ref e, _) => {"}, {"sha": "c242efeb8b0b5c5e8b1b418dc69cb58985f5f36d", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=14893ba96b64f6077dae37ded929956046618714", "patch": "@@ -479,10 +479,10 @@ impl_stable_hash_for!(struct hir::Local {\n     source\n });\n \n-impl_stable_hash_for_spanned!(hir::Decl_);\n-impl_stable_hash_for!(enum hir::Decl_ {\n-    DeclLocal(local),\n-    DeclItem(item_id)\n+impl_stable_hash_for_spanned!(hir::DeclKind);\n+impl_stable_hash_for!(enum hir::DeclKind {\n+    Local(local),\n+    Item(item_id)\n });\n \n impl_stable_hash_for!(struct hir::Arm {"}, {"sha": "8250821051ab5b3b6621a750124d53a4ed30e066", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=14893ba96b64f6077dae37ded929956046618714", "patch": "@@ -588,11 +588,11 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n         match stmt.node {\n             hir::StmtKind::Decl(ref decl, _) => {\n                 match decl.node {\n-                    hir::DeclLocal(ref local) => {\n+                    hir::DeclKind::Local(ref local) => {\n                         self.walk_local(&local);\n                     }\n \n-                    hir::DeclItem(_) => {\n+                    hir::DeclKind::Item(_) => {\n                         // we don't visit nested items in this visitor,\n                         // only the fn body we were given.\n                     }"}, {"sha": "fd23ae89940c8ed63445cea0957db9196e82eae5", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=14893ba96b64f6077dae37ded929956046618714", "patch": "@@ -873,10 +873,10 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn propagate_through_decl(&mut self, decl: &hir::Decl, succ: LiveNode)\n                               -> LiveNode {\n         match decl.node {\n-            hir::DeclLocal(ref local) => {\n+            hir::DeclKind::Local(ref local) => {\n                 self.propagate_through_local(&local, succ)\n             }\n-            hir::DeclItem(_) => succ,\n+            hir::DeclKind::Item(_) => succ,\n         }\n     }\n "}, {"sha": "6c8b5d97b6ff314abb58ec95be28d7ed02c9998e", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=14893ba96b64f6077dae37ded929956046618714", "patch": "@@ -67,10 +67,10 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             }\n             hir::StmtKind::Decl(ref decl, _) => {\n                 match decl.node {\n-                    hir::DeclItem(..) => {\n+                    hir::DeclKind::Item(..) => {\n                         // ignore for purposes of the MIR\n                     }\n-                    hir::DeclLocal(ref local) => {\n+                    hir::DeclKind::Local(ref local) => {\n                         let remainder_scope = region::Scope::Remainder(BlockRemainder {\n                             block: block_id,\n                             first_statement_index: region::FirstStatementIndex::new(index),"}, {"sha": "33b104072d91896bf4cbb77262a5f54e253bf9a0", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=14893ba96b64f6077dae37ded929956046618714", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n         match stmt.node {\n             hir::StmtKind::Decl(ref decl, _node_id) => {\n                 match &decl.node {\n-                    hir::DeclLocal(local) => {\n+                    hir::DeclKind::Local(local) => {\n                         if self.remove_mut_rvalue_borrow(&local.pat) {\n                             if let Some(init) = &local.init {\n                                 self.mut_rvalue_borrows.insert(init.id);\n@@ -277,7 +277,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n                         NotPromotable\n                     }\n                     // Item statements are allowed\n-                    hir::DeclItem(_) => Promotable\n+                    hir::DeclKind::Item(_) => Promotable\n                 }\n             }\n             hir::StmtKind::Expr(ref box_expr, _node_id) |"}, {"sha": "75d02e32b64ebe1ebcc3d826da459ead27e92522", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14893ba96b64f6077dae37ded929956046618714/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=14893ba96b64f6077dae37ded929956046618714", "patch": "@@ -4379,8 +4379,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match stmt.node {\n             hir::StmtKind::Decl(ref decl, _) => {\n                 match decl.node {\n-                    hir::DeclLocal(_) => {}\n-                    hir::DeclItem(_) => {\n+                    hir::DeclKind::Local(_) => {}\n+                    hir::DeclKind::Item(_) => {\n                         return;\n                     }\n                 }\n@@ -4399,10 +4399,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match stmt.node {\n             hir::StmtKind::Decl(ref decl, _) => {\n                 match decl.node {\n-                    hir::DeclLocal(ref l) => {\n+                    hir::DeclKind::Local(ref l) => {\n                         self.check_decl_local(&l);\n                     }\n-                    hir::DeclItem(_) => {/* ignore for now */}\n+                    hir::DeclKind::Item(_) => {/* ignore for now */}\n                 }\n             }\n             hir::StmtKind::Expr(ref expr, _) => {"}]}