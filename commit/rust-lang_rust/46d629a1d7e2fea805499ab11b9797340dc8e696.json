{"sha": "46d629a1d7e2fea805499ab11b9797340dc8e696", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZDYyOWExZDdlMmZlYTgwNTQ5OWFiMTFiOTc5NzM0MGRjOGU2OTY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-06T08:25:35Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-06T12:52:28Z"}, "message": "Rollup merge of #48657 - sinkuu:opt_str_repeat, r=dtolnay\n\nOptimize str::repeat\n\nImproves the performance of `str::repeat` by bulk copying. Here is the benchmarks of `\"abcde\".repeat(n)`:\n\n|`n`|old [ns/iter]|new [ns/iter]|diff [%]|\n---|---|---|---\n|1|27.205|27.421|+0.794|\n|2|27.500|27.516|+0.0581|\n|3|27.923|27.648|-0.985|\n|4|31.206|30.145|-3.40|\n|5|35.144|31.861|-9.34|\n|7|43.131|34.621|-19.7|\n|10|54.945|36.203|-34.1|\n|100|428.31|52.895|-87.7|", "tree": {"sha": "32b3f16e49ea1e3d5195e8876948766fc6cc31c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32b3f16e49ea1e3d5195e8876948766fc6cc31c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46d629a1d7e2fea805499ab11b9797340dc8e696", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlqejwwACgkQ/vbIBR0O\nATxSBg/+Ma29Wn6/SOX3bWXfZAH86QUrP06LO9YZcieSfMyF8zC79IR6J6Io0Dat\nx9/dFVXz/oZ2Oqi7hmFmQioETxOvBQcIJ6EFco5uezKUA+pN3A8eME7iaYfqHXR8\na6Te89cxuHT13xCDn/wNthecY1b08ZC4xolf6bsPulHVdGIZm0JJGWIGY4O6wrYk\n+IHisERW29yLifXoU98q0h8nxakhLvb2KGOC8OfuGw8OtvYbk/lX3MPkldV7tIMN\nLZKMYF8pqVnikBVjIhUSgdpMLhpIplvSYcJQE0kugRKB4HJwR2yCEMzPwXKmbu3m\nt7cX+43ZejpFPrX75pHvrzxqskU1bdZ85kbyNaoMxcHvSWIQFDFVb/0Hm6a5FdA6\nfj7GO1H+UJg/ZL8t24Lyy9ZvgnNHx29XYD0kLrbUVFNjg7r2P8OTBljS7+hN9gYZ\nCR1TZCQYWGV/4HtoRUrqJ4fF2gBDOt0Ns5/n1Nwtw+hMEN9CGCBe0aJ5M+d+Sr6G\nM1li1dyALQOxebMFlhbfp5o76kf8wbhiIua6rQu7EB0/3GiJl1q/BlCEgLOEDNgX\nn3aoMWjP6RhYXlYeuv+oKr1+SwsBfFBldPWemDpCoCLHO3DyjWV1KOCJwhDH3Yhj\nQphdjfxkRCzcrxyO/4TRuFMacgkwNr8sEhX+Z8LQL4jPxoGLfCY=\n=fetW\n-----END PGP SIGNATURE-----", "payload": "tree 32b3f16e49ea1e3d5195e8876948766fc6cc31c6\nparent 6b8984dfc8fe0882c21b723cc96f31fb72b62e38\nparent 3d58543d49266a7ec3eb5f5f2ffaf902fce17c53\nauthor kennytm <kennytm@gmail.com> 1520324735 +0800\ncommitter kennytm <kennytm@gmail.com> 1520340748 +0800\n\nRollup merge of #48657 - sinkuu:opt_str_repeat, r=dtolnay\n\nOptimize str::repeat\n\nImproves the performance of `str::repeat` by bulk copying. Here is the benchmarks of `\"abcde\".repeat(n)`:\n\n|`n`|old [ns/iter]|new [ns/iter]|diff [%]|\n---|---|---|---\n|1|27.205|27.421|+0.794|\n|2|27.500|27.516|+0.0581|\n|3|27.923|27.648|-0.985|\n|4|31.206|30.145|-3.40|\n|5|35.144|31.861|-9.34|\n|7|43.131|34.621|-19.7|\n|10|54.945|36.203|-34.1|\n|100|428.31|52.895|-87.7|\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46d629a1d7e2fea805499ab11b9797340dc8e696", "html_url": "https://github.com/rust-lang/rust/commit/46d629a1d7e2fea805499ab11b9797340dc8e696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46d629a1d7e2fea805499ab11b9797340dc8e696/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b8984dfc8fe0882c21b723cc96f31fb72b62e38", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b8984dfc8fe0882c21b723cc96f31fb72b62e38", "html_url": "https://github.com/rust-lang/rust/commit/6b8984dfc8fe0882c21b723cc96f31fb72b62e38"}, {"sha": "3d58543d49266a7ec3eb5f5f2ffaf902fce17c53", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d58543d49266a7ec3eb5f5f2ffaf902fce17c53", "html_url": "https://github.com/rust-lang/rust/commit/3d58543d49266a7ec3eb5f5f2ffaf902fce17c53"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "cb43d5bee78ca12883234ded3df912cedfdb2a22", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46d629a1d7e2fea805499ab11b9797340dc8e696/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d629a1d7e2fea805499ab11b9797340dc8e696/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=46d629a1d7e2fea805499ab11b9797340dc8e696", "patch": "@@ -124,6 +124,7 @@\n #![feature(allocator_internals)]\n #![feature(on_unimplemented)]\n #![feature(exact_chunks)]\n+#![feature(pointer_methods)]\n \n #![cfg_attr(not(test), feature(fused, fn_traits, placement_new_protocol, swap_with_slice, i128))]\n #![cfg_attr(test, feature(test, box_heap))]"}, {"sha": "64e815b1fbaa5d92b14703e3699c6f087513e3e0", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/46d629a1d7e2fea805499ab11b9797340dc8e696/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d629a1d7e2fea805499ab11b9797340dc8e696/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=46d629a1d7e2fea805499ab11b9797340dc8e696", "patch": "@@ -43,6 +43,7 @@ use core::str as core_str;\n use core::str::pattern::Pattern;\n use core::str::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n use core::mem;\n+use core::ptr;\n use core::iter::FusedIterator;\n use std_unicode::str::{UnicodeStr, Utf16Encoder};\n \n@@ -2066,9 +2067,59 @@ impl str {\n     /// ```\n     #[stable(feature = \"repeat_str\", since = \"1.16.0\")]\n     pub fn repeat(&self, n: usize) -> String {\n-        let mut s = String::with_capacity(self.len() * n);\n-        s.extend((0..n).map(|_| self));\n-        s\n+        if n == 0 {\n+            return String::new();\n+        }\n+\n+        // If `n` is larger than zero, it can be split as\n+        // `n = 2^expn + rem (2^expn > rem, expn >= 0, rem >= 0)`.\n+        // `2^expn` is the number represented by the leftmost '1' bit of `n`,\n+        // and `rem` is the remaining part of `n`.\n+\n+        // Using `Vec` to access `set_len()`.\n+        let mut buf = Vec::with_capacity(self.len() * n);\n+\n+        // `2^expn` repetition is done by doubling `buf` `expn`-times.\n+        buf.extend(self.as_bytes());\n+        {\n+            let mut m = n >> 1;\n+            // If `m > 0`, there are remaining bits up to the leftmost '1'.\n+            while m > 0 {\n+                // `buf.extend(buf)`:\n+                unsafe {\n+                    ptr::copy_nonoverlapping(\n+                        buf.as_ptr(),\n+                        (buf.as_mut_ptr() as *mut u8).add(buf.len()),\n+                        buf.len(),\n+                    );\n+                    // `buf` has capacity of `self.len() * n`.\n+                    let buf_len = buf.len();\n+                    buf.set_len(buf_len * 2);\n+                }\n+\n+                m >>= 1;\n+            }\n+        }\n+\n+        // `rem` (`= n - 2^expn`) repetition is done by copying\n+        // first `rem` repetitions from `buf` itself.\n+        let rem_len = self.len() * n - buf.len(); // `self.len() * rem`\n+        if rem_len > 0 {\n+            // `buf.extend(buf[0 .. rem_len])`:\n+            unsafe {\n+                // This is non-overlapping since `2^expn > rem`.\n+                ptr::copy_nonoverlapping(\n+                    buf.as_ptr(),\n+                    (buf.as_mut_ptr() as *mut u8).add(buf.len()),\n+                    rem_len,\n+                );\n+                // `buf.len() + rem_len` equals to `buf.capacity()` (`= self.len() * n`).\n+                let buf_cap = buf.capacity();\n+                buf.set_len(buf_cap);\n+            }\n+        }\n+\n+        unsafe { String::from_utf8_unchecked(buf) }\n     }\n \n     /// Checks if all characters in this string are within the ASCII range."}]}