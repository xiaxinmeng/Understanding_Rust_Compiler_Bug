{"sha": "541170420bb6f9a5c0e8d6f56865567fd8ae0f93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MTE3MDQyMGJiNmY5YTVjMGU4ZDZmNTY4NjU1NjdmZDhhZTBmOTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-01T17:21:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-01T17:21:11Z"}, "message": "Add an integration test", "tree": {"sha": "a58366d1c9412d3192fc636c7912dcb8514baab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a58366d1c9412d3192fc636c7912dcb8514baab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/541170420bb6f9a5c0e8d6f56865567fd8ae0f93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/541170420bb6f9a5c0e8d6f56865567fd8ae0f93", "html_url": "https://github.com/rust-lang/rust/commit/541170420bb6f9a5c0e8d6f56865567fd8ae0f93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8515fecd7a42870f2979c7900c94b59d935901c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8515fecd7a42870f2979c7900c94b59d935901c", "html_url": "https://github.com/rust-lang/rust/commit/e8515fecd7a42870f2979c7900c94b59d935901c"}], "stats": {"total": 282, "additions": 266, "deletions": 16}, "files": [{"sha": "0dc24ffc1fd742bf582e001aa41e3aee24a0768e", "filename": "crates/gen_lsp_server/src/lib.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs?ref=541170420bb6f9a5c0e8d6f56865567fd8ae0f93", "patch": "@@ -15,7 +15,7 @@ mod stdio;\n use crossbeam_channel::{Sender, Receiver};\n use languageserver_types::{\n     ServerCapabilities, InitializeResult,\n-    request::{Initialize},\n+    request::{Initialize, Shutdown},\n     notification::{Initialized, Exit},\n };\n \n@@ -48,6 +48,17 @@ pub fn run_server(\n     Ok(())\n }\n \n+pub fn handle_shutdown(req: RawRequest, sender: &Sender<RawMessage>) -> Option<RawRequest> {\n+    match req.cast::<Shutdown>() {\n+        Ok((id, ())) => {\n+            let resp = RawResponse::ok::<Shutdown>(id, ());\n+            sender.send(RawMessage::Response(resp));\n+            None\n+        }\n+        Err(req) => Some(req),\n+    }\n+}\n+\n fn initialize(\n     receiver: &mut Receiver<RawMessage>,\n     sender: &mut Sender<RawMessage>,\n@@ -61,7 +72,7 @@ fn initialize(\n         msg =>\n             bail!(\"expected initialize request, got {:?}\", msg),\n     };\n-    let resp = RawResponse::ok(id, InitializeResult { capabilities: caps });\n+    let resp = RawResponse::ok::<Initialize>(id, InitializeResult { capabilities: caps });\n     sender.send(RawMessage::Response(resp));\n     match receiver.recv() {\n         Some(RawMessage::Notification(n)) => {"}, {"sha": "d2ce20a11453f7ddab9260e3fe721f6c2cbc699e", "filename": "crates/gen_lsp_server/src/msg.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs?ref=541170420bb6f9a5c0e8d6f56865567fd8ae0f93", "patch": "@@ -87,6 +87,17 @@ impl RawMessage {\n }\n \n impl RawRequest {\n+    pub fn new<R>(id: u64, params: R::Params) -> RawRequest\n+    where\n+        R: Request,\n+        R::Params: Serialize,\n+    {\n+        RawRequest {\n+            id: id,\n+            method: R::METHOD.to_string(),\n+            params: to_value(&params).unwrap(),\n+        }\n+    }\n     pub fn cast<R>(self) -> ::std::result::Result<(u64, R::Params), RawRequest>\n     where\n         R: Request,\n@@ -102,7 +113,10 @@ impl RawRequest {\n }\n \n impl RawResponse {\n-    pub fn ok(id: u64, result: impl Serialize) -> RawResponse {\n+    pub fn ok<R>(id: u64, result: R::Result) -> RawResponse\n+    where R: Request,\n+          R::Result: Serialize,\n+    {\n         RawResponse {\n             id,\n             result: Some(to_value(&result).unwrap()),"}, {"sha": "2a9374e984012cba26956229ba0e1ec971d994cc", "filename": "crates/server/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fserver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fserver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2FCargo.toml?ref=541170420bb6f9a5c0e8d6f56865567fd8ae0f93", "patch": "@@ -24,3 +24,6 @@ libsyntax2 = { path = \"../libsyntax2\" }\n libeditor = { path = \"../libeditor\" }\n libanalysis = { path = \"../libanalysis\" }\n gen_lsp_server = { path = \"../gen_lsp_server\" }\n+\n+[dev-dependencies]\n+tempdir = \"0.3.7\""}, {"sha": "bfa4bc41e89721ca6bd696f1a8aa7c9e8c2a7c0b", "filename": "crates/server/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fserver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fserver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Flib.rs?ref=541170420bb6f9a5c0e8d6f56865567fd8ae0f93", "patch": "@@ -21,7 +21,7 @@ extern crate im;\n extern crate relative_path;\n \n mod caps;\n-mod req;\n+pub mod req;\n mod conv;\n mod main_loop;\n mod vfs;"}, {"sha": "ff267fcade43a0c7a9d63d95ec6cafc6019460e5", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=541170420bb6f9a5c0e8d6f56865567fd8ae0f93", "patch": "@@ -11,7 +11,10 @@ use serde::{Serialize, de::DeserializeOwned};\n use crossbeam_channel::{bounded, Sender, Receiver};\n use languageserver_types::{NumberOrString};\n use libanalysis::{FileId, JobHandle, JobToken};\n-use gen_lsp_server::{RawRequest, RawNotification, RawMessage, RawResponse, ErrorCode};\n+use gen_lsp_server::{\n+    RawRequest, RawNotification, RawMessage, RawResponse, ErrorCode,\n+    handle_shutdown,\n+};\n \n use {\n     req,\n@@ -21,6 +24,7 @@ use {\n     main_loop::subscriptions::{Subscriptions},\n };\n \n+#[derive(Debug)]\n enum Task {\n     Respond(RawResponse),\n     Notify(RawNotification),\n@@ -40,7 +44,7 @@ pub fn main_loop(\n \n     let mut pending_requests = HashMap::new();\n     let mut subs = Subscriptions::new();\n-    main_loop_inner(\n+    let res = main_loop_inner(\n         &pool,\n         msg_receriver,\n         msg_sender,\n@@ -50,17 +54,19 @@ pub fn main_loop(\n         &mut state,\n         &mut pending_requests,\n         &mut subs,\n-    )?;\n+    );\n \n-    info!(\"waiting for background jobs to finish...\");\n+    info!(\"waiting for tasks to finish...\");\n     task_receiver.for_each(|task| on_task(task, msg_sender, &mut pending_requests));\n+    info!(\"...tasks have finished\");\n+    info!(\"joining threadpool...\");\n     pool.join();\n-    info!(\"...background jobs have finished\");\n+    info!(\"...threadpool has finished\");\n \n     info!(\"waiting for file watcher to finish...\");\n     watcher.stop()?;\n     info!(\"...file watcher has finished\");\n-    Ok(())\n+    res\n }\n \n fn main_loop_inner(\n@@ -73,15 +79,17 @@ fn main_loop_inner(\n     state: &mut ServerWorldState,\n     pending_requests: &mut HashMap<u64, JobHandle>,\n     subs: &mut Subscriptions,\n-) -> Result<u64> {\n+) -> Result<()> {\n     let mut fs_receiver = Some(fs_receiver);\n     loop {\n+        #[derive(Debug)]\n         enum Event {\n             Msg(RawMessage),\n             Task(Task),\n             Fs(Vec<FileEvent>),\n             FsWatcherDead,\n         }\n+        trace!(\"selecting\");\n         let event = select! {\n             recv(msg_receiver, msg) => match msg {\n                 Some(msg) => Event::Msg(msg),\n@@ -93,6 +101,7 @@ fn main_loop_inner(\n                 None => Event::FsWatcherDead,\n             }\n         };\n+        trace!(\"selected {:?}\", event);\n         let mut state_changed = false;\n         match event {\n             Event::FsWatcherDead => fs_receiver = None,\n@@ -105,9 +114,9 @@ fn main_loop_inner(\n             Event::Msg(msg) => {\n                 match msg {\n                     RawMessage::Request(req) => {\n-                        let req = match req.cast::<req::Shutdown>() {\n-                            Ok((id, _params)) => return Ok(id),\n-                            Err(req) => req,\n+                        let req = match handle_shutdown(req, msg_sender) {\n+                            Some(req) => req,\n+                            None => return Ok(()),\n                         };\n                         match on_request(state, pending_requests, pool, &task_sender, req)? {\n                             None => (),\n@@ -290,7 +299,7 @@ impl<'a> PoolDispatcher<'a> {\n                 let sender = self.sender.clone();\n                 self.pool.execute(move || {\n                     let resp = match f(world, params, token) {\n-                        Ok(resp) => RawResponse::ok(id, resp),\n+                        Ok(resp) => RawResponse::ok::<R>(id, resp),\n                         Err(e) => RawResponse::err(id, ErrorCode::InternalError as i32, e.to_string()),\n                     };\n                     let task = Task::Respond(resp);"}, {"sha": "893cbde816d6f2e7edf6ade2523f1872930ba50a", "filename": "crates/server/src/req.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Freq.rs?ref=541170420bb6f9a5c0e8d6f56865567fd8ae0f93", "patch": "@@ -127,7 +127,7 @@ impl Request for Runnables {\n     const METHOD: &'static str = \"m/runnables\";\n }\n \n-#[derive(Deserialize, Debug)]\n+#[derive(Serialize, Deserialize, Debug)]\n #[serde(rename_all = \"camelCase\")]\n pub struct RunnablesParams {\n     pub text_document: TextDocumentIdentifier,"}, {"sha": "2e4319cdb74ebadabdd0c91c8488fd0068a9c188", "filename": "crates/server/src/vfs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fserver%2Fsrc%2Fvfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fserver%2Fsrc%2Fvfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fvfs.rs?ref=541170420bb6f9a5c0e8d6f56865567fd8ae0f93", "patch": "@@ -11,11 +11,13 @@ use walkdir::WalkDir;\n use Result;\n \n \n+#[derive(Debug)]\n pub struct FileEvent {\n     pub path: PathBuf,\n     pub kind: FileEventKind,\n }\n \n+#[derive(Debug)]\n pub enum FileEventKind {\n     Add(String),\n     #[allow(unused)]"}, {"sha": "94c8243b0698cb4f9dd801d9c0f58702b83ee515", "filename": "crates/server/tests/heavy_tests/main.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fserver%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fserver%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Ftests%2Fheavy_tests%2Fmain.rs?ref=541170420bb6f9a5c0e8d6f56865567fd8ae0f93", "patch": "@@ -0,0 +1,42 @@\n+extern crate tempdir;\n+extern crate crossbeam_channel;\n+extern crate languageserver_types;\n+extern crate serde;\n+extern crate serde_json;\n+extern crate gen_lsp_server;\n+extern crate flexi_logger;\n+extern crate m;\n+\n+mod support;\n+\n+use m::req::{Runnables, RunnablesParams};\n+\n+use support::project;\n+\n+#[test]\n+fn test_runnables() {\n+    let server = project(r\"\n+//- lib.rs\n+#[test]\n+fn foo() {\n+}\n+\");\n+    server.request::<Runnables>(\n+        RunnablesParams {\n+            text_document: server.doc_id(\"lib.rs\"),\n+            position: None,\n+        },\n+        r#\"[\n+          {\n+            \"args\": [ \"test\", \"--\", \"foo\", \"--nocapture\" ],\n+            \"bin\": \"cargo\",\n+            \"env\": { \"RUST_BACKTRACE\": \"short\" },\n+            \"label\": \"test foo\",\n+            \"range\": {\n+              \"end\": { \"character\": 1, \"line\": 2 },\n+              \"start\": { \"character\": 0, \"line\": 0 }\n+            }\n+          }\n+        ]\"#\n+    );\n+}"}, {"sha": "113ef4c542fcfd15aea61647ef7a91e86f5a4e8d", "filename": "crates/server/tests/heavy_tests/support.rs", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541170420bb6f9a5c0e8d6f56865567fd8ae0f93/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=541170420bb6f9a5c0e8d6f56865567fd8ae0f93", "patch": "@@ -0,0 +1,169 @@\n+use std::{\n+    fs,\n+    thread,\n+    cell::Cell,\n+    path::PathBuf,\n+};\n+\n+use tempdir::TempDir;\n+use crossbeam_channel::{bounded, Sender, Receiver};\n+use flexi_logger::Logger;\n+use languageserver_types::{\n+    Url,\n+    TextDocumentIdentifier,\n+    request::{Request, Shutdown},\n+    notification::DidOpenTextDocument,\n+    DidOpenTextDocumentParams,\n+    TextDocumentItem,\n+};\n+use serde::Serialize;\n+use serde_json::{Value, from_str, to_string_pretty};\n+use gen_lsp_server::{RawMessage, RawRequest, RawNotification};\n+\n+use m::{Result, main_loop};\n+\n+pub fn project(fixture: &str) -> Server {\n+    Logger::with_env_or_str(\"\").start().unwrap();\n+\n+    let tmp_dir = TempDir::new(\"test-project\")\n+        .unwrap();\n+    let mut buf = String::new();\n+    let mut file_name = None;\n+    let mut paths = vec![];\n+    macro_rules! flush {\n+        () => {\n+            if let Some(file_name) = file_name {\n+                let path = tmp_dir.path().join(file_name);\n+                fs::write(path.as_path(), buf.as_bytes()).unwrap();\n+                paths.push((path, buf.clone()));\n+            }\n+        }\n+    };\n+    for line in fixture.lines() {\n+        if line.starts_with(\"//-\") {\n+            flush!();\n+            buf.clear();\n+            file_name = Some(line[\"//-\".len()..].trim());\n+            continue;\n+        }\n+        buf.push_str(line);\n+        buf.push('\\n');\n+    }\n+    flush!();\n+\n+    Server::new(tmp_dir, paths)\n+}\n+\n+pub struct Server {\n+    req_id: Cell<u64>,\n+    dir: TempDir,\n+    sender: Option<Sender<RawMessage>>,\n+    receiver: Receiver<RawMessage>,\n+    server: Option<thread::JoinHandle<Result<()>>>,\n+}\n+\n+impl Server {\n+    fn new(dir: TempDir, files: Vec<(PathBuf, String)>) -> Server {\n+        let path = dir.path().to_path_buf();\n+        let (client_sender, mut server_receiver) = bounded(1);\n+        let (mut server_sender, client_receiver) = bounded(1);\n+        let server = thread::spawn(move || main_loop(path, &mut server_receiver, &mut server_sender));\n+        let res = Server {\n+            req_id: Cell::new(1),\n+            dir,\n+            sender: Some(client_sender),\n+            receiver: client_receiver,\n+            server: Some(server),\n+        };\n+        for (path, text) in files {\n+            res.send_notification(RawNotification::new::<DidOpenTextDocument>(\n+                DidOpenTextDocumentParams {\n+                    text_document: TextDocumentItem {\n+                        uri: Url::from_file_path(path).unwrap(),\n+                        language_id: \"rust\".to_string(),\n+                        version: 0,\n+                        text,\n+                    }\n+                }\n+            ))\n+        }\n+        res\n+    }\n+\n+    pub fn doc_id(&self, rel_path: &str) -> TextDocumentIdentifier {\n+        let path = self.dir.path().join(rel_path);\n+        TextDocumentIdentifier {\n+            uri: Url::from_file_path(path).unwrap(),\n+        }\n+    }\n+\n+    pub fn request<R>(\n+        &self,\n+        params: R::Params,\n+        expected_resp: &str,\n+    )\n+    where\n+        R: Request,\n+        R::Params: Serialize,\n+    {\n+        let id = self.req_id.get();\n+        self.req_id.set(id + 1);\n+        let expected_resp: Value = from_str(expected_resp).unwrap();\n+        let actual = self.send_request::<R>(id, params);\n+        assert_eq!(\n+            expected_resp, actual,\n+            \"Expected:\\n{}\\n\\\n+             Actual:\\n{}\\n\",\n+            to_string_pretty(&expected_resp).unwrap(),\n+            to_string_pretty(&actual).unwrap(),\n+        );\n+    }\n+\n+    fn send_request<R>(&self, id: u64, params: R::Params) -> Value\n+    where\n+        R: Request,\n+        R::Params: Serialize,\n+    {\n+        let r = RawRequest::new::<R>(id, params);\n+        self.sender.as_ref()\n+            .unwrap()\n+            .send(RawMessage::Request(r));\n+\n+        while let Some(msg) = self.receiver.recv() {\n+            match msg {\n+                RawMessage::Request(req) => panic!(\"unexpected request: {:?}\", req),\n+                RawMessage::Notification(_) => (),\n+                RawMessage::Response(res) => {\n+                    assert_eq!(res.id, id);\n+                    if let Some(err) = res.error {\n+                        panic!(\"error response: {:#?}\", err);\n+                    }\n+                    return res.result.unwrap();\n+                }\n+            }\n+        }\n+        panic!(\"no response\");\n+    }\n+    fn send_notification(&self, not: RawNotification) {\n+\n+        self.sender.as_ref()\n+            .unwrap()\n+            .send(RawMessage::Notification(not));\n+    }\n+}\n+\n+impl Drop for Server {\n+    fn drop(&mut self) {\n+        {\n+            self.send_request::<Shutdown>(666, ());\n+            drop(self.sender.take().unwrap());\n+            while let Some(msg) = self.receiver.recv() {\n+                drop(msg);\n+            }\n+        }\n+        eprintln!(\"joining server\");\n+        self.server.take()\n+            .unwrap()\n+            .join().unwrap().unwrap();\n+    }\n+}"}]}