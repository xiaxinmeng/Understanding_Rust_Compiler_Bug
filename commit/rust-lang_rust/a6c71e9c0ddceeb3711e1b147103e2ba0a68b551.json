{"sha": "a6c71e9c0ddceeb3711e1b147103e2ba0a68b551", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YzcxZTljMGRkY2VlYjM3MTFlMWIxNDcxMDNlMmJhMGE2OGI1NTE=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-04T19:56:05Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-04T19:59:21Z"}, "message": "Fix lines that exceed max width manually", "tree": {"sha": "dfc988a01f2c78f9ded59668e66c050eb333b594", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfc988a01f2c78f9ded59668e66c050eb333b594"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551", "html_url": "https://github.com/rust-lang/rust/commit/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a06d312fd4d900946f8dba8bae5baaf877e5103", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a06d312fd4d900946f8dba8bae5baaf877e5103", "html_url": "https://github.com/rust-lang/rust/commit/7a06d312fd4d900946f8dba8bae5baaf877e5103"}], "stats": {"total": 77, "additions": 55, "deletions": 22}, "files": [{"sha": "790c2884273e9a71f2d07b3c7d6904231c33c27c", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=a6c71e9c0ddceeb3711e1b147103e2ba0a68b551", "patch": "@@ -143,7 +143,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                         if_chain! {\n                                             if parent_impl != ast::CRATE_NODE_ID;\n                                             if let hir::map::Node::NodeItem(item) = cx.tcx.hir.get(parent_impl);\n-                                            if let hir::Item_::ItemImpl(_, _, _, _, Some(ref trait_ref), _, _) = item.node;\n+                                            if let hir::Item_::ItemImpl(_, _, _, _, Some(ref trait_ref), _, _) =\n+                                                item.node;\n                                             if trait_ref.path.def.def_id() == trait_id;\n                                             then { return; }\n                                         }"}, {"sha": "90eb92b8ca453bc070d23392a8353bc7eee455e5", "filename": "clippy_lints/src/invalid_ref.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551/clippy_lints%2Fsrc%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551/clippy_lints%2Fsrc%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_ref.rs?ref=a6c71e9c0ddceeb3711e1b147103e2ba0a68b551", "patch": "@@ -22,8 +22,8 @@ declare_lint! {\n \n const ZERO_REF_SUMMARY: &str = \"reference to zeroed memory\";\n const UNINIT_REF_SUMMARY: &str = \"reference to uninitialized memory\";\n-const HELP: &str =\n-    \"Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\";\n+const HELP: &str = \"Creation of a null reference is undefined behavior; \\\n+                    see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\";\n \n pub struct InvalidRef;\n \n@@ -42,9 +42,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidRef {\n             if let ty::TyRef(..) = cx.tables.expr_ty(expr).sty;\n             if let Some(def_id) = opt_def_id(cx.tables.qpath_def(qpath, path.hir_id));\n             then {\n-                let msg = if match_def_path(cx.tcx, def_id, &paths::MEM_ZEROED) | match_def_path(cx.tcx, def_id, &paths::INIT) {\n+                let msg = if match_def_path(cx.tcx, def_id, &paths::MEM_ZEROED) |\n+                             match_def_path(cx.tcx, def_id, &paths::INIT)\n+                {\n                     ZERO_REF_SUMMARY\n-                } else if match_def_path(cx.tcx, def_id, &paths::MEM_UNINIT) | match_def_path(cx.tcx, def_id, &paths::UNINIT) {\n+                } else if match_def_path(cx.tcx, def_id, &paths::MEM_UNINIT) |\n+                          match_def_path(cx.tcx, def_id, &paths::UNINIT)\n+                {\n                     UNINIT_REF_SUMMARY\n                 } else {\n                     return;"}, {"sha": "251c4ac3a1138ac2389094366ba0264e2d588285", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=a6c71e9c0ddceeb3711e1b147103e2ba0a68b551", "patch": "@@ -782,7 +782,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 for &(ref conv, self_kinds) in &CONVENTIONS {\n                     if_chain! {\n                         if conv.check(&name.as_str());\n-                        if !self_kinds.iter().any(|k| k.matches(first_arg_ty, first_arg, self_ty, is_copy, &implitem.generics));\n+                        if !self_kinds\n+                            .iter()\n+                            .any(|k| k.matches(first_arg_ty, first_arg, self_ty, is_copy, &implitem.generics));\n                         then {\n                             let lint = if item.vis == hir::Visibility::Public {\n                                 WRONG_PUB_SELF_CONVENTION\n@@ -1039,12 +1041,15 @@ fn lint_cstring_as_ptr(cx: &LateContext, expr: &hir::Expr, new: &hir::Expr, unwr\n         if let Def::Method(did) = cx.tables.qpath_def(path, fun.hir_id);\n         if match_def_path(cx.tcx, did, &paths::CSTRING_NEW);\n         then {\n-            span_lint_and_then(cx, TEMPORARY_CSTRING_AS_PTR, expr.span,\n-                               \"you are getting the inner pointer of a temporary `CString`\",\n-                               |db| {\n-                                   db.note(\"that pointer will be invalid outside this expression\");\n-                                   db.span_help(unwrap.span, \"assign the `CString` to a variable to extend its lifetime\");\n-                               });\n+            span_lint_and_then(\n+                cx,\n+                TEMPORARY_CSTRING_AS_PTR,\n+                expr.span,\n+                \"you are getting the inner pointer of a temporary `CString`\",\n+                |db| {\n+                    db.note(\"that pointer will be invalid outside this expression\");\n+                    db.span_help(unwrap.span, \"assign the `CString` to a variable to extend its lifetime\");\n+                });\n         }\n     }\n }"}, {"sha": "d56833eb457468c2991b0fed98c69c5e70f90aa2", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=a6c71e9c0ddceeb3711e1b147103e2ba0a68b551", "patch": "@@ -142,7 +142,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                 span,\n                                 &format!(\"you should consider adding a `Default` implementation for `{}`\", self_ty),\n                                 |db| {\n-                                    db.suggest_prepend_item(cx, span, \"try this\", &create_new_without_default_suggest_msg(self_ty));\n+                                    db.suggest_prepend_item(\n+                                        cx,\n+                                        span,\n+                                        \"try this\",\n+                                        &create_new_without_default_suggest_msg(self_ty),\n+                                    );\n                                 },\n                             );\n                         }"}, {"sha": "25fc666d3e1e30b947f735b848278c95404f7483", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=a6c71e9c0ddceeb3711e1b147103e2ba0a68b551", "patch": "@@ -156,7 +156,11 @@ fn check_suspicious_swap(cx: &LateContext, block: &Block) {\n                 let lhs0 = Sugg::hir_opt(cx, lhs0);\n                 let rhs0 = Sugg::hir_opt(cx, rhs0);\n                 let (what, lhs, rhs) = if let (Some(first), Some(second)) = (lhs0, rhs0) {\n-                    (format!(\" `{}` and `{}`\", first, second), first.mut_addr().to_string(), second.mut_addr().to_string())\n+                    (\n+                        format!(\" `{}` and `{}`\", first, second),\n+                        first.mut_addr().to_string(),\n+                        second.mut_addr().to_string(),\n+                    )\n                 } else {\n                     (\"\".to_owned(), \"\".to_owned(), \"\".to_owned())\n                 };"}, {"sha": "8d5dd3d19b4dc266c3f10188470a6362d3d501ae", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=a6c71e9c0ddceeb3711e1b147103e2ba0a68b551", "patch": "@@ -166,11 +166,13 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n                         if let Some(did) = opt_def_id(cx.tables.qpath_def(qpath, cx.tcx.hir.node_to_hir_id(vec.id)));\n                         if match_def_path(cx.tcx, did, &paths::VEC);\n                         then {\n-                            span_help_and_lint(cx,\n-                                               BOX_VEC,\n-                                               ast_ty.span,\n-                                               \"you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\",\n-                                               \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\");\n+                            span_help_and_lint(\n+                                cx,\n+                                BOX_VEC,\n+                                ast_ty.span,\n+                                \"you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\",\n+                                \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\",\n+                            );\n                             return; // don't recurse into the type\n                         }\n                     }"}, {"sha": "e1c226466f9522ff5d6eed7fa86c2e5fc160d1fd", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=a6c71e9c0ddceeb3711e1b147103e2ba0a68b551", "patch": "@@ -52,7 +52,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if is_copy(cx, vec_type(cx.tables.expr_ty_adjusted(arg)));\n             then {\n                 // report the error around the `vec!` not inside `<std macros>:`\n-                let span = arg.span.ctxt().outer().expn_info().map(|info| info.call_site).expect(\"unable to get call_site\");\n+                let span = arg.span\n+                    .ctxt()\n+                    .outer()\n+                    .expn_info()\n+                    .map(|info| info.call_site)\n+                    .expect(\"unable to get call_site\");\n                 check_vec_macro(cx, &vec_args, span);\n             }\n         }"}, {"sha": "efe23bcdc47fbb37f2ee498c627ae9edf9528d2d", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c71e9c0ddceeb3711e1b147103e2ba0a68b551/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=a6c71e9c0ddceeb3711e1b147103e2ba0a68b551", "patch": "@@ -49,9 +49,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     | (_, FloatWidth::F64) => \"f64\",\n                     _ => \"f32\"\n                 };\n-                span_help_and_lint(cx, ZERO_DIVIDED_BY_ZERO, expr.span,\n+                span_help_and_lint(\n+                    cx,\n+                    ZERO_DIVIDED_BY_ZERO,\n+                    expr.span,\n                     \"constant division of 0.0 with 0.0 will always result in NaN\",\n-                    &format!(\"Consider using `std::{}::NAN` if you would like a constant representing NaN\", float_type));\n+                    &format!(\n+                        \"Consider using `std::{}::NAN` if you would like a constant representing NaN\",\n+                        float_type,\n+                    ),\n+                );\n             }\n         }\n     }"}]}