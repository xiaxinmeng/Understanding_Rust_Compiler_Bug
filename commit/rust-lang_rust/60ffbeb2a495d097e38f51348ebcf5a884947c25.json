{"sha": "60ffbeb2a495d097e38f51348ebcf5a884947c25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZmZiZWIyYTQ5NWQwOTdlMzhmNTEzNDhlYmNmNWE4ODQ5NDdjMjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-01T18:01:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-01T18:01:25Z"}, "message": "auto merge of #11973 : dotdash/rust/u64_to_bytes, r=huonw\n\nLLVM fails to properly optimize the shifts used to convert the source\r\nvalue to the right endianess. The resulting assembly copies the value\r\nto the stack one byte at a time even when there's no conversion required\r\n(e.g. u64_to_le_bytes on a little endian machine).\r\n\r\nInstead of doing the conversion ourselves using shifts, we can use the\r\nexisting intrinsics to perform the endianess conversion and then\r\ntransmute the value to get a fixed vector of its bytes.\r\n\r\nBefore:\r\n````\r\ntest be_i8  ... bench:     21442 ns/iter (+/- 70)\r\ntest be_i16 ... bench:     21447 ns/iter (+/- 45)\r\ntest be_i32 ... bench:     23832 ns/iter (+/- 63)\r\ntest be_i64 ... bench:     26887 ns/iter (+/- 267)\r\n\r\ntest le_i8  ... bench:     21442 ns/iter (+/- 56)\r\ntest le_i16 ... bench:     21448 ns/iter (+/- 36)\r\ntest le_i32 ... bench:     23825 ns/iter (+/- 153)\r\ntest le_i64 ... bench:     26271 ns/iter (+/- 138)\r\n````\r\nAfter:\r\n````\r\ntest be_i8  ... bench:     21438 ns/iter (+/- 10)\r\ntest be_i16 ... bench:     21441 ns/iter (+/- 15)\r\ntest be_i32 ... bench:     19057 ns/iter (+/- 6)\r\ntest be_i64 ... bench:     21439 ns/iter (+/- 34)\r\n\r\ntest le_i8  ... bench:     21438 ns/iter (+/- 19)\r\ntest le_i16 ... bench:     21439 ns/iter (+/- 8)\r\ntest le_i32 ... bench:     21439 ns/iter (+/- 19)\r\ntest le_i64 ... bench:     21438 ns/iter (+/- 22)\r\n````", "tree": {"sha": "d6049b7fe28567da6922a28d0b38d87c7d7467e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6049b7fe28567da6922a28d0b38d87c7d7467e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60ffbeb2a495d097e38f51348ebcf5a884947c25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60ffbeb2a495d097e38f51348ebcf5a884947c25", "html_url": "https://github.com/rust-lang/rust/commit/60ffbeb2a495d097e38f51348ebcf5a884947c25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60ffbeb2a495d097e38f51348ebcf5a884947c25/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df044ea4ac8fb7f99622948f4f8c40fbd24eda13", "url": "https://api.github.com/repos/rust-lang/rust/commits/df044ea4ac8fb7f99622948f4f8c40fbd24eda13", "html_url": "https://github.com/rust-lang/rust/commit/df044ea4ac8fb7f99622948f4f8c40fbd24eda13"}, {"sha": "5afc63a2aef113d49944b6ee5f7a743198a6aff1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5afc63a2aef113d49944b6ee5f7a743198a6aff1", "html_url": "https://github.com/rust-lang/rust/commit/5afc63a2aef113d49944b6ee5f7a743198a6aff1"}], "stats": {"total": 42, "additions": 14, "deletions": 28}, "files": [{"sha": "548dc3efe92f0e80d788d608e8722c28642f7c16", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/60ffbeb2a495d097e38f51348ebcf5a884947c25/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ffbeb2a495d097e38f51348ebcf5a884947c25/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=60ffbeb2a495d097e38f51348ebcf5a884947c25", "patch": "@@ -51,23 +51,16 @@ impl<'r, R: Reader> Iterator<u8> for Bytes<'r, R> {\n }\n \n pub fn u64_to_le_bytes<T>(n: u64, size: uint, f: |v: &[u8]| -> T) -> T {\n+    use unstable::intrinsics::{to_le16, to_le32, to_le64};\n+    use cast::transmute;\n+\n+    // LLVM fails to properly optimize this when using shifts instead of the to_le* intrinsics\n     assert!(size <= 8u);\n     match size {\n       1u => f(&[n as u8]),\n-      2u => f(&[n as u8,\n-              (n >> 8) as u8]),\n-      4u => f(&[n as u8,\n-              (n >> 8) as u8,\n-              (n >> 16) as u8,\n-              (n >> 24) as u8]),\n-      8u => f(&[n as u8,\n-              (n >> 8) as u8,\n-              (n >> 16) as u8,\n-              (n >> 24) as u8,\n-              (n >> 32) as u8,\n-              (n >> 40) as u8,\n-              (n >> 48) as u8,\n-              (n >> 56) as u8]),\n+      2u => f(unsafe { transmute::<i16, [u8, ..2]>(to_le16(n as i16)) }),\n+      4u => f(unsafe { transmute::<i32, [u8, ..4]>(to_le32(n as i32)) }),\n+      8u => f(unsafe { transmute::<i64, [u8, ..8]>(to_le64(n as i64)) }),\n       _ => {\n \n         let mut bytes: ~[u8] = ~[];\n@@ -84,23 +77,16 @@ pub fn u64_to_le_bytes<T>(n: u64, size: uint, f: |v: &[u8]| -> T) -> T {\n }\n \n pub fn u64_to_be_bytes<T>(n: u64, size: uint, f: |v: &[u8]| -> T) -> T {\n+    use unstable::intrinsics::{to_be16, to_be32, to_be64};\n+    use cast::transmute;\n+\n+    // LLVM fails to properly optimize this when using shifts instead of the to_be* intrinsics\n     assert!(size <= 8u);\n     match size {\n       1u => f(&[n as u8]),\n-      2u => f(&[(n >> 8) as u8,\n-              n as u8]),\n-      4u => f(&[(n >> 24) as u8,\n-              (n >> 16) as u8,\n-              (n >> 8) as u8,\n-              n as u8]),\n-      8u => f(&[(n >> 56) as u8,\n-              (n >> 48) as u8,\n-              (n >> 40) as u8,\n-              (n >> 32) as u8,\n-              (n >> 24) as u8,\n-              (n >> 16) as u8,\n-              (n >> 8) as u8,\n-              n as u8]),\n+      2u => f(unsafe { transmute::<i16, [u8, ..2]>(to_be16(n as i16)) }),\n+      4u => f(unsafe { transmute::<i32, [u8, ..4]>(to_be32(n as i32)) }),\n+      8u => f(unsafe { transmute::<i64, [u8, ..8]>(to_be64(n as i64)) }),\n       _ => {\n         let mut bytes: ~[u8] = ~[];\n         let mut i = size;"}]}