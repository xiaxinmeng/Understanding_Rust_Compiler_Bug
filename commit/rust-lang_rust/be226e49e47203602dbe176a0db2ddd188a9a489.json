{"sha": "be226e49e47203602dbe176a0db2ddd188a9a489", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMjI2ZTQ5ZTQ3MjAzNjAyZGJlMTc2YTBkYjJkZGQxODhhOWE0ODk=", "commit": {"author": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2020-10-12T17:04:14Z"}, "committer": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-01-04T16:20:08Z"}, "message": "Stabilize split_inclusive\n\nCloses #72360.\n\nSigned-off-by: Ian Jackson <ijackson@chiark.greenend.org.uk>", "tree": {"sha": "e42989f3b1d1716c7c9e3c6f3071607e467c2c7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e42989f3b1d1716c7c9e3c6f3071607e467c2c7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be226e49e47203602dbe176a0db2ddd188a9a489", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be226e49e47203602dbe176a0db2ddd188a9a489", "html_url": "https://github.com/rust-lang/rust/commit/be226e49e47203602dbe176a0db2ddd188a9a489", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be226e49e47203602dbe176a0db2ddd188a9a489/comments", "author": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56", "html_url": "https://github.com/rust-lang/rust/commit/ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56"}], "stats": {"total": 54, "additions": 22, "deletions": 32}, "files": [{"sha": "0b7eeab4e9679ec9ffe2012e34fcf6bd6d2d0a15", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be226e49e47203602dbe176a0db2ddd188a9a489/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be226e49e47203602dbe176a0db2ddd188a9a489/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=be226e49e47203602dbe176a0db2ddd188a9a489", "patch": "@@ -14,7 +14,6 @@\n #![feature(binary_heap_into_iter_sorted)]\n #![feature(binary_heap_drain_sorted)]\n #![feature(slice_ptr_get)]\n-#![feature(split_inclusive)]\n #![feature(binary_heap_retain)]\n #![feature(inplace_iteration)]\n #![feature(iter_map_while)]"}, {"sha": "53fdc7bc53be6b298eac758283e34f09f9a48d97", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/be226e49e47203602dbe176a0db2ddd188a9a489/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be226e49e47203602dbe176a0db2ddd188a9a489/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=be226e49e47203602dbe176a0db2ddd188a9a489", "patch": "@@ -446,15 +446,13 @@ impl<T, P> FusedIterator for Split<'_, T, P> where P: FnMut(&T) -> bool {}\n /// # Example\n ///\n /// ```\n-/// #![feature(split_inclusive)]\n-///\n /// let slice = [10, 40, 33, 20];\n /// let mut iter = slice.split_inclusive(|num| num % 3 == 0);\n /// ```\n ///\n /// [`split_inclusive`]: ../../std/primitive.slice.html#method.split_inclusive\n /// [slices]: ../../std/primitive.slice.html\n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n pub struct SplitInclusive<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -471,7 +469,7 @@ impl<'a, T: 'a, P: FnMut(&T) -> bool> SplitInclusive<'a, T, P> {\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for SplitInclusive<'_, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -485,7 +483,7 @@ where\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n impl<T, P> Clone for SplitInclusive<'_, T, P>\n where\n     P: Clone + FnMut(&T) -> bool,\n@@ -495,7 +493,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n impl<'a, T, P> Iterator for SplitInclusive<'a, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -524,7 +522,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n impl<'a, T, P> DoubleEndedIterator for SplitInclusive<'a, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -549,7 +547,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n impl<T, P> FusedIterator for SplitInclusive<'_, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over the mutable subslices of the vector which are separated\n@@ -689,15 +687,13 @@ impl<T, P> FusedIterator for SplitMut<'_, T, P> where P: FnMut(&T) -> bool {}\n /// # Example\n ///\n /// ```\n-/// #![feature(split_inclusive)]\n-///\n /// let mut v = [10, 40, 30, 20, 60, 50];\n /// let iter = v.split_inclusive_mut(|num| *num % 3 == 0);\n /// ```\n ///\n /// [`split_inclusive_mut`]: ../../std/primitive.slice.html#method.split_inclusive_mut\n /// [slices]: ../../std/primitive.slice.html\n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n pub struct SplitInclusiveMut<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -714,7 +710,7 @@ impl<'a, T: 'a, P: FnMut(&T) -> bool> SplitInclusiveMut<'a, T, P> {\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for SplitInclusiveMut<'_, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -727,7 +723,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n impl<'a, T, P> Iterator for SplitInclusiveMut<'a, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -767,7 +763,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n impl<'a, T, P> DoubleEndedIterator for SplitInclusiveMut<'a, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -801,7 +797,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n impl<T, P> FusedIterator for SplitInclusiveMut<'_, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over subslices separated by elements that match a predicate"}, {"sha": "c19b323a422cfd64fadf01f719b8c51d4c94c560", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be226e49e47203602dbe176a0db2ddd188a9a489/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be226e49e47203602dbe176a0db2ddd188a9a489/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=be226e49e47203602dbe176a0db2ddd188a9a489", "patch": "@@ -60,7 +60,7 @@ pub use iter::ArrayWindows;\n #[unstable(feature = \"slice_group_by\", issue = \"80552\")]\n pub use iter::{GroupBy, GroupByMut};\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n pub use iter::{SplitInclusive, SplitInclusiveMut};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1549,7 +1549,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(split_inclusive)]\n     /// let slice = [10, 40, 33, 20];\n     /// let mut iter = slice.split_inclusive(|num| num % 3 == 0);\n     ///\n@@ -1563,15 +1562,14 @@ impl<T> [T] {\n     /// That slice will be the last item returned by the iterator.\n     ///\n     /// ```\n-    /// #![feature(split_inclusive)]\n     /// let slice = [3, 10, 40, 33];\n     /// let mut iter = slice.split_inclusive(|num| num % 3 == 0);\n     ///\n     /// assert_eq!(iter.next().unwrap(), &[3]);\n     /// assert_eq!(iter.next().unwrap(), &[10, 40, 33]);\n     /// assert!(iter.next().is_none());\n     /// ```\n-    #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+    #[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n     #[inline]\n     pub fn split_inclusive<F>(&self, pred: F) -> SplitInclusive<'_, T, F>\n     where\n@@ -1587,7 +1585,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(split_inclusive)]\n     /// let mut v = [10, 40, 30, 20, 60, 50];\n     ///\n     /// for group in v.split_inclusive_mut(|num| *num % 3 == 0) {\n@@ -1596,7 +1593,7 @@ impl<T> [T] {\n     /// }\n     /// assert_eq!(v, [10, 40, 1, 20, 1, 1]);\n     /// ```\n-    #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+    #[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n     #[inline]\n     pub fn split_inclusive_mut<F>(&mut self, pred: F) -> SplitInclusiveMut<'_, T, F>\n     where"}, {"sha": "4fc28b162835198af2d0e1a0886ed156b9c7ef31", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be226e49e47203602dbe176a0db2ddd188a9a489/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be226e49e47203602dbe176a0db2ddd188a9a489/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=be226e49e47203602dbe176a0db2ddd188a9a489", "patch": "@@ -1174,7 +1174,7 @@ pub struct SplitAsciiWhitespace<'a> {\n /// See its documentation for more.\n ///\n /// [`split_inclusive`]: str::split_inclusive\n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n pub struct SplitInclusive<'a, P: Pattern<'a>>(pub(super) SplitInternal<'a, P>);\n \n #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n@@ -1239,7 +1239,7 @@ impl<'a> DoubleEndedIterator for SplitAsciiWhitespace<'a> {\n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n impl FusedIterator for SplitAsciiWhitespace<'_> {}\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n impl<'a, P: Pattern<'a>> Iterator for SplitInclusive<'a, P> {\n     type Item = &'a str;\n \n@@ -1249,22 +1249,22 @@ impl<'a, P: Pattern<'a>> Iterator for SplitInclusive<'a, P> {\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n impl<'a, P: Pattern<'a, Searcher: fmt::Debug>> fmt::Debug for SplitInclusive<'a, P> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SplitInclusive\").field(\"0\", &self.0).finish()\n     }\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n impl<'a, P: Pattern<'a, Searcher: Clone>> Clone for SplitInclusive<'a, P> {\n     fn clone(&self) -> Self {\n         SplitInclusive(self.0.clone())\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n impl<'a, P: Pattern<'a, Searcher: ReverseSearcher<'a>>> DoubleEndedIterator\n     for SplitInclusive<'a, P>\n {\n@@ -1274,7 +1274,7 @@ impl<'a, P: Pattern<'a, Searcher: ReverseSearcher<'a>>> DoubleEndedIterator\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n impl<'a, P: Pattern<'a>> FusedIterator for SplitInclusive<'a, P> {}\n \n impl<'a, P: Pattern<'a>> SplitInclusive<'a, P> {"}, {"sha": "e71d5889bd1801a333605b101b572393220d3f07", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be226e49e47203602dbe176a0db2ddd188a9a489/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be226e49e47203602dbe176a0db2ddd188a9a489/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=be226e49e47203602dbe176a0db2ddd188a9a489", "patch": "@@ -65,7 +65,7 @@ pub use iter::{EscapeDebug, EscapeDefault, EscapeUnicode};\n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n pub use iter::SplitAsciiWhitespace;\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n use iter::SplitInclusive;\n \n #[unstable(feature = \"str_internals\", issue = \"none\")]\n@@ -1227,7 +1227,6 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(split_inclusive)]\n     /// let v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n     ///     .split_inclusive('\\n').collect();\n     /// assert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n@@ -1238,12 +1237,11 @@ impl str {\n     /// That substring will be the last item returned by the iterator.\n     ///\n     /// ```\n-    /// #![feature(split_inclusive)]\n     /// let v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n     ///     .split_inclusive('\\n').collect();\n     /// assert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n     /// ```\n-    #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+    #[stable(feature = \"split_inclusive\", since = \"1.49.0\")]\n     #[inline]\n     pub fn split_inclusive<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitInclusive<'a, P> {\n         SplitInclusive(SplitInternal {"}]}