{"sha": "d98c46ce57d562ebcfb01ec814ff8d90d47ff7ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5OGM0NmNlNTdkNTYyZWJjZmIwMWVjODE0ZmY4ZDkwZDQ3ZmY3ZWE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-12T07:35:32Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-24T10:36:31Z"}, "message": "Move undef mask methods from `Memory` to `Allocation`", "tree": {"sha": "2e4ba7e63f3c751c885c61513eace34f8e39d322", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e4ba7e63f3c751c885c61513eace34f8e39d322"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d98c46ce57d562ebcfb01ec814ff8d90d47ff7ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d98c46ce57d562ebcfb01ec814ff8d90d47ff7ea", "html_url": "https://github.com/rust-lang/rust/commit/d98c46ce57d562ebcfb01ec814ff8d90d47ff7ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d98c46ce57d562ebcfb01ec814ff8d90d47ff7ea/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb30ce8acb6617fbe6182a3b5b9078dea4027a90", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb30ce8acb6617fbe6182a3b5b9078dea4027a90", "html_url": "https://github.com/rust-lang/rust/commit/eb30ce8acb6617fbe6182a3b5b9078dea4027a90"}], "stats": {"total": 62, "additions": 33, "deletions": 29}, "files": [{"sha": "ad4bf415b8de044db644c6e07b78f1b6fb17e781", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d98c46ce57d562ebcfb01ec814ff8d90d47ff7ea/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98c46ce57d562ebcfb01ec814ff8d90d47ff7ea/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=d98c46ce57d562ebcfb01ec814ff8d90d47ff7ea", "patch": "@@ -206,6 +206,39 @@ impl<'tcx, Tag, Extra> Allocation<Tag, Extra> {\n     }\n }\n \n+\n+/// Undefined bytes\n+impl<'tcx, Tag, Extra> Allocation<Tag, Extra> {\n+    /// Checks that a range of bytes is defined. If not, returns the `ReadUndefBytes`\n+    /// error which will report the first byte which is undefined.\n+    #[inline]\n+    fn check_defined(&self, ptr: Pointer<M::PointerTag>, size: Size) -> EvalResult<'tcx> {\n+        let alloc = self.get(ptr.alloc_id)?;\n+        alloc.undef_mask.is_range_defined(\n+            ptr.offset,\n+            ptr.offset + size,\n+        ).or_else(|idx| err!(ReadUndefBytes(idx)))\n+    }\n+\n+    pub fn mark_definedness(\n+        &mut self,\n+        ptr: Pointer<M::PointerTag>,\n+        size: Size,\n+        new_state: bool,\n+    ) -> EvalResult<'tcx> {\n+        if size.bytes() == 0 {\n+            return Ok(());\n+        }\n+        let alloc = self.get_mut(ptr.alloc_id)?;\n+        alloc.undef_mask.set_range(\n+            ptr.offset,\n+            ptr.offset + size,\n+            new_state,\n+        );\n+        Ok(())\n+    }\n+}\n+\n pub trait AllocationExtra<Tag>: ::std::fmt::Debug + Default + Clone {\n     /// Hook for performing extra checks on a memory read access.\n     ///"}, {"sha": "d8ae107a22b563bd1cabdafdbea12ef87853f8f0", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d98c46ce57d562ebcfb01ec814ff8d90d47ff7ea/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98c46ce57d562ebcfb01ec814ff8d90d47ff7ea/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=d98c46ce57d562ebcfb01ec814ff8d90d47ff7ea", "patch": "@@ -984,33 +984,4 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n \n         Ok(())\n     }\n-\n-    /// Checks that a range of bytes is defined. If not, returns the `ReadUndefBytes`\n-    /// error which will report the first byte which is undefined.\n-    #[inline]\n-    fn check_defined(&self, ptr: Pointer<M::PointerTag>, size: Size) -> EvalResult<'tcx> {\n-        let alloc = self.get(ptr.alloc_id)?;\n-        alloc.undef_mask.is_range_defined(\n-            ptr.offset,\n-            ptr.offset + size,\n-        ).or_else(|idx| err!(ReadUndefBytes(idx)))\n-    }\n-\n-    pub fn mark_definedness(\n-        &mut self,\n-        ptr: Pointer<M::PointerTag>,\n-        size: Size,\n-        new_state: bool,\n-    ) -> EvalResult<'tcx> {\n-        if size.bytes() == 0 {\n-            return Ok(());\n-        }\n-        let alloc = self.get_mut(ptr.alloc_id)?;\n-        alloc.undef_mask.set_range(\n-            ptr.offset,\n-            ptr.offset + size,\n-            new_state,\n-        );\n-        Ok(())\n-    }\n }"}]}