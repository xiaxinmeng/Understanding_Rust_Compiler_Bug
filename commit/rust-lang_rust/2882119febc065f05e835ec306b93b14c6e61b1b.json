{"sha": "2882119febc065f05e835ec306b93b14c6e61b1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ODIxMTlmZWJjMDY1ZjA1ZTgzNWVjMzA2YjkzYjE0YzZlNjFiMWI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-13T02:02:17Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-13T16:41:34Z"}, "message": "Rollup merge of #53976 - GuillaumeGomez:expect-world, r=steveklabnik\n\nReplace unwrap calls in example by expect\n\nPart of #51668.\n\nr? @steveklabnik", "tree": {"sha": "129b09776f4a42fb21e05f5350b8d38922d40991", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/129b09776f4a42fb21e05f5350b8d38922d40991"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2882119febc065f05e835ec306b93b14c6e61b1b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAluakz8ACgkQ/vbIBR0O\nATyJpg//Rp69tcMCZdftRjfEbH+PeOY6erCDJ2stiJfQAlHsQqCEM6N/lOLJXjCo\nrwix0HR4S6i6q8D266pju5eDyxsEa/LuhSUatjyuWEtBfr9BKRtsgWXm1hRjYpMs\nzNQZLbMPLUxL94kpj+qelXOMmY0H6rE4OE5yLBEWfXToWDSogCAa/HHN7DysiTqf\ndL59GzEAq5mmWJX7TrvK9jQaMB1KToTDsuErvRG+mYINEJiQBzIDFFJmHFz4WCVa\nmBuhhTTVFfyKyiRiyHKx7rtpmKsHiPsVwf8pGaSDMhNTyG//CuuL1WQOehK7hkPh\nzDlc4frQrZ7BlK7Vt1pcr7Qkt+CI3SBNV17KdYZE67LNFPOGIqXHJacIas3an7uj\nANhXkhNZl+gyXt2n2yNN0xihp3SSvmFGYWNCe5/+qFizh+C5E/F99ZDFUhx/KJxt\nM8oiBkdkYL1czFf31ZI5wJ/oChWShFSN76yQqjELjD4+3tlKngSxRIpotUfbJk/C\no4fikxGDsEdi28Xlptu/V35R+LKXYhteIUPTQHrQrCp4EjTenXD9V1WRRUKtOJBx\nzrJNAsneidnto89EPP/ztJRf7tQTv3J7RruSjUfBfNdu3CiCAjMKoD4eVC5lAyxp\nKLQhfP0c0FV8AvdZ1yK3k264FY4lnDdaoqz+L+peHs4iWDgTYd0=\n=rQSx\n-----END PGP SIGNATURE-----", "payload": "tree 129b09776f4a42fb21e05f5350b8d38922d40991\nparent 9af125d248659d16246279b03a521b8c53a183d6\nparent 72ba0ba3d7ce8a5d34bbffaca4be5da5b988499f\nauthor kennytm <kennytm@gmail.com> 1536804137 +0800\ncommitter kennytm <kennytm@gmail.com> 1536856894 +0800\n\nRollup merge of #53976 - GuillaumeGomez:expect-world, r=steveklabnik\n\nReplace unwrap calls in example by expect\n\nPart of #51668.\n\nr? @steveklabnik\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2882119febc065f05e835ec306b93b14c6e61b1b", "html_url": "https://github.com/rust-lang/rust/commit/2882119febc065f05e835ec306b93b14c6e61b1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2882119febc065f05e835ec306b93b14c6e61b1b/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9af125d248659d16246279b03a521b8c53a183d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9af125d248659d16246279b03a521b8c53a183d6", "html_url": "https://github.com/rust-lang/rust/commit/9af125d248659d16246279b03a521b8c53a183d6"}, {"sha": "72ba0ba3d7ce8a5d34bbffaca4be5da5b988499f", "url": "https://api.github.com/repos/rust-lang/rust/commits/72ba0ba3d7ce8a5d34bbffaca4be5da5b988499f", "html_url": "https://github.com/rust-lang/rust/commit/72ba0ba3d7ce8a5d34bbffaca4be5da5b988499f"}], "stats": {"total": 64, "additions": 34, "deletions": 30}, "files": [{"sha": "63dd12f782fda49fe21de6eee08300cac2d00120", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/2882119febc065f05e835ec306b93b14c6e61b1b/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2882119febc065f05e835ec306b93b14c6e61b1b/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=2882119febc065f05e835ec306b93b14c6e61b1b", "patch": "@@ -102,8 +102,8 @@ use sys;\n /// }\n ///\n /// // We are certain that our string doesn't have 0 bytes in the middle,\n-/// // so we can .unwrap()\n-/// let c_to_print = CString::new(\"Hello, world!\").unwrap();\n+/// // so we can .expect()\n+/// let c_to_print = CString::new(\"Hello, world!\").expect(\"CString::new failed\");\n /// unsafe {\n ///     my_printer(c_to_print.as_ptr());\n /// }\n@@ -175,7 +175,7 @@ pub struct CString {\n ///     unsafe { work_with(data.as_ptr()) }\n /// }\n ///\n-/// let s = CString::new(\"data data data data\").unwrap();\n+/// let s = CString::new(\"data data data data\").expect(\"CString::new failed\");\n /// work(&s);\n /// ```\n ///\n@@ -314,7 +314,7 @@ impl CString {\n     ///\n     /// extern { fn puts(s: *const c_char); }\n     ///\n-    /// let to_print = CString::new(\"Hello!\").unwrap();\n+    /// let to_print = CString::new(\"Hello!\").expect(\"CString::new failed\");\n     /// unsafe {\n     ///     puts(to_print.as_ptr());\n     /// }\n@@ -398,7 +398,7 @@ impl CString {\n     ///     fn some_extern_function(s: *mut c_char);\n     /// }\n     ///\n-    /// let c_string = CString::new(\"Hello!\").unwrap();\n+    /// let c_string = CString::new(\"Hello!\").expect(\"CString::new failed\");\n     /// let raw = c_string.into_raw();\n     /// unsafe {\n     ///     some_extern_function(raw);\n@@ -428,7 +428,7 @@ impl CString {\n     /// ```\n     /// use std::ffi::CString;\n     ///\n-    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let c_string = CString::new(\"foo\").expect(\"CString::new failed\");\n     ///\n     /// let ptr = c_string.into_raw();\n     ///\n@@ -460,12 +460,12 @@ impl CString {\n     /// use std::ffi::CString;\n     ///\n     /// let valid_utf8 = vec![b'f', b'o', b'o'];\n-    /// let cstring = CString::new(valid_utf8).unwrap();\n-    /// assert_eq!(cstring.into_string().unwrap(), \"foo\");\n+    /// let cstring = CString::new(valid_utf8).expect(\"CString::new failed\");\n+    /// assert_eq!(cstring.into_string().expect(\"into_string() call failed\"), \"foo\");\n     ///\n     /// let invalid_utf8 = vec![b'f', 0xff, b'o', b'o'];\n-    /// let cstring = CString::new(invalid_utf8).unwrap();\n-    /// let err = cstring.into_string().err().unwrap();\n+    /// let cstring = CString::new(invalid_utf8).expect(\"CString::new failed\");\n+    /// let err = cstring.into_string().err().expect(\"into_string().err() failed\");\n     /// assert_eq!(err.utf8_error().valid_up_to(), 1);\n     /// ```\n \n@@ -489,7 +489,7 @@ impl CString {\n     /// ```\n     /// use std::ffi::CString;\n     ///\n-    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let c_string = CString::new(\"foo\").expect(\"CString::new failed\");\n     /// let bytes = c_string.into_bytes();\n     /// assert_eq!(bytes, vec![b'f', b'o', b'o']);\n     /// ```\n@@ -511,7 +511,7 @@ impl CString {\n     /// ```\n     /// use std::ffi::CString;\n     ///\n-    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let c_string = CString::new(\"foo\").expect(\"CString::new failed\");\n     /// let bytes = c_string.into_bytes_with_nul();\n     /// assert_eq!(bytes, vec![b'f', b'o', b'o', b'\\0']);\n     /// ```\n@@ -534,7 +534,7 @@ impl CString {\n     /// ```\n     /// use std::ffi::CString;\n     ///\n-    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let c_string = CString::new(\"foo\").expect(\"CString::new failed\");\n     /// let bytes = c_string.as_bytes();\n     /// assert_eq!(bytes, &[b'f', b'o', b'o']);\n     /// ```\n@@ -554,7 +554,7 @@ impl CString {\n     /// ```\n     /// use std::ffi::CString;\n     ///\n-    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let c_string = CString::new(\"foo\").expect(\"CString::new failed\");\n     /// let bytes = c_string.as_bytes_with_nul();\n     /// assert_eq!(bytes, &[b'f', b'o', b'o', b'\\0']);\n     /// ```\n@@ -573,9 +573,10 @@ impl CString {\n     /// ```\n     /// use std::ffi::{CString, CStr};\n     ///\n-    /// let c_string = CString::new(b\"foo\".to_vec()).unwrap();\n+    /// let c_string = CString::new(b\"foo\".to_vec()).expect(\"CString::new failed\");\n     /// let c_str = c_string.as_c_str();\n-    /// assert_eq!(c_str, CStr::from_bytes_with_nul(b\"foo\\0\").unwrap());\n+    /// assert_eq!(c_str,\n+    ///            CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\"));\n     /// ```\n     #[inline]\n     #[stable(feature = \"as_c_str\", since = \"1.20.0\")]\n@@ -592,16 +593,17 @@ impl CString {\n     /// ```\n     /// use std::ffi::{CString, CStr};\n     ///\n-    /// let c_string = CString::new(b\"foo\".to_vec()).unwrap();\n+    /// let c_string = CString::new(b\"foo\".to_vec()).expect(\"CString::new failed\");\n     /// let boxed = c_string.into_boxed_c_str();\n-    /// assert_eq!(&*boxed, CStr::from_bytes_with_nul(b\"foo\\0\").unwrap());\n+    /// assert_eq!(&*boxed,\n+    ///            CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\"));\n     /// ```\n     #[stable(feature = \"into_boxed_c_str\", since = \"1.20.0\")]\n     pub fn into_boxed_c_str(self) -> Box<CStr> {\n         unsafe { Box::from_raw(Box::into_raw(self.into_inner()) as *mut CStr) }\n     }\n \n-    // Bypass \"move out of struct which implements [`Drop`] trait\" restriction.\n+    /// Bypass \"move out of struct which implements [`Drop`] trait\" restriction.\n     ///\n     /// [`Drop`]: ../ops/trait.Drop.html\n     fn into_inner(self) -> Box<[u8]> {\n@@ -1031,7 +1033,7 @@ impl CStr {\n     /// use std::ffi::{CStr, CString};\n     ///\n     /// unsafe {\n-    ///     let cstring = CString::new(\"hello\").unwrap();\n+    ///     let cstring = CString::new(\"hello\").expect(\"CString::new failed\");\n     ///     let cstr = CStr::from_bytes_with_nul_unchecked(cstring.to_bytes_with_nul());\n     ///     assert_eq!(cstr, &*cstring);\n     /// }\n@@ -1058,7 +1060,7 @@ impl CStr {\n     /// # #![allow(unused_must_use)]\n     /// use std::ffi::{CString};\n     ///\n-    /// let ptr = CString::new(\"Hello\").unwrap().as_ptr();\n+    /// let ptr = CString::new(\"Hello\").expect(\"CString::new failed\").as_ptr();\n     /// unsafe {\n     ///     // `ptr` is dangling\n     ///     *ptr;\n@@ -1067,14 +1069,14 @@ impl CStr {\n     ///\n     /// This happens because the pointer returned by `as_ptr` does not carry any\n     /// lifetime information and the [`CString`] is deallocated immediately after\n-    /// the `CString::new(\"Hello\").unwrap().as_ptr()` expression is evaluated.\n+    /// the `CString::new(\"Hello\").expect(\"CString::new failed\").as_ptr()` expression is evaluated.\n     /// To fix the problem, bind the `CString` to a local variable:\n     ///\n     /// ```no_run\n     /// # #![allow(unused_must_use)]\n     /// use std::ffi::{CString};\n     ///\n-    /// let hello = CString::new(\"Hello\").unwrap();\n+    /// let hello = CString::new(\"Hello\").expect(\"CString::new failed\");\n     /// let ptr = hello.as_ptr();\n     /// unsafe {\n     ///     // `ptr` is valid because `hello` is in scope\n@@ -1106,7 +1108,7 @@ impl CStr {\n     /// ```\n     /// use std::ffi::CStr;\n     ///\n-    /// let c_str = CStr::from_bytes_with_nul(b\"foo\\0\").unwrap();\n+    /// let c_str = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\n     /// assert_eq!(c_str.to_bytes(), b\"foo\");\n     /// ```\n     #[inline]\n@@ -1132,7 +1134,7 @@ impl CStr {\n     /// ```\n     /// use std::ffi::CStr;\n     ///\n-    /// let c_str = CStr::from_bytes_with_nul(b\"foo\\0\").unwrap();\n+    /// let c_str = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\n     /// assert_eq!(c_str.to_bytes_with_nul(), b\"foo\\0\");\n     /// ```\n     #[inline]\n@@ -1159,7 +1161,7 @@ impl CStr {\n     /// ```\n     /// use std::ffi::CStr;\n     ///\n-    /// let c_str = CStr::from_bytes_with_nul(b\"foo\\0\").unwrap();\n+    /// let c_str = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\n     /// assert_eq!(c_str.to_str(), Ok(\"foo\"));\n     /// ```\n     #[stable(feature = \"cstr_to_str\", since = \"1.4.0\")]\n@@ -1200,7 +1202,8 @@ impl CStr {\n     /// use std::borrow::Cow;\n     /// use std::ffi::CStr;\n     ///\n-    /// let c_str = CStr::from_bytes_with_nul(b\"Hello World\\0\").unwrap();\n+    /// let c_str = CStr::from_bytes_with_nul(b\"Hello World\\0\")\n+    ///                  .expect(\"CStr::from_bytes_with_nul failed\");\n     /// assert_eq!(c_str.to_string_lossy(), Cow::Borrowed(\"Hello World\"));\n     /// ```\n     ///\n@@ -1210,7 +1213,8 @@ impl CStr {\n     /// use std::borrow::Cow;\n     /// use std::ffi::CStr;\n     ///\n-    /// let c_str = CStr::from_bytes_with_nul(b\"Hello \\xF0\\x90\\x80World\\0\").unwrap();\n+    /// let c_str = CStr::from_bytes_with_nul(b\"Hello \\xF0\\x90\\x80World\\0\")\n+    ///                  .expect(\"CStr::from_bytes_with_nul failed\");\n     /// assert_eq!(\n     ///     c_str.to_string_lossy(),\n     ///     Cow::Owned(String::from(\"Hello \ufffdWorld\")) as Cow<str>\n@@ -1231,9 +1235,9 @@ impl CStr {\n     /// ```\n     /// use std::ffi::CString;\n     ///\n-    /// let c_string = CString::new(b\"foo\".to_vec()).unwrap();\n+    /// let c_string = CString::new(b\"foo\".to_vec()).expect(\"CString::new failed\");\n     /// let boxed = c_string.into_boxed_c_str();\n-    /// assert_eq!(boxed.into_c_string(), CString::new(\"foo\").unwrap());\n+    /// assert_eq!(boxed.into_c_string(), CString::new(\"foo\").expect(\"CString::new failed\"));\n     /// ```\n     #[stable(feature = \"into_boxed_c_str\", since = \"1.20.0\")]\n     pub fn into_c_string(self: Box<CStr>) -> CString {"}]}