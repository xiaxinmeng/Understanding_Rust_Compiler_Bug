{"sha": "7ae17e0964b9f869881f4122cd0e1ccc19bee0d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZTE3ZTA5NjRiOWY4Njk4ODFmNDEyMmNkMGUxY2NjMTliZWUwZDQ=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-25T22:55:05Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-27T18:37:55Z"}, "message": "Remove dummy type parameters from iterator adaptors\n\nWith the recent fixes to method resolution, we can now remove the\ndummy type parameters used as crutches in the iterator module.\n\nFor example, the zip adaptor type is just ZipIterator<T, U> now.", "tree": {"sha": "68c3611511cf21c0b930d75dd559dfd8cde8c066", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68c3611511cf21c0b930d75dd559dfd8cde8c066"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ae17e0964b9f869881f4122cd0e1ccc19bee0d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ae17e0964b9f869881f4122cd0e1ccc19bee0d4", "html_url": "https://github.com/rust-lang/rust/commit/7ae17e0964b9f869881f4122cd0e1ccc19bee0d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ae17e0964b9f869881f4122cd0e1ccc19bee0d4/comments", "author": null, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7c9bb4b688ff20a3fd1d4ff1a11bb4dcbdc2c47", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7c9bb4b688ff20a3fd1d4ff1a11bb4dcbdc2c47", "html_url": "https://github.com/rust-lang/rust/commit/d7c9bb4b688ff20a3fd1d4ff1a11bb4dcbdc2c47"}], "stats": {"total": 113, "additions": 51, "deletions": 62}, "files": [{"sha": "3cd2d91459f2ea2ca3f3cd36217a3c51fafbe604", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ae17e0964b9f869881f4122cd0e1ccc19bee0d4/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae17e0964b9f869881f4122cd0e1ccc19bee0d4/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=7ae17e0964b9f869881f4122cd0e1ccc19bee0d4", "patch": "@@ -356,7 +356,7 @@ impl<T> DList<T> {\n \n     /// Provide a reverse iterator\n     #[inline]\n-    pub fn rev_iter<'a>(&'a self) -> InvertIterator<&'a T, DListIterator<'a, T>> {\n+    pub fn rev_iter<'a>(&'a self) -> InvertIterator<DListIterator<'a, T>> {\n         self.iter().invert()\n     }\n \n@@ -376,8 +376,7 @@ impl<T> DList<T> {\n     }\n     /// Provide a reverse iterator with mutable references\n     #[inline]\n-    pub fn mut_rev_iter<'a>(&'a mut self) -> InvertIterator<&'a mut T,\n-                                                MutDListIterator<'a, T>> {\n+    pub fn mut_rev_iter<'a>(&'a mut self) -> InvertIterator<MutDListIterator<'a, T>> {\n         self.mut_iter().invert()\n     }\n \n@@ -390,7 +389,7 @@ impl<T> DList<T> {\n \n     /// Consume the list into an iterator yielding elements by value, in reverse\n     #[inline]\n-    pub fn consume_rev_iter(self) -> InvertIterator<T, ConsumeIterator<T>> {\n+    pub fn consume_rev_iter(self) -> InvertIterator<ConsumeIterator<T>> {\n         self.consume_iter().invert()\n     }\n }"}, {"sha": "7c940445e77ddb7e45c93b7b80114bb18e17274d", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae17e0964b9f869881f4122cd0e1ccc19bee0d4/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae17e0964b9f869881f4122cd0e1ccc19bee0d4/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=7ae17e0964b9f869881f4122cd0e1ccc19bee0d4", "patch": "@@ -184,7 +184,7 @@ impl<T> RingBuf<T> {\n     }\n \n     /// Back-to-front iterator.\n-    pub fn rev_iter<'a>(&'a self) -> InvertIterator<&'a T, RingBufIterator<'a, T>> {\n+    pub fn rev_iter<'a>(&'a self) -> InvertIterator<RingBufIterator<'a, T>> {\n         self.iter().invert()\n     }\n \n@@ -195,7 +195,7 @@ impl<T> RingBuf<T> {\n     }\n \n     /// Back-to-front iterator which returns mutable values.\n-    pub fn mut_rev_iter<'a>(&'a mut self) -> InvertIterator<&'a mut T, RingBufMutIterator<'a, T>> {\n+    pub fn mut_rev_iter<'a>(&'a mut self) -> InvertIterator<RingBufMutIterator<'a, T>> {\n         self.mut_iter().invert()\n     }\n }"}, {"sha": "d292ff256c45ca9cb8f0110aed56e6274617a574", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ae17e0964b9f869881f4122cd0e1ccc19bee0d4/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae17e0964b9f869881f4122cd0e1ccc19bee0d4/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=7ae17e0964b9f869881f4122cd0e1ccc19bee0d4", "patch": "@@ -207,7 +207,7 @@ impl<V> SmallIntMap<V> {\n     /// Empties the hash map, moving all values into the specified closure\n     pub fn consume(&mut self)\n         -> FilterMapIterator<(uint, Option<V>), (uint, V),\n-                EnumerateIterator<Option<V>, VecConsumeIterator<Option<V>>>>\n+                EnumerateIterator<VecConsumeIterator<Option<V>>>>\n     {\n         let values = replace(&mut self.v, ~[]);\n         values.consume_iter().enumerate().filter_map(|(i, v)| {\n@@ -293,8 +293,7 @@ pub struct SmallIntMapIterator<'self, T> {\n \n iterator!(impl SmallIntMapIterator -> (uint, &'self T), get_ref)\n double_ended_iterator!(impl SmallIntMapIterator -> (uint, &'self T), get_ref)\n-pub type SmallIntMapRevIterator<'self, T> = InvertIterator<(uint, &'self T),\n-                                                           SmallIntMapIterator<'self, T>>;\n+pub type SmallIntMapRevIterator<'self, T> = InvertIterator<SmallIntMapIterator<'self, T>>;\n \n pub struct SmallIntMapMutIterator<'self, T> {\n     priv front: uint,\n@@ -304,8 +303,7 @@ pub struct SmallIntMapMutIterator<'self, T> {\n \n iterator!(impl SmallIntMapMutIterator -> (uint, &'self mut T), get_mut_ref)\n double_ended_iterator!(impl SmallIntMapMutIterator -> (uint, &'self mut T), get_mut_ref)\n-pub type SmallIntMapMutRevIterator<'self, T> = InvertIterator<(uint, &'self mut T),\n-                                                              SmallIntMapMutIterator<'self, T>>;\n+pub type SmallIntMapMutRevIterator<'self, T> = InvertIterator<SmallIntMapMutIterator<'self, T>>;\n \n #[cfg(test)]\n mod test_map {"}, {"sha": "818c6b69b8132d1fcf21c478e7bdbcf49e6a135d", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae17e0964b9f869881f4122cd0e1ccc19bee0d4/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae17e0964b9f869881f4122cd0e1ccc19bee0d4/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=7ae17e0964b9f869881f4122cd0e1ccc19bee0d4", "patch": "@@ -770,7 +770,7 @@ impl<T:Hash + Eq> HashSet<T> {\n \n     /// Visit the values representing the symmetric difference\n     pub fn symmetric_difference_iter<'a>(&'a self, other: &'a HashSet<T>)\n-        -> ChainIterator<&'a T, SetAlgebraIter<'a, T>, SetAlgebraIter<'a, T>> {\n+        -> ChainIterator<SetAlgebraIter<'a, T>, SetAlgebraIter<'a, T>> {\n         self.difference_iter(other).chain_(other.difference_iter(self))\n     }\n \n@@ -783,7 +783,7 @@ impl<T:Hash + Eq> HashSet<T> {\n \n     /// Visit the values representing the union\n     pub fn union_iter<'a>(&'a self, other: &'a HashSet<T>)\n-        -> ChainIterator<&'a T, HashSetIterator<'a, T>, SetAlgebraIter<'a, T>> {\n+        -> ChainIterator<HashSetIterator<'a, T>, SetAlgebraIter<'a, T>> {\n         self.iter().chain_(other.difference_iter(self))\n     }\n "}, {"sha": "a6460935a50323b1dcaaa7261c9ef1f1c7bb7b83", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 39, "deletions": 47, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/7ae17e0964b9f869881f4122cd0e1ccc19bee0d4/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae17e0964b9f869881f4122cd0e1ccc19bee0d4/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=7ae17e0964b9f869881f4122cd0e1ccc19bee0d4", "patch": "@@ -66,37 +66,36 @@ pub trait RandomAccessIterator<A>: Iterator<A> {\n /// Iterator adaptors provided for every `DoubleEndedIterator` implementation.\n ///\n /// In the future these will be default methods instead of a utility trait.\n-pub trait DoubleEndedIteratorUtil<A> {\n+pub trait DoubleEndedIteratorUtil {\n     /// Flip the direction of the iterator\n-    fn invert(self) -> InvertIterator<A, Self>;\n+    fn invert(self) -> InvertIterator<Self>;\n }\n \n /// Iterator adaptors provided for every `DoubleEndedIterator` implementation.\n ///\n /// In the future these will be default methods instead of a utility trait.\n-impl<A, T: DoubleEndedIterator<A>> DoubleEndedIteratorUtil<A> for T {\n+impl<A, T: DoubleEndedIterator<A>> DoubleEndedIteratorUtil for T {\n     /// Flip the direction of the iterator\n     #[inline]\n-    fn invert(self) -> InvertIterator<A, T> {\n+    fn invert(self) -> InvertIterator<T> {\n         InvertIterator{iter: self}\n     }\n }\n \n /// An double-ended iterator with the direction inverted\n-// FIXME #6967: Dummy A parameter to get around type inference bug\n #[deriving(Clone)]\n-pub struct InvertIterator<A, T> {\n+pub struct InvertIterator<T> {\n     priv iter: T\n }\n \n-impl<A, T: DoubleEndedIterator<A>> Iterator<A> for InvertIterator<A, T> {\n+impl<A, T: DoubleEndedIterator<A>> Iterator<A> for InvertIterator<T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> { self.iter.next_back() }\n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n-impl<A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for InvertIterator<A, T> {\n+impl<A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for InvertIterator<T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> { self.iter.next() }\n }\n@@ -120,7 +119,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), &1);\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn chain_<U: Iterator<A>>(self, other: U) -> ChainIterator<A, Self, U>;\n+    fn chain_<U: Iterator<A>>(self, other: U) -> ChainIterator<Self, U>;\n \n     /// Creates an iterator which iterates over both this and the specified\n     /// iterators simultaneously, yielding the two elements as pairs. When\n@@ -136,7 +135,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), (&0, &1));\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<A, Self, B, U>;\n+    fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<Self, U>;\n \n     // FIXME: #5898: should be called map\n     /// Creates a new iterator which will apply the specified function to each\n@@ -193,7 +192,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), (1, &200));\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn enumerate(self) -> EnumerateIterator<A, Self>;\n+    fn enumerate(self) -> EnumerateIterator<Self>;\n \n     /// Creates an iterator which invokes the predicate on elements until it\n     /// returns false. Once the predicate returns false, all further elements are\n@@ -238,7 +237,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), &5);\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn skip(self, n: uint) -> SkipIterator<A, Self>;\n+    fn skip(self, n: uint) -> SkipIterator<Self>;\n \n     // FIXME: #5898: should be called take\n     /// Creates an iterator which yields the first `n` elements of this\n@@ -254,7 +253,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), &3);\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn take_(self, n: uint) -> TakeIterator<A, Self>;\n+    fn take_(self, n: uint) -> TakeIterator<Self>;\n \n     /// Creates a new iterator which behaves in a similar fashion to foldl.\n     /// There is a state which is passed between each iteration and can be\n@@ -297,7 +296,7 @@ pub trait IteratorUtil<A> {\n     /// ~~~\n     // FIXME: #5898: should be called `flat_map`\n     fn flat_map_<'r, B, U: Iterator<B>>(self, f: &'r fn(A) -> U)\n-        -> FlatMapIterator<'r, A, B, Self, U>;\n+        -> FlatMapIterator<'r, A, Self, U>;\n \n     /// Creates an iterator that calls a function with a reference to each\n     /// element before yielding it. This is often useful for debugging an\n@@ -464,12 +463,12 @@ pub trait IteratorUtil<A> {\n /// In the future these will be default methods instead of a utility trait.\n impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n     #[inline]\n-    fn chain_<U: Iterator<A>>(self, other: U) -> ChainIterator<A, T, U> {\n+    fn chain_<U: Iterator<A>>(self, other: U) -> ChainIterator<T, U> {\n         ChainIterator{a: self, b: other, flag: false}\n     }\n \n     #[inline]\n-    fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<A, T, B, U> {\n+    fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<T, U> {\n         ZipIterator{a: self, b: other}\n     }\n \n@@ -490,7 +489,7 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n     }\n \n     #[inline]\n-    fn enumerate(self) -> EnumerateIterator<A, T> {\n+    fn enumerate(self) -> EnumerateIterator<T> {\n         EnumerateIterator{iter: self, count: 0}\n     }\n \n@@ -505,13 +504,13 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n     }\n \n     #[inline]\n-    fn skip(self, n: uint) -> SkipIterator<A, T> {\n+    fn skip(self, n: uint) -> SkipIterator<T> {\n         SkipIterator{iter: self, n: n}\n     }\n \n     // FIXME: #5898: should be called take\n     #[inline]\n-    fn take_(self, n: uint) -> TakeIterator<A, T> {\n+    fn take_(self, n: uint) -> TakeIterator<T> {\n         TakeIterator{iter: self, n: n}\n     }\n \n@@ -523,7 +522,7 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n \n     #[inline]\n     fn flat_map_<'r, B, U: Iterator<B>>(self, f: &'r fn(A) -> U)\n-        -> FlatMapIterator<'r, A, B, T, U> {\n+        -> FlatMapIterator<'r, A, T, U> {\n         FlatMapIterator{iter: self, f: f, subiter: None }\n     }\n \n@@ -758,8 +757,7 @@ impl<A: Ord, T: Iterator<A>> OrdIterator<A> for T {\n }\n \n /// A trait for iterators that are clonable.\n-// FIXME #6967: Dummy A parameter to get around type inference bug\n-pub trait ClonableIterator<A> {\n+pub trait ClonableIterator {\n     /// Repeats an iterator endlessly\n     ///\n     /// # Example\n@@ -770,24 +768,24 @@ pub trait ClonableIterator<A> {\n     /// assert_eq!(cy.next(), Some(1));\n     /// assert_eq!(cy.next(), Some(1));\n     /// ~~~\n-    fn cycle(self) -> CycleIterator<A, Self>;\n+    fn cycle(self) -> CycleIterator<Self>;\n }\n \n-impl<A, T: Clone + Iterator<A>> ClonableIterator<A> for T {\n+impl<A, T: Clone + Iterator<A>> ClonableIterator for T {\n     #[inline]\n-    fn cycle(self) -> CycleIterator<A, T> {\n+    fn cycle(self) -> CycleIterator<T> {\n         CycleIterator{orig: self.clone(), iter: self}\n     }\n }\n \n /// An iterator that repeats endlessly\n #[deriving(Clone)]\n-pub struct CycleIterator<A, T> {\n+pub struct CycleIterator<T> {\n     priv orig: T,\n     priv iter: T,\n }\n \n-impl<A, T: Clone + Iterator<A>> Iterator<A> for CycleIterator<A, T> {\n+impl<A, T: Clone + Iterator<A>> Iterator<A> for CycleIterator<T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         match self.iter.next() {\n@@ -808,15 +806,14 @@ impl<A, T: Clone + Iterator<A>> Iterator<A> for CycleIterator<A, T> {\n }\n \n /// An iterator which strings two iterators together\n-// FIXME #6967: Dummy A parameter to get around type inference bug\n #[deriving(Clone)]\n-pub struct ChainIterator<A, T, U> {\n+pub struct ChainIterator<T, U> {\n     priv a: T,\n     priv b: U,\n     priv flag: bool\n }\n \n-impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for ChainIterator<A, T, U> {\n+impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for ChainIterator<T, U> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         if self.flag {\n@@ -853,7 +850,7 @@ impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for ChainIterator<A, T, U> {\n }\n \n impl<A, T: DoubleEndedIterator<A>, U: DoubleEndedIterator<A>> DoubleEndedIterator<A>\n-for ChainIterator<A, T, U> {\n+for ChainIterator<T, U> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n         match self.b.next_back() {\n@@ -864,7 +861,7 @@ for ChainIterator<A, T, U> {\n }\n \n impl<A, T: RandomAccessIterator<A>, U: RandomAccessIterator<A>> RandomAccessIterator<A>\n-for ChainIterator<A, T, U> {\n+for ChainIterator<T, U> {\n     #[inline]\n     fn indexable(&self) -> uint {\n         let (a, b) = (self.a.indexable(), self.b.indexable());\n@@ -888,14 +885,13 @@ for ChainIterator<A, T, U> {\n }\n \n /// An iterator which iterates two other iterators simultaneously\n-// FIXME #6967: Dummy A & B parameters to get around type inference bug\n #[deriving(Clone)]\n-pub struct ZipIterator<A, T, B, U> {\n+pub struct ZipIterator<T, U> {\n     priv a: T,\n     priv b: U\n }\n \n-impl<A, B, T: Iterator<A>, U: Iterator<B>> Iterator<(A, B)> for ZipIterator<A, T, B, U> {\n+impl<A, B, T: Iterator<A>, U: Iterator<B>> Iterator<(A, B)> for ZipIterator<T, U> {\n     #[inline]\n     fn next(&mut self) -> Option<(A, B)> {\n         match (self.a.next(), self.b.next()) {\n@@ -1042,14 +1038,13 @@ for FilterMapIterator<'self, A, B, T> {\n }\n \n /// An iterator which yields the current count and the element during iteration\n-// FIXME #6967: Dummy A parameter to get around type inference bug\n #[deriving(Clone)]\n-pub struct EnumerateIterator<A, T> {\n+pub struct EnumerateIterator<T> {\n     priv iter: T,\n     priv count: uint\n }\n \n-impl<A, T: Iterator<A>> Iterator<(uint, A)> for EnumerateIterator<A, T> {\n+impl<A, T: Iterator<A>> Iterator<(uint, A)> for EnumerateIterator<T> {\n     #[inline]\n     fn next(&mut self) -> Option<(uint, A)> {\n         match self.iter.next() {\n@@ -1141,14 +1136,13 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for TakeWhileIterator<'self, A, T> {\n }\n \n /// An iterator which skips over `n` elements of `iter`.\n-// FIXME #6967: Dummy A parameter to get around type inference bug\n #[deriving(Clone)]\n-pub struct SkipIterator<A, T> {\n+pub struct SkipIterator<T> {\n     priv iter: T,\n     priv n: uint\n }\n \n-impl<A, T: Iterator<A>> Iterator<A> for SkipIterator<A, T> {\n+impl<A, T: Iterator<A>> Iterator<A> for SkipIterator<T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         let mut next = self.iter.next();\n@@ -1190,14 +1184,13 @@ impl<A, T: Iterator<A>> Iterator<A> for SkipIterator<A, T> {\n }\n \n /// An iterator which only iterates over the first `n` iterations of `iter`.\n-// FIXME #6967: Dummy A parameter to get around type inference bug\n #[deriving(Clone)]\n-pub struct TakeIterator<A, T> {\n+pub struct TakeIterator<T> {\n     priv iter: T,\n     priv n: uint\n }\n \n-impl<A, T: Iterator<A>> Iterator<A> for TakeIterator<A, T> {\n+impl<A, T: Iterator<A>> Iterator<A> for TakeIterator<T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         let next = self.iter.next();\n@@ -1249,15 +1242,14 @@ impl<'self, A, B, T: Iterator<A>, St> Iterator<B> for ScanIterator<'self, A, B,\n /// An iterator that maps each element to an iterator,\n /// and yields the elements of the produced iterators\n ///\n-// FIXME #6967: Dummy B parameter to get around type inference bug\n-pub struct FlatMapIterator<'self, A, B, T, U> {\n+pub struct FlatMapIterator<'self, A, T, U> {\n     priv iter: T,\n     priv f: &'self fn(A) -> U,\n     priv subiter: Option<U>,\n }\n \n impl<'self, A, T: Iterator<A>, B, U: Iterator<B>> Iterator<B> for\n-    FlatMapIterator<'self, A, B, T, U> {\n+    FlatMapIterator<'self, A, T, U> {\n     #[inline]\n     fn next(&mut self) -> Option<B> {\n         loop {"}, {"sha": "30f2b6924528ca2ff337e65e260974f595810dcf", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae17e0964b9f869881f4122cd0e1ccc19bee0d4/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae17e0964b9f869881f4122cd0e1ccc19bee0d4/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=7ae17e0964b9f869881f4122cd0e1ccc19bee0d4", "patch": "@@ -2168,7 +2168,7 @@ pub struct VecIterator<'self, T> {\n iterator!{impl VecIterator -> &'self T}\n double_ended_iterator!{impl VecIterator -> &'self T}\n random_access_iterator!{impl VecIterator -> &'self T}\n-pub type VecRevIterator<'self, T> = InvertIterator<&'self T, VecIterator<'self, T>>;\n+pub type VecRevIterator<'self, T> = InvertIterator<VecIterator<'self, T>>;\n \n impl<'self, T> Clone for VecIterator<'self, T> {\n     fn clone(&self) -> VecIterator<'self, T> { *self }\n@@ -2184,7 +2184,7 @@ pub struct VecMutIterator<'self, T> {\n iterator!{impl VecMutIterator -> &'self mut T}\n double_ended_iterator!{impl VecMutIterator -> &'self mut T}\n random_access_iterator!{impl VecMutIterator -> &'self mut T}\n-pub type VecMutRevIterator<'self, T> = InvertIterator<&'self mut T, VecMutIterator<'self, T>>;\n+pub type VecMutRevIterator<'self, T> = InvertIterator<VecMutIterator<'self, T>>;\n \n /// An iterator that moves out of a vector.\n #[deriving(Clone)]"}]}