{"sha": "0b49c93b914c007d1a1e1d90bab881cf4c57fb16", "node_id": "C_kwDOAAsO6NoAKDBiNDljOTNiOTE0YzAwN2QxYTFlMWQ5MGJhYjg4MWNmNGM1N2ZiMTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-27T10:43:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-27T10:43:43Z"}, "message": "Auto merge of #12085 - rainy-me:fix_fn_param, r=Veykril\n\nfix: fn_param completion lookup\n\nclose #12073 caused by #12040", "tree": {"sha": "cb4dea181bad8ec90f43c12ae4fa8e87e90f4acc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb4dea181bad8ec90f43c12ae4fa8e87e90f4acc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b49c93b914c007d1a1e1d90bab881cf4c57fb16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b49c93b914c007d1a1e1d90bab881cf4c57fb16", "html_url": "https://github.com/rust-lang/rust/commit/0b49c93b914c007d1a1e1d90bab881cf4c57fb16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b49c93b914c007d1a1e1d90bab881cf4c57fb16/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "198c07558094a28bd0e0653f298848070c4b910a", "url": "https://api.github.com/repos/rust-lang/rust/commits/198c07558094a28bd0e0653f298848070c4b910a", "html_url": "https://github.com/rust-lang/rust/commit/198c07558094a28bd0e0653f298848070c4b910a"}, {"sha": "c1685e56b73d49542db68ed4150b49089d3ada41", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1685e56b73d49542db68ed4150b49089d3ada41", "html_url": "https://github.com/rust-lang/rust/commit/c1685e56b73d49542db68ed4150b49089d3ada41"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "47cead7d570a72e49ae9a2228ce5a25470853747", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0b49c93b914c007d1a1e1d90bab881cf4c57fb16/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b49c93b914c007d1a1e1d90bab881cf4c57fb16/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=0b49c93b914c007d1a1e1d90bab881cf4c57fb16", "patch": "@@ -15,8 +15,7 @@ use crate::{\n \n /// Complete repeated parameters, both name and type. For example, if all\n /// functions in a file have a `spam: &mut Spam` parameter, a completion with\n-/// `spam: &mut Spam` insert text/label and `spam` lookup string will be\n-/// suggested.\n+/// `spam: &mut Spam` insert text/label will be suggested.\n ///\n /// Also complete parameters for closure or local functions from the surrounding defined locals.\n pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n@@ -26,14 +25,16 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n     };\n \n     let comma_wrapper = comma_wrapper(ctx);\n-    let mut add_new_item_to_acc = |label: &str, lookup: String| {\n+    let mut add_new_item_to_acc = |label: &str| {\n         let mk_item = |label: &str, range: TextRange| {\n             CompletionItem::new(CompletionItemKind::Binding, range, label)\n         };\n         let item = match &comma_wrapper {\n-            Some((fmt, range, lookup)) => mk_item(&fmt(label), *range).lookup_by(lookup).to_owned(),\n-            None => mk_item(label, ctx.source_range()).lookup_by(lookup).to_owned(),\n+            Some((fmt, range)) => mk_item(&fmt(label), *range),\n+            None => mk_item(label, ctx.source_range()),\n         };\n+        // Completion lookup is omitted intentionally here.\n+        // See the full discussion: https://github.com/rust-lang/rust-analyzer/issues/12073\n         item.add_to(acc)\n     };\n \n@@ -44,7 +45,7 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n         ParamKind::Closure(closure) => {\n             let stmt_list = closure.syntax().ancestors().find_map(ast::StmtList::cast)?;\n             params_from_stmt_list_scope(ctx, stmt_list, |name, ty| {\n-                add_new_item_to_acc(&format!(\"{name}: {ty}\"), name.to_string());\n+                add_new_item_to_acc(&format!(\"{name}: {ty}\"));\n             });\n         }\n     }\n@@ -56,7 +57,7 @@ fn fill_fn_params(\n     ctx: &CompletionContext,\n     function: &ast::Fn,\n     param_list: &ast::ParamList,\n-    mut add_new_item_to_acc: impl FnMut(&str, String),\n+    mut add_new_item_to_acc: impl FnMut(&str),\n ) {\n     let mut file_params = FxHashMap::default();\n \n@@ -96,18 +97,13 @@ fn fill_fn_params(\n             file_params.entry(format!(\"{name}: {ty}\")).or_insert(name.to_string());\n         });\n     }\n-\n     remove_duplicated(&mut file_params, param_list.params());\n     let self_completion_items = [\"self\", \"&self\", \"mut self\", \"&mut self\"];\n     if should_add_self_completions(ctx, param_list) {\n-        self_completion_items\n-            .into_iter()\n-            .for_each(|self_item| add_new_item_to_acc(self_item, self_item.to_string()));\n+        self_completion_items.into_iter().for_each(|self_item| add_new_item_to_acc(self_item));\n     }\n \n-    file_params\n-        .into_iter()\n-        .for_each(|(whole_param, binding)| add_new_item_to_acc(&whole_param, binding));\n+    file_params.keys().for_each(|whole_param| add_new_item_to_acc(whole_param));\n }\n \n fn params_from_stmt_list_scope(\n@@ -161,7 +157,7 @@ fn should_add_self_completions(ctx: &CompletionContext, param_list: &ast::ParamL\n     inside_impl && no_params\n }\n \n-fn comma_wrapper(ctx: &CompletionContext) -> Option<(impl Fn(&str) -> String, TextRange, String)> {\n+fn comma_wrapper(ctx: &CompletionContext) -> Option<(impl Fn(&str) -> String, TextRange)> {\n     let param = ctx.token.ancestors().find(|node| node.kind() == SyntaxKind::PARAM)?;\n \n     let next_token_kind = {\n@@ -183,9 +179,5 @@ fn comma_wrapper(ctx: &CompletionContext) -> Option<(impl Fn(&str) -> String, Te\n         matches!(prev_token_kind, SyntaxKind::COMMA | SyntaxKind::L_PAREN | SyntaxKind::PIPE);\n     let leading = if has_leading_comma { \"\" } else { \", \" };\n \n-    Some((\n-        move |label: &_| (format!(\"{}{}{}\", leading, label, trailing)),\n-        param.text_range(),\n-        format!(\"{}{}\", leading, param.text()),\n-    ))\n+    Some((move |label: &_| (format!(\"{}{}{}\", leading, label, trailing)), param.text_range()))\n }"}, {"sha": "d8183660e892cfc1234bc29ebd220ed50645d049", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b49c93b914c007d1a1e1d90bab881cf4c57fb16/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b49c93b914c007d1a1e1d90bab881cf4c57fb16/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=0b49c93b914c007d1a1e1d90bab881cf4c57fb16", "patch": "@@ -570,7 +570,7 @@ fn main() {\n     fn complete_fn_param() {\n         // has mut kw\n         check_edit(\n-            \"mut ba\",\n+            \"mut bar: u32\",\n             r#\"\n fn f(foo: (), mut bar: u32) {}\n fn g(foo: (), mut ba$0)\n@@ -583,7 +583,7 @@ fn g(foo: (), mut bar: u32)\n \n         // has type param\n         check_edit(\n-            \"mut ba: u32\",\n+            \"mut bar: u32\",\n             r#\"\n fn g(foo: (), mut ba$0: u32)\n fn f(foo: (), mut bar: u32) {}\n@@ -599,7 +599,7 @@ fn f(foo: (), mut bar: u32) {}\n     fn complete_fn_mut_param_add_comma() {\n         // add leading and trailing comma\n         check_edit(\n-            \", mut ba\",\n+            \", mut bar: u32,\",\n             r#\"\n fn f(foo: (), mut bar: u32) {}\n fn g(foo: ()mut ba$0 baz: ())\n@@ -614,7 +614,7 @@ fn g(foo: (), mut bar: u32, baz: ())\n     #[test]\n     fn complete_fn_mut_param_has_attribute() {\n         check_edit(\n-            \"mut ba\",\n+            r#\"#[baz = \"qux\"] mut bar: u32\"#,\n             r#\"\n fn f(foo: (), #[baz = \"qux\"] mut bar: u32) {}\n fn g(foo: (), mut ba$0)\n@@ -626,7 +626,7 @@ fn g(foo: (), #[baz = \"qux\"] mut bar: u32)\n         );\n \n         check_edit(\n-            r#\"#[baz = \"qux\"] mut ba\"#,\n+            r#\"#[baz = \"qux\"] mut bar: u32\"#,\n             r#\"\n fn f(foo: (), #[baz = \"qux\"] mut bar: u32) {}\n fn g(foo: (), #[baz = \"qux\"] mut ba$0)\n@@ -638,7 +638,7 @@ fn g(foo: (), #[baz = \"qux\"] mut bar: u32)\n         );\n \n         check_edit(\n-            r#\", #[baz = \"qux\"] mut ba\"#,\n+            r#\", #[baz = \"qux\"] mut bar: u32\"#,\n             r#\"\n fn f(foo: (), #[baz = \"qux\"] mut bar: u32) {}\n fn g(foo: ()#[baz = \"qux\"] mut ba$0)"}, {"sha": "4578955da1e69b2c46ff3ea4ab780e43199b1caa", "filename": "crates/ide_completion/src/tests/fn_param.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b49c93b914c007d1a1e1d90bab881cf4c57fb16/crates%2Fide_completion%2Fsrc%2Ftests%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b49c93b914c007d1a1e1d90bab881cf4c57fb16/crates%2Fide_completion%2Fsrc%2Ftests%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Ffn_param.rs?ref=0b49c93b914c007d1a1e1d90bab881cf4c57fb16", "patch": "@@ -67,6 +67,17 @@ fn bar(file_id: u32, $0) {}\n             kw mut\n         \"#]],\n     );\n+\n+    check(\n+        r#\"\n+fn f(#[foo = \"bar\"] baz: u32,) {}\n+fn g(baz: (), ba$0)\n+\"#,\n+        expect![[r##\"\n+                kw ref\n+                kw mut\n+            \"##]],\n+    )\n }\n \n #[test]"}]}