{"sha": "b88ce0ed4b237adccd16f382203a48dc225d2615", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4OGNlMGVkNGIyMzdhZGNjZDE2ZjM4MjIwM2E0OGRjMjI1ZDI2MTU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-27T23:36:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-27T23:36:08Z"}, "message": "Rollup merge of #67621 - matthewjasper:correct-static-type, r=oli-obk\n\nUse the correct type for static qualifs\n\nCloses #67609", "tree": {"sha": "f46915a49d89d79e29fd06a4643d858c28c09d0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f46915a49d89d79e29fd06a4643d858c28c09d0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b88ce0ed4b237adccd16f382203a48dc225d2615", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeBpVoCRBK7hj4Ov3rIwAAdHIIADgiVskTr/z51yF5ckm/ANJI\nEpwkbMFOCZe312Tb90lSf1MfXLWhgUzWYv5i12MGtaH7KekoXWCYbFDdOmBk4JzL\n6fc6Jvr2md1D6YbzjX3Zm/OAtVXaUgPNZkPU3+1a2IM/mWaEFuA/FP79XI0OxiDt\njDuorMO+vhL9CBanhR21ARXXYGA6D3E2cJSOGcGaH4LJn8/LZxBoyQHyfVY1X+zO\nQleHyRbBmOqQDMcnVvwubD15b7BUZ5HpHsDr/fky/abOAqeQ0Obw9GyprqLQcKj9\np4JmDnRhrfDob+P9KQ87UmzPSeG/3OTzQZhfRMM3gR6R8O6m4x2JyRxMqTDjevw=\n=vUfv\n-----END PGP SIGNATURE-----\n", "payload": "tree f46915a49d89d79e29fd06a4643d858c28c09d0d\nparent 98de5042b09a300a6dcf076ac90fbefb6a88f191\nparent 5d19d4d894031c337e8b6d13802ebda622d30d23\nauthor Oliver Scherer <github35764891676564198441@oli-obk.de> 1577489768 +0100\ncommitter GitHub <noreply@github.com> 1577489768 +0100\n\nRollup merge of #67621 - matthewjasper:correct-static-type, r=oli-obk\n\nUse the correct type for static qualifs\n\nCloses #67609\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b88ce0ed4b237adccd16f382203a48dc225d2615", "html_url": "https://github.com/rust-lang/rust/commit/b88ce0ed4b237adccd16f382203a48dc225d2615", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b88ce0ed4b237adccd16f382203a48dc225d2615/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98de5042b09a300a6dcf076ac90fbefb6a88f191", "url": "https://api.github.com/repos/rust-lang/rust/commits/98de5042b09a300a6dcf076ac90fbefb6a88f191", "html_url": "https://github.com/rust-lang/rust/commit/98de5042b09a300a6dcf076ac90fbefb6a88f191"}, {"sha": "5d19d4d894031c337e8b6d13802ebda622d30d23", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d19d4d894031c337e8b6d13802ebda622d30d23", "html_url": "https://github.com/rust-lang/rust/commit/5d19d4d894031c337e8b6d13802ebda622d30d23"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "bd895171e358e9b89971669a1d1ced34647aa68f", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b88ce0ed4b237adccd16f382203a48dc225d2615/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88ce0ed4b237adccd16f382203a48dc225d2615/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=b88ce0ed4b237adccd16f382203a48dc225d2615", "patch": "@@ -1,6 +1,5 @@\n //! A copy of the `Qualif` trait in `qualify_consts.rs` that is suitable for the new validator.\n \n-use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n use rustc::ty::{self, Ty};\n use syntax_pos::DUMMY_SP;\n@@ -33,12 +32,6 @@ pub trait Qualif {\n     /// of the type.\n     fn in_any_value_of_ty(_cx: &ConstCx<'_, 'tcx>, _ty: Ty<'tcx>) -> bool;\n \n-    fn in_static(cx: &ConstCx<'_, 'tcx>, def_id: DefId) -> bool {\n-        // `mir_const_qualif` does return the qualifs in the final value of a `static`, so we could\n-        // use value-based qualification here, but we shouldn't do this without a good reason.\n-        Self::in_any_value_of_ty(cx, cx.tcx.type_of(def_id))\n-    }\n-\n     fn in_projection_structurally(\n         cx: &ConstCx<'_, 'tcx>,\n         per_local: &impl Fn(Local) -> bool,\n@@ -101,8 +94,14 @@ pub trait Qualif {\n             }\n \n             Operand::Constant(ref constant) => {\n-                if let Some(static_) = constant.check_static_ptr(cx.tcx) {\n-                    Self::in_static(cx, static_)\n+                if constant.check_static_ptr(cx.tcx).is_some() {\n+                    // `mir_const_qualif` does return the qualifs in the final value of a `static`,\n+                    // so we could use value-based qualification here, but we shouldn't do this\n+                    // without a good reason.\n+                    //\n+                    // Note: this uses `constant.literal.ty` which is a reference or pointer to the\n+                    // type of the actual `static` item.\n+                    Self::in_any_value_of_ty(cx, constant.literal.ty)\n                 } else if let ty::ConstKind::Unevaluated(def_id, _) = constant.literal.val {\n                     // Don't peek inside trait associated constants.\n                     if cx.tcx.trait_of_item(def_id).is_some() {"}, {"sha": "d3c663c53e90593ab49081261934991de4d179c9", "filename": "src/test/ui/consts/const-eval/promote-static.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b88ce0ed4b237adccd16f382203a48dc225d2615/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromote-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88ce0ed4b237adccd16f382203a48dc225d2615/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromote-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromote-static.rs?ref=b88ce0ed4b237adccd16f382203a48dc225d2615", "patch": "@@ -0,0 +1,14 @@\n+// regression test for #67609.\n+\n+// check-pass\n+\n+static NONE: Option<String> = None;\n+\n+static NONE_REF_REF: &&Option<String> = {\n+    let x = &&NONE;\n+    x\n+};\n+\n+fn main() {\n+    println!(\"{:?}\", NONE_REF_REF);\n+}"}]}