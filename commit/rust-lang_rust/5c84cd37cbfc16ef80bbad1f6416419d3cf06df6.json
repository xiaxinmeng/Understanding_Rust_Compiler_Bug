{"sha": "5c84cd37cbfc16ef80bbad1f6416419d3cf06df6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjODRjZDM3Y2JmYzE2ZWY4MGJiYWQxZjY0MTY0MTlkM2NmMDZkZjY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-06-13T20:14:58Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-06-14T17:54:58Z"}, "message": "Use `sym` constansts for `PrimitiveTypeTable` keys", "tree": {"sha": "43402c5b84e9031bf9b916e81dd4c3a5aefc7eea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43402c5b84e9031bf9b916e81dd4c3a5aefc7eea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c84cd37cbfc16ef80bbad1f6416419d3cf06df6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c84cd37cbfc16ef80bbad1f6416419d3cf06df6", "html_url": "https://github.com/rust-lang/rust/commit/5c84cd37cbfc16ef80bbad1f6416419d3cf06df6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c84cd37cbfc16ef80bbad1f6416419d3cf06df6/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e212c6ddc4cc190c3ec0b531b6297dcff4932a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e212c6ddc4cc190c3ec0b531b6297dcff4932a0", "html_url": "https://github.com/rust-lang/rust/commit/4e212c6ddc4cc190c3ec0b531b6297dcff4932a0"}], "stats": {"total": 47, "additions": 22, "deletions": 25}, "files": [{"sha": "77b0dd00cf498896fe69a895f864d636d37a15cf", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5c84cd37cbfc16ef80bbad1f6416419d3cf06df6/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c84cd37cbfc16ef80bbad1f6416419d3cf06df6/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5c84cd37cbfc16ef80bbad1f6416419d3cf06df6", "patch": "@@ -1518,37 +1518,32 @@ impl<'a> NameBinding<'a> {\n ///\n /// All other types are defined somewhere and possibly imported, but the primitive ones need\n /// special handling, since they have no place of origin.\n-#[derive(Default)]\n struct PrimitiveTypeTable {\n     primitive_types: FxHashMap<Name, PrimTy>,\n }\n \n impl PrimitiveTypeTable {\n     fn new() -> PrimitiveTypeTable {\n-        let mut table = PrimitiveTypeTable::default();\n-\n-        table.intern(\"bool\", Bool);\n-        table.intern(\"char\", Char);\n-        table.intern(\"f32\", Float(FloatTy::F32));\n-        table.intern(\"f64\", Float(FloatTy::F64));\n-        table.intern(\"isize\", Int(IntTy::Isize));\n-        table.intern(\"i8\", Int(IntTy::I8));\n-        table.intern(\"i16\", Int(IntTy::I16));\n-        table.intern(\"i32\", Int(IntTy::I32));\n-        table.intern(\"i64\", Int(IntTy::I64));\n-        table.intern(\"i128\", Int(IntTy::I128));\n-        table.intern(\"str\", Str);\n-        table.intern(\"usize\", Uint(UintTy::Usize));\n-        table.intern(\"u8\", Uint(UintTy::U8));\n-        table.intern(\"u16\", Uint(UintTy::U16));\n-        table.intern(\"u32\", Uint(UintTy::U32));\n-        table.intern(\"u64\", Uint(UintTy::U64));\n-        table.intern(\"u128\", Uint(UintTy::U128));\n-        table\n-    }\n-\n-    fn intern(&mut self, string: &str, primitive_type: PrimTy) {\n-        self.primitive_types.insert(Symbol::intern(string), primitive_type);\n+        let mut table = FxHashMap::default();\n+\n+        table.insert(sym::bool, Bool);\n+        table.insert(sym::char, Char);\n+        table.insert(sym::f32, Float(FloatTy::F32));\n+        table.insert(sym::f64, Float(FloatTy::F64));\n+        table.insert(sym::isize, Int(IntTy::Isize));\n+        table.insert(sym::i8, Int(IntTy::I8));\n+        table.insert(sym::i16, Int(IntTy::I16));\n+        table.insert(sym::i32, Int(IntTy::I32));\n+        table.insert(sym::i64, Int(IntTy::I64));\n+        table.insert(sym::i128, Int(IntTy::I128));\n+        table.insert(sym::str, Str);\n+        table.insert(sym::usize, Uint(UintTy::Usize));\n+        table.insert(sym::u8, Uint(UintTy::U8));\n+        table.insert(sym::u16, Uint(UintTy::U16));\n+        table.insert(sym::u32, Uint(UintTy::U32));\n+        table.insert(sym::u64, Uint(UintTy::U64));\n+        table.insert(sym::u128, Uint(UintTy::U128));\n+        Self { primitive_types: table }\n     }\n }\n "}, {"sha": "b6a3e37fae6153ace5c4e96f6e800071a74bc8d6", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c84cd37cbfc16ef80bbad1f6416419d3cf06df6/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c84cd37cbfc16ef80bbad1f6416419d3cf06df6/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=5c84cd37cbfc16ef80bbad1f6416419d3cf06df6", "patch": "@@ -157,6 +157,7 @@ symbols! {\n         bin,\n         bind_by_move_pattern_guards,\n         block,\n+        bool,\n         borrowck_graphviz_postflow,\n         borrowck_graphviz_preflow,\n         box_patterns,\n@@ -171,6 +172,7 @@ symbols! {\n         cfg_target_has_atomic,\n         cfg_target_thread_local,\n         cfg_target_vendor,\n+        char,\n         clone,\n         Clone,\n         clone_closures,"}]}