{"sha": "7c89cc4a6f68a9c544ff1b000c8f7ef1c3535278", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjODljYzRhNmY2OGE5YzU0NGZmMWIwMDBjOGY3ZWYxYzM1MzUyNzg=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-25T15:40:32Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-25T15:40:32Z"}, "message": "Add SharedResource abstraction and use it in write_shared\n\nThis cleans up the code quite a bit, and also makes the next commit much\neasier.", "tree": {"sha": "8d9efb502b49ccceb29ee9e03e596531266ae64f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d9efb502b49ccceb29ee9e03e596531266ae64f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c89cc4a6f68a9c544ff1b000c8f7ef1c3535278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c89cc4a6f68a9c544ff1b000c8f7ef1c3535278", "html_url": "https://github.com/rust-lang/rust/commit/7c89cc4a6f68a9c544ff1b000c8f7ef1c3535278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c89cc4a6f68a9c544ff1b000c8f7ef1c3535278/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bba40880c0750f880119b4517821ffe0a96f74d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bba40880c0750f880119b4517821ffe0a96f74d1", "html_url": "https://github.com/rust-lang/rust/commit/bba40880c0750f880119b4517821ffe0a96f74d1"}], "stats": {"total": 230, "additions": 115, "deletions": 115}, "files": [{"sha": "468bd9997a64a1fc0053d751773cb5b50e54e6e6", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7c89cc4a6f68a9c544ff1b000c8f7ef1c3535278/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c89cc4a6f68a9c544ff1b000c8f7ef1c3535278/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=7c89cc4a6f68a9c544ff1b000c8f7ef1c3535278", "patch": "@@ -79,17 +79,6 @@ crate struct Context<'tcx> {\n rustc_data_structures::static_assert_size!(Context<'_>, 152);\n \n impl<'tcx> Context<'tcx> {\n-    pub(super) fn path(&self, filename: &str) -> PathBuf {\n-        // We use splitn vs Path::extension here because we might get a filename\n-        // like `style.min.css` and we want to process that into\n-        // `style-suffix.min.css`.  Path::extension would just return `css`\n-        // which would result in `style.min-suffix.css` which isn't what we\n-        // want.\n-        let (base, ext) = filename.split_once('.').unwrap();\n-        let filename = format!(\"{}{}.{}\", base, self.shared.resource_suffix, ext);\n-        self.dst.join(&filename)\n-    }\n-\n     pub(super) fn tcx(&self) -> TyCtxt<'tcx> {\n         self.shared.tcx\n     }\n@@ -487,7 +476,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             |buf: &mut Buffer| all.print(buf),\n             &self.shared.style_files,\n         );\n-        self.shared.fs.write(&final_file, v.as_bytes())?;\n+        self.shared.fs.write(final_file, v.as_bytes())?;\n \n         // Generating settings page.\n         page.title = \"Rustdoc settings\";"}, {"sha": "2ab423c238c402a87e5c4ba23fd799860ec0787c", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 114, "deletions": 103, "changes": 217, "blob_url": "https://github.com/rust-lang/rust/blob/7c89cc4a6f68a9c544ff1b000c8f7ef1c3535278/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c89cc4a6f68a9c544ff1b000c8f7ef1c3535278/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=7c89cc4a6f68a9c544ff1b000c8f7ef1c3535278", "patch": "@@ -14,7 +14,7 @@ use serde::Serialize;\n use super::{collect_paths_for_type, ensure_trailing_slash, Context, BASIC_KEYWORDS};\n use crate::clean::Crate;\n use crate::config::RenderOptions;\n-use crate::docfs::{DocFS, PathError};\n+use crate::docfs::PathError;\n use crate::error::Error;\n use crate::formats::FormatRenderer;\n use crate::html::{layout, static_files};\n@@ -40,6 +40,81 @@ crate static FILES_UNVERSIONED: Lazy<FxHashMap<&str, &[u8]>> = Lazy::new(|| {\n     }\n });\n \n+enum SharedResource<'a> {\n+    /// This file will never change, no matter what toolchain is used to build it.\n+    ///\n+    /// It does not have a resource suffix.\n+    Unversioned { name: &'a str },\n+    /// This file may change depending on the toolchain.\n+    ///\n+    /// It has a resource suffix.\n+    ToolchainSpecific { basename: &'a str },\n+    /// This file may change for any crate within a build.\n+    ///\n+    /// This differs from normal crate-specific files because it has a resource suffix.\n+    CrateSpecific { basename: &'a str },\n+}\n+\n+impl SharedResource<'_> {\n+    fn extension(&self) -> Option<&OsStr> {\n+        use SharedResource::*;\n+        match self {\n+            Unversioned { name }\n+            | ToolchainSpecific { basename: name }\n+            | CrateSpecific { basename: name } => Path::new(name).extension(),\n+        }\n+    }\n+\n+    fn path(&self, cx: &Context<'_>) -> PathBuf {\n+        match self {\n+            SharedResource::Unversioned { name } => cx.dst.join(name),\n+            SharedResource::ToolchainSpecific { basename } => cx.suffix_path(basename),\n+            SharedResource::CrateSpecific { basename } => cx.suffix_path(basename),\n+        }\n+    }\n+}\n+\n+impl Context<'_> {\n+    fn suffix_path(&self, filename: &str) -> PathBuf {\n+        // We use splitn vs Path::extension here because we might get a filename\n+        // like `style.min.css` and we want to process that into\n+        // `style-suffix.min.css`.  Path::extension would just return `css`\n+        // which would result in `style.min-suffix.css` which isn't what we\n+        // want.\n+        let (base, ext) = filename.split_once('.').unwrap();\n+        let filename = format!(\"{}{}.{}\", base, self.shared.resource_suffix, ext);\n+        self.dst.join(&filename)\n+    }\n+\n+    fn write_shared<C: AsRef<[u8]>>(&self, resource: SharedResource<'_>, contents: C) -> Result<(), Error>\n+    {\n+        self.shared.fs.write(resource.path(self), contents)\n+    }\n+\n+    fn write_minify(\n+        &self,\n+        resource: SharedResource<'_>,\n+        contents: &str,\n+        minify: bool,\n+    ) -> Result<(), Error> {\n+        let tmp;\n+        let contents = if minify {\n+            tmp = if resource.extension() == Some(&OsStr::new(\"css\")) {\n+                minifier::css::minify(contents).map_err(|e| {\n+                    Error::new(format!(\"failed to minify CSS file: {}\", e), resource.path(self))\n+                })?\n+            } else {\n+                minifier::js::minify(contents)\n+            };\n+            tmp.as_bytes()\n+        } else {\n+            contents.as_bytes()\n+        };\n+\n+        self.write_shared(resource, contents)\n+    }\n+}\n+\n pub(super) fn write_shared(\n     cx: &Context<'_>,\n     krate: &Crate,\n@@ -52,27 +127,22 @@ pub(super) fn write_shared(\n     let lock_file = cx.dst.join(\".lock\");\n     let _lock = try_err!(flock::Lock::new(&lock_file, true, true, true), &lock_file);\n \n+    // The weird `: &_` is to work around a borrowck bug: https://github.com/rust-lang/rust/issues/41078#issuecomment-293646723\n+    let write_minify = |p, c: &_| {\n+        cx.write_minify(\n+            SharedResource::ToolchainSpecific { basename: p },\n+            c,\n+            options.enable_minification,\n+        )\n+    };\n+    let write_toolchain =\n+        |p: &_, c: &_| cx.write_shared(SharedResource::ToolchainSpecific { basename: p }, c);\n+\n     // Add all the static files. These may already exist, but we just\n     // overwrite them anyway to make sure that they're fresh and up-to-date.\n-\n-    write_minify(\n-        &cx.shared.fs,\n-        cx.path(\"rustdoc.css\"),\n-        static_files::RUSTDOC_CSS,\n-        options.enable_minification,\n-    )?;\n-    write_minify(\n-        &cx.shared.fs,\n-        cx.path(\"settings.css\"),\n-        static_files::SETTINGS_CSS,\n-        options.enable_minification,\n-    )?;\n-    write_minify(\n-        &cx.shared.fs,\n-        cx.path(\"noscript.css\"),\n-        static_files::NOSCRIPT_CSS,\n-        options.enable_minification,\n-    )?;\n+    write_minify(\"rustdoc.css\", static_files::RUSTDOC_CSS)?;\n+    write_minify(\"settings.css\", static_files::SETTINGS_CSS)?;\n+    write_minify(\"noscript.css\", static_files::NOSCRIPT_CSS)?;\n \n     // To avoid \"light.css\" to be overwritten, we'll first run over the received themes and only\n     // then we'll run over the \"official\" styles.\n@@ -85,106 +155,66 @@ pub(super) fn write_shared(\n \n         // Handle the official themes\n         match theme {\n-            \"light\" => write_minify(\n-                &cx.shared.fs,\n-                cx.path(\"light.css\"),\n-                static_files::themes::LIGHT,\n-                options.enable_minification,\n-            )?,\n-            \"dark\" => write_minify(\n-                &cx.shared.fs,\n-                cx.path(\"dark.css\"),\n-                static_files::themes::DARK,\n-                options.enable_minification,\n-            )?,\n-            \"ayu\" => write_minify(\n-                &cx.shared.fs,\n-                cx.path(\"ayu.css\"),\n-                static_files::themes::AYU,\n-                options.enable_minification,\n-            )?,\n+            \"light\" => write_minify(\"light.css\", static_files::themes::LIGHT)?,\n+            \"dark\" => write_minify(\"dark.css\", static_files::themes::DARK)?,\n+            \"ayu\" => write_minify(\"ayu.css\", static_files::themes::AYU)?,\n             _ => {\n                 // Handle added third-party themes\n                 let content = try_err!(fs::read(&entry.path), &entry.path);\n-                cx.shared\n-                    .fs\n-                    .write(cx.path(&format!(\"{}.{}\", theme, extension)), content.as_slice())?;\n+                // This is not exactly right: if compiled a second time with the same toolchain but different CLI args, the file could be different.\n+                // But docs.rs doesn't use this, so hopefully the issue doesn't come up.\n+                write_toolchain(&format!(\"{}.{}\", theme, extension), content.as_slice())?;\n             }\n         };\n \n         themes.insert(theme.to_owned());\n     }\n \n-    let write = |p, c| cx.shared.fs.write(p, c);\n     if (*cx.shared).layout.logo.is_empty() {\n-        write(cx.path(\"rust-logo.png\"), static_files::RUST_LOGO)?;\n+        write_toolchain(\"rust-logo.png\", static_files::RUST_LOGO)?;\n     }\n     if (*cx.shared).layout.favicon.is_empty() {\n-        write(cx.path(\"favicon.svg\"), static_files::RUST_FAVICON_SVG)?;\n-        write(cx.path(\"favicon-16x16.png\"), static_files::RUST_FAVICON_PNG_16)?;\n-        write(cx.path(\"favicon-32x32.png\"), static_files::RUST_FAVICON_PNG_32)?;\n+        write_toolchain(\"favicon.svg\", static_files::RUST_FAVICON_SVG)?;\n+        write_toolchain(\"favicon-16x16.png\", static_files::RUST_FAVICON_PNG_16)?;\n+        write_toolchain(\"favicon-32x32.png\", static_files::RUST_FAVICON_PNG_32)?;\n     }\n-    write(cx.path(\"brush.svg\"), static_files::BRUSH_SVG)?;\n-    write(cx.path(\"wheel.svg\"), static_files::WHEEL_SVG)?;\n-    write(cx.path(\"down-arrow.svg\"), static_files::DOWN_ARROW_SVG)?;\n+    write_toolchain(\"brush.svg\", static_files::BRUSH_SVG)?;\n+    write_toolchain(\"wheel.svg\", static_files::WHEEL_SVG)?;\n+    write_toolchain(\"down-arrow.svg\", static_files::DOWN_ARROW_SVG)?;\n \n     let mut themes: Vec<&String> = themes.iter().collect();\n     themes.sort();\n \n     write_minify(\n-        &cx.shared.fs,\n-        cx.path(\"main.js\"),\n+        \"main.js\",\n         &static_files::MAIN_JS.replace(\n             \"/* INSERT THEMES HERE */\",\n             &format!(\" = {}\", serde_json::to_string(&themes).unwrap()),\n         ),\n-        options.enable_minification,\n-    )?;\n-    write_minify(\n-        &cx.shared.fs,\n-        cx.path(\"settings.js\"),\n-        static_files::SETTINGS_JS,\n-        options.enable_minification,\n     )?;\n+    write_minify(\"settings.js\", static_files::SETTINGS_JS)?;\n     if cx.shared.include_sources {\n-        write_minify(\n-            &cx.shared.fs,\n-            cx.path(\"source-script.js\"),\n-            static_files::sidebar::SOURCE_SCRIPT,\n-            options.enable_minification,\n-        )?;\n+        write_minify(\"source-script.js\", static_files::sidebar::SOURCE_SCRIPT)?;\n     }\n \n     {\n         write_minify(\n-            &cx.shared.fs,\n-            cx.path(\"storage.js\"),\n+            \"storage.js\",\n             &format!(\n                 \"var resourcesSuffix = \\\"{}\\\";{}\",\n                 cx.shared.resource_suffix,\n                 static_files::STORAGE_JS\n             ),\n-            options.enable_minification,\n         )?;\n     }\n \n     if let Some(ref css) = cx.shared.layout.css_file_extension {\n-        let out = cx.path(\"theme.css\");\n         let buffer = try_err!(fs::read_to_string(css), css);\n-        if !options.enable_minification {\n-            cx.shared.fs.write(&out, &buffer)?;\n-        } else {\n-            write_minify(&cx.shared.fs, out, &buffer, options.enable_minification)?;\n-        }\n+        write_minify(\"theme.css\", &buffer)?;\n     }\n-    write_minify(\n-        &cx.shared.fs,\n-        cx.path(\"normalize.css\"),\n-        static_files::NORMALIZE_CSS,\n-        options.enable_minification,\n-    )?;\n-    for (file, contents) in &*FILES_UNVERSIONED {\n-        write(cx.dst.join(file), contents)?;\n+    write_minify(\"normalize.css\", static_files::NORMALIZE_CSS)?;\n+    for (name, contents) in &*FILES_UNVERSIONED {\n+        cx.write_shared(SharedResource::Unversioned { name }, contents)?;\n     }\n \n     fn collect(path: &Path, krate: &str, key: &str) -> io::Result<(Vec<String>, Vec<String>)> {\n@@ -324,7 +354,7 @@ pub(super) fn write_shared(\n             \"var N = null;var sourcesIndex = {{}};\\n{}\\ncreateSourceSidebar();\\n\",\n             all_sources.join(\"\\n\")\n         );\n-        cx.shared.fs.write(&dst, v.as_bytes())?;\n+        cx.write_shared(SharedResource::CrateSpecific { basename: \"source-files.js\" }, v)?;\n     }\n \n     // Update the search index and crate list.\n@@ -341,13 +371,12 @@ pub(super) fn write_shared(\n         let mut v = String::from(\"var searchIndex = JSON.parse('{\\\\\\n\");\n         v.push_str(&all_indexes.join(\",\\\\\\n\"));\n         v.push_str(\"\\\\\\n}');\\ninitSearch(searchIndex);\");\n-        cx.shared.fs.write(&dst, &v)?;\n+        cx.write_shared(SharedResource::CrateSpecific { basename: \"search-index.js\" }, v)?;\n     }\n \n-    let crate_list_dst = cx.dst.join(&format!(\"crates{}.js\", cx.shared.resource_suffix));\n     let crate_list =\n         format!(\"window.ALL_CRATES = [{}];\", krates.iter().map(|k| format!(\"\\\"{}\\\"\", k)).join(\",\"));\n-    cx.shared.fs.write(&crate_list_dst, &crate_list)?;\n+    cx.write_shared(SharedResource::CrateSpecific { basename: \"crates.js\" }, crate_list)?;\n \n     if options.enable_index_page {\n         if let Some(index_page) = options.index_page.clone() {\n@@ -481,21 +510,3 @@ pub(super) fn write_shared(\n     }\n     Ok(())\n }\n-\n-fn write_minify(\n-    fs: &DocFS,\n-    dst: PathBuf,\n-    contents: &str,\n-    enable_minification: bool,\n-) -> Result<(), Error> {\n-    if enable_minification {\n-        if dst.extension() == Some(&OsStr::new(\"css\")) {\n-            let res = try_none!(minifier::css::minify(contents).ok(), &dst);\n-            fs.write(dst, res.as_bytes())\n-        } else {\n-            fs.write(dst, minifier::js::minify(contents).as_bytes())\n-        }\n-    } else {\n-        fs.write(dst, contents.as_bytes())\n-    }\n-}"}]}