{"sha": "0465201f772bf74e57885cfa64817314ac8c743b", "node_id": "C_kwDOAAsO6NoAKDA0NjUyMDFmNzcyYmY3NGU1Nzg4NWNmYTY0ODE3MzE0YWM4Yzc0M2I", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-11T10:54:56Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-11T11:02:01Z"}, "message": "Use `itertools::Either` instead of own `EitherIter` impl", "tree": {"sha": "0b6688bed72ae4d4fc155898a94cda0de8e334fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b6688bed72ae4d4fc155898a94cda0de8e334fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0465201f772bf74e57885cfa64817314ac8c743b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0465201f772bf74e57885cfa64817314ac8c743b", "html_url": "https://github.com/rust-lang/rust/commit/0465201f772bf74e57885cfa64817314ac8c743b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0465201f772bf74e57885cfa64817314ac8c743b/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4be8efc6296bace5b1e165f1b34d3c6da76aa8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4be8efc6296bace5b1e165f1b34d3c6da76aa8e", "html_url": "https://github.com/rust-lang/rust/commit/d4be8efc6296bace5b1e165f1b34d3c6da76aa8e"}], "stats": {"total": 112, "additions": 20, "deletions": 92}, "files": [{"sha": "5f89f5e4a57ee9c65e1b722be559b9c32945bc54", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0465201f772bf74e57885cfa64817314ac8c743b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0465201f772bf74e57885cfa64817314ac8c743b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0465201f772bf74e57885cfa64817314ac8c743b", "patch": "@@ -4575,6 +4575,7 @@ dependencies = [\n  \"elsa\",\n  \"ena\",\n  \"indexmap\",\n+ \"itertools\",\n  \"jobserver\",\n  \"libc\",\n  \"measureme\","}, {"sha": "2102f09c56a03f5b168930bbf5d099f6133909dd", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0465201f772bf74e57885cfa64817314ac8c743b/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0465201f772bf74e57885cfa64817314ac8c743b/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=0465201f772bf74e57885cfa64817314ac8c743b", "patch": "@@ -33,6 +33,7 @@ tempfile = \"3.2\"\n thin-vec = \"0.2.12\"\n tracing = \"0.1\"\n elsa = \"=1.7.1\"\n+itertools = \"0.10.1\"\n \n [dependencies.parking_lot]\n version = \"0.11\""}, {"sha": "bca6c0955b905f8732fb72b598fc75e62d924152", "filename": "compiler/rustc_data_structures/src/sso/either_iter.rs", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d4be8efc6296bace5b1e165f1b34d3c6da76aa8e/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Feither_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4be8efc6296bace5b1e165f1b34d3c6da76aa8e/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Feither_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Feither_iter.rs?ref=d4be8efc6296bace5b1e165f1b34d3c6da76aa8e", "patch": "@@ -1,73 +0,0 @@\n-use std::fmt;\n-use std::iter::FusedIterator;\n-\n-/// Iterator which may contain instance of\n-/// one of two specific implementations.\n-///\n-/// Note: For most methods providing custom\n-///       implementation may marginally\n-///       improve performance by avoiding\n-///       doing Left/Right match on every step\n-///       and doing it only once instead.\n-#[derive(Clone)]\n-pub enum EitherIter<L, R> {\n-    Left(L),\n-    Right(R),\n-}\n-\n-impl<L, R> Iterator for EitherIter<L, R>\n-where\n-    L: Iterator,\n-    R: Iterator<Item = L::Item>,\n-{\n-    type Item = L::Item;\n-\n-    fn next(&mut self) -> Option<Self::Item> {\n-        match self {\n-            EitherIter::Left(l) => l.next(),\n-            EitherIter::Right(r) => r.next(),\n-        }\n-    }\n-\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        match self {\n-            EitherIter::Left(l) => l.size_hint(),\n-            EitherIter::Right(r) => r.size_hint(),\n-        }\n-    }\n-}\n-\n-impl<L, R> ExactSizeIterator for EitherIter<L, R>\n-where\n-    L: ExactSizeIterator,\n-    R: ExactSizeIterator,\n-    EitherIter<L, R>: Iterator,\n-{\n-    fn len(&self) -> usize {\n-        match self {\n-            EitherIter::Left(l) => l.len(),\n-            EitherIter::Right(r) => r.len(),\n-        }\n-    }\n-}\n-\n-impl<L, R> FusedIterator for EitherIter<L, R>\n-where\n-    L: FusedIterator,\n-    R: FusedIterator,\n-    EitherIter<L, R>: Iterator,\n-{\n-}\n-\n-impl<L, R> fmt::Debug for EitherIter<L, R>\n-where\n-    L: fmt::Debug,\n-    R: fmt::Debug,\n-{\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            EitherIter::Left(l) => l.fmt(f),\n-            EitherIter::Right(r) => r.fmt(f),\n-        }\n-    }\n-}"}, {"sha": "f9e2dfd16d5c38d91c91b400b391fdfe7f8d01ae", "filename": "compiler/rustc_data_structures/src/sso/map.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0465201f772bf74e57885cfa64817314ac8c743b/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0465201f772bf74e57885cfa64817314ac8c743b/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs?ref=0465201f772bf74e57885cfa64817314ac8c743b", "patch": "@@ -1,6 +1,6 @@\n-use super::either_iter::EitherIter;\n use crate::fx::FxHashMap;\n use arrayvec::ArrayVec;\n+use itertools::Either;\n use std::fmt;\n use std::hash::Hash;\n use std::ops::Index;\n@@ -138,35 +138,35 @@ impl<K, V> SsoHashMap<K, V> {\n     /// The iterator element type is `&'a K`.\n     pub fn keys(&self) -> impl Iterator<Item = &'_ K> {\n         match self {\n-            SsoHashMap::Array(array) => EitherIter::Left(array.iter().map(|(k, _v)| k)),\n-            SsoHashMap::Map(map) => EitherIter::Right(map.keys()),\n+            SsoHashMap::Array(array) => Either::Left(array.iter().map(|(k, _v)| k)),\n+            SsoHashMap::Map(map) => Either::Right(map.keys()),\n         }\n     }\n \n     /// An iterator visiting all values in arbitrary order.\n     /// The iterator element type is `&'a V`.\n     pub fn values(&self) -> impl Iterator<Item = &'_ V> {\n         match self {\n-            SsoHashMap::Array(array) => EitherIter::Left(array.iter().map(|(_k, v)| v)),\n-            SsoHashMap::Map(map) => EitherIter::Right(map.values()),\n+            SsoHashMap::Array(array) => Either::Left(array.iter().map(|(_k, v)| v)),\n+            SsoHashMap::Map(map) => Either::Right(map.values()),\n         }\n     }\n \n     /// An iterator visiting all values mutably in arbitrary order.\n     /// The iterator element type is `&'a mut V`.\n     pub fn values_mut(&mut self) -> impl Iterator<Item = &'_ mut V> {\n         match self {\n-            SsoHashMap::Array(array) => EitherIter::Left(array.iter_mut().map(|(_k, v)| v)),\n-            SsoHashMap::Map(map) => EitherIter::Right(map.values_mut()),\n+            SsoHashMap::Array(array) => Either::Left(array.iter_mut().map(|(_k, v)| v)),\n+            SsoHashMap::Map(map) => Either::Right(map.values_mut()),\n         }\n     }\n \n     /// Clears the map, returning all key-value pairs as an iterator. Keeps the\n     /// allocated memory for reuse.\n     pub fn drain(&mut self) -> impl Iterator<Item = (K, V)> + '_ {\n         match self {\n-            SsoHashMap::Array(array) => EitherIter::Left(array.drain(..)),\n-            SsoHashMap::Map(map) => EitherIter::Right(map.drain()),\n+            SsoHashMap::Array(array) => Either::Left(array.drain(..)),\n+            SsoHashMap::Map(map) => Either::Right(map.drain()),\n         }\n     }\n }\n@@ -406,16 +406,16 @@ where\n }\n \n impl<K, V> IntoIterator for SsoHashMap<K, V> {\n-    type IntoIter = EitherIter<\n+    type IntoIter = Either<\n         <ArrayVec<(K, V), 8> as IntoIterator>::IntoIter,\n         <FxHashMap<K, V> as IntoIterator>::IntoIter,\n     >;\n     type Item = <Self::IntoIter as Iterator>::Item;\n \n     fn into_iter(self) -> Self::IntoIter {\n         match self {\n-            SsoHashMap::Array(array) => EitherIter::Left(array.into_iter()),\n-            SsoHashMap::Map(map) => EitherIter::Right(map.into_iter()),\n+            SsoHashMap::Array(array) => Either::Left(array.into_iter()),\n+            SsoHashMap::Map(map) => Either::Right(map.into_iter()),\n         }\n     }\n }\n@@ -435,7 +435,7 @@ fn adapt_array_mut_it<K, V>(pair: &mut (K, V)) -> (&K, &mut V) {\n }\n \n impl<'a, K, V> IntoIterator for &'a SsoHashMap<K, V> {\n-    type IntoIter = EitherIter<\n+    type IntoIter = Either<\n         std::iter::Map<\n             <&'a ArrayVec<(K, V), 8> as IntoIterator>::IntoIter,\n             fn(&'a (K, V)) -> (&'a K, &'a V),\n@@ -446,14 +446,14 @@ impl<'a, K, V> IntoIterator for &'a SsoHashMap<K, V> {\n \n     fn into_iter(self) -> Self::IntoIter {\n         match self {\n-            SsoHashMap::Array(array) => EitherIter::Left(array.into_iter().map(adapt_array_ref_it)),\n-            SsoHashMap::Map(map) => EitherIter::Right(map.iter()),\n+            SsoHashMap::Array(array) => Either::Left(array.into_iter().map(adapt_array_ref_it)),\n+            SsoHashMap::Map(map) => Either::Right(map.iter()),\n         }\n     }\n }\n \n impl<'a, K, V> IntoIterator for &'a mut SsoHashMap<K, V> {\n-    type IntoIter = EitherIter<\n+    type IntoIter = Either<\n         std::iter::Map<\n             <&'a mut ArrayVec<(K, V), 8> as IntoIterator>::IntoIter,\n             fn(&'a mut (K, V)) -> (&'a K, &'a mut V),\n@@ -464,8 +464,8 @@ impl<'a, K, V> IntoIterator for &'a mut SsoHashMap<K, V> {\n \n     fn into_iter(self) -> Self::IntoIter {\n         match self {\n-            SsoHashMap::Array(array) => EitherIter::Left(array.into_iter().map(adapt_array_mut_it)),\n-            SsoHashMap::Map(map) => EitherIter::Right(map.iter_mut()),\n+            SsoHashMap::Array(array) => Either::Left(array.into_iter().map(adapt_array_mut_it)),\n+            SsoHashMap::Map(map) => Either::Right(map.iter_mut()),\n         }\n     }\n }"}, {"sha": "ef634b9adcec3fa25150eea8a8a844a6d243ec07", "filename": "compiler/rustc_data_structures/src/sso/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0465201f772bf74e57885cfa64817314ac8c743b/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0465201f772bf74e57885cfa64817314ac8c743b/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmod.rs?ref=0465201f772bf74e57885cfa64817314ac8c743b", "patch": "@@ -1,4 +1,3 @@\n-mod either_iter;\n mod map;\n mod set;\n "}]}