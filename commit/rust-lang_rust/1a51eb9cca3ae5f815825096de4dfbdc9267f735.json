{"sha": "1a51eb9cca3ae5f815825096de4dfbdc9267f735", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNTFlYjljY2EzYWU1ZjgxNTgyNTA5NmRlNGRmYmRjOTI2N2Y3MzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-30T12:43:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-30T12:43:41Z"}, "message": "Auto merge of #21717 - nick29581:prelude-fullrange, r=acrichto\n\nr? @alexcrichton", "tree": {"sha": "63ba0c9e1427a631fff6226b85c1d1df56178b41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63ba0c9e1427a631fff6226b85c1d1df56178b41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a51eb9cca3ae5f815825096de4dfbdc9267f735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a51eb9cca3ae5f815825096de4dfbdc9267f735", "html_url": "https://github.com/rust-lang/rust/commit/1a51eb9cca3ae5f815825096de4dfbdc9267f735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a51eb9cca3ae5f815825096de4dfbdc9267f735/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0f5980ead4f88e78a47f4d84da4dc11472f66ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f5980ead4f88e78a47f4d84da4dc11472f66ba", "html_url": "https://github.com/rust-lang/rust/commit/e0f5980ead4f88e78a47f4d84da4dc11472f66ba"}, {"sha": "023d49e347e9d155a8a713d40f63329902ad249d", "url": "https://api.github.com/repos/rust-lang/rust/commits/023d49e347e9d155a8a713d40f63329902ad249d", "html_url": "https://github.com/rust-lang/rust/commit/023d49e347e9d155a8a713d40f63329902ad249d"}], "stats": {"total": 308, "additions": 219, "deletions": 89}, "files": [{"sha": "82b92d26d28bc51d1f1f003a6c7c3b7f18a8f2bd", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -111,8 +111,9 @@ mod std {\n     pub use core::option;   // necessary for panic!()\n     pub use core::clone;    // derive(Clone)\n     pub use core::cmp;      // derive(Eq, Ord, etc.)\n-    pub use core::marker;  // derive(Copy)\n+    pub use core::marker;   // derive(Copy)\n     pub use core::hash;     // derive(Hash)\n+    pub use core::ops;      // RangeFull\n }\n \n #[cfg(test)]"}, {"sha": "56d969b89466cdb21cf13a82fa0e65d57e10bdb1", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -98,7 +98,10 @@ use core::iter::{range_step, MultiplicativeIterator};\n use core::marker::Sized;\n use core::mem::size_of;\n use core::mem;\n+#[cfg(stage0)]\n use core::ops::{FnMut, FullRange};\n+#[cfg(not(stage0))]\n+use core::ops::FnMut;\n use core::option::Option::{self, Some, None};\n use core::ptr::PtrExt;\n use core::ptr;\n@@ -1509,7 +1512,10 @@ mod tests {\n     use core::prelude::{Some, None, range, Clone};\n     use core::prelude::{Iterator, IteratorExt};\n     use core::prelude::{AsSlice};\n+    #[cfg(stage0)]\n     use core::prelude::{Ord, FullRange};\n+    #[cfg(not(stage0))]\n+    use core::prelude::Ord;\n     use core::default::Default;\n     use core::mem;\n     use std::iter::RandomAccessIterator;"}, {"sha": "35591a5e9effb049a22b73ebff18e6a65072dc90", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -60,7 +60,13 @@ use core::char::CharExt;\n use core::clone::Clone;\n use core::iter::AdditiveIterator;\n use core::iter::{Iterator, IteratorExt};\n-use core::ops::{FullRange, Index};\n+use core::ops::Index;\n+#[cfg(stage0)]\n+use core::ops::FullRange as RangeFull;\n+#[cfg(stage0)]\n+use core::ops::FullRange;\n+#[cfg(not(stage0))]\n+use core::ops::RangeFull;\n use core::option::Option::{self, Some, None};\n use core::slice::AsSlice;\n use core::str as core_str;\n@@ -408,7 +414,7 @@ Section: Trait implementations\n \n /// Any string that can be represented as a slice.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait StrExt: Index<FullRange, Output = str> {\n+pub trait StrExt: Index<RangeFull, Output = str> {\n     /// Escapes each char in `s` with `char::escape_default`.\n     #[unstable(feature = \"collections\",\n                reason = \"return type may change to be an iterator\")]"}, {"sha": "035529c7365c8c500a0de0536e4fd6e58bebf036", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -877,6 +877,7 @@ impl ops::Index<ops::RangeFrom<uint>> for String {\n         &self[][*index]\n     }\n }\n+#[cfg(stage0)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ops::Index<ops::FullRange> for String {\n     type Output = str;\n@@ -885,6 +886,15 @@ impl ops::Index<ops::FullRange> for String {\n         unsafe { mem::transmute(self.vec.as_slice()) }\n     }\n }\n+#[cfg(not(stage0))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl ops::Index<ops::RangeFull> for String {\n+    type Output = str;\n+    #[inline]\n+    fn index(&self, _index: &ops::RangeFull) -> &str {\n+        unsafe { mem::transmute(self.vec.as_slice()) }\n+    }\n+}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ops::Deref for String {\n@@ -995,6 +1005,7 @@ mod tests {\n     use str::Utf8Error;\n     use core::iter::repeat;\n     use super::{as_string, CowString};\n+    #[cfg(stage0)]\n     use core::ops::FullRange;\n \n     #[test]"}, {"sha": "5dd88dbb02524134f9445d58e2a35999fe078053", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -1317,6 +1317,7 @@ impl<T> ops::Index<ops::RangeFrom<uint>> for Vec<T> {\n         self.as_slice().index(index)\n     }\n }\n+#[cfg(stage0)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::Index<ops::FullRange> for Vec<T> {\n     type Output = [T];\n@@ -1325,6 +1326,15 @@ impl<T> ops::Index<ops::FullRange> for Vec<T> {\n         self.as_slice()\n     }\n }\n+#[cfg(not(stage0))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> ops::Index<ops::RangeFull> for Vec<T> {\n+    type Output = [T];\n+    #[inline]\n+    fn index(&self, _index: &ops::RangeFull) -> &[T] {\n+        self.as_slice()\n+    }\n+}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<ops::Range<uint>> for Vec<T> {\n@@ -1350,6 +1360,7 @@ impl<T> ops::IndexMut<ops::RangeFrom<uint>> for Vec<T> {\n         self.as_mut_slice().index_mut(index)\n     }\n }\n+#[cfg(stage0)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<ops::FullRange> for Vec<T> {\n     type Output = [T];\n@@ -1358,6 +1369,15 @@ impl<T> ops::IndexMut<ops::FullRange> for Vec<T> {\n         self.as_mut_slice()\n     }\n }\n+#[cfg(not(stage0))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> ops::IndexMut<ops::RangeFull> for Vec<T> {\n+    type Output = [T];\n+    #[inline]\n+    fn index_mut(&mut self, _index: &ops::RangeFull) -> &mut [T] {\n+        self.as_mut_slice()\n+    }\n+}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::Deref for Vec<T> {\n@@ -1896,6 +1916,7 @@ mod tests {\n     use prelude::*;\n     use core::mem::size_of;\n     use core::iter::repeat;\n+    #[cfg(stage0)]\n     use core::ops::FullRange;\n     use test::Bencher;\n     use super::as_vec;"}, {"sha": "a81615944fb46056c126c0e7f9c7017eb3b1011a", "filename": "src/libcore/array.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -19,7 +19,10 @@ use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use fmt;\n use hash::{Hash, Hasher, self};\n use marker::Copy;\n+#[cfg(stage0)]\n use ops::{Deref, FullRange};\n+#[cfg(not(stage0))]\n+use ops::Deref;\n use option::Option;\n \n // macro for implementing n-ary tuple functions and operations"}, {"sha": "1032c56fa22ad50f05b8bdab87cc8038fb23dda9", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -153,8 +153,9 @@ mod core {\n mod std {\n     pub use clone;\n     pub use cmp;\n-    pub use marker;\n-    pub use option;\n     pub use fmt;\n     pub use hash;\n+    pub use marker;\n+    pub use ops;\n+    pub use option;\n }"}, {"sha": "9e020eeb8a9c18492a69ae7cf6f8711086a3aae6", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -947,18 +947,35 @@ pub trait IndexMut<Index: ?Sized> {\n }\n \n /// An unbounded range.\n+#[cfg(stage0)]\n #[derive(Copy, Clone, PartialEq, Eq)]\n #[lang=\"full_range\"]\n #[unstable(feature = \"core\", reason  = \"may be renamed to RangeFull\")]\n pub struct FullRange;\n \n+/// An unbounded range.\n+#[cfg(not(stage0))]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n+#[lang=\"range_full\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub struct RangeFull;\n+\n+#[cfg(stage0)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for FullRange {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(\"..\", fmt)\n     }\n }\n \n+#[cfg(not(stage0))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl fmt::Debug for RangeFull {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(\"..\", fmt)\n+    }\n+}\n+\n /// A (half-open) range which is bounded at both ends.\n #[derive(Copy, Clone, PartialEq, Eq)]\n #[lang=\"range\"]"}, {"sha": "9d25317866493c65173c342d1a0b74a6f392ec7e", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -26,7 +26,10 @@\n \n // Reexported core operators\n pub use marker::{Copy, Send, Sized, Sync};\n+#[cfg(stage0)]\n pub use ops::{Drop, Fn, FnMut, FnOnce, FullRange};\n+#[cfg(not(stage0))]\n+pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n // Reexported functions\n pub use iter::range;"}, {"sha": "40e66db3ae5b0eddc95b3fae19280026296851a3", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -44,6 +44,10 @@ use iter::*;\n use marker::Copy;\n use num::Int;\n use ops::{FnMut, self, Index};\n+#[cfg(stage0)]\n+use ops::FullRange as RangeFull;\n+#[cfg(not(stage0))]\n+use ops::RangeFull;\n use option::Option;\n use option::Option::{None, Some};\n use result::Result;\n@@ -543,10 +547,10 @@ impl<T> ops::Index<ops::RangeFrom<uint>> for [T] {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> ops::Index<ops::FullRange> for [T] {\n+impl<T> ops::Index<RangeFull> for [T] {\n     type Output = [T];\n     #[inline]\n-    fn index(&self, _index: &ops::FullRange) -> &[T] {\n+    fn index(&self, _index: &RangeFull) -> &[T] {\n         self\n     }\n }\n@@ -584,10 +588,10 @@ impl<T> ops::IndexMut<ops::RangeFrom<uint>> for [T] {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> ops::IndexMut<ops::FullRange> for [T] {\n+impl<T> ops::IndexMut<RangeFull> for [T] {\n     type Output = [T];\n     #[inline]\n-    fn index_mut(&mut self, _index: &ops::FullRange) -> &mut [T] {\n+    fn index_mut(&mut self, _index: &RangeFull) -> &mut [T] {\n         self\n     }\n }\n@@ -750,6 +754,7 @@ impl<'a, T> ops::Index<ops::RangeFrom<uint>> for Iter<'a, T> {\n     }\n }\n \n+#[cfg(stage0)]\n #[unstable(feature = \"core\")]\n impl<'a, T> ops::Index<ops::FullRange> for Iter<'a, T> {\n     type Output = [T];\n@@ -758,6 +763,15 @@ impl<'a, T> ops::Index<ops::FullRange> for Iter<'a, T> {\n         self.as_slice()\n     }\n }\n+#[cfg(not(stage0))]\n+#[unstable(feature = \"core\")]\n+impl<'a, T> ops::Index<RangeFull> for Iter<'a, T> {\n+    type Output = [T];\n+    #[inline]\n+    fn index(&self, _index: &RangeFull) -> &[T] {\n+        self.as_slice()\n+    }\n+}\n \n impl<'a, T> Iter<'a, T> {\n     /// View the underlying data as a subslice of the original data.\n@@ -821,30 +835,30 @@ impl<'a, T> ops::Index<ops::Range<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index(&self, index: &ops::Range<uint>) -> &[T] {\n-        self.index(&ops::FullRange).index(index)\n+        self.index(&RangeFull).index(index)\n     }\n }\n #[unstable(feature = \"core\")]\n impl<'a, T> ops::Index<ops::RangeTo<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index(&self, index: &ops::RangeTo<uint>) -> &[T] {\n-        self.index(&ops::FullRange).index(index)\n+        self.index(&RangeFull).index(index)\n     }\n }\n #[unstable(feature = \"core\")]\n impl<'a, T> ops::Index<ops::RangeFrom<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index(&self, index: &ops::RangeFrom<uint>) -> &[T] {\n-        self.index(&ops::FullRange).index(index)\n+        self.index(&RangeFull).index(index)\n     }\n }\n #[unstable(feature = \"core\")]\n-impl<'a, T> ops::Index<ops::FullRange> for IterMut<'a, T> {\n+impl<'a, T> ops::Index<RangeFull> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n-    fn index(&self, _index: &ops::FullRange) -> &[T] {\n+    fn index(&self, _index: &RangeFull) -> &[T] {\n         make_slice!(T => &[T]: self.ptr, self.end)\n     }\n }\n@@ -854,30 +868,30 @@ impl<'a, T> ops::IndexMut<ops::Range<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::Range<uint>) -> &mut [T] {\n-        self.index_mut(&ops::FullRange).index_mut(index)\n+        self.index_mut(&RangeFull).index_mut(index)\n     }\n }\n #[unstable(feature = \"core\")]\n impl<'a, T> ops::IndexMut<ops::RangeTo<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::RangeTo<uint>) -> &mut [T] {\n-        self.index_mut(&ops::FullRange).index_mut(index)\n+        self.index_mut(&RangeFull).index_mut(index)\n     }\n }\n #[unstable(feature = \"core\")]\n impl<'a, T> ops::IndexMut<ops::RangeFrom<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::RangeFrom<uint>) -> &mut [T] {\n-        self.index_mut(&ops::FullRange).index_mut(index)\n+        self.index_mut(&RangeFull).index_mut(index)\n     }\n }\n #[unstable(feature = \"core\")]\n-impl<'a, T> ops::IndexMut<ops::FullRange> for IterMut<'a, T> {\n+impl<'a, T> ops::IndexMut<RangeFull> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n-    fn index_mut(&mut self, _index: &ops::FullRange) -> &mut [T] {\n+    fn index_mut(&mut self, _index: &RangeFull) -> &mut [T] {\n         make_slice!(T => &mut [T]: self.ptr, self.end)\n     }\n }"}, {"sha": "8495a03747e7b97977dda929ef85332fee5e296e", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -1249,6 +1249,7 @@ mod traits {\n         }\n     }\n \n+    #[cfg(stage0)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl ops::Index<ops::FullRange> for str {\n         type Output = str;\n@@ -1257,6 +1258,15 @@ mod traits {\n             self\n         }\n     }\n+    #[cfg(not(stage0))]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl ops::Index<ops::RangeFull> for str {\n+        type Output = str;\n+        #[inline]\n+        fn index(&self, _index: &ops::RangeFull) -> &str {\n+            self\n+        }\n+    }\n }\n \n /// Any string that can be represented as a slice"}, {"sha": "3da572f65a6a672d10d55505f463529a34c5159b", "filename": "src/libcoretest/ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcoretest%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibcoretest%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fops.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use test::Bencher;\n-use core::ops::{Range, FullRange, RangeFrom, RangeTo};\n+use core::ops::{Range, RangeFull, RangeFrom, RangeTo};\n \n // Overhead of dtors\n \n@@ -64,5 +64,5 @@ fn test_range_to() {\n #[test]\n fn test_full_range() {\n     // Not much to test.\n-    let _ = FullRange;\n+    let _ = RangeFull;\n }"}, {"sha": "16d2c68ad60a92a8b9737b3fcff9cbc5b7abaeb6", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -269,7 +269,7 @@ lets_do_this! {\n     RangeStructLangItem,             \"range\",                   range_struct;\n     RangeFromStructLangItem,         \"range_from\",              range_from_struct;\n     RangeToStructLangItem,           \"range_to\",                range_to_struct;\n-    FullRangeStructLangItem,         \"full_range\",              full_range_struct;\n+    RangeFullStructLangItem,         \"range_full\",              range_full_struct;\n \n     UnsafeTypeLangItem,              \"unsafe\",                  unsafe_type;\n "}, {"sha": "2b97e7b79648a5ea0d143fec4a4d57c979250a54", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -1054,8 +1054,8 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                     (tcx.lang_items.range_to_struct(), fields, vec![node_id_type(bcx, end.id)])\n                 }\n                 _ => {\n-                    // Desugar to FullRange\n-                    (tcx.lang_items.full_range_struct(), vec![], vec![])\n+                    // Desugar to RangeFull\n+                    (tcx.lang_items.range_full_struct(), vec![], vec![])\n                 }\n             };\n "}, {"sha": "d78b819065a99ddf8aec9801fedd5d269db84611", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -4115,8 +4115,8 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                 }\n             }\n             None => {\n-                // Neither start nor end => FullRange\n-                if let Some(did) = tcx.lang_items.full_range_struct() {\n+                // Neither start nor end => RangeFull\n+                if let Some(did) = tcx.lang_items.range_full_struct() {\n                     let substs = Substs::new_type(vec![], vec![]);\n                     ty::mk_struct(tcx, did, tcx.mk_substs(substs))\n                 } else {"}, {"sha": "18e2aa8c098a712de0c4cc00dd849224a22b0be3", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -82,6 +82,7 @@ impl OsString {\n     }\n }\n \n+#[cfg(stage0)]\n impl ops::Index<ops::FullRange> for OsString {\n     type Output = OsStr;\n \n@@ -91,6 +92,16 @@ impl ops::Index<ops::FullRange> for OsString {\n     }\n }\n \n+#[cfg(not(stage0))]\n+impl ops::Index<ops::RangeFull> for OsString {\n+    type Output = OsStr;\n+\n+    #[inline]\n+    fn index(&self, _index: &ops::RangeFull) -> &OsStr {\n+        unsafe { mem::transmute(self.inner.as_slice()) }\n+    }\n+}\n+\n impl ops::Deref for OsString {\n     type Target = OsStr;\n "}, {"sha": "a016ba8fb0cd069853b114773d359d9277af0c72", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -310,5 +310,4 @@ mod std {\n     pub use slice;\n \n     pub use boxed; // used for vec![]\n-\n }"}, {"sha": "b5409da9c9ca4c8c6f68ebd8bc26b499aee45c8b", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -68,6 +68,7 @@ use fmt;\n use iter::IteratorExt;\n use option::Option;\n use option::Option::{None, Some};\n+#[cfg(stage0)]\n use ops::FullRange;\n use str;\n use str::StrExt;"}, {"sha": "88db27013ac83c43003d7ca101cd8e1acc99c77d", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -25,6 +25,7 @@ use iter::{AdditiveIterator, Extend};\n use iter::{Iterator, IteratorExt, Map, repeat};\n use mem;\n use option::Option::{self, Some, None};\n+#[cfg(stage0)]\n use ops::FullRange;\n use slice::{SliceExt, SliceConcatExt};\n use str::{SplitTerminator, FromStr, StrExt};"}, {"sha": "b3c4ffa5120e88eed17620067b13658f2c789471", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -18,7 +18,7 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n-// TEMPORARY\n+#[cfg(stage0)]\n #[unstable(feature = \"std_misc\")]\n #[doc(no_inline)] pub use ops::FullRange;\n "}, {"sha": "fdcb0c19f30afbb1a59e0ecf3e481975cd943213", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -680,6 +680,7 @@ impl ops::Index<ops::RangeTo<usize>> for Wtf8 {\n     }\n }\n \n+#[cfg(stage0)]\n impl ops::Index<ops::FullRange> for Wtf8 {\n     type Output = Wtf8;\n \n@@ -689,6 +690,16 @@ impl ops::Index<ops::FullRange> for Wtf8 {\n     }\n }\n \n+#[cfg(not(stage0))]\n+impl ops::Index<ops::RangeFull> for Wtf8 {\n+    type Output = Wtf8;\n+\n+    #[inline]\n+    fn index(&self, _range: &ops::RangeFull) -> &Wtf8 {\n+        self\n+    }\n+}\n+\n #[inline]\n fn decode_surrogate(second_byte: u8, third_byte: u8) -> u16 {\n     // The first byte is assumed to be 0xED"}, {"sha": "c4224db8e18c3926fef7cd766cb1d64580bd159b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -2527,14 +2527,27 @@ impl<'a> Parser<'a> {\n                 }\n \n                 if found_dotdot || self.eat(&token::CloseDelim(token::Bracket)) {\n-                    // No expression, expand to a FullRange\n+                    // No expression, expand to a RangeFull\n                     // FIXME(#20516) It would be better to use a lang item or\n-                    // something for FullRange.\n+                    // something for RangeFull.\n                     hi = self.last_span.hi;\n-                    let range = ExprStruct(ident_to_path(mk_sp(lo, hi),\n-                                                         token::special_idents::FullRange),\n-                                           vec![],\n-                                           None);\n+\n+                    let idents = vec![token::str_to_ident(\"std\"),\n+                                      token::str_to_ident(\"ops\"),\n+                                      token::str_to_ident(\"RangeFull\")];\n+                    let segments = idents.into_iter().map(|ident| {\n+                        ast::PathSegment {\n+                            identifier: ident,\n+                            parameters: ast::PathParameters::none(),\n+                        }\n+                    }).collect();\n+                    let path = ast::Path {\n+                        span: mk_sp(lo, hi),\n+                        global: true,\n+                        segments: segments,\n+                    };\n+\n+                    let range = ExprStruct(path, vec![], None);\n                     let ix = self.mk_expr(bracket_pos, hi, range);\n                     let index = self.mk_index(e, ix);\n                     e = self.mk_expr(lo, hi, index)"}, {"sha": "5531ce7b119eb83ef27406607314315d4bf5a8ae", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 48, "deletions": 49, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -516,66 +516,65 @@ declare_special_idents_and_keywords! {\n         (9,                          unnamed_field,          \"<unnamed_field>\");\n         (10,                         type_self,              \"Self\");\n         (11,                         prelude_import,         \"prelude_import\");\n-        (12,                         FullRange,              \"FullRange\");\n     }\n \n     pub mod keywords {\n         // These ones are variants of the Keyword enum\n \n         'strict:\n-        (13,                         As,         \"as\");\n-        (14,                         Break,      \"break\");\n-        (15,                         Crate,      \"crate\");\n-        (16,                         Else,       \"else\");\n-        (17,                         Enum,       \"enum\");\n-        (18,                         Extern,     \"extern\");\n-        (19,                         False,      \"false\");\n-        (20,                         Fn,         \"fn\");\n-        (21,                         For,        \"for\");\n-        (22,                         If,         \"if\");\n-        (23,                         Impl,       \"impl\");\n-        (24,                         In,         \"in\");\n-        (25,                         Let,        \"let\");\n-        (26,                         Loop,       \"loop\");\n-        (27,                         Match,      \"match\");\n-        (28,                         Mod,        \"mod\");\n-        (29,                         Move,       \"move\");\n-        (30,                         Mut,        \"mut\");\n-        (31,                         Pub,        \"pub\");\n-        (32,                         Ref,        \"ref\");\n-        (33,                         Return,     \"return\");\n+        (12,                         As,         \"as\");\n+        (13,                         Break,      \"break\");\n+        (14,                         Crate,      \"crate\");\n+        (15,                         Else,       \"else\");\n+        (16,                         Enum,       \"enum\");\n+        (17,                         Extern,     \"extern\");\n+        (18,                         False,      \"false\");\n+        (19,                         Fn,         \"fn\");\n+        (20,                         For,        \"for\");\n+        (21,                         If,         \"if\");\n+        (22,                         Impl,       \"impl\");\n+        (23,                         In,         \"in\");\n+        (24,                         Let,        \"let\");\n+        (25,                         Loop,       \"loop\");\n+        (26,                         Match,      \"match\");\n+        (27,                         Mod,        \"mod\");\n+        (28,                         Move,       \"move\");\n+        (29,                         Mut,        \"mut\");\n+        (30,                         Pub,        \"pub\");\n+        (31,                         Ref,        \"ref\");\n+        (32,                         Return,     \"return\");\n         // Static and Self are also special idents (prefill de-dupes)\n         (super::STATIC_KEYWORD_NAME_NUM, Static, \"static\");\n         (super::SELF_KEYWORD_NAME_NUM,   Self,   \"self\");\n-        (34,                         Struct,     \"struct\");\n+        (33,                         Struct,     \"struct\");\n         (super::SUPER_KEYWORD_NAME_NUM, Super,   \"super\");\n-        (35,                         True,       \"true\");\n-        (36,                         Trait,      \"trait\");\n-        (37,                         Type,       \"type\");\n-        (38,                         Unsafe,     \"unsafe\");\n-        (39,                         Use,        \"use\");\n-        (40,                         Virtual,    \"virtual\");\n-        (41,                         While,      \"while\");\n-        (42,                         Continue,   \"continue\");\n-        (43,                         Proc,       \"proc\");\n-        (44,                         Box,        \"box\");\n-        (45,                         Const,      \"const\");\n-        (46,                         Where,      \"where\");\n+        (34,                         True,       \"true\");\n+        (35,                         Trait,      \"trait\");\n+        (36,                         Type,       \"type\");\n+        (37,                         Unsafe,     \"unsafe\");\n+        (38,                         Use,        \"use\");\n+        (39,                         Virtual,    \"virtual\");\n+        (40,                         While,      \"while\");\n+        (41,                         Continue,   \"continue\");\n+        (42,                         Proc,       \"proc\");\n+        (43,                         Box,        \"box\");\n+        (44,                         Const,      \"const\");\n+        (45,                         Where,      \"where\");\n         'reserved:\n-        (47,                         Alignof,    \"alignof\");\n-        (48,                         Be,         \"be\");\n-        (49,                         Offsetof,   \"offsetof\");\n-        (50,                         Priv,       \"priv\");\n-        (51,                         Pure,       \"pure\");\n-        (52,                         Sizeof,     \"sizeof\");\n-        (53,                         Typeof,     \"typeof\");\n-        (54,                         Unsized,    \"unsized\");\n-        (55,                         Yield,      \"yield\");\n-        (56,                         Do,         \"do\");\n-        (57,                         Abstract,   \"abstract\");\n-        (58,                         Final,      \"final\");\n-        (59,                         Override,   \"override\");\n-        (60,                         Macro,      \"macro\");\n+        (46,                         Alignof,    \"alignof\");\n+        (47,                         Be,         \"be\");\n+        (48,                         Offsetof,   \"offsetof\");\n+        (49,                         Priv,       \"priv\");\n+        (50,                         Pure,       \"pure\");\n+        (51,                         Sizeof,     \"sizeof\");\n+        (52,                         Typeof,     \"typeof\");\n+        (53,                         Unsized,    \"unsized\");\n+        (54,                         Yield,      \"yield\");\n+        (55,                         Do,         \"do\");\n+        (56,                         Abstract,   \"abstract\");\n+        (57,                         Final,      \"final\");\n+        (58,                         Override,   \"override\");\n+        (59,                         Macro,      \"macro\");\n     }\n }\n "}, {"sha": "1d3984deac2095dfbdb109782360496138498810", "filename": "src/test/run-pass/issue-21384.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Ftest%2Frun-pass%2Fissue-21384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Ftest%2Frun-pass%2Fissue-21384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21384.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use ::std::ops::RangeFull;\n+\n fn test<T : Clone>(arg: T) -> T {\n     arg.clone()\n }\n@@ -20,7 +22,7 @@ fn main() {\n     assert!(test(1..5) == (1..5));\n     assert!(test(..5) == (..5));\n     assert!(test(1..) == (1..));\n-    assert!(test(FullRange) == (FullRange));\n+    assert!(test(RangeFull) == (RangeFull));\n \n     // Check that ranges can still be used with non-clone limits\n     assert!((Test(1)..Test(5)) == (Test(1)..Test(5)));"}, {"sha": "81db525db28a2a3d40c7053d4fe69785f0a3c31a", "filename": "src/test/run-pass/slice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Ftest%2Frun-pass%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a51eb9cca3ae5f815825096de4dfbdc9267f735/src%2Ftest%2Frun-pass%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice.rs?ref=1a51eb9cca3ae5f815825096de4dfbdc9267f735", "patch": "@@ -13,7 +13,7 @@\n #![feature(associated_types)]\n \n extern crate core;\n-use core::ops::{Index, IndexMut, Range, RangeTo, RangeFrom, FullRange};\n+use core::ops::{Index, IndexMut, Range, RangeTo, RangeFrom, RangeFull};\n \n static mut COUNT: uint = 0;\n \n@@ -40,9 +40,9 @@ impl Index<RangeFrom<Foo>> for Foo {\n         self\n     }\n }\n-impl Index<FullRange> for Foo {\n+impl Index<RangeFull> for Foo {\n     type Output = Foo;\n-    fn index(&self, _index: &FullRange) -> &Foo {\n+    fn index(&self, _index: &RangeFull) -> &Foo {\n         unsafe { COUNT += 1; }\n         self\n     }\n@@ -69,9 +69,9 @@ impl IndexMut<RangeFrom<Foo>> for Foo {\n         self\n     }\n }\n-impl IndexMut<FullRange> for Foo {\n+impl IndexMut<RangeFull> for Foo {\n     type Output = Foo;\n-    fn index_mut(&mut self, _index: &FullRange) -> &mut Foo {\n+    fn index_mut(&mut self, _index: &RangeFull) -> &mut Foo {\n         unsafe { COUNT += 1; }\n         self\n     }"}]}