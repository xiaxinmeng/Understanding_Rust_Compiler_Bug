{"sha": "75d8339cdd8c5b07982764a9b78952a67b7cd519", "node_id": "C_kwDOAAsO6NoAKDc1ZDgzMzljZGQ4YzViMDc5ODI3NjRhOWI3ODk1MmE2N2I3Y2Q1MTk", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-29T15:16:18Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-29T15:17:50Z"}, "message": "Replace TDynBenchFn with Fn(&mut Bencher)", "tree": {"sha": "4f0f05fa415f71e9597602efb2c99e5dacb50d9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f0f05fa415f71e9597602efb2c99e5dacb50d9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75d8339cdd8c5b07982764a9b78952a67b7cd519", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75d8339cdd8c5b07982764a9b78952a67b7cd519", "html_url": "https://github.com/rust-lang/rust/commit/75d8339cdd8c5b07982764a9b78952a67b7cd519", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75d8339cdd8c5b07982764a9b78952a67b7cd519/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6211dd7250e9b8e80733f74911ca88c661adb1a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6211dd7250e9b8e80733f74911ca88c661adb1a9", "html_url": "https://github.com/rust-lang/rust/commit/6211dd7250e9b8e80733f74911ca88c661adb1a9"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "17e15243afd7673431ead36e9091df17c07ecc0b", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75d8339cdd8c5b07982764a9b78952a67b7cd519/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d8339cdd8c5b07982764a9b78952a67b7cd519/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=75d8339cdd8c5b07982764a9b78952a67b7cd519", "patch": "@@ -444,8 +444,8 @@ pub fn convert_benchmarks_to_tests(tests: Vec<TestDescAndFn>) -> Vec<TestDescAnd\n         .into_iter()\n         .map(|x| {\n             let testfn = match x.testfn {\n-                DynBenchFn(bench) => DynTestFn(Box::new(move || {\n-                    bench::run_once(|b| __rust_begin_short_backtrace(|| bench.run(b)))\n+                DynBenchFn(benchfn) => DynTestFn(Box::new(move || {\n+                    bench::run_once(|b| __rust_begin_short_backtrace(|| benchfn(b)))\n                 })),\n                 StaticBenchFn(benchfn) => DynTestFn(Box::new(move || {\n                     bench::run_once(|b| __rust_begin_short_backtrace(|| benchfn(b)))\n@@ -544,11 +544,9 @@ pub fn run_test(\n         TestRunOpts { strategy, nocapture: opts.nocapture, concurrency, time: opts.time_options };\n \n     match testfn {\n-        DynBenchFn(bencher) => {\n+        DynBenchFn(benchfn) => {\n             // Benchmarks aren't expected to panic, so we run them all in-process.\n-            crate::bench::benchmark(id, desc, monitor_ch, opts.nocapture, |harness| {\n-                bencher.run(harness)\n-            });\n+            crate::bench::benchmark(id, desc, monitor_ch, opts.nocapture, benchfn);\n             None\n         }\n         StaticBenchFn(benchfn) => {"}, {"sha": "37bb38fb0df4efb64d557d31d515e83cd2a7183d", "filename": "library/test/src/types.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75d8339cdd8c5b07982764a9b78952a67b7cd519/library%2Ftest%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d8339cdd8c5b07982764a9b78952a67b7cd519/library%2Ftest%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftypes.rs?ref=75d8339cdd8c5b07982764a9b78952a67b7cd519", "patch": "@@ -74,11 +74,6 @@ impl fmt::Display for TestName {\n     }\n }\n \n-/// Represents a benchmark function.\n-pub trait TDynBenchFn: Send {\n-    fn run(&self, harness: &mut Bencher);\n-}\n-\n // A function that runs a test. If the function returns successfully,\n // the test succeeds; if the function panics then the test fails. We\n // may need to come up with a more clever definition of test in order\n@@ -87,7 +82,7 @@ pub enum TestFn {\n     StaticTestFn(fn()),\n     StaticBenchFn(fn(&mut Bencher)),\n     DynTestFn(Box<dyn FnOnce() + Send>),\n-    DynBenchFn(Box<dyn TDynBenchFn + 'static>),\n+    DynBenchFn(Box<dyn Fn(&mut Bencher) + Send>),\n }\n \n impl TestFn {"}]}