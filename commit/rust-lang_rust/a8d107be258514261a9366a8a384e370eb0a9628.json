{"sha": "a8d107be258514261a9366a8a384e370eb0a9628", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZDEwN2JlMjU4NTE0MjYxYTkzNjZhOGEzODRlMzcwZWIwYTk2Mjg=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-12-27T14:11:05Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-12-27T14:11:05Z"}, "message": "Correct a few stability attributes", "tree": {"sha": "9cae5f25d66361427dce83d520c9fc3ecb659719", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cae5f25d66361427dce83d520c9fc3ecb659719"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8d107be258514261a9366a8a384e370eb0a9628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d107be258514261a9366a8a384e370eb0a9628", "html_url": "https://github.com/rust-lang/rust/commit/a8d107be258514261a9366a8a384e370eb0a9628", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8d107be258514261a9366a8a384e370eb0a9628/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0efdfa1d6220484770e3730062b92a9d2b2e20b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0efdfa1d6220484770e3730062b92a9d2b2e20b9", "html_url": "https://github.com/rust-lang/rust/commit/0efdfa1d6220484770e3730062b92a9d2b2e20b9"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "93f6a0214d77d487b67edf144bce2d8875dc167a", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a8d107be258514261a9366a8a384e370eb0a9628/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d107be258514261a9366a8a384e370eb0a9628/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=a8d107be258514261a9366a8a384e370eb0a9628", "patch": "@@ -1024,7 +1024,7 @@ impl<T: ::fmt::Debug> ::fmt::Debug for ManuallyDrop<T> {\n     }\n }\n \n-#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+#[stable(feature = \"manually_drop_impls\", since = \"1.22.0\")]\n impl<T: Clone> Clone for ManuallyDrop<T> {\n     fn clone(&self) -> Self {\n         ManuallyDrop::new(self.deref().clone())\n@@ -1035,14 +1035,14 @@ impl<T: Clone> Clone for ManuallyDrop<T> {\n     }\n }\n \n-#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+#[stable(feature = \"manually_drop_impls\", since = \"1.22.0\")]\n impl<T: Default> Default for ManuallyDrop<T> {\n     fn default() -> Self {\n         ManuallyDrop::new(Default::default())\n     }\n }\n \n-#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+#[stable(feature = \"manually_drop_impls\", since = \"1.22.0\")]\n impl<T: PartialEq> PartialEq for ManuallyDrop<T> {\n     fn eq(&self, other: &Self) -> bool {\n         self.deref().eq(other)\n@@ -1053,10 +1053,10 @@ impl<T: PartialEq> PartialEq for ManuallyDrop<T> {\n     }\n }\n \n-#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+#[stable(feature = \"manually_drop_impls\", since = \"1.22.0\")]\n impl<T: Eq> Eq for ManuallyDrop<T> {}\n \n-#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+#[stable(feature = \"manually_drop_impls\", since = \"1.22.0\")]\n impl<T: PartialOrd> PartialOrd for ManuallyDrop<T> {\n     fn partial_cmp(&self, other: &Self) -> Option<::cmp::Ordering> {\n         self.deref().partial_cmp(other)\n@@ -1079,14 +1079,14 @@ impl<T: PartialOrd> PartialOrd for ManuallyDrop<T> {\n     }\n }\n \n-#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+#[stable(feature = \"manually_drop_impls\", since = \"1.22.0\")]\n impl<T: Ord> Ord for ManuallyDrop<T> {\n     fn cmp(&self, other: &Self) -> ::cmp::Ordering {\n         self.deref().cmp(other)\n     }\n }\n \n-#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+#[stable(feature = \"manually_drop_impls\", since = \"1.22.0\")]\n impl<T: ::hash::Hash> ::hash::Hash for ManuallyDrop<T> {\n     fn hash<H: ::hash::Hasher>(&self, state: &mut H) {\n         self.deref().hash(state);"}, {"sha": "765b369e4b25dac04d389f06688fc4b3a80ba471", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8d107be258514261a9366a8a384e370eb0a9628/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d107be258514261a9366a8a384e370eb0a9628/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=a8d107be258514261a9366a8a384e370eb0a9628", "patch": "@@ -1997,7 +1997,9 @@ mod traits {\n         }\n     }\n \n-    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n+    #[unstable(feature = \"inclusive_range\",\n+               reason = \"recently added, follows RFC\",\n+               issue = \"28237\")]\n     impl SliceIndex<str> for ops::RangeInclusive<usize> {\n         type Output = str;\n         #[inline]\n@@ -2040,7 +2042,9 @@ mod traits {\n \n \n \n-    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n+    #[unstable(feature = \"inclusive_range\",\n+               reason = \"recently added, follows RFC\",\n+               issue = \"28237\")]\n     impl SliceIndex<str> for ops::RangeToInclusive<usize> {\n         type Output = str;\n         #[inline]"}, {"sha": "3da9e9c87dde3330ebad342c33908b3f9c0593b1", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a8d107be258514261a9366a8a384e370eb0a9628/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d107be258514261a9366a8a384e370eb0a9628/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=a8d107be258514261a9366a8a384e370eb0a9628", "patch": "@@ -944,6 +944,7 @@ macro_rules! atomic_int {\n      $stable_cxchg:meta,\n      $stable_debug:meta,\n      $stable_access:meta,\n+     $stable_from:meta,\n      $s_int_type:expr, $int_ref:expr,\n      $int_type:ident $atomic_type:ident $atomic_init:ident) => {\n         /// An integer type which can be safely shared between threads.\n@@ -978,7 +979,7 @@ macro_rules! atomic_int {\n             }\n         }\n \n-        #[stable(feature = \"atomic_from\", since = \"1.23.0\")]\n+        #[$stable_from]\n         impl From<$int_type> for $atomic_type {\n             #[inline]\n             fn from(v: $int_type) -> Self { Self::new(v) }\n@@ -1375,6 +1376,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"i8\", \"../../../std/primitive.i8.html\",\n     i8 AtomicI8 ATOMIC_I8_INIT\n }\n@@ -1384,6 +1386,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"u8\", \"../../../std/primitive.u8.html\",\n     u8 AtomicU8 ATOMIC_U8_INIT\n }\n@@ -1393,6 +1396,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"i16\", \"../../../std/primitive.i16.html\",\n     i16 AtomicI16 ATOMIC_I16_INIT\n }\n@@ -1402,6 +1406,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"u16\", \"../../../std/primitive.u16.html\",\n     u16 AtomicU16 ATOMIC_U16_INIT\n }\n@@ -1411,6 +1416,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"i32\", \"../../../std/primitive.i32.html\",\n     i32 AtomicI32 ATOMIC_I32_INIT\n }\n@@ -1420,6 +1426,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"u32\", \"../../../std/primitive.u32.html\",\n     u32 AtomicU32 ATOMIC_U32_INIT\n }\n@@ -1429,6 +1436,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"i64\", \"../../../std/primitive.i64.html\",\n     i64 AtomicI64 ATOMIC_I64_INIT\n }\n@@ -1438,6 +1446,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"u64\", \"../../../std/primitive.u64.html\",\n     u64 AtomicU64 ATOMIC_U64_INIT\n }\n@@ -1447,6 +1456,7 @@ atomic_int!{\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n     stable(feature = \"atomic_access\", since = \"1.15.0\"),\n+    stable(feature = \"atomic_from\", since = \"1.23.0\"),\n     \"isize\", \"../../../std/primitive.isize.html\",\n     isize AtomicIsize ATOMIC_ISIZE_INIT\n }\n@@ -1456,6 +1466,7 @@ atomic_int!{\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n     stable(feature = \"atomic_access\", since = \"1.15.0\"),\n+    stable(feature = \"atomic_from\", since = \"1.23.0\"),\n     \"usize\", \"../../../std/primitive.usize.html\",\n     usize AtomicUsize ATOMIC_USIZE_INIT\n }"}, {"sha": "a19fe825f21fa06344710ac9de67e2b33a371137", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8d107be258514261a9366a8a384e370eb0a9628/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d107be258514261a9366a8a384e370eb0a9628/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=a8d107be258514261a9366a8a384e370eb0a9628", "patch": "@@ -706,7 +706,7 @@ impl From<CString> for Box<CStr> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<CString> for Arc<CStr> {\n     #[inline]\n     fn from(s: CString) -> Arc<CStr> {\n@@ -715,7 +715,7 @@ impl From<CString> for Arc<CStr> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a CStr> for Arc<CStr> {\n     #[inline]\n     fn from(s: &CStr) -> Arc<CStr> {\n@@ -724,7 +724,7 @@ impl<'a> From<&'a CStr> for Arc<CStr> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<CString> for Rc<CStr> {\n     #[inline]\n     fn from(s: CString) -> Rc<CStr> {\n@@ -733,7 +733,7 @@ impl From<CString> for Rc<CStr> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a CStr> for Rc<CStr> {\n     #[inline]\n     fn from(s: &CStr) -> Rc<CStr> {"}, {"sha": "109173d31c501ee15bcd50cb0fb0127a8864caa5", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8d107be258514261a9366a8a384e370eb0a9628/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d107be258514261a9366a8a384e370eb0a9628/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=a8d107be258514261a9366a8a384e370eb0a9628", "patch": "@@ -594,7 +594,7 @@ impl From<OsString> for Box<OsStr> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<OsString> for Arc<OsStr> {\n     #[inline]\n     fn from(s: OsString) -> Arc<OsStr> {\n@@ -603,7 +603,7 @@ impl From<OsString> for Arc<OsStr> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a OsStr> for Arc<OsStr> {\n     #[inline]\n     fn from(s: &OsStr) -> Arc<OsStr> {\n@@ -612,7 +612,7 @@ impl<'a> From<&'a OsStr> for Arc<OsStr> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<OsString> for Rc<OsStr> {\n     #[inline]\n     fn from(s: OsString) -> Rc<OsStr> {\n@@ -621,7 +621,7 @@ impl From<OsString> for Rc<OsStr> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a OsStr> for Rc<OsStr> {\n     #[inline]\n     fn from(s: &OsStr) -> Rc<OsStr> {"}, {"sha": "bed9efcb8469d358ab33c5c4e01bfdbade037b48", "filename": "src/libstd/path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8d107be258514261a9366a8a384e370eb0a9628/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d107be258514261a9366a8a384e370eb0a9628/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=a8d107be258514261a9366a8a384e370eb0a9628", "patch": "@@ -1454,7 +1454,7 @@ impl<'a> From<PathBuf> for Cow<'a, Path> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Arc<Path> {\n     #[inline]\n     fn from(s: PathBuf) -> Arc<Path> {\n@@ -1463,7 +1463,7 @@ impl From<PathBuf> for Arc<Path> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a Path> for Arc<Path> {\n     #[inline]\n     fn from(s: &Path) -> Arc<Path> {\n@@ -1472,7 +1472,7 @@ impl<'a> From<&'a Path> for Arc<Path> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Rc<Path> {\n     #[inline]\n     fn from(s: PathBuf) -> Rc<Path> {\n@@ -1481,7 +1481,7 @@ impl From<PathBuf> for Rc<Path> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a Path> for Rc<Path> {\n     #[inline]\n     fn from(s: &Path) -> Rc<Path> {"}, {"sha": "3b4904c98e8717813c1b0f3301201f885b8b919d", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d107be258514261a9366a8a384e370eb0a9628/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d107be258514261a9366a8a384e370eb0a9628/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=a8d107be258514261a9366a8a384e370eb0a9628", "patch": "@@ -382,7 +382,7 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Mutex<T> {\n     }\n }\n \n-#[stable(feature = \"mutex_from\", since = \"1.22.0\")]\n+#[stable(feature = \"mutex_from\", since = \"1.24.0\")]\n impl<T> From<T> for Mutex<T> {\n     /// Creates a new mutex in an unlocked state ready for use.\n     /// This is equivalent to [`Mutex::new`]."}, {"sha": "0f3f4e50f7e321ec2e59d60a9fc9903a873ce29d", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d107be258514261a9366a8a384e370eb0a9628/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d107be258514261a9366a8a384e370eb0a9628/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=a8d107be258514261a9366a8a384e370eb0a9628", "patch": "@@ -457,7 +457,7 @@ impl<T: Default> Default for RwLock<T> {\n     }\n }\n \n-#[stable(feature = \"rw_lock_from\", since = \"1.22.0\")]\n+#[stable(feature = \"rw_lock_from\", since = \"1.24.0\")]\n impl<T> From<T> for RwLock<T> {\n     /// Creates a new instance of an `RwLock<T>` which is unlocked.\n     /// This is equivalent to [`RwLock::new`]."}]}