{"sha": "d9cc71fc421da370d8b19a369ffa127cb17c2536", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5Y2M3MWZjNDIxZGEzNzBkOGIxOWEzNjlmZmExMjdjYjE3YzI1MzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-22T13:26:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-22T13:26:22Z"}, "message": "Auto merge of #3341 - HMPerson1:possibly_missing_else, r=phansch\n\nTeach `suspicious_else_formatting` about `if .. {..} {..}`\n\nWe essentially treat bare blocks `{..}` identically to `if .. {..}`, except for different lint messages.\n\nFixes #3044", "tree": {"sha": "b892702b13fc27411d96cde4e142dd3876bcbb2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b892702b13fc27411d96cde4e142dd3876bcbb2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9cc71fc421da370d8b19a369ffa127cb17c2536", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9cc71fc421da370d8b19a369ffa127cb17c2536", "html_url": "https://github.com/rust-lang/rust/commit/d9cc71fc421da370d8b19a369ffa127cb17c2536", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9cc71fc421da370d8b19a369ffa127cb17c2536/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19c7885c2a197be4a14fb6ca4dcd8734ce17d399", "url": "https://api.github.com/repos/rust-lang/rust/commits/19c7885c2a197be4a14fb6ca4dcd8734ce17d399", "html_url": "https://github.com/rust-lang/rust/commit/19c7885c2a197be4a14fb6ca4dcd8734ce17d399"}, {"sha": "05ae391e2cd1cd356e5db437f79ce1b6137dfa64", "url": "https://api.github.com/repos/rust-lang/rust/commits/05ae391e2cd1cd356e5db437f79ce1b6137dfa64", "html_url": "https://github.com/rust-lang/rust/commit/05ae391e2cd1cd356e5db437f79ce1b6137dfa64"}], "stats": {"total": 224, "additions": 160, "deletions": 64}, "files": [{"sha": "cc3801423c88e886eeca2c3ae0e45e45aff966a7", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 55, "deletions": 17, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d9cc71fc421da370d8b19a369ffa127cb17c2536/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9cc71fc421da370d8b19a369ffa127cb17c2536/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=d9cc71fc421da370d8b19a369ffa127cb17c2536", "patch": "@@ -31,8 +31,8 @@ declare_clippy_lint! {\n     \"suspicious formatting of `*=`, `-=` or `!=`\"\n }\n \n-/// **What it does:** Checks for formatting of `else if`. It lints if the `else`\n-/// and `if` are not on the same line or the `else` seems to be missing.\n+/// **What it does:** Checks for formatting of `else`. It lints if the `else`\n+/// is followed immediately by a newline or the `else` seems to be missing.\n ///\n /// **Why is this bad?** This is probably some refactoring remnant, even if the\n /// code is correct, it might look confusing.\n@@ -42,19 +42,29 @@ declare_clippy_lint! {\n /// **Example:**\n /// ```rust,ignore\n /// if foo {\n+/// } { // looks like an `else` is missing here\n+/// }\n+///\n+/// if foo {\n /// } if bar { // looks like an `else` is missing here\n /// }\n ///\n /// if foo {\n /// } else\n ///\n+/// { // this is the `else` block of the previous `if`, but should it be?\n+/// }\n+///\n+/// if foo {\n+/// } else\n+///\n /// if bar { // this is the `else` block of the previous `if`, but should it be?\n /// }\n /// ```\n declare_clippy_lint! {\n     pub SUSPICIOUS_ELSE_FORMATTING,\n     style,\n-    \"suspicious formatting of `else if`\"\n+    \"suspicious formatting of `else`\"\n }\n \n /// **What it does:** Checks for possible missing comma in an array. It lints if\n@@ -96,7 +106,7 @@ impl EarlyLintPass for Formatting {\n             match (&w[0].node, &w[1].node) {\n                 (&ast::StmtKind::Expr(ref first), &ast::StmtKind::Expr(ref second))\n                 | (&ast::StmtKind::Expr(ref first), &ast::StmtKind::Semi(ref second)) => {\n-                    check_consecutive_ifs(cx, first, second);\n+                    check_missing_else(cx, first, second);\n                 },\n                 _ => (),\n             }\n@@ -105,7 +115,7 @@ impl EarlyLintPass for Formatting {\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n         check_assign(cx, expr);\n-        check_else_if(cx, expr);\n+        check_else(cx, expr);\n         check_array(cx, expr);\n     }\n }\n@@ -139,10 +149,18 @@ fn check_assign(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n     }\n }\n \n-/// Implementation of the `SUSPICIOUS_ELSE_FORMATTING` lint for weird `else if`.\n-fn check_else_if(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n+/// Implementation of the `SUSPICIOUS_ELSE_FORMATTING` lint for weird `else`.\n+fn check_else(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n     if let Some((then, &Some(ref else_))) = unsugar_if(expr) {\n-        if unsugar_if(else_).is_some() && !differing_macro_contexts(then.span, else_.span) && !in_macro(then.span) {\n+        if (is_block(else_) || unsugar_if(else_).is_some())\n+            && !differing_macro_contexts(then.span, else_.span)\n+            && !in_macro(then.span)\n+        {\n+            // workaround for rust-lang/rust#43081\n+            if expr.span.lo().0 == 0 && expr.span.hi().0 == 0 {\n+                return;\n+            }\n+\n             // this will be a span from the closing \u2018}\u2019 of the \u201cthen\u201d block (excluding) to\n             // the\n             // \u201cif\u201d of the \u201celse if\u201d block (excluding)\n@@ -154,14 +172,19 @@ fn check_else_if(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n                 let else_pos = else_snippet.find(\"else\").expect(\"there must be a `else` here\");\n \n                 if else_snippet[else_pos..].contains('\\n') {\n+                    let else_desc = if unsugar_if(else_).is_some() { \"if\" } else { \"{..}\" };\n+\n                     span_note_and_lint(\n                         cx,\n                         SUSPICIOUS_ELSE_FORMATTING,\n                         else_span,\n-                        \"this is an `else if` but the formatting might hide it\",\n+                        &format!(\"this is an `else {}` but the formatting might hide it\", else_desc),\n                         else_span,\n-                        \"to remove this lint, remove the `else` or remove the new line between `else` \\\n-                         and `if`\",\n+                        &format!(\n+                            \"to remove this lint, remove the `else` or remove the new line between \\\n+                             `else` and `{}`\",\n+                            else_desc,\n+                        ),\n                     );\n                 }\n             }\n@@ -200,32 +223,47 @@ fn check_array(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n     }\n }\n \n-/// Implementation of the `SUSPICIOUS_ELSE_FORMATTING` lint for consecutive ifs.\n-fn check_consecutive_ifs(cx: &EarlyContext<'_>, first: &ast::Expr, second: &ast::Expr) {\n+fn check_missing_else(cx: &EarlyContext<'_>, first: &ast::Expr, second: &ast::Expr) {\n     if !differing_macro_contexts(first.span, second.span)\n         && !in_macro(first.span)\n         && unsugar_if(first).is_some()\n-        && unsugar_if(second).is_some()\n+        && (is_block(second) || unsugar_if(second).is_some())\n     {\n         // where the else would be\n         let else_span = first.span.between(second.span);\n \n         if let Some(else_snippet) = snippet_opt(cx, else_span) {\n             if !else_snippet.contains('\\n') {\n+                let (looks_like, next_thing) = if unsugar_if(second).is_some() {\n+                    (\"an `else if`\", \"the second `if`\")\n+                } else {\n+                    (\"an `else {..}`\", \"the next block\")\n+                };\n+\n                 span_note_and_lint(\n                     cx,\n                     SUSPICIOUS_ELSE_FORMATTING,\n                     else_span,\n-                    \"this looks like an `else if` but the `else` is missing\",\n+                    &format!(\"this looks like {} but the `else` is missing\", looks_like),\n                     else_span,\n-                    \"to remove this lint, add the missing `else` or add a new line before the second \\\n-                     `if`\",\n+                    &format!(\n+                        \"to remove this lint, add the missing `else` or add a new line before {}\",\n+                        next_thing,\n+                    ),\n                 );\n             }\n         }\n     }\n }\n \n+fn is_block(expr: &ast::Expr) -> bool {\n+    if let ast::ExprKind::Block(..) = expr.node {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n /// Match `if` or `if let` expressions and return the `then` and `else` block.\n fn unsugar_if(expr: &ast::Expr) -> Option<(&P<ast::Block>, &Option<P<ast::Expr>>)> {\n     match expr.node {"}, {"sha": "b74f778b129dfb17344706756b60619d54bb9fd1", "filename": "tests/ui/formatting.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d9cc71fc421da370d8b19a369ffa127cb17c2536/tests%2Fui%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9cc71fc421da370d8b19a369ffa127cb17c2536/tests%2Fui%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.rs?ref=d9cc71fc421da370d8b19a369ffa127cb17c2536", "patch": "@@ -16,7 +16,11 @@\n fn foo() -> bool { true }\n \n fn main() {\n-    // weird `else if` formatting:\n+    // weird `else` formatting:\n+    if foo() {\n+    } {\n+    }\n+\n     if foo() {\n     } if foo() {\n     }\n@@ -41,6 +45,17 @@ fn main() {\n         let _ = 0;\n     };\n \n+    if foo() {\n+    } else\n+    {\n+    }\n+\n+    if foo() {\n+    }\n+    else\n+    {\n+    }\n+\n     if foo() {\n     } else\n     if foo() { // the span of the above error should continue here\n@@ -53,6 +68,20 @@ fn main() {\n     }\n \n     // those are ok:\n+    if foo() {\n+    }\n+    {\n+    }\n+\n+    if foo() {\n+    } else {\n+    }\n+\n+    if foo() {\n+    }\n+    else {\n+    }\n+\n     if foo() {\n     }\n     if foo() {"}, {"sha": "9f00a51bc1fd4a985c9e92ab9b92f96b807d6199", "filename": "tests/ui/formatting.stderr", "status": "modified", "additions": 75, "deletions": 46, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/d9cc71fc421da370d8b19a369ffa127cb17c2536/tests%2Fui%2Fformatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9cc71fc421da370d8b19a369ffa127cb17c2536/tests%2Fui%2Fformatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.stderr?ref=d9cc71fc421da370d8b19a369ffa127cb17c2536", "patch": "@@ -1,90 +1,119 @@\n-error: this looks like an `else if` but the `else` is missing\n+error: this looks like an `else {..}` but the `else` is missing\n   --> $DIR/formatting.rs:21:6\n    |\n-21 |     } if foo() {\n+21 |     } {\n    |      ^\n    |\n    = note: `-D clippy::suspicious-else-formatting` implied by `-D warnings`\n+   = note: to remove this lint, add the missing `else` or add a new line before the next block\n+\n+error: this looks like an `else if` but the `else` is missing\n+  --> $DIR/formatting.rs:25:6\n+   |\n+25 |     } if foo() {\n+   |      ^\n+   |\n    = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n \n error: this looks like an `else if` but the `else` is missing\n-  --> $DIR/formatting.rs:28:10\n+  --> $DIR/formatting.rs:32:10\n    |\n-28 |         } if foo() {\n+32 |         } if foo() {\n    |          ^\n    |\n    = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n \n error: this looks like an `else if` but the `else` is missing\n-  --> $DIR/formatting.rs:36:10\n+  --> $DIR/formatting.rs:40:10\n    |\n-36 |         } if foo() {\n+40 |         } if foo() {\n    |          ^\n    |\n    = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n \n+error: this is an `else {..}` but the formatting might hide it\n+  --> $DIR/formatting.rs:49:6\n+   |\n+49 |       } else\n+   |  ______^\n+50 | |     {\n+   | |____^\n+   |\n+   = note: to remove this lint, remove the `else` or remove the new line between `else` and `{..}`\n+\n+error: this is an `else {..}` but the formatting might hide it\n+  --> $DIR/formatting.rs:54:6\n+   |\n+54 |       }\n+   |  ______^\n+55 | |     else\n+56 | |     {\n+   | |____^\n+   |\n+   = note: to remove this lint, remove the `else` or remove the new line between `else` and `{..}`\n+\n error: this is an `else if` but the formatting might hide it\n-  --> $DIR/formatting.rs:45:6\n+  --> $DIR/formatting.rs:60:6\n    |\n-45 |       } else\n+60 |       } else\n    |  ______^\n-46 | |     if foo() { // the span of the above error should continue here\n+61 | |     if foo() { // the span of the above error should continue here\n    | |____^\n    |\n    = note: to remove this lint, remove the `else` or remove the new line between `else` and `if`\n \n error: this is an `else if` but the formatting might hide it\n-  --> $DIR/formatting.rs:50:6\n+  --> $DIR/formatting.rs:65:6\n    |\n-50 |       }\n+65 |       }\n    |  ______^\n-51 | |     else\n-52 | |     if foo() { // the span of the above error should continue here\n+66 | |     else\n+67 | |     if foo() { // the span of the above error should continue here\n    | |____^\n    |\n    = note: to remove this lint, remove the `else` or remove the new line between `else` and `if`\n \n error: this looks like you are trying to use `.. -= ..`, but you really are doing `.. = (- ..)`\n-  --> $DIR/formatting.rs:77:6\n-   |\n-77 |     a =- 35;\n-   |      ^^^^\n-   |\n-   = note: `-D clippy::suspicious-assignment-formatting` implied by `-D warnings`\n-   = note: to remove this lint, use either `-=` or `= -`\n+   --> $DIR/formatting.rs:106:6\n+    |\n+106 |     a =- 35;\n+    |      ^^^^\n+    |\n+    = note: `-D clippy::suspicious-assignment-formatting` implied by `-D warnings`\n+    = note: to remove this lint, use either `-=` or `= -`\n \n error: this looks like you are trying to use `.. *= ..`, but you really are doing `.. = (* ..)`\n-  --> $DIR/formatting.rs:78:6\n-   |\n-78 |     a =* &191;\n-   |      ^^^^\n-   |\n-   = note: to remove this lint, use either `*=` or `= *`\n+   --> $DIR/formatting.rs:107:6\n+    |\n+107 |     a =* &191;\n+    |      ^^^^\n+    |\n+    = note: to remove this lint, use either `*=` or `= *`\n \n error: this looks like you are trying to use `.. != ..`, but you really are doing `.. = (! ..)`\n-  --> $DIR/formatting.rs:81:6\n-   |\n-81 |     b =! false;\n-   |      ^^^^\n-   |\n-   = note: to remove this lint, use either `!=` or `= !`\n+   --> $DIR/formatting.rs:110:6\n+    |\n+110 |     b =! false;\n+    |      ^^^^\n+    |\n+    = note: to remove this lint, use either `!=` or `= !`\n \n error: possibly missing a comma here\n-  --> $DIR/formatting.rs:90:19\n-   |\n-90 |         -1, -2, -3 // <= no comma here\n-   |                   ^\n-   |\n-   = note: `-D clippy::possible-missing-comma` implied by `-D warnings`\n-   = note: to remove this lint, add a comma or write the expr in a single line\n+   --> $DIR/formatting.rs:119:19\n+    |\n+119 |         -1, -2, -3 // <= no comma here\n+    |                   ^\n+    |\n+    = note: `-D clippy::possible-missing-comma` implied by `-D warnings`\n+    = note: to remove this lint, add a comma or write the expr in a single line\n \n error: possibly missing a comma here\n-  --> $DIR/formatting.rs:94:19\n-   |\n-94 |         -1, -2, -3 // <= no comma here\n-   |                   ^\n-   |\n-   = note: to remove this lint, add a comma or write the expr in a single line\n+   --> $DIR/formatting.rs:123:19\n+    |\n+123 |         -1, -2, -3 // <= no comma here\n+    |                   ^\n+    |\n+    = note: to remove this lint, add a comma or write the expr in a single line\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 13 previous errors\n "}]}