{"sha": "001185d863a2b49852f0fe2a955d250af0947bce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMTE4NWQ4NjNhMmI0OTg1MmYwZmUyYTk1NWQyNTBhZjA5NDdiY2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-07T08:53:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-07T08:53:52Z"}, "message": "Auto merge of #6681 - 1c3t3a:1c3t3a-issue-6467, r=xFrednet,flip1995,phansch\n\nAdds a new lint that checks if there is a semicolon on the last block statement if it returns nothing\n\nchangelog: Added a new lint: `SEMICOLON_IF_NOTHING_RETURNED`\nfixes #6467\nAdds the `SEMICOLON_IF_NOTHING_RETURNED` lint and therefore closes #6467.", "tree": {"sha": "bc3d839c4d9fd5a978177c90fe1addbe0446f1f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc3d839c4d9fd5a978177c90fe1addbe0446f1f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/001185d863a2b49852f0fe2a955d250af0947bce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/001185d863a2b49852f0fe2a955d250af0947bce", "html_url": "https://github.com/rust-lang/rust/commit/001185d863a2b49852f0fe2a955d250af0947bce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/001185d863a2b49852f0fe2a955d250af0947bce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d51db24132fedaa5a3a0d8f97be27a0013123ce6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d51db24132fedaa5a3a0d8f97be27a0013123ce6", "html_url": "https://github.com/rust-lang/rust/commit/d51db24132fedaa5a3a0d8f97be27a0013123ce6"}, {"sha": "6b4789d7cf8d4165398985ff89dfdbaa5548d39a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b4789d7cf8d4165398985ff89dfdbaa5548d39a", "html_url": "https://github.com/rust-lang/rust/commit/6b4789d7cf8d4165398985ff89dfdbaa5548d39a"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "d0164d3be377f43f35c008897eb189f74d6521f9", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/001185d863a2b49852f0fe2a955d250af0947bce/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/001185d863a2b49852f0fe2a955d250af0947bce/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=001185d863a2b49852f0fe2a955d250af0947bce", "patch": "@@ -2185,6 +2185,7 @@ Released 2018-09-13\n [`same_item_push`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_item_push\n [`search_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some\n [`self_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_assignment\n+[`semicolon_if_nothing_returned`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\n [`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse\n [`shadow_reuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\n [`shadow_same`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_same"}, {"sha": "e2c325a76478b60630c78bd777ffd894bad8e938", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/001185d863a2b49852f0fe2a955d250af0947bce/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001185d863a2b49852f0fe2a955d250af0947bce/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=001185d863a2b49852f0fe2a955d250af0947bce", "patch": "@@ -310,6 +310,7 @@ mod regex;\n mod repeat_once;\n mod returns;\n mod self_assignment;\n+mod semicolon_if_nothing_returned;\n mod serde_api;\n mod shadow;\n mod single_component_path_imports;\n@@ -876,6 +877,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &returns::LET_AND_RETURN,\n         &returns::NEEDLESS_RETURN,\n         &self_assignment::SELF_ASSIGNMENT,\n+        &semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED,\n         &serde_api::SERDE_API_MISUSE,\n         &shadow::SHADOW_REUSE,\n         &shadow::SHADOW_SAME,\n@@ -1237,6 +1239,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box manual_unwrap_or::ManualUnwrapOr);\n     store.register_late_pass(|| box manual_ok_or::ManualOkOr);\n     store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n+    store.register_late_pass(|| box semicolon_if_nothing_returned::SemicolonIfNothingReturned);\n     store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n     let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));\n@@ -1291,6 +1294,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&panic_unimplemented::UNIMPLEMENTED),\n         LintId::of(&panic_unimplemented::UNREACHABLE),\n         LintId::of(&pattern_type_mismatch::PATTERN_TYPE_MISMATCH),\n+        LintId::of(&semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED),\n         LintId::of(&shadow::SHADOW_REUSE),\n         LintId::of(&shadow::SHADOW_SAME),\n         LintId::of(&strings::STRING_ADD),"}, {"sha": "839c995e52562ab795b3c3e2dfc26b9ad62d06d9", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/001185d863a2b49852f0fe2a955d250af0947bce/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001185d863a2b49852f0fe2a955d250af0947bce/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=001185d863a2b49852f0fe2a955d250af0947bce", "patch": "@@ -0,0 +1,66 @@\n+use crate::utils::{in_macro, snippet_with_macro_callsite, span_lint_and_sugg, sugg};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Block, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Looks for blocks of expressions and fires if the last expression returns `()`\n+    /// but is not followed by a semicolon.\n+    ///\n+    /// **Why is this bad?** The semicolon might be optional but when\n+    /// extending the block with new code, it doesn't require a change in previous last line.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// fn main() {\n+    ///     println!(\"Hello world\")\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn main() {\n+    ///     println!(\"Hello world\");\n+    /// }\n+    /// ```\n+    pub SEMICOLON_IF_NOTHING_RETURNED,\n+    restriction,\n+    \"add a semicolon if nothing is returned\"\n+}\n+\n+declare_lint_pass!(SemicolonIfNothingReturned => [SEMICOLON_IF_NOTHING_RETURNED]);\n+\n+impl LateLintPass<'_> for SemicolonIfNothingReturned {\n+    fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>) {\n+        if_chain! {\n+            if !in_macro(block.span);\n+            if let Some(expr) = block.expr;\n+            let t_expr = cx.typeck_results().expr_ty(expr);\n+            if t_expr.is_unit();\n+            if let snippet = snippet_with_macro_callsite(cx, expr.span, \"}\");\n+            if !snippet.ends_with('}');\n+            then {\n+                // filter out the desugared `for` loop\n+                if let ExprKind::DropTemps(..) = &expr.kind {\n+                    return;\n+                }\n+\n+                let sugg = sugg::Sugg::hir_with_macro_callsite(cx, &expr, \"..\");\n+                let suggestion = format!(\"{0};\", sugg);\n+                span_lint_and_sugg(\n+                    cx,\n+                    SEMICOLON_IF_NOTHING_RETURNED,\n+                    expr.span.source_callsite(),\n+                    \"consider adding a `;` to the last statement for consistent formatting\",\n+                    \"add a `;` here\",\n+                    suggestion,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "0abe2cca26757325fc4f7d16c45d9d07ea5912f2", "filename": "tests/ui/semicolon_if_nothing_returned.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/001185d863a2b49852f0fe2a955d250af0947bce/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001185d863a2b49852f0fe2a955d250af0947bce/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.rs?ref=001185d863a2b49852f0fe2a955d250af0947bce", "patch": "@@ -0,0 +1,55 @@\n+#![warn(clippy::semicolon_if_nothing_returned)]\n+#![feature(label_break_value)]\n+\n+fn get_unit() {}\n+\n+// the functions below trigger the lint\n+fn main() {\n+    println!(\"Hello\")\n+}\n+\n+fn hello() {\n+    get_unit()\n+}\n+\n+fn basic101(x: i32) {\n+    let y: i32;\n+    y = x + 1\n+}\n+\n+// this is fine\n+fn print_sum(a: i32, b: i32) {\n+    println!(\"{}\", a + b);\n+    assert_eq!(true, false);\n+}\n+\n+fn foo(x: i32) {\n+    let y: i32;\n+    if x < 1 {\n+        y = 4;\n+    } else {\n+        y = 5;\n+    }\n+}\n+\n+fn bar(x: i32) {\n+    let y: i32;\n+    match x {\n+        1 => y = 4,\n+        _ => y = 32,\n+    }\n+}\n+\n+fn foobar(x: i32) {\n+    let y: i32;\n+    'label: {\n+        y = x + 1;\n+    }\n+}\n+\n+fn loop_test(x: i32) {\n+    let y: i32;\n+    for &ext in &[\"stdout\", \"stderr\", \"fixed\"] {\n+        println!(\"{}\", ext);\n+    }\n+}"}, {"sha": "b73f89675383f12d53aeb4298898502c443af5b0", "filename": "tests/ui/semicolon_if_nothing_returned.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/001185d863a2b49852f0fe2a955d250af0947bce/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/001185d863a2b49852f0fe2a955d250af0947bce/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr?ref=001185d863a2b49852f0fe2a955d250af0947bce", "patch": "@@ -0,0 +1,22 @@\n+error: consider adding a `;` to the last statement for consistent formatting\n+  --> $DIR/semicolon_if_nothing_returned.rs:8:5\n+   |\n+LL |     println!(\"Hello\")\n+   |     ^^^^^^^^^^^^^^^^^ help: add a `;` here: `println!(\"Hello\");`\n+   |\n+   = note: `-D clippy::semicolon-if-nothing-returned` implied by `-D warnings`\n+\n+error: consider adding a `;` to the last statement for consistent formatting\n+  --> $DIR/semicolon_if_nothing_returned.rs:12:5\n+   |\n+LL |     get_unit()\n+   |     ^^^^^^^^^^ help: add a `;` here: `get_unit();`\n+\n+error: consider adding a `;` to the last statement for consistent formatting\n+  --> $DIR/semicolon_if_nothing_returned.rs:17:5\n+   |\n+LL |     y = x + 1\n+   |     ^^^^^^^^^ help: add a `;` here: `y = x + 1;`\n+\n+error: aborting due to 3 previous errors\n+"}]}