{"sha": "589aa8e29c8b21a450ea6a78a387f6c0ac060fa4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4OWFhOGUyOWM4YjIxYTQ1MGVhNmE3OGEzODdmNmMwYWMwNjBmYTQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-12-31T08:43:30Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-12-31T08:43:30Z"}, "message": "Reuse Box::try_new_*_in() in Box::new_*_in()", "tree": {"sha": "2618f556a7cd5a3d198f3cdd1a6235efb45cf402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2618f556a7cd5a3d198f3cdd1a6235efb45cf402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/589aa8e29c8b21a450ea6a78a387f6c0ac060fa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/589aa8e29c8b21a450ea6a78a387f6c0ac060fa4", "html_url": "https://github.com/rust-lang/rust/commit/589aa8e29c8b21a450ea6a78a387f6c0ac060fa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/589aa8e29c8b21a450ea6a78a387f6c0ac060fa4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb15fa1da0501324783d901ddb7d9d7e1ba53080", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb15fa1da0501324783d901ddb7d9d7e1ba53080", "html_url": "https://github.com/rust-lang/rust/commit/bb15fa1da0501324783d901ddb7d9d7e1ba53080"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "4391176c8bee0027300d3260e10c4649e71976c0", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/589aa8e29c8b21a450ea6a78a387f6c0ac060fa4/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/589aa8e29c8b21a450ea6a78a387f6c0ac060fa4/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=589aa8e29c8b21a450ea6a78a387f6c0ac060fa4", "patch": "@@ -387,8 +387,7 @@ impl<T, A: Allocator> Box<T, A> {\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n-        let ptr = alloc.allocate(layout).unwrap_or_else(|_| handle_alloc_error(layout)).cast();\n-        unsafe { Box::from_raw_in(ptr.as_ptr(), alloc) }\n+        Box::try_new_uninit_in(alloc).unwrap_or_else(|_| handle_alloc_error(layout))\n     }\n \n     /// Constructs a new box with uninitialized contents in the provided allocator,\n@@ -445,9 +444,7 @@ impl<T, A: Allocator> Box<T, A> {\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n-        let ptr =\n-            alloc.allocate_zeroed(layout).unwrap_or_else(|_| handle_alloc_error(layout)).cast();\n-        unsafe { Box::from_raw_in(ptr.as_ptr(), alloc) }\n+        Box::try_new_zeroed_in(alloc).unwrap_or_else(|_| handle_alloc_error(layout))\n     }\n \n     /// Constructs a new `Box` with uninitialized contents, with the memory"}]}