{"sha": "0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMzZmZmY0ZDdjMGYxZDMxNGU0ZTU1MGJiYjhlMDIzYmIzM2JhMjA=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-01T21:36:33Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-02T11:43:45Z"}, "message": "make the metadata lock more robust and bump the metadata encoding version\n\ncheck the metadata lock when loading rather than afterwards\n\nFixes #33733\nFixes #33015", "tree": {"sha": "bee94b9ee111386dce9083f32e66d09edfc7d523", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bee94b9ee111386dce9083f32e66d09edfc7d523"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20", "html_url": "https://github.com/rust-lang/rust/commit/0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c333ebbe633256f5e3a0a3c313b70bc94e31118b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c333ebbe633256f5e3a0a3c313b70bc94e31118b", "html_url": "https://github.com/rust-lang/rust/commit/c333ebbe633256f5e3a0a3c313b70bc94e31118b"}], "stats": {"total": 69, "additions": 38, "deletions": 31}, "files": [{"sha": "ff072cce5db9667ccd5cb998ee0cdcb6384cdd78", "filename": "src/librustc_metadata/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20/src%2Flibrustc_metadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20/src%2Flibrustc_metadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcommon.rs?ref=0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20", "patch": "@@ -252,3 +252,7 @@ pub fn rustc_version() -> String {\n }\n \n pub const tag_panic_strategy: usize = 0x114;\n+\n+// NB: increment this if you change the format of metadata such that\n+// rustc_version can't be found.\n+pub const metadata_encoding_version : &'static [u8] = &[b'r', b'u', b's', b't', 0, 0, 0, 2];"}, {"sha": "269e284b22d6cb268d3d5aceca737da1fc90be13", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20", "patch": "@@ -12,7 +12,6 @@\n \n //! Validates all used crates and extern libraries and loads their metadata\n \n-use common::rustc_version;\n use cstore::{self, CStore, CrateSource, MetadataBlob};\n use decoder;\n use loader::{self, CratePaths};\n@@ -236,25 +235,6 @@ impl<'a> CrateReader<'a> {\n         return ret;\n     }\n \n-    fn verify_rustc_version(&self,\n-                            name: &str,\n-                            span: Span,\n-                            metadata: &MetadataBlob) {\n-        let crate_rustc_version = decoder::crate_rustc_version(metadata.as_slice());\n-        if crate_rustc_version != Some(rustc_version()) {\n-            let mut err = struct_span_fatal!(self.sess, span, E0514,\n-                                             \"the crate `{}` has been compiled with {}, which is \\\n-                                              incompatible with this version of rustc\",\n-                                              name,\n-                                              crate_rustc_version\n-                                              .as_ref().map(|s| &**s)\n-                                              .unwrap_or(\"an old version of rustc\"));\n-            err.help(\"consider removing the compiled binaries and recompiling \\\n-                      with your current version of rustc\");\n-            err.emit();\n-        }\n-    }\n-\n     fn verify_no_symbol_conflicts(&self,\n                                   span: Span,\n                                   metadata: &MetadataBlob) {\n@@ -296,7 +276,6 @@ impl<'a> CrateReader<'a> {\n                       explicitly_linked: bool)\n                       -> (ast::CrateNum, Rc<cstore::CrateMetadata>,\n                           cstore::CrateSource) {\n-        self.verify_rustc_version(name, span, &lib.metadata);\n         self.verify_no_symbol_conflicts(span, &lib.metadata);\n \n         // Claim this crate number and cache it\n@@ -381,6 +360,7 @@ impl<'a> CrateReader<'a> {\n                     rejected_via_hash: vec!(),\n                     rejected_via_triple: vec!(),\n                     rejected_via_kind: vec!(),\n+                    rejected_via_version: vec!(),\n                     should_match_name: true,\n                 };\n                 match self.load(&mut load_ctxt) {\n@@ -517,6 +497,7 @@ impl<'a> CrateReader<'a> {\n             rejected_via_hash: vec!(),\n             rejected_via_triple: vec!(),\n             rejected_via_kind: vec!(),\n+            rejected_via_version: vec!(),\n             should_match_name: true,\n         };\n         let library = self.load(&mut load_ctxt).or_else(|| {"}, {"sha": "95e3c53ecb40245e420bff18e81a92d8c9bb6b2e", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use cstore;\n+use common;\n use decoder;\n use encoder;\n use loader;\n@@ -588,7 +589,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n \n     fn metadata_encoding_version(&self) -> &[u8]\n     {\n-        encoder::metadata_encoding_version\n+        common::metadata_encoding_version\n     }\n \n     /// Returns a map from a sufficiently visible external item (i.e. an external item that is"}, {"sha": "e0aba86db416b710606f51b3a0ad6ea29c7f308f", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20", "patch": "@@ -1799,10 +1799,6 @@ fn encode_panic_strategy(rbml_w: &mut Encoder, ecx: &EncodeContext) {\n     }\n }\n \n-// NB: Increment this as you change the metadata encoding version.\n-#[allow(non_upper_case_globals)]\n-pub const metadata_encoding_version : &'static [u8] = &[b'r', b'u', b's', b't', 0, 0, 0, 2 ];\n-\n pub fn encode_metadata(ecx: EncodeContext, krate: &hir::Crate) -> Vec<u8> {\n     let mut wr = Cursor::new(Vec::new());\n "}, {"sha": "03d2b6b30da31df2cde2fc4bc9c6e174e3850100", "filename": "src/librustc_metadata/loader.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20", "patch": "@@ -213,8 +213,8 @@\n //! metadata::loader or metadata::creader for all the juicy details!\n \n use cstore::{MetadataBlob, MetadataVec, MetadataArchive};\n+use common::{metadata_encoding_version, rustc_version};\n use decoder;\n-use encoder;\n \n use rustc::hir::svh::Svh;\n use rustc::session::Session;\n@@ -260,6 +260,7 @@ pub struct Context<'a> {\n     pub rejected_via_hash: Vec<CrateMismatch>,\n     pub rejected_via_triple: Vec<CrateMismatch>,\n     pub rejected_via_kind: Vec<CrateMismatch>,\n+    pub rejected_via_version: Vec<CrateMismatch>,\n     pub should_match_name: bool,\n }\n \n@@ -336,6 +337,10 @@ impl<'a> Context<'a> {\n             struct_span_err!(self.sess, self.span, E0462,\n                              \"found staticlib `{}` instead of rlib or dylib{}\",\n                              self.ident, add)\n+        } else if !self.rejected_via_version.is_empty() {\n+            struct_span_err!(self.sess, self.span, E0514,\n+                             \"found crate `{}` compiled by an incompatible version of rustc{}\",\n+                             self.ident, add)\n         } else {\n             struct_span_err!(self.sess, self.span, E0463,\n                              \"can't find crate for `{}`{}\",\n@@ -350,7 +355,7 @@ impl<'a> Context<'a> {\n             }\n         }\n         if !self.rejected_via_hash.is_empty() {\n-            err.note(\"perhaps this crate needs to be recompiled?\");\n+            err.note(\"perhaps that crate needs to be recompiled?\");\n             let mismatches = self.rejected_via_hash.iter();\n             for (i, &CrateMismatch{ ref path, .. }) in mismatches.enumerate() {\n                 err.note(&format!(\"crate `{}` path #{}: {}\",\n@@ -367,13 +372,22 @@ impl<'a> Context<'a> {\n             }\n         }\n         if !self.rejected_via_kind.is_empty() {\n-            err.help(\"please recompile this crate using --crate-type lib\");\n+            err.help(\"please recompile that crate using --crate-type lib\");\n             let mismatches = self.rejected_via_kind.iter();\n             for (i, &CrateMismatch { ref path, .. }) in mismatches.enumerate() {\n                 err.note(&format!(\"crate `{}` path #{}: {}\",\n                                   self.ident, i+1, path.display()));\n             }\n         }\n+        if !self.rejected_via_version.is_empty() {\n+            err.help(&format!(\"please recompile that crate using this compiler ({})\",\n+                              rustc_version()));\n+            let mismatches = self.rejected_via_version.iter();\n+            for (i, &CrateMismatch { ref path, ref got }) in mismatches.enumerate() {\n+                err.note(&format!(\"crate `{}` path #{}: {} compiled by {:?}\",\n+                                  self.ident, i+1, path.display(), got));\n+            }\n+        }\n \n         err.emit();\n         self.sess.abort_if_errors();\n@@ -591,6 +605,17 @@ impl<'a> Context<'a> {\n     }\n \n     fn crate_matches(&mut self, crate_data: &[u8], libpath: &Path) -> Option<Svh> {\n+        let crate_rustc_version = decoder::crate_rustc_version(crate_data);\n+        if crate_rustc_version != Some(rustc_version()) {\n+            let message = crate_rustc_version.unwrap_or(format!(\"an unknown compiler\"));\n+            info!(\"Rejecting via version: expected {} got {}\", rustc_version(), message);\n+            self.rejected_via_version.push(CrateMismatch {\n+                path: libpath.to_path_buf(),\n+                got: message\n+            });\n+            return None;\n+        }\n+\n         if self.should_match_name {\n             match decoder::maybe_get_crate_name(crate_data) {\n                 Some(ref name) if self.crate_name == *name => {}\n@@ -801,12 +826,12 @@ fn get_metadata_section_imp(target: &Target, flavor: CrateFlavor, filename: &Pat\n                 let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n                 let csz = llvm::LLVMGetSectionSize(si.llsi) as usize;\n                 let cvbuf: *const u8 = cbuf as *const u8;\n-                let vlen = encoder::metadata_encoding_version.len();\n+                let vlen = metadata_encoding_version.len();\n                 debug!(\"checking {} bytes of metadata-version stamp\",\n                        vlen);\n                 let minsz = cmp::min(vlen, csz);\n                 let buf0 = slice::from_raw_parts(cvbuf, minsz);\n-                let version_ok = buf0 == encoder::metadata_encoding_version;\n+                let version_ok = buf0 == metadata_encoding_version;\n                 if !version_ok {\n                     return Err((format!(\"incompatible metadata version found: '{}'\",\n                                         filename.display())));"}]}