{"sha": "9946def7e224a2009e7ca3ca7f4ac032aeb0eb42", "node_id": "C_kwDOAAsO6NoAKDk5NDZkZWY3ZTIyNGEyMDA5ZTdjYTNjYTdmNGFjMDMyYWViMGViNDI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-11T14:49:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-11T14:49:29Z"}, "message": "Merge #10877\n\n10877: feat: make hightlighting linear r=matklad a=matklad\n\nIn https://youtu.be/qvIZZf5dmTE, we've noticed that AstIdMap does a\r\nlinear lookup when going from SyntaxNode to Id. This leads to\r\naccidentally quadratic overall performance. Replace linear lookup with a\r\nO(1) hashmap lookup.\r\n\r\nFuture work: don't duplicate `SyntaxNodePtr` in `AstIdMap` and switch to\r\n\"call site dependency injection\" style storage (eg, store a\r\n`HashSet<ErasedFileAstId>`).\r\n\r\nSee the explanation of the work here on YouTube :-)\r\n\r\nAs you can see from then benchmark results, this doesn't actually make analysis stats fastre. I am a bit mystified as to why this is happening to be honest. \r\n\r\nBaseline\r\n```\r\nDatabase loaded:     598.40ms, 304minstr, 118mb (metadata 390.57ms, 21minstr, 841kb; build 111.31ms, 8764kinstr, -214kb)\r\n  crates: 39, mods: 824, decls: 18647, fns: 13910\r\nItem Collection:     9.70s, 75ginstr, 377mb\r\n  exprs: 382426, ??ty: 387 (0%), ?ty: 285 (0%), !ty: 145\r\nInference:           43.16s, 342ginstr, 641mb\r\nTotal:               52.86s, 417ginstr, 1018mb\r\n```\r\n\r\nThis PR:\r\n```\r\nDatabase loaded:     626.34ms, 304minstr, 118mb (metadata 416.26ms, 21minstr, 841kb; build 113.67ms, 8750kinstr, -209kb)\r\n  crates: 39, mods: 824, decls: 18647, fns: 13910\r\nItem Collection:     10.16s, 75ginstr, 389mb\r\n  exprs: 382426, ??ty: 387 (0%), ?ty: 285 (0%), !ty: 145\r\nInference:           44.51s, 342ginstr, 644mb\r\nTotal:               54.67s, 417ginstr, 1034mb\r\n```\r\n\r\nI think we probably should merge the first commit here, but not the second. \n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "cbd99eb93557546ca7a8f8b3b9a32c06d328c361", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbd99eb93557546ca7a8f8b3b9a32c06d328c361"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9946def7e224a2009e7ca3ca7f4ac032aeb0eb42", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhtLp5CRBK7hj4Ov3rIwAA3KgIAFE5Dxzlohw5UMLh0BKFkt3w\nD6EPgrCJnACm5lpPoz0In20zltVatVLHSYfTuiXACWBAGv37TMIHgWzNp2zfvkrt\n+Svl/Z20l+Gzoj6GFny3UVSBtIaWTx+kl9xmE6Kz4DKLI8q8Bc8PMpZXd4MaZfym\nhv32m0MZsuMZ9lMXkH8IQX8ovjWXbX4OS+OJ7zgETcrEbWNQKiN3khBBbjqxKoko\n4YxLYfXWEc/mJkwqTwQaZyR5ceco3Et+5yUxrfPNpKiGAoLes8Dzy523ZQ/m3VEh\npu+m8e/4J8r76wjgFH2Lr/4nXHdW/nZpW/C5Vb4rmlszflevIxldpbqFWV/AI18=\n=6rRv\n-----END PGP SIGNATURE-----\n", "payload": "tree cbd99eb93557546ca7a8f8b3b9a32c06d328c361\nparent 31373271826691bece032326ec7b8d291441db6c\nparent 278e7c33115a448eb7bbe6420404331c1820f1af\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1639234169 +0000\ncommitter GitHub <noreply@github.com> 1639234169 +0000\n\nMerge #10877\n\n10877: feat: make hightlighting linear r=matklad a=matklad\n\nIn https://youtu.be/qvIZZf5dmTE, we've noticed that AstIdMap does a\r\nlinear lookup when going from SyntaxNode to Id. This leads to\r\naccidentally quadratic overall performance. Replace linear lookup with a\r\nO(1) hashmap lookup.\r\n\r\nFuture work: don't duplicate `SyntaxNodePtr` in `AstIdMap` and switch to\r\n\"call site dependency injection\" style storage (eg, store a\r\n`HashSet<ErasedFileAstId>`).\r\n\r\nSee the explanation of the work here on YouTube :-)\r\n\r\nAs you can see from then benchmark results, this doesn't actually make analysis stats fastre. I am a bit mystified as to why this is happening to be honest. \r\n\r\nBaseline\r\n```\r\nDatabase loaded:     598.40ms, 304minstr, 118mb (metadata 390.57ms, 21minstr, 841kb; build 111.31ms, 8764kinstr, -214kb)\r\n  crates: 39, mods: 824, decls: 18647, fns: 13910\r\nItem Collection:     9.70s, 75ginstr, 377mb\r\n  exprs: 382426, ??ty: 387 (0%), ?ty: 285 (0%), !ty: 145\r\nInference:           43.16s, 342ginstr, 641mb\r\nTotal:               52.86s, 417ginstr, 1018mb\r\n```\r\n\r\nThis PR:\r\n```\r\nDatabase loaded:     626.34ms, 304minstr, 118mb (metadata 416.26ms, 21minstr, 841kb; build 113.67ms, 8750kinstr, -209kb)\r\n  crates: 39, mods: 824, decls: 18647, fns: 13910\r\nItem Collection:     10.16s, 75ginstr, 389mb\r\n  exprs: 382426, ??ty: 387 (0%), ?ty: 285 (0%), !ty: 145\r\nInference:           44.51s, 342ginstr, 644mb\r\nTotal:               54.67s, 417ginstr, 1034mb\r\n```\r\n\r\nI think we probably should merge the first commit here, but not the second. \n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9946def7e224a2009e7ca3ca7f4ac032aeb0eb42", "html_url": "https://github.com/rust-lang/rust/commit/9946def7e224a2009e7ca3ca7f4ac032aeb0eb42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9946def7e224a2009e7ca3ca7f4ac032aeb0eb42/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31373271826691bece032326ec7b8d291441db6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/31373271826691bece032326ec7b8d291441db6c", "html_url": "https://github.com/rust-lang/rust/commit/31373271826691bece032326ec7b8d291441db6c"}, {"sha": "278e7c33115a448eb7bbe6420404331c1820f1af", "url": "https://api.github.com/repos/rust-lang/rust/commits/278e7c33115a448eb7bbe6420404331c1820f1af", "html_url": "https://github.com/rust-lang/rust/commit/278e7c33115a448eb7bbe6420404331c1820f1af"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "0f9ac5e8c02bc381562d28dd52ec535404048a44", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9946def7e224a2009e7ca3ca7f4ac032aeb0eb42/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9946def7e224a2009e7ca3ca7f4ac032aeb0eb42/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9946def7e224a2009e7ca3ca7f4ac032aeb0eb42", "patch": "@@ -525,6 +525,7 @@ dependencies = [\n  \"cfg\",\n  \"cov-mark\",\n  \"either\",\n+ \"hashbrown\",\n  \"itertools\",\n  \"la-arena\",\n  \"limit\","}, {"sha": "039861f7f7bd66fa3af9c9f09726913212491683", "filename": "crates/hir_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9946def7e224a2009e7ca3ca7f4ac032aeb0eb42/crates%2Fhir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9946def7e224a2009e7ca3ca7f4ac032aeb0eb42/crates%2Fhir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2FCargo.toml?ref=9946def7e224a2009e7ca3ca7f4ac032aeb0eb42", "patch": "@@ -16,6 +16,7 @@ either = \"1.5.3\"\n rustc-hash = \"1.0.0\"\n la-arena = { version = \"0.3.0\", path = \"../../lib/arena\" }\n itertools = \"0.10.0\"\n+hashbrown = { version = \"0.11\", features = [\"inline-more\"], default-features = false }\n \n base_db = { path = \"../base_db\", version = \"0.0.0\" }\n cfg = { path = \"../cfg\", version = \"0.0.0\" }"}, {"sha": "43c8a3db5c5df41756265c668b47f7d4ff1b3c52", "filename": "crates/hir_expand/src/ast_id_map.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9946def7e224a2009e7ca3ca7f4ac032aeb0eb42/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9946def7e224a2009e7ca3ca7f4ac032aeb0eb42/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs?ref=9946def7e224a2009e7ca3ca7f4ac032aeb0eb42", "patch": "@@ -8,12 +8,13 @@\n use std::{\n     any::type_name,\n     fmt,\n-    hash::{Hash, Hasher},\n+    hash::{BuildHasher, BuildHasherDefault, Hash, Hasher},\n     marker::PhantomData,\n };\n \n use la_arena::{Arena, Idx};\n use profile::Count;\n+use rustc_hash::FxHasher;\n use syntax::{ast, match_ast, AstNode, AstPtr, SyntaxNode, SyntaxNodePtr};\n \n /// `AstId` points to an AST node in a specific file.\n@@ -60,12 +61,28 @@ impl<N: AstNode> FileAstId<N> {\n type ErasedFileAstId = Idx<SyntaxNodePtr>;\n \n /// Maps items' `SyntaxNode`s to `ErasedFileAstId`s and back.\n-#[derive(Debug, PartialEq, Eq, Default)]\n+#[derive(Default)]\n pub struct AstIdMap {\n+    /// Maps stable id to unstable ptr.\n     arena: Arena<SyntaxNodePtr>,\n+    /// Reverse: map ptr to id.\n+    map: hashbrown::HashMap<Idx<SyntaxNodePtr>, (), ()>,\n     _c: Count<Self>,\n }\n \n+impl fmt::Debug for AstIdMap {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"AstIdMap\").field(\"arena\", &self.arena).finish()\n+    }\n+}\n+\n+impl PartialEq for AstIdMap {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.arena == other.arena\n+    }\n+}\n+impl Eq for AstIdMap {}\n+\n impl AstIdMap {\n     pub(crate) fn from_source(node: &SyntaxNode) -> AstIdMap {\n         assert!(node.parent().is_none());\n@@ -89,6 +106,16 @@ impl AstIdMap {\n                 }\n             }\n         });\n+        res.map = hashbrown::HashMap::with_capacity_and_hasher(res.arena.len(), ());\n+        for (idx, ptr) in res.arena.iter() {\n+            let hash = hash_ptr(ptr);\n+            match res.map.raw_entry_mut().from_hash(hash, |idx2| *idx2 == idx) {\n+                hashbrown::hash_map::RawEntryMut::Occupied(_) => unreachable!(),\n+                hashbrown::hash_map::RawEntryMut::Vacant(entry) => {\n+                    entry.insert_with_hasher(hash, idx, (), |&idx| hash_ptr(&res.arena[idx]));\n+                }\n+            }\n+        }\n         res\n     }\n \n@@ -98,8 +125,9 @@ impl AstIdMap {\n     }\n     fn erased_ast_id(&self, item: &SyntaxNode) -> ErasedFileAstId {\n         let ptr = SyntaxNodePtr::new(item);\n-        match self.arena.iter().find(|(_id, i)| **i == ptr) {\n-            Some((it, _)) => it,\n+        let hash = hash_ptr(&ptr);\n+        match self.map.raw_entry().from_hash(hash, |&idx| self.arena[idx] == ptr) {\n+            Some((&idx, &())) => idx,\n             None => panic!(\n                 \"Can't find {:?} in AstIdMap:\\n{:?}\",\n                 item,\n@@ -117,6 +145,12 @@ impl AstIdMap {\n     }\n }\n \n+fn hash_ptr(ptr: &SyntaxNodePtr) -> u64 {\n+    let mut hasher = BuildHasherDefault::<FxHasher>::default().build_hasher();\n+    ptr.hash(&mut hasher);\n+    hasher.finish()\n+}\n+\n /// Walks the subtree in bdfs order, calling `f` for each node. What is bdfs\n /// order? It is a mix of breadth-first and depth first orders. Nodes for which\n /// `f` returns true are visited breadth-first, all the other nodes are explored"}]}