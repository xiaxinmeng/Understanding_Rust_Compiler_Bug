{"sha": "40f33a7a4c3cf928576429a89bca522b94b081cd", "node_id": "C_kwDOAAsO6NoAKDQwZjMzYTdhNGMzY2Y5Mjg1NzY0MjlhODliY2E1MjJiOTRiMDgxY2Q", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-12T04:57:40Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-12T05:13:45Z"}, "message": "Deduplicate box deref and regular deref suggestions", "tree": {"sha": "93fa30d7cbce514619cb2c370d12d076c24f156a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93fa30d7cbce514619cb2c370d12d076c24f156a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40f33a7a4c3cf928576429a89bca522b94b081cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40f33a7a4c3cf928576429a89bca522b94b081cd", "html_url": "https://github.com/rust-lang/rust/commit/40f33a7a4c3cf928576429a89bca522b94b081cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40f33a7a4c3cf928576429a89bca522b94b081cd/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72e74d7b9cf1a7901650227e74650f1fcc797600", "url": "https://api.github.com/repos/rust-lang/rust/commits/72e74d7b9cf1a7901650227e74650f1fcc797600", "html_url": "https://github.com/rust-lang/rust/commit/72e74d7b9cf1a7901650227e74650f1fcc797600"}], "stats": {"total": 83, "additions": 40, "deletions": 43}, "files": [{"sha": "62179821d233d0614e11d7e61fcacaef21946ee4", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/40f33a7a4c3cf928576429a89bca522b94b081cd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40f33a7a4c3cf928576429a89bca522b94b081cd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=40f33a7a4c3cf928576429a89bca522b94b081cd", "patch": "@@ -31,7 +31,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         error: TypeError<'tcx>,\n     ) {\n         self.annotate_expected_due_to_let_ty(err, expr, error);\n-        self.suggest_box_deref(err, expr, expected, expr_ty);\n         self.suggest_compatible_variants(err, expr, expected, expr_ty);\n         self.suggest_deref_ref_or_into(err, expr, expected, expr_ty, expected_ty_expr);\n         if self.suggest_calling_boxed_future_when_appropriate(err, expr, expected, expr_ty) {\n@@ -259,23 +258,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn suggest_box_deref(\n-        &self,\n-        err: &mut DiagnosticBuilder<'_>,\n-        expr: &hir::Expr<'_>,\n-        expected: Ty<'tcx>,\n-        expr_ty: Ty<'tcx>,\n-    ) {\n-        if expr_ty.is_box() && expr_ty.boxed_ty() == expected {\n-            err.span_suggestion_verbose(\n-                expr.span.shrink_to_lo(),\n-                \"try dereferencing the `Box`\",\n-                \"*\".to_string(),\n-                Applicability::MachineApplicable,\n-            );\n-        }\n-    }\n-\n     /// If the expected type is an enum (Issue #55250) with any variants whose\n     /// sole field is of the found type, suggest such variants. (Issue #42764)\n     fn suggest_compatible_variants(\n@@ -857,14 +839,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 Applicability::MachineApplicable,\n                                 false,\n                             ));\n-                        } else if self.infcx.type_is_copy_modulo_regions(\n-                            self.param_env,\n-                            expected,\n-                            sp,\n-                        ) {\n-                            // For this suggestion to make sense, the type would need to be `Copy`.\n+                        }\n+\n+                        // For this suggestion to make sense, the type would need to be `Copy`,\n+                        // or we have to be moving out of a `Box<T>`\n+                        if self.infcx.type_is_copy_modulo_regions(self.param_env, expected, sp)\n+                            || checked_ty.is_box()\n+                        {\n                             if let Ok(code) = sm.span_to_snippet(expr.span) {\n-                                let message = if checked_ty.is_region_ptr() {\n+                                let message = if checked_ty.is_box() {\n+                                    \"consider unboxing the value\"\n+                                } else if checked_ty.is_region_ptr() {\n                                     \"consider dereferencing the borrow\"\n                                 } else {\n                                     \"consider dereferencing the type\""}, {"sha": "2d29f0592e14bf6d41098f880d3591e37e3bff90", "filename": "src/test/ui/infinite/infinite-autoderef.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/40f33a7a4c3cf928576429a89bca522b94b081cd/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40f33a7a4c3cf928576429a89bca522b94b081cd/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr?ref=40f33a7a4c3cf928576429a89bca522b94b081cd", "patch": "@@ -2,9 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/infinite-autoderef.rs:20:13\n    |\n LL |         x = Box::new(x);\n-   |             ^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n-   |             |\n-   |             cyclic type of infinite size\n+   |             ^^^^^^^^^^^ cyclic type of infinite size\n+   |\n+help: consider unboxing the value\n+   |\n+LL |         x = *Box::new(x);\n+   |             +\n \n error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n   --> $DIR/infinite-autoderef.rs:25:5"}, {"sha": "b68c3fa5bcc9c478240e2e8af4260a3867765f4e", "filename": "src/test/ui/occurs-check-2.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/40f33a7a4c3cf928576429a89bca522b94b081cd/src%2Ftest%2Fui%2Foccurs-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40f33a7a4c3cf928576429a89bca522b94b081cd/src%2Ftest%2Fui%2Foccurs-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foccurs-check-2.stderr?ref=40f33a7a4c3cf928576429a89bca522b94b081cd", "patch": "@@ -2,9 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/occurs-check-2.rs:7:9\n    |\n LL |     f = Box::new(g);\n-   |         ^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n-   |         |\n-   |         cyclic type of infinite size\n+   |         ^^^^^^^^^^^ cyclic type of infinite size\n+   |\n+help: consider unboxing the value\n+   |\n+LL |     f = *Box::new(g);\n+   |         +\n \n error: aborting due to previous error\n "}, {"sha": "fdbbdc3abb377b68ffc65520a8a6324dc6d9a8cb", "filename": "src/test/ui/occurs-check.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/40f33a7a4c3cf928576429a89bca522b94b081cd/src%2Ftest%2Fui%2Foccurs-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40f33a7a4c3cf928576429a89bca522b94b081cd/src%2Ftest%2Fui%2Foccurs-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foccurs-check.stderr?ref=40f33a7a4c3cf928576429a89bca522b94b081cd", "patch": "@@ -2,9 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/occurs-check.rs:5:9\n    |\n LL |     f = Box::new(f);\n-   |         ^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n-   |         |\n-   |         cyclic type of infinite size\n+   |         ^^^^^^^^^^^ cyclic type of infinite size\n+   |\n+help: consider unboxing the value\n+   |\n+LL |     f = *Box::new(f);\n+   |         +\n \n error: aborting due to previous error\n "}, {"sha": "5a964c5d5cc6693e1667e60a7e1f647b42da75be", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/40f33a7a4c3cf928576429a89bca522b94b081cd/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40f33a7a4c3cf928576429a89bca522b94b081cd/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=40f33a7a4c3cf928576429a89bca522b94b081cd", "patch": "@@ -38,9 +38,12 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:17:9\n    |\n LL |     f = Box::new(f);\n-   |         ^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n-   |         |\n-   |         cyclic type of infinite size\n+   |         ^^^^^^^^^^^ cyclic type of infinite size\n+   |\n+help: consider unboxing the value\n+   |\n+LL |     f = *Box::new(f);\n+   |         +\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:21:9"}, {"sha": "e79be2f6127c1fb840e2f134cff6c6a93ab6c0e8", "filename": "src/test/ui/suggestions/boxed-variant-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40f33a7a4c3cf928576429a89bca522b94b081cd/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40f33a7a4c3cf928576429a89bca522b94b081cd/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.rs?ref=40f33a7a4c3cf928576429a89bca522b94b081cd", "patch": "@@ -8,7 +8,7 @@ fn foo(x: Ty) -> Ty {\n         Ty::Unit => Ty::Unit,\n         Ty::List(elem) => foo(elem),\n         //~^ ERROR mismatched types\n-        //~| HELP try dereferencing the `Box`\n+        //~| HELP consider unboxing the value\n         //~| HELP try wrapping\n     }\n }"}, {"sha": "4df8e7b20b7917f65e56c7c77d572c5c7f518853", "filename": "src/test/ui/suggestions/boxed-variant-field.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40f33a7a4c3cf928576429a89bca522b94b081cd/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40f33a7a4c3cf928576429a89bca522b94b081cd/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr?ref=40f33a7a4c3cf928576429a89bca522b94b081cd", "patch": "@@ -6,14 +6,14 @@ LL |         Ty::List(elem) => foo(elem),\n    |\n    = note: expected enum `Ty`\n             found struct `Box<Ty>`\n-help: try dereferencing the `Box`\n-   |\n-LL |         Ty::List(elem) => foo(*elem),\n-   |                               +\n help: try wrapping the expression in `Ty::List`\n    |\n LL |         Ty::List(elem) => foo(Ty::List(elem)),\n    |                               +++++++++    +\n+help: consider unboxing the value\n+   |\n+LL |         Ty::List(elem) => foo(*elem),\n+   |                               +\n \n error: aborting due to previous error\n "}, {"sha": "34d4d9eaded8ac167dc6bcbc7ec23c415dc37e68", "filename": "src/test/ui/terr-sorts.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40f33a7a4c3cf928576429a89bca522b94b081cd/src%2Ftest%2Fui%2Fterr-sorts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40f33a7a4c3cf928576429a89bca522b94b081cd/src%2Ftest%2Fui%2Fterr-sorts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterr-sorts.stderr?ref=40f33a7a4c3cf928576429a89bca522b94b081cd", "patch": "@@ -6,7 +6,7 @@ LL |     want_foo(b);\n    |\n    = note: expected struct `Foo`\n               found struct `Box<Foo>`\n-help: try dereferencing the `Box`\n+help: consider unboxing the value\n    |\n LL |     want_foo(*b);\n    |              +"}]}