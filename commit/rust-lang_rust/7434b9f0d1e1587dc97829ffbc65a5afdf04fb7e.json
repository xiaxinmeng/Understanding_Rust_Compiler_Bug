{"sha": "7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e", "node_id": "C_kwDOAAsO6NoAKDc0MzRiOWYwZDFlMTU4N2RjOTc4MjlmZmJjNjVhNWFmZGYwNGZiN2U", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-07T15:59:39Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-09T13:07:21Z"}, "message": "fixup lint name", "tree": {"sha": "7f7198896c076fe5ea9b22d0e63cce3203f2bcf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f7198896c076fe5ea9b22d0e63cce3203f2bcf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e", "html_url": "https://github.com/rust-lang/rust/commit/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c64bb1de14c58c76bbbcd0a5c1791e8d23b6443", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c64bb1de14c58c76bbbcd0a5c1791e8d23b6443", "html_url": "https://github.com/rust-lang/rust/commit/9c64bb1de14c58c76bbbcd0a5c1791e8d23b6443"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "145b31842ef6989a4b7429887b17520d35b85b88", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e", "patch": "@@ -246,7 +246,7 @@ pub trait Visitor<'ast>: Sized {\n macro_rules! walk_list {\n     ($visitor: expr, $method: ident, $list: expr $(, $($extra_args: expr),* )?) => {\n         {\n-            #[cfg_attr(not(bootstrap), allow(for_loop_over_fallibles))]\n+            #[cfg_attr(not(bootstrap), allow(for_loops_over_fallibles))]\n             for elem in $list {\n                 $visitor.$method(elem $(, $($extra_args,)* )?)\n             }"}, {"sha": "54f1f307ddd0e63daf2b365ee42788bed9f69ac8", "filename": "compiler/rustc_lint/src/for_loops_over_fallibles.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs?ref=7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e", "patch": "@@ -10,7 +10,7 @@ use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::TraitEngineExt;\n \n declare_lint! {\n-    /// The `for_loop_over_fallibles` lint checks for `for` loops over `Option` or `Result` values.\n+    /// The `for_loops_over_fallibles` lint checks for `for` loops over `Option` or `Result` values.\n     ///\n     /// ### Example\n     ///\n@@ -34,14 +34,14 @@ declare_lint! {\n     /// The \"intended\" use of `IntoIterator` implementations for `Option` and `Result` is passing them to\n     /// generic code that expects something implementing `IntoIterator`. For example using `.chain(option)`\n     /// to optionally add a value to an iterator.\n-    pub FOR_LOOP_OVER_FALLIBLES,\n+    pub FOR_LOOPS_OVER_FALLIBLES,\n     Warn,\n     \"for-looping over an `Option` or a `Result`, which is more clearly expressed as an `if let`\"\n }\n \n-declare_lint_pass!(ForLoopOverFallibles => [FOR_LOOP_OVER_FALLIBLES]);\n+declare_lint_pass!(ForLoopsOverFallibles => [FOR_LOOPS_OVER_FALLIBLES]);\n \n-impl<'tcx> LateLintPass<'tcx> for ForLoopOverFallibles {\n+impl<'tcx> LateLintPass<'tcx> for ForLoopsOverFallibles {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         let Some((pat, arg)) = extract_for_loop(expr) else { return };\n \n@@ -59,7 +59,7 @@ impl<'tcx> LateLintPass<'tcx> for ForLoopOverFallibles {\n             \"for loop over {article} `{ty}`. This is more readably written as an `if let` statement\",\n         );\n \n-        cx.struct_span_lint(FOR_LOOP_OVER_FALLIBLES, arg.span, |diag| {\n+        cx.struct_span_lint(FOR_LOOPS_OVER_FALLIBLES, arg.span, |diag| {\n             let mut warn = diag.build(msg);\n \n             if let Some(recv) = extract_iterator_next_call(cx, arg)", "previous_filename": "compiler/rustc_lint/src/for_loop_over_fallibles.rs"}, {"sha": "fee6e080c4fc7c377145d63dc24faa77ebd36460", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e", "patch": "@@ -52,7 +52,7 @@ mod early;\n mod enum_intrinsics_non_enums;\n mod errors;\n mod expect;\n-mod for_loop_over_fallibles;\n+mod for_loops_over_fallibles;\n pub mod hidden_unicode_codepoints;\n mod internal;\n mod late;\n@@ -87,7 +87,7 @@ use rustc_span::Span;\n use array_into_iter::ArrayIntoIter;\n use builtin::*;\n use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n-use for_loop_over_fallibles::*;\n+use for_loops_over_fallibles::*;\n use hidden_unicode_codepoints::*;\n use internal::*;\n use let_underscore::*;\n@@ -190,7 +190,7 @@ macro_rules! late_lint_mod_passes {\n         $macro!(\n             $args,\n             [\n-                ForLoopOverFallibles: ForLoopOverFallibles,\n+                ForLoopsOverFallibles: ForLoopsOverFallibles,\n                 HardwiredLints: HardwiredLints,\n                 ImproperCTypesDeclarations: ImproperCTypesDeclarations,\n                 ImproperCTypesDefinitions: ImproperCTypesDefinitions,"}, {"sha": "f36f7c268064f27e7b97cbfa1187803ec5811f66", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e", "patch": "@@ -57,7 +57,7 @@ fn test_get_resource() {\n }\n \n #[test]\n-#[cfg_attr(not(bootstrap), allow(for_loop_over_fallibles))]\n+#[cfg_attr(not(bootstrap), allow(for_loops_over_fallibles))]\n fn test_option_dance() {\n     let x = Some(());\n     let mut y = Some(5);"}, {"sha": "eea548c482ff2f9ffc08d61331b0dd873b8df9dc", "filename": "src/test/ui/issues/issue-30371.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e/src%2Ftest%2Fui%2Fissues%2Fissue-30371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e/src%2Ftest%2Fui%2Fissues%2Fissue-30371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30371.rs?ref=7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #![allow(unreachable_code)]\n-#![allow(for_loop_over_fallibles)]\n+#![allow(for_loops_over_fallibles)]\n #![deny(unused_variables)]\n \n fn main() {"}, {"sha": "96efdf85c490195fa84c51f3191990fe51f10c18", "filename": "src/test/ui/lint/for_loop_over_fallibles.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e/src%2Ftest%2Fui%2Flint%2Ffor_loop_over_fallibles.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e/src%2Ftest%2Fui%2Flint%2Ffor_loop_over_fallibles.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffor_loop_over_fallibles.stderr?ref=7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e", "patch": "@@ -4,7 +4,7 @@ warning: for loop over an `Option`. This is more readably written as an `if let`\n LL |     for _ in Some(1) {}\n    |              ^^^^^^^\n    |\n-   = note: `#[warn(for_loop_over_fallibles)]` on by default\n+   = note: `#[warn(for_loops_over_fallibles)]` on by default\n help: to check pattern in a loop use `while let`\n    |\n LL |     while let Some(_) = Some(1) {}"}, {"sha": "55fb3788a8b1a568c1e9b5d0c9be2327194f5238", "filename": "src/tools/clippy/tests/ui/for_loop_unfixable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loop_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loop_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loop_unfixable.rs?ref=7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e", "patch": "@@ -8,7 +8,7 @@\n     clippy::for_kv_map\n )]\n #[allow(clippy::linkedlist, clippy::unnecessary_mut_passed, clippy::similar_names)]\n-#[allow(for_loop_over_fallibles)]\n+#[allow(for_loops_over_fallibles)]\n fn main() {\n     let vec = vec![1, 2, 3, 4];\n "}, {"sha": "75cdcc02353f7425aa3f7b321eb64bbfa156f793", "filename": "src/tools/clippy/tests/ui/for_loops_over_fallibles.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffor_loops_over_fallibles.rs?ref=7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e", "patch": "@@ -1,6 +1,6 @@\n #![warn(clippy::for_loops_over_fallibles)]\n #![allow(clippy::uninlined_format_args)]\n-#![allow(for_loop_over_fallibles)]\n+#![allow(for_loops_over_fallibles)]\n \n fn for_loops_over_fallibles() {\n     let option = Some(1);"}]}